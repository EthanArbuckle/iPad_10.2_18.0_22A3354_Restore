uint64_t sub_100003A7C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_1000044EC(id a1)
{
  RCRecorderStyleProvider *v1;
  void *v2;

  v1 = objc_opt_new(RCRecorderStyleProvider);
  v2 = (void *)qword_1001ED818;
  qword_1001ED818 = (uint64_t)v1;

  objc_msgSend((id)qword_1001ED818, "set_horizontalSizeClassFromSplitView:", 0);
}

void sub_100004894(id a1)
{
  id v1;

  v1 = +[RCApplicationContainer sharedContainer](RCApplicationContainer, "sharedContainer");
}

void sub_100004AC4(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned int v3;
  id v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = objc_msgSend(v6, "rc_deletionIsNever");
  v3 = objc_msgSend(v6, "rc_deletionIsImmediate");
  v4 = objc_msgSend(v6, "rc_recentlyDeletedWindow");
  if ((v2 & 1) == 0)
  {
    if (v3)
    {
      objc_msgSend(*(id *)(a1 + 32), "eraseAllDeleted");
    }
    else
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", (double)(-86400 * (uint64_t)v4)));
      objc_msgSend(*(id *)(a1 + 32), "eraseRecordingsDeletedBeforeDate:", v5);

    }
  }

}

id sub_100004B70@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = objc_msgSend(*a1, "bounds");
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

unint64_t sub_100004BFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001E9088;
  if (!qword_1001E9088)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001E9088);
  }
  return result;
}

uint64_t sub_100004D38()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[2];
  *(_QWORD *)(v0 + 24) = v2;
  if (!v2)
    return (*(uint64_t (**)(void))(v0 + 8))();
  *(_QWORD *)(v0 + 32) = 0;
  v3 = v1 + 4;
  v4 = v1[7];
  v5 = v1[8];
  swift_bridgeObjectRetain(v1);
  sub_10001B474(v3, v4);
  v6 = *(int **)(v5 + 8);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  *(_QWORD *)(v0 + 40) = v7;
  *v7 = v0;
  v7[1] = sub_100005144;
  return v9(v4, v5);
}

void sub_100004EF0(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16))
  {
    v2 = objc_alloc((Class)CLLocationManager);
    v3 = objc_msgSend(v2, "initWithEffectiveBundleIdentifier:delegate:onQueue:", RCVoiceMemosBundleID, *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v3;

    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) = 0;
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 32);
    *(_QWORD *)(v6 + 32) = &__NSArray0__struct;

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = 1;
  }
}

uint64_t sub_100005144()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  return swift_task_switch(sub_100005348, 0, 0);
}

uint64_t sub_100005310(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100005348()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 32) + 1;
  if (v1 == *(_QWORD *)(v0 + 24))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 32) = v1;
    v3 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 40 * v1);
    v4 = v3[7];
    v5 = v3[8];
    sub_10001B474(v3 + 4, v4);
    v6 = *(int **)(v5 + 8);
    v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
    v7 = (_QWORD *)swift_task_alloc(v6[1]);
    *(_QWORD *)(v0 + 40) = v7;
    *v7 = v0;
    v7[1] = sub_100005144;
    return v8(v4, v5);
  }
}

uint64_t sub_100005440(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100014E10(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_10000547C(id a1)
{
  RCRecordingsModelInteractor *v1;
  RCRecordingsModelInteractor *v2;
  void *v3;
  id v4;

  v1 = [RCRecordingsModelInteractor alloc];
  v4 = (id)objc_claimAutoreleasedReturnValue(+[RCApplicationModel sharedApplicationModel](RCApplicationModel, "sharedApplicationModel"));
  v2 = -[RCRecordingsModelInteractor initWithSavedRecordingsModel:](v1, "initWithSavedRecordingsModel:", v4);
  v3 = (void *)qword_1001ED8E8;
  qword_1001ED8E8 = (uint64_t)v2;

}

void sub_100005828(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100005A50(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100005CFC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t start(int a1, char **a2)
{
  void *v4;
  uint64_t v5;

  v4 = objc_autoreleasePoolPush();
  sub_100007034();
  v5 = UIApplicationMain(a1, a2, CFSTR("RCApplication"), CFSTR("RecorderAppDelegate"));
  objc_autoreleasePoolPop(v4);
  return v5;
}

void sub_1000063B4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1000065E4(id a1)
{
  RCApplicationContainer *v1;
  uint64_t v2;
  RCApplicationContainer *v3;
  void *v4;
  id v5;

  v1 = [RCApplicationContainer alloc];
  v2 = RCCloudRecordingsStoreURL();
  v5 = (id)objc_claimAutoreleasedReturnValue(v2);
  v3 = -[RCApplicationContainer initWithURL:](v1, "initWithURL:", v5);
  v4 = (void *)qword_1001ED920;
  qword_1001ED920 = (uint64_t)v3;

}

void sub_100006C70(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 40) = 0;
  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v6 = a3;
  v10 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "location"));
  v8 = v7;
  if (!v7)
    v8 = *(void **)(a1 + 40);
  v9 = v8;

  objc_msgSend(*(id *)(a1 + 32), "_didFetchPlaceInferences:location:error:", v10, v9, v6);
}

void sub_100006E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100007034()
{
  dispatch_queue_attr_t v0;
  NSObject *v1;
  NSObject *attr;

  if (RCDeviceUnlockedSinceBoot())
  {
    v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
    attr = objc_claimAutoreleasedReturnValue(v0);
    v1 = dispatch_queue_create((const char *)objc_msgSend(CFSTR("com.apple.VoiceMemos.RCPersistentContainer-warmup"), "UTF8String"), attr);
    dispatch_async(v1, &stru_1001ACD60);

  }
}

void sub_1000071FC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[RCSSavedRecordingService sharedService](RCSSavedRecordingService, "sharedService"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10009B3F4;
  v6[3] = &unk_1001AD420;
  objc_copyWeak(&v7, (id *)(a1 + 40));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "observeFinalizingRecordings:", v6));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 240);
  *(_QWORD *)(v4 + 240) = v3;

  objc_destroyWeak(&v7);
}

void sub_1000072A8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000074B8(uint64_t a1)
{
  int v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;

  if (+[UIView areAnimationsEnabled](UIView, "areAnimationsEnabled") && !*(_BYTE *)(a1 + 48))
  {
    +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", 0);
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "splitViewController"));
  objc_msgSend(v3, "showColumn:", 1);

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "splitViewController"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "transitionCoordinator"));

    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "splitViewController"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "transitionCoordinator"));
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100077C74;
      v8[3] = &unk_1001ACD40;
      v9 = *(id *)(a1 + 40);
      objc_msgSend(v7, "animateAlongsideTransition:completion:", 0, v8);

    }
    else
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }

  }
  if (v2)
    +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", 1);
}

void sub_1000081B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100008AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  void *v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    v5 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_delegate);

    if (v5)
    {
      objc_msgSend(v5, "siriTipViewBoundsDidChange");
      swift_unknownObjectRelease(v5);
    }
  }
}

uint64_t sub_100009000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  void (*v28)(char *);
  uint64_t v29;
  char *v30;
  void *v31;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  v22 = v2;
  __chkstk_darwin();
  v30 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin();
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  v29 = v8;
  __chkstk_darwin();
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  __chkstk_darwin();
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  swift_unknownObjectWeakInit(v0 + 24, 0);
  v26 = sub_100004BFC();
  v27 = enum case for DispatchQoS.QoSClass.userInitiated(_:);
  v28 = *(void (**)(char *))(v9 + 104);
  v28(v11);
  DispatchQoS.init(qosClass:relativePriority:)(v11, -1);
  v31 = &_swiftEmptyArrayStorage;
  v14 = sub_10001B7CC(&qword_1001E9090, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v24 = v14;
  v15 = sub_100014E10(&qword_1001E9098);
  v23 = v15;
  v25 = sub_10000EDF0(&qword_1001E90A0, &qword_1001E9098);
  v16 = v15;
  v17 = v5;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v16, v25, v5, v14);
  v18 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v20 = v30;
  v19(v30, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  *(_QWORD *)(v1 + 40) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000020, 0x80000001001820A0, v13, v7, v20, 0);
  ((void (*)(char *, _QWORD, uint64_t))v28)(v11, v27, v29);
  DispatchQoS.init(qosClass:relativePriority:)(v11, -1);
  v31 = &_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v25, v17, v24);
  v19(v20, v18, v22);
  *(_QWORD *)(v1 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000024, 0x80000001001820D0, v13, v7, v20, 0);
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_WORD *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 84) = 1065353216;
  return v1;
}

uint64_t destroy for PlayRecording(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

void sub_100009B90()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  id v4;
  unint64_t v5;
  id v6;

  v1 = objc_msgSend(v0, "searchController");
  v2 = objc_msgSend(v1, "searchBar");

  v3 = swift_allocObject(&unk_1001AEA30, 24, 7);
  swift_unknownObjectWeakInit(v3 + 16, v0);
  v4 = objc_allocWithZone((Class)type metadata accessor for UIAppIntentInteraction(0));
  v5 = sub_10001C2C4();
  swift_retain(v3);
  v6 = (id)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for SearchRecordings, &unk_1001EA108, v3, &type metadata for SearchRecordings, v5);
  objc_msgSend(v2, "addInteraction:", v6);

  swift_release(v3);
}

uint64_t sub_100009EF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  NSString v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  _BYTE v20[24];
  _BYTE v21[40];
  __int128 v22;
  ValueMetadata *v23;
  _UNKNOWN **v24;
  _BYTE v25[24];

  v2 = v1;
  v4 = v1 + OBJC_IVAR____TtC10VoiceMemos24RCAppStoreRatingPrompter____lazy_storage___gatingController;
  swift_beginAccess(v1 + OBJC_IVAR____TtC10VoiceMemos24RCAppStoreRatingPrompter____lazy_storage___gatingController, v25, 0, 0);
  sub_10001BC2C(v4, (uint64_t)&v22);
  if (!v23)
  {
    sub_100005440((uint64_t)&v22, &qword_1001EAA60);
    v5 = sub_100014E10(&qword_1001EAA68);
    v6 = swift_allocObject(v5, 112, 7);
    *(_OWORD *)(v6 + 16) = xmmword_100187B90;
    v7 = (objc_class *)type metadata accessor for StoreReviewGatingController(0);
    static StoreReviewGatingController.defaultBagProfileName.getter();
    v9 = v8;
    static StoreReviewGatingController.defaultBagProfileVersion.getter();
    v11 = v10;
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    v14 = objc_msgSend((id)objc_opt_self(AMSBag), "bagForProfile:profileVersion:", v12, v13);

    v15 = objc_allocWithZone(v7);
    v16 = StoreReviewGatingController.init(bag:)(v14);
    *(_QWORD *)(v6 + 56) = v7;
    *(_QWORD *)(v6 + 64) = &off_1001AF3C8;
    *(_QWORD *)(v6 + 32) = v16;
    v17 = OBJC_IVAR____TtC10VoiceMemos24RCAppStoreRatingPrompter_recordingCountProvider;
    *(_QWORD *)(v6 + 96) = &type metadata for AppStoreRatingModel;
    *(_QWORD *)(v6 + 104) = &off_1001AF538;
    v19 = *(_OWORD *)(v2 + v17);
    *(_OWORD *)(v6 + 72) = v19;
    v23 = &type metadata for RCStoreReviewGaitingController;
    v24 = &off_1001AF518;
    *(_QWORD *)&v22 = v6;
    sub_10001BB88((uint64_t)&v22, (uint64_t)v21);
    swift_beginAccess(v4, v20, 33, 0);
    swift_unknownObjectRetain(v19);
    sub_10001BBE4((uint64_t)v21, v4);
    swift_endAccess(v20);
  }
  return sub_10001BBCC(&v22, a1);
}

id sub_10000A0E8(id *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  _QWORD v14[5];

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[RCRecorderStyleProvider sharedStyleProvider](RCRecorderStyleProvider, "sharedStyleProvider"));
  v6 = objc_msgSend(v5, "recordingsCollectionViewLayoutListAppearance");
  v7 = objc_msgSend(objc_alloc((Class)UICollectionLayoutListConfiguration), "initWithAppearance:", v6);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10000EE74;
  v14[3] = &unk_1001AC398;
  v14[4] = v6;
  objc_msgSend(v7, "setItemSeparatorHandler:", v14);
  a1 += 4;
  WeakRetained = objc_loadWeakRetained(a1);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_leadingSwipeActionsConfigurationProvider"));
  objc_msgSend(v7, "setLeadingSwipeActionsConfigurationProvider:", v9);

  v10 = objc_loadWeakRetained(a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_trailingSwipeActionsConfigurationProvider"));
  objc_msgSend(v7, "setTrailingSwipeActionsConfigurationProvider:", v11);

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSection sectionWithListConfiguration:layoutEnvironment:](NSCollectionLayoutSection, "sectionWithListConfiguration:layoutEnvironment:", v7, v4));
  return v12;
}

id sub_10000A9E4(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!objc_msgSend(WeakRetained, "supportsRecordingViewElevatedUserInterfaceLevelOverride"))
  {

    goto LABEL_5;
  }
  v5 = objc_msgSend(v3, "isUserInterfaceStyleDark");

  if (!v5)
  {
LABEL_5:
    v6 = objc_claimAutoreleasedReturnValue(+[UIColor secondarySystemBackgroundColor](UIColor, "secondarySystemBackgroundColor"));
    goto LABEL_6;
  }
  v6 = objc_claimAutoreleasedReturnValue(+[UIColor systemBackgroundColor](UIColor, "systemBackgroundColor"));
LABEL_6:
  v7 = (void *)v6;

  return v7;
}

UIColor *__cdecl sub_10000AA6C(id a1, UITraitCollection *a2)
{
  void *v2;

  if (-[UITraitCollection isUserInterfaceStyleDark](a2, "isUserInterfaceStyleDark"))
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  else
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemGrayColor](UIColor, "systemGrayColor"));
  return (UIColor *)v2;
}

uint64_t initializeBufferWithCopyOfBuffer for EmptyStateStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

void sub_10000AB34()
{
  void *v0;
  void *v1;
  objc_class *v2;
  id v3;
  unint64_t v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  unint64_t v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  unint64_t v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  unint64_t v39;
  void *v40;
  id v41;
  id v42;

  v1 = v0;
  v2 = (objc_class *)type metadata accessor for UIAppIntentInteraction(0);
  v3 = objc_allocWithZone(v2);
  v4 = sub_10001C5B8();
  v5 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for CreateRecording, &unk_1001EA130, 0, &type metadata for CreateRecording, v4);
  v6 = objc_msgSend(v1, "view");
  if (!v6)
  {
    __break(1u);
    goto LABEL_10;
  }
  v7 = v6;
  objc_msgSend(v6, "addInteraction:", v5);

  v8 = swift_allocObject(&unk_1001AEA58, 24, 7);
  swift_unknownObjectWeakInit(v8 + 16, v1);
  v9 = objc_allocWithZone(v2);
  v10 = sub_10001C4BC();
  swift_retain(v8);
  v11 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for DeleteRecording, &unk_1001EA148, v8, &type metadata for DeleteRecording, v10);
  v12 = objc_msgSend(v1, "view");
  if (!v12)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v13 = v12;
  objc_msgSend(v12, "addInteraction:", v11);
  swift_release(v8);

  v14 = objc_allocWithZone(v2);
  v15 = sub_10001C690();
  v16 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for PlayRecording, &unk_1001EA158, 0, &type metadata for PlayRecording, v15);
  v17 = objc_msgSend(v1, "view");
  if (!v17)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v18 = v17;
  objc_msgSend(v17, "addInteraction:", v16);

  v19 = swift_allocObject(&unk_1001AEA58, 24, 7);
  swift_unknownObjectWeakInit(v19 + 16, v1);
  v20 = objc_allocWithZone(v2);
  v21 = sub_10001C3C0();
  swift_retain(v19);
  v22 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for SelectRecording, &unk_1001EA170, v19, &type metadata for SelectRecording, v21);
  v23 = objc_msgSend(v1, "view");
  if (!v23)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v24 = v23;
  objc_msgSend(v23, "addInteraction:", v22);
  swift_release(v19);

  v25 = swift_allocObject(&unk_1001AEA58, 24, 7);
  swift_unknownObjectWeakInit(v25 + 16, v1);
  v26 = objc_allocWithZone(v2);
  v27 = sub_10001B950();
  swift_retain(v25);
  v28 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for ChangeRecordingPlaybackSetting, &unk_1001EA188, v25, &type metadata for ChangeRecordingPlaybackSetting, v27);
  v29 = objc_msgSend(v1, "view");
  if (!v29)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v30 = v29;
  objc_msgSend(v29, "addInteraction:", v28);
  swift_release(v25);

  v31 = swift_allocObject(&unk_1001AEA58, 24, 7);
  swift_unknownObjectWeakInit(v31 + 16, v1);
  v32 = objc_allocWithZone(v2);
  v33 = sub_10001CA84();
  swift_retain(v31);
  v34 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for DeleteFolder, &unk_1001EA1A0, v31, &type metadata for DeleteFolder, v33);
  v35 = objc_msgSend(v1, "view");
  if (!v35)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v36 = v35;
  objc_msgSend(v35, "addInteraction:", v34);
  swift_release(v31);

  v37 = swift_allocObject(&unk_1001AEA58, 24, 7);
  swift_unknownObjectWeakInit(v37 + 16, v1);
  v38 = objc_allocWithZone(v2);
  v39 = sub_10001CBA0();
  swift_retain(v37);
  v40 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for OpenFolder, &unk_1001EA1B8, v37, &type metadata for OpenFolder, v39);
  v41 = objc_msgSend(v1, "view");
  if (v41)
  {
    v42 = v41;
    objc_msgSend(v41, "addInteraction:", v40);
    swift_release(v37);

    return;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_10000B940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC10VoiceMemos8VMPlayer____lazy_storage___audioPlayer;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos8VMPlayer____lazy_storage___audioPlayer);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos8VMPlayer____lazy_storage___audioPlayer);
  }
  else
  {
    v4 = v0;
    v5 = type metadata accessor for AudioPlayer();
    swift_allocObject(v5, 88, 7);
    v3 = sub_100009000();
    *(_QWORD *)(v3 + 32) = &off_1001AFA98;
    swift_unknownObjectWeakAssign(v3 + 24, v4);
    v6 = *(_QWORD *)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v3;
    swift_retain(v3);
    swift_release(v6);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_10000C09C(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  void (*v31)(char *);
  unsigned int v32;
  char *v33;
  int v34;
  _QWORD *v35;
  _OWORD v36[2];
  uint64_t v37;

  v35 = (_QWORD *)a2;
  v34 = a1 & 1;
  v2 = type metadata accessor for InputConnectionBehavior(0);
  v3 = *(_QWORD *)(v2 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v33 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014E10(&qword_1001EA200);
  v5 = ((uint64_t (*)(void))__chkstk_darwin)();
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v28 - v8;
  v10 = sub_100014E10(&qword_1001EB758);
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014E10(&qword_1001EB7A0);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000002DLL, 0x8000000100184950);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v30(v12, 1, 1, v13);
  LOBYTE(v36[0]) = 0;
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v29 = v7;
  v18(v7, 1, 1, v17);
  v32 = enum case for InputConnectionBehavior.default(_:);
  v31 = *(void (**)(char *))(v3 + 104);
  v19 = v33;
  v31(v33);
  v20 = sub_10001C9D8();
  v21 = v7;
  v22 = v19;
  v23 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v16, v12, v36, v9, v21, v19, &off_1001AD640, v20);
  sub_100014E10(&qword_1001EB7A8);
  swift_retain(v23);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000026, 0x8000000100184980);
  v30(v12, 1, 1, v13);
  v37 = 0;
  memset(v36, 0, sizeof(v36));
  IntentDialog.init(stringLiteral:)(0xD00000000000003BLL, 0x80000001001849B0);
  v18(v9, 0, 1, v17);
  v24 = v29;
  v18(v29, 1, 1, v17);
  ((void (*)(char *, _QWORD, uint64_t))v31)(v22, v32, v2);
  sub_10001BB40();
  sub_100014A2C();
  v25 = IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:)(v16, v12, v36, v9, v24, v22);
  LOBYTE(v36[0]) = v34;
  swift_retain(v23);
  swift_retain(v25);
  IntentParameter.wrappedValue.setter(v36);
  swift_release(v23);
  v26 = v35;
  sub_10001C030((uint64_t)v35, (uint64_t)v36);
  swift_retain(v23);
  swift_retain(v25);
  sub_10000C46C(v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001BF90);
  IntentParameter.wrappedValue.setter(v36);
  sub_10000C46C(v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001BFE0);
  swift_release_n(v25, 2);
  swift_release_n(v23, 2);
  return v23;
}

_QWORD *sub_10000C46C(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4]);
  return a1;
}

uint64_t *_s10VoiceMemos13PlayRecordingVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

void sub_10000D478(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  unsigned __int8 v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = objc_msgSend(WeakRetained, "isSetup");

  if ((v4 & 1) == 0)
  {
    v5 = objc_loadWeakRetained((id *)(a1 + 56));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "selectionDelegate"));
    v7 = objc_loadWeakRetained(v2);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "recordingsCollectionViewController"));
    objc_msgSend(v8, "setFolderSelectionDelegate:", v6);

    v9 = objc_loadWeakRetained((id *)(a1 + 56));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "libraryActionHandler"));
    v11 = objc_loadWeakRetained(v2);
    objc_msgSend(v11, "setLibraryActionHandler:", v10);

    v12 = objc_loadWeakRetained((id *)(a1 + 56));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "recordingViewControllerDelegate"));
    v14 = objc_loadWeakRetained(v2);
    objc_msgSend(v14, "setRecordingViewControllerDelegate:", v13);

    v15 = *(_QWORD *)(a1 + 32);
    v16 = objc_loadWeakRetained(v2);
    objc_msgSend(v16, "setFolderTitle:", v15);

    v17 = objc_loadWeakRetained(v2);
    v18 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 40) + 64));
    objc_msgSend(v17, "setUndoManager:", v18);

    v19 = objc_loadWeakRetained(v2);
    objc_msgSend(v19, "setIsSetup:", 1);

  }
}

void sub_10000D7B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10000DA2C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  Class isa;

  v1 = v0;
  v2 = OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_siriTipView;
  objc_msgSend(v0, "addSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_siriTipView]);
  objc_msgSend(*(id *)&v0[v2], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = (void *)objc_opt_self(NSLayoutConstraint);
  v4 = sub_100014E10((uint64_t *)&unk_1001E9190);
  v5 = swift_allocObject(v4, 56, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100186F70;
  v6 = objc_msgSend(*(id *)&v1[v2], "bottomAnchor");
  v7 = objc_msgSend(v1, "layoutMarginsGuide");
  v8 = objc_msgSend(v7, "bottomAnchor");

  v9 = objc_msgSend(v6, "constraintEqualToAnchor:constant:", v8, -12.0);
  *(_QWORD *)(v5 + 32) = v9;
  v10 = objc_msgSend(*(id *)&v1[v2], "leadingAnchor");
  v11 = objc_msgSend(v1, "layoutMarginsGuide");
  v12 = objc_msgSend(v11, "leadingAnchor");

  v13 = objc_msgSend(v10, "constraintEqualToAnchor:", v12);
  *(_QWORD *)(v5 + 40) = v13;
  v14 = objc_msgSend(*(id *)&v1[v2], "trailingAnchor");
  v15 = objc_msgSend(v1, "layoutMarginsGuide");
  v16 = objc_msgSend(v15, "trailingAnchor");

  v17 = objc_msgSend(v14, "constraintEqualToAnchor:", v16);
  *(_QWORD *)(v5 + 48) = v17;
  specialized Array._endMutation()(v18);
  sub_100005310(0, &qword_1001EC5B0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  objc_msgSend(v3, "activateConstraints:", isa);

}

double sub_10000E054()
{
  char *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  CGFloat Width;
  void *v6;
  double v7;
  id v8;
  double v9;
  double v10;
  CGRect v12;

  objc_msgSend(v0, "layoutMargins");
  v2 = v1;
  objc_msgSend(v0, "layoutMargins");
  v4 = v2 + v3;
  objc_msgSend(v0, "bounds");
  Width = CGRectGetWidth(v12);
  v6 = *(void **)&v0[OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_siriTipView];
  v7 = nullsub_8(Width - v4);
  v8 = v6;
  SiriTipUIView.sizeThatFits(_:)(v7, 1.79769313e308);
  v10 = v9;

  return v10 + 2.0 + 12.0;
}

id sub_10000E420(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  unsigned __int8 v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v3 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (objc_msgSend(WeakRetained, "_isIOSMac"))
  {
    v6 = objc_msgSend(v3, "isUserInterfaceStyleDark");

    if ((v6 & 1) != 0)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBlackColor](UIColor, "systemBlackColor"));
      goto LABEL_9;
    }
  }
  else
  {

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor separatorColor](UIColor, "separatorColor"));
  v9 = objc_loadWeakRetained(v4);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "sidebarCollectionViewBackgroundColor"));

  objc_msgSend(v8, "alphaComponent");
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "colorWithAlphaComponent:"));
  v12 = v11;
  if (v11)
    v13 = v11;
  else
    v13 = (id)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
  v7 = v13;

LABEL_9:
  return v7;
}

char *sub_10000E880(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  objc_class *v31;
  char *v32;
  uint64_t v33;
  void *v34;
  uint64_t KeyPath;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[3];
  objc_super v62;

  v9 = sub_100014E10(&qword_1001E91A8);
  v56 = *(_QWORD *)(v9 - 8);
  v57 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100014E10(&qword_1001E91B0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v58 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100014E10(&qword_1001E91B8);
  v54 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100014E10(&qword_1001E91C0);
  v55 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for SiriTipViewStyle(0);
  __chkstk_darwin(v21);
  v23 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit(&v4[OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_delegate], 0);
  v24 = v4;
  v59 = v13;
  v60 = v12;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    v25 = (void *)sub_1000FA734((uint64_t)&_swiftEmptyArrayStorage);
  }
  else
  {
    v25 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)&v24[OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_cancellables] = v25;
  v26 = OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_siriTipView;
  static SiriTipViewStyle.automatic.getter();
  v27 = objc_allocWithZone((Class)type metadata accessor for SiriTipUIView(0));
  v28 = SiriTipUIView.init(style:)(v23);
  SiriTipUIView.loadOnAppear.setter(1);
  v29 = sub_100014240();
  v61[0] = v29;
  v30 = sub_10001C5B8();
  SiriTipUIView.setIntent<A>(intent:)(v61, &type metadata for CreateRecording, v30);
  swift_release(v29);
  SiriTipUIView.allowsDismissal.setter(1);
  *(_QWORD *)&v24[v26] = v28;

  v31 = (objc_class *)type metadata accessor for RCSiriTipContainerView();
  v62.receiver = v24;
  v62.super_class = v31;
  v32 = (char *)objc_msgSendSuper2(&v62, "initWithFrame:", a1, a2, a3, a4);
  sub_10000DA2C();
  v33 = OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_siriTipView;
  v34 = *(void **)&v32[OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_siriTipView];
  KeyPath = swift_getKeyPath(&unk_1001871E8);
  v36 = v34;
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)(KeyPath, 5);

  swift_release(KeyPath);
  v37 = sub_10000EDB0(&qword_1001E91C8, &qword_1001E91B8, (uint64_t)&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>);
  Publisher<>.removeDuplicates()(v15, v37, &protocol witness table for Bool);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v17, v15);
  v38 = swift_allocObject(&unk_1001AD8D8, 24, 7);
  swift_unknownObjectWeakInit(v38 + 16, v32);
  v39 = sub_10000EDB0(&qword_1001E91D0, &qword_1001E91C0, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v40 = Publisher<>.sink(receiveValue:)(sub_10001BE9C, v38, v18, v39);
  swift_release(v38);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v20, v18);
  v41 = &v32[OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_cancellables];
  swift_beginAccess(&v32[OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_cancellables], v61, 33, 0);
  AnyCancellable.store(in:)(v41);
  swift_endAccess(v61);
  swift_release(v40);
  v42 = *(void **)&v32[v33];
  v43 = swift_getKeyPath(&unk_100187218);
  v44 = v42;
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)(v43, 5);

  swift_release(v43);
  v45 = sub_10000EDB0(&qword_1001E91D8, &qword_1001E91A8, (uint64_t)&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>);
  v46 = sub_10001B7CC(&qword_1001E91E0, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v47 = v57;
  v48 = v58;
  Publisher<>.removeDuplicates()(v57, v45, v46);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v11, v47);
  v49 = swift_allocObject(&unk_1001AD8D8, 24, 7);
  swift_unknownObjectWeakInit(v49 + 16, v32);
  v50 = sub_10000EDB0(&qword_1001E91E8, &qword_1001E91B0, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v51 = v60;
  v52 = Publisher<>.sink(receiveValue:)(sub_10001B2D0, v49, v60, v50);
  swift_release(v49);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v48, v51);
  swift_beginAccess(v41, v61, 33, 0);
  AnyCancellable.store(in:)(v41);
  swift_endAccess(v61);

  swift_release(v52);
  return v32;
}

uint64_t sub_10000EDB0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000EE30(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000EDF0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10000EE30(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000EE30(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

id sub_10000EE74(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)UIListSeparatorConfiguration), "initWithListAppearance:", *(_QWORD *)(a1 + 32));
  v5 = objc_msgSend(v3, "item");

  if (!v5)
    objc_msgSend(v4, "setTopSeparatorVisibility:", 1);
  return v4;
}

void sub_10000F248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, id *a12)
{
  id *v12;
  uint64_t v13;

  objc_destroyWeak(v12);
  objc_destroyWeak(location);
  objc_destroyWeak(a12);
  objc_destroyWeak((id *)(v13 - 120));
  objc_destroyWeak((id *)(v13 - 112));
  _Unwind_Resume(a1);
}

uint64_t destroy for RCRecordingEntity(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  return swift_release(a1[4]);
}

uint64_t sub_100012878()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  Swift::String v67;
  void (*v68)(char *);
  Swift::String v69;
  uint64_t v70;
  char *v71;
  Swift::String v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  Swift::String v76;
  uint64_t v77;
  char *v78;
  Swift::String v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t);
  Swift::String v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  Swift::String v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t, uint64_t);
  void (*v93)(char *, uint64_t);
  Swift::String v94;
  char *v95;
  Swift::String v96;
  char *v97;
  void (*v98)(char *, uint64_t);
  Swift::String v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  Swift::String v103;
  void (*v104)(char *, uint64_t, uint64_t);
  Swift::String v105;
  char *v106;
  Swift::String v107;
  void (*v108)(char *, uint64_t);
  Swift::String v109;
  uint64_t v110;
  char *v111;
  Swift::String v112;
  void (*v113)(char *);
  char *v114;
  Swift::String v115;
  char *v116;
  char *v117;
  uint64_t v118;
  Swift::String v119;
  uint64_t v120;
  Swift::String v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  Swift::String v127;
  void (*v128)(char *);
  Swift::String v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  Swift::String v133;
  uint64_t v134;
  Swift::String v135;
  uint64_t v136;
  char *v137;
  Swift::String v138;
  Swift::String v139;
  char *v140;
  Swift::String v141;
  char *v142;
  char *v143;
  void (*v144)(char *);
  Swift::String v145;
  char *v146;
  Swift::String v147;
  uint64_t v148;
  Swift::String v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  Swift::String v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(char *, uint64_t, uint64_t);
  void (*v157)(char *, uint64_t);
  Swift::String v158;
  char *v159;
  Swift::String v160;
  uint64_t v161;
  uint64_t v162;
  Swift::String v163;
  char *v164;
  Swift::String v165;
  Swift::String v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  Swift::String v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(char *, uint64_t, uint64_t);
  void (*v182)(char *, uint64_t);
  Swift::String v183;
  uint64_t v184;
  char *v185;
  Swift::String v186;
  uint64_t v187;
  Swift::String v188;
  uint64_t v189;
  char *v190;
  Swift::String v191;
  uint64_t v192;
  Swift::String v193;
  char *v194;
  Swift::String v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(char *, uint64_t, uint64_t);
  Swift::String v200;
  uint64_t v201;
  char *v202;
  Swift::String v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void (*v207)(char *, uint64_t);
  Swift::String v208;
  char *v209;
  Swift::String v210;
  uint64_t v211;
  void (*v212)(char *, uint64_t, uint64_t);
  Swift::String v213;
  uint64_t v214;
  char *v215;
  Swift::String v216;
  void (*v217)(char *, uint64_t);
  Swift::String v218;
  char *v219;
  Swift::String v220;
  uint64_t v221;
  void (*v222)(char *);
  Swift::String v223;
  char *v224;
  Swift::String v225;
  Swift::String v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  char *v240;
  char *v241;
  char *v242;
  char *v243;
  char *v244;
  char *v245;
  char *v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  char *v253;
  char *v254;
  char *v255;
  uint64_t v256;
  char *v257;
  char *v258;
  char *v259;
  char *v260;
  char *v261;
  char *v262;
  char *v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  void (*v270)(char *, uint64_t);
  uint64_t v271;
  unsigned int v272;
  void (*v273)(char *);
  _QWORD v274[2];
  _OWORD v275[2];
  uint64_t v276;

  v256 = sub_100014E10(&qword_1001EB768);
  v0 = __chkstk_darwin(v256);
  v263 = (char *)&v234 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __chkstk_darwin(v0);
  v262 = (char *)&v234 - v3;
  v4 = __chkstk_darwin(v2);
  v261 = (char *)&v234 - v5;
  v6 = __chkstk_darwin(v4);
  v260 = (char *)&v234 - v7;
  v8 = __chkstk_darwin(v6);
  v259 = (char *)&v234 - v9;
  v10 = __chkstk_darwin(v8);
  v258 = (char *)&v234 - v11;
  v12 = __chkstk_darwin(v10);
  v257 = (char *)&v234 - v13;
  v14 = __chkstk_darwin(v12);
  v255 = (char *)&v234 - v15;
  __chkstk_darwin(v14);
  v254 = (char *)&v234 - v16;
  v17 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v17);
  v266 = (char *)&v234 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AppShortcutPhraseToken(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = v19;
  __chkstk_darwin(v19);
  v23 = (char *)&v234 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100014E10(&qword_1001EB770);
  v25 = __chkstk_darwin(v24);
  v253 = (char *)&v234 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v251 = (char *)&v234 - v28;
  v29 = __chkstk_darwin(v27);
  v249 = (char *)&v234 - v30;
  v31 = __chkstk_darwin(v29);
  v248 = (char *)&v234 - v32;
  v33 = __chkstk_darwin(v31);
  v246 = (char *)&v234 - v34;
  v35 = __chkstk_darwin(v33);
  v245 = (char *)&v234 - v36;
  v37 = __chkstk_darwin(v35);
  v244 = (char *)&v234 - v38;
  v39 = __chkstk_darwin(v37);
  v243 = (char *)&v234 - v40;
  v41 = __chkstk_darwin(v39);
  v242 = (char *)&v234 - v42;
  v43 = __chkstk_darwin(v41);
  v241 = (char *)&v234 - v44;
  v45 = __chkstk_darwin(v43);
  v240 = (char *)&v234 - v46;
  v47 = __chkstk_darwin(v45);
  v239 = (char *)&v234 - v48;
  v49 = __chkstk_darwin(v47);
  v238 = (char *)&v234 - v50;
  v51 = __chkstk_darwin(v49);
  v237 = (char *)&v234 - v52;
  v53 = __chkstk_darwin(v51);
  v236 = (char *)&v234 - v54;
  v55 = __chkstk_darwin(v53);
  v235 = (char *)&v234 - v56;
  __chkstk_darwin(v55);
  v58 = (char *)&v234 - v57;
  v267 = type metadata accessor for AppShortcut(0);
  v252 = *(_QWORD *)(v267 - 8);
  __chkstk_darwin(v267);
  v265 = (char *)&v234 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v275[0] = sub_100014240();
  v60 = sub_100014E10(&qword_1001EB778);
  v61 = *(_QWORD *)(sub_100014E10(&qword_1001EB780) - 8);
  v269 = *(_QWORD *)(v61 + 72);
  v62 = *(unsigned __int8 *)(v61 + 80);
  v63 = (v62 + 32) & ~v62;
  v247 = 16 * v269;
  v64 = swift_allocObject(v60, v63 + 17 * v269, v62 | 7);
  v250 = v64;
  *(_OWORD *)(v64 + 16) = xmmword_10018A030;
  v65 = v64 + v63;
  v66 = sub_10001C5B8();
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(7, 1, &type metadata for CreateRecording, v66);
  v67._countAndFlagsBits = 0x2064726F636552;
  v67._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v67);
  v272 = enum case for AppShortcutPhraseToken.applicationName(_:);
  v68 = *(void (**)(char *))(v20 + 104);
  v68(v23);
  v273 = v68;
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v23, v24);
  v270 = *(void (**)(char *, uint64_t))(v20 + 8);
  v270(v23, v21);
  v69._countAndFlagsBits = 0;
  v69._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v69);
  AppShortcutPhrase.init(stringInterpolation:)(v58, &type metadata for CreateRecording, v66);
  v70 = v269;
  v234 = v65 + v269;
  v71 = v235;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(4, 1, &type metadata for CreateRecording, v66);
  v72._countAndFlagsBits = 544695630;
  v72._object = (void *)0xE400000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v72);
  v73 = v272;
  v268 = v21;
  ((void (*)(char *, _QWORD, uint64_t))v68)(v23, v272, v21);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v23, v24);
  v74 = v21;
  v75 = v270;
  v270(v23, v74);
  v76._countAndFlagsBits = 0;
  v76._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v76);
  AppShortcutPhrase.init(stringInterpolation:)(v71, &type metadata for CreateRecording, v66);
  v77 = 2 * v70;
  v235 = (char *)(v65 + 2 * v70);
  v78 = v236;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(18, 1, &type metadata for CreateRecording, v66);
  v79._countAndFlagsBits = 0x2061207472617453;
  v79._object = (void *)0xE800000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v79);
  v80 = v73;
  v81 = v268;
  v82 = (void (*)(char *, uint64_t, uint64_t))v273;
  ((void (*)(char *, uint64_t, uint64_t))v273)(v23, v80, v268);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v23, v24);
  v75(v23, v81);
  v83._countAndFlagsBits = 0x6964726F63655220;
  v83._object = (void *)0xEA0000000000676ELL;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v83);
  v84 = v66;
  AppShortcutPhrase.init(stringInterpolation:)(v78, &type metadata for CreateRecording, v66);
  v85 = v269;
  v271 = v65;
  v236 = (char *)(v65 + v77 + v269);
  v86 = v237;
  v87 = v84;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(18, 1, &type metadata for CreateRecording, v84);
  v88._object = (void *)0x80000001001847D0;
  v88._countAndFlagsBits = 0xD000000000000012;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v88);
  v89 = v23;
  v90 = v272;
  v91 = v268;
  v82(v23, v272, v268);
  v92 = v82;
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v89, v24);
  v93 = v270;
  v270(v89, v91);
  v94._countAndFlagsBits = 0;
  v94._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v94);
  AppShortcutPhrase.init(stringInterpolation:)(v86, &type metadata for CreateRecording, v87);
  v237 = (char *)(4 * v85);
  v236 = (char *)(v271 + 4 * v85);
  v95 = v238;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(7, 1, &type metadata for CreateRecording, v87);
  v96._countAndFlagsBits = 0x206120656B6154;
  v96._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v96);
  v92(v89, v90, v91);
  v97 = v89;
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v89, v24);
  v93(v89, v91);
  v98 = v93;
  v99._countAndFlagsBits = 0;
  v99._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v99);
  v100 = v87;
  AppShortcutPhrase.init(stringInterpolation:)(v95, &type metadata for CreateRecording, v87);
  v101 = v269;
  v238 = &v237[v269 + v271];
  v102 = v239;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 1, &type metadata for CreateRecording, v100);
  v103._countAndFlagsBits = 0x6120657461657243;
  v103._object = (void *)0xE900000000000020;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v103);
  v104 = (void (*)(char *, uint64_t, uint64_t))v273;
  ((void (*)(char *, uint64_t, uint64_t))v273)(v97, v90, v91);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v97, v24);
  v98(v97, v91);
  v105._countAndFlagsBits = 0;
  v105._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v105);
  AppShortcutPhrase.init(stringInterpolation:)(v102, &type metadata for CreateRecording, v100);
  v239 = (char *)(v271 + 6 * v101);
  v106 = v240;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(10, 1, &type metadata for CreateRecording, v100);
  v107._countAndFlagsBits = 0;
  v107._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v107);
  v104(v97, v90, v91);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v97, v24);
  v98(v97, v91);
  v108 = v98;
  v109._countAndFlagsBits = 0x6964726F63655220;
  v109._object = (void *)0xEA0000000000676ELL;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v109);
  AppShortcutPhrase.init(stringInterpolation:)(v106, &type metadata for CreateRecording, v100);
  v240 = (char *)(8 * v269);
  v110 = v271;
  v239 = (char *)(v271 + 7 * v269);
  v111 = v241;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(6, 1, &type metadata for CreateRecording, v100);
  v112._countAndFlagsBits = 0x207472617453;
  v112._object = (void *)0xE600000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v112);
  v113 = v273;
  ((void (*)(char *, _QWORD, uint64_t))v273)(v97, v272, v91);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v97, v24);
  v114 = v97;
  v108(v97, v91);
  v115._countAndFlagsBits = 0;
  v115._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v115);
  AppShortcutPhrase.init(stringInterpolation:)(v111, &type metadata for CreateRecording, v100);
  v116 = v240;
  v241 = &v240[v110];
  v117 = v242;
  v118 = v100;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(8, 1, &type metadata for CreateRecording, v100);
  v119._countAndFlagsBits = 0x2061207472617453;
  v119._object = (void *)0xE800000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v119);
  v120 = v272;
  ((void (*)(char *, _QWORD, uint64_t))v113)(v114, v272, v91);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v114, v24);
  v108(v114, v91);
  v121._countAndFlagsBits = 0;
  v121._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v121);
  v122 = v118;
  v264 = v118;
  AppShortcutPhrase.init(stringInterpolation:)(v117, &type metadata for CreateRecording, v118);
  v123 = v269;
  v124 = &v116[v269];
  v125 = v271;
  v242 = &v124[v271];
  v126 = v243;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(6, 1, &type metadata for CreateRecording, v122);
  v127._countAndFlagsBits = 0x206E69676542;
  v127._object = (void *)0xE600000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v127);
  v128 = v273;
  ((void (*)(char *, uint64_t, uint64_t))v273)(v114, v120, v91);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v114, v24);
  v108(v114, v91);
  v129._countAndFlagsBits = 0;
  v129._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v129);
  v130 = v264;
  AppShortcutPhrase.init(stringInterpolation:)(v126, &type metadata for CreateRecording, v264);
  v243 = (char *)(v125 + 10 * v123);
  v131 = v123;
  v132 = v244;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(8, 1, &type metadata for CreateRecording, v130);
  v133._countAndFlagsBits = 0x2061206E69676542;
  v133._object = (void *)0xE800000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v133);
  v134 = v272;
  ((void (*)(char *, _QWORD, uint64_t))v128)(v114, v272, v91);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v114, v24);
  v108(v114, v91);
  v135._countAndFlagsBits = 0;
  v135._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v135);
  AppShortcutPhrase.init(stringInterpolation:)(v132, &type metadata for CreateRecording, v130);
  v136 = v271;
  v244 = (char *)(v271 + 11 * v131);
  v137 = v245;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 1, &type metadata for CreateRecording, v130);
  v138._countAndFlagsBits = 0x612064726F636552;
  v138._object = (void *)0xE900000000000020;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v138);
  ((void (*)(char *, uint64_t, uint64_t))v273)(v114, v134, v91);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v114, v24);
  v108(v114, v91);
  v139._countAndFlagsBits = 0;
  v139._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v139);
  AppShortcutPhrase.init(stringInterpolation:)(v137, &type metadata for CreateRecording, v130);
  v245 = (char *)(v136 + 12 * v131);
  v140 = v246;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(5, 1, &type metadata for CreateRecording, v130);
  v141._countAndFlagsBits = 0x20656B6154;
  v141._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v141);
  v142 = v114;
  v143 = v114;
  v144 = v273;
  ((void (*)(char *, uint64_t, uint64_t))v273)(v143, v134, v91);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v142, v24);
  v108(v142, v91);
  v145._countAndFlagsBits = 0;
  v145._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v145);
  AppShortcutPhrase.init(stringInterpolation:)(v140, &type metadata for CreateRecording, v130);
  v246 = (char *)(v271 + 13 * v269);
  v146 = v248;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(16, 1, &type metadata for CreateRecording, v130);
  v147._countAndFlagsBits = 0x207472617453;
  v147._object = (void *)0xE600000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v147);
  v148 = v272;
  ((void (*)(char *, _QWORD, uint64_t))v144)(v142, v272, v91);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v142, v24);
  v108(v142, v91);
  v149._countAndFlagsBits = 0x6964726F63655220;
  v149._object = (void *)0xEA0000000000676ELL;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v149);
  v150 = v264;
  AppShortcutPhrase.init(stringInterpolation:)(v146, &type metadata for CreateRecording, v264);
  v151 = v249;
  v152 = v150;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(16, 1, &type metadata for CreateRecording, v150);
  v153._countAndFlagsBits = 0x206E69676542;
  v153._object = (void *)0xE600000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v153);
  v154 = v148;
  v155 = v268;
  v156 = (void (*)(char *, uint64_t, uint64_t))v273;
  ((void (*)(char *, uint64_t, uint64_t))v273)(v142, v148, v268);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v142, v24);
  v157 = v270;
  v270(v142, v155);
  v158._countAndFlagsBits = 0x6964726F63655220;
  v158._object = (void *)0xEA0000000000676ELL;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v158);
  AppShortcutPhrase.init(stringInterpolation:)(v151, &type metadata for CreateRecording, v152);
  v269 = v271 + v247 - v269;
  v159 = v251;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(18, 1, &type metadata for CreateRecording, v152);
  v160._countAndFlagsBits = 0x2061206E69676542;
  v160._object = (void *)0xE800000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v160);
  v161 = v154;
  v162 = v155;
  v156(v142, v161, v155);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v142, v24);
  v157(v142, v155);
  v163._countAndFlagsBits = 0x6964726F63655220;
  v163._object = (void *)0xEA0000000000676ELL;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v163);
  AppShortcutPhrase.init(stringInterpolation:)(v159, &type metadata for CreateRecording, v152);
  v164 = v253;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(18, 1, &type metadata for CreateRecording, v152);
  v165._object = (void *)0x80000001001847F0;
  v165._countAndFlagsBits = 0xD000000000000012;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v165);
  v156(v142, v272, v155);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v142, v24);
  v157(v142, v155);
  v166._countAndFlagsBits = 0;
  v166._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v166);
  AppShortcutPhrase.init(stringInterpolation:)(v164, &type metadata for CreateRecording, v152);
  v167 = v266;
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000023, 0x8000000100184810);
  v168 = v265;
  AppShortcut.init<A>(intent:phrases:shortTitle:systemImageName:)(v275, v250, v167, 0xD000000000000012, 0x8000000100184840, &type metadata for CreateRecording, v152);
  v264 = static AppShortcutsBuilder.buildExpression(_:)(v168);
  v253 = *(char **)(v252 + 8);
  ((void (*)(char *, uint64_t))v253)(v168, v267);
  v276 = 0;
  memset(v275, 0, sizeof(v275));
  v274[0] = sub_10000C09C(0, (uint64_t)v275);
  v274[1] = v169;
  v170 = sub_100014E10(&qword_1001EB788);
  v171 = *(_QWORD *)(sub_100014E10(&qword_1001EB790) - 8);
  v271 = *(_QWORD *)(v171 + 72);
  v172 = *(unsigned __int8 *)(v171 + 80);
  v173 = (v172 + 32) & ~v172;
  v174 = swift_allocObject(v170, v173 + 11 * v271, v172 | 7);
  v252 = v174;
  *(_OWORD *)(v174 + 16) = xmmword_10018A040;
  v175 = v174 + v173;
  v176 = sub_10001C690();
  v177 = v254;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(10, 1, &type metadata for PlayRecording, v176);
  v178._object = (void *)0xEA00000000002074;
  v178._countAndFlagsBits = 0x73614C2079616C50;
  v179 = v256;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v178);
  v180 = v272;
  v181 = (void (*)(char *, uint64_t, uint64_t))v273;
  ((void (*)(char *, _QWORD, uint64_t))v273)(v142, v272, v162);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v142, v179);
  v182 = v270;
  v270(v142, v162);
  v183._countAndFlagsBits = 0;
  v183._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v183);
  v269 = v175;
  AppShortcutPhrase.init(stringInterpolation:)(v177, &type metadata for PlayRecording, v176);
  v184 = v271;
  v254 = (char *)(v175 + v271);
  v185 = v255;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(5, 1, &type metadata for PlayRecording, v176);
  v186._countAndFlagsBits = 0x2079616C50;
  v186._object = (void *)0xE500000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v186);
  v181(v142, v180, v162);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v142, v179);
  v187 = v162;
  v182(v142, v162);
  v188._countAndFlagsBits = 0;
  v188._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v188);
  AppShortcutPhrase.init(stringInterpolation:)(v185, &type metadata for PlayRecording, v176);
  v254 = (char *)(2 * v184);
  v189 = v269;
  v251 = (char *)(v269 + 2 * v184);
  v190 = v257;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 1, &type metadata for PlayRecording, v176);
  v191._countAndFlagsBits = 0xD000000000000011;
  v255 = (char *)0xD000000000000011;
  v191._object = (void *)0x8000000100184860;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v191);
  v192 = v272;
  ((void (*)(char *, _QWORD, uint64_t))v273)(v142, v272, v187);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v142, v179);
  v182(v142, v187);
  v193._countAndFlagsBits = 0;
  v193._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v193);
  AppShortcutPhrase.init(stringInterpolation:)(v190, &type metadata for PlayRecording, v176);
  v194 = v258;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(10, 1, &type metadata for PlayRecording, v176);
  v195._countAndFlagsBits = 0x74206E657473694CLL;
  v195._object = (void *)0xEA0000000000206FLL;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v195);
  v196 = v192;
  v197 = v192;
  v198 = v268;
  v199 = (void (*)(char *, uint64_t, uint64_t))v273;
  ((void (*)(char *, uint64_t, uint64_t))v273)(v142, v196, v268);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v142, v179);
  v270(v142, v198);
  v200._countAndFlagsBits = 0;
  v200._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v200);
  AppShortcutPhrase.init(stringInterpolation:)(v194, &type metadata for PlayRecording, v176);
  v201 = v271;
  AppShortcutPhrase.init(stringLiteral:)(0xD000000000000018, 0x8000000100184880, &type metadata for PlayRecording, v176);
  v258 = (char *)(v189 + 5 * v201);
  v202 = v259;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(15, 1, &type metadata for PlayRecording, v176);
  v203._countAndFlagsBits = 0x74206E657473694CLL;
  v203._object = (void *)0xEF207473614C206FLL;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v203);
  v204 = v197;
  v205 = v197;
  v206 = v268;
  v199(v142, v205, v268);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v142, v179);
  v207 = v270;
  v270(v142, v206);
  v208._countAndFlagsBits = 0;
  v208._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v208);
  AppShortcutPhrase.init(stringInterpolation:)(v202, &type metadata for PlayRecording, v176);
  v259 = (char *)(v189 + 6 * v271);
  v209 = v260;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(22, 1, &type metadata for PlayRecording, v176);
  v210._countAndFlagsBits = 0xD000000000000016;
  v210._object = (void *)0x80000001001848A0;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v210);
  v211 = v268;
  v212 = (void (*)(char *, uint64_t, uint64_t))v273;
  ((void (*)(char *, uint64_t, uint64_t))v273)(v142, v204, v268);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v142, v179);
  v207(v142, v211);
  v213._countAndFlagsBits = 0;
  v213._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v213);
  AppShortcutPhrase.init(stringInterpolation:)(v209, &type metadata for PlayRecording, v176);
  v260 = (char *)(8 * v271);
  v214 = v269;
  v259 = (char *)(v269 + 7 * v271);
  v215 = v261;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 1, &type metadata for PlayRecording, v176);
  v216._object = (void *)0x80000001001848C0;
  v216._countAndFlagsBits = (uint64_t)v255;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v216);
  v212(v142, v204, v211);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v142, v179);
  v217 = v270;
  v270(v142, v211);
  v218._countAndFlagsBits = 0;
  v218._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v218);
  AppShortcutPhrase.init(stringInterpolation:)(v215, &type metadata for PlayRecording, v176);
  v261 = &v260[v214];
  v219 = v262;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(16, 1, &type metadata for PlayRecording, v176);
  v220._countAndFlagsBits = 0xD000000000000010;
  v220._object = (void *)0x80000001001848E0;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v220);
  v221 = v204;
  v222 = v273;
  ((void (*)(char *, uint64_t, uint64_t))v273)(v142, v221, v211);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v142, v179);
  v217(v142, v211);
  v223._countAndFlagsBits = 0;
  v223._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v223);
  AppShortcutPhrase.init(stringInterpolation:)(v219, &type metadata for PlayRecording, v176);
  AppShortcutPhrase.init(stringLiteral:)(0xD000000000000014, 0x8000000100184900, &type metadata for PlayRecording, v176);
  v224 = v263;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(7, 1, &type metadata for PlayRecording, v176);
  v225._countAndFlagsBits = 0;
  v225._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v225);
  ((void (*)(char *, _QWORD, uint64_t))v222)(v142, v272, v211);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v142, v179);
  v270(v142, v211);
  v226._countAndFlagsBits = 0x726579616C5020;
  v226._object = (void *)0xE700000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v226);
  AppShortcutPhrase.init(stringInterpolation:)(v224, &type metadata for PlayRecording, v176);
  v227 = v266;
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000026, 0x8000000100184920);
  v228 = v265;
  AppShortcut.init<A>(intent:phrases:shortTitle:systemImageName:)(v274, v252, v227, 0x6C69662E79616C70, 0xE90000000000006CLL, &type metadata for PlayRecording, v176);
  v229 = static AppShortcutsBuilder.buildExpression(_:)(v228);
  ((void (*)(char *, uint64_t))v253)(v228, v267);
  v230 = sub_100014E10(&qword_1001EB798);
  v231 = swift_allocObject(v230, 48, 7);
  *(_OWORD *)(v231 + 16) = xmmword_100187B90;
  *(_QWORD *)(v231 + 32) = v264;
  *(_QWORD *)(v231 + 40) = v229;
  v232 = static AppShortcutsBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v231);
  return v232;
}

uint64_t sub_100014240()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v20 = type metadata accessor for InputConnectionBehavior(0);
  v0 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100014E10(&qword_1001EA200);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100014E10((uint64_t *)&unk_1001EBE70);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100014E10(&qword_1001EB758);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014E10(&qword_1001EB760);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000026, 0x8000000100184760);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  v16 = type metadata accessor for String.IntentInputOptions(0);
  v21[0] = 0;
  v21[1] = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 1, 1, v16);
  IntentDialog.init(stringLiteral:)(0xD00000000000003BLL, 0x8000000100184790);
  v17 = type metadata accessor for IntentDialog(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v5, 0, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v0 + 104))(v2, enum case for InputConnectionBehavior.default(_:), v20);
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v15, v11, v21, v8, v5, v2);
}

id sub_100014558(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id result;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  void (*v24)(char *, char *, uint64_t);
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  double v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  id v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  char *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[5];
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;

  v3 = sub_100014E10(&qword_1001EA0F0);
  __chkstk_darwin(v3);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v44 - v11;
  result = objc_msgSend(a1, "UUID");
  if (!result)
    return result;
  v14 = result;
  v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v16 = v15;

  v17 = objc_msgSend(a1, "recordingTitle");
  if (!v17)
    return (id)swift_bridgeObjectRelease(v16);
  v18 = v17;
  v19 = v16;
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v48 = v21;

  v22 = objc_msgSend(a1, "creationDate");
  if (!v22)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    goto LABEL_9;
  }
  v23 = v22;
  v46 = v20;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v24 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v24(v5, v10, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
LABEL_9:
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v48);
    return (id)sub_100005440((uint64_t)v5, &qword_1001EA0F0);
  }
  v24(v12, v5, v6);
  v45 = v1;
  v25 = objc_msgSend(v1, "recordingUUIDToEntityInteraction");
  v26 = v47;
  *(_QWORD *)&v50 = v47;
  *((_QWORD *)&v50 + 1) = v19;
  swift_bridgeObjectRetain_n(v19, 2);
  v27 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v50, &type metadata for String);
  v28 = objc_msgSend(v25, "__swift_objectForKeyedSubscript:", v27);
  swift_unknownObjectRelease(v27);

  if (v28)
  {
    _bridgeAnyObjectToAny(_:)(&v50, v28);
    swift_unknownObjectRelease(v28);
    sub_100005440((uint64_t)&v50, &qword_1001EA0E0);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    swift_bridgeObjectRelease(v48);
    v29 = v19;
  }
  else
  {
    v50 = 0u;
    v51 = 0u;
    sub_100005440((uint64_t)&v50, &qword_1001EA0E0);
    swift_bridgeObjectRelease(v19);
    v30 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v44 = v12;
    v30(v10, v12, v6);
    swift_bridgeObjectRetain(v19);
    objc_msgSend(a1, "recordingDuration");
    sub_100014B08(v26, v19, v46, v48, v10, &v50, v31);
    v53 = v50;
    v32 = v51;
    v33 = v52;
    v49[3] = &type metadata for RCRecordingEntity;
    v49[4] = sub_100014A2C();
    v34 = swift_allocObject(&unk_1001AEA08, 56, 7);
    v49[0] = v34;
    v35 = v51;
    *(_OWORD *)(v34 + 16) = v50;
    *(_OWORD *)(v34 + 32) = v35;
    *(_QWORD *)(v34 + 48) = v52;
    v36 = objc_allocWithZone((Class)type metadata accessor for UIAppEntityInteraction(0));
    v37 = v26;
    sub_100014AE0((uint64_t)&v53);
    swift_retain(v32);
    swift_retain(*((_QWORD *)&v32 + 1));
    swift_retain(v33);
    v38 = (void *)UIAppEntityInteraction.init(entity:)(v49);
    v39 = v45;
    result = objc_msgSend(v45, "view");
    if (!result)
    {
      __break(1u);
      return result;
    }
    v40 = result;
    objc_msgSend(result, "addInteraction:", v38);

    v41 = objc_msgSend(v39, "recordingUUIDToEntityInteraction");
    v49[0] = v37;
    v49[1] = v19;
    swift_bridgeObjectRetain(v19);
    v42 = v38;
    v43 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v49, &type metadata for String);
    objc_msgSend(v41, "__swift_setObject:forKeyedSubscript:", v42, v43);

    swift_unknownObjectRelease(v43);
    sub_100014AB8((uint64_t)&v53);
    swift_release(v33);
    swift_release(*((_QWORD *)&v32 + 1));
    swift_release(v32);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v44, v6);
    v29 = v19;
  }
  return (id)swift_bridgeObjectRelease(v29);
}

unint64_t sub_100014A2C()
{
  unint64_t result;

  result = qword_1001EA0F8;
  if (!qword_1001EA0F8)
  {
    result = swift_getWitnessTable(&unk_10018A0F4, &type metadata for RCRecordingEntity);
    atomic_store(result, &qword_1001EA0F8);
  }
  return result;
}

uint64_t sub_100014A70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EA0E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100014AB8(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100014AE0(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100014B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, _QWORD *a6@<X8>, double a7@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  void (*v25)(char *, uint64_t);
  uint64_t result;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[2];

  v30 = a4;
  v31 = a5;
  v29 = a3;
  v32 = a6;
  v33 = a1;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v28 - v14;
  v16 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014E10(&qword_1001EB740);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001FLL, 0x80000001001846E0);
  v19 = EntityProperty<>.init(title:)(v18);
  sub_100014E10(&qword_1001EB748);
  swift_retain(v19);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000027, 0x8000000100184700);
  v20 = EntityProperty<>.init(title:)(v18);
  sub_100014E10(&qword_1001EB750);
  swift_retain(v20);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000022, 0x8000000100184730);
  v21 = EntityProperty<>.init(title:)(v18);
  v34[0] = v29;
  v34[1] = v30;
  swift_retain(v19);
  swift_retain(v20);
  swift_retain(v21);
  swift_bridgeObjectRetain(a2);
  EntityProperty.wrappedValue.setter(v34);
  swift_release(v20);
  swift_release(v19);
  v22 = v10;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v24 = v31;
  v23(v15, (uint64_t)v31, v9);
  v23(v13, (uint64_t)v15, v9);
  swift_retain(v19);
  swift_retain(v20);
  swift_retain(v21);
  swift_bridgeObjectRetain(a2);
  EntityProperty.wrappedValue.setter(v13);
  v25 = *(void (**)(char *, uint64_t))(v22 + 8);
  v25(v15, v9);
  swift_release(v21);
  swift_release(v20);
  swift_release(v19);
  swift_bridgeObjectRelease(a2);
  *(double *)v34 = a7;
  swift_retain(v19);
  swift_retain(v20);
  swift_retain(v21);
  swift_bridgeObjectRetain(a2);
  EntityProperty.wrappedValue.setter(v34);
  swift_release(v21);
  swift_release(v20);
  swift_release(v19);
  swift_bridgeObjectRelease(a2);
  v25(v24, v9);
  swift_release(v21);
  swift_release(v20);
  swift_release(v19);
  result = swift_bridgeObjectRelease(a2);
  v27 = v32;
  *v32 = v33;
  v27[1] = a2;
  v27[2] = v19;
  v27[3] = v20;
  v27[4] = v21;
  return result;
}

uint64_t sub_100014E10(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *initializeWithCopy for RCRecordingEntity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  v6 = a2[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

void sub_100016998(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[4];

  objc_msgSend(*(id *)(a1 + 32), "setAxis:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setAlignment:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setDistribution:", 0);
  v2 = *(_QWORD **)(a1 + 32);
  if (*(_QWORD *)(a1 + 56) == 2)
  {
    v20[0] = v2[13];
    v20[1] = v2[20];
    v20[2] = v2[19];
    v20[3] = v2[14];
    v3 = v20;
    v4 = 4;
  }
  else
  {
    v19[0] = v2[13];
    v19[1] = v2[14];
    v3 = v19;
    v4 = 2;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, v4));
  v6 = objc_msgSend(objc_alloc((Class)NUIContainerStackView), "initWithArrangedSubviews:", v5);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 144);
  *(_QWORD *)(v7 + 144) = v6;

  v9 = objc_alloc((Class)NUIContainerStackView);
  v10 = *(_QWORD *)(a1 + 32);
  v18[0] = *(_QWORD *)(a1 + 40);
  v18[1] = *(_QWORD *)(v10 + 144);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v18, 2));
  v12 = objc_msgSend(v9, "initWithArrangedSubviews:", v11);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(void **)(v13 + 128);
  *(_QWORD *)(v13 + 128) = v12;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "setAxis:", 1);
  objc_msgSend(*(id *)(a1 + 48), "descriptionViewTitleToSecondaryPadding");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "setSpacing:");
  objc_msgSend(*(id *)(a1 + 32), "_setArrangedSubviewsWithTitleDateDurationStack:moreButton:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 128), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136));
  v15 = objc_msgSend(*(id *)(a1 + 32), "style");
  if (v15 == (id)2)
    v16 = 2;
  else
    v16 = 3;
  if (v15 == (id)2)
    v17 = 0;
  else
    v17 = 3;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "setDistribution:", v16);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "setAlignment:", v17);
  objc_msgSend(*(id *)(a1 + 32), "_updateStackIfNeeded");

}

id sub_100017FB8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  id WeakRetained;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  unsigned int v22;
  id v23;
  unsigned int v24;
  id v25;
  void *v26;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "reuseIdentifier"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v12, v8));

  v15 = objc_opt_class(RCRecordingCollectionViewCell, v14);
  LOBYTE(v12) = objc_opt_isKindOfClass(v13, v15);
  v16 = v13;
  if ((v12 & 1) != 0)
  {
    v17 = objc_loadWeakRetained(v10);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "cellsHashTable"));
    objc_msgSend(v18, "addObject:", v16);

    v19 = (void *)objc_claimAutoreleasedReturnValue(+[RCRecordingDisplayModel recordingDisplayModelWithSavedRecording:](RCRecordingDisplayModel, "recordingDisplayModelWithSavedRecording:", v9));
    v20 = objc_loadWeakRetained(v10);
    objc_msgSend(v20, "_configureCell:usingDisplayModel:", v16, v19);

    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "indexPathForSelectedItem"));
    v22 = objc_msgSend(v8, "isEqual:", v21);

    if (v22)
    {
      objc_msgSend(v16, "setSelected:", 1);
      v23 = objc_loadWeakRetained(v10);
      v24 = objc_msgSend(v23, "inDidSelect");

      if (v24)
      {
        v25 = objc_loadWeakRetained(v10);
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "UUID"));
        objc_msgSend(v25, "didSelectCellWithUUID:", v26);

      }
    }

  }
  return v16;
}

uint64_t sub_10001B08C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

__n128 initializeWithCopy for TimedTextRange(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_10001B0B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001B0D8();
  return static CustomIntentMigratedAppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_10001B0D8()
{
  unint64_t result;

  result = qword_1001EB980;
  if (!qword_1001EB980)
  {
    result = swift_getWitnessTable(&unk_10018A468, &type metadata for CreateRecording);
    atomic_store(result, &qword_1001EB980);
  }
  return result;
}

__n128 initializeWithTake for RCRecordingEntity(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RCRecordingEntity()
{
  return &type metadata for RCRecordingEntity;
}

unint64_t sub_10001B144()
{
  return 0xD000000000000015;
}

uint64_t getEnumTagSinglePayload for RCRecordingEntity(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

_BYTE *initializeBufferWithCopyOfBuffer for AutoScrollStyle(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_10001B1C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001B1E8();
  return static CustomIntentMigratedAppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_10001B1E8()
{
  unint64_t result;

  result = qword_1001EB8C8;
  if (!qword_1001EB8C8)
  {
    result = swift_getWitnessTable(&unk_10018B178, &type metadata for PlayRecording);
    atomic_store(result, &qword_1001EB8C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaybackType()
{
  return &type metadata for PlaybackType;
}

__n128 initializeWithTake for AudioAssetReaderOutput.SampleBuffer(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E9218, (uint64_t)&unk_1001ADA70);
}

unint64_t sub_10001B28C()
{
  unint64_t result;

  result = qword_1001EB4A0;
  if (!qword_1001EB4A0)
  {
    result = swift_getWitnessTable(&unk_10018A31C, &type metadata for RCRecordingEntityStringQuery);
    atomic_store(result, (unint64_t *)&qword_1001EB4A0);
  }
  return result;
}

void sub_10001B2D0(uint64_t a1)
{
  uint64_t v1;

  sub_100008AA0(a1, v1);
}

unint64_t sub_10001B2D8()
{
  unint64_t result;

  result = qword_1001EB4B0;
  if (!qword_1001EB4B0)
  {
    result = swift_getWitnessTable(&unk_10018A214, &type metadata for RCRecordingEntity);
    atomic_store(result, (unint64_t *)&qword_1001EB4B0);
  }
  return result;
}

unint64_t sub_10001B31C()
{
  unint64_t result;

  result = qword_1001EB4B8;
  if (!qword_1001EB4B8)
  {
    result = swift_getWitnessTable(&unk_10018A23C, &type metadata for RCRecordingEntity);
    atomic_store(result, (unint64_t *)&qword_1001EB4B8);
  }
  return result;
}

ValueMetadata *type metadata accessor for CreateRecording()
{
  return &type metadata for CreateRecording;
}

ValueMetadata *type metadata accessor for PlayRecording()
{
  return &type metadata for PlayRecording;
}

unint64_t sub_10001B384()
{
  return 0xD000000000000017;
}

unint64_t sub_10001B3A0()
{
  unint64_t result;

  result = qword_1001EB688;
  if (!qword_1001EB688)
  {
    result = swift_getWitnessTable(&unk_10018AFA0, &type metadata for PlaybackType);
    atomic_store(result, (unint64_t *)&qword_1001EB688);
  }
  return result;
}

const char *sub_10001B45C()
{
  return "isPresented";
}

const char *sub_10001B468()
{
  return "bounds";
}

_QWORD *sub_10001B474(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10001B498(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_10001B4B8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "diffableDataSource"));
  v3 = *(unsigned __int8 *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100051574;
  v5[3] = &unk_1001AB588;
  v4 = *(_QWORD *)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v2, "applySnapshot:animatingDifferences:completion:", v4, v3, v5);

}

id sub_10001B530(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "__performDeferredInitialization");
}

id sub_10001B538(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_initialViewDidLoad");
}

void sub_10001B540(uint64_t a1)
{
  void *v1;
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_clearTemporaryAudioFilesOnce");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[RCSSavedRecordingService sharedService](RCSSavedRecordingService, "sharedService"));
  objc_msgSend(v1, "enableOrphanHandlingWithCompletionBlock:", 0);

  v2 = (id)objc_claimAutoreleasedReturnValue(+[TranscriptionModelAssetService sharedInstance](_TtC10VoiceMemos30TranscriptionModelAssetService, "sharedInstance"));
  objc_msgSend(v2, "isAvailableWithCompletionHandler:", &stru_1001AC0B0);

}

id sub_10001B5AC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleWelcomeScreenContinue:", a2 == 1);
}

void sub_10001B5BC(uint64_t a1)
{
  _QWORD block[5];

  if (objc_msgSend(*(id *)(a1 + 32), "_cloudSyncPromptNeedsShowing"))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100047C14;
    block[3] = &unk_1001AB588;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void sub_10001B630(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  objc_msgSend(v1, "rc_cleanUpTemporaryDirectory");

}

void sub_10001B664(id a1)
{
  RCLocationsOfInterestManager *v1;
  void *v2;

  v1 = objc_opt_new(RCLocationsOfInterestManager);
  v2 = (void *)qword_1001ED900;
  qword_1001ED900 = (uint64_t)v1;

}

void sub_10001B68C(id a1)
{
  RCApplicationModel *v1;
  void *v2;

  v1 = objc_alloc_init(RCApplicationModel);
  v2 = (void *)qword_1001ED950;
  qword_1001ED950 = (uint64_t)v1;

}

void sub_10001B6B4(id a1)
{
  RCDateFormatter *v1;
  void *v2;

  v1 = objc_opt_new(RCDateFormatter);
  v2 = (void *)qword_1001ED970;
  qword_1001ED970 = (uint64_t)v1;

}

_QWORD *sub_10001B6DC(_QWORD *result)
{
  uint64_t v1;

  v1 = result[4];
  if (!*(_BYTE *)(v1 + 41) && *(_QWORD *)(v1 + 16))
  {
    *(_BYTE *)(v1 + 41) = 1;
    result = (_QWORD *)result[4];
    if ((*((_DWORD *)result + 2) - 3) <= 1)
      return objc_msgSend(result, "_startMonitoringLocation");
  }
  return result;
}

void sub_10001B714(id a1)
{
  RCDisplayLinkManager *v1;
  void *v2;

  v1 = objc_opt_new(RCDisplayLinkManager);
  v2 = (void *)qword_1001ED8D0;
  qword_1001ED8D0 = (uint64_t)v1;

}

id sub_10001B73C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_configureAudioSettingsIfNeeded");
  return objc_msgSend(*(id *)(a1 + 32), "_registerAudioSessionNotificationsIfNeeded");
}

void sub_10001B764(id a1)
{
  VMAudioService *v1;
  void *v2;

  v1 = objc_opt_new(VMAudioService);
  v2 = (void *)qword_1001ED918;
  qword_1001ED918 = (uint64_t)v1;

}

void sub_10001B78C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(+[TUCallCenter callCenterWithQueue:](TUCallCenter, "callCenterWithQueue:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v2;

}

uint64_t sub_10001B7CC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001B810()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to StoreReviewGatingController.didEnterForeground()[1]);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001B80C;
  return StoreReviewGatingController.didEnterForeground()();
}

id sub_10001B85C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isPresented");
  *a2 = (_BYTE)result;
  return result;
}

uint64_t type metadata accessor for VMPlayer()
{
  return objc_opt_self(_TtC10VoiceMemos8VMPlayer);
}

uint64_t sub_10001B8AC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *v0;
  v3 = (_QWORD *)swift_task_alloc(dword_1001EAADC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001B80C;
  v3[2] = v2;
  return swift_task_switch(sub_100004D38, 0, 0);
}

unint64_t sub_10001B90C()
{
  unint64_t result;

  result = qword_1001EB628;
  if (!qword_1001EB628)
  {
    result = swift_getWitnessTable(&unk_10018ACA0, &type metadata for ChangeRecordingPlaybackSetting);
    atomic_store(result, (unint64_t *)&qword_1001EB628);
  }
  return result;
}

unint64_t sub_10001B950()
{
  unint64_t result;

  result = qword_1001EA190;
  if (!qword_1001EA190)
  {
    result = swift_getWitnessTable(&unk_10018AC10, &type metadata for ChangeRecordingPlaybackSetting);
    atomic_store(result, &qword_1001EA190);
  }
  return result;
}

unint64_t sub_10001B994()
{
  unint64_t result;

  result = qword_1001EB630;
  if (!qword_1001EB630)
  {
    result = swift_getWitnessTable(&unk_10018ACC8, &type metadata for ChangeRecordingPlaybackSetting);
    atomic_store(result, (unint64_t *)&qword_1001EB630);
  }
  return result;
}

uint64_t sub_10001B9D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001B950();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for RCRecordingEntityStringQuery()
{
  return &type metadata for RCRecordingEntityStringQuery;
}

unint64_t sub_10001BA18()
{
  unint64_t result;

  result = qword_1001EB4F0[0];
  if (!qword_1001EB4F0[0])
  {
    result = swift_getWitnessTable(&unk_10018A3D4, &type metadata for RCRecordingEntityStringQuery);
    atomic_store(result, qword_1001EB4F0);
  }
  return result;
}

unint64_t sub_10001BA5C()
{
  unint64_t result;

  result = qword_1001EB4E8;
  if (!qword_1001EB4E8)
  {
    result = swift_getWitnessTable(&unk_10018A374, &type metadata for RCRecordingEntityStringQuery);
    atomic_store(result, (unint64_t *)&qword_1001EB4E8);
  }
  return result;
}

unint64_t sub_10001BAA0()
{
  unint64_t result;

  result = qword_1001EB508;
  if (!qword_1001EB508)
  {
    result = swift_getWitnessTable(&unk_10018A3FC, &type metadata for RCRecordingEntityStringQuery);
    atomic_store(result, (unint64_t *)&qword_1001EB508);
  }
  return result;
}

unint64_t sub_10001BAFC()
{
  unint64_t result;

  result = qword_1001EB6F0[0];
  if (!qword_1001EB6F0[0])
  {
    result = swift_getWitnessTable(&unk_10018B2AC, &type metadata for AllRecordingsOptionsProvider);
    atomic_store(result, qword_1001EB6F0);
  }
  return result;
}

unint64_t sub_10001BB40()
{
  unint64_t result;

  result = qword_1001EB7B0;
  if (!qword_1001EB7B0)
  {
    result = swift_getWitnessTable(&unk_10018B24C, &type metadata for AllRecordingsOptionsProvider);
    atomic_store(result, (unint64_t *)&qword_1001EB7B0);
  }
  return result;
}

uint64_t sub_10001BB88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10001BBCC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10001BBE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EAA60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001BC2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EAA60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void destroy for AudioAssetReaderOutput.SampleBuffer(id *a1)
{

}

void **initializeBufferWithCopyOfBuffer for RCIntentSceneConfigurator(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

unint64_t sub_10001BCA8()
{
  unint64_t result;

  result = qword_1001EB278;
  if (!qword_1001EB278)
  {
    result = swift_getWitnessTable(&unk_10018D3EC, &type metadata for RCIntentSceneConfigurator);
    atomic_store(result, (unint64_t *)&qword_1001EB278);
  }
  return result;
}

uint64_t type metadata accessor for RCAppStoreRatingPrompter()
{
  return objc_opt_self(_TtC10VoiceMemos24RCAppStoreRatingPrompter);
}

uint64_t type metadata accessor for RCSiriTipContainerView()
{
  return objc_opt_self(_TtC10VoiceMemos22RCSiriTipContainerView);
}

void sub_10001BE9C(_BYTE *a1)
{
  uint64_t v1;

  sub_10001BEA4(a1, v1);
}

void sub_10001BEA4(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  void *v5;
  _BYTE v6[24];

  if ((*a1 & 1) == 0)
  {
    v2 = a2 + 16;
    swift_beginAccess(a2 + 16, v6, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v2);
    if (Strong)
    {
      v4 = (void *)Strong;
      v5 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_delegate);

      if (v5)
      {
        objc_msgSend(v5, "didDismissSiriTipView");
        swift_unknownObjectRelease(v5);
      }
    }
  }
}

ValueMetadata *type metadata accessor for RecordingAppShortcuts()
{
  return &type metadata for RecordingAppShortcuts;
}

uint64_t sub_10001BF3C()
{
  uint64_t v0;

  return sub_1000C1178(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t storeEnumTagSinglePayload for RCRecordingEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_10001BF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_retain(a3);
    swift_retain(a4);
    return swift_retain(a5);
  }
  return result;
}

uint64_t sub_10001BFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_release(a3);
    swift_release(a4);
    return swift_release(a5);
  }
  return result;
}

uint64_t sub_10001C030(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EB7B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10001C078()
{
  unint64_t result;

  result = qword_1001EB498;
  if (!qword_1001EB498)
  {
    result = swift_getWitnessTable(&unk_10018A1B4, &type metadata for RCRecordingEntity);
    atomic_store(result, (unint64_t *)&qword_1001EB498);
  }
  return result;
}

unint64_t sub_10001C0BC()
{
  unint64_t result;

  result = qword_1001EB4D8;
  if (!qword_1001EB4D8)
  {
    result = swift_getWitnessTable(&unk_10018A2C4, &type metadata for RCRecordingEntity);
    atomic_store(result, (unint64_t *)&qword_1001EB4D8);
  }
  return result;
}

unint64_t sub_10001C100()
{
  unint64_t result;

  result = qword_1001EB4C0;
  if (!qword_1001EB4C0)
  {
    result = swift_getWitnessTable(&unk_10018A294, &type metadata for RCRecordingEntity);
    atomic_store(result, (unint64_t *)&qword_1001EB4C0);
  }
  return result;
}

unint64_t sub_10001C144()
{
  unint64_t result;

  result = qword_1001EB4A8;
  if (!qword_1001EB4A8)
  {
    result = swift_getWitnessTable(&unk_10018A1EC, &type metadata for RCRecordingEntity);
    atomic_store(result, (unint64_t *)&qword_1001EB4A8);
  }
  return result;
}

unint64_t sub_10001C188()
{
  unint64_t result;

  result = qword_1001EB490;
  if (!qword_1001EB490)
  {
    result = swift_getWitnessTable(&unk_10018A184, &type metadata for RCRecordingEntity);
    atomic_store(result, (unint64_t *)&qword_1001EB490);
  }
  return result;
}

unint64_t sub_10001C1CC()
{
  unint64_t result;

  result = qword_1001EB488;
  if (!qword_1001EB488)
  {
    result = swift_getWitnessTable(&unk_10018A14C, &type metadata for RCRecordingEntity);
    atomic_store(result, (unint64_t *)&qword_1001EB488);
  }
  return result;
}

unint64_t sub_10001C210()
{
  unint64_t result;

  result = qword_1001EB480;
  if (!qword_1001EB480)
  {
    result = swift_getWitnessTable(&unk_10018A0C4, &type metadata for RCRecordingEntity);
    atomic_store(result, (unint64_t *)&qword_1001EB480);
  }
  return result;
}

void *sub_10001C26C()
{
  return &protocol witness table for String;
}

unint64_t sub_10001C280()
{
  unint64_t result;

  result = qword_1001EBA70;
  if (!qword_1001EBA70)
  {
    result = swift_getWitnessTable(&unk_10018BAE4, &type metadata for SearchRecordings);
    atomic_store(result, (unint64_t *)&qword_1001EBA70);
  }
  return result;
}

unint64_t sub_10001C2C4()
{
  unint64_t result;

  result = qword_1001EA110;
  if (!qword_1001EA110)
  {
    result = swift_getWitnessTable(&unk_10018BA54, &type metadata for SearchRecordings);
    atomic_store(result, (unint64_t *)&qword_1001EA110);
  }
  return result;
}

unint64_t sub_10001C308()
{
  unint64_t result;

  result = qword_1001EBA78;
  if (!qword_1001EBA78)
  {
    result = swift_getWitnessTable(&unk_10018BB0C, &type metadata for SearchRecordings);
    atomic_store(result, (unint64_t *)&qword_1001EBA78);
  }
  return result;
}

uint64_t sub_10001C34C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001C2C4();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_10001C37C()
{
  unint64_t result;

  result = qword_1001EB648;
  if (!qword_1001EB648)
  {
    result = swift_getWitnessTable(&unk_10018ADEC, &type metadata for SelectRecording);
    atomic_store(result, (unint64_t *)&qword_1001EB648);
  }
  return result;
}

unint64_t sub_10001C3C0()
{
  unint64_t result;

  result = qword_1001EA178;
  if (!qword_1001EA178)
  {
    result = swift_getWitnessTable(&unk_10018AD5C, &type metadata for SelectRecording);
    atomic_store(result, &qword_1001EA178);
  }
  return result;
}

unint64_t sub_10001C404()
{
  unint64_t result;

  result = qword_1001EB650;
  if (!qword_1001EB650)
  {
    result = swift_getWitnessTable(&unk_10018AE14, &type metadata for SelectRecording);
    atomic_store(result, (unint64_t *)&qword_1001EB650);
  }
  return result;
}

uint64_t sub_10001C448(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001C3C0();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_10001C478()
{
  unint64_t result;

  result = qword_1001EB598;
  if (!qword_1001EB598)
  {
    result = swift_getWitnessTable(&unk_10018A8AC, &type metadata for DeleteRecording);
    atomic_store(result, (unint64_t *)&qword_1001EB598);
  }
  return result;
}

unint64_t sub_10001C4BC()
{
  unint64_t result;

  result = qword_1001EA150;
  if (!qword_1001EA150)
  {
    result = swift_getWitnessTable(&unk_10018A81C, &type metadata for DeleteRecording);
    atomic_store(result, (unint64_t *)&qword_1001EA150);
  }
  return result;
}

unint64_t sub_10001C500()
{
  unint64_t result;

  result = qword_1001EB5A0;
  if (!qword_1001EB5A0)
  {
    result = swift_getWitnessTable(&unk_10018A8D4, &type metadata for DeleteRecording);
    atomic_store(result, (unint64_t *)&qword_1001EB5A0);
  }
  return result;
}

uint64_t sub_10001C544(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001C4BC();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_10001C574()
{
  unint64_t result;

  result = qword_1001EB538;
  if (!qword_1001EB538)
  {
    result = swift_getWitnessTable(&unk_10018A550, &type metadata for CreateRecording);
    atomic_store(result, (unint64_t *)&qword_1001EB538);
  }
  return result;
}

unint64_t sub_10001C5B8()
{
  unint64_t result;

  result = qword_1001E91A0;
  if (!qword_1001E91A0)
  {
    result = swift_getWitnessTable(&unk_10018A4C0, &type metadata for CreateRecording);
    atomic_store(result, (unint64_t *)&qword_1001E91A0);
  }
  return result;
}

unint64_t sub_10001C5FC()
{
  unint64_t result;

  result = qword_1001EB540;
  if (!qword_1001EB540)
  {
    result = swift_getWitnessTable(&unk_10018A578, &type metadata for CreateRecording);
    atomic_store(result, (unint64_t *)&qword_1001EB540);
  }
  return result;
}

unint64_t sub_10001C64C()
{
  unint64_t result;

  result = qword_1001EB6D0;
  if (!qword_1001EB6D0)
  {
    result = swift_getWitnessTable(&unk_10018B1A8, &type metadata for PlayRecording);
    atomic_store(result, (unint64_t *)&qword_1001EB6D0);
  }
  return result;
}

unint64_t sub_10001C690()
{
  unint64_t result;

  result = qword_1001EA160;
  if (!qword_1001EA160)
  {
    result = swift_getWitnessTable(&unk_10018B0C0, &type metadata for PlayRecording);
    atomic_store(result, &qword_1001EA160);
  }
  return result;
}

unint64_t sub_10001C6D4()
{
  unint64_t result;

  result = qword_1001EB6D8;
  if (!qword_1001EB6D8)
  {
    result = swift_getWitnessTable(&unk_10018B1D0, &type metadata for PlayRecording);
    atomic_store(result, (unint64_t *)&qword_1001EB6D8);
  }
  return result;
}

uint64_t sub_10001C724(unsigned __int8 *a1)
{
  return *a1;
}

unint64_t sub_10001C730()
{
  unint64_t result;

  result = qword_1001EB6B0;
  if (!qword_1001EB6B0)
  {
    result = swift_getWitnessTable(&unk_10018B088, &type metadata for PlaybackType);
    atomic_store(result, (unint64_t *)&qword_1001EB6B0);
  }
  return result;
}

unint64_t sub_10001C774()
{
  unint64_t result;

  result = qword_1001EB678;
  if (!qword_1001EB678)
  {
    result = swift_getWitnessTable(&unk_10018AE98, &type metadata for PlaybackType);
    atomic_store(result, (unint64_t *)&qword_1001EB678);
  }
  return result;
}

unint64_t sub_10001C7B8()
{
  unint64_t result;

  result = qword_1001EB660;
  if (!qword_1001EB660)
  {
    result = swift_getWitnessTable(&unk_10018AE30, &type metadata for PlaybackType);
    atomic_store(result, (unint64_t *)&qword_1001EB660);
  }
  return result;
}

unint64_t sub_10001C7FC()
{
  unint64_t result;

  result = qword_1001EB6B8;
  if (!qword_1001EB6B8)
  {
    result = swift_getWitnessTable(&unk_10018AE58, &type metadata for PlaybackType);
    atomic_store(result, (unint64_t *)&qword_1001EB6B8);
  }
  return result;
}

unint64_t sub_10001C840()
{
  unint64_t result;

  result = qword_1001EB6A8;
  if (!qword_1001EB6A8)
  {
    result = swift_getWitnessTable(&unk_10018B060, &type metadata for PlaybackType);
    atomic_store(result, (unint64_t *)&qword_1001EB6A8);
  }
  return result;
}

unint64_t sub_10001C884()
{
  unint64_t result;

  result = qword_1001EB670;
  if (!qword_1001EB670)
  {
    result = swift_getWitnessTable(&unk_10018AF48, &type metadata for PlaybackType);
    atomic_store(result, (unint64_t *)&qword_1001EB670);
  }
  return result;
}

unint64_t sub_10001C8C8()
{
  unint64_t result;

  result = qword_1001EB680;
  if (!qword_1001EB680)
  {
    result = swift_getWitnessTable(&unk_10018AF78, &type metadata for PlaybackType);
    atomic_store(result, (unint64_t *)&qword_1001EB680);
  }
  return result;
}

unint64_t sub_10001C90C()
{
  unint64_t result;

  result = qword_1001EB698;
  if (!qword_1001EB698)
  {
    result = swift_getWitnessTable(&unk_10018B020, &type metadata for PlaybackType);
    atomic_store(result, (unint64_t *)&qword_1001EB698);
  }
  return result;
}

unint64_t sub_10001C950()
{
  unint64_t result;

  result = qword_1001EB690;
  if (!qword_1001EB690)
  {
    result = swift_getWitnessTable(&unk_10018AFC8, &type metadata for PlaybackType);
    atomic_store(result, (unint64_t *)&qword_1001EB690);
  }
  return result;
}

unint64_t sub_10001C994()
{
  unint64_t result;

  result = qword_1001EB668;
  if (!qword_1001EB668)
  {
    result = swift_getWitnessTable(&unk_10018AF10, &type metadata for PlaybackType);
    atomic_store(result, (unint64_t *)&qword_1001EB668);
  }
  return result;
}

unint64_t sub_10001C9D8()
{
  unint64_t result;

  result = qword_1001EB6A0;
  if (!qword_1001EB6A0)
  {
    result = swift_getWitnessTable(&unk_10018AED0, &type metadata for PlaybackType);
    atomic_store(result, (unint64_t *)&qword_1001EB6A0);
  }
  return result;
}

unint64_t sub_10001CA40()
{
  unint64_t result;

  result = qword_1001EBD68;
  if (!qword_1001EBD68)
  {
    result = swift_getWitnessTable(&unk_10018C1B8, &type metadata for DeleteFolder);
    atomic_store(result, (unint64_t *)&qword_1001EBD68);
  }
  return result;
}

unint64_t sub_10001CA84()
{
  unint64_t result;

  result = qword_1001EBD60;
  if (!qword_1001EBD60)
  {
    result = swift_getWitnessTable(&unk_10018C128, &type metadata for DeleteFolder);
    atomic_store(result, (unint64_t *)&qword_1001EBD60);
  }
  return result;
}

unint64_t sub_10001CAC8()
{
  unint64_t result;

  result = qword_1001EBD70;
  if (!qword_1001EBD70)
  {
    result = swift_getWitnessTable(&unk_10018C1E0, &type metadata for DeleteFolder);
    atomic_store(result, (unint64_t *)&qword_1001EBD70);
  }
  return result;
}

uint64_t sub_10001CB0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001CA84();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t type metadata accessor for AudioPlayer()
{
  return objc_opt_self(_TtC10VoiceMemos11AudioPlayer);
}

unint64_t sub_10001CB5C()
{
  unint64_t result;

  result = qword_1001EBD90;
  if (!qword_1001EBD90)
  {
    result = swift_getWitnessTable(&unk_10018C304, &type metadata for OpenFolder);
    atomic_store(result, (unint64_t *)&qword_1001EBD90);
  }
  return result;
}

unint64_t sub_10001CBA0()
{
  unint64_t result;

  result = qword_1001EA1C0;
  if (!qword_1001EA1C0)
  {
    result = swift_getWitnessTable(&unk_10018C274, &type metadata for OpenFolder);
    atomic_store(result, (unint64_t *)&qword_1001EA1C0);
  }
  return result;
}

unint64_t sub_10001CBE4()
{
  unint64_t result;

  result = qword_1001EBD98;
  if (!qword_1001EBD98)
  {
    result = swift_getWitnessTable(&unk_10018C32C, &type metadata for OpenFolder);
    atomic_store(result, (unint64_t *)&qword_1001EBD98);
  }
  return result;
}

uint64_t sub_10001CC28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001CBA0();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

void sub_10001CD94(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "-[RecorderAppDelegate defaultSceneDelegate]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s -- Could not find defaultSceneDelegate in list of connected scenes", (uint8_t *)&v1, 0xCu);
}

id sub_10001EF00(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id result;
  unint64_t i;
  void *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_noiseSuppressionParameters"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_reverbSuppressionParameters"));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "arrayByAddingObjectsFromArray:", v3));
  v5 = (void *)qword_1001ED7B0;
  qword_1001ED7B0 = v4;

  result = objc_msgSend((id)qword_1001ED7B0, "count");
  if (result)
  {
    for (i = 0; i < (unint64_t)result; ++i)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1001ED7B0, "objectAtIndexedSubscript:", i));
      objc_msgSend(v8, "setAddress:", i);

      result = objc_msgSend((id)qword_1001ED7B0, "count");
    }
  }
  return result;
}

void sub_10001F304(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "URLForResource:withExtension:", CFSTR("voiceMemo_NS_ReverbSuppressor"), CFSTR("propstrip")));

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pathForResource:ofType:", CFSTR("aufx-drvb-appl"), CFSTR("plist")));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithContentsOfURL:](NSMutableDictionary, "dictionaryWithContentsOfURL:", v15));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("Boxes")));
  v6 = objc_msgSend(v5, "mutableCopy");
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, CFSTR("Boxes"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndexedSubscript:", 0));
  v8 = objc_msgSend(v7, "mutableCopy");
  objc_msgSend(v6, "setObject:atIndexedSubscript:", v8, 0);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("Properties")));
  v10 = objc_msgSend(v9, "mutableCopy");
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v10, CFSTR("Properties"));

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndexedSubscript:", 0));
  v12 = objc_msgSend(v11, "mutableCopy");
  objc_msgSend(v10, "setObject:atIndexedSubscript:", v12, 0);

  objc_msgSend(v12, "setObject:forKeyedSubscript:", v3, CFSTR("Path"));
  v13 = objc_msgSend(v4, "copy");
  v14 = (void *)qword_1001ED7C8;
  qword_1001ED7C8 = (uint64_t)v13;

}

void sub_10001F50C(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "URLForResource:withExtension:", CFSTR("voiceMemo_NS_ReverbSuppressor"), CFSTR("austrip")));

  v2 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithContentsOfURL:](NSDictionary, "dictionaryWithContentsOfURL:", v4));
  v3 = (void *)qword_1001ED7D8;
  qword_1001ED7D8 = v2;

}

void sub_100020814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100020830(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_performTest:options:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_100020E24(uint64_t a1)
{
  id v2;

  objc_msgSend(UIApp, "startedTest:", qword_1001ED7E8);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordingViewControllerDelegate"));
  objc_msgSend(v2, "performAction:atPosition:forUUID:sourceController:source:", 3, 0, 0, 0, 0.0);

}

void sub_100020F24(uint64_t a1)
{
  id v2;

  objc_msgSend(UIApp, "startedTest:", qword_1001ED7E8);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordingViewControllerDelegate"));
  objc_msgSend(v2, "performAction:atPosition:forUUID:sourceController:source:", 3, 0, 0, 0, 0.0);

}

void sub_100021028(uint64_t a1)
{
  void *v1;
  dispatch_time_t v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordingViewControllerDelegate"));
  objc_msgSend(v1, "performAction:atPosition:forUUID:sourceController:source:", 4, 0, 0, 0, 0.0);

  v2 = dispatch_time(0, 1000000000);
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, &stru_1001AB5A8);
}

void sub_10002108C(id a1)
{
  _objc_msgSend(UIApp, "finishedTest:", qword_1001ED7E8);
}

void sub_1000210F4(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_mainViewController"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "activeFolderViewController"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "recordingsCollectionViewController"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "uuidOfSelectedRecording"));
  objc_msgSend(UIApp, "startedTest:", qword_1001ED7E8);
  objc_msgSend(v4, "performAction:atPosition:forUUID:sourceController:source:", 23, v3, 0, 0, 0.0);

}

void sub_100021204(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  dispatch_time_t v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_mainViewController"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "activeFolderViewController"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "recordingsCollectionViewController"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "uuidOfSelectedRecording"));
  objc_msgSend(v5, "performAction:atPosition:forUUID:sourceController:source:", 24, v3, 0, 0, 0.0);
  v4 = dispatch_time(0, 1000000000);
  dispatch_after(v4, (dispatch_queue_t)&_dispatch_main_q, &stru_1001AB5C8);

}

void sub_1000212AC(id a1)
{
  _objc_msgSend(UIApp, "finishedTest:", qword_1001ED7E8);
}

void sub_100021344(uint64_t a1)
{
  id v2;

  objc_msgSend(UIApp, "startedTest:", qword_1001ED7E8);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordingViewControllerDelegate"));
  objc_msgSend(v2, "performAction:atPosition:forUUID:sourceController:source:", 3, 0, 0, 0, 0.0);

}

void sub_100021444(uint64_t a1)
{
  id v2;

  objc_msgSend(UIApp, "startedTest:", qword_1001ED7E8);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordingViewControllerDelegate"));
  objc_msgSend(v2, "performAction:atPosition:forUUID:sourceController:source:", 4, 0, 0, 0, 0.0);

}

void sub_100021610(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(UIApp, "startedTest:", qword_1001ED7E8);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cellDelegate"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "UUID"));
  objc_msgSend(v3, "performAction:atPosition:forCellWithUUID:source:", 0, v2, 0, 0.0);

}

void sub_1000217BC(id a1, UIViewControllerTransitionCoordinatorContext *a2)
{
  _objc_msgSend(UIApp, "finishedTest:", qword_1001ED7E8);
}

void sub_100021824(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  const __CFString *v18;
  id v19;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_mainViewController"));
  v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "playbackViewController"));

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "waveformViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "waveformViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "scrollView"));

  if (!v4)
  {
    v16 = (void *)UIApp;
    v17 = qword_1001ED7E8;
    v18 = CFSTR("Unable to find WaveformScrollView in the playback card");
LABEL_6:
    objc_msgSend(v16, "failedTest:withFailure:", v17, v18);
    goto LABEL_7;
  }
  v5 = RPTGetBoundsForView(v4);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  objc_msgSend(v4, "bounds");
  v13 = v12;
  if (!+[RPTTestRunner isRecapAvailable](RPTTestRunner, "isRecapAvailable"))
  {
    v16 = (void *)UIApp;
    v17 = qword_1001ED7E8;
    v18 = CFSTR("Recap not available");
    goto LABEL_6;
  }
  v14 = objc_alloc((Class)RPTPagingScrollViewTestParameters);
  v15 = objc_msgSend(v14, "initWithTestName:scrollBounds:scrollContentLength:direction:completionHandler:", qword_1001ED7E8, 2, 0, v5, v7, v9, v11, v13);
  +[RPTTestRunner runTestWithParameters:](RPTTestRunner, "runTestWithParameters:", v15);

LABEL_7:
}

void sub_100021CC0(id a1)
{
  NSSet *v1;
  void *v2;

  v1 = -[NSSet initWithObjects:](objc_opt_new(NSSet), "initWithObjects:", CFSTR("ScrollVoiceMemosList"), CFSTR("ScrollVoiceMemosEditList"), 0);
  v2 = (void *)qword_1001ED800;
  qword_1001ED800 = (uint64_t)v1;

}

void sub_100022538(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  int v8;
  const char *v9;

  v2 = OSLogForCategory(kVMLogCategoryService);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 136315138;
    v9 = "-[VMRecordingEngine _recordingStopped]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s -- Recording Stopped", (uint8_t *)&v8, 0xCu);
  }

  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 136);
  if (v4)
  {
    v5 = v4;
    dispatch_group_leave(v5);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 136);
    *(_QWORD *)(v6 + 136) = 0;

  }
}

void sub_100022824(uint64_t a1)
{
  id WeakRetained;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[VMAudioService sharedInstance](VMAudioService, "sharedInstance"));
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 112));
  objc_msgSend(v3, "stopRecordingWithController:error:", WeakRetained, 0);

}

void sub_100022EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100022F24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100022F34(uint64_t a1)
{

}

void sub_100022F3C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v11 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_enqueueAudioBuffer:when:", v11, v5);

  v7 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v7, "_processBufferQueue");

  v8 = objc_loadWeakRetained((id *)(a1 + 40));
  v9 = objc_msgSend(v11, "frameLength");
  v10 = objc_msgSend(v5, "hostTime");

  objc_msgSend(v8, "_updateRecordingTimesWithFrameCount:atHostTime:", v9, v10);
  if (objc_msgSend(*(id *)(a1 + 32), "state") == (id)1)
    objc_msgSend(*(id *)(a1 + 32), "appendAveragePowerLevelsByDigestingAudioPCMBuffer:", v11);

}

void sub_100023014(uint64_t a1, void *a2, void *a3)
{
  void *v3;
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  NSObject *v29;
  double v30;
  void **v31;
  uint64_t v32;
  id (*v33)(uint64_t, uint64_t, _QWORD *);
  void *v34;
  id v35;
  __int128 *p_buf;
  id v37;
  id v38;
  __int128 buf;
  uint64_t v40;
  BOOL v41;

  v6 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  v9 = WeakRetained;
  if (WeakRetained && (objc_msgSend(WeakRetained, "stopTimeReached") & 1) == 0)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "startTime"));

    if (!v10)
    {
      v11 = OSLogForCategory(kVMLogCategoryService);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "-[VMRecordingEngine configureWithAudioSettings:error:]_block_invoke_2";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s -- First audio buffer received", (uint8_t *)&buf, 0xCu);
      }

      v13 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioTime timeWithHostTime:sampleTime:atRate:](AVAudioTime, "timeWithHostTime:sampleTime:atRate:", objc_msgSend(v7, "hostTime"), vcvtpd_s64_f64((double)(uint64_t)objc_msgSend(v7, "sampleTime") / *(double *)(a1 + 88) * *(double *)(a1 + 96)), *(double *)(a1 + 96)));
      objc_msgSend(v9, "setStartTime:", v13);

      v14 = *(void **)(a1 + 32);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "format"));
      objc_msgSend(v9, "punchInTime");
      objc_msgSend(v14, "prepareToProcessWithFormat:audioTime:punchInTime:", v15, v7);

      v3 = *(void **)(a1 + 40);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "format"));
      objc_msgSend(v9, "punchInTime");
      objc_msgSend(v3, "prepareToProcessWithFormat:audioTime:punchInTime:", v16, v7);

    }
    objc_msgSend(*(id *)(a1 + 32), "processAudioBuffer:", v6);
    objc_msgSend(*(id *)(a1 + 40), "processAudioBuffer:", v6);
    if (*(_QWORD *)(a1 + 48))
    {
      LODWORD(v3) = vcvtpd_u64_f64(*(double *)(a1 + 96)/ *(double *)(a1 + 88)* (double)objc_msgSend(v6, "frameLength"));
      if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "frameCapacity") < v3)
      {
        v17 = objc_alloc((Class)AVAudioPCMBuffer);
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "outputFormat"));
        v19 = objc_msgSend(v17, "initWithPCMFormat:frameCapacity:", v18, v3);
        v20 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
        v21 = *(void **)(v20 + 40);
        *(_QWORD *)(v20 + 40) = v19;

      }
      if (*(double *)(a1 + 88) == *(double *)(a1 + 96))
      {
        v22 = *(void **)(a1 + 48);
        v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
        v38 = 0;
        objc_msgSend(v22, "convertToBuffer:fromBuffer:error:", v23, v6, &v38);
        v24 = v38;
        (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
      }
      else
      {
        *(_QWORD *)&buf = 0;
        *((_QWORD *)&buf + 1) = &buf;
        v40 = 0x2020000000;
        v41 = 0;
        v41 = objc_msgSend(v6, "frameLength") != 0;
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "setFrameLength:", 0);
        v25 = *(void **)(a1 + 48);
        v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
        v37 = 0;
        v31 = _NSConcreteStackBlock;
        v32 = 3221225472;
        v33 = sub_100023498;
        v34 = &unk_1001AB698;
        p_buf = &buf;
        v35 = v6;
        v27 = objc_msgSend(v25, "convertToBuffer:error:withInputFromBlock:", v26, &v37, &v31);
        v24 = v37;
        if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "frameLength", v31, v32, v33, v34))
        {
          (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
        }
        else if (v27 == (id)3)
        {
          objc_msgSend(*(id *)(a1 + 56), "setRecordingError:", v24);
          v28 = OSLogForCategory(kVMLogCategoryService);
          v29 = objc_claimAutoreleasedReturnValue(v28);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            sub_10010AAB4();

        }
        _Block_object_dispose(&buf, 8);
      }

    }
    else
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    }
    objc_msgSend(v9, "stopTime");
    if (v30 != 0.0)
      objc_msgSend(v9, "_recordingStopped");
  }

}

void sub_100023470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100023498(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v4;
  id v5;

  *a3 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == 0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    v4 = *(void **)(a1 + 32);
  else
    v4 = 0;
  v5 = v4;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  return v5;
}

uint64_t sub_1000234F8(uint64_t result, AudioUnit inUnit, int a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  UInt32 ioDataSize;
  int outData;
  uint64_t v8;
  uint64_t v9;

  if (a3 == 2001)
  {
    v8 = v3;
    v9 = v4;
    v5 = (void *)result;
    ioDataSize = 4;
    outData = 0;
    result = AudioUnitGetProperty(inUnit, 0x7D1u, 0, 0, &outData, &ioDataSize);
    if (!(result | outData))
      return (uint64_t)objc_msgSend(v5, "_recordingStopped");
  }
  return result;
}

void sub_100023974(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD v5[5];
  id v6;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000239FC;
    v5[3] = &unk_1001AB6E8;
    v5[4] = *(_QWORD *)(a1 + 32);
    v6 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  }
}

void sub_1000239FC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "inputNode:", 0));
  objc_msgSend(v2, "removeTapOnBus:", 0);

  v3 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(+[VMAudioService sharedInstance](VMAudioService, "sharedInstance"));
  objc_msgSend(v4, "setRecordingError:", v3);

}

void sub_100023F10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_100024C44(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[RCRecorderStyleProvider sharedStyleProvider](RCRecorderStyleProvider, "sharedStyleProvider"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIButtonConfiguration filledButtonConfiguration](UIButtonConfiguration, "filledButtonConfiguration"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100024D9C;
  v11[3] = &unk_1001AB740;
  v12 = v4;
  v6 = v4;
  v7 = objc_retainBlock(v11);
  objc_msgSend(v5, "setTitle:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v5, "setTitleTextAttributesTransformer:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "trimDeleteButtonBackgroundColor"));
  objc_msgSend(v5, "setBaseBackgroundColor:", v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "trimDeleteButtonTextColor"));
  objc_msgSend(v5, "setBaseForegroundColor:", v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "background"));
  objc_msgSend(v6, "trimDeleteButtonCornerRadius");
  objc_msgSend(v10, "setCornerRadius:");

  objc_msgSend(v5, "setCornerStyle:", -1);
  objc_msgSend(v3, "setConfiguration:", v5);

}

id sub_100024D9C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;

  v3 = objc_msgSend(a2, "mutableCopy");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trimDeleteButtonFont"));
  objc_msgSend(v3, "setObject:forKey:", v4, NSFontAttributeName);

  return v3;
}

UIColor *__cdecl sub_1000259CC(id a1, UITraitCollection *a2)
{
  double v2;
  double v3;
  double v4;

  if (-[UITraitCollection isUserInterfaceStyleDark](a2, "isUserInterfaceStyleDark"))
  {
    v2 = 0.537;
    v3 = 0.514;
    v4 = 1.0;
  }
  else
  {
    v4 = 0.6;
    v2 = 0.137;
    v3 = 0.114;
  }
  return (UIColor *)(id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", v4, v2, v3, 1.0));
}

void sub_100026A5C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 1.0, 0.231372549, 0.188235294, 1.0));
  v2 = (void *)qword_1001ED828;
  qword_1001ED828 = v1;

}

UIColor *__cdecl sub_100026C28(id a1, UITraitCollection *a2)
{
  unsigned int v2;
  double v3;

  v2 = -[UITraitCollection isUserInterfaceStyleDark](a2, "isUserInterfaceStyleDark");
  v3 = 0.129411765;
  if (v2)
    v3 = 1.0;
  return +[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", v3);
}

UIColor *__cdecl sub_100026C84(id a1, UITraitCollection *a2)
{
  double v2;
  double v3;

  if (-[UITraitCollection isUserInterfaceStyleDark](a2, "isUserInterfaceStyleDark"))
  {
    v2 = 0.898039216;
    v3 = 0.917647059;
  }
  else
  {
    v2 = 0.56;
    v3 = 0.58;
  }
  return (UIColor *)(id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", v2, v2, v3, 1.0));
}

UIColor *__cdecl sub_100026CF4(id a1, UITraitCollection *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;

  if (-[UITraitCollection isUserInterfaceStyleDark](a2, "isUserInterfaceStyleDark"))
  {
    v2 = 0.180392157;
    v3 = 0.184313725;
    v4 = 1.0;
    v5 = 0.180392157;
  }
  else
  {
    v2 = 0.87;
    v4 = 1.0;
    v5 = 0.87;
    v3 = 0.87;
  }
  return (UIColor *)(id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", v2, v5, v3, v4));
}

UIColor *__cdecl sub_100026D68(id a1, UITraitCollection *a2)
{
  void *v2;

  if (-[UITraitCollection isUserInterfaceStyleDark](a2, "isUserInterfaceStyleDark"))
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  else
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor blackColor](UIColor, "blackColor"));
  return (UIColor *)v2;
}

void sub_100026E40(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id sub_100026E5C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  unsigned int v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  double v11;
  void *v12;
  void *v13;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!objc_msgSend(WeakRetained, "_isIpadOrIOSMac"))
  {

    goto LABEL_5;
  }
  v5 = objc_msgSend(v3, "isUserInterfaceStyleDark");

  if (!v5)
  {
LABEL_5:
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor quaternarySystemFillColor](UIColor, "quaternarySystemFillColor"));
    objc_msgSend(v10, "alphaComponent");
    v8 = v11 * 0.33;

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor quaternarySystemFillColor](UIColor, "quaternarySystemFillColor"));
    goto LABEL_6;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor tertiarySystemFillColor](UIColor, "tertiarySystemFillColor"));
  objc_msgSend(v6, "alphaComponent");
  v8 = v7 * 0.66;

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor tertiarySystemFillColor](UIColor, "tertiarySystemFillColor"));
LABEL_6:
  v12 = v9;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "colorWithAlphaComponent:", v8));

  return v13;
}

void sub_100026FE4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id sub_100027000(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  unsigned int v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  id v11;
  unsigned int v12;
  void *v13;
  double v14;
  double v15;
  void *v16;
  void *v17;

  v3 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v4);
  if (!objc_msgSend(WeakRetained, "_isIpadOrIOSMac"))
  {

LABEL_5:
    v11 = objc_loadWeakRetained(v4);
    if (objc_msgSend(v11, "_isCompactWidth"))
    {
      v12 = objc_msgSend(v3, "isUserInterfaceStyleDark");

      if (v12)
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor quaternarySystemFillColor](UIColor, "quaternarySystemFillColor"));
        objc_msgSend(v13, "alphaComponent");
        v15 = 0.65;
LABEL_10:
        v9 = v14 * v15;

        v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor quaternarySystemFillColor](UIColor, "quaternarySystemFillColor"));
        goto LABEL_11;
      }
    }
    else
    {

    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor quaternarySystemFillColor](UIColor, "quaternarySystemFillColor"));
    objc_msgSend(v13, "alphaComponent");
    v15 = 0.67;
    goto LABEL_10;
  }
  v6 = objc_msgSend(v3, "isUserInterfaceStyleDark");

  if (!v6)
    goto LABEL_5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor tertiarySystemFillColor](UIColor, "tertiarySystemFillColor"));
  objc_msgSend(v7, "alphaComponent");
  v9 = v8 * 0.38;

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor tertiarySystemFillColor](UIColor, "tertiarySystemFillColor"));
LABEL_11:
  v16 = v10;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "colorWithAlphaComponent:", v9));

  return v17;
}

void sub_100028820(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playPauseButton"));
  objc_msgSend(v3, "setEnabled:", v2);

  v4 = *(unsigned __int8 *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "jumpBackwardButton"));
  objc_msgSend(v5, "setEnabled:", v4);

  v6 = *(unsigned __int8 *)(a1 + 40);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "jumpForwardButton"));
  objc_msgSend(v7, "setEnabled:", v6);

}

void sub_100029494(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[3];
  _QWORD v10[3];

  objc_msgSend(*(id *)(a1 + 32), "setRowSpacing:", 27.0);
  objc_msgSend(*(id *)(a1 + 32), "setVerticalAlignment:", 3);
  objc_msgSend(*(id *)(a1 + 32), "setHorizontalDistribution:", 5);
  v2 = *(void **)(a1 + 32);
  v10[0] = *(_QWORD *)(a1 + 40);
  v10[1] = v10[0];
  v10[2] = v10[0];
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v10, 3));
  v4 = objc_msgSend(v2, "addRowWithArrangedSubviews:", v3);

  objc_msgSend(*(id *)(a1 + 32), "setAlignment:forView:inAxis:", 0, *(_QWORD *)(a1 + 40), 0);
  v5 = *(_QWORD **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 56);
  v9[0] = *(_QWORD *)(a1 + 48);
  v9[1] = v6;
  v9[2] = v5[18];
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v9, 3));
  v8 = objc_msgSend(v5, "addRowWithArrangedSubviews:", v7);

}

void sub_10002A8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)RCActivityWaveformProcessor;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10002A918(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_10002ABCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_10002AC20(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  vm_size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;

  sub_10002ADDC(a1);
  v8 = (vm_page_size + 4 * a2 - 1) & -(uint64_t)vm_page_size;
  *(_DWORD *)(a1 + 32) = v8 >> 2;
  v9 = (char *)malloc_type_calloc(3 * a3, 8uLL, 0x80040B8603338uLL);
  *(_QWORD *)a1 = &v9[8 * a3];
  *(_QWORD *)(a1 + 8) = &v9[16 * a3];
  *(_QWORD *)(a1 + 16) = v9;
  if (a3 < 1)
    return 1;
  **(_QWORD **)(a1 + 16) = sub_100046C08(v8, 10, a4);
  v10 = **(_QWORD **)(a1 + 16);
  if (v10)
  {
    v11 = 0;
    v12 = a3;
    v13 = a3 - 1;
    while (1)
    {
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v10;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v11) = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v11);
      *(_DWORD *)(a1 + 36) = v11 + 1;
      if (v13 == v11)
        return v11 + 1 >= v12;
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v11 + 8) = sub_100046C08(v8, 10, a4);
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v11++ + 8);
      if (!v10)
      {
        v14 = v11 >= v12;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v14 = 0;
LABEL_9:
    sub_10002ADDC(a1);
  }
  return v14;
}

id sub_10002AD74(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "activityWaveformProcessor:updatedRecordingStartTime:", *(double *)(*(_QWORD *)(a1 + 40) + 112));
}

double sub_10002ADDC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  double result;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    if (*(int *)(a1 + 36) >= 1)
    {
      v3 = 0;
      do
        sub_100046BEC(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v3++), 4 * *(int *)(a1 + 32));
      while (v3 < *(int *)(a1 + 36));
      v2 = *(void **)(a1 + 16);
    }
    free(v2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  atomic_store(0, (unsigned int *)(a1 + 40));
  return result;
}

void sub_10002B020(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10002B058(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  signed int v8;

  v2 = *(unsigned int *)(result + 36);
  v3 = (*(_DWORD *)(result + 24) + a2) % *(_DWORD *)(result + 32);
  *(_DWORD *)(result + 24) = v3;
  if ((int)v2 >= 1)
  {
    v4 = 0;
    v5 = 8 * v2;
    do
    {
      *(_QWORD *)(*(_QWORD *)(result + 8) + v4) = *(_QWORD *)(*(_QWORD *)(result + 16) + v4) + 4 * v3;
      v4 += 8;
    }
    while (v5 != v4);
  }
  v6 = (unsigned int *)(result + 40);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + a2, v6));
  v8 = atomic_load((unsigned int *)(result + 40));
  if (v8 > *(_DWORD *)(result + 32))
    sub_10010AC9C();
  return result;
}

id sub_10002B0DC(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 40);
  if (*(float *)&a2 != -1.0)
    a2 = sub_10002B118(*(uint64_t **)(*(_QWORD *)(a1 + 32) + 72), *(float *)&a2);
  return objc_msgSend(*(id *)(a1 + 32), "consumeRingBufferIfNecessary", a2);
}

double sub_10002B118(uint64_t *a1, float a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double result;

  v2 = *((_DWORD *)a1 + 7);
  v3 = *((int *)a1 + 6);
  if (v2 >= (int)v3)
  {
    v4 = a1[4];
    v5 = *a1;
    v6 = *((double *)a1 + 5) - *(float *)(*a1 + 4 * v4);
  }
  else
  {
    *((_DWORD *)a1 + 7) = v2 + 1;
    v4 = a1[4];
    v5 = *a1;
    v6 = *((double *)a1 + 5);
  }
  *(float *)(v5 + 4 * v4) = a2;
  result = v6 + a2;
  *((double *)a1 + 5) = result;
  a1[4] = (v4 + 1) % v3;
  return result;
}

uint64_t sub_10002B3AC(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = (*(_DWORD *)(result + 28) + a2) % *(_DWORD *)(result + 32);
  *(_DWORD *)(result + 28) = v2;
  v3 = *(unsigned int *)(result + 36);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = 8 * v3;
    do
    {
      *(_QWORD *)(*(_QWORD *)result + v4) = *(_QWORD *)(*(_QWORD *)(result + 16) + v4) + 4 * v2;
      v4 += 8;
    }
    while (v5 != v4);
  }
  v6 = (unsigned int *)(result + 40);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - a2, v6));
  v8 = atomic_load(v6);
  if ((v8 & 0x80000000) != 0)
    sub_10010ACC4();
  return result;
}

_QWORD *sub_10002B51C(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10002B590(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_10002B574(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10002B590(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    sub_10002B5D0();
  result = (char *)sub_10002B5E4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void sub_10002B5D0()
{
  sub_10002B618("vector");
}

void *sub_10002B5E4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_10002B68C();
  return operator new(4 * a2);
}

void sub_10002B618(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_10002B668(exception, a1);
}

void sub_10002B654(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_10002B668(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_10002B68C()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void sub_10002B73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

NSCollectionLayoutSection *__cdecl sub_10002C988(id a1, int64_t a2, NSCollectionLayoutEnvironment *a3)
{
  NSCollectionLayoutEnvironment *v4;
  id v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  double v15;
  double v16;

  v4 = a3;
  v5 = objc_msgSend(objc_alloc((Class)UICollectionLayoutListConfiguration), "initWithAppearance:", 2);
  objc_msgSend(v5, "setShowsSeparators:", 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
  objc_msgSend(v5, "setBackgroundColor:", v6);

  if (!a2)
    objc_msgSend(v5, "setHeaderMode:", 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSection sectionWithListConfiguration:layoutEnvironment:](NSCollectionLayoutSection, "sectionWithListConfiguration:layoutEnvironment:", v5, v4));
  objc_msgSend(v7, "contentInsets");
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[RCRecorderStyleProvider sharedStyleProvider](RCRecorderStyleProvider, "sharedStyleProvider"));
  objc_msgSend(v14, "playbackSettingsCollectionViewContentInsetBottom");
  v16 = v15;

  objc_msgSend(v7, "setContentInsets:", v9, v11, v16, v13);
  return (NSCollectionLayoutSection *)v7;
}

void sub_10002D910(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_10002E0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10002E0C8(uint64_t a1, void *a2, void *a3)
{
  id *v5;
  id WeakRetained;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  id v26;
  _QWORD v27[4];
  id v28;
  id v29;
  _QWORD v30[2];

  v19 = a2;
  v20 = a3;
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[RCRecorderStyleProvider sharedStyleProvider](RCRecorderStyleProvider, "sharedStyleProvider"));
  v5 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "folderName"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("RENAME_FOLDER"), &stru_1001B2BC0, 0));

  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "renameContextMenuButtonImage"));
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_10002E3D4;
  v27[3] = &unk_1001AB9B8;
  objc_copyWeak(&v29, v5);
  v9 = v7;
  v28 = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", v22, v21, 0, v27));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("DELETE"), &stru_1001B2BC0, 0));

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "deleteContextMenuButtonImage"));
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10002E420;
  v24[3] = &unk_1001AB9B8;
  objc_copyWeak(&v26, v5);
  v14 = v9;
  v25 = v14;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction actionWithTitle:image:identifier:handler:](UIAction, "actionWithTitle:image:identifier:handler:", v12, v13, 0, v24));
  objc_msgSend(v15, "setAttributes:", 2);
  v30[0] = v10;
  v30[1] = v15;
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v30, 2));
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenu menuWithTitle:children:](UIMenu, "menuWithTitle:children:", &stru_1001B2BC0, v16));

  objc_destroyWeak(&v26);
  objc_destroyWeak(&v29);

  return v17;
}

void sub_10002E38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  id *v11;

  objc_destroyWeak(v11);
  objc_destroyWeak(location);
  _Unwind_Resume(a1);
}

void sub_10002E3D4(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "actionHandler"));
  objc_msgSend(v2, "showRenamingControllerWithFolderName:", *(_QWORD *)(a1 + 32));

}

void sub_10002E420(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "actionHandler"));
  objc_msgSend(v2, "deleteFolderWithFolderName:", *(_QWORD *)(a1 + 32));

}

id sub_10002F194(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "adjustConstraints:forDisplayMode:", 1, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80));
}

uint64_t sub_10002F1AC(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 72) = 0;
  return result;
}

id sub_100030128(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "setAlpha:", 1.0);
}

id sub_100030E70(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_registerInternalAudioUnits");
}

void sub_100030FC0(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BOOL4 v6;
  _DWORD *v7;
  uint64_t v8;
  __int128 v9;
  unsigned __int8 v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  _OWORD v15[2];
  uint64_t v16;
  _BYTE buf[32];
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 120))
  {
    v3 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)buf = *(_OWORD *)(a1 + 40);
    *(_OWORD *)&buf[16] = v3;
    v18 = *(_QWORD *)(a1 + 72);
    v4 = *(_OWORD *)(v2 + 8);
    v5 = *(_OWORD *)(v2 + 24);
    v16 = *(_QWORD *)(v2 + 40);
    v15[0] = v4;
    v15[1] = v5;
    v6 = sub_100075760((uint64_t)buf, (uint64_t)v15);
    v7 = *(_DWORD **)(a1 + 32);
    if (v6 && v7[32] == *(_DWORD *)(a1 + 80))
      return;
    objc_msgSend(v7, "_unprepare");
    v2 = *(_QWORD *)(a1 + 32);
  }
  v8 = *(unsigned int *)(a1 + 80);
  v14 = 0;
  v9 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)buf = *(_OWORD *)(a1 + 40);
  *(_OWORD *)&buf[16] = v9;
  v18 = *(_QWORD *)(a1 + 72);
  v10 = objc_msgSend((id)v2, "_prepareWithFormat:maxFramesPerRender:error:", buf, v8, &v14);
  v11 = v14;
  if ((v10 & 1) == 0)
  {
    v12 = OSLogForCategory(kVMLogCategoryService);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "-[VMProcessor prepareWithFormat:maxFramesPerRender:]_block_invoke";
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v11;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%s -- prepareWithFormat error %@", buf, 0x16u);
    }

  }
}

id sub_100031188(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unprepare");
}

void sub_100031410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100031438(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_unprepare");
  return 0;
}

uint64_t sub_100031454(uint64_t a1, unsigned int a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  uint64_t result;
  unsigned int v8;
  unint64_t v9;
  uint64_t *v10;
  UInt32 v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  AudioTimeStamp v16;
  AudioBufferList ioData;

  *(_QWORD *)&ioData.mNumberBuffers = 1;
  ioData.mBuffers[0].mNumberChannels = 1;
  v3 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v16.mSampleTime = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v16.mRateScalar = v3;
  v4 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)&v16.mSMPTETime.mSubframes = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v16.mSMPTETime.mHours = v4;
  if (!a2)
    return 0;
  result = 0;
  v8 = 0;
  LODWORD(v9) = *(_DWORD *)(a1 + 36);
  v10 = (uint64_t *)(a3 + 16);
  do
  {
    if (a2 - v8 >= *(_DWORD *)(a1 + 132))
      v11 = *(_DWORD *)(a1 + 132);
    else
      v11 = a2 - v8;
    if ((_DWORD)v9 && !(_DWORD)result)
    {
      v12 = 0;
      v13 = v10;
      do
      {
        ioData.mBuffers[0].mDataByteSize = 4 * v11;
        v14 = *v13;
        v13 += 2;
        ioData.mBuffers[0].mData = (void *)(v14 + 4 * v8);
        *(_QWORD *)(a1 + 112) = &ioData;
        result = AudioUnitRender(*(AudioUnit *)(*(_QWORD *)(a1 + 120) + 8 * v12++), 0, &v16, 0, v11, &ioData);
        v9 = *(unsigned int *)(a1 + 36);
      }
      while (v12 < v9 && (_DWORD)result == 0);
    }
    v8 += v11;
    v16.mSampleTime = v16.mSampleTime + (double)v11;
  }
  while (v8 < a2);
  return result;
}

void sub_100031564(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v4;
  uint64_t state64;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  state64 = 0;
  if (WeakRetained && !notify_get_state(a2, &state64))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", state64));
    objc_msgSend(WeakRetained, "_updateParameterForAddress:", v4);

  }
}

void sub_100031778(id a1)
{
  NSMutableDictionary *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v1 = objc_opt_new(NSMutableDictionary);
  v2 = (void *)qword_1001ED838;
  qword_1001ED838 = (uint64_t)v1;

  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[VMDSPGraph parameters](VMDSPGraph, "parameters", 0));
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        v9 = (void *)qword_1001ED838;
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v8, "address")));
        objc_msgSend(v9, "setObject:forKeyedSubscript:", v8, v10);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

}

uint64_t sub_100031A90(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 32) + 176));
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 32) + 176));
}

uint64_t sub_100031ACC(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  float v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  int v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;

  if (*(_BYTE *)(a1 + 248) && pthread_mutex_trylock((pthread_mutex_t *)(a1 + 176)))
    return 0;
  v8 = 0;
  if (a4 && a2 && *(_QWORD *)(a1 + 120))
  {
    v9 = *(unsigned __int8 *)(a1 + 249);
    v10 = *(_QWORD *)(a1 + 136);
    if (v10 == a3)
    {
      v11 = *(float *)(a1 + 152);
    }
    else
    {
      v11 = 0.0;
      if (*(_BYTE *)(a1 + 249))
        v11 = 1.0;
      *(float *)(a1 + 152) = v11;
    }
    v15 = v9 == 0;
    v12 = v9 != 0;
    if (v15)
      v13 = v11 != 0.0;
    else
      v13 = v11 != 1.0;
    v8 = v11 != 0.0 || v12;
    v14 = v11 != 1.0 && v12;
    v15 = v10 == a3 && *(_QWORD *)(a1 + 144) == a3;
    v16 = !v15;
    if ((_DWORD)v8 == 1 && v16 != 0)
    {
      sub_100075850(a4, *(unsigned int **)(a1 + 160));
      sub_100031454(a1, a2, *(_QWORD *)(a1 + 160));
    }
    if (v13)
      sub_100075850(a4, *(unsigned int **)(a1 + 160));
    v18 = a3 + a2;
    if ((_DWORD)v8)
    {
      v8 = sub_100031454(a1, a2, (uint64_t)a4);
      if (v16)
      {
        v19 = *(_DWORD *)(a1 + 240) >= a2 ? a2 : *(_DWORD *)(a1 + 240);
        v20 = a2 - v19 >= *(_DWORD *)(a1 + 244) ? *(_DWORD *)(a1 + 244) : a2 - v19;
        sub_1000759E8(a4, v19, 0);
        if (v20)
        {
          v21 = 1.0 / (double)v20;
          sub_100075984(a4, v20, v19, 0.0, v21);
        }
      }
      *(double *)(a1 + 48) = *(double *)(a1 + 48) + (double)a2;
      *(_QWORD *)(a1 + 144) = v18;
    }
    if (v13)
    {
      v22 = *(float *)(a1 + 152);
      v23 = *(float *)(a1 + 156);
      if (!v14)
        v23 = -v23;
      v24 = a4[3];
      if (v24 >= 4)
      {
        v25 = 0;
        v26 = v24 >> 2;
        v29 = *a4;
        v28 = a4 + 4;
        v27 = v29;
        v30 = *(_QWORD *)(a1 + 160) + 16;
        do
        {
          if ((_DWORD)v27)
          {
            v31 = v28;
            v32 = (uint64_t *)v30;
            v33 = v27;
            do
            {
              v35 = *(_QWORD *)v31;
              v31 += 4;
              v34 = v35;
              v36 = *(float *)(v35 + 4 * v25);
              v37 = *v32;
              v32 += 2;
              *(float *)(v34 + 4 * v25) = (float)((float)(1.0 - v22) * *(float *)(v37 + 4 * v25)) + (float)(v36 * v22);
              --v33;
            }
            while (v33);
          }
          v22 = fminf(fmaxf(v23 + v22, 0.0), 1.0);
          ++v25;
        }
        while (v25 != v26);
      }
      *(float *)(a1 + 152) = v22;
    }
    *(_QWORD *)(a1 + 136) = v18;
  }
  if (*(_BYTE *)(a1 + 248))
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 176));
  return v8;
}

void sub_1000321A0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  objc_msgSend(v2, "removeItemAtURL:error:", *(_QWORD *)(a1 + 32), 0);

}

uint64_t sub_1000321E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v6 = *a6;
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 16 * v6;
    do
    {
      *(_OWORD *)&a6[v7 / 4 + 2] = *(_OWORD *)(*(_QWORD *)(a1 + 112) + v7 + 8);
      v7 += 16;
    }
    while (v8 != v7);
  }
  return 0;
}

id sub_1000325C8(uint64_t a1)
{
  double v2;
  __int128 v3;
  _OWORD v5[3];

  v2 = *(double *)(a1 + 40);
  *(float *)&v2 = v2;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setOpacity:", v2);
  v3 = *(_OWORD *)(a1 + 64);
  v5[0] = *(_OWORD *)(a1 + 48);
  v5[1] = v3;
  v5[2] = *(_OWORD *)(a1 + 80);
  return objc_msgSend(*(id *)(a1 + 32), "setTransform:", v5);
}

char *sub_100032624(char *result, int a2)
{
  __int128 v2;
  _OWORD v3[3];

  if (a2)
  {
    v2 = *(_OWORD *)(result + 56);
    v3[0] = *(_OWORD *)(result + 40);
    v3[1] = v2;
    v3[2] = *(_OWORD *)(result + 72);
    return (char *)objc_msgSend(*((id *)result + 4), "setTransform:", v3);
  }
  return result;
}

void sub_1000342BC(uint64_t a1, void *a2, void *a3, int a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  id v17;
  id v18;
  void *v19;
  void *v20;
  char v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  id v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  double MidX;
  double MidY;
  double Width;
  double Height;
  double v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  double v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  double v54;
  void *v55;
  _QWORD v56[3];
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;

  v17 = a2;
  v18 = a3;
  if (v18)
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "animationForKey:", v18));
    if (v19)
      goto LABEL_9;
  }
  else
  {
    v19 = 0;
  }
  if (!a4)
  {
    if (*(_BYTE *)(a1 + 56)
      && (v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "superlayer")), v20, v20))
    {
      v21 = 1;
    }
    else
    {
      +[CATransaction begin](CATransaction, "begin");
      +[CATransaction setDisableActions:](CATransaction, "setDisableActions:", 1);
      objc_msgSend(v17, "removeAllAnimations");
      v21 = 0;
    }
    objc_msgSend(v17, "setFrame:", a5, a6, a7, a8);
    *(float *)&v48 = a9;
    objc_msgSend(v17, "setOpacity:", v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "superlayer"));

    if (v49)
    {
      if ((v21 & 1) != 0)
        goto LABEL_25;
    }
    else
    {
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "layer"));
      objc_msgSend(v50, "addSublayer:", v17);

      if ((v21 & 1) != 0)
        goto LABEL_25;
    }
    +[CATransaction commit](CATransaction, "commit");
    goto LABEL_25;
  }
LABEL_9:
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "superlayer"));

  if (!v22)
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "layer"));
    objc_msgSend(v23, "addSublayer:", v17);

  }
  v54 = a9;
  v24 = *(double *)(a1 + 40);
  if (v24 * 0.25 >= *(double *)(a1 + 48))
    v25 = v24 * 0.25;
  else
    v25 = *(double *)(a1 + 48);
  if (v19)
  {
    v26 = CACurrentMediaTime();
    objc_msgSend(v19, "beginTime");
    v28 = v27;
    objc_msgSend(v19, "duration");
    v30 = v26 - (v28 + v29);
    if (v30 > 0.1)
      v25 = v30;
    else
      v25 = 0.1;
  }
  v31 = v17;
  v53 = v18;
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "presentationLayer"));
  v33 = objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "valueForKeyPath:", CFSTR("position")));

  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "presentationLayer"));
  v35 = objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "valueForKeyPath:", CFSTR("bounds")));

  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "presentationLayer"));
  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "valueForKey:", CFSTR("opacity")));

  v57.origin.x = a5;
  v57.origin.y = a6;
  v57.size.width = a7;
  v57.size.height = a8;
  MidX = CGRectGetMidX(v57);
  v58.origin.x = a5;
  v58.origin.y = a6;
  v58.size.width = a7;
  v58.size.height = a8;
  MidY = CGRectGetMidY(v58);
  v59.origin.x = a5;
  v59.origin.y = a6;
  v59.size.width = a7;
  v59.size.height = a8;
  Width = CGRectGetWidth(v59);
  v60.origin.x = a5;
  v60.origin.y = a6;
  v60.size.width = a7;
  v60.size.height = a8;
  Height = CGRectGetHeight(v60);
  objc_msgSend(v31, "setPosition:", MidX, MidY);
  objc_msgSend(v31, "setBounds:", 0.0, 0.0, Width, Height);
  HIDWORD(v42) = HIDWORD(v54);
  *(float *)&v42 = v54;
  objc_msgSend(v31, "setOpacity:", v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue(+[CABasicAnimation animationWithKeyPath:](CABasicAnimation, "animationWithKeyPath:", CFSTR("position")));
  v55 = (void *)v33;
  objc_msgSend(v43, "setFromValue:", v33);
  v44 = (void *)objc_claimAutoreleasedReturnValue(+[CABasicAnimation animationWithKeyPath:](CABasicAnimation, "animationWithKeyPath:", CFSTR("bounds")));
  v52 = (void *)v35;
  objc_msgSend(v44, "setFromValue:", v35);
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[CABasicAnimation animationWithKeyPath:](CABasicAnimation, "animationWithKeyPath:", CFSTR("opacity")));
  objc_msgSend(v45, "setFromValue:", v37);
  v46 = objc_alloc_init((Class)CAAnimationGroup);
  v56[0] = v43;
  v56[1] = v44;
  v56[2] = v45;
  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v56, 3));
  objc_msgSend(v46, "setAnimations:", v47);

  if (v25 >= 0.0)
    objc_msgSend(v46, "setDuration:", v25);
  objc_msgSend(v46, "setRemovedOnCompletion:", 1, v18);
  objc_msgSend(v31, "addAnimation:forKey:", v46, v53);

  v18 = v51;
LABEL_25:

}

BOOL sub_100034950(uint64_t a1, void *a2, double a3, double a4)
{
  id v7;
  float v8;
  _BOOL8 v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  CGFloat v23;
  double v24;
  double v25;
  double v26;
  CGFloat v27;
  CGRect v29;

  v7 = a2;
  objc_msgSend(v7, "opacity");
  if (v8 < 1.0 || (objc_msgSend(v7, "isHidden") & 1) != 0)
  {
    v9 = 0;
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "layer"));
    objc_msgSend(v7, "frame");
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "superlayer"));
    objc_msgSend(v10, "convertRect:fromLayer:", v19, v12, v14, v16, v18);
    v21 = v20;
    v23 = v22;
    v25 = v24;
    v27 = v26;

    v29.origin.x = v21 - a3;
    v29.size.width = a3 + a4 + v25;
    v29.origin.y = v23;
    v29.size.height = v27;
    v9 = CGRectContainsPoint(v29, *(CGPoint *)(a1 + 40));
  }

  return v9;
}

void sub_100034F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 224), 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Block_object_dispose((const void *)(v35 - 160), 8);
  _Block_object_dispose((const void *)(v35 - 128), 8);
  _Unwind_Resume(a1);
}

double sub_100035010(id a1, double result, double a3, double a4, double a5, int a6)
{
  double v6;
  double v7;
  int v8;
  BOOL v9;
  double v10;
  BOOL v11;
  double v12;

  v6 = a3 - result;
  if (a6 <= 0)
    v6 = result - a3;
  v7 = fmax(v6, 0.0);
  v8 = -a6;
  v9 = v7 >= a4 || a4 <= 0.0;
  v10 = a3 + (double)v8 * a4;
  if (!v9)
    result = v10;
  v11 = v7 <= a5 || a5 <= 0.0;
  v12 = a3 + (double)v8 * a5;
  if (!v11)
    return v12;
  return result;
}

void sub_100035054(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  double v23;
  double v24;
  double v25;
  id WeakRetained;
  uint64_t v27;
  id v28;

  v28 = a2;
  objc_msgSend(v28, "updateTrackingInfo");
  v3 = objc_msgSend(v28, "selectionBarType");
  if (v3 == (id)2)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) = 1;
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "touch"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "superview"));
    objc_msgSend(v21, "locationInView:", v22);
    v24 = v23;

    if ((objc_msgSend(*(id *)(a1 + 32), "enableTimeTrackingInView") & 1) == 0)
    {
      objc_msgSend(v28, "trackingOffset");
      v24 = v24 + v25;
    }
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 160));
    objc_msgSend(WeakRetained, "waveformSelectionOverlay:timeForOffset:", *(_QWORD *)(a1 + 32), v24);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = v27;

    v4 = v28;
  }
  else
  {
    if (v3 == (id)1)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 1;
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "touch"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "superview"));
      objc_msgSend(v14, "locationInView:", v15);
      v17 = v16;
      objc_msgSend(v28, "trackingOffset");
      *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = v17 + v18;

      v19 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 160));
      objc_msgSend(v19, "waveformSelectionOverlay:timeForOffset:", *(_QWORD *)(a1 + 32), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24));
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v20;

      (*(void (**)(double, double, double, double))(*(_QWORD *)(a1 + 40) + 16))(*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), *(double *)(*(_QWORD *)(a1 + 32) + 168), *(double *)(*(_QWORD *)(a1 + 32) + 176));
      v4 = v28;
      v13 = *(_QWORD *)(a1 + 72);
      goto LABEL_6;
    }
    v4 = v28;
    if (!v3)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "touch"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "superview"));
      objc_msgSend(v5, "locationInView:", v6);
      v8 = v7;
      objc_msgSend(v28, "trackingOffset");
      *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v8 + v9;

      v10 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 160));
      objc_msgSend(v10, "waveformSelectionOverlay:timeForOffset:", *(_QWORD *)(a1 + 32), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v11;

      (*(void (**)(double, double, double, double))(*(_QWORD *)(a1 + 40) + 16))(*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24), *(double *)(*(_QWORD *)(a1 + 32) + 168), *(double *)(*(_QWORD *)(a1 + 32) + 176));
      v4 = v28;
      v13 = *(_QWORD *)(a1 + 64);
LABEL_6:
      *(_QWORD *)(*(_QWORD *)(v13 + 8) + 24) = v12;
    }
  }

}

void sub_100035404(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;

  v6 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "touch"));

  if (!v5)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);

}

id sub_1000358B0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "containsObject:", objc_msgSend(a2, "pointerValue"));
  *a4 = (_BYTE)result;
  return result;
}

id sub_1000384C8(uint64_t a1)
{
  id v2;

  v2 = objc_alloc_init((Class)CALayer);
  objc_msgSend(v2, "setBounds:", 0.0, 0.0, *(double *)(a1 + 56), *(double *)(a1 + 40) + *(double *)(a1 + 48) * -4.0);
  objc_msgSend(v2, "setBackgroundColor:", objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "CGColor"));
  objc_msgSend(v2, "setOpaque:", 1);
  return v2;
}

id sub_100038538(uint64_t a1)
{
  id v2;

  v2 = objc_alloc_init((Class)CALayer);
  objc_msgSend(v2, "setBounds:", 0.0, 0.0, *(double *)(a1 + 40) + *(double *)(a1 + 40), *(double *)(a1 + 40) + *(double *)(a1 + 40));
  objc_msgSend(v2, "setBackgroundColor:", objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "CGColor"));
  objc_msgSend(v2, "setCornerRadius:", *(double *)(a1 + 40));
  objc_msgSend(v2, "setOpaque:", 1);
  return v2;
}

void sub_100038CD0(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "durationLabel"));
  objc_msgSend(v1, "setAlpha:", 0.0);

}

uint64_t sub_100038D14(uint64_t a1)
{
  return UIAXTimeStringForDuration(*(double *)(a1 + 32));
}

id sub_100039210(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setTextColor:", *(_QWORD *)(a1 + 40));
}

id sub_1000392D8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setTextColor:", *(_QWORD *)(a1 + 40));
}

id sub_10003A0C4(uint64_t a1)
{
  double Height;
  void *v3;
  CGRect v5;

  objc_msgSend(*(id *)(a1 + 40), "frame");
  Height = CGRectGetHeight(v5);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordingViewBottomConstraint"));
  objc_msgSend(v3, "setConstant:", Height);

  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

id sub_10003A118(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setHidden:", 1);
  return _objc_msgSend(*(id *)(a1 + 40), "didUpdateBottomLayoutForEditing");
}

void sub_10003A144(uint64_t a1)
{
  double v2;
  double v3;
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;
  id v10;

  +[CATransaction animationDuration](CATransaction, "animationDuration");
  v3 = v2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10003A1EC;
  v7[3] = &unk_1001ABD30;
  v4 = *(id *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(a1 + 48);
  v8 = v4;
  v9 = v5;
  v10 = v6;
  +[UIView animateWithDuration:animations:](UIView, "animateWithDuration:animations:", v7, v3);

}

id sub_10003A1EC(id *a1)
{
  void *v2;

  objc_msgSend(a1[4], "setHidden:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "recordingViewBottomConstraint"));
  objc_msgSend(v2, "setConstant:", 0.0);

  objc_msgSend(a1[5], "layoutIfNeeded");
  return _objc_msgSend(a1[6], "didUpdateBottomLayoutForEditing");
}

float sub_10003B450(float a1)
{
  return 1.0 - pow((float)(1.0 - a1), 3.0);
}

void sub_10003B57C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10003B62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VMAudioOutputRenderer;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10003B864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL sub_10003B88C(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  _BOOL8 v6;
  size_t v7;

  v6 = sub_10002AC20(a1, a2, a3, a4);
  if (v6)
  {
    v7 = 16 * (a3 - 1) + 24;
    *(_QWORD *)(a1 + 48) = malloc_type_malloc(v7, 0x42E4C910uLL);
    *(_QWORD *)(a1 + 56) = malloc_type_malloc(v7, 0x3C8812BAuLL);
  }
  return v6;
}

void sub_10003BB00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10003BB48(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "outputNode"));
  objc_msgSend(v2, "connect:to:format:", v3);

}

void sub_10003BB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10003BCAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10003BD34(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  if (v1)
    objc_msgSend(v1, "audioRendererQueueEmpty");

}

void sub_10003BD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10003BDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10003BE50(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  if (v1)
    objc_msgSend(v1, "audioRendererWasInterrupted");

}

void sub_10003BE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10003BFE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10003C2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10003C384(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  unsigned int *WeakRetained;

  WeakRetained = (unsigned int *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v2 = WeakRetained[48];
    v3 = atomic_load(WeakRetained + 20);
    v4 = v2 - v3;
    v5 = v4 & 0xFFFFF000;
    if ((v4 & 0xFFFFF000) != 0)
    {
      v6 = (_DWORD *)*((_QWORD *)WeakRetained + 12);
      v7 = (uint64_t *)*((_QWORD *)WeakRetained + 6);
      v8 = WeakRetained[19];
      *v6 = v8;
      if ((_DWORD)v8)
      {
        v9 = v6 + 4;
        do
        {
          *((_DWORD *)v9 - 2) = 1;
          *((_DWORD *)v9 - 1) = 4 * v5;
          v10 = *v7++;
          *v9 = v10;
          v9 += 2;
          --v8;
        }
        while (v8);
      }
      v11 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      sub_10002B058((uint64_t)(WeakRetained + 10), v11);
    }
    if (*((_BYTE *)WeakRetained + 200) && !*((_BYTE *)WeakRetained + 201))
    {
      *((_BYTE *)WeakRetained + 201) = 1;
      objc_msgSend(WeakRetained, "sendEmptyQueueSignal", v5);
    }
  }

}

void sub_10003C454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_10003C4BC(uint64_t a1, _BYTE *a2, AudioTimeStamp *a3, uint64_t inNumberFrames, AudioBufferList *ioData)
{
  uint64_t v6;
  OpaqueAudioComponentInstance *v7;
  AudioUnitRenderActionFlags ioActionFlags;

  if (*a2)
  {
    sub_1000759E8(ioData, inNumberFrames, 0);
    return 0;
  }
  else
  {
    ioActionFlags = 0;
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(OpaqueAudioComponentInstance **)(v6 + 232);
    if (v7)
      return AudioUnitRender(v7, &ioActionFlags, a3, 0, inNumberFrames, ioData);
    else
      return sub_10003C524(v6, (uint64_t)a2, &a3->mSampleTime, inNumberFrames, inNumberFrames, &ioData->mNumberBuffers);
  }
}

uint64_t sub_10003C524(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, unsigned int a5, unsigned int *a6)
{
  unsigned int v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;

  v10 = atomic_load((unsigned int *)(a1 + 80));
  if (v10 >= a5)
    v11 = a5;
  else
    v11 = v10;
  if (v11 >= 1)
    sub_10003C8E8(a1 + 40, (uint64_t)a6, v11, 0);
  v12 = a5 - v11;
  if ((int)(a5 - v11) >= 1)
  {
    if (*(_BYTE *)(a1 + 160))
      *(_QWORD *)(a1 + 208) += v12;
    else
      *(_BYTE *)(a1 + 200) = 1;
    if (*a6)
    {
      v13 = 0;
      v14 = 4;
      do
      {
        bzero((void *)(*(_QWORD *)&a6[v14] + 4 * v11), 4 * (a5 - v11));
        ++v13;
        v14 += 4;
      }
      while (v13 < *a6);
    }
  }
  if (!*(_QWORD *)(a1 + 144))
  {
    *(double *)(a1 + 144) = a3[1];
    *(double *)(a1 + 152) = *a3;
  }
  if ((v12 > 0 || *(double *)(a1 + 184) != a3[2]) && os_unfair_lock_trylock((os_unfair_lock_t)(a1 + 196)))
  {
    *(double *)(a1 + 168) = a3[1];
    *(double *)(a1 + 176) = *a3;
    *(double *)(a1 + 184) = a3[2];
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a1 + 208);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 196));
  }
  result = *(_QWORD *)(a1 + 240);
  if (result)
    return sub_100031ACC(result, a5, (uint64_t)*a3, a6);
  return result;
}

uint64_t sub_10003C8E8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  if (*(int *)(a1 + 36) >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)a1;
    v8 = a4;
    v9 = (uint64_t *)(a2 + 16);
    do
    {
      v10 = *v9;
      v9 += 2;
      memcpy((void *)(v10 + 4 * v8), *(const void **)(v7 + 8 * v6++), 4 * a3);
    }
    while (v6 < *(int *)(a1 + 36));
  }
  return sub_10002B3AC(a1, a3);
}

void sub_10003C96C(id a1)
{
  unint64_t v1;
  unint64_t v2;
  mach_timebase_info info;

  mach_timebase_info(&info);
  LODWORD(v1) = info.numer;
  LODWORD(v2) = info.denom;
  *(double *)&qword_1001ED858 = (double)v1 / (double)v2 * 0.000000001;
}

id sub_10003E0E8(uint64_t a1)
{
  id *v2;
  id result;
  double v4;

  v2 = *(id **)(a1 + 32);
  objc_msgSend(v2[4], "currentDuration");
  objc_msgSend(v2, "setDuration:");
  result = objc_msgSend(*(id *)(a1 + 32), "currentTime");
  if (v4 < 0.0)
    return objc_msgSend(*(id *)(a1 + 32), "setCurrentTime:", 0.0);
  return result;
}

id sub_10003EB1C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setDuration:", *(double *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "_updateCurrentTimeForCapturedInputAtTime:", *(double *)(a1 + 48));
}

id sub_10003EBA8(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10003EBFC;
  v3[3] = &unk_1001AB588;
  v3[4] = v1;
  return objc_msgSend(v1, "_updateDisplayableTimesWithBlock:", v3);
}

id sub_10003EBFC(uint64_t a1)
{
  id *v2;
  id *v3;

  v2 = *(id **)(a1 + 32);
  objc_msgSend(v2[4], "currentTime");
  objc_msgSend(v2, "setCurrentTime:");
  v3 = *(id **)(a1 + 32);
  objc_msgSend(v3[4], "currentDuration");
  return objc_msgSend(v3, "setDuration:");
}

id sub_10003ED64(uint64_t a1)
{
  id *v2;

  objc_msgSend(*(id *)(a1 + 32), "setCurrentTime:", *(double *)(a1 + 40));
  v2 = *(id **)(a1 + 32);
  objc_msgSend(v2[8], "duration");
  return objc_msgSend(v2, "setDuration:");
}

id sub_10003F208(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setSelectionOverlayShouldUseInsertMode:", *(unsigned __int8 *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "setSelectedTimeRangeEditingEnabled:", 1);
}

void sub_10003F238(uint64_t a1)
{
  void *v1;
  void *v2;
  id argument;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_selectionOverlay"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "accessibilityElements"));
  argument = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "firstObject"));

  UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, argument);
  UIAccessibilityPostNotification(UIAccessibilityAnnouncementNotification, argument);

}

id sub_10003F45C(uint64_t a1)
{
  if (objc_msgSend(*(id *)(a1 + 32), "isOverview"))
    objc_msgSend(*(id *)(a1 + 32), "updateVisibleTimeRangeToFullDuration");
  return objc_msgSend(*(id *)(a1 + 32), "setSelectedTimeRange:animationDuration:", RCTimeRangeMake(*(double *)(a1 + 40), *(double *)(a1 + 40)));
}

uint64_t sub_10003F4A4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10003F960(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_10003F978(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "recordingUUIDs"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v2, "isFavoriteForUUIDs:", v3);

}

uint64_t sub_10003FBBC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_10003FBD0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    return (*(uint64_t (**)(void))(v1 + 16))();
  else
    return 1;
}

void sub_10003FBE8(uint64_t a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;

  v5 = a2;
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  if (v5)
  {
    v6 = objc_msgSend(v5, "supportedInterfaceOrientations");
    v7 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10003FCE8;
    v8[3] = &unk_1001ABD30;
    v9 = v5;
    v10 = *(id *)(a1 + 40);
    v11 = *(id *)(a1 + 32);
    objc_msgSend(v7, "rc_ensureIsInterfaceOrientationMask:preferredOrientation:doneEnsuringBlock:", v6, 1, v8);

  }
  else if ((a3 & 1) == 0 && (*(unsigned int (**)(void))(*(_QWORD *)(a1 + 64) + 16))())
  {

  }
}

id sub_10003FCE8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "rc_configurePopoverControllerWithSource:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 48), "presentViewController:animated:completion:", *(_QWORD *)(a1 + 32), 1, &stru_1001ABED8);
}

id sub_1000406F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setState:", *(_QWORD *)(a1 + 40));
}

void sub_10004201C(id a1)
{
  RCNoAnimateLayerHelper *v1;
  void *v2;

  v1 = objc_alloc_init(RCNoAnimateLayerHelper);
  v2 = (void *)qword_1001ED878;
  qword_1001ED878 = (uint64_t)v1;

}

void sub_1000421B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100042288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000423CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1000424EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000425B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100042668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100042748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000427D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100042980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000429F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100042B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_100042D60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100042DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)RCWaveformRenderer;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100042E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100042ED8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10004304C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000430EC(uint64_t a1)
{
  void *v1;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 146) = 1;
  v1 = *(void **)(a1 + 32);
  objc_msgSend(v1, "_duration");
  return objc_msgSend(v1, "_renderVisibleTimeRangeWithDuration:");
}

void sub_1000431A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100043230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

_QWORD *sub_100043248(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD *result;
  double v5;

  objc_msgSend(*(id *)(a1 + 32), "_clearRenderingState");
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 160);
  if (v3)
  {
    objc_msgSend(v3, "removeObserver:");
    v2 = *(_QWORD *)(a1 + 32);
  }
  *(_QWORD *)(v2 + 32) = 0;
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 160), *(id *)(a1 + 40));
  result = *(_QWORD **)(a1 + 32);
  if (result[20])
  {
    objc_msgSend(result, "_updateFitToWidthUnitsPerSecond");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "addObserver:");
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 146) = 1;
    objc_msgSend(*(id *)(a1 + 32), "_setNeedsVisibleTimeRangeRendering");
    result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "duration");
    if (v5 > 0.0)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 147) = 1;
      result = objc_msgSend(*(id *)(a1 + 32), "_renderVisibleTimeRangeWithDuration:");
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 147) = 0;
    }
  }
  return result;
}

void sub_1000434AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000435B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_100043680(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10004395C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100043A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id sub_100043AB0(uint64_t a1)
{
  double v2;
  double v3;
  id WeakRetained;
  double v5;
  double v6;

  if (objc_msgSend(*(id *)(a1 + 32), "displayMode") != (id)1
    || (objc_msgSend(*(id *)(a1 + 32), "isLiveWaveform") & 1) == 0)
  {
    if (!objc_msgSend(*(id *)(a1 + 32), "displayMode"))
    {
      if (objc_msgSend(*(id *)(a1 + 32), "isLiveWaveform"))
      {
        objc_msgSend(*(id *)(a1 + 40), "timeRange");
        v3 = v2;
        WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 168));
        objc_msgSend(WeakRetained, "currentTime");
        v6 = vabdd_f64(v3, v5);

        if (v6 > 0.25)
          *(_BYTE *)(*(_QWORD *)(a1 + 32) + 150) = 1;
      }
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 146) = 1;
  }
  return objc_msgSend(*(id *)(a1 + 32), "_setNeedsVisibleTimeRangeRendering");
}

void sub_100043B70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100043BD4(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 146) = 1;
  return objc_msgSend(*(id *)(a1 + 32), "_setNeedsVisibleTimeRangeRendering");
}

_BYTE *sub_100043CD8(uint64_t a1)
{
  _BYTE *result;

  result = *(_BYTE **)(a1 + 32);
  if (!result[148] && !result[8])
    return objc_msgSend(result, "_startRendering");
  return result;
}

void sub_100043DF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100043E5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100043F90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10004402C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSMutableDictionary *v10;
  NSMutableIndexSet *v11;
  id *v12;
  void *v13;
  _QWORD *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 200);
  *(_QWORD *)(v2 + 200) = 0;

  *(_OWORD *)(*(_QWORD *)(a1 + 32) + 16) = RCTimeRangeZero;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 146) = 1;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "waveformSlices", 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allValues"));

  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v17;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v17 != v7)
          objc_enumerationMutation(v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v8), "sliceLayer"));
        objc_msgSend(v9, "removeFromSuperlayer");

        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v6);
  }

  v10 = objc_opt_new(NSMutableDictionary);
  objc_msgSend(*(id *)(a1 + 32), "setWaveformSlices:", v10);

  v11 = objc_opt_new(NSMutableIndexSet);
  objc_msgSend(*(id *)(a1 + 32), "setWaveformSliceIndexes:", v11);

  v13 = *(void **)(a1 + 32);
  v12 = (id *)(a1 + 32);
  objc_msgSend(v13, "setWaveformAmpSlicesForRendering:", &__NSArray0__struct);
  *((_OWORD *)*v12 + 3) = RCTimeRangeZero;
  v14 = (char *)*v12 + 64;
  *v14 = 0;
  v14[1] = 0;
  *((_BYTE *)*v12 + 80) = 0;
  objc_msgSend(*v12, "_setNeedsVisibleTimeRangeRendering");
  return objc_msgSend(*v12, "_setNeedsRendering");
}

void sub_100044228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100044AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  void *v67;
  void *v68;
  void *v69;
  void *v70;

  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_100044B88(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  RCVisualWaveformAmpSlice *v20;
  int v21;
  BOOL v22;
  double v23;
  unsigned int v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  RCVisualWaveformAmpSlice *v29;
  void *v30;
  void *v31;
  double v32;
  uint64_t v33;
  float *v34;
  id v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v44;
  void *v45;
  double v46;
  double v47;
  double v48;
  float v49;
  double v50;
  double v51;
  void *v52;
  id v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  id v68;

  if ((objc_msgSend(*(id *)(a1 + 32), "renderingQueueIsBusy") & 1) != 0)
    return;
  objc_msgSend(*(id *)(a1 + 32), "setFailedFirstRenderCalculationAttempt:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setRenderingQueueIsBusy:", 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "waveformSegmentsIntersectingTimeRange:", *(double *)(a1 + 40), *(double *)(a1 + 48)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "waveformSliceIndexes"));
  v68 = objc_msgSend(v3, "mutableCopy");
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = objc_msgSend(*(id *)(a1 + 32), "displayMode");
  v7 = 3;
  if (v4 > 3)
    v7 = v4;
  v8 = v7 - 3;
  if (v6 == (id)1)
    v9 = v8;
  else
    v9 = v4;
  if (v6 == (id)1)
    v10 = v5 + 6;
  else
    v10 = v5;
  objc_msgSend(v68, "removeIndexesInRange:", v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectEnumerator"));
  v67 = v3;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "nextObject"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "waveformSlices"));
  v66 = v2;
  v14 = *(_QWORD *)(a1 + 56);
  if (v14 >= (unint64_t)(*(_QWORD *)(a1 + 64) + v14))
    goto LABEL_58;
  do
  {
    v15 = v14 + 1;
    v16 = RCTimeRangeMake(*(double *)(a1 + 72) * (double)v14, *(double *)(a1 + 72) * (double)(v14 + 1));
    v18 = v17;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v14));
    v20 = (RCVisualWaveformAmpSlice *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v19));

    if (v20)
    {
      v21 = *(unsigned __int8 *)(a1 + 136);
      objc_msgSend(v68, "removeIndex:", v14);
      v22 = v21 != 0;
      if (v21 || !*(_BYTE *)(a1 + 137))
        goto LABEL_25;
      if (objc_msgSend(*(id *)(a1 + 32), "displayMode") && !*(_BYTE *)(a1 + 138))
      {
        v23 = *(double *)(a1 + 96);
        v24 = (v16 - v23 <= 0.0) & ~RCTimeRangeEqualToTimeRange(*(double *)(a1 + 88), v23, RCTimeRangeInvalid[0], RCTimeRangeInvalid[1]);
        if (v16 - v23 > -0.5)
          v22 = v24;
        else
          v22 = 0;
        goto LABEL_25;
      }
    }
    else
    {
      if (objc_msgSend(v68, "count")
        && (v25 = objc_msgSend(v68, "firstIndex"),
            v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v25)), v20 = (RCVisualWaveformAmpSlice *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v26)), v26, v20))
      {
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v25));
        objc_msgSend(v13, "setObject:forKeyedSubscript:", 0, v27);

        objc_msgSend(v67, "removeIndex:", v25);
        objc_msgSend(v68, "removeIndex:", v25);
        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v14));
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v20, v28);

        objc_msgSend(v67, "addIndex:", v14);
      }
      else
      {
        v29 = objc_opt_new(RCVisualWaveformAmpSlice);
        v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v14));
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v29, v30);

        v20 = v29;
        objc_msgSend(v67, "addIndex:", v14);
      }
      -[RCVisualWaveformAmpSlice setAmplitude:](v20, "setAmplitude:", *(double *)(a1 + 80));
      -[RCVisualWaveformAmpSlice setVisualAmplitudeHeightInterpolatingFrames:](v20, "setVisualAmplitudeHeightInterpolatingFrames:", 0);
      -[RCVisualWaveformAmpSlice setVisualAmplitudeHeight:](v20, "setVisualAmplitudeHeight:", RCOnePixelInPoints());
      -[RCVisualWaveformAmpSlice setSliceIndex:](v20, "setSliceIndex:", v14);
      -[RCVisualWaveformAmpSlice setHasProcessedSegments:](v20, "setHasProcessedSegments:", 0);
    }
    v22 = 1;
LABEL_25:
    if (!v12)
      -[RCVisualWaveformAmpSlice setHasProcessedSegments:](v20, "setHasProcessedSegments:", 0);
    if (!v22 && -[RCVisualWaveformAmpSlice hasProcessedSegments](v20, "hasProcessedSegments"))
      goto LABEL_57;
    if (!v12)
    {
      v31 = 0;
      v32 = -3.40282347e38;
      goto LABEL_49;
    }
    v31 = v12;
    v32 = -3.40282347e38;
    while (1)
    {
      v33 = (uint64_t)objc_msgSend(v31, "averagePowerLevelsCount");
      v34 = (float *)objc_msgSend(v31, "averagePowerLevels");
      v35 = objc_msgSend(v31, "timeRange");
      v37 = v36;
      v39 = v38;
      if (RCTimeRangeIntersectsRange(v35, v16, v18, v36, v38))
        break;
      if (v39 >= v16)
      {
        if (v37 > v18)
          goto LABEL_49;
        goto LABEL_46;
      }
LABEL_44:
      v44 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "nextObject"));

      v31 = (void *)v44;
LABEL_46:
      if (!v31)
        goto LABEL_49;
    }
    if (v33 < 1)
      goto LABEL_44;
    v40 = 0;
    v41 = v39 - v37;
    while (1)
    {
      v42 = v37 + v41 * (float)((float)v40 / (float)v33);
      if (v42 > v18)
        break;
      if (v42 >= v16 && v42 <= v18)
      {
        -[RCVisualWaveformAmpSlice setHasProcessedSegments:](v20, "setHasProcessedSegments:", 1);
        if (v32 < v34[v40])
          v32 = v34[v40];
      }
      if (v33 == ++v40)
        goto LABEL_44;
    }
LABEL_49:
    v45 = (void *)objc_claimAutoreleasedReturnValue(+[RCRecorderStyleProvider sharedStyleProvider](RCRecorderStyleProvider, "sharedStyleProvider"));
    objc_msgSend(v45, "minimumDecibelDisplayRange");
    v47 = v46;

    if (v32 >= v47)
      v48 = v32;
    else
      v48 = -3.40282347e38;
    v49 = v48;
    v50 = RCNormalizedDecibelValue(v49);
    if (v50 > *(double *)(a1 + 104))
      v50 = *(double *)(a1 + 104);
    v51 = *(double *)(a1 + 112) * sqrt(v50);
    if (v51 < *(double *)(a1 + 80))
      v51 = *(double *)(a1 + 80);
    -[RCVisualWaveformAmpSlice setAmplitude:](v20, "setAmplitude:", v51);
    v12 = v31;
LABEL_57:

    v14 = v15;
  }
  while (v15 < *(_QWORD *)(a1 + 64) + *(_QWORD *)(a1 + 56));
LABEL_58:
  if (*(_BYTE *)(a1 + 139))
  {
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "allValues"));
    v53 = objc_msgSend(v52, "count");

    if (!v53)
    {
      objc_msgSend(*(id *)(a1 + 32), "setFailedFirstRenderCalculationAttempt:", 1);
      v54 = OSLogForCategory(kVMLogCategoryDefault);
      v55 = objc_claimAutoreleasedReturnValue(v54);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
        sub_10010AFC8(v55, v56, v57, v58, v59, v60, v61, v62);

    }
  }
  v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "allValues"));
  objc_msgSend(*(id *)(a1 + 32), "setWaveformAmpSlicesForRendering:", v63);

  *(_OWORD *)(*(_QWORD *)(a1 + 32) + 48) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(*(_QWORD *)(a1 + 32) + 64) = *(_OWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 138))
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 80) = 1;
  v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "nextRenderBlock"));
  v65 = *(void **)(a1 + 32);
  if (v64)
  {
    objc_msgSend(v65, "setNextRenderBlock:", 0);
    dispatch_async(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 88), v64);
    if ((objc_msgSend(*(id *)(a1 + 32), "waitForFinalCalc") & 1) == 0)
    {
      v65 = *(void **)(a1 + 32);
      goto LABEL_68;
    }
  }
  else
  {
LABEL_68:
    objc_msgSend(v65, "setRenderReadyForDraw:", 1);
  }
  objc_msgSend(*(id *)(a1 + 32), "setRenderingQueueIsBusy:", 0);

}

void sub_1000451D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1000452E4(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  id WeakRetained;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  id v15;
  id v16;
  uint64_t v17;
  double v18;
  void *i;
  void *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  BOOL v24;
  double v25;
  void *v26;
  void *v27;
  id v28;
  double v29;
  unsigned int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  void *v38;
  id v39;
  BOOL v40;
  void *v41;
  double v42;
  double v43;
  double v44;
  unsigned int v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[128];

  v52 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 168));
  if (objc_msgSend(WeakRetained, "isZooming"))
    v9 = a1 + 48;
  else
    v9 = *(_QWORD *)(a1 + 32) + 240;
  v11 = *(double *)v9;
  v10 = *(double *)(v9 + 8);

  v12 = *(double *)(a1 + 64);
  v13 = RCTimeRangeDelta(v11, v10);
  v14 = 0.0;
  if (v13 > 0.0)
    v14 = v11 * (v12 / v13);
  objc_msgSend(v7, "bounds", v52);
  objc_msgSend(v7, "setBounds:", v14);
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v15 = v53;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v54, v58, 16);
  if (v16)
  {
    v17 = *(_QWORD *)v55;
    v18 = -v14;
    do
    {
      for (i = 0; i != v16; i = (char *)i + 1)
      {
        if (*(_QWORD *)v55 != v17)
          objc_enumerationMutation(v15);
        v20 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * (_QWORD)i);
        v21 = (char *)objc_msgSend(v20, "sliceIndex");
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
        v24 = (unint64_t)v21 >= v22;
        v23 = &v21[-v22];
        v24 = !v24 || (unint64_t)v23 >= *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
        if (v24 || (objc_msgSend(v20, "amplitude"), objc_msgSend(v20, "amplitude"), fabs(v25) == INFINITY))
        {
          objc_msgSend(v20, "setHidden:", 1);
          continue;
        }
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "sliceLayer"));
        if (!v26)
        {
          v26 = (void *)objc_claimAutoreleasedReturnValue(+[CALayer layer](CALayer, "layer"));
          v27 = (void *)objc_claimAutoreleasedReturnValue(+[RCNoAnimateLayerHelper sharedNoAnimationHelper](RCNoAnimateLayerHelper, "sharedNoAnimationHelper"));
          objc_msgSend(v26, "setDelegate:", v27);

          objc_msgSend(v26, "setOpaque:", 1);
          objc_msgSend(v20, "setSliceLayer:", v26);
        }
        v28 = objc_msgSend(v20, "sliceIndex");
        v29 = *(double *)(a1 + 72);
        v30 = objc_msgSend(v20, "hasProcessedSegments");
        v31 = 0.0;
        if (v30)
        {
          objc_msgSend(v20, "amplitude", 0.0);
          v31 = fmax(v32, 0.0);
        }
        v33 = v31 * *(double *)(a1 + 80);
        if (v33 < *(double *)(a1 + 88))
          v34 = v33;
        else
          v34 = *(double *)(a1 + 88);
        objc_msgSend(v20, "setVisualAmplitudeHeight:", v34);
        v35 = RCOnePixelInPoints();
        objc_msgSend(v20, "visualAmplitudeHeight");
        v37 = v29 * (double)(uint64_t)v28;
        if (v35 < v36)
          v35 = v36;
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "sliceLayer"));
        v39 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "superlayer"));
        v40 = v39 == v7;

        if (!v40)
        {
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "sliceLayer"));
          objc_msgSend(v7, "addSublayer:", v41);

        }
        objc_msgSend(v20, "setHidden:", 0);
        v42 = RCRoundCoord(v37);
        v43 = *(double *)(a1 + 80);
        v44 = RCRoundCoord(a4);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
          objc_msgSend(v20, "setColor:", 0);
        v45 = objc_msgSend(*(id *)(a1 + 32), "useCenteredStyleColoring");
        v46 = *(double *)(a1 + 96);
        v47 = *(double *)(a1 + 104);
        v48 = RCTimeRangeInvalid[1];
        if (v45)
        {
          if ((RCTimeRangeEqualToTimeRange(v46, v47, RCTimeRangeInvalid[0], v48) & 1) != 0
            || (unint64_t)objc_msgSend(v20, "sliceIndex") >= *(_QWORD *)(a1 + 112)
            && (unint64_t)objc_msgSend(v20, "sliceIndex") <= *(_QWORD *)(a1 + 120))
          {
            if (v18 + (double)(uint64_t)objc_msgSend(v20, "sliceIndex") * *(double *)(a1 + 72) < *(double *)(a1 + 64)
                                                                                               * 0.5)
              v49 = 1;
            else
              v49 = 2;
            goto LABEL_43;
          }
        }
        else if ((RCTimeRangeEqualToTimeRange(v46, v47, RCTimeRangeInvalid[0], v48) & 1) != 0
               || (unint64_t)objc_msgSend(v20, "sliceIndex") >= *(_QWORD *)(a1 + 112)
               && (unint64_t)objc_msgSend(v20, "sliceIndex") <= *(_QWORD *)(a1 + 120))
        {
          v49 = 1;
          goto LABEL_43;
        }
        v49 = 2;
LABEL_43:
        objc_msgSend(v20, "setColor:", v49);
        if ((objc_msgSend(v20, "hasProcessedSegments") & 1) == 0 && objc_msgSend(v20, "color") != (id)1)
        {
          if (objc_msgSend(*(id *)(a1 + 32), "renderDimmedUnprocessedSegments"))
          {
            v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "uiColorDimmed"));
            objc_msgSend(v20, "setColor:", 0);
            v51 = objc_retainAutorelease(v50);
            objc_msgSend(v26, "setBackgroundColor:", objc_msgSend(v51, "CGColor"));

          }
          else
          {
            objc_msgSend(v20, "setHidden:", 1);
          }
        }
        objc_msgSend(v20, "setFrame:", v42, v43 - v35, v44, v35 + v35);

      }
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v54, v58, 16);
    }
    while (v16);
  }

}

void sub_1000457EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000458FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100045958(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000459B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100045A10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100045B08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100045C9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100045D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100046174(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1000461E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000462A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000463E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100046734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100046934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000469E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100046AA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100046B64(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t sub_100046BEC(vm_address_t address, uint64_t a2)
{
  return vm_deallocate(mach_task_self_, address, 2 * a2);
}

vm_address_t sub_100046C08(vm_size_t a1, int a2, _QWORD *a3)
{
  void *v5;
  vm_size_t v6;
  vm_size_t v7;
  int v8;
  kern_return_t v9;
  mach_error_t v10;
  __CFString *v11;
  kern_return_t v12;
  mach_error_t v13;
  kern_return_t v14;
  vm_address_t v15;
  mach_error_t v16;
  id v17;
  id v18;
  id v19;
  _BOOL4 v20;
  void *v22;
  uint64_t v24;
  vm_prot_t cur_protection[2];
  vm_address_t target_address;
  vm_address_t address;
  NSErrorUserInfoKey v29;
  const __CFString *v30;

  if (a2 >= 1)
  {
    v5 = 0;
    v6 = a1 - 1;
    v7 = 2 * a1;
    v24 = RCVoiceMemosErrorDomain;
    v8 = 1;
    while (1)
    {
      if (((v6 + vm_page_size) & -(uint64_t)vm_page_size) != a1)
        sub_10010B03C();
      address = 0;
      v9 = vm_allocate(mach_task_self_, &address, v7, 1);
      if (v9)
        break;
      v12 = vm_deallocate(mach_task_self_, address + a1, a1);
      if (v12)
      {
        v13 = v12;
        vm_deallocate(mach_task_self_, address, a1);
        v11 = CFSTR("VMVMRingBuffer vm_deallocate failed");
        v10 = v13;
        goto LABEL_10;
      }
      *(_QWORD *)cur_protection = 0;
      target_address = address + a1;
      v14 = vm_remap(mach_task_self_, &target_address, a1, 0, 0, mach_task_self_, address, 0, &cur_protection[1], cur_protection, 1u);
      v15 = address;
      if (v14)
      {
        v16 = v14;
        vm_deallocate(mach_task_self_, address, a1);
        v11 = CFSTR("VMVMRingBuffer vm_remap failed");
        v10 = v16;
        goto LABEL_10;
      }
      if (target_address != address + a1)
      {
        vm_deallocate(mach_task_self_, target_address, a1);
        vm_deallocate(mach_task_self_, address, a1);
        v29 = NSLocalizedDescriptionKey;
        v30 = CFSTR("VMVMRingBuffer vm_remap failed to map to correct offset");
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1));
        v18 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v24, 0, v22));

        goto LABEL_11;
      }
      v18 = 0;
LABEL_12:
      v19 = v18;

      v20 = v15 == 0;
      if (!v15)
      {
        v5 = v19;
        if (v8++ < a2)
          continue;
      }
      goto LABEL_19;
    }
    v10 = v9;
    v11 = CFSTR("VMVMRingBuffer vm_allocate failed");
LABEL_10:
    v17 = sub_100046F2C(v11, v10);
    v18 = (id)objc_claimAutoreleasedReturnValue(v17);
LABEL_11:
    v15 = 0;
    goto LABEL_12;
  }
  v15 = 0;
  v19 = 0;
  v20 = 1;
LABEL_19:
  if (a3 && v20)
    *a3 = objc_retainAutorelease(v19);

  return v15;
}

_QWORD *sub_100046EBC(int a1, int a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *result;
  char *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = a2;
  result = malloc_type_malloc((a2 * a3 + 8) * a1, 0x85AB9C58uLL);
  if (a1 >= 1)
  {
    v7 = (char *)&result[a1];
    v8 = result;
    v9 = a1;
    do
    {
      *v8++ = v7;
      v7 += a3 * v5;
      --v9;
    }
    while (v9);
  }
  return result;
}

id sub_100046F2C(void *a1, mach_error_t a2)
{
  id v3;
  NSString *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  NSErrorUserInfoKey v10;
  void *v11;

  v3 = a1;
  v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ - %s"), v3, mach_error_string(a2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = RCVoiceMemosErrorDomain;
  v10 = NSLocalizedDescriptionKey;
  v11 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v6, a2, v7));

  return v8;
}

void sub_100047088(id a1, int a2)
{
  exit(0);
}

void sub_100047098(id a1, int a2)
{
  exit(0);
}

void sub_1000479A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[RCApplicationModel sharedApplicationModel](RCApplicationModel, "sharedApplicationModel"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "recordingWithURIRepresentation:", v3));

  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "_selectSharedRecording:", v5);
  }
  else
  {
    v6 = OSLogForCategory(kVMLogCategoryService);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      sub_10010B2F8();

  }
}

uint64_t sub_100047B60(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_100047B70(id a1, BOOL a2)
{
  _BOOL8 v2;
  void *v3;
  unsigned int v4;
  void *v5;
  id v6;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[RCAppGroupStorage sharedInstance](RCAppGroupStorage, "sharedInstance"));
  v4 = objc_msgSend(v3, "transcriptionIsSupported");

  if (v4 != v2)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[RCAppGroupStorage sharedInstance](RCAppGroupStorage, "sharedInstance"));
    objc_msgSend(v5, "setTranscriptionIsSupported:", v2);

    v6 = (id)objc_claimAutoreleasedReturnValue(+[RCSSavedRecordingService sharedService](RCSSavedRecordingService, "sharedService"));
    objc_msgSend(v6, "clearAndReloadSearchMetadataWithCompletionBlock:", 0);

  }
}

id sub_100047C14(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_askUserForPermissionToUseCloudKit");
}

id sub_100047C58(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setIsTransitioningBetweenVisibleColumnStates:", 0);
}

id sub_100047D10(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setIsTransitioningBetweenVisibleColumnStates:", 0);
}

void sub_100048110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004812C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "performAction:atPosition:forUUID:sourceController:source:", 3, 0, 0, 0, 0.0);

}

void sub_100048248(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100048264(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "playRecordingWithUUID:", *(_QWORD *)(a1 + 32));

}

id sub_100048548(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "setTccCloudAccess:", 1);
}

id sub_100048560(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "setTccCloudAccess:", 2);
}

id sub_10004869C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 80);
  *(_QWORD *)(v1 + 80) = 0;

  return _objc_msgSend(UIApp, "suspend");
}

id sub_100048770(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "selectRecordingWithUUID:returnToBrowse:", *(_QWORD *)(a1 + 40), 1);
}

void sub_1000490A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000490D4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id *v5;
  id v6;
  id v7;
  void *v8;
  id WeakRetained;

  v5 = (id *)(a1 + 32);
  v6 = a4;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained(v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", NSKeyValueChangeNewKey));

  objc_msgSend(WeakRetained, "setValue:forKeyPath:", v8, v7);
}

id sub_100049618(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  id v8;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordingID"));
  v8 = objc_msgSend(v6, "trimRecording:timeRange:controller:error:", v7, *(_QWORD *)(a1 + 32), a3, *(double *)(a1 + 40), *(double *)(a1 + 48));

  return v8;
}

id sub_1000496DC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  id v8;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordingID"));
  v8 = objc_msgSend(v6, "cutRecording:timeRange:controller:error:", v7, *(_QWORD *)(a1 + 32), a3, *(double *)(a1 + 40), *(double *)(a1 + 48));

  return v8;
}

void sub_10004A3BC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_10004A80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10004A824(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_retainBlock(*(id *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_10004A84C(uint64_t a1)
{

}

void sub_10004A854(_QWORD *a1)
{
  void *v2;
  void *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[6];
  id v18;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](NSRunLoop, "mainRunLoop"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "currentMode"));
  v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("UITrackingRunLoopMode"));

  if ((v4 & 1) == 0)
  {
    v5 = (_QWORD *)a1[4];
    v6 = a1[5];
    v7 = (id *)(a1 + 4);
    v8 = v5[2];
    v18 = 0;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_nextTransactionAfterToken:context:error:", v8, v6, &v18));
    v10 = v18;
    if (v9)
    {
      objc_msgSend(*v7, "_mergeChangeIntoRelevantContexts:", v9);
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "token"));
      v12 = (void *)*((_QWORD *)*v7 + 2);
      *((_QWORD *)*v7 + 2) = v11;
    }
    else
    {
      v13 = OSLogForCategory(kVMLogCategoryDefault);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_10010B548((uint64_t)(a1 + 4), (uint64_t)v10, v14);

      objc_storeStrong((id *)*v7 + 2, *((id *)*v7 + 3));
      v12 = (void *)*((_QWORD *)*v7 + 6);
      *((_QWORD *)*v7 + 6) = 0;
    }

  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 48), "dateByAddingTimeInterval:", 0.1));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10004AA5C;
  v17[3] = &unk_1001AC220;
  v16 = a1[6];
  v17[4] = a1[4];
  v17[5] = v16;
  RCDispatchNoSoonerThan(v15, &_dispatch_main_q, v17);

}

void sub_10004AA5C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void (**v4)(void);
  uint64_t v5;
  void *v6;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "compareToken:error:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), 0);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void (***)(void))(v3 + 40);
  if (v2 == (id)2)
  {
    v4[2]();
  }
  else
  {
    *(_QWORD *)(v3 + 40) = 0;

    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(v5 + 48);
    *(_QWORD *)(v5 + 48) = 0;

  }
}

id sub_10004AAC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v2;

  return objc_msgSend(*(id *)(a1 + 40), "performBlock:", *(_QWORD *)(a1 + 48));
}

void sub_10004AD30(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v3, 1));
  +[NSManagedObjectContext mergeChangesFromRemoteContextSave:intoContexts:](NSManagedObjectContext, "mergeChangesFromRemoteContextSave:intoContexts:", v1, v2);

}

id sub_10004B238(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "addObject:", *(_QWORD *)(a1 + 40));
}

id sub_10004B344(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handleChange:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_10004BAF0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "delegate"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "window"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "rootViewController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "view"));
  objc_msgSend(v6, "setUserInteractionEnabled:", 1);

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10004C32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004C364(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewController"));
  objc_msgSend(v1, "rc_applicationWillEnterForeground");

}

void sub_10004C3A8(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewController"));
  objc_msgSend(v1, "rc_applicationDidEnterBackground");

}

void sub_10004C544(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10004C604;
  v10[3] = &unk_1001AB900;
  v7 = *(void **)(a1 + 40);
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v8 = v6;
  v9 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);

}

id sub_10004C604(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 0;
  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
  {
    v3 = OSLogForCategory(kVMLogCategoryDefault);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10010B66C(a1, v4);

    v2 = *(_QWORD *)(a1 + 40);
  }
  return objc_msgSend(*(id *)(a1 + 32), "_handleSpotlightSearchResults:forSearchString:", v2, *(_QWORD *)(a1 + 56));
}

id sub_10004C8B8(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "managedObjectIDForURIRepresentation:", a2);
}

double UIMainScreenScale()
{
  if (qword_1001ED8C0 != -1)
    dispatch_once(&qword_1001ED8C0, &stru_1001AC350);
  return *(double *)&qword_1001ED8B8;
}

void sub_10004D0A0(id a1)
{
  uint64_t v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v2, "scale");
  qword_1001ED8B8 = v1;

}

double RCRoundCoord(double a1)
{
  double v2;

  if (qword_1001ED8C0 != -1)
    dispatch_once(&qword_1001ED8C0, &stru_1001AC350);
  v2 = a1 + 2.22044605e-16;
  if (a1 >= 0.0)
    v2 = a1;
  return round(v2 * *(double *)&qword_1001ED8B8) / *(double *)&qword_1001ED8B8;
}

double RCOnePixelInPoints()
{
  if (qword_1001ED8C0 != -1)
    dispatch_once(&qword_1001ED8C0, &stru_1001AC350);
  return 1.0 / *(double *)&qword_1001ED8B8;
}

id sub_10004D4CC(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  void *v6;
  void *v7;

  if (objc_msgSend(a3, "isEqual:", UIActivityItemsConfigurationMetadataKeyTitle))
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v6));

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

id sub_10004E784(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

id sub_10004E790(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
}

void sub_100050EE4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_100051574(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = objc_opt_class(RCRecentlyDeletedRecordingsCollectionViewController, a2);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "libraryActionHandler"));
    objc_msgSend(v5, "selectNewRecordingForDismiss");

  }
}

id sub_1000515E0(uint64_t a1)
{
  int v1;
  void *v2;

  v1 = *(unsigned __int8 *)(a1 + 40);
  v2 = *(void **)(a1 + 32);
  if (v1)
    return objc_msgSend(v2, "_animateContentUnavailableUpdateWithCompletion:", 0);
  else
    return objc_msgSend(v2, "setNeedsUpdateContentUnavailableConfiguration");
}

void sub_100051D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100051D9C(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = (id *)(a1 + 40);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "uuidOfSelectedItem"));

    v4 = objc_loadWeakRetained(v2);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "cellsMapTable"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v10));

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "indexPathForCell:", v6));
    if (v7)
    {
      v8 = objc_loadWeakRetained(v2);
      objc_msgSend(v8, "selectItemAtIndexPath:animated:scroll:", v7, 1, 0);

      v9 = objc_loadWeakRetained(v2);
      objc_msgSend(v9, "setWillSelectRecordingAfterExitingEditMode:", 0);

    }
  }
}

uint64_t sub_100051FA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_100052AAC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdateContentUnavailableConfiguration");
}

void sub_1000534E4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD v9[5];

  v5 = a2;
  v6 = a3;
  if (v5 && objc_msgSend(v5, "isFileURL"))
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000535C8;
    v9[3] = &unk_1001AC020;
    v9[4] = *(_QWORD *)(a1 + 32);
    +[RCSavedRecordingsModel importFileWithURL:shouldUseMetadataTitle:completionHandler:](RCSavedRecordingsModel, "importFileWithURL:shouldUseMetadataTitle:completionHandler:", v5, 0, v9);
  }
  else
  {
    v7 = OSLogForCategory(kVMLogCategoryService);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      sub_10010BBEC();

  }
}

void sub_1000535C8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[RCApplicationModel sharedApplicationModel](RCApplicationModel, "sharedApplicationModel"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "recordingWithURIRepresentation:", v3));

  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "_performFolderTypeUpdatesOnRecording:", v5);
    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uuid"));
    objc_msgSend(v6, "selectItemWithUUID:", v7);

  }
  else
  {
    v8 = OSLogForCategory(kVMLogCategoryService);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      sub_10010BC5C();

  }
}

id sub_1000538E8(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  unsigned int v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v18;

  v3 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v4);
  v6 = objc_msgSend(WeakRetained, "_supportsSwipeActionsForIndexPath:swipeActionsType:", v3, 0);

  v7 = 0;
  if (v6)
  {
    v8 = objc_loadWeakRetained(v4);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dataArray"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", objc_msgSend(v3, "item")));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "uuid"));

    v12 = objc_loadWeakRetained(v4);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "libraryActionHandler"));
    LODWORD(v10) = objc_msgSend(v13, "isFavoriteForUUID:", v11);

    v14 = objc_loadWeakRetained(v4);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "_favoriteSwipeAction:forUUID:", v10 ^ 1, v11));

    v18 = v15;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[UISwipeActionsConfiguration configurationWithActions:](UISwipeActionsConfiguration, "configurationWithActions:", v16));

  }
  return v7;
}

id sub_100053A68(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  unsigned int v6;
  id v7;
  unsigned __int8 v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  void *v25;
  _QWORD v26[3];

  v3 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = objc_msgSend(WeakRetained, "_supportsSwipeActionsForIndexPath:swipeActionsType:", v3, 1);

  if (v6)
  {
    v7 = objc_loadWeakRetained(v4);
    v8 = objc_msgSend(v7, "isRecentlyDeleted");

    v9 = objc_loadWeakRetained(v4);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dataArray"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndexedSubscript:", objc_msgSend(v3, "item")));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "uuid"));

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[RCRecorderStyleProvider sharedStyleProvider](RCRecorderStyleProvider, "sharedStyleProvider"));
    v14 = objc_msgSend(v13, "expandsRecordingsCollectionViewItemOnSelection");

    v15 = objc_loadWeakRetained(v4);
    v16 = v15;
    if ((v8 & 1) != 0)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "_eraseSwipeActionForUUID:shouldExecuteCompletionBeforeAction:", v12, v14));

      v25 = v17;
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v25, 1));
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[UISwipeActionsConfiguration configurationWithActions:](UISwipeActionsConfiguration, "configurationWithActions:", v18));
    }
    else
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "_deleteSwipeActionForUUID:shouldExecuteCompletionBeforeAction:", v12, v14));

      v20 = objc_loadWeakRetained(v4);
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "_moveToFolderSwipeActionForUUID:shouldExecuteCompletionBeforeAction:", v12, v14));

      v21 = objc_loadWeakRetained(v4);
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "_moreOptionsSwipeActionForUUID:shouldExecuteCompletionBeforeAction:", v12, v14));

      v26[0] = v17;
      v26[1] = v18;
      v26[2] = v22;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v26, 3));
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[UISwipeActionsConfiguration configurationWithActions:](UISwipeActionsConfiguration, "configurationWithActions:", v23));

    }
  }
  else
  {
    v19 = 0;
  }

  return v19;
}

void sub_100053E54(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  char isKindOfClass;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;

  v12 = a3;
  v5 = objc_opt_class(UIButton, v4);
  isKindOfClass = objc_opt_isKindOfClass(v12, v5);
  v7 = v12;
  if ((isKindOfClass & 1) != 0)
  {
    v8 = v12;
    v9 = *(void **)(a1 + 32);
    if (*(_BYTE *)(a1 + 40))
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "favoriteImage"));
    else
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "notFavoriteImage"));
    v11 = (void *)v10;
    objc_msgSend(v8, "setImage:forState:", v10, 0);

    v7 = v12;
  }

}

void sub_1000545C4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  void (**v8)(id, uint64_t);
  void *v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void (**v19)(_QWORD, _QWORD, _QWORD);
  id v20;

  v20 = a2;
  v7 = a3;
  v8 = a4;
  if (objc_msgSend(*(id *)(a1 + 32), "shouldExecuteCompletionBeforeAction"))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "customCompletionBlock"));

    if (v9)
    {
      v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "customCompletionBlock"));
      ((void (**)(_QWORD, id, id))v10)[2](v10, v20, v7);

    }
    v8[2](v8, 1);
  }
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sourceItem"));
  v12 = (void *)v11;
  if (v11)
    v13 = (void *)v11;
  else
    v13 = v7;
  v14 = v13;

  v15 = objc_msgSend(*(id *)(a1 + 32), "controlsAction");
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "uuidForAction"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "libraryActionHandler"));
  objc_msgSend(v17, "performAction:atPosition:forUUID:sourceController:source:", v15, v16, *(_QWORD *)(a1 + 40), v14, 0.0);

  if ((objc_msgSend(*(id *)(a1 + 32), "shouldExecuteCompletionBeforeAction") & 1) == 0)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "customCompletionBlock"));

    if (v18)
    {
      v19 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "customCompletionBlock"));
      ((void (**)(_QWORD, id, id))v19)[2](v19, v20, v7);

    }
    v8[2](v8, 1);
  }

}

id sub_100054B20(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "scrollToItemAtIndexPath:atScrollPosition:animated:", *(_QWORD *)(a1 + 40), 1, 1);
}

id sub_100054C98(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "scrollToItemAtIndexPath:atScrollPosition:animated:", *(_QWORD *)(a1 + 40), 4, 1);
}

id sub_100056114(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "scrollToItemAtIndexPath:atScrollPosition:animated:", *(_QWORD *)(a1 + 40), 1, 0);
}

void sub_100056128(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "cellForItemAtIndexPath:", *(_QWORD *)(a1 + 40)));

  if (v5)
  {
    v4 = objc_opt_class(RCRecordingCollectionViewCell, v3);
    if ((objc_opt_isKindOfClass(v5, v4) & 1) != 0)
      objc_msgSend(v5, "beginEditingTitle");
  }

}

void sub_100057178(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x20u);
}

id sub_1000583B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateFrameForSlice:sliceType:atIndex:", a3, a4, a2);
}

id sub_100059A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateFrameForSlice:sliceType:atIndex:", a3, a4, a2);
}

void sub_100059BBC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100059C70(id a1, UIButton *a2)
{
  UIButton *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  id v12;

  v2 = a2;
  v12 = (id)objc_claimAutoreleasedReturnValue(+[RCRecorderStyleProvider sharedStyleProvider](RCRecorderStyleProvider, "sharedStyleProvider"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIButtonConfiguration tintedButtonConfiguration](UIButtonConfiguration, "tintedButtonConfiguration"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("EDIT"), &stru_1001B2BC0, 0));
  objc_msgSend(v3, "setTitle:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "editButtonImage"));
  objc_msgSend(v3, "setImage:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "playbackViewToolbarImageSymbolConfiguration"));
  objc_msgSend(v3, "setPreferredSymbolConfigurationForImage:", v7);
  objc_msgSend(v12, "editButtonImageTitlePadding");
  objc_msgSend(v3, "setImagePadding:");
  objc_msgSend(v12, "editButtonContentTopBottomPadding");
  v9 = v8;
  objc_msgSend(v12, "editButtonContentLeftRightPadding");
  objc_msgSend(v3, "setContentInsets:", v9, v10, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "background"));
  objc_msgSend(v12, "editRecordingButtonCornerRadius");
  objc_msgSend(v11, "setCornerRadius:");

  objc_msgSend(v3, "setCornerStyle:", -1);
  -[UIButton setConfiguration:](v2, "setConfiguration:", v3);

}

void sub_10005A04C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v1, "updateForSizeChange");

}

void sub_10005E7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
  id *v31;

  objc_destroyWeak(v31);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak(&a31);
  _Unwind_Resume(a1);
}

void sub_10005E864(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  void *v4;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sender"));

  objc_msgSend(WeakRetained, "_doShare:", v4);
}

void sub_10005E8C4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_toggleFavorite");

}

void sub_10005E8F0(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_doMoveToFolder:", v3);

}

void sub_10005EB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005EB68(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_doShowTranscriptionView:", v3);

}

void sub_10005EC4C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10005EC68(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  id *v3;
  void (**v4)(_QWORD, _QWORD);
  void *v5;
  id WeakRetained;

  v3 = (id *)(a1 + 32);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "showTranscriptMenuElement"));
  ((void (**)(_QWORD, void *))a2)[2](v4, v5);

}

id sub_10005EF44(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateForSizeChange");
}

id sub_100060228(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[2];
  _QWORD v9[2];
  void *v10;
  UIFontDescriptorAttributeName v11;
  void *v12;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "fontDescriptor"));
  v11 = UIFontDescriptorFeatureSettingsAttribute;
  v8[0] = UIFontFeatureTypeIdentifierKey;
  v8[1] = UIFontFeatureSelectorIdentifierKey;
  v9[0] = &off_1001B7258;
  v9[1] = &off_1001B7270;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 2));
  v10 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
  v12 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "fontDescriptorByAddingAttributes:", v4));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fontWithDescriptor:size:](UIFont, "fontWithDescriptor:size:", v5, 0.0));
  return v6;
}

void sub_1000607CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id sub_1000607F8(AudioObjectID a1, AudioObjectPropertySelector a2, AudioObjectPropertyScope a3)
{
  id v4;
  void *v5;
  void *v6;
  UInt32 v8;
  AudioObjectPropertyAddress inAddress;

  inAddress.mSelector = a2;
  inAddress.mScope = a3;
  inAddress.mElement = 0;
  v8 = 0;
  v4 = 0;
  if (!AudioObjectGetPropertyDataSize(a1, &inAddress, 0, 0, &v8))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", v8));
    v6 = v5;
    if (!v5
      || (v4 = objc_retainAutorelease(v5),
          AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &v8, objc_msgSend(v4, "mutableBytes"))))
    {

      v4 = 0;
    }
  }
  return v4;
}

void sub_1000608A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void (**sub_1000608B4(double *a1, double *a2, void *a3))(_QWORD, double, double)
{
  void (**v5)(_QWORD, double, double);
  void (**v6)(_QWORD, double, double);

  v5 = a3;
  while (a1 != a2)
  {
    v5[2](v5, *a1, a1[1]);
    a1 += 2;
  }
  v6 = objc_retainBlock(v5);

  return v6;
}

void sub_100060918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100060928(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  objc_msgSend(v1, "addObject:");

}

void sub_100060970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100060A24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100060B44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100061278(uint64_t a1)
{
  double v1;
  id v2;

  if (*(_BYTE *)(a1 + 48))
    v1 = *(double *)(a1 + 40);
  else
    v1 = 0.0;
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "namedStateLabel"));
  objc_msgSend(v2, "setAlpha:", v1);

}

void sub_100061724(uint64_t a1)
{
  id WeakRetained;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 9) = 0;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_syncLongPressGestureRecognizerEnablement");

}

uint64_t sub_100062568(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_10006277C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100062CCC(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  unsigned int v8;
  int v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        v8 = objc_msgSend(v7, "favorite", (_QWORD)v12);
        v9 = *(unsigned __int8 *)(a1 + 56);
        if (v9 != v8)
        {
          v10 = *(void **)(a1 + 40);
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uuid"));
          objc_msgSend(v10, "addObject:", v11);

          v9 = *(unsigned __int8 *)(a1 + 56);
        }
        objc_msgSend(*(id *)(a1 + 48), "setFavorite:ofRecording:", v9 != 0, v7);
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v4);
  }

}

void sub_100063048(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordingsForUUIDs:", *(_QWORD *)(a1 + 40)));
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
        v8 = *(void **)(a1 + 48);
        if (*(_BYTE *)(a1 + 56))
          objc_msgSend(v8, "eraseRecording:", v7);
        else
          objc_msgSend(v8, "deleteRecording:", v7);
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

}

void sub_100063238(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordingsForUUIDs:", *(_QWORD *)(a1 + 40)));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "deletionDate"));

        if (v8)
        {
          objc_msgSend(*(id *)(a1 + 48), "restoreDeletedRecording:", v7);
          v9 = *(void **)(a1 + 56);
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uuid"));
          objc_msgSend(v9, "addObject:", v10);

        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v4);
  }

}

BOOL sub_10006356C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  _BOOL8 v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "name"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceCharacterSet](NSCharacterSet, "whitespaceCharacterSet"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByTrimmingCharactersInSet:", v4));

  v6 = objc_msgSend(v5, "compare:options:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)) == 0;
  return v6;
}

BOOL sub_1000635EC(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  _BOOL8 v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[RCFolderDisplayModel folderNameForBuiltInFolderOfType:](RCFolderDisplayModel, "folderNameForBuiltInFolderOfType:", objc_msgSend(a2, "folderType")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceCharacterSet](NSCharacterSet, "whitespaceCharacterSet"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByTrimmingCharactersInSet:", v4));

  v6 = objc_msgSend(v5, "compare:options:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)) == 0;
  return v6;
}

void sub_100063E9C(id *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = a1[4];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v13;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v6);
        v8 = a1[5];
        if (v8
          || (v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "userFolderUUID", (_QWORD)v12)),
              v10,
              v10)
          && (v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "userFolderUUID"))) != 0)
        {
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "existingFolderWithUUID:", v8, (_QWORD)v12));
          objc_msgSend(a1[6], "removeRecording:fromFolder:", v7, v9);

        }
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v11 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      v4 = v11;
    }
    while (v11);
  }

}

id sub_1000641F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_stopMonitoringLocation");
}

uint64_t sub_1000642EC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000642FC(uint64_t a1)
{

}

void sub_100064304(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1000643F0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100064D2C(_QWORD *a1)
{
  void *v2;
  id v3;

  v2 = (void *)a1[4];
  v3 = (id)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](AVAudioSession, "sharedInstance"));
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = objc_msgSend(v2, "__activateAudioSessionOnQueue:recording:error:", v3, 0, a1[6]);

}

uint64_t sub_100064E9C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100064EAC(uint64_t a1)
{

}

id sub_100064EB4(uint64_t a1)
{
  VMRecordingEngine *v2;
  uint64_t v3;
  void *v4;

  v2 = objc_opt_new(VMRecordingEngine);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "inputNode:", 0);
}

void sub_100064F1C(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  NSObject *v3;
  _QWORD block[4];
  _QWORD *v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = WeakRetained[13];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100064F9C;
    block[3] = &unk_1001AB588;
    v5 = WeakRetained;
    dispatch_async(v3, block);

  }
}

id sub_100064F9C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_configureAudioSettings");
}

void sub_100065184(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1000651A8(uint64_t a1, char a2, id obj)
{
  id v5;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), obj);
  v5 = obj;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_100065204(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_10006520C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[4] + 16))(a1[4], *(unsigned __int8 *)(*(_QWORD *)(a1[5] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
}

void sub_1000652BC(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unsigned __int8 v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  unsigned __int8 v10;
  id v11;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](AVAudioSession, "sharedInstance"));
  v4 = *(unsigned __int8 *)(a1 + 48);
  v11 = 0;
  v5 = objc_msgSend(v2, "__activateAudioSessionOnQueue:recording:error:", v3, v4, &v11);
  v6 = v11;

  if (*(_QWORD *)(a1 + 40))
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10006539C;
    v7[3] = &unk_1001AC7D8;
    v9 = *(id *)(a1 + 40);
    v10 = v5;
    v8 = v6;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v7);

  }
}

uint64_t sub_10006539C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

void sub_100065528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_100065874(id a1, AVAudioSessionPortDescription *a2)
{
  AVAudioSessionPort v2;
  BOOL v3;

  v2 = (AVAudioSessionPort)objc_claimAutoreleasedReturnValue(-[AVAudioSessionPortDescription portType](a2, "portType"));
  v3 = v2 == AVAudioSessionPortBuiltInMic;

  return v3;
}

BOOL sub_1000658B4(id a1, AVAudioSessionDataSourceDescription *a2)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[AVAudioSessionDataSourceDescription supportedPolarPatterns](a2, "supportedPolarPatterns"));
  v3 = objc_msgSend(v2, "containsObject:", AVAudioSessionPolarPatternStereo);

  return v3;
}

BOOL sub_1000658F8(uint64_t a1, void *a2)
{
  void *v3;
  _BOOL8 v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "orientation"));
  v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

void sub_100065BA4(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 80))
  {
    *(_BYTE *)(v1 + 80) = 0;
    v2 = (id)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](AVAudioSession, "sharedInstance"));
    objc_msgSend(v2, "setActive:error:", 0, 0);

  }
}

id sub_100065C80(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_handleAudioSessionNotification:", *(_QWORD *)(a1 + 40));
}

id sub_100066488(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setProcessingEnabled:", objc_msgSend(*(id *)(a1 + 40), "enhanced"));
}

void sub_1000664B4(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  id v14;
  uint64_t v15;
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  double v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  double v23;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (void *)v2[15];
  if (v3 == *(void **)(a1 + 40))
  {
    v2[15] = 0;

    objc_msgSend(*(id *)(a1 + 48), "replaceCurrentItemWithPlayerItem:", *(_QWORD *)(a1 + 56));
    if (objc_msgSend(*(id *)(a1 + 40), "currentState") == 2)
      objc_msgSend(*(id *)(a1 + 40), "setCurrentState:", 4);
    objc_msgSend(*(id *)(a1 + 48), "setProcessingEnabled:", objc_msgSend(*(id *)(a1 + 64), "enhanced"));
    objc_msgSend(*(id *)(a1 + 48), "setSilenceRemoverEnabled:", objc_msgSend(*(id *)(a1 + 40), "silenceRemoverEnabled"));
    if (objc_msgSend(*(id *)(a1 + 40), "targetState") == 4)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "controller"));
      objc_msgSend(v4, "targetTime");
      v6 = v5;

      v7 = *(void **)(a1 + 56);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_100066644;
      v20[3] = &unk_1001AC8F8;
      v8 = v7;
      v23 = v6;
      v9 = *(_QWORD *)(a1 + 32);
      v21 = v8;
      v22 = v9;
      objc_msgSend(v8, "seekToTime:completionHandler:", v20, v6);
      v10 = v21;
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "targetTime");
      v12 = v11;
      v13 = *(void **)(a1 + 56);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100066698;
      v16[3] = &unk_1001AC8F8;
      v14 = *(id *)(a1 + 40);
      v19 = v12;
      v15 = *(_QWORD *)(a1 + 32);
      v17 = v14;
      v18 = v15;
      objc_msgSend(v13, "seekToTime:completionHandler:", v16, v12);
      v10 = v17;
    }

  }
  else
  {
    objc_msgSend(v2, "stopPlaying:");
  }
}

id sub_100066644(id result, int a2)
{
  _QWORD *v2;
  double v3;
  void *v4;

  if (a2)
  {
    v2 = result;
    v3 = *((double *)result + 6);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)result + 4), "controller"));
    objc_msgSend(v4, "setCurrentTime:", v3);

    return objc_msgSend(*(id *)(v2[5] + 32), "pause");
  }
  return result;
}

id *sub_100066698(id *result, int a2)
{
  id *v2;
  id v3;

  if (a2)
  {
    v2 = result;
    objc_msgSend(result[4], "setCurrentTime:", *((double *)result + 6));
    v3 = v2[5];
    objc_msgSend(v2[4], "targetRate");
    return (id *)objc_msgSend(v3, "_startPlaybackAtRate:immediately:", 1);
  }
  return result;
}

void sub_1000668C0(uint64_t a1)
{
  void *v2;
  double v3;
  id *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordingWithUniqueID:", *(_QWORD *)(a1 + 40)));
  v8 = v2;
  if (v2)
  {
    objc_msgSend(v2, "playbackRate");
    v5 = *(void **)(a1 + 48);
    v4 = (id *)(a1 + 48);
    objc_msgSend(v5, "setRate:");
    v6 = objc_msgSend(v8, "silenceRemoverEnabled");
  }
  else
  {
    v7 = *(void **)(a1 + 48);
    v4 = (id *)(a1 + 48);
    LODWORD(v3) = 1.0;
    objc_msgSend(v7, "setRate:", v3);
    v6 = 0;
  }
  objc_msgSend(*v4, "setSilenceRemoverEnabled:", v6);

}

void sub_100066E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100066E68(id result, int a2)
{
  void *v2;

  if (a2)
  {
    v2 = (void *)*((_QWORD *)result + 4);
    objc_msgSend(*((id *)result + 5), "targetRate");
    return objc_msgSend(v2, "_startPlaybackAtRate:immediately:", 1);
  }
  return result;
}

void sub_100066E98(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _TtC10VoiceMemos12VMPlayerItem *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  objc_msgSend(WeakRetained, "setCurrentState:", 0);
  if (*((id *)a1[4] + 15) != WeakRetained)
    goto LABEL_2;
  if (v5)
  {
    if (!WeakRetained)
    {
LABEL_2:
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[RCSSavedRecordingService sharedService](RCSSavedRecordingService, "sharedService"));
      objc_msgSend(v8, "endAccessSessionWithToken:error:", v5, 0);

      goto LABEL_3;
    }
    objc_msgSend(WeakRetained, "setPlaybackToken:", v5);
    objc_msgSend(a1[4], "setMode:", 1);
    objc_msgSend(a1[5], "length");
    v10 = v9;
    objc_msgSend(WeakRetained, "playableRange");
    if (RCTimeRangeEqualToTimeRange(v11, v12, RCTimeRangeEverything[0], RCTimeRangeEverything[1]))
      objc_msgSend(WeakRetained, "setPlayableRange:", RCTimeRangeMake(0.0, v10));
    v13 = (_TtC10VoiceMemos12VMPlayerItem *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "playerItem"));
    if (!v13)
    {
      v14 = a1[4];
      v15 = a1[5];
      v18 = 0;
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "_assetForRecording:error:", v15, &v18));
      v17 = v18;
      if (!v16)
      {
        objc_msgSend(WeakRetained, "setPlaybackError:", v17);
        objc_msgSend(WeakRetained, "setCurrentState:", 0);

        goto LABEL_3;
      }
      v13 = -[VMPlayerItem initWithAsset:]([_TtC10VoiceMemos12VMPlayerItem alloc], "initWithAsset:", v16);
      -[VMPlayerItem setController:](v13, "setController:", WeakRetained);
      objc_msgSend(WeakRetained, "setPlayerItem:", v13);

    }
    objc_msgSend(a1[4], "_schedulePlayback:", WeakRetained);

  }
  else if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "setPlaybackError:", v6);
    objc_msgSend(WeakRetained, "setCurrentState:", 0);
  }
LABEL_3:

}

id sub_1000672FC(uint64_t a1, void *a2, double a3)
{
  LODWORD(a3) = *(_DWORD *)(a1 + 32);
  return _objc_msgSend(a2, "setPlaybackRate:", a3);
}

id sub_1000673DC(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setSilenceRemoverEnabled:", *(unsigned __int8 *)(a1 + 32));
}

void sub_100067490(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 8), "recordingWithUniqueID:", a1[5]));
  if (v2)
  {
    v3 = v2;
    (*(void (**)(void))(a1[6] + 16))();
    objc_msgSend(*(id *)(a1[4] + 8), "saveIfNecessary");
    v2 = v3;
  }

}

void sub_100067668(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  unsigned __int8 v5;

  if (a2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentItem"));
    v4 = v3;
    if (v3 != *(void **)(a1 + 40))
    {

LABEL_6:
      objc_msgSend(*(id *)(a1 + 48), "setCurrentTime:", *(double *)(a1 + 56));
      return;
    }
    v5 = objc_msgSend(*(id *)(a1 + 32), "playing");

    if ((v5 & 1) == 0)
      goto LABEL_6;
  }
}

void sub_100067984(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  double v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSErrorUserInfoKey v19;
  id v20;

  objc_msgSend(*(id *)(a1 + 32), "_configureAudioSettingsIfNeeded");
  v2 = *(void **)(a1 + 40);
  v18 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "inputNode:", &v18));
  v4 = v18;
  v5 = v4;
  if (!v3)
  {
    if (v4)
    {
      v19 = NSUnderlyingErrorKey;
      v20 = v4;
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
    }
    else
    {
      v6 = 0;
    }
    v15 = v6;
    goto LABEL_13;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "inputFormatForBus:", 0));
  objc_msgSend(v6, "sampleRate");
  if (v7 <= 0.0 || !objc_msgSend(v6, "channelCount"))
  {
    v15 = 0;
LABEL_13:
    v16 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("VMAudioServiceErrorDomain"), 5, v15));
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v14 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;
    goto LABEL_14;
  }
  v8 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "mutableCopy");
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  v11 = *(void **)(a1 + 32);
  objc_msgSend(v6, "sampleRate");
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "_closestAllowedSampleRate:allowedSampleRates:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64)));
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v12, AVSampleRateKey);

  if (objc_msgSend(v6, "channelCount") <= 1)
    v13 = 1;
  else
    v13 = 2;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v13));
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setObject:forKeyedSubscript:", v14, AVNumberOfChannelsKey);
LABEL_14:

}

void sub_100067DB0(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  id v7;

  if (objc_msgSend(*(id *)(a1 + 32), "currentState") == 2)
  {
    v2 = *(void **)(*(_QWORD *)(a1 + 40) + 40);
    v7 = 0;
    v3 = objc_msgSend(v2, "startAndReturnError:", &v7);
    v4 = v7;
    if (v3)
    {
      objc_msgSend(*(id *)(a1 + 32), "setCurrentState:", 2);
    }
    else
    {
      v5 = OSLogForCategory(kVMLogCategoryDefault);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_10010C9E0();

      objc_msgSend(*(id *)(a1 + 40), "setRecordingError:", v4);
      objc_msgSend(*(id *)(a1 + 40), "stopRecording:error:", *(_QWORD *)(a1 + 48), 0);
    }

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setCurrentState:", 0);
  }
}

void sub_100068084(uint64_t a1, int a2)
{
  void *v3;
  uint64_t v4;
  unsigned __int8 v5;
  id v6;
  id v7;

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v7 = 0;
    v5 = objc_msgSend(v3, "_startRecordingWithController:error:", v4, &v7);
    v6 = v7;
    if ((v5 & 1) == 0)
      objc_msgSend(*(id *)(a1 + 40), "setRecordingError:", v6);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "setRecordingError:");
  }
}

void sub_100068464(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1000683E0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000684C4(uint64_t a1, uint64_t a2)
{
  void *v2;
  unsigned __int8 v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  id v7;

  if (a2)
  {
    v2 = *(void **)(a1 + 32);
    v7 = 0;
    v3 = objc_msgSend(v2, "endAccessSessionWithToken:error:", a2, &v7);
    v4 = v7;
    if ((v3 & 1) == 0)
    {
      v5 = OSLogForCategory(kVMLogCategoryService);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_10010CA4C();

    }
  }
}

void sub_10006854C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  double v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordingToken"));
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);

  objc_msgSend(*(id *)(a1 + 32), "setRecordingToken:", 0);
  objc_msgSend(*(id *)(a1 + 40), "setMode:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "url"));
  v14 = (id)objc_claimAutoreleasedReturnValue(+[AVURLAsset rc_preciseTimingAssetWithURL:](AVURLAsset, "rc_preciseTimingAssetWithURL:", v4));

  objc_msgSend(v14, "rc_durationInSeconds");
  v6 = v5;
  objc_msgSend(*(id *)(a1 + 32), "setCurrentDuration:");
  objc_msgSend(*(id *)(a1 + 32), "setCurrentTime:", v6);
  v7 = *(_QWORD **)(a1 + 40);
  if (v6 <= 0.00000011920929)
  {
    v12 = (void *)v7[1];
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordingID"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "recordingWithUniqueID:", v13));

    if (v9)
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "eraseRecording:", v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("VMAudioServiceErrorDomain"), 6, 0));
    objc_msgSend(*(id *)(a1 + 40), "setRecordingError:", v11);
    goto LABEL_9;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordingID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_fetchRecording:recordingController:", v8, *(_QWORD *)(a1 + 32)));

  if (v9)
  {
    objc_msgSend(v9, "length");
    if (v10 != v6)
    {
      objc_msgSend(v9, "setLength:", v6);
      objc_msgSend(v9, "setPlayable:", 1);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "saveIfNecessary");
      +[RCAnalyticsUtilities sendNewRecordingDuration:](RCAnalyticsUtilities, "sendNewRecordingDuration:", v6);
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[RCComposition compositionLoadedForSavedRecording:](RCComposition, "compositionLoadedForSavedRecording:", v9));
    objc_msgSend(v11, "saveMetadataToDefaultLocation");
LABEL_9:

  }
  objc_msgSend(*(id *)(a1 + 32), "setCurrentState:", 0);
  objc_msgSend(*(id *)(a1 + 40), "_deactivateAudioSessionAsync:", 1);

}

void sub_100068A38(id *a1)
{
  NSObject *v2;
  void *v3;
  id v4;
  unsigned __int8 v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  _QWORD v13[4];
  NSObject *v14;
  _QWORD v15[4];
  id v16;
  NSObject *v17;
  id v18;
  uint8_t buf[4];
  const char *v20;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "group"));
  objc_msgSend(a1[5], "_shutdownRecordingEngine");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[RCSSavedRecordingService sharedService](RCSSavedRecordingService, "sharedService"));
  v4 = a1[6];
  v18 = 0;
  v5 = objc_msgSend(v3, "closeAudioFile:error:", v4, &v18);
  v6 = v18;

  if ((v5 & 1) == 0)
  {
    v7 = OSLogForCategory(kVMLogCategoryService);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_10010CAB8();

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[7], "liveTranscription"));
  if (v9)
  {
    v10 = OSLogForCategory(kVMLogCategoryDefault);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v20 = "-[VMAudioService stopRecording:atTime:error:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s -- calling finalizeAndReturnTranscriptionDataWithCompletionHandler", buf, 0xCu);
    }

    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100068C80;
    v15[3] = &unk_1001ACA78;
    v16 = a1[6];
    v17 = v2;
    objc_msgSend(v9, "finalizeAndReturnTranscriptionDataWithCompletionHandler:", v15);

  }
  else
  {
    dispatch_group_leave(v2);
  }
  if ((objc_msgSend(a1[4], "internalRecording") & 1) == 0)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[7], "waveformDataSource"));
    if (v12)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_100068D9C;
      v13[3] = &unk_1001ACAA0;
      v14 = v2;
      objc_msgSend(v12, "finishLoadingWithCompletionTimeout:completionBlock:", -1, v13);

    }
  }

}

void sub_100068C80(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  unsigned __int8 v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  id v14;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = OSLogForCategory(kVMLogCategoryService);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_10010CB90();

  }
  if (v5)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "url"));
    v14 = 0;
    v10 = +[AVAsset rc_updateFile:withTranscriptionData:error:](AVAsset, "rc_updateFile:withTranscriptionData:error:", v9, v5, &v14);
    v11 = v14;

    if ((v10 & 1) == 0)
    {
      v12 = OSLogForCategory(kVMLogCategoryService);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_10010CB24();

    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_100068D9C(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100069020(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordingError"));

  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setRecordingError:", 0);
    objc_msgSend(v4, "invalidate");
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }

}

void sub_1000695C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

id sub_1000695E4(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "currentAudioAndVideoCallCount");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10006968C(uint64_t a1)
{
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, *(dispatch_block_t *)(a1 + 32));
}

void sub_10006A19C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x10006A0F8);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006A224(uint64_t a1, uint64_t a2)
{
  void *v3;
  unsigned __int8 v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  id v8;

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    v8 = 0;
    v4 = objc_msgSend(v3, "endAccessSessionWithToken:error:", a2, &v8);
    v5 = v8;
    if ((v4 & 1) == 0)
    {
      v6 = OSLogForCategory(kVMLogCategoryService);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_10010CCD4();

    }
    objc_msgSend(*(id *)(a1 + 40), "setEditingStatus:", 0);

  }
}

id sub_10006A2C4(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  BOOL v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;
  id v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;

  objc_msgSend(*(id *)(a1 + 32), "setMode:", 3);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[AVURLAsset rc_preciseTimingAssetWithURL:](AVURLAsset, "rc_preciseTimingAssetWithURL:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v2, "rc_durationInSeconds");
  v4 = v3;
  if (v2)
    v5 = v3 > 0.00000011920929;
  else
    v5 = 0;
  if (v5)
  {
    v9 = *(double *)(a1 + 96);
    objc_msgSend(*(id *)(a1 + 48), "setContentDuration:", v3);
    objc_msgSend(*(id *)(a1 + 48), "setTimeRangeInContentToUse:", RCTimeRangeMake(0.0, v4));
    v10 = v4 + v9;
    objc_msgSend(*(id *)(a1 + 48), "setTimeRangeInComposition:", RCTimeRangeMake(*(double *)(a1 + 96), v10));
    v11 = *(void **)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[RCComposition compositionMetadataURLForComposedAVURL:](RCComposition, "compositionMetadataURLForComposedAVURL:", *(_QWORD *)(a1 + 56)));
    v20 = 0;
    v13 = objc_msgSend(v11, "_pushFileVersion:error:", v12, &v20);
    v14 = v20;

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "compositionByOverdubbingWithFragment:", *(_QWORD *)(a1 + 48)));
    objc_msgSend(v15, "saveMetadataToDefaultLocation");
    objc_msgSend(*(id *)(a1 + 72), "setCurrentTime:", v10);
    objc_msgSend(*(id *)(a1 + 32), "__refreshRecording:composition:controller:", *(_QWORD *)(a1 + 80), v15, *(_QWORD *)(a1 + 72));
    objc_msgSend(*(id *)(a1 + 32), "setEditingStatus:", 2);

  }
  else
  {
    v6 = OSLogForCategory(kVMLogCategoryService);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v19 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 136315906;
      v22 = "-[VMAudioService _mergeRecording:atTime:controller:error:]_block_invoke";
      v23 = 2112;
      v24 = v2;
      v25 = 2112;
      v26 = v19;
      v27 = 2048;
      v28 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s -- Merged recording failed - asset = %@, url = %@, outputDuration = %f", buf, 0x2Au);
    }

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    objc_msgSend(v8, "removeItemAtURL:error:", *(_QWORD *)(a1 + 40), 0);

  }
  v16 = *(_QWORD *)(a1 + 88);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "recordingToken"));
  (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v17);

  objc_msgSend(*(id *)(a1 + 72), "setRecordingToken:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setMode:", 0);
  return objc_msgSend(*(id *)(a1 + 72), "setCurrentState:", 0);
}

void sub_10006A548(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x10006A458);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006A678(uint64_t a1, int a2)
{
  void *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  unsigned __int8 v7;
  id v8;
  id v9;

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(double *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 48);
    v9 = 0;
    v7 = objc_msgSend(v3, "_mergeRecording:atTime:controller:error:", v4, v6, &v9, v5);
    v8 = v9;
    if ((v7 & 1) == 0)
      objc_msgSend(*(id *)(a1 + 48), "setRecordingError:", v8);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "setRecordingError:");
  }
}

intptr_t sub_10006A79C(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10006AB90(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x10006AAFCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006ABE0(uint64_t a1, uint64_t a2)
{
  void *v2;
  unsigned __int8 v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  id v7;

  if (a2)
  {
    v2 = *(void **)(a1 + 32);
    v7 = 0;
    v3 = objc_msgSend(v2, "endAccessSessionWithToken:error:", a2, &v7);
    v4 = v7;
    if ((v3 & 1) == 0)
    {
      v5 = OSLogForCategory(kVMLogCategoryService);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_10010CDAC();

    }
  }
}

id sub_10006AD1C(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "compositionByClippingToComposedTimeRange:", *(double *)(a1 + 32), *(double *)(a1 + 40));
}

id sub_10006ADDC(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "compositionByDeletingAndSplittingAtComposedTimeRange:", *(double *)(a1 + 32), *(double *)(a1 + 40));
}

void sub_10006B0A0(uint64_t a1, uint64_t a2)
{
  id v3;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 40), "setRecordingError:", a2);
  }
  else
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[RCRecordingTranscriptionService sharedInstance](RCRecordingTranscriptionService, "sharedInstance"));
    objc_msgSend(v3, "startTranscriptionFor:", *(_QWORD *)(a1 + 32));

  }
}

void sub_10006B8B0(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  void *v6;
  unsigned __int8 v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  NSObject *v16;

  v5 = a3;
  if (a2)
  {
    v6 = *(void **)(a1 + 32);
    v12 = 0;
    v7 = objc_msgSend(v6, "endAccessSessionWithToken:error:", a2, &v12);
    v8 = v12;
    if ((v7 & 1) == 0)
    {
      v9 = OSLogForCategory(kVMLogCategoryService);
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v14 = "-[VMAudioService _mixDownEditedRecording:completion:]_block_invoke";
        v15 = 2112;
        v16 = v8;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%s -- accessError = %@", buf, 0x16u);
      }

    }
  }
  else
  {
    v11 = OSLogForCategory(kVMLogCategoryService);
    v8 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "-[VMAudioService _mixDownEditedRecording:completion:]_block_invoke";
      v15 = 2112;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s -- finalization error = %@", buf, 0x16u);
    }
  }

  objc_msgSend(*(id *)(a1 + 40), "setEditingStatus:", 0);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_10006C818(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIColor labelColor](UIColor, "labelColor"));
  objc_msgSend(*(id *)(a1 + 32), "setTextColor:", v2);

}

void sub_10006DD34(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "centerContentContainerView"));
  objc_msgSend(v2, "addSubview:", *(_QWORD *)(a1 + 48));

}

void sub_10006E024(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_bottomElementsToHide", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v7, "setHidden:", *(unsigned __int8 *)(a1 + 48));
        objc_msgSend(v7, "setAlpha:", *(double *)(a1 + 40));
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v4);
  }

  if (*(_BYTE *)(a1 + 48))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[RCRecorderStyleProvider sharedStyleProvider](RCRecorderStyleProvider, "sharedStyleProvider"));
    objc_msgSend(v8, "recordingViewExpandedTranscriptAdditionalSpaceBetweenOverviewAndTimeLabel");
    v10 = v9;

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainContainerStackView"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fixedOverviewWaveformContainerView"));
    v13 = v11;
    v14 = v10;
  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainContainerStackView"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fixedOverviewWaveformContainerView"));
    v14 = 0.0;
    v13 = v11;
  }
  objc_msgSend(v13, "setCustomSpacing:afterView:", v12, v14);

}

id sub_10006F854(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_trimInsertReplaceDoneButtonAction:", *(_QWORD *)(a1 + 40));
}

id sub_10006F948(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_trimInsertReplaceDoneButtonSaveAsNewAction:", *(_QWORD *)(a1 + 40));
}

void sub_1000702B8(uint64_t a1)
{
  double v1;
  id v2;

  if (*(_BYTE *)(a1 + 40))
    v1 = 0.0;
  else
    v1 = 1.0;
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "descriptionView"));
  objc_msgSend(v2, "setAlpha:", v1);

}

id sub_1000723F4(uint64_t a1)
{
  double v2;
  void *v3;
  double v4;
  void *v5;

  v2 = *(double *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentTimeLabel"));
  objc_msgSend(v3, "setAlpha:", v2);

  v4 = *(double *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bottomControlsContainerView"));
  objc_msgSend(v5, "setAlpha:", v4);

  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

void sub_100073058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100073074(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id *v5;
  id WeakRetained;
  unsigned __int8 v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;

  v3 = a2;
  v19 = (id)objc_claimAutoreleasedReturnValue(+[RCRecorderStyleProvider sharedStyleProvider](RCRecorderStyleProvider, "sharedStyleProvider"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIButtonConfiguration filledButtonConfiguration](UIButtonConfiguration, "filledButtonConfiguration"));
  v5 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = objc_msgSend(WeakRetained, "isToggled");

  v8 = objc_loadWeakRetained(v5);
  v9 = v8;
  if ((v7 & 1) != 0)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "toggleImage"));

    objc_msgSend(v4, "setImage:", v10);
    v11 = objc_loadWeakRetained(v5);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "imageSymbolConfiguration"));
    objc_msgSend(v4, "setPreferredSymbolConfigurationForImage:", v12);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "trimButtonTintColor"));
    v14 = objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "defaultImage"));

    objc_msgSend(v4, "setImage:", v10);
    v15 = objc_loadWeakRetained(v5);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "imageSymbolConfiguration"));
    objc_msgSend(v4, "setPreferredSymbolConfigurationForImage:", v16);

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "trimButtonTintColor"));
  }
  v17 = (void *)v14;
  objc_msgSend(v4, "setBaseBackgroundColor:", v13);
  objc_msgSend(v4, "setBaseForegroundColor:", v17);
  objc_msgSend(v19, "toggleButtonContentInsets");
  objc_msgSend(v4, "setContentInsets:");
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "background"));
  objc_msgSend(v19, "toggleButtonCornerRadius");
  objc_msgSend(v18, "setCornerRadius:");

  objc_msgSend(v4, "setCornerStyle:", -1);
  objc_msgSend(v3, "setConfiguration:", v4);

}

id sub_1000732C8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdateConfiguration");
}

void sub_100073D08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 == 1)
  {
    v11 = v2;
    v12 = v3;
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100073DBC;
    v8[3] = &unk_1001ACC30;
    v7 = *(_QWORD *)(a1 + 48);
    v9 = *(id *)(a1 + 56);
    v10 = *(id *)(a1 + 64);
    +[RCSavedRecordingsModel importRecordingWithSourceAudioURL:name:date:completionHandler:](RCSavedRecordingsModel, "importRecordingWithSourceAudioURL:name:date:completionHandler:", v5, v6, v7, v8);

  }
}

void sub_100073DBC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v8 = *(_QWORD *)(a1 + 32);
  v13 = 0;
  v9 = objc_msgSend(v7, "removeItemAtURL:error:", v8, &v13);
  v10 = v13;

  if ((v9 & 1) == 0)
  {
    v11 = OSLogForCategory(kVMLogCategoryService);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_10010D19C((uint64_t)v10, v12);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

id sub_100074760(void *a1)
{
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v1 = a1;
  v2 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v1, "count"));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v7), "folderControllerID", (_QWORD)v10));
        objc_msgSend(v2, "addObject:", v8);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  return v2;
}

BOOL sub_100074A88(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 v4;

  v3 = a2;
  if (objc_msgSend(v3, "folderType"))
    v4 = objc_msgSend(*(id *)(a1 + 32), "playableCountForFolder:", v3) != 0;
  else
    v4 = 1;

  return v4;
}

BOOL sub_100074CB8(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 v4;

  v3 = a2;
  if (objc_msgSend(v3, "folderType"))
    v4 = objc_msgSend(*(id *)(a1 + 32), "playableCountForFolder:", v3) != 0;
  else
    v4 = 1;

  return v4;
}

id sub_100075498(unsigned int a1)
{
  int v2;
  __darwin_ct_rune_t v3;
  __darwin_ct_rune_t v4;
  __darwin_ct_rune_t v5;
  char v7[8];
  uint64_t v8;
  int v9;

  *(_QWORD *)v7 = 0;
  v8 = 0;
  v9 = 0;
  v2 = bswap32(a1);
  *(_DWORD *)&v7[1] = v2;
  if ((v2 & 0x80) != 0)
  {
    if (!__maskrune((char)v2, 0x40000uLL))
      goto LABEL_17;
  }
  else if ((_DefaultRuneLocale.__runetype[(char)v2] & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  v3 = (__int16)v2 >> 8;
  if ((v2 & 0x8000) != 0)
  {
    if (!__maskrune(v3, 0x40000uLL))
      goto LABEL_17;
  }
  else if ((_DefaultRuneLocale.__runetype[v3] & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  v4 = v2 << 8 >> 24;
  if ((v2 & 0x800000) != 0)
  {
    if (!__maskrune(v4, 0x40000uLL))
      goto LABEL_17;
  }
  else if ((_DefaultRuneLocale.__runetype[v4] & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  v5 = v2 >> 24;
  if (v2 < 0)
  {
    if (__maskrune(v5, 0x40000uLL))
      goto LABEL_15;
LABEL_17:
    __sprintf_chk(v7, 0, 0x14uLL, "%d", a1);
    return (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7));
  }
  if ((_DefaultRuneLocale.__runetype[v5] & 0x40000) == 0)
    goto LABEL_17;
LABEL_15:
  strcpy(&v7[5], "'");
  v7[0] = 39;
  return (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7));
}

BOOL sub_1000755F4(signed int a1, _QWORD *a2)
{
  id v4;
  void *v5;
  void *v6;
  NSErrorUserInfoKey v8;
  void *v9;

  if (a1 && a2)
  {
    v8 = NSLocalizedDescriptionKey;
    v4 = sub_100075498(a1);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v9 = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));
    *a2 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSOSStatusErrorDomain, a1, v6));

  }
  return a1 == 0;
}

uint64_t sub_1000756F4(OSType a1, OSType a2, AudioComponentInstance *a3)
{
  OpaqueAudioComponent *Next;
  AudioComponentDescription inDesc;

  inDesc.componentType = a1;
  inDesc.componentSubType = a2;
  *(_QWORD *)&inDesc.componentManufacturer = 1634758764;
  inDesc.componentFlagsMask = 0;
  Next = AudioComponentFindNext(0, &inDesc);
  return AudioComponentInstanceNew(Next, a3);
}

uint64_t sub_100075740(OpaqueAudioComponentInstance *a1, void *inData, int a3)
{
  AudioUnitScope v3;

  if (a3)
    v3 = 1;
  else
    v3 = 2;
  return AudioUnitSetProperty(a1, 8u, v3, 0, inData, 0x28u);
}

BOOL sub_100075760(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
}

void sub_1000757EC(unsigned int *a1, unsigned int a2, int a3, int a4)
{
  size_t v5;
  void **v6;
  uint64_t v7;

  *a1 = a2;
  if (a2)
  {
    v5 = (4 * a3);
    v6 = (void **)(a1 + 4);
    v7 = a2;
    do
    {
      *((_DWORD *)v6 - 2) = 1;
      *((_DWORD *)v6 - 1) = v5;
      if (a4)
        bzero(*v6, v5);
      v6 += 2;
      --v7;
    }
    while (v7);
  }
}

unsigned int *sub_100075850(unsigned int *result, unsigned int *a2)
{
  unsigned int *v3;
  uint64_t v4;
  unint64_t v5;

  *a2 = *result;
  if (*result)
  {
    v3 = result;
    v4 = 0;
    v5 = 0;
    do
    {
      *(_QWORD *)&a2[v4 + 2] = *(_QWORD *)&v3[v4 + 2];
      result = (unsigned int *)memcpy(*(void **)&a2[v4 + 4], *(const void **)&v3[v4 + 4], v3[v4 + 3]);
      ++v5;
      v4 += 4;
    }
    while (v5 < *v3);
  }
  return result;
}

char *sub_1000758C4(int a1, unsigned int a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  size_t v6;
  void **v7;

  LODWORD(v3) = a1;
  v4 = (char *)malloc_type_malloc(16 * (a1 - 1) + 24, 0x4C226B78uLL);
  v5 = v4;
  if ((_DWORD)v3)
  {
    v6 = 4 * a2;
    v7 = (void **)(v4 + 16);
    v3 = v3;
    do
    {
      *v7 = malloc_type_malloc(v6, 0x100004052888210uLL);
      v7 += 2;
      --v3;
    }
    while (v3);
  }
  return v5;
}

void sub_100075940(void **a1, unsigned int a2)
{
  uint64_t v3;
  void **v4;
  void *v5;

  if (a2)
  {
    v3 = a2;
    v4 = a1 + 2;
    do
    {
      v5 = *v4;
      v4 += 2;
      free(v5);
      --v3;
    }
    while (v3);
  }
  free(a1);
}

float sub_100075984(_DWORD *a1, int a2, int a3, float result, float a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  if (a2)
  {
    v5 = 0;
    v8 = *a1;
    v6 = (uint64_t *)(a1 + 4);
    v7 = v8;
    do
    {
      if ((_DWORD)v7)
      {
        v9 = v7;
        v10 = v6;
        do
        {
          v11 = *v10;
          v10 += 2;
          *(float *)(v11 + 4 * (v5 + a3)) = result * *(float *)(v11 + 4 * (v5 + a3));
          --v9;
        }
        while (v9);
      }
      result = fmin(fmax((float)(result + a5), 0.0), 1.0);
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

void sub_1000759E8(_DWORD *a1, int a2, int a3)
{
  unint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (*a1)
  {
    v4 = 0;
    v5 = a3;
    v6 = 4 * a2;
    v7 = 4;
    do
    {
      bzero((void *)(*(_QWORD *)&a1[v7] + 4 * v5), v6);
      ++v4;
      v7 += 4;
    }
    while (v4 < *a1);
  }
}

uint64_t *sub_100075A50(uint64_t *result, unsigned int a2, uint64_t *a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  if (a5)
  {
    v7 = result;
    v8 = a4;
    v9 = a2;
    v10 = 4 * a6;
    v11 = a5;
    do
    {
      v12 = *a3++;
      v13 = (void *)(v12 + 4 * v8);
      v14 = *v7++;
      result = (uint64_t *)memcpy(v13, (const void *)(v14 + 4 * v9), v10);
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_100075AB4(OpaqueAudioComponentInstance *a1, void *outData)
{
  UInt32 ioDataSize;

  ioDataSize = 4;
  return AudioUnitGetProperty(a1, 0xEu, 0, 0, outData, &ioDataSize);
}

uint64_t sub_100075AEC(OpaqueAudioComponentInstance *a1, int a2)
{
  int inData;

  inData = a2;
  return AudioUnitSetProperty(a1, 0xEu, 0, 0, &inData, 4u);
}

void sub_100076030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100076058(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  void *v8;
  id *v9;
  id WeakRetained;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  void *v23;
  id v24;

  v7 = a4;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", CFSTR("kFolderCellReuseIdentifier"), a3));
  v9 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cellsHashTable"));
  objc_msgSend(v11, "addObject:", v8);

  v12 = objc_loadWeakRetained(v9);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "foldersController"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "folderWithIdentifier:", v7));

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[RCFolderDisplayModel folderDisplayModelWithFolderModel:](RCFolderDisplayModel, "folderDisplayModelWithFolderModel:", v14));
  v16 = objc_loadWeakRetained(v9);
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "currentActiveFolderViewController"));

  if (v17)
  {
    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "folderUUID"));
    if (v18)
    {
      v19 = (void *)v18;
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "UUID"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "folderUUID"));
      v22 = objc_msgSend(v20, "isEqualToString:", v21);

      if (v22)
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "displayName"));
        objc_msgSend(v17, "setFolderTitle:", v23);

      }
    }
  }
  v24 = objc_loadWeakRetained(v9);
  objc_msgSend(v24, "_configureCell:withFolderDisplayModel:", v8, v15);

  return v8;
}

id sub_100076278(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id *v6;
  id WeakRetained;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;

  v5 = a3;
  v6 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = objc_msgSend(WeakRetained, "_layoutListAppearance");

  v9 = objc_msgSend(objc_alloc((Class)UICollectionLayoutListConfiguration), "initWithAppearance:", v8);
  v10 = objc_loadWeakRetained(v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "_backgroundColorToUse"));
  objc_msgSend(v9, "setBackgroundColor:", v11);

  v12 = objc_loadWeakRetained(v6);
  objc_msgSend(v9, "setShowsSeparators:", objc_msgSend(v12, "_showsSeparators"));

  v13 = objc_loadWeakRetained(v6);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "_trailingSwipeActionsConfigurationProvider"));
  objc_msgSend(v9, "setTrailingSwipeActionsConfigurationProvider:", v14);

  if (a2 == 1)
    objc_msgSend(v9, "setHeaderMode:", 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSection sectionWithListConfiguration:layoutEnvironment:](NSCollectionLayoutSection, "sectionWithListConfiguration:layoutEnvironment:", v9, v5));
  if (!a2)
  {
    v16 = objc_loadWeakRetained(v6);
    objc_msgSend(v16, "_builtInFolderSectionTopPadding");
    v18 = v17;

    if (v18 > 0.0)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension fractionalWidthDimension:](NSCollectionLayoutDimension, "fractionalWidthDimension:", 1.0));
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutDimension absoluteDimension:](NSCollectionLayoutDimension, "absoluteDimension:", v18));
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSize sizeWithWidthDimension:heightDimension:](NSCollectionLayoutSize, "sizeWithWidthDimension:heightDimension:", v19, v20));

      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutBoundarySupplementaryItem boundarySupplementaryItemWithLayoutSize:elementKind:alignment:](NSCollectionLayoutBoundarySupplementaryItem, "boundarySupplementaryItemWithLayoutSize:elementKind:alignment:", v21, CFSTR("kFolderCollectionElementKindSectionSpacer"), 1));
      v25 = v22;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v25, 1));
      objc_msgSend(v15, "setBoundarySupplementaryItems:", v23);

    }
  }

  return v15;
}

id sub_100076A2C(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void **v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, void *);
  void *v24;
  id v25;
  id v26;
  void *v27;

  v3 = a2;
  if (objc_msgSend(v3, "section"))
  {
    v4 = (id *)(a1 + 32);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "foldersController"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "folderAtIndexPath:", v3));

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[RCRecorderStyleProvider sharedStyleProvider](RCRecorderStyleProvider, "sharedStyleProvider"));
    if ((objc_msgSend(v8, "usesVectorGlyph") & 1) != 0)
    {
      v9 = 0;
    }
    else
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("DELETE"), &stru_1001B2BC0, 0));

    }
    v21 = _NSConcreteStackBlock;
    v22 = 3221225472;
    v23 = sub_100076CD4;
    v24 = &unk_1001ACCF0;
    objc_copyWeak(&v26, v4);
    v12 = v7;
    v25 = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIContextualAction contextualActionWithStyle:title:handler:](UIContextualAction, "contextualActionWithStyle:title:handler:", 1, v9, &v21));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemRedColor](UIColor, "systemRedColor", v21, v22, v23, v24));
    objc_msgSend(v13, "setBackgroundColor:", v14);

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "swipeTrashImage"));
    objc_msgSend(v13, "setImage:", v15);

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "localizedStringForKey:value:table:", CFSTR("DELETE"), &stru_1001B2BC0, 0));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "image"));
    objc_msgSend(v18, "setAccessibilityLabel:", v17);

    v27 = v13;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v27, 1));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[UISwipeActionsConfiguration configurationWithActions:](UISwipeActionsConfiguration, "configurationWithActions:", v19));

    objc_destroyWeak(&v26);
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_100076CB4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100076CD4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id *v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  id WeakRetained;

  v5 = (id *)(a1 + 40);
  v6 = a4;
  WeakRetained = objc_loadWeakRetained(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "selectionDelegate"));
  v8 = *(_QWORD *)(a1 + 32);
  v9 = objc_loadWeakRetained(v5);
  objc_msgSend(v7, "deleteFolder:controller:completionBlock:", v8, v9, v6);

}

void sub_100077BD8(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  id v5;
  id v6;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "recordingsCollectionViewController"));
  objc_msgSend(v3, "setFolderSelectionDelegate:", 0);

  v4 = objc_loadWeakRetained(v1);
  objc_msgSend(v4, "setLibraryActionHandler:", 0);

  v5 = objc_loadWeakRetained(v1);
  objc_msgSend(v5, "setRecordingViewControllerDelegate:", 0);

  v6 = objc_loadWeakRetained(v1);
  objc_msgSend(v6, "setIsSetup:", 0);

}

uint64_t sub_100077C74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100079AC0(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1001ED930;
  qword_1001ED930 = (uint64_t)v1;

}

NSArray *__cdecl sub_100079C58(id a1, NSArray *a2)
{
  NSArray *v2;
  void *v3;
  NSArray *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v4 = v2;
  v5 = -[NSArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(id *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v8);
        v11 = objc_opt_class(UICommand, v10);
        if ((objc_opt_isKindOfClass(v9, v11) & 1) != 0)
        {
          v12 = v9;
          v9 = v12;
          if (objc_msgSend(v12, "action", (_QWORD)v15) == "delete:")
          {
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "title"));
            v9 = (id)objc_claimAutoreleasedReturnValue(+[UIKeyCommand commandWithTitle:image:action:input:modifierFlags:propertyList:](UIKeyCommand, "commandWithTitle:image:action:input:modifierFlags:propertyList:", v13, 0, "delete:", CFSTR("\b"), 0, 0));

          }
        }
        objc_msgSend(v3, "addObject:", v9, (_QWORD)v15);

        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = -[NSArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

  return (NSArray *)v3;
}

void sub_10007AAE4(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  id v6;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setHasMetTimeThreshold:", 1);

  v6 = objc_loadWeakRetained(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "delegate"));
  v4 = objc_loadWeakRetained(v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "UUID"));
  objc_msgSend(v3, "backupTimerFiredForUUID:", v5);

}

void sub_10007B7B4(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browseFoldersViewController"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "recordingViewController"));
  objc_msgSend(v1, "updateForSizeChange");

}

uint64_t sub_10007BF50(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _BOOL8 v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "addChildViewController:", *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view"));
  objc_msgSend(*(id *)(a1 + 32), "setHostedView:", v2);

  objc_msgSend(*(id *)(a1 + 40), "didMoveToParentViewController:", *(_QWORD *)(a1 + 32));
  if (objc_msgSend(*(id *)(a1 + 48), "displayStyle") == (id)1)
  {
    if (objc_msgSend(*(id *)(a1 + 56), "supportsCompactRecordingCard"))
    {
      if (*(_BYTE *)(a1 + 80))
        v3 = 3;
      else
        v3 = 2;
    }
    else
    {
      v3 = 3;
    }
    objc_msgSend(*(id *)(a1 + 48), "setDisplayStyle:", v3);
    v4 = objc_msgSend(*(id *)(a1 + 48), "displayStyle") == (id)2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "waveformViewController"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "waveformViewController"));
    objc_msgSend(v6, "setIsCompactView:", v4);

  }
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "playbackViewController"));
  if (v7)
  {
    v8 = (void *)v7;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "playbackViewController"));
    v10 = objc_msgSend(v9, "isDisplayingTranscriptView");

    if (v10)
      objc_msgSend(*(id *)(a1 + 40), "toggleTranscriptView");
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "browseFoldersViewController"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "activeRecordingsCollectionViewController"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "searchController"));
  objc_msgSend(v13, "setActive:", 0);

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "browseFoldersViewController"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "activeRecordingsCollectionViewController"));
  objc_msgSend(v15, "_setSearchString:", &stru_1001B2BC0);

  if ((objc_msgSend(*(id *)(a1 + 56), "toolbarButtonsShouldHaveNonDefaultColor") & 1) == 0)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "recordingsCollectionViewEditButtonDimmedColor"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "browseFoldersViewController"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "activeRecordingsCollectionViewController"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "editButtonItem"));
    objc_msgSend(v19, "setTintColor:", v16);

  }
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_10007C150(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "completePresent");
  return objc_msgSend(*(id *)(a1 + 32), "setCardPresentationDelegate:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_10007C178(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10007C184(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

double sub_10007C544(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

void sub_10007C790(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentedView"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "window"));
  objc_msgSend(v1, "layoutIfNeeded");

}

id sub_10007CBFC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "toggleFullCompact");
}

uint64_t sub_10007D06C(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainControllerHelper"));
  objc_msgSend(v2, "startCapturing:", *(_QWORD *)(a1 + 40));

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10007D430(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_10007D454(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id location;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "browseFoldersViewController"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "activeRecordingsCollectionViewController"));
  objc_initWeak(&location, v5);

  v6 = objc_loadWeakRetained(&location);
  objc_msgSend(v6, "willSelectItemWithUUID:", *(_QWORD *)(a1 + 32));

  v7 = objc_loadWeakRetained(&location);
  objc_msgSend(v7, "selectItemWithUUID:animated:", *(_QWORD *)(a1 + 32), 0);

  v8 = objc_loadWeakRetained(v2);
  objc_msgSend(v8, "didSelectForUUID:resetPosition:force:", *(_QWORD *)(a1 + 32), 0, 0);

  v9 = objc_loadWeakRetained(v2);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "mainControllerHelper"));
  LODWORD(v5) = objc_msgSend(v10, "isPlayingForUUID:", *(_QWORD *)(a1 + 32));

  if ((_DWORD)v5)
  {
    v11 = objc_loadWeakRetained(v2);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "playbackViewController"));
    objc_msgSend(v12, "showPlayingForUUID:", *(_QWORD *)(a1 + 32));

  }
  objc_destroyWeak(&location);
}

void sub_10007D57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007D590(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id location;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "browseFoldersViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "activeRecordingsCollectionViewController"));
  objc_initWeak(&location, v4);

  v5 = objc_loadWeakRetained(&location);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "viewIfLoaded"));
  if (!v6)
  {

    goto LABEL_5;
  }
  v7 = objc_loadWeakRetained(&location);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "viewIfLoaded"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "window"));

  if (!v9)
  {
LABEL_5:
    v10 = *(_QWORD *)(a1 + 32);
    v11 = objc_loadWeakRetained(&location);
    objc_msgSend(v11, "setViewDidAppearCompletionBlock:", v10);

    goto LABEL_6;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
LABEL_6:
  objc_destroyWeak(&location);
}

void sub_10007D690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10007D6A4(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;
  uint64_t v5;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordingsModelInteractor"));
  v3 = objc_msgSend(v2, "isRecentlyDeletedForUUID:", *(_QWORD *)(a1 + 40));

  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  if (v3)
    return _objc_msgSend(v4, "goToRecentlyDeletedIfNeededWithCompletion:", *(_QWORD *)(a1 + 48), v5);
  else
    return objc_msgSend(v4, "goToAllRecordingsIfNeeded:completion:", 1, v5);
}

id sub_10007E544(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  if (*(_BYTE *)(a1 + 64))
    objc_msgSend(*(id *)(a1 + 32), "_reparentAfterDismiss");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browseFoldersViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "activeRecordingsCollectionViewController"));
  objc_msgSend(v3, "_setSearchString:", &stru_1001B2BC0);

  if ((objc_msgSend(*(id *)(a1 + 40), "toolbarButtonsShouldHaveNonDefaultColor") & 1) == 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBlueColor](UIColor, "systemBlueColor"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browseFoldersViewController"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "activeRecordingsCollectionViewController"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "editButtonItem"));
    objc_msgSend(v7, "setTintColor:", v4);

  }
  v8 = *(_QWORD *)(a1 + 56);
  if (v8)
    (*(void (**)(void))(v8 + 16))();
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browseFoldersViewController"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "recordingViewController"));
  objc_msgSend(v10, "cleanupAfterDismiss");

  if (!*(_BYTE *)(a1 + 65))
    +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", 1);
  objc_msgSend(*(id *)(a1 + 48), "setCardPresentationDelegate:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "setSheetPresentationState:", 0);
}

void sub_10007E85C(uint64_t a1)
{
  void *v2;
  void ***v3;
  void ***v4;
  unsigned int v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  void *v12;
  uint64_t v13;
  id v14;

  v9 = _NSConcreteStackBlock;
  v10 = 3221225472;
  v11 = sub_10007E93C;
  v12 = &unk_1001AB6E8;
  v2 = *(void **)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = v2;
  v3 = objc_retainBlock(&v9);
  v4 = v3;
  if (*(_BYTE *)(a1 + 48))
  {
    ((void (*)(void ***))v3[2])(v3);
  }
  else
  {
    v5 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "isRecentlyDeletedForUUID:", *(_QWORD *)(a1 + 40), v9, v10, v11, v12, v13);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browseFoldersViewController"));
    v7 = v6;
    if (v5)
      v8 = 3;
    else
      v8 = 0;
    objc_msgSend(v6, "goToBuiltInFolderOfType:animated:completion:", v8, 0, v4);

  }
}

void sub_10007E93C(uint64_t a1)
{
  void *v2;
  void **v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  id v8;

  +[CATransaction begin](CATransaction, "begin");
  v3 = _NSConcreteStackBlock;
  v4 = 3221225472;
  v5 = sub_10007E9D0;
  v6 = &unk_1001AB6E8;
  v2 = *(void **)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = v2;
  +[CATransaction setCompletionBlock:](CATransaction, "setCompletionBlock:", &v3);
  +[CATransaction commit](CATransaction, "commit", v3, v4, v5, v6, v7);

}

void sub_10007E9D0(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "browseFoldersViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "currentActiveFolderViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordingsCollectionViewController"));
  objc_msgSend(v1, "_selectRecordingWithUUID:inRecordingsCollectionViewController:", v2, v4);

}

void sub_10007F4EC(uint64_t a1, uint64_t a2, int a3)
{
  void *v3;
  id v4;

  if (a3)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browseFoldersViewController"));
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "activeRecordingsCollectionViewController"));

    if (objc_msgSend(v4, "isEditing"))
      objc_msgSend(v4, "endEditing");

  }
}

void sub_100080474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100080490(uint64_t a1)
{
  uint64_t v1;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setPresentedSelectFolderViewController:", v1);

}

void sub_100080B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100080B9C(uint64_t a1)
{
  uint64_t v2;
  id *v3;
  id WeakRetained;
  uint64_t v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "setPresentedPlaybackSettingsViewController:", v2);

  v5 = *(_QWORD *)(a1 + 40);
  v6 = objc_loadWeakRetained(v3);
  objc_msgSend(v6, "setPresentingPlaybackSettingsViewController:", v5);

}

void sub_1000812E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100081314(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("NEW_FOLDER_NAME_PLACEHOLDER"), &stru_1001B2BC0, 0));
  objc_msgSend(v5, "setPlaceholder:", v4);

  objc_msgSend(v5, "addTarget:action:forControlEvents:", *(_QWORD *)(a1 + 32), "_newFolderTextDidChange:", 0x20000);
  objc_msgSend(v5, "setAutocapitalizationType:", 1);

}

void sub_1000813BC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "textFields"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", 0));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "text"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordingsModelInteractor"));
  if (objc_msgSend(v5, "userFolderExistsWithName:", v6))
  {
    objc_msgSend(*(id *)(a1 + 32), "_presentNameTakenAlertWithName:sourceController:", v6, *(_QWORD *)(a1 + 40));
  }
  else if ((objc_msgSend(v5, "createUserFolderWithName:", v6) & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "_showFailedNewFolderAlert");
  }

}

void sub_100081738(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "setPlaceholder:", v3);
  objc_msgSend(v4, "addTarget:action:forControlEvents:", *(_QWORD *)(a1 + 40), "_renamingTextDidChange:", 0x20000);
  objc_msgSend(v4, "setAutocapitalizationType:", 1);

}

void sub_100081798(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordingsModelInteractor"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "text"));
  if (objc_msgSend(v5, "userFolderExistsWithName:", v2))
  {
    objc_msgSend(*(id *)(a1 + 32), "_presentNameTakenAlertWithName:sourceController:", v2, *(_QWORD *)(a1 + 48));
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[RCApplicationModel sharedApplicationModel](RCApplicationModel, "sharedApplicationModel"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "folderWithName:", *(_QWORD *)(a1 + 56)));
    objc_msgSend(*(id *)(a1 + 32), "renameFolder:toName:", v4, v2);

  }
}

void sub_100082664(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void ***v8;
  void ***v9;
  void **v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  char v20;
  id location;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "UUID"));
  if (*(_QWORD *)(a1 + 56) != 1)
    objc_msgSend(*(id *)(a1 + 40), "selectRecordingWithUUID:returnToBrowse:", v2, 0);
  objc_msgSend(*(id *)(a1 + 40), "didSelectForUUID:resetPosition:force:", v2, 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "browseFoldersViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordingViewController"));

  objc_initWeak(&location, *(id *)(a1 + 40));
  v10 = _NSConcreteStackBlock;
  v11 = 3221225472;
  v12 = sub_10008281C;
  v13 = &unk_1001ACFB0;
  v5 = v4;
  v14 = v5;
  objc_copyWeak(&v19, &location);
  v15 = *(id *)(a1 + 48);
  v16 = *(id *)(a1 + 32);
  v6 = v2;
  v7 = *(_QWORD *)(a1 + 40);
  v17 = v6;
  v18 = v7;
  v20 = *(_BYTE *)(a1 + 64);
  v8 = objc_retainBlock(&v10);
  v9 = v8;
  if (*(_QWORD *)(a1 + 56) == 1)
    ((void (*)(void ***))v8[2])(v8);
  else
    objc_msgSend(*(id *)(a1 + 40), "setState:withOptions:completion:", 1, 1, v8, v10, v11, v12, v13, v14, v15, v16);
  objc_msgSend(*(id *)(a1 + 40), "updateQuickActions", v10, v11, v12, v13);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);

}

void sub_100082800(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10008281C(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;

  v2 = (id *)(a1 + 72);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "mainControllerHelper"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "timeController"));
  objc_msgSend(*(id *)(a1 + 32), "setActiveTimeController:", v5);

  v6 = objc_loadWeakRetained(v2);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mainControllerHelper"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "liveTranscription"));
  objc_msgSend(*(id *)(a1 + 32), "setLiveTranscription:", v8);

  objc_msgSend(*(id *)(a1 + 32), "startEditWithComposition:displayModel:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v9 = *(void **)(a1 + 32);
  v10 = objc_loadWeakRetained(v2);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "playbackSettings"));
  objc_msgSend(v9, "updateWithPlaybackSettings:", v11);

  v12 = objc_loadWeakRetained(v2);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "mainControllerHelper"));
  LODWORD(v11) = objc_msgSend(v13, "isPlayingForUUID:", *(_QWORD *)(a1 + 56));

  if ((_DWORD)v11)
    objc_msgSend(*(id *)(a1 + 32), "showPlayingForUUID:", *(_QWORD *)(a1 + 56));
  v14 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 64) + 16));

  if (v14)
  {
    v15 = objc_loadWeakRetained(v2);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "mainControllerHelper"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "timeController"));
    v18 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 64) + 16));
    objc_msgSend(v18, "setActiveTimeController:", v17);

    v19 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 64) + 16));
    objc_msgSend(v19, "startEditWithComposition:displayModel:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

    v20 = objc_loadWeakRetained(v2);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "mainControllerHelper"));
    LODWORD(v16) = objc_msgSend(v21, "isPlayingForUUID:", *(_QWORD *)(a1 + 56));

    if ((_DWORD)v16)
    {
      v22 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 64) + 16));
      objc_msgSend(v22, "showPlayingForUUID:", *(_QWORD *)(a1 + 56));

    }
  }
  if (*(_BYTE *)(a1 + 80))
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "mainControllerHelper"));
    objc_msgSend(v23, "enterTrimMode");

    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "browseFoldersViewController"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "recordingViewController"));
    objc_msgSend(v25, "updateForTrimMode");

  }
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_1001ACF88);
}

void sub_100082A70(id a1)
{
  void *v1;
  unsigned int v2;
  void *v3;
  id v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v2 = objc_msgSend(v1, "isRunningTest");

  if (v2)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "delegate"));
    objc_msgSend(v3, "ppt_didShowVoiceMemoEditor");

  }
}

void sub_100082DF4(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "view"));
  objc_msgSend(v1, "completePresent");

}

void sub_1000830DC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id WeakRetained;
  id v16;
  void *v17;
  BOOL v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  id v29;
  void **v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  void *v33;
  id v34;
  id v35;
  BOOL v36;
  id location;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browseFoldersViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "activeRecordingsCollectionViewController"));

  if (!*(_BYTE *)(a1 + 56))
  {
    objc_msgSend(v3, "deselectSelectedItem");
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "playbackViewController"));
    objc_msgSend(v4, "updateWithRecordingModel:", *(_QWORD *)(a1 + 40));

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browseFoldersViewController"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "currentActiveFolderViewController"));

    v7 = *(void **)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "UUID"));
    v9 = objc_msgSend(v6, "folderType");
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "folderTitle"));
    objc_msgSend(v7, "_setCorrectOriginalFolderForRecordingWithUUID:folderType:userFolderName:", v8, v9, v10);

  }
  objc_msgSend(v3, "setEditing:", 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "browseFoldersViewController"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "recordingViewController"));

  if (!*(_BYTE *)(a1 + 56))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "UUID"));
    objc_msgSend(v3, "prepareForAdditionOfNewRecordingWithUUID:", v13);

    if (objc_msgSend(v12, "isDisplayingTranscriptView"))
      objc_msgSend(v12, "toggleTranscriptView");
  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainControllerHelper"));
  objc_msgSend(v12, "updateForRecordingStart:", objc_msgSend(v14, "shouldSaveAsNew"));

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));
  objc_msgSend(WeakRetained, "updateForRecordingStart:", 0);

  objc_msgSend(v12, "updateWithRecordingModel:", *(_QWORD *)(a1 + 40));
  v16 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));
  objc_msgSend(v16, "updateWithRecordingModel:", *(_QWORD *)(a1 + 40));

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "view"));
  v18 = objc_msgSend(v17, "displayStyle") == (id)1;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v19 = *(void **)(a1 + 32);
  v30 = _NSConcreteStackBlock;
  v31 = 3221225472;
  v32 = sub_100083450;
  v33 = &unk_1001AD020;
  v36 = v18;
  v20 = v3;
  v34 = v20;
  objc_copyWeak(&v35, &location);
  objc_msgSend(v19, "setState:withOptions:completion:", 1, 0, &v30);
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainControllerHelper", v30, v31, v32, v33));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "timeController"));
  objc_msgSend(v12, "setActiveTimeController:", v22);

  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainControllerHelper"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "liveTranscription"));
  objc_msgSend(v12, "setLiveTranscription:", v24);

  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainControllerHelper"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "timeController"));
  v27 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));
  objc_msgSend(v27, "setActiveTimeController:", v26);

  objc_msgSend(v12, "setWaveformDataSource:", *(_QWORD *)(a1 + 48));
  v28 = *(_QWORD *)(a1 + 48);
  v29 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 16));
  objc_msgSend(v29, "setWaveformDataSource:", v28);

  objc_msgSend(*(id *)(a1 + 32), "updateQuickActions");
  objc_destroyWeak(&v35);

  objc_destroyWeak(&location);
}

void sub_100083430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100083450(uint64_t a1)
{
  id WeakRetained;
  id v3;

  dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_1001ACFF8);
  if (*(_BYTE *)(a1 + 48))
    objc_msgSend(*(id *)(a1 + 32), "deselectSelectedItem");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "splitViewController"));

  objc_msgSend(v3, "hidePrimaryColumnIfNeeded");
}

void sub_1000834C0(id a1)
{
  void *v1;
  unsigned int v2;
  void *v3;
  id v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v2 = objc_msgSend(v1, "isRunningTest");

  if (v2)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "delegate"));
    objc_msgSend(v3, "ppt_didStartCyclerRecording");

  }
}

void sub_100083940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008395C(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_1001AD040);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "mainControllerHelper"));
  objc_msgSend(v2, "promptForRatingIfNeeded");

}

void sub_1000839B8(id a1)
{
  void *v1;
  unsigned int v2;
  void *v3;
  id v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v2 = objc_msgSend(v1, "isRunningTest");

  if (v2)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "delegate"));
    objc_msgSend(v3, "ppt_didEndCyclerRecording");

  }
}

id sub_100083C3C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setState:", 0);
}

void sub_100085CC0(id a1, NSString *a2)
{
  NSString *v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[UIPasteboard generalPasteboard](UIPasteboard, "generalPasteboard"));
  objc_msgSend(v3, "setString:", v2);

}

void sub_1000869B4(uint64_t a1)
{
  UIAccessibilityPostNotification(UIAccessibilityAnnouncementNotification, *(id *)(a1 + 32));
}

void sub_100086ED8(id a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[9];

  v3[0] = UIActivityTypePrint;
  v3[1] = UIActivityTypeAssignToContact;
  v3[2] = UIActivityTypeSaveToCameraRoll;
  v3[3] = UIActivityTypeAddToReadingList;
  v3[4] = UIActivityTypePostToFacebook;
  v3[5] = UIActivityTypePostToWeibo;
  v3[6] = UIActivityTypePostToFlickr;
  v3[7] = UIActivityTypePostToVimeo;
  v3[8] = UIActivityTypePostToTencentWeibo;
  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 9));
  v2 = (void *)qword_1001ED940;
  qword_1001ED940 = v1;

}

void sub_100089E88(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 64))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v2, "view"));
    objc_msgSend(v3, "bounds");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setFrame:");

    v2 = *(_QWORD *)(a1 + 32);
  }
  if (*(_QWORD *)(v2 + 72))
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 16), "view"));
    objc_msgSend(v4, "bounds");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setFrame:");

  }
}

id sub_10008AC0C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_updateVisibleAreaWithAnimationDuration:", *(double *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "_updateSelectionOverlayWithAnimationDuration:", *(double *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "_updateBackgroundWaveformHighlight");
  return objc_msgSend(*(id *)(a1 + 40), "setAlpha:", 0.0);
}

uint64_t sub_10008AC50(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

uint64_t sub_10008AF50(uint64_t a1, void *a2, uint64_t a3, int a4, int a5, double a6)
{
  id v11;
  uint64_t v12;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double *v38;
  BOOL v39;
  double v41;
  uint64_t v42;
  double v43;
  double v44;
  id WeakRetained;

  v11 = a2;
  if (!a5 || a3 != 1 && a5 > 0)
  {
    v12 = 0;
    goto LABEL_5;
  }
  v12 = 0;
  if (a5 >= 0 || a3 == -1)
  {
    v15 = fmax(a6 / *(double *)(a1 + 40), 0.0);
    if (v15 < 0.25)
    {
      v16 = *(_QWORD *)(a1 + 32);
      v17 = *(double *)(v16 + 280);
      v18 = *(double *)(v16 + 312);
      v19 = *(double *)(v16 + 320);
      v20 = ((1.0 - v15 * 4.0) * 0.025 + v15 * 4.0 * 0.0125)
          * (*(double *)(v16 + 144)
           * (double)a5
           * *(double *)(v16 + 136));
      objc_msgSend(*(id *)(v16 + 24), "selectedTimeRangeMinimumDuration");
      v22 = v18 + v21;
      if (v18 + v21 < v19 + v20)
        v22 = v19 + v20;
      v23 = v19 - v21;
      if (v23 >= v18 + v20)
        v23 = v18 + v20;
      if (a4)
        v24 = v22;
      else
        v24 = v19;
      if (a4)
        v23 = v18;
      v25 = fmax(v23, 0.0);
      v26 = *(_QWORD *)(a1 + 32);
      v27 = *(double *)(v26 + 264);
      if (v27 >= v24)
        v28 = v24;
      else
        v28 = *(double *)(v26 + 264);
      v29 = v25 - v23;
      v30 = v28 - v24;
      if (a4)
        v31 = v30;
      else
        v31 = v29;
      v32 = RCTimeRangeMake(0.0, v27);
      v34 = *(_QWORD *)(a1 + 32);
      v35 = *(double *)(v34 + 272);
      if (v35 > 0.0)
      {
        v36 = *(double *)(v34 + 264);
        if (v35 < v36)
        {
          if (a3 == -1)
          {
            v32 = RCTimeRangeMake(fmax(v28 - v35, 0.0), v28);
            if (v25 < v32)
            {
              v38 = *(double **)(a1 + 32);
              v28 = v25 + v38[34];
              goto LABEL_47;
            }
          }
          else
          {
            if (v36 >= v25 + v35)
              v37 = v25 + v35;
            else
              v37 = *(double *)(v34 + 264);
            v32 = RCTimeRangeMake(v25, v37);
            if (v28 > v33)
            {
              v38 = *(double **)(a1 + 32);
              v25 = v28 - v38[34];
LABEL_47:
              v41 = v17 + v20 + v31;
              objc_msgSend(v38, "_setSelectedTimeRange:updateVisibleTimeRange:updateWaveformViewContentSizeAndOffset:notifyDelegate:animationDuration:", 0, 0, 1, v25, v28, 0.0);
              v42 = *(_QWORD *)(a1 + 32);
              v43 = 1.0;
              if (v15 < 0.125)
                v43 = *(double *)(v42 + 136) * 1.1;
              *(double *)(v42 + 136) = v43;
              v44 = v41 + *(double *)(a1 + 40) * 0.5;
              WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 232));
              objc_msgSend(WeakRetained, "waveformViewController:didScrubToTime:finished:", *(_QWORD *)(a1 + 32), 0, v44);

              v12 = 1;
              goto LABEL_5;
            }
          }
        }
      }
      v12 = 0;
      if (v25 < v32)
        goto LABEL_5;
      v39 = v28 >= v32 && v25 <= v33;
      if (!v39 || v28 > v33)
        goto LABEL_5;
      v38 = *(double **)(a1 + 32);
      goto LABEL_47;
    }
  }
LABEL_5:

  return v12;
}

void sub_10008B318(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "superview"));

  if (v4 != v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "addSubview:", v6);
    objc_msgSend(*(id *)(a1 + 32), "sendSubviewToBack:", v6);
    objc_msgSend(v6, "frame");
    objc_msgSend(v6, "setFrame:");
  }

}

id sub_10008B394(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 80);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10008B3FC;
  v3[3] = &unk_1001AD160;
  v3[4] = *(_QWORD *)(a1 + 40);
  return objc_msgSend(v1, "enumerateObjectsUsingBlock:", v3);
}

id sub_10008B3FC(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setAlpha:", *(double *)(a1 + 32));
}

uint64_t sub_10008B7E0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  _BOOL8 v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  uint64_t v22;
  uint64_t *v23;
  id v24;
  id v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  void *j;
  void *v30;
  uint64_t v31;
  unsigned int v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  BOOL v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[128];
  _BYTE v61[128];
  CGRect v62;
  CGRect v63;

  v1 = *(_QWORD *)(result + 32);
  if (!*(_BYTE *)(v1 + 97))
  {
    v2 = result;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v3 = *(id *)(v1 + 80);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v56, v61, 16);
    v49 = v2;
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v57;
      while (2)
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v57 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v8, "setIsPlayback:", objc_msgSend(*(id *)(v49 + 32), "isPlayback"));
          if (objc_msgSend(*(id *)(*(_QWORD *)(v49 + 32) + 24), "isRecording"))
            v9 = *(_BYTE *)(*(_QWORD *)(v49 + 32) + 222) == 0;
          else
            v9 = 0;
          objc_msgSend(v8, "setShouldOnlyRenderOnScreenTimeLabels:", v9);
          objc_msgSend(*(id *)(v49 + 32), "_frameForTimeMarkerView:", v8);
          v11 = v10;
          v13 = v12;
          v15 = v14;
          v17 = v16;
          objc_msgSend(v8, "frame");
          v63.origin.x = v18;
          v63.origin.y = v19;
          v63.size.width = v20;
          v63.size.height = v21;
          v62.origin.x = v11;
          v62.origin.y = v13;
          v62.size.width = v15;
          v62.size.height = v17;
          if (!CGRectEqualToRect(v62, v63))
          {
            v2 = v49;
            objc_msgSend(*(id *)(v49 + 32), "_setTimeMarkerViewsNeedInitialLayout:", 1);
            goto LABEL_15;
          }
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v56, v61, 16);
        v2 = v49;
        if (v5)
          continue;
        break;
      }
    }
LABEL_15:

    v22 = *(_QWORD *)(v2 + 32);
    if (*(_BYTE *)(v22 + 96))
    {
      return (uint64_t)objc_msgSend((id)v22, "_layoutTimeMarkerViewsForCurrentlyVisibleTimeRange");
    }
    else
    {
      result = (uint64_t)objc_msgSend(*(id *)(v22 + 80), "count");
      if (result)
      {
        v23 = &v48 - 2 * (_QWORD)objc_msgSend(*(id *)(*(_QWORD *)(v2 + 32) + 80), "count");
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v24 = *(id *)(*(_QWORD *)(v2 + 32) + 80);
        v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v52, v60, 16);
        if (v25)
        {
          v26 = v25;
          v48 = (uint64_t)&v48;
          v27 = 0;
          v28 = *(_QWORD *)v53;
          v50 = v24;
          v51 = v28;
          do
          {
            for (j = 0; j != v26; j = (char *)j + 1)
            {
              if (*(_QWORD *)v53 != v51)
                objc_enumerationMutation(v50);
              v30 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * (_QWORD)j);
              if (v27)
              {
                v31 = 0;
                v32 = 1;
                while (1)
                {
                  v33 = (double *)&v23[2 * v31];
                  v35 = *v33;
                  v34 = v33[1];
                  objc_msgSend(v30, "visibleTimeRange", v48);
                  v37 = vabdd_f64(v35, v36);
                  objc_msgSend(v30, "visibleTimeRange");
                  if (v37 <= 0.00000011920929)
                  {
                    *v33 = v38;
                    goto LABEL_32;
                  }
                  if (vabdd_f64(v34, v38) <= 0.00000011920929)
                    break;
                  v31 = v32;
                  v39 = v27 > v32++;
                  if (!v39)
                  {
                    ++v27;
                    v40 = &v23[2 * v27];
                    objc_msgSend(v30, "visibleTimeRange");
                    *v40 = v41;
                    v40[1] = v42;
                    goto LABEL_32;
                  }
                }
                objc_msgSend(v30, "visibleTimeRange");
                v23[2 * v31 + 1] = v45;
              }
              else
              {
                objc_msgSend(*(id *)(*((_QWORD *)&v52 + 1) + 8 * (_QWORD)j), "visibleTimeRange", v48);
                *v23 = v43;
                v23[1] = v44;
                v27 = 1;
              }
LABEL_32:
              ;
            }
            v26 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v52, v60, 16);
          }
          while (v26);

          v46 = 0;
          v47 = 1;
          v2 = v49;
          while (1)
          {
            result = RCTimeRangeContainsRange(*(double *)&v23[2 * v46], *(double *)&v23[2 * v46 + 1], *(double *)(*(_QWORD *)(v2 + 32) + 280), *(double *)(*(_QWORD *)(v2 + 32) + 288));
            if ((result & 1) != 0)
              break;
            v46 = v47;
            v39 = v27 > v47++;
            if (!v39)
              return (uint64_t)objc_msgSend(*(id *)(v2 + 32), "_layoutTimeMarkerViewsForCurrentlyVisibleTimeRange");
          }
        }
        else
        {

          return (uint64_t)objc_msgSend(*(id *)(v2 + 32), "_layoutTimeMarkerViewsForCurrentlyVisibleTimeRange");
        }
      }
    }
  }
  return result;
}

id sub_10008BD7C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setContentOffset:", *(double *)(a1 + 40), *(double *)(a1 + 48));
}

void sub_10008C108(uint64_t a1)
{
  double v2;
  double v3;
  unsigned int v4;
  uint64_t v5;
  double v6;
  char v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  id v17;

  objc_msgSend(*(id *)(a1 + 32), "desiredTimeDeltaForVisibleTimeRange");
  v3 = v2;
  if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "isHidden") & 1) != 0)
    LOBYTE(v4) = 1;
  else
    v4 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "isEditingEnabled") ^ 1;
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v5 + 219))
  {
    v6 = *(double *)(v5 + 264);
LABEL_9:
    v8 = v3 + v3;
    goto LABEL_10;
  }
  v7 = v4 ^ 1;
  v6 = *(double *)(v5 + 264);
  v8 = 0.0;
  if (*(_BYTE *)(v5 + 216))
    v7 = 1;
  if ((v7 & 1) == 0)
    goto LABEL_9;
LABEL_10:
  v9 = RCTimeRangeMake(0.0, v6 + v8);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 32);
  v14 = *(double *)(v12 + 280);
  v13 = *(double *)(v12 + 288);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v12 + 80), "objectAtIndexedSubscript:", 0));
  objc_msgSend(v15, "setDebugID:", 0);
  objc_msgSend(v15, "setVisibleTimeRange:", RCTimeRangeMake(v14 - v3, v14));
  objc_msgSend(v15, "setMarkerClippingRange:", v9, v11);
  objc_msgSend(*(id *)(a1 + 32), "_frameForTimeMarkerView:", v15);
  objc_msgSend(v15, "setFrame:");
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "objectAtIndexedSubscript:", 1));

  objc_msgSend(v16, "setDebugID:", 1);
  objc_msgSend(v16, "setVisibleTimeRange:", v14, v13);
  objc_msgSend(v16, "setMarkerClippingRange:", v9, v11);
  objc_msgSend(*(id *)(a1 + 32), "_frameForTimeMarkerView:", v16);
  objc_msgSend(v16, "setFrame:");
  v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 80), "objectAtIndexedSubscript:", 2));

  objc_msgSend(v17, "setDebugID:", 2);
  objc_msgSend(v17, "setVisibleTimeRange:", RCTimeRangeMake(v13, v3 + v13));
  objc_msgSend(v17, "setMarkerClippingRange:", v9, v11);
  objc_msgSend(*(id *)(a1 + 32), "_frameForTimeMarkerView:", v17);
  objc_msgSend(v17, "setFrame:");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 96) = 0;

}

BOOL sub_10008C514(RCWaveformViewController *self, SEL a2)
{
  return self->_selectedTimeRangeScrubbingEnabled;
}

void sub_10008CC9C()
{
  operator delete();
}

void sub_10008CD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VMSilenceRemover;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10008D258(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10008D574(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10008E85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008E874(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10008E884(uint64_t a1)
{

}

void sub_10008E88C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordingWithUniqueID:", *(_QWORD *)(a1 + 40)));
  v2 = objc_claimAutoreleasedReturnValue(+[RCComposition compositionLoadedForSavedRecording:](RCComposition, "compositionLoadedForSavedRecording:", v5));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_10008EDE8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = a3;
  objc_msgSend(a2, "distanceFromLocation:", v5);
  v8 = v7;
  objc_msgSend(v6, "distanceFromLocation:", *(_QWORD *)(a1 + 32));
  v10 = v9;

  if (v10 - v8 > 0.0)
    return -1;
  else
    return v10 - v8 != 0.0;
}

id sub_10008F36C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setPreferredSplitBehaviorForViewWidth:needsRestyle:", 1, *(double *)(a1 + 40));
}

id sub_10008F4BC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_doRestyle");
}

id sub_1000913D4(uint64_t a1, double a2)
{
  objc_super v4;

  LODWORD(a2) = *(_DWORD *)(a1 + 40);
  v4.receiver = *(id *)(a1 + 32);
  v4.super_class = (Class)RCMPDetailSlider;
  objc_msgSendSuper2(&v4, "setValue:animated:", 0, a2);
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

id sub_100093C94(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_undoCaptureFragment");
}

void sub_10009463C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "captureFailedWithError:", *(_QWORD *)(a1 + 40));

}

id sub_100095458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "recording");
  if ((result & 1) == 0)
  {
    *a5 = 1;
    return objc_msgSend(*(id *)(a1 + 40), "_enterTrimMode");
  }
  return result;
}

void sub_1000955C0(uint64_t a1)
{
  UIAccessibilityPostNotification(UIAccessibilityAnnouncementNotification, *(id *)(a1 + 32));
}

id sub_10009599C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_undoTrim:", 0);
}

id sub_100095BBC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_undoTrim:", 1);
}

id sub_100095F30(uint64_t a1)
{
  void *v2;
  void (**v3)(void);

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "endTrimReloadDataSourceBlock"));

  if (v2)
  {
    v3 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "endTrimReloadDataSourceBlock"));
    v3[2]();

  }
  return _objc_msgSend(*(id *)(a1 + 32), "setEndTrimReloadDataSourceBlock:", 0);
}

id sub_100096514(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setFavorite:forRecordingsWithUUIDs:", *(_BYTE *)(a1 + 40) == 0, *(_QWORD *)(a1 + 32));
}

id sub_100096D08(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setEditing:animated:", 0, 1);
  return _objc_msgSend(*(id *)(a1 + 40), "_eraseRecordingsWithUUIDs:", *(_QWORD *)(a1 + 48));
}

id sub_100096D38(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "deleteRecordingCanceled");
}

id sub_100096E84(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performClearAllRecentlyDeleted");
}

void sub_1000971C4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v2, "setBool:forKey:", 1, *(_QWORD *)(a1 + 32));

}

id sub_100097468(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "restoreRecordingsWithUUIDs:isRecover:source:force:collectionViewController:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), 0, 1, 0);
}

id sub_1000975DC(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_deleteRecordingsWithUUIDs:isRecover:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

id sub_10009778C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setEditing:animated:", 0, 1);
  return objc_msgSend(*(id *)(a1 + 40), "_restoreRecordingsWithUUIDs:isRecover:", *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
}

uint64_t sub_100097B18(_QWORD *a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1[4] + 24), "deleteUserFolder:", a1[5]);
  result = a1[6];
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

uint64_t sub_100097B5C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void sub_100097FF8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100098014(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  double v5;
  double v6;
  double v7;
  id v8;

  v8 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "audioPlayer"));
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "timeIntervalSinceNow");
    v6 = *(double *)(a1 + 48) - v5 * *(double *)(a1 + 56);
    objc_msgSend(v4, "playerTime");
    if (v7 - v6 >= *(double *)(a1 + 64))
    {
      objc_msgSend(v8, "invalidate");
      objc_msgSend(WeakRetained, "_updateNowPlayingInfo");
    }
  }
  else
  {
    objc_msgSend(v8, "invalidate");
  }

}

void sub_100098444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11, id *a12, id *a13, id *a14)
{
  id *v14;
  id *v15;
  id *v16;
  uint64_t v17;

  objc_destroyWeak(v15);
  objc_destroyWeak(v14);
  objc_destroyWeak(v16);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak(a12);
  objc_destroyWeak(a13);
  objc_destroyWeak(a14);
  objc_destroyWeak((id *)(v17 - 112));
  _Unwind_Resume(a1);
}

void sub_100098514()
{
  JUMPOUT(0x1000984ECLL);
}

uint64_t sub_10009851C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  uint64_t v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "audioPlayer"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "recordingID"));

  if (v3)
  {
    objc_msgSend(WeakRetained, "pauseForUUID:", v3);
    v4 = 0;
  }
  else
  {
    v4 = 100;
  }

  return v4;
}

uint64_t sub_10009858C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "audioPlayer"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "recordingID"));
  v4 = (void *)v3;
  v5 = 100;
  if (v2 && v3)
  {
    if ((objc_msgSend(v2, "playing") & 1) != 0)
    {
      v5 = 100;
    }
    else
    {
      objc_msgSend(v2, "playerTime");
      objc_msgSend(WeakRetained, "playbackForUUID:atPosition:", v4);
      v5 = 0;
    }
  }

  return v5;
}

uint64_t sub_100098618(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  uint64_t v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "audioPlayer"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "recordingID"));

  if (v3)
  {
    objc_msgSend(WeakRetained, "toggleForUUID:", v3);
    v4 = 0;
  }
  else
  {
    v4 = 100;
  }

  return v4;
}

uint64_t sub_100098688(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  double v7;
  uint64_t v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "audioPlayer"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordingID"));

  if (v6)
  {
    objc_msgSend(v3, "interval");
    objc_msgSend(WeakRetained, "_jumpByIncrement:forUUID:", v6, -v7);
    v8 = 0;
  }
  else
  {
    v8 = 100;
  }

  return v8;
}

uint64_t sub_100098714(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  uint64_t v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "audioPlayer"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordingID"));

  if (v6)
  {
    objc_msgSend(v3, "interval");
    objc_msgSend(WeakRetained, "_jumpByIncrement:forUUID:", v6);
    v7 = 0;
  }
  else
  {
    v7 = 100;
  }

  return v7;
}

uint64_t sub_10009879C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  uint64_t v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "audioPlayer"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordingID"));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "firstObject"));
    objc_msgSend(v5, "doubleValue");
    objc_msgSend(WeakRetained, "_jumpByIncrement:forUUID:", v4, -v6);

    v7 = 0;
  }
  else
  {
    v7 = 100;
  }

  return v7;
}

uint64_t sub_10009882C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "audioPlayer"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordingID"));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "firstObject"));
    objc_msgSend(v5, "doubleValue");
    objc_msgSend(WeakRetained, "_jumpByIncrement:forUUID:", v4);

    v6 = 0;
  }
  else
  {
    v6 = 100;
  }

  return v6;
}

uint64_t sub_1000988B8(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  uint64_t v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "audioPlayer"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "recordingID"));

  if (v6)
  {
    objc_msgSend(v3, "positionTime");
    objc_msgSend(WeakRetained, "_jumpToTargetTime:");
    v7 = 0;
  }
  else
  {
    v7 = 100;
  }

  return v7;
}

void sub_100098A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100098A54(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  unsigned int v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (objc_msgSend(WeakRetained, "isRecording"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
    v3 = objc_msgSend(v2, "remoteToggleShouldPauseRecording");

    if (v3)
      objc_msgSend(WeakRetained, "pauseCapturing");
    else
      objc_msgSend(WeakRetained, "stopCapturing");
  }

  return 0;
}

id sub_100098C40(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_reconcileAudioStateWithApplicationState");
}

id sub_100099390(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_redoCaptureFragmentWithCompositionControllerRedoInfo:", *(_QWORD *)(a1 + 40));
}

id sub_1000994DC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_redoTrim:", *(_QWORD *)(a1 + 40));
}

id sub_100099628(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_undoTrim:", *(_QWORD *)(a1 + 40));
}

id sub_100099764(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_undoCaptureFragment");
}

void sub_100099F94(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(*(id *)(a1 + 32), "currentDuration");
  objc_msgSend(v2, "recordingDurationUpdated:");

}

void sub_10009A034(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(*(id *)(a1 + 32), "currentDuration");
  objc_msgSend(v2, "recordingDurationUpdated:");

}

void sub_10009A0D4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(*(id *)(a1 + 32), "currentDuration");
  objc_msgSend(v2, "recordingDurationUpdated:");

}

id sub_10009AD24(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_checkAudioPlayer:", *(_QWORD *)(a1 + 40));
}

void sub_10009AEFC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_10009AF24(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  _BYTE *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = objc_msgSend(*(id *)(a1 + 32), "recording");
  v3 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    objc_msgSend(WeakRetained, "_recordingStarted:", v3);
  }
  else
  {
    objc_msgSend(WeakRetained, "_recordingStopped:", v3);
    WeakRetained[48] = 0;
  }
  objc_msgSend(WeakRetained, "_reconcileAudioStateWithApplicationState");

}

id sub_10009AF8C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_recordingFailed:error:", *(_QWORD *)(a1 + 40), a2);
}

void sub_10009B3F4(uint64_t a1, void *a2, int a3, float a4)
{
  id WeakRetained;
  void *v8;
  double v9;
  uint64_t v10;
  id v11;

  v11 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));

  if (v8)
  {
    if (a3)
      v10 = 2;
    else
      v10 = 1;
    *(float *)&v9 = a4;
    objc_msgSend(v8, "didUpdateToStatus:progress:forRecordingWithUUID:", v10, v11, v9);
  }

}

void sub_10009B78C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

id sub_10009D6E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateViewsForLayoutMode:platterState:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_10009D6F8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "systemApertureElementContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "transitionContext"));
  v4 = objc_msgSend(v3, "fromLayoutMode");

  if (v4 != *(id *)(a1 + 40))
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v5, "activeLayoutModeDidChangeForPlatterViewController:previousActiveLayoutMode:", *(_QWORD *)(a1 + 32), v4);

  }
}

void sub_10009D970(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  _QWORD v5[5];

  v2 = objc_msgSend(*(id *)(a1 + 32), "activeLayoutMode");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "systemApertureElementContext"));
  v4 = v3;
  if (v2 == (id)3)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10009DA14;
    v5[3] = &unk_1001AB588;
    v5[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v3, "setElementNeedsUpdateWithCoordinatedAnimations:", v5);

  }
  else
  {
    objc_msgSend(v3, "requestTransitionToPreferredLayoutMode");

  }
}

id sub_10009DA14(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10009DA74;
  v2[3] = &unk_1001AB588;
  v2[4] = *(_QWORD *)(a1 + 32);
  return +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v2);
}

void sub_10009DA74(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "_updateViewsForLayoutMode:platterState:", objc_msgSend(*(id *)(a1 + 32), "platterLayoutModeForSystemApertureLayoutMode:", objc_msgSend(*(id *)(a1 + 32), "activeLayoutMode")), objc_msgSend(*(id *)(a1 + 32), "platterState"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v2, "setNeedsLayout");

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v3, "layoutIfNeeded");

}

void sub_1000A0BE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A0F28(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  unsigned __int8 v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  id v18;
  id v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  id v23;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[RCSSavedRecordingService sharedService](RCSSavedRecordingService, "sharedService"));
  v5 = *(_QWORD *)(a1 + 32);
  v19 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "prepareToExportCompositionAVURL:error:", v5, &v19));
  v7 = v19;
  if (v6)
  {
    v8 = objc_claimAutoreleasedReturnValue(+[RCShareableComposition _createTemporaryDirectory](RCShareableComposition, "_createTemporaryDirectory"));
    v9 = +[RCShareableComposition _copyResourcesForRecording:toDirectory:](RCShareableComposition, "_copyResourcesForRecording:toDirectory:", *(_QWORD *)(a1 + 40), v8);
    (*((void (**)(id, id, _QWORD, _QWORD))v3 + 2))(v3, v9, 0, 0);

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    objc_msgSend(v10, "removeItemAtURL:error:", v8, 0);

    v18 = 0;
    v11 = objc_msgSend(v4, "endAccessSessionWithToken:error:", v6, &v18);
    v12 = v18;
    if ((v11 & 1) == 0)
    {
      v13 = OSLogForCategory(kVMLogCategoryDefault);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v21 = "-[RCShareableComposition registerAudioFileRepresentationWithItemProvider:error:]_block_invoke";
        v22 = 2112;
        v23 = v12;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s -- end token access session error = %@", buf, 0x16u);
      }

    }
    v3 = (id)v8;
  }
  else
  {
    v15 = OSLogForCategory(kVMLogCategoryDefault);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v21 = "-[RCShareableComposition registerAudioFileRepresentationWithItemProvider:error:]_block_invoke";
      v22 = 2112;
      v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%s -- error preparing to export composition = %@", buf, 0x16u);
    }

    (*((void (**)(id, _QWORD, _QWORD, id))v3 + 2))(v3, 0, 0, v7);
  }

  return 0;
}

void sub_1000A1700(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "composedAVURL"));
  v2 = (void *)qword_1001ED990;
  qword_1001ED990 = v1;

}

void sub_1000A1800(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "recordingWithUniqueID:", *(_QWORD *)(a1 + 40)));
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1000A19B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A19CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000A19DC(uint64_t a1)
{

}

void sub_1000A19E4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  if (a2)
  {
    v3 = objc_msgSend(a2, "copyResourcesForSharingIntoDirectory:", *(_QWORD *)(a1 + 32));
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
}

void sub_1000A1B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A1B50(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (a2)
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "subjectForActivityType:", *(_QWORD *)(a1 + 32)));
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
}

id sub_1000A234C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setIsPresented:", *a1);
}

id sub_1000A2360(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setBounds:", *a1, a1[1], a1[2], a1[3]);
}

id sub_1000A2378()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCSiriTipContainerView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t variable initialization expression of AudioPlayer.playing()
{
  return 0;
}

uint64_t variable initialization expression of AudioPlayer.delegate()
{
  return 0;
}

uint64_t variable initialization expression of AudioPlayer.audioReadingQueue()
{
  return sub_1000A243C(0xD000000000000020, 0x80000001001820A0);
}

uint64_t variable initialization expression of AudioPlayer.seekSyncDispatchQueue()
{
  return sub_1000A243C(0xD000000000000024, 0x80000001001820D0);
}

uint64_t sub_1000A243C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  v21 = a1;
  v22 = a2;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005310(0, (unint64_t *)&qword_1001E9088, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.userInitiated(_:), v9);
  DispatchQoS.init(qosClass:relativePriority:)(v12, -1);
  v23 = &_swiftEmptyArrayStorage;
  v16 = sub_10001B7CC(&qword_1001E9090, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v17 = sub_100014E10(&qword_1001E9098);
  v18 = sub_10000EDB0(&qword_1001E90A0, &qword_1001E9098, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v6, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v21, v22, v15, v8, v5, 0);
}

uint64_t variable initialization expression of VMPlayer.delegate()
{
  return 0;
}

float variable initialization expression of AudioPlayer.rate()
{
  return 1.0;
}

void type metadata accessor for UIBackgroundTaskIdentifier(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E90E8, (uint64_t)&unk_1001AD7F0);
}

void type metadata accessor for UIInterfaceOrientation(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E90F0, (uint64_t)&unk_1001AD818);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E90F8, (uint64_t)&unk_1001AD890);
}

void type metadata accessor for RCUserActivityType(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E9100, (uint64_t)&unk_1001AD8B8);
}

uint64_t sub_1000A26B0(uint64_t a1, uint64_t a2)
{
  return sub_1000A2954(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000A26C8(uint64_t a1, uint64_t a2)
{
  return sub_1000A2954(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

_QWORD *sub_1000A26DC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1000A26EC(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_DWORD *sub_1000A26F8@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_1000A2708(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

BOOL sub_1000A2714(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000A272C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000A2754(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_1000A27C8(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_1000A2844@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

NSNumber sub_1000A2884()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t sub_1000A288C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static CGFloat._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_1000A28DC(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return v3 & 1;
}

void sub_1000A2930(double *a1@<X8>)
{
  *a1 = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000A2954(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_1000A2990(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000A29D0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

NSNumber sub_1000A2A40()
{
  return Int._bridgeToObjectiveC()();
}

uint64_t sub_1000A2A48(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static Int._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v6;
  v5 = v7;
  if (v7)
    v4 = 0;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_1000A2A98(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static Int._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v7;
  v5 = v8;
  if (v8)
    v4 = 0;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return v3 & 1;
}

uint64_t sub_1000A2AEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Int._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

uint64_t sub_1000A2B14(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000A2B9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001B7CC((unint64_t *)&qword_1001E92F8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001879A4);
  v3 = sub_10001B7CC(&qword_1001E9300, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100187444);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000A2C20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001B7CC(&qword_1001E92E8, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_100187960);
  v3 = sub_10001B7CC(&qword_1001E92F0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_100187590);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000A2CA4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A2CE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001B7CC(&qword_1001E92D8, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_100187704);
  v3 = sub_10001B7CC(&qword_1001E92E0, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1001876A4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

double sub_1000A2D6C@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t sub_1000A2D78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = sub_10001B7CC(&qword_1001E92C0, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_10018785C);
  v3 = sub_10001B7CC(&qword_1001E92C8, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1001877FC);
  v4 = sub_1000A3560();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, v4);
}

uint64_t sub_1000A2E18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001B7CC(&qword_1001E9120, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_100187148);
  v3 = sub_10001B7CC(&qword_1001E9128, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_1001870E8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for Int);
}

uint64_t sub_1000A2EAC()
{
  return sub_10001B7CC(&qword_1001E9108, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_1001870AC);
}

uint64_t sub_1000A2ED8()
{
  return sub_10001B7CC(&qword_1001E9110, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_100187080);
}

uint64_t sub_1000A2F04()
{
  return sub_10001B7CC(&qword_1001E9118, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_10018711C);
}

uint64_t sub_1000A2F30()
{
  double *v0;

  return Double.hashValue.getter(*v0);
}

void sub_1000A2F38()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_1000A2F68(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:_:)(a1, v2);
}

uint64_t sub_1000A2F78()
{
  _QWORD *v0;

  return Int.hashValue.getter(*v0);
}

void sub_1000A2F80()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t sub_1000A2FA8(uint64_t a1)
{
  _QWORD *v1;

  return static Hasher._hash(seed:_:)(a1, *v1);
}

BOOL sub_1000A2FB0(double *a1, double *a2)
{
  return *a1 == *a2;
}

void sub_1000A2FC4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for SiriTipViewStyle(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit(&v1[OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_delegate], 0);
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    v5 = (void *)sub_1000FA734((uint64_t)&_swiftEmptyArrayStorage);
  }
  else
  {
    v5 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)&v1[OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_cancellables] = v5;
  v6 = OBJC_IVAR____TtC10VoiceMemos22RCSiriTipContainerView_siriTipView;
  static SiriTipViewStyle.automatic.getter();
  v7 = objc_allocWithZone((Class)type metadata accessor for SiriTipUIView(0));
  v8 = SiriTipUIView.init(style:)(v4);
  SiriTipUIView.loadOnAppear.setter(1);
  v9 = sub_100014240();
  v11 = v9;
  v10 = sub_10001C5B8();
  SiriTipUIView.setIntent<A>(intent:)(&v11, &type metadata for CreateRecording, v10);
  swift_release(v9);
  SiriTipUIView.allowsDismissal.setter(1);
  *(_QWORD *)&v1[v6] = v8;

  v11 = 0;
  v12 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(v12);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100182210, "VoiceMemos/SwiftHelpers.swift", 29, 2, 12, 0, v11);
  __break(1u);
}

uint64_t sub_1000A314C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A3170(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

void type metadata accessor for ComparisonResult(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E91F0, (uint64_t)&unk_1001AD900);
}

__n128 sub_1000A31A8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1000A31BC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000A31DC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CMTimeRange(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E91F8, (uint64_t)&unk_1001AD978);
}

void type metadata accessor for VMAudioMode(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E9200, (uint64_t)&unk_1001AD9A0);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E9208, (uint64_t)&unk_1001AD9C0);
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E9210, (uint64_t)&unk_1001AD9E8);
}

void type metadata accessor for Weight(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E9220, (uint64_t)&unk_1001ADA98);
}

void type metadata accessor for TraitKey(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E9228, (uint64_t)&unk_1001ADAC0);
}

void type metadata accessor for AttributeName(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E9230, (uint64_t)&unk_1001ADAE8);
}

void type metadata accessor for RCFolderType(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E9238, (uint64_t)&unk_1001ADB10);
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E9240, (uint64_t)&unk_1001ADB88);
}

uint64_t getEnumTagSinglePayload for TimedTextRange(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TimedTextRange(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E9248, (uint64_t)&unk_1001ADC08);
}

void type metadata accessor for CMSampleBuffer(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E9250, (uint64_t)&unk_1001ADC38);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E9258, (uint64_t)&unk_1001ADC68);
}

uint64_t sub_1000A3350()
{
  return sub_10001B7CC(&qword_1001E9260, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100187408);
}

uint64_t sub_1000A337C()
{
  return sub_10001B7CC(&qword_1001E9268, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001873DC);
}

uint64_t sub_1000A33A8()
{
  return sub_10001B7CC(&qword_1001E9270, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_100187554);
}

uint64_t sub_1000A33D4()
{
  return sub_10001B7CC(&qword_1001E9278, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_100187528);
}

uint64_t sub_1000A3400()
{
  return sub_10001B7CC(&qword_1001E9280, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_100187668);
}

uint64_t sub_1000A342C()
{
  return sub_10001B7CC(&qword_1001E9288, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_10018763C);
}

uint64_t sub_1000A3458()
{
  return sub_10001B7CC(&qword_1001E9290, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1001876D8);
}

uint64_t sub_1000A3484()
{
  return sub_10001B7CC(&qword_1001E9298, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1001877C0);
}

uint64_t sub_1000A34B0()
{
  return sub_10001B7CC(&qword_1001E92A0, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_100187794);
}

uint64_t sub_1000A34DC()
{
  return sub_10001B7CC(&qword_1001E92A8, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_100187830);
}

uint64_t sub_1000A3508()
{
  return sub_10001B7CC(&qword_1001E92B0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1001875C4);
}

uint64_t sub_1000A3534()
{
  return sub_10001B7CC(&qword_1001E92B8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100187478);
}

unint64_t sub_1000A3560()
{
  unint64_t result;

  result = qword_1001E92D0;
  if (!qword_1001E92D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_1001E92D0);
  }
  return result;
}

uint64_t sub_1000A35A4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000A35C4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E9308, (uint64_t)&unk_1001ADCE8);
}

__n128 sub_1000A3600(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_1000A3614(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000A3634(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for CMTime(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E9310, (uint64_t)&unk_1001ADD68);
}

void type metadata accessor for CMTimeFlags(uint64_t a1)
{
  sub_1000A3688(a1, &qword_1001E9318, (uint64_t)&unk_1001ADD98);
}

void sub_1000A3688(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

unint64_t sub_1000A36EC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[3];

  v4 = a4;
  v5 = a3;
  v8 = String.count.getter(a3, a4);
  v52 = a2;
  v9 = String.count.getter(a1, a2);
  if (v9 >= v8)
    v10 = v8;
  else
    v10 = v9;
  if (v10 < 1)
  {
    v11 = 15;
LABEL_18:
    v37 = HIBYTE(v52) & 0xF;
    if ((v52 & 0x2000000000000000) == 0)
      v37 = a1 & 0xFFFFFFFFFFFFLL;
    if (v11 >> 14 < 4 * v37)
    {
      v56[0] = a1;
      v56[1] = v52;
      v39 = sub_1000A3A18();
      v38 = String.Index.utf16Offset<A>(in:)(v56, v11, &type metadata for String, v39);
    }
    else
    {
      v38 = 0;
    }
    v40 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0)
      v40 = v5 & 0xFFFFFFFFFFFFLL;
    if (v11 >> 14 < 4 * v40)
    {
      v41 = 7;
      if (((v4 >> 60) & ((v5 & 0x800000000000000) == 0)) != 0)
        v41 = 11;
      v42 = String.subscript.getter(v11, v41 | (v40 << 16), v5, v4);
      v44 = v43;
      static String._fromSubstring(_:)(v42);
      swift_bridgeObjectRelease(v44);
    }
    return v38;
  }
  v50 = a1;
  v51 = 15;
  v11 = 15;
  v46 = v5;
  v47 = v4;
  while (1)
  {
    v13 = (unint64_t)v10 >> 1;
    result = String.index(_:offsetBy:)(v11, (unint64_t)v10 >> 1, v5, v4);
    if (result >> 14 < v11 >> 14)
      break;
    v15 = result;
    v49 = v10;
    swift_bridgeObjectRetain(v4);
    v48 = v15;
    v16 = String.index(after:)(v15, v5, v4);
    v17 = String.subscript.getter(v11, v16, v5, v4);
    v19 = v18;
    v21 = v20;
    v54 = v22;
    swift_bridgeObjectRelease(v4);
    v55 = v13;
    result = String.index(_:offsetBy:)(v51, v13, a1, v52);
    if (result >> 14 < v51 >> 14)
      goto LABEL_31;
    v23 = result;
    v53 = v11;
    swift_bridgeObjectRetain(v52);
    v24 = String.index(after:)(v23, a1, v52);
    v25 = String.subscript.getter(v51, v24, a1, v52);
    v27 = v26;
    v29 = v28;
    v31 = v30;
    swift_bridgeObjectRelease(v52);
    v32 = v17 >> 16;
    v33 = v19 >> 16;
    v34 = v25 >> 16;
    v35 = v27 >> 16;
    if (v21 == v29 && v54 == v31 && v32 == v34 && v33 == v35)
    {
      swift_bridgeObjectRelease_n(v54, 2);
      v5 = v46;
      v4 = v47;
      v12 = v55;
    }
    else
    {
      LOBYTE(v45) = 0;
      v36 = _stringCompareInternal(_:_:_:_:expecting:)(v21, v54, v32, v33, v29, v31, v34, v35, v45);
      swift_bridgeObjectRelease(v54);
      swift_bridgeObjectRelease(v31);
      v5 = v46;
      v4 = v47;
      v11 = v53;
      v12 = v55;
      if ((v36 & 1) == 0)
        goto LABEL_8;
    }
    v11 = String.index(after:)(v48, v5, v4);
    v51 = String.index(after:)(v23, v50, v52);
    v12 = v49 + ~v12;
LABEL_8:
    v10 = v12;
    a1 = v50;
    if (v12 <= 0)
      goto LABEL_18;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

unint64_t sub_1000A3A18()
{
  unint64_t result;

  result = qword_1001E93E0;
  if (!qword_1001E93E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1001E93E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for TranscriptTextDiffCalculator()
{
  return &type metadata for TranscriptTextDiffCalculator;
}

BOOL sub_1000A3A6C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000A3A80()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000A3AC4()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000A3AEC(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000A3B2C(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t Strong;
  uint64_t v21;
  _OWORD v23[6];
  char v24;
  _OWORD v25[6];
  char v26;

  v2 = *(_OWORD *)(v1 + 112);
  v23[4] = *(_OWORD *)(v1 + 96);
  v23[5] = v2;
  v24 = *(_BYTE *)(v1 + 128);
  v3 = *(_OWORD *)(v1 + 48);
  v23[0] = *(_OWORD *)(v1 + 32);
  v23[1] = v3;
  v4 = *(_OWORD *)(v1 + 80);
  v23[2] = *(_OWORD *)(v1 + 64);
  v23[3] = v4;
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 80);
  v9 = *(_QWORD *)(v1 + 88);
  v10 = *(_QWORD *)(v1 + 96);
  v11 = *(_QWORD *)(v1 + 104);
  v12 = *(_BYTE *)(v1 + 56);
  v13 = *(_BYTE *)(v1 + 112);
  v14 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 48) = v14;
  v15 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 112) = v15;
  v16 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 80) = v16;
  *(_BYTE *)(v1 + 128) = *(_BYTE *)(a1 + 96);
  sub_1000A54CC((uint64_t)v23);
  swift_bridgeObjectRelease(v5);
  sub_1000A5550(v6, v7, v12);
  sub_1000A55A0(v8, v9, v10, v11, v13);
  v17 = *(_OWORD *)(v1 + 112);
  v25[4] = *(_OWORD *)(v1 + 96);
  v25[5] = v17;
  v26 = *(_BYTE *)(v1 + 128);
  v18 = *(_OWORD *)(v1 + 48);
  v25[0] = *(_OWORD *)(v1 + 32);
  v25[1] = v18;
  v19 = *(_OWORD *)(v1 + 80);
  v25[2] = *(_OWORD *)(v1 + 64);
  v25[3] = v19;
  sub_1000A54CC((uint64_t)v25);
  LOBYTE(v5) = sub_1000FC0C0((uint64_t)v23, (uint64_t)v25);
  sub_1000A55F4((uint64_t)v25);
  if ((v5 & 1) == 0)
  {
    Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
    if (Strong)
    {
      v21 = Strong;
      sub_1000FD9D4();
      swift_unknownObjectRelease(v21);
    }
  }
  return sub_1000A55F4((uint64_t)v23);
}

uint64_t sub_1000A3C64()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  unsigned __int8 v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;

  v1 = *(unsigned __int8 *)(v0 + 129);
  if (v1 == 5)
  {
    v2 = *(_QWORD *)(v0 + 32);
    v3 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 48);
    v17 = *(_QWORD *)(v0 + 64);
    v18 = *(_BYTE *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 88);
    v9 = *(_QWORD *)(v0 + 96);
    v10 = *(_QWORD *)(v0 + 104);
    v11 = *(_BYTE *)(v0 + 113);
    v12 = *(_BYTE *)(v0 + 114);
    v13 = *(_QWORD *)(v0 + 120);
    v14 = *(_BYTE *)(v0 + 128);
    v22 = v2;
    v23 = v3;
    v24 = v4;
    v15 = *(_BYTE *)(v0 + 56);
    v25 = v15;
    v26 = v17;
    v27 = v18;
    v28 = 0;
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 32);
    v3 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 48);
    if (v1 == 4)
    {
      v5 = *(_QWORD *)(v0 + 64);
      v6 = *(_BYTE *)(v0 + 72);
      v7 = *(_QWORD *)(v0 + 80);
      v8 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 96);
      v10 = *(_QWORD *)(v0 + 104);
      v11 = *(_BYTE *)(v0 + 113);
      v12 = *(_BYTE *)(v0 + 114);
      v13 = *(_QWORD *)(v0 + 120);
      v14 = *(_BYTE *)(v0 + 128);
      v22 = *(_QWORD *)(v0 + 32);
      v23 = v3;
      v24 = v4;
      v15 = *(_BYTE *)(v0 + 56);
      v25 = v15;
      v26 = v5;
      v27 = v6;
      v16 = 1;
    }
    else
    {
      v19 = *(_QWORD *)(v0 + 64);
      v20 = *(_BYTE *)(v0 + 72);
      v7 = *(_QWORD *)(v0 + 80);
      v8 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 96);
      v10 = *(_QWORD *)(v0 + 104);
      v11 = *(_BYTE *)(v0 + 113);
      v12 = *(_BYTE *)(v0 + 114);
      v13 = *(_QWORD *)(v0 + 120);
      v14 = *(_BYTE *)(v0 + 128);
      v22 = *(_QWORD *)(v0 + 32);
      v23 = v3;
      v24 = v4;
      v15 = *(_BYTE *)(v0 + 56);
      v25 = v15;
      v26 = v19;
      v27 = v20;
      v16 = 2;
    }
    v28 = v16;
  }
  v29 = v7;
  v30 = v8;
  v31 = v9;
  v32 = v10;
  v33 = *(_BYTE *)(v0 + 112);
  v34 = v11;
  v35 = v12;
  v36 = v13;
  v37 = v14;
  swift_bridgeObjectRetain(v2);
  sub_1000A5448(v3, v4, v15);
  sub_1000A5488(v7, v8, v9, v10, v33);
  return sub_1000A3B2C((uint64_t)&v22);
}

uint64_t sub_1000A3DE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;

  sub_1000A3170(v0 + 16);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v7 = *(_BYTE *)(v0 + 56);
  v8 = *(_BYTE *)(v0 + 112);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  sub_1000A5550(v1, v2, v7);
  sub_1000A55A0(v3, v4, v5, v6, v8);
  return swift_deallocClassInstance(v0, 130, 7);
}

uint64_t type metadata accessor for TranscriptViewConfigurationProvider()
{
  return objc_opt_self(_TtC10VoiceMemos35TranscriptViewConfigurationProvider);
}

uint64_t getEnumTagSinglePayload for TranscriptViewConfigurationStyle(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
  {
    v6 = *a1;
    if (v6 >= 4)
      v7 = v6 - 3;
    else
      v7 = 0;
    if (v7 >= 3)
      return v7 - 2;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 5;
    if (a2 + 5 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1000A3EE4 + 4 * asc_100187A30[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for TranscriptViewConfigurationStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 5;
  if (a3 + 5 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFB)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000A3F90 + 4 * byte_100187A3A[v5]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000A3FC4 + 4 * byte_100187A35[v5]))();
}

uint64_t sub_1000A3FC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A3FCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A3FD4);
  return result;
}

uint64_t sub_1000A3FE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A3FE8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000A3FEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A3FF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A4000(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 4)
    return v1 - 3;
  else
    return 0;
}

_BYTE *sub_1000A4014(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 3;
  return result;
}

ValueMetadata *type metadata accessor for TranscriptViewConfigurationStyle()
{
  return &type metadata for TranscriptViewConfigurationStyle;
}

uint64_t sub_1000A4034(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  char v45;
  _QWORD v46[9];
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100014E10(&qword_1001E9520);
  v45 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v42 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v44 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v43 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v20 = v19 | (v14 << 6);
      }
      else
      {
        v21 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v21 >= v43)
          goto LABEL_37;
        v22 = v44[v21];
        ++v14;
        if (!v22)
        {
          v14 = v21 + 1;
          if (v21 + 1 >= v43)
            goto LABEL_37;
          v22 = v44[v14];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v43)
            {
LABEL_37:
              swift_release(v5);
              v3 = v42;
              if ((v45 & 1) != 0)
              {
                v41 = 1 << *(_BYTE *)(v5 + 32);
                if (v41 >= 64)
                  bzero(v44, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v44 = -1 << v41;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v44[v23];
            if (!v22)
            {
              while (1)
              {
                v14 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_44;
                if (v14 >= v43)
                  goto LABEL_37;
                v22 = v44[v14];
                ++v23;
                if (v22)
                  goto LABEL_24;
              }
            }
            v14 = v23;
          }
        }
LABEL_24:
        v11 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v14 << 6);
      }
      v24 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v25 = *(_QWORD *)(v5 + 56) + 40 * v20;
      if ((v45 & 1) != 0)
      {
        v26 = *(_OWORD *)v25;
        v27 = *(_OWORD *)(v25 + 16);
        v49 = *(_QWORD *)(v25 + 32);
        v47 = v26;
        v48 = v27;
      }
      else
      {
        sub_1000A53CC(v25, (uint64_t)&v47);
        v28 = v24;
      }
      v29 = *(_QWORD *)(v8 + 40);
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v32 = v31;
      Hasher.init(_seed:)(v46, v29);
      String.hash(into:)(v46, v30, v32);
      v33 = Hasher._finalize()();
      result = swift_bridgeObjectRelease(v32);
      v34 = -1 << *(_BYTE *)(v8 + 32);
      v35 = v33 & ~v34;
      v36 = v35 >> 6;
      if (((-1 << v35) & ~*(_QWORD *)(v12 + 8 * (v35 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v12 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v37 = 0;
        v38 = (unint64_t)(63 - v34) >> 6;
        do
        {
          if (++v36 == v38 && (v37 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v39 = v36 == v38;
          if (v36 == v38)
            v36 = 0;
          v37 |= v39;
          v40 = *(_QWORD *)(v12 + 8 * v36);
        }
        while (v40 == -1);
        v15 = __clz(__rbit64(~v40)) + (v36 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15) = v24;
      v16 = *(_QWORD *)(v8 + 56) + 40 * v15;
      v17 = v47;
      v18 = v48;
      *(_QWORD *)(v16 + 32) = v49;
      *(_OWORD *)v16 = v17;
      *(_OWORD *)(v16 + 16) = v18;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1000A436C(uint64_t a1, uint64_t a2)
{
  return sub_1000A4384(a1, a2, &qword_1001E9560);
}

Swift::Int sub_1000A4378(uint64_t a1, uint64_t a2)
{
  return sub_1000A4384(a1, a2, &qword_1001E9558);
}

Swift::Int sub_1000A4384(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100014E10(a3);
  v38 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v36)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_bridgeObjectRetain(v34);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v24 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

id sub_1000A4694(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  id result;
  unint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_100107B54((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1000A47F0();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      return (id)sub_1000A5390(a1, v15[7] + 40 * v9);
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    *(_QWORD *)(v15[6] + 8 * v9) = a2;
    v19 = v15[7] + 40 * v9;
    v20 = *(_OWORD *)a1;
    v21 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(v19 + 32) = *(_QWORD *)(a1 + 32);
    *(_OWORD *)v19 = v20;
    *(_OWORD *)(v19 + 16) = v21;
    v22 = v15[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v15[2] = v24;
      return a2;
    }
    goto LABEL_14;
  }
  sub_1000A4034(v12, a3 & 1);
  v17 = sub_100107B54((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      return (id)sub_1000A5390(a1, v15[7] + 40 * v9);
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for Key(0);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id sub_1000A47F0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_100014E10(&qword_1001E9520);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 40 * v15;
    sub_1000A53CC(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v25);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v19 = *(_QWORD *)(v4 + 56) + v18;
    v20 = v26;
    v21 = v25[1];
    *(_OWORD *)v19 = v25[0];
    *(_OWORD *)(v19 + 16) = v21;
    *(_QWORD *)(v19 + 32) = v20;
    result = v17;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000A49C4()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v8;
  _QWORD v9[4];

  v0 = (void *)objc_opt_self(NSParagraphStyle);
  v1 = objc_msgSend(v0, "defaultParagraphStyle");
  v2 = objc_msgSend(v1, "mutableCopy");

  _bridgeAnyObjectToAny(_:)(v9, v2);
  swift_unknownObjectRelease(v2);
  v3 = sub_100005310(0, &qword_1001E9550, NSMutableParagraphStyle_ptr);
  if ((swift_dynamicCast(&v8, v9, (char *)&type metadata for Any + 8, v3, 6) & 1) != 0)
  {
    v4 = v8;
    v5 = objc_msgSend((id)objc_opt_self(RCRecorderStyleProvider), "sharedStyleProvider");
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, "transcriptViewParagraphSpacing");
      objc_msgSend(v4, "setParagraphSpacing:");

      return v4;
    }

  }
  return objc_msgSend(v0, "defaultParagraphStyle");
}

void sub_1000A4AF0()
{
  uint64_t v0;
  uint64_t inited;
  void *v2;
  NSString *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSString *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _BYTE v13[128];

  v0 = sub_100014E10(&qword_1001E9528);
  inited = swift_initStackObject(v0, v13);
  *(_OWORD *)(inited + 16) = xmmword_100187B90;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v2 = (void *)objc_opt_self(RCRecorderStyleProvider);
  v3 = NSFontAttributeName;
  v4 = objc_msgSend(v2, "sharedStyleProvider");
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "transcriptViewFont");

    if (v6)
    {
      v12 = v6;
      v7 = sub_100005310(0, (unint64_t *)&qword_1001E9530, UIFont_ptr);
      v8 = sub_1000A5408(&qword_1001E9538, (unint64_t *)&qword_1001E9530, UIFont_ptr);
      AnyHashable.init<A>(_:)(&v12, v7, v8);
      *(_QWORD *)(inited + 80) = NSParagraphStyleAttributeName;
      v9 = NSParagraphStyleAttributeName;
      v12 = sub_1000A49C4();
      v10 = sub_100005310(0, &qword_1001E9540, NSParagraphStyle_ptr);
      v11 = sub_1000A5408(&qword_1001E9548, &qword_1001E9540, NSParagraphStyle_ptr);
      AnyHashable.init<A>(_:)(&v12, v10, v11);
      sub_100108C00(inited);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void *sub_1000A4C78(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSString *v6;
  id v7;
  char isUniquelyReferenced_nonNull_native;
  void *v9;
  uint64_t v11;
  void *v12;

  sub_1000A4AF0();
  v3 = v2;
  v12 = a1;
  v4 = sub_100005310(0, &qword_1001E9510, UIColor_ptr);
  v5 = sub_1000A5408(&qword_1001E9518, &qword_1001E9510, UIColor_ptr);
  v6 = NSForegroundColorAttributeName;
  v7 = a1;
  AnyHashable.init<A>(_:)(&v12, v4, v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v12 = v3;
  sub_1000A4694((uint64_t)&v11, v6, isUniquelyReferenced_nonNull_native);
  v9 = v12;

  swift_bridgeObjectRelease(0x8000000000000000);
  return v9;
}

void *sub_1000A4D54()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v0 = objc_msgSend((id)objc_opt_self(RCRecorderStyleProvider), "sharedStyleProvider");
  v1 = v0;
  if (!v0)
    goto LABEL_6;
  v2 = objc_msgSend(v0, "transcriptViewRecordingHighlightedLastWordTextColor");
  if (!v2)
    goto LABEL_6;
  v3 = v2;
  v4 = objc_msgSend(v1, "transcriptViewRecordingHighlightedSecondToLastWordTextColor");
  if (!v4)
  {

LABEL_6:
    sub_1000A4AF0();
    v6 = v7;
    sub_1000A4AF0();
    goto LABEL_7;
  }
  v5 = v4;
  sub_1000A4C78(v3);
  v6 = sub_1000A4C78(v5);

LABEL_7:
  return v6;
}

id sub_1000A4E2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  id result;
  void *v8;
  int wapiCapability;
  uint64_t v10;
  const char *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[16];

  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for String.LocalizationValue(0);
  v4 = __chkstk_darwin();
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = (id)MobileGestalt_get_current_device(v4);
  if (result)
  {
    v8 = result;
    wapiCapability = MobileGestalt_get_wapiCapability();

    if (wapiCapability)
    {
      v10 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003CLL, 0x80000001001825D0);
      static Locale.current.getter(v10);
      v11 = "Title for the empty state view when the voice recognition model hasn't been downloaded to the device yet in China.";
      v12 = v6;
      v13 = v3;
      v14 = 114;
    }
    else
    {
      v15 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000037, 0x8000000100182500);
      static Locale.current.getter(v15);
      v11 = "Title for the empty state view when the voice recognition model hasn't been downloaded to the device yet.";
      v12 = v6;
      v13 = v3;
      v14 = 105;
    }
    result = (id)String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, 0, v13, v11, v14, 2);
    *(_QWORD *)a1 = 0xD000000000000015;
    *(_QWORD *)(a1 + 8) = 0x80000001001825B0;
    *(_QWORD *)(a1 + 16) = result;
    *(_QWORD *)(a1 + 24) = v16;
    *(_BYTE *)(a1 + 32) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000A4FAC(char a1)
{
  type metadata accessor for Locale(0);
  __chkstk_darwin();
  type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin();
  __asm { BR              X9 }
}

unint64_t sub_1000A5064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;

  v3 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000027, 0x8000000100182480);
  static Locale.current.getter(v3);
  v4 = String.init(localized:table:bundle:locale:comment:)(v2, 0, 0, 0, v1, "Title for the empty state view when a transcription is in progress.", 67, 2);
  v6 = v5;
  result = sub_100108C00((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)v0 = result;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = -1;
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 1;
  *(_BYTE *)(v0 + 41) = 2;
  *(_QWORD *)(v0 + 48) = v4;
  *(_QWORD *)(v0 + 56) = v6;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_BYTE *)(v0 + 80) = 0;
  *(_BYTE *)(v0 + 81) = 0;
  *(_BYTE *)(v0 + 82) = 0;
  *(_QWORD *)(v0 + 88) = 0;
  *(_BYTE *)(v0 + 96) = 1;
  return result;
}

void sub_1000A51D4()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_msgSend((id)objc_opt_self(RCRecorderStyleProvider), "sharedStyleProvider");
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, "transcriptViewRecordingDefaultTextColor");

    if (v2)
    {
      sub_1000A4C78(v2);

    }
    else
    {
      sub_1000A4AF0();
    }
    sub_1000A4D54();
    JUMPOUT(0x1000A5180);
  }
  __break(1u);
  JUMPOUT(0x1000A5370);
}

uint64_t sub_1000A5390(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 40))(a2, a1);
  return a2;
}

uint64_t sub_1000A53CC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1000A5408(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_100005310(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A5448(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_1000A5460(result, a2, a3 & 1);
  return result;
}

uint64_t sub_1000A5460(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
  {
    swift_bridgeObjectRetain(a1);
    a1 = a2;
  }
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000A5488(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255)
    return sub_1000A54A0(result, a2, a3, a4, a5 & 1);
  return result;
}

uint64_t sub_1000A54A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    swift_bridgeObjectRetain(a4);
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1000A54CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_BYTE *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 80);
  swift_bridgeObjectRetain(*(_QWORD *)a1);
  sub_1000A5448(v2, v3, v8);
  sub_1000A5488(v4, v5, v6, v7, v9);
  return a1;
}

uint64_t sub_1000A5550(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_1000A5568(result, a2, a3 & 1);
  return result;
}

uint64_t sub_1000A5568(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_1000A55A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255)
    return sub_1000A55B8(result, a2, a3, a4, a5 & 1);
  return result;
}

uint64_t sub_1000A55B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a2);
  if ((a5 & 1) != 0)
    return swift_bridgeObjectRelease(a4);
  return result;
}

uint64_t sub_1000A55F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_BYTE *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 80);
  swift_bridgeObjectRelease(*(_QWORD *)a1);
  sub_1000A5550(v2, v3, v8);
  sub_1000A55A0(v4, v5, v6, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for TranscriptViewConfigurationStyle.EmptyStateType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TranscriptViewConfigurationStyle.EmptyStateType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000A5754 + 4 * byte_100187A44[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000A5788 + 4 * byte_100187A3F[v4]))();
}

uint64_t sub_1000A5788(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A5790(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A5798);
  return result;
}

uint64_t sub_1000A57A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A57ACLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000A57B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A57B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000A57C4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TranscriptViewConfigurationStyle.EmptyStateType()
{
  return &type metadata for TranscriptViewConfigurationStyle.EmptyStateType;
}

unint64_t sub_1000A57E0()
{
  unint64_t result;

  result = qword_1001E9568;
  if (!qword_1001E9568)
  {
    result = swift_getWitnessTable(&unk_100187B64, &type metadata for TranscriptViewConfigurationStyle.EmptyStateType);
    atomic_store(result, (unint64_t *)&qword_1001E9568);
  }
  return result;
}

_QWORD *sub_1000A5824(char a1)
{
  uint64_t v1;
  _QWORD *result;
  _QWORD *v4;
  char **v5;

  result = sub_10001B474((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
  if (*(_BYTE *)(*result + 32))
  {
    result = sub_10001B474((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
    if ((*(_BYTE *)(*result + 51) & 1) == 0)
    {
      result = (_QWORD *)swift_unknownObjectWeakLoadStrong(v1 + 64);
      if (result)
      {
        v4 = result;
        v5 = &selRef_collapseTranscriptView;
        if ((a1 & 1) != 0)
          v5 = &selRef_expandTranscriptView;
        objc_msgSend(result, *v5);
        return (_QWORD *)swift_unknownObjectRelease(v4);
      }
    }
  }
  return result;
}

uint64_t sub_1000A58C0()
{
  uint64_t v0;

  sub_10001B498((_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 56));
  sub_1000A3170(v0 + 64);
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for TranscriptViewInteractionHandler()
{
  return objc_opt_self(_TtC10VoiceMemos32TranscriptViewInteractionHandler);
}

unint64_t sub_1000A5914(uint64_t a1, uint64_t a2)
{
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  _QWORD v8[2];

  if ((a2 & 0x100000000) != 0)
    return 0xD00000000000001FLL;
  v8[0] = 0;
  v8[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v3._countAndFlagsBits = 0xD000000000000023;
  v3._object = (void *)0x8000000100182910;
  String.append(_:)(v3);
  Double.write<A>(to:)(v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)&a1);
  v4._object = (void *)0x8000000100182940;
  v4._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  return v8[0];
}

unint64_t sub_1000A5A18()
{
  uint64_t v0;

  return sub_1000A5914(*(_QWORD *)v0, *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32));
}

void sub_1000A5A58()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  double v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  id v7;

  v1 = *(_QWORD *)(v0 + 56);
  if (v1)
  {
    v2 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_renderer);
    swift_retain(v1);
    objc_msgSend(v2, "currentSampleTime");
    if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) != 0)
    {
      if (v3 > -9.22337204e18)
      {
        if (v3 < 9.22337204e18)
        {
          if (*(_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_playbackEndTime) >= ((uint64_t)v3 & ~((uint64_t)v3 >> 63)))
            v4 = (uint64_t)v3 & ~((uint64_t)v3 >> 63);
          else
            v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_playbackEndTime);
          v5 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_silenceRemover);
          if (!v5)
            goto LABEL_11;
          v6 = (unint64_t)objc_msgSend(v5, "samplesRemoved");
          if ((v6 & 0x8000000000000000) == 0)
          {
            if (!__OFADD__(v4, v6))
            {
LABEL_11:
              v7 = v2;
              objc_msgSend(v7, "sampleRate");

              swift_release(v1);
              return;
            }
            goto LABEL_17;
          }
LABEL_16:
          __break(1u);
LABEL_17:
          __break(1u);
          return;
        }
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
}

uint64_t sub_1000A5B6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *Strong;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v1 + 56))
  {
    if (*(_BYTE *)(v1 + 16) == 1)
    {
      sub_1000A73CC();
      *(_BYTE *)(v1 + 16) = 0;
      Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + 24);
      if (Strong)
      {
        v10 = Strong;
        objc_msgSend(Strong, "audioPlayerIsPlayingChanged:", 0);
        swift_unknownObjectRelease(v10);
      }
    }
  }
  v11 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = a1;
  v12 = swift_allocObject(&unk_1001AE308, 24, 7);
  *(_QWORD *)(v12 + 16) = v11;
  swift_retain(a1);
  aBlock[4] = nullsub_8;
  v24 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A5DB0;
  aBlock[3] = &unk_1001AE320;
  v13 = _Block_copy(aBlock);
  v14 = swift_retain(v11);
  static DispatchQoS.unspecified.getter(v14);
  v22 = _swiftEmptyArrayStorage;
  v15 = sub_10001B7CC((unint64_t *)&qword_1001EAEB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_100014E10(&qword_1001E9A78);
  v17 = sub_10000EDF0((unint64_t *)&qword_1001EAEC0, &qword_1001E9A78);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v3, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v13);
  _Block_release(v13);
  swift_release(v11);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v20);
  return swift_release(v24);
}

uint64_t sub_1000A5DB0(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void sub_1000A5DDC(double a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  double v8;
  _QWORD v9[5];
  uint64_t v10;

  v2 = *(_QWORD *)(v1 + 56);
  if (v2)
  {
    v3 = *(double *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_assetReader) + 24) * a1;
    if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) != 0)
    {
      if (v3 > -9.22337204e18)
      {
        if (v3 < 9.22337204e18)
        {
          if (*(_QWORD *)(v2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_playbackEndTime) == (uint64_t)v3)
            return;
          *(_QWORD *)(v2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_playbackEndTime) = (uint64_t)v3;
          *(_QWORD *)(v2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_seekPosition) = -1;
          v4 = *(NSObject **)(v1 + 48);
          v5 = swift_allocObject(&unk_1001AE2B8, 32, 7);
          *(_QWORD *)(v5 + 16) = sub_1000A89DC;
          *(_QWORD *)(v5 + 24) = v2;
          v9[4] = sub_1000A8C80;
          v10 = v5;
          v9[0] = _NSConcreteStackBlock;
          v9[1] = 1107296256;
          v9[2] = sub_1000A5F84;
          v9[3] = &unk_1001AE2D0;
          v6 = _Block_copy(v9);
          v7 = v10;
          swift_retain_n(v2, 2);
          swift_retain(v5);
          swift_release(v7);
          dispatch_sync(v4, v6);
          _Block_release(v6);
          LOBYTE(v4) = swift_isEscapingClosureAtFileLocation(v5, "", 104, 108, 36, 1);
          swift_release(v5);
          if ((v4 & 1) == 0)
          {
            sub_1000A5A58();
            sub_1000A5FA4(0, 0, v8);
            swift_release_n(v2, 2);
            return;
          }
LABEL_12:
          __break(1u);
          return;
        }
LABEL_11:
        __break(1u);
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
}

uint64_t sub_1000A5F84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_1000A5FA4(void (*a1)(_QWORD), uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void **aBlock;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  void *v45;
  uint64_t (*v46)();
  _QWORD *v47;

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD **)(v3 + 56);
  if (v16)
  {
    v40 = v13;
    if (a3 < 0.0)
      a3 = 0.0;
    v17 = *(_QWORD *)((char *)v16 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_assetReader);
    swift_retain(v16);
    v18 = sub_1000AB09C();
    if (v18 >= a3)
      v18 = a3;
    v19 = *(double *)(v17 + 24) * v18;
    if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) != 0)
    {
      if (v19 > -9.22337204e18)
      {
        if (v19 < 9.22337204e18)
        {
          v20 = *(_QWORD *)((char *)v16 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_playbackEndTime);
          v21 = __OFSUB__(v20, 1);
          v22 = v20 - 1;
          if (!v21)
          {
            v38 = v9;
            v39 = v12;
            if (v22 >= (uint64_t)v19)
              v23 = (uint64_t)v19;
            else
              v23 = v22;
            OS_dispatch_queue.sync<A>(execute:)(&aBlock, sub_1000A8A24, v16, &type metadata for Int64);
            if ((void **)v23 != aBlock
              || *(_QWORD *)((char *)v16 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_seekPosition) == -1)
            {
              *(_QWORD *)((char *)v16 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_seekPosition) = v23;
              v37 = *(_QWORD *)(v4 + 40);
              v30 = (_QWORD *)swift_allocObject(&unk_1001AE358, 56, 7);
              v30[2] = v23;
              v30[3] = v16;
              v30[4] = v4;
              v30[5] = a1;
              v30[6] = a2;
              v46 = sub_1000A8A74;
              v47 = v30;
              aBlock = _NSConcreteStackBlock;
              v43 = 1107296256;
              v44 = sub_1000A5DB0;
              v45 = &unk_1001AE370;
              v31 = _Block_copy(&aBlock);
              swift_retain(v16);
              sub_1000A8A84((uint64_t)a1, a2);
              v32 = swift_retain(v4);
              static DispatchQoS.unspecified.getter(v32);
              v41 = &_swiftEmptyArrayStorage;
              v33 = sub_10001B7CC((unint64_t *)&qword_1001EAEB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              v34 = sub_100014E10(&qword_1001E9A78);
              v35 = sub_10000EDF0((unint64_t *)&qword_1001EAEC0, &qword_1001E9A78);
              dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v34, v35, v8, v33);
              OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v31);
              _Block_release(v31);
            }
            else
            {
              if (!a1)
              {
                v36 = v16;
                goto LABEL_19;
              }
              v37 = *(_QWORD *)(v4 + 40);
              v24 = swift_allocObject(&unk_1001AE3A8, 32, 7);
              *(_QWORD *)(v24 + 16) = a1;
              *(_QWORD *)(v24 + 24) = a2;
              v46 = sub_1000A8AB8;
              v47 = (_QWORD *)v24;
              aBlock = _NSConcreteStackBlock;
              v43 = 1107296256;
              v44 = sub_1000A5DB0;
              v45 = &unk_1001AE3C0;
              v25 = _Block_copy(&aBlock);
              v26 = swift_retain_n(a2, 2);
              static DispatchQoS.unspecified.getter(v26);
              v41 = &_swiftEmptyArrayStorage;
              v27 = sub_10001B7CC((unint64_t *)&qword_1001EAEB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              v28 = sub_100014E10(&qword_1001E9A78);
              v29 = sub_10000EDF0((unint64_t *)&qword_1001EAEC0, &qword_1001E9A78);
              dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v28, v29, v8, v27);
              OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v25);
              _Block_release(v25);
              sub_1000A8AC0((uint64_t)a1, a2);
            }
            swift_release(v16);
            (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v8);
            (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v39);
            v36 = v47;
LABEL_19:
            swift_release(v36);
            return;
          }
          goto LABEL_27;
        }
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_26;
  }
  if (a1)
    a1(0);
}

uint64_t sub_1000A63E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004BFC();
  v12 = (void *)static OS_dispatch_queue.main.getter(v11);
  v13 = swift_allocObject(&unk_1001AE3F8, 32, 7);
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a2;
  aBlock[4] = sub_1000A8AD0;
  v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A5DB0;
  aBlock[3] = &unk_1001AE410;
  v14 = _Block_copy(aBlock);
  v15 = v24;
  swift_retain(a2);
  v16 = swift_release(v15);
  static DispatchQoS.unspecified.getter(v16);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v17 = sub_10001B7CC((unint64_t *)&qword_1001EAEB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_100014E10(&qword_1001E9A78);
  v19 = sub_10000EDF0((unint64_t *)&qword_1001EAEC0, &qword_1001E9A78);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v4, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1000A65EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD aBlock[5];
  uint64_t v43;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v39 = *(_QWORD *)(v14 - 8);
  v40 = v14;
  result = __chkstk_darwin(v14);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_seekPosition;
  v19 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_seekPosition);
  v41 = v11;
  if (v19 != a1)
  {
    v25 = 0;
    if (!a4)
      return result;
    goto LABEL_19;
  }
  v38 = a5;
  v20 = *(_QWORD *)(a3 + 56);
  if (!v20)
  {
    v25 = 0;
    a5 = v38;
    if (!a4)
      return result;
LABEL_19:
    sub_100004BFC();
    v26 = swift_retain(a5);
    v27 = (void *)static OS_dispatch_queue.main.getter(v26);
    v28 = swift_allocObject(&unk_1001AE448, 33, 7);
    *(_QWORD *)(v28 + 16) = a4;
    *(_QWORD *)(v28 + 24) = a5;
    *(_BYTE *)(v28 + 32) = v25;
    aBlock[4] = sub_1000A8B18;
    v43 = v28;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000A5DB0;
    aBlock[3] = &unk_1001AE460;
    v29 = _Block_copy(aBlock);
    v30 = v43;
    swift_retain(a5);
    v31 = swift_release(v30);
    static DispatchQoS.unspecified.getter(v31);
    aBlock[0] = &_swiftEmptyArrayStorage;
    v32 = sub_10001B7CC((unint64_t *)&qword_1001EAEB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v33 = a4;
    v34 = sub_100014E10(&qword_1001E9A78);
    v35 = sub_10000EDF0((unint64_t *)&qword_1001EAEC0, &qword_1001E9A78);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v34, v35, v10, v32);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v13, v29);
    _Block_release(v29);

    sub_1000A8AC0(v33, a5);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v10);
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v17, v40);
  }
  v37 = a4;
  v21 = a2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_uuid;
  v22 = v20 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_uuid;
  swift_retain(a2);
  swift_retain(v20);
  LOBYTE(v22) = static UUID.== infix(_:_:)(v21, v22);
  swift_release(a2);
  result = swift_release(v20);
  if ((v22 & 1) != 0)
  {
    if (*(_QWORD *)(a2 + v18) == *(_QWORD *)(a2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_preparedToPlayIndex))
    {
      v23 = *(_QWORD *)(a2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_assetReader);
      v24 = OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_playbackEndTime;
      if ((*(_BYTE *)(v23 + 64) & 1) == 0)
      {
        a4 = v37;
        a5 = v38;
        if (*(_QWORD *)(a2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_playbackEndTime) == *(_QWORD *)(v23 + 56))
          goto LABEL_18;
        goto LABEL_16;
      }
    }
    else
    {
      v24 = OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_playbackEndTime;
    }
    a4 = v37;
    a5 = v38;
LABEL_16:
    result = sub_1000A75AC(a2, a1, *(_QWORD *)(a2 + v24));
    if (*(_BYTE *)(a3 + 16) == 1)
      result = sub_1000A7070();
LABEL_18:
    v25 = 1;
    if (!a4)
      return result;
    goto LABEL_19;
  }
  v25 = 0;
  a4 = v37;
  a5 = v38;
  if (v37)
    goto LABEL_19;
  return result;
}

uint64_t sub_1000A6928(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  id v7;
  void *v8;
  double v9;
  double v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v7 = objc_msgSend(a1, "rc_playbackFormat");
  if (v7)
  {
    v8 = v7;
    objc_msgSend(v7, "sampleRate");
    v10 = v9;
    v11 = objc_msgSend(v8, "channelCount");

    v12 = type metadata accessor for AudioAssetReader();
    v13 = swift_allocObject(v12, 81, 7);
    *(_QWORD *)(v13 + 48) = 0;
    *(_QWORD *)(v13 + 56) = 0;
    *(_BYTE *)(v13 + 64) = 1;
    *(_QWORD *)(v13 + 72) = 0;
    *(_BYTE *)(v13 + 80) = 1;
    *(_QWORD *)(v13 + 16) = a1;
    *(double *)(v13 + 24) = v10;
    *(_QWORD *)(v13 + 32) = v11;
    *(_BYTE *)(v13 + 40) = 0;
    v14 = a1;
    v15 = sub_1000A7C7C((uint64_t)v11, v10);
    if (v3)
    {
      return swift_release(v13);
    }
    else
    {
      v20 = v15;
      v21 = sub_1000A7B24((uint64_t)v11, v10);
      v22 = type metadata accessor for AudioPlayerItem(0);
      swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
      sub_1000A88B4(v20, v13, v21, a2, a3 & 1);
      v24 = v23;

      swift_release(v13);
      return v24;
    }
  }
  else
  {
    v17 = sub_1000A86AC();
    v18 = swift_allocError(&type metadata for AudioPlayer.Error, v17, 0, 0);
    *(_QWORD *)v19 = 0;
    *(_DWORD *)(v19 + 8) = 0;
    *(_BYTE *)(v19 + 12) = 1;
    return swift_willThrow(v18);
  }
}

uint64_t sub_1000A6ADC(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v6 = v5;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(v6 + 40);
  v18 = swift_allocObject(&unk_1001AE1C8, 64, 7);
  *(_QWORD *)(v18 + 16) = v6;
  *(_QWORD *)(v18 + 24) = a1;
  *(_QWORD *)(v18 + 32) = a2;
  *(_BYTE *)(v18 + 40) = a3 & 1;
  *(_QWORD *)(v18 + 48) = a4;
  *(_QWORD *)(v18 + 56) = a5;
  aBlock[4] = sub_1000A8814;
  v31 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A5DB0;
  aBlock[3] = &unk_1001AE1E0;
  v19 = _Block_copy(aBlock);
  swift_retain(v6);
  v20 = a1;
  v21 = swift_retain(a5);
  static DispatchQoS.unspecified.getter(v21);
  v29 = _swiftEmptyArrayStorage;
  v22 = sub_10001B7CC((unint64_t *)&qword_1001EAEB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_100014E10(&qword_1001E9A78);
  v24 = sub_10000EDF0((unint64_t *)&qword_1001EAEC0, &qword_1001E9A78);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v12, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v27);
  return swift_release(v31);
}

uint64_t sub_1000A6CF4(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  _QWORD *v32;

  v10 = a4 & 1;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000A6928(a2, a3, v10);
  v18 = sub_100004BFC();
  v19 = (void *)static OS_dispatch_queue.main.getter(v18);
  v20 = (_QWORD *)swift_allocObject(&unk_1001AE268, 40, 7);
  v20[2] = a5;
  v20[3] = a6;
  v20[4] = v17;
  aBlock[4] = sub_1000A8880;
  v32 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A5DB0;
  aBlock[3] = &unk_1001AE280;
  v21 = _Block_copy(aBlock);
  v22 = v32;
  swift_retain(a6);
  swift_retain(v17);
  v23 = swift_release(v22);
  static DispatchQoS.unspecified.getter(v23);
  aBlock[0] = _swiftEmptyArrayStorage;
  v24 = sub_10001B7CC((unint64_t *)&qword_1001EAEB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_100014E10(&qword_1001E9A78);
  v26 = sub_10000EDF0((unint64_t *)&qword_1001EAEC0, &qword_1001E9A78);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v11, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v21);
  _Block_release(v21);
  swift_release(v17);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v29);
}

uint64_t sub_1000A7070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = __chkstk_darwin(v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v0 + 56);
  if (v10)
  {
    v20 = *(_QWORD *)(v0 + 48);
    v11 = swift_allocObject(&unk_1001AE178, 32, 7);
    *(_QWORD *)(v11 + 16) = v0;
    *(_QWORD *)(v11 + 24) = v10;
    aBlock[4] = sub_1000A87D8;
    v23 = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000A5DB0;
    aBlock[3] = &unk_1001AE190;
    v12 = _Block_copy(aBlock);
    v19 = v2;
    v13 = v12;
    swift_retain_n(v10, 2);
    v14 = swift_retain(v0);
    static DispatchQoS.unspecified.getter(v14);
    v21 = &_swiftEmptyArrayStorage;
    v15 = sub_10001B7CC((unint64_t *)&qword_1001EAEB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v16 = sub_100014E10(&qword_1001E9A78);
    v17 = sub_10000EDF0((unint64_t *)&qword_1001EAEC0, &qword_1001E9A78);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v16, v17, v1, v15);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v4, v13);
    _Block_release(v13);
    swift_release(v10);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    return swift_release(v23);
  }
  return result;
}

id sub_1000A7270(uint64_t a1, uint64_t a2)
{
  void *Strong;
  void *v4;
  unsigned int v5;
  id v6;
  id v7;
  void *v8;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(a1 + 24);
  if (Strong)
  {
    v4 = Strong;
    v16 = 0;
    v5 = objc_msgSend(Strong, "activateAudioSessionForPlaybackAndReturnError:", &v16);
    v6 = v16;
    if (!v5)
    {
      v13 = v16;
      v11 = _convertNSErrorToError(_:)(v6);

      swift_willThrow(v14);
      swift_unknownObjectRelease(v4);
      goto LABEL_8;
    }
    v7 = v16;
    swift_unknownObjectRelease(v4);
  }
  *(_QWORD *)(a2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_preparedToPlayIndex) = -1;
  v8 = *(void **)(a2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_renderer);
  v16 = 0;
  if (objc_msgSend(v8, "startAndReturnError:", &v16))
    return v16;
  v15 = v16;
  v10 = v16;
  v11 = _convertNSErrorToError(_:)(v15);

  swift_willThrow(v12);
LABEL_8:
  sub_1000A7854(v11);
  return (id)swift_errorRelease(v11);
}

uint64_t sub_1000A73CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = __chkstk_darwin(v5);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v0 + 56);
  if (v10)
  {
    v19 = *(_QWORD *)(v0 + 48);
    aBlock[4] = sub_1000A8B40;
    v22 = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000A5DB0;
    aBlock[3] = &unk_1001AE488;
    v11 = _Block_copy(aBlock);
    v18 = v2;
    v12 = v11;
    v13 = swift_retain_n(v10, 2);
    static DispatchQoS.unspecified.getter(v13);
    v20 = &_swiftEmptyArrayStorage;
    v14 = sub_10001B7CC((unint64_t *)&qword_1001EAEB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v15 = sub_100014E10(&qword_1001E9A78);
    v16 = sub_10000EDF0((unint64_t *)&qword_1001EAEC0, &qword_1001E9A78);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v15, v16, v1, v14);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v4, v12);
    _Block_release(v12);
    swift_release(v10);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    return swift_release(v22);
  }
  return result;
}

uint64_t sub_1000A75AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char isEscapingClosureAtFileLocation;
  void **aBlock;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  void *v21;
  uint64_t (*v22)();
  uint64_t v23;

  v7 = *(NSObject **)(v3 + 48);
  v8 = swift_allocObject(&unk_1001AE0B0, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_1000A8C84;
  *(_QWORD *)(v8 + 24) = a1;
  v22 = sub_1000A8744;
  v23 = v8;
  aBlock = _NSConcreteStackBlock;
  v19 = 1107296256;
  v20 = sub_1000A5F84;
  v21 = &unk_1001AE0C8;
  v9 = _Block_copy(&aBlock);
  v10 = v23;
  swift_retain(a1);
  swift_retain(v8);
  swift_release(v10);
  dispatch_sync(v7, v9);
  _Block_release(v9);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation(v8, "", 104, 210, 40, 1);
  result = swift_release(v8);
  if ((v9 & 1) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v12 = *(void **)(a1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_renderer);
  objc_msgSend(v12, "reset");
  objc_msgSend(v12, "setSampleOffset:", (double)a2);
  sub_1000AB0D8(a2, a3, 0);
  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_silenceRemover), "reset");
  objc_msgSend(v12, "prepare");
  v13 = swift_allocObject(&unk_1001AE100, 32, 7);
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a2;
  v14 = swift_allocObject(&unk_1001AE128, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_1000A8788;
  *(_QWORD *)(v14 + 24) = v13;
  v22 = sub_1000A8C80;
  v23 = v14;
  aBlock = _NSConcreteStackBlock;
  v19 = 1107296256;
  v20 = sub_1000A5F84;
  v21 = &unk_1001AE140;
  v15 = _Block_copy(&aBlock);
  v16 = v23;
  swift_retain(a1);
  swift_retain(v14);
  swift_release(v16);
  dispatch_sync(v7, v15);
  _Block_release(v15);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 104, 218, 40, 1);
  swift_release(v13);
  swift_release(a1);
  result = swift_release(v14);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_1000A7854(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = swift_unknownObjectWeakLoadStrong(v2 + 24);
  if (result)
  {
    v13 = result;
    v14 = *(_QWORD *)(v2 + 32);
    sub_100004BFC();
    v24 = v5;
    v15 = static OS_dispatch_queue.main.getter();
    v25 = v8;
    v16 = (void *)v15;
    v17 = (_QWORD *)swift_allocObject(&unk_1001AE4C0, 48, 7);
    v17[2] = v2;
    v17[3] = v13;
    v17[4] = v14;
    v17[5] = a1;
    aBlock[4] = sub_1000A8B8C;
    v27 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000A5DB0;
    aBlock[3] = &unk_1001AE4D8;
    v18 = _Block_copy(aBlock);
    v19 = v27;
    swift_retain(v2);
    swift_unknownObjectRetain(v13);
    swift_errorRetain(a1);
    v20 = swift_release(v19);
    static DispatchQoS.unspecified.getter(v20);
    aBlock[0] = &_swiftEmptyArrayStorage;
    v21 = sub_10001B7CC((unint64_t *)&qword_1001EAEB0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v22 = sub_100014E10(&qword_1001E9A78);
    v23 = sub_10000EDF0((unint64_t *)&qword_1001EAEC0, &qword_1001E9A78);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v22, v23, v4, v21);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v18);
    _Block_release(v18);
    swift_unknownObjectRelease(v13);

    (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v25);
  }
  return result;
}

void sub_1000A7A88(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *Strong;
  void *v8;
  id v9;

  if (*(_QWORD *)(a1 + 56))
  {
    if (*(_BYTE *)(a1 + 16) == 1)
    {
      sub_1000A73CC();
      *(_BYTE *)(a1 + 16) = 0;
      Strong = (void *)swift_unknownObjectWeakLoadStrong(a1 + 24);
      if (Strong)
      {
        v8 = Strong;
        objc_msgSend(Strong, "audioPlayerIsPlayingChanged:", 0);
        swift_unknownObjectRelease(v8);
      }
    }
  }
  v9 = (id)_convertErrorToNSError(_:)(a4);
  objc_msgSend(a2, "audioPlayerError:", v9);

}

id sub_1000A7B24(uint64_t a1, double a2)
{
  uint64_t v2;
  id v5;
  id v6;
  double v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v13;

  v5 = *(id *)(v2 + 64);
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v6, "sampleRate");
    if (v7 == a2 && objc_msgSend(v6, "channelCount") == (_DWORD)a1)
    {
      objc_msgSend(v6, "reset");
      return v5;
    }

  }
  if ((a1 & 0x80000000) != 0)
    __break(1u);
  v13 = 0;
  v5 = objc_msgSend(objc_allocWithZone((Class)VMSilenceRemover), "initWithSampleRate:channelCount:error:", a1, &v13, a2);
  v8 = v13;
  if (v5)
  {
    objc_msgSend(v5, "setInputProvider:", v2);
    objc_msgSend(v5, "setEnabled:", *(unsigned __int8 *)(v2 + 80));
    v9 = *(void **)(v2 + 64);
    *(_QWORD *)(v2 + 64) = v5;
    v10 = v5;

  }
  else
  {
    v11 = v8;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

id sub_1000A7C7C(uint64_t a1, double a2)
{
  uint64_t v2;
  id v3;
  void *v6;
  double v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id aBlock[5];
  uint64_t v21;

  v6 = *(void **)(v2 + 72);
  if (v6)
  {
    v3 = v6;
    objc_msgSend(v3, "sampleRate");
    if (v7 == a2 && objc_msgSend(v3, "channelCount") == (_DWORD)a1)
    {
      objc_msgSend(v3, "reset");
      return v3;
    }

  }
  v8 = objc_msgSend(objc_allocWithZone((Class)AVAudioFormat), "initStandardFormatWithSampleRate:channels:", a1, a2);
  if (v8)
  {
    v9 = v8;
    v3 = objc_msgSend(objc_allocWithZone((Class)VMAudioOutputRenderer), "initWithQueue:", *(_QWORD *)(v2 + 40));
    objc_msgSend(v3, "setDelegate:", v2);
    v10 = swift_allocObject(&unk_1001AE060, 24, 7);
    swift_weakInit(v10 + 16, v2);
    aBlock[4] = sub_1000A8714;
    v21 = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1000A8000;
    aBlock[3] = &unk_1001AE078;
    v11 = _Block_copy(aBlock);
    swift_release(v21);
    aBlock[0] = 0;
    v12 = objc_msgSend(v3, "prepareToRender:inputBlock:error:", v9, v11, aBlock);
    _Block_release(v11);
    v13 = aBlock[0];
    if (v12)
    {

    }
    else
    {
      v17 = v13;
      _convertNSErrorToError(_:)(v13);

      swift_willThrow(v18);
    }
  }
  else
  {
    v14 = sub_1000A86AC();
    v15 = swift_allocError(&type metadata for AudioPlayer.Error, v14, 0, 0);
    *(_QWORD *)v16 = 0;
    *(_DWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 12) = 1;
    swift_willThrow(v15);
  }
  return v3;
}

double *sub_1000A7EB0(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  double *result;
  double *v10;
  uint64_t v11;
  _BYTE v12[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v12, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (!Strong)
    return 0;
  v7 = Strong;
  v8 = *(_QWORD *)(Strong + 56);
  if (!v8)
  {
    swift_release(Strong);
    return 0;
  }
  result = *(double **)(v8 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_silenceRemover);
  if (!result)
  {
    v11 = *(_QWORD *)(v8 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_assetReader);
    swift_retain(v8);
    swift_retain(v11);
    v10 = sub_1000AB240(a1, a2);
    swift_release(v7);
    swift_release(v8);
    swift_release(v11);
    return v10;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    LODWORD(v10) = objc_msgSend(result, "fillNextBuffer:frameCount:", a1, a2);
    swift_release(v7);
    return (double *)(int)v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A8000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = v6(a2, a3);
  swift_release(v5);
  return v7;
}

uint64_t AudioPlayer.deinit()
{
  uint64_t v0;

  sub_1000A3170(v0 + 24);

  swift_release(*(_QWORD *)(v0 + 56));
  return v0;
}

uint64_t AudioPlayer.__deallocating_deinit()
{
  uint64_t v0;

  sub_1000A3170(v0 + 24);

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t AudioPlayer.fillNextBuffer(_:frameCount:)(_DWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)(v2 + 56);
  if (!v3)
    return 0;
  v5 = a2;
  swift_retain(v3);
  result = (uint64_t)sub_1000AB240(a1, v5);
  v7 = result;
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_renderer), "setShouldRenderSilenceOnEmptyQueue:", (_DWORD)result != 0);
    swift_release(v3);
    return v7;
  }
  __break(1u);
  return result;
}

id AudioPlayer.audioEngineOutputNodeAccessQueue()()
{
  uint64_t v0;
  void *Strong;
  void *v2;
  id v3;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 24);
  if (!Strong)
    return 0;
  v2 = Strong;
  v3 = objc_msgSend(Strong, "audioEngineOutputNodeAccessQueue");
  swift_unknownObjectRelease(v2);
  return v3;
}

Swift::Void __swiftcall AudioPlayer.audioRendererQueueEmpty()()
{
  uint64_t v0;
  void *Strong;
  void *v2;

  if (*(_QWORD *)(v0 + 56) && *(_BYTE *)(v0 + 16) == 1)
  {
    sub_1000A73CC();
    *(_BYTE *)(v0 + 16) = 0;
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 24);
    if (Strong)
    {
      v2 = Strong;
      objc_msgSend(Strong, "audioPlayerIsPlayingChanged:", 0);
      swift_unknownObjectRelease(v2);
    }
  }
}

void AudioPlayer.audioRendererError(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v4;
  id v5;

  Strong = swift_unknownObjectWeakLoadStrong(v1 + 24);
  if (Strong)
  {
    v4 = (void *)Strong;
    v5 = (id)_convertErrorToNSError(_:)(a1);
    objc_msgSend(v4, "audioPlayerError:", v5);
    swift_unknownObjectRelease(v4);

  }
}

Swift::Void __swiftcall AudioPlayer.audioRendererWasInterrupted()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  double v3;

  v1 = *(_QWORD *)(v0 + 56);
  if (v1)
  {
    if (*(_BYTE *)(v0 + 16) == 1)
    {
      v2 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_renderer);
      swift_retain(*(_QWORD *)(v0 + 56));
      objc_msgSend(v2, "currentSampleTime");
      sub_1000A5FA4(0, 0, v3 / *(double *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_assetReader) + 24));
      swift_release(v1);
    }
  }
}

uint64_t sub_1000A84FC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5;

  v5 = swift_retain(a1);
  a3(v5);
  return swift_release(a1);
}

uint64_t sub_1000A8528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_uuid;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_assetReader));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000A85A8(_QWORD *a1, _QWORD *a2)
{
  return static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_uuid, *a2 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_uuid);
}

uint64_t sub_1000A85C4()
{
  return type metadata accessor for AudioPlayerItem(0);
}

uint64_t type metadata accessor for AudioPlayerItem(uint64_t a1)
{
  uint64_t result;

  result = qword_1001E9960;
  if (!qword_1001E9960)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AudioPlayerItem);
  return result;
}

uint64_t sub_1000A8608(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = "\b";
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_1000A86AC()
{
  unint64_t result;

  result = qword_1001E9A70;
  if (!qword_1001E9A70)
  {
    result = swift_getWitnessTable(&unk_100187D98, &type metadata for AudioPlayer.Error);
    atomic_store(result, (unint64_t *)&qword_1001E9A70);
  }
  return result;
}

uint64_t sub_1000A86F0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double *sub_1000A8714(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000A7EB0(a1, a2, v2);
}

uint64_t sub_1000A871C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A872C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000A8734()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A8744()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000A8764()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000A8788()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_preparedToPlayIndex) = *(_QWORD *)(v0 + 24);
}

uint64_t sub_1000A879C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A87AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

id sub_1000A87D8()
{
  uint64_t v0;

  return sub_1000A7270(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000A87E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000A8814()
{
  uint64_t v0;

  return sub_1000A6CF4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1000A8828()
{
  return sub_1000A8848((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1000A8834()
{
  return sub_1000A8888(1);
}

uint64_t sub_1000A883C()
{
  return sub_1000A8848((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1000A8848(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 24));
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, 40, 7);
}

uint64_t sub_1000A8880()
{
  return sub_1000A8888(0);
}

uint64_t sub_1000A8888(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 16))(*(_QWORD *)(v1 + 32), a1);
}

void sub_1000A88B4(void *a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  double v12;
  id v13;
  id v14;
  id v15;
  id v16;
  double v17;

  v6 = v5;
  UUID.init()();
  *(_QWORD *)(v6 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_seekPosition) = -1;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_preparedToPlayIndex) = -1;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_renderer) = a1;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_assetReader) = a2;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_silenceRemover) = a3;
  if ((a5 & 1) != 0)
  {
    v15 = a3;
    v16 = a1;
    swift_retain(a2);
    v12 = sub_1000AB09C();
  }
  else
  {
    v12 = *(double *)&a4;
    v13 = a3;
    v14 = a1;
    swift_retain(a2);
  }
  v17 = v12 * *(double *)(a2 + 24);
  if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v17 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v17 < 9.22337204e18)
  {
    *(_QWORD *)(v6 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_playbackEndTime) = (uint64_t)v17;
    return;
  }
LABEL_10:
  __break(1u);
}

void sub_1000A89DC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_preparedToPlayIndex) = -1;
}

uint64_t sub_1000A89F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A8A00()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000A8A24(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_preparedToPlayIndex);
}

uint64_t sub_1000A8A38()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  if (v0[5])
    swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000A8A74()
{
  uint64_t *v0;

  return sub_1000A65EC(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1000A8A84(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_1000A8A94()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A8AB8()
{
  uint64_t v0;

  return sub_1000A63E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000A8AC0(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_1000A8AD0()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

uint64_t sub_1000A8AF4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1000A8B18()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(unsigned __int8 *)(v0 + 32));
}

id sub_1000A8B40()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_renderer), "pause");
}

uint64_t sub_1000A8B58()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  swift_errorRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000A8B8C()
{
  uint64_t v0;

  sub_1000A7A88(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

_QWORD *initializeBufferWithCopyOfBuffer for AudioPlayer.Error(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AudioPlayer.Error(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 13))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AudioPlayer.Error(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 13) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AudioPlayer.Error()
{
  return &type metadata for AudioPlayer.Error;
}

uint64_t initializeBufferWithCopyOfBuffer for AudioPlayer.Format(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AudioPlayer.Format(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AudioPlayer.Format(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AudioPlayer.Format()
{
  return &type metadata for AudioPlayer.Format;
}

id sub_1000A8CFC(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v3 = v2;
  v6 = objc_msgSend(v3, "textLayoutManager");
  if (!v6)
    return 0;
  v7 = v6;
  v8 = objc_msgSend(v6, "textContentManager");

  if (!v8)
    return 0;
  v9 = objc_msgSend(v8, "documentRange");
  v10 = objc_msgSend(v9, "location");
  v11 = objc_msgSend(v8, "locationFromLocation:withOffset:", v10, a1);
  swift_unknownObjectRelease(v10);
  if (!v11)
  {

    return 0;
  }
  v12 = objc_msgSend(v8, "locationFromLocation:withOffset:", v11, a2);
  if (!v12)
  {

    swift_unknownObjectRelease(v11);
    return 0;
  }
  v13 = v12;
  v14 = objc_msgSend(objc_allocWithZone((Class)NSTextRange), "initWithLocation:endLocation:", v11, v12);

  swift_unknownObjectRelease(v13);
  swift_unknownObjectRelease(v11);
  return v14;
}

uint64_t sub_1000A8E5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a1;
  v2 = sub_100014E10(&qword_1001E9BB0);
  __chkstk_darwin(v2);
  v32 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100014E10(&qword_1001E9BB8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100014E10(&qword_1001E9BC0);
  v9 = *(_QWORD *)(v8 - 8);
  v34 = v8;
  v35 = v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100014E10(&qword_1001E9BC8);
  v12 = *(_QWORD *)(v31 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v31);
  __chkstk_darwin(v14);
  v16 = (char *)&v30 - v15;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_transcriptionTask) = 0;
  v17 = v1 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_delegate;
  *(_QWORD *)(v17 + 8) = 0;
  swift_unknownObjectWeakInit(v17, 0);
  v18 = sub_1000AA628();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v4);
  v30 = v11;
  static AsyncStream.makeStream(of:bufferingPolicy:)(v16, v11, v18, v7, v18);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v1 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_continuation, v11, v34);
  v19 = type metadata accessor for TaskPriority(0);
  v20 = (uint64_t)v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v32, 1, 1, v19);
  v21 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = v31;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v21, v16, v31);
  v23 = *(unsigned __int8 *)(v12 + 80);
  v24 = (v23 + 40) & ~v23;
  v25 = (v13 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (char *)swift_allocObject(&unk_1001AE688, v25 + 8, v23 | 7);
  *((_QWORD *)v26 + 2) = 0;
  *((_QWORD *)v26 + 3) = 0;
  *((_QWORD *)v26 + 4) = v1;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v26[v24], v21, v22);
  *(_QWORD *)&v26[v25] = v33;
  swift_retain(v1);
  v27 = sub_1000A9194(v20, (uint64_t)&unk_1001E9BD8, (uint64_t)v26);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v30, v34);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v22);
  v28 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_transcriptionTask);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_transcriptionTask) = v27;
  swift_release(v28);
  return v1;
}

uint64_t sub_1000A9130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(dword_1001E9ACC);
  *(_QWORD *)(v6 + 16) = v9;
  *v9 = v6;
  v9[1] = sub_100003A7C;
  return sub_1000A93E8(a5, a6);
}

uint64_t sub_1000A9194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_1000AA7B0(a1);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (!v10)
    {
LABEL_6:
      v16 = 0;
      return swift_task_create(v9, v16, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v17 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v17 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (!v10)
      goto LABEL_6;
  }
  v11 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v10);
  swift_unknownObjectRetain(v10);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
  v15 = v14;
  swift_unknownObjectRelease(v10);
  if (!(v15 | v13))
    goto LABEL_6;
  v19[0] = 0;
  v19[1] = 0;
  v16 = v19;
  v19[2] = v13;
  v19[3] = v15;
  return swift_task_create(v9, v16, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_1000A92C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_1000AA7B0(a1);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = type metadata accessor for AttributedString(0);
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v9, v18, v17, a2, a3);
}

uint64_t sub_1000A93E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3[11] = a2;
  v3[12] = v2;
  v3[10] = a1;
  v4 = sub_100014E10(&qword_1001E9BB0);
  v3[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TranscriptionUtterance(0);
  v3[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[15] = v6;
  v3[16] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100014E10(&qword_1001E9BE0);
  v3[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100014E10(&qword_1001E9BE8);
  v3[18] = v8;
  v3[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100014E10(&qword_1001E9BF0);
  v3[20] = v9;
  v3[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100014E10(&qword_1001E9BF8);
  v3[22] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[23] = v11;
  v3[24] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000A9510, 0, 0);
}

uint64_t sub_1000A9510()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_1001E8F88 != -1)
    swift_once(&qword_1001E8F88, sub_1000B6710);
  *(_QWORD *)(v0 + 200) = qword_1001F6C38;
  v1 = (_QWORD *)swift_task_alloc(dword_1001EA6EC);
  *(_QWORD *)(v0 + 208) = v1;
  *v1 = v0;
  v1[1] = sub_1000A9588;
  return sub_1000B82F4();
}

uint64_t sub_1000A9588()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 208));
  return swift_task_switch(sub_1000A95DC, 0, 0);
}

uint64_t sub_1000A95DC()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t (*v8)(char, uint64_t, uint64_t, uint64_t);

  v1 = v0[10];
  v2 = (void *)v0[11];
  *(_BYTE *)(v0[25] + OBJC_IVAR___RCRecordingTranscriptionService_isTranscribingLive) = 1;
  v3 = swift_task_alloc(32);
  v0[27] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  v4 = unk_1001EA7AC;
  v8 = (uint64_t (*)(char, uint64_t, uint64_t, uint64_t))((char *)&dword_1001EA7A8 + dword_1001EA7A8);
  v5 = v2;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v0[28] = v6;
  *v6 = v0;
  v6[1] = sub_1000A9684;
  return v8(1, v0[11], (uint64_t)&unk_1001E9C08, v3);
}

uint64_t sub_1000A9684(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 224);
  v4[29] = a1;
  v4[30] = a2;
  v4[31] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = sub_1000A992C;
  }
  else
  {
    swift_task_dealloc(v4[27]);
    v6 = sub_1000A96FC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000A96FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t OpaqueTypeConformance2;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = v0[29];
  v2 = v0[30];
  v3 = v0[20];
  v4 = v0[18];
  v5 = v0[19];
  v6 = v0[14];
  v7 = swift_allocObject(&unk_1001AE6B0, 32, 7);
  *(_QWORD *)(v7 + 16) = v1;
  *(_QWORD *)(v7 + 24) = v2;
  swift_retain(v1);
  swift_retain(v2);
  v8 = sub_100014E10(&qword_1001E9BC0);
  v9 = AsyncStream.Continuation.onTermination.setter(sub_1000AA9DC, v7, v8);
  Transcriber.multisegmentResults.getter(v9);
  v10 = swift_allocObject(&unk_1001AE6D8, 32, 7);
  *(_QWORD *)(v10 + 16) = v1;
  *(_QWORD *)(v10 + 24) = v2;
  swift_retain(v1);
  v11 = swift_retain(v2);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v11, &opaque type descriptor for <<opaque return type of Transcriber.multisegmentResults>>, 1);
  AsyncCompactMapSequence.init(_:transform:)(v5, &unk_1001E9C10, v10, v4, v6, OpaqueTypeConformance2);
  v13 = sub_10000EDB0(&qword_1001E9C18, &qword_1001E9BF0, (uint64_t)&protocol conformance descriptor for AsyncCompactMapSequence<A, B>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v3, v13);
  v0[32] = OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_delegate;
  v14 = sub_10000EDB0(&qword_1001E9C20, &qword_1001E9BF8, (uint64_t)&protocol conformance descriptor for AsyncCompactMapSequence<A, B>.Iterator);
  v0[33] = v14;
  v15 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[34] = v15;
  *v15 = v0;
  v15[1] = sub_1000A98C8;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0[17], 0, 0, v0 + 9, v0[22], v14);
}

uint64_t sub_1000A98C8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 272));
  if (v0)
  {
    v3 = sub_1000A9F2C;
  }
  else
  {
    *(_QWORD *)(v2 + 280) = 0;
    v3 = sub_1000A99C4;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000A992C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 104);
  *(_BYTE *)(qword_1001F6C38 + OBJC_IVAR___RCRecordingTranscriptionService_isTranscribingLive) = 0;
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000A99C4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ObjectType;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 48))(v1, 1, *(_QWORD *)(v0 + 112));
  v3 = *(_QWORD *)(v0 + 256);
  if (v2 != 1)
  {
    v7 = *(_QWORD *)(v0 + 96) + v3;
    sub_1000AAA80(v1, *(_QWORD *)(v0 + 128));
    Strong = swift_unknownObjectWeakLoadStrong(v7);
    if (!Strong)
    {
LABEL_17:
      sub_1000AABB0(*(_QWORD *)(v0 + 128));
      v44 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
      *(_QWORD *)(v0 + 288) = v44;
      *v44 = v0;
      v44[1] = sub_1000A9DCC;
      _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(*(_QWORD *)(v0 + 136), 0, 0, v0 + 72, *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 264));
      return;
    }
    v9 = Strong;
    v10 = *(_QWORD *)(v0 + 280);
    v11 = *(_QWORD *)(v0 + 128);
    v12 = *(_QWORD *)(Strong + OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_compiler);
    v13 = swift_task_alloc(32);
    *(_QWORD *)(v13 + 16) = v11;
    v14 = (os_unfair_lock_s *)(v12 + 24);
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 24));
    sub_1000C9268((uint64_t *)(v12 + 16), *(char **)(v13 + 16), (uint64_t *)(v0 + 48));
    if (v10)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 24));
      return;
    }
    v22 = *(_QWORD *)(v0 + 104);
    os_unfair_lock_unlock(v14);
    v24 = *(_QWORD *)(v0 + 48);
    v23 = *(_QWORD *)(v0 + 56);
    v25 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(v13);
    v26 = type metadata accessor for TaskPriority(0);
    v27 = *(_QWORD *)(v26 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v22, 1, 1, v26);
    type metadata accessor for MainActor(0);
    swift_unknownObjectRetain(v9);
    swift_bridgeObjectRetain(v23);
    v28 = swift_bridgeObjectRetain(v25);
    v29 = static MainActor.shared.getter(v28);
    v30 = (_QWORD *)swift_allocObject(&unk_1001AE700, 64, 7);
    v30[2] = v29;
    v30[3] = &protocol witness table for MainActor;
    v30[4] = v9;
    v30[5] = v24;
    v30[6] = v23;
    v30[7] = v25;
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v22, 1, v26);
    v32 = *(_QWORD *)(v0 + 104);
    if (v31 == 1)
    {
      sub_1000AA7B0(*(_QWORD *)(v0 + 104));
      v33 = 7168;
      if (v29)
      {
LABEL_10:
        v34 = v30[3];
        ObjectType = swift_getObjectType(v29);
        swift_unknownObjectRetain(v29);
        v36 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v34);
        v38 = v37;
        swift_unknownObjectRelease(v29);
LABEL_13:
        v40 = swift_allocObject(&unk_1001AE728, 32, 7);
        *(_QWORD *)(v40 + 16) = &unk_1001E9C28;
        *(_QWORD *)(v40 + 24) = v30;
        v41 = sub_100014E10(&qword_1001E9C30);
        if (v38 | v36)
        {
          v42 = v0 + 16;
          *(_QWORD *)(v0 + 16) = 0;
          *(_QWORD *)(v0 + 24) = 0;
          *(_QWORD *)(v0 + 32) = v36;
          *(_QWORD *)(v0 + 40) = v38;
        }
        else
        {
          v42 = 0;
        }
        v43 = swift_task_create(v33, v42, v41, &unk_1001ECDA0, v40);
        swift_bridgeObjectRelease(v23);
        swift_bridgeObjectRelease(v25);
        swift_unknownObjectRelease(v9);
        swift_release(v43);
        goto LABEL_17;
      }
    }
    else
    {
      v39 = TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v32, v26);
      v33 = v39 | 0x1C00;
      v29 = v30[2];
      if (v29)
        goto LABEL_10;
    }
    v36 = 0;
    v38 = 0;
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v0 + 96) + v3;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
  v5 = swift_unknownObjectWeakLoadStrong(v4);
  *(_QWORD *)(v0 + 296) = v5;
  if (v5)
  {
    v6 = (_QWORD *)swift_task_alloc(dword_1001EB07C);
    *(_QWORD *)(v0 + 304) = v6;
    *v6 = v0;
    v6[1] = sub_1000A9E30;
    sub_1000C9304();
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 240);
    swift_release(*(_QWORD *)(v0 + 232));
    swift_release(v15);
    v16 = *(_QWORD *)(v0 + 192);
    v17 = *(_QWORD *)(v0 + 168);
    v18 = *(_QWORD *)(v0 + 152);
    v20 = *(_QWORD *)(v0 + 128);
    v19 = *(_QWORD *)(v0 + 136);
    v21 = *(_QWORD *)(v0 + 104);
    *(_BYTE *)(qword_1001F6C38 + OBJC_IVAR___RCRecordingTranscriptionService_isTranscribingLive) = 0;
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000A9DCC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 288));
  if (v0)
  {
    v3 = sub_1000A9F2C;
  }
  else
  {
    *(_QWORD *)(v2 + 280) = 0;
    v3 = sub_1000A99C4;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000A9E30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 296);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 304));
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_1000A9E8C, 0, 0);
}

uint64_t sub_1000A9E8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 240);
  swift_release(*(_QWORD *)(v0 + 232));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 104);
  *(_BYTE *)(qword_1001F6C38 + OBJC_IVAR___RCRecordingTranscriptionService_isTranscribingLive) = 0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A9F2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 176);
  swift_release(*(_QWORD *)(v0 + 232));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 104);
  *(_BYTE *)(qword_1001F6C38 + OBJC_IVAR___RCRecordingTranscriptionService_isTranscribingLive) = 0;
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A9FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v26[4];

  v5 = sub_100014E10(&qword_1001E9BB0);
  __chkstk_darwin(v5);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  v10 = (_QWORD *)swift_allocObject(&unk_1001AE750, 48, 7);
  v10[2] = 0;
  v11 = v10 + 2;
  v10[3] = 0;
  v10[4] = a2;
  v10[5] = a3;
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  swift_retain(a2);
  v13 = swift_retain(a3);
  if (v12 == 1)
  {
    sub_1000AA7B0((uint64_t)v7);
    v14 = 0;
    v15 = 0;
    v16 = 7168;
  }
  else
  {
    v17 = TaskPriority.rawValue.getter(v13);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    v16 = v17 | 0x1C00;
    v18 = *v11;
    if (*v11)
    {
      v19 = v10[3];
      ObjectType = swift_getObjectType(*v11);
      swift_unknownObjectRetain(v18);
      v14 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v19);
      v15 = v21;
      swift_unknownObjectRelease(v18);
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
  }
  v22 = swift_allocObject(&unk_1001AE778, 32, 7);
  *(_QWORD *)(v22 + 16) = &unk_1001E9C40;
  *(_QWORD *)(v22 + 24) = v10;
  if (v15 | v14)
  {
    v26[0] = 0;
    v26[1] = 0;
    v23 = v26;
    v26[2] = v14;
    v26[3] = v15;
  }
  else
  {
    v23 = 0;
  }
  v24 = swift_task_create(v16, v23, (char *)&type metadata for () + 8, &unk_1001E9C48, v22);
  return swift_release(v24);
}

uint64_t sub_1000AA1C0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to SpeechAnalyzer.finalizeAndFinishThroughEndOfInput()[1]);
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_1000AA20C;
  return SpeechAnalyzer.finalizeAndFinishThroughEndOfInput()();
}

uint64_t sub_1000AA20C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 24);
  v3 = *v1;
  *(_QWORD *)(v3 + 32) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000AA278, 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000AA278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_1001E8F80 != -1)
    swift_once(&qword_1001E8F80, sub_1000B5218);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for Logger(0);
  sub_1000AACFC(v2, (uint64_t)qword_1001F6C20);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 32);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "finalizeAndFinishThroughEndOfInput failed with %@", v8, 0xCu);
    v11 = sub_100014E10((uint64_t *)&unk_1001ECD60);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 32));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AA444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_transcriptionTask;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_transcriptionTask);
  if (v3)
  {
    swift_retain(v3);
    sub_100014E10(qword_1001E9C68);
    Task.cancel()();
    swift_release(v3);
  }
  v4 = v1 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_continuation;
  v5 = sub_100014E10(&qword_1001E9BC0);
  AsyncStream.Continuation.finish()();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release(*(_QWORD *)(v1 + v2));
  sub_1000A3170(v1 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_delegate);
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t sub_1000AA510()
{
  return type metadata accessor for LiveTranscription(0);
}

uint64_t type metadata accessor for LiveTranscription(uint64_t a1)
{
  uint64_t result;

  result = qword_1001E9AB8;
  if (!qword_1001E9AB8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LiveTranscription);
  return result;
}

void sub_1000AA554(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1000AA5D4(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    v4[2] = &unk_100187E40;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_1000AA5D4(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001E9AD0)
  {
    v2 = sub_1000AA628();
    v3 = type metadata accessor for AsyncStream.Continuation(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001E9AD0);
  }
}

unint64_t sub_1000AA628()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001E9AD8;
  if (!qword_1001E9AD8)
  {
    v1 = objc_opt_self(AVAudioPCMBuffer);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001E9AD8);
  }
  return result;
}

uint64_t sub_1000AA664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_100014E10(&qword_1001E9BC8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000AA700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(sub_100014E10(&qword_1001E9BC8) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v6 = (_QWORD *)swift_task_alloc(dword_1001E9BD4);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10001B80C;
  v7 = (_QWORD *)swift_task_alloc(dword_1001E9ACC);
  v6[2] = v7;
  *v7 = v6;
  v7[1] = sub_100003A7C;
  return sub_1000A93E8(v4, v5);
}

uint64_t sub_1000AA7B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100014E10(&qword_1001E9BB0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AA7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = sub_100014E10(&qword_1001E9BC8);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000AA858, 0, 0);
}

uint64_t sub_1000AA858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v5 = *(void **)(v0 + 24);
  v6 = type metadata accessor for BufferFormatConverter();
  v7 = swift_allocObject(v6, 32, 7);
  *(_QWORD *)(v7 + 16) = 0;
  v8 = sub_100014E10(&qword_1001E9C50);
  v9 = swift_allocObject(v8, 20, 7);
  *(_DWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v10 = swift_allocObject(&unk_1001AE7A0, 32, 7);
  *(_QWORD *)(v10 + 16) = v7;
  *(_QWORD *)(v10 + 24) = v5;
  v11 = sub_1000AA628();
  v12 = sub_10000EDB0(&qword_1001E9C60, &qword_1001E9BC8, (uint64_t)&protocol conformance descriptor for AsyncStream<A>);
  v13 = v5;
  AsyncThrowingMapSequence.init(_:transform:)(v1, &unk_1001E9C58, v10, v3, v11, v12);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AA970(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_1001E9C04);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001B80C;
  return sub_1000AA7F0(a1, a2, v6);
}

uint64_t sub_1000AA9DC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A9FE4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000AA9E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AAA14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1001EA804);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100003A7C;
  return sub_1000BAF34(a1, a2);
}

uint64_t sub_1000AAA80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TranscriptionUtterance(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AAAC4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000AAB00(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_1001EB014);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10001B80C;
  return sub_1000C8FDC(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1000AAB8C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AABB0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TranscriptionUtterance(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AABEC()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000AAC20()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_1001E9C3C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001B80C;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to SpeechAnalyzer.finalizeAndFinishThroughEndOfInput()[1]);
  v1[3] = v2;
  *v2 = v1;
  v2[1] = sub_1000AA20C;
  return SpeechAnalyzer.finalizeAndFinishThroughEndOfInput()();
}

uint64_t sub_1000AAC8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1001ECD84);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001B80C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1001ECD80 + dword_1001ECD80))(a1, v4);
}

uint64_t sub_1000AACFC(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_1000AAD14()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AAD40(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_1001EA85C);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_100003A7C;
  return sub_1000BAEB8(a1, a2, v7, v6);
}

uint64_t sub_1000AADB4(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 88);
}

uint64_t sub_1000AADF8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for WeakObserverRegistry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AAE28(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakObserverRegistry);
}

uint64_t sub_1000AAE28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

void sub_1000AAE54()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  char v7[24];
  ValueMetadata *v8;
  unint64_t v9;

  v1 = v0;
  v2 = objc_msgSend(v0, "entityInteraction");
  swift_unknownObjectRelease(v2);
  if (!v2)
  {
    v8 = &type metadata for RCUIElementEntity;
    v9 = sub_1000AB058();
    v7[0] = 1;
    v3 = objc_allocWithZone((Class)type metadata accessor for UIAppEntityInteraction(0));
    v6 = (id)UIAppEntityInteraction.init(entity:)(v7);
    v4 = objc_msgSend(v1, "view");
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, "addInteraction:", v6);

      objc_msgSend(v1, "setEntityInteraction:", v6);
    }
    else
    {
      __break(1u);
    }
  }
}

id sub_1000AAF68()
{
  void *v0;
  id result;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  result = objc_msgSend(v0, "entityInteraction");
  if (result)
  {
    v2 = result;
    v3 = type metadata accessor for UIAppEntityInteraction(0);
    v4 = swift_dynamicCastClass(v2, v3);
    if (!v4)
      return (id)swift_unknownObjectRelease(v2);
    v5 = v4;
    result = objc_msgSend(v0, "view");
    if (result)
    {
      v6 = result;
      objc_msgSend(result, "removeInteraction:", v5);

      objc_msgSend(v0, "setEntityInteraction:", 0);
      return (id)swift_unknownObjectRelease(v2);
    }
    __break(1u);
  }
  return result;
}

unint64_t sub_1000AB058()
{
  unint64_t result;

  result = qword_1001E9CF0;
  if (!qword_1001E9CF0)
  {
    result = swift_getWitnessTable(&unk_10018B74C, &type metadata for RCUIElementEntity);
    atomic_store(result, (unint64_t *)&qword_1001E9CF0);
  }
  return result;
}

double sub_1000AB09C()
{
  uint64_t v0;
  double result;

  if ((*(_BYTE *)(v0 + 80) & 1) == 0)
    return *(double *)(v0 + 72);
  objc_msgSend(*(id *)(v0 + 16), "rc_durationInSeconds");
  *(double *)(v0 + 72) = result;
  *(_BYTE *)(v0 + 80) = 0;
  return result;
}

void sub_1000AB0D8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v9;
  double v10;
  double v11;
  int v12;
  int64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = v3;
  v9 = sub_1000AB09C();
  v10 = *(double *)(v3 + 24);
  v11 = v9 * v10;
  if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v11 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (__OFSUB__((uint64_t)v11, 1))
  {
LABEL_22:
    __break(1u);
    return;
  }
  v12 = a3 & 1;
  if ((uint64_t)v11 - 1 >= (a1 & ~(a1 >> 63)))
    v13 = a1 & ~(a1 >> 63);
  else
    v13 = (uint64_t)v11 - 1;
  v14 = *(_QWORD *)(v5 + 48);
  if (!v14
    || v13 != *(_QWORD *)(v14
                        + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_readIndex))
  {
    goto LABEL_16;
  }
  v15 = *(_BYTE *)(v5 + 64);
  if ((a3 & 1) != 0)
  {
    if ((*(_BYTE *)(v5 + 64) & 1) != 0)
      return;
    goto LABEL_16;
  }
  if (*(_QWORD *)(v5 + 56) != a2)
    v15 = 1;
  if ((v15 & 1) != 0)
  {
LABEL_16:
    *(_QWORD *)(v5 + 56) = a2;
    *(_BYTE *)(v5 + 64) = v12 != 0;
    v16 = *(void **)(v5 + 16);
    v17 = *(_QWORD *)(v5 + 32);
    v18 = type metadata accessor for AudioAssetReaderOutput(0);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    v19 = sub_1000AB850(v16, v17, v13, a2, v12, 0, v10);
    if (!v4)
    {
      v20 = *(_QWORD *)(v5 + 48);
      *(_QWORD *)(v5 + 48) = v19;
      swift_release(v20);
    }
  }
}

double *sub_1000AB240(_DWORD *a1, uint64_t a2)
{
  double *v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double *v8;
  double *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v4 = *((_QWORD *)v2 + 4);
  if (v4 != *a1)
    return 0;
  v5 = v2;
  v8 = (double *)*((_QWORD *)v2 + 6);
  if (!v8)
  {
    sub_1000AB0D8(0, 0, 1);
    if (v3)
      goto LABEL_6;
    v8 = (double *)*((_QWORD *)v2 + 6);
    if (!v8)
      return 0;
  }
  swift_retain(v8);
  v2 = v8;
  sub_1000ABDBC((uint64_t)a1, a2);
  if (!v3)
  {
    v2 = v9;
    swift_release(v8);
    return v2;
  }
  swift_release(v8);
LABEL_6:
  v29 = v3;
  swift_errorRetain(v3);
  v10 = sub_100014E10(qword_1001E9C68);
  if (swift_dynamicCast(&v25, &v29, v10, &type metadata for AudioAssetReaderOutput.Error, 0))
  {
    v11 = v25;
    if (v28 == 3)
    {
      v21 = v26;
      v22 = v27;
      swift_errorRelease(v3);
      v12 = (void *)*((_QWORD *)v5 + 2);
      v13 = v5[3];
      v23 = *(_QWORD *)&v11[OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_endTime];
      v24 = *(_QWORD *)&v11[OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_readIndex];
      v14 = v11[OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_endTime
                               + 8];
      v15 = type metadata accessor for AudioAssetReaderOutput(0);
      swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
      v16 = sub_1000AB850(v12, v4, v24, v23, v14, 0, v13);
      v18 = *((_QWORD *)v5 + 6);
      *((_QWORD *)v5 + 6) = v16;
      swift_release(v18);
      v19 = *((_QWORD *)v5 + 6);
      if (v19)
      {
        swift_retain(v19);
        sub_1000ABDBC((uint64_t)a1, a2);
        v2 = v20;
        sub_1000AC95C(v11, v21, v22, 3);
        swift_release(v19);
      }
      else
      {
        sub_1000AC95C(v11, v21, v22, 3);
        v2 = 0;
      }
    }
    else
    {
      sub_1000AC95C(v25, v26, v27, v28);
    }
  }
  swift_errorRelease(v29);
  return v2;
}

uint64_t sub_1000AB48C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 81, 7);
}

uint64_t type metadata accessor for AudioAssetReader()
{
  return objc_opt_self(_TtC10VoiceMemos16AudioAssetReader);
}

void sub_1000AB4D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1000AB534()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  _QWORD v16[10];

  v2 = v0;
  v3 = v1;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)v16, "AVAssetReader ");
  v4 = objc_msgSend(v2, "description");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._object = (void *)0x8000000100182CC0;
  v9._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v9);
  v10 = objc_msgSend(v3, "description");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);

  swift_bridgeObjectRelease(v13);
  return v16[0];
}

void sub_1000AB840()
{
  uint64_t v0;

  sub_1000AB4D8(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1000AB850(void *a1, uint64_t a2, int64_t a3, uint64_t a4, int a5, char a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *value;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v31;
  char v32;
  int64_t v33;
  uint64_t v34;
  CMTimeValue v35;
  CMTimeScale timescale;
  uint64_t v37;
  CMTimeEpoch epoch;
  id v39;
  void *v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  id v50;
  CMTime v51;
  CMTimeValue v52;
  CMTimeScale v53;
  int v54;
  CMTimeEpoch v55;
  __C::CMTime v56;

  v9 = v7;
  v46 = a5;
  v47 = a4;
  v48 = a3;
  v49 = a2;
  v13 = type metadata accessor for UnsafeMutableAudioBufferListPointer(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (_QWORD *)(v9
                 + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_partialSampleBuffer);
  *v17 = 0;
  v17[1] = 0;
  v18 = v9 + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_endTime;
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  v19 = objc_allocWithZone((Class)AVAssetReader);
  v50 = a1;
  v51.value = 0;
  v20 = objc_msgSend(v19, "initWithAsset:error:", a1, &v51);
  value = (void *)v51.value;
  if (!v20)
  {
    v27 = (id)v51.value;
    _convertNSErrorToError(_:)(value);

    swift_willThrow(v28);
    v26 = v50;
    goto LABEL_5;
  }
  v22 = v20;
  *(_QWORD *)(v9 + 16) = v20;
  v23 = value;
  v24 = v22;
  v25 = sub_1000AC678(v24, v49, a6 & 1, a7);
  if (v8)
  {

    v26 = *(id *)(v9 + 16);
LABEL_5:

    objc_release(*(id *)(v9
                       + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_partialSampleBuffer));
    v29 = type metadata accessor for AudioAssetReaderOutput(0);
    swift_deallocPartialClassInstance(v9, v29, *(unsigned int *)(*(_QWORD *)v9 + 48), *(unsigned __int16 *)(*(_QWORD *)v9 + 52));
    return v9;
  }
  v31 = v25;
  v32 = v46;
  v45 = v46 & 1;

  *(_QWORD *)(v9 + 24) = v31;
  static AudioBufferList.allocate(maximumBuffers:)(v49);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v9 + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_utilityBufferList, v16, v13);
  v33 = v48;
  *(_QWORD *)(v9 + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_readIndex) = v48;
  v34 = v47;
  *(_QWORD *)v18 = v47;
  *(_BYTE *)(v18 + 8) = v45;
  if ((v32 & 1) != 0)
  {
    if ((~*(_QWORD *)&a7 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
      goto LABEL_24;
    }
    v35 = kCMTimePositiveInfinity.value;
    timescale = kCMTimePositiveInfinity.timescale;
    LODWORD(v37) = kCMTimePositiveInfinity.flags;
    epoch = kCMTimePositiveInfinity.epoch;
  }
  else
  {
    if (__OFSUB__(v34, v33))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if ((~*(_QWORD *)&a7 & 0x7FF0000000000000) == 0)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    if (a7 <= -2147483650.0)
    {
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
    }
    if (a7 >= 2147483650.0)
      goto LABEL_29;
    v56 = CMTime.init(value:timescale:)(v34 - v33, (int)a7);
    v35 = v56.value;
    timescale = v56.timescale;
    epoch = v56.epoch;
    v37 = HIDWORD(*(_QWORD *)&v56.timescale);
  }
  if (a7 <= -2147483650.0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (a7 >= 2147483650.0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v39 = *(id *)(v9 + 16);
  CMTimeMake(&v51, v33, (int)a7);
  v52 = v35;
  v53 = timescale;
  v54 = v37;
  v55 = epoch;
  objc_msgSend(v39, "setTimeRange:", &v51);

  v40 = *(void **)(v9 + 16);
  if ((objc_msgSend(v40, "startReading") & 1) != 0)
  {

  }
  else
  {
    v51.value = 0;
    *(_QWORD *)&v51.timescale = 0xE000000000000000;
    v41 = v40;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease(*(_QWORD *)&v51.timescale);
    if (objc_msgSend(v41, "error"))
    {

    }
    else
    {
      v43 = sub_1000AC634();
      v42 = swift_allocError(&type metadata for AudioAssetReaderOutput.Error, v43, 0, 0);
      *(_QWORD *)v44 = v41;
      *(_QWORD *)(v44 + 8) = 0xD000000000000058;
      *(_QWORD *)(v44 + 16) = 0x8000000100182BD0;
      *(_BYTE *)(v44 + 24) = 1;
    }
    swift_willThrow(v42);

    swift_release(v9);
  }
  return v9;
}

uint64_t sub_1000ABC60()
{
  id *v0;
  id *v1;
  char *v2;
  void *v3;
  uint64_t v4;

  v1 = v0;
  v2 = (char *)v0
     + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_utilityBufferList;
  v3 = (void *)UnsafeMutableAudioBufferListPointer.unsafeMutablePointer.getter();
  free(v3);

  v4 = type metadata accessor for UnsafeMutableAudioBufferListPointer(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
  objc_release(*(id *)((char *)v1
                     + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_partialSampleBuffer));
  return swift_deallocClassInstance(v1, *((unsigned int *)*v1 + 12), *((unsigned __int16 *)*v1 + 26));
}

uint64_t sub_1000ABCDC()
{
  return type metadata accessor for AudioAssetReaderOutput(0);
}

uint64_t type metadata accessor for AudioAssetReaderOutput(uint64_t a1)
{
  uint64_t result;

  result = qword_1001E9E78;
  if (!qword_1001E9E78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AudioAssetReaderOutput);
  return result;
}

uint64_t sub_1000ABD20(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for UnsafeMutableAudioBufferListPointer(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_100187F48;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = &unk_100187F60;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_1000ABDBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  opaqueCMSampleBuffer *v11;
  uint64_t v12;
  opaqueCMSampleBuffer *v13;
  uint64_t v14;
  opaqueCMSampleBuffer *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  AudioBufferList *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  opaqueCMSampleBuffer *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = v2;
  v7 = type metadata accessor for UnsafeMutableAudioBufferListPointer(0);
  v31 = *(_QWORD *)(v7 - 8);
  v32 = v7;
  __chkstk_darwin(v7);
  v35 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnsafeMutableAudioBufferListPointer.init(_:)(a1);
  if (a2 >= 1)
  {
    v9 = 0;
    v10 = v4
        + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_partialSampleBuffer;
    v33 = v4
        + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_utilityBufferList;
    v34 = v4;
    while (1)
    {
      v11 = *(opaqueCMSampleBuffer **)v10;
      if (*(_QWORD *)v10)
      {
        v12 = *(_QWORD *)(v10 + 8);
        v13 = *(opaqueCMSampleBuffer **)v10;
        v14 = a2 - v9;
        if (__OFSUB__(a2, v9))
          goto LABEL_31;
      }
      else
      {
        sub_1000AC050();
        if (v3)
        {
          (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v35, v32);
          return;
        }
        v13 = v15;
        if (!v15)
          goto LABEL_27;
        v12 = 0;
        v14 = a2 - v9;
        if (__OFSUB__(a2, v9))
        {
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          return;
        }
      }
      v16 = CMSampleBufferRef.numSamples.getter(v11);
      if (__OFSUB__(v16, v12))
        goto LABEL_32;
      if (v16 - v12 >= v14)
        v17 = v14;
      else
        v17 = v16 - v12;
      v4 = v34;
      v18 = sub_1000AC2A0(v35, v9, v17);
      v19 = (AudioBufferList *)UnsafeMutableAudioBufferListPointer.unsafeMutablePointer.getter(v18);
      if (v12 > 0x7FFFFFFF)
        goto LABEL_33;
      if (v12 < (uint64_t)0xFFFFFFFF80000000 || v17 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_34;
      if (v17 > 0x7FFFFFFF)
        goto LABEL_35;
      v20 = CMSampleBufferCopyPCMDataIntoAudioBufferList(v13, v12, v17, v19);
      v21 = noErr.getter();
      if (v20 != (_DWORD)v21)
      {
        v28 = sub_1000AC634();
        v29 = swift_allocError(&type metadata for AudioAssetReaderOutput.Error, v28, 0, 0);
        *(_QWORD *)(v30 + 8) = 0;
        *(_QWORD *)(v30 + 16) = 0;
        *(_QWORD *)v30 = v20;
        *(_BYTE *)(v30 + 24) = 2;
        swift_willThrow(v29);
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v35, v32);

        return;
      }
      v22 = CMSampleBufferRef.numSamples.getter(v21);
      if (__OFSUB__(v22, v12))
        goto LABEL_36;
      if (v17 >= v22 - v12)
      {

        v13 = 0;
        v23 = 0;
      }
      else
      {
        v23 = v17 + v12;
      }
      v24 = *(opaqueCMSampleBuffer **)v10;
      *(_QWORD *)v10 = v13;
      *(_QWORD *)(v10 + 8) = v23;

      v25 = __OFADD__(v9, v17);
      v9 += v17;
      if (v25)
        goto LABEL_37;
      if (v9 >= a2)
        goto LABEL_27;
    }
  }
  v9 = 0;
LABEL_27:
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v35, v32);
  v26 = *(_QWORD *)(v4
                  + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_readIndex);
  v25 = __OFADD__(v26, v9);
  v27 = v26 + v9;
  if (v25)
    goto LABEL_38;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_readIndex) = v27;
}

void sub_1000AC050()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(void **)(v0
                + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_partialSampleBuffer);
  if (v1)
  {
    v2 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC10VoiceMemosP33_670AC8C44BA3A495872081F24B9BC51622AudioAssetReaderOutput_partialSampleBuffer
                   + 8);
    type metadata accessor for CMSampleBuffer(0);
    v4 = v3;
    v5 = v1;
    v6 = CMSampleBufferRef.numSamples.getter();
    if (v6 < v2)
    {
      __break(1u);
    }
    else
    {
      _CMSampleBufferInitTrampoline.init(copying:forRange:)(&v18, v5, v2, v6, v4, &protocol witness table for CMSampleBufferRef);

    }
  }
  else if (!objc_msgSend(*(id *)(v0 + 24), "copyNextSampleBuffer"))
  {
    v7 = *(void **)(v0 + 16);
    if (objc_msgSend(v7, "status") != (id)2)
    {
      v8 = objc_msgSend(v7, "error");
      if (v8)
      {
        v9 = v8;
        if (objc_msgSend(v8, "code") == (id)-11847)
        {
          v10 = sub_1000AC634();
          swift_allocError(&type metadata for AudioAssetReaderOutput.Error, v10, 0, 0);
          *(_QWORD *)(v11 + 8) = 0;
          *(_QWORD *)(v11 + 16) = 0;
          *(_QWORD *)v11 = v0;
          *(_BYTE *)(v11 + 24) = 3;
          v12 = swift_retain(v0);
          swift_willThrow(v12);

          return;
        }

      }
      if (objc_msgSend(v7, "status") == (id)4)
      {
        v13 = sub_1000AC634();
        v14 = (id)swift_allocError(&type metadata for AudioAssetReaderOutput.Error, v13, 0, 0);
        *(_QWORD *)(v15 + 8) = 0;
        *(_QWORD *)(v15 + 16) = 0;
        *(_QWORD *)v15 = 0;
        *(_BYTE *)(v15 + 24) = 4;
      }
      else
      {
        _StringGuts.grow(_:)(36);
        swift_bridgeObjectRelease(0xE000000000000000);
        v14 = objc_msgSend(v7, "error", 0);
        if (!v14)
        {
          v16 = sub_1000AC634();
          swift_allocError(&type metadata for AudioAssetReaderOutput.Error, v16, 0, 0);
          *(_QWORD *)v17 = v7;
          *(_QWORD *)(v17 + 8) = 0xD000000000000039;
          *(_QWORD *)(v17 + 16) = 0x8000000100182B90;
          *(_BYTE *)(v17 + 24) = 1;
          v14 = v7;
        }
      }
      swift_willThrow(v14);
    }
  }
}

uint64_t sub_1000AC2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(_BYTE *, _QWORD);
  uint64_t v13;
  uint64_t (*v14)(_BYTE *, _QWORD);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_BYTE *, _QWORD);
  unsigned int v18;
  unsigned int v19;
  void (*v20)(_BYTE *, _QWORD);
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_BYTE *, _QWORD);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE v28[32];

  v5 = ((uint64_t (*)(void))UnsafeMutableAudioBufferListPointer.count.getter)();
  v6 = UnsafeMutableAudioBufferListPointer.count.setter(v5);
  result = UnsafeMutableAudioBufferListPointer.count.getter(v6);
  if (result < 0)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
LABEL_23:
    __break(1u);
  }
  else
  {
    v8 = result;
    if (result)
    {
      v9 = 0;
      v10 = 4 * a3;
      v27 = (unint64_t)(a3 - 0x2000000000000000) >> 62;
      v11 = (unint64_t)(4 * a3) >> 32;
      do
      {
        if (v8 == v9)
        {
          __break(1u);
LABEL_17:
          __break(1u);
LABEL_18:
          __break(1u);
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
        v14 = (uint64_t (*)(_BYTE *, _QWORD))UnsafeMutableAudioBufferListPointer.subscript.read(v28, v9);
        v16 = v15;
        result = v14(v28, 0);
        if (v16)
        {
          v17 = (void (*)(_BYTE *, _QWORD))UnsafeMutableAudioBufferListPointer.subscript.read(v28, v9);
          v19 = v18;
          v17(v28, 0);
          v20 = (void (*)(_BYTE *, _QWORD))UnsafeMutableAudioBufferListPointer.subscript.modify(v28, v9);
          *v21 = v19;
          v20(v28, 0);
          v22 = a2 * v19;
          if ((a2 * (unsigned __int128)v19) >> 64 != v22 >> 63)
            goto LABEL_17;
          if ((unint64_t)(v22 - 0x2000000000000000) >> 62 != 3)
            goto LABEL_18;
          v23 = v16 + 4 * v22;
          v24 = (uint64_t (*)(_BYTE *, _QWORD))UnsafeMutableAudioBufferListPointer.subscript.modify(v28, v9);
          *(_QWORD *)(v25 + 8) = v23;
          result = v24(v28, 0);
          if (v27 < 3)
            goto LABEL_19;
          if (v10 < 0)
            goto LABEL_21;
          if (v11)
          {
            result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
            goto LABEL_23;
          }
          v26 = v10 * (unint64_t)v19;
          if ((v26 & 0xFFFFFFFF00000000) != 0)
          {
            __break(1u);
            return result;
          }
          v12 = (uint64_t (*)(_BYTE *, _QWORD))UnsafeMutableAudioBufferListPointer.subscript.modify(v28, v9);
          *(_DWORD *)(v13 + 4) = v26;
          result = v12(v28, 0);
        }
        ++v9;
      }
      while (v8 != v9);
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AudioAssetReaderOutput.SampleBuffer(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for AudioAssetReaderOutput.SampleBuffer(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for AudioAssetReaderOutput.SampleBuffer(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioAssetReaderOutput.SampleBuffer(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioAssetReaderOutput.SampleBuffer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioAssetReaderOutput.SampleBuffer()
{
  return &type metadata for AudioAssetReaderOutput.SampleBuffer;
}

unint64_t sub_1000AC634()
{
  unint64_t result;

  result = qword_1001E9F98;
  if (!qword_1001E9F98)
  {
    result = swift_getWitnessTable(&unk_100187FD4, &type metadata for AudioAssetReaderOutput.Error);
    atomic_store(result, (unint64_t *)&qword_1001E9F98);
  }
  return result;
}

id sub_1000AC678(void *a1, uint64_t a2, char a3, double a4)
{
  id v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  Class isa;
  Class v23;
  id v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v8 = objc_msgSend(a1, "asset");
  v9 = objc_msgSend(v8, "rc_audioTracks");

  v10 = sub_1000AC920();
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  v12 = sub_100014E10(&qword_1001E9FA8);
  inited = swift_initStackObject(v12, &v28);
  *(_OWORD *)(inited + 16) = xmmword_100187EB0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(AVFormatIDKey);
  *(_QWORD *)(inited + 40) = v14;
  *(_QWORD *)(inited + 72) = &type metadata for UInt32;
  *(_DWORD *)(inited + 48) = 1819304813;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(AVSampleRateKey);
  *(_QWORD *)(inited + 88) = v15;
  *(_QWORD *)(inited + 120) = &type metadata for Double;
  *(double *)(inited + 96) = a4;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(AVNumberOfChannelsKey);
  *(_QWORD *)(inited + 136) = v16;
  *(_QWORD *)(inited + 168) = &type metadata for Int;
  *(_QWORD *)(inited + 144) = a2;
  *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(AVLinearPCMIsFloatKey);
  *(_QWORD *)(inited + 184) = v17;
  *(_QWORD *)(inited + 216) = &type metadata for Bool;
  *(_BYTE *)(inited + 192) = 1;
  *(_QWORD *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(AVLinearPCMBitDepthKey);
  *(_QWORD *)(inited + 232) = v18;
  *(_QWORD *)(inited + 264) = &type metadata for Int;
  *(_QWORD *)(inited + 240) = 32;
  *(_QWORD *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)(AVLinearPCMIsNonInterleaved);
  *(_QWORD *)(inited + 280) = v19;
  *(_QWORD *)(inited + 312) = &type metadata for Bool;
  *(_BYTE *)(inited + 288) = a3 ^ 1;
  v20 = sub_100108D38(inited);
  v21 = objc_allocWithZone((Class)AVAssetReaderAudioMixOutput);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v11);
  v23 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v20);
  v24 = objc_msgSend(v21, "initWithAudioTracks:audioSettings:", isa, v23);

  if ((objc_msgSend(a1, "canAddOutput:", v24) & 1) != 0)
  {
    objc_msgSend(a1, "addOutput:", v24);
  }
  else
  {
    v25 = sub_1000AC634();
    swift_allocError(&type metadata for AudioAssetReaderOutput.Error, v25, 0, 0);
    *(_QWORD *)v26 = a1;
    *(_QWORD *)(v26 + 8) = v24;
    *(_QWORD *)(v26 + 16) = 0;
    *(_BYTE *)(v26 + 24) = 0;
    swift_willThrow(a1);
  }
  return v24;
}

unint64_t sub_1000AC920()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001E9FA0;
  if (!qword_1001E9FA0)
  {
    v1 = objc_opt_self(AVAssetTrack);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001E9FA0);
  }
  return result;
}

void sub_1000AC95C(void *a1, void *a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 3:
      swift_release(a1);
      break;
    case 1:

      swift_bridgeObjectRelease(a3);
      break;
    case 0:

      break;
  }
}

id sub_1000AC9DC(id result, void *a2, uint64_t a3, char a4)
{
  id v4;
  id v6;

  switch(a4)
  {
    case 3:
      return (id)swift_retain(result);
    case 1:
      v6 = result;
      swift_bridgeObjectRetain(a3);
      return v6;
    case 0:
      v4 = result;
      return a2;
  }
  return result;
}

void destroy for AudioAssetReaderOutput.Error(uint64_t a1)
{
  sub_1000AC95C(*(void **)a1, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for AudioAssetReaderOutput.Error(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1000AC9DC(*(id *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for AudioAssetReaderOutput.Error(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  char v6;
  void *v7;
  void *v8;
  uint64_t v9;
  char v10;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1000AC9DC(*(id *)a2, v4, v5, v6);
  v7 = *(void **)a1;
  v8 = *(void **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_1000AC95C(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for AudioAssetReaderOutput.Error(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AudioAssetReaderOutput.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_1000AC95C(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioAssetReaderOutput.Error(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioAssetReaderOutput.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000ACC0C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 3u)
    return *(unsigned __int8 *)(a1 + 24);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_1000ACC24(uint64_t result, unsigned int a2)
{
  uint64_t v2;

  v2 = a2 - 4;
  if (a2 >= 4)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    LOBYTE(a2) = 4;
    *(_QWORD *)result = v2;
  }
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AudioAssetReaderOutput.Error()
{
  return &type metadata for AudioAssetReaderOutput.Error;
}

uint64_t sub_1000ACC58@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t Strong;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD v63[3];
  uint64_t v64;
  _UNKNOWN **v65;
  _QWORD v66[3];
  uint64_t v67;

  v2 = v1;
  v4 = (int *)type metadata accessor for TranscriptViewModel(0);
  v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  v8 = (char *)&v54 - v7;
  v9 = v1[16];
  if (v9)
  {
    v10 = type metadata accessor for TranscriptViewPresenter();
    v11 = v9;
  }
  else
  {
    v60 = v6;
    v62 = v1 + 2;
    v12 = sub_10001B474(v1 + 2, v1[5]);
    v13 = *v12;
    v56 = *(_QWORD *)(*v12 + 32);
    v14 = v56;
    v15 = *(_BYTE *)(v13 + 113);
    v16 = *(_BYTE *)(v13 + 114);
    v17 = v2[10];
    v59 = a1;
    v61 = v2 + 7;
    v18 = sub_10001B474(v2 + 7, v17);
    v19 = *(_QWORD *)(*v18 + 64);
    v58 = *(_QWORD *)(*v18 + 72);
    v20 = v58;
    v21 = &v8[v4[10]];
    v22 = type metadata accessor for UIContentUnavailableConfiguration(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
    *(_QWORD *)v8 = v19;
    *((_QWORD *)v8 + 1) = v20;
    *((_QWORD *)v8 + 2) = v14;
    *((_QWORD *)v8 + 3) = _swiftEmptyArrayStorage;
    *((_OWORD *)v8 + 2) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    v8[64] = 1;
    *((_QWORD *)v8 + 9) = 0;
    *((_QWORD *)v8 + 10) = 0;
    *((_WORD *)v8 + 44) = 256;
    *((_QWORD *)v8 + 12) = 0;
    *((_QWORD *)v8 + 13) = 0;
    v8[v4[11]] = v15;
    v8[v4[12]] = v16;
    a1 = v59;
    sub_10001BB88((uint64_t)(v2 + 7), (uint64_t)v66);
    Strong = swift_unknownObjectWeakLoadStrong();
    v54 = v2[13];
    v24 = swift_unknownObjectWeakLoadStrong();
    v55 = v2[15];
    v25 = sub_1000AD178((uint64_t)v66, v67);
    v57 = &v54;
    __chkstk_darwin(v25);
    v27 = (uint64_t *)((char *)&v54 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v28 + 16))(v27);
    v29 = *v27;
    v30 = type metadata accessor for TranscriptViewDataProvider();
    v64 = v30;
    v65 = &off_1001B1FA0;
    v63[0] = v29;
    v31 = type metadata accessor for TranscriptViewController();
    v32 = (_QWORD *)swift_allocObject(v31, 88, 7);
    v33 = sub_1000AD178((uint64_t)v63, v30);
    __chkstk_darwin(v33);
    v35 = (uint64_t *)((char *)&v54 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v36 + 16))(v35);
    v37 = *v35;
    v32[5] = v30;
    v32[6] = &off_1001B1FA0;
    v32[2] = v37;
    v32[8] = 0;
    swift_unknownObjectWeakInit(v32 + 7, 0);
    v32[10] = 0;
    swift_unknownObjectWeakInit(v32 + 9, 0);
    v32[8] = v54;
    swift_unknownObjectWeakAssign(v32 + 7, Strong);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v56);
    swift_unknownObjectRelease(Strong);
    v32[10] = v55;
    swift_unknownObjectWeakAssign(v32 + 9, v24);
    swift_unknownObjectRelease(v24);
    sub_10001B498(v63);
    sub_10001B498(v66);
    v38 = v60;
    sub_1000AD1A0((uint64_t)v8, v60);
    v39 = objc_allocWithZone((Class)type metadata accessor for TranscriptView(0));
    swift_retain(v32);
    v40 = sub_1000F1570(v38, (uint64_t)v32);
    swift_release(v32);
    sub_10001BB88((uint64_t)v62, (uint64_t)v66);
    sub_10001BB88((uint64_t)v61, (uint64_t)v63);
    v41 = sub_1000AD178((uint64_t)v66, v67);
    __chkstk_darwin(v41);
    v43 = (uint64_t *)((char *)&v54 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v44 + 16))(v43);
    v45 = sub_1000AD178((uint64_t)v63, v64);
    __chkstk_darwin(v45);
    v47 = (uint64_t *)((char *)&v54 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v48 + 16))(v47);
    v49 = *v43;
    v50 = *v47;
    v51 = v40;
    v11 = sub_1000AD1E4(v49, v50, (uint64_t)v51);
    sub_10001B498(v63);
    sub_10001B498(v66);
    v52 = v2[16];
    v2[16] = v11;
    swift_retain(v11);
    swift_release(v32);

    swift_release(v52);
    v10 = type metadata accessor for TranscriptViewPresenter();
    sub_1000AD368((uint64_t)v8);
    v9 = 0;
  }
  a1[3] = v10;
  a1[4] = (uint64_t)&off_1001B1DA8;
  *a1 = v11;
  return swift_retain(v9);
}

uint64_t sub_1000AD10C()
{
  _QWORD *v0;

  sub_10001B498(v0 + 2);
  sub_10001B498(v0 + 7);
  sub_1000A3170((uint64_t)(v0 + 12));
  sub_1000A3170((uint64_t)(v0 + 14));
  swift_release(v0[16]);
  swift_release(v0[17]);
  return swift_deallocClassInstance(v0, 144, 7);
}

uint64_t type metadata accessor for TranscriptViewFactory()
{
  return objc_opt_self(_TtC10VoiceMemos21TranscriptViewFactory);
}

uint64_t sub_1000AD178(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1000AD1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TranscriptViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AD1E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  _UNKNOWN **v23;
  __int128 v24;
  uint64_t v25;
  _UNKNOWN **v26;
  _QWORD v27[3];
  uint64_t v28;
  _UNKNOWN **v29;
  _QWORD v30[5];

  v6 = type metadata accessor for TranscriptViewConfigurationProvider();
  v30[3] = v6;
  v30[4] = &off_1001ADF48;
  v30[0] = a1;
  v7 = type metadata accessor for TranscriptViewDataProvider();
  v28 = v7;
  v29 = &off_1001B1FA0;
  v27[0] = a2;
  v8 = type metadata accessor for TranscriptViewPresenter();
  v9 = swift_allocObject(v8, 112, 7);
  v10 = sub_1000AD178((uint64_t)v30, v6);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  v14 = sub_1000AD178((uint64_t)v27, v28);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = *v12;
  v19 = *v16;
  v25 = v6;
  v26 = &off_1001ADF48;
  v23 = &off_1001B1FA0;
  *(_QWORD *)&v24 = v18;
  v22 = v7;
  *(_QWORD *)&v21 = v19;
  *(_QWORD *)(v9 + 104) = 0;
  sub_10001BBCC(&v24, v9 + 16);
  sub_10001BBCC(&v21, v9 + 56);
  *(_QWORD *)(v9 + 96) = a3;
  sub_10001B498(v27);
  sub_10001B498(v30);
  return v9;
}

uint64_t sub_1000AD368(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TranscriptViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1000AD3A4(void *a1)
{
  void *v1;
  id result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  _QWORD v17[4];

  result = objc_msgSend(a1, "UUID");
  if (result)
  {
    v3 = result;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v6 = v5;

    v7 = objc_msgSend(v1, "recordingUUIDToEntityInteraction");
    *(_QWORD *)&v16[0] = v4;
    *((_QWORD *)&v16[0] + 1) = v6;
    swift_bridgeObjectRetain_n(v6, 2);
    v8 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v16, &type metadata for String);
    v9 = objc_msgSend(v7, "__swift_objectForKeyedSubscript:", v8);
    swift_unknownObjectRelease(v8);

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)(v16, v9);
      swift_unknownObjectRelease(v9);
    }
    else
    {
      memset(v16, 0, sizeof(v16));
    }
    sub_100014A70((uint64_t)v16, (uint64_t)v17);
    if (v17[3])
    {
      v10 = sub_100014E10(&qword_1001EA0E8);
      if ((swift_dynamicCast(&v15, v17, (char *)&type metadata for Any + 8, v10, 6) & 1) != 0)
      {
        v11 = v15;
        swift_bridgeObjectRelease(v6);
        result = objc_msgSend(v1, "view");
        if (result)
        {
          v12 = result;
          objc_msgSend(result, "removeInteraction:", v11);

          v13 = objc_msgSend(v1, "recordingUUIDToEntityInteraction");
          v17[0] = v4;
          v17[1] = v6;
          swift_bridgeObjectRetain(v6);
          v14 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v17, &type metadata for String);
          objc_msgSend(v13, "__swift_setObject:forKeyedSubscript:", 0, v14);
          swift_bridgeObjectRelease(v6);

          swift_unknownObjectRelease(v14);
          return (id)swift_unknownObjectRelease(v11);
        }
        else
        {
          __break(1u);
        }
      }
      else
      {
        return (id)swift_bridgeObjectRelease_n(v6, 2);
      }
    }
    else
    {
      swift_bridgeObjectRelease_n(v6, 2);
      return (id)sub_100005440((uint64_t)v17, &qword_1001EA0E0);
    }
  }
  return result;
}

uint64_t sub_1000AD610(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[7] = a1;
  v3[8] = a3;
  v3[9] = *a2;
  v4 = type metadata accessor for MainActor(0);
  v3[10] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000AD684, v5, v6);
}

uint64_t sub_1000AD684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 80));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 40));
    v4 = *(_QWORD *)(v0 + 48);
    sub_1000AD760();
    swift_bridgeObjectRelease(v4);

  }
  v5 = *(_QWORD **)(v0 + 56);
  v5[3] = sub_100014E10((uint64_t *)&unk_1001EBDE0);
  v5[4] = sub_1000ADAA8();
  v6 = sub_1000ADAF4(v5);
  static IntentResult.result<>()(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000AD760()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = objc_msgSend(v0, "libraryActionHandler");
  if (v2)
  {
    v3 = v2;
    if ((objc_msgSend(v2, "isRecording") & 1) != 0)
    {
      v4 = sub_1000ADB30();
      v5 = swift_allocError(&type metadata for SearchRecordingsError, v4, 0, 0);
      swift_willThrow(v5);
      swift_unknownObjectRelease(v3);
    }
    else
    {
      v12 = objc_msgSend(v1, "searchController");
      objc_msgSend(v12, "setActive:", 1);

      v13 = objc_msgSend(v1, "searchController");
      v14 = objc_msgSend(v13, "searchBar");

      v15 = String._bridgeToObjectiveC()();
      objc_msgSend(v14, "setText:", v15);
      swift_unknownObjectRelease(v3);

    }
  }
  else
  {
    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_1000AACFC(v6, (uint64_t)qword_1001F6C20);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v18 = v11;
      *(_DWORD *)v10 = 136315138;
      v16 = sub_1001049A8(0xD000000000000016, 0x8000000100182DC0, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v10 + 4, v10 + 12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s Unable to search recordings. libraryActionHandler is nil.", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }

  }
}

uint64_t sub_1000AD9E4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000ADA20()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000ADA44(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1001EA104);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100003A7C;
  return sub_1000AD610(a1, a2, v2);
}

unint64_t sub_1000ADAA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001EA120;
  if (!qword_1001EA120)
  {
    v1 = sub_10000EE30((uint64_t *)&unk_1001EBDE0);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentResultContainer<A, B, C, D>, v1);
    atomic_store(result, (unint64_t *)&qword_1001EA120);
  }
  return result;
}

_QWORD *sub_1000ADAF4(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

unint64_t sub_1000ADB30()
{
  unint64_t result;

  result = qword_1001EA128;
  if (!qword_1001EA128)
  {
    result = swift_getWitnessTable(&unk_10018981C, &type metadata for SearchRecordingsError);
    atomic_store(result, (unint64_t *)&qword_1001EA128);
  }
  return result;
}

uint64_t sub_1000ADB74(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v2[4] = a1;
  v2[5] = v3;
  v4 = type metadata accessor for MainActor(0);
  v2[6] = v4;
  v2[7] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v2[8] = v5;
  v2[9] = v6;
  return swift_task_switch(sub_1000ADBE8, v5, v6);
}

uint64_t sub_1000ADBE8()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;

  v1 = objc_msgSend((id)objc_opt_self(RecorderAppDelegate), "sharedAppDelegate");
  if (v1
    && (v2 = v1, v3 = objc_msgSend(v1, "defaultSceneDelegate"), v2, v3)
    && (v4 = objc_msgSend(v3, "mainViewController"),
        *(_QWORD *)(v0 + 80) = v4,
        v3,
        v4))
  {
    v6 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 88) = static MainActor.shared.getter(v5);
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    *(_QWORD *)(v0 + 96) = v7;
    *(_QWORD *)(v0 + 104) = v8;
    return swift_task_switch(sub_1000ADD14, v7, v8);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 56);
    v11 = sub_1000B2C70();
    v12 = swift_allocError(&type metadata for RCAppIntentsGenericError, v11, 0, 0);
    *v13 = 0;
    swift_willThrow(v12);
    swift_release(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000ADD14()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  IntentParameter.wrappedValue.getter(v0 + 2);
  v2 = v0[2];
  v1 = v0[3];
  v0[14] = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_1001ED324);
  v0[15] = v3;
  *v3 = v0;
  v3[1] = sub_1000ADD80;
  return sub_100100E9C(v2, v1);
}

uint64_t sub_1000ADD80()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[12];
    v5 = v2[13];
    v6 = sub_1000ADEA4;
  }
  else
  {
    swift_bridgeObjectRelease(v2[14]);
    v4 = v2[12];
    v5 = v2[13];
    v6 = sub_1000ADDEC;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1000ADDEC()
{
  _QWORD *v0;

  swift_release(v0[11]);
  return swift_task_switch(sub_1000ADE24, v0[8], v0[9]);
}

uint64_t sub_1000ADE24()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = *(void **)(v0 + 80);
  v2 = *(_QWORD **)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 56));
  v2[3] = sub_100014E10((uint64_t *)&unk_1001EBDE0);
  v2[4] = sub_1000B2E00((unint64_t *)&qword_1001EA120, (uint64_t *)&unk_1001EBDE0);
  v3 = sub_1000ADAF4(v2);
  static IntentResult.result<>()(v3);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000ADEA4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[14];
  swift_release(v0[11]);
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_1000ADEE8, v0[8], v0[9]);
}

uint64_t sub_1000ADEE8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 56));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000ADF24()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000ADF48(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3[11] = a1;
  v3[12] = a3;
  v5 = type metadata accessor for ConfirmationActionName(0);
  v3[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[14] = v6;
  v3[15] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100014E10(&qword_1001EA1E8);
  v3[16] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[17] = v8;
  v3[18] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  v3[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for IntentDialog(0);
  v3[20] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[21] = v11;
  v12 = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a2;
  v3[22] = v12;
  v3[23] = v13;
  v14 = type metadata accessor for MainActor(0);
  v3[24] = static MainActor.shared.getter(v14);
  v15 = dispatch thunk of Actor.unownedExecutor.getter(v14, &protocol witness table for MainActor);
  v3[25] = v15;
  v3[26] = v16;
  return swift_task_switch(sub_1000AE058, v15, v16);
}

uint64_t sub_1000AE058()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v1 = IntentParameter.wrappedValue.getter(v0 + 8);
  v2 = v0[8];
  v0[27] = v2;
  v3 = IntentParameter.projectedValue.getter(v1);
  v0[28] = v3;
  v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1001EBC08 + dword_1001EBC08);
  v4 = (_QWORD *)swift_task_alloc(unk_1001EBC0C);
  v0[29] = v4;
  *v4 = v0;
  v4[1] = sub_1000AE0DC;
  return v6(v2, v3);
}

uint64_t sub_1000AE0DC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 224);
  v3 = *(_QWORD *)(*v1 + 232);
  v5 = *(_QWORD *)(*v1 + 216);
  *(_QWORD *)(*v1 + 240) = a1;
  swift_task_dealloc(v3);
  swift_release(v4);
  swift_bridgeObjectRelease(v5);
  return swift_task_switch(sub_1000AE150, *(_QWORD *)(v2 + 200), *(_QWORD *)(v2 + 208));
}

uint64_t sub_1000AE150()
{
  _QWORD *v0;
  uint64_t v1;
  void *Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  id v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;

  v1 = v0[12] + 16;
  swift_beginAccess(v1, v0 + 2, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  v3 = v0[30];
  if (!Strong)
  {
    v5 = v0[24];
    swift_bridgeObjectRelease(v3);
    swift_release(v5);
    v6 = sub_1000B2C70();
    v7 = swift_allocError(&type metadata for RCAppIntentsGenericError, v6, 0, 0);
    *v8 = 0;
    swift_willThrow(v7);
    v10 = v0[18];
    v9 = v0[19];
    v11 = v0[15];
    swift_task_dealloc(v0[22]);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  v4 = sub_1000AE760(v3);
  v0[31] = v4;
  v14 = v4;
  swift_bridgeObjectRelease(v0[30]);

  v15 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v16 = objc_msgSend(v15, "rc_deletionIsImmediate");

  if (!v16)
  {
    v26 = v0[12];
    swift_release(v0[24]);
    v26 += 16;
    swift_beginAccess(v26, v0 + 5, 0, 0);
    v27 = swift_unknownObjectWeakLoadStrong(v26);
    if (v27)
    {
      v28 = (void *)v27;
      sub_1000AE9E8(v14);
      swift_bridgeObjectRelease(v14);

    }
    else
    {
      swift_bridgeObjectRelease(v14);
    }
    v29 = v0[22];
    v31 = v0[18];
    v30 = v0[19];
    v32 = v0[15];
    v33 = (_QWORD *)v0[11];
    v33[3] = sub_100014E10((uint64_t *)&unk_1001EBDE0);
    v33[4] = sub_1000B2E00((unint64_t *)&qword_1001EA120, (uint64_t *)&unk_1001EBDE0);
    v34 = sub_1000ADAF4(v33);
    static IntentResult.result<>()(v34);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  v17 = v0[22];
  v18 = v0[23];
  v19 = v0[19];
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(25, 1);
  v20._object = (void *)0x8000000100182FB0;
  v20._countAndFlagsBits = 0xD000000000000019;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v20);
  v0[9] = *(_QWORD *)(v14 + 16);
  String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(v0 + 9, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v21);
  IntentDialog.init(stringInterpolation:)(v19);
  v22 = static IntentResult.result<>(dialog:)(v17);
  v0[10] = v18;
  static ConfirmationActionName.continue.getter(v22);
  v23 = (_QWORD *)swift_task_alloc(async function pointer to AppIntent.requestConfirmation<A>(result:confirmationActionName:showPrompt:)[1]);
  v0[32] = v23;
  v24 = sub_10001C4BC();
  v25 = sub_1000B2E00(&qword_1001EA1F0, &qword_1001EA1E8);
  *v23 = v0;
  v23[1] = sub_1000AE484;
  return AppIntent.requestConfirmation<A>(result:confirmationActionName:showPrompt:)(v0[18], v0[15], 1, &type metadata for DeleteRecording, v0[16], v24, v25);
}

uint64_t sub_1000AE484()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[31];
    (*(void (**)(_QWORD, _QWORD))(v2[14] + 8))(v2[15], v2[13]);
    swift_bridgeObjectRelease(v4);
    v5 = v2[25];
    v6 = v2[26];
    v7 = sub_1000AE660;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[14] + 8))(v2[15], v2[13]);
    v5 = v2[25];
    v6 = v2[26];
    v7 = sub_1000AE514;
  }
  return swift_task_switch(v7, v5, v6);
}

uint64_t sub_1000AE514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Class isa;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 192));
  v8 = objc_msgSend((id)objc_opt_self(RCRecordingsModelInteractor), "sharedRecordingsModelInteractor");
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v1);
  objc_msgSend(v8, "eraseRecordingsWithUUIDs:", isa);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v10 = *(_QWORD *)(v0 + 176);
  v12 = *(_QWORD *)(v0 + 144);
  v11 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD **)(v0 + 88);
  v14[3] = sub_100014E10((uint64_t *)&unk_1001EBDE0);
  v14[4] = sub_1000B2E00((unint64_t *)&qword_1001EA120, (uint64_t *)&unk_1001EBDE0);
  v15 = sub_1000ADAF4(v14);
  static IntentResult.result<>()(v15);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AE660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 192));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v8 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AE6FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1001EA144);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_10001B80C;
  return sub_1000ADF48(a1, a2, v2);
}

uint64_t sub_1000AE760(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = objc_msgSend(v1, "mainViewController");
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "recordingInProgressUUID");
    if (v6)
    {
      v7 = v6;
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v10 = v9;

      v11 = swift_bridgeObjectRetain(a1);
      v2 = sub_1000B3190(v11, v8, v10);
      swift_bridgeObjectRelease(a1);
      swift_bridgeObjectRelease(v10);
      if (*(_QWORD *)(a1 + 16) == 1 && !*(_QWORD *)(v2 + 16))
      {
        swift_bridgeObjectRelease(v2);
        v21 = sub_1000B3AB8();
        v22 = swift_allocError(&type metadata for DeleteRecordingError, v21, 0, 0);
        swift_willThrow(v22);

      }
      else
      {

      }
    }
    else
    {
      swift_bridgeObjectRetain(a1);

      return a1;
    }
  }
  else
  {
    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_1000AACFC(v12, (uint64_t)qword_1001F6C20);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v2 = swift_slowAlloc(32, -1);
      v24 = v2;
      *(_DWORD *)v16 = 136315138;
      v23 = sub_1001049A8(0xD000000000000032, 0x8000000100182FF0, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v16 + 4, v16 + 12);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s Unable to delete folders. RCMainViewController is nil.", v16, 0xCu);
      swift_arrayDestroy(v2, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v2, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }

    v17 = sub_1000B2C70();
    v18 = swift_allocError(&type metadata for RCAppIntentsGenericError, v17, 0, 0);
    *v19 = 0;
    swift_willThrow(v18);
  }
  return v2;
}

void sub_1000AE9E8(uint64_t a1)
{
  void *v1;
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = objc_msgSend(v1, "mainViewController");
  if (!v3)
  {
    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_1000AACFC(v8, (uint64_t)qword_1001F6C20);
    v14 = Logger.logObject.getter(v9);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v16 = v12;
      *(_DWORD *)v11 = 136315138;
      v15 = sub_1001049A8(0xD000000000000018, 0x8000000100182FD0, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v11 + 4, v11 + 12);
      _os_log_impl((void *)&_mh_execute_header, v14, v10, "%s Unable to delete recordings. RCMainViewController is nil.", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      return;
    }
    v3 = v14;
    goto LABEL_11;
  }
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_11:

    return;
  }
  v13 = v3;
  swift_bridgeObjectRetain(a1);
  v5 = (_QWORD *)(a1 + 40);
  do
  {
    v6 = *v5;
    swift_bridgeObjectRetain(*v5);
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
    -[NSObject performAction:atPosition:forUUID:sourceController:source:](v13, "performAction:atPosition:forUUID:sourceController:source:", 14, v7, 0, 0, 0.0);

    v5 += 2;
    --v4;
  }
  while (v4);

  swift_bridgeObjectRelease(a1);
}

uint64_t sub_1000AEC24(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 56) = a1;
  *(_OWORD *)(v2 + 64) = *a2;
  v3 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 80) = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 88) = v4;
  *(_QWORD *)(v2 + 96) = v5;
  return swift_task_switch(sub_1000AEC98, v4, v5);
}

uint64_t sub_1000AEC98()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  sub_1000AEE60(v0 + 2);
  v1 = sub_10001B474(v0 + 2, v0[5]);
  v3 = *v1;
  v2 = v1[1];
  v4 = (_QWORD *)swift_task_alloc(dword_1001ED254);
  v0[13] = v4;
  *v4 = v0;
  v4[1] = sub_1000AED3C;
  return sub_100101DC4(v0[8], v0[9], v3, v2);
}

uint64_t sub_1000AED3C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000AEE20;
  else
    v4 = sub_1000AED9C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
}

uint64_t sub_1000AED9C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 80));
  v1[3] = sub_100014E10((uint64_t *)&unk_1001EBDE0);
  v1[4] = sub_1000B2E00((unint64_t *)&qword_1001EA120, (uint64_t *)&unk_1001EBDE0);
  v2 = sub_1000ADAF4(v1);
  static IntentResult.result<>()(v2);
  sub_10001B498((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AEE20()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  sub_10001B498((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000AEE60(_QWORD *a1@<X8>)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  v2 = objc_msgSend((id)objc_opt_self(RecorderAppDelegate), "sharedAppDelegate");
  if (v2
    && (v3 = v2, v4 = objc_msgSend(v2, "defaultSceneDelegate"), v3, v4)
    && (v5 = objc_msgSend(v4, "mainViewController"), v4, v5))
  {
    v6 = (void *)objc_opt_self(RCApplicationModel);
    v7 = v5;
    v8 = objc_msgSend(v6, "sharedApplicationModel");
    a1[3] = &type metadata for RCPlayRecordingIntentPerformer;
    a1[4] = &off_1001B27E0;

    *a1 = v7;
    a1[1] = v8;
  }
  else
  {
    v9 = sub_1000B2C70();
    v10 = swift_allocError(&type metadata for RCAppIntentsGenericError, v9, 0, 0);
    *v11 = 0;
    swift_willThrow(v10);
  }
}

uint64_t sub_1000AEF78(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[10] = a1;
  v3[11] = a3;
  v3[12] = *a2;
  v4 = type metadata accessor for MainActor(0);
  v3[13] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000AEFEC, v5, v6);
}

uint64_t sub_1000AEFEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 104));
  v1 += 16;
  swift_beginAccess(v1, v0 + 56, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
    v4 = *(_QWORD *)(v0 + 24);
    v5 = *(_QWORD *)(v0 + 32);
    v6 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 48);
    sub_1000B3504();
    swift_bridgeObjectRelease(v4);
    swift_release(v5);
    swift_release(v6);
    swift_release(v7);

  }
  v8 = *(_QWORD **)(v0 + 80);
  v8[3] = sub_100014E10((uint64_t *)&unk_1001EBDE0);
  v8[4] = sub_1000B2E00((unint64_t *)&qword_1001EA120, (uint64_t *)&unk_1001EBDE0);
  v9 = sub_1000ADAF4(v8);
  static IntentResult.result<>()(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AF104(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1001EA16C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_10001B80C;
  return sub_1000AEF78(a1, a2, v2);
}

uint64_t sub_1000AF168(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v3 + 40) = a1;
  *(_QWORD *)(v3 + 48) = a3;
  v5 = type metadata accessor for ChangeOperation(0);
  *(_QWORD *)(v3 + 56) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 64) = v6;
  *(_QWORD *)(v3 + 72) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v3 + 80) = *a2;
  v7 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v3 + 96) = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000AF208, v8, v9);
}

uint64_t sub_1000AF208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 96));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = *(_QWORD **)(v0 + 72);
    IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 104));
    v5 = *(_BYTE *)(v0 + 104);
    IntentParameter.wrappedValue.getter(v4);
    sub_1000AF38C(v5, (uint64_t)v4);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));

  }
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD **)(v0 + 40);
  v7[3] = sub_100014E10((uint64_t *)&unk_1001EBDE0);
  v7[4] = sub_1000B2E00((unint64_t *)&qword_1001EA120, (uint64_t *)&unk_1001EBDE0);
  v8 = sub_1000ADAF4(v7);
  static IntentResult.result<>()(v8);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AF328(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1001EA184);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_10001B80C;
  return sub_1000AF168(a1, a2, v2);
}

void sub_1000AF38C(char a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  id v29;
  int v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __objc2_prot *v57;

  v54 = a2;
  v4 = type metadata accessor for ChangeOperation(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100014E10(&qword_1001EA210);
  __chkstk_darwin(v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(v2, "mainViewController");
  if (!v11)
    goto LABEL_8;
  v12 = v11;
  v53 = v5;
  v13 = objc_msgSend(v11, "selectedUUID");
  if (!v13)
  {

LABEL_8:
    v21 = sub_1000B3A30();
    v22 = swift_allocError(&type metadata for ChangePlaybackSettingsError, v21, 0, 0);
    *v23 = 0;
    swift_willThrow(v22);
    return;
  }
  v14 = v13;
  v52 = v4;
  v57 = &OBJC_PROTOCOL___RCPlaybackSettingsDelegate;
  v15 = swift_dynamicCastObjCProtocolConditional(v12, 1, &v57);
  if (!v15)
  {

    goto LABEL_8;
  }
  v16 = (void *)v15;
  v17 = v12;
  if ((objc_msgSend(v17, "isRecording") & 1) != 0)
  {

    v18 = sub_1000B3A30();
    v19 = swift_allocError(&type metadata for ChangePlaybackSettingsError, v18, 0, 0);
    *v20 = 1;
    swift_willThrow(v19);

    return;
  }
  v51 = v17;
  v24 = a1 & 1;
  v25 = *(int *)(v8 + 48);
  v26 = v53;
  v27 = v52;
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
  v50(v10, v54, v52);
  v10[v25] = v24;
  v28 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v10, v27);
  if (v28 == enum case for ChangeOperation.disable(_:))
  {
    if (v24)
      objc_msgSend(v16, "setRemoveSilence:forUUID:", 0, v14);
    else
      objc_msgSend(v16, "setEnhanced:forUUID:", 0, v14);

    v29 = v51;
LABEL_22:

    goto LABEL_23;
  }
  if (v28 == enum case for ChangeOperation.enable(_:))
  {
    v29 = v51;
    if (v24)
      objc_msgSend(v16, "setRemoveSilence:forUUID:", 1, v14);
    else
      objc_msgSend(v16, "setEnhanced:forUUID:", 1, v14);

    goto LABEL_22;
  }
  v30 = v24;
  v31 = v51;
  if (v28 != enum case for ChangeOperation.toggle(_:))
  {

    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v33 = type metadata accessor for Logger(0);
    sub_1000AACFC(v33, (uint64_t)qword_1001F6C20);
    v32 = v52;
    v34 = ((uint64_t (*)(char *, uint64_t, uint64_t))v50)(v7, v54, v52);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter();
    v37 = v36;
    if (os_log_type_enabled(v35, v36))
    {
      v38 = swift_slowAlloc(32, -1);
      v54 = swift_slowAlloc(96, -1);
      v56 = v54;
      *(_DWORD *)v38 = 136315650;
      LODWORD(v50) = v37;
      v55 = sub_1001049A8(0xD000000000000029, 0x8000000100182F60, &v56);
      v39 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v38 + 4, v38 + 12);
      *(_WORD *)(v38 + 12) = 2080;
      v40 = ChangeOperation.rawValue.getter(v39);
      v42 = v41;
      v55 = sub_1001049A8(v40, v41, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v38 + 14, v38 + 22);
      swift_bridgeObjectRelease(v42);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v7, v52);
      *(_WORD *)(v38 + 22) = 2080;
      if (v30)
        v43 = 0x656C695370696B73;
      else
        v43 = 0xD000000000000010;
      if (v30)
        v44 = 0xEB0000000065636ELL;
      else
        v44 = 0x8000000100182010;
      v55 = sub_1001049A8(v43, v44, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v38 + 24, v38 + 32);
      swift_bridgeObjectRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v50, "%s Unexpected change operation %s and / or setting %s", (uint8_t *)v38, 0x20u);
      v45 = v54;
      swift_arrayDestroy(v54, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      v46 = v38;
      v32 = v52;
      swift_slowDealloc(v46, -1, -1);
      v47 = v51;

    }
    else
    {
      v48 = v51;

      (*(void (**)(char *, uint64_t))(v53 + 8))(v7, v32);
    }

    goto LABEL_24;
  }
  if (v30)
    objc_msgSend(v16, "toggleRemoveSilenceForUUID:", v14);
  else
    objc_msgSend(v16, "toggleEnhanceRecordingForUUID:", v14);

LABEL_23:
  v32 = v52;
LABEL_24:
  (*(void (**)(char *, uint64_t))(v53 + 8))(v10, v32);
}

uint64_t sub_1000AF8EC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3[8] = a1;
  v3[9] = a3;
  v5 = type metadata accessor for LocalizedStringResource(0);
  v3[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[11] = v6;
  v7 = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a2;
  v3[12] = v7;
  v3[13] = v8;
  v9 = type metadata accessor for MainActor(0);
  v3[14] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v3[15] = v10;
  v3[16] = v11;
  return swift_task_switch(sub_1000AF988, v10, v11);
}

uint64_t sub_1000AF988()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = IntentParameter.wrappedValue.getter(v0 + 7);
  v2 = v0[7];
  v0[17] = v2;
  v3 = IntentParameter.projectedValue.getter(v1);
  v0[18] = v3;
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000002ALL, 0x8000000100182E10);
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001EA1D0 + dword_1001EA1D0);
  v4 = (_QWORD *)swift_task_alloc(unk_1001EA1D4);
  v0[19] = v4;
  *v4 = v0;
  v4[1] = sub_1000AFA40;
  return v6(v2, v3, v0[12], (uint64_t)sub_1000AFE90, 0);
}

uint64_t sub_1000AFA40(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 144);
  v3 = *(_QWORD *)(*v1 + 152);
  v5 = *(_QWORD *)(*v1 + 136);
  v7 = *(_QWORD *)(*v1 + 88);
  v6 = *(_QWORD *)(*v1 + 96);
  v8 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 160) = a1;
  swift_task_dealloc(v3);
  swift_release(v4);
  swift_bridgeObjectRelease(v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  return swift_task_switch(sub_1000AFAD4, *(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 128));
}

uint64_t sub_1000AFAD4()
{
  uint64_t v0;
  uint64_t v1;
  void *Strong;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 72) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  v3 = *(_QWORD *)(v0 + 160);
  if (Strong)
  {
    v4 = sub_1000B1C10(v3);
    *(_QWORD *)(v0 + 168) = v4;
    v9 = (uint64_t)v4;
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));

    v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1001EA1D8 + dword_1001EA1D8);
    v10 = (_QWORD *)swift_task_alloc(unk_1001EA1DC);
    *(_QWORD *)(v0 + 176) = v10;
    *v10 = v0;
    v10[1] = sub_1000AFC1C;
    return v12(*(_QWORD *)(v0 + 104), v9);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 112);
    swift_bridgeObjectRelease(v3);
    swift_release(v5);
    v6 = sub_1000B2C70();
    v7 = swift_allocError(&type metadata for RCAppIntentsGenericError, v6, 0, 0);
    *v8 = 0;
    swift_willThrow(v7);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000AFC1C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[21]);
    v4 = v2[15];
    v5 = v2[16];
    v6 = sub_1000AFDF0;
  }
  else
  {
    v4 = v2[15];
    v5 = v2[16];
    v6 = sub_1000AFC88;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1000AFC88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  NSString v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v1 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 112));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 168);
    v4 = (void *)objc_opt_self(RCRecordingsModelInteractor);
    v5 = (uint64_t *)(v3 + 56);
    do
    {
      v7 = *(v5 - 2);
      v6 = *(v5 - 1);
      v8 = *v5;
      v5 += 5;
      swift_bridgeObjectRetain(v7);
      swift_retain(v6);
      swift_retain(v8);
      v9 = objc_msgSend(v4, "sharedRecordingsModelInteractor");
      EntityProperty.wrappedValue.getter((_QWORD *)(v0 + 40));
      v10 = *(_QWORD *)(v0 + 48);
      v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v10);
      objc_msgSend(v9, "deleteUserFolderWithName:", v11);

      swift_bridgeObjectRelease(v7);
      swift_release(v6);
      swift_release(v8);
      --v2;
    }
    while (v2);
  }
  v12 = *(_QWORD *)(v0 + 96);
  v13 = *(_QWORD **)(v0 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168));
  v13[3] = sub_100014E10((uint64_t *)&unk_1001EBDE0);
  v13[4] = sub_1000B2E00((unint64_t *)&qword_1001EA120, (uint64_t *)&unk_1001EBDE0);
  v14 = sub_1000ADAF4(v13);
  static IntentResult.result<>()(v14);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AFDF0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AFE2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1001EA19C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_10001B80C;
  return sub_1000AF8EC(a1, a2, v2);
}

uint64_t sub_1000AFE90()
{
  uint64_t v0;
  uint64_t countAndFlagsBits;
  _QWORD v3[2];

  EntityProperty.wrappedValue.getter(v3);
  v0 = v3[1];
  countAndFlagsBits = String.lowercased()()._countAndFlagsBits;
  swift_bridgeObjectRelease(v0);
  return countAndFlagsBits;
}

uint64_t sub_1000AFEF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  v6 = sub_100014E10(&qword_1001EA200);
  v5[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizedStringResource(0);
  v5[14] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[15] = v8;
  v5[16] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IntentDialog(0);
  v5[17] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[18] = v10;
  v5[19] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MainActor(0);
  v5[20] = static MainActor.shared.getter(v11);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  v5[21] = v12;
  v5[22] = v13;
  return swift_task_switch(sub_1000AFFD8, v12, v13);
}

uint64_t sub_1000AFFD8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = (_QWORD *)(v0 + 64);
  v2 = *(uint64_t (**)(uint64_t *))(v0 + 88);
  v3 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
  v4 = sub_1000B2EAC(v3, v2);
  *(_QWORD *)(v0 + 184) = v4;
  v15 = 0;
  v16 = *(_BYTE *)(v4 + 32);
  *(_BYTE *)(v0 + 240) = v16;
  v17 = 1 << v16;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & *(_QWORD *)(v4 + 64);
  v11 = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + 232) = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v19)
    {
      v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v21 = v20 | (v15 << 6);
      result = *(_QWORD *)(v0 + 184);
      goto LABEL_25;
    }
    if (__OFADD__(v15++, 1))
    {
      __break(1u);
      swift_once(&qword_1001E8F80, sub_1000B5218);
      v5 = type metadata accessor for Logger(0);
      v6 = sub_1000AACFC(v5, (uint64_t)qword_1001F6C20);
      v7 = Logger.logObject.getter(v6);
      v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc(12, -1);
        v10 = swift_slowAlloc(32, -1);
        v44 = v10;
        *(_DWORD *)v9 = 136315138;
        *(v1 - 1) = sub_1001049A8(0xD000000000000066, 0x8000000100182EF0, &v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 1, v1, v9 + 4, v9 + 12);
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s Failed to map disambiguation key to entities list", v9, 0xCu);
        swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v10, -1, -1);
        swift_slowDealloc(v9, -1, -1);
      }
      swift_errorRelease(0);

      v11 = _swiftEmptyArrayStorage;
      goto LABEL_5;
    }
    v23 = (unint64_t)((1 << *(_BYTE *)(v0 + 240)) + 63) >> 6;
    result = *(_QWORD *)(v0 + 184);
    if (v15 >= v23)
      goto LABEL_37;
    v24 = result + 64;
    v25 = *(_QWORD *)(result + 64 + 8 * v15);
    if (v25)
      goto LABEL_24;
    v26 = v15 + 1;
    if (v15 + 1 >= v23)
      goto LABEL_37;
    v25 = *(_QWORD *)(v24 + 8 * v26);
    if (!v25)
    {
      v26 = v15 + 2;
      if (v15 + 2 >= v23)
        goto LABEL_37;
      v25 = *(_QWORD *)(v24 + 8 * v26);
      if (!v25)
      {
        v26 = v15 + 3;
        if (v15 + 3 >= v23)
          goto LABEL_37;
        v25 = *(_QWORD *)(v24 + 8 * v26);
        if (!v25)
          break;
      }
    }
LABEL_23:
    v15 = v26;
LABEL_24:
    v19 = (v25 - 1) & v25;
    v21 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_25:
    *(_QWORD *)(v0 + 192) = v19;
    *(_QWORD *)(v0 + 200) = v15;
    v1 = *(_QWORD **)(*(_QWORD *)(result + 56) + 8 * v21);
    *(_QWORD *)(v0 + 208) = v1;
    v27 = v1[2];
    if (v27 >= 2)
    {
      v36 = *(_QWORD *)(v0 + 144);
      v37 = *(_QWORD *)(v0 + 152);
      v39 = *(_QWORD *)(v0 + 128);
      v38 = *(_QWORD *)(v0 + 136);
      v40 = *(_QWORD *)(v0 + 104);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 16))(v39, *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 112));
      swift_bridgeObjectRetain(v1);
      IntentDialog.init(_:)(v39);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v40, v37, v38);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v40, 0, 1, v38);
      v41 = (_QWORD *)swift_task_alloc(async function pointer to IntentParameter.requestDisambiguation(among:dialog:)[1]);
      *(_QWORD *)(v0 + 216) = v41;
      *v41 = v0;
      v41[1] = sub_1000B04B0;
      return IntentParameter.requestDisambiguation(among:dialog:)(v0 + 16, v1, *(_QWORD *)(v0 + 104));
    }
    if (v27)
    {
      v28 = v1[5];
      v43 = v1[4];
      v30 = v1[6];
      v29 = v1[7];
      v1 = (_QWORD *)v1[8];
      swift_bridgeObjectRetain_n(v28, 2);
      swift_retain_n(v30, 2);
      swift_retain_n(v29, 2);
      swift_retain_n(v1, 2);
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
        v11 = sub_1000C98C0(0, v11[2] + 1, 1, v11);
      v32 = v11[2];
      v31 = v11[3];
      v33 = v32 + 1;
      if (v32 >= v31 >> 1)
      {
        v35 = sub_1000C98C0((_QWORD *)(v31 > 1), v32 + 1, 1, v11);
        v33 = v32 + 1;
        v11 = v35;
      }
      v11[2] = v33;
      v34 = &v11[5 * v32];
      v34[4] = v43;
      v34[5] = v28;
      v34[6] = v30;
      v34[7] = v29;
      v34[8] = v1;
      swift_bridgeObjectRelease(v28);
      swift_release(v30);
      swift_release(v29);
      swift_release(v1);
      *(_QWORD *)(v0 + 232) = v11;
    }
  }
  v26 = v15 + 4;
  if (v15 + 4 >= v23)
  {
LABEL_37:
    v42 = *(_QWORD *)(v0 + 160);
    swift_release(result);
    swift_release(v42);
LABEL_5:
    v12 = *(_QWORD *)(v0 + 128);
    v13 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v11);
  }
  v25 = *(_QWORD *)(v24 + 8 * v26);
  if (v25)
    goto LABEL_23;
  while (1)
  {
    v15 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v15 >= v23)
      goto LABEL_37;
    v25 = *(_QWORD *)(v24 + 8 * v15);
    ++v26;
    if (v25)
      goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B04B0()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = (*v1)[27];
  (*v1)[28] = v0;
  swift_task_dealloc(v3);
  v4 = v2[26];
  sub_1000B39F0(v2[13]);
  swift_bridgeObjectRelease(v4);
  if (v0)
    v5 = sub_1000B0948;
  else
    v5 = sub_1000B052C;
  return swift_task_switch(v5, v2[21], v2[22]);
}

uint64_t sub_1000B052C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = v0 + 16;
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(v5);
  swift_retain(v4);
  swift_retain(v7);
  swift_retain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v9 = *(_QWORD **)(v0 + 232);
  v41 = v2;
  v42 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
LABEL_33:
    v9 = sub_1000C98C0(0, v9[2] + 1, 1, v9);
  v11 = v9[2];
  v10 = v9[3];
  v40 = v1;
  v12 = v6;
  if (v11 >= v10 >> 1)
    v9 = sub_1000C98C0((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
  v6 = *(_QWORD *)(v0 + 144);
  v13 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 136);
  v9[2] = v11 + 1;
  v15 = &v9[5 * v11];
  v15[4] = v41;
  v15[5] = v5;
  v15[6] = v4;
  v15[7] = v42;
  v15[8] = v12;
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v42);
  swift_release(v12);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v13, v14);
  v1 = *(_QWORD *)(v0 + 192);
  v16 = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 232) = v9;
  while (1)
  {
    if (v1)
    {
      v17 = __clz(__rbit64(v1));
      v1 &= v1 - 1;
      v18 = v17 | (v16 << 6);
      result = *(_QWORD *)(v0 + 184);
      goto LABEL_23;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    v21 = (unint64_t)((1 << *(_BYTE *)(v0 + 240)) + 63) >> 6;
    result = *(_QWORD *)(v0 + 184);
    if (v20 >= v21)
      goto LABEL_31;
    v22 = result + 64;
    v23 = *(_QWORD *)(result + 64 + 8 * v20);
    ++v16;
    if (!v23)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v21)
        goto LABEL_31;
      v23 = *(_QWORD *)(v22 + 8 * v16);
      if (!v23)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v21)
          goto LABEL_31;
        v23 = *(_QWORD *)(v22 + 8 * v16);
        if (!v23)
        {
          v16 = v20 + 3;
          if (v20 + 3 >= v21)
            goto LABEL_31;
          v23 = *(_QWORD *)(v22 + 8 * v16);
          if (!v23)
            break;
        }
      }
    }
LABEL_22:
    v1 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_23:
    *(_QWORD *)(v0 + 192) = v1;
    *(_QWORD *)(v0 + 200) = v16;
    v6 = *(_QWORD *)(*(_QWORD *)(result + 56) + 8 * v18);
    *(_QWORD *)(v0 + 208) = v6;
    v25 = *(_QWORD *)(v6 + 16);
    if (v25 >= 2)
    {
      v32 = *(_QWORD *)(v0 + 144);
      v31 = *(_QWORD *)(v0 + 152);
      v34 = *(_QWORD *)(v0 + 128);
      v33 = *(_QWORD *)(v0 + 136);
      v35 = *(_QWORD *)(v0 + 104);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 16))(v34, *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 112));
      swift_bridgeObjectRetain(v6);
      IntentDialog.init(_:)(v34);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v35, v31, v33);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v35, 0, 1, v33);
      v36 = (_QWORD *)swift_task_alloc(async function pointer to IntentParameter.requestDisambiguation(among:dialog:)[1]);
      *(_QWORD *)(v0 + 216) = v36;
      *v36 = v0;
      v36[1] = sub_1000B04B0;
      return IntentParameter.requestDisambiguation(among:dialog:)(v40, v6, *(_QWORD *)(v0 + 104));
    }
    if (v25)
    {
      v26 = *(_QWORD *)(v6 + 32);
      v5 = *(_QWORD *)(v6 + 40);
      v4 = *(_QWORD *)(v6 + 48);
      v27 = *(_QWORD *)(v6 + 56);
      v6 = *(_QWORD *)(v6 + 64);
      swift_bridgeObjectRetain_n(v5, 2);
      swift_retain_n(v4, 2);
      swift_retain_n(v27, 2);
      swift_retain_n(v6, 2);
      v42 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        v9 = sub_1000C98C0(0, v9[2] + 1, 1, v9);
      v29 = v9[2];
      v28 = v9[3];
      if (v29 >= v28 >> 1)
        v9 = sub_1000C98C0((_QWORD *)(v28 > 1), v29 + 1, 1, v9);
      v9[2] = v29 + 1;
      v30 = &v9[5 * v29];
      v30[4] = v26;
      v30[5] = v5;
      v30[6] = v4;
      v30[7] = v27;
      v30[8] = v6;
      swift_bridgeObjectRelease(v5);
      swift_release(v4);
      swift_release(v27);
      swift_release(v6);
      *(_QWORD *)(v0 + 232) = v9;
    }
  }
  v24 = v20 + 4;
  if (v24 >= v21)
  {
LABEL_31:
    v37 = *(_QWORD *)(v0 + 160);
    swift_release(result);
    swift_release(v37);
    v38 = *(_QWORD *)(v0 + 128);
    v39 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v9);
  }
  v23 = *(_QWORD *)(v22 + 8 * v24);
  if (v23)
  {
    v16 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v16 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v16 >= v21)
      goto LABEL_31;
    v23 = *(_QWORD *)(v22 + 8 * v16);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B0948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
  if (qword_1001E8F80 != -1)
LABEL_33:
    swift_once(&qword_1001E8F80, sub_1000B5218);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000AACFC(v1, (uint64_t)qword_1001F6C20);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 224);
  if (v5)
  {
    v7 = swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v40 = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v7 + 4) = sub_1001049A8(0xD000000000000066, 0x8000000100182EF0, &v40);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s Failed to disambiguate entities", (uint8_t *)v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  swift_errorRelease(v6);

  v9 = *(_QWORD **)(v0 + 232);
  v10 = *(_QWORD *)(v0 + 192);
  v11 = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 232) = v9;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v11 << 6);
      result = *(_QWORD *)(v0 + 184);
      goto LABEL_23;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    v16 = (unint64_t)((1 << *(_BYTE *)(v0 + 240)) + 63) >> 6;
    result = *(_QWORD *)(v0 + 184);
    if (v15 >= v16)
      goto LABEL_31;
    v17 = result + 64;
    v18 = *(_QWORD *)(result + 64 + 8 * v15);
    ++v11;
    if (!v18)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v16)
        goto LABEL_31;
      v18 = *(_QWORD *)(v17 + 8 * v11);
      if (!v18)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v16)
          goto LABEL_31;
        v18 = *(_QWORD *)(v17 + 8 * v11);
        if (!v18)
        {
          v11 = v15 + 3;
          if (v15 + 3 >= v16)
            goto LABEL_31;
          v18 = *(_QWORD *)(v17 + 8 * v11);
          if (!v18)
            break;
        }
      }
    }
LABEL_22:
    v10 = (v18 - 1) & v18;
    v13 = __clz(__rbit64(v18)) + (v11 << 6);
LABEL_23:
    *(_QWORD *)(v0 + 192) = v10;
    *(_QWORD *)(v0 + 200) = v11;
    v20 = *(_QWORD **)(*(_QWORD *)(result + 56) + 8 * v13);
    *(_QWORD *)(v0 + 208) = v20;
    v21 = v20[2];
    if (v21 >= 2)
    {
      v30 = *(_QWORD *)(v0 + 144);
      v31 = *(_QWORD *)(v0 + 152);
      v33 = *(_QWORD *)(v0 + 128);
      v32 = *(_QWORD *)(v0 + 136);
      v34 = *(_QWORD *)(v0 + 104);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 16))(v33, *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 112));
      swift_bridgeObjectRetain(v20);
      IntentDialog.init(_:)(v33);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v34, v31, v32);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v34, 0, 1, v32);
      v35 = (_QWORD *)swift_task_alloc(async function pointer to IntentParameter.requestDisambiguation(among:dialog:)[1]);
      *(_QWORD *)(v0 + 216) = v35;
      *v35 = v0;
      v35[1] = sub_1000B04B0;
      return IntentParameter.requestDisambiguation(among:dialog:)(v0 + 16, v20, *(_QWORD *)(v0 + 104));
    }
    if (v21)
    {
      v23 = v20[4];
      v22 = v20[5];
      v25 = v20[6];
      v24 = v20[7];
      v26 = v20[8];
      swift_bridgeObjectRetain_n(v22, 2);
      swift_retain_n(v25, 2);
      swift_retain_n(v24, 2);
      swift_retain_n(v26, 2);
      v39 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        v9 = sub_1000C98C0(0, v9[2] + 1, 1, v9);
      v28 = v9[2];
      v27 = v9[3];
      if (v28 >= v27 >> 1)
        v9 = sub_1000C98C0((_QWORD *)(v27 > 1), v28 + 1, 1, v9);
      v9[2] = v28 + 1;
      v29 = &v9[5 * v28];
      v29[4] = v39;
      v29[5] = v22;
      v29[6] = v25;
      v29[7] = v24;
      v29[8] = v26;
      swift_bridgeObjectRelease(v22);
      swift_release(v25);
      swift_release(v24);
      swift_release(v26);
      *(_QWORD *)(v0 + 232) = v9;
    }
  }
  v19 = v15 + 4;
  if (v19 >= v16)
  {
LABEL_31:
    v36 = *(_QWORD *)(v0 + 160);
    swift_release(result);
    swift_release(v36);
    v37 = *(_QWORD *)(v0 + 128);
    v38 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v9);
  }
  v18 = *(_QWORD *)(v17 + 8 * v19);
  if (v18)
  {
    v11 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v11 >= v16)
      goto LABEL_31;
    v18 = *(_QWORD *)(v17 + 8 * v11);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B0DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  v6 = sub_100014E10(&qword_1001EA200);
  v5[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizedStringResource(0);
  v5[14] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[15] = v8;
  v5[16] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IntentDialog(0);
  v5[17] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[18] = v10;
  v5[19] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MainActor(0);
  v5[20] = static MainActor.shared.getter(v11);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  v5[21] = v12;
  v5[22] = v13;
  return swift_task_switch(sub_1000B0E90, v12, v13);
}

uint64_t sub_1000B0E90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = v0 + 64;
  v2 = *(uint64_t (**)(uint64_t *))(v0 + 88);
  v3 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
  v4 = sub_1000B372C(v3, v2);
  *(_QWORD *)(v0 + 184) = v4;
  v15 = 0;
  v16 = *(_BYTE *)(v4 + 32);
  *(_BYTE *)(v0 + 240) = v16;
  v17 = 1 << v16;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & *(_QWORD *)(v4 + 64);
  v11 = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + 232) = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v19)
    {
      v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v21 = v20 | (v15 << 6);
      result = *(_QWORD *)(v0 + 184);
      goto LABEL_25;
    }
    if (__OFADD__(v15++, 1))
    {
      __break(1u);
      swift_once(&qword_1001E8F80, sub_1000B5218);
      v5 = type metadata accessor for Logger(0);
      v6 = sub_1000AACFC(v5, (uint64_t)qword_1001F6C20);
      v7 = Logger.logObject.getter(v6);
      v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc(12, -1);
        v10 = swift_slowAlloc(32, -1);
        v43 = v10;
        *(_DWORD *)v9 = 136315138;
        *(_QWORD *)(v1 - 8) = sub_1001049A8(0xD000000000000066, 0x8000000100182EF0, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 8, v1, v9 + 4, v9 + 12);
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s Failed to map disambiguation key to entities list", v9, 0xCu);
        swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v10, -1, -1);
        swift_slowDealloc(v9, -1, -1);
      }
      swift_errorRelease(0);

      v11 = _swiftEmptyArrayStorage;
      goto LABEL_5;
    }
    v23 = (unint64_t)((1 << *(_BYTE *)(v0 + 240)) + 63) >> 6;
    result = *(_QWORD *)(v0 + 184);
    if (v15 >= v23)
      goto LABEL_37;
    v24 = result + 64;
    v25 = *(_QWORD *)(result + 64 + 8 * v15);
    if (v25)
      goto LABEL_24;
    v26 = v15 + 1;
    if (v15 + 1 >= v23)
      goto LABEL_37;
    v25 = *(_QWORD *)(v24 + 8 * v26);
    if (!v25)
    {
      v26 = v15 + 2;
      if (v15 + 2 >= v23)
        goto LABEL_37;
      v25 = *(_QWORD *)(v24 + 8 * v26);
      if (!v25)
      {
        v26 = v15 + 3;
        if (v15 + 3 >= v23)
          goto LABEL_37;
        v25 = *(_QWORD *)(v24 + 8 * v26);
        if (!v25)
          break;
      }
    }
LABEL_23:
    v15 = v26;
LABEL_24:
    v19 = (v25 - 1) & v25;
    v21 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_25:
    *(_QWORD *)(v0 + 192) = v19;
    *(_QWORD *)(v0 + 200) = v15;
    v27 = *(_QWORD **)(*(_QWORD *)(result + 56) + 8 * v21);
    *(_QWORD *)(v0 + 208) = v27;
    v28 = v27[2];
    if (v28 >= 2)
    {
      v35 = *(_QWORD *)(v0 + 144);
      v34 = *(_QWORD *)(v0 + 152);
      v37 = *(_QWORD *)(v0 + 128);
      v36 = *(_QWORD *)(v0 + 136);
      v38 = *(_QWORD *)(v0 + 104);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 16))(v37, *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 112));
      swift_bridgeObjectRetain(v27);
      IntentDialog.init(_:)(v37);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v38, v34, v36);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v38, 0, 1, v36);
      v39 = (_QWORD *)swift_task_alloc(async function pointer to IntentParameter.requestDisambiguation(among:dialog:)[1]);
      *(_QWORD *)(v0 + 216) = v39;
      *v39 = v0;
      v39[1] = sub_1000B1350;
      return IntentParameter.requestDisambiguation(among:dialog:)(v0 + 16, v27, *(_QWORD *)(v0 + 104));
    }
    if (v28)
    {
      v29 = v27[5];
      v30 = v27[6];
      v1 = v27[7];
      v41 = v27[8];
      v42 = v27[4];
      swift_bridgeObjectRetain_n(v29, 2);
      swift_retain_n(v30, 2);
      swift_retain_n(v1, 2);
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
        v11 = sub_1000C99E0(0, v11[2] + 1, 1, v11);
      v32 = v11[2];
      v31 = v11[3];
      if (v32 >= v31 >> 1)
        v11 = sub_1000C99E0((_QWORD *)(v31 > 1), v32 + 1, 1, v11);
      v11[2] = v32 + 1;
      v33 = &v11[5 * v32];
      v33[4] = v42;
      v33[5] = v29;
      v33[6] = v30;
      v33[7] = v1;
      v33[8] = v41;
      swift_bridgeObjectRelease(v29);
      swift_release(v30);
      swift_release(v1);
      *(_QWORD *)(v0 + 232) = v11;
    }
  }
  v26 = v15 + 4;
  if (v15 + 4 >= v23)
  {
LABEL_37:
    v40 = *(_QWORD *)(v0 + 160);
    swift_release(result);
    swift_release(v40);
LABEL_5:
    v12 = *(_QWORD *)(v0 + 128);
    v13 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v11);
  }
  v25 = *(_QWORD *)(v24 + 8 * v26);
  if (v25)
    goto LABEL_23;
  while (1)
  {
    v15 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v15 >= v23)
      goto LABEL_37;
    v25 = *(_QWORD *)(v24 + 8 * v15);
    ++v26;
    if (v25)
      goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B1350()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = (*v1)[27];
  (*v1)[28] = v0;
  swift_task_dealloc(v3);
  v4 = v2[26];
  sub_1000B39F0(v2[13]);
  swift_bridgeObjectRelease(v4);
  if (v0)
    v5 = sub_1000B17C8;
  else
    v5 = sub_1000B13CC;
  return swift_task_switch(v5, v2[21], v2[22]);
}

uint64_t sub_1000B13CC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t result;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;

  v1 = v0 + 16;
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(v5);
  swift_retain(v4);
  swift_retain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v9 = *(_QWORD **)(v0 + 232);
  v42 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
LABEL_33:
    v9 = sub_1000C99E0(0, v9[2] + 1, 1, v9);
  v11 = v9[2];
  v10 = v9[3];
  v12 = v9;
  v41 = v1;
  v13 = v7;
  if (v11 >= v10 >> 1)
    v12 = sub_1000C99E0((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
  v7 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 136);
  v12[2] = v11 + 1;
  v15 = &v12[5 * v11];
  v15[4] = v42;
  v15[5] = v5;
  v15[6] = v4;
  v15[7] = v6;
  v15[8] = v13;
  v16 = v12;
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v6);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v1, v14);
  v18 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 232) = v16;
  while (1)
  {
    if (v18)
    {
      v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v20 = v19 | (v17 << 6);
      result = *(_QWORD *)(v0 + 184);
      goto LABEL_23;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    v23 = (unint64_t)((1 << *(_BYTE *)(v0 + 240)) + 63) >> 6;
    result = *(_QWORD *)(v0 + 184);
    if (v22 >= v23)
      goto LABEL_31;
    v24 = result + 64;
    v25 = *(_QWORD *)(result + 64 + 8 * v22);
    ++v17;
    if (!v25)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v23)
        goto LABEL_31;
      v25 = *(_QWORD *)(v24 + 8 * v17);
      if (!v25)
      {
        v17 = v22 + 2;
        if (v22 + 2 >= v23)
          goto LABEL_31;
        v25 = *(_QWORD *)(v24 + 8 * v17);
        if (!v25)
        {
          v17 = v22 + 3;
          if (v22 + 3 >= v23)
            goto LABEL_31;
          v25 = *(_QWORD *)(v24 + 8 * v17);
          if (!v25)
            break;
        }
      }
    }
LABEL_22:
    v18 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v17 << 6);
LABEL_23:
    *(_QWORD *)(v0 + 192) = v18;
    *(_QWORD *)(v0 + 200) = v17;
    v9 = *(_QWORD **)(result + 56);
    v27 = (_QWORD *)v9[v20];
    *(_QWORD *)(v0 + 208) = v27;
    v28 = v27[2];
    if (v28 >= 2)
    {
      v33 = *(_QWORD *)(v0 + 144);
      v32 = *(_QWORD *)(v0 + 152);
      v35 = *(_QWORD *)(v0 + 128);
      v34 = *(_QWORD *)(v0 + 136);
      v36 = *(_QWORD *)(v0 + 104);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 16))(v35, *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 112));
      swift_bridgeObjectRetain(v27);
      IntentDialog.init(_:)(v35);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v36, v32, v34);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v36, 0, 1, v34);
      v37 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to IntentParameter.requestDisambiguation(among:dialog:)
                                       + 1));
      *(_QWORD *)(v0 + 216) = v37;
      *v37 = v0;
      v37[1] = sub_1000B1350;
      return IntentParameter.requestDisambiguation(among:dialog:)(v41, v27, *(_QWORD *)(v0 + 104));
    }
    if (v28)
    {
      v7 = v27[4];
      v5 = v27[5];
      v4 = v27[6];
      v6 = v27[7];
      v29 = v27[8];
      swift_bridgeObjectRetain_n(v5, 2);
      swift_retain_n(v4, 2);
      swift_retain_n(v6, 2);
      v42 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
        v16 = sub_1000C99E0(0, v16[2] + 1, 1, v16);
      v1 = v16[2];
      v30 = v16[3];
      if (v1 >= v30 >> 1)
        v16 = sub_1000C99E0((_QWORD *)(v30 > 1), v1 + 1, 1, v16);
      v16[2] = v1 + 1;
      v31 = &v16[5 * v1];
      v31[4] = v7;
      v31[5] = v5;
      v31[6] = v4;
      v31[7] = v6;
      v31[8] = v42;
      swift_bridgeObjectRelease(v5);
      swift_release(v4);
      swift_release(v6);
      *(_QWORD *)(v0 + 232) = v16;
    }
  }
  v26 = v22 + 4;
  if (v26 >= v23)
  {
LABEL_31:
    v38 = *(_QWORD *)(v0 + 160);
    swift_release(result);
    swift_release(v38);
    v39 = *(_QWORD *)(v0 + 128);
    v40 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v16);
  }
  v25 = *(_QWORD *)(v24 + 8 * v26);
  if (v25)
  {
    v17 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    v17 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v17 >= v23)
      goto LABEL_31;
    v25 = *(_QWORD *)(v24 + 8 * v17);
    ++v26;
    if (v25)
      goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B17C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
  if (qword_1001E8F80 != -1)
LABEL_34:
    swift_once(&qword_1001E8F80, sub_1000B5218);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000AACFC(v1, (uint64_t)qword_1001F6C20);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 224);
  if (v5)
  {
    v7 = swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v40 = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v7 + 4) = sub_1001049A8(0xD000000000000066, 0x8000000100182EF0, &v40);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s Failed to disambiguate entities", (uint8_t *)v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  swift_errorRelease(v6);

  v9 = *(_QWORD **)(v0 + 232);
  v10 = *(_QWORD *)(v0 + 192);
  v11 = *(_QWORD *)(v0 + 200);
LABEL_5:
  *(_QWORD *)(v0 + 232) = v9;
  while (v10)
  {
    v12 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v13 = v12 | (v11 << 6);
    result = *(_QWORD *)(v0 + 184);
LABEL_24:
    *(_QWORD *)(v0 + 192) = v10;
    *(_QWORD *)(v0 + 200) = v11;
    v20 = *(_QWORD **)(*(_QWORD *)(result + 56) + 8 * v13);
    *(_QWORD *)(v0 + 208) = v20;
    v21 = v20[2];
    if (v21 >= 2)
    {
      v30 = *(_QWORD *)(v0 + 144);
      v31 = *(_QWORD *)(v0 + 152);
      v33 = *(_QWORD *)(v0 + 128);
      v32 = *(_QWORD *)(v0 + 136);
      v34 = *(_QWORD *)(v0 + 104);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 16))(v33, *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 112));
      swift_bridgeObjectRetain(v20);
      IntentDialog.init(_:)(v33);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v34, v31, v32);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v34, 0, 1, v32);
      v35 = (_QWORD *)swift_task_alloc(async function pointer to IntentParameter.requestDisambiguation(among:dialog:)[1]);
      *(_QWORD *)(v0 + 216) = v35;
      *v35 = v0;
      v35[1] = sub_1000B1350;
      return IntentParameter.requestDisambiguation(among:dialog:)(v0 + 16, v20, *(_QWORD *)(v0 + 104));
    }
    if (v21)
    {
      v23 = v20[4];
      v22 = v20[5];
      v25 = v20[6];
      v24 = v20[7];
      v26 = v20[8];
      swift_bridgeObjectRetain_n(v22, 2);
      swift_retain_n(v25, 2);
      swift_retain_n(v24, 2);
      v39 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        v9 = sub_1000C99E0(0, v9[2] + 1, 1, v9);
      v28 = v9[2];
      v27 = v9[3];
      if (v28 >= v27 >> 1)
        v9 = sub_1000C99E0((_QWORD *)(v27 > 1), v28 + 1, 1, v9);
      v9[2] = v28 + 1;
      v29 = &v9[5 * v28];
      v29[4] = v23;
      v29[5] = v22;
      v29[6] = v25;
      v29[7] = v24;
      v29[8] = v39;
      swift_bridgeObjectRelease(v22);
      swift_release(v25);
      swift_release(v24);
      goto LABEL_5;
    }
  }
  v15 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  v16 = (unint64_t)((1 << *(_BYTE *)(v0 + 240)) + 63) >> 6;
  result = *(_QWORD *)(v0 + 184);
  if (v15 >= v16)
    goto LABEL_32;
  v17 = result + 64;
  v18 = *(_QWORD *)(result + 64 + 8 * v15);
  ++v11;
  if (v18)
    goto LABEL_23;
  v11 = v15 + 1;
  if (v15 + 1 >= v16)
    goto LABEL_32;
  v18 = *(_QWORD *)(v17 + 8 * v11);
  if (v18)
    goto LABEL_23;
  v11 = v15 + 2;
  if (v15 + 2 >= v16)
    goto LABEL_32;
  v18 = *(_QWORD *)(v17 + 8 * v11);
  if (v18)
    goto LABEL_23;
  v11 = v15 + 3;
  if (v15 + 3 >= v16)
    goto LABEL_32;
  v18 = *(_QWORD *)(v17 + 8 * v11);
  if (v18)
  {
LABEL_23:
    v10 = (v18 - 1) & v18;
    v13 = __clz(__rbit64(v18)) + (v11 << 6);
    goto LABEL_24;
  }
  v19 = v15 + 4;
  if (v19 >= v16)
  {
LABEL_32:
    v36 = *(_QWORD *)(v0 + 160);
    swift_release(result);
    swift_release(v36);
    v37 = *(_QWORD *)(v0 + 128);
    v38 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v9);
  }
  v18 = *(_QWORD *)(v17 + 8 * v19);
  if (v18)
  {
    v11 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v11 >= v16)
      goto LABEL_32;
    v18 = *(_QWORD *)(v17 + 8 * v11);
    ++v19;
    if (v18)
      goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint8_t *sub_1000B1C10(uint64_t a1)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint8_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  id v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint8_t *v39;

  v3 = objc_msgSend(v1, "mainViewController");
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      v35 = v3;
      swift_bridgeObjectRetain(a1);
      v6 = (_QWORD *)(a1 + 64);
      v7 = (uint8_t *)_swiftEmptyArrayStorage;
      do
      {
        if (*v6 == 4)
        {
          v11 = *(v6 - 4);
          v36 = *(_OWORD *)(v6 - 3);
          v12 = *(v6 - 1);
          swift_bridgeObjectRetain(*(v6 - 3));
          swift_retain(*((_QWORD *)&v36 + 1));
          swift_retain(v12);
          v39 = v7;
          if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
          {
            sub_1000CA074(0, *((_QWORD *)v7 + 2) + 1, 1);
            v7 = v39;
          }
          v9 = *((_QWORD *)v7 + 2);
          v8 = *((_QWORD *)v7 + 3);
          if (v9 >= v8 >> 1)
          {
            sub_1000CA074(v8 > 1, v9 + 1, 1);
            v7 = v39;
          }
          *((_QWORD *)v7 + 2) = v9 + 1;
          v10 = &v7[40 * v9];
          *((_QWORD *)v10 + 4) = v11;
          *(_OWORD *)(v10 + 40) = v36;
          *((_QWORD *)v10 + 7) = v12;
          *((_QWORD *)v10 + 8) = 4;
        }
        v6 += 5;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease(a1);
      if (*((_QWORD *)v7 + 2))
      {
        v13 = objc_msgSend(v35, "recordingInProgressUUID");
        if (v13
          && (v14 = v13,
              v15 = objc_msgSend((id)objc_opt_self(RCRecordingsModelInteractor), "sharedRecordingsModelInteractor"), v16 = objc_msgSend(v15, "uuidOfUserFolderForRecordingWithUUID:", v14), v15, v14, v16))
        {
          v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
          v19 = v18;

          v20 = sub_1000B32FC((uint64_t)v7, v17, v19);
          swift_release(v7);
          swift_bridgeObjectRelease(v19);
          if (*(_QWORD *)(v20 + 16))
          {

            return (uint8_t *)v20;
          }
          else
          {
            swift_bridgeObjectRelease(v20);
            v32 = sub_1000B34C0();
            v33 = swift_allocError(&type metadata for DeleteFolderError, v32, 0, 0);
            *v34 = 1;
            swift_willThrow(v33);

          }
        }
        else
        {

        }
      }
      else
      {
        swift_release(v7);
        v28 = sub_1000B34C0();
        v29 = swift_allocError(&type metadata for DeleteFolderError, v28, 0, 0);
        *v30 = 0;
        swift_willThrow(v29);

      }
    }
    else
    {
      swift_bridgeObjectRetain(a1);

      return (uint8_t *)a1;
    }
  }
  else
  {
    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v21 = type metadata accessor for Logger(0);
    v7 = (uint8_t *)sub_1000AACFC(v21, (uint64_t)qword_1001F6C20);
    v22 = Logger.logObject.getter(v7);
    v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v39 = (uint8_t *)v24;
      *(_DWORD *)v7 = 136315138;
      v37 = sub_1001049A8(0xD000000000000033, 0x8000000100182EB0, (uint64_t *)&v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v7 + 4, v7 + 12);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s Unable to delete folders. RCMainViewController is nil.", v7, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

    v25 = sub_1000B2C70();
    v26 = swift_allocError(&type metadata for RCAppIntentsGenericError, v25, 0, 0);
    *v27 = 0;
    swift_willThrow(v26);
  }
  return v7;
}

uint64_t sub_1000B2050(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2[3] = a2;
  v4 = type metadata accessor for ConfirmationActionName(0);
  v2[4] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[5] = v5;
  v2[6] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100014E10(&qword_1001EA1E8);
  v2[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[8] = v7;
  v2[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for IntentDialog(0);
  v2[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[11] = v9;
  v2[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  v2[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[14] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[15] = swift_task_alloc(v12);
  v2[16] = swift_task_alloc(v12);
  v2[2] = a1;
  v13 = type metadata accessor for MainActor(0);
  v2[17] = static MainActor.shared.getter(v13);
  v14 = dispatch thunk of Actor.unownedExecutor.getter(v13, &protocol witness table for MainActor);
  v2[18] = v14;
  v2[19] = v15;
  return swift_task_switch(sub_1000B2178, v14, v15);
}

uint64_t sub_1000B2178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __objc2_class *v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = &OBJC_METACLASS___RCRecentlyDeletedRecordingsCollectionViewController;
  if (v2)
  {
    v4 = (void *)objc_opt_self(RCRecordingsModelInteractor);
    swift_bridgeObjectRetain(v1);
    v5 = (uint64_t *)(v1 + 56);
    do
    {
      v7 = *(v5 - 2);
      v9 = *(v5 - 1);
      v8 = *v5;
      swift_bridgeObjectRetain(v7);
      swift_retain(v9);
      swift_retain(v8);
      v10 = objc_msgSend(v4, "sharedRecordingsModelInteractor");
      v11 = String._bridgeToObjectiveC()();
      v12 = objc_msgSend(v10, "folderForUUID:", v11);

      swift_bridgeObjectRelease(v7);
      swift_release(v9);
      v13 = swift_release(v8);
      if (v12)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v15 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v14 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v15 >= v14 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v12);
        specialized Array._endMutation()(v6);
      }
      v5 += 5;
      --v2;
    }
    while (v2);
    v16 = v43;
    swift_bridgeObjectRelease(*(_QWORD *)(v43 + 24));
    v3 = &OBJC_METACLASS___RCRecentlyDeletedRecordingsCollectionViewController;
  }
  else
  {
    v16 = v43;
  }
  v17 = objc_msgSend((id)objc_opt_self(&v3[41]), "sharedRecordingsModelInteractor");
  *(_QWORD *)(v16 + 160) = v17;
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
LABEL_30:
    if ((uint64_t)_swiftEmptyArrayStorage < 0)
      v42 = _swiftEmptyArrayStorage;
    else
      v42 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    v18 = _CocoaArrayWrapper.endIndex.getter(v42);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    if (v18)
      goto LABEL_12;
LABEL_26:
    v30 = *(_QWORD *)(v16 + 136);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);

    swift_release(v30);
    v31 = *(_QWORD *)(v16 + 120);
    v32 = *(_QWORD *)(v16 + 96);
    v33 = *(_QWORD *)(v16 + 72);
    v34 = *(_QWORD *)(v16 + 48);
    swift_task_dealloc(*(_QWORD *)(v16 + 128));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v16 + 8))();
  }
  v18 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v18)
    goto LABEL_26;
LABEL_12:
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
  {
    v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, _swiftEmptyArrayStorage);
  }
  else
  {
    v19 = _swiftEmptyArrayStorage[4];
    swift_unknownObjectRetain(v19);
  }
  v20 = objc_msgSend(v17, "playableCountForFolder:", v19);
  swift_unknownObjectRelease(v19);
  if (!v20)
  {
    if (v18 != 1)
    {
      v25 = 5;
      while (1)
      {
        v26 = v25 - 4;
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
        {
          v27 = specialized _ArrayBuffer._getElementSlowPath(_:)(v25 - 4, _swiftEmptyArrayStorage);
          v28 = v25 - 3;
          if (__OFADD__(v26, 1))
            goto LABEL_29;
        }
        else
        {
          v27 = _swiftEmptyArrayStorage[v25];
          swift_unknownObjectRetain(v27);
          v28 = v25 - 3;
          if (__OFADD__(v26, 1))
          {
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
        }
        v29 = objc_msgSend(v17, "playableCountForFolder:", v27);
        swift_unknownObjectRelease(v27);
        if (v29)
          goto LABEL_15;
        ++v25;
        if (v28 == v18)
          goto LABEL_26;
      }
    }
    goto LABEL_26;
  }
LABEL_15:
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  v21 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v22 = objc_msgSend(v21, "rc_deletionIsImmediate");

  if (v22)
  {
    v23 = 0xD000000000000037;
    v24 = 0x8000000100182E70;
  }
  else
  {
    v24 = 0x8000000100182E40;
    v23 = 0xD000000000000028;
  }
  LocalizedStringResource.init(stringLiteral:)(v23, v24);
  v36 = *(_QWORD *)(v16 + 120);
  v37 = *(_QWORD *)(v16 + 96);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v16 + 112) + 16))(v36, *(_QWORD *)(v16 + 128), *(_QWORD *)(v16 + 104));
  IntentDialog.init(_:)(v36);
  v38 = static IntentResult.result<>(dialog:)(v37);
  static ConfirmationActionName.continue.getter(v38);
  v39 = (_QWORD *)swift_task_alloc(async function pointer to AppIntent.requestConfirmation<A>(result:confirmationActionName:showPrompt:)[1]);
  *(_QWORD *)(v16 + 168) = v39;
  v40 = sub_10001CA84();
  v41 = sub_1000B2E00(&qword_1001EA1F0, &qword_1001EA1E8);
  *v39 = v16;
  v39[1] = sub_1000B25C4;
  return AppIntent.requestConfirmation<A>(result:confirmationActionName:showPrompt:)(*(_QWORD *)(v16 + 72), *(_QWORD *)(v16 + 48), 1, &type metadata for DeleteFolder, *(_QWORD *)(v16 + 56), v40, v41);
}

uint64_t sub_1000B25C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  v5 = *(_QWORD *)(*v1 + 64);
  v4 = *(_QWORD *)(*v1 + 72);
  v7 = *(_QWORD *)(*v1 + 48);
  v6 = *(_QWORD *)(*v1 + 56);
  v8 = *(_QWORD *)(*v1 + 32);
  v9 = *(_QWORD *)(*v1 + 40);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v10 = sub_1000B2720;
  else
    v10 = sub_1000B2668;
  return swift_task_switch(v10, *(_QWORD *)(v2 + 144), *(_QWORD *)(v2 + 152));
}

uint64_t sub_1000B2668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 80);

  swift_release(v2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B2720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 48);

  swift_release(v2);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v5);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B27E0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[10] = a1;
  v3[11] = a3;
  v3[12] = *a2;
  v4 = type metadata accessor for MainActor(0);
  v3[13] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000B2854, v5, v6);
}

uint64_t sub_1000B2854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 104));
  v1 += 16;
  swift_beginAccess(v1, v0 + 56, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
    swift_release(*(_QWORD *)(v0 + 32));
    swift_release(*(_QWORD *)(v0 + 40));
    v4 = *(_QWORD *)(v0 + 48);
    IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
    v6 = *(_QWORD *)(v0 + 24);
    v5 = *(_QWORD *)(v0 + 32);
    v7 = *(_QWORD *)(v0 + 40);
    EntityProperty.wrappedValue.getter((_QWORD *)(v0 + 16));
    swift_bridgeObjectRelease(v6);
    swift_release(v5);
    swift_release(v7);
    v8 = *(_QWORD *)(v0 + 24);
    sub_1000B2A00(v4, *(_QWORD *)(v0 + 16), v8);
    swift_bridgeObjectRelease(v8);

  }
  v9 = *(_QWORD **)(v0 + 80);
  v9[3] = sub_100014E10((uint64_t *)&unk_1001EBDE0);
  v9[4] = sub_1000B2E00((unint64_t *)&qword_1001EA120, (uint64_t *)&unk_1001EBDE0);
  v10 = sub_1000ADAF4(v9);
  static IntentResult.result<>()(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B299C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1001EA1B4);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100003A7C;
  return sub_1000B27E0(a1, a2, v2);
}

void sub_1000B2A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v7;
  void *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = objc_msgSend(v3, "mainViewController");
  if (v7)
  {
    v8 = v7;
    if ((objc_msgSend(v7, "isRecording") & 1) != 0)
    {
      v9 = sub_1000B2C2C();
      swift_allocError(&type metadata for OpenFolderError, v9, 0, 0);
      *v10 = a2;
      v10[1] = a3;
      v11 = swift_bridgeObjectRetain(a3);
      swift_willThrow(v11);

    }
    else
    {
      v18 = String._bridgeToObjectiveC()();
      objc_msgSend(v8, "goToFolderOfType:withName:animated:completion:", a1, v18, 1, 0);

    }
  }
  else
  {
    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_1000AACFC(v12, (uint64_t)qword_1001F6C20);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v21 = v17;
      *(_DWORD *)v16 = 136315138;
      v19 = sub_1001049A8(0xD000000000000022, 0x8000000100182DE0, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v16 + 4, v16 + 12);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s Unable to select recording. RCMainViewController is nil.", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }

  }
}

unint64_t sub_1000B2C2C()
{
  unint64_t result;

  result = qword_1001EA1C8;
  if (!qword_1001EA1C8)
  {
    result = swift_getWitnessTable(&unk_1001899DC, &type metadata for OpenFolderError);
    atomic_store(result, (unint64_t *)&qword_1001EA1C8);
  }
  return result;
}

unint64_t sub_1000B2C70()
{
  unint64_t result;

  result = qword_1001EA1E0;
  if (!qword_1001EA1E0)
  {
    result = swift_getWitnessTable(&unk_100189A1C, &type metadata for RCAppIntentsGenericError);
    atomic_store(result, (unint64_t *)&qword_1001EA1E0);
  }
  return result;
}

void (*sub_1000B2CB4(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_1000B2D8C(v6, a2, a3);
  return sub_1000B2D08;
}

void (*sub_1000B2D0C(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1000B2E40(v6, a2, a3);
  return sub_1000B2D08;
}

void sub_1000B2D60(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t *sub_1000B2D8C(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_unknownObjectRetain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)destroy for AppStoreRatingModel;
  }
  __break(1u);
  return result;
}

uint64_t destroy for AppStoreRatingModel(_QWORD *a1)
{
  return swift_unknownObjectRelease(*a1);
}

uint64_t sub_1000B2E00(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10000EE30(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentResultContainer<A, B, C, D>, v4);
    atomic_store(result, a1);
  }
  return result;
}

void (*sub_1000B2E40(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for AudioAssetReaderOutput.SampleBuffer;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B2EAC(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  _QWORD *v42;

  v3 = v2;
  v4 = &_swiftEmptyDictionarySingleton;
  v42 = &_swiftEmptyDictionarySingleton;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = (_OWORD *)(a1 + 56);
    while (1)
    {
      v37 = *(v6 - 1);
      v38 = *v6;
      v35 = v5;
      v36 = *((_QWORD *)v6 - 3);
      v39 = v36;
      v40 = v37;
      v41 = v38;
      swift_bridgeObjectRetain(v37);
      swift_retain(*((_QWORD *)&v37 + 1));
      swift_retain(v38);
      swift_retain(*((_QWORD *)&v38 + 1));
      v9 = a2(&v39);
      if (v3)
      {
        swift_bridgeObjectRelease(a1);
        swift_release(*((_QWORD *)&v38 + 1));
        swift_release(v38);
        swift_release(*((_QWORD *)&v37 + 1));
        swift_bridgeObjectRelease(v37);
        swift_release(v4);
        return (uint64_t)v4;
      }
      v11 = v9;
      v12 = v10;
      v14 = sub_100107C04(v9, v10);
      v15 = v4[2];
      v16 = (v13 & 1) == 0;
      v17 = v15 + v16;
      if (__OFADD__(v15, v16))
        break;
      v18 = v13;
      if (v4[3] < v17)
      {
        sub_1000A436C(v17, 1);
        v4 = v42;
        v19 = sub_100107C04(v11, v12);
        if ((v18 & 1) != (v20 & 1))
          goto LABEL_22;
        v14 = v19;
      }
      if ((v18 & 1) != 0)
      {
        swift_bridgeObjectRelease(v12);
        v21 = v4[7];
        v22 = *(_QWORD **)(v21 + 8 * v14);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
        *(_QWORD *)(v21 + 8 * v14) = v22;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v22 = sub_1000C98C0(0, v22[2] + 1, 1, v22);
          *(_QWORD *)(v21 + 8 * v14) = v22;
        }
        v3 = 0;
        v25 = v22[2];
        v24 = v22[3];
        if (v25 >= v24 >> 1)
        {
          v22 = sub_1000C98C0((_QWORD *)(v24 > 1), v25 + 1, 1, v22);
          *(_QWORD *)(v21 + 8 * v14) = v22;
        }
        v7 = v35;
        v22[2] = v25 + 1;
        v8 = &v22[5 * v25];
        v8[4] = v36;
        *(_OWORD *)(v8 + 5) = v37;
        *(_OWORD *)(v8 + 7) = v38;
      }
      else
      {
        v26 = sub_100014E10(&qword_1001EA298);
        v27 = swift_allocObject(v26, 72, 7);
        *(_OWORD *)(v27 + 16) = xmmword_100188080;
        *(_QWORD *)(v27 + 32) = v36;
        *(_OWORD *)(v27 + 40) = v37;
        *(_OWORD *)(v27 + 56) = v38;
        v4[(v14 >> 6) + 8] |= 1 << v14;
        v28 = (uint64_t *)(v4[6] + 16 * v14);
        *v28 = v11;
        v28[1] = v12;
        *(_QWORD *)(v4[7] + 8 * v14) = v27;
        v29 = v4[2];
        v30 = __OFADD__(v29, 1);
        v31 = v29 + 1;
        if (v30)
          goto LABEL_21;
        v4[2] = v31;
        v3 = 0;
        v7 = v35;
      }
      v6 = (_OWORD *)((char *)v6 + 40);
      v5 = v7 - 1;
      if (!v5)
        goto LABEL_17;
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }
  else
  {
LABEL_17:
    swift_bridgeObjectRelease(a1);
    return (uint64_t)v4;
  }
  return result;
}

uint64_t sub_1000B3190(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = 0;
    v7 = result + 40;
    v8 = -(uint64_t)v3;
    v18 = result + 40;
    do
    {
      if (v6 <= v3)
        v9 = v3;
      else
        v9 = v6;
      v10 = -(uint64_t)v9;
      for (i = (_QWORD *)(v7 + 16 * v6++); ; i += 2)
      {
        if (v10 + v6 == 1)
        {
          __break(1u);
          return result;
        }
        v12 = *(i - 1);
        v13 = *i;
        if (v12 != a2 || v13 != a3)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*(i - 1), *i, a2, a3, 0);
          if ((result & 1) == 0)
            break;
        }
        ++v6;
        if (v8 + v6 == 1)
          return (uint64_t)_swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRetain(v13);
      result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0)
        result = sub_1000CA058(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v16 = _swiftEmptyArrayStorage[2];
      v15 = _swiftEmptyArrayStorage[3];
      if (v16 >= v15 >> 1)
        result = sub_1000CA058(v15 > 1, v16 + 1, 1);
      _swiftEmptyArrayStorage[2] = v16 + 1;
      v17 = (char *)&_swiftEmptyArrayStorage[2 * v16];
      *((_QWORD *)v17 + 4) = v12;
      *((_QWORD *)v17 + 5) = v13;
      v3 = v19;
      v7 = v18;
    }
    while (v8 + v6);
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_1000B32FC(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return (uint64_t)_swiftEmptyArrayStorage;
  v6 = 0;
  v7 = -(uint64_t)v3;
  v8 = result + 64;
  v9 = _swiftEmptyArrayStorage;
  v22 = *(_QWORD *)(result + 16);
  do
  {
    v24 = v9;
    if (v6 <= v3)
      v10 = v3;
    else
      v10 = v6;
    v11 = -(uint64_t)v10;
    for (i = (_QWORD *)(v8 + 40 * v6++); ; i += 5)
    {
      if (v11 + v6 == 1)
      {
        __break(1u);
        return result;
      }
      v13 = *(i - 4);
      v14 = *(i - 3);
      if (v13 != a2 || v14 != a3)
      {
        v16 = *i;
        v25 = *((_OWORD *)i - 1);
        result = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, a2, a3, 0);
        if ((result & 1) == 0)
          break;
      }
      ++v6;
      if (v7 + v6 == 1)
        return (uint64_t)v24;
    }
    swift_bridgeObjectRetain(v14);
    swift_retain(v25);
    swift_retain(*((_QWORD *)&v25 + 1));
    v9 = v24;
    result = swift_isUniquelyReferenced_nonNull_native(v24);
    if ((result & 1) == 0)
    {
      result = sub_1000CA074(0, v24[2] + 1, 1);
      v9 = v24;
    }
    v8 = v23;
    v18 = v9[2];
    v17 = v9[3];
    v19 = v18 + 1;
    v20 = v25;
    if (v18 >= v17 >> 1)
    {
      result = sub_1000CA074(v17 > 1, v18 + 1, 1);
      v19 = v18 + 1;
      v20 = v25;
      v8 = v23;
      v9 = v24;
    }
    v9[2] = v19;
    v21 = &v9[5 * v18];
    v21[4] = v13;
    v21[5] = v14;
    *((_OWORD *)v21 + 3) = v20;
    v21[8] = v16;
    v3 = v22;
  }
  while (v7 + v6);
  return (uint64_t)v9;
}

unint64_t sub_1000B34C0()
{
  unint64_t result;

  result = qword_1001EA1F8;
  if (!qword_1001EA1F8)
  {
    result = swift_getWitnessTable(&unk_10018999C, &type metadata for DeleteFolderError);
    atomic_store(result, (unint64_t *)&qword_1001EA1F8);
  }
  return result;
}

void sub_1000B3504()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14[2];
  uint64_t v15;
  uint64_t v16;

  v1 = objc_msgSend(v0, "mainViewController");
  if (v1)
  {
    v2 = v1;
    if ((objc_msgSend(v1, "isRecording") & 1) != 0)
    {
      EntityProperty.wrappedValue.getter(v14);
      v3 = v14[0];
      v4 = v14[1];
      v5 = sub_1000B3A74();
      v6 = swift_allocError(&type metadata for SelectRecordingError, v5, 0, 0);
      *v7 = v3;
      v7[1] = v4;
      swift_willThrow(v6);

      return;
    }
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "selectRecordingWithUUID:returnToBrowse:", v10, 1);

  }
  else
  {
    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_1000AACFC(v8, (uint64_t)qword_1001F6C20);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v14[0] = v13;
      *(_DWORD *)v12 = 136315138;
      v15 = sub_1001049A8(0xD000000000000013, 0x8000000100182F90, v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s Unable to select recording. RCMainViewController is nil.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
  }

}

uint64_t sub_1000B372C(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  v3 = v2;
  v4 = &_swiftEmptyDictionarySingleton;
  v45 = &_swiftEmptyDictionarySingleton;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(a1 + 64);
    while (1)
    {
      v9 = *(v6 - 4);
      v40 = *(_OWORD *)(v6 - 3);
      v11 = *(v6 - 1);
      v10 = *v6;
      v41 = v9;
      v42 = v40;
      v43 = v11;
      v44 = v10;
      v38 = v5;
      v39 = v10;
      swift_bridgeObjectRetain(v40);
      swift_retain(*((_QWORD *)&v40 + 1));
      swift_retain(v11);
      v12 = a2(&v41);
      if (v3)
      {
        swift_release(v4);
        swift_bridgeObjectRelease(a1);
        swift_release(v11);
        swift_release(*((_QWORD *)&v40 + 1));
        swift_bridgeObjectRelease(v40);
        return (uint64_t)v4;
      }
      v14 = v12;
      v15 = v13;
      v17 = sub_100107C04(v12, v13);
      v18 = v4[2];
      v19 = (v16 & 1) == 0;
      v20 = v18 + v19;
      if (__OFADD__(v18, v19))
        break;
      v21 = v16;
      if (v4[3] < v20)
      {
        sub_1000A4378(v20, 1);
        v4 = v45;
        v22 = sub_100107C04(v14, v15);
        if ((v21 & 1) != (v23 & 1))
          goto LABEL_22;
        v17 = v22;
      }
      if ((v21 & 1) != 0)
      {
        swift_bridgeObjectRelease(v15);
        v24 = v4[7];
        v25 = *(_QWORD **)(v24 + 8 * v17);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
        *(_QWORD *)(v24 + 8 * v17) = v25;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v25 = sub_1000C99E0(0, v25[2] + 1, 1, v25);
          *(_QWORD *)(v24 + 8 * v17) = v25;
        }
        v28 = v25[2];
        v27 = v25[3];
        if (v28 >= v27 >> 1)
        {
          v25 = sub_1000C99E0((_QWORD *)(v27 > 1), v28 + 1, 1, v25);
          *(_QWORD *)(v24 + 8 * v17) = v25;
        }
        v3 = 0;
        v7 = v38;
        v25[2] = v28 + 1;
        v8 = &v25[5 * v28];
        v8[4] = v9;
        *(_OWORD *)(v8 + 5) = v40;
        v8[7] = v11;
        v8[8] = v39;
      }
      else
      {
        v29 = sub_100014E10(&qword_1001EA208);
        v30 = swift_allocObject(v29, 72, 7);
        *(_OWORD *)(v30 + 16) = xmmword_100188080;
        *(_QWORD *)(v30 + 32) = v9;
        *(_OWORD *)(v30 + 40) = v40;
        *(_QWORD *)(v30 + 56) = v11;
        *(_QWORD *)(v30 + 64) = v39;
        v4[(v17 >> 6) + 8] |= 1 << v17;
        v31 = (uint64_t *)(v4[6] + 16 * v17);
        *v31 = v14;
        v31[1] = v15;
        *(_QWORD *)(v4[7] + 8 * v17) = v30;
        v32 = v4[2];
        v33 = __OFADD__(v32, 1);
        v34 = v32 + 1;
        if (v33)
          goto LABEL_21;
        v4[2] = v34;
        v3 = 0;
        v7 = v38;
      }
      v6 += 5;
      v5 = v7 - 1;
      if (!v5)
        goto LABEL_17;
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }
  else
  {
LABEL_17:
    swift_bridgeObjectRelease(a1);
    return (uint64_t)v4;
  }
  return result;
}

uint64_t sub_1000B39F0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100014E10(&qword_1001EA200);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000B3A30()
{
  unint64_t result;

  result = qword_1001EA218;
  if (!qword_1001EA218)
  {
    result = swift_getWitnessTable(&unk_10018995C, &type metadata for ChangePlaybackSettingsError);
    atomic_store(result, (unint64_t *)&qword_1001EA218);
  }
  return result;
}

unint64_t sub_1000B3A74()
{
  unint64_t result;

  result = qword_1001EA280;
  if (!qword_1001EA280)
  {
    result = swift_getWitnessTable(&unk_10018991C, &type metadata for SelectRecordingError);
    atomic_store(result, (unint64_t *)&qword_1001EA280);
  }
  return result;
}

unint64_t sub_1000B3AB8()
{
  unint64_t result;

  result = qword_1001EA288;
  if (!qword_1001EA288)
  {
    result = swift_getWitnessTable(&unk_10018989C, &type metadata for DeleteRecordingError);
    atomic_store(result, (unint64_t *)&qword_1001EA288);
  }
  return result;
}

uint64_t sub_1000B3AFC(void **a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10[24];

  v3 = *a1;
  v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    if (objc_msgSend(v3, "mode") == 2)
    {
      v7 = *(_QWORD *)(v6 + 32);
      v9 = 1;
    }
    else
    {
      if (objc_msgSend(v3, "mode"))
      {
        v8 = v6;
        return swift_release(v8);
      }
      v7 = *(_QWORD *)(v6 + 32);
      v9 = 0;
    }
    swift_retain(v7);
    CurrentValueSubject.send(_:)(&v9);
    swift_release(v6);
    v8 = v7;
    return swift_release(v8);
  }
  return result;
}

uint64_t sub_1000B3BB8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for RecordingStatePublisher()
{
  return objc_opt_self(_TtC10VoiceMemos23RecordingStatePublisher);
}

char *sub_1000B3C28()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  objc_class *v9;
  id v10;
  void *v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v24[5];
  objc_super v25;

  v1 = sub_100014E10(&qword_1001EA430);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v24[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100014E10(&qword_1001EA438);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[OBJC_IVAR___RCLockScreenCoordinator_willPauseForRecording] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___RCLockScreenCoordinator_cancellable] = 0;
  v9 = (objc_class *)type metadata accessor for LockScreenCoordinator();
  v25.receiver = v0;
  v25.super_class = v9;
  v10 = objc_msgSendSuper2(&v25, "init");
  v11 = (void *)objc_opt_self(RecorderAppDelegate);
  v12 = (char *)v10;
  v13 = objc_msgSend(v11, "sharedAppDelegate");
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(v13, "dependencyContainer");

    if (v15)
    {
      sub_10001BB88((uint64_t)v15 + OBJC_IVAR___RCRecorderAppDelegateDependencyContainer_recordingStatePublisher, (uint64_t)v24);

      v23 = *(_QWORD *)(*sub_10001B474(v24, v24[3]) + 32);
      v16 = sub_100014E10(&qword_1001EA440);
      v17 = sub_10000EDB0(&qword_1001EA448, &qword_1001EA440, (uint64_t)&unk_10018CE18);
      Publisher.dropFirst(_:)(1, v16, v17);
      sub_10001B498(v24);
      v18 = sub_10000EDB0(&qword_1001EA450, &qword_1001EA430, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
      Publisher<>.removeDuplicates()(v1, v18, &protocol witness table for Bool);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      v19 = swift_allocObject(&unk_1001AEA90, 24, 7);
      swift_unknownObjectWeakInit(v19 + 16, v12);
      v20 = sub_10000EDB0(&qword_1001EA458, &qword_1001EA438, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
      v15 = (id)Publisher<>.sink(receiveValue:)(sub_1000B42D4, v19, v5, v20);
      swift_release(v19);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    else
    {

    }
  }
  else
  {

    v15 = 0;
  }
  v21 = *(_QWORD *)&v12[OBJC_IVAR___RCLockScreenCoordinator_cancellable];
  *(_QWORD *)&v12[OBJC_IVAR___RCLockScreenCoordinator_cancellable] = v15;
  swift_release(v21);
  return v12;
}

void sub_1000B3ED8(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _BYTE *v5;
  uint64_t v6;
  id v7;
  _BYTE v8[24];

  v2 = a2 + 16;
  if (*a1 == 1)
  {
    swift_beginAccess(v2, v8, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v2);
    if (!Strong)
      return;
    v4 = (void *)Strong;
    v5 = (_BYTE *)(Strong + OBJC_IVAR___RCLockScreenCoordinator_willPauseForRecording);
  }
  else
  {
    swift_beginAccess(v2, v8, 0, 0);
    v6 = swift_unknownObjectWeakLoadStrong(v2);
    if (!v6)
      return;
    v4 = (void *)v6;
    v5 = (_BYTE *)(v6 + OBJC_IVAR___RCLockScreenCoordinator_willPauseForRecording);
    if ((*(_BYTE *)(v6 + OBJC_IVAR___RCLockScreenCoordinator_willPauseForRecording) & 1) == 0)
    {
      v7 = objc_msgSend(objc_allocWithZone((Class)SBSLockScreenService), "init");
      objc_msgSend(v7, "lockDeviceAnimated:withCompletion:", 1, 0);
      objc_msgSend(v7, "invalidate");

    }
  }
  *v5 = 0;

}

id sub_1000B3FFC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LockScreenCoordinator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LockScreenCoordinator()
{
  return objc_opt_self(RCLockScreenCoordinator);
}

void sub_1000B405C(char a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  unint64_t v10;
  Class isa;
  id v12;
  id v13;
  id v14;
  _QWORD v15[2];
  _BYTE v16[104];

  v2 = objc_msgSend((id)objc_opt_self(RecorderAppDelegate), "sharedAppDelegate");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, "defaultSceneDelegate");

    if (v4)
    {
      v14 = objc_msgSend(v4, "mainViewController");

      if (v14)
      {
        if ((a1 & 1) != 0)
        {
          objc_msgSend(v14, "performDoneButtonFromLockScreenInput");
          v13 = objc_msgSend(objc_allocWithZone((Class)SBSLockScreenService), "init");
          objc_msgSend(v13, "lockDeviceAnimated:withCompletion:", 1, 0);
          objc_msgSend(v13, "invalidate");

        }
        else
        {
          v5 = objc_msgSend((id)objc_opt_self(FBSOpenApplicationService), "serviceWithDefaultShellEndpoint");
          if (v5)
          {
            v6 = v5;
            objc_msgSend(v14, "expandCardFromLockScreenInput");
            v7 = sub_100014E10(&qword_1001EA428);
            inited = swift_initStackObject(v7, v16);
            *(_OWORD *)(inited + 16) = xmmword_100188080;
            v15[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyPromptUnlockDevice);
            v15[1] = v9;
            AnyHashable.init<A>(_:)(v15, &type metadata for String, &protocol witness table for String);
            *(_QWORD *)(inited + 96) = &type metadata for Bool;
            *(_BYTE *)(inited + 72) = 1;
            v10 = sub_100108E6C(inited);
            isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v10);
            v12 = objc_msgSend((id)objc_opt_self(FBSOpenApplicationOptions), "optionsWithDictionary:", isa);

            objc_msgSend(v6, "openApplication:withOptions:completion:", RCVoiceMemosBundleID, v12, 0);
          }
          else
          {

          }
        }
      }
    }
  }
}

uint64_t sub_1000B42B0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000B42D4(_BYTE *a1)
{
  uint64_t v1;

  sub_1000B3ED8(a1, v1);
}

uint64_t sub_1000B42E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B4E20();
  return static AttributeScope.decodingConfiguration.getter(a1, v2);
}

uint64_t sub_1000B431C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B4E20();
  return static AttributeScope.encodingConfiguration.getter(a1, v2);
}

uint64_t sub_1000B4354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000B4F6C(&qword_1001EA558, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> Range<A>);
  return static DecodableAttributedStringKey<>.decode(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000B43C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_1000B4F6C(&qword_1001EA560, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> Range<A>);
  return static EncodableAttributedStringKey<>.encode(_:to:)(a1, a2, a3, a4, v8);
}

uint64_t sub_1000B443C()
{
  return 0x676E6152656D6974;
}

uint64_t sub_1000B4464(_QWORD *a1, uint64_t a2)
{
  return AttributeDynamicLookup.subscript.getter(*(_QWORD *)(class metadata base offset for KeyPath + *a1 + 8), *(_QWORD *)(class metadata base offset for KeyPath + *a1 + 8), a2);
}

uint64_t sub_1000B4488(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EA460);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1000B44C8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100014E10(&qword_1001EA460);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1000B4500(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EA460);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000B4548(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EA460);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000B4590(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EA460);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000B45D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EA460);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000B4620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B462C);
}

uint64_t sub_1000B462C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EA460);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000B466C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B4678);
}

uint64_t sub_1000B4678(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EA460);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for TranscriptionCodingContainer(uint64_t a1)
{
  uint64_t result;

  result = qword_1001EA4C0;
  if (!qword_1001EA4C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TranscriptionCodingContainer);
  return result;
}

void sub_1000B46F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1000B4760(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

void sub_1000B4760(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  if (!qword_1001EA4D0)
  {
    v4[0] = type metadata accessor for AttributedString(255);
    v4[1] = &_s26VoiceMemosStringAttributesVN;
    v4[2] = &protocol witness table for AttributedString;
    v4[3] = &protocol witness table for AttributedString;
    v4[4] = sub_1000B47F8();
    v4[5] = sub_1000B483C();
    v2 = type metadata accessor for CodableConfiguration(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1001EA4D0);
  }
}

unint64_t sub_1000B47F8()
{
  unint64_t result;

  result = qword_1001EA4D8;
  if (!qword_1001EA4D8)
  {
    result = swift_getWitnessTable(&unk_100188218, &_s26VoiceMemosStringAttributesVN);
    atomic_store(result, (unint64_t *)&qword_1001EA4D8);
  }
  return result;
}

unint64_t sub_1000B483C()
{
  unint64_t result;

  result = qword_1001EA4E0;
  if (!qword_1001EA4E0)
  {
    result = swift_getWitnessTable(&unk_1001881E8, &_s26VoiceMemosStringAttributesVN);
    atomic_store(result, (unint64_t *)&qword_1001EA4E0);
  }
  return result;
}

ValueMetadata *_s26VoiceMemosStringAttributesVMa()
{
  return &_s26VoiceMemosStringAttributesVN;
}

ValueMetadata *type metadata accessor for VMTimeRangeAttribute()
{
  return &type metadata for VMTimeRangeAttribute;
}

unint64_t sub_1000B48A4()
{
  unint64_t result;

  result = qword_1001EA510;
  if (!qword_1001EA510)
  {
    result = swift_getWitnessTable(&unk_1001882D8, &type metadata for VMTimeRangeAttribute);
    atomic_store(result, (unint64_t *)&qword_1001EA510);
  }
  return result;
}

uint64_t sub_1000B48E8()
{
  return 1;
}

Swift::Int sub_1000B48F0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_1000B4930()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_1000B4954(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t sub_1000B4990()
{
  return 0xD000000000000010;
}

uint64_t sub_1000B49AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000B5194(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000B49D4()
{
  return 0;
}

void sub_1000B49E0(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000B49EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B4E64();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B4A14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000B4E64();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000B4A3C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t KeyPath;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v27 = a2;
  v30 = sub_100014E10(&qword_1001EA460);
  v26 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v29 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100014E10(&qword_1001EA528);
  v28 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttributedString(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v25 - v12;
  v14 = type metadata accessor for TranscriptionCodingContainer(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttributedString.init()(v15);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  KeyPath = swift_getKeyPath(&unk_100188328);
  v19 = sub_1000B4E20();
  CodableConfiguration<>.init(wrappedValue:from:)(v11, KeyPath, v7, &_s26VoiceMemosStringAttributesVN, &protocol witness table for AttributedString, &protocol witness table for AttributedString, v19);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  v20 = a1[3];
  v21 = a1[4];
  sub_10001B474(a1, v20);
  v22 = sub_1000B4E64();
  v23 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for TranscriptionCodingContainer.CodingKeys, &type metadata for TranscriptionCodingContainer.CodingKeys, v22, v20, v21);
  if (!v23)
  {
    sub_1000B4F28(&qword_1001EA540, (uint64_t)&protocol conformance descriptor for CodableConfiguration<A, B>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v4);
    (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v17, v29, v30);
    sub_1000B4EE4((uint64_t)v17, v27);
  }
  sub_10001B498(a1);
  return sub_1000B4EA8((uint64_t)v17);
}

uint64_t sub_1000B4CC8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B4A3C(a1, a2);
}

uint64_t sub_1000B4CDC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = sub_100014E10(&qword_1001EA548);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001B474(a1, v8);
  v10 = sub_1000B4E64();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for TranscriptionCodingContainer.CodingKeys, &type metadata for TranscriptionCodingContainer.CodingKeys, v10, v8, v9);
  sub_100014E10(&qword_1001EA460);
  sub_1000B4F28(&qword_1001EA550, (uint64_t)&protocol conformance descriptor for CodableConfiguration<A, B>);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1000B4DF0()
{
  return sub_1000B4F6C(&qword_1001EA518, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> Range<A>);
}

unint64_t sub_1000B4E20()
{
  unint64_t result;

  result = qword_1001EA530;
  if (!qword_1001EA530)
  {
    result = swift_getWitnessTable(&unk_100188270, &_s26VoiceMemosStringAttributesVN);
    atomic_store(result, (unint64_t *)&qword_1001EA530);
  }
  return result;
}

unint64_t sub_1000B4E64()
{
  unint64_t result;

  result = qword_1001EA538;
  if (!qword_1001EA538)
  {
    result = swift_getWitnessTable(&unk_100188410, &type metadata for TranscriptionCodingContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001EA538);
  }
  return result;
}

uint64_t sub_1000B4EA8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TranscriptionCodingContainer(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B4EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TranscriptionCodingContainer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B4F28(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_10000EE30(&qword_1001EA460);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B4F6C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000EE30(&qword_1001EA520);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TranscriptionCodingContainer.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for TranscriptionCodingContainer.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000B5060 + 4 * asc_100188120[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000B5080 + 4 * byte_100188125[v4]))();
}

_BYTE *sub_1000B5060(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000B5080(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000B5088(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000B5090(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000B5098(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000B50A0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TranscriptionCodingContainer.CodingKeys()
{
  return &type metadata for TranscriptionCodingContainer.CodingKeys;
}

unint64_t sub_1000B50C0()
{
  unint64_t result;

  result = qword_1001EA568;
  if (!qword_1001EA568)
  {
    result = swift_getWitnessTable(&unk_1001883E8, &type metadata for TranscriptionCodingContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001EA568);
  }
  return result;
}

unint64_t sub_1000B5108()
{
  unint64_t result;

  result = qword_1001EA570;
  if (!qword_1001EA570)
  {
    result = swift_getWitnessTable(&unk_100188358, &type metadata for TranscriptionCodingContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001EA570);
  }
  return result;
}

unint64_t sub_1000B5150()
{
  unint64_t result;

  result = qword_1001EA578;
  if (!qword_1001EA578)
  {
    result = swift_getWitnessTable(&unk_100188380, &type metadata for TranscriptionCodingContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001EA578);
  }
  return result;
}

uint64_t sub_1000B5194(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000010 && a2 == 0x8000000100183160)
  {
    swift_bridgeObjectRelease(0x8000000100183160);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100183160, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

uint64_t sub_1000B5218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSString v3;
  id v4;

  v0 = type metadata accessor for Logger(0);
  sub_1000B52C4(v0, qword_1001F6C20);
  sub_1000AACFC(v0, (uint64_t)qword_1001F6C20);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kVMLogCategoryDefault);
  v2 = v1;
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v4 = (id)OSLogForCategory(v3);

  if (!v4)
  {
    sub_1000B5304();
    v4 = (id)static OS_os_log.default.getter();
  }
  return Logger.init(_:)(v4);
}

uint64_t *sub_1000B52C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

unint64_t sub_1000B5304()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001EA580;
  if (!qword_1001EA580)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001EA580);
  }
  return result;
}

uint64_t sub_1000B5340()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for PlatterSuccessStatePresentationCoordinator()
{
  return objc_opt_self(_TtC10VoiceMemos42PlatterSuccessStatePresentationCoordinator);
}

uint64_t sub_1000B5370(void *a1)
{
  id v1;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = objc_msgSend(a1, "activeLayoutMode");
  if ((unint64_t)v1 + 1 < 6)
    return (0x38u >> ((_BYTE)v1 + 1)) & 1;
  if (qword_1001E8F80 != -1)
    swift_once(&qword_1001E8F80, sub_1000B5218);
  v3 = type metadata accessor for Logger(0);
  sub_1000AACFC(v3, (uint64_t)qword_1001F6C20);
  v4 = static os_log_type_t.debug.getter();
  v5 = v4;
  v6 = Logger.logObject.getter(v4);
  if (os_log_type_enabled(v6, v5))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v10 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = sub_1001049A8(0xD000000000000031, 0x80000001001831F0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v6, v5, "%s Unexpected layout mode", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }

  return 0;
}

BOOL sub_1000B5504()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  _BOOL8 v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  int v12;
  id v13;
  void *v14;
  id v15;
  unsigned int v16;

  v0 = (void *)objc_opt_self(RecorderAppDelegate);
  v1 = objc_msgSend(v0, "sharedAppDelegate");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v1, "platterSceneDelegate");
  v4 = (_BOOL8)v3;
  if (!v3)
  {
LABEL_15:

    return v4;
  }
  v5 = objc_msgSend(v3, "platterViewController");

  if (!v5)
  {

    return 0;
  }
  v6 = objc_msgSend(v2, "defaultSceneDelegate");
  if (v6
    && (v7 = v6,
        v8 = objc_msgSend(v6, "window"),
        v7,
        v9 = objc_msgSend(v8, "windowScene"),
        v8,
        v9))
  {
    v10 = objc_msgSend(v9, "activationState");

    v4 = v10 != 0;
  }
  else
  {
    v4 = 1;
  }
  v11 = objc_msgSend(v2, "dynamicIslandSceneDelegate");

  if (!v11)
  {

    goto LABEL_15;
  }
  v12 = sub_1000B5370(v5);
  v13 = objc_msgSend(v0, "sharedAppDelegate");
  if (v13
    && (v14 = v13,
        v15 = objc_msgSend(v13, "connectedLockScreenSceneDelegate"),
        v14,
        v15))
  {
    v16 = objc_msgSend(v15, "lockscreenWillDismissAfterRecording");

    return v4 & (v12 | v16);
  }
  else
  {

    return v4 & v12;
  }
}

uint64_t sub_1000B56E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  v0[4] = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  v0[5] = v2;
  v0[6] = v3;
  return swift_task_switch(sub_1000B5750, v2, v3);
}

id sub_1000B5750()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  char **v15;
  id result;
  double v17;
  double v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  if (!sub_1000B5504()
    || (v1 = objc_msgSend((id)objc_opt_self(RecorderAppDelegate), "sharedAppDelegate"),
        (*(_QWORD *)(v0 + 56) = v1) == 0))
  {
    swift_release(*(_QWORD *)(v0 + 32));
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = v1;
  v3 = objc_msgSend(v1, "platterSceneDelegate");
  if (!v3
    || (v4 = v3,
        v5 = objc_msgSend(v3, "platterViewController"),
        *(_QWORD *)(v0 + 64) = v5,
        v4,
        !v5))
  {
    swift_release(*(_QWORD *)(v0 + 32));
LABEL_18:

    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  v6 = objc_msgSend((id)objc_opt_self(RCRecorderStyleProvider), "sharedStyleProvider");
  *(_QWORD *)(v0 + 72) = v6;
  if (!v6)
  {
    swift_release(*(_QWORD *)(v0 + 32));

    goto LABEL_18;
  }
  v7 = v6;
  if (qword_1001E8F80 != -1)
    swift_once(&qword_1001E8F80, sub_1000B5218);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_1000AACFC(v8, (uint64_t)qword_1001F6C20);
  *(_QWORD *)(v0 + 80) = v9;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v21 = v13;
    *(_DWORD *)v12 = 136315138;
    *(_QWORD *)(v0 + 24) = sub_1001049A8(0xD000000000000024, 0x80000001001831C0, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s Preparing to present recording stopped success state", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  objc_msgSend(v5, "displayRecordingSavedStatusMessage");
  v14 = objc_msgSend(v2, "dynamicIslandSceneDelegate");

  v15 = &selRef_bannerStatusMessageDisplayLength;
  if (v14)
    v15 = &selRef_dynamicIslandStatusMessageDisplayLength;
  result = objc_msgSend(v7, *v15);
  v18 = v17 * 1000000000.0;
  if ((~*(_QWORD *)&v18 & 0x7FF0000000000000) != 0)
  {
    if (v18 > -1.0)
    {
      if (v18 < 1.84467441e19)
      {
        v19 = (unint64_t)v18;
        v20 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
        *(_QWORD *)(v0 + 88) = v20;
        *v20 = v0;
        v20[1] = sub_1000B5A88;
        return (id)static Task<>.sleep(nanoseconds:)(v19);
      }
      goto LABEL_23;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1000B5A88()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000B5B38;
  else
    v4 = sub_1000B5AE8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_1000B5AE8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v2 = *(void **)(v0 + 64);
  v1 = *(void **)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 32);

  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B5B38()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;

  v1 = swift_release(*(_QWORD *)(v0 + 32));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v14 = *(_QWORD *)(v0 + 96);
    v5 = *(void **)(v0 + 64);
    v4 = *(void **)(v0 + 72);
    v6 = *(void **)(v0 + 56);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v0 + 16) = sub_1001049A8(0xD000000000000024, 0x80000001001831C0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s Unable to present success state", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v9 = v14;
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 96);
    v12 = *(void **)(v0 + 64);
    v11 = *(void **)(v0 + 72);

    v9 = v10;
  }
  swift_errorRelease(v9);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_1000B5CC8(OpaqueExtAudioFile *a1, void *a2)
{
  void *v2;
  id v4;
  OSStatus v5;
  OSStatus v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  UInt32 ioNumberFrames;

  v2 = a2;
  v4 = objc_msgSend(objc_allocWithZone((Class)AVAudioPCMBuffer), "initWithPCMFormat:frameCapacity:", a2, 4096);
  if (v4)
  {
    v2 = v4;
    objc_msgSend(v4, "setFrameLength:", objc_msgSend(v4, "frameCapacity"));
    ioNumberFrames = objc_msgSend(v2, "frameCapacity");
    v5 = ExtAudioFileRead(a1, &ioNumberFrames, (AudioBufferList *)objc_msgSend(v2, "mutableAudioBufferList"));
    if (v5)
    {
      v6 = v5;
      static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
      v8 = v7;
      v9 = objc_allocWithZone((Class)NSError);
      v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v8);
      objc_msgSend(v9, "initWithDomain:code:userInfo:", v10, v6, 0);

      swift_willThrow(v11);
    }
    else
    {
      objc_msgSend(v2, "setFrameLength:", ioNumberFrames);
      if (!objc_msgSend(v2, "frameLength"))
      {

        return 0;
      }
    }
  }
  else
  {
    v12 = sub_1000B6308();
    v13 = swift_allocError(&type metadata for ExtAudioFileSequence.Error, v12, 0, 0);
    swift_willThrow(v13);
  }
  return v2;
}

__n128 sub_1000B5E88@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

uint64_t sub_1000B5E94(void **a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = sub_1000B5CC8(*(OpaqueExtAudioFile **)v1, *(void **)(v1 + 8));
  return sub_1000B634C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1000B5EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[4] = v4;
  v5[5] = a4;
  v5[3] = a1;
  if (a2)
  {
    ObjectType = swift_getObjectType(a2);
    v8 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, a3);
    v10 = v9;
  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  return swift_task_switch(sub_1000B5F68, v8, v10);
}

uint64_t sub_1000B5F68()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 24) = sub_1000B5CC8(**(OpaqueExtAudioFile ***)(v0 + 32), *(void **)(*(_QWORD *)(v0 + 32) + 8));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

ExtAudioFileRef sub_1000B5FF4(uint64_t a1, void *a2)
{
  const __CFURL *v4;
  const __CFURL *v5;
  OSStatus v6;
  ExtAudioFileRef v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  OSStatus v14;
  uint64_t v15;
  ExtAudioFileRef v16;

  v16 = 0;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v5 = v4;
  v6 = ExtAudioFileOpenURL(v4, &v16);

  v7 = v16;
  if (v16)
    v8 = v6 == 0;
  else
    v8 = 0;
  if (v8)
  {
    v14 = ExtAudioFileSetProperty(v16, 0x63666D74u, 0x28u, objc_msgSend(a2, "streamDescription"));
    if (!v14)
    {
      v15 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
      return v7;
    }
    v6 = v14;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(NSOSStatusErrorDomain);
  v10 = v9;
  v11 = objc_allocWithZone((Class)NSError);
  v7 = (ExtAudioFileRef)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  objc_msgSend(v11, "initWithDomain:code:userInfo:", v7, v6, 0);

  swift_willThrow();
  v12 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  return v7;
}

_QWORD *initializeBufferWithCopyOfBuffer for ExtAudioFileSequence(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = v3;
  return a1;
}

void destroy for ExtAudioFileSequence(uint64_t a1)
{

}

_QWORD *assignWithCopy for ExtAudioFileSequence(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;

  *a1 = *a2;
  v3 = (void *)a2[1];
  v4 = (void *)a1[1];
  a1[1] = v3;
  v5 = v3;

  return a1;
}

uint64_t assignWithTake for ExtAudioFileSequence(uint64_t a1, _OWORD *a2)
{
  void *v3;

  v3 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for ExtAudioFileSequence(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtAudioFileSequence(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtAudioFileSequence()
{
  return &type metadata for ExtAudioFileSequence;
}

void *sub_1000B62B4()
{
  return &protocol self-conformance witness table for Error;
}

unint64_t sub_1000B62C4()
{
  unint64_t result;

  result = qword_1001EA650;
  if (!qword_1001EA650)
  {
    result = swift_getWitnessTable(&unk_1001884C8, &type metadata for ExtAudioFileSequence);
    atomic_store(result, (unint64_t *)&qword_1001EA650);
  }
  return result;
}

unint64_t sub_1000B6308()
{
  unint64_t result;

  result = qword_1001EA658;
  if (!qword_1001EA658)
  {
    result = swift_getWitnessTable(&unk_1001885C8, &type metadata for ExtAudioFileSequence.Error);
    atomic_store(result, (unint64_t *)&qword_1001EA658);
  }
  return result;
}

uint64_t sub_1000B634C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t storeEnumTagSinglePayload for ExtAudioFileSequence.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000B6398 + 4 * byte_1001884A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000B63B8 + 4 * byte_1001884A5[v4]))();
}

_BYTE *sub_1000B6398(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000B63B8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000B63C0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000B63C8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000B63D0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000B63D8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ExtAudioFileSequence.Error()
{
  return &type metadata for ExtAudioFileSequence.Error;
}

unint64_t sub_1000B63F8()
{
  unint64_t result;

  result = qword_1001EA660;
  if (!qword_1001EA660)
  {
    result = swift_getWitnessTable(&unk_1001885A0, &type metadata for ExtAudioFileSequence.Error);
    atomic_store(result, (unint64_t *)&qword_1001EA660);
  }
  return result;
}

void sub_1000B6518(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  char *v4;
  id v5;
  id v6;
  char **v7;
  uint64_t v8;
  id v9;
  id v10;
  _BYTE v11[24];

  v2 = a2 + 16;
  if (*a1 == 1)
  {
    swift_beginAccess(v2, v11, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v2);
    if (!Strong)
      return;
    v4 = (char *)Strong;
    v5 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    v6 = objc_msgSend(v5, "applicationState");

    if (v6)
      goto LABEL_9;
    v7 = &selRef_stop;
    goto LABEL_8;
  }
  swift_beginAccess(v2, v11, 0, 0);
  v8 = swift_unknownObjectWeakLoadStrong(v2);
  if (!v8)
    return;
  v4 = (char *)v8;
  v9 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v10 = objc_msgSend(v9, "applicationState");

  if (!v10)
  {
    v7 = &selRef_start;
LABEL_8:
    objc_msgSend(*(id *)&v4[OBJC_IVAR___RCLocationManagerStateCoordinator_locationManager], *v7);
  }
LABEL_9:

}

id sub_1000B6660()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LocationManagerStateCoordinator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LocationManagerStateCoordinator()
{
  return objc_opt_self(RCLocationManagerStateCoordinator);
}

ValueMetadata *type metadata accessor for TimedTextRange()
{
  return &type metadata for TimedTextRange;
}

BOOL sub_1000B66F8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

id sub_1000B6710()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RecordingTranscriptionService()), "init");
  qword_1001F6C38 = (uint64_t)result;
  return result;
}

uint64_t sub_1000B67D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_1000B67F4, 0, 0);
}

uint64_t sub_1000B67F4()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  _QWORD *v4;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;

  v1 = objc_msgSend((id)objc_opt_self(RCApplicationContainer), "sharedContainer");
  if (v1 && (v2 = v1, v3 = objc_msgSend(v1, "newBackgroundModel"), *(_QWORD *)(v0 + 40) = v3, v2, v3))
  {
    v4 = (_QWORD *)swift_task_alloc(dword_1001EB0EC);
    *(_QWORD *)(v0 + 48) = v4;
    *v4 = v0;
    v4[1] = sub_1000B68D8;
    return sub_1000CDA60(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), (uint64_t)v3);
  }
  else
  {
    v6 = sub_1000B8B10();
    v7 = swift_allocError(&type metadata for RecordingTranscriptionService.RecordingTranscriptionServiceError, v6, 0, 0);
    *v8 = 0;
    swift_willThrow(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000B68D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B6970;
  else
    v3 = sub_1000B693C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B693C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B6970()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B69A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v9 = type metadata accessor for AttributedString(0);
  v6[4] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[5] = v10;
  v11 = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[6] = v11;
  v12 = (_QWORD *)swift_task_alloc(dword_1001EA6E4);
  v6[7] = v12;
  *v12 = v6;
  v12[1] = sub_1000B6A40;
  return sub_1000B6E30(v11, a5, a6, 0);
}

uint64_t sub_1000B6A40()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000B6AE4;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[5] + 8))(v2[6], v2[4]);
    v4 = sub_1000B6AB4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000B6AB4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B6AE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  if (qword_1001E8F80 != -1)
    swift_once(&qword_1001E8F80, sub_1000B5218);
  v1 = *(_QWORD *)(v0 + 64);
  v2 = type metadata accessor for Logger(0);
  sub_1000AACFC(v2, (uint64_t)qword_1001F6C20);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 64);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v14 = v10;
    *(_DWORD *)v8 = 136315394;
    *(_QWORD *)(v0 + 16) = sub_1001049A8(0xD000000000000018, 0x80000001001833B0, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s failed with error = %@", (uint8_t *)v8, 0x16u);
    v12 = sub_100014E10((uint64_t *)&unk_1001ECD60);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 64));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B6E30(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v5 + 128) = a4;
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = sub_100014E10(&qword_1001E9BB0);
  *(_QWORD *)(v5 + 48) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B6E94, 0, 0);
}

uint64_t sub_1000B6E94()
{
  uint64_t v0;
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;

  v1 = *(_BYTE **)(v0 + 40);
  if ((v1[OBJC_IVAR___RCRecordingTranscriptionService_isTranscribingLive] & 1) != 0)
  {
    v2 = sub_1000B8B10();
    v3 = swift_allocError(&type metadata for RecordingTranscriptionService.RecordingTranscriptionServiceError, v2, 0, 0);
    *v4 = 1;
    swift_willThrow(v3);
LABEL_3:
    swift_task_dealloc(*(_QWORD *)(v0 + 48));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v6 = OBJC_IVAR___RCRecordingTranscriptionService_fileTranscriptionTask;
  *(_QWORD *)(v0 + 56) = OBJC_IVAR___RCRecordingTranscriptionService_fileTranscriptionTask;
  v7 = (uint64_t *)&v1[v6];
  v8 = *(_QWORD *)&v1[v6];
  *(_QWORD *)(v0 + 64) = v8;
  v9 = *(_QWORD *)(v0 + 32);
  if (!v8)
  {
    v19 = *(_QWORD *)(v0 + 48);
    v20 = *(_QWORD *)(v0 + 24);
    v21 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v19, 1, 1, v21);
    v22 = (_QWORD *)swift_allocObject(&unk_1001AEFF0, 56, 7);
    v22[2] = 0;
    v22[3] = 0;
    v22[4] = v1;
    v22[5] = v20;
    v22[6] = v9;
    v23 = v1;
    swift_bridgeObjectRetain(v9);
    v8 = sub_1000A92C0(v19, (uint64_t)&unk_1001EA6F8, (uint64_t)v22);
    *(_QWORD *)(v0 + 104) = v8;
    v24 = *v7;
    v25 = v7[1];
    v26 = v7[2];
    *v7 = v8;
    v7[1] = v20;
    v7[2] = v9;
    swift_bridgeObjectRetain(v9);
    swift_retain(v8);
    sub_1000B8A20(v24, v25, v26);
    v15 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(_QWORD *)(v0 + 112) = v15;
    v16 = type metadata accessor for AttributedString(0);
    v17 = sub_100014E10(qword_1001E9C68);
    v18 = sub_1000B73E0;
    goto LABEL_12;
  }
  v10 = *(_QWORD *)(v0 + 24);
  v11 = v7[1];
  v12 = v7[2];
  *(_QWORD *)(v0 + 72) = v12;
  v13 = v11 == v10 && v12 == v9;
  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v10, v9, 0) & 1) != 0)
  {
    v14 = async function pointer to Task.value.getter[1];
    swift_retain(v8);
    swift_bridgeObjectRetain(v12);
    v15 = (_QWORD *)swift_task_alloc(v14);
    *(_QWORD *)(v0 + 80) = v15;
    v16 = type metadata accessor for AttributedString(0);
    v17 = sub_100014E10(qword_1001E9C68);
    v18 = sub_1000B7190;
LABEL_12:
    *v15 = v0;
    v15[1] = v18;
    return Task.value.getter(*(_QWORD *)(v0 + 16), v8, v16, v17, &protocol self-conformance witness table for Error);
  }
  if ((*(_BYTE *)(v0 + 128) & 1) == 0)
  {
    v29 = sub_1000B8B10();
    swift_allocError(&type metadata for RecordingTranscriptionService.RecordingTranscriptionServiceError, v29, 0, 0);
    *v30 = 1;
    swift_retain(v8);
    v31 = swift_bridgeObjectRetain(v12);
    swift_willThrow(v31);
    swift_bridgeObjectRelease(v12);
    swift_release(v8);
    goto LABEL_3;
  }
  v27 = dword_1001EA6EC;
  swift_retain(v8);
  swift_bridgeObjectRetain(v12);
  v28 = (_QWORD *)swift_task_alloc(v27);
  *(_QWORD *)(v0 + 96) = v28;
  *v28 = v0;
  v28[1] = sub_1000B7238;
  return sub_1000B82F4();
}

uint64_t sub_1000B7190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B74A0;
  else
    v3 = sub_1000B71F4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B71F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B7238()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  return swift_task_switch(sub_1000B728C, 0, 0);
}

uint64_t sub_1000B728C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0[8];
  swift_bridgeObjectRelease(v0[9]);
  swift_release(v1);
  v2 = v0[6];
  v3 = v0[4];
  v4 = (char *)v0[5];
  v5 = v0[3];
  v6 = (uint64_t *)&v4[v0[7]];
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v2, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject(&unk_1001AEFF0, 56, 7);
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v4;
  v8[5] = v5;
  v8[6] = v3;
  v9 = v4;
  swift_bridgeObjectRetain(v3);
  v10 = sub_1000A92C0(v2, (uint64_t)&unk_1001EA6F8, (uint64_t)v8);
  v0[13] = v10;
  v11 = *v6;
  v12 = v6[1];
  v13 = v6[2];
  *v6 = v10;
  v6[1] = v5;
  v6[2] = v3;
  swift_bridgeObjectRetain(v3);
  swift_retain(v10);
  sub_1000B8A20(v11, v12, v13);
  v14 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  v0[14] = v14;
  v15 = type metadata accessor for AttributedString(0);
  v16 = sub_100014E10(qword_1001E9C68);
  *v14 = v0;
  v14[1] = sub_1000B73E0;
  return Task.value.getter(v0[2], v10, v15, v16, &protocol self-conformance witness table for Error);
}

uint64_t sub_1000B73E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B74E4;
  else
    v3 = sub_1000B7444;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B7444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 104));
  v3 = (_QWORD *)(v2 + v1);
  v4 = *(_QWORD *)(v2 + v1);
  v5 = *(_QWORD *)(v2 + v1 + 8);
  v6 = *(_QWORD *)(v2 + v1 + 16);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = 0;
  sub_1000B8A20(v4, v5, v6);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B74A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B74E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 104));
  v3 = (_QWORD *)(v2 + v1);
  v4 = *(_QWORD *)(v2 + v1);
  v5 = *(_QWORD *)(v2 + v1 + 8);
  v6 = *(_QWORD *)(v2 + v1 + 16);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = 0;
  sub_1000B8A20(v4, v5, v6);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B7540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6[9] = a5;
  v6[10] = a6;
  v6[8] = a1;
  v7 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v6[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[12] = v8;
  v6[13] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v6[14] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[15] = v10;
  v6[16] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AttributedString(0);
  v6[17] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[18] = v12;
  v6[19] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B7620, 0, 0);
}

uint64_t sub_1000B7620()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  _QWORD *v11;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v1 = objc_msgSend((id)objc_opt_self(RCApplicationContainer), "sharedContainer");
  if (v1 && (v2 = v1, v3 = objc_msgSend(v1, "newBackgroundModel"), v2, v3))
  {
    v5 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 80);
    v6 = *(_QWORD *)(v0 + 88);
    v8 = *(_QWORD *)(v0 + 72);
    *(_QWORD *)(v0 + 40) = &type metadata for TranscriptionStorageService;
    *(_QWORD *)(v0 + 48) = &off_1001B0390;
    *(_QWORD *)(v0 + 16) = v3;
    v9 = (_QWORD *)swift_allocObject(&unk_1001AF018, 40, 7);
    *(_QWORD *)(v0 + 160) = v9;
    v9[2] = v3;
    v9[3] = v8;
    v9[4] = v7;
    v10 = v3;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v0 + 168) = objc_msgSend(v10, "context");
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v6);
    v11 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1]);
    *(_QWORD *)(v0 + 176) = v11;
    *v11 = v0;
    v11[1] = sub_1000B7820;
    return NSManagedObjectContext.perform<A>(schedule:_:)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 104), sub_1000BA538, v9, *(_QWORD *)(v0 + 112));
  }
  else
  {
    v13 = sub_1000B8B10();
    v14 = swift_allocError(&type metadata for RecordingTranscriptionService.RecordingTranscriptionServiceError, v13, 0, 0);
    *v15 = 0;
    swift_willThrow(v14);
    v16 = *(_QWORD *)(v0 + 128);
    v17 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000B7820()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v3);
  v4 = (void *)v2[21];
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[12] + 8))(v2[13], v2[11]);

    v5 = sub_1000B7AFC;
  }
  else
  {
    v6 = v2[20];
    (*(void (**)(_QWORD, _QWORD))(v2[12] + 8))(v2[13], v2[11]);

    swift_release(v6);
    v5 = sub_1000B7908;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000B7908()
{
  uint64_t v0;
  id v1;
  NSURL *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v1 = objc_msgSend((id)objc_opt_self(RCSSavedRecordingService), "sharedService");
  URL._bridgeToObjectiveC()(v2);
  v4 = v3;
  *(_QWORD *)(v0 + 56) = 0;
  v5 = objc_msgSend(v1, "prepareToExportCompositionAVURL:error:", v3, v0 + 56);
  *(_QWORD *)(v0 + 192) = v5;

  v6 = *(void **)(v0 + 56);
  if (!v5)
  {
    v13 = *(_QWORD *)(v0 + 120);
    v12 = *(_QWORD *)(v0 + 128);
    v14 = *(_QWORD *)(v0 + 112);
    v15 = v6;
    _convertNSErrorToError(_:)(v6);

    swift_willThrow(v16);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    goto LABEL_5;
  }
  v7 = *(_QWORD *)(v0 + 184);
  static Task<>.checkCancellation()(v6);
  if (v7)
  {
    v8 = *(void **)(v0 + 192);
    v10 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 128);
    v11 = *(_QWORD *)(v0 + 112);
    sub_1000CCA90((uint64_t)v8);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
LABEL_5:
    sub_10001B498((_QWORD *)(v0 + 16));
    v17 = *(_QWORD *)(v0 + 128);
    v18 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v20 = *(_QWORD *)(v0 + 128);
  v21 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 200) = v21;
  *(_QWORD *)(v21 + 16) = v20;
  v22 = dword_1001EA710;
  v23 = (_QWORD *)swift_task_alloc(unk_1001EA714);
  *(_QWORD *)(v0 + 208) = v23;
  *v23 = v0;
  v23[1] = sub_1000B7B90;
  return ((uint64_t (*)(char, uint64_t, uint64_t, uint64_t))((char *)&dword_1001EA710 + v22))(0, 0, (uint64_t)&unk_1001EA708, v21);
}

uint64_t sub_1000B7AFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 160));
  sub_10001B498((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B7B90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 208);
  v4[27] = a1;
  v4[28] = a2;
  v4[29] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = sub_1000B7DF0;
  }
  else
  {
    swift_task_dealloc(v4[25]);
    v6 = sub_1000B7C54;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000B7C54()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[27];
  v1 = v0[28];
  v3 = swift_task_alloc(32);
  v0[30] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = swift_task_alloc(32);
  v0[31] = v4;
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  v0[32] = v5;
  *v5 = v0;
  v5[1] = sub_1000B7D30;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v0[19], &unk_1001EA718, v3, sub_1000BA620, v4, 0, 0, v0[17]);
}

uint64_t sub_1000B7D30()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 256);
  *(_QWORD *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000B8020;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 240);
    swift_task_dealloc(*(_QWORD *)(v2 + 248));
    swift_task_dealloc(v5);
    v4 = sub_1000B7EBC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000B7DF0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  v1 = *(void **)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 112);
  sub_1000CCA90((uint64_t)v1);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_10001B498((_QWORD *)(v0 + 16));
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B7EBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(void **)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 112);
  swift_release(*(_QWORD *)(v0 + 216));
  swift_release(v2);
  sub_1000CCA90((uint64_t)v3);

  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  static Task<>.checkCancellation()(v7);
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
    sub_10001B498((_QWORD *)(v0 + 16));
    v8 = *(_QWORD *)(v0 + 128);
    v9 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *sub_10001B474((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v12 = (_QWORD *)swift_task_alloc(dword_1001EB0D4);
    *(_QWORD *)(v0 + 272) = v12;
    *v12 = v0;
    v12[1] = sub_1000B8108;
    return sub_1000CCB8C(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), v11);
  }
}

uint64_t sub_1000B8020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v1);
  swift_release(v3);
  swift_release(v2);
  v4 = *(void **)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 112);
  sub_1000CCA90((uint64_t)v4);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  sub_10001B498((_QWORD *)(v0 + 16));
  v8 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B8108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B8258;
  else
    v3 = sub_1000B81B0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B81B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 32))(*(_QWORD *)(v0 + 64), v1, *(_QWORD *)(v0 + 136));
  sub_10001B498((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B8258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
  sub_10001B498((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B82F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = sub_100014E10((uint64_t *)&unk_1001ECD50);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B8350, 0, 0);
}

uint64_t sub_1000B8350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (uint64_t *)(v1 + OBJC_IVAR___RCRecordingTranscriptionService_fileTranscriptionTask);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR___RCRecordingTranscriptionService_fileTranscriptionTask);
  if (!v3)
    goto LABEL_4;
  v5 = v2[1];
  v4 = v2[2];
  sub_1000B89F4(*(_QWORD *)(v1 + OBJC_IVAR___RCRecordingTranscriptionService_fileTranscriptionTask), v5, v4);
  v6 = swift_retain(v3);
  sub_1000B8A20(v6, v5, v4);
  v7 = type metadata accessor for AttributedString(0);
  sub_100014E10(qword_1001E9C68);
  Task.cancel()();
  swift_release(v3);
  v8 = *v2;
  *(_QWORD *)(v0 + 32) = *v2;
  if (v8)
  {
    v11 = v2 + 1;
    v10 = v2[1];
    v9 = v11[1];
    sub_1000B89F4(v8, v10, v9);
    v12 = swift_retain(v8);
    sub_1000B8A20(v12, v10, v9);
    v13 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(_QWORD *)(v0 + 40) = v13;
    *(_QWORD *)(v0 + 48) = v7;
    v14 = sub_100014E10(qword_1001E9C68);
    *v13 = v0;
    v13[1] = sub_1000B84C4;
    return Task.value.getter(*(_QWORD *)(v0 + 24), v8, v7, v14, &protocol self-conformance witness table for Error);
  }
  else
  {
LABEL_4:
    v16 = type metadata accessor for AttributedString(0);
    v17 = *(_QWORD *)(v0 + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v17, 1, 1, v16);
    sub_1000B8A4C(v17);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000B84C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 40));
  if (v0)
  {
    v3 = *(_QWORD *)(v2 + 32);
    swift_errorRelease(v0);
    swift_release(v3);
    v4 = sub_1000B8598;
  }
  else
  {
    v4 = sub_1000B8538;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000B8538()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 32));
  v1 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 48) - 8) + 56))(v1, 0, 1);
  sub_1000B8A4C(v1);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B8598()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 48) - 8) + 56))(v1, 1, 1);
  sub_1000B8A4C(v1);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B870C(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_1001EA6EC;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1000B876C;
  return sub_1000B82F4();
}

uint64_t sub_1000B876C()
{
  uint64_t *v0;
  void (**v1)(_QWORD);
  void *v2;
  uint64_t v4;

  v1 = *(void (***)(_QWORD))(*v0 + 24);
  v2 = *(void **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));

  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

id sub_1000B87D0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RecordingTranscriptionService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RecordingTranscriptionService()
{
  return objc_opt_self(RCRecordingTranscriptionService);
}

uint64_t destroy for RecordingTranscriptionService.FileTranscriptionTask(_QWORD *a1)
{
  swift_release(*a1);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s10VoiceMemos29RecordingTranscriptionServiceC21FileTranscriptionTaskVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_retain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for RecordingTranscriptionService.FileTranscriptionTask(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for HighlightConfiguration(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for RecordingTranscriptionService.FileTranscriptionTask(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecordingTranscriptionService.FileTranscriptionTask(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RecordingTranscriptionService.FileTranscriptionTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordingTranscriptionService.FileTranscriptionTask()
{
  return &type metadata for RecordingTranscriptionService.FileTranscriptionTask;
}

uint64_t sub_1000B89F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_retain(result);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

uint64_t sub_1000B8A20(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_release(result);
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_1000B8A4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100014E10((uint64_t *)&unk_1001ECD50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B8A90(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1001EA6F4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10001B80C;
  return sub_1000B7540(a1, v4, v5, v6, v7, v8);
}

unint64_t sub_1000B8B10()
{
  unint64_t result;

  result = qword_1001EA700;
  if (!qword_1001EA700)
  {
    result = swift_getWitnessTable(&unk_100188844, &type metadata for RecordingTranscriptionService.RecordingTranscriptionServiceError);
    atomic_store(result, (unint64_t *)&qword_1001EA700);
  }
  return result;
}

uint64_t sub_1000B8B54(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v4 + 24) = a3;
  *(_QWORD *)(v4 + 32) = a4;
  *(_QWORD *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 232) = a1;
  v5 = sub_100014E10(&qword_1001E9BB0);
  *(_QWORD *)(v4 + 40) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100014E10(&qword_1001EA720);
  *(_QWORD *)(v4 + 48) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ClientInfo(0);
  *(_QWORD *)(v4 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100014E10(&qword_1001EA7B0);
  *(_QWORD *)(v4 + 64) = v8;
  *(_QWORD *)(v4 + 72) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100014E10(&qword_1001EA7B8);
  *(_QWORD *)(v4 + 80) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 88) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 96) = swift_task_alloc(v11);
  *(_QWORD *)(v4 + 104) = swift_task_alloc(v11);
  v12 = sub_100014E10(&qword_1001EA730);
  *(_QWORD *)(v4 + 112) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100014E10(&qword_1001EA738);
  *(_QWORD *)(v4 + 120) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Locale(0);
  *(_QWORD *)(v4 + 128) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B8CC8, 0, 0);
}

uint64_t sub_1000B8CC8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  if (qword_1001E9058 != -1)
    swift_once(&qword_1001E9058, sub_1000EB6A4);
  v3 = (uint64_t (__cdecl *)())((char *)&dword_1001EC370 + dword_1001EC370);
  v1 = (_QWORD *)swift_task_alloc(unk_1001EC374);
  *(_QWORD *)(v0 + 136) = v1;
  *v1 = v0;
  v1[1] = sub_1000B8D48;
  return v3();
}

uint64_t sub_1000B8D48(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_BYTE *)(*(_QWORD *)v1 + 233) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000B8DA4, 0, 0);
}

uint64_t sub_1000B8DA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  uint64_t (__cdecl *v42)();

  if (*(_BYTE *)(v0 + 233) == 1)
  {
    v1 = *(_QWORD *)(v0 + 120);
    v2 = *(_QWORD *)(v0 + 112);
    v3 = *(_BYTE *)(v0 + 232);
    Locale.init(identifier:)(0x73752D6E65, 0xE500000000000000);
    v4 = enum case for TaskHint.liveTranscription(_:);
    v5 = type metadata accessor for TaskHint(0);
    v6 = *(_QWORD *)(v5 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v1, v4, v5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v1, 0, 1, v5);
    v7 = type metadata accessor for Transcriber.ModelOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v2, 1, 1, v7);
    v41 = sub_1000BCCA8();
    v8 = sub_100014E10(&qword_1001EA748);
    v9 = type metadata accessor for Transcriber.ReportingOption(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(_QWORD *)(v10 + 72);
    v12 = *(unsigned __int8 *)(v10 + 80);
    v13 = (v12 + 32) & ~v12;
    if ((v3 & 1) != 0)
    {
      v14 = swift_allocObject(v8, v13 + 2 * v11, v12 | 7);
      *(_OWORD *)(v14 + 16) = xmmword_100187B90;
      v15 = v14 + v13;
      v16 = *(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104);
      v16(v15, enum case for Transcriber.ReportingOption.multisegmentResults(_:), v9);
      v16(v15 + v11, enum case for Transcriber.ReportingOption.volatileResults(_:), v9);
      v17 = sub_1000FAC30(v14);
      swift_setDeallocating(v14);
      v18 = v15;
      v19 = 2;
    }
    else
    {
      v14 = swift_allocObject(v8, v13 + v11, v12 | 7);
      *(_OWORD *)(v14 + 16) = xmmword_100188080;
      v22 = v14 + v13;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v22, enum case for Transcriber.ReportingOption.multisegmentResults(_:), v9);
      v17 = sub_1000FAC30(v14);
      swift_setDeallocating(v14);
      v18 = v22;
      v19 = 1;
    }
    swift_arrayDestroy(v18, v19, v9);
    v24 = *(_QWORD *)(v0 + 120);
    v23 = *(_QWORD *)(v0 + 128);
    v25 = *(_QWORD *)(v0 + 112);
    swift_deallocClassInstance(v14, 32, 7);
    v26 = sub_100014E10(&qword_1001EA750);
    v27 = type metadata accessor for TranscriptionResultAttributeOption(0);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(unsigned __int8 *)(v28 + 80);
    v30 = (v29 + 32) & ~v29;
    v31 = swift_allocObject(v26, v30 + *(_QWORD *)(v28 + 72), v29 | 7);
    *(_OWORD *)(v31 + 16) = xmmword_100188080;
    v32 = v31 + v30;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104))(v32, enum case for TranscriptionResultAttributeOption.timeRange(_:), v27);
    v33 = sub_1000FAE98(v31);
    swift_setDeallocating(v31);
    swift_arrayDestroy(v32, 1, v27);
    swift_deallocClassInstance(v31, 32, 7);
    v34 = type metadata accessor for Transcriber(0);
    swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
    v35 = Transcriber.init(locale:taskHint:modelOptions:transcriptionOptions:reportingOptions:attributeOptions:)(v23, v24, v25, v41, v17, v33);
    *(_QWORD *)(v0 + 152) = v35;
    *(_QWORD *)(v0 + 160) = type metadata accessor for SpeechAnalyzer(0);
    v36 = sub_100014E10(&qword_1001EA758);
    *(_QWORD *)(v0 + 168) = v36;
    v37 = swift_allocObject(v36, 48, 7);
    *(_QWORD *)(v0 + 176) = v37;
    *(_OWORD *)(v37 + 16) = xmmword_100188080;
    v38 = sub_1000BA6DC();
    *(_QWORD *)(v0 + 184) = v38;
    *(_QWORD *)(v37 + 32) = v35;
    *(_QWORD *)(v37 + 40) = v38;
    v39 = async function pointer to static SpeechAnalyzer.bestAudioFormat(compatibleWith:considering:)[1];
    swift_retain_n(v35, 2);
    v40 = (_QWORD *)swift_task_alloc(v39);
    *(_QWORD *)(v0 + 192) = v40;
    *v40 = v0;
    v40[1] = sub_1000B9348;
    return static SpeechAnalyzer.bestAudioFormat(compatibleWith:considering:)(v37, *(_QWORD *)(v0 + 16));
  }
  else
  {
    v42 = (uint64_t (__cdecl *)())((char *)&dword_1001EC378 + dword_1001EC378);
    v20 = (_QWORD *)swift_task_alloc(unk_1001EC37C);
    *(_QWORD *)(v0 + 144) = v20;
    *v20 = v0;
    v20[1] = sub_1000B9170;
    return v42();
  }
}

uint64_t sub_1000B9170(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_BYTE *)(*(_QWORD *)v1 + 234) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000B91CC, 0, 0);
}

uint64_t sub_1000B91CC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  if ((*(_BYTE *)(v0 + 234) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 40);
    v2 = (void *)qword_1001F6E18;
    v3 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v1, 1, 1, v3);
    type metadata accessor for MainActor(0);
    v4 = v2;
    v5 = static MainActor.shared.getter(v4);
    v6 = (_QWORD *)swift_allocObject(&unk_1001AF108, 40, 7);
    v6[2] = v5;
    v6[3] = &protocol witness table for MainActor;
    v6[4] = v4;
    v7 = sub_1000F7930(v1, (uint64_t)&unk_1001EA7C0, (uint64_t)v6);
    swift_release(v7);
    v8 = 4;
  }
  else
  {
    v8 = 5;
  }
  v9 = sub_1000BA628();
  v10 = swift_allocError(&type metadata for TranscriptionError, v9, 0, 0);
  *v11 = v8;
  swift_willThrow(v10);
  v13 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 128);
  v15 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 112);
  v16 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 72);
  v19 = *(_QWORD *)(v0 + 48);
  v18 = *(_QWORD *)(v0 + 56);
  v21 = *(_QWORD *)(v0 + 40);

  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B9348(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int *v9;
  _QWORD *v10;
  int *v11;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 192);
  v5 = *(_QWORD **)v2;
  v5[25] = a1;
  v5[26] = v1;
  swift_task_dealloc(v4);
  v6 = v5[22];
  if (v1)
  {
    v7 = v5[19];
    swift_bridgeObjectRelease(v6);
    swift_release(v7);
    return swift_task_switch(sub_1000B9484, 0, 0);
  }
  else
  {
    v9 = (int *)v5[3];
    swift_bridgeObjectRelease(v6);
    v11 = (int *)((char *)v9 + *v9);
    v10 = (_QWORD *)swift_task_alloc(v9[1]);
    v5[27] = v10;
    *v10 = v5;
    v10[1] = sub_1000B9418;
    return ((uint64_t (*)(_QWORD, uint64_t))v11)(v5[9], a1);
  }
}

uint64_t sub_1000B9418()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 216);
  *(_QWORD *)(*v1 + 224) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_release(*(_QWORD *)(v2 + 152));
    v4 = sub_1000B97A8;
  }
  else
  {
    v4 = sub_1000B9548;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000B9484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_release(*(_QWORD *)(v0 + 152));
  v2 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 40);

  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B9548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v22 = *(_QWORD *)(v0 + 184);
  v19 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 152);
  v24 = *(_QWORD *)(v0 + 200);
  v25 = *(_QWORD *)(v0 + 128);
  v26 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 104);
  v27 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 64);
  v20 = *(_QWORD *)(v0 + 48);
  v21 = *(_QWORD *)(v0 + 56);
  v28 = *(_QWORD *)(v0 + 40);
  v23 = *(void **)(v0 + 16);
  v8 = type metadata accessor for AnalyzerInput(0);
  v9 = sub_10000EDB0(&qword_1001EA7C8, &qword_1001EA7B0, (uint64_t)&protocol conformance descriptor for AsyncThrowingMapSequence<A, B>);
  AsyncMapSequence.init(_:transform:)(v5, &unk_1001EA838, 0, v7, v8, v9);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(RCVoiceMemosBundleID);
  ClientInfo.init(identifier:)(v10);
  v11 = v3;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v6);
  v12 = swift_allocObject(v19, 48, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100188080;
  *(_QWORD *)(v12 + 32) = v1;
  *(_QWORD *)(v12 + 40) = v22;
  v13 = type metadata accessor for AnalysisOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v20, 1, 1, v13);
  v14 = objc_allocWithZone((Class)type metadata accessor for AnalysisContext(0));
  swift_retain(v1);
  v15 = objc_msgSend(v14, "init");
  v16 = sub_10000EDB0(&qword_1001EA7D0, &qword_1001EA7B8, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>);
  v17 = SpeechAnalyzer.__allocating_init<A>(client:inputSequence:audioFormat:modules:options:restrictedLogging:analysisContext:didChangeVolatileRange:)(v21, v11, v24, v12, v20, 0, v15, 0, 0, v6, v16);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v6);
  swift_release(v1);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v2);
  swift_task_dealloc(v11);
  swift_task_dealloc(v5);
  swift_task_dealloc(v21);
  swift_task_dealloc(v20);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v0 + 152), v17);
}

uint64_t sub_1000B97A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 152);

  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 56);
  v10 = *(_QWORD *)(v0 + 40);

  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B9878(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v4 + 56) = a3;
  *(_QWORD *)(v4 + 64) = a4;
  *(_QWORD *)(v4 + 48) = a2;
  *(_BYTE *)(v4 + 248) = a1;
  v5 = sub_100014E10(&qword_1001E9BB0);
  *(_QWORD *)(v4 + 72) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100014E10(&qword_1001EA720);
  *(_QWORD *)(v4 + 80) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ClientInfo(0);
  *(_QWORD *)(v4 + 88) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100014E10(&qword_1001EA728);
  *(_QWORD *)(v4 + 96) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 104) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 112) = swift_task_alloc(v10);
  *(_QWORD *)(v4 + 120) = swift_task_alloc(v10);
  v11 = sub_100014E10(&qword_1001EA730);
  *(_QWORD *)(v4 + 128) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100014E10(&qword_1001EA738);
  *(_QWORD *)(v4 + 136) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  *(_QWORD *)(v4 + 144) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B99C4, 0, 0);
}

uint64_t sub_1000B99C4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  if (qword_1001E9058 != -1)
    swift_once(&qword_1001E9058, sub_1000EB6A4);
  v3 = (uint64_t (__cdecl *)())((char *)&dword_1001EC370 + dword_1001EC370);
  v1 = (_QWORD *)swift_task_alloc(unk_1001EC374);
  *(_QWORD *)(v0 + 152) = v1;
  *v1 = v0;
  v1[1] = sub_1000B9A44;
  return v3();
}

uint64_t sub_1000B9A44(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_BYTE *)(*(_QWORD *)v1 + 249) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000B9AA0, 0, 0);
}

uint64_t sub_1000B9AA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  uint64_t (__cdecl *v42)();

  if (*(_BYTE *)(v0 + 249) == 1)
  {
    v1 = *(_QWORD *)(v0 + 136);
    v2 = *(_QWORD *)(v0 + 128);
    v3 = *(_BYTE *)(v0 + 248);
    Locale.init(identifier:)(0x73752D6E65, 0xE500000000000000);
    v4 = enum case for TaskHint.liveTranscription(_:);
    v5 = type metadata accessor for TaskHint(0);
    v6 = *(_QWORD *)(v5 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v1, v4, v5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v1, 0, 1, v5);
    v7 = type metadata accessor for Transcriber.ModelOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v2, 1, 1, v7);
    v41 = sub_1000BCCA8();
    v8 = sub_100014E10(&qword_1001EA748);
    v9 = type metadata accessor for Transcriber.ReportingOption(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(_QWORD *)(v10 + 72);
    v12 = *(unsigned __int8 *)(v10 + 80);
    v13 = (v12 + 32) & ~v12;
    if ((v3 & 1) != 0)
    {
      v14 = swift_allocObject(v8, v13 + 2 * v11, v12 | 7);
      *(_OWORD *)(v14 + 16) = xmmword_100187B90;
      v15 = v14 + v13;
      v16 = *(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104);
      v16(v15, enum case for Transcriber.ReportingOption.multisegmentResults(_:), v9);
      v16(v15 + v11, enum case for Transcriber.ReportingOption.volatileResults(_:), v9);
      v17 = sub_1000FAC30(v14);
      swift_setDeallocating(v14);
      v18 = v15;
      v19 = 2;
    }
    else
    {
      v14 = swift_allocObject(v8, v13 + v11, v12 | 7);
      *(_OWORD *)(v14 + 16) = xmmword_100188080;
      v22 = v14 + v13;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v22, enum case for Transcriber.ReportingOption.multisegmentResults(_:), v9);
      v17 = sub_1000FAC30(v14);
      swift_setDeallocating(v14);
      v18 = v22;
      v19 = 1;
    }
    swift_arrayDestroy(v18, v19, v9);
    v24 = *(_QWORD *)(v0 + 136);
    v23 = *(_QWORD *)(v0 + 144);
    v25 = *(_QWORD *)(v0 + 128);
    swift_deallocClassInstance(v14, 32, 7);
    v26 = sub_100014E10(&qword_1001EA750);
    v27 = type metadata accessor for TranscriptionResultAttributeOption(0);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(unsigned __int8 *)(v28 + 80);
    v30 = (v29 + 32) & ~v29;
    v31 = swift_allocObject(v26, v30 + *(_QWORD *)(v28 + 72), v29 | 7);
    *(_OWORD *)(v31 + 16) = xmmword_100188080;
    v32 = v31 + v30;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104))(v32, enum case for TranscriptionResultAttributeOption.timeRange(_:), v27);
    v33 = sub_1000FAE98(v31);
    swift_setDeallocating(v31);
    swift_arrayDestroy(v32, 1, v27);
    swift_deallocClassInstance(v31, 32, 7);
    v34 = type metadata accessor for Transcriber(0);
    swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
    v35 = Transcriber.init(locale:taskHint:modelOptions:transcriptionOptions:reportingOptions:attributeOptions:)(v23, v24, v25, v41, v17, v33);
    *(_QWORD *)(v0 + 168) = v35;
    *(_QWORD *)(v0 + 176) = type metadata accessor for SpeechAnalyzer(0);
    v36 = sub_100014E10(&qword_1001EA758);
    *(_QWORD *)(v0 + 184) = v36;
    v37 = swift_allocObject(v36, 48, 7);
    *(_QWORD *)(v0 + 192) = v37;
    *(_OWORD *)(v37 + 16) = xmmword_100188080;
    v38 = sub_1000BA6DC();
    *(_QWORD *)(v0 + 200) = v38;
    *(_QWORD *)(v37 + 32) = v35;
    *(_QWORD *)(v37 + 40) = v38;
    v39 = async function pointer to static SpeechAnalyzer.bestAudioFormat(compatibleWith:considering:)[1];
    swift_retain_n(v35, 2);
    v40 = (_QWORD *)swift_task_alloc(v39);
    *(_QWORD *)(v0 + 208) = v40;
    *v40 = v0;
    v40[1] = sub_1000BA034;
    return static SpeechAnalyzer.bestAudioFormat(compatibleWith:considering:)(v37, *(_QWORD *)(v0 + 48));
  }
  else
  {
    v42 = (uint64_t (__cdecl *)())((char *)&dword_1001EC378 + dword_1001EC378);
    v20 = (_QWORD *)swift_task_alloc(unk_1001EC37C);
    *(_QWORD *)(v0 + 160) = v20;
    *v20 = v0;
    v20[1] = sub_1000B9E6C;
    return v42();
  }
}

uint64_t sub_1000B9E6C(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_BYTE *)(*(_QWORD *)v1 + 250) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000B9EC8, 0, 0);
}

uint64_t sub_1000B9EC8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((*(_BYTE *)(v0 + 250) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 72);
    v2 = *(void **)(v0 + 48);
    v3 = (void *)qword_1001F6E18;
    v4 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v1, 1, 1, v4);
    type metadata accessor for MainActor(0);
    v5 = v3;
    v6 = static MainActor.shared.getter(v5);
    v7 = (_QWORD *)swift_allocObject(&unk_1001AF040, 40, 7);
    v7[2] = v6;
    v7[3] = &protocol witness table for MainActor;
    v7[4] = v5;
    v8 = sub_1000F7930(v1, (uint64_t)&unk_1001EA740, (uint64_t)v7);
    swift_release(v8);
    v9 = 4;
  }
  else
  {
    v2 = *(void **)(v0 + 48);
    v9 = 5;
  }
  v10 = sub_1000BA628();
  v11 = swift_allocError(&type metadata for TranscriptionError, v10, 0, 0);
  *v12 = v9;
  swift_willThrow(v11);

  v13 = *(_QWORD *)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 128);
  v16 = *(_QWORD *)(v0 + 112);
  v18 = *(_QWORD *)(v0 + 80);
  v17 = *(_QWORD *)(v0 + 88);
  v19 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BA034(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int *v8;
  _QWORD *v9;
  int *v10;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 208);
  v5 = *(_QWORD **)v2;
  v5[27] = a1;
  v5[28] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v6 = v5[21];
    swift_bridgeObjectRelease(v5[24]);
    swift_release(v6);
    return swift_task_switch(sub_1000BA180, 0, 0);
  }
  else
  {
    v8 = (int *)v5[7];
    swift_bridgeObjectRelease(v5[24]);
    v10 = (int *)((char *)v8 + *v8);
    v9 = (_QWORD *)swift_task_alloc(v8[1]);
    v5[29] = v9;
    *v9 = v5;
    v9[1] = sub_1000BA114;
    return ((uint64_t (*)(_QWORD *, uint64_t))v10)(v5 + 2, a1);
  }
}

uint64_t sub_1000BA114()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 232);
  *(_QWORD *)(*v1 + 240) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_release(*(_QWORD *)(v2 + 168));
    v4 = sub_1000BA45C;
  }
  else
  {
    v4 = sub_1000BA224;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000BA180()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 168));

  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BA224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 184);
  v21 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 168);
  v22 = *(_QWORD *)(v0 + 144);
  v23 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  v24 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  v18 = *(_QWORD *)(v0 + 80);
  v19 = *(_QWORD *)(v0 + 200);
  v25 = *(_QWORD *)(v0 + 72);
  v20 = *(void **)(v0 + 48);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 16);
  v8 = type metadata accessor for AnalyzerInput(0);
  v9 = sub_1000BA724();
  AsyncMapSequence.init(_:transform:)(v0 + 32, &unk_1001EA838, 0, &type metadata for ExtAudioFileSequence, v8, v9);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(RCVoiceMemosBundleID);
  ClientInfo.init(identifier:)(v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v3, v7);
  v11 = swift_allocObject(v1, 48, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100188080;
  *(_QWORD *)(v11 + 32) = v2;
  *(_QWORD *)(v11 + 40) = v19;
  v12 = type metadata accessor for AnalysisOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v18, 1, 1, v12);
  v13 = objc_allocWithZone((Class)type metadata accessor for AnalysisContext(0));
  swift_retain(v2);
  v14 = objc_msgSend(v13, "init");
  v15 = sub_10000EDB0(&qword_1001EA770, &qword_1001EA728, (uint64_t)&protocol conformance descriptor for AsyncMapSequence<A, B>);
  v16 = SpeechAnalyzer.__allocating_init<A>(client:inputSequence:audioFormat:modules:options:restrictedLogging:analysisContext:didChangeVolatileRange:)(v6, v5, v21, v11, v18, 0, v14, 0, 0, v7, v15);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v7);
  swift_release(v2);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v18);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v0 + 168), v16);
}

uint64_t sub_1000BA45C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(void **)(v0 + 48);

  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 112);
  v8 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BA50C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000BA538(char *a1@<X8>)
{
  uint64_t v1;

  sub_1000CC864(*(void **)(v1 + 16), a1);
}

uint64_t sub_1000BA554(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_1001EA854);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100003A7C;
  return sub_1000BADC8(a1, a2, v6);
}

uint64_t sub_1000BA5BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1001EA7FC);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10001B80C;
  return sub_1000BB278(a1, v5, v4);
}

uint64_t sub_1000BA620()
{
  uint64_t v0;

  return sub_1000BBC34(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_1000BA628()
{
  unint64_t result;

  result = qword_1001ECD90;
  if (!qword_1001ECD90)
  {
    result = swift_getWitnessTable(&unk_100188884, &type metadata for TranscriptionError);
    atomic_store(result, (unint64_t *)&qword_1001ECD90);
  }
  return result;
}

uint64_t sub_1000BA670(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1001EC36C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001B80C;
  return sub_1000EBC44(a1, v4, v5, v6);
}

unint64_t sub_1000BA6DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001EA760;
  if (!qword_1001EA760)
  {
    v1 = type metadata accessor for Transcriber(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Transcriber, v1);
    atomic_store(result, (unint64_t *)&qword_1001EA760);
  }
  return result;
}

unint64_t sub_1000BA724()
{
  unint64_t result;

  result = qword_1001EA768;
  if (!qword_1001EA768)
  {
    result = swift_getWitnessTable(&unk_100188510, &type metadata for ExtAudioFileSequence);
    atomic_store(result, (unint64_t *)&qword_1001EA768);
  }
  return result;
}

uint64_t sub_1000BA768()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BA794()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1001EA77C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100003A7C;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1001EA778 + dword_1001EA778))(v2, v3);
}

uint64_t sub_1000BA7FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1001ED544);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10001B80C;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1001ED540 + dword_1001ED540))(v2, v3, v4);
}

uint64_t sub_1000BA878()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000BA8A4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1001ED54C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001B80C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1001ED548 + dword_1001ED548))(a1, v4, v5, v6);
}

uint64_t sub_1000BA92C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000BA960(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1001EA79C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10001B80C;
  return sub_1000B69A4(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000BA9E4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t getEnumTagSinglePayload for AutoScrollStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RecordingTranscriptionService.RecordingTranscriptionServiceError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000BAAEC + 4 * byte_1001886B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000BAB20 + 4 * asc_1001886B0[v4]))();
}

uint64_t sub_1000BAB20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BAB28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000BAB30);
  return result;
}

uint64_t sub_1000BAB3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000BAB44);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000BAB48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BAB50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000BAB5C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for RecordingTranscriptionService.RecordingTranscriptionServiceError()
{
  return &type metadata for RecordingTranscriptionService.RecordingTranscriptionServiceError;
}

uint64_t getEnumTagSinglePayload for TranscriptionError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TranscriptionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000BAC54 + 4 * byte_1001886BF[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000BAC88 + 4 * byte_1001886BA[v4]))();
}

uint64_t sub_1000BAC88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BAC90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000BAC98);
  return result;
}

uint64_t sub_1000BACA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000BACACLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000BACB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BACB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TranscriptionError()
{
  return &type metadata for TranscriptionError;
}

unint64_t sub_1000BACD8()
{
  unint64_t result;

  result = qword_1001EA7D8;
  if (!qword_1001EA7D8)
  {
    result = swift_getWitnessTable(&unk_1001887B4, &type metadata for TranscriptionError);
    atomic_store(result, (unint64_t *)&qword_1001EA7D8);
  }
  return result;
}

unint64_t sub_1000BAD20()
{
  unint64_t result;

  result = qword_1001EA7E0;
  if (!qword_1001EA7E0)
  {
    result = swift_getWitnessTable(&unk_10018881C, &type metadata for RecordingTranscriptionService.RecordingTranscriptionServiceError);
    atomic_store(result, &qword_1001EA7E0);
  }
  return result;
}

uint64_t sub_1000BAD64(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_1000BAD80, 0, 0);
}

uint64_t sub_1000BAD80()
{
  uint64_t v0;

  AnalyzerInput.init(buffer:bufferStartTime:)(*(id *)(v0 + 24), 0, 0, 0, 1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BADC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for URL(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000BAE2C, 0, 0);
}

uint64_t sub_1000BAE2C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  ExtAudioFileRef v3;
  uint64_t v4;
  ExtAudioFileRef *v5;
  OpaqueExtAudioFile *v6;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(void **)(v0 + 24);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 16))(v1, *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  v3 = sub_1000B5FF4(v1, v2);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(ExtAudioFileRef **)(v0 + 16);
  *v5 = v3;
  v5[1] = v6;
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BAEB8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a1;
  v4[3] = a3;
  v5 = *a2;
  v4[4] = a4;
  v4[5] = v5;
  return swift_task_switch(sub_1000BAED8, 0, 0);
}

uint64_t sub_1000BAED8()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = sub_1000EA7EC(*(void **)(v0 + 40), *(void **)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BAF34(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for EARResultType(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100014E10((uint64_t *)&unk_1001ECD50);
  v2[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttributedString(0);
  v2[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[9] = v7;
  v2[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000BAFE0, 0, 0);
}

uint64_t sub_1000BAFE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_BYTE *, uint64_t, uint64_t);
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = Transcriber.MultisegmentResult.transcriptions.getter();
  if (*(_QWORD *)(v1 + 16))
  {
    (*(void (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 16))(*(_QWORD *)(v0 + 56), v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 72) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 72) + 80)), *(_QWORD *)(v0 + 64));
    v2 = 0;
  }
  else
  {
    v2 = 1;
  }
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v5, v2, 1, v3);
  swift_bridgeObjectRelease(v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
  {
    sub_100005440(*(_QWORD *)(v0 + 56), (uint64_t *)&unk_1001ECD50);
LABEL_10:
    v15 = *(_QWORD *)(v0 + 16);
    v16 = type metadata accessor for TranscriptionUtterance(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
    goto LABEL_14;
  }
  v7 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 32);
  v9 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 72) + 32);
  v10 = v9(*(_BYTE **)(v0 + 80), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  Transcriber.MultisegmentResult.earResultType.getter(v10);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 88))(v6, v8);
  if (v11 != enum case for EARResultType.partial(_:)
    && v11 != enum case for EARResultType.final(_:)
    && v11 != enum case for EARResultType.finalAndTerminal(_:))
  {
    v13 = *(_QWORD *)(v0 + 72);
    v12 = *(_QWORD *)(v0 + 80);
    v14 = *(_QWORD *)(v0 + 64);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    goto LABEL_10;
  }
  v17 = Transcriber.MultisegmentResult.resultsFinalToTime.getter();
  v19 = v18;
  v21 = v20;
  v22 = Transcriber.MultisegmentResult.range.getter();
  v23 = CMTimeRange.end.getter(v22);
  if ((static CMTime.>= infix(_:_:)(v17, v19, v21, v23, v24, v25) & 1) != 0)
    sub_1000BCE60(*(_QWORD *)(v0 + 80));
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 64);
  v28 = *(_BYTE **)(v0 + 16);
  v29 = Transcriber.MultisegmentResult.resultsFinalToTime.getter();
  v31 = v30;
  v33 = v32;
  v34 = Transcriber.MultisegmentResult.range.getter();
  v35 = CMTimeRange.end.getter(v34);
  v38 = static CMTime.>= infix(_:_:)(v29, v31, v33, v35, v36, v37);
  v39 = type metadata accessor for TranscriptionUtterance(0);
  v9(&v28[*(int *)(v39 + 20)], v26, v27);
  *v28 = v38 & 1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v28, 0, 1, v39);
LABEL_14:
  v40 = *(_QWORD *)(v0 + 48);
  v41 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v41);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BB278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = sub_100014E10(&qword_1001E9BE0);
  v3[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TranscriptionUtterance(0);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100014E10(&qword_1001E9BF8);
  v3[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[10] = v8;
  v3[11] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AttributedString(0);
  v3[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[13] = v10;
  v3[14] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100014E10(&qword_1001E9BE8);
  v3[15] = v11;
  v3[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100014E10(&qword_1001E9BF0);
  v3[17] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[18] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[19] = swift_task_alloc(v14);
  v3[20] = swift_task_alloc(v14);
  return swift_task_switch(sub_1000BB3B8, 0, 0);
}

uint64_t sub_1000BB3B8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  static Task<>.checkCancellation()(a1);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to SpeechAnalyzer.finalizeAndFinishThroughEndOfInput()[1]);
  *(_QWORD *)(v1 + 168) = v2;
  *v2 = v1;
  v2[1] = sub_1000BB498;
  return SpeechAnalyzer.finalizeAndFinishThroughEndOfInput()();
}

uint64_t sub_1000BB498()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 168);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_1000BB570, 0, 0);
  v6 = v2[19];
  v5 = v2[20];
  v7 = v2[16];
  v8 = v2[14];
  v9 = v2[11];
  v10 = v2[8];
  v11 = v2[5];
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000BB570(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t OpaqueTypeConformance2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v2 = v1[19];
  v3 = v1[20];
  v4 = v1[17];
  v6 = v1[15];
  v5 = v1[16];
  v18 = v1[18];
  v7 = v1[6];
  v8 = v1[3];
  v9 = v1[4];
  Transcriber.multisegmentResults.getter(a1);
  v10 = swift_allocObject(&unk_1001AF308, 32, 7);
  *(_QWORD *)(v10 + 16) = v8;
  *(_QWORD *)(v10 + 24) = v9;
  swift_retain(v8);
  v11 = swift_retain(v9);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v11, &opaque type descriptor for <<opaque return type of Transcriber.multisegmentResults>>, 1);
  v13 = AsyncCompactMapSequence.init(_:transform:)(v5, &unk_1001E9C10, v10, v6, v7, OpaqueTypeConformance2);
  AttributedString.init()(v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v2, v3, v4);
  v14 = sub_10000EDB0(&qword_1001E9C18, &qword_1001E9BF0, (uint64_t)&protocol conformance descriptor for AsyncCompactMapSequence<A, B>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v4, v14);
  v15 = sub_10000EDB0(&qword_1001E9C20, &qword_1001E9BF8, (uint64_t)&protocol conformance descriptor for AsyncCompactMapSequence<A, B>.Iterator);
  v1[22] = v15;
  v16 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v1[23] = v16;
  *v16 = v1;
  v16[1] = sub_1000BB6EC;
  return dispatch thunk of AsyncIteratorProtocol.next()(v1[5], v1[9], v15);
}

uint64_t sub_1000BB6EC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 184));
  if (v0)
  {
    v2[25] = v0;
    v4 = v2[13];
    v3 = v2[14];
    v6 = v2[11];
    v5 = v2[12];
    v9 = v2 + 9;
    v7 = v2[9];
    v8 = v9[1];
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    v10 = sub_1000BBB00;
  }
  else
  {
    v2[24] = 0;
    v10 = sub_1000BB780;
  }
  return swift_task_switch(v10, 0, 0);
}

uint64_t sub_1000BB780()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = v0[5];
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0[7] + 48))(v1, 1, v0[6]) == 1)
  {
    v2 = v0[20];
    v3 = v0[17];
    v4 = v0[18];
    v35 = v0[19];
    v36 = v0[16];
    v5 = v0[13];
    v6 = v0[14];
    v8 = v0[11];
    v7 = v0[12];
    v37 = v0[8];
    v9 = v0[2];
    (*(void (**)(uint64_t, _QWORD))(v0[10] + 8))(v8, v0[9]);
    sub_100005440(v1, &qword_1001E9BE0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v9, v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
    swift_task_dealloc(v2);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v6);
    swift_task_dealloc(v8);
    swift_task_dealloc(v37);
    swift_task_dealloc(v1);
    v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  v11 = v0[24];
  v12 = sub_1000AAA80(v1, v0[8]);
  static Task<>.checkCancellation()(v12);
  if (v11)
  {
    v13 = v0[11];
    v14 = v0[9];
    v15 = v0[10];
    v16 = v0[8];
    (*(void (**)(_QWORD, _QWORD))(v0[13] + 8))(v0[14], v0[12]);
    sub_1000AABB0(v16);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    (*(void (**)(_QWORD, _QWORD))(v0[18] + 8))(v0[20], v0[17]);
    v17 = v0[19];
    v18 = v0[16];
    v19 = v0[14];
    v20 = v0[11];
    v21 = v0[8];
    v22 = v0[5];
    swift_task_dealloc(v0[20]);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  v24 = (_BYTE *)v0[8];
  if ((*v24 & 1) != 0)
  {
    v25 = v0[12];
    v26 = &v24[*(int *)(v0[6] + 20)];
    v27 = sub_10001B7CC(&qword_1001EC110, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
    AttributedString.append<A>(_:)(v26, v25, v27);
  }
  else
  {
    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v28 = type metadata accessor for Logger(0);
    sub_1000AACFC(v28, (uint64_t)qword_1001F6C20);
    v29 = static os_log_type_t.error.getter();
    v30 = v29;
    v31 = Logger.logObject.getter(v29);
    if (os_log_type_enabled(v31, v30))
    {
      v32 = swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v38 = v33;
      *(_DWORD *)v32 = 136315138;
      *(_QWORD *)(v32 + 4) = sub_1001049A8(0xD000000000000010, 0x80000001001833D0, &v38);
      _os_log_impl((void *)&_mh_execute_header, v31, v30, "%s - utterances are expected to be finalized", (uint8_t *)v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }

  }
  sub_1000AABB0(v0[8]);
  v34 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[26] = v34;
  *v34 = v0;
  v34[1] = sub_1000BBBA0;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[5], v0[9], v0[22]);
}

uint64_t sub_1000BBB00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136));
  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BBBA0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 208));
  if (v0)
  {
    v2[25] = v0;
    v4 = v2[13];
    v3 = v2[14];
    v6 = v2[11];
    v5 = v2[12];
    v9 = v2 + 9;
    v7 = v2[9];
    v8 = v9[1];
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    v10 = sub_1000BBB00;
  }
  else
  {
    v2[24] = 0;
    v10 = sub_1000BB780;
  }
  return swift_task_switch(v10, 0, 0);
}

uint64_t sub_1000BBC34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v25[4];

  v4 = sub_100014E10(&qword_1001E9BB0);
  __chkstk_darwin(v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  v9 = (_QWORD *)swift_allocObject(&unk_1001AF2B8, 48, 7);
  v9[2] = 0;
  v10 = v9 + 2;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  swift_retain(a1);
  v12 = swift_retain(a2);
  if (v11 == 1)
  {
    sub_100005440((uint64_t)v6, &qword_1001E9BB0);
    v13 = 0;
    v14 = 0;
    v15 = 7168;
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v12);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    v15 = v16 | 0x1C00;
    v17 = *v10;
    if (*v10)
    {
      v18 = v9[3];
      ObjectType = swift_getObjectType(*v10);
      swift_unknownObjectRetain(v17);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v18);
      v14 = v20;
      swift_unknownObjectRelease(v17);
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
  }
  v21 = swift_allocObject(&unk_1001AF2E0, 32, 7);
  *(_QWORD *)(v21 + 16) = &unk_1001EA7F0;
  *(_QWORD *)(v21 + 24) = v9;
  if (v14 | v13)
  {
    v25[0] = 0;
    v25[1] = 0;
    v22 = v25;
    v25[2] = v13;
    v25[3] = v14;
  }
  else
  {
    v22 = 0;
  }
  v23 = swift_task_create(v15, v22, (char *)&type metadata for () + 8, &unk_1001E9C48, v21);
  return swift_release(v23);
}

uint64_t sub_1000BBE18()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to SpeechAnalyzer.cancelAndFinishNow()[1]);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001B80C;
  return SpeechAnalyzer.cancelAndFinishNow()();
}

uint64_t sub_1000BBE64()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000BBE98()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_1001EA7EC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100003A7C;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to SpeechAnalyzer.cancelAndFinishNow()[1]);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_10001B80C;
  return SpeechAnalyzer.cancelAndFinishNow()();
}

uint64_t sub_1000BBF04()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for TranscriptionUtterance(uint64_t a1)
{
  uint64_t result;

  result = qword_1001EA8B8;
  if (!qword_1001EA8B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TranscriptionUtterance);
  return result;
}

uint64_t sub_1000BBF64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BBF90(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for Transcriber.TranscriptionOption(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_10001B7CC(&qword_1001EA848, v12, (uint64_t)&protocol conformance descriptor for Transcriber.TranscriptionOption);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_10001B7CC((unint64_t *)&unk_1001ECDF0, (uint64_t (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption, (uint64_t)&protocol conformance descriptor for Transcriber.TranscriptionOption);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_1000BC558((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_1000BC1EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v2 = v1;
  v4 = type metadata accessor for Transcriber.TranscriptionOption(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100014E10((uint64_t *)&unk_1001ECDE0);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v39 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v37 = v2;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain(v7);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v20 >= v38)
      goto LABEL_35;
    v21 = v39[v20];
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v38)
        goto LABEL_35;
      v21 = v39[v16];
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v38)
          goto LABEL_35;
        v21 = v39[v16];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = v7;
    v24 = *(_QWORD *)(v7 + 48);
    v25 = *(_QWORD *)(v40 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
    v26(v6, v24 + v25 * v19, v4);
    v27 = *(_QWORD *)(v9 + 40);
    v28 = sub_10001B7CC(&qword_1001EA848, (uint64_t (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption, (uint64_t)&protocol conformance descriptor for Transcriber.TranscriptionOption);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
    v29 = -1 << *(_BYTE *)(v9 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v14 + 8 * v31);
      }
      while (v35 == -1);
      v17 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(_QWORD *)(v9 + 48) + v17 * v25, v6, v4);
    ++*(_QWORD *)(v9 + 16);
    v7 = v23;
  }
  v22 = v20 + 3;
  if (v22 < v38)
  {
    v21 = v39[v22];
    if (!v21)
    {
      while (1)
      {
        v16 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_41;
        if (v16 >= v38)
          goto LABEL_35;
        v21 = v39[v16];
        ++v22;
        if (v21)
          goto LABEL_25;
      }
    }
    v16 = v22;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v37;
  v36 = 1 << *(_BYTE *)(v7 + 32);
  if (v36 > 63)
    bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v39 = -1 << v36;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  result = swift_release(v7);
  *v2 = v9;
  return result;
}

uint64_t sub_1000BC558(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for Transcriber.TranscriptionOption(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000BC1EC(v12);
  }
  else
  {
    if (v11 > v10)
    {
      sub_1000BC75C();
      goto LABEL_12;
    }
    sub_1000BC980(v12);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_10001B7CC(&qword_1001EA848, (uint64_t (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption, (uint64_t)&protocol conformance descriptor for Transcriber.TranscriptionOption);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_10001B7CC((unint64_t *)&unk_1001ECDF0, (uint64_t (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption, (uint64_t)&protocol conformance descriptor for Transcriber.TranscriptionOption);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void *sub_1000BC75C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for Transcriber.TranscriptionOption(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014E10((uint64_t *)&unk_1001ECDE0);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release(v6);
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1000BC980(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;

  v2 = v1;
  v4 = type metadata accessor for Transcriber.TranscriptionOption(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100014E10((uint64_t *)&unk_1001ECDE0);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8);
LABEL_37:
    *v2 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v35 = v2;
  v36 = v8 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v37)
      goto LABEL_35;
    v22 = *(_QWORD *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v37)
        goto LABEL_35;
      v22 = *(_QWORD *)(v36 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v37)
          goto LABEL_35;
        v22 = *(_QWORD *)(v36 + 8 * v17);
        if (!v22)
          break;
      }
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    v24 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v24 * v20, v4);
    v25 = *(_QWORD *)(v10 + 40);
    v26 = sub_10001B7CC(&qword_1001EA848, (uint64_t (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption, (uint64_t)&protocol conformance descriptor for Transcriber.TranscriptionOption);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v4, v26);
    v27 = -1 << *(_BYTE *)(v10 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v15 + 8 * v29);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v18 * v24, v7, v4);
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_35:
    result = swift_release_n(v8, 2);
    v2 = v35;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v36 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v37)
      goto LABEL_35;
    v22 = *(_QWORD *)(v36 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

void *sub_1000BCCA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t);
  void *v14;
  uint64_t v16;
  void *v17;

  v0 = type metadata accessor for Transcriber.TranscriptionOption(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v16 - v5;
  v7 = sub_100014E10(&qword_1001EA840);
  v8 = *(_QWORD *)(v1 + 72);
  v9 = *(unsigned __int8 *)(v1 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(v7, v10 + 3 * v8, v9 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_1001888D0;
  v12 = v11 + v10;
  v13 = *(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104);
  v13(v12, enum case for Transcriber.TranscriptionOption.contextualizedTranscription(_:), v0);
  v13(v12 + v8, enum case for Transcriber.TranscriptionOption.punctuation(_:), v0);
  v13(v12 + 2 * v8, enum case for Transcriber.TranscriptionOption.emoji(_:), v0);
  v14 = sub_1000FA9C8(v11);
  swift_setDeallocating(v11);
  swift_arrayDestroy(v12, 3, v0);
  swift_deallocClassInstance(v11, 32, 7);
  v17 = v14;
  if (objc_msgSend((id)objc_opt_self(RCManagedConfigurationHelper), "isProfanityFiltered"))
  {
    v13((uint64_t)v4, enum case for Transcriber.TranscriptionOption.etiquetteReplacements(_:), v0);
    sub_1000BBF90((uint64_t)v6, v4);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
    return v17;
  }
  return v14;
}

void sub_1000BCE60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_OWORD *, _QWORD);
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  void (*v33)(_QWORD *, _QWORD);
  uint64_t KeyPath;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  char v52;
  _OWORD v53[3];
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v50 = a1;
  v49 = sub_100014E10(&qword_1001EA808);
  v1 = __chkstk_darwin(v49);
  v48 = (uint64_t)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v40 = (char *)&v39 - v3;
  v4 = sub_100014E10(&qword_1001EA810);
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100014E10(&qword_1001EA818);
  v47 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for AttributedString.Runs(0);
  v10 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AttributedString(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100014E10(&qword_1001EA820);
  v39 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v50, v13);
  AttributedString.runs.getter(v20);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v21 = type metadata accessor for TimeRangeAttribute(0);
  v22 = sub_10001B7CC(&qword_1001EA828, (uint64_t (*)(uint64_t))&type metadata accessor for TimeRangeAttribute, (uint64_t)&protocol conformance descriptor for TimeRangeAttribute);
  v42 = v21;
  v41 = v22;
  AttributedString.Runs.subscript.getter(v21, v21);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v46);
  AttributedString.Runs.AttributesSlice1.makeIterator()(v7);
  v23 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v9, v7);
  v44 = v17;
  v43 = v19;
  AttributedString.Runs.AttributesSlice1.Iterator.next()(v17);
  v24 = sub_100014E10(&qword_1001EA830);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v6, 1, v24) == 1)
  {
LABEL_2:
    (*(void (**)(char *, uint64_t))(v39 + 8))(v43, v44);
  }
  else
  {
    while (1)
    {
      v28 = *((_QWORD *)v6 + 1);
      v47 = *(_QWORD *)v6;
      v29 = *((_QWORD *)v6 + 2);
      v45 = *((_QWORD *)v6 + 3);
      v30 = *((_QWORD *)v6 + 4);
      v46 = *((_QWORD *)v6 + 5);
      v31 = v6[48];
      sub_1000BD398((uint64_t)&v6[*(int *)(v24 + 48)], v23);
      memset(v53, 0, sizeof(v53));
      v54 = 1;
      v32 = sub_10000EDB0((unint64_t *)&unk_1001EC0B0, &qword_1001EA808, (uint64_t)&protocol conformance descriptor for Range<A>);
      v33 = (void (*)(_QWORD *, _QWORD))AttributedString.subscript.modify(v51, v23, v49, v32);
      AttributedSubstring.subscript.setter(v53, v42, v42, v41);
      v33(v51, 0);
      sub_1000BD3E0(v23, v48);
      KeyPath = swift_getKeyPath(&unk_1001888E0);
      *(&v39 - 2) = __chkstk_darwin(KeyPath);
      v35 = swift_getKeyPath(&unk_100188900);
      v36 = 0.0;
      v37 = 0.0;
      if ((v31 & 1) == 0)
      {
        v55 = v47;
        v56 = v28;
        v57 = v29;
        v58 = v45;
        v59 = v30;
        v60 = v46;
        v36 = CMTime.seconds.getter(0.0);
        CMTimeRange.end.getter();
        v37 = CMTime.seconds.getter(v38);
        if (v36 > v37)
          break;
      }
      *(double *)v51 = v36;
      *(double *)&v51[1] = v37;
      v52 = v31;
      v25 = v48;
      v26 = (void (*)(_OWORD *, _QWORD))AttributedString.subscript.modify(v53, v48, v49, v32);
      v27 = sub_1000B48A4();
      AttributedSubstring.subscript.setter(v51, v35, v27);
      v26(v53, 0);
      sub_100005440(v25, &qword_1001EA808);
      sub_100005440(v23, &qword_1001EA808);
      AttributedString.Runs.AttributesSlice1.Iterator.next()(v44);
      v24 = sub_100014E10(&qword_1001EA830);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v6, 1, v24) == 1)
        goto LABEL_2;
    }
    __break(1u);
  }
}

uint64_t sub_1000BD398(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EA808);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BD3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EA808);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BD42C()
{
  return 8;
}

uint64_t sub_1000BD438(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_1000BD440(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

_QWORD *sub_1000BD454(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t *sub_1000BD460(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for AttributedString(0);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_1000BD4E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for AttributedString(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_BYTE *sub_1000BD520(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for AttributedString(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_BYTE *sub_1000BD57C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for AttributedString(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_BYTE *sub_1000BD5D8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for AttributedString(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_BYTE *sub_1000BD634(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for AttributedString(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000BD690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BD69C);
}

uint64_t sub_1000BD69C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for AttributedString(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v10);
  }
}

uint64_t sub_1000BD718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BD724);
}

_BYTE *sub_1000BD724(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for AttributedString(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000BD794(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100188948;
  result = type metadata accessor for AttributedString(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

BOOL sub_1000BD964(uint64_t a1)
{
  uint64_t v1;
  uint64_t ObjectType;
  void *v4;
  _BOOL8 v5;
  void *v7;
  _BYTE v8[24];
  uint64_t v9;

  ObjectType = swift_getObjectType(v1);
  sub_1000BDC78(a1, (uint64_t)v8);
  if (!v9)
  {
    sub_1000BDC38((uint64_t)v8);
    goto LABEL_5;
  }
  if (!swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, ObjectType, 6))
  {
LABEL_5:
    v4 = 0;
    goto LABEL_6;
  }
  v4 = v7;
LABEL_6:
  v5 = v4 != 0;

  return v5;
}

id sub_1000BDAC8()
{
  return sub_1000BDBE8(type metadata accessor for TranscriptWaitingViewTextAttachment);
}

uint64_t type metadata accessor for TranscriptWaitingViewTextAttachment()
{
  return objc_opt_self(_TtC10VoiceMemos35TranscriptWaitingViewTextAttachment);
}

id sub_1000BDBDC()
{
  return sub_1000BDBE8(type metadata accessor for TranscriptWaitingViewTextAttachmentViewProvider);
}

id sub_1000BDBE8(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for TranscriptWaitingViewTextAttachmentViewProvider()
{
  return objc_opt_self(_TtC10VoiceMemos47TranscriptWaitingViewTextAttachmentViewProvider);
}

uint64_t sub_1000BDC38(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100014E10(&qword_1001EA0E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000BDC78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EA0E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000BDCC0()
{
  char *v0;

  *(_QWORD *)&v0[OBJC_IVAR____TtC10VoiceMemos35TranscriptWaitingViewTextAttachment_textAttachmentViewProvider] = 0;

  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(0xE000000000000000);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100182210, "VoiceMemos/SwiftHelpers.swift", 29, 2, 12, 0, 0);
  __break(1u);
}

void *sub_1000BDD48(void *a1, uint64_t a2, id a3)
{
  char *v3;
  uint64_t v5;
  void *result;
  id v8;
  id v9;
  id v10;
  char *v11;
  id v12;
  void *v13;

  v5 = OBJC_IVAR____TtC10VoiceMemos35TranscriptWaitingViewTextAttachment_textAttachmentViewProvider;
  result = *(void **)&v3[OBJC_IVAR____TtC10VoiceMemos35TranscriptWaitingViewTextAttachment_textAttachmentViewProvider];
  if (!result)
  {
    v8 = objc_msgSend(a3, "textLayoutManager");
    v9 = objc_allocWithZone((Class)type metadata accessor for TranscriptWaitingViewTextAttachmentViewProvider());
    v10 = a1;
    v11 = v3;
    v12 = objc_msgSend(v9, "initWithTextAttachment:parentView:textLayoutManager:location:", v11, v10, v8, a2);

    v13 = *(void **)&v3[v5];
    *(_QWORD *)&v3[v5] = v12;

    result = *(void **)&v3[v5];
    if (result)
    {
      objc_msgSend(result, "setTracksTextAttachmentViewBounds:", 1);
      return *(void **)&v3[v5];
    }
  }
  return result;
}

uint64_t sub_1000BDE24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = v1;
  v4 = OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_timeController;
  v5 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_timeController);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_timeController) = a1;
  swift_unknownObjectRetain();
  if (v5)
    objc_msgSend(v5, "removeTimeObserver:", v2);
  v6 = *(void **)(v2 + v4);
  if (v6)
    objc_msgSend(v6, "addTimeObserver:", v2);
  swift_unknownObjectRelease(v5);
  return swift_unknownObjectRelease(a1);
}

void sub_1000BDE9C(unsigned __int8 *a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  double v10;
  uint64_t Strong;
  void *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const mach_header_64 *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE v26[24];

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_QWORD *)a1 + 1);
  v5 = a1[16];
  v6 = a1[17];
  v7 = a1[18];
  v8 = a1[19];
  v9 = a1[20];
  v10 = *((double *)a1 + 3);
  swift_beginAccess(a2 + 16, v26, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    v12 = (void *)Strong;
    v13 = v2 | (v3 << 8);
    v14 = 256;
    if (!v6)
      v14 = 0;
    v15 = v14 | v5;
    v16 = 0x10000;
    if (!v7)
      v16 = 0;
    v17 = 0x1000000;
    if (!v8)
      v17 = 0;
    v18 = v15 | v16 | v17;
    v19 = &_mh_execute_header;
    if (!v9)
      v19 = 0;
    v20 = v18 | (unint64_t)v19;
    sub_1000BE044(v13, v4, v18 | v19);
    sub_1000BE8D4(v10);
    v22 = sub_1000BEBC0(v13, v21, v20);
    v24 = sub_1000BE44C((uint64_t)v22, v23, v20);
    sub_1000BE740((uint64_t)v24, v25, v20);

  }
}

_QWORD *sub_1000BE044(__int16 a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  unsigned __int8 v6;
  int v7;
  _QWORD *result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v16;
  char v17;
  char v18;
  int v19;
  uint64_t v21;
  __int128 v22;
  char v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int16 v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  char v33;
  uint64_t v34;
  char v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int16 v39;
  char v40;
  uint64_t v41;
  char v42;

  v6 = a1;
  v7 = HIBYTE(a1);
  result = sub_10001B474((_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider), *(_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider + 24));
  v9 = *(unsigned __int8 *)(*result + 32);
  v10 = *(unsigned __int8 *)(*result + 33);
  v11 = *(_QWORD *)(*result + 40);
  v12 = *(unsigned __int8 *)(*result + 48);
  if (v9 != v6 || v7 != (_DWORD)v10)
    goto LABEL_5;
  if (a3 >> 6)
  {
    if (a3 >> 6 == 1)
    {
      if ((v12 & 0xC0) == 0x40)
        return result;
      goto LABEL_5;
    }
    if (a2 | a3 ^ 0x80)
    {
      v19 = v12 & 0xC0;
      if (a3 == 128 && a2 == 1)
      {
        if (v19 != 128)
          goto LABEL_5;
        if (v11 == 1)
          goto LABEL_35;
      }
      else
      {
        if (v19 != 128)
          goto LABEL_5;
        if (v11 == 2)
        {
LABEL_35:
          if ((_DWORD)v12 == 128)
            return result;
        }
      }
    }
    else
    {
      if ((v12 & 0xC0) != 0x80)
        goto LABEL_5;
      if (!v11)
        goto LABEL_35;
    }
LABEL_6:
    if (__PAIR128__(v12, v11) >= __PAIR128__(128, 2))
      __asm { BR              X9 }
    goto LABEL_7;
  }
  if (v12 < 0x40)
    return result;
LABEL_5:
  if ((v12 & 0x80) != 0)
    goto LABEL_6;
LABEL_7:
  v14 = *sub_10001B474((_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager + 24));
  if ((v9 - 1) <= 1 && (_DWORD)v10 == 5)
  {
    *(_BYTE *)(v14 + 129) = 5;
    v16 = *(_QWORD *)(v14 + 64);
    v17 = *(_BYTE *)(v14 + 72);
    sub_1000BED80(v11, v12);
    v18 = 5;
  }
  else
  {
    *(_BYTE *)(v14 + 129) = 3;
    v16 = *(_QWORD *)(v14 + 64);
    v17 = *(_BYTE *)(v14 + 72);
    sub_1000BED80(v11, v12);
    v18 = 3;
  }
  sub_1000A4FAC(v18);
  v31 = v21;
  v32 = v22;
  v33 = v23;
  v34 = v16;
  v35 = v17;
  v36 = v24;
  v37 = v25;
  v38 = v26;
  v39 = v27;
  v40 = v28;
  v41 = v29;
  v42 = v30;
  sub_1000A3B2C((uint64_t)&v31);
  return (_QWORD *)sub_1000BED94(v11, v12);
}

void sub_1000BE2A4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(*sub_10001B474((_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(_QWORD *)(v1+ OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager+ 24))+ 129) = 2;
  sub_1000BED80(v0, v2);
  JUMPOUT(0x1000BE1C8);
}

void sub_1000BE2E4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(*sub_10001B474((_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(_QWORD *)(v1+ OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager+ 24))+ 129) = 0;
  sub_1000BED80(v0, v2);
  JUMPOUT(0x1000BE1C8);
}

void sub_1000BE320()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(*sub_10001B474((_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(_QWORD *)(v1+ OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager+ 24))+ 129) = 1;
  sub_1000BED80(v0, v2);
  JUMPOUT(0x1000BE1C8);
}

_QWORD *sub_1000BE44C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  _QWORD *result;
  int v6;
  uint64_t v7;
  char v8;
  int v9;
  int v10;
  void *v11;
  double v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  void **aBlock;
  uint64_t v40;
  void (*v41)(uint64_t, void *);
  void *v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  char v50;
  char v51;
  uint64_t v52;
  char v53;

  result = sub_10001B474((_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider), *(_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider + 24));
  v6 = *(unsigned __int8 *)(*result + 32);
  v7 = *(_QWORD *)(*result + 40);
  v8 = *(_BYTE *)(*result + 48);
  v9 = *(unsigned __int8 *)(*result + 51);
  v10 = *(unsigned __int8 *)(*result + 49) | *(unsigned __int8 *)(*result + 50);
  if ((a3 & 0x10100) != 0)
  {
    if (((v10 | v9) & 1) != 0)
      return result;
    goto LABEL_3;
  }
  if ((v10 & 1) != 0)
  {
    if ((a3 & 0x1000000) != 0)
      return result;
LABEL_11:
    v18 = sub_10001B474((_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager + 24));
    v19 = *v18;
    v20 = v8;
    v38 = v8;
    v21 = *(void ***)(*v18 + 32);
    v22 = *(_QWORD *)(*v18 + 40);
    v23 = v7;
    v37 = v7;
    v24 = *(_QWORD *)(v19 + 48);
    v25 = *(uint64_t (**)(uint64_t))(v19 + 64);
    v26 = *(_BYTE *)(v19 + 72);
    v27 = *(_QWORD *)(v19 + 80);
    v28 = *(_QWORD *)(v19 + 88);
    v29 = *(_QWORD *)(v19 + 96);
    v30 = *(_QWORD *)(v19 + 104);
    v31 = *(_BYTE *)(v19 + 113);
    v32 = *(_BYTE *)(v19 + 114);
    v33 = *(_QWORD *)(v19 + 120);
    v34 = *(_BYTE *)(v19 + 128);
    aBlock = v21;
    v40 = v22;
    v41 = (void (*)(uint64_t, void *))v24;
    LOBYTE(v42) = *(_BYTE *)(v19 + 56);
    v43 = v25;
    LOBYTE(v44) = v26;
    BYTE1(v44) = 2;
    v45 = v27;
    v46 = v28;
    v47 = v29;
    v48 = v30;
    v49 = *(_BYTE *)(v19 + 112);
    v50 = v31;
    v51 = v32;
    v52 = v33;
    v53 = v34;
    sub_1000BED80(v23, v20);
    swift_bridgeObjectRetain(v21);
    sub_1000A5448(v22, v24, v42);
    sub_1000A5488(v27, v28, v29, v30, v49);
    sub_1000A3B2C((uint64_t)&aBlock);
    v35 = v37;
    v36 = v38;
    return (_QWORD *)sub_1000BED94(v35, v36);
  }
  if (((a3 >> 24) & 1) == v9)
    return result;
  if ((v9 & 1) != 0)
    goto LABEL_11;
LABEL_3:
  if ((a3 & 0x100) != 0 && v6 != 2)
  {
    v11 = (void *)objc_opt_self(NSTimer);
    v12 = *(double *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_autoScrollTimeoutDuration);
    v13 = swift_allocObject(&unk_1001AF350, 24, 7);
    swift_unknownObjectWeakInit(v13 + 16, v3);
    v43 = sub_1000BEDCC;
    v44 = v13;
    aBlock = _NSConcreteStackBlock;
    v40 = 1107296256;
    v41 = sub_1000BEB70;
    v42 = &unk_1001AF368;
    v14 = _Block_copy(&aBlock);
    v15 = v44;
    sub_1000BED80(v7, v8);
    swift_release(v15);
    v16 = objc_msgSend(v11, "scheduledTimerWithTimeInterval:repeats:block:", 0, v14, v12);
    _Block_release(v14);
    v17 = *(void **)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_autoScrollTimer);
    *(_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_autoScrollTimer) = v16;

    return (_QWORD *)sub_1000BED94(v7, v8);
  }
  if (v6 != 2)
  {
    sub_10001B474((_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager + 24));
    sub_1000BED80(v7, v8);
    sub_1000A3C64();
    v35 = v7;
    v36 = v8;
    return (_QWORD *)sub_1000BED94(v35, v36);
  }
  return result;
}

_QWORD *sub_1000BE740(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD v32[3];
  unsigned __int8 v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  char v42;
  char v43;
  uint64_t v44;
  char v45;

  v4 = HIDWORD(a3) & 1;
  v5 = (_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider);
  result = sub_10001B474((_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider), *(_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider + 24));
  v7 = *result;
  if ((_DWORD)v4 != *(unsigned __int8 *)(*result + 52))
  {
    v8 = *(_QWORD *)(v7 + 40);
    v9 = *(_BYTE *)(v7 + 48);
    v10 = *(unsigned __int8 *)(*sub_10001B474(v5, v5[3]) + 52);
    v11 = sub_10001B474((_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager + 24));
    v12 = *(_QWORD *)(*v11 + 32);
    v13 = *(_QWORD *)(*v11 + 40);
    v14 = *(_QWORD *)(*v11 + 48);
    v15 = *(_BYTE *)(*v11 + 56);
    v16 = *(_QWORD *)(*v11 + 64);
    v17 = *(_BYTE *)(*v11 + 72);
    v18 = *(_BYTE *)(*v11 + 73);
    v19 = *(_QWORD *)(*v11 + 80);
    v20 = *(_QWORD *)(*v11 + 88);
    v22 = *(_QWORD *)(*v11 + 96);
    v21 = *(_QWORD *)(*v11 + 104);
    v23 = *(_BYTE *)(*v11 + 112);
    v24 = *(_BYTE *)(*v11 + 114);
    v25 = *(_QWORD *)(*v11 + 120);
    v26 = *(_BYTE *)(*v11 + 128);
    if (v10 == 1)
    {
      v32[0] = *(_QWORD *)(*v11 + 32);
      v27 = 1;
    }
    else
    {
      v27 = 0;
      v32[0] = *(_QWORD *)(*v11 + 32);
    }
    v32[1] = v13;
    v32[2] = v14;
    v33 = v15;
    v34 = v16;
    v35 = v17;
    v36 = v18;
    v37 = v19;
    v38 = v20;
    v39 = v22;
    v40 = v21;
    v41 = v23;
    v42 = v27;
    v43 = v24;
    v44 = v25;
    v45 = v26;
    v29 = v21;
    v30 = v19;
    v28 = v12;
    v31 = v23;
    sub_1000BED80(v8, v9);
    swift_bridgeObjectRetain(v28);
    sub_1000A5448(v13, v14, v15);
    sub_1000A5488(v30, v20, v22, v29, v31);
    sub_1000A3B2C((uint64_t)v32);
    return (_QWORD *)sub_1000BED94(v8, v9);
  }
  return result;
}

_QWORD *sub_1000BE8D4(double a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char v7;
  void *v8;
  id v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _QWORD v33[3];
  unsigned __int8 v34;
  double v35;
  BOOL v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  char v43;
  char v44;
  uint64_t v45;
  char v46;

  result = sub_10001B474((_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider), *(_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider + 24));
  v4 = *result;
  v5 = *(double *)(*result + 56);
  if (v5 != a1)
  {
    v6 = *(_QWORD *)(v4 + 40);
    v7 = *(_BYTE *)(v4 + 48);
    v8 = (void *)objc_opt_self(RCRecorderStyleProvider);
    v32 = v6;
    sub_1000BED80(v6, v7);
    v9 = objc_msgSend(v8, "sharedStyleProvider");
    v10 = v9;
    if (v9)
    {
      if (objc_msgSend(v9, "transcriptViewShouldUseWidthMultiplier", v6))
      {
        objc_msgSend(v10, "centerContentTranscriptViewMaxWidth");
        v12 = v11;
        objc_msgSend(v10, "centerContentTranscriptViewWidthMultiplier");
        v14 = v13;

        v15 = v5 * v14;
        if (v12 < v5 * v14)
          v15 = v12;
        v16 = (v5 - v15) * 0.5;
      }
      else
      {
        objc_msgSend(v10, "transcriptViewHorizontalMargins");
        v16 = v17;

      }
    }
    else
    {
      v16 = 0.0;
    }
    v18 = v10 == 0;
    v19 = sub_10001B474((_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager + 24));
    v20 = *v19;
    v21 = *(_QWORD *)(*v19 + 40);
    v22 = *(_QWORD *)(*v19 + 48);
    v23 = *(_BYTE *)(*v19 + 73);
    v24 = *(_QWORD *)(*v19 + 80);
    v25 = *(_QWORD *)(*v19 + 88);
    v26 = *(_QWORD *)(*v19 + 96);
    v27 = *(_QWORD *)(*v19 + 104);
    v28 = *(_BYTE *)(*v19 + 113);
    v29 = *(_BYTE *)(*v19 + 114);
    v30 = *(_QWORD *)(*v19 + 120);
    v31 = *(_BYTE *)(*v19 + 128);
    v33[0] = *(_QWORD *)(*v19 + 32);
    v33[1] = v21;
    v33[2] = v22;
    v34 = *(_BYTE *)(v20 + 56);
    v35 = v16;
    v36 = v18;
    v37 = v23;
    v38 = v24;
    v39 = v25;
    v40 = v26;
    v41 = v27;
    v42 = *(_BYTE *)(v20 + 112);
    v43 = v28;
    v44 = v29;
    v45 = v30;
    v46 = v31;
    swift_bridgeObjectRetain(v33[0]);
    sub_1000A5448(v21, v22, v34);
    sub_1000A5488(v24, v25, v26, v27, v42);
    sub_1000A3B2C((uint64_t)v33);
    return (_QWORD *)sub_1000BED94(v32, v7);
  }
  return result;
}

uint64_t sub_1000BEAF4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void *v3;
  _QWORD v4[5];
  _BYTE v5[24];

  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    v3 = (void *)result;
    sub_10001BB88(result + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager, (uint64_t)v4);

    sub_10001B474(v4, v4[3]);
    sub_1000A3C64();
    return sub_10001B498(v4);
  }
  return result;
}

void sub_1000BEB70(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

_QWORD *sub_1000BEBC0(unsigned __int8 a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  _QWORD *result;
  int v7;
  int v8;
  int v9;
  unsigned int v10;

  result = sub_10001B474((_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider), *(_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider + 24));
  v7 = *(unsigned __int8 *)(*result + 32);
  v8 = *(unsigned __int8 *)(*result + 49);
  v9 = *(unsigned __int8 *)(*result + 50);
  v10 = *(unsigned __int8 *)(*result + 51);
  if ((a3 & 0x10100) != 0)
  {
    if ((v8 & 1) != 0 || (v9 & 1) != 0)
    {
      if (v7 != a1)
        return objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_autoScrollTimer), "invalidate");
    }
    else if (v7 != a1 || ((v10 ^ 1) & 1) != 0)
    {
      return objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_autoScrollTimer), "invalidate");
    }
  }
  else if (((v8 | v9) & 1) != 0)
  {
    if (v7 != a1 || (a3 & 0x1000000) == 0)
      return objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_autoScrollTimer), "invalidate");
  }
  else if (v7 != a1 || (((a3 >> 24) & 1 ^ v10) & 1) != 0)
  {
    return objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_autoScrollTimer), "invalidate");
  }
  return result;
}

id sub_1000BECC8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TranscriptViewConfigurationMediator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TranscriptViewConfigurationMediator()
{
  return objc_opt_self(_TtC10VoiceMemos35TranscriptViewConfigurationMediator);
}

uint64_t sub_1000BED80(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 0xC0) == 0x40)
    return swift_errorRetain();
  return result;
}

uint64_t sub_1000BED94(uint64_t result, char a2)
{
  if ((a2 & 0xC0) == 0x40)
    return swift_errorRelease(result);
  return result;
}

uint64_t sub_1000BEDA8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000BEDCC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000BEAF4(a1, v1);
}

uint64_t sub_1000BEDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000BEDE4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_1000BEDEC()
{
  uint64_t v0;
  _QWORD *result;

  result = sub_10001B474((_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider), *(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider + 24));
  if (*(_BYTE *)(*result + 32) == 2)
  {
    sub_10001B474((_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager), *(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager + 24));
    return (_QWORD *)sub_1000A3C64();
  }
  return result;
}

char *sub_1000BEE44(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t KeyPath;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  objc_super v13;

  v3 = OBJC_IVAR____TtC10VoiceMemos28RCUserActivityStatePublisher_userActivityChangedSubject;
  v4 = sub_100014E10(&qword_1001EA9F0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = v1;
  *(_QWORD *)&v1[v3] = PassthroughSubject.init()();
  *(_QWORD *)&v5[OBJC_IVAR____TtC10VoiceMemos28RCUserActivityStatePublisher_currentUserActivityKVOObservation] = 0;

  v13.receiver = v5;
  v13.super_class = (Class)type metadata accessor for RCUserActivityStatePublisher();
  v6 = objc_msgSendSuper2(&v13, "init");
  KeyPath = swift_getKeyPath(&unk_100188AA8);
  v8 = swift_allocObject(&unk_1001AF3B0, 24, 7);
  swift_unknownObjectWeakInit(v8 + 16, v6);
  v9 = (char *)v6;
  v10 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 0, sub_1000BF1B4, v8, &protocol witness table for NSObject);

  swift_release(KeyPath);
  swift_release(v8);

  v11 = *(void **)&v9[OBJC_IVAR____TtC10VoiceMemos28RCUserActivityStatePublisher_currentUserActivityKVOObservation];
  *(_QWORD *)&v9[OBJC_IVAR____TtC10VoiceMemos28RCUserActivityStatePublisher_currentUserActivityKVOObservation] = v10;

  return v9;
}

uint64_t sub_1000BEF70(void **a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  _BYTE v11[24];

  v3 = *a1;
  v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v11, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4);
  if (result)
  {
    v6 = (void *)result;
    v7 = *(_QWORD *)(result + OBJC_IVAR____TtC10VoiceMemos28RCUserActivityStatePublisher_userActivityChangedSubject);
    swift_retain(v7);
    v8 = objc_msgSend(v3, "currentUserActivity");
    v9 = objc_msgSend(v8, "activityType");

    v10 = v9;
    PassthroughSubject.send(_:)(&v10);

    return swift_release(v7);
  }
  return result;
}

id sub_1000BF074()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCUserActivityStatePublisher();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RCUserActivityStatePublisher()
{
  return objc_opt_self(_TtC10VoiceMemos28RCUserActivityStatePublisher);
}

const char *sub_1000BF0FC()
{
  return "currentUserActivity";
}

id sub_1000BF108@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "currentUserActivity");
  *a2 = result;
  return result;
}

const char *sub_1000BF140()
{
  return "activityType";
}

id sub_1000BF14C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "activityType");
  *a2 = result;
  return result;
}

id sub_1000BF17C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setActivityType:", *a1);
}

uint64_t sub_1000BF190()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000BF1B4(void **a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000BEF70(a1, a2, v2);
}

uint64_t sub_1000BF1BC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v17[2];

  v3 = v1;
  v5 = sub_100014E10(&qword_1001EAB70);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 2];
  v9 = a1[3];
  v10 = a1[4];
  sub_10001B474(a1, v9);
  v11 = sub_1000C1598();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AppStoreRatingModel.RatingStats.CodingKeys, &type metadata for AppStoreRatingModel.RatingStats.CodingKeys, v11, v9, v10);
  v17[1] = 0;
  type metadata accessor for Date(0);
  sub_10001B7CC(&qword_1001EAB80, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3);
  if (!v2)
  {
    v12 = (uint64_t *)(v3 + *(int *)(type metadata accessor for AppStoreRatingModel.RatingStats(0) + 20));
    v13 = *v12;
    v14 = v12[1];
    v17[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, v17, v5);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000BF310@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  char v33;

  v27 = a2;
  v30 = type metadata accessor for Date(0);
  v28 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v31 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100014E10(&qword_1001EAB88);
  v5 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AppStoreRatingModel.RatingStats(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001B474(a1, v12);
  v13 = sub_1000C1598();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AppStoreRatingModel.RatingStats.CodingKeys, &type metadata for AppStoreRatingModel.RatingStats.CodingKeys, v13, v12, v11);
  if (v2)
    return sub_10001B498(a1);
  v25 = a1;
  v26 = v5;
  v14 = (uint64_t)v10;
  v15 = v28;
  v33 = 0;
  v16 = sub_10001B7CC(&qword_1001EAB90, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v17 = v30;
  v18 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v30, &v33, v29, v30, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v14, v31, v17);
  v32 = 1;
  v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v18);
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v18);
  v22 = (uint64_t *)(v14 + *(int *)(v8 + 20));
  *v22 = v19;
  v22[1] = v21;
  sub_1000C15DC(v14, v27);
  sub_10001B498(v25);
  return sub_1000C10BC(v14);
}

uint64_t sub_1000BF588()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6F6973726576;
  else
    return 1702125924;
}

uint64_t sub_1000BF5BC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000C076C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000BF5E0(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1000BF5EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C1598();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000BF614(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C1598();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000BF63C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000BF310(a1, a2);
}

uint64_t sub_1000BF650(_QWORD *a1)
{
  return sub_1000BF1BC(a1);
}

uint64_t sub_1000BF664()
{
  _OWORD *v0;
  uint64_t v1;

  *(_OWORD *)(v1 + 16) = *v0;
  return swift_task_switch(sub_1000BF680, 0, 0);
}

uint64_t sub_1000BF680()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t ObjectType;
  int *v4;
  _QWORD *v5;
  int *v6;

  if (sub_1000C084C())
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  v2 = *(_QWORD *)(v0 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 16));
  v4 = *(int **)(v2 + 8);
  v6 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 32) = v5;
  *v5 = v0;
  v5[1] = sub_1000BF710;
  return ((uint64_t (*)(uint64_t, _QWORD))v6)(ObjectType, *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000BF710(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 32));
  return (*(uint64_t (**)(BOOL))(v4 + 8))(a1 > 14);
}

uint64_t sub_1000BF764()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1001EAABC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100003A7C;
  return sub_1000C0A6C();
}

uint64_t sub_1000BF7A8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to StoreReviewGatingController.canPrompt()[1]);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000C17C4;
  return StoreReviewGatingController.canPrompt()();
}

uint64_t sub_1000BF7F4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to StoreReviewGatingController.didPrompt()[1]);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001B80C;
  return StoreReviewGatingController.didPrompt()();
}

uint64_t sub_1000BF840(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100004D38, 0, 0);
}

uint64_t sub_1000BF858(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1000BF870, 0, 0);
}

uint64_t sub_1000BF870()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[2];
  *(_QWORD *)(v0 + 24) = v2;
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
  *(_QWORD *)(v0 + 32) = 0;
  v3 = v1 + 4;
  v4 = v1[7];
  v5 = v1[8];
  swift_bridgeObjectRetain(v1);
  sub_10001B474(v3, v4);
  v6 = *(int **)(v5 + 16);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  *(_QWORD *)(v0 + 40) = v7;
  *v7 = v0;
  v7[1] = sub_1000BF920;
  return v9(v4, v5);
}

uint64_t sub_1000BF920(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_BYTE *)(*(_QWORD *)v1 + 48) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000BF97C, 0, 0);
}

uint64_t sub_1000BF97C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  if ((*(_BYTE *)(v0 + 48) & 1) != 0 && (v1 = *(_QWORD *)(v0 + 32) + 1, v1 != *(_QWORD *)(v0 + 24)))
  {
    *(_QWORD *)(v0 + 32) = v1;
    v3 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 40 * v1);
    v4 = v3[7];
    v5 = v3[8];
    sub_10001B474(v3 + 4, v4);
    v6 = *(int **)(v5 + 16);
    v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
    v7 = (_QWORD *)swift_task_alloc(v6[1]);
    *(_QWORD *)(v0 + 40) = v7;
    *v7 = v0;
    v7[1] = sub_1000BF920;
    return v8(v4, v5);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 48));
  }
}

uint64_t sub_1000BFA40(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1000BFA58, 0, 0);
}

uint64_t sub_1000BFA58()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[2];
  *(_QWORD *)(v0 + 24) = v2;
  if (!v2)
    return (*(uint64_t (**)(void))(v0 + 8))();
  *(_QWORD *)(v0 + 32) = 0;
  v3 = v1 + 4;
  v4 = v1[7];
  v5 = v1[8];
  swift_bridgeObjectRetain(v1);
  sub_10001B474(v3, v4);
  v6 = *(int **)(v5 + 24);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  *(_QWORD *)(v0 + 40) = v7;
  *v7 = v0;
  v7[1] = sub_1000BFB04;
  return v9(v4, v5);
}

uint64_t sub_1000BFB04()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  return swift_task_switch(sub_1000BFB58, 0, 0);
}

uint64_t sub_1000BFB58()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 32) + 1;
  if (v1 == *(_QWORD *)(v0 + 24))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 32) = v1;
    v3 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 40 * v1);
    v4 = v3[7];
    v5 = v3[8];
    sub_10001B474(v3 + 4, v4);
    v6 = *(int **)(v5 + 24);
    v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
    v7 = (_QWORD *)swift_task_alloc(v6[1]);
    *(_QWORD *)(v0 + 40) = v7;
    *v7 = v0;
    v7[1] = sub_1000BFB04;
    return v8(v4, v5);
  }
}

uint64_t sub_1000BFC10()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *v0;
  v3 = (_QWORD *)swift_task_alloc(dword_1001EAAD4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000BFC70;
  v3[2] = v2;
  return swift_task_switch(sub_1000BF870, 0, 0);
}

uint64_t sub_1000BFC70(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_1000BFCC0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *v0;
  v3 = (_QWORD *)swift_task_alloc(dword_1001EAACC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001B80C;
  v3[2] = v2;
  return swift_task_switch(sub_1000BFA58, 0, 0);
}

uint64_t sub_1000BFD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 56) = a4;
  return swift_task_switch(sub_1000BFD38, 0, 0);
}

uint64_t sub_1000BFD38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  sub_100009EF4((uint64_t)(v0 + 2));
  v1 = v0[5];
  v2 = v0[6];
  sub_10001B474(v0 + 2, v1);
  v3 = *(int **)(v2 + 8);
  v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)v3 + *v3);
  v4 = (_QWORD *)swift_task_alloc(v3[1]);
  v0[8] = v4;
  *v4 = v0;
  v4[1] = sub_1000BFDC4;
  return v6(v1, v2);
}

uint64_t sub_1000BFDC4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  return swift_task_switch(sub_1000BFE18, 0, 0);
}

uint64_t sub_1000BFE18()
{
  uint64_t v0;

  sub_10001B498((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000BFE48()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_100014E10(&qword_1001E9BB0);
  __chkstk_darwin(v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v5 = objc_msgSend(v4, "userInterfaceIdiom");

  if (!v5)
  {
    v6 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v3, 1, 1, v6);
    type metadata accessor for MainActor(0);
    v7 = v0;
    v8 = static MainActor.shared.getter(v7);
    v9 = (_QWORD *)swift_allocObject(&unk_1001AF408, 40, 7);
    v9[2] = v8;
    v9[3] = &protocol witness table for MainActor;
    v9[4] = v7;
    v10 = sub_1000F7930((uint64_t)v3, (uint64_t)&unk_1001EAA58, (uint64_t)v9);
    swift_release(v10);
  }
}

uint64_t sub_1000BFF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[12] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[13] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[14] = v6;
  v4[15] = v7;
  return swift_task_switch(sub_1000BFFCC, v6, v7);
}

uint64_t sub_1000BFFCC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = sub_1000C0DDC();
  *(_QWORD *)(v0 + 128) = v1;
  if (v1)
  {
    sub_100009EF4(v0 + 16);
    v2 = *(_QWORD *)(v0 + 40);
    v3 = *(_QWORD *)(v0 + 48);
    sub_10001B474((_QWORD *)(v0 + 16), v2);
    v4 = *(int **)(v3 + 16);
    v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
    v5 = (_QWORD *)swift_task_alloc(v4[1]);
    *(_QWORD *)(v0 + 136) = v5;
    *v5 = v0;
    v5[1] = sub_1000C0088;
    return v7(v2, v3);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 104));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000C0088(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_BYTE *)(*v1 + 152) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_1000C00E0, *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120));
}

uint64_t sub_1000C00E0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  void *v13;
  uint64_t (*v14)(uint64_t, uint64_t);

  v1 = *(unsigned __int8 *)(v0 + 152);
  sub_10001B498((_QWORD *)(v0 + 16));
  if (v1 == 1)
  {
    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_1000AACFC(v2, (uint64_t)qword_1001F6C20);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Calling SKStoreReviewController.requestReview(:)", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v7 = *(_QWORD *)(v0 + 128);

    objc_msgSend((id)objc_opt_self(SKStoreReviewController), "requestReviewInScene:", v7);
    sub_100009EF4(v0 + 56);
    v8 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 88);
    sub_10001B474((_QWORD *)(v0 + 56), v8);
    v10 = *(int **)(v9 + 24);
    v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc(v10[1]);
    *(_QWORD *)(v0 + 144) = v11;
    *v11 = v0;
    v11[1] = sub_1000C0278;
    return v14(v8, v9);
  }
  else
  {
    v13 = *(void **)(v0 + 128);
    swift_release(*(_QWORD *)(v0 + 104));

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000C0278()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 144));
  return swift_task_switch(sub_1000C02C4, *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120));
}

uint64_t sub_1000C02C4()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 104));

  sub_10001B498((_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1000C0368()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCAppStoreRatingPrompter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000C03D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[3] = v0;
  v2 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C0438, 0, 0);
}

uint64_t sub_1000C0438()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  id v11;
  id v12;
  id v13;
  _QWORD *v14;

  v1 = (void *)objc_opt_self(RCBuiltinRecordingsFolder);
  v2 = objc_msgSend(v1, "builtInFolderWithType:", 0);
  *(_QWORD *)(v0 + 56) = v2;
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v1, "builtInFolderWithType:", 3);
    *(_QWORD *)(v0 + 64) = v4;
    if (v4)
    {
      v5 = v4;
      v7 = *(_QWORD *)(v0 + 40);
      v6 = *(_QWORD *)(v0 + 48);
      v9 = *(void **)(v0 + 24);
      v8 = *(_QWORD *)(v0 + 32);
      v10 = (_QWORD *)swift_allocObject(&unk_1001AF458, 40, 7);
      *(_QWORD *)(v0 + 72) = v10;
      v10[2] = v9;
      v10[3] = v3;
      v10[4] = v5;
      v11 = v9;
      v12 = v3;
      v13 = v5;
      *(_QWORD *)(v0 + 80) = objc_msgSend(v11, "context");
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v8);
      v14 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1]);
      *(_QWORD *)(v0 + 88) = v14;
      *v14 = v0;
      v14[1] = sub_1000C05C0;
      return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 16, *(_QWORD *)(v0 + 48), sub_1000C0F48, v10, &type metadata for UInt);
    }

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1000C05C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)();
  uint64_t v7;

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 40);
  v3 = *(_QWORD *)(*v1 + 48);
  v5 = *(_QWORD *)(*v1 + 32);
  swift_task_dealloc(*(_QWORD *)(*v1 + 88));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
  {

    v6 = (void (*)())nullsub_8;
  }
  else
  {
    v7 = *(_QWORD *)(v2 + 72);

    swift_release(v7);
    *(_QWORD *)(v2 + 96) = *(_QWORD *)(v2 + 16);
    v6 = sub_1000C0668;
  }
  return swift_task_switch(v6, 0, 0);
}

void sub_1000C0668()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(void **)(v0 + 64);

  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 48));
    (*(void (**)(uint64_t))(v0 + 8))(v3);
  }
}

uint64_t sub_1000C06B8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1001EAA84);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000BFC70;
  return sub_1000C03D8();
}

uint64_t sub_1000C0700(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1001EAA54);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001B80C;
  return sub_1000BFF60(a1, v4, v5, v6);
}

uint64_t sub_1000C076C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BOOL sub_1000C084C()
{
  id v0;
  NSString v1;
  id v2;
  _OWORD v4[2];

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v4, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_100005440((uint64_t)v4, &qword_1001EA0E0);
  return v2 != 0;
}

uint64_t sub_1000C0920()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = objc_msgSend(v0, "infoDictionary");

  if (!v1)
  {
    v7 = 0u;
    v8 = 0u;
    goto LABEL_11;
  }
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!*(_QWORD *)(v2 + 16) || (v3 = sub_100107C04(0x656C646E75424643, 0xEF6E6F6973726556), (v4 & 1) == 0))
  {
    v7 = 0u;
    v8 = 0u;
    swift_bridgeObjectRelease(v2);
    goto LABEL_11;
  }
  sub_1000C113C(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v7);
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v8 + 1))
  {
LABEL_11:
    sub_100005440((uint64_t)&v7, &qword_1001EA0E0);
    return 0;
  }
  if (swift_dynamicCast(&v6, &v7, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v6;
  else
    return 0;
}

uint64_t sub_1000C0A6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for AppStoreRatingModel.RatingStats(0);
  *(_QWORD *)(v0 + 56) = v1;
  *(_QWORD *)(v0 + 64) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C0AC4, 0, 0);
}

uint64_t sub_1000C0AC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  Class isa;
  NSString v16;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  static Date.now.getter();
  v3 = sub_1000C0920();
  v4 = (uint64_t *)(v2 + *(int *)(v1 + 20));
  *v4 = v3;
  v4[1] = v5;
  v6 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = JSONEncoder.init()();
  v8 = sub_10001B7CC(&qword_1001EAAC0, type metadata accessor for AppStoreRatingModel.RatingStats, (uint64_t)&unk_100188C30);
  v9 = dispatch thunk of JSONEncoder.encode<A>(_:)(v2, v1, v8);
  v10 = *(_QWORD *)(v0 + 64);
  v11 = v9;
  v13 = v12;
  swift_release(v7);
  v14 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  isa = Data._bridgeToObjectiveC()().super.isa;
  v16 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setObject:forKey:", isa, v16);
  sub_1000C10F8(v11, v13);

  sub_1000C10BC(v10);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1000C0DDC()
{
  id v0;
  id v1;
  id v2;
  id v3;
  unsigned __int8 v4;

  v0 = objc_msgSend((id)objc_opt_self(RecorderAppDelegate), "sharedAppDelegate");
  v1 = v0;
  if (v0)
  {
    v2 = objc_msgSend(v0, "defaultSceneDelegate");

    if (!v2)
      return 0;
    v3 = objc_msgSend(v2, "window");
    v1 = objc_msgSend(v3, "windowScene");

    if (!v1 || (v4 = objc_msgSend(v2, "isInForeground"), v2, v2 = v1, (v4 & 1) == 0))
    {

      return 0;
    }
  }
  return v1;
}

uint64_t sub_1000C0EB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1001EAA74);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001B80C;
  v3[7] = v2;
  return swift_task_switch(sub_1000BFD38, 0, 0);
}

uint64_t sub_1000C0F14()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

char *sub_1000C0F48@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  char *result;

  v4 = (void *)v1[2];
  v3 = v1[3];
  v5 = v1[4];
  v6 = objc_msgSend(v4, "playableCountForFolder:", v3);
  result = (char *)objc_msgSend(v4, "playableCountForFolder:", v5);
  if (__CFADD__(v6, result))
    __break(1u);
  else
    *a1 = &result[(_QWORD)v6];
  return result;
}

ValueMetadata *type metadata accessor for RCStoreReviewGaitingController()
{
  return &type metadata for RCStoreReviewGaitingController;
}

__int128 *initializeBufferWithCopyOfBuffer for AppStoreRatingModel(__int128 *a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *a1 = *a2;
  swift_unknownObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for AppStoreRatingModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRelease(v5);
  a1[1] = v4;
  return a1;
}

_QWORD *assignWithTake for AppStoreRatingModel(_QWORD *a1, _OWORD *a2)
{
  swift_unknownObjectRelease(*a1);
  *(_OWORD *)a1 = *a2;
  return a1;
}

ValueMetadata *type metadata accessor for AppStoreRatingModel()
{
  return &type metadata for AppStoreRatingModel;
}

uint64_t type metadata accessor for AppStoreRatingModel.RatingStats(uint64_t a1)
{
  uint64_t result;

  result = qword_1001EAB38;
  if (!qword_1001EAB38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppStoreRatingModel.RatingStats);
  return result;
}

uint64_t sub_1000C10BC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AppStoreRatingModel.RatingStats(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C10F8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000C113C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000C1178(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t *sub_1000C1180(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain(v11);
  }
  return a1;
}

uint64_t sub_1000C1214(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_1000C125C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_1000C12C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_1000C1340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000C139C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_1000C1408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C1414);
}

uint64_t sub_1000C1414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1000C14A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C14AC);
}

uint64_t sub_1000C14AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t sub_1000C1528(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100188BF0;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_1000C1598()
{
  unint64_t result;

  result = qword_1001EAB78;
  if (!qword_1001EAB78)
  {
    result = swift_getWitnessTable(&unk_100188D1C, &type metadata for AppStoreRatingModel.RatingStats.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001EAB78);
  }
  return result;
}

uint64_t sub_1000C15DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppStoreRatingModel.RatingStats(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for AppStoreRatingModel.RatingStats.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000C166C + 4 * byte_100188AE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000C16A0 + 4 * byte_100188AE0[v4]))();
}

uint64_t sub_1000C16A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C16A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C16B0);
  return result;
}

uint64_t sub_1000C16BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C16C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000C16C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C16D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppStoreRatingModel.RatingStats.CodingKeys()
{
  return &type metadata for AppStoreRatingModel.RatingStats.CodingKeys;
}

unint64_t sub_1000C16F0()
{
  unint64_t result;

  result = qword_1001EAB98;
  if (!qword_1001EAB98)
  {
    result = swift_getWitnessTable(&unk_100188CF4, &type metadata for AppStoreRatingModel.RatingStats.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001EAB98);
  }
  return result;
}

unint64_t sub_1000C1738()
{
  unint64_t result;

  result = qword_1001EABA0;
  if (!qword_1001EABA0)
  {
    result = swift_getWitnessTable(&unk_100188C64, &type metadata for AppStoreRatingModel.RatingStats.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001EABA0);
  }
  return result;
}

unint64_t sub_1000C1780()
{
  unint64_t result;

  result = qword_1001EABA8;
  if (!qword_1001EABA8)
  {
    result = swift_getWitnessTable(&unk_100188C8C, &type metadata for AppStoreRatingModel.RatingStats.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001EABA8);
  }
  return result;
}

ValueMetadata *type metadata accessor for FrameRateManager()
{
  return &type metadata for FrameRateManager;
}

id sub_1000C1A4C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(char *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  objc_class *v72;
  uint64_t v74;
  char *v75;
  objc_super v76;
  _QWORD v77[3];
  uint64_t v78;
  _UNKNOWN **v79;
  id v80[3];
  uint64_t v81;

  v1 = sub_100014E10(&qword_1001E9BB0);
  __chkstk_darwin(v1);
  v75 = (char *)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = &v0[OBJC_IVAR___RCRecorderAppDelegateDependencyContainer_recordingStatePublisher];
  v4 = type metadata accessor for RecordingStatePublisher();
  v5 = (_QWORD *)swift_allocObject(v4, 40, 7);
  v6 = (void *)objc_opt_self(VMAudioService);
  v7 = v0;
  v8 = objc_msgSend(v6, "sharedInstance");
  v5[2] = v8;
  v5[3] = 0;
  LOBYTE(v80[0]) = 0;
  v9 = sub_100014E10(&qword_1001EAC10);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v5[4] = CurrentValueSubject.init(_:)(v80);
  v80[0] = v8;
  KeyPath = swift_getKeyPath(&unk_100188DC0);
  v11 = swift_allocObject(&unk_1001AF6C8, 24, 7);
  swift_weakInit(v11 + 16, v5);
  v12 = v8;
  v13 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 0, sub_1000C235C, v11, &protocol witness table for NSObject);
  swift_release(KeyPath);
  swift_release(v11);

  v14 = (void *)v5[3];
  v5[3] = v13;

  *((_QWORD *)v3 + 3) = v4;
  *((_QWORD *)v3 + 4) = &off_1001AEA70;
  *(_QWORD *)v3 = v5;
  sub_10001BB88((uint64_t)v3, (uint64_t)v80);
  v15 = sub_1000AD178((uint64_t)v80, v81);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  v19 = *v17;
  v78 = v4;
  v79 = &off_1001AEA70;
  v77[0] = v19;
  v20 = (char *)objc_allocWithZone((Class)type metadata accessor for LocationManagerStateCoordinator());
  v21 = sub_1000AD178((uint64_t)v77, v78);
  __chkstk_darwin(v21);
  v23 = (uint64_t *)((char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  v25 = sub_1000C2364(*v23, v20);
  sub_10001B498(v77);
  sub_10001B498(v80);
  *(_QWORD *)&v7[OBJC_IVAR___RCRecorderAppDelegateDependencyContainer_locationManagerStateCoordinator] = v25;
  sub_10001BB88((uint64_t)v3, (uint64_t)v80);
  v26 = sub_1000AD178((uint64_t)v80, v81);
  __chkstk_darwin(v26);
  v28 = (uint64_t *)((char *)&v74 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v29 + 16))(v28);
  v30 = *v28;
  v78 = v4;
  v79 = &off_1001AEA70;
  v77[0] = v30;
  v31 = type metadata accessor for BackgroundTaskManager();
  v32 = swift_allocObject(v31, 32, 7);
  v33 = sub_1000AD178((uint64_t)v77, v4);
  v34 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  __chkstk_darwin(v33);
  v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
  v37 = *(void (**)(char *))(v36 + 16);
  v37((char *)&v74 - v35);
  v38 = sub_1000C25F8(*(uint64_t *)((char *)&v74 - v35), v32);
  sub_10001B498(v77);
  sub_10001B498(v80);
  *(_QWORD *)&v7[OBJC_IVAR___RCRecorderAppDelegateDependencyContainer_backgroundTaskManager] = v38;
  sub_10001BB88((uint64_t)v3, (uint64_t)v80);
  v39 = sub_1000AD178((uint64_t)v80, v81);
  __chkstk_darwin(v39);
  v41 = (uint64_t *)((char *)&v74 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v42 + 16))(v41);
  v43 = *v41;
  v78 = v4;
  v79 = &off_1001AEA70;
  v77[0] = v43;
  v44 = type metadata accessor for SecureAppAssertionManager();
  v45 = swift_allocObject(v44, 40, 7);
  v46 = sub_1000AD178((uint64_t)v77, v4);
  __chkstk_darwin(v46);
  v37((char *)&v74 - v35);
  v47 = sub_1000C2814(*(uint64_t *)((char *)&v74 - v35), v45);
  sub_10001B498(v77);
  sub_10001B498(v80);
  *(_QWORD *)&v7[OBJC_IVAR___RCRecorderAppDelegateDependencyContainer_secureAppAssertionManager] = v47;
  v48 = type metadata accessor for PlatterSuccessStatePresentationCoordinator();
  v49 = swift_allocObject(v48, 16, 7);
  *(_QWORD *)&v7[OBJC_IVAR___RCRecorderAppDelegateDependencyContainer_platterSuccessStatePresentationCoordinator] = v49;
  sub_10001BB88((uint64_t)v3, (uint64_t)v80);
  v50 = sub_1000AD178((uint64_t)v80, v81);
  __chkstk_darwin(v50);
  v52 = (uint64_t *)((char *)&v74 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v53 + 16))(v52);
  v54 = *v52;
  v78 = v4;
  v79 = &off_1001AEA70;
  v77[0] = v54;
  v55 = type metadata accessor for ActivityManagerStateCoordinator();
  v56 = (_QWORD *)swift_allocObject(v55, 64, 7);
  v57 = sub_1000AD178((uint64_t)v77, v4);
  __chkstk_darwin(v57);
  v37((char *)&v74 - v35);
  v58 = *(uint64_t *)((char *)&v74 - v35);
  swift_retain(v49);
  v59 = sub_1000C2C00(v58, v49, v56);
  sub_10001B498(v77);
  sub_10001B498(v80);
  *(_QWORD *)&v7[OBJC_IVAR___RCRecorderAppDelegateDependencyContainer_activityManagerStateCoordinator] = v59;
  sub_10001BB88((uint64_t)v3, (uint64_t)v80);
  v60 = sub_1000AD178((uint64_t)v80, v81);
  __chkstk_darwin(v60);
  v62 = (uint64_t *)((char *)&v74 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v63 + 16))(v62);
  v64 = sub_1000C2A2C(*v62);
  sub_10001B498(v80);
  *(_QWORD *)&v7[OBJC_IVAR___RCRecorderAppDelegateDependencyContainer_controlCenterWidgetStateCoordinator] = v64;

  if (qword_1001E9058 != -1)
    swift_once(&qword_1001E9058, sub_1000EB6A4);
  v65 = (void *)qword_1001F6E18;
  v66 = type metadata accessor for TaskPriority(0);
  v67 = (uint64_t)v75;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v75, 1, 1, v66);
  type metadata accessor for MainActor(0);
  v68 = v65;
  v69 = static MainActor.shared.getter(v68);
  v70 = (_QWORD *)swift_allocObject(&unk_1001AF6F0, 40, 7);
  v70[2] = v69;
  v70[3] = &protocol witness table for MainActor;
  v70[4] = v68;
  v71 = sub_1000F7930(v67, (uint64_t)&unk_1001EA740, (uint64_t)v70);
  swift_release(v71);
  v72 = (objc_class *)type metadata accessor for RecorderAppDelegateDependencyContainer();
  v76.receiver = v7;
  v76.super_class = v72;
  return objc_msgSendSuper2(&v76, "init");
}

id sub_1000C2210()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RecorderAppDelegateDependencyContainer();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RecorderAppDelegateDependencyContainer()
{
  return objc_opt_self(RCRecorderAppDelegateDependencyContainer);
}

const char *sub_1000C22E8()
{
  return "mode";
}

id sub_1000C22F4@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "mode");
  *a2 = (_DWORD)result;
  return result;
}

id sub_1000C2324(unsigned int *a1, id *a2)
{
  return objc_msgSend(*a2, "setMode:", *a1);
}

uint64_t sub_1000C2338()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C235C(void **a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000B3AFC(a1, a2, v2);
}

char *sub_1000C2364(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  objc_class *v15;
  id v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  objc_super v29;
  _QWORD v30[5];

  v4 = sub_100014E10(&qword_1001EA430);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100014E10(&qword_1001EA438);
  v27 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RecordingStatePublisher();
  v30[3] = v11;
  v30[4] = &off_1001AEA70;
  v30[0] = a1;
  v12 = OBJC_IVAR___RCLocationManagerStateCoordinator_locationManager;
  v13 = (void *)objc_opt_self(RCLocationsOfInterestManager);
  v14 = a2;
  *(_QWORD *)&a2[v12] = objc_msgSend(v13, "defaultManager");
  *(_QWORD *)&v14[OBJC_IVAR___RCLocationManagerStateCoordinator_cancellable] = 0;

  v15 = (objc_class *)type metadata accessor for LocationManagerStateCoordinator();
  v29.receiver = v14;
  v29.super_class = v15;
  v16 = objc_msgSendSuper2(&v29, "init");
  v28 = *(_QWORD *)(*sub_10001B474(v30, v11) + 32);
  v17 = (char *)v16;
  v18 = sub_100014E10(&qword_1001EA440);
  v19 = sub_10000EDB0(&qword_1001EA448, &qword_1001EA440, (uint64_t)&unk_10018CE18);
  Publisher.dropFirst(_:)(1, v18, v19);
  v20 = sub_10000EDB0(&qword_1001EA450, &qword_1001EA430, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
  Publisher<>.removeDuplicates()(v4, v20, &protocol witness table for Bool);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v21 = swift_allocObject(&unk_1001AF790, 24, 7);
  swift_unknownObjectWeakInit(v21 + 16, v17);
  v22 = sub_10000EDB0(&qword_1001EA458, &qword_1001EA438, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v23 = Publisher<>.sink(receiveValue:)(sub_1000C2ECC, v21, v8, v22);
  swift_release(v21);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v8);
  v24 = *(_QWORD *)&v17[OBJC_IVAR___RCLocationManagerStateCoordinator_cancellable];
  *(_QWORD *)&v17[OBJC_IVAR___RCLocationManagerStateCoordinator_cancellable] = v23;
  swift_release(v24);
  sub_10001B498(v30);
  return v17;
}

uint64_t sub_1000C25F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD v22[5];

  v4 = sub_100014E10(&qword_1001EA430);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100014E10(&qword_1001EA438);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for RecordingStatePublisher();
  v22[3] = v12;
  v22[4] = &off_1001AEA70;
  v22[0] = a1;
  *(_QWORD *)(a2 + 16) = UIBackgroundTaskInvalid;
  *(_QWORD *)(a2 + 24) = 0;
  v21 = *(_QWORD *)(*sub_10001B474(v22, v12) + 32);
  v13 = sub_100014E10(&qword_1001EA440);
  v14 = sub_10000EDB0(&qword_1001EA448, &qword_1001EA440, (uint64_t)&unk_10018CE18);
  Publisher.dropFirst(_:)(1, v13, v14);
  v15 = sub_10000EDB0(&qword_1001EA450, &qword_1001EA430, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
  Publisher<>.removeDuplicates()(v4, v15, &protocol witness table for Bool);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v16 = swift_allocObject(&unk_1001AF768, 24, 7);
  swift_weakInit(v16 + 16, a2);
  v17 = sub_10000EDB0(&qword_1001EA458, &qword_1001EA438, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v18 = Publisher<>.sink(receiveValue:)(sub_1000C2EA0, v16, v8, v17);
  swift_release(v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v19 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v18;
  swift_release(v19);
  sub_10001B498(v22);
  return a2;
}

uint64_t sub_1000C2814(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD v22[5];

  v4 = sub_100014E10(&qword_1001EA430);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100014E10(&qword_1001EA438);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for RecordingStatePublisher();
  v22[3] = v12;
  v22[4] = &off_1001AEA70;
  v22[0] = a1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v21 = *(_QWORD *)(*sub_10001B474(v22, v12) + 32);
  v13 = sub_100014E10(&qword_1001EA440);
  v14 = sub_10000EDB0(&qword_1001EA448, &qword_1001EA440, (uint64_t)&unk_10018CE18);
  Publisher.dropFirst(_:)(1, v13, v14);
  v15 = sub_10000EDB0(&qword_1001EA450, &qword_1001EA430, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
  Publisher<>.removeDuplicates()(v4, v15, &protocol witness table for Bool);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v16 = swift_allocObject(&unk_1001AF740, 24, 7);
  swift_weakInit(v16 + 16, a2);
  v17 = sub_10000EDB0(&qword_1001EA458, &qword_1001EA438, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v18 = Publisher<>.sink(receiveValue:)(sub_1000C2E98, v16, v8, v17);
  swift_release(v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v19 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v18;
  swift_release(v19);
  sub_10001B498(v22);
  return a2;
}

uint64_t sub_1000C2A2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  _QWORD v21[5];
  _QWORD v22[5];

  v2 = sub_100014E10(&qword_1001EAC18);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RecordingStatePublisher();
  v22[3] = v6;
  v22[4] = &off_1001AEA70;
  v22[0] = a1;
  v7 = type metadata accessor for ControlCenterWidgetStateCoordinator();
  v8 = swift_allocObject(v7, 24, 7);
  v9 = sub_1000AD178((uint64_t)v22, v6);
  __chkstk_darwin(v9);
  v11 = (_QWORD *)((char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  v13 = *v11;
  v21[3] = v6;
  v21[4] = &off_1001AEA70;
  v21[0] = v13;
  *(_QWORD *)(v8 + 16) = 0;
  v20[1] = *(_QWORD *)(*sub_10001B474(v21, v6) + 32);
  v14 = sub_100014E10(&qword_1001EA440);
  v15 = sub_10000EDB0(&qword_1001EA448, &qword_1001EA440, (uint64_t)&unk_10018CE18);
  Publisher<>.removeDuplicates()(v14, v15, &protocol witness table for Bool);
  v16 = sub_10000EDB0(&qword_1001EAC20, &qword_1001EAC18, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v17 = Publisher<>.sink(receiveValue:)(sub_1000E04E0, 0, v2, v16);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v18 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v8 + 16) = v17;
  swift_release(v18);
  sub_10001B498(v21);
  sub_10001B498(v22);
  return v8;
}

_QWORD *sub_1000C2C00(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD v27[5];

  v6 = sub_100014E10(&qword_1001EA430);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v27[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100014E10(&qword_1001EA438);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v27[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for RecordingStatePublisher();
  v27[3] = v14;
  v27[4] = &off_1001AEA70;
  v27[0] = a1;
  v15 = type metadata accessor for ActivityManager();
  v16 = swift_allocObject(v15, 24, 7);
  *(_QWORD *)(v16 + 16) = 0;
  a3[6] = 0;
  a3[3] = 0;
  a3[4] = 0;
  a3[2] = v16;
  v17 = swift_unknownObjectWeakInit(a3 + 5, 0);
  a3[6] = &off_1001AECF0;
  a3[7] = 0;
  swift_unknownObjectWeakAssign(v17, a2);
  v26 = *(_QWORD *)(*sub_10001B474(v27, v14) + 32);
  v18 = sub_100014E10(&qword_1001EA440);
  v19 = sub_10000EDB0(&qword_1001EA448, &qword_1001EA440, (uint64_t)&unk_10018CE18);
  Publisher.dropFirst(_:)(1, v18, v19);
  v20 = sub_10000EDB0(&qword_1001EA450, &qword_1001EA430, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
  Publisher<>.removeDuplicates()(v6, v20, &protocol witness table for Bool);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v21 = swift_allocObject(&unk_1001AF718, 24, 7);
  swift_weakInit(v21 + 16, a3);
  v22 = sub_10000EDB0(&qword_1001EA458, &qword_1001EA438, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v23 = Publisher<>.sink(receiveValue:)(sub_1000C2E90, v21, v10, v22);
  swift_release(a2);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v24 = a3[7];
  a3[7] = v23;
  swift_release(v24);
  sub_10001B498(v27);
  return a3;
}

uint64_t sub_1000C2E64()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

_QWORD *sub_1000C2E90(_BYTE *a1)
{
  uint64_t v1;

  return sub_1000F640C(a1, v1);
}

uint64_t sub_1000C2E98(_BYTE *a1)
{
  uint64_t v1;

  return sub_1000CE0F8(a1, v1);
}

uint64_t sub_1000C2EA0(_BYTE *a1)
{
  uint64_t v1;

  return sub_100103A38(a1, v1);
}

uint64_t sub_1000C2EA8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000C2ECC(_BYTE *a1)
{
  uint64_t v1;

  sub_1000B6518(a1, v1);
}

uint64_t Sequence<>.sorted(usingSortDescriptors:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[2] = a2;
  v4[3] = a3;
  v4[4] = a1;
  return Sequence.sorted(by:)(sub_1000C3088, v4, a2);
}

uint64_t sub_1000C2F24(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  id v17;

  v4 = *a1;
  v5 = *a2;
  if (!((unint64_t)a3 >> 62))
  {
    v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a3);
    if (v6)
      goto LABEL_3;
LABEL_21:
    v12 = 0;
LABEL_22:
    swift_bridgeObjectRelease(a3);
    return v12;
  }
LABEL_17:
  if (a3 < 0)
    v14 = a3;
  else
    v14 = a3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a3);
  v6 = _CocoaArrayWrapper.endIndex.getter(v14);
  if (!v6)
    goto LABEL_21;
LABEL_3:
  v7 = 4;
  while (1)
  {
    if ((a3 & 0xC000000000000001) != 0)
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a3);
    else
      v8 = *(id *)(a3 + 8 * v7);
    v9 = v8;
    v10 = v7 - 3;
    if (__OFADD__(v7 - 4, 1))
    {
      __break(1u);
      goto LABEL_17;
    }
    v11 = objc_msgSend(v8, "compareObject:toObject:", v4, v5);
    if (v11)
      break;

    ++v7;
    if (v10 == v6)
    {
      v12 = 0;
      goto LABEL_22;
    }
  }
  v13 = v11;
  if (v11 == (id)-1)
  {
    v12 = 1;
LABEL_15:

    goto LABEL_22;
  }
  if (v11 == (id)1)
  {
    v12 = 0;
    goto LABEL_15;
  }
  type metadata accessor for ComparisonResult(0);
  v17 = v13;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v16, &v17, v16, &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_1000C3088(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_1000C2F24(a1, a2, *(_QWORD *)(v2 + 32)) & 1;
}

BOOL sub_1000C30B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const mach_header_64 *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const mach_header_64 *v14;

  if (*(_BYTE *)(a1 + 17))
    v2 = 256;
  else
    v2 = 0;
  v3 = v2 | *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 18))
    v4 = 0x10000;
  else
    v4 = 0;
  if (*(_BYTE *)(a1 + 19))
    v5 = 0x1000000;
  else
    v5 = 0;
  v6 = v3 | v4 | v5;
  if (*(_BYTE *)(a1 + 20))
    v7 = &_mh_execute_header;
  else
    v7 = 0;
  v8 = v6 | (unint64_t)v7;
  if (*(_BYTE *)(a2 + 17))
    v9 = 256;
  else
    v9 = 0;
  v10 = v9 | *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 18))
    v11 = 0x10000;
  else
    v11 = 0;
  if (*(_BYTE *)(a2 + 19))
    v12 = 0x1000000;
  else
    v12 = 0;
  v13 = v10 | v11 | v12;
  if (*(_BYTE *)(a2 + 20))
    v14 = &_mh_execute_header;
  else
    v14 = 0;
  return sub_1000C443C(*(_WORD *)a1, *(_QWORD *)(a1 + 8), v8, *(_WORD *)a2, *(_QWORD *)(a2 + 8), v13 | (unint64_t)v14, *(double *)(a1 + 24), *(double *)(a2 + 24));
}

uint64_t sub_1000C3168(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  double v19;
  uint64_t v21;
  int v22;
  int v24;
  int v25;
  int v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  double v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  double v44;

  v5 = a3;
  v7 = a3 & 0x100;
  v8 = a3 & 0x10000;
  v9 = a3 & 0x1000000;
  v10 = a3 & (unint64_t)&_mh_execute_header;
  v11 = *(unsigned __int8 *)(v4 + 32);
  v12 = *(unsigned __int8 *)(v4 + 33);
  v13 = *(_QWORD *)(v4 + 40);
  v14 = *(unsigned __int8 *)(v4 + 48);
  v15 = *(unsigned __int8 *)(v4 + 49);
  v16 = *(unsigned __int8 *)(v4 + 50);
  v17 = *(unsigned __int8 *)(v4 + 51);
  v18 = *(unsigned __int8 *)(v4 + 52);
  v19 = *(double *)(v4 + 56);
  if (v11 != result || BYTE1(result) != v12)
    goto LABEL_5;
  if (a3 >> 6)
  {
    if (a3 >> 6 == 1)
    {
      if ((v14 & 0xC0) == 0x40)
        goto LABEL_12;
    }
    else
    {
      if (a2 | a3 ^ 0x80)
      {
        v22 = v14 & 0xC0;
        if (a3 == 128 && a2 == 1)
        {
          if (v22 != 128)
            goto LABEL_5;
          v24 = v10 != 0;
          v25 = v9 != 0;
          v26 = v8 != 0;
          v27 = v7 != 0;
          if (v13 != 1)
            goto LABEL_5;
        }
        else
        {
          if (v22 != 128)
            goto LABEL_5;
          v24 = v10 != 0;
          v25 = v9 != 0;
          v26 = v8 != 0;
          v27 = v7 != 0;
          if (v13 != 2)
            goto LABEL_5;
        }
      }
      else
      {
        if ((v14 & 0xC0) != 0x80)
          goto LABEL_5;
        v24 = v10 != 0;
        v25 = v9 != 0;
        v26 = v8 != 0;
        v27 = v7 != 0;
        if (v13)
          goto LABEL_5;
      }
      if (v14 == 128 && v27 == v15 && v26 == v16 && v25 == v17 && v24 == v18)
        goto LABEL_36;
    }
LABEL_5:
    v21 = *(_QWORD *)(v4 + 24);
    v28 = result;
    v29 = a2;
    v30 = v5;
    v31 = BYTE1(v7);
    v32 = BYTE2(v8);
    v33 = BYTE3(v9);
    v34 = BYTE4(v10);
    v35 = a4;
    v36 = v11;
    v37 = v12;
    v38 = v13;
    v39 = v14;
    v40 = v15;
    v41 = v16;
    v42 = v17;
    v43 = v18;
    v44 = v19;
    sub_1000BED80(a2, v5);
    sub_1000BED80(v13, v14);
    swift_retain(v21);
    PassthroughSubject.send(_:)(&v28);
    swift_release(v21);
    sub_1000BED94(a2, v5);
    return sub_1000BED94(v13, v14);
  }
  if (v14 >= 0x40)
    goto LABEL_5;
LABEL_12:
  if ((((v7 != 0) ^ v15) & 1) != 0
    || (((v8 != 0) ^ v16) & 1) != 0
    || (((v9 != 0) ^ v17) & 1) != 0
    || (((v10 != 0) ^ v18) & 1) != 0)
  {
    goto LABEL_5;
  }
LABEL_36:
  if (v19 != a4)
    goto LABEL_5;
  return result;
}

double sub_1000C33E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  _BYTE v7[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = Strong;
    sub_1000C3AE8(v2);
    *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  }
  return result;
}

void sub_1000C3440(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const mach_header_64 *v20;
  _BYTE v21[24];

  v2 = *(_QWORD *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v21, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v6 = Strong;
    v7 = *(_QWORD *)(Strong + 40);
    v8 = *(unsigned __int8 *)(Strong + 48);
    v9 = *(unsigned __int8 *)(Strong + 49);
    v10 = *(unsigned __int8 *)(Strong + 50);
    v11 = *(unsigned __int8 *)(Strong + 51);
    v12 = *(unsigned __int8 *)(Strong + 52);
    v13 = *(double *)(Strong + 56);
    *(_QWORD *)(Strong + 40) = v2;
    *(_BYTE *)(Strong + 48) = v3;
    *(_BYTE *)(Strong + 49) = v9;
    *(_BYTE *)(Strong + 50) = v10;
    *(_BYTE *)(Strong + 51) = v11;
    *(_BYTE *)(Strong + 52) = v12;
    v14 = *(unsigned __int16 *)(Strong + 32);
    sub_1000BED80(v2, v3);
    sub_1000BED80(v2, v3);
    sub_1000BED80(v7, v8);
    sub_1000BED94(v7, v8);
    v15 = 256;
    if (!v9)
      v15 = 0;
    v16 = v15 | v8;
    v17 = 0x10000;
    if (!v10)
      v17 = 0;
    v18 = 0x1000000;
    if (!v11)
      v18 = 0;
    v19 = v16 | v17 | v18;
    v20 = &_mh_execute_header;
    if (!v12)
      v20 = 0;
    sub_1000C3168(v14, v7, v19 | (unint64_t)v20, v13);
    sub_1000BED94(v2, v3);
    sub_1000BED94(v7, v8);
    swift_release(v6);
  }
}

void sub_1000C3590(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X11 }
}

uint64_t sub_1000C35CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const mach_header_64 *v14;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(unsigned __int8 *)(v0 + 48);
  v3 = *(unsigned __int8 *)(v0 + 49);
  v4 = *(unsigned __int8 *)(v0 + 50);
  v5 = *(unsigned __int8 *)(v0 + 51);
  v6 = *(unsigned __int8 *)(v0 + 52);
  v7 = *(double *)(v0 + 56);
  v8 = *(unsigned __int16 *)(v0 + 32);
  *(_BYTE *)(v0 + 33) = 1;
  *(_BYTE *)(v0 + 49) = v3;
  *(_BYTE *)(v0 + 50) = v4;
  *(_BYTE *)(v0 + 51) = v5;
  *(_BYTE *)(v0 + 52) = v6;
  sub_1000BED80(v1, v2);
  sub_1000BED80(v1, v2);
  sub_1000BED80(v1, v2);
  sub_1000BED94(v1, v2);
  v9 = 256;
  if (!v3)
    v9 = 0;
  v10 = v9 | v2;
  v11 = 0x10000;
  if (!v4)
    v11 = 0;
  v12 = 0x1000000;
  if (!v5)
    v12 = 0;
  v13 = v10 | v11 | v12;
  v14 = &_mh_execute_header;
  if (!v6)
    v14 = 0;
  sub_1000C3168(v8, v1, v13 | (unint64_t)v14, v7);
  sub_1000BED94(v1, v2);
  return sub_1000BED94(v1, v2);
}

void sub_1000C36F0(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  uint64_t v3;

  if (!(a2 | a1) && a3 == 128)
  {
    *(_BYTE *)(v3 + 33) = 0;
    JUMPOUT(0x1000C3630);
  }
  JUMPOUT(0x1000C362CLL);
}

uint64_t sub_1000C3AE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  double v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const mach_header_64 *v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const mach_header_64 *v39;
  uint64_t v40;
  uint64_t v41;

  v2 = v1;
  switch(a1)
  {
    case 0:
    case 3:
      v3 = *(_QWORD *)(v1 + 40);
      v4 = *(unsigned __int8 *)(v1 + 48);
      v5 = *(unsigned __int8 *)(v1 + 49);
      v6 = *(unsigned __int8 *)(v1 + 50);
      v7 = *(unsigned __int8 *)(v1 + 51);
      v8 = *(unsigned __int8 *)(v1 + 52);
      v9 = *(double *)(v1 + 56);
      v10 = *(unsigned __int16 *)(v1 + 32);
      v11 = 2;
      goto LABEL_18;
    case 1:
      v3 = *(_QWORD *)(v1 + 40);
      v4 = *(unsigned __int8 *)(v1 + 48);
      v5 = *(unsigned __int8 *)(v1 + 49);
      v6 = *(unsigned __int8 *)(v1 + 50);
      v7 = *(unsigned __int8 *)(v1 + 51);
      v8 = *(unsigned __int8 *)(v1 + 52);
      v9 = *(double *)(v1 + 56);
      v10 = *(unsigned __int16 *)(v1 + 32);
      *(_BYTE *)(v2 + 32) = 0;
      goto LABEL_19;
    case 2:
      v3 = *(_QWORD *)(v1 + 40);
      v4 = *(unsigned __int8 *)(v1 + 48);
      v5 = *(unsigned __int8 *)(v1 + 49);
      v6 = *(unsigned __int8 *)(v1 + 50);
      v7 = *(unsigned __int8 *)(v1 + 51);
      v8 = *(unsigned __int8 *)(v1 + 52);
      v9 = *(double *)(v1 + 56);
      v10 = *(unsigned __int16 *)(v1 + 32);
      v11 = 1;
LABEL_18:
      *(_BYTE *)(v2 + 32) = v11;
LABEL_19:
      *(_BYTE *)(v2 + 49) = v5;
      *(_BYTE *)(v2 + 50) = v6;
      *(_BYTE *)(v2 + 51) = v7;
      *(_BYTE *)(v2 + 52) = v8;
      sub_1000BED80(v3, v4);
      sub_1000BED80(v3, v4);
      sub_1000BED80(v3, v4);
      sub_1000BED94(v3, v4);
      v34 = 256;
      if (!v5)
        v34 = 0;
      v35 = v34 | v4;
      v36 = 0x10000;
      if (!v6)
        v36 = 0;
      v37 = 0x1000000;
      if (!v7)
        v37 = 0;
      v38 = v35 | v36 | v37;
      v39 = &_mh_execute_header;
      if (!v8)
        v39 = 0;
      sub_1000C3168(v10, v3, v38 | (unint64_t)v39, v9);
      sub_1000BED94(v3, v4);
      result = sub_1000BED94(v3, v4);
      break;
    default:
      if (qword_1001E8F80 != -1)
        swift_once(&qword_1001E8F80, sub_1000B5218);
      v12 = type metadata accessor for Logger(0);
      sub_1000AACFC(v12, (uint64_t)qword_1001F6C20);
      v13 = static os_log_type_t.error.getter();
      v14 = v13;
      v15 = Logger.logObject.getter(v13);
      v16 = v14;
      if (os_log_type_enabled(v15, v14))
      {
        v17 = (uint8_t *)swift_slowAlloc(12, -1);
        v18 = swift_slowAlloc(32, -1);
        v41 = v18;
        *(_DWORD *)v17 = 136315138;
        v40 = sub_1001049A8(0xD00000000000002CLL, 0x8000000100183A50, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v17 + 4, v17 + 12);
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s - Unexpected user activity type", v17, 0xCu);
        swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);
      }

      v19 = *(_QWORD *)(v2 + 40);
      v20 = *(unsigned __int8 *)(v2 + 48);
      v21 = *(unsigned __int8 *)(v2 + 49);
      v22 = *(unsigned __int8 *)(v2 + 50);
      v23 = *(unsigned __int8 *)(v2 + 51);
      v24 = *(unsigned __int8 *)(v2 + 52);
      v25 = *(double *)(v2 + 56);
      v26 = *(unsigned __int16 *)(v2 + 32);
      *(_BYTE *)(v2 + 32) = 2;
      *(_BYTE *)(v2 + 49) = v21;
      *(_BYTE *)(v2 + 50) = v22;
      *(_BYTE *)(v2 + 51) = v23;
      *(_BYTE *)(v2 + 52) = v24;
      sub_1000BED80(v19, v20);
      sub_1000BED80(v19, v20);
      sub_1000BED80(v19, v20);
      sub_1000BED94(v19, v20);
      v27 = 256;
      if (!v21)
        v27 = 0;
      v28 = v27 | v20;
      v29 = 0x10000;
      if (!v22)
        v29 = 0;
      v30 = 0x1000000;
      if (!v23)
        v30 = 0;
      v31 = v28 | v29 | v30;
      v32 = &_mh_execute_header;
      if (!v24)
        v32 = 0;
      sub_1000C3168(v26, v19, v31 | (unint64_t)v32, v25);
      sub_1000BED94(v19, v20);
      result = sub_1000BED94(v19, v20);
      break;
  }
  return result;
}

uint64_t sub_1000C3E98()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  sub_1000BED94(*(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for TranscriptViewContextProvider()
{
  return objc_opt_self(_TtC10VoiceMemos29TranscriptViewContextProvider);
}

uint64_t destroy for TranscriptViewContext(uint64_t a1)
{
  return sub_1000BED94(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeWithCopy for TranscriptViewContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000BED80(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 17) = *(_DWORD *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for TranscriptViewContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000BED80(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000BED94(v6, v7);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for TranscriptViewContext(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  sub_1000BED94(v5, v6);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for TranscriptViewContext(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 17);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TranscriptViewContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 17) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TranscriptViewContext()
{
  return &type metadata for TranscriptViewContext;
}

uint64_t destroy for TranscriptViewContextChanged(uint64_t a1)
{
  sub_1000BED94(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return sub_1000BED94(*(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t initializeWithCopy for TranscriptViewContextChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000BED80(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 17) = *(_DWORD *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_BYTE *)(a2 + 48);
  sub_1000BED80(v6, v7);
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = v7;
  *(_DWORD *)(a1 + 49) = *(_DWORD *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for TranscriptViewContextChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000BED80(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000BED94(v6, v7);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_1000BED80(v8, v9);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  sub_1000BED94(v10, v11);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

__n128 initializeWithTake for TranscriptViewContextChanged(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TranscriptViewContextChanged(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  sub_1000BED94(v5, v6);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v7;
  sub_1000BED94(v8, v9);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for TranscriptViewContextChanged(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 17);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TranscriptViewContextChanged(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_BYTE *)(result + 17) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TranscriptViewContextChanged()
{
  return &type metadata for TranscriptViewContextChanged;
}

BOOL sub_1000C443C(__int16 a1, uint64_t a2, unint64_t a3, __int16 a4, uint64_t a5, unint64_t a6, double a7, double a8)
{
  _BOOL8 result;
  int v9;

  if (a1 != a4)
    return 0;
  if (!(a3 >> 6))
  {
    if (a6 < 0x40u)
      goto LABEL_7;
    return 0;
  }
  if (a3 >> 6 != 1)
  {
    if (a2 | a3 ^ 0x80)
    {
      v9 = a6 & 0xC0;
      if (a3 == 128 && a2 == 1)
      {
        if (v9 == 128)
        {
          result = 0;
          if (a5 != 1)
            return result;
          goto LABEL_23;
        }
      }
      else if (v9 == 128)
      {
        result = 0;
        if (a5 != 2)
          return result;
LABEL_23:
        if (a6 != 128 || ((a3 >> 8) & 1) != ((a6 >> 8) & 1))
          return result;
        goto LABEL_25;
      }
    }
    else if ((a6 & 0xC0) == 0x80)
    {
      result = 0;
      if (a5)
        return result;
      goto LABEL_23;
    }
    return 0;
  }
  if ((a6 & 0xC0) != 0x40)
    return 0;
LABEL_7:
  result = 0;
  if (((a3 >> 8) & 1) != ((a6 >> 8) & 1))
    return result;
LABEL_25:
  if (((a3 >> 16) & 1) == ((a6 >> 16) & 1)
    && ((a3 >> 24) & 1) == ((a6 >> 24) & 1)
    && (BYTE4(a3) & 1) == (BYTE4(a6) & 1))
  {
    return a7 == a8;
  }
  return result;
}

uint64_t sub_1000C454C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v3 = v2;
  v6 = sub_100014E10(&qword_1001EAD88);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v10 = (void *)sub_1000FA734((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v10 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)(v2 + 16) = v10;
  v11 = sub_100014E10(&qword_1001ED1B0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v12 = PassthroughSubject.init()();
  *(_QWORD *)(v2 + 24) = v12;
  CurrentValueSubject.value.getter(&v30, v12);
  v13 = v30;
  v14 = v31;
  *(_WORD *)(v2 + 32) = 2;
  *(_QWORD *)(v2 + 40) = v13;
  *(_BYTE *)(v2 + 48) = v14;
  *(_QWORD *)(v2 + 56) = 0;
  *(_DWORD *)(v2 + 49) = 0;
  sub_1000C4898(a1, (uint64_t)&v30);
  if (v32)
  {
    v29 = *(_QWORD *)(*sub_10001B474(&v30, v32)
                    + OBJC_IVAR____TtC10VoiceMemos28RCUserActivityStatePublisher_userActivityChangedSubject);
    v15 = sub_100014E10(&qword_1001EA9F0);
    v16 = sub_10000EDB0(&qword_1001EADA0, &qword_1001EA9F0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v17 = sub_1000C494C();
    Publisher<>.removeDuplicates()(v15, v16, v17);
    v18 = sub_10000EDB0(&qword_1001EADB0, &qword_1001EAD88, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
    v19 = Publisher.eraseToAnyPublisher()(v6, v18);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v29 = v19;
    v20 = swift_allocObject(&unk_1001AF918, 24, 7);
    swift_weakInit(v20 + 16, v3);
    v21 = sub_100014E10(&qword_1001EADB8);
    v22 = sub_10000EDB0(&qword_1001EADC0, &qword_1001EADB8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v23 = Publisher<>.sink(receiveValue:)(sub_1000C4994, v20, v21, v22);
    swift_release(v20);
    swift_release(v29);
    sub_10001B498(&v30);
    swift_beginAccess(v3 + 16, &v30, 33, 0);
    AnyCancellable.store(in:)(v3 + 16);
    swift_endAccess(&v30);
    swift_release(v23);
  }
  else
  {
    sub_1000C48E0((uint64_t)&v30);
  }
  v30 = a2;
  v24 = swift_allocObject(&unk_1001AF918, 24, 7);
  swift_weakInit(v24 + 16, v3);
  v25 = sub_100014E10(&qword_1001EAD98);
  v26 = sub_10000EDB0((unint64_t *)&qword_1001ECD30, &qword_1001EAD98, (uint64_t)&unk_10018CE18);
  v27 = Publisher<>.sink(receiveValue:)(sub_1000C4944, v24, v25, v26);
  swift_release(v24);
  swift_beginAccess(v3 + 16, &v30, 33, 0);
  AnyCancellable.store(in:)(v3 + 16);
  swift_endAccess(&v30);
  swift_release(v27);
  sub_1000C48E0(a1);
  return v3;
}

uint64_t sub_1000C4898(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EAD90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C48E0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100014E10(&qword_1001EAD90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C4920()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000C4944(uint64_t a1)
{
  uint64_t v1;

  sub_1000C3440(a1, v1);
}

unint64_t sub_1000C494C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001EADA8;
  if (!qword_1001EADA8)
  {
    type metadata accessor for RCUserActivityType(255);
    result = swift_getWitnessTable(&unk_100187014, v1);
    atomic_store(result, (unint64_t *)&qword_1001EADA8);
  }
  return result;
}

double sub_1000C4994(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000C33E4(a1, v1);
}

uint64_t storeEnumTagSinglePayload for TranscriptViewContext.TranscriptionState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000C49E8 + 4 * byte_100188DFE[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000C4A1C + 4 * byte_100188DF9[v4]))();
}

uint64_t sub_1000C4A1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C4A24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C4A2CLL);
  return result;
}

uint64_t sub_1000C4A38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C4A40);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000C4A44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C4A4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TranscriptViewContext.TranscriptionState()
{
  return &type metadata for TranscriptViewContext.TranscriptionState;
}

uint64_t getEnumTagSinglePayload for TranscriptViewContext.AudioState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TranscriptViewContext.AudioState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000C4B44 + 4 * byte_100188E08[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000C4B78 + 4 * byte_100188E03[v4]))();
}

uint64_t sub_1000C4B78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C4B80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C4B88);
  return result;
}

uint64_t sub_1000C4B94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C4B9CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000C4BA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C4BA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TranscriptViewContext.AudioState()
{
  return &type metadata for TranscriptViewContext.AudioState;
}

unint64_t sub_1000C4BC8()
{
  unint64_t result;

  result = qword_1001EADC8;
  if (!qword_1001EADC8)
  {
    result = swift_getWitnessTable(&unk_100188F70, &type metadata for TranscriptViewContext.AudioState);
    atomic_store(result, (unint64_t *)&qword_1001EADC8);
  }
  return result;
}

unint64_t sub_1000C4C10()
{
  unint64_t result;

  result = qword_1001EADD0;
  if (!qword_1001EADD0)
  {
    result = swift_getWitnessTable(&unk_100188FD8, &type metadata for TranscriptViewContext.TranscriptionState);
    atomic_store(result, (unint64_t *)&qword_1001EADD0);
  }
  return result;
}

void sub_1000C4D00(void *a1, uint64_t a2, SEL *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;

  v5 = (void *)objc_opt_self(RCRecorderStyleProvider);
  v6 = a1;
  v7 = objc_msgSend(v5, "sharedStyleProvider");
  if (v7)
  {
    v8 = v7;
    objc_msgSend(v7, *a3);

  }
  else
  {
    __break(1u);
  }
}

void sub_1000C4E18()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;

  v1 = (void *)objc_opt_self(RCRecorderStyleProvider);
  v2 = objc_msgSend(v1, "sharedStyleProvider");
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "recordingControlHeightForDiameter:", *(double *)(v0 + OBJC_IVAR____TtC10VoiceMemos30RCRecordingControlLayoutHelper_diameter));

    v4 = objc_msgSend(v1, "sharedStyleProvider");
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, "recordingControlLozengeFixedWidthScaleFactor");

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1000C4F28(double a1, double a2)
{
  uint64_t v2;
  double v5;
  id v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v5 = *(double *)(v2 + OBJC_IVAR____TtC10VoiceMemos30RCRecordingControlLayoutHelper_diameter);
  v6 = objc_msgSend((id)objc_opt_self(RCRecorderStyleProvider), "sharedStyleProvider");
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v6, "recordingControlLozengeFixedWidthScaleFactor");
    v9 = v8;

    if (v5 * v9 < a1)
      v10 = a1;
    else
      v10 = v5 * v9;
    sub_1000C5054();
    sub_1000C5054();
    nullsub_8(a2 - (v10 + v11) * 0.5);
  }
  else
  {
    __break(1u);
  }
}

void sub_1000C5054()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;

  v1 = (void *)objc_opt_self(RCRecorderStyleProvider);
  v2 = objc_msgSend(v1, "sharedStyleProvider");
  if (!v2)
  {
    __break(1u);
    goto LABEL_6;
  }
  v3 = v2;
  objc_msgSend(v2, "recordingControlHeightForDiameter:", *(double *)(v0 + OBJC_IVAR____TtC10VoiceMemos30RCRecordingControlLayoutHelper_diameter));

  v4 = objc_msgSend(v1, "sharedStyleProvider");
  if (!v4)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v5 = v4;
  objc_msgSend(v4, "recordingControlOuterRingThicknessScaleFactor");

  v6 = objc_msgSend(v1, "sharedStyleProvider");
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v6, "recordingControlOuterRingGapScaleFactor");

    return;
  }
LABEL_7:
  __break(1u);
}

id sub_1000C52C4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCRecordingControlLayoutHelper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RCRecordingControlLayoutHelper()
{
  return objc_opt_self(_TtC10VoiceMemos30RCRecordingControlLayoutHelper);
}

uint64_t sub_1000C53A4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  id v15;

  v1 = v0;
  v2 = *(char **)(v0 + OBJC_IVAR____TtC10VoiceMemos8VMPlayer_currentItem);
  if (v2)
  {
    v3 = *(_QWORD *)&v2[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_audioPlayerItem];
    if (v3)
    {
      v4 = v2;
      v5 = v3;
    }
    else
    {
      v11 = v2;
      v12 = sub_10000B940();
      v13 = *(_QWORD *)&v11[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_playableRangeEndTime];
      v14 = v11[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_playableRangeEndTime + 8];
      v15 = *(id *)&v11[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_asset];
      v5 = sub_1000A6928(v15, v13, v14);
      swift_release(v12);

      v3 = 0;
    }
    swift_retain(v3);
    v6 = sub_10000B940();
    v7 = swift_retain(v5);
    sub_1000A5B6C(v7);
    swift_release(v6);
    swift_release(v5);
    swift_unknownObjectWeakAssign(&v2[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_audioPlayer], v1);

    v8 = v5;
  }
  else
  {
    v9 = sub_10000B940();
    sub_1000A5B6C(0);
    v8 = v9;
  }
  return swift_release(v8);
}

uint64_t sub_1000C5720(float a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;

  v2 = sub_10000B940();
  *(float *)(v2 + 84) = a1;
  v4 = *(_QWORD *)(v2 + 56);
  if (v4)
  {
    *(float *)&v3 = a1;
    objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_renderer), "setRate:", v3);
  }
  return swift_release(v2);
}

uint64_t sub_1000C5778()
{
  uint64_t v0;
  uint64_t v1;
  void *Strong;
  void *v3;

  v0 = sub_10000B940();
  v1 = v0;
  if (!*(_QWORD *)(v0 + 56))
    return swift_release(v1);
  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
    return swift_release(v1);
  sub_1000A7070();
  *(_BYTE *)(v1 + 16) = 1;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + 24);
  if (!Strong)
    return swift_release(v1);
  v3 = Strong;
  objc_msgSend(Strong, "audioPlayerIsPlayingChanged:", 1);
  swift_release(v1);
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_1000C5824()
{
  uint64_t v0;
  uint64_t v1;
  void *Strong;
  void *v3;

  v0 = sub_10000B940();
  v1 = v0;
  if (!*(_QWORD *)(v0 + 56))
    return swift_release(v1);
  if ((*(_BYTE *)(v0 + 16) & 1) == 0)
    return swift_release(v1);
  sub_1000A73CC();
  *(_BYTE *)(v1 + 16) = 0;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + 24);
  if (!Strong)
    return swift_release(v1);
  v3 = Strong;
  objc_msgSend(Strong, "audioPlayerIsPlayingChanged:", 0);
  swift_release(v1);
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_1000C58CC(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    v19 = (void *)_convertErrorToNSError(_:)(a1);
    objc_msgSend(a4, "audioPlayerError:", v19);

    sub_1000C66D4(a1, 1);
  }
  else
  {
    v18 = *(_QWORD *)(a3 + OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_audioPlayerItem);
    *(_QWORD *)(a3 + OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_audioPlayerItem) = a1;
    swift_retain(a1);
    swift_release(v18);
  }
  v20 = sub_100004BFC();
  v21 = (void *)static OS_dispatch_queue.main.getter(v20);
  aBlock[4] = a5;
  v32 = a6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A5DB0;
  aBlock[3] = &unk_1001AFB70;
  v22 = _Block_copy(aBlock);
  v23 = v32;
  swift_retain(a6);
  v24 = swift_release(v23);
  static DispatchQoS.unspecified.getter(v24);
  aBlock[0] = _swiftEmptyArrayStorage;
  v25 = sub_1000C66F8();
  v26 = sub_100014E10(&qword_1001E9A78);
  v27 = sub_1000C6740();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v12, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v29);
}

uint64_t sub_1000C5C98(char a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000B940();
  *(_BYTE *)(v2 + 81) = a1;
  v3 = *(_QWORD *)(v2 + 56);
  if (v3)
    objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_renderer), "setEnhanceEnabled:", a1 & 1);
  return swift_release(v2);
}

uint64_t sub_1000C5D74(char a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000B940();
  *(_BYTE *)(v2 + 80) = a1;
  v3 = *(_QWORD *)(v2 + 56);
  if (v3)
    objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10VoiceMemos15AudioPlayerItem_silenceRemover), "setEnabled:", a1 & 1);
  return swift_release(v2);
}

id VMPlayer.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id VMPlayer.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC10VoiceMemos8VMPlayer____lazy_storage___audioPlayer] = 0;
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC10VoiceMemos8VMPlayer_delegate], 0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC10VoiceMemos8VMPlayer_currentItem] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VMPlayer();
  return objc_msgSendSuper2(&v2, "init");
}

id VMPlayer.__deallocating_deinit()
{
  return sub_1000BDBE8(type metadata accessor for VMPlayer);
}

id sub_1000C5F14()
{
  uint64_t v0;
  id result;
  id v2;
  unsigned int v3;
  id v4;
  id v5;
  id v6;

  result = (id)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC10VoiceMemos8VMPlayer_delegate);
  if (result)
  {
    v2 = result;
    v6 = 0;
    v3 = objc_msgSend(result, "activateAudioSessionForPlaybackAndReturnError:", &v6);
    swift_unknownObjectRelease(v2);
    v4 = v6;
    if (v3)
    {
      return v6;
    }
    else
    {
      v5 = v6;
      _convertNSErrorToError(_:)(v4);

      return (id)swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_1000C6278(uint64_t (*a1)(_QWORD), uint64_t a2, double a3)
{
  char *v3;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;

  result = swift_unknownObjectWeakLoadStrong(&v3[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_audioPlayer]);
  if (result)
  {
    v8 = *(_QWORD *)&v3[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_seekCount];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
    {
      __break(1u);
    }
    else
    {
      v11 = (void *)result;
      *(_QWORD *)&v3[OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_seekCount] = v10;
      v12 = (_QWORD *)swift_allocObject(&unk_1001AFAE0, 40, 7);
      v12[2] = v3;
      v12[3] = a1;
      v12[4] = a2;
      v13 = v3;
      sub_1000A8A84((uint64_t)a1, a2);
      v14 = sub_10000B940();
      sub_1000A5FA4((void (*)(_QWORD))sub_1000C6628, (uint64_t)v12, a3);

      swift_release(v12);
      return swift_release(v14);
    }
  }
  else if (a1)
  {
    return a1(0);
  }
  return result;
}

id sub_1000C6570()
{
  return sub_1000BDBE8(type metadata accessor for VMPlayerItem);
}

uint64_t type metadata accessor for VMPlayerItem()
{
  return objc_opt_self(_TtC10VoiceMemos12VMPlayerItem);
}

uint64_t sub_1000C65F4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C6628(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_seekCount);
  v4 = v3 - 1;
  if (__OFSUB__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v5 = *(uint64_t (**)(uint64_t))(v1 + 24);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC10VoiceMemos12VMPlayerItem_seekCount) = v4;
    if (v5)
      return v5(result & 1);
  }
  return result;
}

uint64_t sub_1000C6670(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t sub_1000C6684()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1000C6690()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000C66C4(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000C58CC(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1000C66D4(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return swift_release(a1);
}

uint64_t sub_1000C66E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C66F0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000C66F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001EAEB0;
  if (!qword_1001EAEB0)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1001EAEB0);
  }
  return result;
}

unint64_t sub_1000C6740()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001EAEC0;
  if (!qword_1001EAEC0)
  {
    v1 = sub_10000EE30(&qword_1001E9A78);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001EAEC0);
  }
  return result;
}

uint64_t sub_1000C678C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_1000C67BC()
{
  return sub_1000C67E4(&OBJC_IVAR____TtC10VoiceMemos25RCVisibleEntitiesObserver____lazy_storage___recordingsFRC, (SEL *)&selRef_visibleRecordingsFetchedResultsController);
}

id sub_1000C67D0()
{
  return sub_1000C67E4(&OBJC_IVAR____TtC10VoiceMemos25RCVisibleEntitiesObserver____lazy_storage___userFoldersFRC, (SEL *)&selRef_userFoldersFetchedResultsController);
}

id sub_1000C67E4(uint64_t *a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
  }
  else
  {
    v6 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v2
                                                               + OBJC_IVAR____TtC10VoiceMemos25RCVisibleEntitiesObserver_model), *a2));
    objc_msgSend(v6, "setDelegate:", v2);
    v7 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v6;
    v5 = v6;

    v4 = 0;
  }
  v8 = v4;
  return v5;
}

id sub_1000C6894()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCVisibleEntitiesObserver();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RCVisibleEntitiesObserver()
{
  return objc_opt_self(_TtC10VoiceMemos25RCVisibleEntitiesObserver);
}

void sub_1000C693C(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t Strong;
  uint64_t v23;
  uint64_t ObjectType;
  uint64_t v25;
  void *v26;
  _BYTE v27[32];

  v8 = sub_1000C6D2C(a4, a5, a3);
  if (v8 != 3)
  {
    v9 = v8;
    v10 = sub_1000C67BC();

    if (v10 == a1)
    {
      sub_1000C113C(a2, (uint64_t)v27);
      v19 = sub_1000C6F20();
      if (!swift_dynamicCast(&v26, v27, (char *)&type metadata for Any + 8, v19, 6))
      {
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "VoiceMemos/RCVisibleEntitiesObserver.swift", 42, 2, 80, 0);
LABEL_17:
        __break(1u);
        return;
      }
      v20 = v26;
      v21 = v5 + OBJC_IVAR____TtC10VoiceMemos25RCVisibleEntitiesObserver_delegate;
      Strong = swift_unknownObjectWeakLoadStrong(v5 + OBJC_IVAR____TtC10VoiceMemos25RCVisibleEntitiesObserver_delegate);
      if (Strong)
      {
        v16 = Strong;
        v23 = *(_QWORD *)(v21 + 8);
        ObjectType = swift_getObjectType(Strong);
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v23 + 8))(v20, v9, ObjectType, v23);

        goto LABEL_10;
      }

    }
    else
    {
      v11 = sub_1000C67D0();

      if (v11 == a1)
      {
        sub_1000C113C(a2, (uint64_t)v27);
        v12 = sub_100014E10(&qword_1001EAF20);
        if (swift_dynamicCast(&v26, v27, (char *)&type metadata for Any + 8, v12, 6))
        {
          v13 = v26;
          v14 = v5 + OBJC_IVAR____TtC10VoiceMemos25RCVisibleEntitiesObserver_delegate;
          v15 = swift_unknownObjectWeakLoadStrong(v5 + OBJC_IVAR____TtC10VoiceMemos25RCVisibleEntitiesObserver_delegate);
          if (!v15)
          {
            v25 = (uint64_t)v13;
            goto LABEL_11;
          }
          v16 = v15;
          v17 = *(_QWORD *)(v14 + 8);
          v18 = swift_getObjectType(v15);
          (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v17 + 16))(v13, v9, v18, v17);
          swift_unknownObjectRelease(v13);
LABEL_10:
          v25 = v16;
LABEL_11:
          swift_unknownObjectRelease(v25);
          return;
        }
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "VoiceMemos/RCVisibleEntitiesObserver.swift", 42, 2, 83, 0);
        goto LABEL_17;
      }
    }
  }
}

uint64_t sub_1000C6CEC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100014E10(&qword_1001EAF18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C6D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, char *, uint64_t);
  unint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;

  v6 = sub_100014E10(&qword_1001EAF18);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v25 - v10;
  v12 = type metadata accessor for IndexPath(0);
  v13 = *(_QWORD **)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v25 - v17;
  switch(a1)
  {
    case 1:
      return 0;
    case 4:
      sub_1000C6F5C(a2, (uint64_t)v11);
      v20 = (unsigned int (*)(char *, uint64_t, uint64_t))v13[6];
      if (v20(v11, 1, v12) == 1)
      {
        v9 = v11;
      }
      else
      {
        v21 = (void (*)(char *, char *, uint64_t))v13[4];
        v21(v18, v11, v12);
        sub_1000C6F5C(a3, (uint64_t)v9);
        if (v20(v9, 1, v12) != 1)
        {
          v21(v16, v9, v12);
          v22 = sub_1000C6FA4();
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v16, v12, v22);
          v24 = (void (*)(char *, uint64_t))v13[1];
          v24(v16, v12);
          v24(v18, v12);
          if ((v23 & 1) == 0)
            return 3;
          return 1;
        }
        ((void (*)(char *, uint64_t))v13[1])(v18, v12);
      }
      sub_1000C6CEC((uint64_t)v9);
      return 1;
    case 2:
      return 2;
    default:
      return 3;
  }
}

unint64_t sub_1000C6F20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001EAF28;
  if (!qword_1001EAF28)
  {
    v1 = objc_opt_self(RCCloudRecording);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001EAF28);
  }
  return result;
}

uint64_t sub_1000C6F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EAF18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000C6FA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001EAF30;
  if (!qword_1001EAF30)
  {
    v1 = type metadata accessor for IndexPath(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for IndexPath, v1);
    atomic_store(result, (unint64_t *)&qword_1001EAF30);
  }
  return result;
}

void sub_1000C6FEC(_QWORD *a1@<X8>)
{
  *a1 = &_s26VoiceMemosStringAttributesVN;
}

uint64_t sub_1000C6FFC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  v5 = *a1;
  v6 = v2;
  v3 = sub_100014E10(&qword_1001EAFE0);
  return dispatch thunk of static Equatable.== infix(_:_:)(&v6, &v5, v3, &protocol witness table for AnyKeyPath) & 1;
}

uint64_t sub_1000C7054()
{
  uint64_t v0;

  v0 = sub_100014E10(&qword_1001EAFE0);
  return dispatch thunk of Hashable.hashValue.getter(v0, &protocol witness table for AnyKeyPath);
}

void sub_1000C7098()
{
  unint64_t v0;

  v0 = sub_1000B48A4();
  AttributeDynamicLookup.subscript.getter(&type metadata for VMTimeRangeAttribute, &type metadata for VMTimeRangeAttribute, v0);
  __break(1u);
}

unint64_t *sub_1000C70BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  _BYTE v17[16];
  _QWORD *v18;
  uint64_t KeyPath;
  _QWORD v20[5];

  v1 = sub_100014E10(&qword_1001EAF98);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for AttributedString.Runs(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for AttributedString(0);
  v20[3] = v9;
  v10 = sub_10001B7CC(&qword_1001EC110, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
  v20[4] = v10;
  v11 = sub_1000ADAF4(v20);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v11, v0, v9);
  dispatch thunk of AttributedStringProtocol.runs.getter(v9, v10);
  KeyPath = swift_getKeyPath(&unk_100189138);
  v12 = swift_getKeyPath(&unk_100189158);
  v13 = sub_1000B48A4();
  AttributedString.Runs.subscript.getter(v12, v13);
  swift_release(v12);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  v14 = sub_1000C8B20((uint64_t)v4);
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  v18 = v20;
  v15 = sub_1000C9534((void (*)(__int128 *__return_ptr, uint64_t))sub_1000CB540, (uint64_t)v17, (uint64_t)v14);
  swift_bridgeObjectRelease(v14);
  sub_10001B498(v20);
  return v15;
}

uint64_t sub_1000C727C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  _QWORD v19[2];

  v7 = type metadata accessor for TranscriptionCodingContainer(0);
  __chkstk_darwin(v7);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AttributedString(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *a1;
  v14 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = JSONDecoder.init()();
  v16 = sub_10001B7CC(&qword_1001EB038, type metadata accessor for TranscriptionCodingContainer, (uint64_t)&unk_1001882B0);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v7, a2, a3, v7, v16);
  result = swift_release(v15);
  if (!v3)
  {
    v18 = sub_100014E10(&qword_1001EA460);
    CodableConfiguration.wrappedValue.getter(v18);
    sub_1000B4EA8((uint64_t)v9);
    sub_1000E60C8((uint64_t)v13);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return result;
}

uint64_t sub_1000C745C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _BYTE v13[24];

  v5 = *a1;
  swift_beginAccess(*a1 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_liveTranscriptionString, v13, 33, 0);
  sub_1000E5C04();
  swift_endAccess(v13);
  if (a3 < 0.0)
    a3 = 0.0;
  v6 = v5 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_presentationModel;
  swift_beginAccess(v5 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_presentationModel, v13, 33, 0);
  *(double *)(v6 + *(int *)(type metadata accessor for TranscriptionPresentationModel(0) + 36)) = a3;
  sub_1000E8C58();
  v7 = sub_1000E629C();
  v9 = v8;
  v11 = v10;
  result = swift_endAccess(v13);
  *a2 = v7;
  a2[1] = v9;
  a2[2] = v11;
  return result;
}

uint64_t sub_1000C76A0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1[2] = v0;
  v2 = type metadata accessor for TranscriptionCodingContainer(0);
  v1[3] = v2;
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AttributedString(0);
  v1[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[6] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[7] = swift_task_alloc(v5);
  v1[8] = swift_task_alloc(v5);
  v1[9] = swift_task_alloc(v5);
  return swift_task_switch(sub_1000C7740, 0, 0);
}

uint64_t sub_1000C7740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  os_unfair_lock_s *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t KeyPath;
  unint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_liveTranscription;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_liveTranscription);
  *(_QWORD *)(v0 + 80) = v3;
  if (v3)
  {
    *(_QWORD *)(v1 + v2) = 0;
    sub_100014E10(&qword_1001E9BC0);
    AsyncStream.Continuation.finish()();
    v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_transcriptionTask);
    *(_QWORD *)(v0 + 88) = v4;
    if (v4)
    {
      v5 = async function pointer to Task.value.getter[1];
      swift_retain(v4);
      v6 = (_QWORD *)swift_task_alloc(v5);
      *(_QWORD *)(v0 + 96) = v6;
      v7 = sub_100014E10(qword_1001E9C68);
      *v6 = v0;
      v6[1] = sub_1000C7A6C;
      return Task.value.getter(v7, v4, (char *)&type metadata for () + 8, v7, &protocol self-conformance witness table for Error);
    }
    v13 = *(_QWORD *)(v0 + 72);
    v14 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_compiler);
    v15 = v14 + 4;
    v16 = v14 + 6;
    os_unfair_lock_lock(v14 + 6);
    sub_1000C7DA0(v15, v13);
    os_unfair_lock_unlock(v16);
    v17 = *(_QWORD *)(v0 + 64);
    v18 = *(_QWORD *)(v0 + 72);
    v20 = *(_QWORD *)(v0 + 48);
    v19 = *(_QWORD *)(v0 + 56);
    v21 = *(_QWORD *)(v0 + 32);
    v22 = *(_QWORD *)(v0 + 40);
    v34 = *(_QWORD *)(v0 + 24);
    v23 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    v24 = JSONEncoder.init()();
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
    v25(v17, v18, v22);
    v25(v19, v17, v22);
    KeyPath = swift_getKeyPath(&unk_100189188);
    v27 = sub_1000B4E20();
    CodableConfiguration<>.init(wrappedValue:from:)(v19, KeyPath, v22, &_s26VoiceMemosStringAttributesVN, &protocol witness table for AttributedString, &protocol witness table for AttributedString, v27);
    v28 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v28(v17, v22);
    v29 = sub_10001B7CC(&qword_1001EB040, type metadata accessor for TranscriptionCodingContainer, (uint64_t)&unk_100188248);
    v3 = dispatch thunk of JSONEncoder.encode<A>(_:)(v21, v34, v29);
    v31 = *(_QWORD *)(v0 + 72);
    v30 = *(_QWORD *)(v0 + 80);
    v32 = *(_QWORD *)(v0 + 40);
    v9 = v33;
    sub_1000B4EA8(*(_QWORD *)(v0 + 32));
    swift_release(v24);
    v28(v31, v32);
    swift_release(v30);
  }
  else
  {
    v9 = 0xF000000000000000;
  }
  v10 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 56);
  v12 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v3, v9);
}

uint64_t sub_1000C7A6C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_release(*(_QWORD *)(v2 + 88));
    v4 = sub_1000C7D3C;
  }
  else
  {
    v4 = sub_1000C7AD8;
  }
  return swift_task_switch(v4, 0, 0);
}

void sub_1000C7AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t KeyPath;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  swift_release(*(_QWORD *)(v0 + 88));
  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_compiler);
  v4 = v3 + 4;
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_1000C7DA0(v4, v2);
  os_unfair_lock_unlock(v5);
  if (!v1)
  {
    v6 = *(_QWORD *)(v0 + 64);
    v7 = *(_QWORD *)(v0 + 72);
    v9 = *(_QWORD *)(v0 + 48);
    v8 = *(_QWORD *)(v0 + 56);
    v10 = *(_QWORD *)(v0 + 32);
    v11 = *(_QWORD *)(v0 + 40);
    v28 = *(_QWORD *)(v0 + 24);
    v12 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v13 = JSONEncoder.init()();
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    v14(v6, v7, v11);
    v14(v8, v6, v11);
    KeyPath = swift_getKeyPath(&unk_100189188);
    v16 = sub_1000B4E20();
    CodableConfiguration<>.init(wrappedValue:from:)(v8, KeyPath, v11, &_s26VoiceMemosStringAttributesVN, &protocol witness table for AttributedString, &protocol witness table for AttributedString, v16);
    v17 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v17(v6, v11);
    v18 = sub_10001B7CC(&qword_1001EB040, type metadata accessor for TranscriptionCodingContainer, (uint64_t)&unk_100188248);
    v19 = dispatch thunk of JSONEncoder.encode<A>(_:)(v10, v28, v18);
    v21 = *(_QWORD *)(v0 + 72);
    v20 = *(_QWORD *)(v0 + 80);
    v22 = *(_QWORD *)(v0 + 40);
    v24 = v23;
    sub_1000B4EA8(*(_QWORD *)(v0 + 32));
    swift_release(v13);
    v17(v21, v22);
    swift_release(v20);
    v25 = *(_QWORD *)(v0 + 64);
    v26 = *(_QWORD *)(v0 + 56);
    v27 = *(_QWORD *)(v0 + 32);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v19, v24);
  }
}

uint64_t sub_1000C7D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C7DA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_liveTranscriptionString;
  swift_beginAccess(v3, v6, 0, 0);
  v4 = type metadata accessor for AttributedString(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t sub_1000C7F38(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_1001EAF84;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1000C7F98;
  return sub_1000C76A0();
}

uint64_t sub_1000C7F98(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  void *v13;
  void (**v14)(_QWORD, _QWORD, _QWORD);

  v4 = v2;
  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 32);
  v9 = *(void **)(*v3 + 16);
  v10 = *v3;
  swift_task_dealloc(v8);

  if (v4)
  {
    v11 = _convertErrorToNSError(_:)(v4);
    swift_errorRelease(v4);
    isa = 0;
    v13 = (void *)v11;
  }
  else if (a2 >> 60 == 15)
  {
    v11 = 0;
    isa = 0;
    v13 = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000CBE94(a1, a2);
    v11 = 0;
    v13 = isa;
  }
  v14 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v14)[2](v14, isa, v11);

  _Block_release(v14);
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_1000C8088(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v20[3];

  v3 = sub_100014E10(&qword_1001E9BB0);
  __chkstk_darwin(v3);
  v5 = (char *)&v20[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(os_unfair_lock_s **)&v1[OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_compiler];
  v7 = v6 + 4;
  v8 = v6 + 6;
  os_unfair_lock_lock(v6 + 6);
  sub_1000C81E8(v7, a1, v20);
  os_unfair_lock_unlock(v8);
  v10 = v20[0];
  v9 = v20[1];
  v11 = v20[2];
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v5, 1, 1, v12);
  type metadata accessor for MainActor(0);
  v13 = v1;
  swift_bridgeObjectRetain(v9);
  v14 = swift_bridgeObjectRetain(v11);
  v15 = static MainActor.shared.getter(v14);
  v16 = (_QWORD *)swift_allocObject(&unk_1001AFC18, 64, 7);
  v16[2] = v15;
  v16[3] = &protocol witness table for MainActor;
  v16[4] = v13;
  v16[5] = v10;
  v16[6] = v9;
  v16[7] = v11;
  v17 = sub_1000F7A7C((uint64_t)v5, (uint64_t)&unk_1001E9C28, (uint64_t)v16);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v9);
  return swift_release(v17);
}

uint64_t sub_1000C81E8@<X0>(_QWORD *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _BYTE v65[24];
  _QWORD *v66;

  v4 = v3;
  v56 = a1;
  v7 = sub_100014E10(&qword_1001EB018);
  __chkstk_darwin(v7);
  v9 = (double *)((char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for TranscriptionFragment(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v60 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v61 = (uint64_t)&v52 - v14;
  v15 = type metadata accessor for AttributedString(0);
  v54 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v53 = (uint64_t)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend(a2, "composedFragments");
  v18 = sub_1000CBD6C();
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v51 = v19;
    else
      v51 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    result = _CocoaArrayWrapper.endIndex.getter(v51);
    v20 = result;
  }
  else
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v19);
  }
  v23 = (uint64_t)v60;
  v57 = a3;
  v55 = v15;
  if (!v20)
  {
    v66 = _swiftEmptyArrayStorage;
LABEL_25:
    swift_bridgeObjectRelease_n(v19, 2);
    v42 = v56;
    v43 = v53;
    v44 = v66;
    sub_1000E6968((uint64_t)v66, v53);
    sub_1000E60C8(v43);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v43, v55);
    swift_bridgeObjectRelease(v44);
    swift_beginAccess(*v42 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_presentationModel, v65, 33, 0);
    v45 = sub_1000E629C();
    v47 = v46;
    v49 = v48;
    result = swift_endAccess(v65);
    v50 = v57;
    *v57 = v45;
    v50[1] = v47;
    v50[2] = v49;
    return result;
  }
  if (v20 >= 1)
  {
    v24 = 0;
    v66 = _swiftEmptyArrayStorage;
    v63 = v19 & 0xC000000000000001;
    *(_QWORD *)&v22 = 138412290;
    v58 = v22;
    v59 = v10;
    v62 = v19;
    v64 = v20;
    do
    {
      if (v63)
        v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v19);
      else
        v25 = *(id *)(v19 + 8 * v24 + 32);
      v26 = v25;
      sub_1000C874C(v9);
      if (v4)
      {
        if (qword_1001E8F80 != -1)
          swift_once(&qword_1001E8F80, sub_1000B5218);
        v27 = type metadata accessor for Logger(0);
        sub_1000AACFC(v27, (uint64_t)qword_1001F6C20);
        v28 = static os_log_type_t.error.getter();
        swift_errorRetain(v4);
        v29 = swift_errorRetain(v4);
        v30 = Logger.logObject.getter(v29);
        if (os_log_type_enabled(v30, v28))
        {
          v31 = swift_slowAlloc(12, -1);
          v32 = v11;
          v33 = (uint64_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v31 = v58;
          swift_errorRetain(v4);
          v34 = _swift_stdlib_bridgeErrorToNSError(v4);
          *(_QWORD *)(v31 + 4) = v34;
          *v33 = v34;
          swift_errorRelease(v4);
          swift_errorRelease(v4);
          _os_log_impl((void *)&_mh_execute_header, v30, v28, "Failed to decode transcription fragment, error = %@", (uint8_t *)v31, 0xCu);
          v35 = sub_100014E10((uint64_t *)&unk_1001ECD60);
          swift_arrayDestroy(v33, 1, v35);
          v36 = v33;
          v11 = v32;
          v23 = (uint64_t)v60;
          swift_slowDealloc(v36, -1, -1);
          v37 = v31;
          v10 = v59;
          swift_slowDealloc(v37, -1, -1);

          swift_errorRelease(v4);
        }
        else
        {
          swift_errorRelease(v4);
          swift_errorRelease(v4);
          swift_errorRelease(v4);

        }
        (*(void (**)(double *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
        v4 = 0;
        v19 = v62;
      }

      if ((*(unsigned int (**)(double *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
      {
        sub_100005440((uint64_t)v9, &qword_1001EB018);
      }
      else
      {
        v38 = v61;
        sub_1000CBEAC((uint64_t)v9, v61, type metadata accessor for TranscriptionFragment);
        sub_1000CBEAC(v38, v23, type metadata accessor for TranscriptionFragment);
        if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) == 0)
          v66 = (_QWORD *)sub_1000C9E1C(0, v66[2] + 1, 1, (unint64_t)v66, &qword_1001EB028, type metadata accessor for TranscriptionFragment);
        v40 = v66[2];
        v39 = v66[3];
        if (v40 >= v39 >> 1)
          v66 = (_QWORD *)sub_1000C9E1C(v39 > 1, v40 + 1, 1, (unint64_t)v66, &qword_1001EB028, type metadata accessor for TranscriptionFragment);
        v41 = v66;
        v66[2] = v40 + 1;
        sub_1000CBEAC(v23, (uint64_t)v41+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v40, type metadata accessor for TranscriptionFragment);
      }
      ++v24;
    }
    while (v64 != v24);
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C874C@<X0>(double *a1@<X8>)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  uint64_t result;
  id v19;
  NSURL *v20;
  void *v21;
  void *v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  double *v46;

  v3 = v1;
  v46 = a1;
  v4 = type metadata accessor for TranscriptionCodingContainer(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttributedString(0);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  __chkstk_darwin(v7);
  v43 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100014E10(&qword_1001EB030);
  __chkstk_darwin(v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(v3, "AVOutputURL");
  if (!v16)
    goto LABEL_13;
  v17 = v16;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v12, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9);
  if ((_DWORD)result == 1)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v19 = objc_allocWithZone((Class)AVURLAsset);
  URL._bridgeToObjectiveC()(v20);
  v22 = v21;
  v23 = objc_msgSend(v19, "initWithURL:options:", v21, 0);

  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  v15 = (char *)objc_msgSend(v23, "rc_transcriptionData");

  if (!v15)
  {
    v37 = type metadata accessor for TranscriptionFragment(0);
    return (*(uint64_t (**)(double *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v46, 1, 1, v37);
  }
  v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v25 = v24;

  sub_1000CBDA8(v9, v25);
  objc_msgSend(v3, "timeRangeInContentToUse");
  if (v26 > v27)
  {
    __break(1u);
    goto LABEL_12;
  }
  v28 = v26;
  v29 = v27;
  objc_msgSend(v3, "timeRangeInComposition");
  if (v30 > v31)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v15, 1, 1, v9);
    goto LABEL_14;
  }
  v32 = v30;
  v33 = v31;
  v34 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  v35 = JSONDecoder.init()();
  v36 = sub_10001B7CC(&qword_1001EB038, type metadata accessor for TranscriptionCodingContainer, (uint64_t)&unk_1001882B0);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v4, v9, v25, v4, v36);
  swift_release(v35);
  if (v2)
  {
    sub_1000C10F8(v9, v25);
  }
  else
  {
    v38 = sub_100014E10(&qword_1001EA460);
    v39 = v43;
    CodableConfiguration.wrappedValue.getter(v38);
    sub_1000B4EA8((uint64_t)v6);
    v40 = v46;
    *v46 = v28;
    v40[1] = v29;
    v40[2] = v32;
    v40[3] = v33;
    v41 = type metadata accessor for TranscriptionFragment(0);
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))((char *)v40 + *(int *)(v41 + 24), v39, v45);
    sub_1000C10F8(v9, v25);
    (*(void (**)(double *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 0, 1, v41);
  }
  return sub_1000C10F8(v9, v25);
}

_QWORD *sub_1000C8B20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (**v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (**v41)(char *, uint64_t, uint64_t);
  uint64_t v42;

  v42 = a1;
  v1 = sub_100014E10(&qword_1001EAFA8);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for TimeRangeRun(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v37 = (uint64_t)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v39 = (char *)&v35 - v8;
  v40 = sub_100014E10(&qword_1001EAFB0);
  v38 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100014E10(&qword_1001EAFB8);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100014E10(&qword_1001EAF98);
  v41 = *(void (***)(char *, uint64_t, uint64_t))(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100014E10(&qword_1001EAFC0);
  v35 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (void (**)(char *, uint64_t, uint64_t))((char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41[2](v16, v42, v14);
  v20 = sub_10000EDB0(&qword_1001EAFC8, &qword_1001EAF98, (uint64_t)&protocol conformance descriptor for AttributedString.Runs.AttributesSlice1<A>);
  dispatch thunk of Sequence.makeIterator()(v14, v20);
  v21 = sub_10000EDB0(&qword_1001EAFD0, &qword_1001EAFC0, (uint64_t)&protocol conformance descriptor for AttributedString.Runs.AttributesSlice1<A>.Iterator);
  v41 = v19;
  v22 = v21;
  v42 = v17;
  dispatch thunk of IteratorProtocol.next()(v17, v21);
  v23 = v40;
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
  if (v24(v13, 1, v40) == 1)
  {
    v25 = &_swiftEmptyArrayStorage;
  }
  else
  {
    v38 = v22;
    v25 = &_swiftEmptyArrayStorage;
    v27 = v37;
    v36 = v13;
    do
    {
      sub_1000CB560((uint64_t)v13, (uint64_t)v10);
      if ((v10[16] & 1) != 0)
      {
        v28 = 1;
      }
      else
      {
        v30 = *(_QWORD *)v10;
        v29 = *((_QWORD *)v10 + 1);
        sub_1000BD3E0((uint64_t)&v10[*(int *)(v23 + 48)], (uint64_t)v3 + *(int *)(v4 + 20));
        v28 = 0;
        *v3 = v30;
        v3[1] = v29;
      }
      v31 = (uint64_t)v39;
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, v28, 1, v4);
      sub_100005440((uint64_t)v10, &qword_1001EAFB0);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
      {
        sub_100005440((uint64_t)v3, &qword_1001EAFA8);
      }
      else
      {
        sub_1000CBEAC((uint64_t)v3, v31, type metadata accessor for TimeRangeRun);
        sub_1000CBEAC(v31, v27, type metadata accessor for TimeRangeRun);
        if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
          v25 = (_QWORD *)sub_1000C9E1C(0, v25[2] + 1, 1, (unint64_t)v25, &qword_1001EAFD8, type metadata accessor for TimeRangeRun);
        v33 = v25[2];
        v32 = v25[3];
        if (v33 >= v32 >> 1)
          v25 = (_QWORD *)sub_1000C9E1C(v32 > 1, v33 + 1, 1, (unint64_t)v25, &qword_1001EAFD8, type metadata accessor for TimeRangeRun);
        v25[2] = v33 + 1;
        v34 = (uint64_t)v25
            + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
            + *(_QWORD *)(v5 + 72) * v33;
        v27 = v37;
        sub_1000CBEAC(v37, v34, type metadata accessor for TimeRangeRun);
        v13 = v36;
      }
      dispatch thunk of IteratorProtocol.next()(v42, v38);
      v23 = v40;
    }
    while (v24(v13, 1, v40) != 1);
  }
  (*(void (**)(void (**)(char *, uint64_t, uint64_t), uint64_t))(v35 + 8))(v41, v42);
  return v25;
}

uint64_t sub_1000C8FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  v8 = type metadata accessor for MainActor(0);
  v7[7] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000C9050, v9, v10);
}

uint64_t sub_1000C9050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 56));
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_delegate);
  if (Strong)
  {
    sub_1000F8AF0(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
    swift_unknownObjectRelease(Strong);
  }
  **(_BYTE **)(v0 + 16) = Strong == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C90C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  v8 = type metadata accessor for MainActor(0);
  v7[7] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000C9134, v9, v10);
}

uint64_t sub_1000C9134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 56));
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_delegate);
  if (Strong)
  {
    sub_1000F8D18(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
    swift_unknownObjectRelease(Strong);
  }
  **(_BYTE **)(v0 + 16) = Strong == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1000C91D0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCLiveTranscription();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RCLiveTranscription()
{
  return objc_opt_self(_TtC10VoiceMemos19RCLiveTranscription);
}

uint64_t sub_1000C9268@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _BYTE v13[24];

  v5 = *a1;
  v6 = type metadata accessor for TranscriptionUtterance(0);
  sub_1000E5EB8((uint64_t)&a2[*(int *)(v6 + 20)], *a2);
  swift_beginAccess(v5 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_presentationModel, v13, 33, 0);
  v7 = sub_1000E629C();
  v9 = v8;
  v11 = v10;
  result = swift_endAccess(v13);
  *a3 = v7;
  a3[1] = v9;
  a3[2] = v11;
  return result;
}

uint64_t sub_1000C9304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = sub_100014E10(&qword_1001E9BB0);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C9360, 0, 0);
}

uint64_t sub_1000C9360()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16[4];

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_compiler);
  v2 = v1 + 4;
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1000C94B4(v2, v16);
  v5 = *(void **)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  os_unfair_lock_unlock(v3);
  v7 = v16[0];
  v6 = v16[1];
  v8 = v16[2];
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  type metadata accessor for MainActor(0);
  v10 = v5;
  swift_bridgeObjectRetain(v6);
  v11 = swift_bridgeObjectRetain(v8);
  v12 = static MainActor.shared.getter(v11);
  v13 = (_QWORD *)swift_allocObject(&unk_1001AFCE0, 64, 7);
  v13[2] = v12;
  v13[3] = &protocol witness table for MainActor;
  v13[4] = v10;
  v13[5] = v7;
  v13[6] = v6;
  v13[7] = v8;
  v14 = sub_1000F7A7C(v4, (uint64_t)&unk_1001EB088, (uint64_t)v13);
  swift_release(v14);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v8);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C94B4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  swift_beginAccess(*a1 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_presentationModel, v9, 33, 0);
  v3 = sub_1000E629C();
  v5 = v4;
  v7 = v6;
  result = swift_endAccess(v9);
  *a2 = v3;
  a2[1] = v5;
  a2[2] = v7;
  return result;
}

unint64_t *sub_1000C9534(void (*a1)(__int128 *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t *v22;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v5)
  {
    v22 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_1000CA0BC(0, v5, 0);
    v6 = (unint64_t *)&_swiftEmptyArrayStorage;
    v9 = *(_QWORD *)(type metadata accessor for TimeRangeRun(0) - 8);
    v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    while (1)
    {
      a1(&v20, v10);
      if (v4)
        break;
      v4 = 0;
      v12 = v20;
      v13 = v21;
      v22 = v6;
      v15 = v6[2];
      v14 = v6[3];
      if (v15 >= v14 >> 1)
      {
        v18 = v21;
        v19 = v20;
        sub_1000CA0BC(v14 > 1, v15 + 1, 1);
        v13 = v18;
        v12 = v19;
        v6 = v22;
      }
      v6[2] = v15 + 1;
      v16 = &v6[4 * v15];
      *((_OWORD *)v16 + 2) = v12;
      *((_OWORD *)v16 + 3) = v13;
      v10 += v11;
      if (!--v5)
        return v6;
    }
    swift_release(v6);
  }
  return v6;
}

_QWORD *sub_1000C965C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000C9684(a1, a2, a3, a4, &qword_1001EB000);
}

_QWORD *sub_1000C9670(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1000C9684(a1, a2, a3, a4, &qword_1001EB008);
}

_QWORD *sub_1000C9684(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_100014E10(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 24 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v12[2] = v9;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 24);
      v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[3 * v9 + 4])
          memmove(v14, a4 + 4, 24 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000CA8A8(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000C97B4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100014E10(&qword_1001EB070);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000CAB74(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000C98C0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100014E10(&qword_1001EA298);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000CAA80(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000C99E0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100014E10(&qword_1001EA208);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1000CAC64(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C9B00(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100014E10(&qword_1001EAFF0);
  v11 = *(_QWORD *)(sub_100014E10(&qword_1001EA808) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_100014E10(&qword_1001EA808);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000CAD58(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

char *sub_1000C9D10(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100014E10(&qword_1001EAFA0);
      v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[32 * v8 + 32])
          memmove(v14, a4 + 32, 32 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000CA998(0, v8, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C9E1C(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100014E10(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000CBC50(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_1000CA028(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000C9E1C(a1, a2, a3, a4, &qword_1001EAFF8, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
}

uint64_t sub_1000CA03C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000CA104(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000CA058(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000CA284(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000CA074(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000CA3EC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000CA090(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000CA6C8(a1, a2, a3, (_QWORD *)*v3, &qword_1001EAFE8, (uint64_t (*)(_QWORD))&type metadata accessor for AttributedString.Index);
  *v3 = result;
  return result;
}

uint64_t sub_1000CA0BC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000CA56C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000CA0D8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000CA6C8(a1, a2, a3, (_QWORD *)*v3, &qword_1001EAFD8, type metadata accessor for TimeRangeRun);
  *v3 = result;
  return result;
}

uint64_t sub_1000CA104(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100014E10(&qword_1001EA298);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000CA284(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100014E10(&qword_1001EB070);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000CA3EC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100014E10(&qword_1001EA208);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000CA56C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100014E10(&qword_1001EAFA0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    memcpy(v14, v15, 32 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000CA6C8(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100014E10(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000CA8A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1000CA998(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000CAA80(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000CAB74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000CAC64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000CAD58(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(sub_100014E10(&qword_1001EA808) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000CAE74(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  void (*v70)(char *, char *, uint64_t);
  _QWORD *v71;

  v3 = type metadata accessor for AttributedString.Index(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v61 = (char *)&v56 - v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v56 - v10;
  v12 = type metadata accessor for AttributedString.CharacterView(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100014E10(&qword_1001EAF88);
  __chkstk_darwin(v15);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for AttributedString(0);
  v62 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v67 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000F5A14(a1);
  v20 = 0;
  v21 = v19[2];
  v69 = v19;
  v70 = (void (*)(char *, char *, uint64_t))v21;
  if (v21 >= 3)
  {
    v22 = 0;
    v23 = 2;
    while (1)
    {
      v20 = v22 + 1;
      if (__OFADD__(v22, 1))
        break;
      v24 = __OFADD__(v23, 3);
      v23 += 3;
      if (v24)
        v23 = 0x7FFFFFFFFFFFFFFFLL;
      ++v22;
      if (v23 >= (uint64_t)v70)
        goto LABEL_7;
    }
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_7:
  v66 = v17;
  v58 = v11;
  v71 = _swiftEmptyArrayStorage;
  sub_1000CA090(0, v20 & ~(v20 >> 63), 0);
  if (v20 < 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v1 = v71;
  v59 = v14;
  v60 = v12;
  if (v20)
  {
    v57 = a1;
    v25 = sub_100014E10(&qword_1001EA808);
    v64 = *(char **)(v25 - 8);
    v65 = v25;
    v63 = (char *)v69 + ((v64[80] + 32) & ~(unint64_t)v64[80]);
    v26 = 2;
    v27 = v61;
    do
    {
      if (v26 >= (uint64_t)v70)
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      v28 = v26 + 3;
      if (__OFADD__(v26, 3))
        v29 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v29 = v26 + 3;
      if (v26 < 0)
        goto LABEL_44;
      if ((unint64_t)v26 >= v69[2])
        goto LABEL_45;
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, &v63[*((_QWORD *)v64 + 9) * v26 + *(int *)(v65 + 36)], v3);
      v71 = v1;
      v31 = v1[2];
      v30 = v1[3];
      if (v31 >= v30 >> 1)
      {
        sub_1000CA090(v30 > 1, v31 + 1, 1);
        v27 = v61;
        v1 = v71;
      }
      v1[2] = v31 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v1+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v31, v7, v3);
      v26 = v29;
      --v20;
    }
    while (v20);
    if (v29 < (uint64_t)v70)
      goto LABEL_30;
LABEL_20:
    swift_bridgeObjectRelease(v69);
    a1 = v57;
  }
  else
  {
    v27 = v61;
    if ((unint64_t)v70 > 2)
    {
      v57 = a1;
      v28 = 2;
LABEL_30:
      v43 = sub_100014E10(&qword_1001EA808);
      v65 = *(_QWORD *)(v43 - 8);
      v64 = (char *)v69 + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
      while (1)
      {
        v44 = v28 + 3;
        v45 = __OFADD__(v28, 3);
        if ((v28 & 0x8000000000000000) != 0)
          break;
        if (v28 >= v69[2])
          goto LABEL_48;
        (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v27, &v64[*(_QWORD *)(v65 + 72) * v28 + *(int *)(v43 + 36)], v3);
        v71 = v1;
        v47 = v1[2];
        v46 = v1[3];
        if (v47 >= v46 >> 1)
        {
          sub_1000CA090(v46 > 1, v47 + 1, 1);
          v27 = v61;
          v1 = v71;
        }
        v1[2] = v47 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v1+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v47, v27, v3);
        v48 = !v45;
        v28 += 3;
        if (v44 >= (uint64_t)v70)
          v48 = 0;
        if (!v48)
          goto LABEL_20;
      }
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    swift_bridgeObjectRelease(v69);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v67, a1, v68);
  v32 = v1[2];
  if (v32)
  {
    v33 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v34 = *(_QWORD *)(v4 + 72);
    v70 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    swift_retain(v1);
    v35 = (char *)v1 + v33 + v34 * (v32 - 1);
    v36 = -v34;
    v37 = v58;
    v38 = v68;
    while (1)
    {
      v39 = v66;
      v70(v66, v35, v3);
      v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v40(v39, 0, 1, v3);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v39, 1, v3) == 1)
        goto LABEL_52;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v37, v39, v3);
      if (qword_1001E9078 != -1)
        swift_once(&qword_1001E9078, sub_1000F4BC8);
      --v32;
      v41 = sub_1000AACFC(v38, (uint64_t)qword_1001F6E58);
      v42 = sub_10001B7CC(&qword_1001EC110, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
      AttributedString.insert<A>(_:at:)(v41, v37, v38, v42);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v37, v3);
      v35 += v36;
      if (!v32)
        goto LABEL_51;
    }
  }
LABEL_50:
  v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  swift_retain(v1);
LABEL_51:
  v40(v66, 1, 1, v3);
LABEL_52:
  swift_release_n(v1, 2);
  v49 = sub_10001B7CC(&qword_1001EC110, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
  v50 = v59;
  v51 = v67;
  v52 = v68;
  dispatch thunk of AttributedStringProtocol.characters.getter(v68, v49);
  v53 = sub_10001B7CC(&qword_1001EAF90, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView, (uint64_t)&protocol conformance descriptor for AttributedString.CharacterView);
  v54 = String.init<A>(_:)(v50, v60, v53);
  sub_1000C70BC();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v51, v52);
  return v54;
}

void sub_1000CB4A8()
{
  unint64_t v0;

  v0 = sub_1000B48A4();
  AttributeDynamicLookup.subscript.getter(&type metadata for VMTimeRangeAttribute, &type metadata for VMTimeRangeAttribute, v0);
  __break(1u);
}

uint64_t sub_1000CB4CC()
{
  return 8;
}

uint64_t sub_1000CB4D8(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_1000CB4E0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1000CB4F0()
{
  uint64_t v0;

  v0 = sub_100014E10(&qword_1001EAFE0);
  return dispatch thunk of Hashable.hashValue.getter(v0, &protocol witness table for AnyKeyPath);
}

_QWORD *sub_1000CB534(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000CB540@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1000E92DC(a1, *(_QWORD **)(v2 + 16), a2);
}

uint64_t sub_1000CB560(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EAFB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_1000CB5A8(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v3;
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  objc_class *v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  objc_super v31;

  v3 = v2;
  v30 = a2;
  v28 = a1;
  v4 = (int *)type metadata accessor for TranscriptionPresentationModel(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttributedString(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_liveTranscription] = 0;
  v11 = &v3[OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_delegate];
  *((_QWORD *)v11 + 1) = 0;
  swift_unknownObjectWeakInit(v11, 0);
  v29 = OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_compiler;
  v12 = type metadata accessor for TranscriptionCompiler(0);
  v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v14 = v3;
  AttributedString.init()(v14);
  v15 = v13 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_presentationModel;
  AttributedString.init(stringLiteral:)(0, 0xE000000000000000);
  AttributedString.init(stringLiteral:)(0, 0xE000000000000000);
  AttributedString.init(stringLiteral:)(0, 0xE000000000000000);
  v16 = &v6[v4[6]];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0xE000000000000000;
  v17 = v30;
  *(_QWORD *)&v6[v4[7]] = _swiftEmptyArrayStorage;
  v18 = &v6[v4[8]];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  *(_QWORD *)&v6[v4[9]] = 0;
  sub_1000E8474((uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_1000CBEAC((uint64_t)v6, v15, type metadata accessor for TranscriptionPresentationModel);
  v19 = sub_100014E10(&qword_1001EB068);
  v20 = swift_allocObject(v19, 28, 7);
  *(_DWORD *)(v20 + 24) = 0;
  v21 = (os_unfair_lock_s *)(v20 + 24);
  *(_QWORD *)(v20 + 16) = v13;
  v22 = (_QWORD *)(v20 + 16);
  *(_QWORD *)&v3[v29] = v20;
  if (v17 >> 60 == 15)
  {

    v23 = v14;
  }
  else
  {
    v24 = v20;
    v25 = v28;
    sub_1000CBEF0(v28, v17);
    swift_retain(v24);
    os_unfair_lock_lock(v21);
    sub_1000C727C(v22, v25, v17);
    os_unfair_lock_unlock(v21);
    v23 = v14;

    sub_1000CBE94(v25, v17);
    swift_release(v24);
  }
  v26 = (objc_class *)type metadata accessor for RCLiveTranscription();
  v31.receiver = v23;
  v31.super_class = v26;
  return objc_msgSendSuper2(&v31, "init");
}

uint64_t sub_1000CBA70(void *a1, double a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t *v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v30[3];

  v3 = v2;
  v6 = sub_100014E10(&qword_1001E9BB0);
  __chkstk_darwin(v6);
  v8 = (char *)&v30[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LiveTranscription(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = a1;
  v11 = sub_1000A8E5C((uint64_t)a1);
  v12 = OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_liveTranscription;
  v13 = *(_QWORD *)&v3[OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_liveTranscription];
  *(_QWORD *)&v3[OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_liveTranscription] = v11;
  swift_release(v13);
  v14 = *(_QWORD *)&v3[v12];
  if (v14)
  {
    v15 = v14 + OBJC_IVAR____TtC10VoiceMemos17LiveTranscription_delegate;
    *(_QWORD *)(v15 + 8) = &off_1001AFBD0;
    swift_unknownObjectWeakAssign(v15, v3);
  }
  v16 = *(os_unfair_lock_s **)&v3[OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_compiler];
  v17 = (uint64_t *)&v16[4];
  v18 = v16 + 6;
  os_unfair_lock_lock(v16 + 6);
  sub_1000C745C(v17, v30, a2);
  os_unfair_lock_unlock(v18);
  v20 = v30[0];
  v19 = v30[1];
  v21 = v30[2];
  v22 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v8, 1, 1, v22);
  type metadata accessor for MainActor(0);
  v23 = v3;
  swift_bridgeObjectRetain(v19);
  v24 = swift_bridgeObjectRetain(v21);
  v25 = static MainActor.shared.getter(v24);
  v26 = (_QWORD *)swift_allocObject(&unk_1001AFCB8, 64, 7);
  v26[2] = v25;
  v26[3] = &protocol witness table for MainActor;
  v26[4] = v23;
  v26[5] = v20;
  v26[6] = v19;
  v26[7] = v21;
  v27 = sub_1000F7A7C((uint64_t)v8, (uint64_t)&unk_1001EB060, (uint64_t)v26);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v19);
  return swift_release(v27);
}

uint64_t sub_1000CBC50(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000CBD6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001EB020;
  if (!qword_1001EB020)
  {
    v1 = objc_opt_self(RCCompositionFragment);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001EB020);
  }
  return result;
}

uint64_t sub_1000CBDA8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_1000CBDEC(_QWORD *a1@<X8>)
{
  *a1 = &_s26VoiceMemosStringAttributesVN;
}

uint64_t sub_1000CBDFC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000CBE28()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1001EB04C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100003A7C;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1001EB048 + dword_1001EB048))(v2, v3);
}

uint64_t sub_1000CBE94(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1000C10F8(result, a2);
  return result;
}

uint64_t sub_1000CBEAC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000CBEF0(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1000CBDA8(result, a2);
  return result;
}

uint64_t sub_1000CBF08()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000CBF44(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_1001EB084);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10001B80C;
  return sub_1000C90C0(a1, v4, v5, v6, v7, v9, v8);
}

ValueMetadata *type metadata accessor for StopRecordingError()
{
  return &type metadata for StopRecordingError;
}

ValueMetadata *type metadata accessor for SearchRecordingsError()
{
  return &type metadata for SearchRecordingsError;
}

ValueMetadata *type metadata accessor for CreateRecordingError()
{
  return &type metadata for CreateRecordingError;
}

uint64_t _s10VoiceMemos18StopRecordingErrorOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000CC050 + 4 * byte_1001891C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000CC070 + 4 * byte_1001891C5[v4]))();
}

_BYTE *sub_1000CC050(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000CC070(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000CC078(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000CC080(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000CC088(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000CC090(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DeleteRecordingError()
{
  return &type metadata for DeleteRecordingError;
}

uint64_t storeEnumTagSinglePayload for PlayRecordingError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000CC0F8 + 4 * byte_1001891CF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000CC12C + 4 * byte_1001891CA[v4]))();
}

uint64_t sub_1000CC12C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CC134(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000CC13CLL);
  return result;
}

uint64_t sub_1000CC148(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000CC150);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000CC154(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CC15C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlayRecordingError()
{
  return &type metadata for PlayRecordingError;
}

ValueMetadata *type metadata accessor for SelectRecordingError()
{
  return &type metadata for SelectRecordingError;
}

ValueMetadata *type metadata accessor for ChangePlaybackSettingsError()
{
  return &type metadata for ChangePlaybackSettingsError;
}

ValueMetadata *type metadata accessor for DeleteFolderError()
{
  return &type metadata for DeleteFolderError;
}

_QWORD *initializeBufferWithCopyOfBuffer for OpenFolderError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for OpenFolderError(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *_s10VoiceMemos20SelectRecordingErrorOwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for OpenFolderError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for OpenFolderError()
{
  return &type metadata for OpenFolderError;
}

uint64_t _s10VoiceMemos20CreateRecordingErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000CC2B4 + 4 * byte_1001891D9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000CC2E8 + 4 * byte_1001891D4[v4]))();
}

uint64_t sub_1000CC2E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CC2F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000CC2F8);
  return result;
}

uint64_t sub_1000CC304(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000CC30CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000CC310(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CC318(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RCAppIntentsGenericError()
{
  return &type metadata for RCAppIntentsGenericError;
}

uint64_t sub_1000CC334(uint64_t a1, uint64_t a2)
{
  return sub_1000CC538(a1, a2, 0xD000000000000021, 0x80000001001843C0, 0xD000000000000022, 0x8000000100184390);
}

unint64_t sub_1000CC370()
{
  unint64_t result;

  result = qword_1001EB090;
  if (!qword_1001EB090)
  {
    result = swift_getWitnessTable(&unk_100189374, &type metadata for RCAppIntentsGenericError);
    atomic_store(result, (unint64_t *)&qword_1001EB090);
  }
  return result;
}

uint64_t sub_1000CC3B4(uint64_t a1, uint64_t a2)
{
  return sub_1000CC538(a1, a2, 0xD000000000000031, 0x8000000100184130, 0xD000000000000030, 0x80000001001840F0);
}

uint64_t sub_1000CC3F4()
{
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000032, 0x8000000100184070);
}

uint64_t sub_1000CC410()
{
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000031, 0x8000000100184170);
}

uint64_t sub_1000CC42C(uint64_t a1, uint64_t a2)
{
  return sub_1000CC578(a1, a2, 50, 0xD000000000000032, (void *)0x8000000100184240);
}

uint64_t sub_1000CC44C(uint64_t a1, uint64_t a2)
{
  return sub_1000CC538(a1, a2, 0xD000000000000030, 0x80000001001842C0, 0xD000000000000039, 0x8000000100184280);
}

uint64_t sub_1000CC488(char a1)
{
  if (!a1)
    return LocalizedStringResource.init(stringLiteral:)(0xD000000000000028, 0x8000000100184210);
  if (a1 == 1)
    return LocalizedStringResource.init(stringLiteral:)(0xD00000000000002FLL, 0x80000001001841E0);
  return LocalizedStringResource.init(stringLiteral:)(0xD00000000000002DLL, 0x80000001001841B0);
}

uint64_t sub_1000CC4F8()
{
  char *v0;

  return sub_1000CC488(*v0);
}

uint64_t sub_1000CC500(uint64_t a1, uint64_t a2)
{
  return sub_1000CC538(a1, a2, 0xD000000000000021, 0x8000000100184330, 0xD00000000000002ELL, 0x8000000100184300);
}

uint64_t sub_1000CC538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v6;

  if ((*v6 & 1) != 0)
    return LocalizedStringResource.init(stringLiteral:)(a5, a6);
  else
    return LocalizedStringResource.init(stringLiteral:)(a3, a4);
}

uint64_t sub_1000CC558(uint64_t a1, uint64_t a2)
{
  return sub_1000CC578(a1, a2, 45, 0xD00000000000002DLL, (void *)0x8000000100184360);
}

uint64_t sub_1000CC578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t *v5;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v17;

  type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin();
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v5;
  v12 = (void *)v5[1];
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(a3, 1);
  v13._countAndFlagsBits = a4;
  v13._object = a5;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v13);
  v14._countAndFlagsBits = v11;
  v14._object = v12;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v14);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v15);
  return LocalizedStringResource.init(stringInterpolation:)(v10);
}

unint64_t sub_1000CC63C()
{
  unint64_t result;

  result = qword_1001EB098;
  if (!qword_1001EB098)
  {
    result = swift_getWitnessTable(&unk_10018942C, &type metadata for DeleteFolderError);
    atomic_store(result, (unint64_t *)&qword_1001EB098);
  }
  return result;
}

unint64_t sub_1000CC684()
{
  unint64_t result;

  result = qword_1001EB0A0;
  if (!qword_1001EB0A0)
  {
    result = swift_getWitnessTable(&unk_1001894BC, &type metadata for ChangePlaybackSettingsError);
    atomic_store(result, (unint64_t *)&qword_1001EB0A0);
  }
  return result;
}

unint64_t sub_1000CC6CC()
{
  unint64_t result;

  result = qword_1001EB0A8;
  if (!qword_1001EB0A8)
  {
    result = swift_getWitnessTable(&unk_100189574, &type metadata for PlayRecordingError);
    atomic_store(result, (unint64_t *)&qword_1001EB0A8);
  }
  return result;
}

unint64_t sub_1000CC714()
{
  unint64_t result;

  result = qword_1001EB0B0;
  if (!qword_1001EB0B0)
  {
    result = swift_getWitnessTable(&unk_100189604, &type metadata for DeleteRecordingError);
    atomic_store(result, (unint64_t *)&qword_1001EB0B0);
  }
  return result;
}

unint64_t sub_1000CC75C()
{
  unint64_t result;

  result = qword_1001EB0B8;
  if (!qword_1001EB0B8)
  {
    result = swift_getWitnessTable(&unk_100189694, &type metadata for CreateRecordingError);
    atomic_store(result, (unint64_t *)&qword_1001EB0B8);
  }
  return result;
}

uint64_t sub_1000CC7A0()
{
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000032, 0x80000001001840B0);
}

unint64_t sub_1000CC7C0()
{
  unint64_t result;

  result = qword_1001EB0C0;
  if (!qword_1001EB0C0)
  {
    result = swift_getWitnessTable(&unk_100189724, &type metadata for SearchRecordingsError);
    atomic_store(result, (unint64_t *)&qword_1001EB0C0);
  }
  return result;
}

unint64_t sub_1000CC808()
{
  unint64_t result;

  result = qword_1001EB0C8;
  if (!qword_1001EB0C8)
  {
    result = swift_getWitnessTable(&unk_1001897B4, &type metadata for StopRecordingError);
    atomic_store(result, &qword_1001EB0C8);
  }
  return result;
}

void sub_1000CC864(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSString v11;
  id v12;
  id v13;
  void *v14;
  void (*v15)(char *, char *, uint64_t);
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _QWORD v22[2];

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100014E10(&qword_1001EB030);
  __chkstk_darwin(v8);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(a1, "recordingWithUniqueID:", v11);

  if (!v12)
  {
    v16 = sub_1000BA628();
    v17 = swift_allocError(&type metadata for TranscriptionError, v16, 0, 0);
    *v18 = 0;
    swift_willThrow(v17);
    return;
  }
  v13 = objc_msgSend(v12, "url");
  if (!v13)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
    goto LABEL_8;
  }
  v14 = v13;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v15 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v15(v10, v7, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
LABEL_8:
    sub_1000CE07C((uint64_t)v10);
    goto LABEL_9;
  }
  v15(a2, v10, v4);
  if ((objc_msgSend(v12, "localAssetIsCurrent") & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(a2, v4);
LABEL_9:
    v19 = sub_1000BA628();
    v20 = swift_allocError(&type metadata for TranscriptionError, v19, 0, 0);
    *v21 = 1;
    swift_willThrow(v20);
  }

}

id sub_1000CCA90(uint64_t a1)
{
  id v2;
  id v4;
  uint64_t v5;
  id v6;
  id v7;

  v2 = objc_msgSend((id)objc_opt_self(RCSSavedRecordingService), "sharedService");
  v7 = 0;
  LODWORD(a1) = objc_msgSend(v2, "endAccessSessionWithToken:error:", a1, &v7);

  if ((_DWORD)a1)
    return v7;
  v6 = v7;
  v4 = v7;
  v5 = _convertNSErrorToError(_:)(v6);

  swift_willThrow();
  return (id)swift_errorRelease(v5);
}

uint64_t sub_1000CCB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v4[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[11] = v8;
  v4[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AttributedString(0);
  v4[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[14] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v4[15] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[16] = swift_task_alloc(v12);
  v4[17] = swift_task_alloc(v12);
  v13 = type metadata accessor for TranscriptionCodingContainer(0);
  v4[18] = v13;
  v4[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000CCCA4, 0, 0);
}

uint64_t sub_1000CCCA4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t KeyPath;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = v0[18];
  v1 = v0[19];
  v4 = v0[16];
  v3 = v0[17];
  v5 = v0[13];
  v6 = v0[14];
  v7 = v0[3];
  v8 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = JSONEncoder.init()();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v0[20] = v10;
  v10(v3, v7, v5);
  v10(v4, v3, v5);
  KeyPath = swift_getKeyPath(&unk_100189A60);
  v12 = sub_1000B4E20();
  CodableConfiguration<>.init(wrappedValue:from:)(v4, KeyPath, v5, &_s26VoiceMemosStringAttributesVN, &protocol witness table for AttributedString, &protocol witness table for AttributedString, v12);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
  v13 = sub_10001B7CC(&qword_1001EB040, type metadata accessor for TranscriptionCodingContainer, (uint64_t)&unk_100188248);
  v0[21] = dispatch thunk of JSONEncoder.encode<A>(_:)(v1, v2, v13);
  v0[22] = v14;
  sub_1000B4EA8(v0[19]);
  swift_release(v9);
  v15 = (_QWORD *)swift_task_alloc(dword_1001EB0DC);
  v0[23] = v15;
  *v15 = v0;
  v15[1] = sub_1000CCEAC;
  return sub_1000CD4D0(v0[12], v0[4], v0[5], v0[6]);
}

uint64_t sub_1000CCEAC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000CD428;
  }
  else
  {
    *(_QWORD *)(v2 + 200) = objc_opt_self(AVAsset);
    v4 = sub_1000CCF6C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000CCF6C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Class isa;
  unsigned int v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  _QWORD *v22;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(void **)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 80);
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 16) = 0;
  v8 = objc_msgSend(v1, "rc_updateFile:withTranscriptionData:error:", v6, isa, v0 + 16);

  v9 = *(id *)(v0 + 16);
  if (v8)
  {
    v10 = *(_QWORD *)(v0 + 136);
    v12 = *(_QWORD *)(v0 + 112);
    v11 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 64);
    v15 = *(void **)(v0 + 48);
    v32 = *(_QWORD *)(v0 + 56);
    v33 = *(_QWORD *)(v0 + 72);
    v16 = *(_QWORD *)(v0 + 32);
    v17 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 160))(v10, *(_QWORD *)(v0 + 24), v13);
    v18 = *(unsigned __int8 *)(v12 + 80);
    v19 = (v18 + 40) & ~v18;
    v20 = (char *)swift_allocObject(&unk_1001B0328, v19 + v11, v18 | 7);
    *(_QWORD *)(v0 + 208) = v20;
    *((_QWORD *)v20 + 2) = v15;
    *((_QWORD *)v20 + 3) = v16;
    *((_QWORD *)v20 + 4) = v17;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(&v20[v19], v10, v13);
    v21 = v15;
    swift_bridgeObjectRetain(v17);
    *(_QWORD *)(v0 + 216) = objc_msgSend(v21, "context");
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104))(v33, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v32);
    v22 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)
                                     + 1));
    *(_QWORD *)(v0 + 224) = v22;
    *v22 = v0;
    v22[1] = sub_1000CD1E8;
    return NSManagedObjectContext.perform<A>(schedule:_:)();
  }
  else
  {
    v24 = v9;
    v26 = *(_QWORD *)(v0 + 168);
    v25 = *(_QWORD *)(v0 + 176);
    _convertNSErrorToError(_:)(v9);

    swift_willThrow(v27);
    sub_1000C10F8(v26, v25);
    v29 = *(_QWORD *)(v0 + 128);
    v28 = *(_QWORD *)(v0 + 136);
    v30 = *(_QWORD *)(v0 + 96);
    v31 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000CD1E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc(v3);
  v4 = (void *)v2[27];
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[8] + 8))(v2[9], v2[7]);

    v5 = sub_1000CD378;
  }
  else
  {
    v6 = v2[26];
    (*(void (**)(_QWORD, _QWORD))(v2[8] + 8))(v2[9], v2[7]);

    swift_release(v6);
    v5 = sub_1000CD2D0;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000CD2D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  sub_1000C10F8(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CD378()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 208);
  sub_1000C10F8(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CD428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000C10F8(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CD4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000CD534, 0, 0);
}

uint64_t sub_1000CD534()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = v0[7];
  v1 = v0[8];
  v4 = (void *)v0[5];
  v3 = v0[6];
  v6 = v0[3];
  v5 = v0[4];
  v7 = (_QWORD *)swift_allocObject(&unk_1001B0350, 40, 7);
  v0[9] = v7;
  v7[2] = v4;
  v7[3] = v6;
  v7[4] = v5;
  v8 = v4;
  swift_bridgeObjectRetain(v5);
  v0[10] = objc_msgSend(v8, "context");
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v3);
  v9 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContext.perform<A>(schedule:_:)[1]);
  v0[11] = v9;
  v10 = type metadata accessor for URL(0);
  *v9 = v0;
  v9[1] = sub_1000CD638;
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0[2], v0[8], sub_1000CE060, v7, v10);
}

uint64_t sub_1000CD638()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 56);
  v3 = *(_QWORD *)(*v1 + 64);
  v5 = *(_QWORD *)(*v1 + 48);
  v6 = *v1;
  *(_QWORD *)(v6 + 96) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v7 = *(void **)(v6 + 80);
  if (v0)
  {

    return swift_task_switch(sub_1000CD6F8, 0, 0);
  }
  else
  {
    v9 = *(_QWORD *)(v6 + 64);
    v10 = *(_QWORD *)(v6 + 72);

    swift_release(v10);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
}

uint64_t sub_1000CD6F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000CD734(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _QWORD v23[2];
  uint64_t v24;
  id v25;

  v23[1] = a4;
  v5 = type metadata accessor for AttributedString.Index(0);
  v24 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v23 - v9;
  v11 = type metadata accessor for AttributedString.CharacterView(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = String._bridgeToObjectiveC()();
  v25 = a1;
  v16 = objc_msgSend(a1, "recordingWithUniqueID:", v15);

  if (v16)
  {
    objc_msgSend(v16, "updateAudioFutureWithLocalAsset");
    AttributedString.characters.getter(objc_msgSend(v16, "setHasBeenTranscribed:", 1));
    v17 = sub_10001B7CC(&qword_1001EC0F0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView, (uint64_t)&protocol conformance descriptor for AttributedString.CharacterView);
    dispatch thunk of Collection.startIndex.getter(v11, v17);
    dispatch thunk of Collection.endIndex.getter(v11, v17);
    v18 = sub_10001B7CC(&qword_1001EB0E0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Index);
    LOBYTE(v17) = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v5, v18);
    v19 = *(void (**)(char *, uint64_t))(v24 + 8);
    v19(v8, v5);
    v19(v10, v5);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    objc_msgSend(v16, "setTranscriptionContentExists:", (v17 & 1) == 0);
    objc_msgSend(v25, "saveIfNecessary");

  }
  else
  {
    v20 = sub_1000BA628();
    v21 = swift_allocError(&type metadata for TranscriptionError, v20, 0, 0);
    *v22 = 0;
    swift_willThrow(v21);
  }
}

uint64_t sub_1000CD994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for AttributedString(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000CDA10()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AttributedString(0) - 8) + 80);
  sub_1000CD734(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_1000CDA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4[2] = a1;
  v8 = type metadata accessor for TranscriptionCodingContainer(0);
  v4[3] = v8;
  v4[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v4[5] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[6] = v10;
  v11 = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[7] = v11;
  v12 = (_QWORD *)swift_task_alloc(dword_1001EB0DC);
  v4[8] = v12;
  *v12 = v4;
  v12[1] = sub_1000CDB20;
  return sub_1000CD4D0(v11, a2, a3, a4);
}

uint64_t sub_1000CDB20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000CDD7C;
  else
    v3 = sub_1000CDB84;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000CDB84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSURL *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v0[6];
  v1 = v0[7];
  v3 = v0[5];
  v4 = objc_allocWithZone((Class)AVURLAsset);
  URL._bridgeToObjectiveC()(v5);
  v7 = v6;
  v8 = objc_msgSend(v4, "initWithURL:options:", v6, 0);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v9 = objc_msgSend(v8, "rc_transcriptionData");

  if (!v9)
  {
    v20 = v0[2];
    v21 = type metadata accessor for AttributedString(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
LABEL_6:
    v26 = v0[4];
    swift_task_dealloc(v0[7]);
    swift_task_dealloc(v26);
    v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
  v10 = v0[9];
  v11 = v0[3];
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v14 = v13;

  v15 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16 = JSONDecoder.init()();
  v17 = sub_10001B7CC(&qword_1001EB038, type metadata accessor for TranscriptionCodingContainer, (uint64_t)&unk_1001882B0);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v11, v12, v14, v11, v17);
  swift_release(v16);
  if (!v10)
  {
    v22 = v0[4];
    v23 = v0[2];
    v24 = sub_100014E10(&qword_1001EA460);
    CodableConfiguration.wrappedValue.getter(v24);
    sub_1000B4EA8(v22);
    v25 = type metadata accessor for AttributedString(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v23, 0, 1, v25);
    sub_1000C10F8(v12, v14);
    goto LABEL_6;
  }
  sub_1000C10F8(v12, v14);
  v18 = v0[4];
  swift_task_dealloc(v0[7]);
  swift_task_dealloc(v18);
  v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_1000CDD7C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000CDDBC(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSString v11;
  id v12;
  id v13;
  void *v14;
  void (*v15)(char *, char *, uint64_t);
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _QWORD v26[2];

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100014E10(&qword_1001EB030);
  __chkstk_darwin(v8);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(a1, "recordingWithUniqueID:", v11);

  if (!v12)
  {
    v20 = sub_1000BA628();
    v21 = swift_allocError(&type metadata for TranscriptionError, v20, 0, 0);
    *v22 = 0;
    swift_willThrow(v21);
    return;
  }
  v13 = objc_msgSend(v12, "url");
  if (!v13)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
    goto LABEL_8;
  }
  v14 = v13;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v15 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v15(v10, v7, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
LABEL_8:
    sub_1000CE07C((uint64_t)v10);
    goto LABEL_9;
  }
  v15(a2, v10, v4);
  v16 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter();
  v18 = v17;
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  LOBYTE(v18) = objc_msgSend(v16, "fileExistsAtPath:", v19);

  if ((v18 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(a2, v4);
LABEL_9:
    v23 = sub_1000BA628();
    v24 = swift_allocError(&type metadata for TranscriptionError, v23, 0, 0);
    *v25 = 1;
    swift_willThrow(v24);
  }

}

uint64_t sub_1000CE034()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000CE060(char *a1@<X8>)
{
  uint64_t v1;

  sub_1000CDDBC(*(void **)(v1 + 16), a1);
}

uint64_t sub_1000CE07C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100014E10(&qword_1001EB030);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for TranscriptionStorageService()
{
  return &type metadata for TranscriptionStorageService;
}

uint64_t sub_1000CE0CC()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(RCVoiceMemosBundleID);
  qword_1001EB0F0 = result;
  *(_QWORD *)algn_1001EB0F8 = v1;
  return result;
}

uint64_t sub_1000CE0F8(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  if (*a1 == 1)
  {
    swift_beginAccess(v2, v5, 0, 0);
    result = swift_weakLoadStrong(v2);
    if (!result)
      return result;
    v4 = result;
    *(_BYTE *)(result + 24) = 1;
    sub_1000CE1E0();
  }
  else
  {
    swift_beginAccess(v2, v5, 0, 0);
    result = swift_weakLoadStrong(v2);
    if (!result)
      return result;
    v4 = result;
    *(_BYTE *)(result + 24) = 0;
    sub_1000CE7A0();
  }
  return swift_release(v4);
}

uint64_t sub_1000CE188()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
    sub_1000CE7A0();

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for SecureAppAssertionManager()
{
  return objc_opt_self(_TtC10VoiceMemos25SecureAppAssertionManager);
}

void sub_1000CE1E0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  void *ObjCClassFromMetadata;
  uint64_t v16;
  id v17;
  NSString v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t aBlock[6];

  if (*(_BYTE *)(v0 + 24) != 1)
    return;
  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(RecorderAppDelegate), "sharedAppDelegate");
  if (!v2)
  {
    v7 = sub_1000CE944();
    goto LABEL_9;
  }
  v3 = v2;
  v4 = objc_msgSend(v2, "defaultSceneDelegate");

  if (v4)
  {
    v5 = objc_msgSend(v4, "window");

    v4 = objc_msgSend(v5, "windowScene");
    if (v4)
    {
      v6 = objc_msgSend(v4, "activationState");

      LOBYTE(v4) = v6 == 0;
    }
  }
  v7 = sub_1000CE944();
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v7 & 1) == 0)
      return;
  }
  if (!*(_QWORD *)(v1 + 16))
  {
    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_1000AACFC(v8, (uint64_t)qword_1001F6C20);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      aBlock[0] = v13;
      *(_DWORD *)v12 = 136315138;
      v22 = sub_1001049A8(0xD000000000000023, 0x80000001001844A0, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, aBlock, v12 + 4, v12 + 12);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s Acquiring secure app assertion", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    v14 = sub_1000CEA54();
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v14);
    v16 = qword_1001E8F90;
    v17 = SBSLockScreenContentAssertionSlotApp;
    if (v16 != -1)
      swift_once(&qword_1001E8F90, sub_1000CE0CC);
    v18 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_1000CE51C;
    aBlock[5] = 0;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000CE74C;
    aBlock[3] = (uint64_t)&unk_1001B03E0;
    v19 = _Block_copy(aBlock);
    v20 = objc_msgSend(ObjCClassFromMetadata, "acquireContentProviderAssertionForType:slot:identifier:errorHandler:", 2, v17, v18, v19);
    _Block_release(v19);

    v21 = *(void **)(v1 + 16);
    *(_QWORD *)(v1 + 16) = v20;

  }
}

void sub_1000CE51C(uint64_t a1)
{
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *log;
  _QWORD v12[3];
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v2 = type metadata accessor for Logger(0);
    sub_1000AACFC(v2, (uint64_t)qword_1001F6C20);
    v3 = static os_log_type_t.error.getter();
    swift_errorRetain(a1);
    v4 = swift_errorRetain(a1);
    v5 = v3;
    log = Logger.logObject.getter(v4);
    if (os_log_type_enabled(log, v3))
    {
      v6 = swift_slowAlloc(22, -1);
      v7 = swift_slowAlloc(64, -1);
      v15 = v7;
      *(_DWORD *)v6 = 136315394;
      v14 = sub_1001049A8(0xD000000000000023, 0x80000001001844A0, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v6 + 4, v6 + 12);
      *(_WORD *)(v6 + 12) = 2080;
      swift_getErrorValue(a1, v13, v12);
      v8 = Error.localizedDescription.getter(v12[1], v12[2]);
      v10 = v9;
      v14 = sub_1001049A8(v8, v9, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v6 + 14, v6 + 22);
      swift_bridgeObjectRelease(v10);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, log, v5, "%s Error acquiring assertion: %s", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
}

void sub_1000CE74C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

void sub_1000CE7A0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = v0;
    v3 = qword_1001E8F80;
    v4 = v1;
    if (v3 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_1000AACFC(v5, (uint64_t)qword_1001F6C20);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v13 = v10;
      *(_DWORD *)v9 = 136315138;
      v12 = sub_1001049A8(0xD00000000000001ELL, 0x8000000100184460, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9 + 4, v9 + 12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s Invalidating secure app assertion", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }

    objc_msgSend(v4, "invalidate");
    v11 = *(void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;

  }
}

uint64_t sub_1000CE944()
{
  uint64_t result;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  result = (uint64_t)objc_msgSend((id)objc_opt_self(RecorderAppDelegate), "sharedAppDelegate");
  if (result)
  {
    v1 = (void *)result;
    v2 = objc_msgSend((id)result, "dynamicIslandSceneDelegate");

    if (v2
      && (v3 = objc_msgSend(v2, "platterViewController"), v2, v3))
    {
      v4 = objc_msgSend(v3, "traitCollection");
      v5 = objc_msgSend(v4, "_backlightLuminance");

      if (v5)
      {
        v6 = objc_msgSend(v3, "traitCollection");
        v7 = objc_msgSend(v6, "_backlightLuminance");

        return v7 == (id)1;
      }
      else
      {

        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1000CEA54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001EB240;
  if (!qword_1001EB240)
  {
    v1 = objc_opt_self(SBSSecureAppAssertion);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001EB240);
  }
  return result;
}

uint64_t sub_1000CEA90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000CEAA0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000CEAA8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1000CEAC0, 0, 0);
}

uint64_t sub_1000CEAC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 24) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000CEB28, v2, v3);
}

uint64_t sub_1000CEB28()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = objc_msgSend((id)objc_opt_self(RecorderAppDelegate), "sharedAppDelegate");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, "defaultSceneDelegate");

    if (v3)
    {
      v4 = objc_msgSend(v3, "mainViewController");
      *(_QWORD *)(v0 + 32) = v4;

      if (v4)
        return swift_task_switch(sub_1000CEC20, 0, 0);
    }
  }
  v6 = sub_1000B2C70();
  v7 = swift_allocError(&type metadata for RCAppIntentsGenericError, v6, 0, 0);
  *v8 = 0;
  swift_willThrow(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CEC20()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1000CED0C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCAppIntentsManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RCAppIntentsManager()
{
  return objc_opt_self(_TtC10VoiceMemos19RCAppIntentsManager);
}

uint64_t sub_1000CED5C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100014E10(&qword_1001EC5D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithCopy for TranscriptViewTextUpdateHelper(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyInit();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for TranscriptViewTextUpdateHelper(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyAssign();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for TranscriptViewTextUpdateHelper(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeInit();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for TranscriptViewTextUpdateHelper(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeAssign();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for TranscriptViewTextUpdateHelper(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TranscriptViewTextUpdateHelper(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TranscriptViewTextUpdateHelper()
{
  return &type metadata for TranscriptViewTextUpdateHelper;
}

uint64_t sub_1000CEEE8@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  id v7;
  id v8;
  id v9;
  _BYTE v10[40];

  result = sub_1000D1C04(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  else
  {
    v7 = sub_1000D1C8C(v10, result, v5, 0, a1);
    v9 = v7;
    *(_QWORD *)a2 = v7;
    sub_1000A53CC((uint64_t)v10, (uint64_t)a2 + 8);
    v8 = v7;
    return sub_100005440((uint64_t)&v9, &qword_1001EB290);
  }
  return result;
}

uint64_t sub_1000CEFAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(_BYTE *, uint64_t);
  uint64_t v12;
  void (*v13)(_BYTE *, _QWORD);
  uint64_t *v14;
  _BYTE v16[32];

  v0 = type metadata accessor for AttributedString.Index(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v16[-v5];
  v7 = type metadata accessor for AttributedString.CharacterView(0);
  v8 = sub_10001B7CC(&qword_1001EC0F0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView, (uint64_t)&protocol conformance descriptor for AttributedString.CharacterView);
  dispatch thunk of Collection.startIndex.getter(v7, v8);
  dispatch thunk of Collection.endIndex.getter(v7, v8);
  v9 = sub_10001B7CC(&qword_1001EB0E0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Index);
  v10 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v4, v0, v9);
  v11 = *(void (**)(_BYTE *, uint64_t))(v1 + 8);
  v11(v4, v0);
  v12 = 0;
  if ((v10 & 1) == 0)
  {
    v13 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v16, v6, v7, v8);
    v12 = *v14;
    swift_bridgeObjectRetain(v14[1]);
    v13(v16, 0);
  }
  v11(v6, v0);
  return v12;
}

void sub_1000CF130(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  _QWORD *v29;
  _QWORD *v30;
  char v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  id v37;
  id v38;
  char v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;

  v4 = sub_100014E10(&qword_1001EC580);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v42 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v42 - v12;
  __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v42 - v14);
  sub_1000CF4EC(a1, (uint64_t)&v42 - v14);
  v16 = type metadata accessor for TranscriptViewModel(0);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48);
  if (v17((char *)v15, 1, v16) == 1)
  {
    sub_100005440((uint64_t)v15, &qword_1001EC580);
    v18 = 1;
  }
  else
  {
    v20 = *v15;
    v19 = v15[1];
    swift_bridgeObjectRetain(v19);
    sub_1000AD368((uint64_t)v15);
    v21 = a2[1];
    if (v20 == *a2 && v19 == v21)
    {
      swift_bridgeObjectRelease(v19);
      v18 = 0;
    }
    else
    {
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v19, *a2, v21, 0);
      swift_bridgeObjectRelease(v19);
      v18 = v23 ^ 1;
    }
  }
  sub_1000CF4EC(a1, (uint64_t)v13);
  if (v17(v13, 1, v16) == 1)
  {
    sub_100005440((uint64_t)v13, &qword_1001EC580);
    v24 = 1;
  }
  else
  {
    v25 = *((_QWORD *)v13 + 2);
    swift_bridgeObjectRetain(v25);
    sub_1000AD368((uint64_t)v13);
    v26 = a2[2];
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    v27 = sub_1001077C4(v25, v26);
    swift_bridgeObjectRelease_n(v25, 2);
    swift_bridgeObjectRelease(v26);
    v24 = v27 ^ 1;
  }
  sub_1000CF4EC(a1, (uint64_t)v10);
  if (v17(v10, 1, v16) == 1)
  {
    sub_100005440((uint64_t)v10, &qword_1001EC580);
    v28 = 1;
  }
  else
  {
    v29 = (_QWORD *)*((_QWORD *)v10 + 3);
    swift_bridgeObjectRetain(v29);
    sub_1000AD368((uint64_t)v10);
    v30 = (_QWORD *)a2[3];
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    v31 = sub_100107A34(v29, v30);
    swift_bridgeObjectRelease_n(v29, 2);
    swift_bridgeObjectRelease(v30);
    v28 = v31 ^ 1;
  }
  sub_1000CF4EC(a1, (uint64_t)v7);
  if (v17(v7, 1, v16) == 1)
  {
    sub_100005440((uint64_t)v7, &qword_1001EC580);
    v32 = (void *)a2[12];
    goto LABEL_22;
  }
  v34 = (void *)*((_QWORD *)v7 + 12);
  v33 = *((_QWORD *)v7 + 13);
  v35 = v34;
  sub_1000AD368((uint64_t)v7);
  v32 = (void *)a2[12];
  if (!v34)
  {
LABEL_22:
    if (!((v32 != 0) | v28 & 1 | (v18 | v24) & 1))
      return;
LABEL_25:
    sub_1000CF534(a1, (uint64_t)a2);
    v40 = sub_1000D02BC(a1, (uint64_t)a2);
    sub_1000D0620((uint64_t)v40);
    swift_bridgeObjectRelease(v40);
    sub_1000CF694(a1, a2);
    v41 = sub_1000D0D80((uint64_t)a2);
    sub_1000D0620((uint64_t)v41);
    swift_bridgeObjectRelease(v41);
    sub_1000CFABC(a1, a2);
    sub_1000CFDE0(a1, a2);
    return;
  }
  if (!v32)
  {

    goto LABEL_25;
  }
  v36 = a2[13];
  v37 = v35;
  v38 = v32;
  v39 = sub_10010739C(v38);

  if (v18 & 1 | ((v39 & 1) == 0) | (v24 | v28) & 1 || v33 != v36)
    goto LABEL_25;
}

uint64_t sub_1000CF4EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EC580);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000CF534(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Strong;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;

  v3 = v2;
  v6 = sub_100014E10(&qword_1001EC580);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v10 = (void *)Strong;
    sub_1000CF4EC(a1, (uint64_t)v8);
    v11 = type metadata accessor for TranscriptViewModel(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v8, 1, v11) == 1)
    {

      sub_100005440((uint64_t)v8, &qword_1001EC580);
    }
    else
    {
      v13 = (void *)*((_QWORD *)v8 + 12);
      v12 = *((_QWORD *)v8 + 13);
      v14 = v13;
      sub_1000AD368((uint64_t)v8);
      if (v13)
      {
        v15 = *(void **)(a2 + 96);
        if (v15)
        {
          v16 = v14;
          v17 = v15;
          sub_10010739C(v17);

        }
        v18 = objc_msgSend(v14, "length");
        v19 = objc_msgSend(v10, "textStorage");
        objc_msgSend(v19, "deleteCharactersInRange:", v12, v18);

      }
      else
      {

      }
    }
  }
}

void sub_1000CF694(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t Strong;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char *v22;
  char *v23;
  id v24;
  _OWORD *v25;
  id v26;
  NSString v27;
  Class isa;
  id v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = v2;
  v6 = sub_100014E10(&qword_1001EC580);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v10 = (void *)Strong;
    sub_1000CF4EC(a1, (uint64_t)v8);
    v11 = type metadata accessor for TranscriptViewModel(0);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v8, 1, v11) == 1)
    {
      sub_100005440((uint64_t)v8, &qword_1001EC580);
      v12 = 0;
      v13 = 0xE000000000000000;
    }
    else
    {
      v12 = *v8;
      v13 = v8[1];
      swift_bridgeObjectRetain(v13);
      sub_1000AD368((uint64_t)v8);
    }
    v15 = *a2;
    v14 = a2[1];
    v16 = sub_1000A36EC(v12, v13, *a2, v14);
    v18 = v17;
    v20 = v19;
    swift_bridgeObjectRelease(v13);
    if ((v18 & 1) == 0)
    {
      v21 = objc_msgSend(v10, "textStorage");
      v22 = (char *)objc_msgSend(v21, "length");

      v23 = &v22[-v16];
      if (__OFSUB__(v22, v16))
      {
        __break(1u);
        goto LABEL_22;
      }
      v24 = objc_msgSend(v10, "textStorage");
      objc_msgSend(v24, "deleteCharactersInRange:", v16, v23);

    }
    if (v20)
    {
      v25 = sub_100106AFC(a2[2]);
      v26 = objc_allocWithZone((Class)NSMutableAttributedString);
      v27 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
      type metadata accessor for Key(0);
      sub_10001B7CC((unint64_t *)&qword_1001E92F8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001879A4);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v25);
      v29 = objc_msgSend(v26, "initWithString:attributes:", v27, isa);

      v30 = objc_msgSend(v10, "textStorage");
      objc_msgSend(v30, "appendAttributedString:", v29);

    }
    v31 = objc_msgSend(v10, "text");
    if (v31)
    {
      v32 = v31;
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v35 = v34;

      if (v33 == v15 && v35 == v14)
      {

        swift_bridgeObjectRelease(v14);
        return;
      }
      v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v15, v14, 0);
      swift_bridgeObjectRelease(v35);
      if ((v36 & 1) != 0)
        goto LABEL_19;
    }
    if (qword_1001E8F80 == -1)
    {
LABEL_16:
      v37 = type metadata accessor for Logger(0);
      sub_1000AACFC(v37, (uint64_t)qword_1001F6C20);
      v38 = static os_log_type_t.error.getter();
      v39 = v38;
      v40 = Logger.logObject.getter(v38);
      v41 = v39;
      if (os_log_type_enabled(v40, v39))
      {
        v42 = (uint8_t *)swift_slowAlloc(12, -1);
        v43 = swift_slowAlloc(32, -1);
        v45 = v43;
        *(_DWORD *)v42 = 136315138;
        v44 = sub_1001049A8(0xD000000000000026, 0x8000000100184530, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v42 + 4, v42 + 12);
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s - TextView text does not match the view model. This is a serious issue and should be investigated.", v42, 0xCu);
        swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v42, -1, -1);
      }

LABEL_19:
      return;
    }
LABEL_22:
    swift_once(&qword_1001E8F80, sub_1000B5218);
    goto LABEL_16;
  }
}

void sub_1000CFABC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *Strong;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  id v17;
  int v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  unsigned __int8 v24;
  id v25;
  id v26;
  id v27;
  _OWORD *v28;
  Class isa;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;

  v3 = v2;
  v6 = sub_100014E10(&qword_1001EC580);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v35 - v10;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v13 = (void *)a2[12];
    if (!v13)
    {

      return;
    }
    v38 = Strong;
    v14 = a2[13];
    sub_1000CF4EC(a1, (uint64_t)v11);
    v15 = type metadata accessor for TranscriptViewModel(0);
    v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48);
    if (v16(v11, 1, v15) == 1)
    {
      v17 = v13;
      sub_100005440((uint64_t)v11, &qword_1001EC580);
      v18 = 0;
    }
    else
    {
      v19 = (void *)*((_QWORD *)v11 + 12);
      v36 = *((_QWORD *)v11 + 13);
      v37 = v14;
      v20 = v19;
      v21 = v13;
      sub_1000AD368((uint64_t)v11);
      if (v19)
      {
        v22 = v20;
        v23 = v21;
        v24 = sub_10010739C(v23);

        v18 = v24 & (v36 == v37);
      }
      else
      {
        v18 = 0;
      }
      v14 = v37;
    }
    sub_1000CF4EC(a1, (uint64_t)v9);
    if (v16(v9, 1, v15) == 1)
    {
      sub_100005440((uint64_t)v9, &qword_1001EC580);
LABEL_12:
      v25 = objc_msgSend(v38, "textStorage");
      objc_msgSend(v25, "insertAttributedString:atIndex:", v13, v14);

      v26 = objc_msgSend(v13, "length");
      v27 = objc_msgSend(v38, "textStorage");
      v28 = sub_100106AFC(a2[2]);
      type metadata accessor for Key(0);
      sub_10001B7CC((unint64_t *)&qword_1001E92F8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001879A4);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v28);
      objc_msgSend(v27, "addAttributes:range:", isa, v14, v26);

      return;
    }
    v31 = *(_QWORD *)v9;
    v30 = *((_QWORD *)v9 + 1);
    swift_bridgeObjectRetain(v30);
    sub_1000AD368((uint64_t)v9);
    v32 = a2[1];
    if (v31 == *a2 && v30 == v32)
    {
      swift_bridgeObjectRelease(v30);
      if (!v18)
        goto LABEL_12;
    }
    else
    {
      v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v30, *a2, v32, 0);
      swift_bridgeObjectRelease(v30);
      if ((v18 & v34) != 1)
        goto LABEL_12;
    }

  }
}

void sub_1000CFDE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  void *Strong;
  id v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  id v62;
  void *v63;
  id v64;
  int v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  id v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD v78[2];

  v3 = v2;
  v6 = sub_100014E10(&qword_1001EC580);
  v7 = __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v11 = (char *)&v66 - v10;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (!Strong)
    return;
  v72 = Strong;
  v13 = objc_msgSend(Strong, "textLayoutManager");
  if (!v13)
  {

    return;
  }
  v67 = v13;
  sub_1000CF4EC(a1, (uint64_t)v11);
  v14 = type metadata accessor for TranscriptViewModel(0);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48);
  if (v15(v11, 1, v14) == 1)
  {
    sub_100005440((uint64_t)v11, &qword_1001EC580);
LABEL_9:
    v21 = objc_msgSend(v72, "textStorage");
    v22 = objc_msgSend(v21, "length");

    v23 = 0;
LABEL_32:
    v62 = sub_1000A8CFC(v23, (uint64_t)v22);
    if (v62)
    {
      v63 = v62;
      v64 = v67;
      objc_msgSend(v67, "ensureLayoutForRange:", v62);

    }
    else
    {

    }
    return;
  }
  v16 = *((_QWORD *)v11 + 2);
  swift_bridgeObjectRetain(v16);
  sub_1000AD368((uint64_t)v11);
  v17 = a2[2];
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  v18 = sub_1001077C4(v16, v17);
  swift_bridgeObjectRelease_n(v16, 2);
  swift_bridgeObjectRelease(v17);
  if ((v18 & 1) == 0)
    goto LABEL_9;
  sub_1000CF4EC(a1, (uint64_t)v9);
  if (v15((char *)v9, 1, v14) == 1)
  {
    sub_100005440((uint64_t)v9, &qword_1001EC580);
    v19 = 0;
    v20 = 0xE000000000000000;
  }
  else
  {
    v19 = *v9;
    v20 = v9[1];
    swift_bridgeObjectRetain(v20);
    sub_1000AD368((uint64_t)v9);
  }
  v24 = *a2;
  v25 = a2[1];
  v26 = String.count.getter(v24, v25);
  v27 = String.count.getter(v19, v20);
  if (v27 >= v26)
    v28 = v26;
  else
    v28 = v27;
  if ((uint64_t)v28 < 1)
  {
    v30 = 15;
LABEL_28:
    v78[0] = v24;
    v78[1] = v25;
    v57 = sub_1000A3A18();
    v58 = String.Index.utf16Offset<A>(in:)(v78, v30, &type metadata for String, v57);
    swift_bridgeObjectRelease(v20);
    v59 = objc_msgSend(v72, "textStorage");
    v60 = objc_msgSend(v59, "length");

    v61 = (uint64_t)v60 - v58;
    if (__OFSUB__(v60, v58))
      goto LABEL_39;
    v22 = (id)(v61 & ~(v61 >> 63));
    if (v61 <= 0)
      v23 = 0;
    else
      v23 = v58;
    goto LABEL_32;
  }
  v29 = 15;
  v30 = 15;
  v70 = v19;
  v71 = v20;
  v68 = v25;
  v69 = v24;
  while (1)
  {
    v32 = String.index(_:offsetBy:)(v30, v28 >> 1, v24, v25);
    if (v32 >> 14 < v30 >> 14)
      break;
    v33 = v32;
    swift_bridgeObjectRetain(v25);
    v74 = v33;
    v34 = String.index(after:)(v33, v24, v25);
    v75 = v30;
    v35 = String.subscript.getter(v30, v34, v24, v25);
    v37 = v36;
    v39 = v38;
    v41 = v40;
    swift_bridgeObjectRelease(v25);
    v76 = v28 >> 1;
    v42 = String.index(_:offsetBy:)(v29, v28 >> 1, v19, v20);
    if (v42 >> 14 < v29 >> 14)
      goto LABEL_38;
    v43 = v42;
    v73 = v28;
    swift_bridgeObjectRetain(v20);
    v44 = String.index(after:)(v43, v19, v20);
    v77 = v29;
    v45 = String.subscript.getter(v29, v44, v19, v20);
    v47 = v46;
    v49 = v48;
    v51 = v50;
    swift_bridgeObjectRelease(v20);
    v52 = v35 >> 16;
    v53 = v37 >> 16;
    v54 = v45 >> 16;
    v55 = v47 >> 16;
    if (v39 == v49 && v41 == v51 && v52 == v54 && v53 == v55)
    {
      swift_bridgeObjectRelease_n(v41, 2);
      v19 = v70;
      v20 = v71;
      v25 = v68;
      v24 = v69;
      v31 = v76;
    }
    else
    {
      LOBYTE(v65) = 0;
      v56 = _stringCompareInternal(_:_:_:_:expecting:)(v39, v41, v52, v53, v49, v51, v54, v55, v65);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v51);
      v19 = v70;
      v20 = v71;
      v25 = v68;
      v24 = v69;
      v30 = v75;
      v31 = v76;
      if ((v56 & 1) == 0)
        goto LABEL_18;
    }
    v30 = String.index(after:)(v74, v24, v25);
    v77 = String.index(after:)(v43, v19, v20);
    v31 = v73 + ~v31;
LABEL_18:
    v28 = v31;
    v29 = v77;
    if (v31 <= 0)
      goto LABEL_28;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

_QWORD *sub_1000D02BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t Strong;
  void *v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *result;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;

  v3 = v2;
  v6 = sub_100014E10(&qword_1001EC580);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v43 - v10;
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (!Strong)
    return _swiftEmptyArrayStorage;
  v13 = (void *)Strong;
  sub_1000CF4EC(a1, (uint64_t)v11);
  v14 = type metadata accessor for TranscriptViewModel(0);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48);
  if (v15(v11, 1, v14) == 1)
  {
    sub_100005440((uint64_t)v11, &qword_1001EC580);
    goto LABEL_7;
  }
  v16 = *((_QWORD *)v11 + 2);
  swift_bridgeObjectRetain(v16);
  sub_1000AD368((uint64_t)v11);
  v17 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  v18 = sub_1001077C4(v16, v17);
  swift_bridgeObjectRelease_n(v16, 2);
  swift_bridgeObjectRelease(v17);
  if ((v18 & 1) != 0)
  {
    sub_1000CF4EC(a1, (uint64_t)v9);
    if (v15(v9, 1, v14) == 1)
    {

      sub_100005440((uint64_t)v9, &qword_1001EC580);
    }
    else
    {
      v32 = (_QWORD *)*((_QWORD *)v9 + 3);
      swift_bridgeObjectRetain(v32);
      sub_1000AD368((uint64_t)v9);
      if ((sub_100107A34(v32, *(_QWORD **)(a2 + 24)) & 1) != 0)
      {
        swift_bridgeObjectRelease(v32);

      }
      else
      {
        v33 = v32[2];
        if (v33)
        {
          v44 = v32;
          v34 = v32 + 6;
          v28 = _swiftEmptyArrayStorage;
          do
          {
            v36 = *(v34 - 2);
            v35 = *(v34 - 1);
            v37 = *v34;
            v38 = swift_bridgeObjectRetain(*v34);
            v39 = sub_1000D0ED0(v38, v17);
            swift_bridgeObjectRelease(v37);
            if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
              v28 = sub_1000C9670(0, v28[2] + 1, 1, v28);
            v41 = v28[2];
            v40 = v28[3];
            if (v41 >= v40 >> 1)
              v28 = sub_1000C9670((_QWORD *)(v40 > 1), v41 + 1, 1, v28);
            v28[2] = v41 + 1;
            v42 = &v28[3 * v41];
            v42[4] = v36;
            v42[5] = v35;
            v42[6] = v39;
            v34 += 3;
            --v33;
          }
          while (v33);

          swift_bridgeObjectRelease(v44);
          return v28;
        }

        swift_bridgeObjectRelease(v32);
      }
    }
    return _swiftEmptyArrayStorage;
  }
LABEL_7:
  result = objc_msgSend(v13, "text");
  if (result)
  {
    v20 = result;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v23 = v22;

    v24 = sub_100105A44(v21, v23);
    v26 = v25;
    swift_bridgeObjectRelease(v23);
    v27 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain(v27);
    v28 = sub_1000C9670(0, 1, 1, _swiftEmptyArrayStorage);
    v30 = v28[2];
    v29 = v28[3];
    if (v30 >= v29 >> 1)
      v28 = sub_1000C9670((_QWORD *)(v29 > 1), v30 + 1, 1, v28);
    v28[2] = v30 + 1;
    v31 = &v28[3 * v30];
    v31[4] = v24;
    v31[5] = v26;
    v31[6] = v27;

    return v28;
  }
  __break(1u);
  return result;
}

void sub_1000D0620(uint64_t a1)
{
  void *Strong;
  id v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  char v34;
  uint64_t v35;
  char v36;
  _OWORD *v37;
  Class v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  _OWORD *v54;
  Class isa;
  id v56;
  id v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64[2];

  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong)
    return;
  v62 = Strong;
  v3 = objc_msgSend(Strong, "text");
  if (!v3)
    goto LABEL_56;
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v7 = v6;

  v8 = sub_100105A44(v5, v7);
  v10 = v9;
  swift_bridgeObjectRelease(v7);
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {

    return;
  }
  swift_bridgeObjectRetain(a1);
  v12 = (uint64_t *)(a1 + 48);
  v13 = &selRef_currentLocaleDidChange_;
  while (1)
  {
    v14 = *(v12 - 2);
    v15 = *(v12 - 1);
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
      break;
    v17 = __OFSUB__(v16, 1);
    v18 = v16 - 1;
    if (v17)
      goto LABEL_53;
    if (v14 < v8)
      goto LABEL_28;
    if (__OFSUB__(v14, v8))
      goto LABEL_54;
    if (v14 - v8 >= v10 || v18 < v8)
      goto LABEL_28;
    v17 = __OFSUB__(v18, v8);
    v20 = v18 - v8;
    if (v17)
      goto LABEL_55;
    if (v20 >= v10)
    {
LABEL_28:
      if (qword_1001E8F80 != -1)
        swift_once(&qword_1001E8F80, sub_1000B5218);
      v45 = type metadata accessor for Logger(0);
      sub_1000AACFC(v45, (uint64_t)qword_1001F6C20);
      v46 = static os_log_type_t.error.getter();
      v47 = v46;
      v23 = Logger.logObject.getter(v46);
      v48 = v47;
      if (os_log_type_enabled(v23, v47))
      {
        v49 = swift_slowAlloc(12, -1);
        v50 = swift_slowAlloc(32, -1);
        v64[0] = v50;
        *(_DWORD *)v49 = 136315138;
        *(_QWORD *)(v49 + 4) = sub_1001049A8(0xD00000000000001DLL, 0x8000000100184560, v64);
        _os_log_impl((void *)&_mh_execute_header, v23, v48, "%s - Unable to set attributes. Range is out of bounds.", (uint8_t *)v49, 0xCu);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        v51 = v50;
        v13 = &selRef_currentLocaleDidChange_;
        swift_slowDealloc(v51, -1, -1);
        swift_slowDealloc(v49, -1, -1);
      }
LABEL_32:

      goto LABEL_33;
    }
    v21 = *v12;
    v22 = swift_unknownObjectWeakLoadStrong();
    if (v22)
    {
      v23 = v22;
      swift_bridgeObjectRetain_n(v21, 2);
      v24 = objc_msgSend(v23, v13[41]);
      v25 = v21;
      if (v24)
      {
        v26 = v24;
        v61 = v25;
        v27 = objc_msgSend(v23, v13[41]);
        if (!v27)
        {
          swift_bridgeObjectRelease_n(v61, 2);

          goto LABEL_45;
        }
        v28 = v27;
        v60 = v26;
        v29 = objc_msgSend(v27, "textContentManager");

        if (!v29)
        {
          swift_bridgeObjectRelease_n(v61, 2);

          goto LABEL_45;
        }
        v58 = a1;
        v59 = objc_msgSend(v29, "documentRange");
        v30 = objc_msgSend(v59, "location");
        v31 = objc_msgSend(v29, "locationFromLocation:withOffset:", v30, v14);
        swift_unknownObjectRelease(v30);
        if (!v31)
        {
          swift_bridgeObjectRelease_n(v61, 2);

          v52 = v59;
          goto LABEL_41;
        }
        v32 = objc_msgSend(v29, "locationFromLocation:withOffset:", v31, v15);
        if (!v32)
        {
          swift_bridgeObjectRelease_n(v61, 2);

          swift_unknownObjectRelease(v31);
          goto LABEL_44;
        }
        v33 = v32;
        v56 = objc_msgSend(objc_allocWithZone((Class)NSTextRange), "initWithLocation:endLocation:", v31, v32);

        swift_unknownObjectRelease(v33);
        swift_unknownObjectRelease(v31);
        if (!v56)
        {
          swift_bridgeObjectRelease_n(v61, 2);

          v52 = v60;
LABEL_41:

LABEL_44:
          a1 = v58;
LABEL_45:
          v13 = &selRef_currentLocaleDidChange_;
          goto LABEL_33;
        }
        v34 = *(_BYTE *)(v63 + 8);
        sub_1000D1D10(v63, (uint64_t)v64);
        if ((v34 & 1) == 0)
        {
          sub_1000A3170((uint64_t)v64);
          v35 = v61;
LABEL_43:
          objc_msgSend(v60, "invalidateRenderingAttributesForTextRange:", v56, v56);
          v53 = -[NSObject textStorage](v23, "textStorage");
          v54 = sub_100106AFC(v35);
          type metadata accessor for Key(0);
          sub_10001B7CC((unint64_t *)&qword_1001E92F8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001879A4);
          isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v54);
          objc_msgSend(v53, "addAttributes:range:", isa, v14, v15);
          swift_bridgeObjectRelease_n(v61, 2);

          goto LABEL_44;
        }
        v35 = v61;
        v36 = sub_1000D1654(v61);
        sub_1000A3170((uint64_t)v64);
        if ((v36 & 1) == 0)
          goto LABEL_43;
        v37 = sub_100106AFC(v61);
        type metadata accessor for Key(0);
        sub_10001B7CC((unint64_t *)&qword_1001E92F8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001879A4);
        v38 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v37);
        objc_msgSend(v60, "setRenderingAttributes:forTextRange:", v38, v56);

        v39 = objc_msgSend(v56, "location");
        v40 = objc_msgSend(v60, "textLayoutFragmentForLocation:", v39);
        swift_unknownObjectRelease(v39);
        if (v40)
        {
          v41 = objc_msgSend(v60, "textViewportLayoutController");
          v42 = objc_msgSend(v41, "renderingSurfaceForKey:", v40);

          a1 = v58;
          if (v42)
          {
            v43 = objc_opt_self(UIView);
            v44 = (void *)swift_dynamicCastObjCClass(v42, v43);
            v13 = &selRef_currentLocaleDidChange_;
            if (v44)
            {
              objc_msgSend(v44, "setNeedsDisplay");
              swift_bridgeObjectRelease_n(v61, 2);

              swift_unknownObjectRelease(v42);
            }
            else
            {
              swift_bridgeObjectRelease_n(v61, 2);
              swift_unknownObjectRelease(v42);

            }
          }
          else
          {
            swift_bridgeObjectRelease_n(v61, 2);

            v13 = &selRef_currentLocaleDidChange_;
          }
        }
        else
        {
          swift_bridgeObjectRelease_n(v61, 2);
          a1 = v58;
          v13 = &selRef_currentLocaleDidChange_;
        }

      }
      else
      {
        swift_bridgeObjectRelease_n(v21, 2);
      }
      goto LABEL_32;
    }
LABEL_33:
    v12 += 3;
    if (!--v11)
    {

      swift_bridgeObjectRelease(a1);
      return;
    }
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
}

_QWORD *sub_1000D0D80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v1);
  v16 = v3;
  v4 = (uint64_t *)(v3 + 48);
  v5 = _swiftEmptyArrayStorage;
  do
  {
    v6 = *(v4 - 2);
    v7 = *(v4 - 1);
    v8 = *v4;
    swift_bridgeObjectRetain_n(*v4, 2);
    v9 = sub_1000D13E4(v6, v7);
    if (v9)
    {
      v10 = v9;
      v11 = sub_1000D0ED0((uint64_t)v9, v8);
      swift_bridgeObjectRelease_n(v8, 2);
      swift_bridgeObjectRelease(v10);
      v8 = v11;
    }
    else
    {
      swift_bridgeObjectRelease(v8);
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      v5 = sub_1000C9670(0, v5[2] + 1, 1, v5);
    v13 = v5[2];
    v12 = v5[3];
    if (v13 >= v12 >> 1)
      v5 = sub_1000C9670((_QWORD *)(v12 > 1), v13 + 1, 1, v5);
    v5[2] = v13 + 1;
    v14 = &v5[3 * v13];
    v14[4] = v6;
    v14[5] = v7;
    v14[6] = v8;
    v4 += 3;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease(v16);
  return v5;
}

uint64_t sub_1000D0ED0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  id v16;
  id v17;
  unint64_t v18;
  char v19;
  id v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v39;
  unint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  int64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  id v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v4 = (_QWORD *)sub_100108C00((uint64_t)_swiftEmptyArrayStorage);
  v55 = a2 + 64;
  v5 = 1 << *(_BYTE *)(a2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a2 + 64);
  v56 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v57 = 0;
  while (1)
  {
    if (v7)
    {
      v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v9 = v8 | (v57 << 6);
LABEL_9:
      v10 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)&v64 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v9);
      v11 = (void *)v64;
      sub_1000A53CC(v10 + 40 * v9, (uint64_t)&v64 + 8);
      v12 = v11;
      goto LABEL_28;
    }
    v13 = v57 + 1;
    if (__OFADD__(v57, 1))
      goto LABEL_60;
    if (v13 < v56)
    {
      v14 = *(_QWORD *)(v55 + 8 * v13);
      if (v14)
        goto LABEL_13;
      v15 = v57 + 2;
      ++v57;
      if (v13 + 1 < v56)
      {
        v14 = *(_QWORD *)(v55 + 8 * v15);
        if (v14)
          goto LABEL_16;
        v57 = v13 + 1;
        if (v13 + 2 < v56)
        {
          v14 = *(_QWORD *)(v55 + 8 * (v13 + 2));
          if (v14)
          {
            v13 += 2;
            goto LABEL_13;
          }
          v15 = v13 + 3;
          v57 = v13 + 2;
          if (v13 + 3 < v56)
            break;
        }
      }
    }
LABEL_27:
    v7 = 0;
    v65 = 0u;
    v66 = 0u;
    v64 = 0u;
LABEL_28:
    sub_1000D1B80((uint64_t)&v64, (uint64_t)&v67);
    v16 = v67;
    if (!v67)
    {
      swift_release(a2);
      return (uint64_t)v4;
    }
    v64 = v68;
    v65 = v69;
    *(_QWORD *)&v66 = v70;
    if (*(_QWORD *)(a1 + 16))
    {
      v17 = v67;
      v18 = sub_100107B54((uint64_t)v17);
      if ((v19 & 1) != 0)
      {
        sub_1000A53CC(*(_QWORD *)(a1 + 56) + 40 * v18, (uint64_t)&v58);
      }
      else
      {
        v60 = 0;
        v58 = 0u;
        v59 = 0u;
      }

      if (*((_QWORD *)&v59 + 1))
      {
        v61 = v58;
        v62 = v59;
        v63 = v60;
        if ((static AnyHashable.== infix(_:_:)(&v64, &v61) & 1) != 0)
        {

        }
        else
        {
          sub_1000A53CC((uint64_t)&v64, (uint64_t)&v58);
          v37 = v17;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
          v40 = sub_100107B54((uint64_t)v37);
          v41 = v4[2];
          v42 = (v39 & 1) == 0;
          v43 = v41 + v42;
          if (__OFADD__(v41, v42))
            goto LABEL_62;
          v44 = v39;
          if (v4[3] >= v43)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              sub_1000A47F0();
          }
          else
          {
            sub_1000A4034(v43, isUniquelyReferenced_nonNull_native);
            v45 = sub_100107B54((uint64_t)v37);
            if ((v44 & 1) != (v46 & 1))
              goto LABEL_65;
            v40 = v45;
          }
          if ((v44 & 1) != 0)
          {
            sub_1000A5390((uint64_t)&v58, v4[7] + 40 * v40);
          }
          else
          {
            v4[(v40 >> 6) + 8] |= 1 << v40;
            *(_QWORD *)(v4[6] + 8 * v40) = v37;
            v47 = v4[7] + 40 * v40;
            v48 = v58;
            v49 = v59;
            *(_QWORD *)(v47 + 32) = v60;
            *(_OWORD *)v47 = v48;
            *(_OWORD *)(v47 + 16) = v49;
            v50 = v4[2];
            v34 = __OFADD__(v50, 1);
            v51 = v50 + 1;
            if (v34)
              goto LABEL_63;
            v4[2] = v51;
            v52 = v37;
          }

          swift_bridgeObjectRelease(0x8000000000000000);
        }
        sub_1000D1BC8((uint64_t)&v61);
        goto LABEL_6;
      }
    }
    else
    {
      v60 = 0;
      v58 = 0u;
      v59 = 0u;
    }
    sub_100005440((uint64_t)&v58, &qword_1001EC5D0);
    sub_1000A53CC((uint64_t)&v64, (uint64_t)&v61);
    v20 = v16;
    v21 = swift_isUniquelyReferenced_nonNull_native(v4);
    *(_QWORD *)&v58 = v4;
    v23 = sub_100107B54((uint64_t)v20);
    v24 = v4[2];
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
    {
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    v27 = v22;
    if (v4[3] >= v26)
    {
      if ((v21 & 1) == 0)
        sub_1000A47F0();
    }
    else
    {
      sub_1000A4034(v26, v21);
      v28 = sub_100107B54((uint64_t)v20);
      if ((v27 & 1) != (v29 & 1))
        goto LABEL_65;
      v23 = v28;
    }
    v4 = (_QWORD *)v58;
    if ((v27 & 1) != 0)
    {
      sub_1000A5390((uint64_t)&v61, *(_QWORD *)(v58 + 56) + 40 * v23);
    }
    else
    {
      *(_QWORD *)(v58 + 8 * (v23 >> 6) + 64) |= 1 << v23;
      *(_QWORD *)(v4[6] + 8 * v23) = v20;
      v30 = v4[7] + 40 * v23;
      v31 = v61;
      v32 = v62;
      *(_QWORD *)(v30 + 32) = v63;
      *(_OWORD *)v30 = v31;
      *(_OWORD *)(v30 + 16) = v32;
      v33 = v4[2];
      v34 = __OFADD__(v33, 1);
      v35 = v33 + 1;
      if (v34)
        goto LABEL_61;
      v4[2] = v35;
      v36 = v20;
    }

    swift_bridgeObjectRelease(0x8000000000000000);
LABEL_6:
    sub_1000D1BC8((uint64_t)&v64);
  }
  v14 = *(_QWORD *)(v55 + 8 * v15);
  if (v14)
  {
LABEL_16:
    v13 = v15;
LABEL_13:
    v7 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v13 << 6);
    v57 = v13;
    goto LABEL_9;
  }
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v56)
    {
      v57 = v56 - 1;
      goto LABEL_27;
    }
    v14 = *(_QWORD *)(v55 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_13;
  }
LABEL_64:
  __break(1u);
LABEL_65:
  type metadata accessor for Key(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v54);
  __break(1u);
  return result;
}

id sub_1000D13E4(uint64_t a1, uint64_t a2)
{
  void *Strong;
  void *v5;
  id result;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong)
    return 0;
  v5 = Strong;
  result = objc_msgSend(Strong, "text");
  if (result)
  {
    v7 = result;
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v10 = v9;

    v11 = sub_100105A44(v8, v10);
    v13 = v12;
    swift_bridgeObjectRelease(v10);
    v14 = a1 + a2;
    if (__OFADD__(a1, a2))
    {
      __break(1u);
    }
    else
    {
      v15 = v14 - 1;
      if (!__OFSUB__(v14, 1))
      {
        if (v11 > a1)
          goto LABEL_13;
        if (!__OFSUB__(a1, v11))
        {
          if (a1 - v11 < v13)
          {
            v16 = __OFSUB__(v15, v11);
            v17 = v15 < v11;
            v18 = v15 - v11;
            if (!v17)
            {
              if (!v16)
              {
                if (v18 < v13)
                {
                  v33 = 0;
                  v34 = 0;
                  if (v14 > a1)
                  {
                    v19 = 0;
                    v20 = 0;
                    v21 = 0;
                    do
                    {
                      v22 = v21 + v20;
                      if (a1 >= v21 + v20)
                      {
                        v23 = objc_msgSend(v5, "textStorage");
                        v24 = objc_msgSend(v23, "attributesAtIndex:effectiveRange:", a1, &v33);

                        type metadata accessor for Key(0);
                        v26 = v25;
                        v27 = sub_10001B7CC((unint64_t *)&qword_1001E92F8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001879A4);
                        v28 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v24, v26, (char *)&type metadata for Any + 8, v27);

                        v29 = sub_1000D176C(v28);
                        swift_bridgeObjectRelease(v28);
                        if (!v29)
                          goto LABEL_23;
                        if (v19)
                        {
                          swift_bridgeObjectRetain(v19);
                          v31 = sub_1000D0ED0(v30, v29);
                          swift_bridgeObjectRelease(v19);
                          swift_bridgeObjectRelease(v29);
                          v32 = *(_QWORD *)(v31 + 16);
                          swift_bridgeObjectRelease(v31);
                          if (v32)
                          {
LABEL_23:

                            swift_bridgeObjectRelease(v19);
                            return 0;
                          }
                        }
                        else
                        {
                          v19 = v29;
                        }
                        v20 = v33;
                        v21 = v34;
                        v22 = v34 + v33;
                      }
                      a1 = v22;
                    }
                    while (v22 < v14);

                    return (id)v19;
                  }
                }
                goto LABEL_13;
              }
LABEL_28:
              __break(1u);
            }
          }
LABEL_13:

          return 0;
        }
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    __break(1u);
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D1654(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  id v12;
  void *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  if (*(_QWORD *)(a1 + 16) == 1)
  {
    v2 = swift_bridgeObjectRetain(a1);
    sub_1000CEEE8(v2, &v14);
    swift_bridgeObjectRelease(a1);
    v3 = v14;
    if (v14)
    {
      v18 = v14;
      v19 = v15;
      v20 = v16;
      v21 = v17;
      v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v6 = v5;
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSForegroundColorAttributeName);
      v9 = v8;
      if (v4 == v7 && v6 == v8)
        v11 = 1;
      else
        v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
      v12 = v3;
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v9);
      sub_100005440((uint64_t)&v18, &qword_1001EB290);

    }
    else
    {
      sub_100005440((uint64_t)&v14, &qword_1001EB280);
      v11 = 0;
    }
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

uint64_t sub_1000D176C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _BYTE v41[32];
  void *v42;
  _BYTE v43[40];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100014E10(&qword_1001E9520);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  }
  else
  {
    v2 = &_swiftEmptyDictionarySingleton;
  }
  v32 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v2);
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = (v5 - 1) & v5;
      v12 = __clz(__rbit64(v5)) | (v8 << 6);
      v13 = v8;
      goto LABEL_28;
    }
    v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v14 >= v31)
      goto LABEL_39;
    v15 = *(_QWORD *)(v32 + 8 * v14);
    v13 = v8 + 1;
    if (!v15)
    {
      v13 = v8 + 2;
      if (v8 + 2 >= v31)
        goto LABEL_39;
      v15 = *(_QWORD *)(v32 + 8 * v13);
      if (!v15)
      {
        v13 = v8 + 3;
        if (v8 + 3 >= v31)
          goto LABEL_39;
        v15 = *(_QWORD *)(v32 + 8 * v13);
        if (!v15)
        {
          v13 = v8 + 4;
          if (v8 + 4 >= v31)
            goto LABEL_39;
          v15 = *(_QWORD *)(v32 + 8 * v13);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v11 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v13 << 6);
LABEL_28:
    v17 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v12);
    sub_1000C113C(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v43);
    v42 = v17;
    sub_1000C113C((uint64_t)v43, (uint64_t)v41);
    v18 = v17;
    sub_100005440((uint64_t)&v42, &qword_1001EB288);
    if (!swift_dynamicCast(&v38, v41, (char *)&type metadata for Any + 8, &type metadata for AnyHashable, 6))
    {
      v40 = 0;
      v38 = 0u;
      v39 = 0u;

      sub_100005440((uint64_t)&v38, &qword_1001EC5D0);
      swift_release(v2);
      sub_1000D1BFC(a1);
      swift_release(v2);
      return 0;
    }
    v35 = v38;
    v36 = v39;
    v37 = v40;
    v19 = v2[5];
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v22 = v21;
    Hasher.init(_seed:)(&v34, v19);
    String.hash(into:)(&v34, v20, v22);
    v23 = Hasher._finalize()();
    result = swift_bridgeObjectRelease(v22);
    v24 = -1 << *((_BYTE *)v2 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)&v6[8 * (v25 >> 6)]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)&v6[8 * (v25 >> 6)])) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)&v6[8 * v26];
      }
      while (v30 == -1);
      v9 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    *(_QWORD *)(v2[6] + 8 * v9) = v18;
    v10 = v2[7] + 40 * v9;
    *(_OWORD *)v10 = v38;
    *(_OWORD *)(v10 + 16) = v39;
    *(_QWORD *)(v10 + 32) = v40;
    ++v2[2];
    v8 = v13;
    v5 = v11;
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v31)
  {
LABEL_39:
    swift_release(v2);
    sub_1000D1BFC(a1);
    return (uint64_t)v2;
  }
  v15 = *(_QWORD *)(v32 + 8 * v16);
  if (v15)
  {
    v13 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v13 >= v31)
      goto LABEL_39;
    v15 = *(_QWORD *)(v32 + 8 * v13);
    ++v16;
    if (v15)
      goto LABEL_27;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1000D1B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EB280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D1BC8(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_1000D1BFC(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000D1C04(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

id sub_1000D1C8C(id result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  id v5;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = *(id *)(*(_QWORD *)(a5 + 48) + 8 * a2);
    sub_1000A53CC(*(_QWORD *)(a5 + 56) + 40 * a2, (uint64_t)result);
    return v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1000D1D10(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakCopyInit(a2, a1);
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 8);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for HighlightConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for HighlightConfiguration(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *assignWithCopy for HighlightConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[2];
  v4 = a1[2];
  a1[2] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for HighlightConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for HighlightConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HighlightConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TranscriptViewTextUpdateHelper.AttributeUpdateInfo()
{
  return &type metadata for TranscriptViewTextUpdateHelper.AttributeUpdateInfo;
}

id sub_1000D1EA0()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TranscriptionAvailabilityProvider()), "init");
  qword_1001F6C40 = (uint64_t)result;
  return result;
}

char *sub_1000D1FB4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  objc_super v17;

  v1 = OBJC_IVAR____TtC10VoiceMemos33TranscriptionAvailabilityProvider_deviceIsSupportedSubject;
  LOBYTE(v16) = 0;
  v2 = sub_100014E10(&qword_1001EAC10);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = v0;
  *(_QWORD *)&v0[v1] = CurrentValueSubject.init(_:)(&v16);
  *(_QWORD *)&v3[OBJC_IVAR____TtC10VoiceMemos33TranscriptionAvailabilityProvider_cancellable] = 0;
  v4 = OBJC_IVAR____TtC10VoiceMemos33TranscriptionAvailabilityProvider_observers;
  v5 = sub_100014E10(&qword_1001EB2E8);
  v6 = swift_allocObject(v5, 24, 7);
  *(_QWORD *)(v6 + 16) = objc_msgSend((id)objc_opt_self(NSHashTable), "weakObjectsHashTable");
  *(_QWORD *)&v3[v4] = v6;

  v7 = (objc_class *)type metadata accessor for TranscriptionAvailabilityProvider();
  v17.receiver = v3;
  v17.super_class = v7;
  v8 = (char *)objc_msgSendSuper2(&v17, "init");
  v16 = *(_QWORD *)&v8[OBJC_IVAR____TtC10VoiceMemos33TranscriptionAvailabilityProvider_deviceIsSupportedSubject];
  v9 = v16;
  v10 = swift_allocObject(&unk_1001B0548, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, v8);
  v11 = sub_1000D2784();
  v12 = v8;
  swift_retain(v9);
  v13 = Publisher<>.sink(receiveValue:)(sub_1000D277C, v10, v2, v11);
  swift_release(v10);

  swift_release(v16);
  v14 = *(_QWORD *)&v12[OBJC_IVAR____TtC10VoiceMemos33TranscriptionAvailabilityProvider_cancellable];
  *(_QWORD *)&v12[OBJC_IVAR____TtC10VoiceMemos33TranscriptionAvailabilityProvider_cancellable] = v13;
  swift_release(v14);
  return v12;
}

void sub_1000D2138(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  _BYTE v15[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = *(_QWORD *)(Strong + OBJC_IVAR____TtC10VoiceMemos33TranscriptionAvailabilityProvider_observers);
    v7 = *(void **)(v6 + 16);
    swift_retain(v6);
    v8 = objc_msgSend(v7, "allObjects");
    v9 = sub_100014E10(&qword_1001EB2F8);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

    if ((unint64_t)v10 >> 62)
    {
      if (v10 < 0)
        v14 = v10;
      else
        v14 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v10);
      v11 = _CocoaArrayWrapper.endIndex.getter(v14);
      swift_bridgeObjectRelease(v10);
      if (v11)
        goto LABEL_4;
    }
    else
    {
      v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v11)
      {
LABEL_4:
        if (v11 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v11; ++i)
        {
          if ((v10 & 0xC000000000000001) != 0)
          {
            v13 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v10);
          }
          else
          {
            v13 = *(void **)(v10 + 8 * i + 32);
            swift_unknownObjectRetain(v13);
          }
          objc_msgSend(v13, "deviceTranscriptionSupportDidChange:", v2);
          swift_unknownObjectRelease(v13);
        }
      }
    }
    swift_release(v6);
    swift_bridgeObjectRelease(v10);

  }
}

uint64_t sub_1000D22D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[2] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[3] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[4] = v6;
  v4[5] = v7;
  return swift_task_switch(sub_1000D2340, v6, v7);
}

uint64_t sub_1000D2340()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  if (qword_1001E9058 != -1)
    swift_once(&qword_1001E9058, sub_1000EB6A4);
  v3 = (uint64_t (__cdecl *)())((char *)&dword_1001EC378 + dword_1001EC378);
  v1 = (_QWORD *)swift_task_alloc(unk_1001EC37C);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_1000D23C0;
  return v3();
}

uint64_t sub_1000D23C0(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_BYTE *)(*v1 + 57) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_1000D2418, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1000D2418()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(v0 + 57);
  v2 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 24));
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10VoiceMemos33TranscriptionAvailabilityProvider_deviceIsSupportedSubject);
  v4 = swift_retain(v3);
  *(_BYTE *)(v0 + 56) = RCTranscriptionFeatureFlagIsEnabled(v4) & v1;
  CurrentValueSubject.value.setter(v0 + 56);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D2568(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos33TranscriptionAvailabilityProvider_observers);
  v4 = *(void **)(v3 + 16);
  swift_retain(v3);
  if ((objc_msgSend(v4, "containsObject:", a1) & 1) == 0)
    objc_msgSend(*(id *)(v3 + 16), "addObject:", a1);
  return swift_release(v3);
}

id sub_1000D2628()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TranscriptionAvailabilityProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TranscriptionAvailabilityProvider()
{
  return objc_opt_self(_TtC10VoiceMemos33TranscriptionAvailabilityProvider);
}

uint64_t sub_1000D26C0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D26EC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1001EB2DC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100003A7C;
  return sub_1000D22D4(a1, v4, v5, v6);
}

uint64_t sub_1000D2758()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000D277C(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_1000D2138(a1, v1);
}

unint64_t sub_1000D2784()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001EB2F0;
  if (!qword_1001EB2F0)
  {
    v1 = sub_10000EE30(&qword_1001EAC10);
    result = swift_getWitnessTable(&protocol conformance descriptor for CurrentValueSubject<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001EB2F0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TranscriptViewLayoutHelper(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TranscriptViewLayoutHelper(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for TranscriptViewLayoutHelper()
{
  return &type metadata for TranscriptViewLayoutHelper;
}

uint64_t sub_1000D2838()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  void *Strong;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  uint64_t v16;
  uint64_t v17;
  CGRect v18;
  CGRect v19;

  result = swift_unknownObjectWeakLoadStrong(v0);
  if (result)
  {
    v2 = (void *)result;
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v0);
    if (Strong
      && (v4 = Strong,
          objc_msgSend(Strong, "adjustedContentInset"),
          v4,
          (v5 = (void *)swift_unknownObjectWeakLoadStrong(v0)) != 0))
    {
      v6 = v5;
      v7 = objc_msgSend(v5, "endOfDocument");
      objc_msgSend(v6, "caretRectForPosition:", v7);
      v9 = v8;
      v11 = v10;
      v13 = v12;
      v15 = v14;

      v18.origin.x = v9;
      v18.origin.y = v11;
      v18.size.width = v13;
      v18.size.height = v15;
      CGRectGetMaxY(v18);
      objc_msgSend(v6, "adjustedContentInset");
      objc_msgSend(v6, "bounds");
      CGRectGetHeight(v19);
      objc_msgSend(v6, "adjustedContentInset");

      objc_msgSend(v2, "contentOffset");
      v17 = v16;

      return v17;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

uint64_t sub_1000D29A4()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  void *Strong;
  void *v4;
  id v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double MaxY;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;

  result = swift_unknownObjectWeakLoadStrong(v0);
  if (result)
  {
    v2 = (void *)result;
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v0);
    if (!Strong)
      goto LABEL_8;
    v4 = Strong;
    v5 = objc_msgSend(Strong, "endOfDocument");
    objc_msgSend(v4, "caretRectForPosition:", v5);
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v13 = v12;

    v22.origin.x = v7;
    v22.origin.y = v9;
    v22.size.width = v11;
    v22.size.height = v13;
    MaxY = CGRectGetMaxY(v22);
    objc_msgSend(v4, "adjustedContentInset");
    v16 = -v15;
    objc_msgSend(v4, "bounds");
    v17 = MaxY - CGRectGetHeight(v23);
    objc_msgSend(v4, "adjustedContentInset");
    v19 = v18;

    if (v17 + v19 >= v16)
      v16 = v17 + v19;
    objc_msgSend(v2, "bounds");
    if (CGRectGetHeight(v24) > 0.0)
    {
      objc_msgSend(v2, "contentOffset");
      v21 = v20;

      return v16 < v21 || vabdd_f64(v21, v16) < 0.01;
    }
    else
    {
LABEL_8:

      return 0;
    }
  }
  return result;
}

void sub_1000D2AF8(void *a1)
{
  uint64_t v1;
  void *Strong;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  unsigned int v11;
  id v12;
  id v13;
  id v14;
  id v15;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v15 = Strong;
    v4 = objc_msgSend(Strong, "textLayoutManager");
    if (!v4)
    {
LABEL_14:

      return;
    }
    v5 = v4;
    v6 = objc_msgSend(a1, "endLocation");
    v7 = objc_msgSend(v5, "textViewportLayoutController");
    v8 = objc_msgSend(v7, "viewportRange");

    if (!v8)
      goto LABEL_12;
    v9 = v8;
    if ((objc_msgSend(v9, "isEmpty") & 1) == 0)
    {
      if (objc_msgSend(v9, "containsRange:", a1))
      {

      }
      else
      {
        v10 = objc_msgSend(v9, "endLocation");
        v11 = objc_msgSend(v10, "isEqual:", v6);
        swift_unknownObjectRelease(v10);

        if (!v11)
        {
LABEL_12:
          objc_msgSend(v5, "ensureLayoutForRange:", a1);

          swift_unknownObjectRelease(v6);
          goto LABEL_13;
        }
      }
      v12 = v9;
      v13 = objc_msgSend(v12, "location");
      v14 = objc_msgSend(objc_allocWithZone((Class)NSTextRange), "initWithLocation:endLocation:", v13, v6);
      swift_unknownObjectRelease(v13);
      if (v14)
      {
        objc_msgSend(v5, "ensureLayoutForRange:", v14);

        swift_unknownObjectRelease(v6);
        v8 = v12;
LABEL_13:

        goto LABEL_14;
      }
    }

    goto LABEL_12;
  }
}

uint64_t sub_1000D2CF4(CGFloat x, CGFloat y, CGFloat width, CGFloat height, uint64_t a5, uint64_t a6, CGRect *a7)
{
  CGRect v13;
  CGRect v14;
  CGRect v15;

  v14.origin.x = 0.0;
  v14.origin.y = 0.0;
  v14.size.width = 0.0;
  v14.size.height = 0.0;
  if (!CGRectEqualToRect(*a7, v14))
  {
    v15.origin.x = x;
    v15.origin.y = y;
    v15.size.width = width;
    v15.size.height = height;
    v13 = CGRectUnion(*a7, v15);
    x = v13.origin.x;
    y = v13.origin.y;
    width = v13.size.width;
    height = v13.size.height;
  }
  a7->origin.x = x;
  a7->origin.y = y;
  a7->size.width = width;
  a7->size.height = height;
  return 1;
}

uint64_t sub_1000D2D88()
{
  return 0x64726F6365527369;
}

uint64_t sub_1000D2DA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x64726F6365527369 && a2 == 0xEB00000000676E69)
  {
    result = swift_bridgeObjectRelease(0xEB00000000676E69);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64726F6365527369, 0xEB00000000676E69, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1000D2E54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D4468();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D2E7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D4468();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D2EA4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;

  v5 = sub_100014E10(&qword_1001EB410);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001B474(a1, v9);
  v11 = sub_1000D4468();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RecordingActivityAttributes.ContentState.CodingKeys, &type metadata for RecordingActivityAttributes.ContentState.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_10001B498(a1);
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = sub_10001B498(a1);
  *a2 = v13 & 1;
  return result;
}

uint64_t sub_1000D2FB8(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v3 = sub_100014E10(&qword_1001EB420);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_10001B474(a1, v8);
  v10 = sub_1000D4468();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RecordingActivityAttributes.ContentState.CodingKeys, &type metadata for RecordingActivityAttributes.ContentState.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int sub_1000D30A0()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000D30E4()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000D310C(uint64_t a1)
{
  Swift::UInt8 *v1;
  Swift::UInt8 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000D314C()
{
  return 0;
}

uint64_t sub_1000D3158@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_1000D3184(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D44AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D31AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D44AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D31D4(_QWORD *a1)
{
  return sub_10001B498(a1);
}

uint64_t sub_1000D31F8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v2 = sub_100014E10(&qword_1001EB428);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_10001B474(a1, v6);
  v8 = sub_1000D44AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RecordingActivityAttributes.CodingKeys, &type metadata for RecordingActivityAttributes.CodingKeys, v8, v6, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1000D32BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, _QWORD, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[2];

  v1 = type metadata accessor for ActivityPresentationOptions(0);
  v51 = *(_QWORD *)(v1 - 8);
  v52 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100014E10(&qword_1001EA0F0);
  __chkstk_darwin(v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100014E10(&qword_1001EB440);
  v49 = *(_QWORD *)(v7 - 8);
  v50 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v0 + 16);
  if (v10)
  {
    v11 = swift_retain(*(_QWORD *)(v0 + 16));
    v12 = Activity.id.getter(v11);
    v14 = v13;
    sub_1000D3F8C(v12, v13);
    swift_release(v10);
    swift_bridgeObjectRelease(v14);
  }
  v15 = v0;
  if (qword_1001E8F80 != -1)
    swift_once(&qword_1001E8F80, sub_1000B5218);
  v16 = type metadata accessor for Logger(0);
  v53 = sub_1000AACFC(v16, (uint64_t)qword_1001F6C20);
  v17 = Logger.logObject.getter(v53);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v55[0] = v20;
    *(_DWORD *)v19 = 136315138;
    v54 = sub_1001049A8(0x7463416E69676562, 0xEF29287974697669, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v19 + 4, v19 + 12);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s Requesting begin activity", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }

  LOBYTE(v55[0]) = 1;
  v21 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v6, 1, 1, v21);
  v22 = sub_1000D434C();
  v23 = sub_1000D4394();
  v24 = sub_1000D43DC();
  v25 = ActivityContent.init(state:staleDate:relevanceScore:)(v55, v6, &type metadata for RecordingActivityAttributes.ContentState, v22, v23, v24, 0.0);
  LODWORD(v22) = SBSIsSystemApertureAvailable(v25);
  v26 = sub_100014E10(&qword_1001EB448);
  v27 = type metadata accessor for ActivityPresentationOptions.ActivityPresentationDestination(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(_QWORD *)(v28 + 72);
  v30 = *(unsigned __int8 *)(v28 + 80);
  v31 = (v30 + 32) & ~v30;
  v32 = v15;
  if ((_DWORD)v22)
  {
    v33 = swift_allocObject(v26, v31 + v29, v30 | 7);
    *(_OWORD *)(v33 + 16) = xmmword_100188080;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104))(v33 + v31, enum case for ActivityPresentationOptions.ActivityPresentationDestination.systemAperture(_:), v27);
  }
  else
  {
    v33 = swift_allocObject(v26, v31 + 2 * v29, v30 | 7);
    *(_OWORD *)(v33 + 16) = xmmword_100187B90;
    v34 = *(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104);
    v34(v33 + v31, enum case for ActivityPresentationOptions.ActivityPresentationDestination.banner(_:), v27);
    v34(v33 + v31 + v29, enum case for ActivityPresentationOptions.ActivityPresentationDestination.lockscreen(_:), v27);
  }
  ActivityPresentationOptions.init(destinations:)(v33);
  ActivityPresentationOptions.shouldSuppressAlertContentOnLockScreen.setter(0);
  static String._unconditionallyBridgeFromObjectiveC(_:)(RCVoiceMemosBundleID);
  v36 = v35;
  v37 = sub_100014E10(&qword_1001EB450);
  v38 = static Activity.request(attributes:content:presentationOptions:platterTarget:contentSourceRequests:isEphemeral:isUnbounded:)(v37);
  swift_bridgeObjectRelease(v36);
  v39 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v15 + 16) = v38;
  v40 = swift_release(v39);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    v55[0] = v44;
    *(_DWORD *)v43 = 136315138;
    v54 = sub_1001049A8(0x7463416E69676562, 0xEF29287974697669, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v43 + 4, v43 + 12);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s Requested an activity successfully", v43, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v51 + 8))(v3, v52);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v9, v50);
  v45 = *(_QWORD *)(v32 + 16);
  if (!v45)
    return 0;
  v46 = swift_retain(v45);
  v47 = Activity.id.getter(v46);
  swift_release(v45);
  return v47;
}

uint64_t sub_1000D3A24(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v2 + 32) = v1;
  *(_BYTE *)(v2 + 117) = a1;
  v3 = sub_100014E10(&qword_1001EA0F0);
  *(_QWORD *)(v2 + 40) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100014E10(&qword_1001EB440);
  *(_QWORD *)(v2 + 48) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 56) = v5;
  *(_QWORD *)(v2 + 64) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 72) = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 80) = v7;
  *(_QWORD *)(v2 + 88) = v8;
  return swift_task_switch(sub_1000D3AE4, v7, v8);
}

uint64_t sub_1000D3AE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  NSObject *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD);
  uint64_t v24;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
  *(_QWORD *)(v0 + 96) = v1;
  if (v1)
  {
    *(_BYTE *)(v0 + 116) = *(_BYTE *)(v0 + 117);
    v2 = *(_QWORD *)(v0 + 40);
    v3 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
    v4 = sub_1000D434C();
    v5 = sub_1000D4394();
    v6 = sub_1000D43DC();
    swift_retain(v1);
    ActivityContent.init(state:staleDate:relevanceScore:)(v0 + 116, v2, &type metadata for RecordingActivityAttributes.ContentState, v4, v5, v6, 0.0);
    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_1000AACFC(v7, (uint64_t)qword_1001F6C20);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = *(unsigned __int8 *)(v0 + 117);
      v12 = swift_slowAlloc(18, -1);
      v13 = swift_slowAlloc(32, -1);
      v24 = v13;
      *(_DWORD *)v12 = 136315394;
      *(_QWORD *)(v0 + 24) = sub_1001049A8(0xD000000000000021, 0x80000001001846B0, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 12) = 1024;
      *(_DWORD *)(v0 + 112) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 116, v12 + 14, v12 + 18);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s Updating activity state: isRecording %{BOOL}d", (uint8_t *)v12, 0x12u);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    v23 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of Activity.update(_:)
                                         + async function pointer to dispatch thunk of Activity.update(_:));
    v14 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Activity.update(_:)
                                     + 1));
    *(_QWORD *)(v0 + 104) = v14;
    *v14 = v0;
    v14[1] = sub_1000D3ED4;
    return v23(*(_QWORD *)(v0 + 64));
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 72));
    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v16 = type metadata accessor for Logger(0);
    sub_1000AACFC(v16, (uint64_t)qword_1001F6C20);
    v17 = static os_log_type_t.error.getter();
    v18 = v17;
    v19 = Logger.logObject.getter(v17);
    if (os_log_type_enabled(v19, v18))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v24 = v21;
      *(_DWORD *)v20 = 136315138;
      *(_QWORD *)(v0 + 16) = sub_1001049A8(0xD000000000000021, 0x80000001001846B0, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v20 + 4, v20 + 12);
      _os_log_impl((void *)&_mh_execute_header, v19, v18, "%s Unable to update activity state. No activity in progress.", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }

    v22 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000D3ED4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 104));
  return swift_task_switch(sub_1000D3F20, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88));
}

uint64_t sub_1000D3F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v5 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D3F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for ActivityUIDismissalPolicy(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100014E10(&qword_1001EB438);
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v2 + 16);
  if (!v13)
    return 0;
  v14 = swift_retain(*(_QWORD *)(v2 + 16));
  v15 = Activity.id.getter(v14);
  if (v15 == a1 && v16 == a2)
  {
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v18 = v16;
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, a1, a2, 0);
    swift_bridgeObjectRelease(v18);
    if ((v19 & 1) == 0)
    {
      swift_release(v13);
      return 0;
    }
  }
  if (qword_1001E8F80 != -1)
    swift_once(&qword_1001E8F80, sub_1000B5218);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_1000AACFC(v21, (uint64_t)qword_1001F6C20);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v34 = v6;
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v33 = v7;
    v27 = v26;
    v36 = v26;
    *(_DWORD *)v25 = 136315138;
    v35 = sub_1001049A8(0xD000000000000018, 0x8000000100184690, &v36);
    v6 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v25 + 4, v25 + 12);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s Requesting end activity", v25, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    v28 = v27;
    v7 = v33;
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }

  v29 = sub_100014E10(&qword_1001EB440);
  v20 = 1;
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v12, 1, 1, v29);
  static ActivityUIDismissalPolicy.immediate.getter(v30);
  dispatch thunk of Activity.endSync(_:dismissalPolicy:)(v12, v9);
  swift_release(v13);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_1000D44F0((uint64_t)v12);
  v31 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  swift_release(v31);
  return v20;
}

uint64_t sub_1000D4264()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for ActivityManager()
{
  return objc_opt_self(_TtC10VoiceMemos15ActivityManager);
}

ValueMetadata *type metadata accessor for RecordingActivityAttributes()
{
  return &type metadata for RecordingActivityAttributes;
}

unint64_t sub_1000D42BC()
{
  unint64_t result;

  result = qword_1001EB3E0;
  if (!qword_1001EB3E0)
  {
    result = swift_getWitnessTable(&unk_100189CE4, &type metadata for RecordingActivityAttributes);
    atomic_store(result, (unint64_t *)&qword_1001EB3E0);
  }
  return result;
}

unint64_t sub_1000D4304()
{
  unint64_t result;

  result = qword_1001EB3E8;
  if (!qword_1001EB3E8)
  {
    result = swift_getWitnessTable(&unk_100189CBC, &type metadata for RecordingActivityAttributes);
    atomic_store(result, (unint64_t *)&qword_1001EB3E8);
  }
  return result;
}

unint64_t sub_1000D434C()
{
  unint64_t result;

  result = qword_1001EB3F0;
  if (!qword_1001EB3F0)
  {
    result = swift_getWitnessTable(&unk_100189DEC, &type metadata for RecordingActivityAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_1001EB3F0);
  }
  return result;
}

unint64_t sub_1000D4394()
{
  unint64_t result;

  result = qword_1001EB3F8;
  if (!qword_1001EB3F8)
  {
    result = swift_getWitnessTable(&unk_100189DC4, &type metadata for RecordingActivityAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_1001EB3F8);
  }
  return result;
}

unint64_t sub_1000D43DC()
{
  unint64_t result;

  result = qword_1001EB400;
  if (!qword_1001EB400)
  {
    result = swift_getWitnessTable(&unk_100189D5C, &type metadata for RecordingActivityAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_1001EB400);
  }
  return result;
}

unint64_t sub_1000D4424()
{
  unint64_t result;

  result = qword_1001EB408;
  if (!qword_1001EB408)
  {
    result = swift_getWitnessTable(&unk_100189D9C, &type metadata for RecordingActivityAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_1001EB408);
  }
  return result;
}

unint64_t sub_1000D4468()
{
  unint64_t result;

  result = qword_1001EB418;
  if (!qword_1001EB418)
  {
    result = swift_getWitnessTable(&unk_100189F94, &type metadata for RecordingActivityAttributes.ContentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001EB418);
  }
  return result;
}

unint64_t sub_1000D44AC()
{
  unint64_t result;

  result = qword_1001EB430;
  if (!qword_1001EB430)
  {
    result = swift_getWitnessTable(&unk_100189F44, &type metadata for RecordingActivityAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001EB430);
  }
  return result;
}

uint64_t sub_1000D44F0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100014E10(&qword_1001EB438);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for RecordingActivityAttributes.CodingKeys()
{
  return &type metadata for RecordingActivityAttributes.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for RecordingActivityAttributes.ContentState.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000D4580 + 4 * asc_100189C40[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000D45A0 + 4 * byte_100189C45[v4]))();
}

_BYTE *sub_1000D4580(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000D45A0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000D45A8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000D45B0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000D45B8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000D45C0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RecordingActivityAttributes.ContentState.CodingKeys()
{
  return &type metadata for RecordingActivityAttributes.ContentState.CodingKeys;
}

uint64_t getEnumTagSinglePayload for RecordingActivityAttributes.ContentState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RecordingActivityAttributes.ContentState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000D46C8 + 4 * byte_100189C4F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000D46FC + 4 * byte_100189C4A[v4]))();
}

uint64_t sub_1000D46FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D4704(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D470CLL);
  return result;
}

uint64_t sub_1000D4718(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D4720);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000D4724(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D472C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecordingActivityAttributes.ContentState()
{
  return &type metadata for RecordingActivityAttributes.ContentState;
}

unint64_t sub_1000D474C()
{
  unint64_t result;

  result = qword_1001EB458;
  if (!qword_1001EB458)
  {
    result = swift_getWitnessTable(&unk_100189ECC, &type metadata for RecordingActivityAttributes.ContentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001EB458);
  }
  return result;
}

unint64_t sub_1000D4794()
{
  unint64_t result;

  result = qword_1001EB460;
  if (!qword_1001EB460)
  {
    result = swift_getWitnessTable(&unk_100189EF4, &type metadata for RecordingActivityAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001EB460);
  }
  return result;
}

unint64_t sub_1000D47DC()
{
  unint64_t result;

  result = qword_1001EB468;
  if (!qword_1001EB468)
  {
    result = swift_getWitnessTable(&unk_100189F1C, &type metadata for RecordingActivityAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001EB468);
  }
  return result;
}

unint64_t sub_1000D4824()
{
  unint64_t result;

  result = qword_1001EB470;
  if (!qword_1001EB470)
  {
    result = swift_getWitnessTable(&unk_100189E3C, &type metadata for RecordingActivityAttributes.ContentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001EB470);
  }
  return result;
}

unint64_t sub_1000D486C()
{
  unint64_t result;

  result = qword_1001EB478;
  if (!qword_1001EB478)
  {
    result = swift_getWitnessTable(&unk_100189E64, &type metadata for RecordingActivityAttributes.ContentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001EB478);
  }
  return result;
}

uint64_t sub_1000D48B0()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

__n128 sub_1000D48E0@<Q0>(uint64_t a1@<X8>)
{
  __n128 result;
  __int128 v3;
  uint64_t v4;
  __n128 v5;
  __int128 v6;

  IntentParameter.wrappedValue.getter(&v4);
  result = v5;
  v3 = v6;
  *(_QWORD *)a1 = v4;
  *(__n128 *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 24) = v3;
  return result;
}

uint64_t sub_1000D4924()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_1000D4954(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  id v6;
  uint64_t result;
  _BYTE v8[16];
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  v6 = objc_msgSend(v2, "context");
  v9 = &v12;
  v10 = a1;
  v11 = a2;
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1000DEBCC, v8, (char *)&type metadata for () + 8);

  result = v12;
  if (v3)
    return swift_bridgeObjectRelease(v12);
  if (!v12)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "VoiceMemos/RCSavedRecordingsModel+Extensions.swift", 50, 2, 17, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D4A30(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  id v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[16];
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = 1;
  v6 = objc_msgSend(v2, "context");
  v10 = &v13;
  v11 = a1;
  v12 = a2;
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1000DEB58, v9, (char *)&type metadata for () + 8);

  v7 = v13;
  if (v3)
  {
    sub_1000DEBA4((id)v13);
    return v7;
  }
  if (v13 != 1)
    return v7;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "VoiceMemos/RCSavedRecordingsModel+Extensions.swift", 50, 2, 17, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000D4B1C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = result;
    v17 = a2;
    v18 = (id)objc_opt_self(RCApplicationModel);
    swift_bridgeObjectRetain(v3);
    v16 = v3;
    v4 = (uint64_t *)(v3 + 64);
    do
    {
      v6 = *(v4 - 3);
      v7 = *(v4 - 2);
      v8 = *(v4 - 1);
      v9 = *v4;
      swift_bridgeObjectRetain(v6);
      swift_retain(v7);
      swift_retain(v8);
      swift_retain(v9);
      v10 = objc_msgSend(v18, "sharedApplicationModel");
      v11 = String._bridgeToObjectiveC()();
      v12 = objc_msgSend(v10, "compositionLoadedForSavedRecordingUUID:", v11);
      swift_release(v9);
      swift_release(v8);
      swift_release(v7);
      swift_bridgeObjectRelease(v6);

      if (v12)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v15 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v14 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v15 >= v14 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v5 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v12);
        specialized Array._endMutation()(v5);
      }
      v4 += 5;
      --v2;
    }
    while (v2);
    result = swift_bridgeObjectRelease(v16);
    a2 = v17;
  }
  *a2 = &_swiftEmptyArrayStorage;
  return result;
}

id sub_1000D4CB0()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  unsigned int v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  NSString v21;
  void *v23;
  _QWORD v24[3];
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[16];
  uint64_t v29;
  id v30[2];

  v1 = objc_msgSend((id)objc_opt_self(RCApplicationModel), "sharedApplicationModel");
  v29 = v0;
  v2 = (void *)sub_1000D4A30((uint64_t)sub_1000DEB40, (uint64_t)v28);

  v3 = objc_msgSend(objc_allocWithZone((Class)NSItemProvider), "init");
  if (v2)
  {
    v4 = v2;
    if (objc_msgSend(v4, "compositionIsShareable"))
    {
      v5 = objc_msgSend(objc_allocWithZone((Class)RCShareableComposition), "initWithComposition:", v4);
      v30[0] = 0;
      v6 = objc_msgSend(v5, "registerAudioFileRepresentationWithItemProvider:error:", v3, v30);
      v7 = v30[0];
      if (v6)
      {
        v8 = v30[0];
      }
      else
      {
        v9 = v30[0];
        v10 = _convertNSErrorToError(_:)(v7);

        swift_willThrow(v11);
        if (qword_1001E8F80 != -1)
          swift_once(&qword_1001E8F80, sub_1000B5218);
        v12 = type metadata accessor for Logger(0);
        sub_1000AACFC(v12, (uint64_t)qword_1001F6C20);
        swift_errorRetain(v10);
        v13 = swift_errorRetain(v10);
        v14 = Logger.logObject.getter(v13);
        v15 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v14, v15))
        {
          v16 = swift_slowAlloc(22, -1);
          v23 = (void *)swift_slowAlloc(64, -1);
          v30[0] = v23;
          *(_DWORD *)v16 = 136315394;
          v26 = sub_1001049A8(0x766F72506D657469, 0xEC00000072656469, (uint64_t *)v30);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v16 + 4, v16 + 12);
          *(_WORD *)(v16 + 12) = 2080;
          swift_getErrorValue(v10, v25, v24);
          v17 = Error.localizedDescription.getter(v24[1], v24[2]);
          v19 = v18;
          v26 = sub_1001049A8(v17, v18, (uint64_t *)v30);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v16 + 14, v16 + 22);
          swift_bridgeObjectRelease(v19);
          swift_errorRelease(v10);
          swift_errorRelease(v10);
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s Unable to register audio file representation. Error: %s", (uint8_t *)v16, 0x16u);
          swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v23, -1, -1);
          swift_slowDealloc(v16, -1, -1);

          swift_errorRelease(v10);
        }
        else
        {
          swift_errorRelease(v10);
          swift_errorRelease(v10);
          swift_errorRelease(v10);

        }
      }
      EntityProperty.wrappedValue.getter(v30);
      v20 = v30[1];
      v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
      objc_msgSend(v3, "setSuggestedName:", v21);

    }
  }
  return v3;
}

void sub_1000D5030(_QWORD *a1@<X8>)
{
  id v2;
  NSString v3;
  id v4;

  v2 = objc_msgSend((id)objc_opt_self(RCApplicationModel), "sharedApplicationModel");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "compositionLoadedForSavedRecordingUUID:", v3);

  *a1 = v4;
}

uint64_t sub_1000D50C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v18;

  v0 = type metadata accessor for String.LocalizationValue.Placeholder(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100014E10(&qword_1001EB758);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_1000B52C4(v14, qword_1001F6C48);
  sub_1000AACFC(v14, (uint64_t)qword_1001F6C48);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000015, 0x8000000100184FF0);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(11, 1);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for String.LocalizationValue.Placeholder.int(_:), v0);
  String.LocalizationValue.StringInterpolation.appendInterpolation(placeholder:specifier:)(v3, 1684827173, 0xE400000000000000);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v16._countAndFlagsBits = 0x4944524F43455220;
  v16._object = (void *)0xEB0000000053474ELL;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v16);
  LocalizedStringResource.init(stringInterpolation:)(v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v13, v9);
}

id sub_1000D52D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  Swift::String v20;
  void *object;
  Swift::String v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  id result;
  void *v33;
  Class isa;
  NSString v35;
  id v36;
  uint64_t v37;
  void *v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;

  v57 = a1;
  v1 = sub_100014E10(&qword_1001EB9C0);
  __chkstk_darwin(v1);
  v56 = (char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100014E10(&qword_1001EB758);
  __chkstk_darwin(v3);
  v55 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v58 = *(_QWORD *)(v5 - 8);
  v59 = v5;
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v54 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v52 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v52 - v18;
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v20);
  EntityProperty.wrappedValue.getter(&v60);
  object = v60._object;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v60);
  swift_bridgeObjectRelease(object);
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v22);
  v53 = v19;
  LocalizedStringResource.init(stringInterpolation:)(v10);
  v23 = EntityProperty.wrappedValue.getter(&v60);
  v25 = (id)RCLocalizedDuration(v23, v24, round(*(double *)&v60._countAndFlagsBits));
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;

  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(49, 1);
  v29._object = (void *)0x8000000100184F70;
  v29._countAndFlagsBits = 0xD000000000000031;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v29);
  v52 = v26;
  v30._countAndFlagsBits = v26;
  v30._object = v28;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v30);
  v31._countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v31);
  LocalizedStringResource.init(stringInterpolation:)(v10);
  result = objc_msgSend((id)objc_opt_self(RCRecorderStyleProvider), "sharedStyleProvider");
  if (result)
  {
    v33 = result;
    EntityProperty.wrappedValue.getter(v7);
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_QWORD *, uint64_t))(v58 + 8))(v7, v59);
    v35 = String._bridgeToObjectiveC()();
    v36 = objc_msgSend(v33, "formattedDateStringFromDate:forUUID:", isa, v35);

    if (v36)
    {
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v39 = v38;

      String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(65, 2);
      v40._countAndFlagsBits = 0xD000000000000036;
      v40._object = (void *)0x8000000100184FB0;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v40);
      v41._countAndFlagsBits = v37;
      v41._object = v39;
      String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v41);
      swift_bridgeObjectRelease(v39);
      v42._countAndFlagsBits = 0x495441525544202CLL;
      v42._object = (void *)0xEB00000000204E4FLL;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v42);
      v43._countAndFlagsBits = v52;
      v43._object = v28;
      String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v43);
      swift_bridgeObjectRelease(v28);
      v44._countAndFlagsBits = 0;
      v44._object = (void *)0xE000000000000000;
      String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v44);
      v45 = v54;
      LocalizedStringResource.init(stringInterpolation:)(v10);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v45, v11);
      v46 = v56;
    }
    else
    {
      swift_bridgeObjectRelease(v28);
      v46 = v56;
      v45 = v54;
    }
    v47 = v55;
    v48 = v53;
    v49 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v49(v45, v53, v11);
    v49(v47, v17, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v47, 0, 1, v11);
    v50 = type metadata accessor for DisplayRepresentation.Image(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v46, 1, 1, v50);
    DisplayRepresentation.init(title:subtitle:image:)(v45, v47, v46);
    v51 = *(void (**)(char *, uint64_t))(v12 + 8);
    v51(v17, v11);
    return (id)((uint64_t (*)(char *, uint64_t))v51)(v48, v11);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000D5778(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  uint64_t v5;
  void *v6;
  Class isa;
  id v8;
  _QWORD v9[4];

  v4 = objc_msgSend((id)objc_opt_self(RCApplicationModel), "sharedApplicationModel");
  v9[2] = a1;
  v5 = sub_1000D4954((uint64_t)sub_1000DEBB4, (uint64_t)v9);

  v6 = (void *)objc_opt_self(VMActivityItemsConfigurationHelper);
  sub_100005310(0, &qword_1001EB9C8, RCComposition_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  v8 = objc_msgSend(v6, "activityItemsConfigurationForCompositions:", isa);

  *a2 = v8;
}

id sub_1000D585C()
{
  return sub_1000D4CB0();
}

void *sub_1000D5894()
{
  return &protocol witness table for String;
}

uint64_t sub_1000D58A0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6160(&qword_1001E8FA0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1001F6C48, (uint64_t)sub_1000D50C4, a1);
}

uint64_t sub_1000D58C4()
{
  return sub_10000EDB0(&qword_1001EB4C8, &qword_1001EB4D0, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_1000D58F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100014A2C();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_1000D592C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001C100();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_1000D5964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1001EB9B0 + dword_1001EB9B0);
  v6 = (_QWORD *)swift_task_alloc(unk_1001EB9B4);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_1000DEC20;
  return v8(a2, a3);
}

uint64_t sub_1000D59D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1001EB9A8 + dword_1001EB9A8);
  v3 = (_QWORD *)swift_task_alloc(unk_1001EB9AC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000D5A34;
  return v5(a1);
}

uint64_t sub_1000D5A34(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_1000D5A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001B80C;
  return EntityQuery.suggestedEntities()(a1, a2, a3);
}

uint64_t sub_1000D5AF4()
{
  return sub_1000DE9B4(&qword_1001EB510, qword_1001EB518, (void (*)(void))sub_10001B31C, (uint64_t)&protocol conformance descriptor for <A> [A]);
}

uint64_t sub_1000D5B28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10001B28C();
  *v5 = v2;
  v5[1] = sub_10001B80C;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_1000D5B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to DynamicOptionsProvider.defaultResult()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001B80C;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

unint64_t sub_1000D5C08()
{
  unint64_t result;

  result = qword_1001EB530;
  if (!qword_1001EB530)
  {
    result = swift_getWitnessTable(&unk_10018A498, &type metadata for CreateRecording);
    atomic_store(result, (unint64_t *)&qword_1001EB530);
  }
  return result;
}

uint64_t sub_1000D5C4C(uint64_t a1)
{
  return sub_1000D8400(a1, qword_1001F6C60, 0xD00000000000001DLL, 0x8000000100184F30);
}

uint64_t sub_1000D5C70()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_1000D5CA0()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_1000D5CC0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t KeyPath;
  uint64_t v9;
  Swift::String v10;
  uint64_t v12;

  v0 = sub_100014E10(&qword_1001EB990);
  __chkstk_darwin(v0);
  v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100014E10(&qword_1001EB998);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001C5B8();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(42, 1, &type metadata for CreateRecording, v6);
  v7._object = (void *)0x8000000100184F00;
  v7._countAndFlagsBits = 0xD00000000000002ALL;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_10018B638);
  v9 = sub_100014E10(&qword_1001EB9A0);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v9);
  swift_release(KeyPath);
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v10);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for CreateRecording, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for CreateRecording, v6);
}

uint64_t sub_1000D5E28(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[4] = a1;
  v2[5] = a2;
  v3 = type metadata accessor for MainActor(0);
  v2[6] = v3;
  v2[7] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[8] = v4;
  v2[9] = v5;
  return swift_task_switch(sub_1000D5E98, v4, v5);
}

uint64_t sub_1000D5E98()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;

  v1 = objc_msgSend((id)objc_opt_self(RecorderAppDelegate), "sharedAppDelegate");
  if (v1
    && (v2 = v1, v3 = objc_msgSend(v1, "defaultSceneDelegate"), v2, v3)
    && (v4 = objc_msgSend(v3, "mainViewController"),
        *(_QWORD *)(v0 + 80) = v4,
        v3,
        v4))
  {
    v6 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 88) = static MainActor.shared.getter(v5);
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
    *(_QWORD *)(v0 + 96) = v7;
    *(_QWORD *)(v0 + 104) = v8;
    return swift_task_switch(sub_1000D5FC4, v7, v8);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 56);
    v11 = sub_1000B2C70();
    v12 = swift_allocError(&type metadata for RCAppIntentsGenericError, v11, 0, 0);
    *v13 = 0;
    swift_willThrow(v12);
    swift_release(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000D5FC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  IntentParameter.wrappedValue.getter(v0 + 2);
  v2 = v0[2];
  v1 = v0[3];
  v0[14] = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_1001ED324);
  v0[15] = v3;
  *v3 = v0;
  v3[1] = sub_1000D6030;
  return sub_100100E9C(v2, v1);
}

uint64_t sub_1000D6030()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[12];
    v5 = v2[13];
    v6 = sub_1000ADEA4;
  }
  else
  {
    swift_bridgeObjectRelease(v2[14]);
    v4 = v2[12];
    v5 = v2[13];
    v6 = sub_1000D609C;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1000D609C()
{
  _QWORD *v0;

  swift_release(v0[11]);
  return swift_task_switch(sub_1000D60D4, v0[8], v0[9]);
}

uint64_t sub_1000D60D4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 80);
  v2 = swift_release(*(_QWORD *)(v0 + 56));
  static IntentResult.result<>()(v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D611C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100198A08, 1);
}

uint64_t sub_1000D612C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001989E0, 1);
}

uint64_t sub_1000D613C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6160(&qword_1001E8FA8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001F6C60, (uint64_t)sub_1000D5C4C, a1);
}

uint64_t sub_1000D6160@<X0>(_QWORD *a1@<X2>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = a2(0);
  v9 = sub_1000AACFC(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v9, v8);
}

uint64_t sub_1000D61E0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1001EB98C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001B80C;
  return sub_1000D5E28(a1, v4);
}

uint64_t sub_1000D6238@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100014240();
  *a1 = result;
  return result;
}

unint64_t sub_1000D6260()
{
  unint64_t result;

  result = qword_1001EB550;
  if (!qword_1001EB550)
  {
    result = swift_getWitnessTable(&unk_10018A624, &type metadata for StopRecording);
    atomic_store(result, (unint64_t *)&qword_1001EB550);
  }
  return result;
}

unint64_t sub_1000D62A8()
{
  unint64_t result;

  result = qword_1001EB558;
  if (!qword_1001EB558)
  {
    result = swift_getWitnessTable(&unk_10018A64C, &type metadata for StopRecording);
    atomic_store(result, (unint64_t *)&qword_1001EB558);
  }
  return result;
}

uint64_t sub_1000D62EC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001989B8, 1);
}

uint64_t sub_1000D62FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D82CC(a1, a2, a3, (uint64_t (*)(void))sub_1000D6310, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

unint64_t sub_1000D6310()
{
  unint64_t result;

  result = qword_1001EB560;
  if (!qword_1001EB560)
  {
    result = swift_getWitnessTable(&unk_10018A594, &type metadata for StopRecording);
    atomic_store(result, (unint64_t *)&qword_1001EB560);
  }
  return result;
}

uint64_t sub_1000D6354(uint64_t a1)
{
  return sub_1000D8400(a1, qword_1001F6C78, 0xD00000000000001BLL, 0x8000000100184EE0);
}

uint64_t sub_1000D6378(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 24) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000D63E4, v3, v4);
}

uint64_t sub_1000D63E4()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t (*v5)(void);
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v10;
  uint64_t v11;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = objc_msgSend((id)objc_opt_self(RecorderAppDelegate), "sharedAppDelegate");
  if (!v1
    || (v2 = v1, v3 = objc_msgSend(v1, "defaultSceneDelegate"),
                 v2,
                 !v3)
    || (v4 = objc_msgSend(v3, "mainViewController"), v3, !v4))
  {
    v6 = sub_1000B2C70();
    v7 = swift_allocError(&type metadata for RCAppIntentsGenericError, v6, 0, 0);
    *v8 = 0;
    swift_willThrow(v7);
LABEL_7:
    v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  if ((objc_msgSend(v4, "isRecording") & 1) == 0)
  {
    v10 = sub_1000DEAD4();
    v11 = swift_allocError(&type metadata for StopRecordingError, v10, 0, 0);
    swift_willThrow(v11);

    goto LABEL_7;
  }
  static IntentResult.result<>()(objc_msgSend(v4, "performAction:atPosition:forUUID:sourceController:source:", 4, 0, 0, 0, 0.0));

  v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1000D6538@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6160(&qword_1001E8FB0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001F6C78, (uint64_t)sub_1000D6354, a1);
}

uint64_t sub_1000D6560(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1001EB974);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001B80C;
  return sub_1000D6378(a1);
}

uint64_t sub_1000D65B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D6310();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_1000D65DC()
{
  unint64_t result;

  result = qword_1001EB570;
  if (!qword_1001EB570)
  {
    result = swift_getWitnessTable(&unk_10018A6B8, &type metadata for ToggleRecording);
    atomic_store(result, (unint64_t *)&qword_1001EB570);
  }
  return result;
}

unint64_t sub_1000D6624()
{
  unint64_t result;

  result = qword_1001ED340;
  if (!qword_1001ED340)
  {
    result = swift_getWitnessTable(&unk_10018A6E0, &type metadata for ToggleRecording);
    atomic_store(result, (unint64_t *)&qword_1001ED340);
  }
  return result;
}

unint64_t sub_1000D666C()
{
  unint64_t result;

  result = qword_1001EB578;
  if (!qword_1001EB578)
  {
    result = swift_getWitnessTable(&unk_10018A770, &type metadata for ToggleRecording);
    atomic_store(result, (unint64_t *)&qword_1001EB578);
  }
  return result;
}

unint64_t sub_1000D66B4()
{
  unint64_t result;

  result = qword_1001EB580;
  if (!qword_1001EB580)
  {
    result = swift_getWitnessTable(&unk_10018A798, &type metadata for ToggleRecording);
    atomic_store(result, (unint64_t *)&qword_1001EB580);
  }
  return result;
}

uint64_t sub_1000D66F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100198990, 1);
}

uint64_t sub_1000D6708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D82CC(a1, a2, a3, (uint64_t (*)(void))sub_1000D6624, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t sub_1000D671C(uint64_t a1)
{
  return sub_1000D8400(a1, qword_1001F6C90, 0xD00000000000001DLL, 0x8000000100184EC0);
}

uint64_t sub_1000D6740(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[2] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[3] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[4] = v3;
  v1[5] = v4;
  return swift_task_switch(sub_1000D67AC, v3, v4);
}

uint64_t sub_1000D67AC()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v1 = objc_msgSend((id)objc_opt_self(RecorderAppDelegate), "sharedAppDelegate");
  if (v1
    && (v2 = v1, v3 = objc_msgSend(v1, "defaultSceneDelegate"), v2, v3)
    && (v4 = objc_msgSend(v3, "mainViewController"),
        *(_QWORD *)(v0 + 48) = v4,
        v3,
        v4))
  {
    v5 = (_QWORD *)swift_task_alloc(dword_1001ED33C);
    *(_QWORD *)(v0 + 56) = v5;
    *v5 = v0;
    v5[1] = sub_1000D68C0;
    return sub_100100448((uint64_t)v4);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 24);
    v8 = sub_1000B2C70();
    v9 = swift_allocError(&type metadata for RCAppIntentsGenericError, v8, 0, 0);
    *v10 = 0;
    swift_willThrow(v9);
    swift_release(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000D68C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000D6964;
  else
    v4 = sub_1000D6920;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1000D6920()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 48);
  v2 = swift_release(*(_QWORD *)(v0 + 24));
  static IntentResult.result<>()(v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D6964()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 24));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D69A0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6160(&qword_1001E8FB8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001F6C90, (uint64_t)sub_1000D671C, a1);
}

uint64_t sub_1000D69C4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1001EB96C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001B80C;
  return sub_1000D6740(a1);
}

uint64_t sub_1000D6A14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D6624();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_1000D6A40()
{
  unint64_t result;

  result = qword_1001EB590;
  if (!qword_1001EB590)
  {
    result = swift_getWitnessTable(&unk_10018A7F4, &type metadata for DeleteRecording);
    atomic_store(result, (unint64_t *)&qword_1001EB590);
  }
  return result;
}

uint64_t sub_1000D6A84(uint64_t a1)
{
  return sub_1000D8400(a1, qword_1001F6CA8, 0xD00000000000001DLL, 0x8000000100184EA0);
}

uint64_t sub_1000D6AA8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[4] = a1;
  v2[5] = a2;
  v3 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  v2[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LocalizedStringResource(0);
  v2[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[8] = v5;
  v2[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MainActor(0);
  v2[10] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v2[11] = v7;
  v2[12] = v8;
  return swift_task_switch(sub_1000D6B5C, v7, v8);
}

uint64_t sub_1000D6B5C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v1 = IntentParameter.wrappedValue.getter(v0 + 2);
  v2 = v0[2];
  v0[13] = v2;
  v3 = IntentParameter.projectedValue.getter(v1);
  v0[14] = v3;
  v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1001EBC08 + dword_1001EBC08);
  v4 = (_QWORD *)swift_task_alloc(unk_1001EBC0C);
  v0[15] = v4;
  *v4 = v0;
  v4[1] = sub_1000D6BE0;
  return v6(v2, v3);
}

uint64_t sub_1000D6BE0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 112);
  v3 = *(_QWORD *)(*v1 + 120);
  v5 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 128) = a1;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  return swift_task_switch(sub_1000D6C54, *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
}

uint64_t sub_1000D6C54()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = v0[16];
  v2 = v0[6];
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(25, 1);
  v3._object = (void *)0x8000000100182FB0;
  v3._countAndFlagsBits = 0xD000000000000019;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v3);
  v0[3] = *(_QWORD *)(v1 + 16);
  String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(v0 + 3, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v4);
  LocalizedStringResource.init(stringInterpolation:)(v2);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1001EB960 + dword_1001EB960);
  v5 = (_QWORD *)swift_task_alloc(unk_1001EB964);
  v0[17] = v5;
  *v5 = v0;
  v5[1] = sub_1000D6D3C;
  return v7(v0[5], v0[9]);
}

uint64_t sub_1000D6D3C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(v2[16]);
    v4 = v2[11];
    v5 = v2[12];
    v6 = sub_1000D6E88;
  }
  else
  {
    v4 = v2[11];
    v5 = v2[12];
    v6 = sub_1000D6DA8;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1000D6DA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  Class isa;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 80));
  v6 = objc_msgSend((id)objc_opt_self(RCRecordingsModelInteractor), "sharedRecordingsModelInteractor");
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v1);
  objc_msgSend(v6, "deleteRecordingsWithUUIDs:", isa);

  static IntentResult.result<>()(v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D6E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 80));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D6EEC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2[3] = a2;
  v4 = type metadata accessor for ConfirmationActionName(0);
  v2[4] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[5] = v5;
  v2[6] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100014E10(&qword_1001EA1E8);
  v2[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[8] = v7;
  v2[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalizedStringResource(0);
  v2[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[11] = v9;
  v2[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for IntentDialog(0);
  v2[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[14] = v11;
  v2[15] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[2] = a1;
  v12 = type metadata accessor for MainActor(0);
  v2[16] = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v12, &protocol witness table for MainActor);
  v2[17] = v13;
  v2[18] = v14;
  return swift_task_switch(sub_1000D7004, v13, v14);
}

uint64_t sub_1000D7004()
{
  uint64_t v0;
  id v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = objc_msgSend(v1, "rc_deletionIsImmediate");

  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 120);
    v4 = *(_QWORD *)(v0 + 96);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 16))(v4, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 80));
    IntentDialog.init(_:)(v4);
    v5 = static IntentResult.result<>(dialog:)(v3);
    static ConfirmationActionName.continue.getter(v5);
    v6 = (_QWORD *)swift_task_alloc(async function pointer to AppIntent.requestConfirmation<A>(result:confirmationActionName:showPrompt:)[1]);
    *(_QWORD *)(v0 + 152) = v6;
    v7 = sub_10001C4BC();
    v8 = sub_10000EDB0(&qword_1001EA1F0, &qword_1001EA1E8, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
    *v6 = v0;
    v6[1] = sub_1000D7174;
    return AppIntent.requestConfirmation<A>(result:confirmationActionName:showPrompt:)(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48), 1, &type metadata for DeleteRecording, *(_QWORD *)(v0 + 56), v7, v8);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 128));
    v10 = *(_QWORD *)(v0 + 96);
    v11 = *(_QWORD *)(v0 + 72);
    v12 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000D7174()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 152);
  v5 = *(_QWORD *)(*v1 + 64);
  v4 = *(_QWORD *)(*v1 + 72);
  v7 = *(_QWORD *)(*v1 + 48);
  v6 = *(_QWORD *)(*v1 + 56);
  v8 = *(_QWORD *)(*v1 + 32);
  v9 = *(_QWORD *)(*v1 + 40);
  *(_QWORD *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v10 = sub_1000D7294;
  else
    v10 = sub_1000D7218;
  return swift_task_switch(v10, *(_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 144));
}

uint64_t sub_1000D7218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  swift_release(*(_QWORD *)(v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D7294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D7318()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_1000D734C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100198968, 1);
}

uint64_t sub_1000D735C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D82CC(a1, a2, a3, (uint64_t (*)(void))sub_10001C4BC, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t sub_1000D7370@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6160(&qword_1001E8FC0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001F6CA8, (uint64_t)sub_1000D6A84, a1);
}

uint64_t sub_1000D7394(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1001EB95C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001B80C;
  return sub_1000D6AA8(a1, v4);
}

uint64_t sub_1000D73EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000DD044();
  *a1 = result;
  return result;
}

uint64_t sub_1000D7410(uint64_t a1)
{
  return sub_1000D7F70(a1, qword_1001F6CC0, 0xD00000000000001BLL, 0x8000000100184E80);
}

uint64_t sub_1000D7434(char *a1, char *a2)
{
  return sub_1001064C4(*a1, *a2);
}

unint64_t sub_1000D7444()
{
  unint64_t result;

  result = qword_1001EB5B0;
  if (!qword_1001EB5B0)
  {
    result = swift_getWitnessTable(&unk_10018A8F0, &type metadata for RecordingSettingType);
    atomic_store(result, (unint64_t *)&qword_1001EB5B0);
  }
  return result;
}

Swift::Int sub_1000D7488()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x656C695370696B73;
  else
    v2 = 0xD000000000000010;
  if (v1)
    v3 = 0xEB0000000065636ELL;
  else
    v3 = 0x8000000100182010;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000D7514(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x656C695370696B73;
  else
    v2 = 0xD000000000000010;
  if (*v1)
    v3 = 0xEB0000000065636ELL;
  else
    v3 = 0x8000000100182010;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1000D757C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x656C695370696B73;
  else
    v3 = 0xD000000000000010;
  if (v2)
    v4 = 0xEB0000000065636ELL;
  else
    v4 = 0x8000000100182010;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000D7604@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1001AD4D8;
  return sub_1000D81F8(v2, a1, a2);
}

void sub_1000D7610(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0xD000000000000010;
  if (*v1)
    v2 = 0x656C695370696B73;
  v3 = 0x8000000100182010;
  if (*v1)
    v3 = 0xEB0000000065636ELL;
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_1000D7660()
{
  unint64_t result;

  result = qword_1001EB5B8;
  if (!qword_1001EB5B8)
  {
    result = swift_getWitnessTable(&unk_10018A9D0, &type metadata for RecordingSettingType);
    atomic_store(result, (unint64_t *)&qword_1001EB5B8);
  }
  return result;
}

unint64_t sub_1000D76A8()
{
  unint64_t result;

  result = qword_1001EB5C0;
  if (!qword_1001EB5C0)
  {
    result = swift_getWitnessTable(&unk_10018AA08, &type metadata for RecordingSettingType);
    atomic_store(result, (unint64_t *)&qword_1001EB5C0);
  }
  return result;
}

unint64_t sub_1000D76F0()
{
  unint64_t result;

  result = qword_1001EB5C8;
  if (!qword_1001EB5C8)
  {
    result = swift_getWitnessTable(&unk_10018A958, &type metadata for RecordingSettingType);
    atomic_store(result, (unint64_t *)&qword_1001EB5C8);
  }
  return result;
}

void *sub_1000D7734()
{
  return &protocol witness table for String;
}

unint64_t sub_1000D7744()
{
  unint64_t result;

  result = qword_1001EB5D0;
  if (!qword_1001EB5D0)
  {
    result = swift_getWitnessTable(&unk_10018AA38, &type metadata for RecordingSettingType);
    atomic_store(result, (unint64_t *)&qword_1001EB5D0);
  }
  return result;
}

unint64_t sub_1000D778C()
{
  unint64_t result;

  result = qword_1001EB5D8;
  if (!qword_1001EB5D8)
  {
    result = swift_getWitnessTable(&unk_10018AA60, &type metadata for RecordingSettingType);
    atomic_store(result, (unint64_t *)&qword_1001EB5D8);
  }
  return result;
}

unint64_t sub_1000D77D4()
{
  unint64_t result;

  result = qword_1001EB5E0;
  if (!qword_1001EB5E0)
  {
    result = swift_getWitnessTable(&unk_10018AA88, &type metadata for RecordingSettingType);
    atomic_store(result, (unint64_t *)&qword_1001EB5E0);
  }
  return result;
}

unint64_t sub_1000D781C()
{
  unint64_t result;

  result = qword_1001EB5E8;
  if (!qword_1001EB5E8)
  {
    result = swift_getWitnessTable(&unk_10018AAE0, &type metadata for RecordingSettingType);
    atomic_store(result, (unint64_t *)&qword_1001EB5E8);
  }
  return result;
}

uint64_t sub_1000D7864@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6160(&qword_1001E8FC8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1001F6CC0, (uint64_t)sub_1000D7410, a1);
}

uint64_t sub_1000D7888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D82CC(a1, a2, a3, (uint64_t (*)(void))sub_1000D789C, (uint64_t)&opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>);
}

unint64_t sub_1000D789C()
{
  unint64_t result;

  result = qword_1001EB5F0;
  if (!qword_1001EB5F0)
  {
    result = swift_getWitnessTable(&unk_10018A990, &type metadata for RecordingSettingType);
    atomic_store(result, (unint64_t *)&qword_1001EB5F0);
  }
  return result;
}

uint64_t sub_1000D78E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D789C();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000D791C()
{
  unint64_t result;

  result = qword_1001EB5F8;
  if (!qword_1001EB5F8)
  {
    result = swift_getWitnessTable(&unk_10018AB20, &type metadata for RecordingSettingType);
    atomic_store(result, (unint64_t *)&qword_1001EB5F8);
  }
  return result;
}

unint64_t sub_1000D7964()
{
  unint64_t result;

  result = qword_1001EB600;
  if (!qword_1001EB600)
  {
    result = swift_getWitnessTable(&unk_10018AB48, &type metadata for RecordingSettingType);
    atomic_store(result, (unint64_t *)&qword_1001EB600);
  }
  return result;
}

unint64_t sub_1000D79AC()
{
  unint64_t result;

  result = qword_1001EB608;
  if (!qword_1001EB608)
  {
    result = swift_getWitnessTable(&unk_10018A918, &type metadata for RecordingSettingType);
    atomic_store(result, (unint64_t *)&qword_1001EB608);
  }
  return result;
}

uint64_t sub_1000D79F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D781C();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_1000D7A2C()
{
  return sub_10000EDB0(&qword_1001EB610, &qword_1001EB618, (uint64_t)&protocol conformance descriptor for [A]);
}

void sub_1000D7A58(_QWORD *a1@<X8>)
{
  *a1 = &off_1001AD528;
}

unint64_t sub_1000D7A6C()
{
  unint64_t result;

  result = qword_1001EB620;
  if (!qword_1001EB620)
  {
    result = swift_getWitnessTable(&unk_10018ABE8, &type metadata for ChangeRecordingPlaybackSetting);
    atomic_store(result, (unint64_t *)&qword_1001EB620);
  }
  return result;
}

uint64_t sub_1000D7AB4(uint64_t a1)
{
  return sub_1000D8400(a1, qword_1001F6CD8, 0xD00000000000002ELL, 0x8000000100184E10);
}

_QWORD *sub_1000D7AD8@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

uint64_t sub_1000D7AF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = type metadata accessor for ChangeOperation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  IntentParameter.wrappedValue.setter(v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*sub_1000D7B90(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_1000D7BD8;
}

_QWORD *sub_1000D7BDC@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1000D7C14(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

uint64_t (*sub_1000D7C48(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_1000D7BD8;
}

uint64_t sub_1000D7C94(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100198940, 1);
}

uint64_t sub_1000D7CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D82CC(a1, a2, a3, (uint64_t (*)(void))sub_10001B950, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t sub_1000D7CB8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6160(&qword_1001E8FD0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001F6CD8, (uint64_t)sub_1000D7AB4, a1);
}

uint64_t sub_1000D7CDC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1000DEC18, 0, 0);
}

uint64_t sub_1000D7CF4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000DD360();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_1000D7D1C()
{
  unint64_t result;

  result = qword_1001EB640;
  if (!qword_1001EB640)
  {
    result = swift_getWitnessTable(&unk_10018AD34, &type metadata for SelectRecording);
    atomic_store(result, (unint64_t *)&qword_1001EB640);
  }
  return result;
}

uint64_t sub_1000D7D64(uint64_t a1)
{
  return sub_1000D8400(a1, qword_1001F6CF0, 0xD00000000000001DLL, 0x8000000100184DF0);
}

__n128 sub_1000D7D88@<Q0>(uint64_t a1@<X8>)
{
  __n128 result;
  __int128 v3;
  uint64_t v4;
  __n128 v5;
  __int128 v6;

  IntentParameter.wrappedValue.getter(&v4);
  result = v5;
  v3 = v6;
  *(_QWORD *)a1 = v4;
  *(__n128 *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 24) = v3;
  return result;
}

uint64_t sub_1000D7DCC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v6[0] = *a1;
  v6[1] = v1;
  v6[2] = v2;
  v6[3] = v3;
  v6[4] = v4;
  swift_bridgeObjectRetain(v1);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  IntentParameter.wrappedValue.setter(v6);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  return swift_bridgeObjectRelease(v1);
}

void sub_1000D7E60(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t sub_1000D7E94(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100198918, 1);
}

uint64_t sub_1000D7EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D82CC(a1, a2, a3, (uint64_t (*)(void))sub_10001C3C0, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t sub_1000D7EB8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6160(&qword_1001E8FD8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001F6CF0, (uint64_t)sub_1000D7D64, a1);
}

uint64_t sub_1000D7EDC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1000D7EF4, 0, 0);
}

uint64_t sub_1000D7EF4(uint64_t a1)
{
  uint64_t v1;

  static IntentResult.result<>()(a1);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000D7F28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000DD700();
  *a1 = result;
  return result;
}

uint64_t sub_1000D7F4C(uint64_t a1)
{
  return sub_1000D7F70(a1, qword_1001F6D08, 0xD000000000000012, 0x8000000100184DD0);
}

uint64_t sub_1000D7F70(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v7 = sub_100014E10(&qword_1001EB758);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_1000B52C4(v14, a2);
  sub_1000AACFC(v14, (uint64_t)a2);
  LocalizedStringResource.init(stringLiteral:)(a3, a4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v13, v9);
}

uint64_t sub_1000D807C(char *a1, char *a2)
{
  return sub_100106690(*a1, *a2);
}

Swift::Int sub_1000D8088()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6369666963657073;
  else
    v2 = 0x6563655274736F6DLL;
  if (v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xEA0000000000746ELL;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000D810C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6369666963657073;
  else
    v2 = 0x6563655274736F6DLL;
  if (*v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xEA0000000000746ELL;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1000D816C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6369666963657073;
  else
    v3 = 0x6563655274736F6DLL;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xEA0000000000746ELL;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000D81EC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1001AD5C8;
  return sub_1000D81F8(v2, a1, a2);
}

uint64_t sub_1000D81F8@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, char *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;
  char v8;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

void sub_1000D8250(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6563655274736F6DLL;
  if (*v1)
    v2 = 0x6369666963657073;
  v3 = 0xEA0000000000746ELL;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1000D8294@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6160(&qword_1001E8FE0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1001F6D08, (uint64_t)sub_1000D7F4C, a1);
}

uint64_t sub_1000D82B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D82CC(a1, a2, a3, (uint64_t (*)(void))sub_10001C9D8, (uint64_t)&opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>);
}

uint64_t sub_1000D82CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a4();
  return swift_getOpaqueTypeConformance2(v7, a5, 1);
}

uint64_t sub_1000D830C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001C9D8();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_1000D8348(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001C90C();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_1000D8380()
{
  return sub_10000EDB0(&qword_1001EB6C0, &qword_1001EB6C8, (uint64_t)&protocol conformance descriptor for [A]);
}

void sub_1000D83AC(_QWORD *a1@<X8>)
{
  *a1 = &off_1001AD550;
}

uint64_t sub_1000D83BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001988F0, 1);
}

uint64_t sub_1000D83CC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1001988C8, 1);
}

uint64_t sub_1000D83DC(uint64_t a1)
{
  return sub_1000D8400(a1, qword_1001F6D20, 0xD00000000000001BLL, 0x8000000100184D70);
}

uint64_t sub_1000D8400(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for LocalizedStringResource(0);
  sub_1000B52C4(v7, a2);
  sub_1000AACFC(v7, (uint64_t)a2);
  return LocalizedStringResource.init(stringLiteral:)(a3, a4);
}

uint64_t sub_1000D845C()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

double sub_1000D848C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  IntentParameter.wrappedValue.getter(v5);
  v2 = v6;
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v2;
  return result;
}

uint64_t sub_1000D84CC()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_1000D84EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  unint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;

  v42 = a1;
  v1 = sub_100014E10(&qword_1001EB8E8);
  v2 = *(_QWORD *)(v1 - 8);
  v40 = v1;
  v41 = v2;
  v3 = __chkstk_darwin(v1);
  v38 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v39 = (char *)&v32 - v5;
  v6 = sub_100014E10(&qword_1001EB8F0);
  v36 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v32 - v11;
  __chkstk_darwin(v10);
  v37 = (char *)&v32 - v13;
  v44 = 0;
  v14 = sub_100014E10(&qword_1001EB8F8);
  v15 = sub_10001C690();
  v34 = v15;
  v16 = sub_10001C950();
  v33 = v16;
  v17 = sub_10000EDB0(&qword_1001EB900, &qword_1001EB8F8, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
  v32 = v17;
  ParameterSummaryCaseCondition.init(_:_:)(&v44, sub_1000D8860, 0, &type metadata for PlayRecording, &type metadata for PlaybackType, v14, v15, v16, v17);
  v18 = sub_10000EDB0(&qword_1001EB908, &qword_1001EB8F0, (uint64_t)&protocol conformance descriptor for ParameterSummaryCaseCondition<A, B, C>);
  static ParameterSummaryCaseBuilder.buildExpression<A>(_:)(v12, &type metadata for PlayRecording, &type metadata for PlaybackType, v6, v18);
  v19 = *(void (**)(char *, uint64_t))(v36 + 8);
  v19(v12, v6);
  v43 = 1;
  v35 = v14;
  v21 = v33;
  v20 = v34;
  ParameterSummaryCaseCondition.init(_:_:)(&v43, sub_1000D8864, 0, &type metadata for PlayRecording, &type metadata for PlaybackType, v14, v34, v33, v17);
  static ParameterSummaryCaseBuilder.buildExpression<A>(_:)(v9, &type metadata for PlayRecording, &type metadata for PlaybackType, v6, v18);
  v19(v9, v6);
  v22 = v38;
  v23 = v21;
  v24 = v32;
  ParameterSummaryDefaultCaseCondition.init(_:)(sub_1000D8860, 0, &type metadata for PlayRecording, &type metadata for PlaybackType, v14, v20, v21, v32);
  v25 = sub_10000EDB0(&qword_1001EB910, &qword_1001EB8E8, (uint64_t)&protocol conformance descriptor for ParameterSummaryDefaultCaseCondition<A, B, C>);
  v27 = v39;
  v26 = v40;
  static ParameterSummaryCaseBuilder.buildExpression<A>(_:)(v22, &type metadata for PlayRecording, &type metadata for PlaybackType, v40, v25);
  v28 = *(void (**)(char *, uint64_t))(v41 + 8);
  v28(v22, v26);
  v31 = v24;
  v29 = v37;
  static ParameterSummaryCaseBuilder.buildBlock<A, B, C>(_:_:_:)(v37, v12, v27, &type metadata for PlayRecording, &type metadata for PlaybackType, v6, v6, v35, v23, v18, v18, v31);
  v28(v27, v26);
  v19(v12, v6);
  return ((uint64_t (*)(char *, uint64_t))v19)(v29, v6);
}

uint64_t sub_1000D8864@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::String v15;
  uint64_t KeyPath;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  _QWORD v25[2];

  v25[1] = a1;
  v1 = sub_100014E10(&qword_1001EB918);
  __chkstk_darwin(v1);
  v3 = (char *)v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100014E10(&qword_1001EB920);
  __chkstk_darwin(v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100014E10(&qword_1001EB8F8);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v25 - v12;
  v14 = sub_10001C690();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(50, 2, &type metadata for PlayRecording, v14);
  v15._object = (void *)0x8000000100184D30;
  v15._countAndFlagsBits = 0xD000000000000031;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v15);
  KeyPath = swift_getKeyPath(&unk_10018B5E8);
  v17 = sub_100014E10(&qword_1001EB928);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v4, v17);
  swift_release(KeyPath);
  v18._countAndFlagsBits = 32;
  v18._object = (void *)0xE100000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v18);
  v19 = swift_getKeyPath(&unk_10018B610);
  v20 = sub_100014E10(&qword_1001EB930);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(v19, v4, v20);
  swift_release(v19);
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v21);
  ParameterSummaryString.init(stringInterpolation:)(v6, &type metadata for PlayRecording, v14);
  IntentParameterSummary.init(_:table:)(v3, 0, 0, &type metadata for PlayRecording, v14);
  v22 = sub_10000EDB0(&qword_1001EB900, &qword_1001EB8F8, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
  static ParameterSummaryBuilder.buildExpression<A>(_:)(v11, &type metadata for PlayRecording, v7, v22);
  v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v23(v11, v7);
  static ParameterSummaryBuilder.buildBlock<A>(_:)(v13, &type metadata for PlayRecording, v7, v22);
  return ((uint64_t (*)(char *, uint64_t))v23)(v13, v7);
}

uint64_t sub_1000D8AE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::String v15;
  uint64_t KeyPath;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  _QWORD v22[2];

  v22[1] = a1;
  v1 = sub_100014E10(&qword_1001EB918);
  __chkstk_darwin(v1);
  v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100014E10(&qword_1001EB920);
  __chkstk_darwin(v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100014E10(&qword_1001EB8F8);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v22 - v12;
  v14 = sub_10001C690();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(52, 1, &type metadata for PlayRecording, v14);
  v15._object = (void *)0x8000000100184CF0;
  v15._countAndFlagsBits = 0xD000000000000034;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v15);
  KeyPath = swift_getKeyPath(&unk_10018B5E8);
  v17 = sub_100014E10(&qword_1001EB928);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v4, v17);
  swift_release(KeyPath);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v18);
  ParameterSummaryString.init(stringInterpolation:)(v6, &type metadata for PlayRecording, v14);
  IntentParameterSummary.init(_:table:)(v3, 0, 0, &type metadata for PlayRecording, v14);
  v19 = sub_10000EDB0(&qword_1001EB900, &qword_1001EB8F8, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
  static ParameterSummaryBuilder.buildExpression<A>(_:)(v11, &type metadata for PlayRecording, v7, v19);
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, v7);
  static ParameterSummaryBuilder.buildBlock<A>(_:)(v13, &type metadata for PlayRecording, v7, v19);
  return ((uint64_t (*)(char *, uint64_t))v20)(v13, v7);
}

uint64_t sub_1000D8D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[10] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[11] = v5;
  v3[12] = v6;
  return swift_task_switch(sub_1000D8D88, v5, v6);
}

uint64_t sub_1000D8D88()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  sub_1000AEE60(v0 + 2);
  v1 = sub_10001B474(v0 + 2, v0[5]);
  v3 = *v1;
  v2 = v1[1];
  v4 = (_QWORD *)swift_task_alloc(dword_1001ED254);
  v0[13] = v4;
  *v4 = v0;
  v4[1] = sub_1000D8E2C;
  return sub_100101DC4(v0[8], v0[9], v3, v2);
}

uint64_t sub_1000D8E2C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000AEE20;
  else
    v4 = sub_1000D8E8C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
}

uint64_t sub_1000D8E8C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_release(*(_QWORD *)(v0 + 80));
  static IntentResult.result<>()(v1);
  sub_10001B498((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D8ED8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6160(&qword_1001E8FE8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001F6D20, (uint64_t)sub_1000D83DC, a1);
}

uint64_t sub_1000D8EFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for IntentAuthenticationPolicy.requiresLocalDeviceAuthentication(_:);
  v3 = type metadata accessor for IntentAuthenticationPolicy(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_1000D8F40(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_10018B5E8);
  v4 = sub_100014E10(&qword_1001EB8D8);
  v5 = sub_10000EDB0(&qword_1001EB8E0, &qword_1001EB8D8, (uint64_t)&protocol conformance descriptor for ParameterSummaryTupleCaseCondition<A, B, C>);
  return ParameterSummarySwitchCondition.init(_:_:)(KeyPath, sub_1000D84EC, 0, v4, a2, v5);
}

uint64_t sub_1000D8FCC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc(dword_1001EB8D4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100003A7C;
  return sub_1000D8D18(a1, v5, v4);
}

uint64_t sub_1000D9030@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000DDA24();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_1000D9058()
{
  unint64_t result;

  result = qword_1001EB6E8;
  if (!qword_1001EB6E8)
  {
    result = swift_getWitnessTable(&unk_10018B1EC, &type metadata for PlayRecording);
    atomic_store(result, (unint64_t *)&qword_1001EB6E8);
  }
  return result;
}

uint64_t sub_1000D909C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v0 = sub_100014E10(&qword_1001EB7D0);
  v1 = *(_QWORD *)(type metadata accessor for _AssistantIntent(0) - 8);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))- *(_QWORD *)(v1 + 72)+ 8 * *(_QWORD *)(v1 + 72), *(unsigned __int8 *)(v1 + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_100189FF0;
  v13 = sub_1000DDA24();
  v14 = v3;
  v4 = sub_10001C690();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v13, sub_1000D92EC, 0, sub_1000D9548, 0, &type metadata for PlayRecording, v4);
  v13 = sub_1000DDA24();
  v14 = v5;
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v13, sub_1000D95E8, 0, sub_1000D99C0, 0, &type metadata for PlayRecording, v4);
  v13 = sub_100014240();
  v6 = sub_10001C5B8();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v13, sub_1000D9AF4, 0, sub_1000DA4C0, 0, &type metadata for CreateRecording, v6);
  v7 = sub_1000D6310();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(v7, sub_1000DA5F0, 0, &j___s10AppIntents16_AssistantIntentV21ParameterValueBuilderO10buildBlockSayAC0F0VGyFZ, 0, &type metadata for StopRecording, v7);
  v13 = sub_1000DD044();
  v8 = sub_10001C4BC();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v13, sub_1000DA8CC, 0, sub_1000DAE48, 0, &type metadata for DeleteRecording, v8);
  v13 = sub_1000DD360();
  v14 = v9;
  v10 = sub_10001B950();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v13, sub_1000DAF78, 0, sub_1000DB320, 0, &type metadata for ChangeRecordingPlaybackSetting, v10);
  v13 = sub_1000DD700();
  v11 = sub_10001C3C0();
  result = _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v13, sub_1000DB52C, 0, sub_1000DBA28, 0, &type metadata for SelectRecording, v11);
  qword_1001F6D38 = v2;
  return result;
}

uint64_t sub_1000D92EC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  Swift::String v11;
  uint64_t KeyPath;
  unint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v0 = sub_100014E10(&qword_1001EB8B0);
  v22 = *(_QWORD *)(v0 - 8);
  v23 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100014E10(&qword_1001EB8B8);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001C690();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(6, 2, &type metadata for PlayRecording, v10);
  v11._countAndFlagsBits = 0x2079616C70;
  v11._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v11);
  KeyPath = swift_getKeyPath(&unk_10018B5C0);
  v13 = sub_10001C950();
  v14 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v13);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v14, v7);
  swift_release(v14);
  v15._countAndFlagsBits = 32;
  v15._object = (void *)0xE100000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v3);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v6, v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v16);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for PlayRecording, v10);
  v17 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for PlayRecording, v10);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v2, v23);
  v18 = sub_100014E10(&qword_1001EB8C0);
  v19 = swift_allocObject(v18, 40, 7);
  *(_OWORD *)(v19 + 16) = xmmword_100188080;
  *(_QWORD *)(v19 + 32) = v17;
  v20 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v19);
  return v20;
}

uint64_t sub_1000D9548(uint64_t a1)
{
  return sub_1000DB344(a1, (uint64_t)&unk_10018B5C0, (uint64_t (*)(void))sub_10001C950, (uint64_t (*)(uint64_t))sub_10001C690, (uint64_t)sub_1000D956C);
}

uint64_t sub_1000D956C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6365722074736F6DLL, 0xEB00000000746E65);
  v1 = sub_100014E10(&qword_1001EBE10);
  v2 = swift_allocObject(v1, 40, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100188080;
  *(_QWORD *)(v2 + 32) = v0;
  v3 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v2);
  return v3;
}

uint64_t sub_1000D95E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t KeyPath;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a1;
  v1 = sub_100014E10(&qword_1001EB8B0);
  v34 = *(_QWORD *)(v1 - 8);
  v35 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100014E10(&qword_1001EB8B8);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001C690();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(6, 2, &type metadata for PlayRecording, v11);
  v12._countAndFlagsBits = 0x2079616C70;
  v12._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  KeyPath = swift_getKeyPath(&unk_10018B598);
  v32 = sub_1000DE9B4(&qword_1001EB8A8, &qword_1001EB7B8, (void (*)(void))sub_10001B31C, (uint64_t)&protocol conformance descriptor for <A> A?);
  v14 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v32);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v14, v8);
  swift_release(v14);
  v15._countAndFlagsBits = 32;
  v15._object = (void *)0xE100000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  v16 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v17(v7, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v4);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v7, v4);
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for PlayRecording, v11);
  v31 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for PlayRecording, v11);
  v34 = *(_QWORD *)(v34 + 8);
  ((void (*)(char *, uint64_t))v34)(v3, v35);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 2, &type metadata for PlayRecording, v11);
  v20._countAndFlagsBits = 0x20796D2079616C70;
  v20._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  v17(v7, v16, v4);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v18(v7, v4);
  v21._countAndFlagsBits = 32;
  v21._object = (void *)0xE100000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v21);
  v22 = swift_getKeyPath(&unk_10018B598);
  v23 = _AssistantIntent.IntentProjection.subscript.getter(v22, v32);
  swift_release(v22);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v23, v8);
  swift_release(v23);
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v24);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for PlayRecording, v11);
  v25 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for PlayRecording, v11);
  ((void (*)(char *, uint64_t))v34)(v3, v35);
  v26 = sub_100014E10(&qword_1001EB8C0);
  v27 = swift_allocObject(v26, 48, 7);
  *(_OWORD *)(v27 + 16) = xmmword_100187B90;
  *(_QWORD *)(v27 + 32) = v31;
  *(_QWORD *)(v27 + 40) = v25;
  v28 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v27);
  return v28;
}

uint64_t sub_1000D9970(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6[5];

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v6[0] = *a1;
  v6[1] = v1;
  v6[2] = v2;
  v6[3] = v3;
  v6[4] = v4;
  sub_10001BF90(v6[0], v1, v2, v3, v4);
  return IntentParameter.wrappedValue.setter(v6);
}

uint64_t sub_1000D99C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v0 = type metadata accessor for _AssistantIntent.Value(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_10018B598);
  v5 = sub_1000DE9B4(&qword_1001EB8A8, &qword_1001EB7B8, (void (*)(void))sub_10001B31C, (uint64_t)&protocol conformance descriptor for <A> A?);
  v6 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v5);
  swift_release(KeyPath);
  v7 = sub_10001C690();
  _AssistantIntent.Value.init<A>(for:builder:)(v6, sub_1000D9AF0, 0, v7);
  v8 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v9 = sub_100014E10(&qword_1001EB7D8);
  v10 = swift_allocObject(v9, 40, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100188080;
  *(_QWORD *)(v10 + 32) = v8;
  v11 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v10);
  return v11;
}

uint64_t sub_1000D9AF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t KeyPath;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  Swift::String v46;
  void (*v47)(char *);
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  Swift::String v54;
  Swift::String v55;
  void (*v56)(char *);
  Swift::String v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *);
  void (*v81)(char *, uint64_t);
  unsigned int v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);

  v78 = a1;
  v83 = sub_100014E10(&qword_1001EB890);
  v1 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v3 = (char *)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100014E10(&qword_1001EB898);
  __chkstk_darwin(v8);
  v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001C5B8();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 1, &type metadata for CreateRecording, v11);
  v12._countAndFlagsBits = 0x6120657461657263;
  v12._object = (void *)0xED00002077656E20;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  v82 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v80 = *(void (**)(char *))(v5 + 104);
  v80(v7);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v84 = *(void (**)(char *, uint64_t))(v5 + 8);
  v84(v7, v4);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v13);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CreateRecording, v11);
  v77 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CreateRecording, v11);
  v81 = *(void (**)(char *, uint64_t))(v1 + 8);
  v14 = v83;
  v81(v3, v83);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(11, 2, &type metadata for CreateRecording, v11);
  v15._countAndFlagsBits = 0x20657461657243;
  v15._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  KeyPath = swift_getKeyPath(&unk_10018B570);
  v79 = sub_1000DE9B4((unint64_t *)&unk_1001EBE40, &qword_1001EB888, (void (*)(void))sub_1000DE92C, (uint64_t)&protocol conformance descriptor for <A> A?);
  v17 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v79);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v17, v8);
  swift_release(v17);
  v18._countAndFlagsBits = 544106784;
  v18._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  v19 = v82;
  v20 = v4;
  v71 = v4;
  v21 = v4;
  v22 = (void (*)(char *, uint64_t, uint64_t))v80;
  ((void (*)(char *, _QWORD, uint64_t))v80)(v7, v82, v21);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v23 = v20;
  v24 = v84;
  v84(v7, v23);
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v25);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CreateRecording, v11);
  v76 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CreateRecording, v11);
  v81(v3, v14);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(14, 2, &type metadata for CreateRecording, v11);
  v26._countAndFlagsBits = 0x20657461657263;
  v26._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  v27 = v19;
  v28 = v71;
  v22(v7, v27, v71);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v29 = v28;
  v24(v7, v28);
  v30._countAndFlagsBits = 0x2064656D616E20;
  v30._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v30);
  v31 = swift_getKeyPath(&unk_10018B570);
  v32 = _AssistantIntent.IntentProjection.subscript.getter(v31, v79);
  swift_release(v31);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v32, v8);
  swift_release(v32);
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v33);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CreateRecording, v11);
  v75 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CreateRecording, v11);
  v81(v3, v83);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(16, 2, &type metadata for CreateRecording, v11);
  v34._countAndFlagsBits = 0x2061207472617473;
  v34._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v34);
  ((void (*)(char *, _QWORD, uint64_t))v80)(v7, v82, v29);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v84(v7, v29);
  v35._countAndFlagsBits = 0x2064656C6C616320;
  v35._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v35);
  v36 = swift_getKeyPath(&unk_10018B570);
  v37 = _AssistantIntent.IntentProjection.subscript.getter(v36, v79);
  swift_release(v36);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v37, v8);
  swift_release(v37);
  v38._countAndFlagsBits = 0;
  v38._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v38);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CreateRecording, v11);
  v74 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CreateRecording, v11);
  v81(v3, v83);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 2, &type metadata for CreateRecording, v11);
  v39._countAndFlagsBits = 0x612064726F636572;
  v39._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v39);
  ((void (*)(char *, _QWORD, uint64_t))v80)(v7, v82, v29);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v84(v7, v29);
  v40._countAndFlagsBits = 0x2064656C6C616320;
  v40._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v40);
  v41 = swift_getKeyPath(&unk_10018B570);
  v42 = _AssistantIntent.IntentProjection.subscript.getter(v41, v79);
  swift_release(v41);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v42, v8);
  swift_release(v42);
  v43._countAndFlagsBits = 0;
  v43._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v43);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CreateRecording, v11);
  v79 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CreateRecording, v11);
  v44 = v83;
  v45 = v81;
  v81(v3, v83);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 1, &type metadata for CreateRecording, v11);
  v46._countAndFlagsBits = 0x612064726F636572;
  v46._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v46);
  v47 = v80;
  ((void (*)(char *, _QWORD, uint64_t))v80)(v7, v82, v29);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v84(v7, v29);
  v48._countAndFlagsBits = 0;
  v48._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v48);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CreateRecording, v11);
  v78 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CreateRecording, v11);
  v45(v3, v44);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 1, &type metadata for CreateRecording, v11);
  v49._countAndFlagsBits = 0x612064726F636572;
  v49._object = (void *)0xED00002077656E20;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v49);
  v50 = v82;
  ((void (*)(char *, _QWORD, uint64_t))v47)(v7, v82, v29);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v51 = v29;
  v52 = v29;
  v53 = v84;
  v84(v7, v51);
  v54._countAndFlagsBits = 0;
  v54._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v54);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CreateRecording, v11);
  v73 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CreateRecording, v11);
  v45(v3, v83);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(18, 1, &type metadata for CreateRecording, v11);
  v55._object = (void *)0x8000000100184C90;
  v55._countAndFlagsBits = 0xD000000000000012;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v55);
  v56 = v80;
  ((void (*)(char *, uint64_t, uint64_t))v80)(v7, v50, v52);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v53(v7, v52);
  v57._countAndFlagsBits = 0;
  v57._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v57);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CreateRecording, v11);
  v72 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CreateRecording, v11);
  v58 = v83;
  v59 = v81;
  v81(v3, v83);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(22, 1, &type metadata for CreateRecording, v11);
  v60._countAndFlagsBits = 0xD000000000000016;
  v60._object = (void *)0x8000000100184CB0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v60);
  ((void (*)(char *, _QWORD, uint64_t))v56)(v7, v82, v52);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v84(v7, v52);
  v61._countAndFlagsBits = 0;
  v61._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v61);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CreateRecording, v11);
  v62 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CreateRecording, v11);
  v59(v3, v58);
  v63 = sub_100014E10(&qword_1001EB8A0);
  v64 = swift_allocObject(v63, 104, 7);
  *(_OWORD *)(v64 + 16) = xmmword_10018A000;
  v65 = v76;
  *(_QWORD *)(v64 + 32) = v77;
  *(_QWORD *)(v64 + 40) = v65;
  v66 = v74;
  *(_QWORD *)(v64 + 48) = v75;
  *(_QWORD *)(v64 + 56) = v66;
  v67 = v78;
  *(_QWORD *)(v64 + 64) = v79;
  *(_QWORD *)(v64 + 72) = v67;
  v68 = v72;
  *(_QWORD *)(v64 + 80) = v73;
  *(_QWORD *)(v64 + 88) = v68;
  *(_QWORD *)(v64 + 96) = v62;
  v69 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v64);
  return v69;
}

uint64_t sub_1000DA4C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v0 = type metadata accessor for _AssistantIntent.Value(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_10018B570);
  v5 = sub_1000DE9B4((unint64_t *)&unk_1001EBE40, &qword_1001EB888, (void (*)(void))sub_1000DE92C, (uint64_t)&protocol conformance descriptor for <A> A?);
  v6 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v5);
  swift_release(KeyPath);
  v7 = sub_10001C5B8();
  _AssistantIntent.Value.init<A>(for:builder:)(v6, sub_1000D9AF0, 0, v7);
  v8 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v9 = sub_100014E10(&qword_1001EB7D8);
  v10 = swift_allocObject(v9, 40, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100188080;
  *(_QWORD *)(v10 + 32) = v8;
  v11 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v10);
  return v11;
}

uint64_t sub_1000DA5F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  void (*v12)(char *, uint64_t);
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v0 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100014E10(&qword_1001EB870);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100014E10(&qword_1001EB878);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000D6310();
  _AssistantIntent.Phrase.init(stringLiteral:)(0x63657220706F7473, 0xEE00676E6964726FLL, &type metadata for StopRecording, v11);
  v23 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v10, &type metadata for StopRecording, v11);
  v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  v12(v10, v7);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(8, 1, &type metadata for StopRecording, v11);
  v13._countAndFlagsBits = 0x20796D20706F7473;
  v13._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v0);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v3, v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v14);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for StopRecording, v11);
  v15 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v10, &type metadata for StopRecording, v11);
  v12(v10, v7);
  _AssistantIntent.Phrase.init(stringLiteral:)(1886352467, 0xE400000000000000, &type metadata for StopRecording, v11);
  v16 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v10, &type metadata for StopRecording, v11);
  v12(v10, v7);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000010, 0x8000000100184C70, &type metadata for StopRecording, v11);
  v17 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v10, &type metadata for StopRecording, v11);
  v12(v10, v7);
  v18 = sub_100014E10(&qword_1001EB880);
  v19 = swift_allocObject(v18, 64, 7);
  *(_OWORD *)(v19 + 16) = xmmword_10018A010;
  *(_QWORD *)(v19 + 32) = v23;
  *(_QWORD *)(v19 + 40) = v15;
  *(_QWORD *)(v19 + 48) = v16;
  *(_QWORD *)(v19 + 56) = v17;
  v20 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v19);
  return v20;
}

uint64_t sub_1000DA8CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t KeyPath;
  uint64_t v17;
  Swift::String v18;
  void (*v19)(char *, uint64_t);
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  Swift::String v33;
  char *v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  void (*v53)(char *);
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;

  v2 = sub_100014E10(&qword_1001EB848);
  v50 = *(_QWORD *)(v2 - 8);
  v47 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = v5;
  __chkstk_darwin(v5);
  v9 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100014E10(&qword_1001EB850);
  __chkstk_darwin(v10);
  v12 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001C4BC();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(8, 2, &type metadata for DeleteRecording, v13);
  v14._countAndFlagsBits = 0x206574656C6544;
  v14._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v14);
  v54 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v53 = *(void (**)(char *))(v6 + 104);
  v51 = v7;
  v53(v9);
  v49 = v9;
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v9, v10);
  v52 = *(void (**)(char *, uint64_t))(v6 + 8);
  v52(v9, v7);
  v15._countAndFlagsBits = 32;
  v15._object = (void *)0xE100000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  KeyPath = swift_getKeyPath(&unk_10018B548);
  v56 = sub_1000DE9B4(&qword_1001EB840, qword_1001EB518, (void (*)(void))sub_10001B31C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v46[1] = a1;
  v17 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v56);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v17, v10);
  swift_release(v17);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v12, &type metadata for DeleteRecording, v13);
  v55 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v4, &type metadata for DeleteRecording, v13);
  v19 = *(void (**)(char *, uint64_t))(v50 + 8);
  v19(v4, v2);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 1, &type metadata for DeleteRecording, v13);
  v20._object = (void *)0x8000000100184BC0;
  v20._countAndFlagsBits = 0xD000000000000011;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  v21 = swift_getKeyPath(&unk_10018B548);
  v22 = v56;
  v23 = _AssistantIntent.IntentProjection.subscript.getter(v21, v56);
  swift_release(v21);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v23, v10);
  swift_release(v23);
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v24);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v12, &type metadata for DeleteRecording, v13);
  v50 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v4, &type metadata for DeleteRecording, v13);
  v25 = v47;
  v19(v4, v47);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(25, 1, &type metadata for DeleteRecording, v13);
  v26._countAndFlagsBits = 0xD000000000000019;
  v26._object = (void *)0x8000000100184BE0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  v27 = swift_getKeyPath(&unk_10018B548);
  v28 = _AssistantIntent.IntentProjection.subscript.getter(v27, v22);
  swift_release(v27);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v28, v10);
  swift_release(v28);
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v29);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v12, &type metadata for DeleteRecording, v13);
  v48 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v4, &type metadata for DeleteRecording, v13);
  v30 = v25;
  v31 = v25;
  v32 = v19;
  v19(v4, v31);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(15, 2, &type metadata for DeleteRecording, v13);
  v33._countAndFlagsBits = 0x206574656C6564;
  v33._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v33);
  v34 = v49;
  v35 = v51;
  ((void (*)(char *, _QWORD, uint64_t))v53)(v49, v54, v51);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v34, v10);
  v52(v34, v35);
  v36._countAndFlagsBits = 0x2064656C6C616320;
  v36._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v36);
  v37 = swift_getKeyPath(&unk_10018B548);
  v38 = _AssistantIntent.IntentProjection.subscript.getter(v37, v56);
  swift_release(v37);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v38, v10);
  swift_release(v38);
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v39);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v12, &type metadata for DeleteRecording, v13);
  v40 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v4, &type metadata for DeleteRecording, v13);
  v32(v4, v30);
  v41 = sub_100014E10(&qword_1001EB858);
  v42 = swift_allocObject(v41, 64, 7);
  *(_OWORD *)(v42 + 16) = xmmword_10018A010;
  v43 = v50;
  *(_QWORD *)(v42 + 32) = v55;
  *(_QWORD *)(v42 + 40) = v43;
  *(_QWORD *)(v42 + 48) = v48;
  *(_QWORD *)(v42 + 56) = v40;
  v44 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v42);
  return v44;
}

uint64_t sub_1000DAE48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v0 = type metadata accessor for _AssistantIntent.Value(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_10018B548);
  v5 = sub_1000DE9B4(&qword_1001EB840, qword_1001EB518, (void (*)(void))sub_10001B31C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v6 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v5);
  swift_release(KeyPath);
  v7 = sub_10001C4BC();
  _AssistantIntent.Value.init<A>(for:builder:)(v6, sub_1000D9AF0, 0, v7);
  v8 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v9 = sub_100014E10(&qword_1001EB7D8);
  v10 = swift_allocObject(v9, 40, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100188080;
  *(_QWORD *)(v10 + 32) = v8;
  v11 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v10);
  return v11;
}

uint64_t sub_1000DAF78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  void (*v12)(char *, uint64_t);
  Swift::String v13;
  uint64_t KeyPath;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v34 = a1;
  v1 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v36 = *(_QWORD *)(v1 - 8);
  v37 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100014E10(&qword_1001EB800);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100014E10(&qword_1001EB808);
  v8 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  __chkstk_darwin(v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001B950();
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000021, 0x8000000100184A80, &type metadata for ChangeRecordingPlaybackSetting, v11);
  v38 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v10, &type metadata for ChangeRecordingPlaybackSetting, v11);
  v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  v12(v10, v7);
  v32 = v12;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(40, 1, &type metadata for ChangeRecordingPlaybackSetting, v11);
  v13._countAndFlagsBits = 0xD000000000000028;
  v13._object = (void *)0x8000000100184AB0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v13);
  KeyPath = swift_getKeyPath(&unk_10018B520);
  v33 = sub_1000D77D4();
  v15 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v33);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v15, v4);
  swift_release(v15);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v16);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for ChangeRecordingPlaybackSetting, v11);
  v35 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v10, &type metadata for ChangeRecordingPlaybackSetting, v11);
  v17 = v31;
  v12(v10, v31);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(19, 2, &type metadata for ChangeRecordingPlaybackSetting, v11);
  v18._countAndFlagsBits = 0x2065676E616863;
  v18._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  v20 = v36;
  v19 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v3, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v37);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v3, v4);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v19);
  v21._countAndFlagsBits = 0x676E697474657320;
  v21._object = (void *)0xEC000000206F7420;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v21);
  v22 = swift_getKeyPath(&unk_10018B520);
  v23 = _AssistantIntent.IntentProjection.subscript.getter(v22, v33);
  swift_release(v22);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v23, v4);
  swift_release(v23);
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v24);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for ChangeRecordingPlaybackSetting, v11);
  v25 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v10, &type metadata for ChangeRecordingPlaybackSetting, v11);
  v32(v10, v17);
  v26 = sub_100014E10(&qword_1001EB810);
  v27 = swift_allocObject(v26, 56, 7);
  *(_OWORD *)(v27 + 16) = xmmword_1001888D0;
  v28 = v35;
  *(_QWORD *)(v27 + 32) = v38;
  *(_QWORD *)(v27 + 40) = v28;
  *(_QWORD *)(v27 + 48) = v25;
  v29 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v27);
  return v29;
}

uint64_t sub_1000DB320(uint64_t a1)
{
  return sub_1000DB344(a1, (uint64_t)&unk_10018B520, (uint64_t (*)(void))sub_1000D77D4, (uint64_t (*)(uint64_t))sub_10001B950, (uint64_t)sub_1000DB468);
}

uint64_t sub_1000DB344(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v9 = type metadata accessor for _AssistantIntent.Value(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(a2);
  v14 = a3();
  v15 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v14);
  v16 = swift_release(KeyPath);
  v17 = a4(v16);
  _AssistantIntent.Value.init<A>(for:builder:)(v15, a5, 0, v17);
  v18 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v19 = sub_100014E10(&qword_1001EB7D8);
  v20 = swift_allocObject(v19, 40, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100188080;
  *(_QWORD *)(v20 + 32) = v18;
  v21 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v20);
  return v21;
}

uint64_t sub_1000DB468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x65636E61686E65, 0xE700000000000000);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6C69732070696B73, 0xEC00000065636E65);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000011, 0x8000000100184A60);
  v3 = sub_100014E10(&qword_1001EBE10);
  v4 = swift_allocObject(v3, 56, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1001888D0;
  *(_QWORD *)(v4 + 32) = v0;
  *(_QWORD *)(v4 + 40) = v1;
  *(_QWORD *)(v4 + 48) = v2;
  v5 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_1000DB52C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t KeyPath;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  unint64_t v46;
  uint64_t v47;

  v47 = a1;
  v1 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v42 = *(_QWORD *)(v1 - 8);
  v43 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100014E10(&qword_1001EB7E0);
  v5 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  __chkstk_darwin(v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100014E10(&qword_1001EB7E8);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001C3C0();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(15, 1, &type metadata for SelectRecording, v11);
  v12._countAndFlagsBits = 0x636572206E65706FLL;
  v12._object = (void *)0xEF20676E6964726FLL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  KeyPath = swift_getKeyPath(&unk_10018B4F8);
  v46 = sub_10001B31C();
  v14 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v46);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v14, v8);
  swift_release(v14);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for SelectRecording, v11);
  v16 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v7, &type metadata for SelectRecording, v11);
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v44 = v16;
  v45 = v17;
  v17(v7, v4);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(6, 2, &type metadata for SelectRecording, v11);
  v18._countAndFlagsBits = 0x206E65706FLL;
  v18._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  v19 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v20 = v42;
  v21 = v43;
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 104);
  v40(v3, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v43);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v3, v8);
  v39 = *(void (**)(char *, uint64_t))(v20 + 8);
  v39(v3, v21);
  v22._countAndFlagsBits = 32;
  v22._object = (void *)0xE100000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v22);
  v23 = swift_getKeyPath(&unk_10018B4F8);
  v24 = _AssistantIntent.IntentProjection.subscript.getter(v23, v46);
  swift_release(v23);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v24, v8);
  swift_release(v24);
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v25);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for SelectRecording, v11);
  v42 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v7, &type metadata for SelectRecording, v11);
  v26 = v41;
  v45(v7, v41);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(8, 2, &type metadata for SelectRecording, v11);
  v27._countAndFlagsBits = 0x207463656C6573;
  v27._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  v40(v3, v19, v21);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v3, v8);
  v39(v3, v21);
  v28._countAndFlagsBits = 32;
  v28._object = (void *)0xE100000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v28);
  v29 = swift_getKeyPath(&unk_10018B4F8);
  v30 = _AssistantIntent.IntentProjection.subscript.getter(v29, v46);
  swift_release(v29);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v30, v8);
  swift_release(v30);
  v31._countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v31);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for SelectRecording, v11);
  v32 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v7, &type metadata for SelectRecording, v11);
  v45(v7, v26);
  v33 = sub_100014E10(&qword_1001EB7F0);
  v34 = swift_allocObject(v33, 56, 7);
  *(_OWORD *)(v34 + 16) = xmmword_1001888D0;
  v35 = v42;
  *(_QWORD *)(v34 + 32) = v44;
  *(_QWORD *)(v34 + 40) = v35;
  *(_QWORD *)(v34 + 48) = v32;
  v36 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v34);
  return v36;
}

uint64_t sub_1000DB984(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v6[0] = *a1;
  v6[1] = v1;
  v6[2] = v2;
  v6[3] = v3;
  v6[4] = v4;
  swift_bridgeObjectRetain_n(v1, 2);
  swift_retain_n(v2, 2);
  swift_retain_n(v3, 2);
  swift_retain_n(v4, 2);
  IntentParameter.wrappedValue.setter(v6);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_1000DBA28(uint64_t a1)
{
  return sub_1000DB344(a1, (uint64_t)&unk_10018B4F8, (uint64_t (*)(void))sub_10001B31C, (uint64_t (*)(uint64_t))sub_10001C3C0, (uint64_t)sub_1000D9AF0);
}

uint64_t sub_1000DBA4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x726F63657220796DLL, 0xEC000000676E6964);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6F6365722077656ELL, 0xED0000676E696472);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6173726165686572, 0xE90000000000006CLL);
  v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x7373616C63, 0xE500000000000000);
  v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6572757463656CLL, 0xE700000000000000);
  v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6569767265746E69, 0xE900000000000077);
  v6 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6563697463617270, 0xE800000000000000);
  v7 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x20676E697465656DLL, 0xED00007365746F6ELL);
  v8 = sub_100014E10(&qword_1001EBE10);
  v9 = swift_allocObject(v8, 96, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10018A020;
  *(_QWORD *)(v9 + 32) = v0;
  *(_QWORD *)(v9 + 40) = v1;
  *(_QWORD *)(v9 + 48) = v2;
  *(_QWORD *)(v9 + 56) = v3;
  *(_QWORD *)(v9 + 64) = v4;
  *(_QWORD *)(v9 + 72) = v5;
  *(_QWORD *)(v9 + 80) = v6;
  *(_QWORD *)(v9 + 88) = v7;
  v10 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v9);
  return v10;
}

void sub_1000DBBD8()
{
  qword_1001F6D40 = (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t sub_1000DBBEC(uint64_t a1, uint64_t a2)
{
  return sub_1000DBC28(a1, a2, &qword_1001E8FF0, &qword_1001F6D38, (uint64_t)sub_1000D909C);
}

uint64_t sub_1000DBC0C(uint64_t a1, uint64_t a2)
{
  return sub_1000DBC28(a1, a2, &qword_1001E8FF8, &qword_1001F6D40, (uint64_t)sub_1000DBBD8);
}

uint64_t sub_1000DBC28(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  if (*a3 != -1)
    swift_once(a3, a5);
  return swift_bridgeObjectRetain(*a4);
}

uint64_t sub_1000DBC64(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_1001EB7CC);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1000DBCAC;
  return sub_1000DDD48();
}

uint64_t sub_1000DBCAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000DBD08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to DynamicOptionsProvider.defaultResult()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100003A7C;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

unint64_t sub_1000DBD78()
{
  unint64_t result;

  result = qword_1001EB708[0];
  if (!qword_1001EB708[0])
  {
    result = swift_getWitnessTable(&unk_10018B328, &type metadata for DeletableRecordingsOptionsProvider);
    atomic_store(result, qword_1001EB708);
  }
  return result;
}

uint64_t sub_1000DBDBC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_1001EB7C4);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1000DEC20;
  return sub_1000DE260();
}

uint64_t sub_1000DBE04()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for ShortcutTileColor(0);
  sub_1000B52C4(v0, qword_1001F6D48);
  v1 = sub_1000AACFC(v0, (uint64_t)qword_1001F6D48);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for ShortcutTileColor.red(_:), v0);
}

uint64_t sub_1000DBE5C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6160(&qword_1001E9000, (uint64_t (*)(_QWORD))&type metadata accessor for ShortcutTileColor, (uint64_t)qword_1001F6D48, (uint64_t)sub_1000DBE04, a1);
}

ValueMetadata *type metadata accessor for DeletableRecordingsOptionsProvider()
{
  return &type metadata for DeletableRecordingsOptionsProvider;
}

ValueMetadata *type metadata accessor for AllRecordingsOptionsProvider()
{
  return &type metadata for AllRecordingsOptionsProvider;
}

ValueMetadata *type metadata accessor for RecordingAssistantIntents()
{
  return &type metadata for RecordingAssistantIntents;
}

ValueMetadata *type metadata accessor for SelectRecording()
{
  return &type metadata for SelectRecording;
}

uint64_t *assignWithCopy for RCControlCenterToggleRecording(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

_QWORD *assignWithTake for RCControlCenterToggleRecording(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for ChangeRecordingPlaybackSetting()
{
  return &type metadata for ChangeRecordingPlaybackSetting;
}

uint64_t _s10VoiceMemos12PlaybackTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000DBFC8 + 4 * byte_10018A055[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000DBFFC + 4 * byte_10018A050[v4]))();
}

uint64_t sub_1000DBFFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DC004(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000DC00CLL);
  return result;
}

uint64_t sub_1000DC018(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000DC020);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000DC024(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DC02C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecordingSettingType()
{
  return &type metadata for RecordingSettingType;
}

ValueMetadata *type metadata accessor for DeleteRecording()
{
  return &type metadata for DeleteRecording;
}

ValueMetadata *type metadata accessor for ToggleRecording()
{
  return &type metadata for ToggleRecording;
}

ValueMetadata *type metadata accessor for StopRecording()
{
  return &type metadata for StopRecording;
}

_QWORD *assignWithCopy for RCRecordingEntity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[4];
  v11 = a1[4];
  a1[4] = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

_QWORD *assignWithTake for RCRecordingEntity(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  swift_release(a1[3]);
  v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_release(v5);
  return a1;
}

uint64_t sub_1000DC168()
{
  return sub_10000EDB0(&qword_1001EB720, &qword_1001EB728, (uint64_t)&protocol conformance descriptor for ParameterSummarySwitchCondition<A, B, C>);
}

uint64_t sub_1000DC194()
{
  return sub_10000EDB0((unint64_t *)&qword_1001EA120, (uint64_t *)&unk_1001EBDE0, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_1000DC1C0()
{
  return sub_10000EDB0(&qword_1001EB730, &qword_1001EB738, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_1000DC1EC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1[7] = a1;
  v2 = sub_100014E10(&qword_1001EA0F0);
  v1[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Date(0);
  v1[9] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[10] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[11] = swift_task_alloc(v5);
  v1[12] = swift_task_alloc(v5);
  v6 = type metadata accessor for MainActor(0);
  v1[13] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000DC2B4, v7, v8);
}

uint64_t sub_1000DC2B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  char **v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;

  v1 = v0[7];
  swift_release(v0[13]);
  v58 = v0;
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v0[7];
    v4 = (void *)objc_opt_self(RCRecordingsModelInteractor);
    swift_bridgeObjectRetain(v3);
    v5 = (_QWORD *)(v3 + 40);
    do
    {
      v7 = *v5;
      swift_bridgeObjectRetain(*v5);
      v8 = objc_msgSend(v4, "sharedRecordingsModelInteractor");
      v9 = String._bridgeToObjectiveC()();
      v10 = objc_msgSend(v8, "recordingForUUID:", v9);

      v11 = swift_bridgeObjectRelease(v7);
      if (v10)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v13 >= v12 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
        specialized Array._endMutation()(v6);
      }
      v5 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v0[7]);
  }
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    if ((uint64_t)_swiftEmptyArrayStorage < 0)
      v48 = _swiftEmptyArrayStorage;
    else
      v48 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    result = _CocoaArrayWrapper.endIndex.getter(v48);
    v14 = result;
    if (result)
      goto LABEL_11;
LABEL_35:
    v53 = _swiftEmptyArrayStorage;
LABEL_36:
    v50 = v0[11];
    v49 = v0[12];
    v51 = v0[8];
    swift_bridgeObjectRelease_n(_swiftEmptyArrayStorage, 2);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    return ((uint64_t (*)(_QWORD *))v0[1])(v53);
  }
  v14 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  if (!v14)
    goto LABEL_35;
LABEL_11:
  if (v14 >= 1)
  {
    v16 = 0;
    v52 = v0 + 2;
    v57 = v0[10];
    v17 = (unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001;
    v53 = _swiftEmptyArrayStorage;
    v18 = &selRef_touch;
    v56 = v14;
    while (1)
    {
      if (v17)
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, _swiftEmptyArrayStorage);
      else
        v19 = (id)_swiftEmptyArrayStorage[v16 + 4];
      v20 = v19;
      v21 = objc_msgSend(v19, v18[146]);
      if (v21)
      {
        v22 = v21;
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        v25 = v24;

        v26 = objc_msgSend(v20, "title");
        if (v26)
        {
          v27 = v26;
          v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
          v30 = v29;

          v31 = objc_msgSend(v20, "creationDate");
          if (v31)
          {
            v32 = v31;
            v54 = v28;
            v55 = v23;
            v33 = v0[11];
            v34 = v0[9];
            v35 = v58[8];
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32);
            v36(v35, v33, v34);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v35, 0, 1, v34);
            v0 = v58;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v35, 1, v34) != 1)
            {
              v37 = (char *)v58[11];
              v38 = v58[12];
              v39 = v58[9];
              v36(v38, v58[8], v39);
              (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v37, v38, v39);
              objc_msgSend(v20, "length");
              sub_100014B08(v55, v25, v54, v30, v37, v52, v40);
              (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v38, v39);

              v41 = v53;
              if ((swift_isUniquelyReferenced_nonNull_native(v53) & 1) == 0)
                v41 = sub_1000C98C0(0, v53[2] + 1, 1, v53);
              v17 = (unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001;
              v14 = v56;
              v43 = v41[2];
              v42 = v41[3];
              if (v43 >= v42 >> 1)
                v41 = sub_1000C98C0((_QWORD *)(v42 > 1), v43 + 1, 1, v41);
              v41[2] = v43 + 1;
              v53 = v41;
              v44 = &v41[5 * v43];
              v45 = *(_OWORD *)v52;
              v46 = *((_OWORD *)v52 + 1);
              v44[8] = v52[4];
              *((_OWORD *)v44 + 2) = v45;
              *((_OWORD *)v44 + 3) = v46;
              v0 = v58;
              goto LABEL_30;
            }
          }
          else
          {
            (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v57 + 56))(v0[8], 1, 1, v0[9]);
          }
          v47 = v0[8];
          swift_bridgeObjectRelease(v25);
          swift_bridgeObjectRelease(v30);
          sub_100005440(v47, &qword_1001EA0F0);

          v17 = (unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001;
          v14 = v56;
LABEL_30:
          v18 = &selRef_touch;
          goto LABEL_15;
        }
        swift_bridgeObjectRelease(v25);
      }

LABEL_15:
      if (v14 == ++v16)
        goto LABEL_36;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000DC748(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2[16] = a1;
  v2[17] = a2;
  v3 = sub_100014E10(&qword_1001EA0F0);
  v2[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  v2[19] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[20] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[21] = swift_task_alloc(v6);
  v2[22] = swift_task_alloc(v6);
  v7 = sub_100014E10(&qword_1001EB9B8);
  v2[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CharacterSet(0);
  v2[24] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[25] = v9;
  v2[26] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MainActor(0);
  v2[27] = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000DC890, v11, v12);
}

uint64_t sub_1000DC890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  void *v18;
  char *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char **v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  double v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  void (*v94)(uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 216));
  v6 = (unint64_t)objc_msgSend((id)objc_opt_self(RCApplicationModel), "sharedApplicationModel");
  *(_QWORD *)(v0 + 56) = v5;
  *(_QWORD *)(v0 + 64) = v4;
  static CharacterSet.whitespaces.getter();
  v97 = sub_1000A3A18();
  v96 = StringProtocol.trimmingCharacters(in:)(v1, &type metadata for String);
  v8 = v7;
  v94 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v94(v1, v2);
  v9 = String._bridgeToObjectiveC()();
  *(_QWORD *)(v0 + 120) = 0;
  v10 = objc_msgSend((id)v6, "existingRecordingsWithName:searchOption:error:", v9, 2, v0 + 120);

  v89 = v0 + 120;
  v11 = *(void **)(v0 + 120);
  if (v10)
  {
    v105 = v0;
    v12 = sub_100005310(0, (unint64_t *)&qword_1001EAF28, RCCloudRecording_ptr);
    v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v12);
    v14 = v11;

    if ((unint64_t)v13 >> 62)
      goto LABEL_46;
    v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
    v16 = (_QWORD *)v105;
    v90 = v6;
    if (v15)
    {
      v6 = 0;
      v99 = v13 & 0xFFFFFFFFFFFFFF8;
      v101 = v13 & 0xC000000000000001;
      v91 = v15;
      v92 = v13;
      while (1)
      {
        if (v101)
        {
          v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v13);
        }
        else
        {
          if (v6 >= *(_QWORD *)(v99 + 16))
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            if (v13 < 0)
              v81 = v13;
            else
              v81 = v13 & 0xFFFFFFFFFFFFFF8;
            v15 = _CocoaArrayWrapper.endIndex.getter(v81);
            goto LABEL_4;
          }
          v17 = *(id *)(v13 + 8 * v6 + 32);
        }
        v18 = v17;
        v19 = (char *)(v6 + 1);
        if (__OFADD__(v6, 1))
          goto LABEL_45;
        v20 = objc_msgSend(v17, "title");
        if (v20)
        {
          v21 = v20;
          v103 = v18;
          v22 = v16[26];
          v23 = v16[23];
          v24 = v16[24];
          v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
          v26 = v8;
          v28 = v27;

          *(_QWORD *)(v105 + 72) = v25;
          *(_QWORD *)(v105 + 80) = v28;
          static CharacterSet.whitespaces.getter();
          v29 = StringProtocol.trimmingCharacters(in:)(v22, &type metadata for String);
          v31 = v30;
          v94(v22, v24);
          v32 = v28;
          v8 = v26;
          v16 = (_QWORD *)v105;
          swift_bridgeObjectRelease(v32);
          *(_QWORD *)(v105 + 88) = v29;
          *(_QWORD *)(v105 + 96) = v31;
          *(_QWORD *)(v105 + 104) = v96;
          *(_QWORD *)(v105 + 112) = v8;
          v33 = type metadata accessor for Locale(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v23, 1, 1, v33);
          v34 = StringProtocol.compare<A>(_:options:range:locale:)(v89 - 16, 129, 0, 0, 1, v23, &type metadata for String, &type metadata for String, v97, v97);
          sub_100005440(v23, &qword_1001EB9B8);
          v35 = swift_bridgeObjectRelease(v31);
          if (v34)
          {

          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v35);
            v36 = _swiftEmptyArrayStorage[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v36);
            v37 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v103);
            specialized ContiguousArray._endMutation()(v37);
          }
          v15 = v91;
          v13 = v92;
        }
        else
        {

        }
        ++v6;
        if (v19 == (char *)v15)
        {
          v38 = _swiftEmptyArrayStorage;
          v6 = v90;
          goto LABEL_21;
        }
      }
    }
    v38 = _swiftEmptyArrayStorage;
LABEL_21:
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v13);
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0
      || ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0)
    {
      v82 = swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
      v47 = _CocoaArrayWrapper.endIndex.getter(v82);
      if (v47)
        goto LABEL_24;
    }
    else
    {
      v47 = _swiftEmptyArrayStorage[2];
      swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
      if (v47)
      {
LABEL_24:
        if (v47 < 1)
          __break(1u);
        v48 = 0;
        v93 = (_QWORD *)(v89 - 104);
        v100 = v16[20];
        v49 = (unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001;
        v98 = _swiftEmptyArrayStorage;
        v50 = &selRef_touch;
        while (1)
        {
          if (v49)
            v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v48, v38);
          else
            v51 = (id)v38[v48 + 4];
          v52 = v51;
          v53 = objc_msgSend(v51, v50[146]);
          if (v53)
          {
            v54 = v53;
            v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
            v56 = v55;

            v57 = objc_msgSend(v52, "title");
            if (v57)
            {
              v58 = v57;
              v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
              v104 = v60;

              v61 = objc_msgSend(v52, "creationDate");
              if (v61)
              {
                v62 = v61;
                v95 = v59;
                v63 = v16[21];
                v64 = v16[19];
                v65 = v47;
                v66 = v38;
                v67 = *(_QWORD *)(v105 + 144);
                static Date._unconditionallyBridgeFromObjectiveC(_:)();

                v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 32);
                v69 = v63;
                v50 = &selRef_touch;
                v68(v67, v69, v64);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v100 + 56))(v67, 0, 1, v64);
                v70 = v67;
                v38 = v66;
                v47 = v65;
                v16 = (_QWORD *)v105;
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v70, 1, v64) != 1)
                {
                  v72 = *(char **)(v105 + 168);
                  v71 = *(_QWORD *)(v105 + 176);
                  v73 = *(_QWORD *)(v105 + 152);
                  v68(v71, *(_QWORD *)(v105 + 144), v73);
                  (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v72, v71, v73);
                  objc_msgSend(v52, "length");
                  sub_100014B08(v102, v56, v95, v104, v72, v93, v74);
                  (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v71, v73);

                  if ((swift_isUniquelyReferenced_nonNull_native(v98) & 1) == 0)
                    v98 = sub_1000C98C0(0, v98[2] + 1, 1, v98);
                  v76 = v98[2];
                  v75 = v98[3];
                  v6 = v90;
                  v50 = &selRef_touch;
                  if (v76 >= v75 >> 1)
                    v98 = sub_1000C98C0((_QWORD *)(v75 > 1), v76 + 1, 1, v98);
                  v98[2] = v76 + 1;
                  v77 = &v98[5 * v76];
                  v78 = *(_OWORD *)v93;
                  v79 = *(_OWORD *)(v89 - 88);
                  v77[8] = *(_QWORD *)(v89 - 72);
                  *((_OWORD *)v77 + 2) = v78;
                  *((_OWORD *)v77 + 3) = v79;
                  v16 = (_QWORD *)v105;
                  goto LABEL_43;
                }
              }
              else
              {
                (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v100 + 56))(v16[18], 1, 1, v16[19]);
              }
              v80 = v16[18];
              swift_bridgeObjectRelease(v56);
              swift_bridgeObjectRelease(v104);
              sub_100005440(v80, &qword_1001EA0F0);

              v6 = v90;
LABEL_43:
              v49 = (unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001;
              goto LABEL_28;
            }
            swift_bridgeObjectRelease(v56);
          }

LABEL_28:
          if (v47 == ++v48)
            goto LABEL_52;
        }
      }
    }
    v98 = _swiftEmptyArrayStorage;
LABEL_52:
    v83 = *(_QWORD *)(v105 + 208);
    v84 = *(_QWORD *)(v105 + 184);
    v85 = *(_QWORD *)(v105 + 176);
    v86 = *(_QWORD *)(v105 + 168);
    v87 = v38;
    v88 = *(_QWORD *)(v105 + 144);
    swift_release_n(v87, 2);

    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v88);
    return (*(uint64_t (**)(_QWORD *))(v105 + 8))(v98);
  }
  else
  {
    v39 = *(_QWORD *)(v0 + 208);
    v41 = *(_QWORD *)(v0 + 176);
    v40 = *(_QWORD *)(v0 + 184);
    v42 = *(_QWORD *)(v0 + 168);
    v43 = *(_QWORD *)(v0 + 144);
    v44 = v11;
    swift_bridgeObjectRelease(v8);
    _convertNSErrorToError(_:)(v11);

    swift_willThrow(v45);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000DD044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100014E10(&qword_1001EA200);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v20 - v8;
  v10 = sub_100014E10(&qword_1001EB758);
  __chkstk_darwin(v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100014E10(&qword_1001EB860);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000002ALL, 0x8000000100184C00);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v21 = 0;
  IntentDialog.init(stringLiteral:)(0xD00000000000003FLL, 0x8000000100184C30);
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 0, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  sub_1000DE878();
  sub_100014A2C();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:)(v16, v12, &v21, v9, v7, v3);
}

unint64_t sub_1000DD288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v0 = sub_100014E10(&qword_1001EB948);
  v1 = *(_QWORD *)(sub_100014E10(&qword_1001EB950) - 8);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = *(unsigned __int8 *)(v1 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = swift_allocObject(v0, v4 + 2 * v2, v3 | 7);
  *(_OWORD *)(v5 + 16) = xmmword_100187B90;
  v6 = (_BYTE *)(v5 + v4);
  *v6 = 0;
  DisplayRepresentation.init(stringLiteral:)(0xD000000000000019, 0x8000000100184E40);
  v6[v2] = 1;
  DisplayRepresentation.init(stringLiteral:)(0xD000000000000014, 0x8000000100184E60);
  return sub_100108FAC(v5);
}

uint64_t sub_1000DD360()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  void (*v31)(char *);
  unsigned int v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v36 = type metadata accessor for InputConnectionBehavior(0);
  v0 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v2 = (char *)&v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100014E10(&qword_1001EA200);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v31 - v7;
  v9 = sub_100014E10(&qword_1001EB818);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100014E10(&qword_1001EB758);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  v35 = v15;
  __chkstk_darwin(v15);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100014E10(&qword_1001EB820);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000043, 0x8000000100184AE0);
  v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v34(v14, 1, 1, v15);
  v19 = type metadata accessor for ChangeOperation(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v11, 1, 1, v19);
  v20 = type metadata accessor for IntentDialog(0);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v21(v8, 1, 1, v20);
  v21(v6, 1, 1, v20);
  v32 = enum case for InputConnectionBehavior.default(_:);
  v31 = *(void (**)(char *))(v0 + 104);
  v22 = v36;
  v31(v2);
  v23 = sub_1000DE7C8(&qword_1001EB828, (uint64_t)&protocol conformance descriptor for ChangeOperation);
  dispatch thunk of static CaseIterable.allCases.getter(&v38, v19, v23);
  v24 = v38;
  v25 = sub_1000DE7C8(&qword_1001EB830, (uint64_t)&protocol conformance descriptor for ChangeOperation);
  v26 = v11;
  v27 = v6;
  v28 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v18, v14, v26, v8, v6, v2, v24, v25);
  sub_100014E10(&qword_1001EB838);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000003ALL, 0x8000000100184B30);
  v34(v14, 1, 1, v35);
  v37 = 2;
  IntentDialog.init(stringLiteral:)(0xD00000000000004FLL, 0x8000000100184B70);
  v21(v8, 0, 1, v20);
  v21(v27, 1, 1, v20);
  ((void (*)(char *, _QWORD, uint64_t))v31)(v2, v32, v22);
  v29 = sub_1000D789C();
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v18, v14, &v37, v8, v27, v2, &off_1001AD5A0, v29);
  return v28;
}

uint64_t sub_1000DD700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v20[2];
  _OWORD v21[2];
  uint64_t v22;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100014E10(&qword_1001EA200);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v20 - v8;
  v10 = sub_100014E10(&qword_1001EB758);
  __chkstk_darwin(v10);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = sub_100014E10(&qword_1001EB7F8);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000028, 0x80000001001849F0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  IntentDialog.init(stringLiteral:)(0xD00000000000003DLL, 0x8000000100184A20);
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 0, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  sub_10001BB40();
  sub_100014A2C();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:)(v16, v12, v21, v9, v7, v3);
}

unint64_t sub_1000DD94C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v0 = sub_100014E10(&qword_1001EB938);
  v1 = *(_QWORD *)(sub_100014E10(&qword_1001EB940) - 8);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = *(unsigned __int8 *)(v1 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = swift_allocObject(v0, v4 + 2 * v2, v3 | 7);
  *(_OWORD *)(v5 + 16) = xmmword_100187B90;
  v6 = (_BYTE *)(v5 + v4);
  *v6 = 0;
  DisplayRepresentation.init(stringLiteral:)(0xD00000000000001ELL, 0x8000000100184D90);
  v6[v2] = 1;
  DisplayRepresentation.init(stringLiteral:)(0xD00000000000001BLL, 0x8000000100184DB0);
  return sub_100108FC8(v5);
}

uint64_t sub_1000DDA24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(char *);
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD v29[2];
  uint64_t v30;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v26 = *(_QWORD *)(v0 - 8);
  v27 = v0;
  __chkstk_darwin(v0);
  v28 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100014E10(&qword_1001EA200);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v23 - v6;
  v8 = sub_100014E10(&qword_1001EB758);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100014E10(&qword_1001EB7A0);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000002DLL, 0x8000000100184950);
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v24(v10, 1, 1, v11);
  LOBYTE(v29[0]) = 0;
  v15 = type metadata accessor for IntentDialog(0);
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v16(v7, 1, 1, v15);
  v16(v5, 1, 1, v15);
  v25 = enum case for InputConnectionBehavior.default(_:);
  v17 = v27;
  v18 = *(void (**)(char *))(v26 + 104);
  v19 = v28;
  v18(v28);
  v20 = sub_10001C9D8();
  v26 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v14, v10, v29, v7, v5, v19, &off_1001AD618, v20);
  v23 = sub_100014E10(&qword_1001EB7A8);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000026, 0x8000000100184980);
  v24(v10, 1, 1, v11);
  v30 = 0;
  memset(v29, 0, sizeof(v29));
  IntentDialog.init(stringLiteral:)(0xD00000000000003BLL, 0x80000001001849B0);
  v16(v7, 0, 1, v15);
  v16(v5, 1, 1, v15);
  v21 = v28;
  ((void (*)(char *, _QWORD, uint64_t))v18)(v28, v25, v17);
  sub_10001BB40();
  sub_100014A2C();
  IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:)(v14, v10, v29, v7, v5, v21);
  return v26;
}

uint64_t sub_1000DDD48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_100014E10(&qword_1001EA0F0);
  v0[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Date(0);
  v0[8] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v0[9] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[10] = swift_task_alloc(v4);
  v0[11] = swift_task_alloc(v4);
  v5 = type metadata accessor for MainActor(0);
  v0[12] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000DDE0C, v6, v7);
}

uint64_t sub_1000DDE0C()
{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  char **v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;

  swift_release(v0[12]);
  v1 = (void *)objc_opt_self(RCApplicationModel);
  v2 = objc_msgSend(v1, "sharedApplicationModel");
  v3 = objc_msgSend(v2, "recordings");

  v4 = sub_100005310(0, (unint64_t *)&qword_1001EAF28, RCCloudRecording_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  v6 = objc_msgSend(v1, "sharedApplicationModel");
  v7 = objc_msgSend(v6, "deletedRecordings");

  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v4);
  sub_1000E88E8(v8);
  v9 = v5;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v45 = v5;
    else
      v45 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    result = _CocoaArrayWrapper.endIndex.getter(v45);
    v10 = result;
    if (result)
      goto LABEL_3;
LABEL_27:
    v50 = _swiftEmptyArrayStorage;
LABEL_28:
    v47 = v0[10];
    v46 = v0[11];
    v48 = v0[7];
    swift_bridgeObjectRelease_n(v9, 2);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    return ((uint64_t (*)(_QWORD *))v0[1])(v50);
  }
  v10 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v5);
  if (!v10)
    goto LABEL_27;
LABEL_3:
  if (v10 >= 1)
  {
    v12 = 0;
    v49 = v0 + 2;
    v56 = v0[9];
    v13 = v9 & 0xC000000000000001;
    v50 = _swiftEmptyArrayStorage;
    v14 = &selRef_touch;
    v57 = v0;
    v53 = v9;
    v54 = v9 & 0xC000000000000001;
    v55 = v10;
    while (1)
    {
      if (v13)
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v9);
      else
        v15 = *(id *)(v9 + 8 * v12 + 32);
      v16 = v15;
      v17 = objc_msgSend(v15, v14[146]);
      if (v17)
      {
        v18 = v17;
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        v21 = v20;

        v22 = objc_msgSend(v16, "title");
        if (v22)
        {
          v23 = v22;
          v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
          v26 = v25;

          v27 = objc_msgSend(v16, "creationDate");
          if (v27)
          {
            v28 = v27;
            v51 = v24;
            v52 = v19;
            v29 = v0[10];
            v30 = v0[8];
            v31 = v57[7];
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32);
            v32(v31, v29, v30);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v56 + 56))(v31, 0, 1, v30);
            v33 = v31;
            v9 = v53;
            v0 = v57;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v33, 1, v30) != 1)
            {
              v34 = (char *)v57[10];
              v35 = v57[11];
              v36 = v57[8];
              v32(v35, v57[7], v36);
              (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v34, v35, v36);
              objc_msgSend(v16, "length");
              sub_100014B08(v52, v21, v51, v26, v34, v49, v37);
              (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v35, v36);

              v38 = v50;
              if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
                v38 = sub_1000C98C0(0, v50[2] + 1, 1, v50);
              v13 = v54;
              v10 = v55;
              v40 = v38[2];
              v39 = v38[3];
              if (v40 >= v39 >> 1)
                v38 = sub_1000C98C0((_QWORD *)(v39 > 1), v40 + 1, 1, v38);
              v38[2] = v40 + 1;
              v50 = v38;
              v41 = &v38[5 * v40];
              v42 = *(_OWORD *)v49;
              v43 = *((_OWORD *)v49 + 1);
              v41[8] = v49[4];
              *((_OWORD *)v41 + 2) = v42;
              *((_OWORD *)v41 + 3) = v43;
              v0 = v57;
              v9 = v53;
              goto LABEL_22;
            }
          }
          else
          {
            (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v56 + 56))(v0[7], 1, 1, v0[8]);
          }
          v44 = v0[7];
          swift_bridgeObjectRelease(v21);
          swift_bridgeObjectRelease(v26);
          sub_100005440(v44, &qword_1001EA0F0);

          v13 = v54;
          v10 = v55;
LABEL_22:
          v14 = &selRef_touch;
          goto LABEL_7;
        }
        swift_bridgeObjectRelease(v21);
      }

LABEL_7:
      if (v10 == ++v12)
        goto LABEL_28;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000DE260()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_100014E10(&qword_1001EA0F0);
  v0[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Date(0);
  v0[8] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v0[9] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[10] = swift_task_alloc(v4);
  v0[11] = swift_task_alloc(v4);
  v5 = type metadata accessor for MainActor(0);
  v0[12] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000DE324, v6, v7);
}

uint64_t sub_1000DE324()
{
  _QWORD *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  char **v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;

  swift_release(v0[12]);
  v1 = objc_msgSend((id)objc_opt_self(RCApplicationModel), "sharedApplicationModel");
  v2 = objc_msgSend(v1, "recordings");

  v3 = sub_100005310(0, (unint64_t *)&qword_1001EAF28, RCCloudRecording_ptr);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0)
      v40 = v4;
    else
      v40 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    result = _CocoaArrayWrapper.endIndex.getter(v40);
    v5 = result;
    if (result)
      goto LABEL_3;
LABEL_27:
    v45 = _swiftEmptyArrayStorage;
LABEL_28:
    v42 = v0[10];
    v41 = v0[11];
    v43 = v0[7];
    swift_bridgeObjectRelease_n(v4, 2);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    return ((uint64_t (*)(_QWORD *))v0[1])(v45);
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v4);
  if (!v5)
    goto LABEL_27;
LABEL_3:
  if (v5 >= 1)
  {
    v7 = 0;
    v44 = v0 + 2;
    v51 = v0[9];
    v8 = v4 & 0xC000000000000001;
    v45 = _swiftEmptyArrayStorage;
    v9 = &selRef_touch;
    v52 = v0;
    v48 = v4;
    v49 = v4 & 0xC000000000000001;
    v50 = v5;
    while (1)
    {
      if (v8)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v4);
      else
        v10 = *(id *)(v4 + 8 * v7 + 32);
      v11 = v10;
      v12 = objc_msgSend(v10, v9[146], v44);
      if (v12)
      {
        v13 = v12;
        v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v16 = v15;

        v17 = objc_msgSend(v11, "title");
        if (v17)
        {
          v18 = v17;
          v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
          v21 = v20;

          v22 = objc_msgSend(v11, "creationDate");
          if (v22)
          {
            v23 = v22;
            v46 = v19;
            v47 = v14;
            v24 = v0[10];
            v25 = v0[8];
            v26 = v52[7];
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32);
            v27(v26, v24, v25);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v51 + 56))(v26, 0, 1, v25);
            v28 = v26;
            v4 = v48;
            v0 = v52;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v28, 1, v25) != 1)
            {
              v29 = (char *)v52[10];
              v30 = v52[11];
              v31 = v52[8];
              v27(v30, v52[7], v31);
              (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v29, v30, v31);
              objc_msgSend(v11, "length");
              sub_100014B08(v47, v16, v46, v21, v29, v44, v32);
              (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v30, v31);

              v33 = v45;
              if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
                v33 = sub_1000C98C0(0, v45[2] + 1, 1, v45);
              v8 = v49;
              v5 = v50;
              v35 = v33[2];
              v34 = v33[3];
              if (v35 >= v34 >> 1)
                v33 = sub_1000C98C0((_QWORD *)(v34 > 1), v35 + 1, 1, v33);
              v33[2] = v35 + 1;
              v45 = v33;
              v36 = &v33[5 * v35];
              v37 = *(_OWORD *)v44;
              v38 = *((_OWORD *)v44 + 1);
              v36[8] = v44[4];
              *((_OWORD *)v36 + 2) = v37;
              *((_OWORD *)v36 + 3) = v38;
              v0 = v52;
              v4 = v48;
              goto LABEL_22;
            }
          }
          else
          {
            (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v51 + 56))(v0[7], 1, 1, v0[8]);
          }
          v39 = v0[7];
          swift_bridgeObjectRelease(v16);
          swift_bridgeObjectRelease(v21);
          sub_100005440(v39, &qword_1001EA0F0);

          v8 = v49;
          v5 = v50;
LABEL_22:
          v9 = &selRef_touch;
          goto LABEL_7;
        }
        swift_bridgeObjectRelease(v16);
      }

LABEL_7:
      if (v5 == ++v7)
        goto LABEL_28;
    }
  }
  __break(1u);
  return result;
}

__n128 sub_1000DE714@<Q0>(uint64_t a1@<X8>)
{
  __n128 result;
  __int128 v3;
  uint64_t v4;
  __n128 v5;
  __int128 v6;

  IntentParameter.wrappedValue.getter(&v4);
  result = v5;
  v3 = v6;
  *(_QWORD *)a1 = v4;
  *(__n128 *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 24) = v3;
  return result;
}

_QWORD *sub_1000DE75C@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1000DE794(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

uint64_t sub_1000DE7C8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ChangeOperation(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_1000DE808@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1000DE840(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  swift_bridgeObjectRetain(v2);
  return IntentParameter.wrappedValue.setter(&v2);
}

unint64_t sub_1000DE878()
{
  unint64_t result;

  result = qword_1001EB868;
  if (!qword_1001EB868)
  {
    result = swift_getWitnessTable(&unk_10018B2C8, &type metadata for DeletableRecordingsOptionsProvider);
    atomic_store(result, (unint64_t *)&qword_1001EB868);
  }
  return result;
}

double sub_1000DE8BC@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  IntentParameter.wrappedValue.getter(&v3);
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_1000DE8F4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v2 = *a1;
  v1 = a1[1];
  v4[0] = v2;
  v4[1] = v1;
  swift_bridgeObjectRetain(v1);
  return IntentParameter.wrappedValue.setter(v4);
}

unint64_t sub_1000DE92C()
{
  unint64_t result;

  result = qword_1001EBE50;
  if (!qword_1001EBE50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1001EBE50);
  }
  return result;
}

double sub_1000DE970@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  IntentParameter.wrappedValue.getter(v5);
  v2 = v6;
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v2;
  return result;
}

uint64_t sub_1000DE9B4(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000EE30(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_1000DEA18@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1000DEA50(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

uint64_t sub_1000DEA84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000DEAAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

unint64_t sub_1000DEAD4()
{
  unint64_t result;

  result = qword_1001EB978;
  if (!qword_1001EB978)
  {
    result = swift_getWitnessTable(&unk_1001897DC, &type metadata for StopRecordingError);
    atomic_store(result, (unint64_t *)&qword_1001EB978);
  }
  return result;
}

uint64_t sub_1000DEB18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

void sub_1000DEB40(_QWORD *a1@<X8>)
{
  sub_1000D5030(a1);
}

void sub_1000DEB58()
{
  uint64_t v0;
  uint64_t v1;
  id *v2;
  void *v3;
  void *v4;

  v2 = *(id **)(v0 + 16);
  (*(void (**)(void **__return_ptr))(v0 + 24))(&v4);
  if (!v1)
  {
    v3 = v4;
    sub_1000DEBA4(*v2);
    *v2 = v3;
  }
}

void sub_1000DEBA4(id a1)
{
  if (a1 != (id)1)

}

uint64_t sub_1000DEBB4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1000D4B1C(*(_QWORD *)(v1 + 16), a1);
}

_QWORD *sub_1000DEBCC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD **)(v0 + 16);
  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v0 + 24))(&v5);
  if (!v1)
  {
    v4 = v5;
    result = (_QWORD *)swift_bridgeObjectRelease(*v2);
    *v2 = v4;
  }
  return result;
}

Swift::Int sub_1000DEC24(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v2 = 0xD000000000000010;
  Hasher.init(_seed:)(v5, 0);
  if (a1)
  {
    if (a1 == 1)
      v2 = 0xD000000000000016;
    else
      v2 = 0x64726F6365524352;
    if (a1 == 1)
      v3 = 0x8000000100182070;
    else
      v3 = 0xEF64726143676E69;
  }
  else
  {
    v3 = 0x8000000100182050;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000DECD8(char a1)
{
  const char *v1;
  unint64_t v2;
  unint64_t v3;

  if (a1)
  {
    if (a1 == 1)
    {
      v1 = "UIELEMENT_ENTITY_CASE_PLAYBACK_SETTINGS";
      v2 = 0xD000000000000027;
    }
    else
    {
      v1 = "UIELEMENT_ENTITY_CASE_RECORDING_CARD";
      v2 = 0xD000000000000024;
    }
    v3 = (unint64_t)(v1 - 32) | 0x8000000000000000;
  }
  else
  {
    v3 = 0x8000000100185160;
    v2 = 0xD00000000000001DLL;
  }
  return DisplayRepresentation.init(stringLiteral:)(v2, v3);
}

uint64_t sub_1000DED3C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_100014E10(&qword_1001EB758);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LocalizedStringResource(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_1000B52C4(v7, qword_1001F6D60);
  sub_1000AACFC(v7, (uint64_t)qword_1001F6D60);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000015, 0x8000000100185180);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v6, v2);
}

uint64_t sub_1000DEE4C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100106574(*a1, *a2);
}

unint64_t sub_1000DEE5C()
{
  unint64_t result;

  result = qword_1001EB9D0;
  if (!qword_1001EB9D0)
  {
    result = swift_getWitnessTable(&unk_10018B66C, &type metadata for RCUIElementEntity);
    atomic_store(result, (unint64_t *)&qword_1001EB9D0);
  }
  return result;
}

Swift::Int sub_1000DEEA0()
{
  char *v0;

  return sub_1000DEC24(*v0);
}

uint64_t sub_1000DEEA8(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = 0xD000000000000016;
  v3 = 0x8000000100182070;
  if (*v1 != 1)
  {
    v2 = 0x64726F6365524352;
    v3 = 0xEF64726143676E69;
  }
  if (*v1)
    v4 = v2;
  else
    v4 = 0xD000000000000010;
  if (*v1)
    v5 = v3;
  else
    v5 = 0x8000000100182050;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000DEF34(uint64_t a1)
{
  char *v1;

  return sub_100107294(a1, *v1);
}

unint64_t sub_1000DEF3C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000E01DC(*a1);
  *a2 = result;
  return result;
}

void sub_1000DEF68(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = 0xD000000000000010;
  v3 = 0xD000000000000016;
  v4 = 0x8000000100182070;
  if (*v1 != 1)
  {
    v3 = 0x64726F6365524352;
    v4 = 0xEF64726143676E69;
  }
  if (*v1)
  {
    v2 = v3;
    v5 = v4;
  }
  else
  {
    v5 = 0x8000000100182050;
  }
  *a1 = v2;
  a1[1] = v5;
}

unint64_t sub_1000DEFDC()
{
  unint64_t result;

  result = qword_1001EB9D8;
  if (!qword_1001EB9D8)
  {
    result = swift_getWitnessTable(&unk_10018B7A4, &type metadata for RCUIElementEntity);
    atomic_store(result, (unint64_t *)&qword_1001EB9D8);
  }
  return result;
}

unint64_t sub_1000DF024()
{
  unint64_t result;

  result = qword_1001EB9E0;
  if (!qword_1001EB9E0)
  {
    result = swift_getWitnessTable(&unk_10018B7DC, &type metadata for RCUIElementEntity);
    atomic_store(result, (unint64_t *)&qword_1001EB9E0);
  }
  return result;
}

unint64_t sub_1000DF06C()
{
  unint64_t result;

  result = qword_1001EB9E8;
  if (!qword_1001EB9E8)
  {
    result = swift_getWitnessTable(&unk_10018B6D4, &type metadata for RCUIElementEntity);
    atomic_store(result, (unint64_t *)&qword_1001EB9E8);
  }
  return result;
}

unint64_t sub_1000DF0B4()
{
  unint64_t result;

  result = qword_1001EB9F0;
  if (!qword_1001EB9F0)
  {
    result = swift_getWitnessTable(&unk_10018B80C, &type metadata for RCUIElementEntity);
    atomic_store(result, (unint64_t *)&qword_1001EB9F0);
  }
  return result;
}

unint64_t sub_1000DF0FC()
{
  unint64_t result;

  result = qword_1001EB9F8;
  if (!qword_1001EB9F8)
  {
    result = swift_getWitnessTable(&unk_10018B83C, &type metadata for RCUIElementEntity);
    atomic_store(result, (unint64_t *)&qword_1001EB9F8);
  }
  return result;
}

uint64_t sub_1000DF140()
{
  return sub_10000EDB0(&qword_1001EBA00, &qword_1001EBA08, (uint64_t)&protocol conformance descriptor for _RawRepresentableStringQuery<A>);
}

uint64_t sub_1000DF16C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_1000DF06C();
  return static AppEntity<>.defaultQuery.getter(a1, a2, v4);
}

unint64_t sub_1000DF1B0()
{
  unint64_t result;

  result = qword_1001EBA10;
  if (!qword_1001EBA10)
  {
    result = swift_getWitnessTable(&unk_10018B874, &type metadata for RCUIElementEntity);
    atomic_store(result, (unint64_t *)&qword_1001EBA10);
  }
  return result;
}

unint64_t sub_1000DF1F8()
{
  unint64_t result;

  result = qword_1001EBA18;
  if (!qword_1001EBA18)
  {
    result = swift_getWitnessTable(&unk_10018B89C, &type metadata for RCUIElementEntity);
    atomic_store(result, (unint64_t *)&qword_1001EBA18);
  }
  return result;
}

unint64_t sub_1000DF240()
{
  unint64_t result;

  result = qword_1001EBA20;
  if (!qword_1001EBA20)
  {
    result = swift_getWitnessTable(&unk_10018B8C4, &type metadata for RCUIElementEntity);
    atomic_store(result, (unint64_t *)&qword_1001EBA20);
  }
  return result;
}

unint64_t sub_1000DF288()
{
  unint64_t result;

  result = qword_1001EBA28;
  if (!qword_1001EBA28)
  {
    result = swift_getWitnessTable(&unk_10018B91C, &type metadata for RCUIElementEntity);
    atomic_store(result, (unint64_t *)&qword_1001EBA28);
  }
  return result;
}

unint64_t sub_1000DF2D0()
{
  unint64_t result;

  result = qword_1001EBA30;
  if (!qword_1001EBA30)
  {
    result = swift_getWitnessTable(&unk_10018B95C, &type metadata for RCUIElementEntity);
    atomic_store(result, (unint64_t *)&qword_1001EBA30);
  }
  return result;
}

uint64_t sub_1000DF314(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = sub_1000AB058();
  v3 = sub_1000DF06C();
  return AppEntity<>.id.getter(a1, v2, v3);
}

uint64_t sub_1000DF358@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6160(&qword_1001E9008, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1001F6D60, (uint64_t)sub_1000DED3C, a1);
}

uint64_t sub_1000DF37C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[3];

  v3[0] = a2;
  v3[1] = sub_1000AB058();
  v3[2] = sub_1000DF3C8();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppEntity<>.defaultResolverSpecification>>, 1);
}

unint64_t sub_1000DF3C8()
{
  unint64_t result;

  result = qword_1001EBA38;
  if (!qword_1001EBA38)
  {
    result = swift_getWitnessTable(&unk_10018B70C, &type metadata for RCUIElementEntity);
    atomic_store(result, (unint64_t *)&qword_1001EBA38);
  }
  return result;
}

uint64_t sub_1000DF40C(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = sub_1000AB058();
  v3 = sub_1000DF3C8();
  return static AppEntity<>.defaultResolverSpecification.getter(a1, v2, v3);
}

unint64_t sub_1000DF454()
{
  unint64_t result;

  result = qword_1001EBA40;
  if (!qword_1001EBA40)
  {
    result = swift_getWitnessTable(&unk_10018B98C, &type metadata for RCUIElementEntity);
    atomic_store(result, (unint64_t *)&qword_1001EBA40);
  }
  return result;
}

unint64_t sub_1000DF49C()
{
  unint64_t result;

  result = qword_1001EBA48;
  if (!qword_1001EBA48)
  {
    result = swift_getWitnessTable(&unk_10018B9B4, &type metadata for RCUIElementEntity);
    atomic_store(result, (unint64_t *)&qword_1001EBA48);
  }
  return result;
}

unint64_t sub_1000DF4E4()
{
  unint64_t result;

  result = qword_1001EBA50;
  if (!qword_1001EBA50)
  {
    result = swift_getWitnessTable(&unk_10018B694, &type metadata for RCUIElementEntity);
    atomic_store(result, (unint64_t *)&qword_1001EBA50);
  }
  return result;
}

uint64_t sub_1000DF52C()
{
  char *v0;

  return sub_1000DECD8(*v0);
}

uint64_t sub_1000DF534(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = sub_1000DF288();
  v3 = sub_1000DF2D0();
  return CaseDisplayRepresentable<>.localizedStringResource.getter(a1, v2, v3);
}

uint64_t sub_1000DF578()
{
  return sub_10000EDB0(&qword_1001EBA58, &qword_1001EBA60, (uint64_t)&protocol conformance descriptor for [A]);
}

void sub_1000DF5A4(_QWORD *a1@<X8>)
{
  *a1 = &off_1001AD578;
}

unint64_t sub_1000DF5B8()
{
  unint64_t result;

  result = qword_1001EBA68;
  if (!qword_1001EBA68)
  {
    result = swift_getWitnessTable(&unk_10018BA2C, &type metadata for SearchRecordings);
    atomic_store(result, (unint64_t *)&qword_1001EBA68);
  }
  return result;
}

uint64_t sub_1000DF5FC()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_1000B52C4(v0, qword_1001F6D78);
  sub_1000AACFC(v0, (uint64_t)qword_1001F6D78);
  return LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001001850E0);
}

uint64_t sub_1000DF65C()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_1000DF68C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a1;
  v3[1] = a2;
  return IntentParameter.wrappedValue.setter(v3);
}

void (*sub_1000DF6BC(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_1000D7E60;
}

uint64_t sub_1000DF708(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100198A84, 1);
}

uint64_t sub_1000DF718(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10001C2C4();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_1000DF758@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6160(&qword_1001E9010, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001F6D78, (uint64_t)sub_1000DF5FC, a1);
}

uint64_t sub_1000DF77C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000E0224();
  *a1 = result;
  return result;
}

uint64_t sub_1000DF7A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v0 = sub_100014E10(&qword_1001EB7D0);
  v1 = type metadata accessor for _AssistantIntent(0);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v1 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_100188080;
  v5 = sub_1000E0224();
  v3 = sub_10001C2C4();
  result = _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v5, sub_1000DF854, 0, sub_1000DFE54, 0, &type metadata for SearchRecordings, v3);
  qword_1001F6D90 = v2;
  return result;
}

uint64_t sub_1000DF854(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t KeyPath;
  uint64_t v17;
  Swift::String v18;
  char *v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  Swift::String v27;
  char *v28;
  unint64_t v29;
  char *v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  void (*v38)(char *, uint64_t);
  Swift::String v39;
  unint64_t v40;
  Swift::String v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void (*v61)(char *, uint64_t);
  void (*v62)(char *, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v63 = a1;
  v1 = sub_100014E10(&qword_1001EBA88);
  v64 = *(_QWORD *)(v1 - 8);
  v65 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = v4;
  __chkstk_darwin(v4);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100014E10(&qword_1001EBA90);
  __chkstk_darwin(v9);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001C2C4();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(12, 2, &type metadata for SearchRecordings, v12);
  v13._countAndFlagsBits = 0x20686372616573;
  v13._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v13);
  v14 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v62 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v56 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v59 = v6;
  v62(v8, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v6);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v8, v9);
  v61 = *(void (**)(char *, uint64_t))(v5 + 8);
  v61(v8, v6);
  v15._countAndFlagsBits = 0x20726F6620;
  v15._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  KeyPath = swift_getKeyPath(&unk_10018BBC8);
  v60 = sub_1000DE92C();
  v17 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v60);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v17, v9);
  swift_release(v17);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  v54 = v3;
  _AssistantIntent.Phrase.init(stringInterpolation:)(v11, &type metadata for SearchRecordings, v12);
  v58 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for SearchRecordings, v12);
  v64 = *(_QWORD *)(v64 + 8);
  v19 = v3;
  v20 = v65;
  ((void (*)(char *, uint64_t))v64)(v19, v65);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(15, 2, &type metadata for SearchRecordings, v12);
  v21._countAndFlagsBits = 0x6920686372616573;
  v21._object = (void *)0xEA0000000000206ELL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v21);
  v22 = v59;
  v62(v8, v14, v59);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v8, v9);
  v61(v8, v22);
  v23._countAndFlagsBits = 0x20726F6620;
  v23._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v23);
  v24 = swift_getKeyPath(&unk_10018BBC8);
  v25 = v60;
  v26 = _AssistantIntent.IntentProjection.subscript.getter(v24, v60);
  swift_release(v24);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v26, v9);
  swift_release(v26);
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  v28 = v54;
  v29 = v12;
  _AssistantIntent.Phrase.init(stringInterpolation:)(v11, &type metadata for SearchRecordings, v12);
  v53 = v12;
  v57 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v28, &type metadata for SearchRecordings, v12);
  v30 = v28;
  ((void (*)(char *, uint64_t))v64)(v28, v20);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(15, 2, &type metadata for SearchRecordings, v29);
  v31._countAndFlagsBits = 0x6620686372616573;
  v31._object = (void *)0xEB0000000020726FLL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v31);
  v32 = swift_getKeyPath(&unk_10018BBC8);
  v33 = _AssistantIntent.IntentProjection.subscript.getter(v32, v25);
  swift_release(v32);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v33, v9);
  swift_release(v33);
  v34._countAndFlagsBits = 544106784;
  v34._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v34);
  v35 = v56;
  v36 = v59;
  v37 = v62;
  v62(v8, v56, v59);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v8, v9);
  v38 = v61;
  v61(v8, v36);
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v39);
  v40 = v53;
  _AssistantIntent.Phrase.init(stringInterpolation:)(v11, &type metadata for SearchRecordings, v53);
  v55 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v30, &type metadata for SearchRecordings, v40);
  ((void (*)(char *, uint64_t))v64)(v30, v65);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(19, 2, &type metadata for SearchRecordings, v40);
  v41._countAndFlagsBits = 0x6620686372616573;
  v41._object = (void *)0xEB0000000020726FLL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v41);
  v37(v8, v35, v36);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v8, v9);
  v38(v8, v36);
  v42._countAndFlagsBits = 0x2064656C6C616320;
  v42._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v42);
  v43 = swift_getKeyPath(&unk_10018BBC8);
  v44 = _AssistantIntent.IntentProjection.subscript.getter(v43, v60);
  swift_release(v43);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v44, v9);
  swift_release(v44);
  v45._countAndFlagsBits = 0;
  v45._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v45);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v11, &type metadata for SearchRecordings, v40);
  v46 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v30, &type metadata for SearchRecordings, v40);
  ((void (*)(char *, uint64_t))v64)(v30, v65);
  v47 = sub_100014E10(&qword_1001EBA98);
  v48 = swift_allocObject(v47, 64, 7);
  *(_OWORD *)(v48 + 16) = xmmword_10018A010;
  v49 = v57;
  *(_QWORD *)(v48 + 32) = v58;
  *(_QWORD *)(v48 + 40) = v49;
  *(_QWORD *)(v48 + 48) = v55;
  *(_QWORD *)(v48 + 56) = v46;
  v50 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v48);
  return v50;
}

uint64_t sub_1000DFE54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v0 = type metadata accessor for _AssistantIntent.Value(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_10018BBC8);
  v5 = sub_1000DE92C();
  v6 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v5);
  swift_release(KeyPath);
  v7 = sub_10001C2C4();
  _AssistantIntent.Value.init<A>(for:builder:)(v6, sub_1000DBA4C, 0, v7);
  v8 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v9 = sub_100014E10(&qword_1001EB7D8);
  v10 = swift_allocObject(v9, 40, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100188080;
  *(_QWORD *)(v10 + 32) = v8;
  v11 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v10);
  return v11;
}

void sub_1000DFF64()
{
  qword_1001F6D98 = (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t sub_1000DFF78(uint64_t a1, uint64_t a2)
{
  return sub_1000DBC28(a1, a2, &qword_1001E9018, &qword_1001F6D90, (uint64_t)sub_1000DF7A0);
}

uint64_t sub_1000DFF94(uint64_t a1, uint64_t a2)
{
  return sub_1000DBC28(a1, a2, &qword_1001E9020, &qword_1001F6D98, (uint64_t)sub_1000DFF64);
}

ValueMetadata *type metadata accessor for SearchRecordingsAssistantIntents()
{
  return &type metadata for SearchRecordingsAssistantIntents;
}

ValueMetadata *type metadata accessor for SearchRecordings()
{
  return &type metadata for SearchRecordings;
}

uint64_t storeEnumTagSinglePayload for RCUIElementEntity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000E001C + 4 * byte_10018B665[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000E0050 + 4 * byte_10018B660[v4]))();
}

uint64_t sub_1000E0050(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E0058(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E0060);
  return result;
}

uint64_t sub_1000E006C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E0074);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000E0078(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E0080(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RCUIElementEntity()
{
  return &type metadata for RCUIElementEntity;
}

uint64_t sub_1000E009C()
{
  return sub_10000EDB0((unint64_t *)&qword_1001EA120, (uint64_t *)&unk_1001EBDE0, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

unint64_t sub_1000E00C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v0 = sub_100014E10(&qword_1001EBAA8);
  v1 = *(_QWORD *)(sub_100014E10(&qword_1001EBAB0) - 8);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = *(unsigned __int8 *)(v1 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = swift_allocObject(v0, v4 + 3 * v2, v3 | 7);
  *(_OWORD *)(v5 + 16) = xmmword_1001888D0;
  v6 = (_BYTE *)(v5 + v4);
  *v6 = 0;
  DisplayRepresentation.init(stringLiteral:)(0xD00000000000001DLL, 0x8000000100185160);
  v6[v2] = 1;
  DisplayRepresentation.init(stringLiteral:)(0xD000000000000027, 0x8000000100185130);
  v6[2 * v2] = 2;
  DisplayRepresentation.init(stringLiteral:)(0xD000000000000024, 0x8000000100185100);
  return sub_10010917C(v5);
}

unint64_t sub_1000E01DC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001AD668, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_1000E0224()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v20 = type metadata accessor for InputConnectionBehavior(0);
  v0 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100014E10(&qword_1001EA200);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100014E10((uint64_t *)&unk_1001EBE70);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100014E10(&qword_1001EB758);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014E10(&qword_1001EBAA0);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000030, 0x8000000100185050);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  v16 = type metadata accessor for String.IntentInputOptions(0);
  v21[0] = 0;
  v21[1] = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 1, 1, v16);
  IntentDialog.init(stringLiteral:)(0xD000000000000045, 0x8000000100185090);
  v17 = type metadata accessor for IntentDialog(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v5, 0, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v0 + 104))(v2, enum case for InputConnectionBehavior.default(_:), v20);
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v15, v11, v21, v8, v5, v2);
}

_QWORD *sub_1000E0470@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[2];

  result = IntentParameter.wrappedValue.getter(v4);
  v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t sub_1000E04A8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v2 = *a1;
  v1 = a1[1];
  v4[0] = v2;
  v4[1] = v1;
  swift_bridgeObjectRetain(v1);
  return IntentParameter.wrappedValue.setter(v4);
}

void sub_1000E04E0(unsigned __int8 *a1)
{
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;

  v1 = *a1;
  v2 = objc_allocWithZone((Class)NSUserDefaults);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "initWithSuiteName:", v3);

  if (v4)
  {
    objc_msgSend(v4, "setIsRecording:", v1);
    type metadata accessor for ControlCenter(0);
    v5 = static ControlCenter.shared.getter();
    dispatch thunk of ControlCenter.reloadControls(ofKind:)(0xD000000000000037, 0x8000000100185210);

    swift_release(v5);
  }
}

uint64_t type metadata accessor for ControlCenterWidgetStateCoordinator()
{
  return objc_opt_self(_TtC10VoiceMemos35ControlCenterWidgetStateCoordinator);
}

uint64_t type metadata accessor for RCAppIntentsUtilities()
{
  return objc_opt_self(_TtC10VoiceMemos21RCAppIntentsUtilities);
}

uint64_t sub_1000E05F4@<X0>(id a1@<X1>, void *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;

  v5 = (uint64_t)objc_msgSend(a1, "playableCountForFolder:", a2);
  v6 = objc_msgSend(a2, "uuid");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  result = sub_1000E1180();
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    result = sub_1000E4C2C(v7, v9, result, v11, v5, (uint64_t)objc_msgSend(a2, "folderType"), v13);
    v12 = v13[1];
    *(_OWORD *)a3 = v13[0];
    *(_OWORD *)(a3 + 16) = v12;
    *(_QWORD *)(a3 + 32) = v14;
  }
  return result;
}

_QWORD *sub_1000E06DC(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v13 = (id)objc_opt_self(RCRecordingsModelInteractor);
    swift_bridgeObjectRetain(a1);
    v12 = a1;
    v3 = (_OWORD *)(a1 + 56);
    do
    {
      v4 = *((_QWORD *)v3 - 3);
      v15 = *(v3 - 1);
      v16 = *v3;
      v5 = *((_QWORD *)v3 - 2);
      swift_bridgeObjectRetain(v5);
      swift_retain(*((_QWORD *)&v15 + 1));
      swift_retain(v16);
      swift_retain(*((_QWORD *)&v16 + 1));
      v6 = objc_msgSend(v13, "sharedRecordingsModelInteractor");
      v14 = v4;
      v7 = String._bridgeToObjectiveC()();
      LOBYTE(v4) = objc_msgSend(v6, "isRecentlyDeletedForUUID:", v7);

      if ((v4 & 1) != 0)
      {
        swift_release(*((_QWORD *)&v16 + 1));
        swift_release(v16);
        swift_release(*((_QWORD *)&v15 + 1));
        swift_bridgeObjectRelease(v5);
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_1000CA03C(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v9 = _swiftEmptyArrayStorage[2];
        v8 = _swiftEmptyArrayStorage[3];
        if (v9 >= v8 >> 1)
          sub_1000CA03C(v8 > 1, v9 + 1, 1);
        _swiftEmptyArrayStorage[2] = v9 + 1;
        v10 = &_swiftEmptyArrayStorage[5 * v9];
        v10[4] = v14;
        *(_OWORD *)(v10 + 5) = v15;
        *(_OWORD *)(v10 + 7) = v16;
      }
      v3 = (_OWORD *)((char *)v3 + 40);
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease(v12);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000E08B8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for LocalizedStringResource(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MainActor(0);
  v2[7] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v2[8] = v6;
  v2[9] = v7;
  return swift_task_switch(sub_1000E094C, v6, v7);
}

uint64_t sub_1000E094C()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t **v2;
  char *v4;

  v1 = sub_1000E06DC(v0[2]);
  v0[10] = (uint64_t)v1;
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000002DLL, 0x8000000100185280);
  v4 = (char *)&dword_1001EA290 + dword_1001EA290;
  v2 = (uint64_t **)swift_task_alloc(unk_1001EA294);
  v0[11] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_1000E09F4;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t (*)(), _QWORD))v4)(v1, v0[3], v0[6], sub_1000AFE90, 0);
}

uint64_t sub_1000E09F4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v3 = *(_QWORD *)(*v1 + 88);
  v6 = *(_QWORD *)(*v1 + 40);
  v5 = *(_QWORD *)(*v1 + 48);
  v7 = *(_QWORD *)(*v1 + 32);
  *(_QWORD *)(*v1 + 96) = a1;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  return swift_task_switch(sub_1000E0A7C, *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72));
}

uint64_t sub_1000E0A7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 56));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (_QWORD *)(swift_bridgeObjectRetain(*(_QWORD *)(v0 + 96)) + 40);
    v4 = _swiftEmptyArrayStorage;
    do
    {
      v6 = *(v3 - 1);
      v5 = *v3;
      swift_bridgeObjectRetain(*v3);
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_1000C97B4(0, v4[2] + 1, 1, v4);
      v8 = v4[2];
      v7 = v4[3];
      if (v8 >= v7 >> 1)
        v4 = sub_1000C97B4((_QWORD *)(v7 > 1), v8 + 1, 1, v4);
      v4[2] = v8 + 1;
      v9 = &v4[2 * v8];
      v9[4] = v6;
      v9[5] = v5;
      v3 += 5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  }
  else
  {
    v4 = _swiftEmptyArrayStorage;
  }
  v10 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v4);
}

uint64_t sub_1000E0B94()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v0 = objc_msgSend((id)objc_opt_self(RCRecordingsModelInteractor), "sharedRecordingsModelInteractor");
  v1 = objc_msgSend(v0, "visibleBuiltInFolders");
  v2 = sub_100014E10(&qword_1001EAF20);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  v4 = objc_msgSend(v0, "allUserFolders");
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v2);

  *(_QWORD *)&v18[0] = v3;
  sub_1000E8AA0(v5);
  v6 = v3;
  if (!(v3 >> 62))
  {
    v7 = *(_QWORD *)((*(_QWORD *)&v18[0] & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(*(_QWORD *)&v18[0]);
    if (v7)
      goto LABEL_3;
LABEL_18:
    v10 = _swiftEmptyArrayStorage;
LABEL_19:

    swift_bridgeObjectRelease_n(v6, 2);
    return (uint64_t)v10;
  }
  if (*(uint64_t *)&v18[0] < 0)
    v17 = *(_QWORD *)&v18[0];
  else
    v17 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)&v18[0]);
  result = _CocoaArrayWrapper.endIndex.getter(v17);
  v7 = result;
  if (!result)
    goto LABEL_18;
LABEL_3:
  if (v7 >= 1)
  {
    v9 = 0;
    v10 = _swiftEmptyArrayStorage;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
      {
        v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v6);
      }
      else
      {
        v11 = *(_QWORD *)(v6 + 8 * v9 + 32);
        swift_unknownObjectRetain(v11);
      }
      swift_getObjectType(v11);
      sub_1000E1100((uint64_t)v18);
      swift_unknownObjectRelease(v11);
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
        v10 = sub_1000C99E0(0, v10[2] + 1, 1, v10);
      v13 = v10[2];
      v12 = v10[3];
      if (v13 >= v12 >> 1)
        v10 = sub_1000C99E0((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
      ++v9;
      v10[2] = v13 + 1;
      v14 = &v10[5 * v13];
      v15 = v18[0];
      v16 = v18[1];
      v14[8] = v19;
      *((_OWORD *)v14 + 2) = v15;
      *((_OWORD *)v14 + 3) = v16;
    }
    while (v7 != v9);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E0DB8()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;

  v0 = objc_msgSend((id)objc_opt_self(RCRecordingsModelInteractor), "sharedRecordingsModelInteractor");
  v1 = objc_msgSend(v0, "allUserFolders");
  v2 = sub_100014E10(&qword_1001EAF20);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v3);
    if (v4)
      goto LABEL_3;
LABEL_18:
    v7 = _swiftEmptyArrayStorage;
LABEL_19:

    swift_bridgeObjectRelease_n(v3, 2);
    return (uint64_t)v7;
  }
  if (v3 < 0)
    v14 = v3;
  else
    v14 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  result = _CocoaArrayWrapper.endIndex.getter(v14);
  v4 = result;
  if (!result)
    goto LABEL_18;
LABEL_3:
  if (v4 >= 1)
  {
    v6 = 0;
    v7 = _swiftEmptyArrayStorage;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v3);
      }
      else
      {
        v8 = *(_QWORD *)(v3 + 8 * v6 + 32);
        swift_unknownObjectRetain(v8);
      }
      swift_getObjectType(v8);
      sub_1000E1100((uint64_t)v15);
      swift_unknownObjectRelease(v8);
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
        v7 = sub_1000C99E0(0, v7[2] + 1, 1, v7);
      v10 = v7[2];
      v9 = v7[3];
      if (v10 >= v9 >> 1)
        v7 = sub_1000C99E0((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
      ++v6;
      v7[2] = v10 + 1;
      v11 = &v7[5 * v10];
      v12 = v15[0];
      v13 = v15[1];
      v11[8] = v16;
      *((_OWORD *)v11 + 2) = v12;
      *((_OWORD *)v11 + 3) = v13;
    }
    while (v4 != v6);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000E0F9C()
{
  unint64_t result;

  result = qword_1001EBC70;
  if (!qword_1001EBC70)
  {
    result = swift_getWitnessTable(&unk_10018BCB8, &type metadata for RCFolderEntity);
    atomic_store(result, (unint64_t *)&qword_1001EBC70);
  }
  return result;
}

unint64_t sub_1000E0FE4()
{
  unint64_t result;

  result = qword_1001EBC78;
  if (!qword_1001EBC78)
  {
    result = swift_getWitnessTable(&unk_10018BCF0, &type metadata for RCFolderEntity);
    atomic_store(result, (unint64_t *)&qword_1001EBC78);
  }
  return result;
}

unint64_t sub_1000E102C()
{
  unint64_t result;

  result = qword_1001EBC80;
  if (!qword_1001EBC80)
  {
    result = swift_getWitnessTable(&unk_10018BD20, &type metadata for RCFolderEntity);
    atomic_store(result, (unint64_t *)&qword_1001EBC80);
  }
  return result;
}

unint64_t sub_1000E1074()
{
  unint64_t result;

  result = qword_1001EBC88;
  if (!qword_1001EBC88)
  {
    result = swift_getWitnessTable(&unk_10018BE88, &type metadata for RCFolderEntityStringQuery);
    atomic_store(result, (unint64_t *)&qword_1001EBC88);
  }
  return result;
}

__n128 sub_1000E10B8@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  IntentParameter.wrappedValue.getter(&v5);
  v2 = v7;
  v3 = v8;
  result = v6;
  *(_QWORD *)a1 = v5;
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = v3;
  return result;
}

double sub_1000E1100@<D0>(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  v3 = objc_msgSend((id)objc_opt_self(RCApplicationModel), "sharedApplicationModel");
  sub_1000E05F4(v3, v1, (uint64_t)v6);

  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v7;
  return result;
}

uint64_t sub_1000E1180()
{
  void *v0;
  id v1;
  uint64_t v2;

  if (objc_msgSend(v0, "folderType") == (id)4
    || (v1 = objc_msgSend((id)objc_opt_self(RCFolderDisplayModel), "folderNameForBuiltInFolderOfType:", objc_msgSend(v0, "folderType"))) == 0)
  {
    v1 = objc_msgSend(v0, "name");
  }
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

uint64_t sub_1000E1248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v18;

  v0 = type metadata accessor for String.LocalizationValue.Placeholder(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100014E10(&qword_1001EB758);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_1000B52C4(v14, qword_1001F6DA0);
  sub_1000AACFC(v14, (uint64_t)qword_1001F6DA0);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000012, 0x8000000100185590);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(8, 1);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for String.LocalizationValue.Placeholder.int(_:), v0);
  String.LocalizationValue.StringInterpolation.appendInterpolation(placeholder:specifier:)(v3, 1684827173, 0xE400000000000000);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v16._countAndFlagsBits = 0x535245444C4F4620;
  v16._object = (void *)0xE800000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v16);
  LocalizedStringResource.init(stringInterpolation:)(v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v13, v9);
}

uint64_t sub_1000E1454@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  Swift::String v22;
  void *object;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  Swift::String v42;

  v41 = a1;
  v2 = sub_100014E10(&qword_1001EB758);
  __chkstk_darwin(v2);
  v40 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100014E10(&qword_1001EB9C0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v38 - v8;
  v10 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v39 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v38 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v38 - v20;
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v22);
  EntityProperty.wrappedValue.getter(&v42);
  object = v42._object;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v42);
  swift_bridgeObjectRelease(object);
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v24);
  LocalizedStringResource.init(stringInterpolation:)(v12);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(46, 1);
  v25._object = (void *)0x8000000100185560;
  v25._countAndFlagsBits = 0xD00000000000002ELL;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v25);
  EntityProperty.wrappedValue.getter(&v42);
  String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v42, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v26);
  LocalizedStringResource.init(stringInterpolation:)(v12);
  v27 = type metadata accessor for DisplayRepresentation.Image(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v9, 1, 1, v27);
  v28 = objc_msgSend((id)objc_opt_self(RCFolderDisplayModel), "folderSystemImageNameForFolderOfType:", *(_QWORD *)(v1 + 32));
  if (v28)
  {
    v29 = v28;
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v32 = v31;

    DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)(v30, v32, 0, 0);
    sub_100005440((uint64_t)v9, &qword_1001EB9C0);
    sub_1000E5BBC((uint64_t)v7, (uint64_t)v9);
  }
  v33 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v34 = v39;
  v33(v39, v21, v13);
  v35 = v40;
  v33(v40, v19, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v35, 0, 1, v13);
  sub_1000E5B74((uint64_t)v9, (uint64_t)v7);
  DisplayRepresentation.init(title:subtitle:image:)(v34, v35, v7);
  sub_100005440((uint64_t)v9, &qword_1001EB9C0);
  v36 = *(void (**)(char *, uint64_t))(v14 + 8);
  v36(v19, v13);
  return ((uint64_t (*)(char *, uint64_t))v36)(v21, v13);
}

unint64_t sub_1000E17D0()
{
  unint64_t result;

  result = qword_1001EBC90;
  if (!qword_1001EBC90)
  {
    result = swift_getWitnessTable(&unk_10018BD58, &type metadata for RCFolderEntity);
    atomic_store(result, (unint64_t *)&qword_1001EBC90);
  }
  return result;
}

unint64_t sub_1000E1818()
{
  unint64_t result;

  result = qword_1001EBC98;
  if (!qword_1001EBC98)
  {
    result = swift_getWitnessTable(&unk_10018BD80, &type metadata for RCFolderEntity);
    atomic_store(result, (unint64_t *)&qword_1001EBC98);
  }
  return result;
}

unint64_t sub_1000E1860()
{
  unint64_t result;

  result = qword_1001EBCA0;
  if (!qword_1001EBCA0)
  {
    result = swift_getWitnessTable(&unk_10018BDA8, &type metadata for RCFolderEntity);
    atomic_store(result, (unint64_t *)&qword_1001EBCA0);
  }
  return result;
}

unint64_t sub_1000E18A8()
{
  unint64_t result;

  result = qword_1001EBCA8;
  if (!qword_1001EBCA8)
  {
    result = swift_getWitnessTable(&unk_10018BE00, &type metadata for RCFolderEntity);
    atomic_store(result, (unint64_t *)&qword_1001EBCA8);
  }
  return result;
}

uint64_t sub_1000E18EC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6160(&qword_1001E9028, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1001F6DA0, (uint64_t)sub_1000E1248, a1);
}

uint64_t sub_1000E1910()
{
  return sub_10000EDB0(&qword_1001EBCB0, &qword_1001EBCB8, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_1000E193C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E1AFC();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000E1978()
{
  unint64_t result;

  result = qword_1001EBCC0;
  if (!qword_1001EBCC0)
  {
    result = swift_getWitnessTable(&unk_10018BE30, &type metadata for RCFolderEntity);
    atomic_store(result, (unint64_t *)&qword_1001EBCC0);
  }
  return result;
}

uint64_t sub_1000E19C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E18A8();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_1000E19F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1001EBEC8 + dword_1001EBEC8);
  v6 = (_QWORD *)swift_task_alloc(unk_1001EBECC);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_1000DBCAC;
  return v8(a2, a3);
}

unint64_t sub_1000E1A6C()
{
  unint64_t result;

  result = qword_1001EBCD0;
  if (!qword_1001EBCD0)
  {
    result = swift_getWitnessTable(&unk_10018BEE0, &type metadata for RCFolderEntityStringQuery);
    atomic_store(result, (unint64_t *)&qword_1001EBCD0);
  }
  return result;
}

unint64_t sub_1000E1AB4()
{
  unint64_t result;

  result = qword_1001EBCD8;
  if (!qword_1001EBCD8)
  {
    result = swift_getWitnessTable(&unk_10018BF40, &type metadata for RCFolderEntityStringQuery);
    atomic_store(result, (unint64_t *)&qword_1001EBCD8);
  }
  return result;
}

unint64_t sub_1000E1AFC()
{
  unint64_t result;

  result = qword_1001EBCE0[0];
  if (!qword_1001EBCE0[0])
  {
    result = swift_getWitnessTable(&unk_10018BC60, &type metadata for RCFolderEntity);
    atomic_store(result, qword_1001EBCE0);
  }
  return result;
}

uint64_t sub_1000E1B40(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1001EBEC0 + dword_1001EBEC0);
  v3 = (_QWORD *)swift_task_alloc(unk_1001EBEC4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000D5A34;
  return v5(a1);
}

unint64_t sub_1000E1BA4()
{
  unint64_t result;

  result = qword_1001EBCF8;
  if (!qword_1001EBCF8)
  {
    result = swift_getWitnessTable(&unk_10018BF68, &type metadata for RCFolderEntityStringQuery);
    atomic_store(result, (unint64_t *)&qword_1001EBCF8);
  }
  return result;
}

uint64_t sub_1000E1BE8()
{
  return sub_1000DE9B4(&qword_1001EBD00, qword_1001EBD08, (void (*)(void))sub_1000E1860, (uint64_t)&protocol conformance descriptor for <A> [A]);
}

uint64_t sub_1000E1C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1000E1074();
  *v5 = v2;
  v5[1] = sub_10001B80C;
  return EntityQuery.results()(a1, a2, v6);
}

unint64_t sub_1000E1C8C()
{
  unint64_t result;

  result = qword_1001EBD20;
  if (!qword_1001EBD20)
  {
    result = swift_getWitnessTable(&unk_10018BFC4, &type metadata for CreateFolder);
    atomic_store(result, (unint64_t *)&qword_1001EBD20);
  }
  return result;
}

unint64_t sub_1000E1CD4()
{
  unint64_t result;

  result = qword_1001EBD28;
  if (!qword_1001EBD28)
  {
    result = swift_getWitnessTable(&unk_10018BFEC, &type metadata for CreateFolder);
    atomic_store(result, (unint64_t *)&qword_1001EBD28);
  }
  return result;
}

unint64_t sub_1000E1D1C()
{
  unint64_t result;

  result = qword_1001EBD30;
  if (!qword_1001EBD30)
  {
    result = swift_getWitnessTable(&unk_10018C07C, &type metadata for CreateFolder);
    atomic_store(result, (unint64_t *)&qword_1001EBD30);
  }
  return result;
}

unint64_t sub_1000E1D64()
{
  unint64_t result;

  result = qword_1001EBD38;
  if (!qword_1001EBD38)
  {
    result = swift_getWitnessTable(&unk_10018C0A4, &type metadata for CreateFolder);
    atomic_store(result, (unint64_t *)&qword_1001EBD38);
  }
  return result;
}

uint64_t sub_1000E1DA8()
{
  return sub_10000EDB0(&qword_1001EBD40, (uint64_t *)&unk_1001EBD48, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_1000E1DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E2C98(a1, a2, a3, (uint64_t (*)(void))sub_1000E1CD4);
}

uint64_t sub_1000E1DE0(uint64_t a1)
{
  return sub_1000D8400(a1, qword_1001F6DB8, 0xD00000000000001ALL, 0x8000000100185540);
}

uint64_t sub_1000E1E04(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[16] = a1;
  v2[17] = a2;
  v3 = sub_100014E10(&qword_1001EA200);
  v2[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  v2[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for IntentDialog(0);
  v2[20] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[21] = v6;
  v2[22] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v2[23] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000E1EDC, v8, v9);
}

uint64_t sub_1000E1EDC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  __int128 v26;
  unint64_t v27;
  uint64_t (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  swift_release(*(_QWORD *)(v0 + 184));
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 112));
  v1 = *(_QWORD *)(v0 + 120);
  if (!v1)
    goto LABEL_7;
  v2 = *(_QWORD *)(v0 + 112);
  v3 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    v3 = v2 & 0xFFFFFFFFFFFFLL;
  if (!v3)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
LABEL_7:
    v5 = *(_QWORD *)(v0 + 168);
    v4 = *(_QWORD *)(v0 + 176);
    v6 = *(_QWORD *)(v0 + 160);
    v7 = *(_QWORD *)(v0 + 144);
    v8 = IntentDialog.init(stringLiteral:)(0xD000000000000029, 0x8000000100185400);
    v9 = IntentParameter.projectedValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, v4, v6);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v6);
    v10 = type metadata accessor for AppIntentError(0);
    v11 = sub_1000E5B2C();
    swift_allocError(v10, v11, 0, 0);
    IntentParameter.needsValueError(_:)(v7);
    swift_release(v9);
    v12 = sub_100005440(v7, &qword_1001EA200);
    swift_willThrow(v12);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v13 = *(_QWORD *)(v0 + 144);
    v14 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v14);
    swift_task_dealloc(v13);
    v28 = *(uint64_t (**)(void))(v0 + 8);
    return v28();
  }
  v16 = (void *)sub_1000E21D0(v2, *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 136));
  v17 = *(_QWORD *)(v0 + 176);
  v29 = *(_QWORD *)(v0 + 168);
  v18 = *(_QWORD *)(v0 + 152);
  v30 = *(_QWORD *)(v0 + 160);
  v31 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRelease(v1);
  swift_getObjectType(v16);
  sub_1000E1100(v0 + 16);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(36, 1);
  v19._object = (void *)0x80000001001854E0;
  v19._countAndFlagsBits = 0xD000000000000024;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v19);
  v20 = objc_msgSend(v16, "name");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v24);
  swift_bridgeObjectRelease(v23);
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v25);
  IntentDialog.init(stringInterpolation:)(v18);
  v26 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 56) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 72) = v26;
  *(_QWORD *)(v0 + 88) = *(_QWORD *)(v0 + 48);
  v27 = sub_1000E1860();
  static IntentResult.result<A>(value:dialog:)(v0 + 56, v17, &type metadata for RCFolderEntity, v27);
  swift_unknownObjectRelease(v16);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v17, v30);
  *(_OWORD *)(v0 + 96) = *(_OWORD *)(v0 + 16);
  sub_100014AB8(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v31);
  v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_1000E21D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  NSString v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v19;
  NSString v20;
  id v21;
  _QWORD v22[2];

  v22[1] = a3;
  v3 = sub_100014E10(&qword_1001EA200);
  __chkstk_darwin(v3);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for IntentDialog(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend((id)objc_opt_self(RCRecordingsModelInteractor), "sharedRecordingsModelInteractor");
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "userFolderExistsWithName:", v11);

  if ((v12 & 1) != 0)
  {
    v13 = IntentDialog.init(stringLiteral:)(0xD000000000000029, 0x8000000100185510);
    v14 = IntentParameter.projectedValue.getter(v13);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v5, v9, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    v15 = type metadata accessor for AppIntentError(0);
    v16 = sub_1000E5B2C();
    swift_allocError(v15, v16, 0, 0);
    IntentParameter.needsValueError(_:)(v5);
    swift_release(v14);
    v17 = sub_100005440((uint64_t)v5, &qword_1001EA200);
    swift_willThrow(v17);

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    v19 = objc_msgSend((id)objc_opt_self(RCApplicationModel), "sharedApplicationModel");
    v20 = String._bridgeToObjectiveC()();
    v21 = objc_msgSend(v19, "folderWithName:", v20);

    return (uint64_t)v21;
  }
}

uint64_t sub_1000E2414@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6160(&qword_1001E9030, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001F6DB8, (uint64_t)sub_1000E1DE0, a1);
}

uint64_t sub_1000E2438(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1001EBEB4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100003A7C;
  return sub_1000E1E04(a1, v4);
}

uint64_t sub_1000E2490@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000E52A4();
  *a1 = result;
  return result;
}

uint64_t sub_1000E24B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E1CD4();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_1000E24E0()
{
  unint64_t result;

  result = qword_1001EBD58;
  if (!qword_1001EBD58)
  {
    result = swift_getWitnessTable(&unk_10018C100, &type metadata for DeleteFolder);
    atomic_store(result, (unint64_t *)&qword_1001EBD58);
  }
  return result;
}

uint64_t sub_1000E2524(uint64_t a1)
{
  return sub_1000D8400(a1, qword_1001F6DD0, 0xD00000000000001ALL, 0x80000001001854C0);
}

uint64_t sub_1000E2548(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[5] = a1;
  v2[6] = a2;
  v3 = type metadata accessor for LocalizedStringResource(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MainActor(0);
  v2[10] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v2[11] = v6;
  v2[12] = v7;
  return swift_task_switch(sub_1000E25DC, v6, v7);
}

uint64_t sub_1000E25DC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = IntentParameter.wrappedValue.getter(v0 + 4);
  v2 = v0[4];
  v0[13] = v2;
  v3 = IntentParameter.projectedValue.getter(v1);
  v0[14] = v3;
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000002ALL, 0x8000000100182E10);
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1001EA1D0 + dword_1001EA1D0);
  v4 = (_QWORD *)swift_task_alloc(unk_1001EA1D4);
  v0[15] = v4;
  *v4 = v0;
  v4[1] = sub_1000E2698;
  return v6(v2, v3, v0[9], (uint64_t)sub_1000AFE90, 0);
}

uint64_t sub_1000E2698(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 112);
  v3 = *(_QWORD *)(*v1 + 120);
  v5 = *(_QWORD *)(*v1 + 104);
  v7 = *(_QWORD *)(*v1 + 64);
  v6 = *(_QWORD *)(*v1 + 72);
  v8 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 128) = a1;
  swift_task_dealloc(v3);
  swift_release(v4);
  swift_bridgeObjectRelease(v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  return swift_task_switch(sub_1000E272C, *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
}

uint64_t sub_1000E272C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v11;
  uint64_t (*v12)(uint64_t, uint64_t);

  v1 = v0[16];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (_QWORD *)(v1 + 64);
    do
    {
      if (*v3 == 4)
      {
        v7 = *(v3 - 4);
        v11 = *(_OWORD *)(v3 - 3);
        v8 = *(v3 - 1);
        swift_bridgeObjectRetain(*(v3 - 3));
        swift_retain(*((_QWORD *)&v11 + 1));
        swift_retain(v8);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_1000CA074(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v5 = _swiftEmptyArrayStorage[2];
        v4 = _swiftEmptyArrayStorage[3];
        if (v5 >= v4 >> 1)
          sub_1000CA074(v4 > 1, v5 + 1, 1);
        _swiftEmptyArrayStorage[2] = v5 + 1;
        v6 = &_swiftEmptyArrayStorage[5 * v5];
        v6[4] = v7;
        *(_OWORD *)(v6 + 5) = v11;
        v6[7] = v8;
        v6[8] = 4;
      }
      v3 += 5;
      --v2;
    }
    while (v2);
    v1 = v0[16];
  }
  v0[17] = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v1);
  v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1001EA1D8 + dword_1001EA1D8);
  v9 = (_QWORD *)swift_task_alloc(unk_1001EA1DC);
  v0[18] = v9;
  *v9 = v0;
  v9[1] = sub_1000E28A8;
  return v12(v0[6], (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_1000E28A8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_release(v2[17]);
    v4 = v2[11];
    v5 = v2[12];
    v6 = sub_1000E2A4C;
  }
  else
  {
    v4 = v2[11];
    v5 = v2[12];
    v6 = sub_1000E2914;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1000E2914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 80));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 136);
    v4 = (void *)objc_opt_self(RCRecordingsModelInteractor);
    v5 = (uint64_t *)(v3 + 56);
    do
    {
      v7 = *(v5 - 2);
      v6 = *(v5 - 1);
      v8 = *v5;
      v5 += 5;
      swift_bridgeObjectRetain(v7);
      swift_retain(v6);
      swift_retain(v8);
      v9 = objc_msgSend(v4, "sharedRecordingsModelInteractor");
      EntityProperty.wrappedValue.getter((_QWORD *)(v0 + 16));
      v10 = *(_QWORD *)(v0 + 24);
      v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v10);
      objc_msgSend(v9, "deleteUserFolderWithName:", v11);

      swift_bridgeObjectRelease(v7);
      swift_release(v6);
      swift_release(v8);
      --v2;
    }
    while (v2);
  }
  v12 = *(_QWORD *)(v0 + 72);
  v13 = swift_release(*(_QWORD *)(v0 + 136));
  static IntentResult.result<>()(v13);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E2A4C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E2A8C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100198C54, 1);
}

uint64_t sub_1000E2A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E2C98(a1, a2, a3, (uint64_t (*)(void))sub_10001CA84);
}

uint64_t sub_1000E2AA8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6160(&qword_1001E9038, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001F6DD0, (uint64_t)sub_1000E2524, a1);
}

uint64_t sub_1000E2ACC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1001EBEAC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001B80C;
  return sub_1000E2548(a1, v4);
}

uint64_t sub_1000E2B24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000E54F0();
  *a1 = result;
  return result;
}

unint64_t sub_1000E2B4C()
{
  unint64_t result;

  result = qword_1001EBD80;
  if (!qword_1001EBD80)
  {
    result = swift_getWitnessTable(&unk_10018C24C, &type metadata for OpenFolder);
    atomic_store(result, (unint64_t *)&qword_1001EBD80);
  }
  return result;
}

uint64_t sub_1000E2B90(uint64_t a1)
{
  return sub_1000D8400(a1, qword_1001F6DE8, 0xD000000000000018, 0x80000001001854A0);
}

__n128 sub_1000E2BB4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  IntentParameter.wrappedValue.getter(&v5);
  v2 = v7;
  v3 = v8;
  result = v6;
  *(_QWORD *)a1 = v5;
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t sub_1000E2BFC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v6[0] = *a1;
  v6[1] = v1;
  v6[2] = v2;
  v6[3] = v3;
  v6[4] = v4;
  swift_bridgeObjectRetain(v1);
  swift_retain(v2);
  swift_retain(v3);
  IntentParameter.wrappedValue.setter(v6);
  swift_release(v3);
  swift_release(v2);
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_1000E2C7C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100198C2C, 1);
}

uint64_t sub_1000E2C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E2C98(a1, a2, a3, (uint64_t (*)(void))sub_10001CBA0);
}

uint64_t sub_1000E2C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a4();
  return swift_getOpaqueTypeConformance2(v5, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_1000E2CD8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D6160(&qword_1001E9040, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1001F6DE8, (uint64_t)sub_1000E2B90, a1);
}

uint64_t sub_1000E2CFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000E5730();
  *a1 = result;
  return result;
}

uint64_t sub_1000E2D20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = sub_100014E10(&qword_1001EB7D0);
  v1 = type metadata accessor for _AssistantIntent(0);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))+ 3 * *(_QWORD *)(*(_QWORD *)(v1 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_1001888D0;
  v7 = sub_1000E5730();
  v3 = sub_10001CBA0();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v7, sub_1000E2E64, 0, sub_1000E33A0, 0, &type metadata for OpenFolder, v3);
  v7 = sub_1000E52A4();
  v4 = sub_1000E1CD4();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v7, sub_1000E34B4, 0, sub_1000E3BE8, 0, &type metadata for CreateFolder, v4);
  v7 = sub_1000E54F0();
  v5 = sub_10001CA84();
  result = _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v7, sub_1000E3D18, 0, sub_1000E455C, 0, &type metadata for DeleteFolder, v5);
  qword_1001F6E00 = v2;
  return result;
}

uint64_t sub_1000E2E64(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  Swift::String v11;
  uint64_t KeyPath;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  unsigned int v39;
  void (*v40)(char *);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v45 = a1;
  v46 = sub_100014E10(&qword_1001EBE80);
  v43 = *(void (**)(char *, uint64_t))(v46 - 8);
  __chkstk_darwin(v46);
  v2 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100014E10(&qword_1001EBE88);
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001CBA0();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(16, 2, &type metadata for OpenFolder, v10);
  v11._countAndFlagsBits = 0x6C6F66206E65706FLL;
  v11._object = (void *)0xEC00000020726564;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v11);
  KeyPath = swift_getKeyPath(&unk_10018C590);
  v44 = sub_1000E1860();
  v13 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v44);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v13, v7);
  swift_release(v13);
  v14._countAndFlagsBits = 544106784;
  v14._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v14);
  v39 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v40 = *(void (**)(char *))(v4 + 104);
  v40(v6);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v6, v7);
  v38 = *(void (**)(char *, uint64_t))(v4 + 8);
  v38(v6, v3);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for OpenFolder, v10);
  v16 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for OpenFolder, v10);
  v17 = (void (*)(char *, uint64_t))*((_QWORD *)v43 + 1);
  v42 = v16;
  v43 = v17;
  v17(v2, v46);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(19, 2, &type metadata for OpenFolder, v10);
  v18._countAndFlagsBits = 0x20796D206E65706FLL;
  v18._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  v19 = swift_getKeyPath(&unk_10018C590);
  v20 = _AssistantIntent.IntentProjection.subscript.getter(v19, v44);
  swift_release(v19);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v20, v7);
  swift_release(v20);
  v21._countAndFlagsBits = 0x207265646C6F6620;
  v21._object = (void *)0xEB00000000206E69;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v21);
  v22 = v39;
  v23 = (void (*)(char *, uint64_t, uint64_t))v40;
  ((void (*)(char *, _QWORD, uint64_t))v40)(v6, v39, v3);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v6, v7);
  v24 = v38;
  v38(v6, v3);
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v25);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for OpenFolder, v10);
  v41 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for OpenFolder, v10);
  v43(v2, v46);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(16, 2, &type metadata for OpenFolder, v10);
  v26._countAndFlagsBits = 0x20796D206E65706FLL;
  v26._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  v23(v6, v22, v3);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v6, v7);
  v24(v6, v3);
  v27._countAndFlagsBits = 32;
  v27._object = (void *)0xE100000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  v28 = swift_getKeyPath(&unk_10018C590);
  v29 = _AssistantIntent.IntentProjection.subscript.getter(v28, v44);
  swift_release(v28);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v29, v7);
  swift_release(v29);
  v30._countAndFlagsBits = 0x7265646C6F6620;
  v30._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v30);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for OpenFolder, v10);
  v31 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for OpenFolder, v10);
  v43(v2, v46);
  v32 = sub_100014E10(&qword_1001EBE90);
  v33 = swift_allocObject(v32, 56, 7);
  *(_OWORD *)(v33 + 16) = xmmword_1001888D0;
  v34 = v41;
  *(_QWORD *)(v33 + 32) = v42;
  *(_QWORD *)(v33 + 40) = v34;
  *(_QWORD *)(v33 + 48) = v31;
  v35 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v33);
  return v35;
}

uint64_t sub_1000E3318(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v6[0] = *a1;
  v6[1] = v1;
  v6[2] = v2;
  v6[3] = v3;
  v6[4] = v4;
  swift_bridgeObjectRetain_n(v1, 2);
  swift_retain_n(v2, 2);
  swift_retain_n(v3, 2);
  IntentParameter.wrappedValue.setter(v6);
  swift_release(v3);
  swift_release(v2);
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_1000E33A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v0 = type metadata accessor for _AssistantIntent.Value(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_10018C590);
  v5 = sub_1000E1860();
  v6 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v5);
  swift_release(KeyPath);
  v7 = sub_10001CBA0();
  _AssistantIntent.Value.init<A>(for:builder:)(v6, sub_1000E34B0, 0, v7);
  v8 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v9 = sub_100014E10(&qword_1001EB7D8);
  v10 = swift_allocObject(v9, 40, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100188080;
  *(_QWORD *)(v10 + 32) = v8;
  v11 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v10);
  return v11;
}

uint64_t sub_1000E34B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t KeyPath;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  Swift::String v26;
  char *v27;
  Swift::String v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  char *v35;
  Swift::String v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  Swift::String v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unsigned int v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  void (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v59 = a1;
  v1 = sub_100014E10(&qword_1001EBE58);
  v68 = *(_QWORD *)(v1 - 8);
  v69 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100014E10(&qword_1001EBE60);
  __chkstk_darwin(v8);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000E1CD4();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(18, 2, &type metadata for CreateFolder, v11);
  v12._countAndFlagsBits = 0x6620657461657263;
  v12._object = (void *)0xEE00207265646C6FLL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  KeyPath = swift_getKeyPath(&unk_10018C568);
  v65 = sub_1000DE9B4((unint64_t *)&unk_1001EBE40, &qword_1001EB888, (void (*)(void))sub_1000DE92C, (uint64_t)&protocol conformance descriptor for <A> A?);
  v14 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v65);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v14, v8);
  swift_release(v14);
  v15._countAndFlagsBits = 544106784;
  v15._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  v16 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v67 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v70 = v4;
  v67(v7, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v4);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v66 = *(void (**)(char *, uint64_t))(v5 + 8);
  v66(v7, v4);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  v63 = v3;
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CreateFolder, v11);
  v62 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CreateFolder, v11);
  v18 = v69;
  v68 = *(_QWORD *)(v68 + 8);
  ((void (*)(char *, uint64_t))v68)(v3, v69);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(20, 1, &type metadata for CreateFolder, v11);
  v19._countAndFlagsBits = 0x6120657461657263;
  v19._object = (void *)0xED00002077656E20;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  v20 = v16;
  v21 = v16;
  v64 = v16;
  v22 = v70;
  v23 = v67;
  v67(v7, v20, v70);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v24 = v22;
  v25 = v66;
  v66(v7, v24);
  v26._countAndFlagsBits = 0x7265646C6F6620;
  v26._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  v27 = v63;
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CreateFolder, v11);
  v61 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v27, &type metadata for CreateFolder, v11);
  ((void (*)(char *, uint64_t))v68)(v27, v18);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(27, 2, &type metadata for CreateFolder, v11);
  v28._countAndFlagsBits = 0x6120657461657263;
  v28._object = (void *)0xED00002077656E20;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v28);
  v29 = v70;
  v23(v7, v21, v70);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v25(v7, v29);
  v30._countAndFlagsBits = 0x207265646C6F6620;
  v30._object = (void *)0xEE002064656D616ELL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v30);
  v31 = swift_getKeyPath(&unk_10018C568);
  v32 = v65;
  v33 = _AssistantIntent.IntentProjection.subscript.getter(v31, v65);
  swift_release(v31);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v33, v8);
  swift_release(v33);
  v34._countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v34);
  v35 = v63;
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CreateFolder, v11);
  v60 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v35, &type metadata for CreateFolder, v11);
  ((void (*)(char *, uint64_t))v68)(v35, v69);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(28, 2, &type metadata for CreateFolder, v11);
  v36._countAndFlagsBits = 0x6120657461657263;
  v36._object = (void *)0xED00002077656E20;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v36);
  v37 = v70;
  v67(v7, v64, v70);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v66(v7, v37);
  v38._countAndFlagsBits = 0x207265646C6F6620;
  v38._object = (void *)0xEF2064656C6C6163;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v38);
  v39 = swift_getKeyPath(&unk_10018C568);
  v40 = _AssistantIntent.IntentProjection.subscript.getter(v39, v32);
  swift_release(v39);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v40, v8);
  swift_release(v40);
  v41._countAndFlagsBits = 0;
  v41._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v41);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CreateFolder, v11);
  v58 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v35, &type metadata for CreateFolder, v11);
  v43 = (void (*)(char *, uint64_t))v68;
  v42 = v69;
  ((void (*)(char *, uint64_t))v68)(v35, v69);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(28, 2, &type metadata for CreateFolder, v11);
  v44._countAndFlagsBits = 0x6120657461657263;
  v44._object = (void *)0xED00002077656E20;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v44);
  v45 = v70;
  v67(v7, v64, v70);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v66(v7, v45);
  v46._countAndFlagsBits = 0x207265646C6F6620;
  v46._object = (void *)0xEF2064656C746974;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v46);
  v47 = swift_getKeyPath(&unk_10018C568);
  v48 = _AssistantIntent.IntentProjection.subscript.getter(v47, v65);
  swift_release(v47);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v48, v8);
  swift_release(v48);
  v49._countAndFlagsBits = 0;
  v49._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v49);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CreateFolder, v11);
  v50 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v35, &type metadata for CreateFolder, v11);
  v43(v35, v42);
  v51 = sub_100014E10(&qword_1001EBE68);
  v52 = swift_allocObject(v51, 72, 7);
  *(_OWORD *)(v52 + 16) = xmmword_10018BC50;
  v53 = v61;
  *(_QWORD *)(v52 + 32) = v62;
  *(_QWORD *)(v52 + 40) = v53;
  v54 = v58;
  *(_QWORD *)(v52 + 48) = v60;
  *(_QWORD *)(v52 + 56) = v54;
  *(_QWORD *)(v52 + 64) = v50;
  v55 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v52);
  return v55;
}

uint64_t sub_1000E3BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v0 = type metadata accessor for _AssistantIntent.Value(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_10018C568);
  v5 = sub_1000DE9B4((unint64_t *)&unk_1001EBE40, &qword_1001EB888, (void (*)(void))sub_1000DE92C, (uint64_t)&protocol conformance descriptor for <A> A?);
  v6 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v5);
  swift_release(KeyPath);
  v7 = sub_1000E1CD4();
  _AssistantIntent.Value.init<A>(for:builder:)(v6, sub_1000E34B0, 0, v7);
  v8 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v9 = sub_100014E10(&qword_1001EB7D8);
  v10 = swift_allocObject(v9, 40, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100188080;
  *(_QWORD *)(v10 + 32) = v8;
  v11 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v10);
  return v11;
}

uint64_t sub_1000E3D18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  Swift::String v11;
  uint64_t KeyPath;
  uint64_t v13;
  Swift::String v14;
  void (*v15)(char *);
  uint64_t v16;
  void (*v17)(char *);
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  Swift::String v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  void (*v62)(char *, uint64_t);
  void (*v63)(char *);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v68 = a1;
  v1 = sub_100014E10(&qword_1001EBE18);
  v70 = *(_QWORD *)(v1 - 8);
  v71 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v4 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100014E10(&qword_1001EBE20);
  __chkstk_darwin(v7);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001CA84();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(18, 2, &type metadata for DeleteFolder, v10);
  v11._countAndFlagsBits = 0x66206574656C6564;
  v11._object = (void *)0xEE00207265646C6FLL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v11);
  KeyPath = swift_getKeyPath(&unk_10018C540);
  v69 = sub_1000DE9B4((unint64_t *)&unk_1001EBE00, qword_1001EBD08, (void (*)(void))sub_1000E1860, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v13 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v69);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v13, v7);
  swift_release(v13);
  v14._countAndFlagsBits = 544106784;
  v14._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v14);
  LODWORD(v67) = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v15 = *(void (**)(char *))(v4 + 104);
  v16 = v64;
  v15(v6);
  v17 = v15;
  v63 = v15;
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v6, v7);
  v18 = *(void (**)(char *, uint64_t))(v4 + 8);
  v19 = v16;
  v18(v6, v16);
  v20 = v18;
  v62 = v18;
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v21);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for DeleteFolder, v10);
  v66 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for DeleteFolder, v10);
  v22 = v71;
  v70 = *(_QWORD *)(v70 + 8);
  ((void (*)(char *, uint64_t))v70)(v3, v71);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(21, 2, &type metadata for DeleteFolder, v10);
  v23._countAndFlagsBits = 0x206574656C6564;
  v23._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v23);
  ((void (*)(char *, _QWORD, uint64_t))v17)(v6, v67, v19);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v6, v7);
  v20(v6, v19);
  v24._countAndFlagsBits = 0x207265646C6F6620;
  v24._object = (void *)0xEE002064656D616ELL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v24);
  v25 = swift_getKeyPath(&unk_10018C540);
  v26 = _AssistantIntent.IntentProjection.subscript.getter(v25, v69);
  swift_release(v25);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v26, v7);
  swift_release(v26);
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for DeleteFolder, v10);
  v65 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for DeleteFolder, v10);
  ((void (*)(char *, uint64_t))v70)(v3, v22);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(21, 2, &type metadata for DeleteFolder, v10);
  v28._countAndFlagsBits = 0x2065766F6D6572;
  v28._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v28);
  ((void (*)(char *, _QWORD, uint64_t))v63)(v6, v67, v19);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v6, v7);
  v62(v6, v19);
  v29._countAndFlagsBits = 0x207265646C6F6620;
  v29._object = (void *)0xEE002064656D616ELL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v29);
  v30 = swift_getKeyPath(&unk_10018C540);
  v31 = v69;
  v32 = _AssistantIntent.IntentProjection.subscript.getter(v30, v69);
  swift_release(v30);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v32, v7);
  swift_release(v32);
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v33);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for DeleteFolder, v10);
  v67 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for DeleteFolder, v10);
  v34 = v71;
  ((void (*)(char *, uint64_t))v70)(v3, v71);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 1, &type metadata for DeleteFolder, v10);
  v35._countAndFlagsBits = 0x6D206574656C6564;
  v35._object = (void *)0xEA00000000002079;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v35);
  v36 = swift_getKeyPath(&unk_10018C540);
  v37 = _AssistantIntent.IntentProjection.subscript.getter(v36, v31);
  swift_release(v36);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v37, v7);
  swift_release(v37);
  v38._countAndFlagsBits = 0x7265646C6F6620;
  v38._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v38);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for DeleteFolder, v10);
  v64 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for DeleteFolder, v10);
  v39 = v34;
  v40 = (void (*)(char *, uint64_t))v70;
  ((void (*)(char *, uint64_t))v70)(v3, v39);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(21, 1, &type metadata for DeleteFolder, v10);
  v41._countAndFlagsBits = 0xD000000000000015;
  v41._object = (void *)0x8000000100185300;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v41);
  v42 = swift_getKeyPath(&unk_10018C540);
  v43 = _AssistantIntent.IntentProjection.subscript.getter(v42, v31);
  swift_release(v42);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v43, v7);
  swift_release(v43);
  v44._countAndFlagsBits = 0;
  v44._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v44);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for DeleteFolder, v10);
  v63 = (void (*)(char *))static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for DeleteFolder, v10);
  v40(v3, v71);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(20, 1, &type metadata for DeleteFolder, v10);
  v45._object = (void *)0x8000000100185320;
  v45._countAndFlagsBits = 0xD000000000000014;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v45);
  v46 = swift_getKeyPath(&unk_10018C540);
  v47 = _AssistantIntent.IntentProjection.subscript.getter(v46, v31);
  swift_release(v46);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v47, v7);
  swift_release(v47);
  v48._countAndFlagsBits = 0;
  v48._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v48);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for DeleteFolder, v10);
  v62 = (void (*)(char *, uint64_t))static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for DeleteFolder, v10);
  v49 = v71;
  v40(v3, v71);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(20, 1, &type metadata for DeleteFolder, v10);
  v50._object = (void *)0x8000000100185340;
  v50._countAndFlagsBits = 0xD000000000000014;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v50);
  v51 = swift_getKeyPath(&unk_10018C540);
  v52 = _AssistantIntent.IntentProjection.subscript.getter(v51, v31);
  swift_release(v51);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v52, v7);
  swift_release(v52);
  v53._countAndFlagsBits = 0;
  v53._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v53);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for DeleteFolder, v10);
  v54 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for DeleteFolder, v10);
  v40(v3, v49);
  v55 = sub_100014E10(&qword_1001EBE28);
  v56 = swift_allocObject(v55, 88, 7);
  *(_OWORD *)(v56 + 16) = xmmword_100189FF0;
  v57 = v65;
  *(_QWORD *)(v56 + 32) = v66;
  *(_QWORD *)(v56 + 40) = v57;
  v58 = v64;
  *(_QWORD *)(v56 + 48) = v67;
  *(_QWORD *)(v56 + 56) = v58;
  v59 = v62;
  *(_QWORD *)(v56 + 64) = v63;
  *(_QWORD *)(v56 + 72) = v59;
  *(_QWORD *)(v56 + 80) = v54;
  v60 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v56);
  return v60;
}

uint64_t sub_1000E455C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v0 = type metadata accessor for _AssistantIntent.Value(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_10018C540);
  v5 = sub_1000DE9B4((unint64_t *)&unk_1001EBE00, qword_1001EBD08, (void (*)(void))sub_1000E1860, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v6 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v5);
  swift_release(KeyPath);
  v7 = sub_10001CA84();
  _AssistantIntent.Value.init<A>(for:builder:)(v6, sub_1000E34B0, 0, v7);
  v8 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v9 = sub_100014E10(&qword_1001EB7D8);
  v10 = swift_allocObject(v9, 40, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100188080;
  *(_QWORD *)(v10 + 32) = v8;
  v11 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v10);
  return v11;
}

uint64_t sub_1000E468C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x65646C6F6620796DLL, 0xE900000000000072);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x646C6F662077656ELL, 0xEA00000000007265);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x727473696D656863, 0xE900000000000079);
  v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x736572757463656CLL, 0xE800000000000000);
  v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x61727020646E6162, 0xED00006563697463);
  v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x65646920676E6F73, 0xEA00000000007361);
  v6 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x7270206C61636F76, 0xEE00656369746361);
  v7 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x726174697567, 0xE600000000000000);
  v8 = sub_100014E10(&qword_1001EBE10);
  v9 = swift_allocObject(v8, 96, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10018A020;
  *(_QWORD *)(v9 + 32) = v0;
  *(_QWORD *)(v9 + 40) = v1;
  *(_QWORD *)(v9 + 48) = v2;
  *(_QWORD *)(v9 + 56) = v3;
  *(_QWORD *)(v9 + 64) = v4;
  *(_QWORD *)(v9 + 72) = v5;
  *(_QWORD *)(v9 + 80) = v6;
  *(_QWORD *)(v9 + 88) = v7;
  v10 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v9);
  return v10;
}

void sub_1000E481C()
{
  qword_1001F6E08 = (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t sub_1000E4830(uint64_t a1, uint64_t a2)
{
  return sub_1000DBC28(a1, a2, &qword_1001E9048, &qword_1001F6E00, (uint64_t)sub_1000E2D20);
}

uint64_t sub_1000E484C(uint64_t a1, uint64_t a2)
{
  return sub_1000DBC28(a1, a2, &qword_1001E9050, &qword_1001F6E08, (uint64_t)sub_1000E481C);
}

unint64_t sub_1000E486C()
{
  unint64_t result;

  result = qword_1001EBDA8[0];
  if (!qword_1001EBDA8[0])
  {
    result = swift_getWitnessTable(&unk_10018C3E0, &type metadata for AllUserFoldersOptionsProvider);
    atomic_store(result, qword_1001EBDA8);
  }
  return result;
}

uint64_t sub_1000E48B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 24) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000E491C, v3, v4);
}

uint64_t sub_1000E491C()
{
  uint64_t v0;
  uint64_t *v1;

  v1 = *(uint64_t **)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 24));
  *v1 = sub_1000E0DB8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1000E495C()
{
  unint64_t result;

  result = qword_1001EBDC0[0];
  if (!qword_1001EBDC0[0])
  {
    result = swift_getWitnessTable(&unk_10018C45C, &type metadata for AllVisibleFoldersOptionsProvider);
    atomic_store(result, qword_1001EBDC0);
  }
  return result;
}

uint64_t sub_1000E49A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 24) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000E4A0C, v3, v4);
}

uint64_t sub_1000E4A0C()
{
  uint64_t v0;
  uint64_t *v1;

  v1 = *(uint64_t **)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 24));
  *v1 = sub_1000E0B94();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

ValueMetadata *type metadata accessor for AllVisibleFoldersOptionsProvider()
{
  return &type metadata for AllVisibleFoldersOptionsProvider;
}

ValueMetadata *type metadata accessor for AllUserFoldersOptionsProvider()
{
  return &type metadata for AllUserFoldersOptionsProvider;
}

ValueMetadata *type metadata accessor for FolderAssistantIntents()
{
  return &type metadata for FolderAssistantIntents;
}

ValueMetadata *type metadata accessor for OpenFolder()
{
  return &type metadata for OpenFolder;
}

ValueMetadata *type metadata accessor for DeleteFolder()
{
  return &type metadata for DeleteFolder;
}

ValueMetadata *type metadata accessor for CreateFolder()
{
  return &type metadata for CreateFolder;
}

ValueMetadata *type metadata accessor for RCFolderEntityStringQuery()
{
  return &type metadata for RCFolderEntityStringQuery;
}

uint64_t destroy for RCFolderEntity(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_release(a1[2]);
  return swift_release(a1[3]);
}

_QWORD *initializeWithCopy for RCFolderEntity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = a2[4];
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

_QWORD *assignWithCopy for RCFolderEntity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_retain(v8);
  swift_release(v9);
  a1[4] = a2[4];
  return a1;
}

_QWORD *assignWithTake for RCFolderEntity(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  v5 = a1[3];
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_release(v5);
  a1[4] = *(_QWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for RCFolderEntity()
{
  return &type metadata for RCFolderEntity;
}

uint64_t sub_1000E4C2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v20 = a6;
  v13 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014E10(&qword_1001EB740);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001BLL, 0x80000001001852B0);
  v16 = EntityProperty<>.init(title:)(v15);
  sub_100014E10((uint64_t *)&unk_1001EBDF0);
  swift_retain(v16);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000026, 0x80000001001852D0);
  v17 = EntityProperty<>.init(title:)(v15);
  v21[0] = a3;
  v21[1] = a4;
  swift_bridgeObjectRetain_n(a2, 2);
  swift_retain(v16);
  swift_retain(v17);
  EntityProperty.wrappedValue.setter(v21);
  swift_release(v16);
  swift_bridgeObjectRelease(a2);
  v21[0] = a5;
  swift_retain(v16);
  swift_bridgeObjectRetain(a2);
  swift_retain(v17);
  EntityProperty.wrappedValue.setter(v21);
  swift_release_n(v17, 2);
  swift_release_n(v16, 2);
  result = swift_bridgeObjectRelease_n(a2, 2);
  *a7 = a1;
  a7[1] = a2;
  a7[2] = v16;
  a7[3] = v17;
  a7[4] = v20;
  return result;
}

uint64_t sub_1000E4DD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 56) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 64) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000E4E44, v3, v4);
}

uint64_t sub_1000E4E44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  NSString v10;
  id v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 64));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (__int128 *)(v0 + 16);
    v4 = *(_QWORD *)(v0 + 56);
    v5 = (void *)objc_opt_self(RCRecordingsModelInteractor);
    swift_bridgeObjectRetain(v4);
    v6 = (_QWORD *)(v4 + 40);
    v7 = _swiftEmptyArrayStorage;
    do
    {
      v8 = *v6;
      swift_bridgeObjectRetain(*v6);
      v9 = objc_msgSend(v5, "sharedRecordingsModelInteractor");
      v10 = String._bridgeToObjectiveC()();
      v11 = objc_msgSend(v9, "folderForUUID:", v10);

      if (v11)
      {
        swift_getObjectType(v11);
        swift_unknownObjectRetain(v11);
        v12 = sub_1000E1100((uint64_t)v3);
        swift_unknownObjectRelease_n(v11, 2, v12);

        swift_bridgeObjectRelease(v8);
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
          v7 = sub_1000C99E0(0, v7[2] + 1, 1, v7);
        v14 = v7[2];
        v13 = v7[3];
        if (v14 >= v13 >> 1)
          v7 = sub_1000C99E0((_QWORD *)(v13 > 1), v14 + 1, 1, v7);
        v7[2] = v14 + 1;
        v15 = &v7[5 * v14];
        v16 = *v3;
        v17 = *(_OWORD *)(v0 + 32);
        v15[8] = *(_QWORD *)(v0 + 48);
        *((_OWORD *)v15 + 2) = v16;
        *((_OWORD *)v15 + 3) = v17;
      }
      else
      {

        swift_bridgeObjectRelease(v8);
      }
      v6 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  }
  else
  {
    v7 = _swiftEmptyArrayStorage;
  }
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v7);
}

uint64_t sub_1000E501C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[7] = a1;
  v2[8] = a2;
  v3 = type metadata accessor for MainActor(0);
  v2[9] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000E5088, v4, v5);
}

uint64_t sub_1000E5088()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *v17;

  swift_release(*(_QWORD *)(v0 + 72));
  v1 = objc_msgSend((id)objc_opt_self(RCRecordingsModelInteractor), "sharedRecordingsModelInteractor");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "allFoldersWithName:", v2);

  v4 = sub_100014E10(&qword_1001EAF20);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if (!((unint64_t)v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
LABEL_16:

    swift_bridgeObjectRelease(v5);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  if (v5 < 0)
    v16 = v5;
  else
    v16 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v6 = _CocoaArrayWrapper.endIndex.getter(v16);
  swift_bridgeObjectRelease(v5);
  if (!v6)
    goto LABEL_16;
LABEL_3:
  result = sub_1000CA074(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v17 = v1;
    v8 = 0;
    v9 = (__int128 *)(v0 + 16);
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v5);
      }
      else
      {
        v10 = *(_QWORD *)(v5 + 8 * v8 + 32);
        swift_unknownObjectRetain(v10);
      }
      swift_getObjectType(v10);
      sub_1000E1100((uint64_t)v9);
      swift_unknownObjectRelease(v10);
      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        sub_1000CA074(v11 > 1, v12 + 1, 1);
      ++v8;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v13 = &_swiftEmptyArrayStorage[5 * v12];
      v14 = *v9;
      v15 = *(_OWORD *)(v0 + 32);
      v13[8] = *(_QWORD *)(v0 + 48);
      *((_OWORD *)v13 + 2) = v14;
      *((_OWORD *)v13 + 3) = v15;
    }
    while (v6 != v8);

    swift_bridgeObjectRelease(v5);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E52A4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v20 = type metadata accessor for InputConnectionBehavior(0);
  v0 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100014E10(&qword_1001EA200);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100014E10((uint64_t *)&unk_1001EBE70);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100014E10(&qword_1001EB758);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014E10(&qword_1001EB760);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000023, 0x80000001001853D0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  v16 = type metadata accessor for String.IntentInputOptions(0);
  v21[0] = 0;
  v21[1] = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 1, 1, v16);
  IntentDialog.init(stringLiteral:)(0xD000000000000029, 0x8000000100185400);
  v17 = type metadata accessor for IntentDialog(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v5, 0, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v0 + 104))(v2, enum case for InputConnectionBehavior.default(_:), v20);
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v15, v11, v21, v8, v5, v2);
}

uint64_t sub_1000E54F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100014E10(&qword_1001EA200);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v20 - v8;
  v10 = sub_100014E10(&qword_1001EB758);
  __chkstk_darwin(v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100014E10(&qword_1001EBE30);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000027, 0x8000000100185360);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v21 = 0;
  IntentDialog.init(stringLiteral:)(0xD00000000000003CLL, 0x8000000100185390);
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 0, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  sub_1000E59E8();
  sub_1000E1AFC();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:)(v16, v12, &v21, v9, v7, v3);
}

uint64_t sub_1000E5730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v20[2];
  _OWORD v21[2];
  uint64_t v22;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100014E10(&qword_1001EA200);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v20 - v8;
  v10 = sub_100014E10(&qword_1001EB758);
  __chkstk_darwin(v10);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = sub_100014E10(&qword_1001EBE98);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000023, 0x8000000100185430);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  IntentDialog.init(stringLiteral:)(0xD000000000000038, 0x8000000100185460);
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 0, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  sub_1000E5AE8();
  sub_1000E1AFC();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:)(v16, v12, v21, v9, v7, v3);
}

_QWORD *sub_1000E5978@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1000E59B0(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  swift_bridgeObjectRetain(v2);
  return IntentParameter.wrappedValue.setter(&v2);
}

unint64_t sub_1000E59E8()
{
  unint64_t result;

  result = qword_1001EBE38;
  if (!qword_1001EBE38)
  {
    result = swift_getWitnessTable(&unk_10018C380, &type metadata for AllUserFoldersOptionsProvider);
    atomic_store(result, (unint64_t *)&qword_1001EBE38);
  }
  return result;
}

double sub_1000E5A2C@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  IntentParameter.wrappedValue.getter(&v3);
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_1000E5A64(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v2 = *a1;
  v1 = a1[1];
  v4[0] = v2;
  v4[1] = v1;
  swift_bridgeObjectRetain(v1);
  return IntentParameter.wrappedValue.setter(v4);
}

__n128 sub_1000E5A9C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  IntentParameter.wrappedValue.getter(&v5);
  v2 = v7;
  v3 = v8;
  result = v6;
  *(_QWORD *)a1 = v5;
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = v3;
  return result;
}

unint64_t sub_1000E5AE8()
{
  unint64_t result;

  result = qword_1001EBEA0;
  if (!qword_1001EBEA0)
  {
    result = swift_getWitnessTable(&unk_10018C3FC, &type metadata for AllVisibleFoldersOptionsProvider);
    atomic_store(result, &qword_1001EBEA0);
  }
  return result;
}

unint64_t sub_1000E5B2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001EBEB8;
  if (!qword_1001EBEB8)
  {
    v1 = type metadata accessor for AppIntentError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AppIntentError, v1);
    atomic_store(result, (unint64_t *)&qword_1001EBEB8);
  }
  return result;
}

uint64_t sub_1000E5B74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EB9C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E5BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EB9C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E5C04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  v34 = sub_100014E10((uint64_t *)&unk_1001EC100);
  v1 = __chkstk_darwin(v34);
  v3 = (char *)v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v5 = (char *)v32 - v4;
  v6 = type metadata accessor for AttributedString.Index(0);
  v7 = *(_QWORD **)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v32 - v11;
  v13 = sub_100014E10(&qword_1001EA808);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v33 = (uint64_t)v32 - v18;
  v19 = AttributedString.startIndex.getter(v17);
  AttributedString.endIndex.getter(v19);
  v20 = sub_10001B7CC((unint64_t *)&unk_1001EC0D0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Index);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v12, v10, v6, v20);
  if ((result & 1) != 0)
  {
    v32[0] = v13;
    v32[1] = v0;
    v22 = v34;
    v23 = &v5[*(int *)(v34 + 48)];
    v24 = (void (*)(char *, char *, uint64_t))v7[4];
    v24(v5, v12, v6);
    v24(v23, v10, v6);
    v25 = &v3[*(int *)(v22 + 48)];
    v26 = (void (*)(char *, char *, uint64_t))v7[2];
    v26(v3, v5, v6);
    v26(v25, v23, v6);
    v24(v16, v3, v6);
    v27 = (void (*)(char *, uint64_t))v7[1];
    v27(v25, v6);
    v28 = &v3[*(int *)(v22 + 48)];
    v24(v3, v5, v6);
    v24(v28, v23, v6);
    v29 = v32[0];
    v24(&v16[*(int *)(v32[0] + 36)], v28, v6);
    v27(v3, v6);
    v30 = v33;
    sub_1000BD398((uint64_t)v16, v33);
    v31 = sub_10000EDB0((unint64_t *)&unk_1001EC0B0, &qword_1001EA808, (uint64_t)&protocol conformance descriptor for Range<A>);
    AttributedString.removeSubrange<A>(_:)(v30, v29, v31);
    return sub_100005440(v30, &qword_1001EA808);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E5EB8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _BYTE v26[24];

  v3 = v2;
  v6 = type metadata accessor for AttributedString.CharacterView(0);
  __chkstk_darwin(v6);
  v8 = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for AttributedString(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((a2 & 1) != 0)
  {
    swift_beginAccess(v3 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_liveTranscriptionString, v26, 33, 0);
    v13 = sub_10001B7CC(&qword_1001EC110, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
    AttributedString.append<A>(_:)(a1, v9, v13);
    swift_endAccess(v26);
    v14 = v3 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_presentationModel;
    swift_beginAccess(v14, v26, 33, 0);
    v15 = type metadata accessor for TranscriptionPresentationModel(0);
    sub_1000E8090((uint64_t)v12, *(double *)(v14 + *(int *)(v15 + 36)));
    sub_1000E8474((uint64_t)v12);
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
    return swift_endAccess(v26);
  }
  else
  {
    v17 = sub_10001B7CC(&qword_1001EC110, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
    dispatch thunk of AttributedStringProtocol.characters.getter(v9, v17);
    v18 = sub_10001B7CC(&qword_1001EAF90, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView, (uint64_t)&protocol conformance descriptor for AttributedString.CharacterView);
    v19 = String.init<A>(_:)(v8, v6, v18);
    v21 = v20;
    v22 = v3 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_presentationModel;
    swift_beginAccess(v22, v26, 1, 0);
    v23 = (uint64_t *)(v22 + *(int *)(type metadata accessor for TranscriptionPresentationModel(0) + 32));
    v24 = v23[1];
    *v23 = v19;
    v23[1] = v21;
    return swift_bridgeObjectRelease(v24);
  }
}

uint64_t sub_1000E60C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v18[24];

  v3 = type metadata accessor for AttributedString(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = (int *)type metadata accessor for TranscriptionPresentationModel(0);
  v8 = __chkstk_darwin(v7);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v8);
  v12 = &v18[-v11 - 8];
  swift_beginAccess(v1 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_liveTranscriptionString, v18, 33, 0);
  sub_1000E5C04();
  swift_endAccess(v18);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  AttributedString.init(stringLiteral:)(0, 0xE000000000000000);
  AttributedString.init(stringLiteral:)(0, 0xE000000000000000);
  v13 = &v10[v7[6]];
  *v13 = 0;
  v13[1] = 0xE000000000000000;
  *(_QWORD *)&v10[v7[7]] = _swiftEmptyArrayStorage;
  v14 = &v10[v7[8]];
  *v14 = 0;
  v14[1] = 0;
  *(_QWORD *)&v10[v7[9]] = 0;
  sub_1000E8474((uint64_t)v6);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  sub_1000CBEAC((uint64_t)v10, (uint64_t)v12, type metadata accessor for TranscriptionPresentationModel);
  v15 = v1 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_presentationModel;
  swift_beginAccess(v1 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_presentationModel, v18, 33, 0);
  sub_1000E9F28((uint64_t)v12, v15);
  return swift_endAccess(v18);
}

uint64_t sub_1000E629C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t (*v33)(char *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  Swift::String v47;
  void *object;
  _QWORD *v49;
  uint64_t KeyPath;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  Swift::String v64;
  uint64_t v65;
  unint64_t v66;
  Swift::String v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  int *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;

  v1 = sub_100014E10(&qword_1001EAF98);
  v74 = *(_QWORD *)(v1 - 8);
  v75 = v1;
  __chkstk_darwin(v1);
  v73 = (char *)&v68 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for AttributedString.CharacterView(0);
  __chkstk_darwin(v72);
  v71 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AttributedSubstring(0);
  v77 = *(_QWORD *)(v4 - 8);
  v78 = v4;
  __chkstk_darwin(v4);
  v76 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100014E10(&qword_1001EC0C0);
  __chkstk_darwin(v79);
  v84 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttributedString.Runs.Index(0);
  v83 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v81 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v68 - v10;
  v12 = type metadata accessor for AttributedString.Runs(0);
  v82 = *(int **)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for TranscriptionPresentationModel(0);
  v17 = v15[5];
  v16 = v15[6];
  v18 = v0;
  v80 = v0;
  v19 = (uint64_t *)(v0 + v16);
  v20 = v19[1];
  v90 = *v19;
  v91 = v20;
  v89 = *(_QWORD *)(v18 + v15[7]);
  v21 = v89;
  v22 = (void (*)(char *, uint64_t))(v18 + v17);
  v23 = type metadata accessor for AttributedString(0);
  v24 = sub_10001B7CC(&qword_1001EC110, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  v68 = v22;
  v70 = v23;
  v69 = v24;
  v25 = v24;
  v26 = v14;
  dispatch thunk of AttributedStringProtocol.runs.getter(v23, v25);
  v27 = sub_10001B7CC(&qword_1001EC118, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Runs, (uint64_t)&protocol conformance descriptor for AttributedString.Runs);
  dispatch thunk of Collection.startIndex.getter(v12, v27);
  v28 = v81;
  v29 = v27;
  v30 = v80;
  dispatch thunk of Collection.endIndex.getter(v12, v29);
  v31 = sub_10001B7CC(&qword_1001EC120, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Runs.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Runs.Index);
  LOBYTE(v20) = dispatch thunk of static Equatable.== infix(_:_:)(v11, v28, v7, v31);
  v32 = *(void (**)(char *, uint64_t))(v83 + 8);
  v32(v28, v7);
  v32(v11, v7);
  v33 = (uint64_t (*)(char *, uint64_t))*((_QWORD *)v82 + 1);
  v83 = v12;
  v34 = v33(v26, v12);
  if ((v20 & 1) == 0)
  {
    v82 = v15;
    v35 = v84;
    AttributedString.endIndex.getter(v34);
    v36 = type metadata accessor for AttributedString.Index(0);
    v37 = sub_10001B7CC(&qword_1001EB0E0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Index);
    result = dispatch thunk of static Equatable.== infix(_:_:)(v35, v35, v36, v37);
    if ((result & 1) == 0)
    {
      __break(1u);
      return result;
    }
    v39 = v70;
    v40 = v69;
    AttributedString.append<A>(_:)(v68, v70, v69);
    v81 = (char *)sub_10000EDB0((unint64_t *)&unk_1001EC0E0, &qword_1001EC0C0, (uint64_t)&protocol conformance descriptor for PartialRangeFrom<A>);
    v41 = v76;
    AttributedString.subscript.getter(v84, v79, v81);
    v42 = sub_10001B7CC(&qword_1001EC0C8, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedSubstring, (uint64_t)&protocol conformance descriptor for AttributedSubstring);
    v68 = (void (*)(char *, uint64_t))v33;
    v43 = v42;
    v44 = v71;
    v45 = v78;
    dispatch thunk of AttributedStringProtocol.characters.getter(v78, v42);
    v46 = sub_10001B7CC(&qword_1001EAF90, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView, (uint64_t)&protocol conformance descriptor for AttributedString.CharacterView);
    v47._countAndFlagsBits = String.init<A>(_:)(v44, v72, v46);
    object = v47._object;
    String.append(_:)(v47);
    swift_bridgeObjectRelease(object);
    v87 = v39;
    v88 = v40;
    v49 = sub_1000ADAF4(&v85);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v49, v30, v39);
    dispatch thunk of AttributedStringProtocol.runs.getter(v45, v43);
    KeyPath = swift_getKeyPath(&unk_10018C630);
    *(&v68 - 2) = (void (*)(char *, uint64_t))__chkstk_darwin(KeyPath);
    v51 = swift_getKeyPath(&unk_10018C650);
    v52 = sub_1000B48A4();
    v53 = (uint64_t)v73;
    AttributedString.Runs.subscript.getter(v51, v52);
    swift_release(v51);
    v68(v26, v83);
    v54 = sub_1000C8B20(v53);
    v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 8))(v53, v75);
    __chkstk_darwin(v55);
    *(&v68 - 2) = (void (*)(char *, uint64_t))&v85;
    v56 = sub_1000C9534((void (*)(__int128 *__return_ptr, uint64_t))sub_1000EA7D8, (uint64_t)(&v68 - 4), (uint64_t)v54);
    swift_bridgeObjectRelease(v54);
    sub_10001B498(&v85);
    sub_1000E87A0((uint64_t)v56);
    v57 = (uint64_t)v84;
    AttributedString.removeSubrange<A>(_:)(v84, v79, v81);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v41, v45);
    sub_100005440(v57, &qword_1001EC0C0);
    v15 = v82;
  }
  v58 = (uint64_t *)(v30 + v15[8]);
  v59 = v58[1];
  if (!v59)
    return v90;
  v60 = *v58;
  v61 = *v58 & 0xFFFFFFFFFFFFLL;
  if ((v59 & 0x2000000000000000) != 0)
    v61 = HIBYTE(v59) & 0xF;
  v62 = v91;
  if (!v61)
    return v90;
  v63 = HIBYTE(v91) & 0xF;
  if ((v91 & 0x2000000000000000) == 0)
    v63 = v90 & 0xFFFFFFFFFFFFLL;
  if (v63)
  {
    v85 = v90;
    v86 = v91;
    swift_bridgeObjectRetain(v91);
    v64._countAndFlagsBits = 32;
    v64._object = (void *)0xE100000000000000;
    String.append(_:)(v64);
    v65 = v85;
    v66 = v86;
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRelease(v62);
    v85 = v65;
    v86 = v66;
    swift_bridgeObjectRetain(v66);
    v67._countAndFlagsBits = v60;
    v67._object = (void *)v59;
    String.append(_:)(v67);
    swift_bridgeObjectRelease(v66);
    swift_bridgeObjectRelease(v59);
    return v85;
  }
  else
  {
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRelease(v62);
  }
  return v60;
}

uint64_t sub_1000E6968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  double *v28;
  double v29;
  double v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t KeyPath;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  double *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, _QWORD);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char v91[8];
  double v92[2];
  char v93;

  v89 = sub_100014E10(&qword_1001EA808);
  __chkstk_darwin(v89);
  v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100014E10(&qword_1001EAF98);
  v72 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v71 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for AttributedString.Runs(0);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v68 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100014E10(&qword_1001EC0C0);
  __chkstk_darwin(v67);
  v66 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for AttributedString(0);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v74 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AttributedSubstring(0);
  v84 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v65 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v60 - v13;
  v15 = type metadata accessor for AttributedString.Index(0);
  v86 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v60 - v20;
  result = AttributedString.init()(v19);
  v83 = *(_QWORD *)(a1 + 16);
  if (!v83)
    return result;
  v23 = type metadata accessor for TranscriptionFragment(0);
  v24 = *(_QWORD *)(v23 - 8);
  v81 = a1 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  v82 = v23;
  v80 = *(_QWORD *)(v24 + 72);
  v60 = a1;
  v25 = swift_bridgeObjectRetain(a1);
  v26 = 0;
  v79 = 0;
  v61 = v10;
  v64 = v14;
  v63 = v15;
  v62 = v18;
  v85 = v21;
  v90 = v5;
  while (1)
  {
    v88 = v26;
    v28 = (double *)(v81 + v80 * v26);
    v29 = v28[2];
    v30 = *v28;
    AttributedString.endIndex.getter(v25);
    sub_1000E7118((uint64_t)v14, v30, v28[1]);
    if ((sub_1000E9D68() & 1) != 0)
    {
      v31 = v74;
      AttributedString.init(stringLiteral:)(32, 0xE100000000000000);
      static AttributedString.+= infix(_:_:)(a2, v31);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v31, v76);
    }
    v32 = sub_10001B7CC(&qword_1001EC0C8, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedSubstring, (uint64_t)&protocol conformance descriptor for AttributedSubstring);
    v33 = AttributedString.append<A>(_:)(v14, v10, v32);
    AttributedString.endIndex.getter(v33);
    v34 = sub_10001B7CC((unint64_t *)&unk_1001EC0D0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Index);
    v35 = v85;
    v36 = dispatch thunk of static Comparable.< infix(_:_:)(v85, v18, v15, v34);
    v87 = *(void (**)(char *, uint64_t))(v86 + 8);
    v87(v18, v15);
    if ((v36 & 1) != 0)
      break;
    v27 = *(void (**)(char *, uint64_t))(v84 + 8);
LABEL_4:
    v26 = v88 + 1;
    v27(v14, v10);
    v25 = ((uint64_t (*)(char *, uint64_t))v87)(v35, v15);
    if (v26 == v83)
      return swift_bridgeObjectRelease(v60);
  }
  v37 = sub_10001B7CC(&qword_1001EB0E0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Index);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v35, v35, v15, v37);
  if ((result & 1) == 0)
    goto LABEL_19;
  v38 = (uint64_t)v66;
  (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v66, v35, v15);
  v39 = sub_10000EDB0((unint64_t *)&unk_1001EC0E0, &qword_1001EC0C0, (uint64_t)&protocol conformance descriptor for PartialRangeFrom<A>);
  v40 = v65;
  AttributedString.subscript.getter(v38, v67, v39);
  sub_100005440(v38, &qword_1001EC0C0);
  v41 = v68;
  dispatch thunk of AttributedStringProtocol.runs.getter(v10, v32);
  KeyPath = swift_getKeyPath(&unk_10018C630);
  *(&v60 - 2) = __chkstk_darwin(KeyPath);
  v43 = swift_getKeyPath(&unk_10018C650);
  v44 = sub_1000B48A4();
  v45 = (uint64_t)v71;
  AttributedString.Runs.subscript.getter(v43, v44);
  swift_release(v43);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v41, v70);
  v46 = v79;
  v47 = sub_1000C8B20(v45);
  v79 = v46;
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v45, v73);
  v78 = *(void (**)(char *, uint64_t))(v84 + 8);
  v78(v40, v10);
  v48 = v47[2];
  if (!v48)
  {
    swift_bridgeObjectRelease(v47);
    v14 = v64;
    v15 = v63;
    v18 = v62;
    v35 = v85;
LABEL_15:
    v27 = v78;
    goto LABEL_4;
  }
  v49 = v29 - v30;
  v50 = type metadata accessor for TimeRangeRun(0);
  v51 = *(_QWORD *)(v50 - 8);
  v52 = (double *)((char *)v47
                 + ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80)));
  v53 = *(_QWORD *)(v51 + 72);
  v77 = v47;
  swift_bridgeObjectRetain(v47);
  v54 = (uint64_t)v90;
  while (1)
  {
    sub_1000BD3E0((uint64_t)v52 + *(int *)(v50 + 20), v54);
    v55 = swift_getKeyPath(&unk_10018C630);
    *(&v60 - 2) = __chkstk_darwin(v55);
    result = swift_getKeyPath(&unk_10018C650);
    v56 = v52[1];
    if (v49 + *v52 > v49 + v56)
      break;
    v57 = result;
    v92[0] = v49 + *v52;
    v92[1] = v49 + v56;
    v93 = 0;
    v58 = sub_10000EDB0((unint64_t *)&unk_1001EC0B0, &qword_1001EA808, (uint64_t)&protocol conformance descriptor for Range<A>);
    v59 = (void (*)(char *, _QWORD))AttributedString.subscript.modify(v91, v54, v89, v58);
    AttributedSubstring.subscript.setter(v92, v57, v44);
    v59(v91, 0);
    v54 = (uint64_t)v90;
    sub_100005440((uint64_t)v90, &qword_1001EA808);
    v52 = (double *)((char *)v52 + v53);
    if (!--v48)
    {
      swift_bridgeObjectRelease_n(v77, 2);
      v14 = v64;
      v15 = v63;
      v18 = v62;
      v35 = v85;
      v10 = v61;
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_1000E7118@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t result;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t (*v40)(uint64_t);
  unint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  _QWORD *v71;
  void (*v72)(char *, uint64_t, uint64_t);
  char *v73;
  char *v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t KeyPath;
  _QWORD *v98;

  v93 = a1;
  v85 = sub_100014E10((uint64_t *)&unk_1001EC100);
  v6 = __chkstk_darwin(v85);
  v87 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v83 = (char *)&v81 - v8;
  v89 = sub_100014E10(&qword_1001EA808);
  v9 = __chkstk_darwin(v89);
  v84 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v86 = (uint64_t)&v81 - v11;
  v12 = sub_100014E10(&qword_1001EAFA8);
  __chkstk_darwin(v12);
  v92 = (uint64_t)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for TimeRangeRun(0);
  v14 = *(_QWORD *)(v91 - 8);
  v15 = __chkstk_darwin(v91);
  v96 = (uint64_t)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v90 = (uint64_t)&v81 - v18;
  v19 = __chkstk_darwin(v17);
  v94 = (uint64_t)&v81 - v20;
  __chkstk_darwin(v19);
  v22 = (double *)((char *)&v81 - v21);
  v23 = sub_100014E10(&qword_1001EAF98);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for AttributedString.Runs(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v81 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for AttributedString(0);
  v32 = sub_10001B7CC(&qword_1001EC110, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
  v88 = v3;
  v81 = v32;
  v82 = v31;
  dispatch thunk of AttributedStringProtocol.runs.getter(v31, v32);
  KeyPath = swift_getKeyPath(&unk_10018C630);
  v33 = swift_getKeyPath(&unk_10018C650);
  v34 = sub_1000B48A4();
  AttributedString.Runs.subscript.getter(v33, v34);
  swift_release(v33);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  v35 = sub_1000C8B20((uint64_t)v26);
  result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  v37 = _swiftEmptyArrayStorage;
  v98 = _swiftEmptyArrayStorage;
  v38 = v35[2];
  if (v38)
  {
    v39 = 0;
    v40 = type metadata accessor for TimeRangeRun;
    v95 = v35[2];
    while (v39 < v35[2])
    {
      v41 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      v42 = *(_QWORD *)(v14 + 72);
      sub_1000E9EE4((uint64_t)v35 + v41 + v42 * v39, (uint64_t)v22);
      v43 = *v22;
      v44 = v22[1];
      if (*v22 <= a3)
        v45 = *v22;
      else
        v45 = a3;
      if (v43 < a2)
        v45 = a2;
      if (v44 >= a2)
        v46 = v22[1];
      else
        v46 = a2;
      if (v44 > a3)
        v46 = a3;
      if (v45 == v43 && v46 == v44)
      {
        v48 = v14;
        v49 = v40;
        sub_1000CBEAC((uint64_t)v22, v96, v40);
        if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
          sub_1000CA0D8(0, v37[2] + 1, 1);
        v37 = v98;
        v51 = v98[2];
        v50 = v98[3];
        if (v51 >= v50 >> 1)
        {
          sub_1000CA0D8(v50 > 1, v51 + 1, 1);
          v37 = v98;
        }
        v37[2] = v51 + 1;
        v52 = (uint64_t)v37 + v41 + v51 * v42;
        v40 = v49;
        result = sub_1000CBEAC(v96, v52, v49);
        v14 = v48;
        v38 = v95;
      }
      else
      {
        result = sub_1000E9F6C((uint64_t)v22, v40);
      }
      if (v38 == ++v39)
      {
        v37 = v98;
        goto LABEL_26;
      }
    }
    __break(1u);
    goto LABEL_34;
  }
LABEL_26:
  swift_bridgeObjectRelease(v35);
  v53 = v37[2];
  v54 = v94;
  if (!v53)
  {
    v59 = swift_release(v37);
    return AttributedSubstring.init()(v59);
  }
  v55 = (uint64_t)v37 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  sub_1000E9EE4(v55, v94);
  v56 = v55 + *(_QWORD *)(v14 + 72) * (v53 - 1);
  v57 = v92;
  sub_1000E9EE4(v56, v92);
  v58 = v91;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v57, 0, 1, v91);
  swift_release(v37);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v57, 1, v58) == 1)
  {
    sub_1000E9F6C(v54, type metadata accessor for TimeRangeRun);
    v59 = sub_100005440(v57, &qword_1001EAFA8);
    return AttributedSubstring.init()(v59);
  }
  v60 = v57;
  v61 = v90;
  sub_1000CBEAC(v60, v90, type metadata accessor for TimeRangeRun);
  v62 = *(int *)(v58 + 20);
  v63 = v54 + v62;
  v64 = v89;
  v65 = v61 + v62 + *(int *)(v89 + 36);
  v66 = type metadata accessor for AttributedString.Index(0);
  v67 = sub_10001B7CC((unint64_t *)&unk_1001EC0D0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Index);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v63, v65, v66, v67);
  if ((result & 1) != 0)
  {
    v68 = v85;
    v69 = v83;
    v70 = &v83[*(int *)(v85 + 48)];
    v71 = *(_QWORD **)(v66 - 8);
    v72 = (void (*)(char *, uint64_t, uint64_t))v71[2];
    v72(v83, v63, v66);
    v72(v70, v65, v66);
    v73 = v87;
    v74 = &v87[*(int *)(v68 + 48)];
    v72(v87, (uint64_t)v69, v66);
    v72(v74, (uint64_t)v70, v66);
    v75 = (void (*)(char *, char *, uint64_t))v71[4];
    v76 = (uint64_t)v84;
    v75(v84, v73, v66);
    v77 = (void (*)(char *, uint64_t))v71[1];
    v77(v74, v66);
    v78 = &v73[*(int *)(v68 + 48)];
    v75(v73, v69, v66);
    v75(v78, v70, v66);
    v75((char *)(v76 + *(int *)(v64 + 36)), v78, v66);
    v77(v73, v66);
    v79 = v86;
    sub_1000BD398(v76, v86);
    v80 = sub_10000EDB0((unint64_t *)&unk_1001EC0B0, &qword_1001EA808, (uint64_t)&protocol conformance descriptor for Range<A>);
    dispatch thunk of AttributedStringProtocol.subscript.getter(v79, v64, v80, v82, v81);
    sub_100005440(v79, &qword_1001EA808);
    sub_1000E9F6C(v90, type metadata accessor for TimeRangeRun);
    return sub_1000E9F6C(v94, type metadata accessor for TimeRangeRun);
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1000E77E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, uint64_t);
  void (*v12)(_BYTE *, _QWORD);
  uint64_t *v13;
  _BYTE v15[32];

  v0 = type metadata accessor for AttributedString.Index(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v15[-v5];
  v7 = type metadata accessor for AttributedString.CharacterView(0);
  v8 = sub_10001B7CC(&qword_1001EC0F0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView, (uint64_t)&protocol conformance descriptor for AttributedString.CharacterView);
  v9 = 0;
  if ((dispatch thunk of Collection.isEmpty.getter(v7, v8) & 1) == 0)
  {
    dispatch thunk of Collection.endIndex.getter(v7, v8);
    v10 = sub_10001B7CC(&qword_1001EC0F8, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView, (uint64_t)&protocol conformance descriptor for AttributedString.CharacterView);
    dispatch thunk of BidirectionalCollection.index(before:)(v4, v7, v10);
    v11 = *(void (**)(_BYTE *, uint64_t))(v1 + 8);
    v11(v4, v0);
    v12 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v15, v6, v7, v8);
    v9 = *v13;
    swift_bridgeObjectRetain(v13[1]);
    v12(v15, 0);
    v11(v6, v0);
  }
  return v9;
}

uint64_t sub_1000E7950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_liveTranscriptionString;
  v2 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1000E9F6C(v0 + OBJC_IVAR____TtC10VoiceMemos21TranscriptionCompiler_presentationModel, type metadata accessor for TranscriptionPresentationModel);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000E79B8()
{
  return type metadata accessor for TranscriptionCompiler(0);
}

uint64_t type metadata accessor for TranscriptionCompiler(uint64_t a1)
{
  return sub_1000E9448(a1, qword_1001EBF00, (uint64_t)&nominal type descriptor for TranscriptionCompiler);
}

uint64_t sub_1000E79D4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for AttributedString(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TranscriptionPresentationModel(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      result = swift_updateClassMetadata2(a1, 256, 2, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for TranscriptionPresentationModel(uint64_t a1)
{
  return sub_1000E9448(a1, qword_1001EC060, (uint64_t)&nominal type descriptor for TranscriptionPresentationModel);
}

uint64_t *sub_1000E7A70(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = type metadata accessor for AttributedString(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = a3[7];
    v11 = (uint64_t *)((char *)a1 + v9);
    v12 = (uint64_t *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = *(uint64_t *)((char *)a2 + v10);
    *(uint64_t *)((char *)a1 + v10) = v14;
    v15 = a3[8];
    v16 = a3[9];
    v17 = (uint64_t *)((char *)a1 + v15);
    v18 = (uint64_t *)((char *)a2 + v15);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    *(uint64_t *)((char *)a1 + v16) = *(uint64_t *)((char *)a2 + v16);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v19);
  }
  return a1;
}

uint64_t sub_1000E7B58(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = type metadata accessor for AttributedString(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
}

uint64_t sub_1000E7BD8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v6 = type metadata accessor for AttributedString(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = *(_QWORD *)(a2 + v9);
  *(_QWORD *)(a1 + v9) = v13;
  v14 = a3[8];
  v15 = a3[9];
  v16 = (_QWORD *)(a1 + v14);
  v17 = (_QWORD *)(a2 + v14);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t sub_1000E7C94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for AttributedString(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v11 = v10[1];
  v12 = v9[1];
  v9[1] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = a3[7];
  v14 = *(_QWORD *)(a2 + v13);
  v15 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v19 = v18[1];
  v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000E7D84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for AttributedString(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  return a1;
}

uint64_t sub_1000E7E1C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for AttributedString(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = v9[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  v14 = a3[7];
  v15 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_bridgeObjectRelease(v15);
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  v21 = v17[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000E7EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E7EF0);
}

uint64_t sub_1000E7EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for AttributedString(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000E7F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E7F7C);
}

uint64_t sub_1000E7F7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for AttributedString(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1000E7FF8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for AttributedString(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = &unk_10018C600;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = &unk_10018C618;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000E8090@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(void);
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_BYTE *, _QWORD);
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _BYTE v49[32];
  double v50[2];
  char v51;

  v4 = sub_100014E10(&qword_1001EA808);
  __chkstk_darwin(v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TimeRangeRun(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (double *)((char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_100014E10(&qword_1001EAF98);
  v43 = *(_QWORD *)(v11 - 8);
  v44 = (_QWORD *)v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AttributedString.Runs(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v18);
  v22 = *(void (**)(void))(v21 + 16);
  if (a2 == 0.0)
    return ((uint64_t (*)(uint64_t, uint64_t))v22)(a1, v45);
  v40 = v8;
  v41 = v21;
  v46 = v4;
  v47 = v7;
  v42 = a1;
  v48 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = v19;
  v22();
  v25 = sub_10001B7CC(&qword_1001EC110, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
  v45 = v24;
  dispatch thunk of AttributedStringProtocol.runs.getter(v24, v25);
  KeyPath = swift_getKeyPath(&unk_10018C630);
  *(&v40 - 2) = __chkstk_darwin(KeyPath);
  v27 = swift_getKeyPath(&unk_10018C650);
  v28 = sub_1000B48A4();
  AttributedString.Runs.subscript.getter(v27, v28);
  swift_release(v27);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v29 = sub_1000C8B20((uint64_t)v13);
  (*(void (**)(char *, _QWORD *))(v43 + 8))(v13, v44);
  v30 = v29[2];
  if (v30)
  {
    v31 = *(unsigned __int8 *)(v40 + 80);
    v44 = v29;
    v32 = (uint64_t)v29 + ((v31 + 32) & ~v31);
    v33 = *(_QWORD *)(v40 + 72);
    while (1)
    {
      sub_1000E9EE4(v32, (uint64_t)v10);
      sub_1000BD3E0((uint64_t)v10 + *(int *)(v47 + 20), (uint64_t)v6);
      v34 = swift_getKeyPath(&unk_10018C630);
      *(&v40 - 2) = __chkstk_darwin(v34);
      result = swift_getKeyPath(&unk_10018C650);
      v35 = v10[1] + a2;
      if (*v10 + a2 > v35)
        break;
      v36 = result;
      v50[0] = *v10 + a2;
      v50[1] = v35;
      v51 = 0;
      v37 = sub_10000EDB0((unint64_t *)&unk_1001EC0B0, &qword_1001EA808, (uint64_t)&protocol conformance descriptor for Range<A>);
      v38 = (void (*)(_BYTE *, _QWORD))AttributedString.subscript.modify(v49, v6, v46, v37);
      AttributedSubstring.subscript.setter(v50, v36, v28);
      v38(v49, 0);
      sub_100005440((uint64_t)v6, &qword_1001EA808);
      sub_1000E9F6C((uint64_t)v10, type metadata accessor for TimeRangeRun);
      v32 += v33;
      if (!--v30)
      {
        v39 = v44;
        goto LABEL_9;
      }
    }
    __break(1u);
  }
  else
  {
    v39 = v29;
LABEL_9:
    swift_bridgeObjectRelease(v39);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v42, v48, v45);
  }
  return result;
}

uint64_t sub_1000E8474(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t result;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = type metadata accessor for AttributedString.Index(0);
  v33 = *(_QWORD *)(v3 - 8);
  v34 = v3;
  __chkstk_darwin(v3);
  v32 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttributedString.Runs.Index(0);
  v39 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v37 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v35 = (char *)&v31 - v8;
  v9 = type metadata accessor for AttributedString.Runs(0);
  v38 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TranscriptionFormatter.PartialResult(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for TranscriptionPresentationModel(0);
  v15 = v1 + *(int *)(v40 + 20);
  v16 = type metadata accessor for AttributedString(0);
  v17 = sub_10001B7CC(&qword_1001EC110, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
  AttributedString.append<A>(_:)(a1, v16, v17);
  sub_1000F4350(v15, 3, (uint64_t)v14);
  v18 = &v14[*(int *)(v12 + 20)];
  v19 = sub_100014E10(&qword_1001EA808);
  v20 = sub_10000EDB0((unint64_t *)&unk_1001EC0B0, &qword_1001EA808, (uint64_t)&protocol conformance descriptor for Range<A>);
  AttributedString.removeSubrange<A>(_:)(v18, v19, v20);
  dispatch thunk of AttributedStringProtocol.runs.getter(v16, v17);
  v21 = sub_10001B7CC(&qword_1001EC118, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Runs, (uint64_t)&protocol conformance descriptor for AttributedString.Runs);
  v22 = v35;
  dispatch thunk of Collection.startIndex.getter(v9, v21);
  v23 = v37;
  dispatch thunk of Collection.endIndex.getter(v9, v21);
  v24 = sub_10001B7CC(&qword_1001EC120, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Runs.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Runs.Index);
  LOBYTE(v21) = dispatch thunk of static Equatable.== infix(_:_:)(v22, v23, v5, v24);
  v25 = *(void (**)(char *, uint64_t))(v39 + 8);
  v25(v23, v5);
  v25(v22, v5);
  v26 = v36;
  v27 = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v11, v9);
  if ((v21 & 1) == 0)
  {
    v28 = (uint64_t)v32;
    AttributedString.endIndex.getter(v27);
    AttributedString.append<A>(_:)(v14, v16, v17);
    sub_1000E8E34(v28);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v28, v34);
  }
  sub_1000E9F6C((uint64_t)v14, type metadata accessor for TranscriptionFormatter.PartialResult);
  v29 = (_QWORD *)(v26 + *(int *)(v40 + 32));
  result = swift_bridgeObjectRelease(v29[1]);
  *v29 = 0;
  v29[1] = 0;
  return result;
}

uint64_t sub_1000E87A0(uint64_t a1)
{
  char **v1;
  unint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_1000C9D10(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = &v3[32 * v9 + 32];
  if (a1 + 32 < (unint64_t)&v10[32 * v8] && (unint64_t)v10 < a1 + 32 + 32 * v8)
    goto LABEL_24;
  memcpy(v10, (const void *)(a1 + 32), 32 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = *((_QWORD *)v3 + 2);
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    *((_QWORD *)v3 + 2) = v14;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E88E8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1000E9770(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E8AA0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1000E997C(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E8C58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  double v21;
  void (*v22)(uint64_t, char *, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for AttributedSubstring(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttributedString(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v24 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v24 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v24 - v16;
  v18 = type metadata accessor for TranscriptionPresentationModel(0);
  v19 = v1 + *(int *)(v18 + 20);
  result = static AttributedString.+ infix(_:_:)(v1, v19);
  v21 = *(double *)(v1 + *(int *)(v18 + 36));
  if (v21 < 0.0)
  {
    __break(1u);
  }
  else
  {
    sub_1000E7118((uint64_t)v4, 0.0, v21);
    AttributedString.init(_:)(v4);
    sub_1000F4114((uint64_t)v15, v12);
    AttributedString.init(stringLiteral:)(0, 0xE000000000000000);
    v22 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 40);
    v22(v19, v9, v5);
    AttributedString.init(stringLiteral:)(0, 0xE000000000000000);
    v22(v1, v9, v5);
    sub_1000E8474((uint64_t)v12);
    v23 = *(void (**)(char *, uint64_t))(v6 + 8);
    v23(v12, v5);
    v23(v15, v5);
    return ((uint64_t (*)(char *, uint64_t))v23)(v17, v5);
  }
  return result;
}

uint64_t sub_1000E8E34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t KeyPath;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[5];

  v2 = v1;
  v4 = sub_100014E10(&qword_1001EAF98);
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  __chkstk_darwin(v4);
  v50 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttributedString.Runs(0);
  v46 = *(_QWORD *)(v6 - 8);
  v47 = v6;
  __chkstk_darwin(v6);
  v45 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for AttributedString.CharacterView(0);
  __chkstk_darwin(v44);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100014E10(&qword_1001EC0C0);
  __chkstk_darwin(v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AttributedSubstring(0);
  v48 = *(_QWORD *)(v13 - 8);
  v49 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AttributedString.Index(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttributedString.startIndex.getter(v18);
  v21 = static AttributedString.Index.== infix(_:_:)(a1, v20);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  if ((v21 & 1) != 0)
  {
    v22 = type metadata accessor for TranscriptionPresentationModel(0);
    String.removeAll(keepingCapacity:)(0);
    v23 = *(int *)(v22 + 28);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + v23));
    *(_QWORD *)(v2 + v23) = &_swiftEmptyArrayStorage;
  }
  v24 = sub_10001B7CC(&qword_1001EB0E0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Index);
  result = dispatch thunk of static Equatable.== infix(_:_:)(a1, a1, v16, v24);
  if ((result & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v12, a1, v16);
    v26 = sub_10000EDB0((unint64_t *)&unk_1001EC0E0, &qword_1001EC0C0, (uint64_t)&protocol conformance descriptor for PartialRangeFrom<A>);
    AttributedString.subscript.getter(v12, v10, v26);
    sub_100005440((uint64_t)v12, &qword_1001EC0C0);
    v27 = sub_10001B7CC(&qword_1001EC0C8, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedSubstring, (uint64_t)&protocol conformance descriptor for AttributedSubstring);
    v28 = v49;
    dispatch thunk of AttributedStringProtocol.characters.getter(v49, v27);
    v29 = sub_10001B7CC(&qword_1001EAF90, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView, (uint64_t)&protocol conformance descriptor for AttributedString.CharacterView);
    v30 = String.init<A>(_:)(v9, v44, v29);
    v32 = v31;
    type metadata accessor for TranscriptionPresentationModel(0);
    v33._countAndFlagsBits = v30;
    v33._object = v32;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(v32);
    v34 = type metadata accessor for AttributedString(0);
    v53[3] = v34;
    v53[4] = sub_10001B7CC(&qword_1001EC110, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
    v35 = sub_1000ADAF4(v53);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v35, v2, v34);
    v36 = v45;
    dispatch thunk of AttributedStringProtocol.runs.getter(v28, v27);
    KeyPath = swift_getKeyPath(&unk_10018C630);
    *(&v44 - 2) = __chkstk_darwin(KeyPath);
    v38 = swift_getKeyPath(&unk_10018C650);
    v39 = sub_1000B48A4();
    v40 = (uint64_t)v50;
    AttributedString.Runs.subscript.getter(v38, v39);
    swift_release(v38);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v36, v47);
    v41 = sub_1000C8B20(v40);
    v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v40, v52);
    __chkstk_darwin(v42);
    *(&v44 - 2) = (uint64_t)v53;
    v43 = sub_1000C9534((void (*)(__int128 *__return_ptr, uint64_t))sub_1000CB540, (uint64_t)(&v44 - 4), (uint64_t)v41);
    swift_bridgeObjectRelease(v41);
    sub_10001B498(v53);
    sub_1000E87A0((uint64_t)v43);
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v15, v28);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E92DC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_100014E10(&qword_1001EA808);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v10 = a1[1];
  v11 = a2[3];
  v12 = a2[4];
  v13 = sub_10001B474(a2, v11);
  v14 = type metadata accessor for TimeRangeRun(0);
  v15 = sub_1000BD3E0((uint64_t)a1 + *(int *)(v14 + 20), (uint64_t)v8);
  __chkstk_darwin(v15);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD *, uint64_t))(v18 + 16))(v17, v13, v11);
  v19 = sub_10000EDB0((unint64_t *)&unk_1001EC0B0, &qword_1001EA808, (uint64_t)&protocol conformance descriptor for Range<A>);
  result = _NSRange.init<A, B>(_:in:)(v8, v17, v6, v11, v19, v12);
  *a3 = v9;
  a3[1] = v10;
  a3[2] = result;
  a3[3] = v21;
  return result;
}

uint64_t type metadata accessor for TimeRangeRun(uint64_t a1)
{
  return sub_1000E9448(a1, (uint64_t *)&unk_1001EC240, (uint64_t)&nominal type descriptor for TimeRangeRun);
}

uint64_t type metadata accessor for TranscriptionFragment(uint64_t a1)
{
  return sub_1000E9448(a1, qword_1001EC1A8, (uint64_t)&nominal type descriptor for TranscriptionFragment);
}

uint64_t sub_1000E9448(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

unint64_t sub_1000E947C(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  _QWORD v14[2];

  v2 = HIBYTE(a2) & 0xF;
  v3 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    v7 = sub_1000E9558(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v11 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v7 & 0xFFFFFFFFFFFF0000, a1, a2);
    }
    else
    {
      v8 = v7 >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
        v14[0] = a1;
        v14[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        v9 = v14;
        v10 = v2;
      }
      else
      {
        if ((a1 & 0x1000000000000000) != 0)
        {
          v9 = (_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v9 = (_QWORD *)_StringObject.sharedUTF8.getter(a1, a2);
          v3 = v13;
        }
        v10 = v3;
      }
      v11 = _decodeScalar(_:startingAt:)(v9, v10, v8);
    }
  }
  else
  {
    v11 = 0;
  }
  LOBYTE(v14[0]) = v4 == 0;
  return v11 | ((unint64_t)(v4 == 0) << 32);
}

unint64_t sub_1000E9558(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    result = sub_1000E95F4(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | sub_1000E9660(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t sub_1000E95F4(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = sub_100104E9C(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
    __break(1u);
  return result;
}

unint64_t sub_1000E9660(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v7 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL))
          goto LABEL_14;
      }
      else
      {
        v12 = result >> 16;
        v6 = _StringObject.sharedUTF8.getter(a2, a3);
        v5 = v12;
        if (v12 == v10)
          goto LABEL_14;
      }
      if ((*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          v7 = v5 - 1;
          v8 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      v7 = v5;
      return v7 << 16;
    }
    v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v9 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v9)
      return _StringGuts.foreignScalarAlign(_:)();
  }
  return result;
}

uint64_t sub_1000E9770(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10000EDB0(&qword_1001EC148, &qword_1001EC140, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100014E10(&qword_1001EC140);
          v13 = sub_1000B2D0C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000C6F20();
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E997C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18[4];

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10000EDB0((unint64_t *)&unk_1001EC130, &qword_1001EC128, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100014E10(&qword_1001EC128);
          v13 = sub_1000B2CB4(v18, i, a3);
          v15 = *v14;
          swift_unknownObjectRetain(*v14);
          ((void (*)(uint64_t **, _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100014E10(&qword_1001EAF20);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000E9B8C(double *a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;

  v4 = sub_100014E10(&qword_1001EA808);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v19 - v8;
  if (*a1 == *a2 && a1[1] == a2[1])
  {
    v12 = *(int *)(type metadata accessor for TimeRangeRun(0) + 20);
    v13 = (uint64_t)a1 + v12;
    v14 = (uint64_t)a2 + v12;
    v15 = type metadata accessor for AttributedString.Index(0);
    v16 = sub_10001B7CC(&qword_1001EB0E0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Index);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v14, v15, v16);
    sub_1000BD3E0(v13, (uint64_t)v9);
    sub_1000BD3E0(v14, (uint64_t)v7);
    if ((v17 & 1) != 0)
      v11 = dispatch thunk of static Equatable.== infix(_:_:)(&v9[*(int *)(v4 + 36)], &v7[*(int *)(v4 + 36)], v15, v16);
    else
      v11 = 0;
    sub_100005440((uint64_t)v7, &qword_1001EA808);
    sub_100005440((uint64_t)v9, &qword_1001EA808);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

unint64_t sub_1000E9CF8(unint64_t a1, unint64_t a2)
{
  unint64_t result;
  _BOOL4 v5;

  if ((Character.isWhitespace.getter() & 1) != 0)
    return 1;
  result = sub_1000E947C(a1, a2);
  if ((result & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v5 = (result - 8232) < 2 || result == 133;
    return (result - 14) > 0xFFFFFFFB || v5;
  }
  return result;
}

uint64_t sub_1000E9D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t (*v11)(char *, uint64_t);
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v21;

  v0 = type metadata accessor for AttributedString.CharacterView(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v21 - v6;
  AttributedString.characters.getter(v5);
  v8 = sub_1000E77E4();
  v10 = v9;
  v11 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
  v12 = v11(v7, v0);
  if (v10)
  {
    AttributedSubstring.characters.getter(v12);
    v13 = sub_1000CEFAC();
    v15 = v14;
    v11(v4, v0);
    if (v15)
    {
      v16 = sub_1000E9CF8(v8, v10);
      swift_bridgeObjectRelease(v10);
      if ((v16 & 1) == 0)
      {
        v19 = sub_1000E9CF8(v13, v15);
        swift_bridgeObjectRelease(v15);
        v18 = v19 ^ 1;
        return v18 & 1;
      }
      v17 = v15;
    }
    else
    {
      v17 = v10;
    }
    swift_bridgeObjectRelease(v17);
    v18 = 0;
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_1000E9EB0()
{
  return 8;
}

uint64_t sub_1000E9EBC(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_1000E9EC4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

_QWORD *sub_1000E9ED8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000E9EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeRangeRun(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E9F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TranscriptionPresentationModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E9F6C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_QWORD *sub_1000E9FA8(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v10);
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for AttributedString(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_1000EA030(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for AttributedString(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_OWORD *sub_1000EA068(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

_QWORD *sub_1000EA0C4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *sub_1000EA138(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_OWORD *sub_1000EA194(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v6, v7, v8);
  return a1;
}

uint64_t sub_1000EA1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EA1FC);
}

uint64_t sub_1000EA1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = type metadata accessor for AttributedString(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_1000EA23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EA248);
}

uint64_t sub_1000EA248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = type metadata accessor for AttributedString(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_1000EA28C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10018C698;
  v4[1] = &unk_10018C698;
  result = type metadata accessor for AttributedString(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_1000EA300(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for AttributedString.Index(0);
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    v9(v6, v7, v8);
    v10 = sub_100014E10(&qword_1001EA808);
    v9(&v6[*(int *)(v10 + 36)], &v7[*(int *)(v10 + 36)], v8);
  }
  return v3;
}

uint64_t sub_1000EA3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for AttributedString.Index(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v6(v2, v3);
  v4 = v2 + *(int *)(sub_100014E10(&qword_1001EA808) + 36);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(v4, v3);
}

_OWORD *sub_1000EA420(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for AttributedString.Index(0);
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  v8(v5, v6, v7);
  v9 = sub_100014E10(&qword_1001EA808);
  v8(&v5[*(int *)(v9 + 36)], &v6[*(int *)(v9 + 36)], v7);
  return a1;
}

_QWORD *sub_1000EA4A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for AttributedString.Index(0);
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24);
  v8(v5, v6, v7);
  v9 = sub_100014E10(&qword_1001EA808);
  v8(&v5[*(int *)(v9 + 36)], &v6[*(int *)(v9 + 36)], v7);
  return a1;
}

_OWORD *sub_1000EA538(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for AttributedString.Index(0);
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
  v8(v5, v6, v7);
  v9 = sub_100014E10(&qword_1001EA808);
  v8(&v5[*(int *)(v9 + 36)], &v6[*(int *)(v9 + 36)], v7);
  return a1;
}

_OWORD *sub_1000EA5C0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for AttributedString.Index(0);
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40);
  v8(v5, v6, v7);
  v9 = sub_100014E10(&qword_1001EA808);
  v8(&v5[*(int *)(v9 + 36)], &v6[*(int *)(v9 + 36)], v7);
  return a1;
}

uint64_t sub_1000EA648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EA654);
}

uint64_t sub_1000EA654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = sub_100014E10(&qword_1001EA808);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_1000EA698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EA6A4);
}

uint64_t sub_1000EA6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = sub_100014E10(&qword_1001EA808);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

void sub_1000EA6EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10018C698;
  sub_1000EA760(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_1000EA760(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1001EC250)
  {
    v2 = type metadata accessor for AttributedString.Index(255);
    v3 = sub_10001B7CC((unint64_t *)&unk_1001EC0D0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Index);
    v4 = type metadata accessor for Range(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1001EC250);
  }
}

uint64_t sub_1000EA7D8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000CB540(a1, a2);
}

void **sub_1000EA7EC(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v6;
  id v7;
  id v8;
  os_unfair_lock_s *v9;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  char v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  char v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  double v29;
  unsigned int v30;
  double v31;
  unsigned int v32;
  id v33;
  double v34;
  double v35;
  id v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  id v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  id v48;
  void **v49;
  void **v50;
  unint64_t v51;
  void ***v52;
  void **v53;
  uint64_t v54;
  os_log_type_t v55;
  id v56;
  id v57;
  void **v58;
  NSObject *v59;
  uint64_t v60;
  void ***v61;
  void **v62;
  void **v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  os_unfair_lock_s *v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  os_unfair_lock_s *v72;
  os_log_type_t type;
  void **aBlock;
  _QWORD v75[4];
  uint64_t v76;

  v3 = v2;
  v6 = *(os_unfair_lock_s **)(v2 + 24);
  swift_retain(v6);
  os_unfair_lock_lock(v6 + 4);
  swift_release(v6);
  v7 = objc_msgSend(a1, "format");
  sub_1000EB060();
  if ((static NSObject.== infix(_:_:)(v7, a2) & 1) != 0)
  {
    v8 = a1;

    v9 = *(os_unfair_lock_s **)(v3 + 24);
    swift_retain(v9);
    os_unfair_lock_unlock(v9 + 4);
    swift_release(v9);
    return (void **)v8;
  }
  v11 = *(void **)(v3 + 16);
  if (!v11)
    goto LABEL_9;
  v12 = objc_msgSend(v11, "outputFormat");
  if (!v12)
    goto LABEL_9;
  v13 = v12;
  v14 = a2;
  v15 = v13;
  v16 = static NSObject.== infix(_:_:)(v15, v14);

  if ((v16 & 1) == 0)
    goto LABEL_9;
  v17 = *(void **)(v3 + 16);
  if (!v17)
    goto LABEL_9;
  v18 = objc_msgSend(v17, "inputFormat");
  if (!v18
    || (v19 = v18,
        v20 = v7,
        v21 = v19,
        v22 = static NSObject.== infix(_:_:)(v21, v20),
        v21,
        v21,
        v20,
        (v22 & 1) == 0))
  {
LABEL_9:
    v23 = objc_msgSend(objc_allocWithZone((Class)AVAudioConverter), "initFromFormat:toFormat:", v7, a2);
    v24 = *(void **)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v23;

    v25 = *(void **)(v3 + 16);
    if (!v25)
    {
LABEL_24:
      if (qword_1001E8F80 != -1)
        swift_once(&qword_1001E8F80, sub_1000B5218);
      v54 = type metadata accessor for Logger(0);
      sub_1000AACFC(v54, (uint64_t)qword_1001F6C20);
      v55 = static os_log_type_t.error.getter();
      v56 = a2;
      v57 = v7;
      v58 = (void **)v56;
      v42 = (void **)v57;
      v59 = Logger.logObject.getter(v42);
      if (os_log_type_enabled(v59, v55))
      {
        type = v55;
        v60 = swift_slowAlloc(22, -1);
        v61 = (void ***)swift_slowAlloc(16, -1);
        *(_DWORD *)v60 = 138412546;
        aBlock = v42;
        v62 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v75, v60 + 4, v60 + 12);
        *v61 = v42;

        *(_WORD *)(v60 + 12) = 2112;
        aBlock = v58;
        v63 = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v75, v60 + 14, v60 + 22);
        v61[1] = v58;

        _os_log_impl((void *)&_mh_execute_header, v59, type, "Failed to create converter, inputFormat = %@, outputFormat %@", (uint8_t *)v60, 0x16u);
        v64 = sub_100014E10((uint64_t *)&unk_1001ECD60);
        swift_arrayDestroy(v61, 2, v64);
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v60, -1, -1);

      }
      else
      {

      }
      v65 = sub_1000EB09C();
      v66 = swift_allocError(&type metadata for BufferFormatConverter.Error, v65, 0, 0);
      *v67 = 1;
      swift_willThrow(v66);

      goto LABEL_30;
    }
    objc_msgSend(v25, "setPrimeMethod:", 2);
  }
  v26 = *(void **)(v3 + 16);
  if (!v26)
    goto LABEL_24;
  v27 = v26;
  v28 = objc_msgSend(v27, "inputFormat");
  objc_msgSend(v28, "sampleRate");
  if (v29 <= 0.0)
    goto LABEL_22;
  v30 = objc_msgSend(v28, "channelCount");

  if (!v30)
  {
LABEL_23:

    goto LABEL_24;
  }
  v28 = objc_msgSend(v27, "outputFormat");
  objc_msgSend(v28, "sampleRate");
  if (v31 <= 0.0)
  {
LABEL_22:

    v27 = v28;
    goto LABEL_23;
  }
  v32 = objc_msgSend(v28, "channelCount");

  if (!v32)
    goto LABEL_23;
  v33 = objc_msgSend(v27, "outputFormat");
  objc_msgSend(v33, "sampleRate");
  v35 = v34;

  v36 = objc_msgSend(v27, "inputFormat");
  objc_msgSend(v36, "sampleRate");
  v38 = v37;

  v39 = ceil(v35 / v38 * (double)objc_msgSend(a1, "frameLength"));
  if ((~*(_QWORD *)&v39 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v39 <= -1.0)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  if (v39 >= 4294967300.0)
    goto LABEL_36;
  v40 = v39;
  v41 = objc_msgSend(v27, "outputFormat");
  v42 = (void **)objc_msgSend(objc_allocWithZone((Class)AVAudioPCMBuffer), "initWithPCMFormat:frameCapacity:", v41, v40);

  if (v42)
  {
    v43 = swift_allocObject(&unk_1001B1950, 17, 7);
    *(_BYTE *)(v43 + 16) = 0;
    v44 = swift_allocObject(&unk_1001B1978, 32, 7);
    *(_QWORD *)(v44 + 16) = v43;
    *(_QWORD *)(v44 + 24) = a1;
    v75[3] = sub_1000EB11C;
    v76 = v44;
    aBlock = _NSConcreteStackBlock;
    v75[0] = 1107296256;
    v75[1] = sub_1000EAFC0;
    v75[2] = &unk_1001B1990;
    v45 = _Block_copy(&aBlock);
    v46 = v76;
    swift_retain(v43);
    v47 = a1;
    swift_release(v46);
    aBlock = 0;
    v48 = objc_msgSend(v27, "convertToBuffer:error:withInputFromBlock:", v42, &aBlock, v45);
    _Block_release(v45);
    v49 = aBlock;
    v50 = v49;
    if (v48 != (id)3)
    {

      swift_release(v43);
      v72 = *(os_unfair_lock_s **)(v3 + 24);
      swift_retain(v72);
      os_unfair_lock_unlock(v72 + 4);
      swift_release(v72);
      return v42;
    }
    v51 = sub_1000EB09C();
    swift_allocError(&type metadata for BufferFormatConverter.Error, v51, 0, 0);
    *v52 = v50;
    v53 = v50;
    swift_willThrow(v53);

    swift_release(v43);
  }
  else
  {
    v69 = sub_1000EB09C();
    v70 = swift_allocError(&type metadata for BufferFormatConverter.Error, v69, 0, 0);
    *v71 = 2;
    swift_willThrow(v70);

  }
LABEL_30:
  v68 = *(os_unfair_lock_s **)(v3 + 24);
  swift_retain(v68);
  os_unfair_lock_unlock(v68 + 4);
  swift_release(v68);
  return v42;
}

void *sub_1000EAF34(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v11;
  _BYTE v12[24];

  v7 = (_BYTE *)(a3 + 16);
  swift_beginAccess(a3 + 16, v12, 0, 0);
  if ((*(_BYTE *)(a3 + 16) & 1) != 0)
  {
    a4 = 0;
    v8 = 1;
  }
  else
  {
    v9 = a4;
    v8 = 0;
  }
  *a2 = v8;
  swift_beginAccess(v7, &v11, 1, 0);
  *v7 = 1;
  return a4;
}

id sub_1000EAFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  void *v7;

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = (void *)v6(a2, a3);
  swift_release(v5);
  return v7;
}

uint64_t sub_1000EB014()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for BufferFormatConverter()
{
  return objc_opt_self(_TtC10VoiceMemos21BufferFormatConverter);
}

unint64_t sub_1000EB060()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001EC328;
  if (!qword_1001EC328)
  {
    v1 = objc_opt_self(AVAudioFormat);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001EC328);
  }
  return result;
}

unint64_t sub_1000EB09C()
{
  unint64_t result;

  result = qword_1001EC330;
  if (!qword_1001EC330)
  {
    result = swift_getWitnessTable(&unk_10018C71C, &type metadata for BufferFormatConverter.Error);
    atomic_store(result, (unint64_t *)&qword_1001EC330);
  }
  return result;
}

uint64_t sub_1000EB0E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000EB0F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void *sub_1000EB11C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_1000EAF34(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_1000EB124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000EB134(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *initializeBufferWithCopyOfBuffer for BufferFormatConverter.Error(_QWORD *a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a2;
  LODWORD(v4) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v4 = *a2;
  if (((_DWORD)v4 + 1) <= 1)
    v5 = v3;
  *a1 = v3;
  return a1;
}

void destroy for BufferFormatConverter.Error(void **a1)
{
  void *v1;
  int v2;

  v1 = *a1;
  v2 = -1;
  if ((unint64_t)v1 < 0xFFFFFFFF)
    v2 = (int)v1;
  if ((v2 + 1) <= 1)

}

void **assignWithCopy for BufferFormatConverter.Error(void **a1, void **a2)
{
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  void *v7;
  unsigned int v8;
  id v9;
  id v10;

  v3 = *a1;
  LODWORD(v4) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v5) = -1;
  else
    v5 = *a1;
  v6 = (_DWORD)v5 + 1;
  v7 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v4 = *a2;
  v8 = (_DWORD)v4 + 1;
  if (v6 > 1)
  {
    if (v8 <= 1)
    {
      *a1 = v7;
      v10 = v7;
      return a1;
    }
LABEL_12:
    *a1 = v7;
    return a1;
  }
  if (v8 > 1)
  {

    v7 = *a2;
    goto LABEL_12;
  }
  *a1 = v7;
  v9 = v7;

  return a1;
}

_QWORD *initializeWithTake for BufferFormatConverter.Error(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **assignWithTake for BufferFormatConverter.Error(void **a1, void **a2)
{
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  void *v7;
  unsigned int v8;

  v3 = *a1;
  LODWORD(v4) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v5) = -1;
  else
    v5 = *a1;
  v6 = (_DWORD)v5 + 1;
  v7 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v4 = *a2;
  v8 = (_DWORD)v4 + 1;
  if (v6 > 1)
    goto LABEL_11;
  if (v8 > 1)
  {

LABEL_11:
    *a1 = v7;
    return a1;
  }
  *a1 = v7;

  return a1;
}

uint64_t getEnumTagSinglePayload for BufferFormatConverter.Error(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) < 2)
    LODWORD(v3) = 0;
  if (v3 >= 4)
    return (v3 - 3);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BufferFormatConverter.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 3;
  }
  return result;
}

uint64_t sub_1000EB368(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  if ((v1 + 1) >= 2)
    return v1;
  else
    return 0;
}

_QWORD *sub_1000EB388(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    *result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BufferFormatConverter.Error()
{
  return &type metadata for BufferFormatConverter.Error;
}

void sub_1000EB4E8(void *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;

  v3 = type metadata accessor for ActivityScene(0, a2);
  if (swift_dynamicCastClass(a1, v3))
  {
    v4 = (void *)objc_opt_self(RCRecorderStyleProvider);
    v16 = a1;
    v5 = objc_msgSend(v4, "sharedStyleProvider");
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, "bannerSize");
      v8 = v7;
      v10 = v9;
      objc_msgSend(v6, "bannerCornerRadius");
      v12 = v11;
      v13 = objc_allocWithZone((Class)type metadata accessor for ActivitySceneMetrics(0));
      v14 = ActivitySceneMetrics.init(size:cornerRadius:)(v8, v10, v12);
      dispatch thunk of ActivityScene.resolvedMetrics.setter(v14);

      v15 = v6;
    }
    else
    {
      v15 = v16;
    }

  }
}

BOOL sub_1000EB5F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *((unsigned __int8 *)a2 + 8);
  if (!(v2 >> 6))
    return v3 < 0x40;
  if (v2 >> 6 == 1)
    return (v3 & 0xC0) == 0x40;
  v4 = *a2;
  if (*(_QWORD *)a1 | v2 ^ 0x80)
  {
    v5 = v3 & 0xC0;
    if (*(unsigned __int8 *)(a1 + 8) == 128 && *(_QWORD *)a1 == 1)
    {
      if (v5 != 128 || v4 != 1)
        return 0;
    }
    else if (v5 != 128 || v4 != 2)
    {
      return 0;
    }
  }
  else if ((v3 & 0xC0) != 0x80 || v4 != 0)
  {
    return 0;
  }
  return v3 == 128;
}

id sub_1000EB6A4()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TranscriptionModelAssetService()), "init");
  qword_1001F6E18 = (uint64_t)result;
  return result;
}

uint64_t sub_1000EB79C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  **(_QWORD **)(*(_QWORD *)(v2 + 64) + 40) = static Set._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, &protocol witness table for String);
  return swift_continuation_resume(v2);
}

uint64_t sub_1000EB900(const void *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = _Block_copy(a1);
  v4 = (uint64_t (__cdecl *)())((char *)&dword_1001EC370 + dword_1001EC370);
  v2 = (_QWORD *)swift_task_alloc(unk_1001EC374);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1000EDB40;
  return v4();
}

uint64_t sub_1000EB960(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  **(_QWORD **)(*(_QWORD *)(v2 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String);
  return swift_continuation_resume(v2);
}

uint64_t sub_1000EB9A0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000EBB80(const void *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = _Block_copy(a1);
  v4 = (uint64_t (__cdecl *)())((char *)&dword_1001EC378 + dword_1001EC378);
  v2 = (_QWORD *)swift_task_alloc(unk_1001EC37C);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1000EBBE0;
  return v4();
}

uint64_t sub_1000EBBE0(char a1)
{
  uint64_t *v1;
  void (**v3)(_QWORD, _QWORD);
  uint64_t v5;

  v3 = *(void (***)(_QWORD, _QWORD))(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 24));
  v3[2](v3, a1 & 1);
  _Block_release(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1000EBC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (__cdecl *v8)();

  v4[36] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[37] = v5;
  v4[38] = static MainActor.shared.getter(v5);
  v8 = (uint64_t (__cdecl *)())((char *)&dword_1001EC370 + dword_1001EC370);
  v6 = (_QWORD *)swift_task_alloc(unk_1001EC374);
  v4[39] = v6;
  *v6 = v4;
  v6[1] = sub_1000EBCB8;
  return v8();
}

uint64_t sub_1000EBCB8(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 312);
  v4 = *(_QWORD *)(*v1 + 296);
  *(_BYTE *)(*v1 + 193) = a1;
  swift_task_dealloc(v3);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 320) = v5;
  *(_QWORD *)(v2 + 328) = v6;
  return swift_task_switch(sub_1000EBD38, v5, v6);
}

uint64_t sub_1000EBD38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t (*v8)(void);
  _QWORD *v9;
  uint64_t (*v11)(void);

  if ((*(_BYTE *)(v0 + 193) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 288);
    swift_release(*(_QWORD *)(v0 + 304));
    v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos30TranscriptionModelAssetService__downloadStateValueSubject);
    *(_QWORD *)(v0 + 264) = 2;
    *(_BYTE *)(v0 + 272) = 0x80;
    swift_retain(v2);
    CurrentValueSubject.send(_:)(v0 + 264);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 288);
    v4 = OBJC_IVAR____TtC10VoiceMemos30TranscriptionModelAssetService__downloadStateValueSubject;
    *(_QWORD *)(v0 + 336) = OBJC_IVAR____TtC10VoiceMemos30TranscriptionModelAssetService__downloadStateValueSubject;
    v5 = *(_QWORD *)(v3 + v4);
    v6 = swift_retain(v5);
    CurrentValueSubject.value.getter((_QWORD *)(v0 + 200), v6);
    swift_release(v5);
    v7 = *(unsigned __int8 *)(v0 + 208);
    if (v7 > 0x3F)
    {
      sub_1000BED94(*(_QWORD *)(v0 + 200), v7);
      v11 = (uint64_t (*)(void))((char *)&dword_1001EC378 + dword_1001EC378);
      v9 = (_QWORD *)swift_task_alloc(unk_1001EC37C);
      *(_QWORD *)(v0 + 344) = v9;
      *v9 = v0;
      v9[1] = sub_1000EBE3C;
      v8 = v11;
      return v8();
    }
    v2 = *(_QWORD *)(v0 + 304);
  }
  swift_release(v2);
  v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1000EBE3C(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 344);
  *(_BYTE *)(*v1 + 194) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_1000EBE94, *(_QWORD *)(v2 + 320), *(_QWORD *)(v2 + 328));
}

uint64_t sub_1000EBE94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;

  v1 = *(_QWORD *)(v0 + 336);
  if (*(_BYTE *)(v0 + 194) == 1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v0 + 288) + v1);
    *(_QWORD *)(v0 + 184) = 0;
    *(_BYTE *)(v0 + 192) = 0;
    swift_retain(v2);
    CurrentValueSubject.send(_:)(v0 + 184);
    swift_release(v2);
    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_1000AACFC(v3, (uint64_t)qword_1001F6C20);
    *(_QWORD *)(v0 + 352) = v4;
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Initiating asset download", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = v0 + 16;
    v9 = *(_QWORD *)(v0 + 288);

    v10 = objc_allocWithZone((Class)SFEntitledAssetConfig);
    v11 = String._bridgeToObjectiveC()();
    v12 = objc_msgSend(v10, "initWithLanguage:taskHint:", v11, 1009);
    *(_QWORD *)(v0 + 360) = v12;

    v13 = (void *)objc_opt_self(SFSpeechAssetManager);
    v14 = (void *)RCVoiceMemosBundleID;
    *(_QWORD *)(v0 + 368) = RCVoiceMemosBundleID;
    v15 = swift_allocObject(&unk_1001B1B38, 24, 7);
    swift_unknownObjectWeakInit(v15 + 16, v9);
    *(_QWORD *)(v0 + 112) = sub_1000ED8DC;
    *(_QWORD *)(v0 + 120) = v15;
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 88) = 1107296256;
    *(_QWORD *)(v0 + 96) = sub_1000EC8E4;
    *(_QWORD *)(v0 + 104) = &unk_1001B1B50;
    v16 = _Block_copy((const void *)(v0 + 80));
    *(_QWORD *)(v0 + 376) = v16;
    v17 = *(_QWORD *)(v0 + 120);
    v18 = v14;
    swift_release(v17);
    *(_QWORD *)(v0 + 56) = v0 + 168;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1000EC224;
    v19 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 128) = _NSConcreteStackBlock;
    v20 = (_QWORD *)(v0 + 128);
    v20[1] = 0x40000000;
    v20[2] = sub_1000EC92C;
    v20[3] = &unk_1001B1B78;
    v20[4] = v19;
    objc_msgSend(v13, "fetchAssetWithConfig:clientIdentifier:detailedProgress:completion:", v12, v18, v16, v20);
    return swift_continuation_await(v8);
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 288);
    swift_release(*(_QWORD *)(v0 + 304));
    v23 = *(_QWORD *)(v22 + v1);
    *(_QWORD *)(v0 + 216) = 1;
    *(_BYTE *)(v0 + 224) = 0x80;
    swift_retain(v23);
    CurrentValueSubject.send(_:)(v0 + 216);
    swift_release(v23);
    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_1000AACFC(v24, (uint64_t)qword_1001F6C20);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "GASR model not available for this device", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000EC224()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 384) = v2;
  if (v2)
    v3 = sub_1000EC38C;
  else
    v3 = sub_1000EC280;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 320), *(_QWORD *)(v1 + 328));
}

uint64_t sub_1000EC280()
{
  uint64_t v0;
  const void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  void *v10;
  uint8_t *v11;

  v2 = *(void **)(v0 + 368);
  v1 = *(const void **)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 288);
  swift_release(*(_QWORD *)(v0 + 304));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));
  _Block_release(v1);

  v5 = *(_QWORD *)(v4 + v3);
  *(_QWORD *)(v0 + 248) = 2;
  *(_BYTE *)(v0 + 256) = 0x80;
  swift_retain(v5);
  CurrentValueSubject.send(_:)(v0 + 248);
  v6 = swift_release(v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(void **)(v0 + 360);
  if (v9)
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Asset download completed", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EC38C()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(const void **)(v0 + 376);
  v1 = *(_QWORD *)(v0 + 384);
  v4 = *(void **)(v0 + 360);
  v3 = *(void **)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 288);
  v7 = swift_release(*(_QWORD *)(v0 + 304));
  swift_willThrow(v7);

  _Block_release(v2);
  v8 = *(_QWORD *)(v6 + v5);
  *(_QWORD *)(v0 + 232) = v1;
  *(_BYTE *)(v0 + 240) = 64;
  swift_errorRetain(v1);
  swift_retain(v8);
  CurrentValueSubject.send(_:)(v0 + 232);
  swift_release(v8);
  swift_errorRelease(v1);
  swift_errorRetain(v1);
  v9 = swift_errorRetain(v1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = *(_QWORD *)(v0 + 384);
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v13 = 138412290;
    swift_errorRetain(v12);
    v15 = _swift_stdlib_bridgeErrorToNSError(v12);
    *(_QWORD *)(v0 + 280) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v13 + 4, v13 + 12);
    *v14 = v15;
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Asset download failed - error = %@", v13, 0xCu);
    v16 = sub_100014E10((uint64_t *)&unk_1001ECD60);
    swift_arrayDestroy(v14, 1, v16);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v12);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 384);
    swift_errorRelease(v17);
    swift_errorRelease(v17);
    swift_errorRelease(v17);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EC590(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v6 = sub_100014E10(&qword_1001E9BB0);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  type metadata accessor for MainActor(0);
  v10 = swift_retain(a3);
  v11 = static MainActor.shared.getter(v10);
  v12 = swift_allocObject(&unk_1001B1BA0, 49, 7);
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v12 + 32) = a3;
  *(_QWORD *)(v12 + 40) = a1;
  *(_BYTE *)(v12 + 48) = a2;
  v13 = sub_1000F7930((uint64_t)v8, (uint64_t)&unk_1001EC388, v12);
  return swift_release(v13);
}

uint64_t sub_1000EC680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(v6 + 49) = a6;
  *(_QWORD *)(v6 + 56) = a4;
  *(_QWORD *)(v6 + 64) = a5;
  v7 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v6 + 72) = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000EC6F0, v8, v9);
}

uint64_t sub_1000EC6F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 72));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (char *)Strong;
    v4 = OBJC_IVAR____TtC10VoiceMemos30TranscriptionModelAssetService__downloadStateValueSubject;
    v5 = *(_QWORD *)(Strong + OBJC_IVAR____TtC10VoiceMemos30TranscriptionModelAssetService__downloadStateValueSubject);
    v6 = swift_retain(v5);
    CurrentValueSubject.value.getter((_QWORD *)(v0 + 40), v6);
    swift_release(v5);
    v7 = *(unsigned __int8 *)(v0 + 48);
    v8 = *(_QWORD *)(v0 + 40);
    v9 = (v7 & 0xC0) == 0x80 && v8 == 2;
    if (v9 && v7 == 128)
    {

    }
    else
    {
      v10 = *(_BYTE *)(v0 + 49);
      v11 = *(_QWORD *)(v0 + 64);
      sub_1000BED94(v8, v7);
      v12 = *(_QWORD *)&v3[v4];
      *(_QWORD *)(v0 + 40) = v11;
      *(_BYTE *)(v0 + 48) = v10;
      swift_retain(v12);
      CurrentValueSubject.send(_:)(v0 + 40);
      swift_release(v12);
      if (qword_1001E8F80 != -1)
        swift_once(&qword_1001E8F80, sub_1000B5218);
      v13 = type metadata accessor for Logger(0);
      v14 = sub_1000AACFC(v13, (uint64_t)qword_1001F6C20);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = *(unsigned __int8 *)(v0 + 49);
        v18 = *(_QWORD *)(v0 + 64);
        v19 = swift_slowAlloc(18, -1);
        *(_DWORD *)v19 = 134218240;
        *(_QWORD *)(v0 + 40) = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v19 + 4, v19 + 12);
        *(_WORD *)(v19 + 12) = 1024;
        *(_DWORD *)(v0 + 40) = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 44, v19 + 14, v19 + 18);
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Asset downloading progress = %ld%%, stalled = %{BOOL}d", (uint8_t *)v19, 0x12u);
        swift_slowDealloc(v19, -1, -1);
      }

    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EC8E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v6 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v6(a2, a3);
  return swift_release(v5);
}

uint64_t sub_1000EC92C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100014E10(qword_1001E9C68);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v11 = *(uint64_t **)(*(_QWORD *)(v3 + 64) + 40);
    *v11 = v10;
    v11[1] = v12;
    return swift_continuation_throwingResume(v3);
  }
}

id sub_1000ECA98()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TranscriptionModelAssetService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TranscriptionModelAssetService()
{
  return objc_opt_self(_TtC10VoiceMemos30TranscriptionModelAssetService);
}

uint64_t initializeBufferWithCopyOfBuffer for TranscriptionModelAssetService.DownloadState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1000BED80(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for TranscriptionModelAssetService.DownloadState(uint64_t a1)
{
  return sub_1000BED94(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for TranscriptionModelAssetService.DownloadState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1000BED80(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_1000BED94(v5, v6);
  return a1;
}

uint64_t initializeWithTake for TranscriptionModelAssetService.DownloadState(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for TranscriptionModelAssetService.DownloadState(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_1000BED94(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for TranscriptionModelAssetService.DownloadState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 126);
  v3 = ((*(unsigned __int8 *)(a1 + 8) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 8) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TranscriptionModelAssetService.DownloadState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_BYTE *)(result + 8) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_1000ECC94(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = (char)v1;
  v3 = v1 >> 6;
  if (v2 >= 0)
    return v3;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1000ECCB4(uint64_t result)
{
  *(_BYTE *)(result + 8) &= 0x3Fu;
  return result;
}

uint64_t sub_1000ECCC4(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    *(_BYTE *)(result + 8) = *(_BYTE *)(result + 8) & 1 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(_QWORD *)result = a2 - 2;
    *(_BYTE *)(result + 8) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for TranscriptionModelAssetService.DownloadState()
{
  return &type metadata for TranscriptionModelAssetService.DownloadState;
}

uint64_t sub_1000ECD00()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000ECD2C()
{
  return swift_task_switch(sub_1000ECD40, 0, 0);
}

uint64_t sub_1000ECD40()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)objc_opt_self(SFSpeechAssetManager);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1000ECDEC;
  v3 = swift_continuation_init(v0 + 2, 0);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_1000EB79C;
  v4[3] = &unk_1001B1BD0;
  v4[4] = v3;
  objc_msgSend(v2, "installedLanguagesForTaskHint:completion:", 1009, v4);
  return swift_continuation_await(v1);
}

uint64_t sub_1000ECDEC()
{
  return swift_task_switch(sub_1000ECE38, 0, 0);
}

uint64_t sub_1000ECE38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v2 != 0);
}

uint64_t sub_1000ECE74()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Locale.Language(0);
  v0[21] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[22] = v2;
  v0[23] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100014E10(&qword_1001EC390);
  v0[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale(0);
  v0[25] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v0[26] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[27] = swift_task_alloc(v6);
  v0[28] = swift_task_alloc(v6);
  v0[29] = swift_task_alloc(v6);
  return swift_task_switch(sub_1000ECF38, 0, 0);
}

uint64_t sub_1000ECF38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  os_log_type_t type;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v2 = *(_QWORD *)(v1 + 168);
  v3 = *(_QWORD *)(v1 + 184);
  v4 = *(_QWORD *)(v1 + 192);
  v5 = *(_QWORD *)(v1 + 176);
  v6 = static Locale.current.getter(a1);
  v7 = Locale.language.getter(v6);
  Locale.Language.languageCode.getter(v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v2);
  v8 = type metadata accessor for Locale.LanguageCode(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8);
  v11 = *(_QWORD *)(v1 + 192);
  if (v10 == 1)
  {
    sub_1000ED9A8(*(_QWORD *)(v1 + 192));
    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v12 = *(_QWORD *)(v1 + 232);
    v14 = *(_QWORD *)(v1 + 208);
    v13 = *(_QWORD *)(v1 + 216);
    v15 = *(_QWORD *)(v1 + 200);
    v16 = type metadata accessor for Logger(0);
    sub_1000AACFC(v16, (uint64_t)qword_1001F6C20);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v12, v15);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    v20 = os_log_type_enabled(v18, v19);
    v21 = *(_QWORD *)(v1 + 232);
    v23 = *(_QWORD *)(v1 + 208);
    v22 = *(_QWORD *)(v1 + 216);
    v24 = *(_QWORD *)(v1 + 200);
    if (v20)
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v63 = v21;
      v65 = swift_slowAlloc(32, -1);
      v26 = v65;
      *(_DWORD *)v25 = 136315138;
      v27 = sub_1000ED9E8();
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v24, v27);
      v30 = v29;
      *(_QWORD *)(v1 + 128) = sub_1001049A8(v28, v29, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease(v30);
      v31 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v31(v22, v24);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "No language code for locale %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      v31(v63, v24);
    }
    else
    {

      v52 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v52(v22, v24);
      v52(v21, v24);
    }
    v53 = *(_QWORD *)(v1 + 224);
    v54 = *(_QWORD *)(v1 + 216);
    v56 = *(_QWORD *)(v1 + 184);
    v55 = *(_QWORD *)(v1 + 192);
    swift_task_dealloc(*(_QWORD *)(v1 + 232));
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
  }
  else
  {
    v32 = Locale.LanguageCode.identifier.getter();
    v34 = v33;
    *(_QWORD *)(v1 + 240) = v32;
    *(_QWORD *)(v1 + 248) = v33;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v36 = *(_QWORD *)(v1 + 224);
    v35 = *(_QWORD *)(v1 + 232);
    v37 = *(_QWORD *)(v1 + 200);
    v38 = *(_QWORD *)(v1 + 208);
    v39 = type metadata accessor for Logger(0);
    *(_QWORD *)(v1 + 256) = sub_1000AACFC(v39, (uint64_t)qword_1001F6C20);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v36, v35, v37);
    v40 = swift_bridgeObjectRetain_n(v34, 2);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter();
    v43 = os_log_type_enabled(v41, v42);
    v44 = *(_QWORD *)(v1 + 224);
    v45 = *(_QWORD *)(v1 + 200);
    v46 = *(_QWORD *)(v1 + 208);
    if (v43)
    {
      v47 = swift_slowAlloc(22, -1);
      v64 = swift_slowAlloc(64, -1);
      v65 = v64;
      *(_DWORD *)v47 = 136315394;
      v48 = Locale.identifier.getter();
      type = v42;
      v50 = v49;
      *(_QWORD *)(v1 + 152) = sub_1001049A8(v48, v49, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 152, v1 + 160, v47 + 4, v47 + 12);
      swift_bridgeObjectRelease(v50);
      v51 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
      v51(v44, v45);
      *(_WORD *)(v47 + 12) = 2080;
      swift_bridgeObjectRetain(v34);
      *(_QWORD *)(v1 + 160) = sub_1001049A8(v32, v34, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 160, v1 + 168, v47 + 14, v47 + 22);
      swift_bridgeObjectRelease_n(v34, 3);
      _os_log_impl((void *)&_mh_execute_header, v41, type, "Current locale is %s, language code identifier is %s", (uint8_t *)v47, 0x16u);
      swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v47, -1, -1);

    }
    else
    {
      v51 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
      v51(*(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 200));
      swift_bridgeObjectRelease_n(v34, 2);

    }
    v58 = v1 + 16;
    *(_QWORD *)(v1 + 264) = v51;
    v59 = (void *)objc_opt_self(SFSpeechAssetManager);
    *(_QWORD *)(v1 + 56) = v1 + 120;
    *(_QWORD *)(v1 + 16) = v1;
    *(_QWORD *)(v1 + 24) = sub_1000ED498;
    v60 = swift_continuation_init(v1 + 16, 0);
    *(_QWORD *)(v1 + 80) = _NSConcreteStackBlock;
    v61 = (_QWORD *)(v1 + 80);
    v61[1] = 0x40000000;
    v61[2] = sub_1000EB960;
    v61[3] = &unk_1001B1BB8;
    v61[4] = v60;
    objc_msgSend(v59, "supportedLanguagesForTaskHint:completion:", 1009, v61);
    return swift_continuation_await(v58);
  }
}

uint64_t sub_1000ED498()
{
  return swift_task_switch(sub_1000ED4E4, 0, 0);
}

uint64_t sub_1000ED4E4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD **)(v0 + 120);
  v3 = sub_1000EB9A0(*(_QWORD *)(v0 + 240), v1, v2);
  swift_bridgeObjectRelease(v1);
  if (v2[2])
  {
    v4 = v0 + 144;
    v5 = swift_bridgeObjectRetain(v2);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v45 = v9;
      *(_DWORD *)v8 = 136315138;
      v10 = swift_bridgeObjectRetain(v2);
      v11 = Array.description.getter(v10, &type metadata for String);
      v13 = v12;
      swift_bridgeObjectRelease(v2);
      v14 = v11;
      v4 = v0 + 144;
      *(_QWORD *)(v0 + 144) = sub_1001049A8(v14, v13, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease_n(v2, 2);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Supported language identifiers = %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v2, 2);
    }

    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter();
    v26 = os_log_type_enabled(v24, v25);
    v27 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
    v28 = *(_QWORD *)(v0 + 232);
    v29 = *(_QWORD *)(v0 + 200);
    if (v26)
    {
      v44 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
      v43 = *(_QWORD *)(v0 + 200);
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = v4;
      v31 = swift_slowAlloc(32, -1);
      v45 = v31;
      *(_DWORD *)v30 = 136315138;
      if ((v3 & 1) != 0)
        v32 = 0;
      else
        v32 = 544501614;
      v42 = v28;
      v33 = v3;
      if ((v3 & 1) != 0)
        v34 = 0xE000000000000000;
      else
        v34 = 0xE400000000000000;
      *(_QWORD *)(v0 + 136) = sub_1001049A8(v32, v34, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v41, v30 + 4, v30 + 12);
      v35 = v34;
      v3 = v33;
      swift_bridgeObjectRelease(v35);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Transcription is %ssupported for the current language", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      v44(v42, v43);
    }
    else
    {

      v27(v28, v29);
    }
  }
  else
  {
    v15 = swift_bridgeObjectRelease(v2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
    v20 = *(_QWORD *)(v0 + 232);
    v21 = *(_QWORD *)(v0 + 200);
    if (v18)
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Transcription is not supported on this hardware", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    v19(v20, v21);
  }
  v36 = *(_QWORD *)(v0 + 224);
  v37 = *(_QWORD *)(v0 + 216);
  v39 = *(_QWORD *)(v0 + 184);
  v38 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v3 & 1);
}

uint64_t sub_1000ED8B8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000ED8DC(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000EC590(a1, a2, v2);
}

uint64_t sub_1000ED8E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000ED8F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000ED8FC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 49, 7);
}

uint64_t sub_1000ED928(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 48);
  v9 = (_QWORD *)swift_task_alloc(dword_1001EC384);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10001B80C;
  return sub_1000EC680(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000ED9A8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100014E10(&qword_1001EC390);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000ED9E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001EC398;
  if (!qword_1001EC398)
  {
    v1 = type metadata accessor for Locale(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Locale, v1);
    atomic_store(result, (unint64_t *)&qword_1001EC398);
  }
  return result;
}

uint64_t sub_1000EDA34()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  _QWORD *v3;

  v2 = *(const void **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1001EC3A4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001B80C;
  return ((uint64_t (*)(const void *))((char *)&dword_1001EC3A0 + dword_1001EC3A0))(v2);
}

uint64_t sub_1000EDAA4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000EDAD0()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  _QWORD *v3;

  v2 = *(const void **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1001EC3B4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001B80C;
  return ((uint64_t (*)(const void *))((char *)&dword_1001EC3B0 + dword_1001EC3B0))(v2);
}

uint64_t sub_1000EDB44(uint64_t a1, void *a2, void *a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t (*v15)(void *, id, double, double, double, double, double);
  id v16;
  id v17;
  char v18;

  v15 = *(uint64_t (**)(void *, id, double, double, double, double, double))(a1 + 32);
  v16 = a2;
  v17 = a3;
  v18 = v15(a2, v17, a4, a5, a6, a7, a8);

  return v18 & 1;
}

id sub_1000EDD84(uint64_t a1)
{
  return sub_1000F11A4(a1, type metadata accessor for TranscriptView.TranscriptTextView);
}

id sub_1000EDDC8(char a1)
{
  void *v1;
  char v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  objc_super v10;

  v2 = a1 & 1;
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for TranscriptView.FadeView();
  v3 = objc_msgSendSuper2(&v10, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v4 = (void *)objc_opt_self(UIColor);
  v5 = v3;
  v6 = objc_msgSend(v4, "systemBackgroundColor");
  objc_msgSend(v5, "setBackgroundColor:", v6);

  objc_msgSend(v5, "setUserInteractionEnabled:", 0);
  v7 = objc_msgSend(v5, "layer");
  v8 = sub_1000F1414(v2);
  objc_msgSend(v7, "setMask:", v8);

  return v5;
}

id sub_1000EDF64()
{
  return sub_1000F11A4(0, type metadata accessor for TranscriptView.FadeView);
}

double sub_1000EDF74()
{
  double result;

  result = 8.0;
  xmmword_1001F6E20 = xmmword_10018C7D0;
  *(_OWORD *)&qword_1001F6E30 = xmmword_10018C7D0;
  return result;
}

uint64_t sub_1000EDF8C()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[16];

  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v1 = &v7[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin();
  v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000021, 0x8000000100185AE0);
  static Locale.current.getter(v4);
  result = String.init(localized:table:bundle:locale:comment:)(v3, 0, 0, 0, v1, "Search button title", 19, 2);
  qword_1001EC3E0 = result;
  *(_QWORD *)algn_1001EC3E8 = v6;
  return result;
}

__n128 sub_1000EE070()
{
  __n128 result;
  __int128 v1;

  result = *(__n128 *)&UIEdgeInsetsZero.top;
  v1 = *(_OWORD *)&UIEdgeInsetsZero.bottom;
  xmmword_1001EC3F0 = *(_OWORD *)&UIEdgeInsetsZero.top;
  *(_OWORD *)&qword_1001EC400 = v1;
  return result;
}

uint64_t sub_1000EE08C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  char v15;
  _BYTE v17[24];
  _BYTE v18[24];

  v2 = v1;
  v4 = sub_100014E10(&qword_1001EC580);
  __chkstk_darwin(v4);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for TranscriptViewModel(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (uint64_t *)&v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v17[-v12];
  v14 = v2 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
  swift_beginAccess(v2 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel, v18, 0, 0);
  sub_1000AD1A0(v14, (uint64_t)v13);
  swift_beginAccess(v14, v17, 33, 0);
  sub_1000F1D10(a1, v14);
  swift_endAccess(v17);
  sub_1000AD1A0(v14, (uint64_t)v11);
  v15 = sub_100108650((uint64_t)v13, (uint64_t)v11);
  sub_1000AD368((uint64_t)v11);
  if ((v15 & 1) == 0)
  {
    sub_1000AD1A0((uint64_t)v13, (uint64_t)v6);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    sub_1000F0448((uint64_t)v6);
    sub_1000AD1A0(v14, (uint64_t)v11);
    sub_1000CF130((uint64_t)v6, v11);
    sub_1000AD368((uint64_t)v11);
    sub_1000EFA64((uint64_t)v6);
    sub_1000EFDF0((uint64_t)v6);
    sub_1000EFC9C();
    sub_1000F0300();
    sub_100005440((uint64_t)v6, &qword_1001EC580);
  }
  sub_1000AD368(a1);
  return sub_1000AD368((uint64_t)v13);
}

void sub_1000EE384()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSString *v5;
  unint64_t v6;
  char v7;
  NSObject v8;
  uint64_t v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  id v15;
  id v16;
  double v17;
  void *v18;
  id v19;
  id v20;
  _BYTE v21[24];
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v1 = v0;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView);
  objc_msgSend(v2, "frame");
  objc_msgSend(v2, "frame");
  v3 = v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
  swift_beginAccess(v3, v21, 0, 0);
  v4 = *(_QWORD *)(v3 + 16);
  if (!*(_QWORD *)(v4 + 16))
  {
    v24 = 0;
    v22 = 0u;
    v23 = 0u;
LABEL_10:
    sub_100005440((uint64_t)&v22, &qword_1001EC5D0);
    goto LABEL_11;
  }
  v5 = NSFontAttributeName;
  v6 = sub_100107B54((uint64_t)v5);
  if ((v7 & 1) != 0)
  {
    sub_1000A53CC(*(_QWORD *)(v4 + 56) + 40 * v6, (uint64_t)&v22);
  }
  else
  {
    v24 = 0;
    v22 = 0u;
    v23 = 0u;
  }

  if (!*((_QWORD *)&v23 + 1))
    goto LABEL_10;
  v8.isa = AnyHashable._bridgeToObjectiveC()().isa;
  sub_1000D1BC8((uint64_t)&v22);
  v9 = objc_opt_self(UIFont);
  v10 = (void *)swift_dynamicCastObjCClass(v8.isa, v9);
  if (v10)
    objc_msgSend(v10, "lineHeight");

LABEL_11:
  objc_msgSend(v2, "frame");
  v12 = v11;
  objc_msgSend(v2, "frame");
  v13 = nullsub_8(v12);
  v14 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_topFadeView);
  objc_msgSend(v14, "setFrame:", v13);
  v15 = objc_msgSend(v14, "layer");
  v16 = objc_msgSend(v15, "mask");

  if (v16)
  {
    objc_msgSend(v14, "bounds");
    objc_msgSend(v16, "setFrame:");

  }
  objc_msgSend(v2, "frame");
  v17 = nullsub_8(v12);
  v18 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_bottomFadeView);
  objc_msgSend(v18, "setFrame:", v17);
  v19 = objc_msgSend(v18, "layer");
  v20 = objc_msgSend(v19, "mask");

  if (v20)
  {
    objc_msgSend(v14, "bounds");
    objc_msgSend(v20, "setFrame:");

  }
}

void sub_1000EE624()
{
  char *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  id *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  double v21;
  id v22;
  id v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  _QWORD v36[2];
  id v37[3];
  double v38;
  __int128 v39;
  __int128 v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;

  v1 = *(void **)&v0[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView];
  v2 = objc_msgSend(v1, "findInteraction");
  if (!v2)
    return;
  v3 = v2;
  Notification.object.getter(v37);
  if (v38 == 0.0)
  {

    v16 = v37;
LABEL_23:
    sub_100005440((uint64_t)v16, &qword_1001EA0E0);
    return;
  }
  v4 = sub_100005310(0, &qword_1001EC5C8, UIScreen_ptr);
  if ((swift_dynamicCast(&v39, v37, (char *)&type metadata for Any + 8, v4, 6) & 1) == 0)
  {

    return;
  }
  v5 = (void *)v39;
  v6 = objc_msgSend(v0, "window");
  v7 = v6;
  if (v6)
  {
    v8 = objc_msgSend(v6, "screen");

    v37[0] = v8;
    v7 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v37, v4);

  }
  v9 = objc_msgSend(v5, "isEqual:", v7);
  v10 = swift_unknownObjectRelease(v7);
  if (!v9)
  {

    return;
  }
  v11 = Notification.userInfo.getter(v10);
  if (!v11)
  {
    v39 = 0u;
    v40 = 0u;
LABEL_22:

    v16 = (id *)&v39;
    goto LABEL_23;
  }
  v12 = v11;
  v36[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardFrameEndUserInfoKey);
  v36[1] = v13;
  AnyHashable.init<A>(_:)(v36, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v12 + 16) && (v14 = sub_100107BD4((uint64_t)v37), (v15 & 1) != 0))
  {
    sub_1000C113C(*(_QWORD *)(v12 + 56) + 32 * v14, (uint64_t)&v39);
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
  }
  swift_bridgeObjectRelease(v12);
  sub_1000D1BC8((uint64_t)v37);
  if (!*((_QWORD *)&v40 + 1))
    goto LABEL_22;
  type metadata accessor for CGRect(0);
  if ((swift_dynamicCast(v37, &v39, (char *)&type metadata for Any + 8, v17, 6) & 1) != 0)
  {
    v18 = v37[0];
    v19 = v37[1];
    v20 = v37[2];
    v21 = v38;
    v22 = objc_msgSend(v5, "coordinateSpace");
    v23 = v1;
    objc_msgSend(v22, "convertRect:toCoordinateSpace:", v23, *(double *)&v18, *(double *)&v19, *(double *)&v20, v21);
    v25 = v24;
    v27 = v26;
    v29 = v28;
    v31 = v30;
    objc_msgSend(v23, "bounds");
    v45.origin.x = v25;
    v45.origin.y = v27;
    v45.size.width = v29;
    v45.size.height = v31;
    v42 = CGRectIntersection(v41, v45);
    x = v42.origin.x;
    y = v42.origin.y;
    width = v42.size.width;
    height = v42.size.height;
    if (objc_msgSend(v3, "isFindNavigatorVisible")
      && (v43.origin.x = x, v43.origin.y = y, v43.size.width = width, v43.size.height = height, !CGRectIsEmpty(v43)))
    {
      objc_msgSend(v23, "bounds");
      CGRectGetMaxY(v44);
    }
    else if (qword_1001E9070 != -1)
    {
      swift_once(&qword_1001E9070, sub_1000EE070);
    }
    objc_msgSend(v23, "contentInset");
    objc_msgSend(v23, "setContentInset:");

    swift_unknownObjectRelease(v22);
  }
  else
  {

  }
}

void sub_1000EE9C0()
{
  uint64_t v0;
  char *v1;
  char *v2;
  void *v3;
  id v4;

  v1 = *(char **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView);
  objc_msgSend(v1, "setEditable:", 0);
  objc_msgSend(v1, "setScrollsToTop:", 0);
  objc_msgSend(v1, "setFindInteractionEnabled:", 1);
  objc_msgSend(v1, "setDelegate:", v0);
  v2 = &v1[OBJC_IVAR____TtCC10VoiceMemos14TranscriptView18TranscriptTextView_findInteractionObserver];
  *((_QWORD *)v2 + 1) = &off_1001B1CF0;
  swift_unknownObjectWeakAssign(v2, v0);
  objc_msgSend(v1, "setAdjustsFontForContentSizeCategory:", 1);
  sub_1000EEAD0();
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_emptyStateView);
  v4 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
  objc_msgSend(v3, "setBackgroundColor:", v4);

  objc_msgSend(v3, "setHidden:", 1);
  sub_1000EECA4();
}

uint64_t sub_1000EEAD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for UIButton.Configuration.CornerStyle(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100014E10((uint64_t *)&unk_1001EC5B8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIButton.Configuration.filled()(objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_searchButton), "addTarget:action:forControlEvents:", v1, "searchButtonTapped", 64));
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v9);

  UIButton.Configuration.image.setter(v10);
  if (qword_1001E9068 != -1)
    swift_once(&qword_1001E9068, sub_1000EDF8C);
  v11 = qword_1001EC3E0;
  v12 = *(_QWORD *)algn_1001EC3E8;
  v13 = swift_bridgeObjectRetain(*(_QWORD *)algn_1001EC3E8);
  UIButton.Configuration.title.setter(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v2);
  UIButton.Configuration.cornerStyle.setter(v5);
  v14 = type metadata accessor for UIButton.Configuration(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 0, 1, v14);
  return UIButton.configuration.setter(v8);
}

void sub_1000EECA4()
{
  char *v0;
  char *v1;
  void *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  Class isa;
  id v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  id v54;
  void *v55;
  id v56;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView];
  objc_msgSend(v0, "addSubview:", v2);
  v3 = *(void **)&v0[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_searchButton];
  objc_msgSend(v0, "addSubview:", v3);
  v4 = *(void **)&v0[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_emptyStateView];
  objc_msgSend(v1, "addSubview:", v4);
  objc_msgSend(v1, "addSubview:", *(_QWORD *)&v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_topFadeView]);
  objc_msgSend(v1, "addSubview:", *(_QWORD *)&v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_bottomFadeView]);
  objc_msgSend(v1, "bringSubviewToFront:", v4);
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  LODWORD(v5) = 0;
  objc_msgSend(v4, "setContentHuggingPriority:forAxis:", 0, v5);
  LODWORD(v6) = 0;
  objc_msgSend(v4, "setContentHuggingPriority:forAxis:", 1, v6);
  v56 = (id)objc_opt_self(NSLayoutConstraint);
  v7 = sub_100014E10((uint64_t *)&unk_1001E9190);
  v8 = swift_allocObject(v7, 104, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10018C7E0;
  v9 = objc_msgSend(v2, "leadingAnchor");
  v10 = objc_msgSend(v1, "layoutMarginsGuide");
  v11 = objc_msgSend(v10, "leadingAnchor");

  v12 = objc_msgSend(v9, "constraintEqualToAnchor:", v11);
  *(_QWORD *)(v8 + 32) = v12;
  v13 = objc_msgSend(v2, "trailingAnchor");
  v14 = objc_msgSend(v1, "layoutMarginsGuide");
  v15 = objc_msgSend(v14, "trailingAnchor");

  v16 = objc_msgSend(v13, "constraintEqualToAnchor:", v15);
  *(_QWORD *)(v8 + 40) = v16;
  v17 = objc_msgSend(v2, "topAnchor");
  v18 = objc_msgSend(v1, "layoutMarginsGuide");
  v19 = objc_msgSend(v18, "topAnchor");

  v20 = objc_msgSend(v17, "constraintEqualToAnchor:", v19);
  *(_QWORD *)(v8 + 48) = v20;
  v21 = objc_msgSend(v3, "bottomAnchor");
  v22 = objc_msgSend(v1, "layoutMarginsGuide");
  v23 = objc_msgSend(v22, "bottomAnchor");

  v24 = objc_msgSend(v21, "constraintEqualToAnchor:", v23);
  *(_QWORD *)(v8 + 56) = v24;
  v25 = objc_msgSend(v3, "centerXAnchor");
  v26 = objc_msgSend(v1, "layoutMarginsGuide");
  v27 = objc_msgSend(v26, "centerXAnchor");

  v28 = objc_msgSend(v25, "constraintEqualToAnchor:", v27);
  *(_QWORD *)(v8 + 64) = v28;
  v29 = objc_msgSend(v4, "leadingAnchor");
  v30 = objc_msgSend(v1, "layoutMarginsGuide");
  v31 = objc_msgSend(v30, "leadingAnchor");

  v32 = objc_msgSend(v29, "constraintEqualToAnchor:", v31);
  *(_QWORD *)(v8 + 72) = v32;
  v33 = objc_msgSend(v4, "trailingAnchor");
  v34 = objc_msgSend(v1, "layoutMarginsGuide");
  v35 = objc_msgSend(v34, "trailingAnchor");

  v36 = objc_msgSend(v33, "constraintEqualToAnchor:", v35);
  *(_QWORD *)(v8 + 80) = v36;
  v37 = objc_msgSend(v4, "topAnchor");
  v38 = objc_msgSend(v1, "layoutMarginsGuide");
  v39 = objc_msgSend(v38, "topAnchor");

  v40 = objc_msgSend(v37, "constraintEqualToAnchor:", v39);
  *(_QWORD *)(v8 + 88) = v40;
  v41 = objc_msgSend(v4, "bottomAnchor");
  v42 = objc_msgSend(v1, "layoutMarginsGuide");
  v43 = objc_msgSend(v42, "bottomAnchor");

  v44 = objc_msgSend(v41, "constraintEqualToAnchor:", v43);
  *(_QWORD *)(v8 + 96) = v44;
  specialized Array._endMutation()(v45);
  sub_100005310(0, &qword_1001EC5B0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v56, "activateConstraints:", isa);

  v47 = objc_msgSend(v3, "topAnchor");
  v48 = objc_msgSend(v2, "bottomAnchor");
  v49 = objc_msgSend(v47, "constraintEqualToAnchor:constant:", v48, 10.0);

  v50 = *(void **)&v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToSearchTopAnchorConstraint];
  *(_QWORD *)&v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToSearchTopAnchorConstraint] = v49;

  v51 = objc_msgSend(v2, "bottomAnchor");
  v52 = objc_msgSend(v1, "layoutMarginsGuide");
  v53 = objc_msgSend(v52, "bottomAnchor");

  v54 = objc_msgSend(v51, "constraintEqualToAnchor:", v53);
  v55 = *(void **)&v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToLayoutMarginsBottomAnchorConstraint];
  *(_QWORD *)&v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToLayoutMarginsBottomAnchorConstraint] = v54;

}

uint64_t sub_1000EF3A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, uint64_t);
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v18[24];

  v1 = v0;
  v2 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = (void *)objc_opt_self(NSNotificationCenter);
  v7 = objc_msgSend(v6, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(UIKeyboardWillShowNotification, 0);

  v8 = swift_allocObject(&unk_1001B1D90, 24, 7);
  swift_unknownObjectWeakInit(v8 + 16, v1);
  v9 = sub_10001B7CC((unint64_t *)&unk_1001EC5A0, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v10 = Publisher<>.sink(receiveValue:)(sub_1000F1CF8, v8, v2, v9);
  swift_release(v8);
  v11 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v11(v5, v2);
  v12 = v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_cancellables;
  swift_beginAccess(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_cancellables, v18, 33, 0);
  AnyCancellable.store(in:)(v12);
  swift_endAccess(v18);
  swift_release(v10);
  v13 = objc_msgSend(v6, "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(UIKeyboardWillHideNotification, 0);

  v14 = swift_allocObject(&unk_1001B1D90, 24, 7);
  swift_unknownObjectWeakInit(v14 + 16, v1);
  v15 = Publisher<>.sink(receiveValue:)(sub_1000F1CF8, v14, v2, v9);
  swift_release(v14);
  v11(v5, v2);
  swift_beginAccess(v12, v18, 33, 0);
  AnyCancellable.store(in:)(v12);
  swift_endAccess(v18);
  return swift_release(v15);
}

void sub_1000EF5D0(uint64_t a1, uint64_t a2)
{
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(a2 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    v3 = (void *)Strong;
    sub_1000EE624();

  }
}

void sub_1000EF628()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v1 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v0, "didReceiveTap:");
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewTapGestureRecognizer);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewTapGestureRecognizer) = v1;
  v3 = v1;

  objc_msgSend(v3, "setDelegate:", v0);
  v4 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView);
  objc_msgSend(v4, "addGestureRecognizer:", v3);
  v5 = objc_msgSend(objc_allocWithZone((Class)UIPanGestureRecognizer), "initWithTarget:action:", v0, "didReceivePan:");
  v6 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewPanGestureRecognizer);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewPanGestureRecognizer) = v5;
  v7 = v5;

  objc_msgSend(v7, "setDelegate:", v0);
  objc_msgSend(v7, "setAllowedScrollTypesMask:", 3);
  objc_msgSend(v4, "addGestureRecognizer:", v7);

}

void sub_1000EF754(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  double v15;
  uint64_t Strong;
  uint64_t v17;
  void *v18;
  _BYTE v19[40];
  double v20[4];
  char v21;

  v3 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView);
  v4 = objc_msgSend(v3, "textStorage");
  v5 = objc_msgSend(v4, "string");

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  swift_bridgeObjectRelease(v8);
  v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  if (v9)
  {
    objc_msgSend(a1, "locationInView:", v3);
    v10 = objc_msgSend(v3, "closestPositionToPoint:");
    if (v10)
    {
      v11 = v10;
      v12 = objc_msgSend(v3, "beginningOfDocument");
      v13 = objc_msgSend(v3, "offsetFromPosition:toPosition:", v12, v11);

      v14 = *sub_10001B474((_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller), *(_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller + 24));
      sub_1000FB3FC((uint64_t)v13, (uint64_t)v19);
      sub_1000F1C8C((uint64_t)v19, (uint64_t)v20);
      if ((v21 & 1) != 0 || (v15 = v20[0], (Strong = swift_unknownObjectWeakLoadStrong(v14 + 56)) == 0))
      {

      }
      else
      {
        v17 = Strong;
        v18 = *(void **)(Strong + 56);
        if (v18)
          objc_msgSend(v18, "setTargetTime:", v15);

        swift_unknownObjectRelease(v17);
      }
    }
  }
}

uint64_t sub_1000EF940(void *a1)
{
  uint64_t v1;
  uint64_t *v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t Strong;
  _QWORD v11[5];

  sub_10001BB88(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller, (uint64_t)v11);
  v3 = sub_10001B474(v11, v11[3]);
  objc_msgSend(a1, "velocityInView:", *(_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView));
  v5 = *v3;
  if (v4 <= 50.0)
  {
    if (v4 < -50.0)
    {
      Strong = swift_unknownObjectWeakLoadStrong(v5 + 56);
      if (Strong)
      {
        v7 = Strong;
        v8 = 1;
        goto LABEL_7;
      }
    }
  }
  else
  {
    v6 = swift_unknownObjectWeakLoadStrong(v5 + 56);
    if (v6)
    {
      v7 = v6;
      v8 = 0;
LABEL_7:
      sub_1000A5824(v8);
      swift_unknownObjectRelease(v7);
    }
  }
  return sub_10001B498(v11);
}

id sub_1000EFA64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  char v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  id result;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  _BYTE v23[24];

  v3 = sub_100014E10(&qword_1001EC580);
  __chkstk_darwin(v3);
  v5 = (double *)&v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000F1D54(a1, (uint64_t)v5, &qword_1001EC580);
  v6 = type metadata accessor for TranscriptViewModel(0);
  if ((*(unsigned int (**)(double *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6) == 1)
  {
    sub_100005440((uint64_t)v5, &qword_1001EC580);
    v7 = 1;
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
  }
  else
  {
    v8 = v5[4];
    v9 = v5[5];
    v10 = v5[6];
    v11 = v5[7];
    v7 = *((_BYTE *)v5 + 64);
    sub_1000AD368((uint64_t)v5);
  }
  v12 = v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
  result = (id)swift_beginAccess(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel, v23, 0, 0);
  if ((v7 & 1) != 0)
  {
    if ((*(_BYTE *)(v12 + 64) & 1) != 0)
      return result;
    v14 = *(double *)(v12 + 32);
    v15 = *(double *)(v12 + 40);
    v16 = *(double *)(v12 + 48);
    v17 = *(double *)(v12 + 56);
    goto LABEL_21;
  }
  if ((*(_BYTE *)(v12 + 64) & 1) != 0)
  {
    v18 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView);
    if (qword_1001E9060 != -1)
      swift_once(&qword_1001E9060, sub_1000EDF74);
    v15 = *((double *)&xmmword_1001F6E20 + 1);
    v14 = *(double *)&xmmword_1001F6E20;
    v16 = *(double *)&qword_1001F6E30;
    v17 = unk_1001F6E38;
    return objc_msgSend(v18, "setTextContainerInset:", v14, v15, v16, v17);
  }
  v14 = *(double *)(v12 + 32);
  v15 = *(double *)(v12 + 40);
  v16 = *(double *)(v12 + 48);
  v17 = *(double *)(v12 + 56);
  if (v8 != v14 || v9 != *(double *)(v12 + 40) || v10 != *(double *)(v12 + 48) || v11 != *(double *)(v12 + 56))
  {
LABEL_21:
    v18 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView);
    return objc_msgSend(v18, "setTextContainerInset:", v14, v15, v16, v17);
  }
  return result;
}

id sub_1000EFC9C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _BYTE v10[24];
  _BYTE v11[24];
  _BYTE v12[24];

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToSearchTopAnchorConstraint);
  if (v1)
  {
    v2 = v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
    swift_beginAccess(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel, v12, 0, 0);
    objc_msgSend(v1, "setActive:", *(unsigned __int8 *)(v2 + *(int *)(type metadata accessor for TranscriptViewModel(0) + 44)));
  }
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToLayoutMarginsBottomAnchorConstraint);
  if (v3)
  {
    v4 = v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
    swift_beginAccess(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel, v11, 0, 0);
    objc_msgSend(v3, "setActive:", (*(_BYTE *)(v4 + *(int *)(type metadata accessor for TranscriptViewModel(0) + 44)) & 1) == 0);
  }
  v5 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_searchButton);
  v6 = v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
  swift_beginAccess(v6, v10, 0, 0);
  v7 = type metadata accessor for TranscriptViewModel(0);
  v8 = 0.0;
  if (*(_BYTE *)(v6 + *(int *)(v7 + 44)))
    v8 = 1.0;
  objc_msgSend(v5, "setAlpha:", v8);
  return objc_msgSend(v5, "setHidden:", (*(_BYTE *)(v6 + *(int *)(v7 + 44)) & 1) == 0);
}

uint64_t sub_1000EFDF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  double v17;
  double v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  char v23;
  _BYTE v25[24];

  v3 = sub_100014E10(&qword_1001EC580);
  __chkstk_darwin(v3);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000F1D54(a1, (uint64_t)v5, &qword_1001EC580);
  v6 = type metadata accessor for TranscriptViewModel(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6) == 1)
  {
    sub_100005440((uint64_t)v5, &qword_1001EC580);
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 1;
  }
  else
  {
    v7 = *((_QWORD *)v5 + 9);
    v8 = *((_QWORD *)v5 + 10);
    v11 = v5[88];
    v10 = v5[89];
    sub_1000AD368((uint64_t)v5);
    v9 = v11 & 1;
  }
  v12 = v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
  swift_beginAccess(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel, v25, 0, 0);
  result = *(uint64_t *)(v12 + 72);
  v14 = *(_QWORD *)(v12 + 80);
  v15 = *(unsigned __int8 *)(v12 + 88);
  v16 = *(unsigned __int8 *)(v12 + 89);
  if ((v10 & 1) != 0)
  {
    if ((v16 & 1) != 0)
      return result;
    goto LABEL_8;
  }
  if ((v16 & 1) != 0
    || (v7 == result ? (v21 = v8 == v14) : (v21 = 0),
        !v21 ? (v22 = 0) : (v22 = 1),
        ((v9 | v15) & 1) == 0 ? (v23 = v22) : (v23 = v9 & v15),
        (v15 & 1) != 0 || (v23 & 1) == 0))
  {
LABEL_8:
    *(double *)&result = COERCE_DOUBLE(sub_1000EFF9C(result, v14, v15 | (unsigned __int16)(v16 << 8)));
    if ((v19 & 1) == 0)
    {
      v20 = v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_animatedContentOffsetTarget;
      if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_animatedContentOffsetTarget + 16) & 1) != 0
        || (v18 = *(double *)v20, *(double *)v20 != *(double *)&result)
        || (v18 = *(double *)(v20 + 8), v18 != v17))
      {
        *(double *)v20 = *(double *)&result;
        *(double *)(v20 + 8) = v17;
        *(_BYTE *)(v20 + 16) = 0;
        *(double *)&result = COERCE_DOUBLE(objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView), "setContentOffset:animated:", 1, *(double *)&result, v17, v18));
      }
    }
  }
  return result;
}

uint64_t sub_1000EFF9C(uint64_t a1, uint64_t a2, __int16 a3)
{
  char v5;
  void *Strong;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  CGSize size;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t result;
  double v20;
  double v21;
  double v22;
  double v23;
  CGFloat v24;
  CGFloat v25;
  CGSize v26;
  uint64_t v27;
  id v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  _QWORD v37[5];
  uint64_t v38;
  CGPoint origin;
  CGSize v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;

  if ((a3 & 0x100) != 0)
    return 0;
  v5 = a3;
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  v7 = Strong;
  if ((v5 & 1) != 0)
  {
    if (Strong)
    {
      v28 = objc_msgSend(Strong, "endOfDocument");
      objc_msgSend(v7, "caretRectForPosition:", v28);
      v30 = v29;
      v32 = v31;
      v34 = v33;
      v36 = v35;

      v43.origin.x = v30;
      v43.origin.y = v32;
      v43.size.width = v34;
      v43.size.height = v36;
      CGRectGetMaxY(v43);
      objc_msgSend(v7, "adjustedContentInset");
      objc_msgSend(v7, "bounds");
      CGRectGetHeight(v44);
      objc_msgSend(v7, "adjustedContentInset");

      return sub_1000D2838();
    }
    return 0;
  }
  if (!Strong)
    return 0;
  v8 = (void *)swift_unknownObjectWeakLoadStrong();
  if (!v8)
  {

    return 0;
  }
  v9 = v8;
  v10 = objc_msgSend(v8, "textLayoutManager");
  if (!v10)
  {

    return 0;
  }
  v11 = v10;
  v12 = sub_1000A8CFC(a1, a2);
  if (!v12)
  {

    return 0;
  }
  v13 = v12;
  size = CGRectZero.size;
  origin = CGRectZero.origin;
  v40 = size;
  sub_1000D2AF8(v12);
  v15 = swift_allocObject(&unk_1001B1D18, 24, 7);
  *(_QWORD *)(v15 + 16) = &origin;
  v16 = swift_allocObject(&unk_1001B1D40, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_1000F1C38;
  *(_QWORD *)(v16 + 24) = v15;
  v37[4] = sub_1000F1C50;
  v38 = v16;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 1107296256;
  v37[2] = sub_1000EDB44;
  v37[3] = &unk_1001B1D58;
  v17 = _Block_copy(v37);
  v18 = v38;
  swift_retain(v16);
  swift_release(v18);
  objc_msgSend(v11, "enumerateTextSegmentsInRange:type:options:usingBlock:", v13, 1, 3, v17);
  _Block_release(v17);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation(v16, "", 148, 65, 138, 1);
  result = ((uint64_t (*)(uint64_t))swift_release)(v16);
  if ((v17 & 1) == 0)
  {
    objc_msgSend(v9, "textContainerInset");
    v21 = v20;
    v23 = v22;

    v24 = v23 + origin.x;
    v25 = v21 + origin.y;
    origin.x = v24;
    origin.y = v25;
    v26 = v40;
    swift_release(v15);
    v41.origin.x = v24;
    v41.origin.y = v25;
    v41.size = v26;
    CGRectGetMinY(v41);
    objc_msgSend(v7, "bounds");
    CGRectGetHeight(v42);
    v27 = sub_1000D2838();

    return v27;
  }
  __break(1u);
  return result;
}

id sub_1000F0300()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  void *v3;
  void *Strong;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  _BOOL8 v10;
  _BYTE v12[24];
  CGRect v13;

  v1 = v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel;
  swift_beginAccess(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel, v12, 0, 0);
  v2 = *(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for TranscriptViewModel(0) + 48));
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_topFadeView);
  if (v2 != 1)
  {
    objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_topFadeView), "setHidden:", 1);
    return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_bottomFadeView), "setHidden:", 1);
  }
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_layoutHelper);
  if (!Strong)
    goto LABEL_7;
  v5 = Strong;
  objc_msgSend(Strong, "bounds");
  if (CGRectGetHeight(v13) <= 0.0)
  {

LABEL_7:
    v10 = 0;
    goto LABEL_8;
  }
  objc_msgSend(v5, "contentOffset");
  v7 = v6;
  objc_msgSend(v5, "adjustedContentInset");
  v9 = v8;

  v10 = v7 <= v9;
LABEL_8:
  objc_msgSend(v3, "setHidden:", v10);
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_bottomFadeView), "setHidden:", sub_1000D29A4() & 1);
}

id sub_1000F0448(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  id result;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  void (*v31)(_BYTE *, uint64_t);
  _BYTE *v32;
  void *v33;
  _BYTE *v34;
  void *v35;
  void *v36;
  _QWORD *v37;
  _BYTE v38[4];
  int v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  char *v44;
  _QWORD v45[5];
  char v46[24];

  v3 = type metadata accessor for UIContentUnavailableConfiguration(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v41 = &v38[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v40 = &v38[-v7];
  v8 = sub_100014E10(&qword_1001EC578);
  __chkstk_darwin(v8);
  v10 = &v38[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100014E10(&qword_1001EC580);
  __chkstk_darwin(v11);
  v13 = &v38[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_100014E10(&qword_1001EC588);
  v15 = __chkstk_darwin(v14);
  v43 = &v38[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v15);
  v42 = &v38[-v18];
  __chkstk_darwin(v17);
  v20 = &v38[-v19];
  sub_1000F1D54(a1, (uint64_t)v13, &qword_1001EC580);
  v21 = type metadata accessor for TranscriptViewModel(0);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v13, 1, v21) == 1)
  {
    sub_100005440((uint64_t)v13, &qword_1001EC580);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v20, 1, 1, v3);
  }
  else
  {
    sub_1000F1D54((uint64_t)&v13[*(int *)(v21 + 40)], (uint64_t)v20, &qword_1001EC588);
    sub_1000AD368((uint64_t)v13);
  }
  v44 = v1;
  v22 = &v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel];
  swift_beginAccess(&v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel], v46, 0, 0);
  v23 = (uint64_t)&v22[*(int *)(v21 + 40)];
  v24 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_1000F1D54((uint64_t)v20, (uint64_t)v10, &qword_1001EC588);
  sub_1000F1D54(v23, v24, &qword_1001EC588);
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v25((uint64_t)v10, 1, v3) == 1)
  {
    sub_100005440((uint64_t)v20, &qword_1001EC588);
    if (v25(v24, 1, v3) == 1)
      return (id)sub_100005440((uint64_t)v10, &qword_1001EC588);
  }
  else
  {
    v27 = v42;
    sub_1000F1D54((uint64_t)v10, (uint64_t)v42, &qword_1001EC588);
    if (v25(v24, 1, v3) != 1)
    {
      v28 = v40;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 32))(v40, v24, v3);
      v29 = sub_10001B7CC(&qword_1001EC590, (uint64_t (*)(uint64_t))&type metadata accessor for UIContentUnavailableConfiguration, (uint64_t)&protocol conformance descriptor for UIContentUnavailableConfiguration);
      v30 = v27;
      v39 = dispatch thunk of static Equatable.== infix(_:_:)(v27, v28, v3, v29);
      v31 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
      v31(v28, v3);
      sub_100005440((uint64_t)v20, &qword_1001EC588);
      v31(v30, v3);
      result = (id)sub_100005440((uint64_t)v10, &qword_1001EC588);
      if ((v39 & 1) != 0)
        return result;
      goto LABEL_11;
    }
    sub_100005440((uint64_t)v20, &qword_1001EC588);
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v27, v3);
  }
  sub_100005440((uint64_t)v10, &qword_1001EC578);
LABEL_11:
  v32 = v43;
  sub_1000F1D54((uint64_t)&v22[*(int *)(v21 + 40)], (uint64_t)v43, &qword_1001EC588);
  if (v25((uint64_t)v32, 1, v3) == 1)
  {
    sub_100005440((uint64_t)v32, &qword_1001EC588);
    v33 = v44;
    objc_msgSend(*(id *)&v44[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_emptyStateView], "setHidden:", 1);
    return objc_msgSend(v33, "setUserInteractionEnabled:", 1);
  }
  else
  {
    v34 = v41;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 32))(v41, v32, v3);
    v35 = v44;
    v36 = *(void **)&v44[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_emptyStateView];
    v45[3] = v3;
    v45[4] = &protocol witness table for UIContentUnavailableConfiguration;
    v37 = sub_1000ADAF4(v45);
    (*(void (**)(_QWORD *, _BYTE *, uint64_t))(v4 + 16))(v37, v34, v3);
    UIContentUnavailableView.configuration.setter(v45);
    objc_msgSend(v36, "setHidden:", 0);
    objc_msgSend(v35, "setUserInteractionEnabled:", 0);
    return (id)(*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v34, v3);
  }
}

void sub_1000F0A88(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  id v8;
  id v9;

  v8 = a3;
  swift_unknownObjectRetain(a4);
  v9 = a1;
  a5();

  swift_unknownObjectRelease(a4);
}

uint64_t sub_1000F0AEC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;

  v2 = v1;
  v3 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewTapGestureRecognizer);
  if (!v3)
    return 1;
  sub_100005310(0, &qword_1001EC568, UIGestureRecognizer_ptr);
  v5 = v3;
  v6 = a1;
  LOBYTE(a1) = static NSObject.== infix(_:_:)(v6, v5);

  if ((a1 & 1) == 0)
    return 1;
  v7 = *(void **)(v2 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView);
  objc_msgSend(v7, "selectedRange");
  if (!v8)
    return 1;
  v9 = objc_msgSend(v7, "findInteraction");
  if (!v9)
    return 0;
  v10 = v9;
  v11 = objc_msgSend(v9, "isFindNavigatorVisible");

  return (uint64_t)v11;
}

BOOL sub_1000F0C28(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v7;
  id v8;
  id v9;
  char v10;

  v3 = v2;
  v4 = *(void **)(v2 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewPanGestureRecognizer);
  if (!v4)
    return 0;
  sub_100005310(0, &qword_1001EC568, UIGestureRecognizer_ptr);
  v7 = v4;
  v8 = a1;
  LOBYTE(a1) = static NSObject.== infix(_:_:)(v8, v7);

  if ((a1 & 1) == 0)
    return 0;
  sub_100005310(0, (unint64_t *)&qword_1001EC570, NSObject_ptr);
  v9 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView), "panGestureRecognizer");
  v10 = static NSObject.== infix(_:_:)(a2, v9);

  return (v10 & 1) != 0;
}

id sub_1000F0D78(uint64_t a1, uint64_t a2)
{
  char *v2;
  void *v5;
  id result;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  objc_class *v26;
  objc_super v27;
  _QWORD v28[3];
  uint64_t v29;

  if ((static Selector.== infix(_:_:)(a1, "selectAll:") & 1) == 0)
  {
    sub_1000F1D54(a2, (uint64_t)v28, &qword_1001EA0E0);
    v20 = v29;
    if (v29)
    {
      v21 = sub_10001B474(v28, v29);
      v22 = *(_QWORD *)(v20 - 8);
      __chkstk_darwin(v21);
      v24 = (char *)&v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v22 + 16))(v24);
      v25 = _bridgeAnythingToObjectiveC<A>(_:)(v24, v20);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v20);
      sub_10001B498(v28);
    }
    else
    {
      v25 = 0;
    }
    v26 = (objc_class *)type metadata accessor for TranscriptView(0);
    v27.receiver = v2;
    v27.super_class = v26;
    v19 = objc_msgSendSuper2(&v27, "canPerformAction:withSender:", a1, v25);
    swift_unknownObjectRelease(v25);
    return v19;
  }
  v5 = *(void **)&v2[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView];
  result = objc_msgSend(v5, "text");
  if (result)
  {
    v7 = result;
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v10 = v9;

    swift_bridgeObjectRelease(v10);
    objc_msgSend(v5, "selectedRange");
    v12 = v11;
    result = objc_msgSend(v5, "text");
    if (result)
    {
      v13 = result;
      if ((v10 & 0x2000000000000000) != 0)
        v14 = HIBYTE(v10) & 0xF;
      else
        v14 = v8 & 0xFFFFFFFFFFFFLL;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v17 = v16;

      v18 = String.count.getter(v15, v17);
      swift_bridgeObjectRelease(v17);
      if (v14)
        return (id)(v12 != v18);
      else
        return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F0FF4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView);
  sub_1000F1D54(a1, (uint64_t)v10, &qword_1001EA0E0);
  v3 = v11;
  if (v11)
  {
    v4 = sub_10001B474(v10, v11);
    v5 = *(_QWORD *)(v3 - 8);
    __chkstk_darwin(v4);
    v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v5 + 16))(v7);
    v8 = _bridgeAnythingToObjectiveC<A>(_:)(v7, v3);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
    sub_10001B498(v10);
  }
  else
  {
    v8 = 0;
  }
  objc_msgSend(v2, "selectAll:", v8);
  return swift_unknownObjectRelease(v8);
}

void sub_1000F116C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _swift_stdlib_reportUnimplementedInitializer(a3, a4, "init(frame:)", 12, 0);
  __break(1u);
}

id sub_1000F1194()
{
  return sub_1000F11A4(0, (uint64_t (*)(void))type metadata accessor for TranscriptView);
}

id sub_1000F11A4(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_1000F12CC()
{
  return type metadata accessor for TranscriptView(0);
}

uint64_t type metadata accessor for TranscriptView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001EC4F8;
  if (!qword_1001EC4F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TranscriptView);
  return result;
}

uint64_t sub_1000F1310(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[15];

  result = type metadata accessor for TranscriptViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = &unk_10018C868;
    v4[6] = &unk_10018C880;
    v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[9] = &unk_10018C898;
    v4[10] = &unk_10018C898;
    v4[11] = &unk_10018C898;
    v4[12] = &unk_10018C898;
    v4[13] = &unk_10018C8B0;
    v4[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
    return swift_updateClassMetadata2(a1, 256, 15, v4, a1 + 80);
  }
  return result;
}

uint64_t type metadata accessor for TranscriptView.TranscriptTextView()
{
  return objc_opt_self(_TtCC10VoiceMemos14TranscriptView18TranscriptTextView);
}

uint64_t type metadata accessor for TranscriptView.FadeView()
{
  return objc_opt_self(_TtCC10VoiceMemos14TranscriptViewP33_6FF8C368E5F76B04FE059DBB2DCAB8DB8FadeView);
}

id sub_1000F1414(char a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  char **v7;
  char **v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  Class isa;

  v2 = objc_msgSend(objc_allocWithZone((Class)CAGradientLayer), "init");
  v3 = sub_100014E10((uint64_t *)&unk_1001EC5E0);
  v4 = swift_allocObject(v3, 96, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100187B90;
  v5 = (void *)objc_opt_self(UIColor);
  v6 = v5;
  if ((a1 & 1) != 0)
    v7 = &selRef_clearColor;
  else
    v7 = &selRef_whiteColor;
  if ((a1 & 1) != 0)
    v8 = &selRef_whiteColor;
  else
    v8 = &selRef_clearColor;
  v9 = objc_msgSend(v5, *v7);
  v10 = objc_msgSend(v9, "CGColor");

  type metadata accessor for CGColor(0);
  v12 = v11;
  *(_QWORD *)(v4 + 56) = v11;
  *(_QWORD *)(v4 + 32) = v10;
  v13 = objc_msgSend(v6, *v8);
  v14 = objc_msgSend(v13, "CGColor");

  *(_QWORD *)(v4 + 88) = v12;
  *(_QWORD *)(v4 + 64) = v14;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v2, "setColors:", isa);

  return v2;
}

char *sub_1000F1570(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  objc_class *v21;
  id v22;
  uint64_t v23;
  id v24;
  char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  objc_class *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37[24];
  objc_super v38;

  v36 = a1;
  v4 = type metadata accessor for TranscriptViewModel(0);
  v35 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100014E10(&qword_1001EC580);
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UIContentUnavailableConfiguration(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView;
  v14 = type metadata accessor for TranscriptView.TranscriptTextView();
  v15 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v14));
  v16 = v2;
  v17 = objc_msgSend(v15, "init");
  *(_QWORD *)&v2[v13] = v17;
  v18 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_searchButton;
  *(_QWORD *)&v16[v18] = objc_msgSend(objc_allocWithZone((Class)UIButton), "init");
  v19 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_emptyStateView;
  sub_100005310(0, &qword_1001EC5D8, UIContentUnavailableView_ptr);
  static UIContentUnavailableConfiguration.empty()();
  *(_QWORD *)&v16[v19] = UIContentUnavailableView.init(configuration:)(v12);
  v20 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_topFadeView;
  v21 = (objc_class *)type metadata accessor for TranscriptView.FadeView();
  v22 = objc_allocWithZone(v21);
  *(_QWORD *)&v16[v20] = sub_1000EDDC8(0);
  v23 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_bottomFadeView;
  v24 = objc_allocWithZone(v21);
  *(_QWORD *)&v16[v23] = sub_1000EDDC8(1);
  *(_QWORD *)&v16[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToLayoutMarginsBottomAnchorConstraint] = 0;
  *(_QWORD *)&v16[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToSearchTopAnchorConstraint] = 0;
  *(_QWORD *)&v16[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewTapGestureRecognizer] = 0;
  *(_QWORD *)&v16[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewPanGestureRecognizer] = 0;
  v25 = &v16[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_animatedContentOffsetTarget];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v25[16] = 1;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v26 = v4;
    v27 = (void *)sub_1000FA734((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v26 = v4;
    v27 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)&v16[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_cancellables] = v27;
  v28 = v36;
  sub_1000AD1A0(v36, (uint64_t)&v16[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel]);
  v29 = &v16[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller];
  *((_QWORD *)v29 + 3) = type metadata accessor for TranscriptViewController();
  *((_QWORD *)v29 + 4) = &off_1001B2080;
  *(_QWORD *)v29 = a2;
  swift_unknownObjectWeakInit(&v16[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_layoutHelper], v17);
  *(_BYTE *)(swift_unknownObjectWeakInit(&v16[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textUpdateHelper], v17) + 8) = 1;
  swift_retain(a2);

  v30 = (objc_class *)type metadata accessor for TranscriptView(0);
  v38.receiver = v16;
  v38.super_class = v30;
  v31 = (char *)objc_msgSendSuper2(&v38, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  sub_1000EE9C0();
  sub_1000EF3A0();
  sub_1000EF628();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v9, 1, 1, v26);
  sub_1000F0448((uint64_t)v9);
  v32 = (uint64_t)&v31[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel];
  swift_beginAccess(&v31[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel], v37, 0, 0);
  sub_1000AD1A0(v32, (uint64_t)v6);
  sub_1000CF130((uint64_t)v9, v6);
  sub_1000AD368((uint64_t)v6);
  sub_1000EFA64((uint64_t)v9);
  sub_1000EFDF0((uint64_t)v9);
  sub_1000EFC9C();
  sub_1000F0300();

  sub_1000AD368(v28);
  sub_100005440((uint64_t)v9, &qword_1001EC580);
  return v31;
}

uint64_t sub_1000F1934()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const mach_header_64 *v19;

  result = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtCC10VoiceMemos14TranscriptView18TranscriptTextView_findInteractionObserver);
  if (result)
  {
    v2 = result;
    v3 = sub_10001B474((_QWORD *)(result + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller), *(_QWORD *)(result + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller + 24));
    Strong = swift_unknownObjectWeakLoadStrong(*v3 + 72);
    if (Strong)
    {
      v5 = Strong;
      v6 = *(_QWORD *)(Strong + 40);
      v7 = *(unsigned __int8 *)(Strong + 48);
      v8 = *(unsigned __int8 *)(Strong + 49);
      v9 = *(unsigned __int8 *)(Strong + 50);
      v10 = *(unsigned __int8 *)(Strong + 51);
      v11 = *(unsigned __int8 *)(Strong + 52);
      v12 = *(double *)(Strong + 56);
      *(_BYTE *)(Strong + 49) = v8;
      *(_BYTE *)(Strong + 50) = v9;
      *(_BYTE *)(Strong + 51) = 1;
      *(_BYTE *)(Strong + 52) = v11;
      v13 = *(unsigned __int16 *)(Strong + 32);
      sub_1000BED80(v6, v7);
      sub_1000BED80(v6, v7);
      sub_1000BED80(v6, v7);
      sub_1000BED94(v6, v7);
      v14 = 256;
      if (!v8)
        v14 = 0;
      v15 = v14 | v7;
      v16 = 0x10000;
      if (!v9)
        v16 = 0;
      v17 = 0x1000000;
      if (!v10)
        v17 = 0;
      v18 = v15 | v16 | v17;
      v19 = &_mh_execute_header;
      if (!v11)
        v19 = 0;
      sub_1000C3168(v13, v6, v18 | (unint64_t)v19, v12);
      sub_1000BED94(v6, v7);
      sub_1000BED94(v6, v7);
      swift_unknownObjectRelease(v2);
      v2 = v5;
    }
    return swift_unknownObjectRelease(v2);
  }
  return result;
}

uint64_t sub_1000F1AB0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const mach_header_64 *v19;

  result = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtCC10VoiceMemos14TranscriptView18TranscriptTextView_findInteractionObserver);
  if (result)
  {
    v2 = result;
    v3 = sub_10001B474((_QWORD *)(result + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller), *(_QWORD *)(result + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller + 24));
    Strong = swift_unknownObjectWeakLoadStrong(*v3 + 72);
    if (Strong)
    {
      v5 = Strong;
      v6 = *(_QWORD *)(Strong + 40);
      v7 = *(unsigned __int8 *)(Strong + 48);
      v8 = *(unsigned __int8 *)(Strong + 49);
      v9 = *(unsigned __int8 *)(Strong + 50);
      v10 = *(unsigned __int8 *)(Strong + 51);
      v11 = *(unsigned __int8 *)(Strong + 52);
      v12 = *(double *)(Strong + 56);
      *(_BYTE *)(Strong + 49) = v8;
      *(_WORD *)(Strong + 50) = v9;
      *(_BYTE *)(Strong + 52) = v11;
      v13 = *(unsigned __int16 *)(Strong + 32);
      sub_1000BED80(v6, v7);
      sub_1000BED80(v6, v7);
      sub_1000BED80(v6, v7);
      sub_1000BED94(v6, v7);
      v14 = 256;
      if (!v8)
        v14 = 0;
      v15 = v14 | v7;
      v16 = 0x10000;
      if (!v9)
        v16 = 0;
      v17 = 0x1000000;
      if (!v10)
        v17 = 0;
      v18 = v15 | v16 | v17;
      v19 = &_mh_execute_header;
      if (!v11)
        v19 = 0;
      sub_1000C3168(v13, v6, v18 | (unint64_t)v19, v12);
      sub_1000BED94(v6, v7);
      sub_1000BED94(v6, v7);
      swift_unknownObjectRelease(v2);
      v2 = v5;
    }
    return swift_unknownObjectRelease(v2);
  }
  return result;
}

uint64_t sub_1000F1C28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F1C38(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v6;

  return sub_1000D2CF4(a3, a4, a5, a6, a1, a2, *(CGRect **)(v6 + 16));
}

uint64_t sub_1000F1C40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F1C50()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_1000F1C74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000F1C84(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000F1C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EC598);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F1CD4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000F1CF8(uint64_t a1)
{
  uint64_t v1;

  sub_1000EF5D0(a1, v1);
}

uint64_t sub_1000F1D10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TranscriptViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F1D54(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100014E10(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1000F1D98()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  id v11;
  uint64_t v12;
  id v13;
  char *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for UIContentUnavailableConfiguration(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textView;
  v6 = type metadata accessor for TranscriptView.TranscriptTextView();
  *(_QWORD *)&v1[v5] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v6)), "init");
  v7 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_searchButton;
  *(_QWORD *)&v1[v7] = objc_msgSend(objc_allocWithZone((Class)UIButton), "init");
  v8 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_emptyStateView;
  sub_100005310(0, &qword_1001EC5D8, UIContentUnavailableView_ptr);
  static UIContentUnavailableConfiguration.empty()();
  *(_QWORD *)&v1[v8] = UIContentUnavailableView.init(configuration:)(v4);
  v9 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_topFadeView;
  v10 = (objc_class *)type metadata accessor for TranscriptView.FadeView();
  v11 = objc_allocWithZone(v10);
  *(_QWORD *)&v1[v9] = sub_1000EDDC8(0);
  v12 = OBJC_IVAR____TtC10VoiceMemos14TranscriptView_bottomFadeView;
  v13 = objc_allocWithZone(v10);
  *(_QWORD *)&v1[v12] = sub_1000EDDC8(1);
  *(_QWORD *)&v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToLayoutMarginsBottomAnchorConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textBottomAnchorToSearchTopAnchorConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewTapGestureRecognizer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_textViewPanGestureRecognizer] = 0;
  v14 = &v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_animatedContentOffsetTarget];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 1;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v15 = (void *)sub_1000FA734((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v15 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)&v1[OBJC_IVAR____TtC10VoiceMemos14TranscriptView_cancellables] = v15;

  v16 = 0;
  v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(v17);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100182210, "VoiceMemos/SwiftHelpers.swift", 29, 2, 12, 0);
  __break(1u);
}

uint64_t sub_1000F1FAC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const mach_header_64 *v17;

  v1 = sub_10001B474((_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller), *(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller + 24));
  result = swift_unknownObjectWeakLoadStrong(*v1 + 72);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 40);
    v5 = *(unsigned __int8 *)(result + 48);
    v6 = *(unsigned __int8 *)(result + 49);
    v7 = *(unsigned __int8 *)(result + 50);
    v8 = *(unsigned __int8 *)(result + 51);
    v9 = *(unsigned __int8 *)(result + 52);
    v10 = *(double *)(result + 56);
    *(_BYTE *)(result + 49) = 0;
    *(_BYTE *)(result + 50) = v7;
    *(_BYTE *)(result + 51) = v8;
    *(_BYTE *)(result + 52) = v9;
    v11 = *(unsigned __int16 *)(result + 32);
    sub_1000BED80(v4, v5);
    sub_1000BED80(v4, v5);
    sub_1000BED80(v4, v5);
    sub_1000BED94(v4, v5);
    v12 = 256;
    if (!v6)
      v12 = 0;
    v13 = v12 | v5;
    v14 = 0x10000;
    if (!v7)
      v14 = 0;
    v15 = 0x1000000;
    if (!v8)
      v15 = 0;
    v16 = v13 | v14 | v15;
    v17 = &_mh_execute_header;
    if (!v9)
      v17 = 0;
    sub_1000C3168(v11, v4, v16 | (unint64_t)v17, v10);
    sub_1000BED94(v4, v5);
    sub_1000BED94(v4, v5);
    return swift_unknownObjectRelease(v3);
  }
  return result;
}

uint64_t sub_1000F20F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const mach_header_64 *v17;

  v1 = sub_10001B474((_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller), *(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller + 24));
  result = swift_unknownObjectWeakLoadStrong(*v1 + 72);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 40);
    v5 = *(unsigned __int8 *)(result + 48);
    v6 = *(unsigned __int8 *)(result + 49);
    v7 = *(unsigned __int8 *)(result + 50);
    v8 = *(unsigned __int8 *)(result + 51);
    v9 = *(unsigned __int8 *)(result + 52);
    v10 = *(double *)(result + 56);
    *(_BYTE *)(result + 49) = v6;
    *(_BYTE *)(result + 50) = 1;
    *(_BYTE *)(result + 51) = v8;
    *(_BYTE *)(result + 52) = v9;
    v11 = *(unsigned __int16 *)(result + 32);
    sub_1000BED80(v4, v5);
    sub_1000BED80(v4, v5);
    sub_1000BED80(v4, v5);
    sub_1000BED94(v4, v5);
    v12 = 256;
    if (!v6)
      v12 = 0;
    v13 = v12 | v5;
    v14 = 0x10000;
    if (!v7)
      v14 = 0;
    v15 = 0x1000000;
    if (!v8)
      v15 = 0;
    v16 = v13 | v14 | v15;
    v17 = &_mh_execute_header;
    if (!v9)
      v17 = 0;
    sub_1000C3168(v11, v4, v16 | (unint64_t)v17, v10);
    sub_1000BED94(v4, v5);
    sub_1000BED94(v4, v5);
    return swift_unknownObjectRelease(v3);
  }
  return result;
}

uint64_t sub_1000F2240()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const mach_header_64 *v17;

  v1 = sub_10001B474((_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller), *(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_controller + 24));
  result = swift_unknownObjectWeakLoadStrong(*v1 + 72);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 40);
    v5 = *(unsigned __int8 *)(result + 48);
    v6 = *(unsigned __int8 *)(result + 49);
    v7 = *(unsigned __int8 *)(result + 50);
    v8 = *(unsigned __int8 *)(result + 51);
    v9 = *(unsigned __int8 *)(result + 52);
    v10 = *(double *)(result + 56);
    *(_WORD *)(result + 49) = v6;
    *(_BYTE *)(result + 51) = v8;
    *(_BYTE *)(result + 52) = v9;
    v11 = *(unsigned __int16 *)(result + 32);
    sub_1000BED80(v4, v5);
    sub_1000BED80(v4, v5);
    sub_1000BED80(v4, v5);
    sub_1000BED94(v4, v5);
    v12 = 256;
    if (!v6)
      v12 = 0;
    v13 = v12 | v5;
    v14 = 0x10000;
    if (!v7)
      v14 = 0;
    v15 = 0x1000000;
    if (!v8)
      v15 = 0;
    v16 = v13 | v14 | v15;
    v17 = &_mh_execute_header;
    if (!v9)
      v17 = 0;
    sub_1000C3168(v11, v4, v16 | (unint64_t)v17, v10);
    sub_1000BED94(v4, v5);
    sub_1000BED94(v4, v5);
    return swift_unknownObjectRelease(v3);
  }
  return result;
}

uint64_t sub_1000F2388(uint64_t a1)
{
  destroy for TranscriptViewLayoutHelper();
  return a1;
}

uint64_t sub_1000F23BC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  double v33;
  double v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  id v71;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  int v80;
  uint64_t v81;
  id v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  id v89;
  uint64_t *v90;
  int v91;
  int v92;
  _QWORD *v93;
  int v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  char v98[24];
  _BYTE v99[40];
  char v100[8];
  char v101[8];
  uint64_t v102;
  uint64_t v103;
  char v104;
  char v105[8];
  uint64_t v106;
  uint64_t v107;
  char v108;
  _QWORD v109[4];
  char v110;

  v85 = type metadata accessor for TranscriptViewModel(0);
  v1 = __chkstk_darwin(v85);
  v86 = (uint64_t)&v73 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v79 = (char *)&v73 - v3;
  v4 = sub_100014E10(&qword_1001EC588);
  __chkstk_darwin(v4);
  v96 = (uint64_t)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001B474(v0 + 2, v0[5]);
  v7 = *v6;
  v8 = *(_QWORD **)(*v6 + 32);
  v9 = *(_QWORD *)(*v6 + 40);
  v10 = *(_QWORD **)(*v6 + 48);
  v11 = *(unsigned __int8 *)(*v6 + 56);
  v88 = *(_QWORD *)(*v6 + 64);
  v94 = *(unsigned __int8 *)(v7 + 72);
  v80 = *(unsigned __int8 *)(v7 + 73);
  v12 = *(_QWORD *)(v7 + 88);
  v89 = *(id *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 96);
  v14 = *(_QWORD *)(v7 + 104);
  v15 = *(unsigned __int8 *)(v7 + 112);
  v83 = *(unsigned __int8 *)(v7 + 113);
  v84 = *(unsigned __int8 *)(v7 + 114);
  v82 = *(id *)(v7 + 120);
  LODWORD(v81) = *(unsigned __int8 *)(v7 + 128);
  v90 = v0;
  v16 = v0[10];
  v97 = v0 + 7;
  v17 = *(void **)(*sub_10001B474(v0 + 7, v16) + 56);
  v87 = v10;
  v93 = (_QWORD *)v9;
  v92 = v11;
  v95 = v8;
  v74 = v12;
  v91 = v15;
  swift_bridgeObjectRetain(v8);
  sub_1000A5448(v9, (uint64_t)v10, v11);
  v18 = v12;
  v19 = v13;
  v20 = v14;
  sub_1000A5488((uint64_t)v89, v18, v13, v14, v15);
  if (v17)
  {
    objc_msgSend(v17, "currentTime");
    v22 = v21;
  }
  else
  {
    v22 = 0.0;
  }
  v23 = v90;
  v24 = v90[13];
  v25 = v97;
  v26 = sub_10001B474(v97, v90[10]);
  v27 = *(_QWORD *)(*v26 + 64);
  v28 = *(_QWORD *)(*v26 + 72);
  swift_bridgeObjectRetain(v28);
  v29 = sub_1000F2FE0((uint64_t)v82, v81, v24, 0, v27, v28, v22);
  v81 = v30;
  swift_bridgeObjectRelease(v28);
  v31 = *(_QWORD *)(*sub_10001B474(v25, v23[10]) + 80);
  v32 = *(void **)(*sub_10001B474(v25, v23[10]) + 56);
  if (v32)
  {
    objc_msgSend(v32, "currentTime", swift_bridgeObjectRetain(v31).n128_f64[0]);
    v34 = v33;
  }
  else
  {
    swift_bridgeObjectRetain(v31);
    v34 = 0.0;
  }
  v35 = v95;
  v36 = sub_10001B474(v97, v23[10]);
  v37 = v93;
  v82 = v29;
  if (v92 == 255)
    goto LABEL_10;
  if ((v92 & 1) != 0)
  {
    v38 = *(_QWORD *)(*v36 + 64);
    v39 = *(_QWORD *)(*v36 + 72);
    swift_bridgeObjectRetain(v39);
    v73 = (_QWORD *)sub_1000F3270(v38, v39, v29 != 0, v35, v37, v87);
    swift_bridgeObjectRelease(v39);
  }
  else
  {
    sub_1000F31A4(v31, (uint64_t)v99, v34);
    sub_1000F322C((uint64_t)v99, (uint64_t)v105, &qword_1001EC598);
    if ((v108 & 1) != 0)
    {
LABEL_10:
      swift_bridgeObjectRelease(v31);
      v73 = _swiftEmptyArrayStorage;
      goto LABEL_14;
    }
    v40 = v106;
    v41 = v107;
    v42 = sub_100014E10(&qword_1001EB000);
    v43 = swift_allocObject(v42, 56, 7);
    *(_OWORD *)(v43 + 16) = xmmword_100188080;
    *(_QWORD *)(v43 + 32) = v40;
    *(_QWORD *)(v43 + 40) = v41;
    v73 = (_QWORD *)v43;
    *(_QWORD *)(v43 + 48) = v37;
    swift_bridgeObjectRetain(v37);
  }
  swift_bridgeObjectRelease(v31);
LABEL_14:
  v44 = v74;
  v45 = v20;
  v46 = (uint64_t)v79;
  if ((v94 & 1) != 0)
  {
    v79 = 0;
    v78 = 0;
    v88 = 0;
  }
  else
  {
    if (qword_1001E9060 != -1)
      swift_once(&qword_1001E9060, sub_1000EDF74);
    v79 = (char *)xmmword_1001F6E20;
    v78 = qword_1001F6E30;
  }
  v47 = v97;
  v48 = *(_QWORD *)(*sub_10001B474(v97, v23[10]) + 80);
  v49 = *(void **)(*sub_10001B474(v47, v23[10]) + 56);
  if (v49)
  {
    objc_msgSend(v49, "currentTime", swift_bridgeObjectRetain(v48).n128_f64[0]);
  }
  else
  {
    swift_bridgeObjectRetain(v48);
    v50 = 0.0;
  }
  if (v80 == 2)
  {
    v51 = (uint64_t)v89;
    swift_bridgeObjectRelease(v48);
LABEL_26:
    v77 = 0;
    v75 = 0;
    v76 = 0;
    v80 = 1;
    goto LABEL_29;
  }
  if ((v80 & 1) != 0)
  {
    v51 = (uint64_t)v89;
    swift_bridgeObjectRelease(v48);
    v77 = 0;
    v75 = 0;
    v80 = 0;
    v76 = 1;
  }
  else
  {
    v51 = (uint64_t)v89;
    sub_1000F31A4(v48, (uint64_t)v100, v50);
    swift_bridgeObjectRelease(v48);
    sub_1000F322C((uint64_t)v100, (uint64_t)v101, &qword_1001EC598);
    if ((v104 & 1) != 0)
      goto LABEL_26;
    v76 = 0;
    v80 = 0;
    v77 = v102;
    v75 = v103;
  }
LABEL_29:
  v109[0] = v51;
  v109[1] = v44;
  v109[2] = v19;
  v109[3] = v20;
  v110 = v91;
  v52 = v96;
  sub_1000F2D7C((uint64_t)v109, v96);
  v53 = v90;
  v54 = sub_10001B474(v97, v90[10]);
  v55 = v44;
  v56 = v45;
  v57 = *(_QWORD *)(*v54 + 64);
  v58 = *(_QWORD *)(*v54 + 72);
  v59 = v85;
  sub_1000F311C(v52, v46 + *(int *)(v85 + 40));
  v60 = v82;
  v89 = v82;
  swift_bridgeObjectRetain(v58);
  sub_1000A5550((uint64_t)v93, (uint64_t)v87, v92);
  sub_1000A55A0(v51, v55, v19, v56, v91);
  *(_QWORD *)v46 = v57;
  *(_QWORD *)(v46 + 8) = v58;
  v61 = v73;
  *(_QWORD *)(v46 + 16) = v95;
  *(_QWORD *)(v46 + 24) = v61;
  v62 = v88;
  *(_QWORD *)(v46 + 32) = v79;
  *(_QWORD *)(v46 + 40) = v62;
  *(_QWORD *)(v46 + 48) = v78;
  *(_QWORD *)(v46 + 56) = v62;
  *(_BYTE *)(v46 + 64) = v94;
  v63 = v75;
  *(_QWORD *)(v46 + 72) = v77;
  *(_QWORD *)(v46 + 80) = v63;
  *(_BYTE *)(v46 + 88) = v76;
  *(_BYTE *)(v46 + 89) = v80;
  v64 = v81;
  *(_QWORD *)(v46 + 96) = v60;
  *(_QWORD *)(v46 + 104) = v64;
  *(_BYTE *)(v46 + *(int *)(v59 + 44)) = v83;
  *(_BYTE *)(v46 + *(int *)(v59 + 48)) = v84;
  v65 = (_QWORD *)(v53[12] + OBJC_IVAR____TtC10VoiceMemos14TranscriptView_viewModel);
  swift_beginAccess(v65, v98, 0, 0);
  v66 = v65[1];
  if ((*v65 != v57 || v66 != v58) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v65, v66, v57, v58, 0) & 1) == 0)
  {
    v67 = *(void **)(*sub_10001B474(v97, v53[10]) + 56);
    if (v67)
      objc_msgSend(v67, "currentTime");
    else
      v68 = 0;
    v53[13] = v68;
  }
  v69 = (void *)v53[12];
  v70 = v86;
  sub_1000AD1A0(v46, v86);
  v71 = v69;
  sub_1000EE08C(v70);

  sub_1000AD368(v46);
  return sub_1000F3164(v96);
}

uint64_t sub_1000F2BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[24];

  v16 = (_QWORD *)(a8 + 16);
  swift_beginAccess(a8 + 16, v35, 0, 0);
  v17 = *(_QWORD *)(a8 + 16);
  if (v17 == 1)
  {
    v33 = a3;
    v34 = a4;
    v31 = a10;
    v32 = a11;
    swift_bridgeObjectRetain(a11);
    v24 = sub_100014E10(&qword_1001EC7D0);
    v25 = sub_1000F367C();
    v26 = sub_1000A3A18();
    v27 = _NSRange.init<A, B>(_:in:)(&v33, &v31, v24, &type metadata for String, v25, v26);
    v29 = v28;
    swift_beginAccess(a12 + 16, &v31, 1, 0);
    *(_QWORD *)(a12 + 16) = v27;
    *(_QWORD *)(a12 + 24) = v29;
    *(_BYTE *)(a12 + 32) = 0;
    *a7 = 1;
  }
  else if (!v17)
  {
    v33 = a3;
    v34 = a4;
    v31 = a10;
    v32 = a11;
    swift_bridgeObjectRetain(a11);
    v18 = sub_100014E10(&qword_1001EC7D0);
    v19 = sub_1000F367C();
    v20 = sub_1000A3A18();
    v21 = _NSRange.init<A, B>(_:in:)(&v33, &v31, v18, &type metadata for String, v19, v20);
    v23 = v22;
    swift_beginAccess(a9 + 16, &v31, 1, 0);
    *(_QWORD *)(a9 + 16) = v21;
    *(_QWORD *)(a9 + 24) = v23;
    *(_BYTE *)(a9 + 32) = 0;
  }
  result = swift_beginAccess(v16, &v33, 1, 0);
  if (__OFADD__(*v16, 1))
    __break(1u);
  else
    ++*v16;
  return result;
}

uint64_t sub_1000F2D7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD v25[4];
  char v26;
  _BYTE v27[40];
  _BYTE v28[40];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v24 = a2;
  sub_1000F322C(a1, (uint64_t)v25, &qword_1001EC7C8);
  v3 = v25[0];
  v4 = v25[1];
  v5 = v25[2];
  v6 = v25[3];
  v7 = v26;
  v8 = type metadata accessor for UIContentUnavailableConfiguration(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000F322C(a1, (uint64_t)v27, &qword_1001EC7C8);
  if (v27[32] == 255)
  {
    v20 = 1;
    v19 = v24;
  }
  else
  {
    sub_1000F2FA4((uint64_t)v27, (uint64_t)v28);
    sub_1000F2FA4((uint64_t)v28, (uint64_t)&v29);
    v12 = v29;
    if ((v33 & 1) != 0)
    {
      v13 = v30;
      v14 = v31;
      v15 = v32;
      swift_bridgeObjectRetain(v32);
      v16 = swift_bridgeObjectRetain(v13);
      static UIContentUnavailableConfiguration.empty()(v16);
      UIContentUnavailableConfiguration.secondaryText.setter(v14, v15);
      if (v13)
      {
        v17 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v13);
        v18 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v17);

        UIContentUnavailableConfiguration.image.setter(v18);
      }
      v19 = v24;
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24, v11, v8);
    }
    else
    {
      v21 = v30;
      v22 = sub_1000A54A0(v3, v4, v5, v6, v7 & 1);
      v19 = v24;
      static UIContentUnavailableConfiguration.loading()(v22);
      UIContentUnavailableConfiguration.text.setter(v12, v21);
    }
    v20 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v19, v20, 1, v8);
}

uint64_t sub_1000F2F50()
{
  uint64_t v0;

  sub_10001B498((_QWORD *)(v0 + 16));
  sub_10001B498((_QWORD *)(v0 + 56));

  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for TranscriptViewPresenter()
{
  return objc_opt_self(_TtC10VoiceMemos23TranscriptViewPresenter);
}

uint64_t sub_1000F2FA4(uint64_t a1, uint64_t a2)
{
  initializeWithTake for EmptyStateStyle(a2, a1);
  return a2;
}

id sub_1000F2FE0(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, unint64_t a6, double a7)
{
  id v8;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  NSString v16;

  if (((a2 | a4) & 1) != 0)
    return 0;
  if (*(double *)&a3 > a7 || a7 - *(double *)&a3 < *(double *)&a1)
    return 0;
  v11 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TranscriptWaitingViewTextAttachment()), "init");
  v12 = objc_msgSend((id)objc_opt_self(NSAttributedString), "attributedStringWithAttachment:", v11);
  sub_100105A44(a5, a6);
  if (v13)
    v14 = 0xA300000000000000;
  else
    v14 = 0xE000000000000000;
  v15 = objc_allocWithZone((Class)NSMutableAttributedString);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  v8 = objc_msgSend(v15, "initWithString:", v16);

  objc_msgSend(v8, "appendAttributedString:", v12);
  return v8;
}

uint64_t sub_1000F311C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100014E10(&qword_1001EC588);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F3164(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100014E10(&qword_1001EC588);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000F31A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  double v4;
  __int128 v5;
  uint64_t v6;
  double v8;
  double *v9;
  uint64_t v10;
  double *v11;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = *(double *)(result + 32);
    v5 = *(_OWORD *)(result + 40);
    v6 = *(_QWORD *)(result + 56);
    if (v4 <= a3 && v3 != 1)
    {
      v8 = *(double *)(result + 64);
      if (v8 <= a3)
      {
        v9 = (double *)(result + 96);
        v10 = v3 - 1;
        do
        {
          v4 = v8;
          v11 = v9;
          if (!--v10)
            break;
          v9 += 4;
          v8 = *v11;
        }
        while (*v11 <= a3);
        v6 = *((_QWORD *)v11 - 1);
        v5 = *(_OWORD *)(v11 - 3);
      }
    }
  }
  else
  {
    v6 = 0;
    v5 = 0uLL;
    v4 = 0.0;
  }
  *(double *)a2 = v4;
  *(_OWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_BYTE *)(a2 + 32) = v3 == 0;
  return result;
}

uint64_t sub_1000F322C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100014E10(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000F3270(uint64_t a1, unint64_t a2, char a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  _QWORD v41[3];
  _QWORD v42[3];

  v8 = swift_allocObject(&unk_1001B1DD0, 24, 7);
  *(_QWORD *)(v8 + 16) = 0;
  v9 = swift_allocObject(&unk_1001B1DF8, 40, 7);
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  v10 = (uint64_t *)(v9 + 16);
  *(_BYTE *)(v9 + 32) = 1;
  v11 = swift_allocObject(&unk_1001B1DF8, 40, 7);
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  v12 = (uint64_t *)(v11 + 16);
  *(_BYTE *)(v11 + 32) = 1;
  v42[0] = a1;
  v42[1] = a2;
  v13 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v13 = a1;
  v14 = 11;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) == 0)
    v14 = 7;
  v41[0] = 15;
  v41[1] = v14 | (v13 << 16);
  v15 = (_QWORD *)swift_allocObject(&unk_1001B1E20, 56, 7);
  v15[2] = v8;
  v15[3] = v11;
  v38 = a1;
  v15[4] = a1;
  v15[5] = a2;
  v15[6] = v9;
  swift_retain(v8);
  swift_retain(v11);
  swift_bridgeObjectRetain(a2);
  swift_retain(v9);
  v16 = sub_100014E10(&qword_1001EC7D0);
  v17 = sub_1000A3A18();
  v18 = sub_1000F367C();
  v19 = v42;
  StringProtocol.enumerateSubstrings<A>(in:options:_:)(v41, 259, sub_1000F364C, v15, &type metadata for String, v16, v17, v18);
  swift_release(v15);
  swift_beginAccess(v10, v42, 0, 0);
  v35 = *(_QWORD *)(v9 + 24);
  v36 = *v10;
  v20 = *(_BYTE *)(v9 + 32);
  swift_beginAccess(v12, v41, 0, 0);
  v21 = *v12;
  v22 = *(_QWORD *)(v11 + 24);
  v23 = (_QWORD *)*(unsigned __int8 *)(v11 + 32);
  swift_release(v8);
  swift_release(v9);
  swift_release(v11);
  if ((v23 & 1) != 0)
  {
    v23 = _swiftEmptyArrayStorage;
    if ((v20 & 1) != 0)
      return (uint64_t)v23;
    goto LABEL_20;
  }
  v24 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
    goto LABEL_30;
  }
  v23 = (_QWORD *)(v24 - 1);
  if (__OFSUB__(v24, 1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  result = sub_100105A44(v38, a2);
  v24 = result + v26;
  if (__OFADD__(result, v26))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v27 = __OFSUB__(v24--, 1);
  if (v27)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if ((uint64_t)v23 >= (uint64_t)v24)
    goto LABEL_15;
  v27 = __OFSUB__(v24, v23);
  v28 = v24 - (_QWORD)v23;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    v27 = __OFADD__(v22, v28);
    v22 += v28;
    if (!v27)
    {
LABEL_15:
      if ((a3 & 1) != 0)
        v19 = a4;
      else
        v19 = a6;
      swift_bridgeObjectRetain(v19);
      v23 = sub_1000C965C(0, 1, 1, _swiftEmptyArrayStorage);
      a2 = v23[2];
      v24 = v23[3];
      v12 = (uint64_t *)(a2 + 1);
      if (a2 < v24 >> 1)
      {
LABEL_19:
        v23[2] = v12;
        v29 = &v23[3 * a2];
        v29[4] = v21;
        v29[5] = v22;
        v29[6] = v19;
        if ((v20 & 1) != 0)
          return (uint64_t)v23;
LABEL_20:
        if ((a3 & 1) != 0)
          v30 = a4;
        else
          v30 = a5;
        swift_bridgeObjectRetain(v30);
        if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
          v23 = sub_1000C965C(0, v23[2] + 1, 1, v23);
        v32 = v23[2];
        v31 = v23[3];
        if (v32 >= v31 >> 1)
          v23 = sub_1000C965C((_QWORD *)(v31 > 1), v32 + 1, 1, v23);
        v23[2] = v32 + 1;
        v33 = &v23[3 * v32];
        v33[4] = v36;
        v33[5] = v35;
        v33[6] = v30;
        return (uint64_t)v23;
      }
LABEL_33:
      v23 = sub_1000C965C((_QWORD *)(v24 > 1), (int64_t)v12, 1, v23);
      goto LABEL_19;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F35F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F3600()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F3610()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000F364C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t *v7;

  return sub_1000F2BE4(a1, a2, a3, a4, a5, a6, a7, v7[2], v7[3], v7[4], v7[5], v7[6]);
}

unint64_t sub_1000F367C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001EC7D8;
  if (!qword_1001EC7D8)
  {
    v1 = sub_10000EE30(&qword_1001EC7D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001EC7D8);
  }
  return result;
}

id sub_1000F36C8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  NSString *v17;
  NSString *v18;
  unint64_t v19;
  unint64_t v20;
  Class isa;
  id v22;
  id v23;
  id v24;
  id v25;
  NSString v26;
  id v27;
  objc_class *v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __int128 v41;
  id v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  objc_super v47;
  char v48[48];
  char v49[80];

  v1 = type metadata accessor for SymbolEffectOptions(0);
  v45 = *(_QWORD *)(v1 - 8);
  v46 = v1;
  __chkstk_darwin(v1);
  v44 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for VariableColorSymbolEffect(0);
  v43 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v41 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v41 - v10;
  v12 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:", UIFontTextStyleLargeTitle);
  v42 = v12;
  v13 = sub_100014E10(&qword_1001EC808);
  inited = swift_initStackObject(v13, v49);
  v41 = xmmword_100188080;
  *(_OWORD *)(inited + 16) = xmmword_100188080;
  *(_QWORD *)(inited + 32) = UIFontDescriptorTraitsAttribute;
  v15 = sub_100014E10(&qword_1001EC810);
  v16 = swift_initStackObject(v15, v48);
  *(_OWORD *)(v16 + 16) = v41;
  *(_QWORD *)(v16 + 32) = UIFontWeightTrait;
  *(UIFontWeight *)(v16 + 40) = UIFontWeightBold;
  v17 = UIFontDescriptorTraitsAttribute;
  v18 = UIFontWeightTrait;
  v19 = sub_100109314(v16);
  *(_QWORD *)(inited + 64) = sub_100014E10(&qword_1001EC818);
  *(_QWORD *)(inited + 40) = v19;
  v20 = sub_10010941C(inited);
  type metadata accessor for AttributeName(0);
  sub_10001B7CC(&qword_1001E92E8, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_100187960);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v20);
  v22 = objc_msgSend(v12, "fontDescriptorByAddingAttributes:", isa);

  v23 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithDescriptor:size:", v22, 0.0);
  v24 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithFont:", v23);

  v25 = v24;
  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v26, v25);

  v28 = (objc_class *)type metadata accessor for TranscriptWaitingImageView();
  v47.receiver = v0;
  v47.super_class = v28;
  v29 = objc_msgSendSuper2(&v47, "initWithImage:", v27);
  objc_msgSend(v29, "setContentMode:", 1);
  v30 = (void *)objc_opt_self(UIColor);
  v31 = v29;
  v32 = objc_msgSend(v30, "systemRedColor");
  objc_msgSend(v31, "setTintColor:", v32);

  v33 = v31;
  v34 = VariableColorSymbolEffect.init()();
  VariableColorSymbolEffect.dimInactiveLayers.getter(v34);
  v35 = *(uint64_t (**)(char *, uint64_t))(v43 + 8);
  v36 = v35(v11, v3);
  VariableColorSymbolEffect.cumulative.getter(v36);
  v37 = v35(v9, v3);
  v38 = v44;
  static SymbolEffectOptions.default.getter(v37);
  v39 = sub_10001B7CC(&qword_1001EC820, (uint64_t (*)(uint64_t))&type metadata accessor for VariableColorSymbolEffect, (uint64_t)&protocol conformance descriptor for VariableColorSymbolEffect);
  UIImageView.addSymbolEffect<A>(_:options:animated:completion:)(v6, v38, 1, 0, 0, v3, v39);

  (*(void (**)(char *, uint64_t))(v45 + 8))(v38, v46);
  v35(v6, v3);
  return v33;
}

id sub_1000F3D14()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TranscriptWaitingImageView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TranscriptWaitingImageView()
{
  return objc_opt_self(_TtC10VoiceMemos26TranscriptWaitingImageView);
}

_QWORD *sub_1000F3D64(void (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v6 = sub_100014E10(&qword_1001EC828);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100014E10(&qword_1001EA808);
  v9 = *(_QWORD *)(v25 - 8);
  v10 = __chkstk_darwin(v25);
  v23 = (uint64_t)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v22 = (uint64_t)&v20 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a3);
  v14 = 0;
  v15 = &_swiftEmptyArrayStorage;
  v20 = a1;
  v21 = a3;
  do
  {
    v24 = *(_OWORD *)(a3 + 16 * v14 + 32);
    a1(&v24);
    if (v3)
    {
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(a3);
      return v15;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v25) == 1)
    {
      sub_100005440((uint64_t)v8, &qword_1001EC828);
    }
    else
    {
      v16 = v22;
      sub_1000BD398((uint64_t)v8, v22);
      sub_1000BD398(v16, v23);
      if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
        v15 = (_QWORD *)sub_1000C9B00(0, v15[2] + 1, 1, (unint64_t)v15);
      v18 = v15[2];
      v17 = v15[3];
      if (v18 >= v17 >> 1)
        v15 = (_QWORD *)sub_1000C9B00(v17 > 1, v18 + 1, 1, (unint64_t)v15);
      v15[2] = v18 + 1;
      sub_1000BD398(v23, (uint64_t)v15+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v18);
      a1 = v20;
      a3 = v21;
    }
    ++v14;
  }
  while (v13 != v14);
  swift_bridgeObjectRelease(a3);
  return v15;
}

unint64_t *sub_1000F3FA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;

  v3 = type metadata accessor for AttributedString.Index(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v7)
  {
    v16[1] = v1;
    v19 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_1000CA090(0, v7, 0);
    v8 = v19;
    v9 = sub_100014E10(&qword_1001EA808);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v17 = *(_QWORD *)(v10 + 72);
    v18 = v9;
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    do
    {
      v12(v6, v11 + *(int *)(v18 + 36), v3);
      v19 = v8;
      v14 = v8[2];
      v13 = v8[3];
      if (v14 >= v13 >> 1)
      {
        sub_1000CA090(v13 > 1, v14 + 1, 1);
        v8 = v19;
      }
      v8[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v14, v6, v3);
      v11 += v17;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_1000F4114@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  char *v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v25 = a2;
  v3 = sub_100014E10(&qword_1001EA808);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100014E10(&qword_1001EC828);
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AttributedString(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = a1;
  v14 = sub_1000F4E6C();
  v15 = *(_QWORD *)(v14 + 16);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  if (v15)
  {
    v24 = v11;
    v17 = v13;
    v18 = v26;
    v26 = v10;
    result = v16(v13, v18, v10);
    v20 = v14 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    while (v15 <= *(_QWORD *)(v14 + 16))
    {
      --v15;
      sub_1000BD3E0(v20 + *(_QWORD *)(v4 + 72) * v15, (uint64_t)v9);
      v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v21(v9, 0, 1, v3);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
        goto LABEL_7;
      sub_1000BD398((uint64_t)v9, (uint64_t)v6);
      v22 = sub_10000EDB0((unint64_t *)&unk_1001EC0B0, &qword_1001EA808, (uint64_t)&protocol conformance descriptor for Range<A>);
      AttributedString.removeSubrange<A>(_:)(v6, v3, v22);
      result = sub_100005440((uint64_t)v6, &qword_1001EA808);
      if (!v15)
      {
        v21(v9, 1, 1, v3);
LABEL_7:
        swift_bridgeObjectRelease(v14);
        return (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 32))(v25, v17, v26);
      }
    }
    __break(1u);
  }
  else
  {
    v16(v25, v26, v10);
    return swift_bridgeObjectRelease(v14);
  }
  return result;
}

uint64_t sub_1000F4350@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  char *v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t result;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  char *v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  void (*v103)(char *, char *, uint64_t);
  void (*v104)(char *, uint64_t, uint64_t, uint64_t);
  void (*v105)(char *, unint64_t, uint64_t);
  char *v106;
  uint64_t v107;
  uint64_t v108;

  v99 = a3;
  v95 = sub_100014E10((uint64_t *)&unk_1001EC100);
  v5 = __chkstk_darwin(v95);
  v98 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v94 = (char *)&v88 - v7;
  v96 = sub_100014E10(&qword_1001EA808);
  __chkstk_darwin(v96);
  v97 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AttributedSubstring(0);
  __chkstk_darwin(v9);
  v92 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100014E10(&qword_1001EC830);
  __chkstk_darwin(v91);
  v12 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for AttributedString(0);
  v101 = *(_QWORD *)(v108 - 8);
  v13 = __chkstk_darwin(v108);
  v102 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v106 = (char *)&v88 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v88 - v17;
  v19 = sub_100014E10(&qword_1001EAF88);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v88 - v23;
  v25 = type metadata accessor for AttributedString.Index(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v88 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v27);
  v32 = (char *)&v88 - v31;
  __chkstk_darwin(v30);
  v93 = (char *)&v88 - v33;
  v100 = a1;
  v34 = sub_1000F4C6C(a1, 1, a2);
  v35 = v34;
  v36 = *(_QWORD *)(v34 + 16);
  v107 = v26;
  if (!v36)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v24, 1, 1, v25);
    goto LABEL_12;
  }
  v90 = v18;
  v37 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  v38 = *(_QWORD *)(v26 + 72);
  v105 = *(void (**)(char *, unint64_t, uint64_t))(v26 + 16);
  v105(v24, v34 + v37 + v38 * (v36 - 1), v25);
  v104 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  v104(v24, 0, 1, v25);
  v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  if (v39(v24, 1, v25) == 1)
  {
LABEL_12:
    swift_bridgeObjectRelease(v35);
    sub_100005440((uint64_t)v24, &qword_1001EAF88);
    v51 = AttributedString.init(stringLiteral:)(0, 0xE000000000000000);
    v52 = AttributedString.startIndex.getter(v51);
    AttributedString.startIndex.getter(v52);
    v53 = sub_10001B7CC((unint64_t *)&unk_1001EC0D0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Index);
    v42 = dispatch thunk of static Comparable.<= infix(_:_:)(v32, v29, v25, v53);
    if ((v42 & 1) != 0)
    {
      v55 = v94;
      v54 = v95;
      v56 = &v94[*(int *)(v95 + 48)];
      v57 = v107;
      v58 = *(void (**)(char *, char *, uint64_t))(v107 + 32);
      v58(v94, v32, v25);
      v58(v56, v29, v25);
      v59 = v98;
      v60 = &v98[*(int *)(v54 + 48)];
      v61 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
      v61(v98, v55, v25);
      v61(v60, v56, v25);
      v62 = (uint64_t)v97;
      v58(v97, v59, v25);
      v63 = *(void (**)(char *, uint64_t))(v57 + 8);
      v63(v60, v25);
      v64 = &v59[*(int *)(v54 + 48)];
      v58(v59, v55, v25);
      v58(v64, v56, v25);
      v58((char *)(v62 + *(int *)(v96 + 36)), v64, v25);
      v63(v59, v25);
      v65 = type metadata accessor for TranscriptionFormatter.PartialResult(0);
      v66 = v99;
      sub_1000BD398(v62, v99 + *(int *)(v65 + 20));
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v101 + 32))(v66, v102, v108);
    }
    __break(1u);
    goto LABEL_15;
  }
  v89 = v35;
  v40 = v93;
  v103 = *(void (**)(char *, char *, uint64_t))(v107 + 32);
  v103(v93, v24, v25);
  v41 = sub_10001B7CC(&qword_1001EB0E0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Index);
  v42 = dispatch thunk of static Equatable.== infix(_:_:)(v40, v40, v25, v41);
  if ((v42 & 1) == 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain(v42);
LABEL_17:
    v104(v22, 1, 1, v25);
    goto LABEL_18;
  }
  v105(v12, (unint64_t)v40, v25);
  v43 = sub_10000EDB0(&qword_1001EC838, &qword_1001EC830, (uint64_t)&protocol conformance descriptor for PartialRangeUpTo<A>);
  v44 = v92;
  AttributedString.subscript.getter(v12, v91, v43);
  sub_100005440((uint64_t)v12, &qword_1001EC830);
  v45 = v90;
  AttributedString.init(_:)(v44);
  v92 = *(char **)(v101 + 16);
  ((void (*)(char *, char *, uint64_t))v92)(v106, v45, v108);
  v42 = v89;
  v46 = *(_QWORD *)(v89 + 16);
  if (!v46)
    goto LABEL_16;
  v47 = swift_bridgeObjectRetain(v89) + v37 + v38 * (v46 - 1);
  v48 = v108;
  while (1)
  {
    v105(v22, v47, v25);
    v104(v22, 0, 1, v25);
    if (v39(v22, 1, v25) == 1)
      break;
    v103(v32, v22, v25);
    if (qword_1001E9078 != -1)
      swift_once(&qword_1001E9078, sub_1000F4BC8);
    --v46;
    v49 = sub_1000AACFC(v48, (uint64_t)qword_1001F6E58);
    v50 = sub_10001B7CC(&qword_1001EC110, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
    AttributedString.insert<A>(_:at:)(v49, v32, v48, v50);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v32, v25);
    v47 -= v38;
    if (!v46)
      goto LABEL_17;
  }
LABEL_18:
  swift_bridgeObjectRelease_n(v89, 2);
  v68 = v106;
  v69 = v108;
  v70 = ((uint64_t (*)(char *, char *, uint64_t))v92)(v102, v106, v108);
  AttributedString.startIndex.getter(v70);
  v71 = sub_10001B7CC((unint64_t *)&unk_1001EC0D0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Index);
  v72 = v93;
  v73 = dispatch thunk of static Comparable.<= infix(_:_:)(v32, v93, v25, v71);
  v74 = *(void (**)(char *, uint64_t))(v101 + 8);
  v74(v68, v69);
  result = ((uint64_t (*)(char *, uint64_t))v74)(v90, v69);
  if ((v73 & 1) != 0)
  {
    v76 = v94;
    v75 = v95;
    v77 = &v94[*(int *)(v95 + 48)];
    v78 = v32;
    v79 = v103;
    v103(v94, v78, v25);
    v79(v77, v72, v25);
    v80 = v98;
    v81 = &v98[*(int *)(v75 + 48)];
    v82 = (void (*)(char *, char *, uint64_t))v105;
    v105(v98, (unint64_t)v76, v25);
    v82(v81, v77, v25);
    v83 = (uint64_t)v97;
    v79(v97, v80, v25);
    v84 = *(void (**)(char *, uint64_t))(v107 + 8);
    v84(v81, v25);
    v85 = &v80[*(int *)(v75 + 48)];
    v79(v80, v76, v25);
    v79(v85, v77, v25);
    v79((char *)(v83 + *(int *)(v96 + 36)), v85, v25);
    v84(v80, v25);
    v86 = type metadata accessor for TranscriptionFormatter.PartialResult(0);
    v87 = v99;
    sub_1000BD398(v83, v99 + *(int *)(v86 + 20));
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v101 + 32))(v87, v102, v69);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F4BC8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  v0 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AttributedString(0);
  sub_1000B52C4(v3, qword_1001F6E58);
  sub_1000AACFC(v3, (uint64_t)qword_1001F6E58);
  AttributeContainer.init()();
  return AttributedString.init(_:attributes:)(11108578, 0xA300000000000000, v2);
}

uint64_t sub_1000F4C6C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[8];
  _QWORD *v22;

  v6 = sub_100014E10(&qword_1001EC828);
  __chkstk_darwin(v6);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100014E10(&qword_1001EA808);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_1000F5A14(a1);
  v22 = v13;
  if ((a2 & 1) != 0)
  {
    v14 = (unint64_t)v13;
    if (v13[2])
    {
      result = swift_isUniquelyReferenced_nonNull_native(v13);
      if ((result & 1) != 0)
      {
        v16 = *(_QWORD *)(v14 + 16);
        if (v16)
        {
LABEL_5:
          v17 = v16 - 1;
          sub_1000BD398(v14+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * (v16 - 1), (uint64_t)v8);
          *(_QWORD *)(v14 + 16) = v17;
          v22 = (_QWORD *)v14;
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
          {
            sub_100005440((uint64_t)v8, &qword_1001EC828);
            sub_1000F58C8(*(_QWORD *)(v14 + 16) - 1, (uint64_t)v12);
          }
          else
          {
            sub_1000BD398((uint64_t)v8, (uint64_t)v12);
          }
          sub_100005440((uint64_t)v12, &qword_1001EA808);
          goto LABEL_9;
        }
      }
      else
      {
        result = sub_1000F5A00(v14);
        v14 = result;
        v16 = *(_QWORD *)(result + 16);
        if (v16)
          goto LABEL_5;
      }
      __break(1u);
      return result;
    }
  }
LABEL_9:
  v18 = (uint64_t)v22;
  if (a3 < 2)
  {
    v20 = swift_bridgeObjectRetain(v22);
    v19 = (uint64_t)sub_1000F3FA0(v20);
    swift_bridgeObjectRelease(v18);
  }
  else
  {
    v19 = sub_1000F547C(a3 - 1, v22[2], a3, (uint64_t *)&v22);
  }
  swift_bridgeObjectRelease(v18);
  return v19;
}

uint64_t sub_1000F4E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t result;
  void (*v31)(_QWORD, _QWORD, _QWORD);
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(_QWORD, _QWORD, _QWORD);
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD v84[3];

  v1 = sub_100014E10(&qword_1001EB9B8);
  __chkstk_darwin(v1);
  v77 = (char *)&v63 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AttributedSubstring(0);
  v75 = *(_QWORD *)(v3 - 8);
  v76 = v3;
  __chkstk_darwin(v3);
  v74 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100014E10((uint64_t *)&unk_1001EC100);
  v5 = __chkstk_darwin(v73);
  v71 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v72 = (char *)&v63 - v7;
  v8 = sub_100014E10(&qword_1001EC828);
  __chkstk_darwin(v8);
  v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100014E10(&qword_1001EA808);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v80 = (uint64_t)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v69 = (char *)&v63 - v16;
  v17 = __chkstk_darwin(v15);
  v68 = (uint64_t)&v63 - v18;
  __chkstk_darwin(v17);
  v79 = (uint64_t)&v63 - v19;
  v20 = type metadata accessor for AttributedString.Index(0);
  v78 = *(_QWORD *)(v20 - 8);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v63 - v25;
  v27 = AttributedString.startIndex.getter(v24);
  v28 = v0;
  AttributedString.endIndex.getter(v27);
  v29 = v26;
  v65 = sub_10001B7CC((unint64_t *)&unk_1001EC0D0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Index);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v26, v23, v20, v65);
  if ((result & 1) != 0)
  {
    v31 = *(void (**)(_QWORD, _QWORD, _QWORD))(v78 + 16);
    v81 = v10;
    v82 = _swiftEmptyArrayStorage;
    v70 = v12;
    v83 = v11;
    v66 = v23;
    v67 = v29;
    v64 = v31;
    while (1)
    {
      v33 = v72;
      v32 = v73;
      v34 = &v72[*(int *)(v73 + 48)];
      v31(v72, v29, v20);
      v35 = v28;
      v36 = (void (*)(char *, char *, uint64_t))v31;
      v37 = v78;
      v38 = *(void (**)(char *, char *, uint64_t))(v78 + 32);
      v38(v34, v23, v20);
      v39 = v71;
      v40 = &v71[*(int *)(v32 + 48)];
      v36(v71, v33, v20);
      v36(v40, v34, v20);
      v41 = (uint64_t)v69;
      v38(v69, v39, v20);
      v42 = *(void (**)(char *, uint64_t))(v37 + 8);
      v42(v40, v20);
      v43 = &v39[*(int *)(v32 + 48)];
      v38(v39, v33, v20);
      v38(v43, v34, v20);
      v38((char *)(v41 + *(int *)(v83 + 36)), v43, v20);
      v42(v39, v20);
      v44 = v68;
      sub_1000BD398(v41, v68);
      v45 = sub_10000EDB0((unint64_t *)&unk_1001EC0B0, &qword_1001EA808, (uint64_t)&protocol conformance descriptor for Range<A>);
      v46 = v74;
      v28 = v35;
      AttributedString.subscript.getter(v44, v83, v45);
      sub_100005440(v44, &qword_1001EA808);
      v84[0] = 11108578;
      v84[1] = 0xA300000000000000;
      v47 = type metadata accessor for Locale(0);
      v48 = v77;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v77, 1, 1, v47);
      v49 = sub_10001B7CC(&qword_1001EC0C8, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedSubstring, (uint64_t)&protocol conformance descriptor for AttributedSubstring);
      v50 = sub_1000A3A18();
      v51 = v76;
      AttributedStringProtocol.range<A>(of:options:locale:)(v84, 0, v48, v76, &type metadata for String, v49, v50);
      v52 = (uint64_t)v48;
      v53 = (uint64_t)v81;
      sub_100005440(v52, &qword_1001EB9B8);
      v54 = v46;
      v55 = v83;
      v56 = v70;
      (*(void (**)(char *, uint64_t))(v75 + 8))(v54, v51);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v53, 1, v55) == 1)
        break;
      v57 = v79;
      sub_1000BD398(v53, v79);
      sub_1000BD3E0(v57, v80);
      if ((swift_isUniquelyReferenced_nonNull_native(v82) & 1) == 0)
        v82 = (_QWORD *)sub_1000C9B00(0, v82[2] + 1, 1, (unint64_t)v82);
      v29 = v67;
      v59 = v82[2];
      v58 = v82[3];
      if (v59 >= v58 >> 1)
        v82 = (_QWORD *)sub_1000C9B00(v58 > 1, v59 + 1, 1, (unint64_t)v82);
      v60 = v82;
      v82[2] = v59 + 1;
      sub_1000BD398(v80, (uint64_t)v60+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(_QWORD *)(v56 + 72) * v59);
      v42(v29, v20);
      v61 = v79;
      v31 = v64;
      v64(v29, v79 + *(int *)(v55 + 36), v20);
      v62 = sub_100005440(v61, &qword_1001EA808);
      v23 = v66;
      AttributedString.endIndex.getter(v62);
      result = dispatch thunk of static Comparable.<= infix(_:_:)(v29, v23, v20, v65);
      if ((result & 1) == 0)
        goto LABEL_11;
    }
    v42(v67, v20);
    sub_100005440(v53, &qword_1001EC828);
    return (uint64_t)v82;
  }
  else
  {
LABEL_11:
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F547C(int64_t a1, int64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  _BOOL4 v14;
  BOOL v15;
  uint64_t result;
  _QWORD *v17;
  BOOL v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  char *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;

  v34 = a4;
  v35 = a2;
  v6 = type metadata accessor for AttributedString.Index(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = 0;
  v13 = a1;
  while (1)
  {
    v14 = v13 <= v35;
    if (a3 > 0)
      v14 = v13 >= v35;
    if (v14)
      break;
    v15 = __OFADD__(v13, a3);
    v13 += a3;
    if (v15)
      v13 = (v13 >> 63) ^ 0x8000000000000000;
    v15 = __OFADD__(v12++, 1);
    if (v15)
    {
      __break(1u);
      break;
    }
  }
  v33 = (char *)&v32 - v11;
  v36 = &_swiftEmptyArrayStorage;
  result = sub_1000CA090(0, v12, 0);
  v17 = v36;
  if (v12)
  {
    while (1)
    {
      v18 = a1 <= v35;
      if (a3 > 0)
        v18 = a1 >= v35;
      if (v18)
        break;
      if (__OFADD__(a1, a3))
        v19 = ((a1 + a3) >> 63) ^ 0x8000000000000000;
      else
        v19 = a1 + a3;
      if (a1 < 0)
        goto LABEL_41;
      v20 = *v34;
      if ((unint64_t)a1 >= *(_QWORD *)(*v34 + 16))
        goto LABEL_42;
      v21 = sub_100014E10(&qword_1001EA808);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, v20+ ((*(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * a1+ *(int *)(v21 + 36), v6);
      v36 = v17;
      v23 = v17[2];
      v22 = v17[3];
      if (v23 >= v22 >> 1)
      {
        sub_1000CA090(v22 > 1, v23 + 1, 1);
        v17 = v36;
      }
      v17[2] = v23 + 1;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))((unint64_t)v17+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v23, v10, v6);
      a1 = v19;
      if (!--v12)
        goto LABEL_24;
    }
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
  }
  else
  {
    v19 = a1;
LABEL_24:
    v24 = v19 <= v35;
    if (a3 > 0)
      v24 = v19 >= v35;
    if (v24)
      return (uint64_t)v17;
    v25 = v33;
    while (1)
    {
      v26 = __OFADD__(v19, a3) ? ((v19 + a3) >> 63) ^ 0x8000000000000000 : v19 + a3;
      if (v19 < 0)
        break;
      v27 = *v34;
      if ((unint64_t)v19 >= *(_QWORD *)(*v34 + 16))
        goto LABEL_44;
      v28 = sub_100014E10(&qword_1001EA808);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v25, v27+ ((*(unsigned __int8 *)(*(_QWORD *)(v28 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v28 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72) * v19+ *(int *)(v28 + 36), v6);
      v36 = v17;
      v30 = v17[2];
      v29 = v17[3];
      if (v30 >= v29 >> 1)
      {
        sub_1000CA090(v29 > 1, v30 + 1, 1);
        v17 = v36;
      }
      v17[2] = v30 + 1;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))((unint64_t)v17+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v30, v25, v6);
      v31 = v26 <= v35;
      if (a3 > 0)
        v31 = v26 >= v35;
      v19 = v26;
      if (v31)
        return (uint64_t)v17;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_1000F57B8(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;

  v4 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, a2, v4);
  v8 = sub_100014E10(&qword_1001EC7D0);
  v9 = sub_10000EDB0((unint64_t *)&qword_1001EC7D8, &qword_1001EC7D0, (uint64_t)&protocol conformance descriptor for Range<A>);
  v10 = sub_10001B7CC(&qword_1001EC110, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
  return Range<>.init<A, B>(_:in:)(&v12, v6, v8, v4, v9, v10);
}

uint64_t sub_1000F58C8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = sub_1000F5A00(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = v6 - 1;
  v8 = sub_100014E10(&qword_1001EA808);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
  result = sub_1000BD398(v11, a2);
  v13 = v7 - a1;
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v10 > 0 || v11 >= v11 + v10 + v10 * v13)
  {
    result = swift_arrayInitWithTakeFrontToBack(v11, v11 + v10, v13, v8);
  }
  else if (v10)
  {
    result = swift_arrayInitWithTakeBackToFront(v11);
  }
  *(_QWORD *)(v5 + 16) = v7;
  *v2 = v5;
  return result;
}

uint64_t sub_1000F5A00(unint64_t a1)
{
  return sub_1000C9B00(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_1000F5A14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  NSString v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _BYTE v18[16];
  uint64_t v19;

  v2 = type metadata accessor for AttributedString.CharacterView(0);
  __chkstk_darwin(v2);
  v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = objc_msgSend(objc_allocWithZone((Class)NLTokenizer), "initWithUnit:", 1);
  v6 = type metadata accessor for AttributedString(0);
  v7 = sub_10001B7CC(&qword_1001EC110, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
  dispatch thunk of AttributedStringProtocol.characters.getter(v6, v7);
  v8 = sub_10001B7CC(&qword_1001EAF90, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView, (uint64_t)&protocol conformance descriptor for AttributedString.CharacterView);
  v9 = String.init<A>(_:)(v4, v2, v8);
  v11 = v10;
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setString:", v12);
  swift_bridgeObjectRelease(v11);

  v13 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0)
    v13 = v9;
  v14 = 7;
  if (((v11 >> 60) & ((v9 & 0x800000000000000) == 0)) != 0)
    v14 = 11;
  v15 = NLTokenizer.tokens(for:)(15, v14 | (v13 << 16));
  v19 = a1;
  v16 = sub_1000F3D64((void (*)(_QWORD))sub_1000F5BB8, (uint64_t)v18, v15);
  swift_bridgeObjectRelease(v15);

  return v16;
}

uint64_t sub_1000F5BB8(__int128 *a1)
{
  uint64_t v1;

  return sub_1000F57B8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t type metadata accessor for TranscriptionFormatter.PartialResult(uint64_t a1)
{
  uint64_t result;

  result = qword_1001EC898;
  if (!qword_1001EC898)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TranscriptionFormatter.PartialResult);
  return result;
}

uint64_t *sub_1000F5C0C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for AttributedString(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for AttributedString.Index(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v12(v9, v10, v11);
    v13 = sub_100014E10(&qword_1001EA808);
    v12(&v9[*(int *)(v13 + 36)], &v10[*(int *)(v13 + 36)], v11);
  }
  return a1;
}

uint64_t sub_1000F5CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v9)(uint64_t, uint64_t);

  v4 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for AttributedString.Index(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v9(v5, v6);
  v7 = v5 + *(int *)(sub_100014E10(&qword_1001EA808) + 36);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(v7, v6);
}

uint64_t sub_1000F5D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v6 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for AttributedString.Index(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  v12 = sub_100014E10(&qword_1001EA808);
  v11(v8 + *(int *)(v12 + 36), v9 + *(int *)(v12 + 36), v10);
  return a1;
}

uint64_t sub_1000F5E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v6 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for AttributedString.Index(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24);
  v11(v8, v9, v10);
  v12 = sub_100014E10(&qword_1001EA808);
  v11(v8 + *(int *)(v12 + 36), v9 + *(int *)(v12 + 36), v10);
  return a1;
}

uint64_t sub_1000F5EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v6 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for AttributedString.Index(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = sub_100014E10(&qword_1001EA808);
  v11(v8 + *(int *)(v12 + 36), v9 + *(int *)(v12 + 36), v10);
  return a1;
}

uint64_t sub_1000F5F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v6 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for AttributedString.Index(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  v12 = sub_100014E10(&qword_1001EA808);
  v11(v8 + *(int *)(v12 + 36), v9 + *(int *)(v12 + 36), v10);
  return a1;
}

uint64_t sub_1000F6010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F601C);
}

uint64_t sub_1000F601C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for AttributedString(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_100014E10(&qword_1001EA808);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1000F6094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F60A0);
}

uint64_t sub_1000F60A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for AttributedString(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_100014E10(&qword_1001EA808);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000F6120(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for AttributedString(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000EA760(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

id sub_1000F61EC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StereoOrientationProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for StereoOrientationProvider()
{
  return objc_opt_self(_TtC10VoiceMemos25StereoOrientationProvider);
}

uint64_t sub_1000F625C(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  NSString *v16;
  NSString *v17;

  v3 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v4 = objc_msgSend(v3, "userInterfaceIdiom");

  if (v4 == (id)1)
  {
    if ((unint64_t)(*(_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos25StereoOrientationProvider_interfaceOrientation)
                          - 1) >= 4)
      v5 = 3;
    else
      v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos25StereoOrientationProvider_interfaceOrientation);
  }
  else
  {
    v5 = 3;
  }
  v6 = objc_msgSend(a1, "orientation");
  if (!v6)
    goto LABEL_12;
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v10 = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(AVAudioSessionOrientationBack);
  if (v8 == v11 && v10 == v12)
  {
    v17 = AVAudioSessionOrientationBack;

    swift_bridgeObjectRelease_n(v10, 2);
    return v5;
  }
  v14 = v12;
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v11, v12, 0);
  v16 = AVAudioSessionOrientationBack;

  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v14);
  if ((v15 & 1) == 0)
  {
LABEL_12:
    if ((unint64_t)(v5 - 1) > 3)
      return 1;
    else
      return qword_10018C9D0[v5 - 1];
  }
  return v5;
}

_QWORD *sub_1000F640C(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE v26[24];

  v4 = sub_100014E10(&qword_1001E9BB0);
  __chkstk_darwin(v4);
  v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = a2 + 16;
  if (*a1 == 1)
  {
    swift_beginAccess(v7, v26, 0, 0);
    result = (_QWORD *)swift_weakLoadStrong(v7);
    if (result)
    {
      v9 = result;
      if (result[4])
      {
        v10 = result[2];
        v11 = *(_QWORD *)(v10 + 16);
        if (v11)
        {
          v12 = swift_retain(*(_QWORD *)(v10 + 16));
          v13 = Activity.id.getter(v12);
          v15 = v14;
          sub_1000D3F8C(v13, v14);
          swift_release(v11);
          swift_bridgeObjectRelease(v15);
        }
      }
      v16 = sub_1000D32BC();
      v17 = v9[4];
      v9[3] = v16;
      v9[4] = v18;
      swift_release(v9);
      return (_QWORD *)swift_bridgeObjectRelease(v17);
    }
  }
  else
  {
    swift_beginAccess(v7, v26, 0, 0);
    result = (_QWORD *)swift_weakLoadStrong(v7);
    if (result)
    {
      v19 = result;
      v20 = result[4];
      if (v20)
      {
        v21 = result[3];
        v22 = type metadata accessor for TaskPriority(0);
        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v6, 1, 1, v22);
        v23 = (_QWORD *)swift_allocObject(&unk_1001B1E60, 56, 7);
        v23[2] = 0;
        v23[3] = 0;
        v23[4] = v19;
        v23[5] = v21;
        v23[6] = v20;
        swift_bridgeObjectRetain(v20);
        swift_retain(v19);
        v24 = sub_1000F7930((uint64_t)v6, (uint64_t)&unk_1001ECA80, (uint64_t)v23);
        swift_release(v19);
        result = (_QWORD *)v24;
      }
      return (_QWORD *)swift_release(result);
    }
  }
  return result;
}

uint64_t sub_1000F65C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[2];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = swift_retain(*(_QWORD *)(v1 + 16));
    v4 = Activity.id.getter(v3);
    v6 = v5;
    sub_1000D3F8C(v4, v5);
    swift_release(v2);
    swift_bridgeObjectRelease(v6);
    v1 = v0[2];
  }
  swift_release(v1);
  swift_bridgeObjectRelease(v0[4]);
  sub_1000A3170((uint64_t)(v0 + 5));
  swift_release(v0[7]);
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for ActivityManagerStateCoordinator()
{
  return objc_opt_self(_TtC10VoiceMemos31ActivityManagerStateCoordinator);
}

uint64_t sub_1000F6678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_1000F6694, 0, 0);
}

uint64_t sub_1000F6694()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[5] = *(_QWORD *)(v0[2] + 16);
  v1 = (_QWORD *)swift_task_alloc(dword_1001EB32C);
  v0[6] = v1;
  *v1 = v0;
  v1[1] = sub_1000F66E8;
  return sub_1000D3A24(0);
}

uint64_t sub_1000F66E8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  return swift_task_switch(sub_1000F673C, 0, 0);
}

uint64_t sub_1000F673C()
{
  _QWORD *v0;
  uint64_t Strong;
  _QWORD *v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(void);

  Strong = swift_unknownObjectWeakLoadStrong(v0[2] + 40);
  v0[7] = Strong;
  if (Strong)
  {
    v7 = (uint64_t (*)(void))((char *)&dword_1001EA638 + dword_1001EA638);
    v2 = (_QWORD *)swift_task_alloc(unk_1001EA63C);
    v0[8] = v2;
    *v2 = v0;
    v2[1] = sub_1000F67D0;
    v3 = v7;
  }
  else
  {
    if ((sub_1000D3F8C(v0[3], v0[4]) & 1) != 0)
    {
      v4 = v0[2];
      v5 = *(_QWORD *)(v4 + 32);
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      swift_bridgeObjectRelease(v5);
    }
    v3 = (uint64_t (*)(void))v0[1];
  }
  return v3();
}

uint64_t sub_1000F67D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_1000F682C, 0, 0);
}

uint64_t sub_1000F682C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if ((sub_1000D3F8C(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32)) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 16);
    v2 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
    swift_bridgeObjectRelease(v2);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F6874()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000F68A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v5 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(dword_1001ECA7C);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100003A7C;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v5;
  return swift_task_switch(sub_1000F6694, 0, 0);
}

void sub_1000F6918()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  char v7[24];
  ValueMetadata *v8;
  unint64_t v9;

  v1 = v0;
  v2 = objc_msgSend(v0, "entityInteraction");
  swift_unknownObjectRelease(v2);
  if (!v2)
  {
    v8 = &type metadata for RCUIElementEntity;
    v9 = sub_1000AB058();
    v7[0] = 2;
    v3 = objc_allocWithZone((Class)type metadata accessor for UIAppEntityInteraction(0));
    v6 = (id)UIAppEntityInteraction.init(entity:)(v7);
    v4 = objc_msgSend(v1, "view");
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, "addInteraction:", v6);

      objc_msgSend(v1, "setEntityInteraction:", v6);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1000F6A60(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2[2] = a1;
  v2[3] = a2;
  v3 = sub_100014E10(&qword_1001EB030);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[6] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[7] = swift_task_alloc(v6);
  v2[8] = swift_task_alloc(v6);
  v7 = sub_100014E10(&qword_1001ECAD0);
  v2[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[10] = v8;
  v2[11] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CSSearchQuery.Results(0);
  v2[12] = v9;
  v2[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100014E10(&qword_1001ECAD8);
  v2[14] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[15] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[16] = swift_task_alloc(v12);
  v2[17] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000F6B80, 0, 0);
}

uint64_t sub_1000F6B80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  id v11;
  NSString v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  v1 = v0[16];
  v2 = v0[17];
  v3 = v0[14];
  v4 = v0[12];
  v5 = v0[13];
  v19 = v0[15];
  v6 = v0[5];
  v7 = v0[2];
  v8 = (void *)v0[3];
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease(0xE000000000000000);
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 1684218410;
  v10._object = (void *)0xE400000000000000;
  String.append(_:)(v10);
  v11 = objc_allocWithZone((Class)CSSearchQuery);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100185EE0);
  v13 = objc_msgSend(v11, "initWithQueryString:queryContext:", v12, 0);

  CSSearchQuery.results.getter();
  v14 = sub_1000F78E8();
  AsyncCompactMapSequence.init(_:transform:)(v5, &unk_1001ECAE8, 0, v4, v6, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v1, v2, v3);
  v15 = sub_10000EDB0(&qword_1001ECAF8, &qword_1001ECAD8, (uint64_t)&protocol conformance descriptor for AsyncCompactMapSequence<A, B>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v3, v15);
  v16 = sub_10000EDB0((unint64_t *)&unk_1001ECB00, &qword_1001ECAD0, (uint64_t)&protocol conformance descriptor for AsyncCompactMapSequence<A, B>.Iterator);
  v0[18] = v16;
  v17 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[19] = v17;
  *v17 = v0;
  v17[1] = sub_1000F6D64;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[4], v0[9], v16);
}

uint64_t sub_1000F6D64()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 152));
  if (v0)
  {
    v2[21] = v0;
    v4 = v2[10];
    v3 = v2[11];
    v5 = v2[9];
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = sub_1000F7008;
  }
  else
  {
    v2[20] = _swiftEmptyArrayStorage;
    v6 = sub_1000F6E00;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000F6E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v5 = *(_QWORD *)(v0 + 128);
    v4 = *(_QWORD *)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(v0 + 120);
    v8 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 64);
    v11 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(v9, *(_QWORD *)(v0 + 72));
    sub_1000CE07C(v3);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 160));
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 160);
    v15 = *(_QWORD *)(v0 + 56);
    v14 = *(_QWORD *)(v0 + 64);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v16(v14, v3, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v15, v14, v1);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
    v18 = *(_QWORD *)(v0 + 160);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v18 = sub_1000CA028(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
    v20 = *(_QWORD *)(v18 + 16);
    v19 = *(_QWORD *)(v18 + 24);
    if (v20 >= v19 >> 1)
      v18 = sub_1000CA028(v19 > 1, v20 + 1, 1, v18);
    *(_QWORD *)(v0 + 176) = v18;
    v21 = *(_QWORD *)(v0 + 56);
    v22 = *(_QWORD *)(v0 + 64);
    v23 = *(_QWORD *)(v0 + 40);
    v24 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v18 + 16) = v20 + 1;
    v16(v18+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v20, v21, v23);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    v25 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    *(_QWORD *)(v0 + 184) = v25;
    *v25 = v0;
    v25[1] = sub_1000F70A8;
    return dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 144));
  }
}

uint64_t sub_1000F7008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(v2, *(_QWORD *)(v0 + 112));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F70A8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 184));
  v3 = v2[22];
  if (v0)
  {
    v2[21] = v0;
    v5 = v2[10];
    v4 = v2[11];
    v6 = v2[9];
    swift_bridgeObjectRelease(v3);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v7 = sub_1000F7008;
  }
  else
  {
    v2[20] = v3;
    v7 = sub_1000F6E00;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1000F7138(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1000F7150, 0, 0);
}

uint64_t sub_1000F7150()
{
  uint64_t v0;
  char *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(char **)(v0 + 16);
  v2 = (void *)CSSearchQuery.Results.Item.item.getter();
  v3 = objc_msgSend(v2, "uniqueIdentifier");

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  sub_1000F71D4(v4, v6, v1);
  swift_bridgeObjectRelease(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F71D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v22;

  v6 = sub_100014E10(&qword_1001EB030);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    v13 = *(uint64_t (**)(char *, char *, uint64_t))(v10 + 32);
    v14 = v13(v12, v8, v9);
    v15 = URL.scheme.getter(v14);
    if (v16)
    {
      v17 = v16;
      if (v15 == 0x616465726F632D78 && v16 == 0xEA00000000006174)
      {
        swift_bridgeObjectRelease(v16);
      }
      else
      {
        v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, 0x616465726F632D78, 0xEA00000000006174, 0);
        swift_bridgeObjectRelease(v17);
        if ((v19 & 1) == 0)
          goto LABEL_9;
      }
      v13(a3, v12, v9);
      v20 = 0;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(a3, v20, 1, v9);
    }
LABEL_9:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    goto LABEL_10;
  }
  sub_1000CE07C((uint64_t)v8);
LABEL_10:
  v20 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(a3, v20, 1, v9);
}

uint64_t sub_1000F74A8(uint64_t a1, void *aBlock)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v2[2] = _Block_copy(aBlock);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  v2[3] = v5;
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1001ECAC0 + dword_1001ECAC0);
  v7 = (_QWORD *)swift_task_alloc(unk_1001ECAC4);
  v2[4] = v7;
  *v7 = v2;
  v7[1] = sub_1000F7530;
  return v9(v4, v6);
}

uint64_t sub_1000F7530(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  void *v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *v2;
  v7 = *(_QWORD *)(*v2 + 24);
  v6 = *(_QWORD *)(*v2 + 32);
  v8 = *v2;
  swift_task_dealloc(v6);
  swift_bridgeObjectRelease(v7);
  if (v3)
  {
    v9 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    isa = 0;
    v11 = (void *)v9;
  }
  else
  {
    type metadata accessor for URL(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v9 = 0;
    v11 = isa;
  }
  v12 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 + 16);
  ((void (**)(_QWORD, Class, uint64_t))v12)[2](v12, isa, v9);

  _Block_release(v12);
  return (*(uint64_t (**)(void))(v8 + 8))();
}

id sub_1000F7640()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCTranscriptionSearch();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RCTranscriptionSearch()
{
  return objc_opt_self(_TtC10VoiceMemos21RCTranscriptionSearch);
}

uint64_t sub_1000F7690()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F76BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1001ECAB4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100003A7C;
  return ((uint64_t (*)(uint64_t, void *))((char *)&dword_1001ECAB0 + dword_1001ECAB0))(v2, v3);
}

uint64_t sub_1000F7730(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1000F7748, 0, 0);
}

uint64_t sub_1000F7748()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;

  if (qword_1001E8F98 != -1)
    swift_once(&qword_1001E8F98, sub_1000D1EA0);
  v1 = *(_QWORD *)(qword_1001F6C40
                 + OBJC_IVAR____TtC10VoiceMemos33TranscriptionAvailabilityProvider_deviceIsSupportedSubject);
  v2 = (id)qword_1001F6C40;
  v3 = swift_retain(v1);
  CurrentValueSubject.value.getter((_QWORD *)(v0 + 40), v3);
  swift_release(v1);

  if (*(_BYTE *)(v0 + 40) != 1)
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  v4 = (_QWORD *)swift_task_alloc(dword_1001ECACC);
  *(_QWORD *)(v0 + 32) = v4;
  *v4 = v0;
  v4[1] = sub_1000F7830;
  return sub_1000F6A60(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000F7830(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 32);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_1000F7884(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1001ECAE4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001B80C;
  v5[2] = a1;
  v5[3] = a2;
  return swift_task_switch(sub_1000F7150, 0, 0);
}

unint64_t sub_1000F78E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001ECAF0;
  if (!qword_1001ECAF0)
  {
    v1 = type metadata accessor for CSSearchQuery.Results(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for CSSearchQuery.Results, v1);
    atomic_store(result, (unint64_t *)&qword_1001ECAF0);
  }
  return result;
}

uint64_t sub_1000F7930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100005440(a1, &qword_1001E9BB0);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_1001B2020, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1001E9C48, v16);
}

uint64_t sub_1000F7A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100005440(a1, &qword_1001E9BB0);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_1001B2048, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = sub_100014E10(&qword_1001E9C30);
  if (v14 | v12)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v12;
    v20[3] = v14;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, v17, &unk_1001ECDA0, v16);
}

void sub_1000F7BD0(uint64_t a1)
{
  sub_1000FA530(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_1000F7BEC(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1000F7C2C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (v4 >= 0x20
    || (a3 == result ? (v6 = a4 == a2) : (v6 = 0),
        !v6 && (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, a2, a3, a4, 0), (result & 1) == 0)))
  {
    result = swift_unknownObjectWeakLoadStrong(v5 + 16);
    if (result)
    {
      v7 = result;
      v8 = *(_QWORD *)(result + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_contextProvider);
      v9 = *(_QWORD *)(result + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_dataProvider);
      v10 = *(_QWORD *)(v9 + 32);
      v11 = *(_QWORD *)(v9 + 40);
      v12 = *(_BYTE *)(v9 + 48);
      swift_retain(v8);
      sub_1000FA180(v10, v11, v12);
      sub_1000C3590(v10, v11, v12);
      sub_1000FA1A8(v10, v11, v12);
      swift_unknownObjectRelease(v7);
      return swift_release(v8);
    }
  }
  return result;
}

id sub_1000F7E00(void *a1)
{
  uint64_t v1;
  double v2;
  void *v3;
  double v4;
  id result;
  double v6;
  id v7;

  if (!a1)
  {
    result = *(id *)(v1 + 56);
    if (!result)
      return result;
    objc_msgSend(result, "currentTime");
    goto LABEL_7;
  }
  objc_msgSend(a1, "currentTime");
  v3 = *(void **)(v1 + 56);
  if (!v3 || (v4 = v2, result = objc_msgSend(v3, "currentTime"), v4 != v6))
  {
LABEL_7:
    result = (id)swift_unknownObjectWeakLoadStrong(v1 + 16);
    if (result)
    {
      v7 = result;
      sub_1000FD9D4();
      return (id)swift_unknownObjectRelease(v7);
    }
  }
  return result;
}

uint64_t sub_1000F7E8C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  v1 = v0;
  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit(v0 + 16, 0);
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_BYTE *)(v0 + 48) = 0x80;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0xE000000000000000;
  *(_QWORD *)(v0 + 80) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_QWORD *)(v0 + 120) = 0;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    v2 = (void *)sub_1000FA734((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v2 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)(v0 + 128) = v2;
  if (qword_1001E9058 != -1)
    swift_once(&qword_1001E9058, sub_1000EB6A4);
  v9[0] = *(_QWORD *)(qword_1001F6E18
                    + OBJC_IVAR____TtC10VoiceMemos30TranscriptionModelAssetService__downloadStateValueSubject);
  v3 = v9[0];
  v4 = swift_allocObject(&unk_1001B1FD0, 24, 7);
  swift_weakInit(v4 + 16, v0);
  swift_retain(v9[0]);
  v5 = sub_100014E10(&qword_1001EAD98);
  v6 = sub_1000FA6E8();
  v7 = Publisher<>.sink(receiveValue:)(sub_1000FA6E0, v4, v5, v6);
  swift_release(v4);
  swift_beginAccess(v1 + 128, v9, 33, 0);
  AnyCancellable.store(in:)(v1 + 128);
  swift_endAccess(v9);
  swift_release(v3);
  swift_release(v7);
  return v1;
}

void sub_1000F8018(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  v2 = *a1;
  v3 = *((unsigned __int8 *)a1 + 8);
  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v6 = Strong;
    v7 = (v3 & 0xC0) == 0x80 && v2 == 2;
    if (v7 && v3 == 128 && (v8 = *(_QWORD *)(Strong + 120)) != 0)
    {
      v9 = *(_QWORD *)(Strong + 112);
      swift_bridgeObjectRetain(*(_QWORD *)(Strong + 120));
      sub_1000F8278(v9, v8, 0);
      swift_bridgeObjectRelease(v8);
      v10 = *(_QWORD *)(v6 + 120);
      *(_QWORD *)(v6 + 112) = 0;
      *(_QWORD *)(v6 + 120) = 0;
      swift_release(v6);
      swift_bridgeObjectRelease(v10);
    }
    else
    {
      swift_release(Strong);
    }
  }
}

uint64_t sub_1000F80D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  if (v1)
  {
    swift_retain(*(_QWORD *)(v0 + 104));
    Task.cancel()();
    swift_release(v1);
  }
  sub_1000A3170(v0 + 16);
  sub_1000FA1A8(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  return v0;
}

uint64_t sub_1000F8178()
{
  uint64_t v0;

  sub_1000F80D8();
  return swift_deallocClassInstance(v0, 136, 7);
}

uint64_t type metadata accessor for TranscriptViewDataProvider()
{
  return objc_opt_self(_TtC10VoiceMemos26TranscriptViewDataProvider);
}

uint64_t sub_1000F81B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  v3 = *(_BYTE *)(v0 + 48);
  *(_BYTE *)(v0 + 48) = 0x80;
  sub_1000FA180(v1, v2, v3);
  sub_1000FA1A8(v1, v2, v3);
  sub_1000F7BEC(v1, v2, v3);
  sub_1000FA1A8(v1, v2, v3);
  v4 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0xE000000000000000;
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 80) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v5);
  result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    v7 = result;
    sub_1000FD9D4();
    return swift_unknownObjectRelease(v7);
  }
  return result;
}

double sub_1000F8278(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  double result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = (_QWORD *)v3;
  v8 = sub_100014E10(&qword_1001E9BB0);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v3 + 96);
  if (v11)
  {
    v12 = *(_QWORD *)(v3 + 88);
    v13 = v12 == a1 && v11 == a2;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v12, v11, 0) & 1) != 0)
    {
      v14 = *(_QWORD *)(v3 + 32);
      v15 = *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v3 + 32) = a1;
      *(_QWORD *)(v3 + 40) = a2;
      v16 = *(_BYTE *)(v3 + 48);
      *(_BYTE *)(v3 + 48) = 32;
      swift_bridgeObjectRetain(a2);
      sub_1000FA180(v14, v15, v16);
      sub_1000FA1A8(v14, v15, v16);
      sub_1000F7BEC(v14, v15, v16);
      sub_1000FA1A8(v14, v15, v16);
      return result;
    }
    v18 = *(_QWORD *)(v3 + 104);
    if (v18)
    {
      swift_retain(v4[13]);
      Task.cancel()();
      swift_release(v18);
    }
  }
  v19 = v4[15];
  v4[14] = 0;
  v4[15] = 0;
  swift_bridgeObjectRelease(v19);
  v20 = v4[12];
  v4[11] = a1;
  v4[12] = a2;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v20);
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v10, 1, 1, v21);
  type metadata accessor for MainActor(0);
  swift_bridgeObjectRetain(a2);
  v22 = swift_retain(v4);
  v23 = static MainActor.shared.getter(v22);
  v24 = swift_allocObject(&unk_1001B1FF8, 57, 7);
  *(_QWORD *)(v24 + 16) = v23;
  *(_QWORD *)(v24 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v24 + 32) = v4;
  *(_QWORD *)(v24 + 40) = a1;
  *(_QWORD *)(v24 + 48) = a2;
  *(_BYTE *)(v24 + 56) = a3 & 1;
  v25 = sub_1000F7930((uint64_t)v10, (uint64_t)&unk_1001ECD78, v24);
  v26 = v4[13];
  v4[13] = v25;
  *(_QWORD *)&result = swift_release(v26).n128_u64[0];
  return result;
}

uint64_t sub_1000F8484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)(v7 + 113) = a7;
  *(_QWORD *)(v7 + 32) = a5;
  *(_QWORD *)(v7 + 40) = a6;
  *(_QWORD *)(v7 + 24) = a4;
  v8 = type metadata accessor for AttributedString(0);
  *(_QWORD *)(v7 + 48) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 56) = v9;
  *(_QWORD *)(v7 + 64) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v7 + 72) = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  *(_QWORD *)(v7 + 80) = v11;
  *(_QWORD *)(v7 + 88) = v12;
  return swift_task_switch(sub_1000F8520, v11, v12);
}

uint64_t sub_1000F8520(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  if ((static Task<>.isCancelled.getter(a1) & 1) != 0)
  {
    swift_release(*(_QWORD *)(v1 + 72));
    swift_task_dealloc(*(_QWORD *)(v1 + 64));
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v3 = (_QWORD *)swift_task_alloc(dword_1001ECB3C);
    *(_QWORD *)(v1 + 96) = v3;
    *v3 = v1;
    v3[1] = sub_1000F85A4;
    return sub_1000F8E5C(*(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 113));
  }
}

uint64_t sub_1000F85A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000F8674;
  else
    v4 = sub_1000F8604;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
}

uint64_t sub_1000F8604()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = swift_release(*(_QWORD *)(v0 + 72));
  v2 = static Task<>.isCancelled.getter(v1);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  if ((v2 & 1) == 0)
    sub_1000F9CEC(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 64));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F8674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 72));
  *(_QWORD *)(v0 + 16) = v1;
  swift_errorRetain(v1);
  v2 = sub_100014E10(qword_1001E9C68);
  if (swift_dynamicCast(v0 + 112, v0 + 16, v2, &type metadata for TranscriptionError, 0))
    v3 = *(_BYTE *)(v0 + 112) == 4;
  else
    v3 = 0;
  if (v3)
  {
    v8 = swift_errorRelease(*(_QWORD *)(v0 + 104));
    if ((static Task<>.isCancelled.getter(v8) & 1) == 0)
    {
      v9 = *(_QWORD *)(v0 + 32);
      v10 = *(_QWORD *)(v0 + 40);
      v11 = *(_QWORD *)(v0 + 24);
      v12 = *(_QWORD *)(v11 + 120);
      *(_QWORD *)(v11 + 112) = v9;
      *(_QWORD *)(v11 + 120) = v10;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRelease(v12);
      v13 = sub_1000BA628();
      v14 = swift_allocError(&type metadata for TranscriptionError, v13, 0, 0);
      *v15 = 4;
      sub_1000F9E80(v9, v10, v14);
      swift_errorRelease(v14);
    }
    v7 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v4 = swift_errorRelease(*(_QWORD *)(v0 + 16));
    v5 = static Task<>.isCancelled.getter(v4);
    v6 = *(_QWORD *)(v0 + 104);
    if ((v5 & 1) == 0)
      sub_1000F9E80(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 104));
    v7 = v6;
  }
  swift_errorRelease(v7);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000F87B0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  if (a1)
  {
    v3 = qword_1001E8F80;
    v4 = a1;
    if (v3 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_1000AACFC(v5, (uint64_t)qword_1001F6C20);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v23 = v10;
      *(_DWORD *)v9 = 136315138;
      v22 = sub_1001049A8(0xD00000000000001ALL, 0x8000000100186050, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v9 + 4, v9 + 12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s Beginning live transcription observation", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }

    v11 = &v4[OBJC_IVAR____TtC10VoiceMemos19RCLiveTranscription_delegate];
    *((_QWORD *)v11 + 1) = &off_1001B1F88;
    swift_unknownObjectWeakAssign(v11, v2);

  }
  else
  {
    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v12 = type metadata accessor for Logger(0);
    sub_1000AACFC(v12, (uint64_t)qword_1001F6C20);
    v13 = static os_log_type_t.error.getter();
    v14 = v13;
    v15 = Logger.logObject.getter(v13);
    v16 = v14;
    if (os_log_type_enabled(v15, v14))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v23 = v18;
      *(_DWORD *)v17 = 136315138;
      v22 = sub_1001049A8(0xD00000000000001ALL, 0x8000000100186050, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v17 + 4, v17 + 12);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s Unable to begin live transcription.", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }

    v19 = *(_QWORD *)(v2 + 32);
    v20 = *(_QWORD *)(v2 + 40);
    *(_OWORD *)(v2 + 32) = xmmword_10018CBB0;
    v21 = *(_BYTE *)(v2 + 48);
    *(_BYTE *)(v2 + 48) = 0x80;
    sub_1000FA180(v19, v20, v21);
    sub_1000FA1A8(v19, v20, v21);
    sub_1000F7BEC(v19, v20, v21);
    sub_1000FA1A8(v19, v20, v21);
  }
}

uint64_t sub_1000F8AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;

  v4 = v3;
  if (qword_1001E9058 != -1)
    swift_once(&qword_1001E9058, sub_1000EB6A4);
  v8 = *(_QWORD *)(qword_1001F6E18
                 + OBJC_IVAR____TtC10VoiceMemos30TranscriptionModelAssetService__downloadStateValueSubject);
  v9 = swift_retain(v8);
  CurrentValueSubject.value.getter(&v22, v9);
  swift_release(v8);
  v10 = (v23 & 0xC0) == 0x80 && v22 == 2;
  if (!v10 || v23 != 128)
  {
    sub_1000BED94(v22, v23);
    v11 = *(_QWORD *)(v4 + 32);
    v12 = *(_QWORD *)(v4 + 40);
    v13 = *(_BYTE *)(v4 + 48);
LABEL_8:
    *(_OWORD *)(v4 + 32) = xmmword_10018CBB0;
    *(_BYTE *)(v4 + 48) = 0x80;
    sub_1000FA180(v11, v12, v13);
    sub_1000FA1A8(v11, v12, v13);
    sub_1000F7BEC(v11, v12, v13);
    return sub_1000FA1A8(v11, v12, v13);
  }
  v21 = a1;
  v16 = *(_QWORD *)(v4 + 32);
  v15 = *(_QWORD *)(v4 + 40);
  v17 = *(char *)(v4 + 48);
  if (v17 < 0 && (v15 | v16 || v17 != -128) && (v16 != 1 || v15 || v17 != -128))
  {
    v12 = 0;
    v13 = 0x80;
    v11 = 3;
    if (v16 != 2 || v15 || v17 != -128)
      goto LABEL_8;
  }
  *(_OWORD *)(v4 + 32) = xmmword_10018CBC0;
  *(_BYTE *)(v4 + 48) = 0x80;
  sub_1000FA180(v16, v15, v17);
  sub_1000FA1A8(v16, v15, v17);
  sub_1000F7BEC(v16, v15, v17);
  sub_1000FA1A8(v16, v15, v17);
  v18 = *(_QWORD *)(v4 + 72);
  *(_QWORD *)(v4 + 64) = v21;
  *(_QWORD *)(v4 + 72) = a2;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(v4 + 80);
  *(_QWORD *)(v4 + 80) = a3;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v19);
  result = swift_unknownObjectWeakLoadStrong(v4 + 16);
  if (result)
  {
    v20 = result;
    sub_1000FD9D4();
    return swift_unknownObjectRelease(v20);
  }
  return result;
}

uint64_t sub_1000F8D18(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = result;
  v7 = *(_QWORD *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 40);
  v9 = *(char *)(v3 + 48);
  if ((v9 & 0x80000000) == 0
    || !(v8 | v7) && v9 == -128
    || (v7 == 1 ? (v10 = v8 == 0) : (v10 = 0),
        v10 && v9 == -128 || (v7 == 2 ? (v11 = v8 == 0) : (v11 = 0), v11 && v9 == -128)))
  {
    v12 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0)
      v12 = result & 0xFFFFFFFFFFFFLL;
    *(_QWORD *)(v3 + 32) = v12 != 0;
    *(_QWORD *)(v3 + 40) = 0;
    *(_BYTE *)(v3 + 48) = 96;
    sub_1000FA180(v7, v8, v9);
    sub_1000FA1A8(v7, v8, v9);
    sub_1000F7BEC(v7, v8, v9);
    sub_1000FA1A8(v7, v8, v9);
    v13 = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v3 + 64) = v6;
    *(_QWORD *)(v3 + 72) = a2;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRelease(v13);
    v14 = *(_QWORD *)(v3 + 80);
    *(_QWORD *)(v3 + 80) = a3;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v14);
    result = swift_unknownObjectWeakLoadStrong(v3 + 16);
    if (result)
    {
      v15 = result;
      sub_1000FD9D4();
      return swift_unknownObjectRelease(v15);
    }
  }
  return result;
}

uint64_t sub_1000F8E5C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)(v5 + 264) = a4;
  *(_QWORD *)(v5 + 80) = a3;
  *(_QWORD *)(v5 + 88) = v4;
  *(_QWORD *)(v5 + 64) = a1;
  *(_QWORD *)(v5 + 72) = a2;
  v6 = type metadata accessor for DecodingError(0);
  *(_QWORD *)(v5 + 96) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 104) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 112) = swift_task_alloc(v8);
  *(_QWORD *)(v5 + 120) = swift_task_alloc(v8);
  *(_QWORD *)(v5 + 128) = swift_task_alloc(v8);
  v9 = type metadata accessor for AttributedString.CharacterView(0);
  *(_QWORD *)(v5 + 136) = v9;
  *(_QWORD *)(v5 + 144) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AttributedString(0);
  *(_QWORD *)(v5 + 152) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v5 + 160) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 168) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 176) = swift_task_alloc(v12);
  v13 = sub_100014E10((uint64_t *)&unk_1001ECD50);
  *(_QWORD *)(v5 + 184) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 192) = static MainActor.shared.getter(v14);
  v15 = dispatch thunk of Actor.unownedExecutor.getter(v14, &protocol witness table for MainActor);
  *(_QWORD *)(v5 + 200) = v15;
  *(_QWORD *)(v5 + 208) = v16;
  return swift_task_switch(sub_1000F8F94, v15, v16);
}

uint64_t sub_1000F8F94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t v14;

  if (qword_1001E8F88 != -1)
    swift_once(&qword_1001E8F88, sub_1000B6710);
  v0[27] = qword_1001F6C38;
  if (qword_1001E8F80 != -1)
    swift_once(&qword_1001E8F80, sub_1000B5218);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000AACFC(v1, (uint64_t)qword_1001F6C20);
  v0[28] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v14 = v6;
    *(_DWORD *)v5 = 136315138;
    v0[7] = sub_1001049A8(0xD000000000000038, 0x8000000100186010, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s Retrieving existing transcription", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = v0[10];
  v8 = v0[11];
  v9 = *(_QWORD *)(v8 + 32);
  v10 = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v8 + 32) = v0[9];
  *(_QWORD *)(v8 + 40) = v7;
  v11 = *(_BYTE *)(v8 + 48);
  *(_BYTE *)(v8 + 48) = 0;
  swift_bridgeObjectRetain(v7);
  sub_1000FA180(v9, v10, v11);
  sub_1000FA1A8(v9, v10, v11);
  sub_1000F7BEC(v9, v10, v11);
  sub_1000FA1A8(v9, v10, v11);
  v12 = (_QWORD *)swift_task_alloc(dword_1001EA6DC);
  v0[29] = v12;
  *v12 = v0;
  v12[1] = sub_1000F91D4;
  return sub_1000B67D8(v0[23], v0[9], v0[10]);
}

uint64_t sub_1000F91D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 232);
  *(_QWORD *)(*v1 + 240) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000F97A4;
  else
    v4 = sub_1000F9234;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 200), *(_QWORD *)(v2 + 208));
}

uint64_t sub_1000F9234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 184);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 160) + 48))(v1, 1, *(_QWORD *)(v0 + 152)) == 1)
  {
    v2 = sub_100005440(v1, (uint64_t *)&unk_1001ECD50);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v21 = v6;
      *(_DWORD *)v5 = 136315138;
      *(_QWORD *)(v0 + 40) = sub_1001049A8(0xD000000000000038, 0x8000000100186010, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v5 + 4, v5 + 12);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s No transcription found. Beginning new transcription.", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);
    }

    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 88);
    v9 = *(_QWORD *)(v8 + 32);
    v10 = *(_QWORD *)(v8 + 40);
    *(_QWORD *)(v8 + 32) = *(_QWORD *)(v0 + 72);
    *(_QWORD *)(v8 + 40) = v7;
    v11 = *(_BYTE *)(v8 + 48);
    *(_BYTE *)(v8 + 48) = 32;
    swift_bridgeObjectRetain(v7);
    sub_1000FA180(v9, v10, v11);
    sub_1000FA1A8(v9, v10, v11);
    sub_1000F7BEC(v9, v10, v11);
    sub_1000FA1A8(v9, v10, v11);
    v12 = (_QWORD *)swift_task_alloc(dword_1001EA6E4);
    *(_QWORD *)(v0 + 248) = v12;
    *v12 = v0;
    v12[1] = sub_1000F94B8;
    return sub_1000B6E30(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 264));
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 192));
    v14 = *(_QWORD *)(v0 + 176);
    v15 = *(_QWORD *)(v0 + 184);
    v16 = *(_QWORD *)(v0 + 168);
    v17 = *(_QWORD *)(v0 + 144);
    v19 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 128);
    v20 = *(_QWORD *)(v0 + 112);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 160) + 32))(*(_QWORD *)(v0 + 64), v15, *(_QWORD *)(v0 + 152));
    swift_task_dealloc(v15);
    swift_task_dealloc(v14);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000F94B8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 248);
  *(_QWORD *)(*v1 + 256) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000F9C58;
  else
    v4 = sub_1000F9518;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 200), *(_QWORD *)(v2 + 208));
}

uint64_t sub_1000F9518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 192));
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(_QWORD *)(v0 + 168);
    v10 = *(_QWORD *)(v0 + 144);
    v9 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 136);
    v27 = *(_QWORD *)(v0 + 160);
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v28 = v12;
    *(_DWORD *)v11 = 136315394;
    *(_QWORD *)(v0 + 24) = sub_1001049A8(0xD000000000000038, 0x8000000100186010, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2080;
    v13 = sub_10001B7CC(&qword_1001EC110, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
    dispatch thunk of AttributedStringProtocol.characters.getter(v9, v13);
    v14 = sub_10001B7CC(&qword_1001EAF90, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView, (uint64_t)&protocol conformance descriptor for AttributedString.CharacterView);
    v15 = String.init<A>(_:)(v10, v26, v14);
    v17 = v16;
    *(_QWORD *)(v0 + 32) = sub_1001049A8(v15, v16, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v17);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v8, v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s Transcription complete. Results: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
  }

  v19 = *(_QWORD *)(v0 + 176);
  v18 = *(_QWORD *)(v0 + 184);
  v20 = *(_QWORD *)(v0 + 168);
  v21 = *(_QWORD *)(v0 + 144);
  v23 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 128);
  v24 = *(_QWORD *)(v0 + 112);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 160) + 32))(*(_QWORD *)(v0 + 64), v19, *(_QWORD *)(v0 + 152));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F97A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  os_log_type_t type;
  uint64_t v53;

  v1 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 96);
  swift_errorRetain(v1);
  v4 = sub_100014E10(qword_1001E9C68);
  if ((swift_dynamicCast(v2, v0 + 16, v4, v3, 0) & 1) == 0)
  {
    swift_release(*(_QWORD *)(v0 + 192));
    v27 = swift_errorRelease(*(_QWORD *)(v0 + 16));
    swift_willThrow(v27);
LABEL_7:
    v32 = *(_QWORD *)(v0 + 176);
    v33 = *(_QWORD *)(v0 + 168);
    v34 = *(_QWORD *)(v0 + 144);
    v36 = *(_QWORD *)(v0 + 120);
    v35 = *(_QWORD *)(v0 + 128);
    v37 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v6 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 104);
  swift_errorRelease(*(_QWORD *)(v0 + 240));
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v6, v5, v7);
  v10 = RCCatchTranscriptionDecodingError(v9);
  v11 = *(_QWORD *)(v0 + 120);
  if ((v10 & 1) == 0)
  {
    v28 = *(_QWORD *)(v0 + 96);
    v29 = *(_QWORD *)(v0 + 104);
    swift_release(*(_QWORD *)(v0 + 192));
    swift_allocError(v28, &protocol witness table for DecodingError, 0, 0);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v30, v11, v28);
    swift_willThrow(v31);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v11, v28);
    swift_errorRelease(*(_QWORD *)(v0 + 16));
    goto LABEL_7;
  }
  v12 = v0 + 48;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 104) + 16);
  v14 = v13(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  v17 = os_log_type_enabled(v15, v16);
  v18 = *(_QWORD *)(v0 + 104);
  v19 = *(_QWORD *)(v0 + 112);
  v20 = *(_QWORD *)(v0 + 96);
  if (v17)
  {
    type = v16;
    v51 = *(_QWORD *)(v0 + 104);
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v50 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v21 = 138412290;
    v22 = swift_allocError(v20, &protocol witness table for DecodingError, 0, 0);
    v13(v23, v19, v20);
    v24 = _swift_stdlib_bridgeErrorToNSError(v22);
    *(_QWORD *)(v0 + 48) = v24;
    v12 = v0 + 48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v21 + 4, v21 + 12);
    *v50 = v24;
    v25 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
    v25(v19, v20);
    _os_log_impl((void *)&_mh_execute_header, v15, type, "Catching decode failure so that file can be re-transcribed, error = %@", v21, 0xCu);
    v26 = sub_100014E10((uint64_t *)&unk_1001ECD60);
    swift_arrayDestroy(v50, 1, v26);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

    v25 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v25(v19, v20);
  }
  v25(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
  v39 = swift_errorRelease(*(_QWORD *)(v0 + 16));
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v53 = v43;
    *(_DWORD *)v42 = 136315138;
    *(_QWORD *)(v0 + 40) = sub_1001049A8(0xD000000000000038, 0x8000000100186010, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v12, v42 + 4, v42 + 12);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s No transcription found. Beginning new transcription.", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);
  }

  v44 = *(_QWORD *)(v0 + 80);
  v45 = *(_QWORD *)(v0 + 88);
  v46 = *(_QWORD *)(v45 + 32);
  v47 = *(_QWORD *)(v45 + 40);
  *(_QWORD *)(v45 + 32) = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v45 + 40) = v44;
  v48 = *(_BYTE *)(v45 + 48);
  *(_BYTE *)(v45 + 48) = 32;
  swift_bridgeObjectRetain(v44);
  sub_1000FA180(v46, v47, v48);
  sub_1000FA1A8(v46, v47, v48);
  sub_1000F7BEC(v46, v47, v48);
  sub_1000FA1A8(v46, v47, v48);
  v49 = (_QWORD *)swift_task_alloc(dword_1001EA6E4);
  *(_QWORD *)(v0 + 248) = v49;
  *v49 = v0;
  v49[1] = sub_1000F94B8;
  return sub_1000B6E30(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 264));
}

uint64_t sub_1000F9C58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*(_QWORD *)(v0 + 192));
  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F9CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Strong;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v4 = (_QWORD *)v3;
  v7 = sub_1000CAE74(a3);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v13 = v7 & 0xFFFFFFFFFFFFLL;
  v14 = *(_QWORD *)(v3 + 32);
  v15 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 32) = a1;
  *(_QWORD *)(v3 + 40) = a2;
  v16 = *(_BYTE *)(v3 + 48);
  *(_BYTE *)(v3 + 48) = (v13 != 0) | 0x40;
  swift_bridgeObjectRetain(a2);
  sub_1000FA180(v14, v15, v16);
  sub_1000FA1A8(v14, v15, v16);
  sub_1000F7BEC(v14, v15, v16);
  sub_1000FA1A8(v14, v15, v16);
  v17 = *(_QWORD *)(v3 + 72);
  v4[8] = v8;
  v4[9] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v17);
  v18 = v4[10];
  v4[10] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v18);
  Strong = swift_unknownObjectWeakLoadStrong(v4 + 2);
  if (Strong)
  {
    v20 = Strong;
    sub_1000FD9D4();
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v10);
    swift_unknownObjectRelease(v20);
  }
  else
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v10);
  }
  result = v4[11];
  v22 = v4[12];
  if (v22)
  {
    if (result != a1 || v22 != a2)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v22, a1, a2, 0);
      if ((result & 1) == 0)
        return result;
      a2 = v4[12];
    }
    v4[11] = 0;
    v4[12] = 0;
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_1000F9E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Strong;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  _BYTE v31[8];
  uint64_t v32;
  uint64_t v33;

  v4 = v3;
  if (qword_1001E8F80 != -1)
    swift_once(&qword_1001E8F80, sub_1000B5218);
  v8 = type metadata accessor for Logger(0);
  sub_1000AACFC(v8, (uint64_t)qword_1001F6C20);
  v9 = static os_log_type_t.error.getter();
  swift_errorRetain(a3);
  v10 = swift_errorRetain(a3);
  v11 = Logger.logObject.getter(v10);
  v12 = v9;
  if (os_log_type_enabled(v11, v9))
  {
    v13 = swift_slowAlloc(22, -1);
    v29 = a1;
    v14 = a2;
    v15 = swift_slowAlloc(64, -1);
    v33 = v15;
    *(_DWORD *)v13 = 136315394;
    v32 = sub_1001049A8(0xD000000000000037, 0x8000000100185FD0, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2080;
    swift_getErrorValue(a3, v31, v30);
    v16 = Error.localizedDescription.getter(v30[1], v30[2]);
    v18 = v17;
    v32 = sub_1001049A8(v16, v17, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s Failed to transcribe with error - %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    v19 = v15;
    a2 = v14;
    a1 = v29;
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    swift_errorRelease(a3);
    swift_errorRelease(a3);
  }

  v20 = *(_QWORD *)(v4 + 32);
  v21 = *(_QWORD *)(v4 + 40);
  *(_OWORD *)(v4 + 32) = xmmword_10018CBD0;
  v22 = *(_BYTE *)(v4 + 48);
  *(_BYTE *)(v4 + 48) = 0x80;
  sub_1000FA180(v20, v21, v22);
  sub_1000FA1A8(v20, v21, v22);
  sub_1000F7BEC(v20, v21, v22);
  sub_1000FA1A8(v20, v21, v22);
  v23 = *(_QWORD *)(v4 + 72);
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0xE000000000000000;
  swift_bridgeObjectRelease(v23);
  v24 = *(_QWORD *)(v4 + 80);
  *(_QWORD *)(v4 + 80) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v24);
  Strong = swift_unknownObjectWeakLoadStrong(v4 + 16);
  if (Strong)
  {
    v26 = Strong;
    sub_1000FD9D4();
    swift_unknownObjectRelease(v26);
  }
  result = *(_QWORD *)(v4 + 88);
  v28 = *(_QWORD *)(v4 + 96);
  if (v28)
  {
    if (result != a1 || v28 != a2)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v28, a1, a2, 0);
      if ((result & 1) == 0)
        return result;
      v28 = *(_QWORD *)(v4 + 96);
    }
    *(_QWORD *)(v4 + 88) = 0;
    *(_QWORD *)(v4 + 96) = 0;
    return swift_bridgeObjectRelease(v28);
  }
  return result;
}

uint64_t sub_1000FA180(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 0x5Fu)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t destroy for TranscriptViewDataProvider.TranscriptionState(uint64_t a1)
{
  return sub_1000FA1A8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1000FA1A8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 0x5Fu)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t _s10VoiceMemos26TranscriptViewDataProviderC18TranscriptionStateOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000FA180(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for TranscriptViewDataProvider.TranscriptionState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000FA180(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000FA1A8(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for HighlightStyle(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TranscriptViewDataProvider.TranscriptionState(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000FA1A8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TranscriptViewDataProvider.TranscriptionState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7C && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 124);
  v3 = ((*(unsigned __int8 *)(a1 + 16) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7B)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TranscriptViewDataProvider.TranscriptionState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 124;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_BYTE *)(result + 16) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t sub_1000FA35C(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = (char)v1;
  v3 = v1 >> 5;
  if (v2 >= 0)
    return v3;
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_1000FA37C(uint64_t result)
{
  *(_BYTE *)(result + 16) &= 0x1Fu;
  return result;
}

uint64_t sub_1000FA38C(uint64_t result, unsigned int a2)
{
  if (a2 < 4)
  {
    *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 1 | (32 * a2);
  }
  else
  {
    *(_QWORD *)result = a2 - 4;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for TranscriptViewDataProvider.TranscriptionState()
{
  return &type metadata for TranscriptViewDataProvider.TranscriptionState;
}

uint64_t sub_1000FA3C8(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1000FA42C;
  return v6(a1);
}

uint64_t sub_1000FA42C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000FA478(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_1000FA4E0;
  return v5(v2 + 32);
}

uint64_t sub_1000FA4E0()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

void sub_1000FA530(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1000FA560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  char v7;

  if (v5 >= 0x20)
  {
    v7 = 0;
  }
  else
  {
    if (a1 != a4 || a2 != a5)
      return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0);
    v7 = 1;
  }
  return v7 & 1;
}

uint64_t sub_1000FA6BC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000FA6E0(uint64_t *a1)
{
  uint64_t v1;

  sub_1000F8018(a1, v1);
}

unint64_t sub_1000FA6E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001ECD30;
  if (!qword_1001ECD30)
  {
    v1 = sub_10000EE30(&qword_1001EAD98);
    result = swift_getWitnessTable(&unk_10018CE18, v1);
    atomic_store(result, (unint64_t *)&qword_1001ECD30);
  }
  return result;
}

uint64_t sub_1000FA734(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = result;
  v2 = (unint64_t)result >> 62;
  if ((unint64_t)result >> 62)
  {
    if (result < 0)
      v6 = result;
    else
      v6 = result & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(result);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    result = swift_bridgeObjectRelease(v1);
    if (v3)
    {
LABEL_3:
      sub_100014E10(&qword_1001ECD38);
      result = static _SetStorage.allocate(capacity:)(v3);
      v4 = (_QWORD *)result;
      v24 = v1;
      if (!v2)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v3 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  v24 = v1;
  if (!v2)
  {
LABEL_4:
    v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v5)
      return (uint64_t)v4;
    goto LABEL_15;
  }
LABEL_11:
  if (v1 < 0)
    v7 = v1;
  else
    v7 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v7);
  result = swift_bridgeObjectRelease(v1);
  if (!v5)
    return (uint64_t)v4;
LABEL_15:
  v8 = 0;
  v9 = (char *)(v4 + 7);
  v23 = v5;
  while ((v24 & 0xC000000000000001) != 0)
  {
    result = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v24);
    v10 = __OFADD__(v8++, 1);
    if (v10)
      goto LABEL_32;
LABEL_24:
    v25 = result;
    v27 = result;
    v11 = v4[5];
    v12 = type metadata accessor for AnyCancellable(0);
    v13 = sub_10001B7CC(&qword_1001ECD40, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v12, v13);
    v14 = -1 << *((_BYTE *)v4 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    v17 = *(_QWORD *)&v9[8 * (v15 >> 6)];
    v18 = 1 << v15;
    if (((1 << v15) & v17) != 0)
    {
      v19 = ~v14;
      v20 = sub_10001B7CC(&qword_1001ECD48, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
      do
      {
        v26 = *(_QWORD *)(v4[6] + 8 * v15);
        result = dispatch thunk of static Equatable.== infix(_:_:)(&v26, &v27, v12, v20);
        if ((result & 1) != 0)
        {
          result = swift_release(v25);
          v5 = v23;
          goto LABEL_17;
        }
        v15 = (v15 + 1) & v19;
        v16 = v15 >> 6;
        v17 = *(_QWORD *)&v9[8 * (v15 >> 6)];
        v18 = 1 << v15;
      }
      while ((v17 & (1 << v15)) != 0);
      v5 = v23;
    }
    *(_QWORD *)&v9[8 * v16] = v18 | v17;
    *(_QWORD *)(v4[6] + 8 * v15) = v25;
    v21 = v4[2];
    v10 = __OFADD__(v21, 1);
    v22 = v21 + 1;
    if (v10)
      goto LABEL_33;
    v4[2] = v22;
LABEL_17:
    if (v8 == v5)
      return (uint64_t)v4;
  }
  if (v8 >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_34;
  result = swift_retain(*(_QWORD *)(v24 + 32 + 8 * v8));
  v10 = __OFADD__(v8++, 1);
  if (!v10)
    goto LABEL_24;
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

void *sub_1000FA9C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for Transcriber.TranscriptionOption(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100014E10((uint64_t *)&unk_1001ECDE0);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_10001B7CC(&qword_1001EA848, (uint64_t (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption, (uint64_t)&protocol conformance descriptor for Transcriber.TranscriptionOption);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_10001B7CC((unint64_t *)&unk_1001ECDF0, (uint64_t (*)(uint64_t))&type metadata accessor for Transcriber.TranscriptionOption, (uint64_t)&protocol conformance descriptor for Transcriber.TranscriptionOption);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

void *sub_1000FAC30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for Transcriber.ReportingOption(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100014E10(&qword_1001ECDC8);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_10001B7CC(&qword_1001ECDD0, (uint64_t (*)(uint64_t))&type metadata accessor for Transcriber.ReportingOption, (uint64_t)&protocol conformance descriptor for Transcriber.ReportingOption);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_10001B7CC(&qword_1001ECDD8, (uint64_t (*)(uint64_t))&type metadata accessor for Transcriber.ReportingOption, (uint64_t)&protocol conformance descriptor for Transcriber.ReportingOption);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

void *sub_1000FAE98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for TranscriptionResultAttributeOption(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100014E10(&qword_1001ECDB0);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_10001B7CC(&qword_1001ECDB8, (uint64_t (*)(uint64_t))&type metadata accessor for TranscriptionResultAttributeOption, (uint64_t)&protocol conformance descriptor for TranscriptionResultAttributeOption);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_10001B7CC(&qword_1001ECDC0, (uint64_t (*)(uint64_t))&type metadata accessor for TranscriptionResultAttributeOption, (uint64_t)&protocol conformance descriptor for TranscriptionResultAttributeOption);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_1000FB100()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_1000FB134(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_BYTE *)(v1 + 56);
  v10 = (_QWORD *)swift_task_alloc(dword_1001ECD74);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100003A7C;
  return sub_1000F8484(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000FB1C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FB1E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1001ECD9C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100003A7C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1001ECD98 + dword_1001ECD98))(a1, v4);
}

uint64_t sub_1000FB25C(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const mach_header_64 *v20;
  uint64_t v21;
  char v22;

  v3 = v2;
  result = swift_unknownObjectWeakLoadStrong(v2 + 72);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 40);
    v8 = *(unsigned __int8 *)(result + 48);
    v9 = *(unsigned __int8 *)(result + 49);
    v10 = *(unsigned __int8 *)(result + 50);
    v11 = *(unsigned __int8 *)(result + 51);
    v12 = *(unsigned __int8 *)(result + 52);
    v13 = *(double *)(result + 56);
    *(_BYTE *)(result + 49) = 1;
    *(_BYTE *)(result + 50) = v10;
    *(_BYTE *)(result + 51) = v11;
    *(_BYTE *)(result + 52) = v12;
    v14 = *(unsigned __int16 *)(result + 32);
    sub_1000BED80(v7, v8);
    sub_1000BED80(v7, v8);
    sub_1000BED80(v7, v8);
    sub_1000BED94(v7, v8);
    v15 = 256;
    if (!v9)
      v15 = 0;
    v16 = v15 | v8;
    v17 = 0x10000;
    if (!v10)
      v17 = 0;
    v18 = 0x1000000;
    if (!v11)
      v18 = 0;
    v19 = v16 | v17 | v18;
    v20 = &_mh_execute_header;
    if (!v12)
      v20 = 0;
    sub_1000C3168(v14, v7, v19 | (unint64_t)v20, v13);
    sub_1000BED94(v7, v8);
    sub_1000BED94(v7, v8);
    result = swift_unknownObjectRelease(v6);
  }
  if (a2 > 50.0)
  {
    result = swift_unknownObjectWeakLoadStrong(v3 + 56);
    if (!result)
      return result;
    v21 = result;
    v22 = 0;
    goto LABEL_17;
  }
  if (a2 < -50.0)
  {
    result = swift_unknownObjectWeakLoadStrong(v3 + 56);
    if (result)
    {
      v21 = result;
      v22 = 1;
LABEL_17:
      sub_1000A5824(v22);
      return swift_unknownObjectRelease(v21);
    }
  }
  return result;
}

_QWORD *sub_1000FB3FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  result = sub_10001B474((_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 40));
  v6 = *(_QWORD *)(*result + 80);
  v7 = *(_QWORD *)(v6 + 16);
  v8 = 0uLL;
  if (v7)
  {
    v9 = (uint64_t *)(v6 + 56);
    do
    {
      v10 = *(v9 - 1);
      if (v10 <= a1)
      {
        if (__OFSUB__(a1, v10))
        {
          __break(1u);
          return result;
        }
        v11 = *v9;
        if (a1 - v10 < *v9)
        {
          v12 = 0;
          v8 = *(_OWORD *)(v9 - 3);
          goto LABEL_9;
        }
      }
      v9 += 4;
      --v7;
    }
    while (v7);
  }
  v10 = 0;
  v11 = 0;
  v12 = 1;
LABEL_9:
  *(_OWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v11;
  *(_BYTE *)(a2 + 32) = v12;
  return result;
}

uint64_t sub_1000FB4A0()
{
  uint64_t v0;

  sub_10001B498((_QWORD *)(v0 + 16));
  sub_1000A3170(v0 + 56);
  sub_1000A3170(v0 + 72);
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for TranscriptViewController()
{
  return objc_opt_self(_TtC10VoiceMemos24TranscriptViewController);
}

ValueMetadata *type metadata accessor for RCMoreButtonHelperController()
{
  return &type metadata for RCMoreButtonHelperController;
}

uint64_t destroy for TranscriptViewConfiguration(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;

  result = swift_bridgeObjectRelease(*(_QWORD *)a1);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 != 255)
    result = sub_1000A5568(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), v3 & 1);
  v4 = *(unsigned __int8 *)(a1 + 80);
  if (v4 != 255)
    return sub_1000A55B8(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v4 & 1);
  return result;
}

uint64_t initializeWithCopy for TranscriptViewConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  v5 = *((unsigned __int8 *)a2 + 24);
  swift_bridgeObjectRetain(v4);
  if (v5 == 255)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  }
  else
  {
    v6 = v5 & 1;
    v7 = a2[1];
    v8 = a2[2];
    sub_1000A5460(v7, v8, v6);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    *(_BYTE *)(a1 + 24) = v6;
  }
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  v9 = *((unsigned __int8 *)a2 + 80);
  if (v9 == 255)
  {
    v10 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 64) = v10;
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  }
  else
  {
    v11 = v9 & 1;
    v12 = a2[6];
    v13 = a2[7];
    v14 = a2[8];
    v15 = a2[9];
    sub_1000A54A0(v12, v13, v14, v15, v9 & 1);
    *(_QWORD *)(a1 + 48) = v12;
    *(_QWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = v15;
    *(_BYTE *)(a1 + 80) = v11;
  }
  *(_WORD *)(a1 + 81) = *(_WORD *)((char *)a2 + 81);
  *(_QWORD *)(a1 + 88) = a2[11];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  return a1;
}

uint64_t *assignWithCopy for TranscriptViewConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  int v8;
  char v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  int v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (__int128 *)(a1 + 1);
  v7 = (__int128 *)(a2 + 1);
  v8 = *((unsigned __int8 *)a2 + 24);
  if (*((unsigned __int8 *)a1 + 24) == 255)
  {
    if (v8 == 255)
    {
      v10 = *v7;
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      *v6 = v10;
    }
    else
    {
      v17 = v8 & 1;
      v18 = a2[1];
      v19 = a2[2];
      sub_1000A5460(v18, v19, v8 & 1);
      a1[1] = v18;
      a1[2] = v19;
      *((_BYTE *)a1 + 24) = v17;
    }
  }
  else if (v8 == 255)
  {
    sub_1000FB874((uint64_t)(a1 + 1));
    v9 = *((_BYTE *)a2 + 24);
    *v6 = *v7;
    *((_BYTE *)a1 + 24) = v9;
  }
  else
  {
    v11 = v8 & 1;
    v12 = a2[1];
    v13 = a2[2];
    sub_1000A5460(v12, v13, v8 & 1);
    v14 = a1[1];
    v15 = a1[2];
    v16 = *((_BYTE *)a1 + 24);
    a1[1] = v12;
    a1[2] = v13;
    *((_BYTE *)a1 + 24) = v11;
    sub_1000A5568(v14, v15, v16);
  }
  v20 = a2[4];
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  a1[4] = v20;
  *((_BYTE *)a1 + 41) = *((_BYTE *)a2 + 41);
  v21 = (__int128 *)(a1 + 6);
  v22 = (__int128 *)(a2 + 6);
  v23 = *((unsigned __int8 *)a2 + 80);
  if (*((unsigned __int8 *)a1 + 80) == 255)
  {
    if (v23 == 255)
    {
      v26 = *v22;
      v27 = *((_OWORD *)a2 + 4);
      *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
      *v21 = v26;
      *((_OWORD *)a1 + 4) = v27;
    }
    else
    {
      v38 = v23 & 1;
      v39 = a2[6];
      v40 = a2[7];
      v41 = a2[8];
      v42 = a2[9];
      sub_1000A54A0(v39, v40, v41, v42, v23 & 1);
      a1[6] = v39;
      a1[7] = v40;
      a1[8] = v41;
      a1[9] = v42;
      *((_BYTE *)a1 + 80) = v38;
    }
  }
  else if (v23 == 255)
  {
    sub_1000FB8A4((uint64_t)(a1 + 6));
    v24 = *((_BYTE *)a2 + 80);
    v25 = *((_OWORD *)a2 + 4);
    *v21 = *v22;
    *((_OWORD *)a1 + 4) = v25;
    *((_BYTE *)a1 + 80) = v24;
  }
  else
  {
    v28 = v23 & 1;
    v29 = a2[6];
    v30 = a2[7];
    v31 = a2[8];
    v32 = a2[9];
    sub_1000A54A0(v29, v30, v31, v32, v23 & 1);
    v33 = a1[6];
    v34 = a1[7];
    v35 = a1[8];
    v36 = a1[9];
    v37 = *((_BYTE *)a1 + 80);
    a1[6] = v29;
    a1[7] = v30;
    a1[8] = v31;
    a1[9] = v32;
    *((_BYTE *)a1 + 80) = v28;
    sub_1000A55B8(v33, v34, v35, v36, v37);
  }
  *((_BYTE *)a1 + 81) = *((_BYTE *)a2 + 81);
  *((_BYTE *)a1 + 82) = *((_BYTE *)a2 + 82);
  v43 = a2[11];
  *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
  a1[11] = v43;
  return a1;
}

uint64_t sub_1000FB874(uint64_t a1)
{
  sub_1000A5568(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_1000FB8A4(uint64_t a1)
{
  sub_1000A55B8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

__n128 initializeWithTake for TranscriptViewConfiguration(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t *assignWithTake for TranscriptViewConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a2 + 1;
  v6 = *((unsigned __int8 *)a1 + 24);
  if (v6 == 255)
    goto LABEL_4;
  v7 = *((unsigned __int8 *)a2 + 24);
  if (v7 == 255)
  {
    sub_1000FB874((uint64_t)(a1 + 1));
LABEL_4:
    *(_OWORD *)(a1 + 1) = *v5;
    *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
    goto LABEL_6;
  }
  v8 = a1[1];
  v9 = a1[2];
  *(_OWORD *)(a1 + 1) = *v5;
  *((_BYTE *)a1 + 24) = v7 & 1;
  sub_1000A5568(v8, v9, v6 & 1);
LABEL_6:
  a1[4] = a2[4];
  *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
  v10 = *((unsigned __int8 *)a1 + 80);
  if (v10 != 255)
  {
    v11 = *((unsigned __int8 *)a2 + 80);
    if (v11 != 255)
    {
      v13 = a1[6];
      v14 = a1[7];
      v15 = a1[8];
      v16 = a1[9];
      v17 = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 4) = v17;
      *((_BYTE *)a1 + 80) = v11 & 1;
      sub_1000A55B8(v13, v14, v15, v16, v10 & 1);
      goto LABEL_11;
    }
    sub_1000FB8A4((uint64_t)(a1 + 6));
  }
  v12 = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 4) = v12;
  *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
LABEL_11:
  *((_BYTE *)a1 + 81) = *((_BYTE *)a2 + 81);
  *((_BYTE *)a1 + 82) = *((_BYTE *)a2 + 82);
  a1[11] = a2[11];
  *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for TranscriptViewConfiguration(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 97))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TranscriptViewConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 97) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TranscriptViewConfiguration()
{
  return &type metadata for TranscriptViewConfiguration;
}

uint64_t destroy for EmptyStateStyle(uint64_t a1)
{
  return sub_1000A55B8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for EmptyStateStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1000A54A0(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for EmptyStateStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1000A54A0(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  sub_1000A55B8(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for EmptyStateStyle(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for EmptyStateStyle(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  sub_1000A55B8(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for EmptyStateStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EmptyStateStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000FBCA8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1000FBCB0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for EmptyStateStyle()
{
  return &type metadata for EmptyStateStyle;
}

uint64_t destroy for HighlightStyle(uint64_t a1)
{
  return sub_1000A5568(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s10VoiceMemos14HighlightStyleOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000A5460(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for HighlightStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000A5460(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000A5568(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for HighlightStyle(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000A5568(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for HighlightStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HighlightStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000FBE4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1000FBE54(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for HighlightStyle()
{
  return &type metadata for HighlightStyle;
}

uint64_t sub_1000FBE70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a2;
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
      return sub_1001077C4(v4, v5);
    return 0;
  }
  if (!*(_BYTE *)(a2 + 16))
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  if ((sub_1001077C4(v4, v5) & 1) == 0)
    return 0;
  v5 = v6;
  v4 = v7;
  return sub_1001077C4(v4, v5);
}

uint64_t sub_1000FBED8(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];
  _BYTE v5[40];

  sub_1000F2FA4(a1, (uint64_t)v4);
  sub_1000F2FA4(a2, (uint64_t)v5);
  return sub_1000FBF88((uint64_t)v4, (uint64_t)v5) & 1;
}

BOOL sub_1000FBF20(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[6];
  char v12;
  _OWORD v13[6];
  char v14;

  v2 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v2;
  v12 = *(_BYTE *)(a1 + 96);
  v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 80);
  v14 = *(_BYTE *)(a2 + 96);
  v13[4] = v8;
  v13[5] = v9;
  v13[2] = v6;
  v13[3] = v7;
  return sub_1000FC0C0((uint64_t)v11, (uint64_t)v13);
}

uint64_t sub_1000FBF88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  sub_1000F2FA4(a1, (uint64_t)&v19);
  v3 = v19;
  if ((v23 & 1) == 0)
  {
    v11 = v20;
    sub_1000F2FA4(a2, (uint64_t)&v14);
    if ((v18 & 1) == 0)
    {
      if (v3 == v14 && v11 == v15)
        goto LABEL_24;
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v11, v14, v15, 0);
      return v10 & 1;
    }
LABEL_10:
    v10 = 0;
    return v10 & 1;
  }
  v5 = v20;
  v4 = v21;
  v6 = v22;
  sub_1000F2FA4(a2, (uint64_t)&v14);
  if (v18 != 1)
    goto LABEL_10;
  v7 = v16;
  v8 = v17;
  if (!v5)
  {
    if (!v15)
      goto LABEL_17;
    goto LABEL_10;
  }
  if (!v15)
    goto LABEL_10;
  if (v3 == v14 && v5 == v15
    || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v14, v15, 0), v10 = 0, (v9 & 1) != 0))
  {
LABEL_17:
    if (v6)
    {
      if (v8 && (v4 == v7 && v6 == v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0) & 1) != 0))
        goto LABEL_24;
    }
    else if (!v8)
    {
LABEL_24:
      v10 = 1;
      return v10 & 1;
    }
    goto LABEL_10;
  }
  return v10 & 1;
}

BOOL sub_1000FC0C0(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  int v14;
  int v15;
  _BOOL8 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD v33[4];
  char v34;
  _QWORD v35[4];
  char v36;

  if ((sub_1001077C4(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0)
    return 0;
  v4 = *(unsigned __int8 *)(a1 + 24);
  v5 = *(unsigned __int8 *)(a2 + 24);
  if (v4 == 255)
  {
    if (v5 != 255)
      return 0;
  }
  else
  {
    if (v5 == 255)
      return 0;
    v7 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(a2 + 16);
    if ((v4 & 1) != 0)
    {
      if ((v5 & 1) == 0)
        return 0;
      sub_1000A5448(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24));
      sub_1000A5448(v7, v6, v4);
      if ((sub_1001077C4(v7, v9) & 1) == 0)
      {
        sub_1000A5550(v9, v8, v5);
        sub_1000A5550(v7, v6, v4);
        return 0;
      }
      v10 = v6;
      v11 = v8;
    }
    else
    {
      if ((v5 & 1) != 0)
        return 0;
      sub_1000A5448(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24));
      sub_1000A5448(v7, v6, v4);
      v10 = v7;
      v11 = v9;
    }
    v12 = sub_1001077C4(v10, v11);
    sub_1000A5550(v9, v8, v5);
    sub_1000A5550(v7, v6, v4);
    if ((v12 & 1) == 0)
      return 0;
  }
  v13 = *(_BYTE *)(a2 + 40);
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 40))
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
      v13 = 1;
    if ((v13 & 1) != 0)
      return 0;
  }
  v14 = *(unsigned __int8 *)(a1 + 41);
  v15 = *(unsigned __int8 *)(a2 + 41);
  if (v14 == 2)
  {
    if (v15 != 2)
      return 0;
LABEL_24:
    v18 = *(_QWORD *)(a1 + 48);
    v17 = *(_QWORD *)(a1 + 56);
    v20 = *(_QWORD *)(a1 + 64);
    v19 = *(_QWORD *)(a1 + 72);
    v21 = *(unsigned __int8 *)(a1 + 80);
    v23 = *(_QWORD *)(a2 + 48);
    v22 = *(_QWORD *)(a2 + 56);
    v25 = *(_QWORD *)(a2 + 64);
    v24 = *(_QWORD *)(a2 + 72);
    v26 = *(unsigned __int8 *)(a2 + 80);
    if (v21 == 255)
    {
      if (v26 == 255)
      {
LABEL_31:
        if (((*(unsigned __int8 *)(a1 + 81) ^ *(unsigned __int8 *)(a2 + 81)) & 1) != 0
          || ((*(unsigned __int8 *)(a1 + 82) ^ *(unsigned __int8 *)(a2 + 82)) & 1) != 0)
        {
          return 0;
        }
        v32 = *(_BYTE *)(a2 + 96);
        if ((*(_BYTE *)(a1 + 96) & 1) == 0)
        {
          if (*(double *)(a1 + 88) != *(double *)(a2 + 88))
            v32 = 1;
          return (v32 & 1) == 0;
        }
        return (*(_BYTE *)(a2 + 96) & 1) != 0;
      }
    }
    else if (v26 != 255)
    {
      v33[0] = *(_QWORD *)(a1 + 48);
      v33[1] = v17;
      v33[2] = v20;
      v33[3] = v19;
      v34 = v21 & 1;
      v35[0] = v23;
      v35[1] = v22;
      v35[2] = v25;
      v35[3] = v24;
      v36 = v26 & 1;
      if ((sub_1000FBF88((uint64_t)v33, (uint64_t)v35) & 1) == 0)
        return 0;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(a1 + 48);
    v28 = *(_QWORD *)(a1 + 56);
    v29 = *(_QWORD *)(a2 + 64);
    v30 = *(_QWORD *)(a1 + 64);
    v31 = v24;
    sub_1000A5488(v27, v28, v30, v19, v21);
    sub_1000A5488(v23, v22, v29, v31, v26);
    sub_1000A55A0(v18, v17, v20, v19, v21);
    sub_1000A55A0(v23, v22, v29, v31, v26);
    return 0;
  }
  result = 0;
  if (v15 != 2 && ((v15 ^ v14) & 1) == 0)
    goto LABEL_24;
  return result;
}

uint64_t storeEnumTagSinglePayload for AutoScrollStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000FC3CC + 4 * byte_10018CC65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000FC400 + 4 * byte_10018CC60[v4]))();
}

uint64_t sub_1000FC400(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FC408(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000FC410);
  return result;
}

uint64_t sub_1000FC41C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000FC424);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000FC428(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FC430(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AutoScrollStyle()
{
  return &type metadata for AutoScrollStyle;
}

unint64_t sub_1000FC450()
{
  unint64_t result;

  result = qword_1001ECF38[0];
  if (!qword_1001ECF38[0])
  {
    result = swift_getWitnessTable(&unk_10018CD64, &type metadata for AutoScrollStyle);
    atomic_store(result, qword_1001ECF38);
  }
  return result;
}

uint64_t sub_1000FC494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t type metadata accessor for ReadOnlyCurrentValueSubject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000AAE28(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReadOnlyCurrentValueSubject);
}

uint64_t sub_1000FC4A8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

uint64_t sub_1000FC4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return CurrentValueSubject.receive<A>(subscriber:)(a1, a5, a6);
}

uint64_t sub_1000FC4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1000FC4B0(a1, *v4, a3, a4, a2, a3);
}

unint64_t sub_1000FC4EC()
{
  unint64_t result;

  result = qword_1001ECFC0;
  if (!qword_1001ECFC0)
  {
    result = swift_getWitnessTable(&unk_10018CF00, &type metadata for RCControlCenterToggleRecording);
    atomic_store(result, (unint64_t *)&qword_1001ECFC0);
  }
  return result;
}

unint64_t sub_1000FC534()
{
  unint64_t result;

  result = qword_1001ECFC8;
  if (!qword_1001ECFC8)
  {
    result = swift_getWitnessTable(&unk_10018CF28, &type metadata for RCControlCenterToggleRecording);
    atomic_store(result, (unint64_t *)&qword_1001ECFC8);
  }
  return result;
}

unint64_t sub_1000FC57C()
{
  unint64_t result;

  result = qword_1001ECFD0;
  if (!qword_1001ECFD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Bool, &type metadata for Bool);
    atomic_store(result, (unint64_t *)&qword_1001ECFD0);
  }
  return result;
}

uint64_t sub_1000FC5C0()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_1000B52C4(v0, qword_1001F6E70);
  sub_1000AACFC(v0, (uint64_t)qword_1001F6E70);
  return LocalizedStringResource.init(stringLiteral:)(0xD00000000000002CLL, 0x80000001001860D0);
}

uint64_t sub_1000FC620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[15] = v4;
  v3[16] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[17] = v5;
  v3[18] = v6;
  return swift_task_switch(sub_1000FC694, v5, v6);
}

uint64_t sub_1000FC694()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = IntentParameter.wrappedValue.getter(v0 + 25);
  v2 = v0[15];
  if (*((_BYTE *)v0 + 200) == 1)
  {
    AppDependency.wrappedValue.getter(v1);
    v3 = sub_10001B474(v0 + 7, v0[10]);
    v0[19] = static MainActor.shared.getter(v3);
    v4 = (_QWORD *)swift_task_alloc(dword_1001ED324);
    v0[20] = v4;
    *v4 = v0;
    v4[1] = sub_1000FC79C;
    return sub_100100E9C(0, 0);
  }
  else
  {
    AppDependency.wrappedValue.getter(v1);
    v6 = sub_10001B474(v0 + 2, v0[5]);
    v0[22] = *v6;
    v0[23] = static MainActor.shared.getter(v6);
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
    return swift_task_switch(sub_1000FC91C, v7, v8);
  }
}

uint64_t sub_1000FC79C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(*(_QWORD *)(v2 + 120), &protocol witness table for MainActor);
  if (v0)
    v6 = sub_1000FC8A4;
  else
    v6 = sub_1000FC824;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_1000FC824()
{
  _QWORD *v0;

  swift_release(v0[19]);
  return swift_task_switch(sub_1000FC85C, v0[17], v0[18]);
}

uint64_t sub_1000FC85C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 128));
  v1 = sub_10001B498((_QWORD *)(v0 + 56));
  static IntentResult.result<>()(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FC8A4()
{
  _QWORD *v0;

  swift_release(v0[19]);
  return swift_task_switch(sub_1000FC8DC, v0[17], v0[18]);
}

uint64_t sub_1000FC8DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 128));
  sub_10001B498((_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FC91C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  unint64_t v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 176);
  swift_release(*(_QWORD *)(v0 + 184));
  if (objc_msgSend(v1, "isRecording"))
  {
    objc_msgSend(*(id *)(v0 + 176), "performAction:atPosition:forUUID:sourceController:source:", 4, 0, 0, 0, 0.0);
    v2 = *(_QWORD *)(v0 + 136);
    v3 = *(_QWORD *)(v0 + 144);
    v4 = sub_1000FC9CC;
  }
  else
  {
    v5 = sub_1000DEAD4();
    v6 = swift_allocError(&type metadata for StopRecordingError, v5, 0, 0);
    *(_QWORD *)(v0 + 192) = v6;
    swift_willThrow(v6);
    v2 = *(_QWORD *)(v0 + 136);
    v3 = *(_QWORD *)(v0 + 144);
    v4 = sub_1000FCA14;
  }
  return swift_task_switch(v4, v2, v3);
}

uint64_t sub_1000FC9CC()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 128));
  v1 = sub_10001B498((_QWORD *)(v0 + 16));
  static IntentResult.result<>()(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FCA14()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 128));
  sub_10001B498((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_1000FCA54@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1000FCA8C(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

unint64_t sub_1000FCAC4()
{
  unint64_t result;

  result = qword_1001ECFD8;
  if (!qword_1001ECFD8)
  {
    result = swift_getWitnessTable(&unk_10018CFB8, &type metadata for RCControlCenterToggleRecording);
    atomic_store(result, (unint64_t *)&qword_1001ECFD8);
  }
  return result;
}

unint64_t sub_1000FCB0C()
{
  unint64_t result;

  result = qword_1001ECFE0;
  if (!qword_1001ECFE0)
  {
    result = swift_getWitnessTable(&unk_10018CFE0, &type metadata for RCControlCenterToggleRecording);
    atomic_store(result, (unint64_t *)&qword_1001ECFE0);
  }
  return result;
}

uint64_t sub_1000FCB50(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100199880, 1);
}

uint64_t sub_1000FCB60(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1000FC534();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_1000FCBA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1001E9080 != -1)
    swift_once(&qword_1001E9080, sub_1000FC5C0);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_1000AACFC(v2, (uint64_t)qword_1001F6E70);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1000FCC10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for IntentAuthenticationPolicy.alwaysAllowed(_:);
  v3 = type metadata accessor for IntentAuthenticationPolicy(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_1000FCC54(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc(dword_1001ED00C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100003A7C;
  return sub_1000FC620(a1, v5, v4);
}

uint64_t sub_1000FCCB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000FCD14();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000FCCDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000FC534();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for RCControlCenterToggleRecording()
{
  return &type metadata for RCControlCenterToggleRecording;
}

uint64_t sub_1000FCD14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v24[2];
  _BYTE v25[40];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v24[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100014E10(&qword_1001EA200);
  __chkstk_darwin(v4);
  v6 = (char *)&v24[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100014E10(&qword_1001ECFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v24[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100014E10(&qword_1001EB758);
  __chkstk_darwin(v10);
  v12 = (char *)&v24[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v24[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014E10(&qword_1001ECFF8);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000002FLL, 0x80000001001860A0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v25[0] = 2;
  v17 = type metadata accessor for Bool.IntentDisplayName(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 1, 1, v17);
  v18 = type metadata accessor for IntentDialog(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 1, 1, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v16, v12, v25, v9, v6, v3);
  sub_100014E10(&qword_1001ED000);
  v24[0] = 0xD00000000000002FLL;
  v24[1] = 0x8000000100184500;
  AnyHashable.init<A>(_:)(v24, &type metadata for String, &protocol witness table for String);
  type metadata accessor for AppDependencyManager(0, v20);
  v21 = static AppDependencyManager.shared.getter();
  AppDependency.__allocating_init(key:manager:)(v25, v21);
  return v19;
}

void sub_1000FD038(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;

  v2 = v1;
  if (a1)
    objc_msgSend(a1, "removeTimeObserver:", v1);
  v3 = OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_timeController;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_timeController);
  if (v4)
  {
    objc_msgSend(v4, "addTimeObserver:", v1);
    v5 = *(_QWORD *)(v1 + v3);
  }
  else
  {
    v5 = 0;
  }
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_dataProvider);
  v7 = *(void **)(v6 + 56);
  *(_QWORD *)(v6 + 56) = v5;
  swift_unknownObjectRetain_n(v5, 2);
  swift_retain(v6);
  sub_1000F7E00(v7);
  swift_release(v6);
  swift_unknownObjectRelease(v7);
  swift_unknownObjectRelease(v5);
  v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_interactionDelegate);
  v9 = *(_QWORD *)(v2 + v3);
  v10 = *(_QWORD *)(v8 + 56);
  *(_QWORD *)(v8 + 56) = v9;
  swift_unknownObjectRetain(v9);
  swift_unknownObjectRelease(v10);
  v11 = *(void **)(v2 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_configurationMediator);
  v12 = *(_QWORD *)(v2 + v3);
  swift_unknownObjectRetain(v12);
  v13 = v11;
  sub_1000BDE24(v12);

}

id sub_1000FD1F0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator____lazy_storage___transcriptView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator____lazy_storage___transcriptView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator____lazy_storage___transcriptView);
  }
  else
  {
    v4 = *(void **)(*sub_10001B474((_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewPresenter), *(_QWORD *)(v0+ OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewPresenter+ 24))+ 96);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

char *sub_1000FD29C()
{
  _BYTE *v0;
  void *v1;
  char *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  objc_class *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  id v42;
  objc_super v43;
  __int128 v44;
  uint64_t v45;
  _UNKNOWN **v46;
  __int128 v47;
  uint64_t v48;
  _UNKNOWN **v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;

  *(_QWORD *)&v0[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_timeController] = 0;
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewHost], 0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator____lazy_storage___transcriptView] = 0;
  v0[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isDisplayingTranscriptView] = 0;
  v0[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isWindowSceneInForeground] = 0;
  v1 = (void *)objc_opt_self(RecorderAppDelegate);
  v2 = v0;
  v3 = objc_msgSend(v1, "sharedAppDelegate");
  if (!v3)
    goto LABEL_5;
  v4 = v3;
  v5 = objc_msgSend(v3, "defaultSceneDelegate");

  if (!v5)
    goto LABEL_5;
  v6 = objc_msgSend(v5, "mainViewController");

  v7 = objc_msgSend(v6, "mainControllerHelper");
  v8 = objc_msgSend(v7, "activityStatePublisher");

  if (v8)
  {
    *((_QWORD *)&v51 + 1) = type metadata accessor for RCUserActivityStatePublisher();
    *(_QWORD *)&v52 = &off_1001AF390;
    *(_QWORD *)&v50 = v8;
  }
  else
  {
LABEL_5:
    v8 = 0;
    *(_QWORD *)&v52 = 0;
    v50 = 0u;
    v51 = 0u;
  }
  v9 = qword_1001E9058;
  v42 = v8;
  if (v9 != -1)
    swift_once(&qword_1001E9058, sub_1000EB6A4);
  v10 = *(_QWORD *)(qword_1001F6E18
                  + OBJC_IVAR____TtC10VoiceMemos30TranscriptionModelAssetService__downloadStateValueSubject);
  v11 = type metadata accessor for TranscriptViewContextProvider();
  swift_allocObject(v11, 64, 7);
  swift_retain(v10);
  v12 = sub_1000C454C((uint64_t)&v50, v10);
  swift_release(v10);
  v13 = OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_contextProvider;
  *(_QWORD *)&v2[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_contextProvider] = v12;
  v14 = type metadata accessor for TranscriptViewDataProvider();
  swift_allocObject(v14, 136, 7);
  v15 = sub_1000F7E8C();
  v16 = OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_dataProvider;
  *(_QWORD *)&v2[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_dataProvider] = v15;
  v17 = type metadata accessor for TranscriptViewConfigurationProvider();
  v18 = swift_allocObject(v17, 130, 7);
  *(_QWORD *)(v18 + 24) = 0;
  swift_unknownObjectWeakInit(v18 + 16, 0);
  *(_BYTE *)(v18 + 129) = 5;
  sub_1000A4FAC(5);
  v19 = v55;
  *(_OWORD *)(v18 + 96) = v54;
  *(_OWORD *)(v18 + 112) = v19;
  *(_BYTE *)(v18 + 128) = v56;
  v20 = v51;
  *(_OWORD *)(v18 + 32) = v50;
  *(_OWORD *)(v18 + 48) = v20;
  v21 = v53;
  *(_OWORD *)(v18 + 64) = v52;
  *(_OWORD *)(v18 + 80) = v21;
  v22 = OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_configurationProvider;
  *(_QWORD *)&v2[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_configurationProvider] = v18;
  v23 = *(_QWORD *)&v2[v13];
  swift_retain(v18);
  swift_retain(v23);
  *(_QWORD *)&v2[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_configurationMediator] = sub_1000FE3A8(v18, v23);
  v24 = *(_QWORD *)&v2[v13];
  v48 = v11;
  v49 = &off_1001AF8F0;
  *(_QWORD *)&v47 = v24;
  v25 = type metadata accessor for TranscriptViewInteractionHandler();
  v26 = swift_allocObject(v25, 72, 7);
  v27 = sub_1000AD178((uint64_t)&v47, v11);
  __chkstk_darwin(v27);
  v29 = (uint64_t *)((char *)&v41 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  v31 = *v29;
  v45 = v11;
  v46 = &off_1001AF8F0;
  *(_QWORD *)&v44 = v31;
  *(_QWORD *)(v26 + 56) = 0;
  swift_unknownObjectWeakInit(v26 + 64, 0);
  sub_10001BBCC(&v44, v26 + 16);
  swift_retain(v24);
  sub_10001B498(&v47);
  *(_QWORD *)&v2[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_interactionDelegate] = v26;
  v32 = *(_QWORD *)&v2[v22];
  v33 = *(_QWORD *)&v2[v16];
  v34 = *(_QWORD *)&v2[v13];
  swift_retain(v32);
  swift_retain(v33);
  swift_retain(v26);
  swift_retain(v34);
  v35 = sub_1000FE4E0(v32, v33, v26, (uint64_t)&off_1001AE030, v34, (uint64_t)&off_1001AF8D0);
  swift_release(v26);
  swift_release(v34);
  sub_1000ACC58((uint64_t *)&v47);
  sub_10001BBCC(&v47, (uint64_t)&v2[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewPresenter]);

  v36 = (objc_class *)type metadata accessor for TranscriptViewCoordinator();
  v43.receiver = v2;
  v43.super_class = v36;
  v37 = (char *)objc_msgSendSuper2(&v43, "init");

  swift_release(v35);
  v38 = *(_QWORD *)&v37[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_configurationProvider];
  *(_QWORD *)(v38 + 24) = &off_1001B2590;
  swift_unknownObjectWeakAssign(v38 + 16, v37);
  v39 = *(_QWORD *)&v37[OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_dataProvider];
  *(_QWORD *)(v39 + 24) = &off_1001B25A0;
  swift_unknownObjectWeakAssign(v39 + 16, v37);
  return v37;
}

id sub_1000FDA9C()
{
  uint64_t v0;
  id result;
  char v2;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isDisplayingTranscriptView) == 1)
  {
    result = *(id *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_timeController);
    if (!result)
    {
      if (!*(_BYTE *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isWindowSceneInForeground))
        return result;
      goto LABEL_8;
    }
    v2 = *(_BYTE *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isWindowSceneInForeground) ^ 1;
  }
  else
  {
    result = *(id *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_timeController);
    if (!result)
      return result;
    v2 = 1;
  }
  result = objc_msgSend(result, "timeControllerState");
  if (!result && (v2 & 1) == 0)
  {
LABEL_8:
    sub_10001B474((_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewPresenter), *(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewPresenter + 24));
    return (id)sub_1000F23BC();
  }
  return result;
}

id sub_1000FDB38()
{
  uint64_t v0;
  char v1;
  id result;
  char v3;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isWindowSceneInForeground) = 1;
  v1 = *(_BYTE *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isDisplayingTranscriptView);
  result = *(id *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_timeController);
  if (!result)
  {
    if (!*(_BYTE *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isDisplayingTranscriptView))
      return result;
    goto LABEL_6;
  }
  result = objc_msgSend(result, "timeControllerState");
  if (result)
    v3 = 0;
  else
    v3 = v1;
  if ((v3 & 1) != 0)
  {
LABEL_6:
    sub_10001B474((_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewPresenter), *(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewPresenter + 24));
    return (id)sub_1000F23BC();
  }
  return result;
}

id sub_1000FDBFC()
{
  uint64_t v0;
  char v1;
  id result;
  char v3;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isDisplayingTranscriptView) = 1;
  v1 = *(_BYTE *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isWindowSceneInForeground);
  result = *(id *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_timeController);
  if (!result)
  {
    if (!*(_BYTE *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isWindowSceneInForeground))
      return result;
    goto LABEL_6;
  }
  result = objc_msgSend(result, "timeControllerState");
  if (result)
    v3 = 0;
  else
    v3 = v1;
  if ((v3 & 1) != 0)
  {
LABEL_6:
    sub_10001B474((_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewPresenter), *(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewPresenter + 24));
    return (id)sub_1000F23BC();
  }
  return result;
}

double sub_1000FDCC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const mach_header_64 *v15;
  double result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_contextProvider);
  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(unsigned __int8 *)(v1 + 48);
  v4 = *(unsigned __int8 *)(v1 + 49);
  v5 = *(unsigned __int8 *)(v1 + 50);
  v6 = *(unsigned __int8 *)(v1 + 51);
  v7 = *(unsigned __int8 *)(v1 + 52);
  v8 = *(double *)(v1 + 56);
  *(_BYTE *)(v1 + 49) = v4;
  *(_BYTE *)(v1 + 50) = v5;
  *(_BYTE *)(v1 + 51) = v6;
  *(_BYTE *)(v1 + 52) = 1;
  v9 = *(unsigned __int16 *)(v1 + 32);
  sub_1000BED80(v2, v3);
  sub_1000BED80(v2, v3);
  sub_1000BED80(v2, v3);
  swift_retain(v1);
  sub_1000BED94(v2, v3);
  v10 = 256;
  if (!v4)
    v10 = 0;
  v11 = v10 | v3;
  v12 = 0x10000;
  if (!v5)
    v12 = 0;
  v13 = 0x1000000;
  if (!v6)
    v13 = 0;
  v14 = v11 | v12 | v13;
  v15 = &_mh_execute_header;
  if (!v7)
    v15 = 0;
  sub_1000C3168(v9, v2, v14 | (unint64_t)v15, v8);
  sub_1000BED94(v2, v3);
  sub_1000BED94(v2, v3);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

double sub_1000FDE10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const mach_header_64 *v15;
  double result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_contextProvider);
  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(unsigned __int8 *)(v1 + 48);
  v4 = *(unsigned __int8 *)(v1 + 49);
  v5 = *(unsigned __int8 *)(v1 + 50);
  v6 = *(unsigned __int8 *)(v1 + 51);
  v7 = *(unsigned __int8 *)(v1 + 52);
  v8 = *(double *)(v1 + 56);
  *(_BYTE *)(v1 + 49) = v4;
  *(_BYTE *)(v1 + 50) = v5;
  *(_WORD *)(v1 + 51) = v6;
  v9 = *(unsigned __int16 *)(v1 + 32);
  sub_1000BED80(v2, v3);
  sub_1000BED80(v2, v3);
  sub_1000BED80(v2, v3);
  swift_retain(v1);
  sub_1000BED94(v2, v3);
  v10 = 256;
  if (!v4)
    v10 = 0;
  v11 = v10 | v3;
  v12 = 0x10000;
  if (!v5)
    v12 = 0;
  v13 = 0x1000000;
  if (!v6)
    v13 = 0;
  v14 = v11 | v12 | v13;
  v15 = &_mh_execute_header;
  if (!v7)
    v15 = 0;
  sub_1000C3168(v9, v2, v14 | (unint64_t)v15, v8);
  sub_1000BED94(v2, v3);
  sub_1000BED94(v2, v3);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

double sub_1000FDF5C(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const mach_header_64 *v16;
  double result;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_contextProvider);
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(unsigned __int8 *)(v2 + 48);
  v5 = *(unsigned __int8 *)(v2 + 49);
  v6 = *(unsigned __int8 *)(v2 + 50);
  v7 = *(unsigned __int8 *)(v2 + 51);
  v8 = *(unsigned __int8 *)(v2 + 52);
  v9 = *(double *)(v2 + 56);
  *(_BYTE *)(v2 + 49) = v5;
  *(_BYTE *)(v2 + 50) = v6;
  *(_BYTE *)(v2 + 51) = v7;
  *(_BYTE *)(v2 + 52) = v8;
  *(double *)(v2 + 56) = a1;
  v10 = *(unsigned __int16 *)(v2 + 32);
  sub_1000BED80(v3, v4);
  sub_1000BED80(v3, v4);
  sub_1000BED80(v3, v4);
  swift_retain(v2);
  sub_1000BED94(v3, v4);
  v11 = 256;
  if (!v5)
    v11 = 0;
  v12 = v11 | v4;
  v13 = 0x10000;
  if (!v6)
    v13 = 0;
  v14 = 0x1000000;
  if (!v7)
    v14 = 0;
  v15 = v12 | v13 | v14;
  v16 = &_mh_execute_header;
  if (!v8)
    v16 = 0;
  sub_1000C3168(v10, v3, v15 | (unint64_t)v16, v9);
  sub_1000BED94(v3, v4);
  sub_1000BED94(v3, v4);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

id sub_1000FE0BC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TranscriptViewCoordinator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TranscriptViewCoordinator()
{
  return objc_opt_self(_TtC10VoiceMemos25TranscriptViewCoordinator);
}

char *sub_1000FE1B4(uint64_t a1, uint64_t a2, char *a3)
{
  id v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  objc_super v17;
  _QWORD v18[3];
  uint64_t v19;
  _UNKNOWN **v20;
  _QWORD v21[5];

  v21[3] = type metadata accessor for TranscriptViewConfigurationProvider();
  v21[4] = &off_1001ADF10;
  v21[0] = a1;
  v19 = type metadata accessor for TranscriptViewContextProvider();
  v20 = &off_1001AF8F0;
  *(_QWORD *)&a3[OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextChangedCancellable] = 0;
  v18[0] = a2;
  *(_QWORD *)&a3[OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_autoScrollTimeoutDuration] = 0x4014000000000000;
  *(_QWORD *)&a3[OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_autoScrollTimer] = 0;
  *(_QWORD *)&a3[OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_timeController] = 0;
  sub_10001BB88((uint64_t)v21, (uint64_t)&a3[OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_configurationManager]);
  sub_10001BB88((uint64_t)v18, (uint64_t)&a3[OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextProvider]);
  v17.receiver = a3;
  v17.super_class = (Class)type metadata accessor for TranscriptViewConfigurationMediator();
  v6 = objc_msgSendSuper2(&v17, "init");
  sub_10001B474(v18, v19);
  v7 = (char *)v6;
  v8 = sub_100014E10(&qword_1001ED1B0);
  v9 = sub_10000EDB0(&qword_1001ED1B8, &qword_1001ED1B0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v16 = Publisher.eraseToAnyPublisher()(v8, v9);
  v10 = swift_allocObject(&unk_1001B25C8, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, v7);
  v11 = sub_100014E10(&qword_1001ED1C0);
  v12 = sub_10000EDB0(&qword_1001ED1C8, &qword_1001ED1C0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v13 = Publisher<>.sink(receiveValue:)(sub_1000FE738, v10, v11, v12);
  swift_release(v10);

  sub_10001B498(v21);
  swift_release(v16);
  v14 = *(_QWORD *)&v7[OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextChangedCancellable];
  *(_QWORD *)&v7[OBJC_IVAR____TtC10VoiceMemos35TranscriptViewConfigurationMediator_contextChangedCancellable] = v13;
  swift_release(v14);
  sub_10001B498(v18);
  return v7;
}

char *sub_1000FE3A8(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  _QWORD v15[3];
  uint64_t v16;
  _UNKNOWN **v17;
  _QWORD v18[3];
  uint64_t v19;
  _UNKNOWN **v20;

  v19 = type metadata accessor for TranscriptViewConfigurationProvider();
  v20 = &off_1001ADF10;
  v18[0] = a1;
  v16 = type metadata accessor for TranscriptViewContextProvider();
  v17 = &off_1001AF8F0;
  v15[0] = a2;
  v4 = (char *)objc_allocWithZone((Class)type metadata accessor for TranscriptViewConfigurationMediator());
  v5 = sub_1000AD178((uint64_t)v18, v19);
  __chkstk_darwin(v5);
  v7 = (_QWORD *)((char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v8 + 16))(v7);
  v9 = sub_1000AD178((uint64_t)v15, v16);
  __chkstk_darwin(v9);
  v11 = (_QWORD *)((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  v13 = sub_1000FE1B4(*v7, *v11, v4);
  sub_10001B498(v15);
  sub_10001B498(v18);
  return v13;
}

_QWORD *sub_1000FE4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  _UNKNOWN **v30;
  _QWORD v31[5];

  v26 = a6;
  v27 = a5;
  v10 = type metadata accessor for TranscriptViewConfigurationProvider();
  v31[3] = v10;
  v31[4] = &off_1001ADF48;
  v31[0] = a1;
  v11 = type metadata accessor for TranscriptViewDataProvider();
  v29 = v11;
  v30 = &off_1001B1FA0;
  v28[0] = a2;
  v12 = type metadata accessor for TranscriptViewFactory();
  v13 = (_QWORD *)swift_allocObject(v12, 144, 7);
  v14 = sub_1000AD178((uint64_t)v31, v10);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = sub_1000AD178((uint64_t)v28, v29);
  __chkstk_darwin(v18);
  v20 = (uint64_t *)((char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = *v16;
  v23 = *v20;
  v13[5] = v10;
  v13[6] = &off_1001ADF48;
  v13[2] = v22;
  v13[10] = v11;
  v13[11] = &off_1001B1FA0;
  v13[7] = v23;
  v13[13] = 0;
  swift_unknownObjectWeakInit(v13 + 12, 0);
  v13[15] = 0;
  swift_unknownObjectWeakInit(v13 + 14, 0);
  v13[16] = 0;
  v13[17] = 0;
  v13[13] = a4;
  swift_unknownObjectWeakAssign(v13 + 12, a3);
  v24 = v27;
  v13[15] = v26;
  swift_unknownObjectWeakAssign(v13 + 14, v24);
  sub_10001B498(v28);
  sub_10001B498(v31);
  return v13;
}

id sub_1000FE698()
{
  uint64_t v0;
  int v1;
  id result;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isDisplayingTranscriptView) == 1)
    v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_isWindowSceneInForeground);
  else
    v1 = 0;
  result = *(id *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_timeController);
  if (result)
    result = objc_msgSend(result, "timeControllerState");
  if (v1)
  {
    sub_10001B474((_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewPresenter), *(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos25TranscriptViewCoordinator_transcriptViewPresenter + 24));
    return (id)sub_1000F23BC();
  }
  return result;
}

uint64_t sub_1000FE714()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000FE738(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_1000BDE9C(a1, v1);
}

void sub_1000FE870(int a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSString v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  NSString v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  UIMenuElementSize v66;
  uint64_t v67;
  id v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  NSString v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  void *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  void *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  void *v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  id v107;
  double v108;
  id v109;
  id v110;
  void *v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  NSString v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  void *v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  NSString v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  Swift::String v135;
  Swift::OpaquePointer v136;
  unint64_t v137;
  id v138;
  unint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  id v143;
  id v144;
  void **aBlock;
  uint64_t v146;
  double (*v147)(uint64_t, void *);
  void *v148;
  uint64_t (*v149)(void (*)(uint64_t));
  uint64_t v150;
  UIImage_optional v151;

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v137 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v137 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100014E10((uint64_t *)&unk_1001E9190);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10018D0B0;
  v12 = (void *)objc_opt_self(RCRecorderStyleProvider);
  v13 = objc_msgSend(v12, "sharedStyleProvider");
  if (!v13)
  {
    __break(1u);
    goto LABEL_21;
  }
  v14 = v13;
  v140 = v10;
  v141 = a1;
  v143 = v12;
  v15 = objc_msgSend(v13, "editRecordingActivitySystemImageName");

  if (!v15)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v17 = v16;

  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  v144 = (id)objc_opt_self(UIImage);
  v19 = objc_msgSend(v144, "systemImageNamed:", v18);

  v20 = sub_100005310(0, &qword_1001ED208, UIAction_ptr);
  v21 = String.LocalizationValue.init(stringLiteral:)(0x4E454D5F54494445, 0xEE004D4554495F55);
  static Locale.current.getter(v21);
  v22 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, 0, v6, 0, 0, 256);
  v24 = v23;
  v25 = swift_allocObject(&unk_1001B2600, 24, 7);
  swift_unknownObjectWeakInit(v25 + 16, v2);
  *(_QWORD *)(v11 + 32) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v22, v24, 0, 0, v19, 0, 0, 0, 0, 0, 0, sub_10010001C, v25);
  v26 = v143;
  v27 = objc_msgSend(v143, "sharedStyleProvider");
  if (!v27)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v28 = v27;
  v29 = objc_msgSend(v27, "playbackSettingsImage");

  v139 = (unint64_t)"REMOVE_FROM_FAVORITES";
  v30 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001CLL, 0x8000000100186340);
  static Locale.current.getter(v30);
  v31 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, 0, v6, 0, 0, 256);
  v33 = v32;
  v34 = swift_allocObject(&unk_1001B2600, 24, 7);
  swift_unknownObjectWeakInit(v34 + 16, v2);
  v142 = v20;
  *(_QWORD *)(v11 + 40) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v31, v33, 0, 0, v29, 0, 0, 0, 0, 0, 0, sub_100100038, v34);
  v35 = (void *)objc_opt_self(UIDeferredMenuElement);
  v36 = swift_allocObject(&unk_1001B2650, 24, 7);
  *(_QWORD *)(v36 + 16) = v2;
  v149 = sub_100100054;
  v150 = v36;
  aBlock = _NSConcreteStackBlock;
  v146 = 1107296256;
  v147 = sub_1000FF8E8;
  v148 = &unk_1001B2668;
  v37 = _Block_copy(&aBlock);
  v38 = v150;
  v39 = v2;
  v40 = objc_msgSend(v35, "elementWithUncachedProvider:", v37, swift_release(v38).n128_f64[0]);
  _Block_release(v37);
  *(_QWORD *)(v11 + 48) = v40;
  v41 = objc_msgSend(v26, "sharedStyleProvider");
  v42 = v41;
  if (!v41)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v138 = v35;
  v43 = objc_msgSend(v41, "duplicateActivitySystemImageName");

  if (!v43)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
  v45 = v44;

  v46 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v45);
  v47 = objc_msgSend(v144, "systemImageNamed:", v46);

  v137 = (unint64_t)"v16@?0@?<v@?@\"NSArray\">8";
  v48 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x8000000100186380);
  static Locale.current.getter(v48);
  v49 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, 0, v6, 0, 0, 256);
  v51 = v50;
  v52 = swift_allocObject(&unk_1001B2600, 24, 7);
  swift_unknownObjectWeakInit(v52 + 16, v39);
  *(_QWORD *)(v11 + 56) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v49, v51, 0, 0, v47, 0, 0, 0, 0, 0, 0, sub_100100074, v52);
  v53 = objc_msgSend(v26, "sharedStyleProvider");
  if (!v53)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v54 = v53;
  v55 = objc_msgSend(v53, "moveToFolderActivitySystemImageName");

  if (!v55)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
  v57 = v56;

  v58 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v57);
  v59 = objc_msgSend(v144, "systemImageNamed:", v58);

  v60 = String.LocalizationValue.init(stringLiteral:)(0x5F4F545F45564F4DLL, 0xEE005245444C4F46);
  static Locale.current.getter(v60);
  v61 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, 0, v6, 0, 0, 256);
  v63 = v62;
  v64 = swift_allocObject(&unk_1001B2600, 24, 7);
  swift_unknownObjectWeakInit(v64 + 16, v39);
  v65 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v61, v63, 0, 0, v59, 0, 0, 0, 0, 0, 0, sub_100100090, v64);
  *(_QWORD *)(v11 + 64) = v65;
  aBlock = (void **)v11;
  specialized Array._endMutation()(v65);
  v66 = (UIMenuElementSize)aBlock;
  if ((v141 & 1) == 0)
  {
LABEL_19:
    sub_100005310(0, &qword_1001ED210, UIMenu_ptr);
    v135._countAndFlagsBits = 0;
    v135._object = (void *)0xE000000000000000;
    v151.value.super.isa = 0;
    v151.is_nil = 0;
    UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v135, (Swift::String_optional)0, v151, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v66, v136);
    return;
  }
  swift_bridgeObjectRelease(aBlock);
  v67 = swift_allocObject(v140, 88, 7);
  *(_OWORD *)(v67 + 16) = xmmword_10018D0C0;
  v68 = objc_msgSend(v26, "sharedStyleProvider");
  if (!v68)
    goto LABEL_27;
  v69 = v68;
  v70 = objc_msgSend(v68, "editRecordingActivitySystemImageName");

  if (!v70)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
  v72 = v71;

  v73 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v72);
  v74 = objc_msgSend(v144, "systemImageNamed:", v73);

  v75 = String.LocalizationValue.init(stringLiteral:)(0x4E454D5F54494445, 0xEE004D4554495F55);
  static Locale.current.getter(v75);
  v76 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, 0, v6, 0, 0, 256);
  v78 = v77;
  v79 = swift_allocObject(&unk_1001B2600, 24, 7);
  swift_unknownObjectWeakInit(v79 + 16, v39);
  *(_QWORD *)(v67 + 32) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v76, v78, 0, 0, v74, 0, 0, 0, 0, 0, 0, sub_10010001C, v79);
  v80 = objc_msgSend(v26, "sharedStyleProvider");
  if (!v80)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v81 = v80;
  v82 = objc_msgSend(v80, "playbackSettingsImage");

  v83 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001CLL, v139 | 0x8000000000000000);
  static Locale.current.getter(v83);
  v84 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, 0, v6, 0, 0, 256);
  v86 = v85;
  v87 = swift_allocObject(&unk_1001B2600, 24, 7);
  swift_unknownObjectWeakInit(v87 + 16, v39);
  *(_QWORD *)(v67 + 40) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v84, v86, 0, 0, v82, 0, 0, 0, 0, 0, 0, sub_100100038, v87);
  v88 = objc_msgSend(v26, "sharedStyleProvider");
  if (!v88)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v89 = v88;
  v90 = objc_msgSend(v88, "transcriptionImage");

  v91 = String.LocalizationValue.init(stringLiteral:)(0x4152545F57454956, 0xEF5450495243534ELL);
  static Locale.current.getter(v91);
  v92 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, 0, v6, 0, 0, 256);
  v94 = v93;
  v95 = swift_allocObject(&unk_1001B2600, 24, 7);
  swift_unknownObjectWeakInit(v95 + 16, v39);
  *(_QWORD *)(v67 + 48) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v92, v94, 0, 0, v90, 0, 0, 0, 0, 0, 0, sub_1001000AC, v95);
  v96 = objc_msgSend(v26, "sharedStyleProvider");
  if (!v96)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v97 = v96;
  v98 = objc_msgSend(v96, "copyTranscriptImage");

  v99 = String.LocalizationValue.init(stringLiteral:)(0x4152545F59504F43, 0xEF5450495243534ELL);
  static Locale.current.getter(v99);
  v100 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, 0, v6, 0, 0, 256);
  v102 = v101;
  v103 = swift_allocObject(&unk_1001B2600, 24, 7);
  swift_unknownObjectWeakInit(v103 + 16, v39);
  *(_QWORD *)(v67 + 56) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v100, v102, 0, 0, v98, 0, 0, 0, 0, 0, 0, sub_1001000B4, v103);
  v104 = swift_allocObject(&unk_1001B26A0, 24, 7);
  *(_QWORD *)(v104 + 16) = v39;
  v149 = sub_1001003AC;
  v150 = v104;
  aBlock = _NSConcreteStackBlock;
  v146 = 1107296256;
  v147 = sub_1000FF8E8;
  v148 = &unk_1001B26B8;
  v105 = _Block_copy(&aBlock);
  v106 = v150;
  v107 = v39;
  *(_QWORD *)&v108 = swift_release(v106).n128_u64[0];
  v109 = objc_msgSend(v138, "elementWithUncachedProvider:", v105, v108);
  _Block_release(v105);
  *(_QWORD *)(v67 + 64) = v109;
  v110 = objc_msgSend(v26, "sharedStyleProvider");
  if (!v110)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v111 = v110;
  v112 = objc_msgSend(v110, "duplicateActivitySystemImageName");

  if (!v112)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
  v114 = v113;

  v115 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v114);
  v116 = objc_msgSend(v144, "systemImageNamed:", v115);

  v117 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, v137 | 0x8000000000000000);
  static Locale.current.getter(v117);
  v118 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, 0, v6, 0, 0, 256);
  v120 = v119;
  v121 = swift_allocObject(&unk_1001B2600, 24, 7);
  swift_unknownObjectWeakInit(v121 + 16, v107);
  *(_QWORD *)(v67 + 72) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v118, v120, 0, 0, v116, 0, 0, 0, 0, 0, 0, sub_100100074, v121);
  v122 = objc_msgSend(v26, "sharedStyleProvider");
  if (!v122)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v123 = v122;
  v124 = objc_msgSend(v122, "moveToFolderActivitySystemImageName");

  if (v124)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v124);
    v126 = v125;

    v127 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v126);
    v128 = objc_msgSend(v144, "systemImageNamed:", v127);

    v129 = String.LocalizationValue.init(stringLiteral:)(0x5F4F545F45564F4DLL, 0xEE005245444C4F46);
    static Locale.current.getter(v129);
    v130 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, 0, v6, 0, 0, 256);
    v132 = v131;
    v133 = swift_allocObject(&unk_1001B2600, 24, 7);
    swift_unknownObjectWeakInit(v133 + 16, v107);
    v134 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v130, v132, 0, 0, v128, 0, 0, 0, 0, 0, 0, sub_100100090, v133);
    *(_QWORD *)(v67 + 80) = v134;
    aBlock = (void **)v67;
    specialized Array._endMutation()(v134);
    v66 = (UIMenuElementSize)aBlock;
    goto LABEL_19;
  }
LABEL_35:
  __break(1u);
}

uint64_t sub_1000FF7A0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void *v3;
  void *Strong;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _BYTE v9[24];

  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    v3 = (void *)result;
    sub_1000FFFAC(result + OBJC_IVAR____TtC10VoiceMemos18RCMoreButtonHelper_controller, (uint64_t)&v8);

    Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      v5 = Strong;
      objc_msgSend(Strong, "performControlsAction:position:source:", 23, 0, 0.0);
      swift_unknownObjectRelease(v5);
    }
    v6 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v6)
    {
      v7 = v6;
      objc_msgSend(v6, "performControlsAction:position:source:", 45, 0, 0.0);
      swift_unknownObjectRelease(v7);
    }
    return sub_1000FFFE8((uint64_t)&v8);
  }
  return result;
}

uint64_t sub_1000FF864(void (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_100014E10((uint64_t *)&unk_1001E9190);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10018D0D0;
  sub_1000FF9BC();
  *(_QWORD *)(v3 + 32) = v4;
  specialized Array._endMutation()(v4);
  a1(v3);
  return swift_bridgeObjectRelease(v3);
}

double sub_1000FF8E8(uint64_t a1, void *aBlock)
{
  uint64_t v2;
  void (*v3)(void (*)(uint64_t), uint64_t);
  void *v4;
  uint64_t v5;
  double result;

  v3 = *(void (**)(void (*)(uint64_t), uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = _Block_copy(aBlock);
  v5 = swift_allocObject(&unk_1001B26F0, 24, 7);
  *(_QWORD *)(v5 + 16) = v4;
  swift_retain(v2);
  v3(sub_100100118, v5);
  swift_release(v2);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

void sub_1000FF958(uint64_t a1, uint64_t a2)
{
  Class isa;

  sub_100005310(0, &qword_1001ED218, UIMenuElement_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

void sub_1000FF9BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  id v19;
  id v20;
  uint64_t v21;
  NSString v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];

  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1);
  v3 = (char *)v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v4);
  v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend((id)objc_opt_self(RCRecorderStyleProvider), "sharedStyleProvider");
  if (!v7)
  {
    __break(1u);
    goto LABEL_8;
  }
  v8 = v7;
  v9 = (void *)objc_opt_self(RCRecordingsModelInteractor);
  v10 = objc_msgSend(v9, "sharedRecordingsModelInteractor");
  v34[0] = v0;
  v11 = v0 + OBJC_IVAR____TtC10VoiceMemos18RCMoreButtonHelper_recordingUUID;
  v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10VoiceMemos18RCMoreButtonHelper_recordingUUID + 8);
  swift_bridgeObjectRetain(v12);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v14 = objc_msgSend(v10, "isFavoriteForUUID:", v13);

  v15 = objc_msgSend(v8, "favoriteActivitySystemImageName:", v14);
  if (!v15)
  {
LABEL_8:
    __break(1u);
    return;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v17 = v16;

  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  v19 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v18);

  v20 = objc_msgSend(v9, "sharedRecordingsModelInteractor");
  v21 = *(_QWORD *)(v11 + 8);
  swift_bridgeObjectRetain(v21);
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  LODWORD(v21) = objc_msgSend(v20, "isFavoriteForUUID:", v22);

  if ((_DWORD)v21)
  {
    v23 = 0xD000000000000015;
    v24 = 0x8000000100186320;
  }
  else
  {
    v24 = 0x8000000100186300;
    v23 = 0xD000000000000010;
  }
  v25 = String.LocalizationValue.init(stringLiteral:)(v23, v24);
  static Locale.current.getter(v25);
  v26 = String.init(localized:table:bundle:locale:comment:)(v6, 0, 0, 0, v3, 0, 0, 256);
  v28 = v27;
  v29 = objc_msgSend(v9, "sharedRecordingsModelInteractor");
  v30 = *(_QWORD *)(v11 + 8);
  swift_bridgeObjectRetain(v30);
  v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v30);
  LOBYTE(v30) = objc_msgSend(v29, "isFavoriteForUUID:", v31);

  sub_100005310(0, &qword_1001ED208, UIAction_ptr);
  v32 = swift_allocObject(&unk_1001B2600, 24, 7);
  swift_unknownObjectWeakInit(v32 + 16, v34[0]);
  v33 = swift_allocObject(&unk_1001B2628, 25, 7);
  *(_QWORD *)(v33 + 16) = v32;
  *(_BYTE *)(v33 + 24) = v30;
  UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v26, v28, 0, 0, v19, 0, 0, 0, 0, 0, 0, sub_1000FFFA0, v33);
}

uint64_t sub_1000FFD60(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;
  void *v5;
  void *Strong;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    v5 = (void *)result;
    sub_1000FFFAC(result + OBJC_IVAR____TtC10VoiceMemos18RCMoreButtonHelper_controller, (uint64_t)&v9);

    Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      v7 = Strong;
      if ((a3 & 1) != 0)
        v8 = 39;
      else
        v8 = 38;
      objc_msgSend(Strong, "performControlsAction:position:source:", v8, 0, 0.0);
      swift_unknownObjectRelease(v7);
    }
    return sub_1000FFFE8((uint64_t)&v9);
  }
  return result;
}

uint64_t sub_1000FFE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  void *v5;
  void *Strong;
  void *v7;
  uint64_t v8;
  _BYTE v9[24];

  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    v5 = (void *)result;
    sub_1000FFFAC(result + OBJC_IVAR____TtC10VoiceMemos18RCMoreButtonHelper_controller, (uint64_t)&v8);

    Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      v7 = Strong;
      objc_msgSend(Strong, "performControlsAction:position:source:", a3, 0, 0.0);
      swift_unknownObjectRelease(v7);
    }
    return sub_1000FFFE8((uint64_t)&v8);
  }
  return result;
}

id sub_1000FFECC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCMoreButtonHelper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RCMoreButtonHelper()
{
  return objc_opt_self(_TtC10VoiceMemos18RCMoreButtonHelper);
}

uint64_t sub_1000FFF58()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000FFF7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1000FFFA0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000FFD60(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_1000FFFAC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TranscriptViewLayoutHelper(a2, a1);
  return a2;
}

uint64_t sub_1000FFFE8(uint64_t a1)
{
  destroy for TranscriptViewLayoutHelper();
  return a1;
}

uint64_t sub_10010001C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000FFE04(a1, v1, 23);
}

uint64_t sub_100100038(uint64_t a1)
{
  uint64_t v1;

  return sub_1000FFE04(a1, v1, 44);
}

uint64_t sub_100100054(void (*a1)(uint64_t))
{
  return sub_1000FF864(a1);
}

uint64_t sub_10010005C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10010006C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100100074(uint64_t a1)
{
  uint64_t v1;

  return sub_1000FFE04(a1, v1, 13);
}

uint64_t sub_100100090(uint64_t a1)
{
  uint64_t v1;

  return sub_1000FFE04(a1, v1, 42);
}

uint64_t sub_1001000AC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000FF7A0(a1, v1);
}

uint64_t sub_1001000B4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000FFE04(a1, v1, 46);
}

uint64_t sub_1001000D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001000F4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100100118(uint64_t a1)
{
  uint64_t v1;

  sub_1000FF958(a1, *(_QWORD *)(v1 + 16));
}

Class sub_100100120(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  UIMenuElementSize v11;
  Class result;
  Class v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::OpaquePointer v22;
  UIMenuElementSize v23[2];
  UIImage_optional v24;

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100014E10((uint64_t *)&unk_1001E9190);
  v11 = swift_allocObject(v10, 48, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10018D0E0;
  result = (Class)objc_msgSend((id)objc_opt_self(RCRecorderStyleProvider), "sharedStyleProvider");
  if (result)
  {
    v13 = result;
    sub_100005310(0, &qword_1001ED210, UIMenu_ptr);
    v14 = -[objc_class shareToolbarMenuImage](v13, "shareToolbarMenuImage");

    sub_100005310(0, &qword_1001ED208, UIAction_ptr);
    v15 = String.LocalizationValue.init(stringLiteral:)(0x454D5F4552414853, 0xEF4D4554495F554ELL);
    static Locale.current.getter(v15);
    v16 = String.init(localized:table:bundle:locale:comment:)(v9, 0, 0, 0, v6, 0, 0, 256);
    v18 = v17;
    v19 = swift_allocObject(&unk_1001B2600, 24, 7);
    swift_unknownObjectWeakInit(v19 + 16, v2);
    *(_QWORD *)(v11 + 32) = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v16, v18, 0, 0, v14, 0, 0, 0, 0, 0, 0, sub_100100390, v19);
    sub_1000FE870(a1 & 1);
    *(_QWORD *)(v11 + 40) = v20;
    v23[0] = v11;
    specialized Array._endMutation()(v20);
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    v24.value.super.isa = 0;
    v24.is_nil = 0;
    return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v21, (Swift::String_optional)0, v24, 0, 0xFFFFFFFFFFFFFFFFLL, v23[0], v22).super.super.isa;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100100390(uint64_t a1)
{
  uint64_t v1;

  return sub_1000FFE04(a1, v1, 29);
}

id sub_1001003F8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VMDateTime();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for VMDateTime()
{
  return objc_opt_self(_TtC10VoiceMemos10VMDateTime);
}

uint64_t sub_100100448(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1[3] = a1;
  v2 = type metadata accessor for OSSignpostError(0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignpostID(0);
  v1[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[8] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[9] = swift_task_alloc(v6);
  v1[10] = swift_task_alloc(v6);
  v1[11] = swift_task_alloc(v6);
  v7 = type metadata accessor for Logger(0);
  v1[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[13] = v8;
  v1[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OSSignposter(0);
  v1[15] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v1[16] = v10;
  v1[17] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100014E10(&qword_1001EA0F0);
  v1[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for IntentSystemContext(0);
  v1[19] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v1[20] = v13;
  v1[21] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v1[22] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v1[23] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[24] = swift_task_alloc(v16);
  v1[25] = swift_task_alloc(v16);
  v17 = type metadata accessor for MainActor(0);
  v1[26] = static MainActor.shared.getter(v17);
  v18 = dispatch thunk of Actor.unownedExecutor.getter(v17, &protocol witness table for MainActor);
  v1[27] = v18;
  v1[28] = v19;
  return swift_task_switch(sub_1001005F4, v18, v19);
}

uint64_t sub_1001005F4()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t ObjectType;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_signpost_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, _QWORD, uint64_t);
  uint8_t *v31;
  os_signpost_id_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  if (objc_msgSend(*(id *)(v0 + 24), "isRecording"))
  {
    v1 = *(void **)(v0 + 24);
    swift_release(*(_QWORD *)(v0 + 208));
    v2 = objc_msgSend(v1, "audioRecorder");
    if (v2)
    {
      v3 = v2;
      *(_QWORD *)(v0 + 16) = &OBJC_PROTOCOL___VMAudioRecorder;
      v4 = swift_dynamicCastObjCProtocolConditional(v2, 1, v0 + 16);
      if (v4
        && ((v5 = (void *)v4,
             ObjectType = swift_getObjectType(v3),
             v7 = sub_100005310(0, (unint64_t *)&qword_1001EC570, NSObject_ptr),
             swift_dynamicCastMetatype(ObjectType, v7))
          ? (v8 = v5)
          : (v8 = 0),
            v8))
      {
        v9 = *(_QWORD *)(v0 + 176);
        v10 = *(_QWORD *)(v0 + 184);
        v12 = *(_QWORD *)(v0 + 160);
        v11 = *(_QWORD *)(v0 + 168);
        v14 = *(_QWORD *)(v0 + 144);
        v13 = *(_QWORD *)(v0 + 152);
        v15 = sub_1000D6624();
        v16 = AppIntent.systemContext.getter(&type metadata for ToggleRecording, v15);
        IntentSystemContext.preciseTimestamp.getter(v16);
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v14, 1, v9) == 1)
        {
          v17 = *(_QWORD *)(v0 + 144);
          swift_unknownObjectRelease(v3);
          sub_100005440(v17, &qword_1001EA0F0);
        }
        else
        {
          v39 = *(_QWORD *)(v0 + 192);
          v38 = *(_QWORD *)(v0 + 200);
          v40 = *(_QWORD *)(v0 + 176);
          v41 = *(_QWORD *)(v0 + 184);
          v42 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v41 + 32))(v38, *(_QWORD *)(v0 + 144), v40);
          v43 = RCCurrentMediaTime(v42);
          Date.init()();
          v44 = Date.timeIntervalSince(_:)(v39);
          v45 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
          v45(v39, v40);
          objc_msgSend(v8, "setStopRecordingTime:", v43 + v44);
          swift_unknownObjectRelease(v3);
          v45(v38, v40);
        }
      }
      else
      {
        swift_unknownObjectRelease(v3);
      }
    }
    if ((objc_msgSend(*(id *)(v0 + 24), "isRecording") & 1) != 0)
    {
      objc_msgSend(*(id *)(v0 + 24), "performAction:atPosition:forUUID:sourceController:source:", 4, 0, 0, 0, 0.0);
      v46 = *(_QWORD *)(v0 + 192);
      v47 = *(_QWORD *)(v0 + 168);
      v49 = *(_QWORD *)(v0 + 136);
      v48 = *(_QWORD *)(v0 + 144);
      v50 = *(_QWORD *)(v0 + 112);
      v52 = *(_QWORD *)(v0 + 80);
      v51 = *(_QWORD *)(v0 + 88);
      v53 = *(_QWORD *)(v0 + 72);
      v54 = *(_QWORD *)(v0 + 48);
      swift_task_dealloc(*(_QWORD *)(v0 + 200));
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
    }
    else
    {
      v55 = sub_1000DEAD4();
      v56 = swift_allocError(&type metadata for StopRecordingError, v55, 0, 0);
      swift_willThrow(v56);
      v57 = *(_QWORD *)(v0 + 192);
      v58 = *(_QWORD *)(v0 + 168);
      v60 = *(_QWORD *)(v0 + 136);
      v59 = *(_QWORD *)(v0 + 144);
      v61 = *(_QWORD *)(v0 + 112);
      v63 = *(_QWORD *)(v0 + 80);
      v62 = *(_QWORD *)(v0 + 88);
      v64 = *(_QWORD *)(v0 + 72);
      v65 = *(_QWORD *)(v0 + 48);
      swift_task_dealloc(*(_QWORD *)(v0 + 200));
      swift_task_dealloc(v57);
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      swift_task_dealloc(v60);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(v64);
      swift_task_dealloc(v65);
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (qword_1001E8F80 != -1)
      swift_once(&qword_1001E8F80, sub_1000B5218);
    v19 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 112);
    v20 = *(_QWORD *)(v0 + 96);
    v21 = sub_1000AACFC(v20, (uint64_t)qword_1001F6C20);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v21, v20);
    v22 = OSSignposter.init(logger:)(v18);
    v23 = OSSignposter.logHandle.getter(v22);
    v24 = OSSignpostID.init(log:)(v23);
    v25 = OSSignposter.logHandle.getter(v24);
    v26 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v27 = *(_QWORD *)(v0 + 80);
      v28 = *(_QWORD *)(v0 + 56);
      v29 = *(_QWORD *)(v0 + 64);
      v30 = *(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 16);
      v30(v27, *(_QWORD *)(v0 + 88), v28);
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      v32 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, v26, v32, "ToggleRecordingStart", "", v31, 2u);
      swift_slowDealloc(v31, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    }
    else
    {
      v33 = *(_QWORD *)(v0 + 64);

      v30 = *(void (**)(uint64_t, _QWORD, uint64_t))(v33 + 16);
    }
    *(_QWORD *)(v0 + 232) = v30;
    v34 = *(_QWORD *)(v0 + 80);
    v30(v34, *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 56));
    v35 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
    *(_QWORD *)(v0 + 240) = OSSignpostIntervalState.init(id:isOpen:)(v34, 1);
    v36 = (_QWORD *)swift_task_alloc(dword_1001ED324);
    *(_QWORD *)(v0 + 248) = v36;
    *v36 = v0;
    v36[1] = sub_100100AC0;
    return sub_100100E9C(0, 0);
  }
}

uint64_t sub_100100AC0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 248);
  *(_QWORD *)(*v1 + 256) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100100D9C;
  else
    v4 = sub_100100B20;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 216), *(_QWORD *)(v2 + 224));
}

uint64_t sub_100100B20()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  os_signpost_type_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  os_signpost_id_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = swift_release(*(_QWORD *)(v0 + 208));
  v2 = OSSignposter.logHandle.getter(v1);
  v3 = OSSignpostIntervalState.signpostID.getter();
  v4 = static os_signpost_type_t.end.getter(v3);
  v5 = OS_os_log.signpostsEnabled.getter();
  v6 = *(_QWORD *)(v0 + 240);
  if ((v5 & 1) != 0)
  {
    v8 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 48);
    v9 = *(_QWORD *)(v0 + 32);
    v10 = swift_retain(*(_QWORD *)(v0 + 240));
    checkForErrorAndConsumeState(state:)(v10);
    swift_release(v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v8 + 88))(v7, v9) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v11 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
      v11 = "";
    }
    v40 = *(_QWORD *)(v0 + 136);
    v41 = *(_QWORD *)(v0 + 240);
    v38 = *(_QWORD *)(v0 + 128);
    v39 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 88);
    v23 = *(_QWORD *)(v0 + 64);
    v22 = *(_QWORD *)(v0 + 72);
    v24 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 232))(v20, v22, v24);
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    v26 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, v4, v26, "ToggleRecordingStart", v11, v25, 2u);
    swift_slowDealloc(v25, -1, -1);

    v27 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v27(v22, v24);
    v27(v21, v24);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v40, v39);
    swift_release(v41);
    v27(v20, v24);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 128);
    v12 = *(_QWORD *)(v0 + 136);
    v14 = *(_QWORD *)(v0 + 120);
    v15 = *(_QWORD *)(v0 + 88);
    v17 = *(_QWORD *)(v0 + 64);
    v16 = *(_QWORD *)(v0 + 72);
    v18 = *(_QWORD *)(v0 + 56);

    v19 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v19(v16, v18);
    v19(v15, v18);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    swift_release(v6);
  }
  v28 = *(_QWORD *)(v0 + 192);
  v29 = *(_QWORD *)(v0 + 168);
  v31 = *(_QWORD *)(v0 + 136);
  v30 = *(_QWORD *)(v0 + 144);
  v32 = *(_QWORD *)(v0 + 112);
  v34 = *(_QWORD *)(v0 + 80);
  v33 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 72);
  v36 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100100D9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 208));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v8 = *(_QWORD *)(v0 + 192);
  v9 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 112);
  v14 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 72);
  v16 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100100E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[20] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[21] = v5;
  v3[22] = v6;
  return swift_task_switch(sub_100100F0C, v5, v6);
}

uint64_t sub_100100F0C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  NSString v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;

  if ((objc_msgSend(*(id *)(v0 + 152), "isRecording") & 1) != 0)
  {
    swift_release(*(_QWORD *)(v0 + 160));
    v1 = sub_10010381C();
    v2 = swift_allocError(&type metadata for CreateRecordingError, v1, 0, 0);
    *v3 = 0;
    swift_willThrow(v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (*(_QWORD *)(v0 + 144))
      v5 = String._bridgeToObjectiveC()();
    else
      v5 = 0;
    v6 = v0 + 16;
    *(_QWORD *)(v0 + 184) = v5;
    v7 = *(void **)(v0 + 152);
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_100101024;
    v8 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v9 = (_QWORD *)(v0 + 80);
    v9[1] = 0x40000000;
    v9[2] = sub_1001033F0;
    v9[3] = &unk_1001B2708;
    v9[4] = v8;
    objc_msgSend(v7, "_startCapturing:completion:", v5, v9);
    return swift_continuation_await(v6);
  }
}

uint64_t sub_100101024()
{
  uint64_t v0;

  return swift_task_switch(sub_100101068, *(_QWORD *)(*(_QWORD *)v0 + 168), *(_QWORD *)(*(_QWORD *)v0 + 176));
}

uint64_t sub_100101068()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(void **)(v0 + 152);

  v2 = objc_msgSend(v1, "audioRecorder");
  *(_QWORD *)(v0 + 192) = v2;
  if (v2)
  {
    v3 = v2;
    *(_QWORD *)(v0 + 120) = &OBJC_PROTOCOL___VMAudioRecorder;
    *(_QWORD *)(v0 + 128) = &OBJC_PROTOCOL___VMRecordingController;
    v4 = swift_dynamicCastObjCProtocolConditional(v2, 2, v0 + 120);
    if (v4)
    {
      v5 = v4;
      ObjectType = swift_getObjectType(v3);
      v7 = sub_100005310(0, (unint64_t *)&qword_1001EC570, NSObject_ptr);
      if (!swift_dynamicCastMetatype(ObjectType, v7))
        v5 = 0;
      if (v5)
      {
        v8 = swift_getObjectType(v5);
        v9 = (_QWORD *)swift_task_alloc(dword_1001ED32C);
        *(_QWORD *)(v0 + 200) = v9;
        *v9 = v0;
        v9[1] = sub_100101194;
        return sub_100101274(v8);
      }
    }
    swift_release(*(_QWORD *)(v0 + 160));
    swift_unknownObjectRelease(v3);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 160));
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100101194()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  *(_QWORD *)(*v1 + 208) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100101234;
  else
    v4 = sub_1001011F4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 168), *(_QWORD *)(v2 + 176));
}

uint64_t sub_1001011F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 160));
  swift_unknownObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100101234()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 160));
  swift_unknownObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100101274(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;

  v2[12] = a1;
  v2[13] = v1;
  v52 = type metadata accessor for NSObject.KeyValueObservingPublisher(255, a1, &type metadata for Bool);
  v4 = sub_10000EE30(&qword_1001ED2F0);
  v2[14] = v4;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>, v52);
  v2[15] = WitnessTable;
  v6 = type metadata accessor for Publishers.Map(255, v52, v4, WitnessTable);
  v7 = sub_10000EE30(&qword_1001ED2F8);
  v8 = type metadata accessor for NSObject.KeyValueObservingPublisher(255, a1, v7);
  v9 = swift_getWitnessTable(&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>, v8);
  v2[16] = v9;
  v10 = type metadata accessor for Publishers.CompactMap(255, v8, v4, v9);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Map<A, B>, v6);
  v2[17] = v11;
  v12 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.CompactMap<A, B>, v10);
  v2[18] = v12;
  v2[2] = v6;
  v2[3] = v10;
  v2[4] = v11;
  v2[5] = v12;
  v13 = type metadata accessor for Publishers.Merge(255, v2 + 2);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Merge<A, B>, v13);
  v2[19] = v14;
  v15 = type metadata accessor for Publishers.First(255, v13, v14);
  v16 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.First<A>, v15);
  v2[20] = v16;
  v17 = type metadata accessor for Publishers.TryMap(255, v15, (char *)&type metadata for () + 8, v16);
  v18 = sub_100005310(255, &qword_1001ED300, NSRunLoop_ptr);
  v2[21] = v18;
  v19 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.TryMap<A, B>, v17);
  v2[22] = v19;
  v20 = sub_100103720();
  v2[23] = v20;
  v2[6] = v17;
  v2[7] = v18;
  v2[8] = v19;
  v2[9] = v20;
  v21 = type metadata accessor for Publishers.Timeout(255, v2 + 6);
  v22 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Timeout<A, B>, v21);
  v2[24] = v22;
  v23 = type metadata accessor for AsyncThrowingPublisher.Iterator(0, v21, v22);
  v2[25] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v2[26] = v24;
  v2[27] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100014E10((uint64_t *)&unk_1001ED310);
  v2[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v25 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride(0);
  v2[29] = v26;
  v27 = *(_QWORD *)(v26 - 8);
  v2[30] = v27;
  v2[31] = swift_task_alloc((*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = swift_checkMetadataState(0, v13);
  v2[32] = v28;
  v29 = *(_QWORD *)(v28 - 8);
  v2[33] = v29;
  v2[34] = swift_task_alloc((*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = swift_checkMetadataState(0, v15);
  v2[35] = v30;
  v31 = *(_QWORD *)(v30 - 8);
  v2[36] = v31;
  v2[37] = swift_task_alloc((*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for Publishers.TryMap(0, v30, &type metadata for Bool, v16);
  v2[38] = v32;
  v33 = *(_QWORD *)(v32 - 8);
  v2[39] = v33;
  v2[40] = swift_task_alloc((*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = swift_checkMetadataState(0, v17);
  v2[41] = v34;
  v35 = *(_QWORD *)(v34 - 8);
  v2[42] = v35;
  v2[43] = swift_task_alloc((*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = swift_checkMetadataState(0, v21);
  v2[44] = v36;
  v37 = *(_QWORD *)(v36 - 8);
  v2[45] = v37;
  v2[46] = swift_task_alloc((*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for AsyncThrowingPublisher(0, v36, v22);
  v2[47] = v38;
  v39 = *(_QWORD *)(v38 - 8);
  v2[48] = v39;
  v2[49] = swift_task_alloc((*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = swift_checkMetadataState(0, v8);
  v2[50] = v40;
  v41 = *(_QWORD *)(v40 - 8);
  v2[51] = v41;
  v2[52] = swift_task_alloc((*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = swift_checkMetadataState(0, v10);
  v2[53] = v42;
  v43 = *(_QWORD *)(v42 - 8);
  v2[54] = v43;
  v2[55] = swift_task_alloc((*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = swift_checkMetadataState(0, v52);
  v2[56] = v44;
  v45 = *(_QWORD *)(v44 - 8);
  v2[57] = v45;
  v2[58] = swift_task_alloc((*(_QWORD *)(v45 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = swift_checkMetadataState(0, v6);
  v2[59] = v46;
  v47 = *(_QWORD *)(v46 - 8);
  v2[60] = v47;
  v2[61] = swift_task_alloc((*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for MainActor(0);
  v2[62] = v48;
  v2[63] = static MainActor.shared.getter(v48);
  v49 = dispatch thunk of Actor.unownedExecutor.getter(v48, &protocol witness table for MainActor);
  v2[64] = v49;
  v2[65] = v50;
  return swift_task_switch(sub_10010171C, v49, v50);
}

uint64_t sub_10010171C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t KeyPath;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t WitnessTable;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  if ((objc_msgSend(*(id *)(v0 + 104), "recording") & 1) != 0)
  {
    swift_release(*(_QWORD *)(v0 + 504));
    v1 = *(_QWORD *)(v0 + 464);
    v2 = *(_QWORD *)(v0 + 440);
    v3 = *(_QWORD *)(v0 + 416);
    v4 = *(_QWORD *)(v0 + 392);
    v5 = *(_QWORD *)(v0 + 368);
    v6 = *(_QWORD *)(v0 + 344);
    v7 = *(_QWORD *)(v0 + 320);
    v8 = *(_QWORD *)(v0 + 296);
    v9 = *(_QWORD *)(v0 + 272);
    v63 = *(_QWORD *)(v0 + 248);
    v64 = *(_QWORD *)(v0 + 224);
    v65 = *(_QWORD *)(v0 + 216);
    swift_task_dealloc(*(_QWORD *)(v0 + 488));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 464);
    v12 = *(_QWORD *)(v0 + 448);
    v27 = *(_QWORD *)(v0 + 456);
    v13 = *(_QWORD *)(v0 + 416);
    v40 = *(_QWORD *)(v0 + 424);
    v41 = *(_QWORD *)(v0 + 472);
    v36 = *(_QWORD *)(v0 + 408);
    v33 = *(_QWORD *)(v0 + 400);
    v34 = *(_QWORD *)(v0 + 440);
    v61 = *(_QWORD *)(v0 + 376);
    v53 = *(_QWORD *)(v0 + 368);
    v60 = *(_QWORD *)(v0 + 360);
    v59 = *(_QWORD *)(v0 + 352);
    v46 = *(_QWORD *)(v0 + 344);
    v58 = *(_QWORD *)(v0 + 336);
    v54 = *(_QWORD *)(v0 + 328);
    v45 = *(_QWORD *)(v0 + 304);
    v43 = *(_QWORD *)(v0 + 320);
    v44 = *(_QWORD *)(v0 + 288);
    v42 = *(_QWORD *)(v0 + 280);
    v32 = *(_QWORD *)(v0 + 272);
    v37 = *(_QWORD *)(v0 + 296);
    v38 = *(_QWORD *)(v0 + 264);
    v35 = *(_QWORD *)(v0 + 256);
    v47 = *(_QWORD *)(v0 + 312);
    v48 = *(_QWORD *)(v0 + 248);
    v55 = *(_QWORD *)(v0 + 240);
    v56 = *(_QWORD *)(v0 + 232);
    v49 = *(_QWORD *)(v0 + 224);
    v62 = *(_QWORD *)(v0 + 200);
    v57 = *(_QWORD *)(v0 + 192);
    v51 = *(_QWORD *)(v0 + 184);
    v52 = *(_QWORD *)(v0 + 176);
    v50 = *(_QWORD *)(v0 + 168);
    v39 = *(_QWORD *)(v0 + 160);
    v30 = *(_QWORD *)(v0 + 144);
    v31 = *(_QWORD *)(v0 + 152);
    v14 = *(_QWORD *)(v0 + 120);
    v28 = *(_QWORD *)(v0 + 128);
    v29 = *(_QWORD *)(v0 + 136);
    v15 = *(_QWORD *)(v0 + 112);
    v16 = *(_QWORD *)(v0 + 96);
    v17 = (_QWORD *)swift_task_alloc(16);
    *v17 = v16;
    KeyPath = swift_getKeyPath(&unk_10018D230);
    swift_task_dealloc(v17);
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)(KeyPath, 1);
    swift_release(KeyPath);
    Publisher.map<A>(_:)(sub_100103A30, 0, v12, v15, v14);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v11, v12);
    v19 = (_QWORD *)swift_task_alloc(16);
    *v19 = v16;
    v20 = swift_getKeyPath(&unk_10018D278);
    swift_task_dealloc(v19);
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)(v20, 1);
    swift_release(v20);
    Publisher.compactMap<A>(_:)(sub_100103A2C, 0, v33, v15, v28);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v13, v33);
    Publisher.merge<A>(with:)(v34, v41, v40, v29, v30);
    Publisher.first()(v35, v31);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v32, v35);
    Publisher.tryMap<A>(_:)(sub_100101D98, 0, v42, &type metadata for Bool, v39);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v37, v42);
    Publishers.TryMap.map<A>(_:)(nullsub_8, 0, v45, (char *)&type metadata for () + 8);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v43, v45);
    static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)(5);
    *(_QWORD *)(v0 + 80) = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v21 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v49, 1, 1, v21);
    v22 = swift_checkMetadataState(0, v50);
    Publisher.timeout<A>(_:scheduler:options:customError:)(v48, v0 + 80, v49, sub_100101DAC, 0, v54, v22, v52, v51);
    sub_100005440(v49, (uint64_t *)&unk_1001ED310);

    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v48, v56);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v46, v54);
    Publisher.values.getter(v59, v57);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v53, v59);
    v23 = AsyncThrowingPublisher.makeAsyncIterator()(v61);
    v24 = static MainActor.shared.getter(v23);
    *(_QWORD *)(v0 + 528) = v24;
    v25 = (_QWORD *)swift_task_alloc(_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTu[1]);
    *(_QWORD *)(v0 + 536) = v25;
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AsyncThrowingPublisher<A>.Iterator, v62);
    *v25 = v0;
    v25[1] = sub_100101CC8;
    return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(v0 + 544, v24, &protocol witness table for MainActor, *(_QWORD *)(v0 + 200), WitnessTable, v0 + 88);
  }
}

uint64_t sub_100101CC8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 528);
  swift_task_dealloc(*(_QWORD *)(*v1 + 536));
  swift_release(v3);
  if (v0)
    v4 = sub_100103A34;
  else
    v4 = sub_100103A18;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 512), *(_QWORD *)(v2 + 520));
}

void sub_100101D44(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  if (v2)
    v4 = _convertErrorToNSError(_:)(v2);
  else
    v4 = 0;
  v5 = (id)v4;
  objc_msgSend(v3, "setRecordingError:");

}

uint64_t sub_100101D98@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10010332C(a1, a2);
}

uint64_t sub_100101DAC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1001033A4((uint64_t (*)(void))sub_10010381C, (uint64_t)&type metadata for CreateRecordingError, 1, a1);
}

uint64_t sub_100101DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  v5 = sub_100014E10(&qword_1001EA200);
  v4[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AppIntentError(0);
  v4[12] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[13] = v7;
  v4[14] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for IntentDialog(0);
  v4[15] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[16] = v9;
  v4[17] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MainActor(0);
  v4[18] = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  v4[19] = v11;
  v4[20] = v12;
  return swift_task_switch(sub_100101EA8, v11, v12);
}

uint64_t sub_100101EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 208));
  if ((*(_BYTE *)(v0 + 208) & 1) != 0)
  {
    IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
    v2 = *(_QWORD *)(v0 + 16);
    v1 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 184) = v1;
    if (v1)
    {
      v3 = *(_QWORD *)(v0 + 32);
      v4 = *(_QWORD *)(v0 + 40);
      v5 = *(_QWORD *)(v0 + 48);
      swift_bridgeObjectRetain(v1);
      sub_10001BFE0(v2, v1, v3, v4, v5);
      v6 = (_QWORD *)swift_task_alloc(dword_1001ED264);
      *(_QWORD *)(v0 + 192) = v6;
      *v6 = v0;
      v6[1] = sub_10010219C;
      return sub_1001033F8(v2, v1, *(_QWORD *)(v0 + 72));
    }
    else
    {
      v9 = *(_QWORD *)(v0 + 136);
      v10 = *(_QWORD *)(v0 + 120);
      v11 = *(_QWORD *)(v0 + 128);
      v13 = *(_QWORD *)(v0 + 104);
      v12 = *(_QWORD *)(v0 + 112);
      v14 = *(_QWORD *)(v0 + 88);
      v15 = *(_QWORD *)(v0 + 96);
      swift_release(*(_QWORD *)(v0 + 144));
      v16 = IntentDialog.init(stringLiteral:)(0xD00000000000002ALL, 0x80000001001863E0);
      v17 = IntentParameter.projectedValue.getter(v16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v14, v9, v10);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
      IntentParameter.needsValueError(_:)(v14);
      swift_release(v17);
      sub_100005440(v14, &qword_1001EA200);
      v18 = sub_1000E5B2C();
      swift_allocError(v15, v18, 0, 0);
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v19, v12, v15);
      swift_willThrow(v20);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v15);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      v21 = *(_QWORD *)(v0 + 112);
      v22 = *(_QWORD *)(v0 + 88);
      swift_task_dealloc(*(_QWORD *)(v0 + 136));
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v8 = (_QWORD *)swift_task_alloc(dword_1001ED274);
    *(_QWORD *)(v0 + 168) = v8;
    *v8 = v0;
    v8[1] = sub_1001020E0;
    return sub_100102324(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  }
}

uint64_t sub_1001020E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1001022C8;
  else
    v4 = sub_100102140;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 152), *(_QWORD *)(v2 + 160));
}

uint64_t sub_100102140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010219C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100102260;
  else
    v4 = sub_1001021FC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 152), *(_QWORD *)(v2 + 160));
}

uint64_t sub_1001021FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 184));
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100102260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 184);
  swift_release(*(_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease(v1);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001022C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 144));
  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100102324(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for MainActor(0);
  v2[4] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[5] = v4;
  v2[6] = v5;
  return swift_task_switch(sub_100102390, v4, v5);
}

uint64_t sub_100102390()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;

  v1 = objc_msgSend(*(id *)(v0 + 24), "mostRecentRecording");
  v2 = v1;
  *(_QWORD *)(v0 + 56) = v1;
  if (v1 && (v3 = objc_msgSend(v1, "uuid")) != 0)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

    *(_QWORD *)(v0 + 64) = v7;
    v8 = (_QWORD *)swift_task_alloc(dword_1001ED264);
    *(_QWORD *)(v0 + 72) = v8;
    *v8 = v0;
    v8[1] = sub_100102494;
    return sub_1001033F8(v5, v7, *(_QWORD *)(v0 + 16));
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 32));
    v10 = sub_1001036DC();
    v11 = swift_allocError(&type metadata for PlayRecordingError, v10, 0, 0);
    *v12 = 0;
    swift_willThrow(v11);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100102494()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100102538;
  else
    v4 = sub_1001024F4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_1001024F4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));

  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100102538()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010257C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;

  v2[12] = a1;
  v2[13] = v1;
  v52 = type metadata accessor for NSObject.KeyValueObservingPublisher(255, a1, &type metadata for Bool);
  v4 = sub_10000EE30(&qword_1001ED2F0);
  v2[14] = v4;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>, v52);
  v2[15] = WitnessTable;
  v6 = type metadata accessor for Publishers.Map(255, v52, v4, WitnessTable);
  v7 = sub_10000EE30(&qword_1001ED2F8);
  v8 = type metadata accessor for NSObject.KeyValueObservingPublisher(255, a1, v7);
  v9 = swift_getWitnessTable(&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>, v8);
  v2[16] = v9;
  v10 = type metadata accessor for Publishers.CompactMap(255, v8, v4, v9);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Map<A, B>, v6);
  v2[17] = v11;
  v12 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.CompactMap<A, B>, v10);
  v2[18] = v12;
  v2[2] = v6;
  v2[3] = v10;
  v2[4] = v11;
  v2[5] = v12;
  v13 = type metadata accessor for Publishers.Merge(255, v2 + 2);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Merge<A, B>, v13);
  v2[19] = v14;
  v15 = type metadata accessor for Publishers.First(255, v13, v14);
  v16 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.First<A>, v15);
  v2[20] = v16;
  v17 = type metadata accessor for Publishers.TryMap(255, v15, (char *)&type metadata for () + 8, v16);
  v18 = sub_100005310(255, &qword_1001ED300, NSRunLoop_ptr);
  v2[21] = v18;
  v19 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.TryMap<A, B>, v17);
  v2[22] = v19;
  v20 = sub_100103720();
  v2[23] = v20;
  v2[6] = v17;
  v2[7] = v18;
  v2[8] = v19;
  v2[9] = v20;
  v21 = type metadata accessor for Publishers.Timeout(255, v2 + 6);
  v22 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Timeout<A, B>, v21);
  v2[24] = v22;
  v23 = type metadata accessor for AsyncThrowingPublisher.Iterator(0, v21, v22);
  v2[25] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v2[26] = v24;
  v2[27] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100014E10((uint64_t *)&unk_1001ED310);
  v2[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v25 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride(0);
  v2[29] = v26;
  v27 = *(_QWORD *)(v26 - 8);
  v2[30] = v27;
  v2[31] = swift_task_alloc((*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = swift_checkMetadataState(0, v13);
  v2[32] = v28;
  v29 = *(_QWORD *)(v28 - 8);
  v2[33] = v29;
  v2[34] = swift_task_alloc((*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = swift_checkMetadataState(0, v15);
  v2[35] = v30;
  v31 = *(_QWORD *)(v30 - 8);
  v2[36] = v31;
  v2[37] = swift_task_alloc((*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for Publishers.TryMap(0, v30, &type metadata for Bool, v16);
  v2[38] = v32;
  v33 = *(_QWORD *)(v32 - 8);
  v2[39] = v33;
  v2[40] = swift_task_alloc((*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = swift_checkMetadataState(0, v17);
  v2[41] = v34;
  v35 = *(_QWORD *)(v34 - 8);
  v2[42] = v35;
  v2[43] = swift_task_alloc((*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = swift_checkMetadataState(0, v21);
  v2[44] = v36;
  v37 = *(_QWORD *)(v36 - 8);
  v2[45] = v37;
  v2[46] = swift_task_alloc((*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for AsyncThrowingPublisher(0, v36, v22);
  v2[47] = v38;
  v39 = *(_QWORD *)(v38 - 8);
  v2[48] = v39;
  v2[49] = swift_task_alloc((*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = swift_checkMetadataState(0, v8);
  v2[50] = v40;
  v41 = *(_QWORD *)(v40 - 8);
  v2[51] = v41;
  v2[52] = swift_task_alloc((*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = swift_checkMetadataState(0, v10);
  v2[53] = v42;
  v43 = *(_QWORD *)(v42 - 8);
  v2[54] = v43;
  v2[55] = swift_task_alloc((*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = swift_checkMetadataState(0, v52);
  v2[56] = v44;
  v45 = *(_QWORD *)(v44 - 8);
  v2[57] = v45;
  v2[58] = swift_task_alloc((*(_QWORD *)(v45 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = swift_checkMetadataState(0, v6);
  v2[59] = v46;
  v47 = *(_QWORD *)(v46 - 8);
  v2[60] = v47;
  v2[61] = swift_task_alloc((*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for MainActor(0);
  v2[62] = v48;
  v2[63] = static MainActor.shared.getter(v48);
  v49 = dispatch thunk of Actor.unownedExecutor.getter(v48, &protocol witness table for MainActor);
  v2[64] = v49;
  v2[65] = v50;
  return swift_task_switch(sub_100102A24, v49, v50);
}

uint64_t sub_100102A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t KeyPath;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t WitnessTable;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  if ((objc_msgSend(*(id *)(v0 + 104), "playing") & 1) != 0)
  {
    swift_release(*(_QWORD *)(v0 + 504));
    v1 = *(_QWORD *)(v0 + 464);
    v2 = *(_QWORD *)(v0 + 440);
    v3 = *(_QWORD *)(v0 + 416);
    v4 = *(_QWORD *)(v0 + 392);
    v5 = *(_QWORD *)(v0 + 368);
    v6 = *(_QWORD *)(v0 + 344);
    v7 = *(_QWORD *)(v0 + 320);
    v8 = *(_QWORD *)(v0 + 296);
    v9 = *(_QWORD *)(v0 + 272);
    v63 = *(_QWORD *)(v0 + 248);
    v64 = *(_QWORD *)(v0 + 224);
    v65 = *(_QWORD *)(v0 + 216);
    swift_task_dealloc(*(_QWORD *)(v0 + 488));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 464);
    v12 = *(_QWORD *)(v0 + 448);
    v27 = *(_QWORD *)(v0 + 456);
    v13 = *(_QWORD *)(v0 + 416);
    v40 = *(_QWORD *)(v0 + 424);
    v41 = *(_QWORD *)(v0 + 472);
    v36 = *(_QWORD *)(v0 + 408);
    v33 = *(_QWORD *)(v0 + 400);
    v34 = *(_QWORD *)(v0 + 440);
    v61 = *(_QWORD *)(v0 + 376);
    v53 = *(_QWORD *)(v0 + 368);
    v60 = *(_QWORD *)(v0 + 360);
    v59 = *(_QWORD *)(v0 + 352);
    v46 = *(_QWORD *)(v0 + 344);
    v58 = *(_QWORD *)(v0 + 336);
    v54 = *(_QWORD *)(v0 + 328);
    v45 = *(_QWORD *)(v0 + 304);
    v43 = *(_QWORD *)(v0 + 320);
    v44 = *(_QWORD *)(v0 + 288);
    v42 = *(_QWORD *)(v0 + 280);
    v32 = *(_QWORD *)(v0 + 272);
    v37 = *(_QWORD *)(v0 + 296);
    v38 = *(_QWORD *)(v0 + 264);
    v35 = *(_QWORD *)(v0 + 256);
    v47 = *(_QWORD *)(v0 + 312);
    v48 = *(_QWORD *)(v0 + 248);
    v55 = *(_QWORD *)(v0 + 240);
    v56 = *(_QWORD *)(v0 + 232);
    v49 = *(_QWORD *)(v0 + 224);
    v62 = *(_QWORD *)(v0 + 200);
    v57 = *(_QWORD *)(v0 + 192);
    v51 = *(_QWORD *)(v0 + 184);
    v52 = *(_QWORD *)(v0 + 176);
    v50 = *(_QWORD *)(v0 + 168);
    v39 = *(_QWORD *)(v0 + 160);
    v30 = *(_QWORD *)(v0 + 144);
    v31 = *(_QWORD *)(v0 + 152);
    v14 = *(_QWORD *)(v0 + 120);
    v28 = *(_QWORD *)(v0 + 128);
    v29 = *(_QWORD *)(v0 + 136);
    v15 = *(_QWORD *)(v0 + 112);
    v16 = *(_QWORD *)(v0 + 96);
    v17 = (_QWORD *)swift_task_alloc(16);
    *v17 = v16;
    KeyPath = swift_getKeyPath(&unk_10018D1B0);
    swift_task_dealloc(v17);
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)(KeyPath, 1);
    swift_release(KeyPath);
    Publisher.map<A>(_:)(sub_100103300, 0, v12, v15, v14);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v11, v12);
    v19 = (_QWORD *)swift_task_alloc(16);
    *v19 = v16;
    v20 = swift_getKeyPath(&unk_10018D1F0);
    swift_task_dealloc(v19);
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)(v20, 1);
    swift_release(v20);
    Publisher.compactMap<A>(_:)(sub_100103310, 0, v33, v15, v28);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v13, v33);
    Publisher.merge<A>(with:)(v34, v41, v40, v29, v30);
    Publisher.first()(v35, v31);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v32, v35);
    Publisher.tryMap<A>(_:)(sub_100101D98, 0, v42, &type metadata for Bool, v39);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v37, v42);
    Publishers.TryMap.map<A>(_:)(nullsub_8, 0, v45, (char *)&type metadata for () + 8);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v43, v45);
    static NSRunLoop.SchedulerTimeType.Stride.seconds(_:)(5);
    *(_QWORD *)(v0 + 80) = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v21 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v49, 1, 1, v21);
    v22 = swift_checkMetadataState(0, v50);
    Publisher.timeout<A>(_:scheduler:options:customError:)(v48, v0 + 80, v49, sub_10010338C, 0, v54, v22, v52, v51);
    sub_100005440(v49, (uint64_t *)&unk_1001ED310);

    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v48, v56);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v46, v54);
    Publisher.values.getter(v59, v57);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v53, v59);
    v23 = AsyncThrowingPublisher.makeAsyncIterator()(v61);
    v24 = static MainActor.shared.getter(v23);
    *(_QWORD *)(v0 + 528) = v24;
    v25 = (_QWORD *)swift_task_alloc(_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTu[1]);
    *(_QWORD *)(v0 + 536) = v25;
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AsyncThrowingPublisher<A>.Iterator, v62);
    *v25 = v0;
    v25[1] = sub_100102FD0;
    return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(v0 + 544, v24, &protocol witness table for MainActor, *(_QWORD *)(v0 + 200), WitnessTable, v0 + 88);
  }
}

uint64_t sub_100102FD0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 528);
  swift_task_dealloc(*(_QWORD *)(*v1 + 536));
  swift_release(v3);
  if (v0)
    v4 = sub_1001031AC;
  else
    v4 = sub_10010304C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 512), *(_QWORD *)(v2 + 520));
}

uint64_t sub_10010304C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v20 = *(_QWORD *)(v0 + 480);
  v22 = *(_QWORD *)(v0 + 472);
  v24 = *(_QWORD *)(v0 + 488);
  v1 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 440);
  v3 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 392);
  v6 = *(_QWORD *)(v0 + 376);
  v8 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 200);
  swift_release(*(_QWORD *)(v0 + 504));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v24, v22);
  v10 = *(_QWORD *)(v0 + 464);
  v11 = *(_QWORD *)(v0 + 440);
  v12 = *(_QWORD *)(v0 + 416);
  v13 = *(_QWORD *)(v0 + 392);
  v14 = *(_QWORD *)(v0 + 368);
  v15 = *(_QWORD *)(v0 + 344);
  v16 = *(_QWORD *)(v0 + 320);
  v17 = *(_QWORD *)(v0 + 296);
  v18 = *(_QWORD *)(v0 + 272);
  v21 = *(_QWORD *)(v0 + 248);
  v23 = *(_QWORD *)(v0 + 224);
  v25 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 488));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001031AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 488);
  v12 = *(_QWORD *)(v0 + 480);
  v13 = *(_QWORD *)(v0 + 472);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 440);
  v11 = *(_QWORD *)(v0 + 424);
  v14 = *(_QWORD *)(v0 + 464);
  v15 = *(_QWORD *)(v0 + 416);
  v4 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 392);
  v6 = *(_QWORD *)(v0 + 376);
  v16 = *(_QWORD *)(v0 + 368);
  v17 = *(_QWORD *)(v0 + 344);
  v18 = *(_QWORD *)(v0 + 320);
  v19 = *(_QWORD *)(v0 + 296);
  v20 = *(_QWORD *)(v0 + 272);
  v21 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 208);
  swift_release(*(_QWORD *)(v0 + 504));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v13);
  swift_task_dealloc(v1);
  swift_task_dealloc(v14);
  swift_task_dealloc(v3);
  swift_task_dealloc(v15);
  swift_task_dealloc(v5);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unsigned __int8 *sub_100103300@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_100103310@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;

  v2 = *a1;
  if (v2)
    v3 = 1;
  else
    v3 = -1;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return swift_errorRetain();
}

uint64_t sub_10010332C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)result;
  if ((*(_BYTE *)(result + 8) & 1) != 0)
  {
    v4 = *(_QWORD *)result;
    swift_errorRetain(v2);
    v3 = sub_100014E10(qword_1001E9C68);
    return swift_willThrowTypedImpl(&v4, v3, &protocol self-conformance witness table for Error);
  }
  else
  {
    *a2 = v2 & 1;
  }
  return result;
}

uint64_t sub_10010338C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1001033A4((uint64_t (*)(void))sub_1001036DC, (uint64_t)&type metadata for PlayRecordingError, 2, a1);
}

uint64_t sub_1001033A4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t result;
  _BYTE *v9;

  v7 = a1();
  result = swift_allocError(a2, v7, 0, 0);
  *a4 = result;
  *v9 = a3;
  return result;
}

uint64_t sub_1001033F0(uint64_t a1)
{
  return swift_continuation_resume(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1001033F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[6] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[7] = v5;
  v3[8] = v6;
  return swift_task_switch(sub_100103468, v5, v6);
}

uint64_t sub_100103468()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t (*v4)(void);
  void *v5;
  NSString v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((objc_msgSend(*(id *)(v0 + 40), "isRecording") & 1) != 0)
  {
    swift_release(*(_QWORD *)(v0 + 48));
    v1 = sub_1001036DC();
    v2 = swift_allocError(&type metadata for PlayRecordingError, v1, 0, 0);
    *v3 = 1;
    swift_willThrow(v2);
    v4 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v5 = *(void **)(v0 + 40);
    v6 = String._bridgeToObjectiveC()();
    objc_msgSend(v5, "playRecordingWithUUID:", v6);

    v7 = objc_msgSend(v5, "audioPlayer");
    *(_QWORD *)(v0 + 72) = v7;
    if (v7)
    {
      v8 = v7;
      *(_QWORD *)(v0 + 16) = &OBJC_PROTOCOL___VMAudioPlayer;
      v9 = swift_dynamicCastObjCProtocolConditional(v7, 1, v0 + 16);
      if (v9)
      {
        v10 = v9;
        ObjectType = swift_getObjectType(v8);
        v12 = sub_100005310(0, (unint64_t *)&qword_1001EC570, NSObject_ptr);
        if (!swift_dynamicCastMetatype(ObjectType, v12))
          v10 = 0;
        if (v10)
        {
          v13 = swift_getObjectType(v10);
          v14 = (_QWORD *)swift_task_alloc(dword_1001ED2EC);
          *(_QWORD *)(v0 + 80) = v14;
          *v14 = v0;
          v14[1] = sub_1001035FC;
          return sub_10010257C(v13);
        }
      }
      swift_release(*(_QWORD *)(v0 + 48));
      swift_unknownObjectRelease(v8);
    }
    else
    {
      swift_release(*(_QWORD *)(v0 + 48));
    }
    v4 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v4();
}

uint64_t sub_1001035FC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10010369C;
  else
    v4 = sub_10010365C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_10010365C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 48));
  swift_unknownObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010369C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 48));
  swift_unknownObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1001036DC()
{
  unint64_t result;

  result = qword_1001ED278;
  if (!qword_1001ED278)
  {
    result = swift_getWitnessTable(&unk_1001898DC, &type metadata for PlayRecordingError);
    atomic_store(result, (unint64_t *)&qword_1001ED278);
  }
  return result;
}

unint64_t sub_100103720()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001ED308;
  if (!qword_1001ED308)
  {
    v1 = sub_100005310(255, &qword_1001ED300, NSRunLoop_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSRunLoop, v1);
    atomic_store(result, (unint64_t *)&qword_1001ED308);
  }
  return result;
}

const char *sub_100103778()
{
  return "playing";
}

id sub_100103784@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "playing");
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_1001037B4()
{
  return 8;
}

_QWORD *sub_1001037C0(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

const char *sub_1001037CC()
{
  return "playbackError";
}

id sub_1001037D8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "playbackError");
  *a2 = result;
  return result;
}

uint64_t sub_100103810()
{
  return 8;
}

unint64_t sub_10010381C()
{
  unint64_t result;

  result = qword_1001ED330;
  if (!qword_1001ED330)
  {
    result = swift_getWitnessTable(&unk_10018985C, &type metadata for CreateRecordingError);
    atomic_store(result, &qword_1001ED330);
  }
  return result;
}

const char *sub_100103860()
{
  return "ioStarted";
}

id sub_10010386C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "ioStarted");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10010389C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setIoStarted:", *a1);
}

uint64_t sub_1001038B0()
{
  return 8;
}

const char *sub_1001038BC()
{
  return "recordingError";
}

id sub_1001038C8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "recordingError");
  *a2 = result;
  return result;
}

uint64_t sub_100103904()
{
  return 8;
}

_QWORD *initializeBufferWithCopyOfBuffer for RCPlayRecordingIntentPerformer(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for RCPlayRecordingIntentPerformer(id *a1)
{

}

uint64_t assignWithCopy for RCPlayRecordingIntentPerformer(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for RCPlayRecordingIntentPerformer(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for RCPlayRecordingIntentPerformer()
{
  return &type metadata for RCPlayRecordingIntentPerformer;
}

ValueMetadata *type metadata accessor for RCControlCenterToggleRecordingIntentPerformer()
{
  return &type metadata for RCControlCenterToggleRecordingIntentPerformer;
}

uint64_t sub_100103A38(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  id v5;
  id v6;
  _BYTE v7[24];

  v2 = a2 + 16;
  if (*a1 == 1)
  {
    swift_beginAccess(v2, v7, 0, 0);
    result = swift_weakLoadStrong(v2);
    if (!result)
      return result;
    v4 = result;
    if (*(_QWORD *)(result + 16) != UIBackgroundTaskInvalid)
      return swift_release(v4);
    v5 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    v6 = objc_msgSend(v5, "beginBackgroundTaskWithExpirationHandler:", 0);
    goto LABEL_8;
  }
  swift_beginAccess(v2, v7, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (!result)
    return result;
  v4 = result;
  v6 = (id)UIBackgroundTaskInvalid;
  if (*(_QWORD *)(result + 16) != UIBackgroundTaskInvalid)
  {
    v5 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    objc_msgSend(v5, "endBackgroundTask:", *(_QWORD *)(v4 + 16));
LABEL_8:

    *(_QWORD *)(v4 + 16) = v6;
  }
  return swift_release(v4);
}

uint64_t sub_100103B60()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for BackgroundTaskManager()
{
  return objc_opt_self(_TtC10VoiceMemos21BackgroundTaskManager);
}

id sub_100103CFC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlatterViewControllerCoordinator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PlatterViewControllerCoordinator()
{
  return objc_opt_self(RCPlatterViewControllerCoordinator);
}

double sub_100103D4C(uint64_t a1)
{
  void *v2;
  id v3;
  double result;
  void *v5;
  char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;

  v2 = (void *)objc_opt_self(RecorderAppDelegate);
  v3 = objc_msgSend(v2, "sharedAppDelegate");
  if (v3)
  {
    v5 = v3;
    v6 = (char *)objc_msgSend(v3, "dependencyContainer");

    if (v6)
    {
      v7 = *(_QWORD *)&v6[OBJC_IVAR___RCRecorderAppDelegateDependencyContainer_secureAppAssertionManager];
      swift_retain(v7);

      v8 = objc_msgSend(v2, "sharedAppDelegate");
      if (v8
        && (v9 = v8,
            v10 = objc_msgSend(v8, "dynamicIslandSceneDelegate"),
            v9,
            v10)
        && (v11 = objc_msgSend(v10, "platterViewController"), v10, v11))
      {
        sub_100103EB0();
        if ((static NSObject.== infix(_:_:)(a1, v11) & 1) != 0)
          sub_1000CE1E0();
        swift_release(v7);

      }
      else
      {
        *(_QWORD *)&result = swift_release(v7).n128_u64[0];
      }
    }
  }
  return result;
}

unint64_t sub_100103EB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001EC570;
  if (!qword_1001EC570)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001EC570);
  }
  return result;
}

ValueMetadata *type metadata accessor for LockScreenSessionManager()
{
  return &type metadata for LockScreenSessionManager;
}

id sub_100103F98()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Platform();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for Platform()
{
  return objc_opt_self(RCPlatform);
}

uint64_t sub_100103FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  return swift_task_switch(sub_100104004, 0, 0);
}

uint64_t sub_100104004()
{
  uint64_t *v0;
  uint64_t **v1;

  if (qword_1001E8F88 != -1)
    swift_once(&qword_1001E8F88, sub_1000B6710);
  v1 = (uint64_t **)swift_task_alloc(dword_1001EA6DC);
  v0[11] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_100104084;
  return sub_1000B67D8(v0[8], v0[9], v0[10]);
}

uint64_t sub_100104084()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 88);
  v3 = *v1;
  *(_QWORD *)(v3 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1001040F0, 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1001040F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  if (qword_1001E8F80 != -1)
    swift_once(&qword_1001E8F80, sub_1000B5218);
  v1 = *(_QWORD *)(v0 + 96);
  v2 = type metadata accessor for Logger(0);
  sub_1000AACFC(v2, (uint64_t)qword_1001F6C20);
  v3 = static os_log_type_t.error.getter();
  swift_errorRetain(v1);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = v3;
  v7 = os_log_type_enabled(v5, v3);
  v8 = *(_QWORD *)(v0 + 96);
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v17 = v10;
    *(_DWORD *)v9 = 136315394;
    *(_QWORD *)(v0 + 40) = sub_1001049A8(0xD000000000000025, 0x8000000100186570, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2080;
    swift_getErrorValue(v8, v0 + 48, v0 + 16);
    v11 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v13 = v12;
    *(_QWORD *)(v0 + 56) = sub_1001049A8(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s Unable to retrieve existing transcription with error - %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 96));
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  v14 = *(_QWORD *)(v0 + 64);
  v15 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100104478(uint64_t a1, const void *a2, void *a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;

  v3[2] = a3;
  v7 = type metadata accessor for AttributedString.CharacterView(0);
  v3[3] = v7;
  v3[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100014E10((uint64_t *)&unk_1001ECD50);
  v9 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[5] = v9;
  v3[6] = _Block_copy(a2);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v12 = v11;
  v3[7] = v11;
  v13 = dword_1001ED524;
  v14 = a3;
  v15 = (_QWORD *)swift_task_alloc(v13);
  v3[8] = v15;
  *v15 = v3;
  v15[1] = sub_10010456C;
  v15[9] = v10;
  v15[10] = v12;
  v15[8] = v9;
  return swift_task_switch(sub_100104004, 0, 0);
}

uint64_t sub_10010456C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  return swift_task_switch(sub_1001045C0, 0, 0);
}

uint64_t sub_1001045C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(_QWORD, _QWORD);
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = type metadata accessor for AttributedString(0);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(void **)(v0 + 16);
    sub_100005440(v1, (uint64_t *)&unk_1001ECD50);

    v5 = 0;
    v6 = *(_QWORD *)(v0 + 56);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 56);
    v9 = *(_QWORD *)(v0 + 24);
    v8 = *(_QWORD *)(v0 + 32);
    v10 = *(void **)(v0 + 16);
    v11 = sub_10001B7CC(&qword_1001EC110, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
    dispatch thunk of AttributedStringProtocol.characters.getter(v2, v11);
    v12 = sub_10001B7CC(&qword_1001EAF90, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView, (uint64_t)&protocol conformance descriptor for AttributedString.CharacterView);
    String.init<A>(_:)(v8, v9, v12);
    v6 = v13;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    swift_bridgeObjectRelease(v7);

    v5 = String._bridgeToObjectiveC()();
  }
  v15 = *(_QWORD *)(v0 + 40);
  v14 = *(void (***)(_QWORD, _QWORD))(v0 + 48);
  v16 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRelease(v6);
  ((void (**)(_QWORD, NSString))v14)[2](v14, v5);

  _Block_release(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100104764()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCControlsActionHelper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RCControlsActionHelper()
{
  return objc_opt_self(_TtC10VoiceMemos22RCControlsActionHelper);
}

uint64_t sub_1001047B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_10001B80C;
  return v6();
}

uint64_t sub_100104808(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_10001B80C;
  return v7();
}

uint64_t sub_10010485C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_100005440(a1, &qword_1001E9BB0);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = swift_allocObject(&unk_1001B28A8, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v9, v18, (char *)&type metadata for () + 8, &unk_1001ED558, v17);
}

uint64_t sub_1001049A8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_100104A78(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1000C113C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1000C113C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10001B498(v12);
  return v7;
}

uint64_t sub_100104A78(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100104C30(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100104C30(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_100104CC4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100104F14(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100104F14(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_100104CC4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100104E38(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100104E38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100014E10(&qword_1001ED528);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100104E9C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_100104F14(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100014E10(&qword_1001ED528);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100105060()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100105094()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (const void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1001ED534);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100003A7C;
  return ((uint64_t (*)(uint64_t, const void *, void *))((char *)&dword_1001ED530 + dword_1001ED530))(v2, v3, v4);
}

uint64_t sub_100105108()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010512C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1001ED554);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100003A7C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1001ED550 + dword_1001ED550))(a1, v4);
}

void **assignWithCopy for RCIntentSceneConfigurator(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

void **assignWithTake for RCIntentSceneConfigurator(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for RCIntentSceneConfigurator(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RCIntentSceneConfigurator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RCIntentSceneConfigurator()
{
  return &type metadata for RCIntentSceneConfigurator;
}

void sub_1001052BC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[5];
  uint64_t v12;

  v4 = sub_100014E10(&qword_1001ED580);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_1001B2958, v8 + v6, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1001059E8;
  v12 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A5DB0;
  aBlock[3] = &unk_1001B2970;
  v10 = _Block_copy(aBlock);
  objc_msgSend(a2, "goToAllRecordingsIfNeeded:completion:", 1, v10, swift_release(v12).n128_f64[0]);
  _Block_release(v10);
}

uint64_t sub_1001053F0(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v2[2] = a1;
  v2[3] = v3;
  v4 = type metadata accessor for MainActor(0);
  v2[4] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  return swift_task_switch(sub_100105460, v5, v6);
}

uint64_t sub_100105460()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t (*v11)(void);

  v1 = v0[3];
  swift_release(v0[4]);
  if (v1)
  {
    v2 = (_QWORD *)v0[2];
    v3 = (void *)v0[3];
    *v2 = v3;
    v4 = enum case for IntentSceneConfiguration.existingScene(_:);
    v5 = type metadata accessor for IntentSceneConfiguration(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v2, v4, v5);
  }
  else
  {
    v6 = v0[2];
    v7 = enum case for IntentSceneConfiguration.newScene(_:);
    v8 = type metadata accessor for IntentSceneConfiguration(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
    v3 = 0;
  }
  v11 = (uint64_t (*)(void))v0[1];
  v9 = v3;
  return v11();
}

uint64_t sub_100105518(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1001ED570 + dword_1001ED570);
  v5 = (_QWORD *)swift_task_alloc(unk_1001ED574);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100003A7C;
  return v7(a1, a2);
}

uint64_t sub_100105584(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[8] = a1;
  v2[9] = a2;
  v3 = type metadata accessor for MainActor(0);
  v2[10] = v3;
  v2[11] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[12] = v4;
  v2[13] = v5;
  return swift_task_switch(sub_1001055F4, v4, v5);
}

uint64_t sub_1001055F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  __n128 v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = objc_opt_self(UIWindowScene);
  v3 = swift_dynamicCastObjCClass(v1, v2);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = *(id *)(v0 + 64);
    v6 = objc_msgSend(v4, "delegate");
    *(_QWORD *)(v0 + 112) = v6;
    if (!v6)
    {
      v23 = *(void **)(v0 + 64);
      swift_release(*(_QWORD *)(v0 + 88));

      return (*(uint64_t (**)(__n128))(v0 + 8))(v22);
    }
    v7 = v6;
    v8 = objc_opt_self(RCDefaultSceneDelegate);
    v9 = swift_dynamicCastObjCClass(v7, v8);
    if (!v9)
    {
      v24 = *(void **)(v0 + 64);
      swift_release(*(_QWORD *)(v0 + 88));

      swift_unknownObjectRelease(v7);
      return (*(uint64_t (**)(__n128))(v0 + 8))(v22);
    }
    v10 = (void *)v9;
    sub_10001BB88(*(_QWORD *)(v0 + 72), v0 + 16);
    v11 = sub_100014E10(&qword_1001ED578);
    if (swift_dynamicCast(v0 + 56, v0 + 16, v11, &type metadata for SearchRecordings, 6))
    {
      v12 = objc_msgSend(v10, "mainViewController", swift_release(*(_QWORD *)(v0 + 56)).n128_f64[0]);
      *(_QWORD *)(v0 + 120) = v12;
      v13 = objc_msgSend(v12, "splitViewController");
      *(_QWORD *)(v0 + 128) = v13;
      if (!v13)
      {
        v26 = *(_QWORD *)(v0 + 88);
        v27 = *(void **)(v0 + 64);
        swift_unknownObjectRelease(v7);
        swift_release(v26);

        return (*(uint64_t (**)(__n128))(v0 + 8))(v22);
      }
      v14 = v13;
      v15 = objc_opt_self(RCSplitViewController);
      v16 = (void *)swift_dynamicCastObjCClass(v14, v15);
      if (v16)
      {
        v17 = objc_msgSend(v16, "isCollapsedAndShowingPrimary");
        if ((_DWORD)v17)
        {
          *(_QWORD *)(v0 + 136) = static MainActor.shared.getter(v17);
          v18 = swift_task_alloc(32);
          *(_QWORD *)(v0 + 144) = v18;
          *(_QWORD *)(v18 + 16) = v12;
          v19 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
          *(_QWORD *)(v0 + 152) = v19;
          *v19 = v0;
          v19[1] = sub_1001058B4;
          return withCheckedContinuation<A>(isolation:function:_:)();
        }
        v30 = *(_QWORD *)(v0 + 88);

        swift_unknownObjectRelease(v7);
        v21 = v30;
        goto LABEL_10;
      }
      v28 = *(_QWORD *)(v0 + 88);
      v29 = *(void **)(v0 + 64);
      swift_unknownObjectRelease(v7);
      swift_release(v28);

    }
    else
    {
      v25 = *(_QWORD *)(v0 + 88);
      v14 = *(void **)(v0 + 64);
      swift_unknownObjectRelease(v7);
      swift_release(v25);
    }

    return (*(uint64_t (**)(__n128))(v0 + 8))(v22);
  }
  v21 = *(_QWORD *)(v0 + 88);
LABEL_10:
  v22 = swift_release(v21);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v22);
}

uint64_t sub_1001058B4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 144);
  v3 = *(_QWORD *)(*v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*v0 + 152));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10010591C, *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104));
}

uint64_t sub_10010591C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(void **)(v0 + 120);
  v1 = *(void **)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);

  swift_unknownObjectRelease(v3);
  swift_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10010597C(uint64_t a1)
{
  uint64_t v1;

  sub_1001052BC(a1, *(void **)(v1 + 16));
}

uint64_t sub_100105984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100014E10(&qword_1001ED580);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001059E8()
{
  uint64_t v0;

  v0 = sub_100014E10(&qword_1001ED580);
  return CheckedContinuation.resume(returning:)(v0, v0);
}

uint64_t sub_100105A28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100105A38(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100105A44(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v8[2];
  _QWORD v9[2];

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v9[0] = 15;
  v9[1] = v3 | (v2 << 16);
  v8[0] = a1;
  v8[1] = a2;
  swift_bridgeObjectRetain(a2);
  v4 = sub_100014E10(&qword_1001EC7D0);
  v5 = sub_1000F367C();
  v6 = sub_1000A3A18();
  return _NSRange.init<A, B>(_:in:)(v9, v8, v4, &type metadata for String, v5, v6);
}

_QWORD *sub_100105AE0(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v23)(const void *, uint64_t, uint64_t);
  void *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[2];
    v9 = a2[3];
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v9;
    v10 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v10;
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    v11 = *(_OWORD *)(a2 + 9);
    *(_WORD *)(a1 + 88) = *((_WORD *)a2 + 44);
    v13 = (void *)a2[12];
    v12 = a2[13];
    *(_QWORD *)(a1 + 96) = v13;
    *(_QWORD *)(a1 + 104) = v12;
    v14 = a3[10];
    __dst = (void *)(a1 + v14);
    v15 = (char *)a2 + v14;
    *(_OWORD *)(a1 + 72) = v11;
    v16 = type metadata accessor for UIContentUnavailableConfiguration(0);
    v17 = *(_QWORD *)(v16 - 8);
    v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v18 = v13;
    if (v23(v15, 1, v16))
    {
      v19 = sub_100014E10(&qword_1001EC588);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    v21 = a3[12];
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)v4 + v21) = *((_BYTE *)a2 + v21);
  }
  return v4;
}

uint64_t sub_100105C58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UIContentUnavailableConfiguration(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t sub_100105CEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *__dst;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 72);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  v11 = *(void **)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v11;
  *(_QWORD *)(a1 + 104) = v10;
  v12 = a3[10];
  __dst = (void *)(a1 + v12);
  v13 = (const void *)(a2 + v12);
  *(_OWORD *)(a1 + 72) = v9;
  v14 = type metadata accessor for UIContentUnavailableConfiguration(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v17 = v11;
  if (v16(v13, 1, v14))
  {
    v18 = sub_100014E10(&qword_1001EC588);
    memcpy(__dst, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(__dst, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
  }
  v19 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  return a1;
}

uint64_t sub_100105E30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int16 v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_OWORD *)(a2 + 32);
  v13 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = v13;
  v14 = *(_WORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_WORD *)(a1 + 88) = v14;
  v15 = *(void **)(a2 + 96);
  v16 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v15;
  v17 = v15;

  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v18 = a3[10];
  v19 = (void *)(a1 + v18);
  v20 = (void *)(a2 + v18);
  v21 = type metadata accessor for UIContentUnavailableConfiguration(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 24))(v19, v20, v21);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    v26 = sub_100014E10(&qword_1001EC588);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v19, v20, v21);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_7:
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100105FE4(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  v8 = a3[10];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v11 = type metadata accessor for UIContentUnavailableConfiguration(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100014E10(&qword_1001EC588);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  return a1;
}

uint64_t sub_1001060EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v9);
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  v11 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);

  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v12 = a3[10];
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = type metadata accessor for UIContentUnavailableConfiguration(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = sub_100014E10(&qword_1001EC588);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  v21 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  return a1;
}

uint64_t sub_100106278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100106284);
}

uint64_t sub_100106284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100014E10(&qword_1001EC588);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_100106304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100106310);
}

uint64_t sub_100106310(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100014E10(&qword_1001EC588);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TranscriptViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1001ED5E0;
  if (!qword_1001ED5E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TranscriptViewModel);
  return result;
}

void sub_1001063C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = &unk_10018D448;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = &unk_10018D460;
  v4[4] = &unk_10018D478;
  v4[5] = &unk_10018D490;
  sub_100106470(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    v4[7] = &unk_10018D4A8;
    v4[8] = &unk_10018D4A8;
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
  }
}

void sub_100106470(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001ED5F0)
  {
    v2 = type metadata accessor for UIContentUnavailableConfiguration(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001ED5F0);
  }
}

uint64_t sub_1001064C4(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x656C695370696B73;
  else
    v3 = 0xD000000000000010;
  if (v2)
    v4 = 0x8000000100182010;
  else
    v4 = 0xEB0000000065636ELL;
  if ((a2 & 1) != 0)
    v5 = 0x656C695370696B73;
  else
    v5 = 0xD000000000000010;
  if ((a2 & 1) != 0)
    v6 = 0xEB0000000065636ELL;
  else
    v6 = 0x8000000100182010;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_100106574(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000010;
  v3 = 0x8000000100182050;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000016;
    else
      v5 = 0x64726F6365524352;
    if (v4 == 1)
      v6 = 0x8000000100182070;
    else
      v6 = 0xEF64726143676E69;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000010;
  v6 = 0x8000000100182050;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0xD000000000000016;
    else
      v2 = 0x64726F6365524352;
    if (v7 == 1)
      v3 = 0x8000000100182070;
    else
      v3 = 0xEF64726143676E69;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
  {
    v8 = 1;
    v3 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

uint64_t sub_100106690(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6369666963657073;
  else
    v3 = 0x6563655274736F6DLL;
  if (v2)
    v4 = 0xEA0000000000746ELL;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6369666963657073;
  else
    v5 = 0x6563655274736F6DLL;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xEA0000000000746ELL;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_100106738(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  _OWORD v39[2];
  _OWORD v40[2];
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100014E10(&qword_1001ED648);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v30 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v29 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v29)
      goto LABEL_37;
    v15 = *(_QWORD *)(v30 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v29)
        goto LABEL_37;
      v15 = *(_QWORD *)(v30 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v29)
          goto LABEL_37;
        v15 = *(_QWORD *)(v30 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v29)
            goto LABEL_37;
          v15 = *(_QWORD *)(v30 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v13);
    sub_1000C113C(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v42 + 8);
    *(_QWORD *)&v42[0] = v18;
    v40[0] = v42[0];
    v40[1] = v42[1];
    v41 = v43;
    *(_QWORD *)&v39[0] = v18;
    type metadata accessor for Key(0);
    v20 = v19;
    v21 = v18;
    swift_dynamicCast(&v31, v39, v20, &type metadata for AnyHashable, 7);
    sub_100108B34((_OWORD *)((char *)v40 + 8), v34);
    v35 = v31;
    v36 = v32;
    v37 = v33;
    sub_100108B34(v34, v38);
    v31 = v35;
    v32 = v36;
    v33 = v37;
    sub_100108B34(v38, v39);
    sub_100108B34(v39, &v35);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v22 = -1 << *((_BYTE *)v3 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)&v7[8 * (v23 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)&v7[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)&v7[8 * v24];
      }
      while (v28 == -1);
      v10 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v31;
    *(_OWORD *)(v11 + 16) = v32;
    *(_QWORD *)(v11 + 32) = v33;
    result = (uint64_t)sub_100108B34(&v35, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v29)
  {
LABEL_37:
    swift_release(v3);
    sub_1000D1BFC(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v30 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v29)
      goto LABEL_37;
    v15 = *(_QWORD *)(v30 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

_OWORD *sub_100106AFC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _OWORD *result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  int64_t v33;
  uint64_t v34;
  _OWORD v35[4];
  _OWORD v36[2];
  uint64_t v37;
  _OWORD v38[2];
  void *v39;
  _OWORD v40[2];
  uint64_t v41;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100014E10(&qword_1001ED650);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  }
  else
  {
    v2 = &_swiftEmptyDictionarySingleton;
  }
  v31 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(63 - v3) >> 6;
  v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain(a1);
  result = (_OWORD *)swift_retain(v2);
  v33 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v33 << 6);
      goto LABEL_28;
    }
    v11 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v30)
      goto LABEL_37;
    v12 = *(_QWORD *)(v31 + 8 * v11);
    v13 = v33 + 1;
    if (!v12)
    {
      v13 = v33 + 2;
      if (v33 + 2 >= v30)
        goto LABEL_37;
      v12 = *(_QWORD *)(v31 + 8 * v13);
      if (!v12)
      {
        v13 = v33 + 3;
        if (v33 + 3 >= v30)
          goto LABEL_37;
        v12 = *(_QWORD *)(v31 + 8 * v13);
        if (!v12)
        {
          v13 = v33 + 4;
          if (v33 + 4 >= v30)
            goto LABEL_37;
          v12 = *(_QWORD *)(v31 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v33 = v13;
LABEL_28:
    v15 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v10);
    sub_1000A53CC(*(_QWORD *)(a1 + 56) + 40 * v10, (uint64_t)v40);
    v39 = v15;
    v36[0] = v40[0];
    v36[1] = v40[1];
    v37 = v41;
    *(_QWORD *)&v38[0] = v15;
    v16 = v15;
    swift_dynamicCast((char *)v38 + 8, v36, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, 7);
    v17 = *(_QWORD *)&v38[0];
    sub_100108B34((_OWORD *)((char *)v38 + 8), v35);
    sub_100108B34(v35, v38);
    sub_100108B34(v38, v36);
    v18 = v2[5];
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;
    Hasher.init(_seed:)(&v34, v18);
    String.hash(into:)(&v34, v19, v21);
    v22 = Hasher._finalize()();
    result = (_OWORD *)swift_bridgeObjectRelease(v21);
    v23 = -1 << *((_BYTE *)v2 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)&v6[8 * (v24 >> 6)]) != 0)
    {
      v8 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)&v6[8 * (v24 >> 6)])) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)&v6[8 * v25];
      }
      while (v29 == -1);
      v8 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)&v6[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v8;
    *(_QWORD *)(v2[6] + 8 * v8) = v17;
    result = sub_100108B34(v36, (_OWORD *)(v2[7] + 32 * v8));
    ++v2[2];
  }
  v14 = v33 + 5;
  if (v33 + 5 >= v30)
  {
LABEL_37:
    swift_release(v2);
    sub_1000D1BFC(a1);
    return v2;
  }
  v12 = *(_QWORD *)(v31 + 8 * v14);
  if (v12)
  {
    v13 = v33 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v30)
      goto LABEL_37;
    v12 = *(_QWORD *)(v31 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

_OWORD *sub_100106EB0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  _OWORD *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  _OWORD v36[4];
  _OWORD v37[2];
  _OWORD v38[2];
  _OWORD v39[2];
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100014E10(&qword_1001ED650);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v33 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v32 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = (_OWORD *)swift_retain(v3);
  v34 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v34 << 6);
      goto LABEL_28;
    }
    v12 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v12 >= v32)
      goto LABEL_37;
    v13 = *(_QWORD *)(v33 + 8 * v12);
    v14 = v34 + 1;
    if (!v13)
    {
      v14 = v34 + 2;
      if (v34 + 2 >= v32)
        goto LABEL_37;
      v13 = *(_QWORD *)(v33 + 8 * v14);
      if (!v13)
      {
        v14 = v34 + 3;
        if (v34 + 3 >= v32)
          goto LABEL_37;
        v13 = *(_QWORD *)(v33 + 8 * v14);
        if (!v13)
        {
          v14 = v34 + 4;
          if (v34 + 4 >= v32)
            goto LABEL_37;
          v13 = *(_QWORD *)(v33 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v34 = v14;
LABEL_28:
    v16 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v11);
    sub_1000F1D54(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)v41 + 8, &qword_1001EA0E0);
    *(_QWORD *)&v41[0] = v16;
    v39[0] = v41[0];
    v39[1] = v41[1];
    v40 = v42;
    *(_QWORD *)&v38[0] = v16;
    sub_1000F322C((uint64_t)v39 + 8, (uint64_t)v37, &qword_1001EA0E0);
    v17 = v16;
    v18 = sub_100014E10(&qword_1001EA0E0);
    swift_dynamicCast((char *)v38 + 8, v37, v18, (char *)&type metadata for Any + 8, 7);
    v19 = *(_QWORD *)&v38[0];
    sub_100108B34((_OWORD *)((char *)v38 + 8), v36);
    sub_100108B34(v36, v38);
    sub_100108B34(v38, v37);
    v20 = v3[5];
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v23 = v22;
    Hasher.init(_seed:)(&v35, v20);
    String.hash(into:)(&v35, v21, v23);
    v24 = Hasher._finalize()();
    result = (_OWORD *)swift_bridgeObjectRelease(v23);
    v25 = -1 << *((_BYTE *)v3 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)&v7[8 * (v26 >> 6)]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)&v7[8 * (v26 >> 6)])) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)&v7[8 * v27];
      }
      while (v31 == -1);
      v9 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)&v7[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    *(_QWORD *)(v3[6] + 8 * v9) = v19;
    result = sub_100108B34(v37, (_OWORD *)(v3[7] + 32 * v9));
    ++v3[2];
  }
  v15 = v34 + 5;
  if (v34 + 5 >= v32)
  {
LABEL_37:
    swift_release(v3);
    sub_1000D1BFC(a1);
    return v3;
  }
  v13 = *(_QWORD *)(v33 + 8 * v15);
  if (v13)
  {
    v14 = v34 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v32)
      goto LABEL_37;
    v13 = *(_QWORD *)(v33 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

Swift::Int sub_100107294(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v3 = 0xD000000000000010;
  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    if (a2 == 1)
      v3 = 0xD000000000000016;
    else
      v3 = 0x64726F6365524352;
    if (a2 == 1)
      v4 = 0x8000000100182070;
    else
      v4 = 0xEF64726143676E69;
  }
  else
  {
    v4 = 0x8000000100182050;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100107344(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return sub_1001077C4(a1[2], a2[2]);
  else
    return 0;
}

uint64_t sub_10010736C(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a2 + 16);
  result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
    return *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t sub_10010739C(void *a1)
{
  void *v1;
  void *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  Class isa;
  id v33;
  uint64_t v34;
  Class v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1;
  sub_100108AF8();
  if ((static NSObject.== infix(_:_:)(a1, v1) & 1) != 0)
    return 1;
  v4 = objc_msgSend(a1, "string");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = objc_msgSend(v2, "string");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  if (v5 == v9 && v7 == v11)
  {
    swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v9, v11, 0);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v11);
    result = 0;
    if ((v13 & 1) == 0)
      return result;
  }
  v38 = 0;
  v39 = 0;
  v36 = 0;
  v37 = 0;
  if ((uint64_t)objc_msgSend(v2, "length") < 1)
  {
    v21 = 0;
    v20 = 0;
LABEL_28:
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v20);
    return 1;
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  while (1)
  {
    if (__OFADD__(v15, v16))
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
    }
    if (v19 >= v15 + v16)
    {
      swift_bridgeObjectRelease(v20);
      v22 = objc_msgSend(v2, "attributesAtIndex:effectiveRange:", v19, &v38);
      type metadata accessor for Key(0);
      v24 = v23;
      v25 = sub_10001B7CC((unint64_t *)&qword_1001E92F8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001879A4);
      v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v22, v24, (char *)&type metadata for Any + 8, v25);

    }
    if (__OFADD__(v17, v18))
      goto LABEL_33;
    if (v19 >= v17 + v18)
    {
      swift_bridgeObjectRelease(v21);
      v26 = objc_msgSend(a1, "attributesAtIndex:effectiveRange:", v19, &v36);
      type metadata accessor for Key(0);
      v28 = v27;
      v29 = sub_10001B7CC((unint64_t *)&qword_1001E92F8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1001879A4);
      v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v26, v28, (char *)&type metadata for Any + 8, v29);

    }
    if (v20)
    {
      if (v21)
      {
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        v30 = sub_100106738(v20);
        swift_bridgeObjectRelease(v20);
        v31 = objc_allocWithZone((Class)NSDictionary);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v30);
        v33 = objc_msgSend(v31, "initWithDictionary:", isa);

        v34 = sub_100106738(v21);
        swift_bridgeObjectRelease(v21);
        v35 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v34);
        LOBYTE(v34) = objc_msgSend(v33, "isEqualToDictionary:", v35);

        if ((v34 & 1) == 0)
          break;
      }
    }
    v18 = v36;
    v17 = v37;
    if (__OFADD__(v37, v36))
      goto LABEL_34;
    v16 = v38;
    v15 = v39;
    if (__OFADD__(v39, v38))
      goto LABEL_35;
    if (v39 + v38 >= v37 + v36)
      v19 = v37 + v36;
    else
      v19 = v39 + v38;
    if (v19 >= (uint64_t)objc_msgSend(v2, "length"))
      goto LABEL_28;
  }
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v21);
  return 0;
}

uint64_t sub_100107788(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  return sub_10010739C(*(void **)a2) & (v2 == v3);
}

uint64_t sub_1001077C4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  void *v15;
  unint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  int64_t v21;
  _BYTE v22[40];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v20 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v21 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v9 = v8 | (v4 << 6);
LABEL_8:
      v10 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v9);
      sub_1000A53CC(*(_QWORD *)(v3 + 56) + 40 * v9, (uint64_t)&v23 + 8);
      *(_QWORD *)&v23 = v10;
      v11 = v10;
      goto LABEL_27;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v12 < v21)
    {
      v13 = *(_QWORD *)(v20 + 8 * v12);
      if (v13)
        goto LABEL_12;
      v14 = v4 + 2;
      ++v4;
      if (v12 + 1 < v21)
      {
        v13 = *(_QWORD *)(v20 + 8 * v14);
        if (v13)
          goto LABEL_15;
        v4 = v12 + 1;
        if (v12 + 2 < v21)
        {
          v13 = *(_QWORD *)(v20 + 8 * (v12 + 2));
          if (v13)
          {
            v12 += 2;
            goto LABEL_12;
          }
          v14 = v12 + 3;
          v4 = v12 + 2;
          if (v12 + 3 < v21)
            break;
        }
      }
    }
LABEL_26:
    v7 = 0;
    v24 = 0u;
    v25 = 0u;
    v23 = 0u;
LABEL_27:
    sub_1000F322C((uint64_t)&v23, (uint64_t)&v26, &qword_1001EB280);
    v15 = v26;
    if (!v26)
      return 1;
    v23 = v27;
    v24 = v28;
    *(_QWORD *)&v25 = v29;
    v16 = sub_100107B54((uint64_t)v26);
    v18 = v17;

    if ((v18 & 1) == 0)
    {
      sub_1000D1BC8((uint64_t)&v23);
      return 0;
    }
    sub_1000A53CC(*(_QWORD *)(a2 + 56) + 40 * v16, (uint64_t)v22);
    v19 = static AnyHashable.== infix(_:_:)(v22, &v23);
    sub_1000D1BC8((uint64_t)v22);
    result = sub_1000D1BC8((uint64_t)&v23);
    if ((v19 & 1) == 0)
      return 0;
  }
  v13 = *(_QWORD *)(v20 + 8 * v14);
  if (v13)
  {
LABEL_15:
    v12 = v14;
LABEL_12:
    v7 = (v13 - 1) & v13;
    v9 = __clz(__rbit64(v13)) + (v12 << 6);
    v4 = v12;
    goto LABEL_8;
  }
  while (1)
  {
    v12 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v12 >= v21)
    {
      v4 = v21 - 1;
      goto LABEL_26;
    }
    v13 = *(_QWORD *)(v20 + 8 * v12);
    ++v14;
    if (v13)
      goto LABEL_12;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100107A34(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t *i;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v2 = a1[2];
  if (v2 == a2[2])
  {
    if (!v2 || a1 == a2)
      return 1;
    if (a1[4] == a2[4] && a1[5] == a2[5])
    {
      v6 = a1[6];
      v7 = a2[6];
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v7);
      v8 = sub_1001077C4(v6, v7);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v7);
      if ((v8 & 1) != 0)
      {
        v9 = v2 - 1;
        if (v2 == 1)
          return 1;
        v11 = a2 + 9;
        for (i = a1 + 9; *(i - 2) == *(v11 - 2) && *(i - 1) == *(v11 - 1); i += 3)
        {
          v14 = *i;
          v15 = *v11;
          swift_bridgeObjectRetain(*i);
          swift_bridgeObjectRetain(v15);
          v16 = sub_1001077C4(v14, v15);
          swift_bridgeObjectRelease(v14);
          swift_bridgeObjectRelease(v15);
          if ((v16 & 1) == 0)
            break;
          v11 += 3;
          result = 1;
          if (!--v9)
            return result;
        }
      }
    }
  }
  return 0;
}

unint64_t sub_100107B54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_100107EF8(a1, v7);
}

unint64_t sub_100107BD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10010806C(a1, v4);
}

unint64_t sub_100107C04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_100108130(a1, a2, v5);
}

unint64_t sub_100107C68(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  unint64_t v5;
  unint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v2 = v1;
  Hasher.init(_seed:)(v9, *(_QWORD *)(v2 + 40));
  v4 = a1 & 1;
  if ((a1 & 1) != 0)
    v5 = 0x656C695370696B73;
  else
    v5 = 0xD000000000000010;
  if ((a1 & 1) != 0)
    v6 = 0xEB0000000065636ELL;
  else
    v6 = 0x8000000100182010;
  String.hash(into:)(v9, v5, v6);
  swift_bridgeObjectRelease(v6);
  v7 = Hasher._finalize()();
  return sub_100108210(v4, v7);
}

unint64_t sub_100107D08(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v2 = v1;
  Hasher.init(_seed:)(v9, *(_QWORD *)(v2 + 40));
  v4 = a1 & 1;
  if ((a1 & 1) != 0)
    v5 = 0x6369666963657073;
  else
    v5 = 0x6563655274736F6DLL;
  if ((a1 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xEA0000000000746ELL;
  String.hash(into:)(v9, v5, v6);
  swift_bridgeObjectRelease(v6);
  v7 = Hasher._finalize()();
  return sub_100108354(v4, v7);
}

unint64_t sub_100107DA0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v2 = v1;
  v4 = 0xD000000000000010;
  Hasher.init(_seed:)(v8, *(_QWORD *)(v2 + 40));
  if (a1)
  {
    if (a1 == 1)
      v4 = 0xD000000000000016;
    else
      v4 = 0x64726F6365524352;
    if (a1 == 1)
      v5 = 0x8000000100182070;
    else
      v5 = 0xEF64726143676E69;
  }
  else
  {
    v5 = 0x8000000100182050;
  }
  String.hash(into:)(v8, v4, v5);
  swift_bridgeObjectRelease(v5);
  v6 = Hasher._finalize()();
  return sub_100108494(a1, v6);
}

unint64_t sub_100107E6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_100107EF8(a1, v7);
}

unint64_t sub_100107EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_10010806C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1000A53CC(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_1000D1BC8((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100108130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100108210(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v11;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 0x656C695370696B73;
    else
      v6 = 0xD000000000000010;
    if ((a1 & 1) != 0)
      v7 = 0xEB0000000065636ELL;
    else
      v7 = 0x8000000100182010;
    while (1)
    {
      v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0x656C695370696B73 : 0xD000000000000010;
      v9 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0xEB0000000065636ELL : 0x8000000100182010;
      if (v8 == v6 && v9 == v7)
        break;
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v6, v7, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      if ((v11 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n(v7, 2);
  }
  return v4;
}

unint64_t sub_100108354(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 0x6369666963657073;
    else
      v6 = 0x6563655274736F6DLL;
    if ((a1 & 1) != 0)
      v7 = 0xE800000000000000;
    else
      v7 = 0xEA0000000000746ELL;
    while (1)
    {
      v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0x6369666963657073 : 0x6563655274736F6DLL;
      v9 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0xE800000000000000 : 0xEA0000000000746ELL;
      if (v8 == v6 && v9 == v7)
        break;
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v6, v7, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      if ((v11 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n(v7, 2);
  }
  return v4;
}

unint64_t sub_100108494(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    while (1)
    {
      v6 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v4);
      v7 = 0xD000000000000016;
      if (v6 != 1)
        v7 = 0x64726F6365524352;
      v8 = 0xEF64726143676E69;
      if (v6 == 1)
        v8 = 0x8000000100182070;
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
        v9 = v7;
      else
        v9 = 0xD000000000000010;
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
        v10 = v8;
      else
        v10 = 0x8000000100182050;
      if (a1)
      {
        if (a1 == 1)
          v11 = 0xD000000000000016;
        else
          v11 = 0x64726F6365524352;
        if (a1 == 1)
          v12 = 0x8000000100182070;
        else
          v12 = 0xEF64726143676E69;
        if (v9 != v11)
          goto LABEL_24;
      }
      else
      {
        v12 = 0x8000000100182050;
        v11 = 0xD000000000000010;
        if (v9 != 0xD000000000000010)
          goto LABEL_24;
      }
      if (v10 == v12)
      {
        swift_bridgeObjectRelease_n(v10, 2);
        return v4;
      }
LABEL_24:
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v11, v12, 0);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v12);
      if ((v13 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

uint64_t sub_100108650(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  uint64_t v26;
  id v27;
  int *v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  int v39;
  int *v40;
  uint64_t v41;

  v4 = type metadata accessor for UIContentUnavailableConfiguration(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100014E10(&qword_1001EC578);
  __chkstk_darwin(v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100014E10(&qword_1001EC588);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v37 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v37 - v18;
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && v20 == v21
    || (v22 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)a1, v20, *(_QWORD *)a2, v21, 0),
        LOBYTE(v23) = 0,
        (v22 & 1) != 0))
  {
    if ((sub_1001077C4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) & 1) == 0
      || (sub_100107A34(*(_QWORD **)(a1 + 24), *(_QWORD **)(a2 + 24)) & 1) == 0)
    {
      goto LABEL_33;
    }
    if ((*(_BYTE *)(a1 + 64) & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 64))
        goto LABEL_33;
      goto LABEL_11;
    }
    LOBYTE(v23) = 0;
    if ((*(_BYTE *)(a2 + 64) & 1) == 0
      && (~vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32), *(float64x2_t *)(a2 + 32)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 48), *(float64x2_t *)(a2 + 48)))), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) == 0)
    {
LABEL_11:
      v24 = *(_BYTE *)(a2 + 89);
      if ((*(_BYTE *)(a1 + 89) & 1) != 0)
        goto LABEL_18;
      if ((*(_BYTE *)(a2 + 89) & 1) != 0)
        goto LABEL_33;
      v24 = *(_BYTE *)(a2 + 88);
      if ((*(_BYTE *)(a1 + 88) & 1) != 0)
      {
LABEL_18:
        if ((v24 & 1) == 0)
          goto LABEL_33;
      }
      else
      {
        if ((*(_BYTE *)(a2 + 88) & 1) != 0)
          goto LABEL_33;
        LOBYTE(v23) = 0;
        if (*(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72) || *(_QWORD *)(a1 + 80) != *(_QWORD *)(a2 + 80))
          return v23 & 1;
      }
      v41 = v4;
      v25 = *(void **)(a1 + 96);
      v23 = *(void **)(a2 + 96);
      if (v25)
      {
        if (!v23)
          return v23 & 1;
        v26 = *(_QWORD *)(a1 + 104);
        v37 = *(_QWORD *)(a2 + 104);
        v38 = v26;
        v40 = v23;
        v27 = v25;
        v39 = sub_10010739C(v40);

        LOBYTE(v23) = 0;
        if ((v39 & 1) == 0 || v38 != v37)
          return v23 & 1;
      }
      else if (v23)
      {
        goto LABEL_33;
      }
      v28 = (int *)type metadata accessor for TranscriptViewModel(0);
      sub_1000F1D54(a1 + v28[10], (uint64_t)v19, &qword_1001EC588);
      v40 = v28;
      sub_1000F1D54(a2 + v28[10], (uint64_t)v17, &qword_1001EC588);
      v29 = (uint64_t)&v10[*(int *)(v8 + 48)];
      sub_1000F1D54((uint64_t)v19, (uint64_t)v10, &qword_1001EC588);
      sub_1000F1D54((uint64_t)v17, v29, &qword_1001EC588);
      v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (v30((uint64_t)v10, 1, v41) == 1)
      {
        sub_100005440((uint64_t)v17, &qword_1001EC588);
        sub_100005440((uint64_t)v19, &qword_1001EC588);
        if (v30(v29, 1, v41) == 1)
        {
          sub_100005440((uint64_t)v10, &qword_1001EC588);
          goto LABEL_32;
        }
        goto LABEL_30;
      }
      sub_1000F1D54((uint64_t)v10, (uint64_t)v14, &qword_1001EC588);
      if (v30(v29, 1, v41) == 1)
      {
        sub_100005440((uint64_t)v17, &qword_1001EC588);
        sub_100005440((uint64_t)v19, &qword_1001EC588);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v41);
LABEL_30:
        sub_100005440((uint64_t)v10, &qword_1001EC578);
        goto LABEL_33;
      }
      v31 = v29;
      v32 = v41;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v31, v41);
      v33 = sub_10001B7CC(&qword_1001EC590, (uint64_t (*)(uint64_t))&type metadata accessor for UIContentUnavailableConfiguration, (uint64_t)&protocol conformance descriptor for UIContentUnavailableConfiguration);
      v34 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v32, v33);
      v35 = *(void (**)(char *, uint64_t))(v5 + 8);
      v35(v7, v32);
      sub_100005440((uint64_t)v17, &qword_1001EC588);
      sub_100005440((uint64_t)v19, &qword_1001EC588);
      v35(v14, v32);
      sub_100005440((uint64_t)v10, &qword_1001EC588);
      if ((v34 & 1) != 0)
      {
LABEL_32:
        if (*(unsigned __int8 *)(a1 + v40[11]) == *(unsigned __int8 *)(a2 + v40[11]))
        {
          LOBYTE(v23) = *(_BYTE *)(a1 + v40[12]) ^ *(_BYTE *)(a2 + v40[12]) ^ 1;
          return v23 & 1;
        }
      }
LABEL_33:
      LOBYTE(v23) = 0;
    }
  }
  return v23 & 1;
}

unint64_t sub_100108AF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001ED640;
  if (!qword_1001ED640)
  {
    v1 = objc_opt_self(NSAttributedString);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001ED640);
  }
  return result;
}

_OWORD *sub_100108B34(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

ValueMetadata *type metadata accessor for TextAttachmentConfiguration()
{
  return &type metadata for TextAttachmentConfiguration;
}

uint64_t getEnumTagSinglePayload for AutoScrollType(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AutoScrollType(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

uint64_t sub_100108BA4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100108BC0(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    *(_BYTE *)(result + 16) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoScrollType()
{
  return &type metadata for AutoScrollType;
}

ValueMetadata *type metadata accessor for HighlightConfiguration()
{
  return &type metadata for HighlightConfiguration;
}

unint64_t sub_100108C00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100014E10(&qword_1001E9520);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000F1D54(v6, (uint64_t)&v16, &qword_1001ED6C8);
    v7 = v16;
    result = sub_100107B54(v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v7;
    v10 = v4[7] + 40 * result;
    v11 = v17;
    v12 = v18;
    *(_QWORD *)(v10 + 32) = v19;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100108D38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100014E10(&qword_1001ED6F0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000F1D54(v7, (uint64_t)&v16, &qword_1001ED6F8);
    v8 = v16;
    v9 = v17;
    result = sub_100107C04(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100108B34(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100108E6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100014E10(&qword_1001ED648);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000F1D54(v7, (uint64_t)v16, &qword_1001ED6E8);
    result = sub_100107BD4((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_100108B34(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100108FAC(uint64_t a1)
{
  return sub_100108FE4(a1, &qword_1001EB950, &qword_1001ED710, (uint64_t (*)(_QWORD))sub_100107C68);
}

unint64_t sub_100108FC8(uint64_t a1)
{
  return sub_100108FE4(a1, &qword_1001EB940, &qword_1001ED708, (uint64_t (*)(_QWORD))sub_100107D08);
}

unint64_t sub_100108FE4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t result;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD);

  v31 = a4;
  v7 = sub_100014E10(a2);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
    v13 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v29 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v29);
    return (unint64_t)v13;
  }
  sub_100014E10(a3);
  v12 = static _DictionaryStorage.allocate(capacity:)(v11);
  v13 = (_QWORD *)v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_9;
  v15 = &v10[*(int *)(v7 + 48)];
  v16 = v12 + 64;
  v17 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v30 = a1;
  v18 = a1 + v17;
  v19 = *(_QWORD *)(v8 + 72);
  swift_retain(v12);
  while (1)
  {
    sub_1000F1D54(v18, (uint64_t)v10, a2);
    v20 = *v10;
    result = v31(*v10);
    if ((v22 & 1) != 0)
      break;
    v23 = result;
    *(_QWORD *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v13[6] + result) = v20;
    v24 = v13[7];
    v25 = type metadata accessor for DisplayRepresentation(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v23, v15, v25);
    v26 = v13[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_12;
    v13[2] = v28;
    v18 += v19;
    if (!--v14)
    {
      swift_release(v13);
      v29 = v30;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10010917C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_100014E10(&qword_1001EBAB0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v8;
  }
  sub_100014E10(&qword_1001ED700);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_1000F1D54(v13, (uint64_t)v5, &qword_1001EBAB0);
    v15 = *v5;
    result = sub_100107DA0(*v5);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v8[6] + result) = v15;
    v19 = v8[7];
    v20 = type metadata accessor for DisplayRepresentation(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v10, v20);
    v21 = v8[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100109314(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100014E10(&qword_1001ED6E0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = (id)*(v6 - 1);
    result = sub_100107E68();
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v4[6] + v11) = v8;
    *(_QWORD *)(v4[7] + v11) = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10010941C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100014E10(&qword_1001ED6D0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000F1D54(v7, (uint64_t)&v14, &qword_1001ED6D8);
    v8 = v14;
    result = sub_100107E68(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_100108B34(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100109548(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100014E10(&qword_1001ED6B8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1000F1D54(v7, (uint64_t)&v14, &qword_1001ED6C0);
    v8 = v14;
    result = sub_100107B54(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = sub_100014A70((uint64_t)&v15, v4[7] + 32 * result);
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100109684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  void *v3;
  NSString *v4;
  id v5;
  id v6;
  NSString *v7;
  _BYTE v9[72];

  v1 = sub_100014E10(&qword_1001ED6B0);
  inited = swift_initStackObject(v1, v9);
  *(_OWORD *)(inited + 16) = xmmword_100188080;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_styleProvider);
  if (!v3)
  {
    v7 = NSFontAttributeName;
    goto LABEL_5;
  }
  v4 = NSFontAttributeName;
  v5 = objc_msgSend(v3, "recordingControlTextFont");
  if (!v5)
  {
LABEL_5:
    *(_OWORD *)(inited + 40) = 0u;
    *(_OWORD *)(inited + 56) = 0u;
    return sub_100109548(inited);
  }
  v6 = v5;
  *(_QWORD *)(inited + 64) = sub_10010A6C4();
  *(_QWORD *)(inited + 40) = v6;
  return sub_100109548(inited);
}

id sub_1001097E8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  char *v8;
  id result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  objc_class *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  _QWORD aBlock[5];
  uint64_t v28;
  objc_super v29;
  objc_super v30;

  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1);
  v3 = (char *)&aBlock[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v4);
  v6 = (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_buttonHeight] = 0x4048800000000000;
  v7 = (void *)objc_opt_self(RCRecorderStyleProvider);
  v8 = v0;
  result = objc_msgSend(v7, "sharedStyleProvider");
  if (result)
  {
    v10 = result;
    v11 = OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_layoutHelper;
    objc_msgSend(result, "recordingControlDiameter");
    v13 = v12;

    v14 = (objc_class *)type metadata accessor for RCRecordingControlLayoutHelper();
    v15 = (char *)objc_allocWithZone(v14);
    *(_QWORD *)&v15[OBJC_IVAR____TtC10VoiceMemos30RCRecordingControlLayoutHelper_diameter] = v13;
    v30.receiver = v15;
    v30.super_class = v14;
    *(_QWORD *)&v8[v11] = objc_msgSendSuper2(&v30, "init");
    v16 = OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_styleProvider;
    *(_QWORD *)&v8[v16] = objc_msgSend(v7, "sharedStyleProvider");
    *(_QWORD *)&v8[OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_minimumWidth] = 0x4034000000000000;
    *(_QWORD *)&v8[OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_defaultPadding] = 0x4014000000000000;
    v17 = &v8[OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_titleString];
    v18 = String.LocalizationValue.init(stringLiteral:)(1162760004, 0xE400000000000000);
    static Locale.current.getter(v18);
    *(_QWORD *)v17 = String.init(localized:table:bundle:locale:comment:)(v6, 0, 0, 0, v3, 0, 0, 256);
    *((_QWORD *)v17 + 1) = v19;

    v20 = (objc_class *)type metadata accessor for RCDoneButton();
    v29.receiver = v8;
    v29.super_class = v20;
    v21 = objc_msgSendSuper2(&v29, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    v22 = swift_allocObject(&unk_1001B2B60, 24, 7);
    swift_unknownObjectWeakInit(v22 + 16, v21);
    aBlock[4] = sub_10010A988;
    v28 = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000BEB70;
    aBlock[3] = &unk_1001B2B78;
    v23 = _Block_copy(aBlock);
    v24 = v28;
    v25 = v21;
    objc_msgSend(v25, "setConfigurationUpdateHandler:", v23, swift_release(v24).n128_f64[0]);
    _Block_release(v23);

    objc_msgSend(v25, "setPointerInteractionEnabled:", 1);
    return v25;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_100109AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *result;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  NSString v31;
  id v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  id v38;
  NSString v39;
  id v40;
  double v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  void *v48;
  char *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  char *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  double v74;
  double v75;
  char v76[24];

  v4 = sub_100014E10((uint64_t *)&unk_1001EC5B8);
  __chkstk_darwin(v4);
  v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&v7 = COERCE_DOUBLE(type metadata accessor for UIButton.Configuration.CornerStyle(0));
  v74 = *(double *)(v7 - 8);
  v75 = *(double *)&v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100014E10((uint64_t *)&unk_1001ECD50);
  __chkstk_darwin(v13);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UIButton.Configuration(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a2 + 16, v76, 0, 0);
  result = (char *)swift_unknownObjectWeakLoadStrong();
  if (!result)
    return result;
  v21 = result;
  v70 = v17;
  v71 = v16;
  v72 = v6;
  v73 = a1;
  static UIButton.Configuration.filled()(result);
  v22 = &v21[OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_titleString];
  v23 = *(_QWORD *)&v21[OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_titleString];
  v24 = *(_QWORD *)&v21[OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_titleString + 8];
  swift_bridgeObjectRetain(v24);
  v25 = sub_100109684();
  v26 = sub_100106EB0(v25);
  swift_bridgeObjectRelease(v25);
  AttributeContainer.init(_:)(v26);
  AttributedString.init(_:attributes:)(v23, v24, v12);
  v27 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v15, 0, 1, v27);
  UIButton.Configuration.attributedTitle.setter(v15);
  v28 = *(void **)&v21[OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_styleProvider];
  UIButton.Configuration.baseForegroundColor.setter(objc_msgSend(v28, "recordingSectionDoneAndCancelButtonTextColor"));
  UIButton.Configuration.baseBackgroundColor.setter(objc_msgSend(v28, "recordingSectionDoneButtonInnerColor"));
  (*(void (**)(char *, _QWORD, double))(*(_QWORD *)&v74 + 104))(v9, enum case for UIButton.Configuration.CornerStyle.capsule(_:), COERCE_DOUBLE(*(_QWORD *)&v75));
  UIButton.Configuration.cornerStyle.setter(v9);
  v29 = *((_QWORD *)v22 + 1);
  v30 = objc_allocWithZone((Class)NSAttributedString);
  swift_bridgeObjectRetain(v29);
  v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v29);
  v32 = objc_msgSend(v30, "initWithString:", v31);

  objc_msgSend(v32, "size");
  v75 = v33;

  v34 = OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_layoutHelper;
  sub_1000C5054();
  v36 = v35;
  v37 = *((_QWORD *)v22 + 1);
  v38 = objc_allocWithZone((Class)NSAttributedString);
  swift_bridgeObjectRetain(v37);
  v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v37);
  v40 = objc_msgSend(v38, "initWithString:", v39);

  objc_msgSend(v40, "size");
  v74 = v41;

  v42 = *(_QWORD *)&v21[v34];
  sub_1000C5054();
  v44 = v43;
  sub_10010A37C();
  v46 = v45;
  v47 = *(double *)(v42 + OBJC_IVAR____TtC10VoiceMemos30RCRecordingControlLayoutHelper_diameter);
  v48 = (void *)objc_opt_self(RCRecorderStyleProvider);
  result = (char *)objc_msgSend(v48, "sharedStyleProvider");
  if (!result)
  {
    __break(1u);
    goto LABEL_12;
  }
  v49 = result;
  objc_msgSend(result, "recordingControlLozengeFixedWidthScaleFactor");
  v51 = v50;

  sub_1000C5054();
  v53 = v52;
  sub_10010A37C();
  v55 = v54;
  v56 = *(double *)(*(_QWORD *)&v21[v34] + OBJC_IVAR____TtC10VoiceMemos30RCRecordingControlLayoutHelper_diameter);
  result = (char *)objc_msgSend(v48, "sharedStyleProvider");
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v57 = result;
  v58 = (v36 - v75) * 0.5;
  v59 = (v44 - v74) * 0.5;
  v60 = v47 * v51;
  if (v46 > v47 * v51)
    v60 = v46;
  v61 = (v53 + v60 - v46) * 0.5;
  objc_msgSend(result, "recordingControlLozengeFixedWidthScaleFactor");
  v63 = v62;

  if (v55 > v56 * v63)
    v64 = v55;
  else
    v64 = v56 * v63;
  sub_1000C5054();
  UIButton.Configuration.contentInsets.setter(v58, v61, v59, (v65 + v64 - v55) * 0.5);
  v67 = v70;
  v66 = v71;
  v68 = v72;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v72, v19, v71);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v68, 0, 1, v66);
  UIButton.configuration.setter(v68);

  return (char *)(*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v19, v66);
}

uint64_t sub_10010A05C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  objc_class *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  objc_super v22;

  v1 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100014E10((uint64_t *)&unk_1001ECD50);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100014E10((uint64_t *)&unk_1001EC5B8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v22 - v11;
  v13 = (objc_class *)type metadata accessor for RCDoneButton();
  v22.receiver = v0;
  v22.super_class = v13;
  v14 = objc_msgSendSuper2(&v22, "updateConfiguration");
  UIButton.configuration.getter(v14);
  v15 = type metadata accessor for UIButton.Configuration(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v12, 1, v15))
  {
    v16 = *(_QWORD *)&v0[OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_titleString];
    v17 = *(_QWORD *)&v0[OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_titleString + 8];
    swift_bridgeObjectRetain(v17);
    v18 = sub_100109684();
    v19 = sub_100106EB0(v18);
    swift_bridgeObjectRelease(v18);
    AttributeContainer.init(_:)(v19);
    AttributedString.init(_:attributes:)(v16, v17, v3);
    v20 = type metadata accessor for AttributedString(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v6, 0, 1, v20);
    UIButton.Configuration.attributedTitle.setter(v6);
  }
  sub_1000F1D54((uint64_t)v12, (uint64_t)v10, (uint64_t *)&unk_1001EC5B8);
  UIButton.configuration.setter(v10);
  return sub_10010A700((uint64_t)v12);
}

void sub_10010A284()
{
  id v0;
  void *v1;

  sub_10010A37C();
  v0 = objc_msgSend((id)objc_opt_self(RCRecorderStyleProvider), "sharedStyleProvider");
  if (v0)
  {
    v1 = v0;
    objc_msgSend(v0, "recordingControlLozengeFixedWidthScaleFactor");

    sub_1000C5054();
    sub_10010A37C();
  }
  else
  {
    __break(1u);
  }
}

void sub_10010A37C()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  void *object;
  id v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  NSString v9;
  unint64_t v10;
  _OWORD *v11;
  Class isa;
  NSString v13;
  unint64_t v14;
  _OWORD *v15;
  Class v16;
  Swift::String v17;
  Swift::String v18;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v17._countAndFlagsBits = 0xD000000000000028;
  v17._object = (void *)0x8000000100186850;
  v2._countAndFlagsBits = 0x594C505041;
  v2._object = (void *)0xE500000000000000;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v17)._object;

  v5 = objc_msgSend(v0, "mainBundle");
  v18._object = (void *)0x8000000100186880;
  v6._countAndFlagsBits = 1162760004;
  v6._object = (void *)0xE400000000000000;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v18._countAndFlagsBits = 0xD000000000000011;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v18)._object;

  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v10 = sub_100109684();
  v11 = sub_100106EB0(v10);
  swift_bridgeObjectRelease(v10);
  type metadata accessor for Key(0);
  sub_10010A67C();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v11);
  objc_msgSend(v9, "sizeWithAttributes:", isa);

  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  v14 = sub_100109684();
  v15 = sub_100106EB0(v14);
  swift_bridgeObjectRelease(v14);
  v16 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  objc_msgSend(v13, "sizeWithAttributes:", v16);

}

id sub_10010A5E0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RCDoneButton();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RCDoneButton()
{
  return objc_opt_self(_TtC10VoiceMemos12RCDoneButton);
}

unint64_t sub_10010A67C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001E92F8;
  if (!qword_1001E92F8)
  {
    type metadata accessor for Key(255);
    result = swift_getWitnessTable(&unk_1001879A4, v1);
    atomic_store(result, (unint64_t *)&qword_1001E92F8);
  }
  return result;
}

unint64_t sub_10010A6C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001E9530;
  if (!qword_1001E9530)
  {
    v1 = objc_opt_self(UIFont);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001E9530);
  }
  return result;
}

uint64_t sub_10010A700(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100014E10((uint64_t *)&unk_1001EC5B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10010A740()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  unint64_t v20;
  objc_super v21;

  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1);
  v3 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v4);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_buttonHeight] = 0x4048800000000000;
  v7 = (void *)objc_opt_self(RCRecorderStyleProvider);
  v8 = objc_msgSend(v7, "sharedStyleProvider");
  if (!v8)
    __break(1u);
  v9 = OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_layoutHelper;
  v10 = v8;
  objc_msgSend(v8, "recordingControlDiameter");
  v12 = v11;

  v13 = (objc_class *)type metadata accessor for RCRecordingControlLayoutHelper();
  v14 = (char *)objc_allocWithZone(v13);
  *(_QWORD *)&v14[OBJC_IVAR____TtC10VoiceMemos30RCRecordingControlLayoutHelper_diameter] = v12;
  v21.receiver = v14;
  v21.super_class = v13;
  *(_QWORD *)&v0[v9] = objc_msgSendSuper2(&v21, "init");
  v15 = OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_styleProvider;
  *(_QWORD *)&v0[v15] = objc_msgSend(v7, "sharedStyleProvider");
  *(_QWORD *)&v0[OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_minimumWidth] = 0x4034000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_defaultPadding] = 0x4014000000000000;
  v16 = &v0[OBJC_IVAR____TtC10VoiceMemos12RCDoneButton_titleString];
  v17 = String.LocalizationValue.init(stringLiteral:)(1162760004, 0xE400000000000000);
  static Locale.current.getter(v17);
  *(_QWORD *)v16 = String.init(localized:table:bundle:locale:comment:)(v6, 0, 0, 0, v3, 0, 0, 256);
  *((_QWORD *)v16 + 1) = v18;

  v19[1] = 0;
  v20 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(v20);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100182210, "VoiceMemos/SwiftHelpers.swift", 29, 2, 12, 0);
  __break(1u);
}

uint64_t sub_10010A964()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

char *sub_10010A988(uint64_t a1)
{
  uint64_t v1;

  return sub_100109AAC(a1, v1);
}

uint64_t sub_10010A990(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10010A9A0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC10VoiceMemosP33_3EAADB84F401CBC4CB75087D215119C719ResourceBundleClass);
}

void sub_10010A9C8(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "-[RecorderAppDelegate(RCTesting) _selectFirstVoiceMemoInActiveRecordingsCollectionViewControllerWithCompletionBlock:]";
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s -- Failed to select first voice memo in the active collectionViewController", (uint8_t *)&v1, 0xCu);
}

void sub_10010AA48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- AVAudioEngine inputNode threw exception - %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010AAB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- conversionError = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010AB20(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "-[VMRecordingEngine _writeBufferToStorage:]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s -- Attempted to write audio without asset writer", (uint8_t *)&v1, 0xCu);
  sub_100023F20();
}

void sub_10010AB9C(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "-[RCShuttleBar setRecentlyDeleted:]";
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s -- Unexpected number of columns and rows in RCShuttleBar", (uint8_t *)&v1, 0xCu);
}

void sub_10010AC1C(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "-[RCActivityWaveformProcessor processAudioBuffer:]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s -- Processing buffer is too full", (uint8_t *)&v1, 0xCu);
}

void sub_10010AC9C()
{
  __assert_rtn("advanceWritePointer", "VMRingBuffer.h", 75, "mFill <= mCapacity");
}

void sub_10010ACC4()
{
  __assert_rtn("advanceReadPointer", "VMRingBuffer.h", 84, "mFill >= 0");
}

void sub_10010ACEC(void *a1, NSObject *a2)
{
  int v3;
  const char *v4;
  __int16 v5;
  id v6;

  v3 = 136315394;
  v4 = "-[RCPlaybackSettingsCollectionViewController collectionView:cellForItemAtIndexPath:]";
  v5 = 2048;
  v6 = objc_msgSend(a1, "section");
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%s -- Unexpected indexPath.section %lu", (uint8_t *)&v3, 0x16u);
}

void sub_10010AD88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_10002D910((void *)&_mh_execute_header, v0, v1, "%s -- unexpected supplementary element kind - %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010ADF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_10002D910((void *)&_mh_execute_header, v0, v1, "%s -- Unexpected indexPath %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010AE60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_10002D910((void *)&_mh_execute_header, v0, v1, "%s -- Unexpected indexPath %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010AECC(uint64_t a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 136315394;
  v3 = "-[VMAudioOutputRenderer _prepareAudioUnits:maxFramesPerRender:]";
  v4 = 2112;
  v5 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "%s -- Failed to create time stretch audio unit with error - %@", (uint8_t *)&v2, 0x16u);
}

void sub_10010AF54(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100046B64((void *)&_mh_execute_header, a1, a3, "%s -- requestedPillsToRender.length is 0. There will be nothing to render.", a5, a6, a7, a8, 2u);
}

void sub_10010AFC8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100046B64((void *)&_mh_execute_header, a1, a3, "%s -- Failed to create waveform slices. Will re-attempt on the next try.", a5, a6, a7, a8, 2u);
}

void sub_10010B03C()
{
  __assert_rtn("allocatePageAlignedMirroredMemory", "VMMemoryHelpers.m", 20, "size == round_page(size)");
}

void sub_10010B064(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100046B64((void *)&_mh_execute_header, a1, a3, "%s -- Continuing SiriKit activity, record a new memo.", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010B0D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100046B64((void *)&_mh_execute_header, a1, a3, "%s -- Continuing SiriKit activity, playback most recent memo.", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010B144()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_10002D910((void *)&_mh_execute_header, v0, v1, "%s -- WARNING: no recording matching URI: '%@'", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010B1B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_10002D910((void *)&_mh_execute_header, v0, v1, "%s -- WARNING: received invalid Spotlight URI: '%@'", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010B21C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100046B64((void *)&_mh_execute_header, a1, a3, "%s -- Continuing Spotlight activity, select specified memo.", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010B28C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_10002D910((void *)&_mh_execute_header, v0, v1, "%s -- unknown activity type:  %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010B2F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_10002D910((void *)&_mh_execute_header, v0, v1, "%s -- WARNING: no recording matching URI: '%@'", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010B364()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 136315394;
  sub_100023F28();
  sub_10004A3BC((void *)&_mh_execute_header, v0, v1, "%s -- error = %@", (uint8_t *)v2);
  sub_100023F20();
}

void sub_10010B3D4(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5[6];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "recordingID"));
  v5[0] = 136315394;
  sub_100023F28();
  sub_10004A3BC((void *)&_mh_execute_header, a2, v4, "%s -- Recording already started for recordingID = %@", (uint8_t *)v5);

}

void sub_10010B468()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 136315394;
  sub_100023F28();
  sub_10004A3BC((void *)&_mh_execute_header, v0, v1, "%s -- removeError = %@", (uint8_t *)v2);
  sub_100023F20();
}

void sub_10010B4D8()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 136315394;
  sub_100023F28();
  sub_10004A3BC((void *)&_mh_execute_header, v0, v1, "%s -- removeError = %@", (uint8_t *)v2);
  sub_100023F20();
}

void sub_10010B548(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  const char *v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v4 = 136315650;
  v5 = "-[RCStoreChangeMerger handleChange:]_block_invoke";
  v6 = 2112;
  v7 = v3;
  v8 = 2112;
  v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s -- ERROR: failed to load transaction after current token %@ (%@)", (uint8_t *)&v4, 0x20u);
}

void sub_10010B5E4(uint64_t a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 136315394;
  v3 = "-[RCStoreChangeMerger handleChange:]_block_invoke";
  v4 = 2112;
  v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s -- ERROR:  transaction is malformed:  %@", (uint8_t *)&v2, 0x16u);
}

void sub_10010B66C(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  const char *v4;
  __int16 v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = 136315394;
  v4 = "-[RCRecordingsCollectionViewControllerDataCoordinator _performSearch]_block_invoke_2";
  v5 = 2112;
  v6 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s -- Failed to query transcripts via spotlight, error = %@", (uint8_t *)&v3, 0x16u);
}

void sub_10010B6F8(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "-[RCTimelineGenerator timelinesForDateInterval:displayedRecordingTime:timelineIdentifier:]";
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "%s -- Unable to generate timelines for a nil recording start time.", (uint8_t *)&v1, 0xCu);
}

void sub_10010B778(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  void *v11;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "endDate"));
  v6 = 136315650;
  v7 = "-[RCTimelineGenerator _dateEntriesForRecordingStartTime:lastRecordingTime:elapsedTimeAtRecordingStart:recordingDu"
       "rationAtRecordingStart:timelineDateInterval:]";
  v8 = 2112;
  v9 = a1;
  v10 = 2112;
  v11 = v5;
  _os_log_fault_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_FAULT, "%s -- Unable to generate timeline date entries. The recordingStartTime %@ must not be later than the timelineDateInterval.endDate %@", (uint8_t *)&v6, 0x20u);

}

void sub_10010B838(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "endDate"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "bls_shortLoggingString"));
  sub_100023F28();
  sub_100050EE4((void *)&_mh_execute_header, v3, v4, "%s -- timeline end date = %@", v5, v6, v7, v8, 2u);

  sub_100050EF8();
}

void sub_10010B8D0(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "startDate"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "bls_shortLoggingString"));
  sub_100023F28();
  sub_100050EE4((void *)&_mh_execute_header, v3, v4, "%s -- timeline start date = %@", v5, v6, v7, v8, 2u);

  sub_100050EF8();
}

void sub_10010B968()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = RCDebugStringForTimeInterval();
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  sub_100023F28();
  sub_100050EE4((void *)&_mh_execute_header, v2, v3, "%s -- recording elapsed time = %@", v4, v5, v6, v7, 2u);

  sub_100050F08();
}

void sub_10010B9EC(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "bls_shortLoggingString"));
  sub_100023F28();
  sub_100050EE4((void *)&_mh_execute_header, v2, v3, "%s -- recording start time = %@", v4, v5, v6, v7, 2u);

  sub_100050F08();
}

void sub_10010BA70(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002D910((void *)&_mh_execute_header, a2, a3, "%s -- Change type: Visible cells %@have integrity", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010BB00()
{
  uint64_t v0;
  os_log_t v1;
  int v2;

  v2 = 136315650;
  sub_10005718C();
  sub_100057178((void *)&_mh_execute_header, v0, v1, "%s -- Integrity lost with visible UUIDS:\n%@\ndata UUIDs:\n%@\n", v2);
}

void sub_10010BB70(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "-[RCRecordingsCollectionViewController selectItemWithUUID:animated:]";
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s -- Attempting to select a UUID with an invalid indexPath", (uint8_t *)&v1, 0xCu);
  sub_100023F20();
}

void sub_10010BBEC()
{
  uint64_t v0;
  os_log_t v1;
  int v2;

  v2 = 136315650;
  sub_10005718C();
  sub_100057178((void *)&_mh_execute_header, v0, v1, "%s -- loadFileRepresentationForTypeIdentifier failed for url %@ - error: '%@'", v2);
}

void sub_10010BC5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_10002D910((void *)&_mh_execute_header, v0, v1, "%s -- WARNING: no recording matching URI: '%@'", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010BCC8(void *a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  int v6;
  const char *v7;
  __int16 v8;
  void *v9;
  __int16 v10;
  uint64_t v11;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "cellWhoseTitleIsBeingEdited"));
  v6 = 136315650;
  v7 = "-[RCRecordingsCollectionViewController didEndEditingTitle:]";
  v8 = 2112;
  v9 = v5;
  v10 = 2112;
  v11 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "%s -- prior cell being edited: %@ is the one whose editing is ending: %@", (uint8_t *)&v6, 0x20u);

}

void sub_10010BD84()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- registerError = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010BDF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- recordingsCollectionViewController thinks cell %@ is being edited, but it is not", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010BE5C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100046B64((void *)&_mh_execute_header, a1, a3, "%s -- Pausing display link", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010BECC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100046B64((void *)&_mh_execute_header, a1, a3, "%s -- Starting display link", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010BF3C(os_log_t log, float a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  double v5;

  v2 = 136315394;
  v3 = "-[RCDisplayLinkManager setPreferredFrameRateRange:]";
  v4 = 2048;
  v5 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s -- preferredFrameRate = %f", (uint8_t *)&v2, 0x16u);
  sub_100023F20();
}

void sub_10010BFC8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100059BBC((void *)&_mh_execute_header, a1, a3, "%s -- Unexpected number of slices after popping / appending", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010C038(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100059BBC((void *)&_mh_execute_header, a1, a3, "%s -- dataProvider is unexpectedly nil for this use-case. Unable to update amplitudes.", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010C0A8(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "-[RCPlatterWaveformView removeSliceWithType:]";
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s -- Unexpected slice type", (uint8_t *)&v1, 0xCu);
  sub_100023F20();
}

void sub_10010C124(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100059BBC((void *)&_mh_execute_header, a1, a3, "%s -- Active slice queue count must match generic amplitudes count", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010C194(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "-[RCPlatterSceneDelegate scene:willConnectToSession:options:]";
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "%s -- No recording in progress", (uint8_t *)&v1, 0xCu);
}

void sub_10010C214(uint64_t a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 136315394;
  v3 = "-[RCRecordingControl _commonInit]";
  v4 = 2048;
  v5 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%s -- New recording control: %p:", (uint8_t *)&v2, 0x16u);
}

void sub_10010C29C(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  const char *v5;
  __int16 v6;
  void *v7;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  v4 = 136315394;
  v5 = "-[RCRecordingsModelInteractor duplicateRecordingWithUUID:]";
  v6 = 2112;
  v7 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s -- Error duplicating file: %@", (uint8_t *)&v4, 0x16u);

}

void sub_10010C344(uint64_t a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 136315394;
  v3 = "-[RCRecordingsModelInteractor builtInFolderOfType:]";
  v4 = 2048;
  v5 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%s -- Unexpected built-in folder type %lu", (uint8_t *)&v2, 0x16u);
}

void sub_10010C3CC(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "-[RCRecordingsModelInteractor builtInFolderOfType:]";
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s -- Requesting a built-in folder of type 'RCFolderTypeUserDefined' is invalid.", (uint8_t *)&v1, 0xCu);
}

void sub_10010C44C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- ERROR: fetching places of interest: %@", v2, v3, v4, v5, 2u);
}

void sub_10010C4BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- %@", v2, v3, v4, v5, 2u);
}

void sub_10010C52C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- vmPlayerError = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010C598()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- error setting PrefersNoInterruptionsFromSystemAlerts property on AVAudioSession = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010C604()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- error setting EligibleForBTSmartRoutingConsideration property on AVAudioSession = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010C670()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- error setting preferred input orientation property on AVAudioSession = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010C6DC(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  void *v6;
  int v7;
  const char *v8;
  __int16 v9;
  void *v10;
  __int16 v11;
  void *v12;

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "currentRoute"));
  v7 = 136315650;
  v8 = "-[VMAudioService _handleAudioSessionNotification:]";
  v9 = 2112;
  v10 = v5;
  v11 = 2112;
  v12 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "%s -- reason = %@, currentRoute = %@", (uint8_t *)&v7, 0x20u);

}

void sub_10010C7B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- stopError = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010C824()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- startError = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010C890()
{
  os_log_t v0;
  int v1[6];

  v1[0] = 136315394;
  sub_100023F28();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%s -- notification received = %@", (uint8_t *)v1, 0x16u);
  sub_100023F20();
}

void sub_10010C908()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- Recording unique ID not found = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010C974()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- accessError = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010C9E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- startError = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010CA4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- accessError = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010CAB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- closeError = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010CB24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- Failed to update file with transcription data, error = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010CB90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- Finalization of transcription failed, error = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010CBFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- saveError = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010CC68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- Failed to create asset backup - error = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010CCD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- accessError = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010CD40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- Failed to create asset backup - error = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010CDAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- accessError = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010CE18(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100059BBC((void *)&_mh_execute_header, a1, a3, "%s -- Failed to save as new because asset backup doesn't exist", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010CE88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- Failed to save as new - error = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010CEF4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100059BBC((void *)&_mh_execute_header, a1, a3, "%s -- Fetch recording returned nil", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010CF64(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100059BBC((void *)&_mh_execute_header, a1, a3, "%s -- Fetch recording returned nil", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010CFD4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100059BBC((void *)&_mh_execute_header, a1, a3, "%s -- Failed to duplicate recording when saving as new", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010D044()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- Failed to move composition back - error = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010D0B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- moveError = %@", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010D11C(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "-[RCRecordingView _displayOptionForView:]";
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s -- Unexpected view passed to _displayOptionForView", (uint8_t *)&v1, 0xCu);
}

void sub_10010D19C(uint64_t a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 136315394;
  v3 = "+[RCSavedRecordingsModel(ImportAdditions) importFileWithURL:shouldUseMetadataTitle:completionHandler:]_block_invoke_2";
  v4 = 2112;
  v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s -- removeError = %@", (uint8_t *)&v2, 0x16u);
}

void sub_10010D224(uint64_t a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 136315394;
  v3 = "-[RCFoldersFetchedResultsController userFolders]";
  v4 = 2112;
  v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s -- ERROR: FRC Unable to perform fetch (%@.)", (uint8_t *)&v2, 0x16u);
}

void sub_10010D2AC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002D910((void *)&_mh_execute_header, a2, a3, "%s -- unexpected supplementary element kind - %@", a5, a6, a7, a8, 2u);
}

void sub_10010D328(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10002D910((void *)&_mh_execute_header, a2, a3, "%s -- Unable to navigate to built-in folder of type %ld", a5, a6, a7, a8, 2u);
}

void sub_10010D3A4(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "+[RCRecordingDisplayModel recordingDisplayModelWithTitle:creationDate:duration:UUID:recentlyDeleted:representsDow"
       "nloadingFile:isFavorite:isEnhanced:hasTranscription:wasManuallyRenamed:]";
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "%s -- RCRecordingDisplayModel created with a nil UUID", (uint8_t *)&v1, 0xCu);
}

void sub_10010D424(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100046B64((void *)&_mh_execute_header, a1, a3, "%s -- Set foreground completion block in main view controller while it was already set to something else - this must be investigated", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010D494(os_log_t log, double a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  double v5;

  v2 = 136315394;
  v3 = "-[RCMainViewController recordingView:didUpdateViewHeight:]";
  v4 = 2048;
  v5 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s -- Unexpected card sheet presentation state. Detent transition progress: %f.", (uint8_t *)&v2, 0x16u);
  sub_100023F20();
}

void sub_10010D51C(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  void *v6;
  int v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  void *v12;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "playbackSettings"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "uuid"));
  v7 = 136315650;
  v8 = "-[RCMainViewController toggleRemoveSilenceForUUID:]";
  v9 = 2112;
  v10 = a1;
  v11 = 2112;
  v12 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "%s -- Unable to toggle Remove Silence. UUID being displayed %@ does not match the UUID in the playbackSettings %@", (uint8_t *)&v7, 0x20u);

}

void sub_10010D5EC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100046B64((void *)&_mh_execute_header, a1, a3, "%s -- Unable to present playback settings view. Invalid recording selection", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010D65C(void *a1, NSObject *a2)
{
  uint64_t v3;
  int v4;
  const char *v5;
  __int16 v6;
  id v7;

  v4 = 136315394;
  v5 = "-[RCApplicationModel _recordingsControllerWithFolder:]";
  v6 = 2048;
  v7 = objc_msgSend(a1, "folderType");
  sub_10004A3BC((void *)&_mh_execute_header, a2, v3, "%s -- Invalid folder type %li", (uint8_t *)&v4);
}

void sub_10010D6F0(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  const char *v4;
  __int16 v5;
  uint64_t v6;

  v3 = 136315394;
  v4 = "-[RCApplicationModel moveFolder:toIndexPath:]";
  v5 = 2112;
  v6 = a1;
  sub_10004A3BC((void *)&_mh_execute_header, a2, a3, "%s -- existing index not found: %@", (uint8_t *)&v3);
}

void sub_10010D770(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "-[RCApplicationModel insertRecordingWithAudioFile:duration:date:customTitleBase:uniqueID:]";
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s -- No locations of interest discovered near current location.", (uint8_t *)&v1, 0xCu);
}

void sub_10010D7F0(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "-[RCSplitViewController setViewController:forColumn:]";
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s -- Unexpected view controller type for UISplitViewControllerColumnSupplementary", (uint8_t *)&v1, 0xCu);
}

void sub_10010D870(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5[6];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "recordingError"));
  v5[0] = 136315394;
  sub_100023F28();
  sub_10004A3BC((void *)&_mh_execute_header, a2, v4, "%s -- pauseError = %@", (uint8_t *)v5);

  sub_100050F08();
}

void sub_10010D8FC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100046B64((void *)&_mh_execute_header, a1, a3, "%s -- Cannot begin replace / resume yet - unable to acquire access token.", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010D96C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100059BBC((void *)&_mh_execute_header, a1, a3, "%s -- Unable to replace / resume recording since audioRecorder and UUID are both nil. Attempting to replace / resume in this state will begin recording at 00:00 time and will overwrite user-data", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010D9DC(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5[6];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "recordingError"));
  v5[0] = 136315394;
  sub_100023F28();
  sub_10004A3BC((void *)&_mh_execute_header, a2, v4, "%s -- recordingError = %@", (uint8_t *)v5);

  sub_100050F08();
}

void sub_10010DA68()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 136315394;
  sub_100023F28();
  sub_10004A3BC((void *)&_mh_execute_header, v0, v1, "%s -- No RCCloudRecording exists for UUID - %@", (uint8_t *)v2);
  sub_100023F20();
}

void sub_10010DAD8()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 136315394;
  sub_100023F28();
  sub_10004A3BC((void *)&_mh_execute_header, v0, v1, "%s -- failed to start recording error = %@", (uint8_t *)v2);
  sub_100023F20();
}

void sub_10010DB48(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100059BBC((void *)&_mh_execute_header, a1, a3, "%s -- must not start playback while recording.", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010DBB8(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "uuidOfPlayingRecording"));
  sub_10009B770();
  sub_10009B78C((void *)&_mh_execute_header, v3, v4, "%s -- cannot pause playback for UUID %@ that does not match the one currently in use %@", v5, v6, v7, v8, 2u);

  sub_10009B7A0();
}

void sub_10010DC48(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "uuidOfPlayingRecording"));
  sub_10009B770();
  sub_10009B78C((void *)&_mh_execute_header, v3, v4, "%s -- cannot stop playback for UUID %@ that does not match the one currently in use %@", v5, v6, v7, v8, 2u);

  sub_10009B7A0();
}

void sub_10010DCD8()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 136315394;
  sub_100023F28();
  sub_10004A3BC((void *)&_mh_execute_header, v0, v1, "%s -- unable to preload recording UUID = %@", (uint8_t *)v2);
  sub_100023F20();
}

void sub_10010DD48(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100059BBC((void *)&_mh_execute_header, a1, a3, "%s -- UUID is nil", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010DDB8(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5[6];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "recordingError"));
  v5[0] = 136315394;
  sub_100023F28();
  sub_10004A3BC((void *)&_mh_execute_header, a2, v4, "%s -- revertError = %@", (uint8_t *)v5);

  sub_100050F08();
}

void sub_10010DE44()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 136315394;
  sub_100023F28();
  sub_10004A3BC((void *)&_mh_execute_header, v0, v1, "%s -- trimError = %@", (uint8_t *)v2);
  sub_100023F20();
}

void sub_10010DEB4()
{
  NSObject *v0;
  uint64_t v1;
  int v2[6];

  v2[0] = 136315394;
  sub_100023F28();
  sub_10004A3BC((void *)&_mh_execute_header, v0, v1, "%s -- cutError = %@", (uint8_t *)v2);
  sub_100023F20();
}

void sub_10010DF24()
{
  uint64_t v0;
  os_log_t v1;
  int v2;

  v2 = 136315650;
  sub_10005718C();
  sub_100057178((void *)&_mh_execute_header, v0, v1, "%s -- cannot get silence removed for UUID %@ that does not match audio player UUID %@", v2);
  sub_10009B768();
}

void sub_10010DF90()
{
  uint64_t v0;
  os_log_t v1;
  int v2;

  v2 = 136315650;
  sub_10005718C();
  sub_100057178((void *)&_mh_execute_header, v0, v1, "%s -- cannot get playback speed for UUID %@ that does not match audio player UUID %@", v2);
  sub_10009B768();
}

void sub_10010DFFC()
{
  uint64_t v0;
  os_log_t v1;
  int v2;

  v2 = 136315650;
  sub_10005718C();
  sub_100057178((void *)&_mh_execute_header, v0, v1, "%s -- cannot set remove silence for UUID %@ that does not match audio player UUID %@", v2);
  sub_10009B768();
}

void sub_10010E068()
{
  uint64_t v0;
  os_log_t v1;
  int v2;

  v2 = 136315650;
  sub_10005718C();
  sub_100057178((void *)&_mh_execute_header, v0, v1, "%s -- cannot set playback speed for UUID %@ that does not match audio player UUID %@", v2);
  sub_10009B768();
}

void sub_10010E0D4(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5[6];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "recordingError"));
  v5[0] = 136315394;
  sub_100023F28();
  sub_10004A3BC((void *)&_mh_execute_header, a2, v4, "%s -- undoError = %@", (uint8_t *)v5);

  sub_100050F08();
}

void sub_10010E160(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5[6];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "recordingError"));
  v5[0] = 136315394;
  sub_100023F28();
  sub_10004A3BC((void *)&_mh_execute_header, a2, v4, "%s -- redoError = %@", (uint8_t *)v5);

  sub_100050F08();
}

void sub_10010E1EC(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "uuid"));
  sub_100023F28();
  sub_100050EE4((void *)&_mh_execute_header, v2, v3, "%s -- addObserver %@", v4, v5, v6, v7, 2u);

  sub_100050F08();
}

void sub_10010E270(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "uuid"));
  sub_100023F28();
  sub_100050EE4((void *)&_mh_execute_header, v2, v3, "%s -- removeObserver %@", v4, v5, v6, v7, 2u);

  sub_100050F08();
}

void sub_10010E2F4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100046B64((void *)&_mh_execute_header, a1, a3, "%s -- use actual time ranges for this please.", a5, a6, a7, a8, 2u);
  sub_100023F20();
}

void sub_10010E364(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;
  __int16 v5;
  uint64_t v6;

  v3 = 136315394;
  v4 = "-[RCMainControllerHelper setRecordingError:]";
  v5 = 2112;
  v6 = 0;
  sub_10004A3BC((void *)&_mh_execute_header, a1, a3, "%s -- recordingError = %@", (uint8_t *)&v3);
  sub_100023F20();
}

void sub_10010E3E4(uint8_t *buf, _QWORD *a2, os_log_t log)
{
  *(_DWORD *)buf = 136315138;
  *a2 = "-[RCShareableComposition _cleanUpManagedTemporaryDirectories]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s -- Failed to clean up shared file URL", buf, 0xCu);
}

void sub_10010E430(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  void *v6;
  int v7;
  const char *v8;
  __int16 v9;
  void *v10;
  __int16 v11;
  void *v12;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "composition"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "decomposedFragments"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v5, "count")));
  v7 = 136315650;
  v8 = "-[RCShareableComposition activityViewController:itemForActivityType:]";
  v9 = 2112;
  v10 = a1;
  v11 = 2112;
  v12 = v6;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "%s -- composition %@ is not shareable (has %@ decomposed fragments yet to be composed)", (uint8_t *)&v7, 0x20u);

}

void sub_10010E528()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- ERROR: Unable to fetch recordings (%@.)", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010E594()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- ERROR: FRC Unable to perform fetch (%@.)", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void sub_10010E600()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100023F28();
  sub_100023F10((void *)&_mh_execute_header, v0, v1, "%s -- ERROR: FRC Unable to perform fetch (%@.)", v2, v3, v4, v5, 2u);
  sub_100023F20();
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

id objc_msgSend_AUAudioUnit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "AUAudioUnit");
}

id objc_msgSend_AVOutputURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "AVOutputURL");
}

id objc_msgSend_CGColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGColor");
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGImage");
}

id objc_msgSend_CGPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGPath");
}

id objc_msgSend_CGRectValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGRectValue");
}

id objc_msgSend_IOBufferDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "IOBufferDuration");
}

id objc_msgSend_SBUISA_standardInteritemPadding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SBUISA_standardInteritemPadding");
}

id objc_msgSend_SBUISA_systemApertureLegibleContentLayoutMarginsGuide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SBUISA_systemApertureLegibleContentLayoutMarginsGuide");
}

id objc_msgSend_SBUISA_systemApertureObstructedAreaLayoutGuide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SBUISA_systemApertureObstructedAreaLayoutGuide");
}

id objc_msgSend_SBUISA_systemApertureTrailingConcentricContentLayoutGuide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SBUISA_systemApertureTrailingConcentricContentLayoutGuide");
}

id objc_msgSend_SBUI_isHostedBySystemAperture(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SBUI_isHostedBySystemAperture");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URL");
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLContexts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLContexts");
}

id objc_msgSend_URLForDirectory_inDomain_appropriateForURL_create_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForDirectory:inDomain:appropriateForURL:create:error:");
}

id objc_msgSend_URLForResource_withExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForResource:withExtension:");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDString");
}

id objc_msgSend___activateAudioSessionOnQueue_recording_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__activateAudioSessionOnQueue:recording:error:");
}

id objc_msgSend___animateRecordingCardDetentTransitionForSheetPresentationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__animateRecordingCardDetentTransitionForSheetPresentationController:");
}

id objc_msgSend___rc_folderType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__rc_folderType");
}

id objc_msgSend___refreshRecording_composition_controller_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__refreshRecording:composition:controller:");
}

id objc_msgSend___shouldDisplayBeginTimeText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__shouldDisplayBeginTimeText");
}

id objc_msgSend__accessRecording_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessRecording:withBlock:");
}

id objc_msgSend__accessibilityCirclePathBasedOnBoundsWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityCirclePathBasedOnBoundsWidth");
}

id objc_msgSend__accessibilityIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityIdentifier");
}

id objc_msgSend__accessibilityIncreaseValue_bySegment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityIncreaseValue:bySegment:");
}

id objc_msgSend__accessibilityIncreaseValue_isThreeFingerScroll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityIncreaseValue:isThreeFingerScroll:");
}

id objc_msgSend__accessibilityLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityLabel");
}

id objc_msgSend__accessibilityLabelTextForState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityLabelTextForState:");
}

id objc_msgSend__accessibilityRemoveValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityRemoveValueForKey:");
}

id objc_msgSend__accessibilitySetInterfaceStyleIntent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilitySetInterfaceStyleIntent:");
}

id objc_msgSend__accessibilitySetRetainedValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilitySetRetainedValue:forKey:");
}

id objc_msgSend__accessibilityValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityValueForKey:");
}

id objc_msgSend__actionWithContentViewController_style_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_actionWithContentViewController:style:handler:");
}

id objc_msgSend__activateApplication(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activateApplication");
}

id objc_msgSend__activateAudioSessionForPlaybackWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activateAudioSessionForPlaybackWithCompletion:");
}

id objc_msgSend__activateAudioSessionForRecording_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activateAudioSessionForRecording:completion:");
}

id objc_msgSend__activateAudioSessionForRecordingWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activateAudioSessionForRecordingWithCompletion:");
}

id objc_msgSend__activeSliceFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activeSliceFrame");
}

id objc_msgSend__addCollectionViewCellToCellsMapTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addCollectionViewCellToCellsMapTable:");
}

id objc_msgSend__addCommandTarget_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addCommandTarget:withHandler:");
}

id objc_msgSend__addLabelsToWaveformOverview_containerView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addLabelsToWaveformOverview:containerView:");
}

id objc_msgSend__addRecordingObservations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addRecordingObservations:");
}

id objc_msgSend__addSubviewsOfView_includingTopLevelView_toMutableArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addSubviewsOfView:includingTopLevelView:toMutableArray:");
}

id objc_msgSend__addVersionOfItemAtURL_withContentsOfURL_options_temporaryStorageIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addVersionOfItemAtURL:withContentsOfURL:options:temporaryStorageIdentifier:error:");
}

id objc_msgSend__addViewsAsSubviewsIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addViewsAsSubviewsIfNeeded");
}

id objc_msgSend__adjustBackgroundColorForDisplayStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustBackgroundColorForDisplayStyle:");
}

id objc_msgSend__adjustCurrentTrimOperationUndoCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustCurrentTrimOperationUndoCount:");
}

id objc_msgSend__adjustForHostViewHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustForHostViewHeight");
}

id objc_msgSend__adjustTraitOverridesForDisplayStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustTraitOverridesForDisplayStyle:");
}

id objc_msgSend__advanceToOverThresholdState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_advanceToOverThresholdState");
}

id objc_msgSend__alertControllerWithTitle_message_isDestructive_preferredStyle_source_handler_actionTitle_cancelHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_alertControllerWithTitle:message:isDestructive:preferredStyle:source:handler:actionTitle:cancelHandler:");
}

id objc_msgSend__alignRecordingControlToCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_alignRecordingControlToCenter");
}

id objc_msgSend__alignRecordingControlToLeft(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_alignRecordingControlToLeft");
}

id objc_msgSend__allRecordingsIndexPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allRecordingsIndexPath");
}

id objc_msgSend__animateContentUnavailableUpdateWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateContentUnavailableUpdateWithCompletion:");
}

id objc_msgSend__animateLabel_textColor_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateLabel:textColor:duration:");
}

id objc_msgSend__animateTextField_textColor_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateTextField:textColor:duration:");
}

id objc_msgSend__animateTouch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateTouch:");
}

id objc_msgSend__applyDimmingColorToProgressOverlay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyDimmingColorToProgressOverlay");
}

id objc_msgSend__applyFixedOverviewWaveformViewConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyFixedOverviewWaveformViewConstraints");
}

id objc_msgSend__applyLabelConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyLabelConfiguration");
}

id objc_msgSend__askUserForPermissionToUseCloudKit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_askUserForPermissionToUseCloudKit");
}

id objc_msgSend__assetForRecording_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_assetForRecording:error:");
}

id objc_msgSend__assignIVarsFromStyleProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_assignIVarsFromStyleProvider");
}

id objc_msgSend__attributedStringForRecordingsCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attributedStringForRecordingsCount:");
}

id objc_msgSend__attributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attributes");
}

id objc_msgSend__audioContentOrDurationDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_audioContentOrDurationDidChange:");
}

id objc_msgSend__axAnnounceDidSetEnhanced_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_axAnnounceDidSetEnhanced:");
}

id objc_msgSend__axIsShowingSelectionBars(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_axIsShowingSelectionBars");
}

id objc_msgSend__backgroundColorAnimation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backgroundColorAnimation");
}

id objc_msgSend__backgroundColorToUse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backgroundColorToUse");
}

id objc_msgSend__backgroundConfigurationForState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backgroundConfigurationForState:");
}

id objc_msgSend__backlightLuminance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backlightLuminance");
}

id objc_msgSend__backlightSceneEnvironment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backlightSceneEnvironment");
}

id objc_msgSend__beginFileTranscriptionIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginFileTranscriptionIfNeeded");
}

id objc_msgSend__beginOrResumeCaptureSessionWithReplace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginOrResumeCaptureSessionWithReplace:");
}

id objc_msgSend__beginScrubbing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginScrubbing");
}

id objc_msgSend__beginScrubbingWithValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginScrubbingWithValue:");
}

id objc_msgSend__beginSelectionEditingModeForInsertMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginSelectionEditingModeForInsertMode:");
}

id objc_msgSend__beginTimeRectWithSizedTextLayer_isOffsetForThumb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginTimeRectWithSizedTextLayer:isOffsetForThumb:");
}

id objc_msgSend__beginTracking(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginTracking");
}

id objc_msgSend__beginTrackingSelectionBar_selectionBarType_withTouch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginTrackingSelectionBar:selectionBarType:withTouch:");
}

id objc_msgSend__bottomElementsToHide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bottomElementsToHide");
}

id objc_msgSend__bottomPalette(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bottomPalette");
}

id objc_msgSend__bufferRange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bufferRange");
}

id objc_msgSend__buildUndoStackCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildUndoStackCache");
}

id objc_msgSend__builtInFolderSectionTopPadding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_builtInFolderSectionTopPadding");
}

id objc_msgSend__builtInSectionIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_builtInSectionIdentifier");
}

id objc_msgSend__buttonTextForState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buttonTextForState:");
}

id objc_msgSend__cachedItemsForActivityTypes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cachedItemsForActivityTypes");
}

id objc_msgSend__cachedSubjectsForActivityTypes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cachedSubjectsForActivityTypes");
}

id objc_msgSend__cachedThumbnailsForActivityTypes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cachedThumbnailsForActivityTypes");
}

id objc_msgSend__calculateAndCommitLocation_force_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_calculateAndCommitLocation:force:");
}

id objc_msgSend__canDelete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canDelete");
}

id objc_msgSend__canDuplicate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canDuplicate");
}

id objc_msgSend__canHandleCustomAction_withSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canHandleCustomAction:withSender:");
}

id objc_msgSend__cancelFileTranscription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelFileTranscription");
}

id objc_msgSend__cancelTrim(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelTrim");
}

id objc_msgSend__cardDismissalRequiredForSwitchToIdleFromActivityType_subActivityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cardDismissalRequiredForSwitchToIdleFromActivityType:subActivityType:");
}

id objc_msgSend__cardSheetOptionsForDefaultRecordingView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cardSheetOptionsForDefaultRecordingView");
}

id objc_msgSend__cardSheetOptionsForLargeDetentOnly(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cardSheetOptionsForLargeDetentOnly");
}

id objc_msgSend__cellAccessoriesWithSwitchState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cellAccessoriesWithSwitchState:");
}

id objc_msgSend__cellForGeneralSettingsSectionAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cellForGeneralSettingsSectionAtIndexPath:");
}

id objc_msgSend__cellForPlaybackSpeedSectionAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cellForPlaybackSpeedSectionAtIndexPath:");
}

id objc_msgSend__circlePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_circlePath");
}

id objc_msgSend__classSpecificInit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_classSpecificInit");
}

id objc_msgSend__classSpecificLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_classSpecificLayout");
}

id objc_msgSend__classSpecificLoadView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_classSpecificLoadView");
}

id objc_msgSend__classSpecificPrepareToPresent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_classSpecificPrepareToPresent");
}

id objc_msgSend__classSpecificReset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_classSpecificReset");
}

id objc_msgSend__classSpecificSetDisplayStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_classSpecificSetDisplayStyle:");
}

id objc_msgSend__classSpecificViewWillAppear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_classSpecificViewWillAppear");
}

id objc_msgSend__classSpecificViewWillDisappear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_classSpecificViewWillDisappear");
}

id objc_msgSend__cleanUpManagedTemporaryDirectories(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanUpManagedTemporaryDirectories");
}

id objc_msgSend__clearPlaybackInAudioPlayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearPlaybackInAudioPlayer:");
}

id objc_msgSend__clearRenderingState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearRenderingState");
}

id objc_msgSend__clearSecondaryAttributedText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearSecondaryAttributedText");
}

id objc_msgSend__clearStaleTouches(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearStaleTouches");
}

id objc_msgSend__clearSublayers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearSublayers");
}

id objc_msgSend__clearTemporaryAudioFilesOnce(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearTemporaryAudioFilesOnce");
}

id objc_msgSend__clearTranscriptView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearTranscriptView");
}

id objc_msgSend__clearTrimModeUndoStack(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearTrimModeUndoStack");
}

id objc_msgSend__clearUndoStackCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearUndoStackCache");
}

id objc_msgSend__closestAllowedSampleRate_allowedSampleRates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_closestAllowedSampleRate:allowedSampleRates:");
}

id objc_msgSend__cloudSyncPromptNeedsShowing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cloudSyncPromptNeedsShowing");
}

id objc_msgSend__collapsePresentedCompactRecordingCard(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_collapsePresentedCompactRecordingCard");
}

id objc_msgSend__collapseVertically(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_collapseVertically");
}

id objc_msgSend__collectionViewCellClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_collectionViewCellClass");
}

id objc_msgSend__collectionViewHeaderCellClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_collectionViewHeaderCellClass");
}

id objc_msgSend__color_adjustedForDisplayMode_traitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_color:adjustedForDisplayMode:traitCollection:");
}

id objc_msgSend__colorSliceImageWithColor_height_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_colorSliceImageWithColor:height:");
}

id objc_msgSend__commitEditing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_commitEditing");
}

id objc_msgSend__commitValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_commitValue");
}

id objc_msgSend__commitValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_commitValue:");
}

id objc_msgSend__commonInit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_commonInit");
}

id objc_msgSend__commonInitWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_commonInitWithDelegate:");
}

id objc_msgSend__commonInitWithStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_commonInitWithStyle:");
}

id objc_msgSend__configurationUpdateHandlerWithTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configurationUpdateHandlerWithTitle:");
}

id objc_msgSend__configureAudioSessionForBTSmartRoutingConsideration_isRecording_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureAudioSessionForBTSmartRoutingConsideration:isRecording:");
}

id objc_msgSend__configureAudioSessionPrefersNoInterruptionsFromSystemAlerts_isRecording_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureAudioSessionPrefersNoInterruptionsFromSystemAlerts:isRecording:");
}

id objc_msgSend__configureAudioSessionStereoInput_isRecording_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureAudioSessionStereoInput:isRecording:");
}

id objc_msgSend__configureAudioSettingsIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureAudioSettingsIfNeeded");
}

id objc_msgSend__configureCell_usingDisplayModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureCell:usingDisplayModel:");
}

id objc_msgSend__configureCell_withFolderDisplayModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureCell:withFolderDisplayModel:");
}

id objc_msgSend__configureDSPGraphsWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureDSPGraphsWithFormat:");
}

id objc_msgSend__configureToggleButton_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureToggleButton:action:");
}

id objc_msgSend__configureTranscriptViewForLiveTranscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureTranscriptViewForLiveTranscription:");
}

id objc_msgSend__configureWaveformViewWithDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureWaveformViewWithDataSource:");
}

id objc_msgSend__constrainBottomControlsContainerViewToWindowIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_constrainBottomControlsContainerViewToWindowIfNeeded");
}

id objc_msgSend__constrainCenterContentContainerViewToWindowIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_constrainCenterContentContainerViewToWindowIfNeeded");
}

id objc_msgSend__constrainDescriptionContainerViewToVirtualNavigationBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_constrainDescriptionContainerViewToVirtualNavigationBar");
}

id objc_msgSend__constrainTimeLabelTopToObstructedAreaBottomIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_constrainTimeLabelTopToObstructedAreaBottomIfNeeded");
}

id objc_msgSend__constrainVirtualNavigationToolbarToWindowIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_constrainVirtualNavigationToolbarToWindowIfNeeded");
}

id objc_msgSend__constraintsForCollapsedModeWithState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_constraintsForCollapsedModeWithState:");
}

id objc_msgSend__constraintsForExpandedModeInBanner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_constraintsForExpandedModeInBanner");
}

id objc_msgSend__constraintsForExpandedModeInDynamicIsland(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_constraintsForExpandedModeInDynamicIsland");
}

id objc_msgSend__constraintsForExpandedModeWithPresentationStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_constraintsForExpandedModeWithPresentationStyle:");
}

id objc_msgSend__constraintsForMinimalModeCheckmarkState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_constraintsForMinimalModeCheckmarkState");
}

id objc_msgSend__constraintsForMinimalModeWaveformState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_constraintsForMinimalModeWaveformState");
}

id objc_msgSend__constraintsForMinimalModeWithState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_constraintsForMinimalModeWithState:");
}

id objc_msgSend__contentControllerForId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contentControllerForId:");
}

id objc_msgSend__continueUserActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_continueUserActivity:");
}

id objc_msgSend__copyFileIntoImportFilesTemporaryDirectory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyFileIntoImportFilesTemporaryDirectory:error:");
}

id objc_msgSend__copyResourcesForRecording_toDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyResourcesForRecording:toDirectory:");
}

id objc_msgSend__countOfUserFolders(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_countOfUserFolders");
}

id objc_msgSend__createAndConfigurePlayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createAndConfigurePlayer");
}

id objc_msgSend__createCellAccessories(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createCellAccessories");
}

id objc_msgSend__createCollectionViewLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createCollectionViewLayout");
}

id objc_msgSend__createConstraintsForLayoutMode_platterState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createConstraintsForLayoutMode:platterState:");
}

id objc_msgSend__createCurrentTimeLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createCurrentTimeLabel");
}

id objc_msgSend__createDiffableDataSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createDiffableDataSource");
}

id objc_msgSend__createManagedTemporaryDirectory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createManagedTemporaryDirectory");
}

id objc_msgSend__createMoreOptionsMenu_shouldShowTranscriptionOption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createMoreOptionsMenu:shouldShowTranscriptionOption:");
}

id objc_msgSend__createOverlayLayerIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createOverlayLayerIfNeeded");
}

id objc_msgSend__createPlaybackSettingsButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createPlaybackSettingsButton");
}

id objc_msgSend__createPollingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createPollingBlock:");
}

id objc_msgSend__createProgressOverlay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createProgressOverlay");
}

id objc_msgSend__createQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createQueue:");
}

id objc_msgSend__createShuttleBarIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createShuttleBarIfNeeded");
}

id objc_msgSend__createSpringAnimationWithKeyPath_basedOnPropertiesFromSpringAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createSpringAnimationWithKeyPath:basedOnPropertiesFromSpringAnimation:");
}

id objc_msgSend__createStopButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createStopButton");
}

id objc_msgSend__createSublayersIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createSublayersIfNeeded");
}

id objc_msgSend__createSwipeActionWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createSwipeActionWithConfiguration:");
}

id objc_msgSend__createTemporaryDirectory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createTemporaryDirectory");
}

id objc_msgSend__createTickPathsForTrackRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createTickPathsForTrackRect:");
}

id objc_msgSend__createTimeStretch_maxFramesPerRender_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createTimeStretch:maxFramesPerRender:error:");
}

id objc_msgSend__createTrackPathsForTrackRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createTrackPathsForTrackRect:");
}

id objc_msgSend__createTranscriptionButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createTranscriptionButton");
}

id objc_msgSend__currentActiveFolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentActiveFolder");
}

id objc_msgSend__currentTimeDisplayOptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentTimeDisplayOptions");
}

id objc_msgSend__currentTimeDisplayOptionsIgnoringSelectionOverlayState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentTimeDisplayOptionsIgnoringSelectionOverlayState:");
}

id objc_msgSend__currentTimeLabelTightFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentTimeLabelTightFrame");
}

id objc_msgSend__customBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_customBackgroundColor");
}

id objc_msgSend__customButtonConfigurationUpdateHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_customButtonConfigurationUpdateHandler");
}

id objc_msgSend__dataSourceSupportingStereo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dataSourceSupportingStereo");
}

id objc_msgSend__dateEntriesForRecordingStartTime_lastRecordingTime_elapsedTimeAtRecordingStart_recordingDurationAtRecordingStart_timelineDateInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dateEntriesForRecordingStartTime:lastRecordingTime:elapsedTimeAtRecordingStart:recordingDurationAtRecordingStart:timelineDateInterval:");
}

id objc_msgSend__deactivateAudioSessionAsync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deactivateAudioSessionAsync:");
}

id objc_msgSend__defaultCellAccessories(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_defaultCellAccessories");
}

id objc_msgSend__defaultDateFormatter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_defaultDateFormatter");
}

id objc_msgSend__defaultStartingValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_defaultStartingValue");
}

id objc_msgSend__delayedSelectRecordingWithUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_delayedSelectRecordingWithUUID:");
}

id objc_msgSend__deleteRecordingsWithUUIDs_isRecover_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deleteRecordingsWithUUIDs:isRecover:");
}

id objc_msgSend__deleteSwipeActionForUUID_shouldExecuteCompletionBeforeAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deleteSwipeActionForUUID:shouldExecuteCompletionBeforeAction:");
}

id objc_msgSend__didFetchPlaceInferences_location_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didFetchPlaceInferences:location:error:");
}

id objc_msgSend__didToggleSwitch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didToggleSwitch");
}

id objc_msgSend__didUpdateDisplayableTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didUpdateDisplayableTime");
}

id objc_msgSend__dimRecordingDescriptionView_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dimRecordingDescriptionView:animated:");
}

id objc_msgSend__discardRedoVersions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_discardRedoVersions");
}

id objc_msgSend__discardSilenceFrames(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_discardSilenceFrames");
}

id objc_msgSend__dismissCardView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dismissCardView:");
}

id objc_msgSend__dismissShareMemoVCIfNeededForDeletedUUIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dismissShareMemoVCIfNeededForDeletedUUIDs:");
}

id objc_msgSend__displayModeForPrimaryColumnVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_displayModeForPrimaryColumnVisible");
}

id objc_msgSend__displayOptionForView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_displayOptionForView:");
}

id objc_msgSend__displaySize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_displaySize");
}

id objc_msgSend__doMoveToFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_doMoveToFolder:");
}

id objc_msgSend__doRestyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_doRestyle");
}

id objc_msgSend__doShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_doShare:");
}

id objc_msgSend__doShowTranscriptionView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_doShowTranscriptionView:");
}

id objc_msgSend__doingSomeKindOfCapture(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_doingSomeKindOfCapture");
}

id objc_msgSend__doneButtonSidePadding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_doneButtonSidePadding");
}

id objc_msgSend__draw_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_draw:");
}

id objc_msgSend__drawBezierPaths_tinted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_drawBezierPaths:tinted:");
}

id objc_msgSend__dropLocalRecordingsWithUUIDArray_intoDestinationFolder_fromFolderType_fromFolderUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dropLocalRecordingsWithUUIDArray:intoDestinationFolder:fromFolderType:fromFolderUUID:");
}

id objc_msgSend__dropView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dropView:");
}

id objc_msgSend__duplicateRecordingWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_duplicateRecordingWithID:");
}

id objc_msgSend__duration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_duration");
}

id objc_msgSend__dynamicPrimaryColorForDisplayMode_traitCollection_isLiveWaveform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dynamicPrimaryColorForDisplayMode:traitCollection:isLiveWaveform:");
}

id objc_msgSend__dynamicSecondaryColorForDisplayMode_traitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dynamicSecondaryColorForDisplayMode:traitCollection:");
}

id objc_msgSend__edgeInsetsForChildViewController_insetsAreAbsolute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_edgeInsetsForChildViewController:insetsAreAbsolute:");
}

id objc_msgSend__editRecording_editBlock_controller_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_editRecording:editBlock:controller:error:");
}

id objc_msgSend__editRecording_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_editRecording:error:");
}

id objc_msgSend__endAccessSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endAccessSession");
}

id objc_msgSend__endDescriptionViewTextEditing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endDescriptionViewTextEditing");
}

id objc_msgSend__endSelectionEditingMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endSelectionEditingMode");
}

id objc_msgSend__endTimeRectWithSizedTextLayer_isOffsetForThumb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endTimeRectWithSizedTextLayer:isOffsetForThumb:");
}

id objc_msgSend__enqueueAudioBuffer_when_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueAudioBuffer:when:");
}

id objc_msgSend__enterTrimMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enterTrimMode");
}

id objc_msgSend__eraseDeletedRecordingsIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eraseDeletedRecordingsIfNecessary");
}

id objc_msgSend__eraseSwipeActionForUUID_shouldExecuteCompletionBeforeAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eraseSwipeActionForUUID:shouldExecuteCompletionBeforeAction:");
}

id objc_msgSend__errorIsRecordingUnavailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_errorIsRecordingUnavailable:");
}

id objc_msgSend__estimateTrimDeleteButtonSizeForProposedSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_estimateTrimDeleteButtonSizeForProposedSize:");
}

id objc_msgSend__excessFrames(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_excessFrames");
}

id objc_msgSend__expandPresentedCompactRecordingCard(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_expandPresentedCompactRecordingCard");
}

id objc_msgSend__expandVertically(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_expandVertically");
}

id objc_msgSend__expectedNumberOfItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_expectedNumberOfItems");
}

id objc_msgSend__favoriteSwipeAction_forUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_favoriteSwipeAction:forUUID:");
}

id objc_msgSend__fetchPlaceInferencesWithFidelityPolicy_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchPlaceInferencesWithFidelityPolicy:handler:");
}

id objc_msgSend__fetchRecording_recordingController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRecording:recordingController:");
}

id objc_msgSend__fetchedObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchedObjects");
}

id objc_msgSend__fillPathAnimateEndForState_fromState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fillPathAnimateEndForState:fromState:");
}

id objc_msgSend__fillPathAnimateStartForState_fromState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fillPathAnimateStartForState:fromState:");
}

id objc_msgSend__folderImageForFolderOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_folderImageForFolderOfType:");
}

id objc_msgSend__forceRenderingForBlurredStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forceRenderingForBlurredStateChange");
}

id objc_msgSend__forceUpdateCurrentTimeAndDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forceUpdateCurrentTimeAndDuration");
}

id objc_msgSend__formattedDateStringFromDate_remainingTimeValid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formattedDateStringFromDate:remainingTimeValid:");
}

id objc_msgSend__frameForTimeMarkerView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_frameForTimeMarkerView:");
}

id objc_msgSend__genericAmplitudes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_genericAmplitudes");
}

id objc_msgSend__getInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getInput:");
}

id objc_msgSend__getSquarePathPosition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getSquarePathPosition");
}

id objc_msgSend__handleEditModeFooterAndNavigationItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleEditModeFooterAndNavigationItem");
}

id objc_msgSend__handleNewFolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleNewFolder");
}

id objc_msgSend__handleRecordingUnavailableError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRecordingUnavailableError:");
}

id objc_msgSend__handleSceneConnectionActions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSceneConnectionActions");
}

id objc_msgSend__handleSpotlightSearchResults_forSearchString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSpotlightSearchResults:forSearchString:");
}

id objc_msgSend__hasCustomBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasCustomBackgroundColor");
}

id objc_msgSend__hasOuterRingLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasOuterRingLayer");
}

id objc_msgSend__headingText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_headingText");
}

id objc_msgSend__heightForAmplitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_heightForAmplitude:");
}

id objc_msgSend__hideDefaultSliderViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hideDefaultSliderViews");
}

id objc_msgSend__hideNavigationBarIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hideNavigationBarIfNeeded");
}

id objc_msgSend__hideStopButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hideStopButton");
}

id objc_msgSend__hideTimeLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hideTimeLabel");
}

id objc_msgSend__hitSelectionForPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hitSelectionForPoint:");
}

id objc_msgSend__horizontalSizeClassFromSplitView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_horizontalSizeClassFromSplitView");
}

id objc_msgSend__imageForState_inStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_imageForState:inStyle:");
}

id objc_msgSend__inactiveSliceFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_inactiveSliceFrame");
}

id objc_msgSend__incrementForDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_incrementForDirection:");
}

id objc_msgSend__indexPathForEnhancedSwitch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexPathForEnhancedSwitch");
}

id objc_msgSend__indexPathForPlaybackSpeedSlider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexPathForPlaybackSpeedSlider");
}

id objc_msgSend__indexPathForRemoveSilenceSwitch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexPathForRemoveSilenceSwitch");
}

id objc_msgSend__indexPathOfRecordingWithUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexPathOfRecordingWithUUID:");
}

id objc_msgSend__initWithRecordingID_model_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithRecordingID:model:");
}

id objc_msgSend__initWithStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithStyle:");
}

id objc_msgSend__insertSpacingBetweenElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_insertSpacingBetweenElements:");
}

id objc_msgSend__interactionPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interactionPath");
}

id objc_msgSend__internalSelectionKnobRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_internalSelectionKnobRadius");
}

id objc_msgSend__isActionEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isActionEnabled:");
}

id objc_msgSend__isBackgroundContextTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isBackgroundContextTransaction:");
}

id objc_msgSend__isCardStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCardStyle");
}

id objc_msgSend__isCompactWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCompactWidth");
}

id objc_msgSend__isCoreDataURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCoreDataURL:");
}

id objc_msgSend__isDownloadingAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isDownloadingAtIndex:");
}

id objc_msgSend__isIOSMac(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isIOSMac");
}

id objc_msgSend__isInsideForLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isInsideForLocation:");
}

id objc_msgSend__isIpad(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isIpad");
}

id objc_msgSend__isIpadOrIOSMac(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isIpadOrIOSMac");
}

id objc_msgSend__isPortrait(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isPortrait");
}

id objc_msgSend__isPrimaryColumnVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isPrimaryColumnVisible");
}

id objc_msgSend__isRecordingOrBlockedByModal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isRecordingOrBlockedByModal");
}

id objc_msgSend__isRelevantTransactionAuthor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isRelevantTransactionAuthor:");
}

id objc_msgSend__isScrubbingSelectionTimeRange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isScrubbingSelectionTimeRange");
}

id objc_msgSend__isSelectionTrimmableByDeletingRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSelectionTrimmableByDeletingRange:");
}

id objc_msgSend__isSelectionTrimmableByKeepingRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSelectionTrimmableByKeepingRange:");
}

id objc_msgSend__isSplitViewControllerTransitioningBetweenStates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSplitViewControllerTransitioningBetweenStates");
}

id objc_msgSend__isWatch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isWatch");
}

id objc_msgSend__isWideIPad(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isWideIPad");
}

id objc_msgSend__isWideIpadOrIOSMac(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isWideIpadOrIOSMac");
}

id objc_msgSend__itemForActivityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_itemForActivityType:");
}

id objc_msgSend__jumpByIncrement_forUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_jumpByIncrement:forUUID:");
}

id objc_msgSend__jumpToTargetTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_jumpToTargetTime:");
}

id objc_msgSend__labelAccessoryTintColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_labelAccessoryTintColor");
}

id objc_msgSend__labelConfigurationForState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_labelConfigurationForState:");
}

id objc_msgSend__labelFontForState_presentationStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_labelFontForState:presentationStyle:");
}

id objc_msgSend__labelLozengePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_labelLozengePath");
}

id objc_msgSend__labelTextColorForState_presentationStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_labelTextColorForState:presentationStyle:");
}

id objc_msgSend__labelWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_labelWidth");
}

id objc_msgSend__largeContentTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_largeContentTitle");
}

id objc_msgSend__layoutListAppearance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutListAppearance");
}

id objc_msgSend__layoutTimeMarkerViewsForCurrentlyVisibleTimeRange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutTimeMarkerViewsForCurrentlyVisibleTimeRange");
}

id objc_msgSend__leadingRoundedFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_leadingRoundedFrame");
}

id objc_msgSend__leadingSwipeActionsConfigurationProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_leadingSwipeActionsConfigurationProvider");
}

id objc_msgSend__libraryIsEditing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_libraryIsEditing");
}

id objc_msgSend__loadWithColor_selectionExtentIncludingKnobs_topKnob_bottomKnob_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadWithColor:selectionExtentIncludingKnobs:topKnob:bottomKnob:");
}

id objc_msgSend__mainViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mainViewController");
}

id objc_msgSend__makeCutAndStartFlush(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeCutAndStartFlush");
}

id objc_msgSend__markCurrentFileVersionIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markCurrentFileVersionIfNecessary");
}

id objc_msgSend__maxHeightForSliceAtIndex_sliceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_maxHeightForSliceAtIndex:sliceType:");
}

id objc_msgSend__maxTrackView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_maxTrackView");
}

id objc_msgSend__maxValueView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_maxValueView");
}

id objc_msgSend__maximumValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_maximumValue");
}

id objc_msgSend__maybeSelectAllTextFieldText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_maybeSelectAllTextFieldText");
}

id objc_msgSend__mergeChangeIntoRelevantContexts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mergeChangeIntoRelevantContexts:");
}

id objc_msgSend__mergeRecording_atTime_controller_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mergeRecording:atTime:controller:error:");
}

id objc_msgSend__minTrackView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_minTrackView");
}

id objc_msgSend__minValueView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_minValueView");
}

id objc_msgSend__minimalModeBaseConstraintsForView_height_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_minimalModeBaseConstraintsForView:height:");
}

id objc_msgSend__minimumOverlaySelectionWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_minimumOverlaySelectionWidth");
}

id objc_msgSend__minimumValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_minimumValue");
}

id objc_msgSend__mixDownEditedRecording_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mixDownEditedRecording:completion:");
}

id objc_msgSend__modernThumbImageWithColor_height_includeShadow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_modernThumbImageWithColor:height:includeShadow:");
}

id objc_msgSend__moreOptionsButtonAccessory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moreOptionsButtonAccessory");
}

id objc_msgSend__moreOptionsSwipeActionForUUID_shouldExecuteCompletionBeforeAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moreOptionsSwipeActionForUUID:shouldExecuteCompletionBeforeAction:");
}

id objc_msgSend__moveToFolderSwipeActionForUUID_shouldExecuteCompletionBeforeAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveToFolderSwipeActionForUUID:shouldExecuteCompletionBeforeAction:");
}

id objc_msgSend__myPresentViewController_sourceController_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_myPresentViewController:sourceController:animated:completion:");
}

id objc_msgSend__needsDisclosureAccessory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_needsDisclosureAccessory");
}

id objc_msgSend__needsWaveformRendering(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_needsWaveformRendering");
}

id objc_msgSend__newFormattedDateStringFromDate_forUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newFormattedDateStringFromDate:forUUID:");
}

id objc_msgSend__newPresentedPrepareFailureAlertControllerForCompositions_source_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newPresentedPrepareFailureAlertControllerForCompositions:source:");
}

id objc_msgSend__newRecordingEngine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newRecordingEngine");
}

id objc_msgSend__nextTransactionAfterToken_context_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nextTransactionAfterToken:context:error:");
}

id objc_msgSend__noiseSuppressionParameters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_noiseSuppressionParameters");
}

id objc_msgSend__nonCachedContentWidthWithDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nonCachedContentWidthWithDuration:");
}

id objc_msgSend__nonRepeatableKeyCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nonRepeatableKeyCommand");
}

id objc_msgSend__notifyDelegatesThatSelectionChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyDelegatesThatSelectionChanged");
}

id objc_msgSend__observeUserDefaultsForAudioSettingsChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_observeUserDefaultsForAudioSettingsChanges");
}

id objc_msgSend__openForModifyRecordingWithUUID_enterTrim_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_openForModifyRecordingWithUUID:enterTrim:");
}

id objc_msgSend__openURLContexts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_openURLContexts:");
}

id objc_msgSend__originalRecordingControlDiameter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_originalRecordingControlDiameter");
}

id objc_msgSend__pauseDisplayLink(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pauseDisplayLink");
}

id objc_msgSend__pauseImageForStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pauseImageForStyle:");
}

id objc_msgSend__pausePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pausePath");
}

id objc_msgSend__performActionForShortcutItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performActionForShortcutItem:");
}

id objc_msgSend__performAsynchronousRenderSensitiveAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performAsynchronousRenderSensitiveAction:");
}

id objc_msgSend__performFolderTypeUpdatesOnRecording_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performFolderTypeUpdatesOnRecording:");
}

id objc_msgSend__performOrDispatchToMainThread_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performOrDispatchToMainThread:");
}

id objc_msgSend__performRecordingEndTransitionWithUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performRecordingEndTransitionWithUUID:");
}

id objc_msgSend__performScrollTest_iterations_delta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performScrollTest:iterations:delta:");
}

id objc_msgSend__performSearch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performSearch");
}

id objc_msgSend__performTest_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performTest:options:");
}

id objc_msgSend__platterStateNeedsMinimalCheckmarkView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_platterStateNeedsMinimalCheckmarkView");
}

id objc_msgSend__playImageForStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_playImageForStyle:");
}

id objc_msgSend__playStartRecordingSoundEffectThenStartRecording_controller_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_playStartRecordingSoundEffectThenStartRecording:controller:");
}

id objc_msgSend__pointsPerSecond(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pointsPerSecond");
}

id objc_msgSend__predicateForURIRepresentations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_predicateForURIRepresentations:");
}

id objc_msgSend__preloadRecordingForPlayback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_preloadRecordingForPlayback:");
}

