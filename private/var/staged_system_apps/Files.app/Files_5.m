_QWORD *assignWithTake for DOCCollectionSection(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  v6 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_release(v6);
  return a1;
}

uint64_t destroy for DOCItemCollectionFPController(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t initializeWithCopy for DOCItemCollectionFPController(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for DOCItemCollectionFPController(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)a1 + 25) = *((_BYTE *)a2 + 25);
  return a1;
}

__n128 initializeWithTake for DOCItemCollectionFPController(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DOCItemCollectionFPController(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for DOCItemCollectionFPController(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 26))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCItemCollectionFPController(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 26) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCItemCollectionFPController()
{
  return &type metadata for DOCItemCollectionFPController;
}

Swift::Int sub_1002B58E0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  _QWORD v6[2];

  v2 = *(_QWORD *)(sub_10006922C(&qword_100644B40) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_1004656B0(v3);
  v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1002B59DC(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1002B5964(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

Swift::Int sub_1002B59DC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::Int v17;
  unint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  Swift::Int v36;
  uint64_t v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  _QWORD *v119;
  char *v120;
  _QWORD *v121;
  Swift::Int v122;
  Swift::Int v123;
  uint64_t v124;
  Swift::Int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  Swift::Int v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v134 = sub_10006922C(&qword_100644B40);
  v127 = *(_QWORD *)(v134 - 8);
  v3 = __chkstk_darwin(v134);
  v124 = (uint64_t)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v135 = (uint64_t)&v120 - v6;
  v7 = __chkstk_darwin(v5);
  v132 = (uint64_t)&v120 - v8;
  __chkstk_darwin(v7);
  v131 = (uint64_t)&v120 - v9;
  v10 = a1[1];
  result = _minimumMergeRunLength(_:)(v10);
  if (result >= v10)
  {
    if (v10 < 0)
      goto LABEL_139;
    if (v10)
      return sub_1002B7318(0, v10, 1, a1);
    return result;
  }
  if (v10 >= 0)
    v12 = v10;
  else
    v12 = v10 + 1;
  if (v10 < -1)
    goto LABEL_147;
  v133 = a1;
  v122 = result;
  v128 = v1;
  if (v10 < 2)
  {
    v16 = (char *)_swiftEmptyArrayStorage;
    v126 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
    v121 = _swiftEmptyArrayStorage;
    if (v10 != 1)
    {
      v18 = _swiftEmptyArrayStorage[2];
LABEL_105:
      v105 = v16;
      if (v18 >= 2)
      {
        v112 = *v133;
        do
        {
          v113 = v18 - 2;
          if (v18 < 2)
            goto LABEL_134;
          if (!v112)
            goto LABEL_146;
          v114 = *(_QWORD *)&v105[16 * v113 + 32];
          v115 = *(_QWORD *)&v105[16 * v18 + 24];
          v116 = v128;
          sub_1002B76B8(v112 + *(_QWORD *)(v127 + 72) * v114, v112 + *(_QWORD *)(v127 + 72) * *(_QWORD *)&v105[16 * v18 + 16], v112 + *(_QWORD *)(v127 + 72) * v115, v126);
          v128 = v116;
          if (v116)
            break;
          if (v115 < v114)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native(v105) & 1) == 0)
            v105 = sub_10046564C((uint64_t)v105);
          if (v113 >= *((_QWORD *)v105 + 2))
            goto LABEL_136;
          v117 = &v105[16 * v113 + 32];
          *(_QWORD *)v117 = v114;
          *((_QWORD *)v117 + 1) = v115;
          v118 = *((_QWORD *)v105 + 2);
          if (v18 > v118)
            goto LABEL_137;
          memmove(&v105[16 * v18 + 16], &v105[16 * v18 + 32], 16 * (v118 - v18));
          *((_QWORD *)v105 + 2) = v118 - 1;
          v18 = v118 - 1;
        }
        while (v118 > 2);
      }
LABEL_116:
      swift_bridgeObjectRelease(v105);
      v119 = v121;
      v121[2] = 0;
      return swift_bridgeObjectRelease(v119);
    }
  }
  else
  {
    v13 = v12 >> 1;
    v14 = static Array._allocateBufferUninitialized(minimumCapacity:)(v12 >> 1, v134);
    *(_QWORD *)(v14 + 16) = v13;
    v15 = *(unsigned __int8 *)(v127 + 80);
    v121 = (_QWORD *)v14;
    v126 = v14 + ((v15 + 32) & ~v15);
  }
  v17 = 0;
  v16 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v19 = v17;
    v20 = v17 + 1;
    if (v17 + 1 >= v10)
    {
      ++v17;
      goto LABEL_24;
    }
    v21 = *v133;
    v22 = *(_QWORD *)(v127 + 72);
    v23 = v131;
    sub_1000271D4(*v133 + v22 * v20, v131, &qword_100644B40);
    v24 = v21 + v22 * v17;
    v25 = v132;
    sub_1000271D4(v24, v132, &qword_100644B40);
    LODWORD(v130) = static Date.> infix(_:_:)(v23 + *(int *)(v134 + 48), v25 + *(int *)(v134 + 48));
    sub_10000CB4C(v25, &qword_100644B40);
    sub_10000CB4C(v23, &qword_100644B40);
    v17 = v19 + 2;
    v129 = v21;
    v136 = v22;
    if (v19 + 2 >= v10)
      goto LABEL_21;
    v125 = v19;
    v26 = v16;
    v27 = v22 * v20;
    v28 = v21;
    v29 = v19 + 2;
    v30 = v22 * v29;
    do
    {
      v31 = v10;
      v32 = v131;
      sub_1000271D4(v28 + v30, v131, &qword_100644B40);
      v33 = v132;
      sub_1000271D4(v28 + v27, v132, &qword_100644B40);
      v34 = static Date.> infix(_:_:)(v32 + *(int *)(v134 + 48), v33 + *(int *)(v134 + 48));
      sub_10000CB4C(v33, &qword_100644B40);
      sub_10000CB4C(v32, &qword_100644B40);
      if (((v130 ^ v34) & 1) != 0)
      {
        v16 = v26;
        v17 = v29;
        v19 = v125;
        v10 = v31;
        if ((v130 & 1) != 0)
          goto LABEL_42;
        goto LABEL_24;
      }
      v28 += v136;
      ++v29;
      v10 = v31;
    }
    while (v31 != v29);
    v16 = v26;
    v17 = v31;
    v19 = v125;
LABEL_21:
    if ((v130 & 1) == 0)
      goto LABEL_24;
LABEL_42:
    v51 = v136;
    if (v17 < v19)
      goto LABEL_140;
    if (v19 < v17)
      break;
LABEL_24:
    v35 = v133;
    if (v17 < v10)
      goto LABEL_25;
LABEL_57:
    if (v17 < v19)
      goto LABEL_133;
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      v16 = sub_100464E4C(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
    v61 = *((_QWORD *)v16 + 2);
    v60 = *((_QWORD *)v16 + 3);
    v18 = v61 + 1;
    if (v61 >= v60 >> 1)
      v16 = sub_100464E4C((char *)(v60 > 1), v61 + 1, 1, v16);
    *((_QWORD *)v16 + 2) = v18;
    v62 = v16 + 32;
    v63 = &v16[16 * v61 + 32];
    *(_QWORD *)v63 = v19;
    *((_QWORD *)v63 + 1) = v17;
    if (v61)
    {
      while (1)
      {
        v64 = v18 - 1;
        if (v18 >= 4)
        {
          v69 = &v62[16 * v18];
          v70 = *((_QWORD *)v69 - 8);
          v71 = *((_QWORD *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_122;
          v74 = *((_QWORD *)v69 - 6);
          v73 = *((_QWORD *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_123;
          v76 = v18 - 2;
          v77 = &v62[16 * v18 - 32];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_125;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_128;
          if (v81 >= v72)
          {
            v99 = &v62[16 * v64];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_132;
            v92 = v67 < v102;
            goto LABEL_94;
          }
        }
        else
        {
          if (v18 != 3)
          {
            v93 = *((_QWORD *)v16 + 4);
            v94 = *((_QWORD *)v16 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_88;
          }
          v66 = *((_QWORD *)v16 + 4);
          v65 = *((_QWORD *)v16 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_124;
        v76 = v18 - 2;
        v82 = &v62[16 * v18 - 32];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_127;
        v88 = &v62[16 * v64];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_130;
        if (__OFADD__(v86, v91))
          goto LABEL_131;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_94:
          if (v92)
            v64 = v76;
          goto LABEL_96;
        }
LABEL_88:
        if ((v87 & 1) != 0)
          goto LABEL_126;
        v95 = &v62[16 * v64];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_129;
        if (v98 < v86)
          goto LABEL_14;
LABEL_96:
        v103 = v17;
        v104 = v64 - 1;
        if (v64 - 1 >= v18)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!*v133)
          goto LABEL_144;
        v105 = v16;
        v106 = &v62[16 * v104];
        v107 = *(_QWORD *)v106;
        v108 = &v62[16 * v64];
        v109 = *((_QWORD *)v108 + 1);
        v110 = v128;
        sub_1002B76B8(*v133 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v106, *v133 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v108, *v133 + *(_QWORD *)(v127 + 72) * v109, v126);
        v128 = v110;
        if (v110)
          goto LABEL_116;
        if (v109 < v107)
          goto LABEL_119;
        if (v64 > *((_QWORD *)v105 + 2))
          goto LABEL_120;
        *(_QWORD *)v106 = v107;
        *(_QWORD *)&v62[16 * v104 + 8] = v109;
        v111 = *((_QWORD *)v105 + 2);
        if (v64 >= v111)
          goto LABEL_121;
        v16 = v105;
        v18 = v111 - 1;
        memmove(&v62[16 * v64], v108 + 16, 16 * (v111 - 1 - v64));
        *((_QWORD *)v105 + 2) = v111 - 1;
        v92 = v111 > 2;
        v17 = v103;
        if (!v92)
          goto LABEL_14;
      }
    }
    v18 = 1;
LABEL_14:
    v10 = v133[1];
    if (v17 >= v10)
      goto LABEL_105;
  }
  v130 = v10;
  v120 = v16;
  v52 = 0;
  v53 = v136 * (v17 - 1);
  v54 = v17 * v136;
  v55 = v19;
  v56 = v19 * v136;
  v35 = v133;
  v125 = v19;
  do
  {
    if (v55 != v17 + v52 - 1)
    {
      v57 = v129;
      if (!v129)
        goto LABEL_145;
      v58 = v129 + v56;
      v59 = v129 + v53;
      sub_100070EDC(v129 + v56, v124, &qword_100644B40);
      if (v56 < v53 || v58 >= v57 + v54)
      {
        swift_arrayInitWithTakeFrontToBack(v57 + v56, v57 + v53, 1, v134);
        v51 = v136;
      }
      else
      {
        v51 = v136;
        if (v56 != v53)
          swift_arrayInitWithTakeBackToFront(v58);
      }
      sub_100070EDC(v124, v59, &qword_100644B40);
      v35 = v133;
      v19 = v125;
    }
    ++v55;
    --v52;
    v53 -= v51;
    v54 -= v51;
    v56 += v51;
  }
  while (v55 < v17 + v52);
  v16 = v120;
  v10 = v130;
  if (v17 >= v130)
    goto LABEL_57;
LABEL_25:
  if (__OFSUB__(v17, v19))
    goto LABEL_138;
  if (v17 - v19 >= v122)
    goto LABEL_57;
  if (__OFADD__(v19, v122))
    goto LABEL_141;
  if (v19 + v122 >= v10)
    v36 = v10;
  else
    v36 = v19 + v122;
  if (v36 >= v19)
  {
    if (v17 != v36)
    {
      v120 = v16;
      v37 = *(_QWORD *)(v127 + 72);
      v136 = v37 * (v17 - 1);
      v129 = v37;
      v38 = v17 * v37;
      v125 = v19;
      v123 = v36;
      do
      {
        v40 = 0;
        v41 = v19;
        v130 = v17;
        while (1)
        {
          v42 = *v35;
          v43 = v38;
          v44 = v38 + v40 + *v35;
          v45 = v131;
          v46 = v35;
          sub_1000271D4(v44, v131, &qword_100644B40);
          v47 = v132;
          sub_1000271D4(v136 + v40 + v42, v132, &qword_100644B40);
          LOBYTE(v42) = static Date.> infix(_:_:)(v45 + *(int *)(v134 + 48), v47 + *(int *)(v134 + 48));
          sub_10000CB4C(v47, &qword_100644B40);
          sub_10000CB4C(v45, &qword_100644B40);
          if ((v42 & 1) == 0)
            break;
          v48 = *v46;
          if (!*v46)
            goto LABEL_143;
          v38 = v43;
          v49 = v48 + v43 + v40;
          v50 = v48 + v136 + v40;
          sub_100070EDC(v49, v135, &qword_100644B40);
          swift_arrayInitWithTakeFrontToBack(v49, v50, 1, v134);
          sub_100070EDC(v135, v50, &qword_100644B40);
          v39 = v130;
          v40 -= v129;
          ++v41;
          v35 = v133;
          if (v130 == v41)
            goto LABEL_35;
        }
        v39 = v130;
        v38 = v43;
        v35 = v46;
LABEL_35:
        v17 = v39 + 1;
        v136 += v129;
        v38 += v129;
        v19 = v125;
      }
      while (v17 != v123);
      v17 = v123;
      v16 = v120;
    }
    goto LABEL_57;
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

Swift::Int sub_1002B63DC(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  _OWORD *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  Swift::Int v32;
  __int128 *v33;
  uint64_t v34;
  Swift::Int v35;
  __int128 *v36;
  char v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  _QWORD *v111;
  Swift::Int v112;
  Swift::Int v113;
  uint64_t v114;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v93 = 0;
      v94 = *a1;
      v95 = 1;
      while (1)
      {
        v96 = *(_QWORD *)(v94 + 32 * v95 + 24);
        v97 = v93;
        do
        {
          v98 = v94 + v97;
          if (*(_QWORD *)(v94 + v97 + 24) >= v96)
            break;
          if (!v94)
            goto LABEL_142;
          v99 = v94 + v97;
          v100 = *(_BYTE *)(v94 + v97 + 48);
          v101 = *(_OWORD *)(v98 + 32);
          v102 = *(_OWORD *)(v98 + 16);
          *(_OWORD *)(v98 + 32) = *(_OWORD *)v98;
          *(_OWORD *)(v98 + 48) = v102;
          *(_OWORD *)v99 = v101;
          *(_BYTE *)(v99 + 16) = v100;
          *(_QWORD *)(v98 + 24) = v96;
          v97 -= 32;
        }
        while (v97 != -32);
        ++v95;
        v93 += 32;
        if (v95 == v3)
          return result;
      }
    }
    goto LABEL_138;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_147:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v6 = result;
  v109 = a1;
  if (v3 < 2)
  {
    v10 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      v13 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v111 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = sub_10006922C(&qword_10064CD40);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v111 = (_QWORD *)v9;
    __dst = (char *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v110 = *a1 + 88;
  v13 = (char *)_swiftEmptyArrayStorage;
  v112 = v6;
  v113 = v3;
  v114 = v12;
  while (1)
  {
    v15 = v11++;
    if (v11 < v3)
    {
      v16 = *(_QWORD *)(v12 + 32 * v11 + 24);
      v17 = *(_QWORD *)(v12 + 32 * v15 + 24);
      v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        v18 = (uint64_t *)(v110 + 32 * v15);
        v19 = v16;
        while (1)
        {
          v21 = *v18;
          v18 += 4;
          v20 = v21;
          if (v17 < v16 == v19 >= v21)
            break;
          ++v11;
          v19 = v20;
          if (v3 == v11)
          {
            v11 = v3;
            break;
          }
        }
      }
      if (v17 < v16)
      {
        if (v11 < v15)
          goto LABEL_139;
        if (v15 < v11)
        {
          v22 = 32 * v11;
          v23 = 32 * v15;
          v24 = v11;
          v25 = v15;
          do
          {
            if (v25 != --v24)
            {
              if (!v12)
                goto LABEL_145;
              v26 = (_OWORD *)(v12 + v23);
              v27 = v12 + v22;
              v28 = *(_BYTE *)(v12 + v23 + 16);
              v29 = *(_QWORD *)(v12 + v23 + 24);
              v30 = *(_OWORD *)(v12 + v23);
              v31 = *(_OWORD *)(v12 + v22 - 16);
              *v26 = *(_OWORD *)(v12 + v22 - 32);
              v26[1] = v31;
              *(_OWORD *)(v27 - 32) = v30;
              *(_BYTE *)(v27 - 16) = v28;
              *(_QWORD *)(v27 - 8) = v29;
            }
            ++v25;
            v22 -= 32;
            v23 += 32;
          }
          while (v25 < v24);
        }
      }
    }
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v15))
        goto LABEL_137;
      if (v11 - v15 < v6)
      {
        v32 = v15 + v6;
        if (__OFADD__(v15, v6))
          goto LABEL_140;
        if (v32 >= v3)
          v32 = v3;
        if (v32 < v15)
          goto LABEL_141;
        if (v11 != v32)
        {
          v33 = (__int128 *)(v12 + 32 * v11);
          do
          {
            v34 = *(_QWORD *)(v12 + 32 * v11 + 24);
            v35 = v15;
            v36 = v33;
            do
            {
              if (*((_QWORD *)v36 - 1) >= v34)
                break;
              if (!v12)
                goto LABEL_143;
              v37 = *((_BYTE *)v36 + 16);
              v38 = *v36;
              v39 = *(v36 - 1);
              *v36 = *(v36 - 2);
              v36[1] = v39;
              *((_BYTE *)v36 - 16) = v37;
              *((_QWORD *)v36 - 1) = v34;
              *(v36 - 2) = v38;
              v36 -= 2;
              ++v35;
            }
            while (v11 != v35);
            ++v11;
            v33 += 2;
          }
          while (v11 != v32);
          v11 = v32;
        }
      }
    }
    if (v11 < v15)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = sub_100464E4C(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v41 = *((_QWORD *)v13 + 2);
    v40 = *((_QWORD *)v13 + 3);
    v14 = v41 + 1;
    v12 = v114;
    if (v41 >= v40 >> 1)
    {
      v90 = sub_100464E4C((char *)(v40 > 1), v41 + 1, 1, v13);
      v12 = v114;
      v13 = v90;
    }
    *((_QWORD *)v13 + 2) = v14;
    v42 = v13 + 32;
    v43 = &v13[16 * v41 + 32];
    *(_QWORD *)v43 = v15;
    *((_QWORD *)v43 + 1) = v11;
    if (v41)
      break;
    v14 = 1;
LABEL_15:
    v6 = v112;
    v3 = v113;
    if (v11 >= v113)
    {
      v10 = v111;
LABEL_104:
      v92 = v13;
      v111 = v10;
      if (v14 < 2)
        goto LABEL_95;
      v103 = *v109;
      while (1)
      {
        v104 = v14 - 2;
        if (v14 < 2)
          break;
        if (!v103)
          goto LABEL_146;
        v91 = v92;
        v105 = *(_QWORD *)&v92[16 * v104 + 32];
        v106 = *(_QWORD *)&v92[16 * v14 + 24];
        sub_1002B7B6C((char *)(v103 + 32 * v105), (char *)(v103 + 32 * *(_QWORD *)&v92[16 * v14 + 16]), v103 + 32 * v106, __dst);
        if (v1)
          goto LABEL_94;
        if (v106 < v105)
          goto LABEL_134;
        if ((swift_isUniquelyReferenced_nonNull_native(v91) & 1) == 0)
          v91 = sub_10046564C((uint64_t)v91);
        if (v104 >= *((_QWORD *)v91 + 2))
          goto LABEL_135;
        v107 = &v91[16 * v104 + 32];
        *(_QWORD *)v107 = v105;
        *((_QWORD *)v107 + 1) = v106;
        v108 = *((_QWORD *)v91 + 2);
        if (v14 > v108)
          goto LABEL_136;
        memmove(&v91[16 * v14 + 16], &v91[16 * v14 + 32], 16 * (v108 - v14));
        v92 = v91;
        *((_QWORD *)v91 + 2) = v108 - 1;
        v14 = v108 - 1;
        if (v108 <= 2)
          goto LABEL_95;
      }
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
  }
  while (1)
  {
    v44 = v14 - 1;
    if (v14 >= 4)
    {
      v49 = &v42[16 * v14];
      v50 = *((_QWORD *)v49 - 8);
      v51 = *((_QWORD *)v49 - 7);
      v55 = __OFSUB__(v51, v50);
      v52 = v51 - v50;
      if (v55)
        goto LABEL_121;
      v54 = *((_QWORD *)v49 - 6);
      v53 = *((_QWORD *)v49 - 5);
      v55 = __OFSUB__(v53, v54);
      v47 = v53 - v54;
      v48 = v55;
      if (v55)
        goto LABEL_122;
      v56 = v14 - 2;
      v57 = &v42[16 * v14 - 32];
      v59 = *(_QWORD *)v57;
      v58 = *((_QWORD *)v57 + 1);
      v55 = __OFSUB__(v58, v59);
      v60 = v58 - v59;
      if (v55)
        goto LABEL_124;
      v55 = __OFADD__(v47, v60);
      v61 = v47 + v60;
      if (v55)
        goto LABEL_127;
      if (v61 >= v52)
      {
        v79 = &v42[16 * v44];
        v81 = *(_QWORD *)v79;
        v80 = *((_QWORD *)v79 + 1);
        v55 = __OFSUB__(v80, v81);
        v82 = v80 - v81;
        if (v55)
          goto LABEL_131;
        v72 = v47 < v82;
        goto LABEL_83;
      }
    }
    else
    {
      if (v14 != 3)
      {
        v73 = *((_QWORD *)v13 + 4);
        v74 = *((_QWORD *)v13 + 5);
        v55 = __OFSUB__(v74, v73);
        v66 = v74 - v73;
        v67 = v55;
        goto LABEL_77;
      }
      v46 = *((_QWORD *)v13 + 4);
      v45 = *((_QWORD *)v13 + 5);
      v55 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      v48 = v55;
    }
    if ((v48 & 1) != 0)
      goto LABEL_123;
    v56 = v14 - 2;
    v62 = &v42[16 * v14 - 32];
    v64 = *(_QWORD *)v62;
    v63 = *((_QWORD *)v62 + 1);
    v65 = __OFSUB__(v63, v64);
    v66 = v63 - v64;
    v67 = v65;
    if (v65)
      goto LABEL_126;
    v68 = &v42[16 * v44];
    v70 = *(_QWORD *)v68;
    v69 = *((_QWORD *)v68 + 1);
    v55 = __OFSUB__(v69, v70);
    v71 = v69 - v70;
    if (v55)
      goto LABEL_129;
    if (__OFADD__(v66, v71))
      goto LABEL_130;
    if (v66 + v71 >= v47)
    {
      v72 = v47 < v71;
LABEL_83:
      if (v72)
        v44 = v56;
      goto LABEL_85;
    }
LABEL_77:
    if ((v67 & 1) != 0)
      goto LABEL_125;
    v75 = &v42[16 * v44];
    v77 = *(_QWORD *)v75;
    v76 = *((_QWORD *)v75 + 1);
    v55 = __OFSUB__(v76, v77);
    v78 = v76 - v77;
    if (v55)
      goto LABEL_128;
    if (v78 < v66)
      goto LABEL_15;
LABEL_85:
    v83 = v44 - 1;
    if (v44 - 1 >= v14)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if (!v12)
      goto LABEL_144;
    v84 = v13;
    v85 = &v42[16 * v83];
    v86 = *(_QWORD *)v85;
    v87 = &v42[16 * v44];
    v88 = *((_QWORD *)v87 + 1);
    sub_1002B7B6C((char *)(v12 + 32 * *(_QWORD *)v85), (char *)(v12 + 32 * *(_QWORD *)v87), v12 + 32 * v88, __dst);
    if (v1)
      break;
    if (v88 < v86)
      goto LABEL_118;
    if (v44 > *((_QWORD *)v84 + 2))
      goto LABEL_119;
    *(_QWORD *)v85 = v86;
    *(_QWORD *)&v42[16 * v83 + 8] = v88;
    v89 = *((_QWORD *)v84 + 2);
    if (v44 >= v89)
      goto LABEL_120;
    v13 = v84;
    v14 = v89 - 1;
    memmove(&v42[16 * v44], v87 + 16, 16 * (v89 - 1 - v44));
    *((_QWORD *)v84 + 2) = v89 - 1;
    v12 = v114;
    if (v89 <= 2)
      goto LABEL_15;
  }
  v91 = v84;
LABEL_94:
  v92 = v91;
LABEL_95:
  swift_bridgeObjectRelease(v92);
  v111[2] = 0;
  return swift_bridgeObjectRelease(v111);
}

Swift::Int sub_1002B6ACC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  Swift::Int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  Swift::Int v48;
  uint64_t *v49;
  Swift::Int v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  char *v118;
  uint64_t *v119;
  uint64_t v120;
  _QWORD *v121;
  Swift::Int v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  Swift::Int v127;
  Swift::Int v128;
  Swift::Int v129;
  uint64_t *v130;
  char *__dst;
  uint64_t v132;
  Swift::Int v133;
  Swift::Int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v2 = v1;
  v4 = a1[1];
  result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_134;
    if (v4)
      return sub_1002B7558(0, v4, 1, a1);
    return result;
  }
  if (v4 >= 0)
    v7 = v4;
  else
    v7 = v4 + 1;
  if (v4 < -1)
    goto LABEL_142;
  v122 = result;
  v119 = a1;
  if (v4 < 2)
  {
    v11 = (char *)_swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    v121 = _swiftEmptyArrayStorage;
    if (v4 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
LABEL_97:
      if (v14 >= 2)
      {
        v111 = *v119;
        do
        {
          v112 = v14 - 2;
          if (v14 < 2)
            goto LABEL_129;
          if (!v111)
            goto LABEL_141;
          v104 = v11;
          v113 = v11 + 32;
          v114 = *(_QWORD *)&v11[16 * v112 + 32];
          v115 = *(_QWORD *)&v11[16 * v14 + 24];
          sub_1002B7DF4((uint64_t *)(v111 + 24 * v114), (uint64_t *)(v111 + 24 * *(_QWORD *)&v113[16 * v14 - 16]), v111 + 24 * v115, __dst);
          if (v2)
            goto LABEL_109;
          if (v115 < v114)
            goto LABEL_130;
          if ((swift_isUniquelyReferenced_nonNull_native(v104) & 1) == 0)
            v104 = sub_10046564C((uint64_t)v104);
          if (v112 >= *((_QWORD *)v104 + 2))
            goto LABEL_131;
          v116 = &v104[16 * v112 + 32];
          *(_QWORD *)v116 = v114;
          *((_QWORD *)v116 + 1) = v115;
          v117 = *((_QWORD *)v104 + 2);
          if (v14 > v117)
            goto LABEL_132;
          v11 = v104;
          memmove(&v104[16 * v14 + 16], &v104[16 * v14 + 32], 16 * (v117 - v14));
          *((_QWORD *)v104 + 2) = v117 - 1;
          v14 = v117 - 1;
        }
        while (v117 > 2);
      }
      v118 = v11;
LABEL_111:
      swift_bridgeObjectRelease(v118);
      v121[2] = 0;
      return swift_bridgeObjectRelease(v121);
    }
  }
  else
  {
    v8 = v7 >> 1;
    v9 = sub_10006922C(&qword_100644B18);
    v10 = static Array._allocateBufferUninitialized(minimumCapacity:)(v8, v9);
    *(_QWORD *)(v10 + 16) = v8;
    v121 = (_QWORD *)v10;
    __dst = (char *)(v10 + 32);
  }
  v12 = 0;
  v13 = *a1;
  v120 = *a1 + 64;
  v11 = (char *)_swiftEmptyArrayStorage;
  v129 = v4;
  v135 = *a1;
  while (1)
  {
    v15 = v12;
    v16 = v12 + 1;
    v128 = v12;
    if (v12 + 1 < v4)
    {
      v123 = v11;
      v125 = v2;
      v17 = (uint64_t *)(v13 + 24 * v16);
      v18 = *v17;
      v19 = v17[1];
      v20 = v17[2];
      v21 = (uint64_t *)(v13 + 24 * v12);
      v23 = *v21;
      v22 = v21[1];
      v24 = v21[2];
      ObjectType = swift_getObjectType(v20, v6);
      sub_100292204(v18, v19);
      swift_unknownObjectRetain(v20);
      sub_100292204(v23, v22);
      v26 = swift_unknownObjectRetain(v24);
      v132 = DOCNode.compareBySharedStatus(node:)(v26, ObjectType);
      v27 = v22;
      v4 = v129;
      sub_1002B81C8(v23, v27);
      swift_unknownObjectRelease(v24);
      sub_1002B81C8(v18, v19);
      swift_unknownObjectRelease(v20);
      v16 = v15 + 2;
      if (v15 + 2 < v129)
      {
        v28 = (_QWORD *)(v120 + 24 * v15);
        while (1)
        {
          v29 = v16;
          v31 = *(v28 - 1);
          v30 = *v28;
          v32 = *(v28 - 5);
          v33 = *(v28 - 4);
          v35 = *(v28 - 3);
          v34 = *(v28 - 2);
          v36 = swift_getObjectType(*v28, v6);
          sub_100292204(v34, v31);
          swift_unknownObjectRetain(v30);
          sub_100292204(v32, v33);
          v37 = swift_unknownObjectRetain(v35);
          v38 = DOCNode.compareBySharedStatus(node:)(v37, v36);
          sub_1002B81C8(v32, v33);
          swift_unknownObjectRelease(v35);
          sub_1002B81C8(v34, v31);
          swift_unknownObjectRelease(v30);
          if ((v132 == -1) == (v38 != -1))
            break;
          v16 = v29 + 1;
          v28 += 3;
          v4 = v129;
          if (v129 == v29 + 1)
          {
            v16 = v129;
            goto LABEL_22;
          }
        }
        v4 = v129;
        v16 = v29;
LABEL_22:
        v15 = v128;
      }
      v13 = v135;
      v11 = v123;
      v2 = v125;
      if (v132 == -1)
      {
        if (v16 < v15)
          goto LABEL_137;
        if (v15 < v16)
        {
          v39 = 24 * v16;
          v40 = 24 * v15;
          v41 = v16;
          v42 = v15;
          do
          {
            if (v42 != --v41)
            {
              if (!v135)
                goto LABEL_140;
              v43 = v135 + v40;
              v44 = v135 + v39;
              v45 = *(_QWORD *)(v135 + v40 + 16);
              v46 = *(_OWORD *)(v135 + v40);
              v47 = *(_QWORD *)(v135 + v39 - 8);
              *(_OWORD *)v43 = *(_OWORD *)(v135 + v39 - 24);
              *(_QWORD *)(v43 + 16) = v47;
              *(_OWORD *)(v44 - 24) = v46;
              *(_QWORD *)(v44 - 8) = v45;
            }
            ++v42;
            v39 -= 24;
            v40 += 24;
          }
          while (v42 < v41);
        }
      }
    }
    if (v16 < v4)
    {
      if (__OFSUB__(v16, v15))
        goto LABEL_133;
      if (v16 - v15 < v122)
        break;
    }
LABEL_49:
    if (v16 < v15)
      goto LABEL_128;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_100464E4C(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v61 = *((_QWORD *)v11 + 2);
    v60 = *((_QWORD *)v11 + 3);
    v14 = v61 + 1;
    v13 = v135;
    if (v61 >= v60 >> 1)
    {
      v110 = sub_100464E4C((char *)(v60 > 1), v61 + 1, 1, v11);
      v13 = v135;
      v11 = v110;
    }
    *((_QWORD *)v11 + 2) = v14;
    v62 = v11 + 32;
    v63 = &v11[16 * v61 + 32];
    *(_QWORD *)v63 = v15;
    *((_QWORD *)v63 + 1) = v16;
    v134 = v16;
    if (v61)
    {
      while (1)
      {
        v64 = v14 - 1;
        if (v14 >= 4)
        {
          v69 = &v62[16 * v14];
          v70 = *((_QWORD *)v69 - 8);
          v71 = *((_QWORD *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_117;
          v74 = *((_QWORD *)v69 - 6);
          v73 = *((_QWORD *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_118;
          v76 = v14 - 2;
          v77 = &v62[16 * v14 - 32];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_120;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_123;
          if (v81 >= v72)
          {
            v99 = &v62[16 * v64];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_127;
            v92 = v67 < v102;
            goto LABEL_86;
          }
        }
        else
        {
          if (v14 != 3)
          {
            v93 = *((_QWORD *)v11 + 4);
            v94 = *((_QWORD *)v11 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_80;
          }
          v66 = *((_QWORD *)v11 + 4);
          v65 = *((_QWORD *)v11 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_119;
        v76 = v14 - 2;
        v82 = &v62[16 * v14 - 32];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_122;
        v88 = &v62[16 * v64];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_125;
        if (__OFADD__(v86, v91))
          goto LABEL_126;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_86:
          if (v92)
            v64 = v76;
          goto LABEL_88;
        }
LABEL_80:
        if ((v87 & 1) != 0)
          goto LABEL_121;
        v95 = &v62[16 * v64];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_124;
        if (v98 < v86)
          goto LABEL_14;
LABEL_88:
        v103 = v64 - 1;
        if (v64 - 1 >= v14)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        if (!v13)
          goto LABEL_139;
        v104 = v11;
        v105 = &v62[16 * v103];
        v106 = *(_QWORD *)v105;
        v107 = &v62[16 * v64];
        v108 = *((_QWORD *)v107 + 1);
        sub_1002B7DF4((uint64_t *)(v13 + 24 * *(_QWORD *)v105), (uint64_t *)(v13 + 24 * *(_QWORD *)v107), v13 + 24 * v108, __dst);
        if (v2)
        {
LABEL_109:
          v118 = v104;
          goto LABEL_111;
        }
        if (v108 < v106)
          goto LABEL_114;
        if (v64 > *((_QWORD *)v104 + 2))
          goto LABEL_115;
        *(_QWORD *)v105 = v106;
        *(_QWORD *)&v62[16 * v103 + 8] = v108;
        v109 = *((_QWORD *)v104 + 2);
        if (v64 >= v109)
          goto LABEL_116;
        v11 = v104;
        v14 = v109 - 1;
        memmove(&v62[16 * v64], v107 + 16, 16 * (v109 - 1 - v64));
        *((_QWORD *)v104 + 2) = v109 - 1;
        v13 = v135;
        if (v109 <= 2)
          goto LABEL_14;
      }
    }
    v14 = 1;
LABEL_14:
    v4 = v129;
    v12 = v134;
    if (v134 >= v129)
      goto LABEL_97;
  }
  if (__OFADD__(v15, v122))
    goto LABEL_135;
  if (v15 + v122 >= v4)
    v48 = v4;
  else
    v48 = v15 + v122;
  if (v48 >= v15)
  {
    if (v16 != v48)
    {
      v124 = v11;
      v126 = v2;
      v49 = (uint64_t *)(v13 + 24 * v16);
      v127 = v48;
      do
      {
        v51 = (uint64_t *)(v13 + 24 * v16);
        v53 = *v51;
        v52 = v51[1];
        v54 = v51[2];
        v55 = v15;
        v130 = v49;
        v133 = v16;
        while (1)
        {
          v56 = *(v49 - 3);
          v57 = *(v49 - 2);
          v58 = *(v49 - 1);
          v136 = swift_getObjectType(v54, v6);
          sub_100292204(v53, v52);
          swift_unknownObjectRetain(v54);
          sub_100292204(v56, v57);
          v59 = swift_unknownObjectRetain(v58);
          v137 = DOCNode.compareBySharedStatus(node:)(v59, v136);
          sub_1002B81C8(v56, v57);
          swift_unknownObjectRelease(v58);
          sub_1002B81C8(v53, v52);
          swift_unknownObjectRelease(v54);
          if (v137 != -1)
            break;
          v50 = v133;
          v13 = v135;
          if (!v135)
            goto LABEL_138;
          v53 = *v49;
          v52 = v49[1];
          v54 = v49[2];
          *(_OWORD *)v49 = *(_OWORD *)(v49 - 3);
          v49[2] = *(v49 - 1);
          *(v49 - 2) = v52;
          *(v49 - 1) = v54;
          *(v49 - 3) = v53;
          v49 -= 3;
          if (v133 == ++v55)
            goto LABEL_42;
        }
        v50 = v133;
        v13 = v135;
LABEL_42:
        v16 = v50 + 1;
        v49 = v130 + 3;
        v15 = v128;
      }
      while (v16 != v127);
      v16 = v127;
      v11 = v124;
      v2 = v126;
    }
    goto LABEL_49;
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1002B7318(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v26 = a1;
  v30 = sub_10006922C(&qword_100644B40);
  v7 = __chkstk_darwin(v30);
  v31 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v27 = (uint64_t)&v24 - v10;
  result = __chkstk_darwin(v9);
  v14 = (char *)&v24 - v13;
  v29 = a3;
  v25 = a2;
  if (a3 != a2)
  {
    v15 = *(_QWORD *)(v12 + 72);
    v33 = v15 * (v29 - 1);
    v28 = v15;
    v32 = v15 * v29;
LABEL_5:
    v16 = 0;
    v17 = v26;
    while (1)
    {
      v18 = *a4;
      sub_1000271D4(v32 + v16 + *a4, (uint64_t)v14, &qword_100644B40);
      v19 = v27;
      sub_1000271D4(v33 + v16 + v18, v27, &qword_100644B40);
      LOBYTE(v18) = static Date.> infix(_:_:)(&v14[*(int *)(v30 + 48)], v19 + *(int *)(v30 + 48));
      sub_10000CB4C(v19, &qword_100644B40);
      result = sub_10000CB4C((uint64_t)v14, &qword_100644B40);
      if ((v18 & 1) == 0)
      {
LABEL_4:
        v33 += v28;
        v32 += v28;
        if (++v29 == v25)
          return result;
        goto LABEL_5;
      }
      v20 = *a4;
      if (!*a4)
        break;
      v21 = a4;
      v22 = v20 + v32 + v16;
      v23 = v20 + v33 + v16;
      sub_100070EDC(v22, v31, &qword_100644B40);
      swift_arrayInitWithTakeFrontToBack(v22, v23, 1, v30);
      result = sub_100070EDC(v31, v23, &qword_100644B40);
      v16 -= v28;
      ++v17;
      a4 = v21;
      if (v29 == v17)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1002B7558(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;

  v15 = result;
  if (a3 != a2)
  {
    v17 = *a4;
    v4 = (uint64_t *)(*a4 + 24 * a3);
LABEL_5:
    v5 = (uint64_t *)(v17 + 24 * a3);
    v6 = *v5;
    v7 = v5[1];
    v8 = v5[2];
    v9 = v15;
    v16 = v4;
    v18 = a3;
    while (1)
    {
      v10 = *(v4 - 3);
      v11 = *(v4 - 2);
      v12 = *(v4 - 1);
      ObjectType = swift_getObjectType(v8, a2);
      sub_100292204(v6, v7);
      swift_unknownObjectRetain(v8);
      sub_100292204(v10, v11);
      v13 = swift_unknownObjectRetain(v12);
      v20 = DOCNode.compareBySharedStatus(node:)(v13, ObjectType);
      sub_1002B81C8(v10, v11);
      swift_unknownObjectRelease(v12);
      sub_1002B81C8(v6, v7);
      result = swift_unknownObjectRelease(v8);
      if (v20 != -1)
      {
LABEL_4:
        a3 = v18 + 1;
        v4 = v16 + 3;
        if (v18 + 1 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v17)
        break;
      v6 = *v4;
      v7 = v4[1];
      v8 = v4[2];
      *(_OWORD *)v4 = *(_OWORD *)(v4 - 3);
      v4[2] = *(v4 - 1);
      *(v4 - 2) = v7;
      *(v4 - 1) = v8;
      *(v4 - 3) = v6;
      v4 -= 3;
      if (v18 == ++v9)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1002B76B8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v45 = sub_10006922C(&qword_100644B40);
  v8 = __chkstk_darwin(v45);
  v44 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v41 - v10;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_62;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_63;
  v15 = (uint64_t)(a2 - a1) / v13;
  v48 = a1;
  v47 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v16, v45);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4);
      }
      v25 = a4 + v18;
      v46 = a4 + v18;
      v48 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v27 = -v13;
        v42 = a4;
        v43 = a1;
        do
        {
          v28 = a3 + v27;
          sub_1000271D4(v25 + v27, (uint64_t)v11, &qword_100644B40);
          v29 = a2 + v27;
          v30 = a3;
          v31 = (uint64_t)v11;
          v32 = v44;
          sub_1000271D4(a2 + v27, v44, &qword_100644B40);
          v33 = static Date.> infix(_:_:)(v31 + *(int *)(v45 + 48), v32 + *(int *)(v45 + 48));
          v34 = v32;
          v11 = (char *)v31;
          sub_10000CB4C(v34, &qword_100644B40);
          sub_10000CB4C(v31, &qword_100644B40);
          if ((v33 & 1) != 0)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v28, a2 + v27, 1, v45);
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == a2;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28);
            }
            v48 += v27;
          }
          else
          {
            v38 = v46;
            v39 = v46 + v27;
            v46 += v27;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v39, 1, v45);
              v29 = a2;
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == v38;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28);
              v29 = a2;
            }
          }
          v25 = v46;
          if (v46 <= v37)
            break;
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v36);
      }
      goto LABEL_60;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v15, v45);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }
    v43 = a4 + v17;
    v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      v20 = v44;
      do
      {
        sub_1000271D4(a2, (uint64_t)v11, &qword_100644B40);
        sub_1000271D4(a4, v20, &qword_100644B40);
        v21 = static Date.> infix(_:_:)(&v11[*(int *)(v45 + 48)], v20 + *(int *)(v45 + 48));
        sub_10000CB4C(v20, &qword_100644B40);
        sub_10000CB4C((uint64_t)v11, &qword_100644B40);
        v22 = v48;
        if ((v21 & 1) != 0)
        {
          v23 = a2 + v13;
          if (v48 < a2 || v48 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack(v48, a2, 1, v45);
          }
          else if (v48 == a2)
          {
            v22 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v48);
          }
        }
        else
        {
          v24 = v47 + v13;
          if (v48 < v47 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v48, v47, 1, v45);
          }
          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront(v48);
          }
          v47 = v24;
          v23 = a2;
        }
        v48 = v22 + v13;
        a4 = v47;
        if (v47 >= v43)
          break;
        a2 = v23;
      }
      while (v23 < a3);
    }
LABEL_60:
    sub_1004650B0(&v48, &v47, (uint64_t *)&v46);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1002B7B6C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  uint64_t result;
  char *v26;
  const void *v27;
  char *v28;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 31;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 5;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 31;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 5;
  v28 = __src;
  v27 = __dst;
  if (v10 >= v12 >> 5)
  {
    if (v11 >= -31)
    {
      if (__dst != a2 || &a2[32 * v13] <= __dst)
        memmove(__dst, a2, 32 * v13);
      v19 = &v4[32 * v13];
      v26 = v19;
      v28 = v6;
      if (v7 < v6 && v11 >= 32)
      {
        v20 = (char *)(a3 - 32);
        do
        {
          v21 = v20 + 32;
          if (*((_QWORD *)v6 - 1) >= *((_QWORD *)v19 - 1))
          {
            v26 = v19 - 32;
            if (v21 < v19 || v20 >= v19 || v21 != v19)
            {
              v24 = *((_OWORD *)v19 - 1);
              *(_OWORD *)v20 = *((_OWORD *)v19 - 2);
              *((_OWORD *)v20 + 1) = v24;
            }
            v22 = v6;
            v19 -= 32;
            if (v6 <= v7)
              break;
          }
          else
          {
            v22 = v6 - 32;
            if (v21 != v6 || v20 >= v6)
            {
              v23 = *((_OWORD *)v6 - 1);
              *(_OWORD *)v20 = *(_OWORD *)v22;
              *((_OWORD *)v20 + 1) = v23;
            }
            v28 = v6 - 32;
            if (v22 <= v7)
              break;
          }
          v20 -= 32;
          v6 = v22;
        }
        while (v19 > v4);
      }
LABEL_44:
      sub_1004651C8((void **)&v28, &v27, &v26);
      return 1;
    }
  }
  else if (v8 >= -31)
  {
    if (__dst != __src || &__src[32 * v10] <= __dst)
      memmove(__dst, __src, 32 * v10);
    v14 = &v4[32 * v10];
    v26 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 32)
    {
      v15 = v4;
      while (1)
      {
        if (*((_QWORD *)v15 + 3) >= *((_QWORD *)v6 + 3))
        {
          v4 = v15 + 32;
          v17 = v15;
          v16 = v6;
          if (v7 == v15)
          {
            v15 += 32;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v15 += 32;
          }
        }
        else
        {
          v16 = v6 + 32;
          v17 = v6;
          if (v7 == v6 && v7 < v16)
            goto LABEL_22;
        }
        v18 = *((_OWORD *)v17 + 1);
        *(_OWORD *)v7 = *(_OWORD *)v17;
        *((_OWORD *)v7 + 1) = v18;
LABEL_22:
        v7 += 32;
        if (v15 < v14)
        {
          v6 = v16;
          if ((unint64_t)v16 < a3)
            continue;
        }
        v27 = v4;
        v28 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1002B7DF4(uint64_t *a1, uint64_t *__src, unint64_t a3, char *__dst)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t *v23;
  __int128 v24;
  char *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t result;
  char *v39;
  uint64_t ObjectType;
  unint64_t v42;
  uint64_t *v43;
  char *v44;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;

  v5 = __src;
  v6 = (char *)__src - (char *)a1;
  v7 = ((char *)__src - (char *)a1) / 24;
  v8 = a3 - (_QWORD)__src;
  v9 = (uint64_t)(a3 - (_QWORD)__src) / 24;
  v51 = a1;
  v50 = (uint64_t *)__dst;
  if (v7 >= v9)
  {
    if (v8 >= -23)
    {
      if (__dst != (char *)__src || &__src[3 * v9] <= (uint64_t *)__dst)
        memmove(__dst, __src, 24 * v9);
      v39 = __dst;
      v25 = &__dst[24 * v9];
      v49 = (uint64_t *)v25;
      v51 = v5;
      if (a1 < v5 && v8 >= 24)
      {
        v26 = a3 - 24;
        v27 = v5;
        do
        {
          v48 = v5;
          v44 = v25;
          v46 = (uint64_t *)(v26 + 24);
          v28 = *((_QWORD *)v25 - 3);
          v29 = *((_QWORD *)v25 - 2);
          v25 -= 24;
          v42 = v29;
          v30 = *((_QWORD *)v25 + 2);
          v31 = *(v27 - 3);
          v32 = *(v27 - 2);
          v27 -= 3;
          v33 = v27[2];
          ObjectType = swift_getObjectType(v30, __src);
          sub_100292204(v28, v29);
          swift_unknownObjectRetain(v30);
          sub_100292204(v31, v32);
          v34 = swift_unknownObjectRetain(v33);
          v35 = DOCNode.compareBySharedStatus(node:)(v34, ObjectType);
          sub_1002B81C8(v31, v32);
          swift_unknownObjectRelease(v33);
          sub_1002B81C8(v28, v42);
          swift_unknownObjectRelease(v30);
          if (v35 == -1)
          {
            v25 = v44;
            if (v46 != v48 || v26 >= (unint64_t)v48)
            {
              v37 = *(_OWORD *)v27;
              *(_QWORD *)(v26 + 16) = v27[2];
              *(_OWORD *)v26 = v37;
            }
            v51 = v27;
          }
          else
          {
            v49 = (uint64_t *)v25;
            v27 = v48;
            if (v46 < (uint64_t *)v44 || v26 >= (unint64_t)v44 || v46 != (uint64_t *)v44)
            {
              v36 = *(_OWORD *)v25;
              *(_QWORD *)(v26 + 16) = *((_QWORD *)v25 + 2);
              *(_OWORD *)v26 = v36;
            }
          }
          if (v27 <= a1)
            break;
          v26 -= 24;
          v5 = v27;
        }
        while (v25 > v39);
      }
      goto LABEL_38;
    }
  }
  else if (v6 >= -23)
  {
    v10 = a1;
    if (__dst != (char *)a1 || &a1[3 * v7] <= (uint64_t *)__dst)
      memmove(__dst, a1, 24 * v7);
    v43 = (uint64_t *)&__dst[24 * v7];
    v49 = v43;
    if ((unint64_t)v5 < a3 && v6 >= 24)
    {
      v11 = (uint64_t *)__dst;
      v12 = a1;
      do
      {
        v47 = v5;
        v13 = *v5;
        v14 = v5[1];
        v15 = v5[2];
        v17 = *v11;
        v16 = v11[1];
        v18 = v11[2];
        v19 = swift_getObjectType(v15, v10);
        sub_100292204(v13, v14);
        swift_unknownObjectRetain(v15);
        sub_100292204(v17, v16);
        v20 = swift_unknownObjectRetain(v18);
        v21 = DOCNode.compareBySharedStatus(node:)(v20, v19);
        sub_1002B81C8(v17, v16);
        swift_unknownObjectRelease(v18);
        sub_1002B81C8(v13, v14);
        swift_unknownObjectRelease(v15);
        if (v21 == -1)
        {
          v23 = v47 + 3;
          if (v12 < v47 || v12 >= v23 || v12 != v47)
          {
            v24 = *(_OWORD *)v47;
            v12[2] = v47[2];
            *(_OWORD *)v12 = v24;
          }
        }
        else
        {
          if (v12 != v11)
          {
            v22 = *(_OWORD *)v11;
            v12[2] = v11[2];
            *(_OWORD *)v12 = v22;
          }
          v11 += 3;
          v50 = v11;
          v23 = v47;
        }
        v12 += 3;
        if (v11 >= v43)
          break;
        v5 = v23;
      }
      while ((unint64_t)v23 < a3);
      v51 = v12;
    }
LABEL_38:
    sub_100465270((void **)&v51, (const void **)&v50, &v49);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1002B81C8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 3)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_1002B81DC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_1002B81F4(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  Swift::Bool Document;
  uint64_t v9;
  uint64_t v10;

  v2 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
    return 1;
  }
  if (a1 < 0)
    v10 = a1;
  else
    v10 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v3 = _CocoaArrayWrapper.endIndex.getter(v10);
  swift_bridgeObjectRelease(a1);
  if (!v3)
    return 1;
LABEL_3:
  if (v3 != 1)
    return 0;
  if (v2)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    result = _CocoaArrayWrapper.endIndex.getter(v9);
    if (result)
      goto LABEL_6;
    goto LABEL_14;
  }
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(a1);
  if (!v4)
  {
LABEL_14:
    swift_bridgeObjectRelease(a1);
    return 0;
  }
LABEL_6:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_9;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(_QWORD *)(a1 + 32);
    swift_unknownObjectRetain(v6);
LABEL_9:
    swift_bridgeObjectRelease(a1);
    swift_getObjectType(v6, v7);
    Document = DOCNode.isCreateDocumentSentinel()();
    swift_unknownObjectRelease(v6);
    return Document;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002B8310(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_1002B81DC(a1, a2, a3);
  return a1;
}

uint64_t sub_1002B8324(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_100292218(a1, a2, a3);
  return a1;
}

BOOL sub_1002B8338(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 result;

  v9 = *v4;
  v10 = v4[2];
  swift_bridgeObjectRetain(v10);
  v11 = sub_1002B90E4(v9);
  swift_bridgeObjectRelease(v12);
  v13 = sub_1002B90E4(v11 & a2);
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease(v10);
  if (v13 == a2)
  {
    a3 = v15;
  }
  else
  {
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRelease(v10);
    *v4 = sub_1002B90E4(v9 | a2);
    v4[1] = v18;
    v4[2] = v19;
    v17 = a4;
  }
  result = v13 != a2;
  *a1 = a2;
  a1[1] = a3;
  a1[2] = v17;
  return result;
}

uint64_t sub_1002B840C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *v3;
  v7 = v3[2];
  swift_bridgeObjectRetain(v7);
  v8 = sub_1002B90E4(v6);
  swift_bridgeObjectRelease(v9);
  v10 = sub_1002B90E4(v8 & a1);
  v12 = v11;
  swift_bridgeObjectRelease(v7);
  v13 = sub_1002B90E4(0);
  swift_bridgeObjectRelease(v14);
  if (v10 == v13)
  {
    swift_bridgeObjectRelease(v12);
    return 0;
  }
  else
  {
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(a3);
    v15 = sub_1002B90E4(v6);
    v17 = v16;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v17);
    v18 = sub_1002B90E4(v15 ^ a1);
    v20 = v19;
    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease_n(a3, 2);
    v21 = sub_1002B90E4(v18 & v6);
    v23 = v22;
    v25 = v24;
    swift_bridgeObjectRelease(v20);
    *v3 = v21;
    v3[1] = v23;
    v3[2] = v25;
  }
  return v10;
}

uint64_t sub_1002B8548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *v3;
  v7 = v3[2];
  swift_bridgeObjectRetain(v7);
  v8 = sub_1002B90E4(v6);
  swift_bridgeObjectRelease(v9);
  v10 = sub_1002B90E4(v8 & a1);
  v12 = v11;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease_n(v7, 2);
  v13 = sub_1002B90E4(v6 | a1);
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease(a3);
  *v3 = v13;
  v3[1] = v15;
  v3[2] = v17;
  v18 = sub_1002B90E4(0);
  swift_bridgeObjectRelease(v19);
  if (v10 == v18)
  {
    swift_bridgeObjectRelease(v12);
    return 0;
  }
  return v10;
}

_QWORD *sub_1002B862C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;

  v2 = *result != 1 && *result != 0;
  *(_QWORD *)a2 = *result == 1;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

void sub_1002B865C(_QWORD *a1@<X8>)
{
  *a1 = &off_1005C0508;
}

void sub_1002B866C(_QWORD *a1@<X8>)
{
  *a1 = &off_1005C0538;
}

uint64_t sub_1002B867C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = sub_1002B90E4(*a1);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_1002B86A8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t sub_1002B86D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_1002B90E4(0);
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

double sub_1002B8704@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;

  v4 = *a1;
  v5 = a1[2];
  v6 = sub_1002B90E4(*v2);
  v8 = v7;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v8);
  v9 = sub_1002B90E4(v6 | v4);
  v11 = v10;
  v13 = v12;
  swift_bridgeObjectRelease(v5);
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v13;
  v14 = v2[2];
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v14).n128_u64[0];
  return result;
}

double sub_1002B878C@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v4 = *a1;
  v5 = sub_1002B90E4(*v2);
  swift_bridgeObjectRelease(v6);
  *a2 = sub_1002B90E4(v5 & v4);
  a2[1] = v7;
  a2[2] = v8;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v2[2]).n128_u64[0];
  return result;
}

double sub_1002B87DC@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;

  v4 = *a1;
  v5 = a1[2];
  v6 = sub_1002B90E4(*v2);
  v8 = v7;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v8);
  v9 = sub_1002B90E4(v6 ^ v4);
  v11 = v10;
  v13 = v12;
  swift_bridgeObjectRelease(v5);
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v13;
  v14 = v2[2];
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v14).n128_u64[0];
  return result;
}

BOOL sub_1002B8864(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  BOOL v3;

  v2 = a2[2];
  v3 = sub_1002B8338(a1, *a2, a2[1], v2);
  swift_bridgeObjectRelease(v2);
  return v3;
}

uint64_t sub_1002B88A0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = sub_1002B840C(*a1, a1[1], a1[2]);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

void sub_1002B88D4(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[2];
  v4 = sub_1002B8548(*a1, a1[1], v3);
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease(v3);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v8;
}

double sub_1002B8930(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *a1;
  v4 = *v1;
  swift_bridgeObjectRelease(v1[2]);
  *v1 = sub_1002B90E4(v4 | v3);
  v1[1] = v5;
  v1[2] = v6;
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[2]).n128_u64[0];
  return result;
}

uint64_t sub_1002B8978(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *v1;
  swift_bridgeObjectRelease(v1[2]);
  result = sub_1002B90E4(v3 & v2);
  *v1 = result;
  v1[1] = v5;
  v1[2] = v6;
  return result;
}

double sub_1002B89B8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *a1;
  v4 = *v1;
  swift_bridgeObjectRelease(v1[2]);
  *v1 = sub_1002B90E4(v4 ^ v3);
  v1[1] = v5;
  v1[2] = v6;
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1[2]).n128_u64[0];
  return result;
}

uint64_t sub_1002B8A00@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v4 = *a1;
  v5 = a1[2];
  v6 = *v2;
  v7 = v2[2];
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v5);
  v8 = sub_1002B90E4(v6);
  v10 = v9;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v10);
  v11 = sub_1002B90E4(v8 ^ v4);
  v13 = v12;
  swift_bridgeObjectRelease_n(v5, 2);
  v14 = sub_1002B90E4(v6);
  swift_bridgeObjectRelease(v15);
  v16 = sub_1002B90E4(v14 & v11);
  v18 = v17;
  v20 = v19;
  swift_bridgeObjectRelease(v13);
  result = swift_bridgeObjectRelease_n(v7, 2);
  *a2 = v16;
  a2[1] = v18;
  a2[2] = v20;
  return result;
}

BOOL sub_1002B8AD4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *v1;
  v4 = v1[2];
  swift_bridgeObjectRetain(v4);
  v5 = sub_1002B90E4(v3);
  swift_bridgeObjectRelease(v6);
  v7 = sub_1002B90E4(v5 & v2);
  v9 = v8;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v9);
  return v7 == v3;
}

BOOL sub_1002B8B44(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *v1;
  v4 = v1[2];
  swift_bridgeObjectRetain(v4);
  v5 = sub_1002B90E4(v3);
  swift_bridgeObjectRelease(v6);
  v7 = sub_1002B90E4(v5 & v2);
  v9 = v8;
  swift_bridgeObjectRelease(v4);
  v10 = sub_1002B90E4(0);
  v12 = v11;
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v12);
  return v7 == v10;
}

BOOL sub_1002B8BCC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = a1[2];
  v4 = *v1;
  swift_bridgeObjectRetain(v3);
  v5 = sub_1002B90E4(v2);
  swift_bridgeObjectRelease(v6);
  v7 = sub_1002B90E4(v5 & v4);
  v9 = v8;
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v9);
  return v7 == v2;
}

BOOL sub_1002B8C3C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = sub_1002B90E4(0);
  swift_bridgeObjectRelease(v3);
  return v1 == v2;
}

void sub_1002B8C74(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *a1;
  v3 = a1[2];
  v4 = *v1;
  v5 = v1[2];
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v3);
  v6 = sub_1002B90E4(v4);
  v8 = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v8);
  v9 = sub_1002B90E4(v6 ^ v2);
  v11 = v10;
  swift_bridgeObjectRelease_n(v5, 2);
  swift_bridgeObjectRelease_n(v3, 2);
  v12 = sub_1002B90E4(v9 & v4);
  v14 = v13;
  v16 = v15;
  swift_bridgeObjectRelease(v11);
  *v1 = v12;
  v1[1] = v14;
  v1[2] = v16;
}

uint64_t sub_1002B8D30@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = sub_10023B9F4();
  v6 = v5;
  v8 = v7;
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v8;
  return result;
}

BOOL UITraitCollection.doc_isRTL.getter()
{
  void *v0;

  return objc_msgSend(v0, "layoutDirection") == (id)1;
}

BOOL UIViewController.doc_isRTL.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, "traitCollection");
  v2 = objc_msgSend(v1, "layoutDirection");

  return v2 == (id)1;
}

ValueMetadata *type metadata accessor for DOCSourceOutlineStyle()
{
  return &type metadata for DOCSourceOutlineStyle;
}

uint64_t initializeBufferWithCopyOfBuffer for DOCViewEditMenuInteraction.Presentatable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *_s6TraitsVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[2];
  v4 = a1[2];
  a1[2] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for DOCViewEditMenuInteraction.Presentatable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for DOCViewEditMenuInteraction.Presentatable(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCViewEditMenuInteraction.Presentatable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s6TraitsVMa()
{
  return &_s6TraitsVN;
}

unint64_t sub_1002B8F5C()
{
  unint64_t result;

  result = qword_10064CD58;
  if (!qword_10064CD58)
  {
    result = swift_getWitnessTable(&unk_1004E09C0, &_s6TraitsVN);
    atomic_store(result, (unint64_t *)&qword_10064CD58);
  }
  return result;
}

unint64_t sub_1002B8FA4()
{
  unint64_t result;

  result = qword_10064CD60;
  if (!qword_10064CD60)
  {
    result = swift_getWitnessTable(&unk_1004E0990, &_s6TraitsVN);
    atomic_store(result, (unint64_t *)&qword_10064CD60);
  }
  return result;
}

unint64_t sub_1002B8FEC()
{
  unint64_t result;

  result = qword_10064CD68;
  if (!qword_10064CD68)
  {
    result = swift_getWitnessTable(&unk_1004E09E8, &_s6TraitsVN);
    atomic_store(result, (unint64_t *)&qword_10064CD68);
  }
  return result;
}

unint64_t sub_1002B9034()
{
  unint64_t result;

  result = qword_10064CD70;
  if (!qword_10064CD70)
  {
    result = swift_getWitnessTable(&unk_1004E0A20, &_s6TraitsVN);
    atomic_store(result, (unint64_t *)&qword_10064CD70);
  }
  return result;
}

uint64_t sub_1002B9078()
{
  return sub_1002B91CC(&qword_10064CD78, &qword_10064CD80);
}

unint64_t sub_1002B90A0()
{
  unint64_t result;

  result = qword_10064CD88;
  if (!qword_10064CD88)
  {
    result = swift_getWitnessTable(&unk_1004E0BF8, &type metadata for DOCSourceOutlineStyle);
    atomic_store(result, (unint64_t *)&qword_10064CD88);
  }
  return result;
}

uint64_t sub_1002B90E4(uint64_t a1)
{
  Swift::String v2;
  void *object;
  Swift::String v4;

  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return a1;
}

ValueMetadata *type metadata accessor for DOCSourceOutlinePresentationContext()
{
  return &type metadata for DOCSourceOutlinePresentationContext;
}

uint64_t sub_1002B91A8()
{
  return sub_1002B91CC(&qword_10064CD90, &qword_10064CD98);
}

uint64_t sub_1002B91CC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10007E830(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002B9210()
{
  unint64_t result;

  result = qword_10064CDA0;
  if (!qword_10064CDA0)
  {
    result = swift_getWitnessTable(&unk_1004E0CF4, &type metadata for DOCSourceOutlinePresentationContext);
    atomic_store(result, (unint64_t *)&qword_10064CDA0);
  }
  return result;
}

uint64_t sub_1002B925C(void *a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  void *v14;
  char v15;
  id v16;
  void *v17;
  _QWORD *v18;
  id v19;
  _BYTE v21[16];

  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_10006922C((uint64_t *)&unk_100642710);
  __chkstk_darwin(v10);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = objc_msgSend(a1, "indexPathForItemAtPoint:", a2, a3);
  if (v13)
  {
    v14 = v13;
    static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v13);

    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v12, v9, v6);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) != 1)
    {
      sub_1000E9F38((uint64_t)v12);
      v15 = 0;
      return v15 & 1;
    }
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
  }
  sub_1000E9F38((uint64_t)v12);
  v16 = objc_msgSend(a1, "hitTest:withEvent:", 0, a2, a3);
  if (v16)
  {
    v17 = v16;
    v18 = sub_10017A488();
    v19 = v17;
    v15 = sub_1002B9484((uint64_t)v18, v19);
    swift_bridgeObjectRelease(v18);

  }
  else
  {
    v15 = 1;
  }
  return v15 & 1;
}

BOOL sub_1002B9434()
{
  void *v0;

  return (objc_msgSend(v0, "isEditing") & 1) == 0
      && *((_BYTE *)v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_editingMode) == 0;
}

void sub_1002B947C()
{
  sub_1002447C4(1);
}

uint64_t sub_1002B9484(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_12;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v11))
  {
    v5 = 4;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v9 = objc_msgSend(a2, "isDescendantOfView:", v6);

      if ((v9 & 1) == 0)
      {
        ++v5;
        if (v8 != v4)
          continue;
      }
      v10 = v9 ^ 1;
      goto LABEL_17;
    }
    __break(1u);
LABEL_12:
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  v10 = 1;
LABEL_17:
  swift_bridgeObjectRelease(a1);
  return v10;
}

uint64_t sub_1002B9590(uint64_t result)
{
  char *v1;
  void *v2;
  void *v3;
  char v4;
  id v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;

  v2 = *(void **)&v1[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_containerNavigationItem];
  if (v2)
  {
    v3 = v1;
    v4 = result;
    v5 = v2;
    v6 = sub_1004581F4();
    v7 = v3;
    v8 = (uint64_t)sub_1002BC174((unint64_t)v6, (uint64_t)v7);
    swift_bridgeObjectRelease(v6);

    if ((unint64_t)v8 >> 62)
    {
      if (v8 < 0)
        v14 = v8;
      else
        v14 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
      result = _CocoaArrayWrapper.endIndex.getter(v14);
      v9 = result;
      if (result)
        goto LABEL_4;
    }
    else
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain(v8);
      if (v9)
      {
LABEL_4:
        if (v9 < 1)
        {
          __break(1u);
          return result;
        }
        v10 = 0;
        v11 = v4 & 1;
        do
        {
          if ((v8 & 0xC000000000000001) != 0)
            v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v8);
          else
            v12 = *(id *)(v8 + 8 * v10 + 32);
          v13 = v12;
          ++v10;
          objc_msgSend(v12, "setEnabled:", v11);

        }
        while (v9 != v10);
      }
    }

    return swift_bridgeObjectRelease_n(v8, 2);
  }
  return result;
}

void sub_1002B96CC()
{
  sub_1002BC590();
}

void sub_1002B9744(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  objc_super v9;

  v9.receiver = v2;
  v9.super_class = (Class)swift_getObjectType(v2, a2);
  objc_msgSendSuper2(&v9, "viewDidLoad");
  v3 = objc_msgSend(v2, "view");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v2, "effectiveAppearance");
    if (!v5
      || (v6 = v5, v7 = objc_msgSend(v5, "backgroundColor"), v6, !v7))
    {
      v7 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
    }
    objc_msgSend(v4, "setBackgroundColor:", v7);

    v8 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    objc_msgSend(v8, "addObserver:selector:name:object:", v2, "applicationDidBecomeActive:", UIApplicationDidBecomeActiveNotification, 0);

  }
  else
  {
    __break(1u);
  }
}

void sub_1002B98B0(char a1)
{
  char *v1;
  void *v3;
  uint64_t v4;
  char v5;
  id v6;
  void *v7;
  uint64_t v8;
  objc_super v9;

  v9.receiver = v1;
  v9.super_class = (Class)swift_getObjectType(v1);
  objc_msgSendSuper2(&v9, "viewDidAppear:", a1 & 1);
  v3 = *(void **)&v1[OBJC_IVAR____TtC5Files22DOCErrorViewController_authenticationAction];
  if (v3)
  {
    v4 = OBJC_IVAR____TtC5Files22DOCErrorViewController_autoPresentAuthenticationUI;
    v5 = v1[OBJC_IVAR____TtC5Files22DOCErrorViewController_autoPresentAuthenticationUI];
    v6 = v3;
    v7 = v6;
    if ((v5 & 1) != 0 || objc_msgSend(v6, "displayInline"))
    {
      v1[v4] = 0;
      v8 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Files22DOCErrorViewController_error];
      if (objc_msgSend(v7, "displayInline"))
        sub_1002BB5FC(v1, v8, v7);
      else
        sub_1002BB9E4(v1, v8, v7);
    }

  }
}

void sub_1002B9A40(Swift::String *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  Swift::String v20;
  Swift::String_optional v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  Swift::String v34;
  Swift::String_optional v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  id v39;
  char **v40;
  void *v41;
  void *v42;
  char *v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  id v48;
  void *v49;
  Swift::String v50;
  Swift::String_optional v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  int v64;
  uint64_t v65;
  id v66;
  void *v67;
  Swift::String v68;
  Swift::String_optional v69;
  Swift::String v70;
  Swift::String v71;
  uint64_t v72;
  id v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  id v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  id v82;
  void *v83;
  Swift::String v84;
  Swift::String_optional v85;
  Swift::String v86;
  Swift::String v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  void *v98;
  Swift::String v99;
  Swift::String_optional v100;
  Swift::String v101;
  Swift::String v102;
  uint64_t v103;
  id v104;
  Swift::String v105;
  Swift::String_optional v106;
  Swift::String v107;
  Swift::String v108;
  Swift::String v109;
  Swift::String_optional v110;
  Swift::String v111;
  Swift::String v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  void *v122;
  Swift::String v123;
  Swift::String_optional v124;
  Swift::String v125;
  Swift::String v126;
  uint64_t v127;
  uint64_t v128;
  Swift::String v129;
  id v130;
  double v131;
  void *v132;
  uint64_t v133;
  void *v134;
  void *v135;
  Swift::String v136;
  Swift::String v137;
  void *v138;
  id v139;
  uint64_t v140;
  void *v141;
  void *v142;
  Swift::String v143;
  Swift::String v144;
  void *v145;
  Swift::String v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  Swift::String v155;
  Swift::String v156;
  Swift::String v157;
  Swift::String v158;
  void *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  void *v168;
  id v169;
  void *v170;
  Swift::String v171;
  Swift::String_optional v172;
  Swift::String v173;
  Swift::String v174;
  id v175;
  uint64_t v176;
  id v177;
  void *v178;
  Swift::String v179;
  Swift::String_optional v180;
  Swift::String v181;
  Swift::String v182;
  uint64_t v183;
  id v184;
  Swift::String_optional v185;
  Swift::String v186;
  Swift::String v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  id v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  Swift::String v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  id v204;
  void *v205;
  Swift::String v206;
  Swift::String_optional v207;
  Swift::String v208;
  Swift::String v209;
  uint64_t v210;
  id v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  void *v217;
  uint64_t v218;
  id v219;
  void *v220;
  Swift::String v221;
  Swift::String_optional v222;
  Swift::String v223;
  Swift::String v224;
  uint64_t v225;
  id v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  unint64_t v231;
  uint64_t v232;
  Swift::String *v233;
  void *v234;
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  Swift::String v238;
  __int128 v239;
  _OWORD v240[2];
  Swift::String v241;
  __int128 v242;
  Swift::String v243;
  Swift::String v244;
  Swift::String v245;
  Swift::String v246;
  Swift::String v247;
  Swift::String v248;
  Swift::String v249;
  Swift::String v250;
  Swift::String v251;
  Swift::String v252;
  Swift::String v253;
  Swift::String v254;
  Swift::String v255;
  Swift::String v256;

  v2 = v1;
  v4 = type metadata accessor for CocoaError.Code(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v232 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)(v1 + OBJC_IVAR____TtC5Files22DOCErrorViewController_authenticationAction);
  if (v9 && (objc_msgSend(v9, "displayInline", v6) & 1) != 0)
  {
    v10 = 0;
    v11 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v14 = (Swift::String)0;
LABEL_94:
    a1->_countAndFlagsBits = v10;
    a1->_object = v11;
    a1[1] = v14;
    a1[2]._countAndFlagsBits = countAndFlagsBits;
    a1[2]._object = object;
    return;
  }
  v15 = (void *)_convertErrorToNSError(_:)(*(_QWORD *)(v1 + OBJC_IVAR____TtC5Files22DOCErrorViewController_error));
  v243 = (Swift::String)0;
  v16 = NSError.isProviderServerUnreachable.getter();
  if ((v16 & 1) != 0)
  {
    v17 = v15;
    v18 = (id)_DocumentManagerBundle(v16);
    if (!v18)
      goto LABEL_103;
    v19 = v18;
    v244._countAndFlagsBits = 0xD000000000000033;
    v244._object = (void *)0x8000000100522EE0;
    v20._object = (void *)0x8000000100522EC0;
    v20._countAndFlagsBits = 0xD000000000000013;
    v21.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v21.value._object = (void *)0xEB00000000656C62;
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, (NSBundle)v19, v22, v244);

    v24 = sub_10006922C((uint64_t *)&unk_100644560);
    v25 = swift_allocObject(v24, 72, 7);
    *(_OWORD *)(v25 + 16) = xmmword_1004D9670;
    v26 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v2
                                                                + OBJC_IVAR____TtC5Files22DOCErrorViewController_source), "displayName"));
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    *(_QWORD *)(v25 + 56) = &type metadata for String;
    *(_QWORD *)(v25 + 64) = sub_10006A638();
    *(_QWORD *)(v25 + 32) = v27;
    *(_QWORD *)(v25 + 40) = v29;
    *(_QWORD *)&v237 = String.init(format:_:)(v23._countAndFlagsBits, v23._object, v25);
    *((_QWORD *)&v237 + 1) = v30;
    swift_bridgeObjectRelease(v23._object);
    v32 = (id)_DocumentManagerBundle(v31);
    if (!v32)
      goto LABEL_104;
    v33 = v32;
    v34._countAndFlagsBits = 0xD00000000000005ALL;
    v245._countAndFlagsBits = 0xD00000000000005FLL;
    v245._object = (void *)0x8000000100523530;
    v34._object = (void *)0x80000001005234D0;
    v35.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v35.value._object = (void *)0xEB00000000656C62;
    v36._countAndFlagsBits = 0;
    v36._object = (void *)0xE000000000000000;
    v37 = NSLocalizedString(_:tableName:bundle:value:comment:)(v34, v35, (NSBundle)v33, v36, v245);

    v243 = v37;
    v39 = (id)_DocumentManagerBundle(v38);
    v40 = &selRef_viewOptionsRoot;
    if (!v39)
      goto LABEL_105;
    v41 = v39;
    v42 = v17;
LABEL_22:
    v250._countAndFlagsBits = 0xD00000000000002ELL;
    v250._object = (void *)0x8000000100522FE0;
    v105._countAndFlagsBits = 0x6961674120797254;
    v105._object = (void *)0xE90000000000006ELL;
    v106.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v106.value._object = (void *)0xEB00000000656C62;
    v107._countAndFlagsBits = 0;
    v107._object = (void *)0xE000000000000000;
    v108 = NSLocalizedString(_:tableName:bundle:value:comment:)(v105, v106, (NSBundle)v41, v107, v250);
    countAndFlagsBits = v108._countAndFlagsBits;
    object = v108._object;

    goto LABEL_68;
  }
  v43 = *(char **)(v2 + OBJC_IVAR____TtC5Files22DOCErrorViewController_source);
  v44 = *(void **)&v43[OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain];
  if (!v44)
    goto LABEL_17;
  v45 = v44;
  v46 = v15;
  v47 = NSError.isProviderDomainNotAuthenticated.getter();
  if ((v47 & 1) == 0)
  {

LABEL_17:
    v234 = v15;
    v78 = v15;
    static CocoaError.fileReadNoPermission.getter();
    v79 = sub_10005A360((unint64_t *)&unk_10064CE80, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError.Code, (uint64_t)&protocol conformance descriptor for CocoaError.Code);
    v80 = v78;
    LOBYTE(v79) = static _ErrorCodeProtocol.~= infix(_:_:)(v8, v80, v4, v79);

    v81 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v82 = (id)_DocumentManagerBundle(v81);
    v83 = v82;
    if ((v79 & 1) != 0)
    {
      if (!v82)
        goto LABEL_106;
      v248._countAndFlagsBits = 0xD000000000000033;
      v248._object = (void *)0x8000000100522EE0;
      v84._object = (void *)0x8000000100522EC0;
      v84._countAndFlagsBits = 0xD000000000000013;
      v85.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v85.value._object = (void *)0xEB00000000656C62;
      v86._countAndFlagsBits = 0;
      v86._object = (void *)0xE000000000000000;
      v87 = NSLocalizedString(_:tableName:bundle:value:comment:)(v84, v85, (NSBundle)v83, v86, v248);

      v88 = sub_10006922C((uint64_t *)&unk_100644560);
      v89 = swift_allocObject(v88, 72, 7);
      *(_OWORD *)(v89 + 16) = xmmword_1004D9670;
      v90 = objc_msgSend(v43, "displayName");
      v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
      v93 = v92;

      *(_QWORD *)(v89 + 56) = &type metadata for String;
      *(_QWORD *)(v89 + 64) = sub_10006A638();
      *(_QWORD *)(v89 + 32) = v91;
      *(_QWORD *)(v89 + 40) = v93;
      v94 = String.init(format:_:)(v87._countAndFlagsBits, v87._object, v89);
      *((_QWORD *)&v237 + 1) = v95;
      swift_bridgeObjectRelease(v87._object);
      v97 = (id)_DocumentManagerBundle(v96);
      if (!v97)
        goto LABEL_107;
      v98 = v97;
      *(_QWORD *)&v237 = v94;
      v249._countAndFlagsBits = 0xD000000000000063;
      v249._object = (void *)0x8000000100523100;
      v99._object = (void *)0x8000000100523090;
      v99._countAndFlagsBits = 0x1000000000000063;
      v100.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v100.value._object = (void *)0xEB00000000656C62;
      v101._countAndFlagsBits = 0;
      v101._object = (void *)0xE000000000000000;
      v102 = NSLocalizedString(_:tableName:bundle:value:comment:)(v99, v100, (NSBundle)v98, v101, v249);

      swift_bridgeObjectRelease(v243._object);
      v243 = v102;
      v104 = (id)_DocumentManagerBundle(v103);
      v42 = v234;
      v40 = &selRef_viewOptionsRoot;
      if (!v104)
        goto LABEL_108;
      v41 = v104;
      goto LABEL_22;
    }
    if (!v82)
      goto LABEL_109;
    v251._countAndFlagsBits = 0xD000000000000033;
    v251._object = (void *)0x8000000100522EE0;
    v109._object = (void *)0x8000000100522EC0;
    v109._countAndFlagsBits = 0xD000000000000013;
    v110.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v110.value._object = (void *)0xEB00000000656C62;
    v111._countAndFlagsBits = 0;
    v111._object = (void *)0xE000000000000000;
    v112 = NSLocalizedString(_:tableName:bundle:value:comment:)(v109, v110, (NSBundle)v83, v111, v251);

    v113 = sub_10006922C((uint64_t *)&unk_100644560);
    v114 = swift_allocObject(v113, 72, 7);
    *(_OWORD *)(v114 + 16) = xmmword_1004D9670;
    v115 = objc_msgSend(v43, "displayName");
    v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
    v118 = v117;

    *(_QWORD *)(v114 + 56) = &type metadata for String;
    *(_QWORD *)(v114 + 64) = sub_10006A638();
    *(_QWORD *)(v114 + 32) = v116;
    *(_QWORD *)(v114 + 40) = v118;
    *(_QWORD *)&v237 = String.init(format:_:)(v112._countAndFlagsBits, v112._object, v114);
    *((_QWORD *)&v237 + 1) = v119;
    swift_bridgeObjectRelease(v112._object);
    v121 = (id)_DocumentManagerBundle(v120);
    if (v121)
    {
      v122 = v121;
      v123._countAndFlagsBits = 0xD000000000000047;
      v252._countAndFlagsBits = 0xD000000000000060;
      v252._object = (void *)0x8000000100522F70;
      v123._object = (void *)0x8000000100522F20;
      v124.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v124.value._object = (void *)0xEB00000000656C62;
      v125._countAndFlagsBits = 0;
      v125._object = (void *)0xE000000000000000;
      v126 = NSLocalizedString(_:tableName:bundle:value:comment:)(v123, v124, (NSBundle)v122, v125, v252);

      swift_bridgeObjectRelease(v243._object);
      v243 = v126;
      v128 = DOCIsInternalBuild(v127);
      if ((_DWORD)v128)
      {
        v129._countAndFlagsBits = 0xD000000000000019;
        v129._object = (void *)0x8000000100523070;
        String.append(_:)(v129);
        v130 = objc_msgSend(v80, "localizedFailureReason");
        if (v130)
        {
          v132 = v130;
          v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
          v135 = v134;

          v241._countAndFlagsBits = 0x3A6572756C696146;
          v241._object = (void *)0xE900000000000020;
          v136._countAndFlagsBits = v133;
          v136._object = v135;
          String.append(_:)(v136);
          swift_bridgeObjectRelease(v135);
          v137._countAndFlagsBits = 10;
          v137._object = (void *)0xE100000000000000;
          String.append(_:)(v137);
          if (!v243._object)
          {
LABEL_117:
            __break(1u);
            goto LABEL_118;
          }
          v138 = v241._object;
          String.append(_:)(v241);
          *(_QWORD *)&v131 = swift_bridgeObjectRelease(v138).n128_u64[0];
        }
        v139 = objc_msgSend(v80, "localizedDescription", v131);
        v140 = static String._unconditionallyBridgeFromObjectiveC(_:)(v139);
        v142 = v141;

        v241._countAndFlagsBits = 0;
        v241._object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(16);
        swift_bridgeObjectRelease(v241._object);
        strcpy((char *)&v241, "Description: ");
        HIWORD(v241._object) = -4864;
        v143._countAndFlagsBits = v140;
        v143._object = v142;
        String.append(_:)(v143);
        swift_bridgeObjectRelease(v142);
        v144._countAndFlagsBits = 10;
        v144._object = (void *)0xE100000000000000;
        String.append(_:)(v144);
        if (!v243._object)
          goto LABEL_113;
        v233 = a1;
        v145 = v241._object;
        String.append(_:)(v241);
        swift_bridgeObjectRelease(v145);
        if (!v243._object)
        {
LABEL_114:
          __break(1u);
          goto LABEL_115;
        }
        v146._countAndFlagsBits = 0x666E492072657355;
        v146._object = (void *)0xEB000000000A3A6FLL;
        String.append(_:)(v146);
        v147 = objc_msgSend(v80, "userInfo");
        v148 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v147, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

        v149 = 0;
        v150 = *(_QWORD *)(v148 + 64);
        v235 = v148 + 64;
        v151 = 1 << *(_BYTE *)(v148 + 32);
        v152 = -1;
        if (v151 < 64)
          v152 = ~(-1 << v151);
        v153 = v152 & v150;
        *(_QWORD *)&v236 = (unint64_t)(v151 + 63) >> 6;
        v232 = v236 - 1;
        if ((v152 & v150) == 0)
          goto LABEL_39;
LABEL_37:
        v160 = __clz(__rbit64(v153));
        v153 &= v153 - 1;
        v161 = v160 | (v149 << 6);
LABEL_38:
        v162 = *(_QWORD *)(v148 + 56);
        v163 = (_QWORD *)(*(_QWORD *)(v148 + 48) + 16 * v161);
        v164 = v163[1];
        *(_QWORD *)&v239 = *v163;
        *((_QWORD *)&v239 + 1) = v164;
        sub_100069BD8(v162 + 32 * v161, (uint64_t)v240);
        swift_bridgeObjectRetain(v164);
        while (1)
        {
          sub_100070EDC((uint64_t)&v239, (uint64_t)&v241, (uint64_t *)&unk_10064CE90);
          v168 = v241._object;
          if (!v241._object)
            break;
          v154 = v241._countAndFlagsBits;
          sub_100079B28(&v242, &v239);
          v238._countAndFlagsBits = 0;
          v238._object = (void *)0xE000000000000000;
          v155._countAndFlagsBits = 39;
          v155._object = (void *)0xE100000000000000;
          String.append(_:)(v155);
          v156._countAndFlagsBits = v154;
          v156._object = v168;
          String.append(_:)(v156);
          swift_bridgeObjectRelease(v168);
          v157._countAndFlagsBits = 0x27203D2027;
          v157._object = (void *)0xE500000000000000;
          String.append(_:)(v157);
          _print_unlocked<A, B>(_:_:)(&v239, &v238, (char *)&type metadata for Any + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
          v158._countAndFlagsBits = 39;
          v158._object = (void *)0xE100000000000000;
          String.append(_:)(v158);
          if (!v243._object)
            goto LABEL_102;
          v159 = v238._object;
          String.append(_:)(v238);
          swift_bridgeObjectRelease(v159);
          sub_100068588(&v239);
          if (v153)
            goto LABEL_37;
LABEL_39:
          v165 = v149 + 1;
          if (__OFADD__(v149, 1))
          {
            __break(1u);
LABEL_101:
            __break(1u);
LABEL_102:
            __break(1u);
LABEL_103:
            __break(1u);
LABEL_104:
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
            goto LABEL_110;
          }
          if (v165 < (uint64_t)v236)
          {
            v166 = *(_QWORD *)(v235 + 8 * v165);
            if (v166)
              goto LABEL_42;
            v167 = v149 + 2;
            ++v149;
            if (v165 + 1 < (uint64_t)v236)
            {
              v166 = *(_QWORD *)(v235 + 8 * v167);
              if (v166)
                goto LABEL_45;
              v149 = v165 + 1;
              if (v165 + 2 < (uint64_t)v236)
              {
                v166 = *(_QWORD *)(v235 + 8 * (v165 + 2));
                if (v166)
                {
                  v165 += 2;
                  goto LABEL_42;
                }
                v167 = v165 + 3;
                v149 = v165 + 2;
                if (v165 + 3 < (uint64_t)v236)
                {
                  v166 = *(_QWORD *)(v235 + 8 * v167);
                  if (!v166)
                  {
                    while (1)
                    {
                      v165 = v167 + 1;
                      if (__OFADD__(v167, 1))
                        goto LABEL_101;
                      if (v165 >= (uint64_t)v236)
                      {
                        v149 = v232;
                        goto LABEL_56;
                      }
                      v166 = *(_QWORD *)(v235 + 8 * v165);
                      ++v167;
                      if (v166)
                        goto LABEL_42;
                    }
                  }
LABEL_45:
                  v165 = v167;
LABEL_42:
                  v153 = (v166 - 1) & v166;
                  v161 = __clz(__rbit64(v166)) + (v165 << 6);
                  v149 = v165;
                  goto LABEL_38;
                }
              }
            }
          }
LABEL_56:
          v153 = 0;
          memset(v240, 0, sizeof(v240));
          v239 = 0u;
        }
        swift_release(v148);
        a1 = v233;
      }
      v169 = (id)_DocumentManagerBundle(v128);
      if (v169)
      {
        v170 = v169;
        v253._countAndFlagsBits = 0xD00000000000002ELL;
        v253._object = (void *)0x8000000100522FE0;
        v171._countAndFlagsBits = 0x6961674120797254;
        v171._object = (void *)0xE90000000000006ELL;
        v172.value._countAndFlagsBits = 0x617A696C61636F4CLL;
        v172.value._object = (void *)0xEB00000000656C62;
        v173._countAndFlagsBits = 0;
        v173._object = (void *)0xE000000000000000;
        v174 = NSLocalizedString(_:tableName:bundle:value:comment:)(v171, v172, (NSBundle)v170, v173, v253);
        countAndFlagsBits = v174._countAndFlagsBits;
        object = v174._object;

        v42 = v234;
LABEL_67:
        v40 = &selRef_viewOptionsRoot;
LABEL_68:
        v188 = objc_msgSend(v42, v40[297], v232);
        v189 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v188, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

        if (*(_QWORD *)(v189 + 16)
          && (v190 = sub_10007EF08(0xD000000000000018, 0x8000000100523010), (v191 & 1) != 0))
        {
          sub_100069BD8(*(_QWORD *)(v189 + 56) + 32 * v190, (uint64_t)&v241);
        }
        else
        {
          v241 = (Swift::String)0;
          v242 = 0u;
        }
        swift_bridgeObjectRelease(v189);
        if (*((_QWORD *)&v242 + 1))
        {
          if ((swift_dynamicCast(&v239, &v241, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
          {
            swift_bridgeObjectRelease(*((_QWORD *)&v237 + 1));
            v237 = v239;
          }
        }
        else
        {
          sub_10007EB54((uint64_t)&v241);
        }
        v192 = objc_msgSend(v42, v40[297]);
        v193 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v192, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

        if (*(_QWORD *)(v193 + 16)
          && (v194 = sub_10007EF08(0xD00000000000001ELL, 0x8000000100523030), (v195 & 1) != 0))
        {
          sub_100069BD8(*(_QWORD *)(v193 + 56) + 32 * v194, (uint64_t)&v241);
        }
        else
        {
          v241 = (Swift::String)0;
          v242 = 0u;
        }
        swift_bridgeObjectRelease(v193);
        if (*((_QWORD *)&v242 + 1))
        {
          if ((swift_dynamicCast(&v239, &v241, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
          {
            v196 = (Swift::String)v239;
            swift_bridgeObjectRelease(v243._object);
            v243 = v196;
          }
        }
        else
        {
          sub_10007EB54((uint64_t)&v241);
        }
        v197 = objc_msgSend(v42, v40[297]);
        v198 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v197, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

        if (*(_QWORD *)(v198 + 16))
        {
          v199 = sub_10007EF08(0xD000000000000019, 0x8000000100523050);
          v10 = v237;
          if ((v200 & 1) != 0)
          {
            sub_100069BD8(*(_QWORD *)(v198 + 56) + 32 * v199, (uint64_t)&v241);
          }
          else
          {
            v241 = (Swift::String)0;
            v242 = 0u;
          }
        }
        else
        {
          v241 = (Swift::String)0;
          v242 = 0u;
          v10 = v237;
        }
        v11 = (void *)*((_QWORD *)&v237 + 1);

        swift_bridgeObjectRelease(v198);
        if (*((_QWORD *)&v242 + 1))
        {
          if ((swift_dynamicCast(&v239, &v241, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
          {
            swift_bridgeObjectRelease(object);
            object = (void *)*((_QWORD *)&v239 + 1);
            countAndFlagsBits = v239;
          }
        }
        else
        {
          sub_10007EB54((uint64_t)&v241);
        }
        v14 = v243;
        goto LABEL_94;
      }
    }
    else
    {
LABEL_110:
      __break(1u);
    }
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
  v233 = a1;
  v48 = (id)_DocumentManagerBundle(v47);
  if (!v48)
    goto LABEL_112;
  v49 = v48;
  v50._countAndFlagsBits = 0xD000000000000017;
  v246._countAndFlagsBits = 0xD000000000000061;
  v246._object = (void *)0x8000000100523190;
  v50._object = (void *)0x8000000100523170;
  v51.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v51.value._object = (void *)0xEB00000000656C62;
  v52._countAndFlagsBits = 0;
  v52._object = (void *)0xE000000000000000;
  v53 = NSLocalizedString(_:tableName:bundle:value:comment:)(v50, v51, (NSBundle)v49, v52, v246);

  v54 = sub_10006922C((uint64_t *)&unk_100644560);
  v55 = swift_allocObject(v54, 72, 7);
  v236 = xmmword_1004D9670;
  *(_OWORD *)(v55 + 16) = xmmword_1004D9670;
  v56 = objc_msgSend(v43, "displayName");
  v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
  v59 = v58;

  *(_QWORD *)(v55 + 56) = &type metadata for String;
  v60 = sub_10006A638();
  *(_QWORD *)(v55 + 64) = v60;
  *(_QWORD *)(v55 + 32) = v57;
  *(_QWORD *)(v55 + 40) = v59;
  *(_QWORD *)&v237 = String.init(format:_:)(v53._countAndFlagsBits, v53._object, v55);
  v62 = v61;
  v63 = objc_msgSend(v45, "identifier", swift_bridgeObjectRelease(v53._object).n128_f64[0]);
  v64 = DOCProviderDomainIDIsExternalDevice(v63);

  *((_QWORD *)&v237 + 1) = v62;
  if (v64)
  {
    v66 = (id)_DocumentManagerBundle(v65);
    if (v66)
    {
      v67 = v66;
      v68._countAndFlagsBits = 0xD00000000000003FLL;
      v247._countAndFlagsBits = 0xD00000000000008CLL;
      v247._object = (void *)0x8000000100523380;
      v68._object = (void *)0x8000000100523450;
      v69.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v69.value._object = (void *)0xEB00000000656C62;
      v70._countAndFlagsBits = 0;
      v70._object = (void *)0xE000000000000000;
      v71 = NSLocalizedString(_:tableName:bundle:value:comment:)(v68, v69, (NSBundle)v67, v70, v247);

      v243 = v71;
      v73 = (id)_DocumentManagerBundle(v72);
      a1 = v233;
      if (v73)
      {
        v74 = v73;
        v75 = 0xD000000000000036;
        v231 = 0x8000000100523490;
        v76 = 0x6B636F6C6E55;
        v77 = 0xE600000000000000;
LABEL_65:
        v185.value._countAndFlagsBits = 0x617A696C61636F4CLL;
        v185.value._object = (void *)0xEB00000000656C62;
        v186._countAndFlagsBits = 0;
        v186._object = (void *)0xE000000000000000;
        v187 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v76, v185, (NSBundle)v74, v186, *(Swift::String *)&v75);
        countAndFlagsBits = v187._countAndFlagsBits;
        object = v187._object;

LABEL_66:
        v42 = v46;
        goto LABEL_67;
      }
      goto LABEL_116;
    }
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
  v175 = objc_msgSend((id)objc_opt_self(FPUIManager), "authenticationActionForProviderDomain:", v45);

  if (v175)
  {
    v177 = (id)_DocumentManagerBundle(v176);
    a1 = v233;
    if (v177)
    {
      v178 = v177;
      v179._countAndFlagsBits = 0xD00000000000003BLL;
      v254._countAndFlagsBits = 0xD00000000000008CLL;
      v254._object = (void *)0x8000000100523380;
      v179._object = (void *)0x8000000100523340;
      v180.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v180.value._object = (void *)0xEB00000000656C62;
      v181._countAndFlagsBits = 0;
      v181._object = (void *)0xE000000000000000;
      v182 = NSLocalizedString(_:tableName:bundle:value:comment:)(v179, v180, (NSBundle)v178, v181, v254);

      v243 = v182;
      v184 = (id)_DocumentManagerBundle(v183);
      if (v184)
      {
        v74 = v184;
        v75 = 0xD00000000000003CLL;
        v231 = 0x8000000100523410;
        v76 = 0x69746E6568747541;
        v77 = 0xEC00000065746163;
        goto LABEL_65;
      }
      goto LABEL_119;
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  sub_1002A8B68();
  v202 = v201;
  swift_bridgeObjectRelease(v201);
  a1 = v233;
  if (!v202)
  {

    countAndFlagsBits = 0;
    object = (void *)0xE000000000000000;
    goto LABEL_66;
  }
  v204 = (id)_DocumentManagerBundle(v203);
  if (!v204)
    goto LABEL_120;
  v205 = v204;
  v206._countAndFlagsBits = 0xD000000000000049;
  v255._countAndFlagsBits = 0xD000000000000095;
  v255._object = (void *)0x8000000100523250;
  v206._object = (void *)0x8000000100523200;
  v207.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v207.value._object = (void *)0xEB00000000656C62;
  v208._countAndFlagsBits = 0;
  v208._object = (void *)0xE000000000000000;
  v209 = NSLocalizedString(_:tableName:bundle:value:comment:)(v206, v207, (NSBundle)v205, v208, v255);
  v235 = v209._countAndFlagsBits;

  v234 = (void *)v54;
  v210 = swift_allocObject(v54, 72, 7);
  *(_OWORD *)(v210 + 16) = v236;
  v211 = objc_msgSend(v43, "displayName");
  v212 = static String._unconditionallyBridgeFromObjectiveC(_:)(v211);
  v214 = v213;

  *(_QWORD *)(v210 + 56) = &type metadata for String;
  *(_QWORD *)(v210 + 64) = v60;
  *(_QWORD *)(v210 + 32) = v212;
  *(_QWORD *)(v210 + 40) = v214;
  v215 = String.init(format:_:)(v235, v209._object, v210);
  v217 = v216;
  swift_bridgeObjectRelease(v209._object);
  v243._countAndFlagsBits = v215;
  v243._object = v217;
  v219 = (id)_DocumentManagerBundle(v218);
  if (v219)
  {
    v220 = v219;
    v256._countAndFlagsBits = 0xD000000000000040;
    v256._object = (void *)0x80000001005232F0;
    v221._countAndFlagsBits = 0x4025206E65704FLL;
    v221._object = (void *)0xE700000000000000;
    v222.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v222.value._object = (void *)0xEB00000000656C62;
    v223._countAndFlagsBits = 0;
    v223._object = (void *)0xE000000000000000;
    v224 = NSLocalizedString(_:tableName:bundle:value:comment:)(v221, v222, (NSBundle)v220, v223, v256);

    v225 = swift_allocObject(v234, 72, 7);
    *(_OWORD *)(v225 + 16) = v236;
    v226 = objc_msgSend(v43, "displayName");
    v227 = static String._unconditionallyBridgeFromObjectiveC(_:)(v226);
    v229 = v228;

    *(_QWORD *)(v225 + 56) = &type metadata for String;
    *(_QWORD *)(v225 + 64) = v60;
    *(_QWORD *)(v225 + 32) = v227;
    *(_QWORD *)(v225 + 40) = v229;
    countAndFlagsBits = String.init(format:_:)(v224._countAndFlagsBits, v224._object, v225);
    object = v230;
    swift_bridgeObjectRelease(v224._object);

    a1 = v233;
    goto LABEL_66;
  }
LABEL_121:
  __break(1u);
}

void sub_1002BAF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    sub_1002BAF5C();

  }
}

void sub_1002BAF5C()
{
  char *v0;
  char *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  int v7;
  id v8;
  NSString v9;
  unsigned int v10;
  void *v11;
  id v12;
  id v13;
  int v14;
  char *v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  NSString v28;
  id v29;
  id v30;
  _QWORD v31[4];

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v30 = (id)_convertErrorToNSError(_:)(*(_QWORD *)&v0[OBJC_IVAR____TtC5Files22DOCErrorViewController_error]);
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files22DOCErrorViewController_source];
  v4 = OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain;
  v5 = *(void **)(v3 + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain);
  if (!v5)
  {
LABEL_6:
    if ((NSError.isProviderDomainNotAuthenticated.getter() & 1) != 0)
    {
      v11 = *(void **)(v3 + v4);
      if (v11)
      {
        v12 = v11;
        v13 = objc_msgSend(v12, "identifier");
        v14 = DOCProviderDomainIDIsExternalDevice(v13);

        if (v14)
        {
          sub_1002BB2E8(v12);

          return;
        }

      }
      v22 = *(void **)&v1[OBJC_IVAR____TtC5Files22DOCErrorViewController_authenticationAction];
      if (v22)
      {
        v29 = v22;
        v23 = v30;
        if (objc_msgSend(v29, "displayInline"))
          sub_1002BB5FC(v1, (uint64_t)v23, v29);
        else
          sub_1002BB9E4(v1, (uint64_t)v23, v29);

        goto LABEL_22;
      }
      sub_1002A8B68();
      if (v24)
      {
        v25 = v24;
        v26 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
        if (!v26)
        {
          __break(1u);
          return;
        }
        v27 = v26;
        v28 = String._bridgeToObjectiveC()();
        objc_msgSend(v27, "openApplicationWithBundleID:", v28, swift_bridgeObjectRelease(v25).n128_f64[0]);

      }
    }
    else
    {
      v15 = &v1[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting];
      Strong = swift_unknownObjectWeakLoadStrong(&v1[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting]);
      if (Strong)
      {
        v17 = Strong;
        v18 = *((_QWORD *)v15 + 1);
        v19 = swift_getObjectType(Strong);
        v31[3] = ObjectType;
        v31[0] = v1;
        v20 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 8);
        v21 = v1;
        v20(v31, 0, 4, 1, v19, v18);
        swift_unknownObjectRelease(v17);

        sub_100068588(v31);
        return;
      }
    }

    return;
  }
  v29 = v5;
  v6 = objc_msgSend(v29, "identifier");
  v7 = DOCProviderDomainIDIsExternalDevice(v6);

  if (!v7
    || (v8 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults"),
        v9 = String._bridgeToObjectiveC()(),
        v10 = objc_msgSend(v8, "BOOLForKey:", v9),
        v8,
        v9,
        !v10))
  {

    goto LABEL_6;
  }
  sub_1002BB2E8(v29);

LABEL_22:
}

uint64_t sub_1002BB2AC()
{
  uint64_t v0;
  void *v1;
  char v2;

  v1 = (void *)_convertErrorToNSError(_:)(*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files22DOCErrorViewController_error));
  v2 = NSError.isProviderDomainNotAuthenticated.getter();

  return v2 & 1;
}

void sub_1002BB2E8(void *a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  id v10;
  void *v11;
  Swift::String v12;
  Swift::String_optional v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  Swift::String v28;
  Swift::String_optional v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  __n128 v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;

  v3 = (id)_DocumentManagerBundle(a1);
  if (!v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  v4 = v3;
  v36._countAndFlagsBits = 0xD000000000000044;
  v36._object = (void *)0x8000000100522DA0;
  v5._object = (void *)0x8000000100522D80;
  v5._countAndFlagsBits = 0xD000000000000015;
  v6.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v6.value._object = (void *)0xEB00000000656C62;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v36);

  v10 = (id)_DocumentManagerBundle(v9);
  if (!v10)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = v10;
  v37._countAndFlagsBits = 0xD000000000000046;
  v37._object = (void *)0x8000000100522E20;
  v12._object = (void *)0x8000000100522DF0;
  v12._countAndFlagsBits = 0x100000000000002CLL;
  v13.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v13.value._object = (void *)0xEB00000000656C62;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, (NSBundle)v11, v14, v37);

  v16 = sub_10006922C((uint64_t *)&unk_100644560);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1004D9670;
  v18 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                              + OBJC_IVAR____TtC5Files22DOCErrorViewController_source), "displayName"));
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10006A638();
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v21;
  v22 = String.init(format:_:)(v15._countAndFlagsBits, v15._object, v17);
  v24 = v23;
  swift_bridgeObjectRelease(v15._object);
  v26 = (id)_DocumentManagerBundle(v25);
  if (v26)
  {
    v27 = v26;
    sub_10004F2F0(0, (unint64_t *)&unk_10064CE70, UIAlertController_ptr);
    v38._countAndFlagsBits = 0xD000000000000045;
    v38._object = (void *)0x8000000100522E70;
    v28._countAndFlagsBits = 0x6B636F6C6E55;
    v28._object = (void *)0xE600000000000000;
    v29.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v29.value._object = (void *)0xEB00000000656C62;
    v30._countAndFlagsBits = 0;
    v30._object = (void *)0xE000000000000000;
    v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, (NSBundle)v27, v30, v38);

    v32 = swift_allocObject(&unk_1005D9BF8, 24, 7);
    swift_unknownObjectWeakInit(v32 + 16);
    v33 = swift_allocObject(&unk_1005D9C20, 32, 7);
    *(_QWORD *)(v33 + 16) = a1;
    *(_QWORD *)(v33 + 24) = v32;
    v34 = a1;
    v35 = swift_retain();
    static UIAlertController.doc_presentPassphraseInputAlert(title:message:actionTitle:alertPresenting:completionHandler:)(v8._countAndFlagsBits, v8._object, v22, v24, v31._countAndFlagsBits, v31._object, v1, sub_1002BCE68, v35, v33);
    swift_bridgeObjectRelease(v8._object);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v31._object);
    swift_release(v32);
    swift_release(v33);
    return;
  }
LABEL_7:
  __break(1u);
}

void sub_1002BB5FC(void *a1, uint64_t a2, void *a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  id v43;

  v6 = objc_msgSend(a1, "childViewControllers");
  v7 = sub_10004F2F0(0, (unint64_t *)&qword_1006434D0, UIViewController_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v42 = v8;
    else
      v42 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v9 = _CocoaArrayWrapper.endIndex.getter(v42);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v8);
  if (!v9)
  {
    v10 = (void *)objc_opt_self(FPUIActionViewController);
    v11 = (void *)_convertErrorToNSError(_:)(a2);
    v12 = objc_msgSend(a3, "uiActionProviderIdentifier");
    v13 = objc_msgSend(a3, "fpProviderDomain");
    v14 = objc_msgSend(v13, "identifier");

    v43 = objc_msgSend(v10, "actionControllerForInlineError:providerIdentifier:providerDomainIdentifier:", v11, v12, v14);
    v15 = objc_msgSend(v43, "view");
    if (v15)
    {
      v16 = v15;
      objc_msgSend(v15, "setOpaque:", 1);

      v17 = objc_msgSend(v43, "view");
      if (v17)
      {
        v18 = v17;
        v19 = objc_msgSend(a1, "view");
        if (v19)
        {
          v20 = v19;
          objc_msgSend(v19, "bounds");
          v22 = v21;
          v24 = v23;
          v26 = v25;
          v28 = v27;

          objc_msgSend(v18, "setFrame:", v22, v24, v26, v28);
          v29 = objc_msgSend(v43, "view");
          if (v29)
          {
            v30 = v29;
            v31 = objc_msgSend(a1, "effectiveAppearance");
            if (v31)
            {
              v32 = v31;
              v33 = objc_msgSend(v31, "backgroundColor");

            }
            else
            {
              v33 = 0;
            }
            objc_msgSend(v30, "setBackgroundColor:", v33);

            v34 = objc_msgSend(v43, "view");
            if (v34)
            {
              v35 = v34;
              objc_msgSend(v34, "setAutoresizingMask:", 18);

              objc_msgSend(v43, "setDelegate:", a1);
              v36 = objc_msgSend(v43, "view");
              if (v36)
              {
                v37 = v36;
                v38 = objc_msgSend(a1, "view");
                if (v38)
                {
                  v39 = v38;
                  v40 = objc_msgSend(v38, "tintColor");

                  if (v40)
                  {
                    v41 = objc_msgSend((id)objc_opt_self(UIColor), "_doc_safeTintColor:", v40);

                    objc_msgSend(v37, "setTintColor:", v41);
                    objc_msgSend(a1, "doc_addChildViewController:addSubviewBlock:", v43, 0);

                    return;
                  }
                  goto LABEL_27;
                }
LABEL_26:
                __break(1u);
LABEL_27:
                __break(1u);
                return;
              }
LABEL_25:
              __break(1u);
              goto LABEL_26;
            }
LABEL_24:
            __break(1u);
            goto LABEL_25;
          }
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
}

void sub_1002BB9E4(void *a1, uint64_t a2, void *a3)
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;

  v6 = objc_msgSend(a1, "presentedViewController");

  if (!v6)
  {
    v7 = (void *)objc_opt_self(FPUIActionViewController);
    v8 = (void *)_convertErrorToNSError(_:)(a2);
    v9 = objc_msgSend(a3, "uiActionProviderIdentifier");
    v10 = objc_msgSend(a3, "fpProviderDomain");
    v11 = objc_msgSend(v10, "identifier");

    v18 = objc_msgSend(v7, "actionControllerForInlineError:providerIdentifier:providerDomainIdentifier:", v8, v9, v11);
    objc_msgSend(v18, "setDelegate:", a1);
    v12 = objc_msgSend(v18, "view");
    if (v12)
    {
      v13 = v12;
      v14 = objc_msgSend(a1, "view");
      if (v14)
      {
        v15 = v14;
        v16 = objc_msgSend(v14, "tintColor");

        if (v16)
        {
          v17 = objc_msgSend((id)objc_opt_self(UIColor), "_doc_safeTintColor:", v16);

          objc_msgSend(v13, "setTintColor:", v17);
          objc_msgSend(a1, "presentViewController:animated:completion:", v18, 1, 0);

          return;
        }
        goto LABEL_8;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_8:
    __break(1u);
  }
}

void sub_1002BBC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  NSString v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[5];
  uint64_t v12;

  if (a2)
  {
    v7 = (void *)objc_opt_self(LiveFSDiskUnlock);
    v8 = String._bridgeToObjectiveC()();
    v11[4] = sub_1002BCE70;
    v12 = a5;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_10015936C;
    v11[3] = &unk_1005D9C38;
    v9 = _Block_copy(v11);
    v10 = v12;
    swift_retain();
    objc_msgSend(v7, "unlockDomain:withPassword:saveToKeychain:completionHandler:", a4, v8, 1, v9, swift_release(v10).n128_f64[0]);
    _Block_release(v9);

  }
}

uint64_t sub_1002BBD14(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  aBlock[4] = sub_1002BCE78;
  v22 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = &unk_1005D9C60;
  v12 = _Block_copy(aBlock);
  v13 = v22;
  swift_retain();
  swift_release(v13);
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_10006922C((uint64_t *)&unk_100647540);
  v17 = sub_1000791AC();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v3, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_1002BBEFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  void (*v9)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  id v10;
  _QWORD v11[4];
  _BYTE v12[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = Strong + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting;
    v5 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(v4 + 8);
      ObjectType = swift_getObjectType(v5);
      v11[3] = type metadata accessor for DOCErrorViewController();
      v11[0] = v3;
      v9 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8);
      v10 = v3;
      v9(v11, 0, 4, 1, ObjectType, v7);
      swift_unknownObjectRelease(v6);

      sub_100068588(v11);
    }
    else
    {

    }
  }
}

void sub_1002BBFD0()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files22DOCErrorViewController_error));

}

uint64_t type metadata accessor for DOCErrorViewController()
{
  return objc_opt_self(_TtC5Files22DOCErrorViewController);
}

_QWORD *sub_1002BC174(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t Strong;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v50;
  _QWORD *v51;

  v2 = a1;
  v51 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_61;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      v44 = v2;
      v4 = 0;
      v47 = v2 & 0xFFFFFFFFFFFFFF8;
      v48 = v2 & 0xC000000000000001;
      v45 = v3;
      v46 = v2 + 32;
      while (1)
      {
        if (v48)
        {
          v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v44);
        }
        else
        {
          if (v4 >= *(_QWORD *)(v47 + 16))
            goto LABEL_58;
          v6 = *(id *)(v46 + 8 * v4);
        }
        v7 = v6;
        v8 = __OFADD__(v4++, 1);
        if (v8)
        {
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
        v9 = *(_QWORD *)(a2
                       + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_additionalLeadingNavigationBarButtonItems);
        v50 = *(_QWORD *)(a2
                        + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_additionalTrailingNavigationBarButtonItems);
        swift_bridgeObjectRetain(v50);
        v10 = swift_bridgeObjectRetain(v9);
        sub_1000887E8(v10);
        v11 = v50;
        if ((unint64_t)v50 >> 62)
        {
          if (v50 < 0)
            v41 = v50;
          else
            v41 = v50 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v50);
          v12 = _CocoaArrayWrapper.endIndex.getter(v41);
          if (!v12)
          {
LABEL_27:
            swift_bridgeObjectRelease_n(v50, 2);
            v25 = a2 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_overlayDelegate;
            Strong = swift_unknownObjectWeakLoadStrong(a2 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_overlayDelegate);
            if (Strong)
            {
              v27 = Strong;
              v28 = *(_QWORD *)(v25 + 8);
              ObjectType = swift_getObjectType(Strong);
              v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 48))(ObjectType, v28);
              swift_unknownObjectRelease(v27);
              if (!((unint64_t)v11 >> 62))
              {
LABEL_29:
                v2 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
                v30 = v7;
                swift_bridgeObjectRetain(v11);
                if (v2)
                  goto LABEL_30;
LABEL_44:

                swift_bridgeObjectRelease_n(v11, 2);
                v37 = type metadata accessor for DOCProgressCollectionIndicatorButtonItem(0);
                v38 = objc_msgSend(v7, "isKindOfClass:", swift_getObjCClassFromMetadata(v37));
                v5 = v45;
                if ((_DWORD)v38)
                {

                }
                else
                {
                  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v38);
                  v39 = v51[2];
                  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v39);
                  v40 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v7);
                  v2 = (uint64_t)&v51;
                  specialized ContiguousArray._endMutation()(v40);
                }
                goto LABEL_6;
              }
            }
            else
            {
              v11 = (uint64_t)_swiftEmptyArrayStorage;
              if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
                goto LABEL_29;
            }
            if (v11 < 0)
              v35 = v11;
            else
              v35 = v11 & 0xFFFFFFFFFFFFFF8;
            v36 = v7;
            swift_bridgeObjectRetain(v11);
            v2 = _CocoaArrayWrapper.endIndex.getter(v35);
            if (v2)
            {
LABEL_30:
              v31 = 0;
              while (1)
              {
                if ((v11 & 0xC000000000000001) != 0)
                {
                  v32 = specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v11);
                  v8 = __OFADD__(v31++, 1);
                  if (v8)
                  {
                    __break(1u);
LABEL_56:
                    __break(1u);
LABEL_57:
                    __break(1u);
LABEL_58:
                    __break(1u);
                    goto LABEL_59;
                  }
                  v33 = (void *)v32;
                  swift_unknownObjectRelease(v32);
                  if (v33 == v7)
                    goto LABEL_4;
                }
                else
                {
                  if (__OFADD__(v31, 1))
                    goto LABEL_56;
                  v34 = *(void **)(v11 + 32 + 8 * v31++);
                  if (v34 == v7)
                  {
LABEL_4:

                    goto LABEL_5;
                  }
                }
                if (v31 == v2)
                  goto LABEL_44;
              }
            }
            goto LABEL_44;
          }
        }
        else
        {
          v12 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v50);
          if (!v12)
            goto LABEL_27;
        }
        v13 = (v50 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v50)
            : *(id *)(v50 + 32);
        v14 = v13;
        v2 = sub_10004F2F0(0, (unint64_t *)&qword_1006475F0, UIBarButtonItem_ptr);
        v15 = static NSObject.== infix(_:_:)(v14, v7);

        if ((v15 & 1) == 0)
          break;
LABEL_5:

        swift_bridgeObjectRelease_n(v11, 2);
        v5 = v45;
LABEL_6:
        if (v4 == v5)
          return v51;
      }
      if (v12 == 1)
        goto LABEL_27;
      if ((v50 & 0xC000000000000001) != 0)
        break;
      v21 = 5;
      while (1)
      {
        v22 = v21 - 3;
        if (__OFADD__(v21 - 4, 1))
          break;
        v23 = *(id *)(v50 + 8 * v21);
        v24 = static NSObject.== infix(_:_:)(v23, v7);

        if ((v24 & 1) != 0)
          goto LABEL_5;
        ++v21;
        if (v22 == v12)
          goto LABEL_27;
      }
LABEL_60:
      __break(1u);
LABEL_61:
      if (v2 < 0)
        v43 = v2;
      else
        v43 = v2 & 0xFFFFFFFFFFFFFF8;
      v3 = _CocoaArrayWrapper.endIndex.getter(v43);
      if (!v3)
        return _swiftEmptyArrayStorage;
    }
    v16 = 1;
    while (1)
    {
      v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v50);
      v18 = v16 + 1;
      if (__OFADD__(v16, 1))
        goto LABEL_57;
      v19 = v17;
      v20 = static NSObject.== infix(_:_:)(v17, v7);
      swift_unknownObjectRelease(v19);
      if ((v20 & 1) != 0)
        goto LABEL_5;
      ++v16;
      if (v18 == v12)
        goto LABEL_27;
    }
  }
  return _swiftEmptyArrayStorage;
}

void sub_1002BC590()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_containerNavigationItem);
  if (v1)
  {
    v2 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_additionalLeadingNavigationBarButtonItems);
    swift_bridgeObjectRetain(v2);
    v3 = v1;
    sub_1001F7950(v2, 0, 0, 1);
    swift_bridgeObjectRelease(v2);
    sub_1002B9590(0);
    v4 = *(void **)(v0 + OBJC_IVAR____TtC5Files22DOCErrorViewController_location);
    if (!v4 || (v5 = objc_msgSend(v4, "displayName")) == 0)
      v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                                 + OBJC_IVAR____TtC5Files22DOCErrorViewController_source), "displayName"));
    static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v7 = v6;

    v8 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setTitle:", v8, swift_bridgeObjectRelease(v7).n128_f64[0]);

  }
}

id sub_1002BC6B8(void *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, char a7)
{
  _BYTE *v7;
  uint64_t v9;
  id v13;
  char *v14;
  char *v15;
  void *v16;
  uint64_t v17;
  id v18;

  v9 = a4;
  *(_QWORD *)&v7[OBJC_IVAR____TtC5Files22DOCErrorViewController_source] = a5;
  *(_QWORD *)&v7[OBJC_IVAR____TtC5Files22DOCErrorViewController_location] = a6;
  *(_QWORD *)&v7[OBJC_IVAR____TtC5Files22DOCErrorViewController_error] = a4;
  v7[OBJC_IVAR____TtC5Files22DOCErrorViewController_autoPresentAuthenticationUI] = a7;
  v13 = a6;
  v14 = v7;
  v15 = a5;
  swift_errorRetain(v9);
  v16 = (void *)_convertErrorToNSError(_:)(v9);
  LOBYTE(v9) = NSError.isProviderDomainNotAuthenticated.getter();

  if ((v9 & 1) != 0 && (v17 = *(_QWORD *)&v15[OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain]) != 0)
    v18 = objc_msgSend((id)objc_opt_self(FPUIManager), "authenticationActionForProviderDomain:", v17);
  else
    v18 = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC5Files22DOCErrorViewController_authenticationAction] = v18;

  return sub_10004F040(a1, a2, a3);
}

void sub_1002BC7C8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  __n128 v5;
  void *v6;
  id v7;
  id v8;
  NSString v9;
  NSString v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  Swift::String v17[3];
  _OWORD v18[4];
  __int128 v19;
  __int128 v20;
  _BYTE v21[16];
  _QWORD v22[2];

  v1 = v0;
  sub_1002B9A40(v17);
  sub_100070EDC((uint64_t)v17, (uint64_t)v18, (uint64_t *)&unk_10064CE60);
  if (*((_QWORD *)&v18[0] + 1))
  {
    v18[3] = v18[0];
    v19 = v18[1];
    v20 = v18[2];
    v2 = *((_QWORD *)&v18[0] + 1);
    sub_100070EDC((uint64_t)&v19, (uint64_t)v21, &qword_100648C80);
    sub_10004F2F0(0, (unint64_t *)&qword_1006424C0, UIAction_ptr);
    v3 = v20;
    v4 = swift_allocObject(&unk_1005D9BF8, 24, 7);
    swift_unknownObjectWeakInit(v4 + 16);
    v6 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v3, *((_QWORD *)&v3 + 1), 0, 0, 0, 0, 0, 0, v5, 0, 0, 0, sub_1002BCE34, v4);
    v7 = objc_msgSend((id)objc_opt_self(DOCContentUnavailableConfiguration), "emptyProminentConfiguration");
    v8 = v6;
    v9 = String._bridgeToObjectiveC()();
    objc_msgSend(v7, "setText:", v9);

    sub_100070EDC((uint64_t)v21, (uint64_t)v22, &qword_100648C80);
    if (v22[1])
    {
      v10 = String._bridgeToObjectiveC()();
      objc_msgSend(v7, "setSecondaryText:", v10);

    }
    v11 = v8;
    v12 = objc_msgSend(v7, "buttonProperties");
    objc_msgSend(v12, "configurePlain");

    v13 = objc_msgSend(v7, "buttonProperties");
    objc_msgSend(v13, "setPrimaryAction:", v11);

    v14 = v7;
    swift_bridgeObjectRelease(v2);
    sub_1001D0A08((uint64_t)v21);

    v15 = objc_msgSend(v1, "docContentUnavailableConfigurationState");
    v16 = objc_msgSend(v14, "updatedConfigurationForState:", v15);

    objc_msgSend(v1, "doc_setContentUnavailableConfiguration:", v16);
  }
  else
  {
    objc_msgSend(v0, "doc_setContentUnavailableConfiguration:", 0);
  }
}

void sub_1002BCA6C()
{
  char *v0;
  char *v1;
  uint64_t ObjectType;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  id v7;
  id v8;
  char v9;
  char *v10;
  uint64_t Strong;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t);
  char *v16;
  _QWORD v17[4];

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files22DOCErrorViewController_error];
  v4 = (void *)_convertErrorToNSError(_:)(v3);
  v5 = NSError.isProviderDomainNotAuthenticated.getter();

  if ((v5 & 1) != 0)
  {
    v6 = *(void **)(*(_QWORD *)&v1[OBJC_IVAR____TtC5Files22DOCErrorViewController_source]
                  + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain);
    if (!v6
      || (v7 = v6,
          v8 = objc_msgSend(v7, "identifier"),
          v9 = DOCProviderDomainIDIsWebDAV(v8),
          v8,
          v7,
          (v9 & 1) == 0))
    {
      v10 = &v1[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting];
      Strong = swift_unknownObjectWeakLoadStrong(&v1[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting]);
      if (Strong)
      {
        v12 = Strong;
        v13 = *((_QWORD *)v10 + 1);
        v14 = swift_getObjectType(Strong);
        v17[3] = ObjectType;
        v17[0] = v1;
        v15 = *(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v13 + 8);
        v16 = v1;
        v15(v17, v3, 0, 1, v14, v13);
        swift_unknownObjectRelease(v12);
        sub_100068588(v17);
      }
    }
  }
}

uint64_t sub_1002BCB90(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v28;
  _QWORD v29[4];

  v2 = v1;
  ObjectType = swift_getObjectType(v2);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v10 = swift_errorRetain(a1);
    v11 = *(id *)DOCLog.UI.unsafeMutableAddressor(v10);
    v12 = static os_log_type_t.error.getter(v11);
    v13 = sub_10006922C((uint64_t *)&unk_100644560);
    v14 = swift_allocObject(v13, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_1004D9670;
    v15 = _convertErrorToNSError(_:)(a1);
    *(_QWORD *)(v14 + 56) = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
    *(_QWORD *)(v14 + 64) = sub_100151F4C();
    *(_QWORD *)(v14 + 32) = v15;
    os_log(_:dso:log:type:_:)("Error trying to perform the action. Error: %@", 45, 2, &_mh_execute_header, v11, v12, v14);

    swift_bridgeObjectRelease(v14);
    return swift_errorRelease(a1);
  }
  else
  {
    v17 = Logger.UI.unsafeMutableAddressor(v7);
    v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v17, v5);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Action fisnished successfully. Reloading the collection from provider", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    v22 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    (*(void (**)(uint64_t))((swift_isaMask & **(_QWORD **)&v2[OBJC_IVAR____TtC5Files22DOCErrorViewController_source])
                                    + 0x290))(v22);
    v23 = &v2[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting];
    result = swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting]);
    if (result)
    {
      v24 = result;
      v25 = *((_QWORD *)v23 + 1);
      v26 = swift_getObjectType(result);
      v29[3] = ObjectType;
      v29[0] = v2;
      v27 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8);
      v28 = v2;
      v27(v29, 0, 4, 1, v26, v25);
      swift_unknownObjectRelease(v24);
      return sub_100068588(v29);
    }
  }
  return result;
}

uint64_t sub_1002BCE10()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1002BCE34(uint64_t a1)
{
  uint64_t v1;

  sub_1002BAF0C(a1, v1);
}

uint64_t sub_1002BCE3C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1002BCE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1002BBC2C(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_1002BCE70(uint64_t a1)
{
  uint64_t v1;

  return sub_1002BBD14(a1, v1);
}

void sub_1002BCE78()
{
  uint64_t v0;

  sub_1002BBEFC(v0);
}

uint64_t destroy for DOCErrorViewController.ContentUnavailableInfo(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for DOCErrorViewController.ContentUnavailableInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for DOCErrorViewController.ContentUnavailableInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for DOCFastLabel.AttachmentRenderer(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for DOCErrorViewController.ContentUnavailableInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for DOCErrorViewController.ContentUnavailableInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCErrorViewController.ContentUnavailableInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCErrorViewController.ContentUnavailableInfo()
{
  return &type metadata for DOCErrorViewController.ContentUnavailableInfo;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DOCItemCollectionViewController.triggerScan()()
{
  sub_1002BD8B4(&OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration);
}

unint64_t sub_1002BD0C0()
{
  unint64_t result;

  result = qword_10064CEB0;
  if (!qword_10064CEB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScanningError, &type metadata for ScanningError);
    atomic_store(result, (unint64_t *)&qword_10064CEB0);
  }
  return result;
}

uint64_t ScanningError.rawValue.getter(char a1)
{
  if (!a1)
    return 0x7553746F4E707061;
  if (a1 == 1)
    return 0xD000000000000012;
  return 0xD00000000000001ALL;
}

uint64_t sub_1002BD170(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10039E858(*a1, *a2);
}

Swift::Int sub_1002BD17C()
{
  char *v0;

  return sub_1000E2D44(*v0);
}

uint64_t sub_1002BD184(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0x800000010050BB00;
  v3 = 0xD000000000000012;
  if (*v1 != 1)
  {
    v3 = 0xD00000000000001ALL;
    v2 = 0x800000010050BB20;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x7553746F4E707061;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xEF646574726F7070;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1002BD210(uint64_t a1)
{
  char *v1;

  return sub_1000E354C(a1, *v1);
}

unint64_t sub_1002BD218@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s5Files13ScanningErrorO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1002BD244(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEF646574726F7070;
  v4 = 0x800000010050BB00;
  v5 = 0xD000000000000012;
  if (v2 != 1)
  {
    v5 = 0xD00000000000001ALL;
    v4 = 0x800000010050BB20;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x7553746F4E707061;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

Swift::Void __swiftcall DOCSidebarViewController.documentCameraViewController(_:didFinishWith:)(VNDocumentCameraViewController _, VNDocumentCameraScan didFinishWith)
{
  objc_class *v2;
  VNDocumentCameraViewController *v5;
  objc_class *v6;
  objc_class *v7;

  v5 = (VNDocumentCameraViewController *)swift_allocObject(&unk_1005D9D40, 32, 7);
  v5[2].super.super.super.isa = v2;
  v5[3].super.super.super.isa = _.super.super.super.isa;
  v6 = v2;
  v7 = _.super.super.super.isa;
  sub_100469270(didFinishWith.super.isa, (uint64_t)sub_10014E0D4, (uint64_t)v5);
  swift_release(v5);
}

id sub_1002BD410()
{
  void *v0;
  char *v1;
  void *v2;
  void **v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  _BYTE v10[24];
  objc_super v11;

  v1 = (char *)objc_msgSend(v0, "effectiveBrowserViewController");
  if (v1)
  {
    v2 = v1;
    v3 = (void **)&v1[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
    swift_beginAccess(&v1[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v10, 0, 0);
    v4 = *v3;
    if (*v3)
    {
      v5 = type metadata accessor for DOCItemCollectionViewController(0);
      v6 = (void *)swift_dynamicCastClass(v4, v5);
      if (v6)
        v7 = v4;
    }
    else
    {
      v6 = 0;
    }

  }
  else
  {
    v6 = 0;
  }
  v8 = objc_msgSend(v6, "doc_documentScannerReceivingTarget");

  if (!v8)
  {
    v11.receiver = v0;
    v11.super_class = (Class)DOCFullDocumentManagerViewController;
    return objc_msgSendSuper2(&v11, "doc_documentScannerReceivingTarget");
  }
  return v8;
}

Swift::Void __swiftcall DOCFullDocumentManagerViewController.documentCameraViewControllerDidCancel(_:)(VNDocumentCameraViewController a1)
{
  void *v1;
  char *v3;
  void *v4;
  void **v5;
  void *v6;
  uint64_t v7;
  id v8;
  _BYTE v9[24];

  v3 = (char *)objc_msgSend(v1, "effectiveBrowserViewController");
  if (v3)
  {
    v4 = v3;
    v5 = (void **)&v3[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
    swift_beginAccess(&v3[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v9, 0, 0);
    v6 = *v5;
    if (v6)
    {
      v7 = type metadata accessor for DOCItemCollectionViewController(0);
      if (swift_dynamicCastClass(v6, v7))
      {
        v8 = v6;

        -[objc_class dismissViewControllerAnimated:completion:](a1.super.super.super.isa, "dismissViewControllerAnimated:completion:", 1, 0);
        v4 = v8;
      }
    }

  }
}

Swift::Void __swiftcall DOCFullDocumentManagerViewController.documentCameraViewController(_:didFinishWith:)(VNDocumentCameraViewController _, VNDocumentCameraScan didFinishWith)
{
  void *v2;
  void *v3;
  char *v6;
  void *v7;
  void **v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  objc_class *v12;
  id v13;
  VNDocumentCameraViewController *v14;
  id v15;
  objc_class *v16;
  _BYTE v17[24];

  v3 = v2;
  v6 = (char *)objc_msgSend(v3, "effectiveBrowserViewController");
  if (v6)
  {
    v7 = v6;
    v8 = (void **)&v6[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
    swift_beginAccess(&v6[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v17, 0, 0);
    v9 = *v8;
    if (*v8
      && (v10 = type metadata accessor for DOCItemCollectionViewController(0),
          (v11 = swift_dynamicCastClass(v9, v10)) != 0))
    {
      v12 = (objc_class *)v11;
      v13 = v9;

      v14 = (VNDocumentCameraViewController *)swift_allocObject(&unk_1005D9D68, 32, 7);
      v14[2].super.super.super.isa = v12;
      v14[3].super.super.super.isa = _.super.super.super.isa;
      v15 = v13;
      v16 = _.super.super.super.isa;
      sub_100469270(didFinishWith.super.isa, (uint64_t)sub_100152054, (uint64_t)v14);

      swift_release(v14);
    }
    else
    {

    }
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DOCFullDocumentManagerViewController.triggerScan()()
{
  void *v0;
  id v1;
  unsigned int v2;
  id v3;
  unsigned __int8 v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;

  v1 = objc_msgSend(v0, "configuration");
  v2 = objc_msgSend(v1, "isFilesApp");

  if (v2)
  {
    v3 = objc_msgSend(v0, "configuration");
    v4 = objc_msgSend(v3, "isPickerUI");

    if ((v4 & 1) != 0)
    {
      v5 = 1;
    }
    else
    {
      if (objc_msgSend((id)objc_opt_self(VNDocumentCameraViewController), "isSupported"))
      {
        sub_1002BE0F4(v0);
        return;
      }
      v5 = 2;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = sub_1002BD0C0();
  v7 = swift_allocError(&type metadata for ScanningError, v6, 0, 0);
  *v8 = v5;
  swift_willThrow(v7);
}

void sub_1002BD878()
{
  DOCFullDocumentManagerViewController.triggerScan()();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DOCSidebarViewController.triggerScan()()
{
  sub_1002BD8B4(&OBJC_IVAR____TtC5Files24DOCSidebarViewController_configuration);
}

void sub_1002BD8B4(_QWORD *a1)
{
  char *v1;
  void *v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;

  v2 = *(void **)&v1[*a1];
  if (objc_msgSend(v2, "isFilesApp"))
  {
    if ((objc_msgSend(v2, "isPickerUI") & 1) != 0)
    {
      v3 = 1;
    }
    else
    {
      if (objc_msgSend((id)objc_opt_self(VNDocumentCameraViewController), "isSupported"))
      {
        sub_1002BE0F4(v1);
        return;
      }
      v3 = 2;
    }
  }
  else
  {
    v3 = 0;
  }
  v4 = sub_1002BD0C0();
  v5 = swift_allocError(&type metadata for ScanningError, v4, 0, 0);
  *v6 = v3;
  swift_willThrow(v5);
}

void sub_1002BD974()
{
  DOCSidebarViewController.triggerScan()();
}

void sub_1002BD994()
{
  DOCItemCollectionViewController.triggerScan()();
}

void sub_1002BD9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *Strong;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2, v3);
  sub_1002BE0F4(Strong);

}

uint64_t sub_1002BDA08(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[5];
  uint64_t v37;

  v32 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v8 - 8);
  v34 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10006922C(&qword_100643470);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v16 = (void *)static OS_dispatch_queue.main.getter(v15);
  sub_1002320B8(a1, (uint64_t)v14);
  v17 = *(unsigned __int8 *)(v12 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = (v13 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_1005D9E78, v20 + 8, v17 | 7);
  sub_1000B34E4((uint64_t)v14, v21 + v18);
  *(_QWORD *)(v21 + v19) = a2;
  v22 = v32;
  *(_QWORD *)(v21 + v20) = v32;
  aBlock[4] = sub_1002BE6B0;
  v37 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = &unk_1005D9E90;
  v23 = _Block_copy(aBlock);
  v24 = v37;
  v25 = a2;
  v26 = v22;
  swift_release(v24);
  static DispatchQoS.unspecified.getter(v27);
  aBlock[0] = _swiftEmptyArrayStorage;
  v28 = sub_10008BAAC();
  v29 = sub_10006922C((uint64_t *)&unk_100647540);
  v30 = sub_1000791AC();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v29, v30, v5, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v10, v34);
}

void sub_1002BDC70(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  Swift::String v19;
  Swift::String_optional v20;
  Swift::String v21;
  Swift::String v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  NSString v28;
  Class isa;
  id v30;
  id v31;
  void *v32;
  id v33;
  NSURL *v34;
  void *v35;
  void *v36;
  void *v37;
  _BYTE v38[64];
  Swift::String v39;

  v6 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v6);
  v8 = &v38[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v38[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1002320B8(a1, (uint64_t)v8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100157D6C((uint64_t)v8);
    v13 = sub_10006922C((uint64_t *)&unk_10064CF60);
    inited = swift_initStackObject(v13, v38);
    *(_OWORD *)(inited + 16) = xmmword_1004D9670;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 32) = v15;
    *(_QWORD *)(inited + 40) = v16;
    v17 = (id)_DocumentManagerBundle(v15);
    if (v17)
    {
      v18 = v17;
      v39._countAndFlagsBits = 0xD000000000000033;
      v39._object = (void *)0x8000000100523680;
      v19._object = (void *)0x8000000100523650;
      v19._countAndFlagsBits = 0xD000000000000022;
      v20.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v20.value._object = (void *)0xEB00000000656C62;
      v21._countAndFlagsBits = 0;
      v21._object = (void *)0xE000000000000000;
      v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, (NSBundle)v18, v21, v39);

      *(Swift::String *)(inited + 48) = v22;
      v23 = sub_1003F1978(inited);
      static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserErrorDomain);
      v25 = v24;
      v26 = sub_10043330C(v23);
      swift_bridgeObjectRelease(v23);
      v27 = objc_allocWithZone((Class)NSError);
      v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v25);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      v30 = objc_msgSend(v27, "initWithDomain:code:userInfo:", v28, 1, isa, swift_bridgeObjectRelease(v26).n128_f64[0]);

      v31 = v30;
      v32 = (void *)_convertErrorToNSError(_:)(v31);

      DOCPresentAlertForError(v32, a2);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v12, v8, v9);
    v33 = objc_msgSend(a2, "doc_documentScannerReceivingTarget");
    if (v33)
    {
      v35 = v33;
      URL._bridgeToObjectiveC()(v34);
      v37 = v36;
      objc_msgSend(v35, "importScannedDocumentAt:presentingController:", v36, a3);
      swift_unknownObjectRelease(v35);

    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  }
}

uint64_t sub_1002BDF74(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  NSObject *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *v15;
  uint64_t v16;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return 0;
  result = (uint64_t)objc_msgSend(a1, "presentedViewController");
  if (!result)
    return result;
  v7 = result;
  v8 = sub_10004F2F0(0, (unint64_t *)&unk_10064EB40, VNDocumentCameraViewController_ptr);
  v9 = -[NSObject isKindOfClass:](v7, "isKindOfClass:", swift_getObjCClassFromMetadata(v8));
  if (!(_DWORD)v9)
  {

    return 0;
  }
  v10 = Logger.UI.unsafeMutableAddressor(v9);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v10, v2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "[Document Scanner] Scanner already presented, ignoring request", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
    v15 = v7;
  }
  else
  {
    v15 = v12;
    v12 = v7;
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 1;
}

void sub_1002BE0F4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint8_t *v22;
  id v23;
  id v24;
  UIModalPresentationStyle v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v32 - v8;
  if (a1)
  {
    v10 = a1;
    v11 = sub_1002BDF74(a1);
    if ((v11 & 1) != 0)
    {
      v12 = Logger.UI.unsafeMutableAddressor(v11);
      v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v9, v12, v2);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "[Document Scanner] Scanner already presented, ignoring request", v16, 2u);
        swift_slowDealloc(v16, -1, -1);
        v17 = v10;
      }
      else
      {
        v17 = v14;
        v14 = v10;
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
      return;
    }
    v33 = objc_msgSend(objc_allocWithZone((Class)VNDocumentCameraViewController), "init");
    objc_msgSend(v33, "setDelegate:", v10);
    v23 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    v24 = objc_msgSend(v23, "userInterfaceIdiom");

    if (v24 == (id)6)
      v25 = UIModalPresentationFormSheet;
    else
      v25 = UIModalPresentationOverFullScreen;
    UIViewController.doc_configureForPresentingLargeContent(withPreferredStyle:)(v25);
    v26 = objc_msgSend(v33, "view");
    if (v26)
    {
      v27 = v26;
      v28 = -[NSObject view](v10, "view");
      if (v28)
      {
        v29 = v28;
        v30 = objc_msgSend(v28, "tintColor");

        if (v30)
        {
          v31 = objc_msgSend((id)objc_opt_self(UIColor), "_doc_safeTintColor:", v30);

          objc_msgSend(v27, "setTintColor:", v31);
          -[NSObject presentViewController:animated:completion:](v10, "presentViewController:animated:completion:", v33, 1, 0);

          return;
        }
        goto LABEL_20;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_20:
    __break(1u);
    return;
  }
  v18 = Logger.UI.unsafeMutableAddressor(v7);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v18, v2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, (os_log_type_t)v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v21, "[Document Scanner] nil presenting vc, can not present document scanner", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

unint64_t _s5Files13ScanningErrorO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005C0568, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_1002BE48C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1002BE4BC()
{
  unint64_t result;

  result = qword_10064CEB8;
  if (!qword_10064CEB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScanningError, &type metadata for ScanningError);
    atomic_store(result, (unint64_t *)&qword_10064CEB8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ScanningError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1002BE54C + 4 * byte_1004E0D95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1002BE580 + 4 * asc_1004E0D90[v4]))();
}

uint64_t sub_1002BE580(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002BE588(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002BE590);
  return result;
}

uint64_t sub_1002BE59C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002BE5A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1002BE5A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002BE5B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScanningError()
{
  return &type metadata for ScanningError;
}

uint64_t type metadata accessor for DOCDocumentScannerUtil()
{
  return objc_opt_self(_TtC5FilesP33_84ED5486E341CAA8EE58F79EA668149E22DOCDocumentScannerUtil);
}

uint64_t sub_1002BE5EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(sub_10006922C(&qword_100643470) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  v7 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;

  return swift_deallocObject(v0, v8 + 8, v2 | 7);
}

void sub_1002BE6B0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(sub_10006922C(&qword_100643470) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1002BDC70(v0 + v2, *(void **)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

char *sub_1002BE708(uint64_t a1, void *a2)
{
  char *v2;
  char *v3;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  id v12;
  Class isa;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  objc_super v21;

  v3 = v2;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    v19 = v3;
    v20 = sub_10006922C((uint64_t *)&unk_1006424B0);
    v8 = _bridgeCocoaArray<A>(_:)(v18, v20);
  }
  else
  {
    v6 = v2;
    v7 = swift_bridgeObjectRetain(a1);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v7);
    v8 = a1;
  }
  v9 = sub_100123758(v8);
  swift_bridgeObjectRelease(v8);
  if (v9)
  {
    ObjectType = swift_getObjectType(v9);
    v11 = DOCNode.fpfs_syncFetchFPItem()(ObjectType);
    swift_unknownObjectRelease(v9);
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Files17DOCTrashOperation_sourceParentFolderItem] = v11;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Files17DOCTrashOperation_undoManager] = a2;
  v12 = a2;

  sub_100298B84();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v21.receiver = v3;
  v21.super_class = (Class)type metadata accessor for DOCTrashOperation();
  v14 = (char *)objc_msgSendSuper2(&v21, "initWithItems:", isa);

  v15 = *(void **)&v14[OBJC_IVAR____TtC5Files17DOCTrashOperation_undoManager];
  v16 = v14;
  objc_msgSend(v15, "registerUndoOperationForSender:", v16);

  return v16;
}

char *sub_1002BE8C8()
{
  char *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v11;

  v1 = objc_msgSend(v0, "items");
  v2 = sub_100298B84();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v11 = v3;
    else
      v11 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)&v5 = swift_bridgeObjectRelease(v3).n128_u64[0];
  if (v4 < 1)
    return 0;
  v6 = objc_msgSend(v0, "items", v5);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v2);

  v8 = *(void **)&v0[OBJC_IVAR____TtC5Files17DOCTrashOperation_undoManager];
  v9 = objc_allocWithZone((Class)type metadata accessor for DOCTrashOperation());
  return sub_1002BE708(v7, v8);
}

char *sub_1002BEA00()
{
  char *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v12;

  v1 = objc_msgSend(v0, "items");
  v2 = sub_100298B84();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v12 = v3;
    else
      v12 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)&v5 = swift_bridgeObjectRelease(v3).n128_u64[0];
  if (v4 < 1)
    return 0;
  v6 = objc_msgSend(v0, "items", v5);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v2);

  v8 = *(void **)&v0[OBJC_IVAR____TtC5Files17DOCTrashOperation_sourceParentFolderItem];
  v9 = *(void **)&v0[OBJC_IVAR____TtC5Files17DOCTrashOperation_undoManager];
  v10 = v8;
  return sub_100298A8C(v7, v8, v9);
}

id sub_1002BEB88()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DOCTrashOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DOCTrashOperation()
{
  return objc_opt_self(_TtC5Files17DOCTrashOperation);
}

id sub_1002BEC10(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  NSString v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[24];
  _QWORD aBlock[3];
  void *ObjectType;
  void (*v31)(uint64_t);
  uint64_t v32;

  v4 = v3;
  swift_unknownObjectWeakAssign(v4 + OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_presented, a2);
  swift_unknownObjectWeakAssign(v4 + OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_presentationSource, a3);
  objc_msgSend(a2, "setModalPresentationStyle:", 7);
  v8 = objc_msgSend(a2, "presentationController");
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v8, "setDelegate:", v4);

  }
  v10 = objc_msgSend(a2, "popoverPresentationController");
  if (v10)
  {
    v11 = v10;
    objc_msgSend(v10, "setDelegate:", v4);

  }
  v12 = objc_msgSend(a2, "presentationController");
  if (v12)
  {
    v13 = v12;
    v14 = String._bridgeToObjectiveC()();
    v15 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v16 = (void *)objc_opt_self(NSOperationQueue);
    v17 = v14;
    v18 = v13;
    v19 = objc_msgSend(v16, "mainQueue");
    v20 = swift_allocObject(&unk_1005D9F48, 24, 7);
    swift_unknownObjectWeakInit(v20 + 16, v4);
    v21 = swift_allocObject(&unk_1005D9F70, 24, 7);
    swift_unknownObjectWeakInit(v21 + 16, v18);
    v22 = swift_allocObject(&unk_1005D9F98, 32, 7);
    *(_QWORD *)(v22 + 16) = v20;
    *(_QWORD *)(v22 + 24) = v21;
    v31 = sub_1002BF558;
    v32 = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000B3580;
    ObjectType = &unk_1005D9FB0;
    v23 = _Block_copy(aBlock);
    swift_release(v32);
    v24 = objc_msgSend(v15, "addObserverForName:object:queue:usingBlock:", v17, v18, v19, v23);
    _Block_release(v23);

    ObjectType = (void *)swift_getObjectType(v24, v25);
    aBlock[0] = v24;
    v26 = v4 + OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_ppcDismissObserance;
    swift_beginAccess(v26, v28, 33, 0);
    sub_10007EB94((uint64_t)aBlock, v26);
    swift_endAccess(v28);

  }
  return objc_msgSend(a1, "presentViewController:animated:completion:", a2, 1, 0);
}

void sub_1002BEEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _BYTE v16[24];
  _OWORD v17[2];
  _BYTE v18[24];
  _BYTE v19[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v19, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v4, v5);
  if (Strong)
  {
    v7 = (_BYTE *)Strong;
    v8 = a3 + 16;
    swift_beginAccess(v8, v18, 0, 0);
    v10 = swift_unknownObjectWeakLoadStrong(v8, v9);
    if (v10)
    {
      v12 = (void *)v10;
      if (v7[OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_isActivelyPresentingPopover] == 1
        && (v7[OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_isActivelyPresentingPopover] = 0,
            (v13 = (void *)swift_unknownObjectWeakLoadStrong(&v7[OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_presentationSource], v11)) != 0))
      {
        v14 = v13;
        objc_msgSend(v13, "setIsActivePopoverSource:", 0);

        swift_unknownObjectRelease(v14);
      }
      else
      {

      }
    }
    memset(v17, 0, sizeof(v17));
    v15 = (uint64_t)&v7[OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_ppcDismissObserance];
    swift_beginAccess(&v7[OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_ppcDismissObserance], v16, 33, 0);
    sub_10007EB94((uint64_t)v17, v15);
    swift_endAccess(v16);

  }
}

void sub_1002BF000(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v6;
  id v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *Strong;
  id v13;
  void (*v14)(uint64_t, __n128);
  uint64_t v15;
  __n128 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void (*v23)(uint64_t, __n128);
  uint64_t v24;
  __n128 v25;
  id v26;

  v2 = v1;
  v3 = OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_activePresentationController;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_activePresentationController);
  if (v4)
  {
    if (!a1
      || (sub_1002BF560(),
          v6 = a1,
          v7 = v4,
          v8 = static NSObject.== infix(_:_:)(v7, v6),
          v7,
          v6,
          (v8 & 1) == 0)
      && (v4 = *(void **)(v2 + v3)) != 0)
    {
      v9 = objc_opt_self(UIPopoverPresentationController);
      v10 = swift_dynamicCastObjCClass(v4, v9);
      if (v10)
      {
        v11 = v10;
        *(_BYTE *)(v2 + OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_isActivelyPresentingPopover) = 1;
        Strong = (void *)swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_presentationSource);
        v13 = v4;
        if (Strong)
        {
          objc_msgSend(Strong, "setIsActivePopoverSource:", 1);
          swift_unknownObjectRelease(Strong);
        }
        v14 = *(void (**)(uint64_t, __n128))(v2
                                                     + OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_willPresentPopoverHandler);
        if (v14)
        {
          v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_willPresentPopoverHandler + 8);
          v16 = swift_retain();
          v14(v11, v16);
          sub_100087534((uint64_t)v14, v15);
        }

      }
      v17 = *(void **)(v2 + v3);
      if (v17)
      {
        v18 = objc_opt_self(UISheetPresentationController);
        v19 = swift_dynamicCastObjCClass(v17, v18);
        if (v19)
        {
          v20 = v19;
          *(_BYTE *)(v2 + OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_isActivelyPresentingPopover) = 0;
          v21 = (void *)swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_presentationSource);
          v26 = v17;
          if (v21)
          {
            objc_msgSend(v21, "setIsActivePopoverSource:", 0);
            swift_unknownObjectRelease(v21);
          }
          v22 = v2 + OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_willPresentCardHandler;
          v23 = *(void (**)(uint64_t, __n128))(v2
                                                       + OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_willPresentCardHandler);
          if (v23)
          {
            v24 = *(_QWORD *)(v22 + 8);
            v25 = swift_retain();
            v23(v20, v25);
            sub_100087534((uint64_t)v23, v24);
          }

        }
      }
    }
  }
}

id sub_1002BF374()
{
  _BYTE *v0;
  _QWORD *v1;
  _QWORD *v2;
  _OWORD *v3;
  objc_super v5;

  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_presentationSource]);
  v1 = &v0[OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_willPresentPopoverHandler];
  *v1 = 0;
  v1[1] = 0;
  v2 = &v0[OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_willPresentCardHandler];
  *v2 = 0;
  v2[1] = 0;
  v3 = &v0[OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_ppcDismissObserance];
  *v3 = 0u;
  v3[1] = 0u;
  v0[OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_isActivelyPresentingPopover] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_activePresentationController] = 0;
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC5Files32DOCCardPopoverAdaptablePresenter_presented]);
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for DOCCardPopoverAdaptablePresenter();
  return objc_msgSendSuper2(&v5, "init");
}

id sub_1002BF438()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DOCCardPopoverAdaptablePresenter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DOCCardPopoverAdaptablePresenter()
{
  return objc_opt_self(_TtC5Files32DOCCardPopoverAdaptablePresenter);
}

uint64_t sub_1002BF508()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002BF52C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1002BF558(uint64_t a1)
{
  uint64_t v1;

  sub_1002BEEF0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_1002BF560()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064D078;
  if (!qword_10064D078)
  {
    v1 = objc_opt_self(UIPresentationController);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10064D078);
  }
  return result;
}

uint64_t sub_1002BF5A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_1002BF5AC(uint64_t a1)
{
  return swift_unknownObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_1002BF5B4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_unknownObjectRetain(v3);
  return a1;
}

_QWORD *sub_1002BF5E8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

_QWORD *sub_1002BF63C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_unknownObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for DOCSymbolImageBarButtonItem.Descriptor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCSymbolImageBarButtonItem.Descriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for DOCViewOptionsView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007E804(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DOCViewOptionsView);
}

uint64_t sub_1002BF70C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10056C5AC, 1);
}

uint64_t sub_1002BF740@<X0>(int a1@<W0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  double v47;
  _QWORD *v48;
  uint64_t (*v49)(unint64_t, _QWORD *);
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t KeyPath;
  uint64_t (*v58)(unint64_t, _QWORD *);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t (*v70)(unint64_t, _QWORD *);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t OpaqueTypeConformance2;
  char *v96;
  uint64_t (*v97)(unint64_t, _QWORD *);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __n128 v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t (*v111)(unint64_t, _QWORD *);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __n128 v119;
  uint64_t (*v120)(unint64_t, _QWORD *);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (*v126)(unint64_t, _QWORD *);
  uint64_t v127;
  uint64_t v128;
  double v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t (*v134)(unint64_t, _QWORD *);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  uint64_t (*v145)(unint64_t, _QWORD *);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  __n128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t (*v160)(unint64_t, _QWORD *);
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  double v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  uint64_t (*v174)(unint64_t, _QWORD *);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  __n128 v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  _QWORD v206[2];
  uint64_t v207;
  void *v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  char *v245;
  _QWORD *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  void *v254;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  char v260;
  uint64_t v261;
  unint64_t v262;
  char v263;

  v246 = a5;
  v247 = a4;
  v252 = a6;
  v253 = a2;
  LODWORD(v245) = a1;
  v235 = sub_10006922C(&qword_10064D1D0);
  v234 = *(_QWORD *)(v235 - 8);
  __chkstk_darwin(v235);
  v233 = (char *)&v213 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v251 = sub_10006922C(&qword_10064D1C0);
  __chkstk_darwin(v251);
  v232 = (char *)&v213 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v236 = (uint64_t)&v213 - v10;
  v220 = (uint64_t *)sub_10006922C(&qword_10064D1A8);
  v219 = *(v220 - 1);
  __chkstk_darwin(v220);
  v218 = (char *)&v213 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = sub_10006922C(&qword_10064D198);
  v237 = *(_QWORD *)(v238 - 8);
  __chkstk_darwin(v238);
  v217 = (char *)&v213 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = sub_10006922C(&qword_10064D188);
  __chkstk_darwin(v244);
  v239 = (char *)&v213 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v249 = sub_10006922C(&qword_10064D218);
  __chkstk_darwin(v249);
  v250 = (uint64_t)&v213 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v240 = sub_10006922C(&qword_10064D220);
  __chkstk_darwin(v240);
  v242 = (uint64_t)&v213 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v241 = sub_10006922C(&qword_10064D178);
  __chkstk_darwin(v241);
  v17 = (char *)&v213 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v248 = sub_10006922C(&qword_10064D168);
  __chkstk_darwin(v248);
  v243 = (char *)&v213 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10006922C(&qword_10064D228);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v213 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10006922C(&qword_10064D230);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v213 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_10006922C(&qword_10064D238);
  __chkstk_darwin(v27);
  v29 = (char *)&v213 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v213 - v32;
  v228 = type metadata accessor for AccessibilityChildBehavior(0, v31);
  v227 = *(_QWORD *)(v228 - 8);
  __chkstk_darwin(v228);
  v225 = (char *)&v213 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v223 = sub_10006922C(&qword_10064D240);
  v222 = *(_QWORD *)(v223 - 8);
  __chkstk_darwin(v223);
  v221 = (char *)&v213 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v226 = sub_10006922C(&qword_10064D248);
  __chkstk_darwin(v226);
  v224 = (char *)&v213 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v231 = sub_10006922C(&qword_10064D250);
  v230 = *(_QWORD *)(v231 - 8);
  __chkstk_darwin(v231);
  v229 = (char *)&v213 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_10006922C(&qword_10064D258);
  __chkstk_darwin(v38);
  __chkstk_darwin(v39);
  __chkstk_darwin(v40);
  v47 = __chkstk_darwin(v41);
  if ((_BYTE)v245)
  {
    if (v245 == 1)
    {
      v48 = v246;
      v49 = (uint64_t (*)(unint64_t, _QWORD *))v246[28];
      swift_unknownObjectRetain(a3);
      v50 = v247;
      v51 = v49(v247, v48);
      swift_unknownObjectRelease(a3);
      v52 = *(_QWORD *)(v51 + 16);
      *(_QWORD *)&v53 = swift_bridgeObjectRelease(v51).n128_u64[0];
      v54 = v253;
      if (v52)
      {
        v55 = v48[1];
        v56 = ObservedObject.projectedValue.getter(v253, a3, v50, v55, v53);
        __chkstk_darwin(v56);
        v211 = v50;
        v212 = v48;
        KeyPath = swift_getKeyPath(&unk_1004E1058);
        ObservedObject.Wrapper.subscript.getter(&v261, KeyPath, v56, v55);
        swift_release(KeyPath);
        swift_unknownObjectRelease(v56);
        v258 = v261;
        v259 = v262;
        v260 = v263;
        v58 = (uint64_t (*)(unint64_t, _QWORD *))v48[5];
        swift_unknownObjectRetain(a3);
        v59 = v58(v50, v48);
        v61 = v60;
        swift_unknownObjectRelease(a3);
        v254 = (void *)v59;
        v255 = v61;
        v62 = sub_10008B9BC();
        v254 = (void *)Text.init<A>(_:)(&v254, &type metadata for String, v62);
        v255 = v63;
        LOBYTE(v256) = v64 & 1;
        v257 = v65;
        __chkstk_darwin(v254);
        v207 = v50;
        v208 = v48;
        v209 = v54;
        v210 = a3;
        v66 = sub_10006922C(&qword_10064D260);
        v67 = sub_1002C2958();
        v68 = sub_1002C299C();
        v211 = v67;
        v69 = v218;
        Picker.init(selection:label:content:)(&v258, &v254, sub_1002C294C, v206, &type metadata for Text, &type metadata for DOCBrowserLayoutConfiguration.SizeSetting, v66, &protocol witness table for Text, v211, v68);
        v70 = (uint64_t (*)(unint64_t, _QWORD *))v48[12];
        swift_unknownObjectRetain(a3);
        v71 = v70(v50, v48);
        v73 = v72;
        swift_unknownObjectRelease(a3);
        v74 = sub_100062698(&qword_10064D1A0, &qword_10064D1A8, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
        v75 = (uint64_t)v217;
        v76 = v71;
        v77 = v220;
        View.accessibilityIdentifier(_:)(v76, v73, v220, v74);
        v78 = swift_bridgeObjectRelease(v73);
        (*(void (**)(char *, uint64_t *, __n128))(v219 + 8))(v69, v77, v78);
        v79 = (uint64_t)v239;
        sub_100070EDC(v75, (uint64_t)v239, &qword_10064D198);
        v80 = 0;
      }
      else
      {
        v80 = 1;
        v79 = (uint64_t)v239;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v237 + 56))(v79, v80, 1, v238);
      v183 = &qword_10064D188;
      v188 = v242;
      sub_1000271D4(v79, v242, &qword_10064D188);
      swift_storeEnumTagMultiPayload(v188, v240, 1);
      v189 = sub_100062698(&qword_10064D170, &qword_10064D178, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v190 = sub_1002C2464(&qword_10064D180, &qword_10064D188, (void (*)(void))sub_1002C24C8, (uint64_t)&protocol conformance descriptor for <A> A?);
      v191 = (uint64_t)v243;
      _ConditionalContent<>.init(storage:)(v188, v241, v244, v189, v190);
      v192 = v250;
      sub_1000271D4(v191, v250, &qword_10064D168);
      swift_storeEnumTagMultiPayload(v192, v249, 0);
      v193 = sub_1002C23C0();
      v194 = sub_1002C2564();
      _ConditionalContent<>.init(storage:)(v192, v248, v251, v193, v194);
      sub_10000CB4C(v191, &qword_10064D168);
    }
    else
    {
      v159 = v246;
      v160 = (uint64_t (*)(unint64_t, _QWORD *))v246[6];
      swift_unknownObjectRetain(a3);
      v161 = v247;
      v162 = v160(v247, v159);
      v164 = v163;
      *(_QWORD *)&v165 = swift_unknownObjectRelease(a3).n128_u64[0];
      v261 = v162;
      v262 = v164;
      v166 = v159[1];
      v167 = ObservedObject.projectedValue.getter(v253, a3, v161, v166, v165);
      __chkstk_darwin(v167);
      v211 = v161;
      v212 = v159;
      v168 = swift_getKeyPath(&unk_1004E1020);
      ObservedObject.Wrapper.subscript.getter(&v254, v168, v167, v166);
      swift_release(v168);
      swift_unknownObjectRelease(v167);
      v169 = v254;
      v170 = v255;
      v171 = v256;
      v172 = sub_10008B9BC();
      v173 = v233;
      Toggle<>.init<A>(_:isOn:)(&v261, v169, v170, v171, &type metadata for String, v172);
      v174 = (uint64_t (*)(unint64_t, _QWORD *))v159[13];
      swift_unknownObjectRetain(a3);
      v175 = v174(v161, v159);
      v177 = v176;
      swift_unknownObjectRelease(a3);
      v178 = sub_100062698(&qword_10064D1C8, &qword_10064D1D0, (uint64_t)&protocol conformance descriptor for Toggle<A>);
      v179 = v232;
      v180 = v175;
      v181 = v235;
      View.accessibilityIdentifier(_:)(v180, v177, v235, v178);
      v182 = swift_bridgeObjectRelease(v177);
      (*(void (**)(char *, uint64_t, __n128))(v234 + 8))(v173, v181, v182);
      v183 = &qword_10064D1C0;
      v184 = (uint64_t)v179;
      v79 = v236;
      sub_100070EDC(v184, v236, &qword_10064D1C0);
      v185 = v250;
      sub_1000271D4(v79, v250, &qword_10064D1C0);
      swift_storeEnumTagMultiPayload(v185, v249, 1);
      v186 = sub_1002C23C0();
      v187 = sub_1002C2564();
      _ConditionalContent<>.init(storage:)(v185, v248, v251, v186, v187);
    }
    v195 = v79;
  }
  else
  {
    v235 = v44;
    v214 = v26;
    v215 = v22;
    v216 = v20;
    v217 = (char *)v19;
    v236 = v24;
    v237 = v23;
    v238 = (uint64_t)v29;
    v239 = v33;
    v245 = v17;
    v81 = v246;
    v82 = v246[1];
    v234 = (uint64_t)&v213 - v43;
    v233 = v42;
    v83 = v247;
    v219 = v45;
    v232 = v46;
    v84 = ObservedObject.projectedValue.getter(v253, a3, v247, v82, v47);
    __chkstk_darwin(v84);
    v212 = v81;
    v85 = swift_getKeyPath(&unk_1004E1090);
    v213 = v82;
    ObservedObject.Wrapper.subscript.getter(&v261, v85, v84, v82);
    swift_release(v85);
    swift_unknownObjectRelease(v84);
    v220 = &v213;
    v258 = v261;
    v259 = v262;
    v260 = v263;
    __chkstk_darwin(v86);
    v218 = (char *)v206;
    __chkstk_darwin(v87);
    __chkstk_darwin(v88);
    v89 = sub_10006922C(&qword_10064D2C8);
    v90 = sub_10006922C(&qword_10064D2D0);
    v91 = sub_1002C2B68();
    v92 = sub_1002C2BAC();
    v93 = type metadata accessor for TitleOnlyLabelStyle(255);
    v94 = sub_10005A360(&qword_10064D2F8, (uint64_t (*)(uint64_t))&type metadata accessor for TitleOnlyLabelStyle, (uint64_t)&protocol conformance descriptor for TitleOnlyLabelStyle);
    v254 = &type metadata for Text;
    v255 = v93;
    v256 = &protocol witness table for Text;
    v257 = v94;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v254, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
    v210 = v92;
    v211 = OpaqueTypeConformance2;
    v209 = v91;
    v207 = v90;
    v208 = &protocol witness table for Text;
    v206[0] = &type metadata for DOCItemSortMode;
    v206[1] = v89;
    v96 = v221;
    ((void (*)(uint64_t *, uint64_t (*)(), char *, uint64_t (*)@<X0>(uint64_t@<X8>), _QWORD *, uint64_t (*)(), _QWORD *, void *))Picker.init<A>(selection:content:label:currentValueLabel:))(&v258, sub_1002C2B40, v218, sub_1002C2B4C, v206, sub_1002C2B5C, v206, &type metadata for Text);
    v97 = (uint64_t (*)(unint64_t, _QWORD *))v81[10];
    swift_unknownObjectRetain(a3);
    v98 = v97(v83, v81);
    v100 = v99;
    swift_unknownObjectRelease(a3);
    v101 = sub_100062698(&qword_10064D300, &qword_10064D240, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
    v102 = (uint64_t)v224;
    v103 = v98;
    v104 = v223;
    View.accessibilityIdentifier(_:)(v103, v100, v223, v101);
    v105 = swift_bridgeObjectRelease(v100);
    v106 = (*(uint64_t (**)(char *, uint64_t, __n128))(v222 + 8))(v96, v104, v105);
    v107 = v225;
    static AccessibilityChildBehavior.combine.getter(v106);
    v108 = sub_1002C2C28();
    v109 = v229;
    v110 = v226;
    View.accessibilityElement(children:)(v107, v226, v108);
    (*(void (**)(char *, uint64_t))(v227 + 8))(v107, v228);
    sub_10000CB4C(v102, &qword_10064D248);
    v111 = (uint64_t (*)(unint64_t, _QWORD *))v81[4];
    swift_unknownObjectRetain(a3);
    v112 = v111(v83, v81);
    v114 = v113;
    swift_unknownObjectRelease(a3);
    v254 = (void *)v112;
    v255 = v114;
    v261 = v110;
    v262 = v108;
    v115 = swift_getOpaqueTypeConformance2(&v261, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v116 = sub_10008B9BC();
    v117 = v219;
    v118 = v231;
    View.accessibilityLabel<A>(_:)(&v254, v231, &type metadata for String, v115, v116);
    v119 = swift_bridgeObjectRelease(v114);
    (*(void (**)(char *, uint64_t, __n128))(v230 + 8))(v109, v118, v119);
    v120 = (uint64_t (*)(unint64_t, _QWORD *))v81[22];
    swift_unknownObjectRetain(a3);
    LOBYTE(v115) = v120(v83, v81);
    swift_unknownObjectRelease(a3);
    v121 = DOCItemSortMode.DisplayableMode.localizedName.getter(0x5040302010000uLL >> (8 * v115));
    v123 = v122;
    v254 = (void *)v121;
    v255 = v122;
    v124 = (uint64_t)v232;
    ModifiedContent<>.accessibilityValue<A>(_:)(&v254, v233, &type metadata for String, v116);
    swift_bridgeObjectRelease(v123);
    sub_10000CB4C(v117, &qword_10064D258);
    v125 = v234;
    sub_100070EDC(v124, v234, &qword_10064D258);
    v126 = (uint64_t (*)(unint64_t, _QWORD *))v81[17];
    swift_unknownObjectRetain(a3);
    v127 = v126(v83, v81);
    swift_unknownObjectRelease(a3);
    v128 = *(_QWORD *)(v127 + 16);
    *(_QWORD *)&v129 = swift_bridgeObjectRelease(v127).n128_u64[0];
    if (v128)
    {
      v130 = v253;
      v131 = v213;
      v132 = ObservedObject.projectedValue.getter(v253, a3, v83, v213, v129);
      __chkstk_darwin(v132);
      v211 = v83;
      v212 = v81;
      v133 = swift_getKeyPath(&unk_1004E10C8);
      ObservedObject.Wrapper.subscript.getter(&v261, v133, v132, v131);
      swift_release(v133);
      swift_unknownObjectRelease(v132);
      v258 = v261;
      v259 = v262;
      v260 = v263;
      v134 = (uint64_t (*)(unint64_t, _QWORD *))v81[3];
      swift_unknownObjectRetain(a3);
      v135 = v134(v83, v81);
      v137 = v136;
      swift_unknownObjectRelease(a3);
      v254 = (void *)v135;
      v255 = v137;
      v254 = (void *)Text.init<A>(_:)(&v254, &type metadata for String, v116);
      v255 = v138;
      LOBYTE(v256) = v139 & 1;
      v257 = v140;
      __chkstk_darwin(v254);
      v207 = v83;
      v208 = v81;
      v209 = v130;
      v210 = a3;
      v141 = sub_10006922C(&qword_10064D310);
      v142 = sub_1002C2D68();
      v143 = sub_1002C2DAC();
      v211 = v142;
      v144 = v215;
      Picker.init(selection:label:content:)(&v258, &v254, sub_1002C2D48, v206, &type metadata for Text, &type metadata for DOCItemGroupingBehavior, v141, &protocol witness table for Text, v211, v143);
      v145 = (uint64_t (*)(unint64_t, _QWORD *))v81[8];
      swift_unknownObjectRetain(a3);
      v146 = v145(v83, v81);
      v148 = v147;
      swift_unknownObjectRelease(a3);
      v149 = sub_100062698(&qword_10064D378, &qword_10064D228, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
      v150 = (uint64_t)v214;
      v151 = v146;
      v152 = v217;
      View.accessibilityIdentifier(_:)(v151, v148, v217, v149);
      v153 = swift_bridgeObjectRelease(v148);
      (*(void (**)(char *, char *, __n128))(v216 + 8))(v144, v152, v153);
      v154 = (uint64_t)v239;
      sub_100070EDC(v150, (uint64_t)v239, &qword_10064D230);
      v155 = 0;
      v156 = (uint64_t)v245;
      v157 = v238;
      v158 = v237;
    }
    else
    {
      v156 = (uint64_t)v245;
      v154 = (uint64_t)v239;
      v157 = v238;
      v158 = v237;
      v155 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v236 + 56))(v154, v155, 1, v158);
    v183 = &qword_10064D258;
    v196 = v235;
    sub_1000271D4(v125, v235, &qword_10064D258);
    sub_1000271D4(v154, v157, &qword_10064D238);
    sub_1000271D4(v196, v156, &qword_10064D258);
    v197 = sub_10006922C(&qword_10064D380);
    sub_1000271D4(v157, v156 + *(int *)(v197 + 48), &qword_10064D238);
    sub_10000CB4C(v157, &qword_10064D238);
    sub_10000CB4C(v196, &qword_10064D258);
    v198 = v242;
    sub_1000271D4(v156, v242, &qword_10064D178);
    swift_storeEnumTagMultiPayload(v198, v240, 0);
    v199 = sub_100062698(&qword_10064D170, &qword_10064D178, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v200 = sub_1002C2464(&qword_10064D180, &qword_10064D188, (void (*)(void))sub_1002C24C8, (uint64_t)&protocol conformance descriptor for <A> A?);
    v201 = (uint64_t)v243;
    _ConditionalContent<>.init(storage:)(v198, v241, v244, v199, v200);
    sub_10000CB4C(v156, &qword_10064D178);
    v202 = v250;
    sub_1000271D4(v201, v250, &qword_10064D168);
    swift_storeEnumTagMultiPayload(v202, v249, 0);
    v203 = sub_1002C23C0();
    v204 = sub_1002C2564();
    _ConditionalContent<>.init(storage:)(v202, v248, v251, v203, v204);
    sub_10000CB4C(v201, &qword_10064D168);
    sub_10000CB4C(v154, &qword_10064D238);
    v195 = v125;
  }
  return sub_10000CB4C(v195, v183);
}

uint64_t sub_1002C0B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;

  v10 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 168);
  swift_unknownObjectRetain(a2);
  v11 = v10(a3, a4);
  swift_unknownObjectRelease(a2);
  v19 = v11;
  v12 = swift_allocObject(&unk_1005DA090, 56, 7);
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a4;
  *(_QWORD *)(v12 + 32) = a1;
  *(_QWORD *)(v12 + 40) = a2;
  *(double *)(v12 + 48) = a5;
  swift_unknownObjectRetain(a2);
  v13 = sub_10006922C(&qword_10064D3A0);
  v14 = sub_10006922C(&qword_10064D2F0);
  v15 = sub_100062698(&qword_10064D3A8, &qword_10064D3A0, (uint64_t)&protocol conformance descriptor for [A]);
  v16 = sub_100062698(&qword_10064D2E8, &qword_10064D2F0, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v17 = sub_1002C303C();
  return ((uint64_t (*)(uint64_t *, uint64_t (*)(uint64_t), uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t, unint64_t))ForEach<>.init(_:content:))(&v19, sub_1002C3030, v12, v13, &type metadata for DOCItemSortMode, v14, v15, v16, v17);
}

void sub_1002C0CD4(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_1002C0D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  __n128 v4;

  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 176);
  swift_unknownObjectRetain(v1);
  LOBYTE(v3) = v3(v2, v0);
  v4 = swift_unknownObjectRelease(v1);
  return ((uint64_t (*)(__n128))((char *)sub_1002C0E04 + 4 * byte_1004E0F87[v3]))(v4);
}

double sub_1002C0E04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  if (v6 == 0x646573557473616CLL && v5 == 0xEC00000065746144)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, 0x646573557473616CLL, 0xEC00000065746144, 0);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(0xEC00000065746144);
  v8 = DOCItemSortMode.DisplayableMode.localizedName.getter(0x5040302010000uLL >> (8 * v3));
  v10 = v9;
  *(_QWORD *)v4 = ((uint64_t (*)(void))static VerticalAlignment.center.getter)();
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) = 1;
  v11 = sub_10006922C(&qword_10064D3B8);
  sub_1002C0F74(v8, v10, v7 & 1, v1, v2, v0, v4 + *(int *)(v11 + 44));
  *(_QWORD *)&result = swift_bridgeObjectRelease(v10).n128_u64[0];
  return result;
}

double sub_1002C0F74@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, _QWORD, uint64_t);
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t *v42;
  uint64_t *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  double result;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  _QWORD v63[2];

  v56 = a4;
  LODWORD(v60) = a3;
  v57 = sub_10006922C(&qword_10064D3C0);
  __chkstk_darwin(v57);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Image.Scale(0);
  v58 = *(_QWORD *)(v14 - 8);
  v59 = v14;
  __chkstk_darwin(v14);
  v54 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10006922C(&qword_10064D3C8);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v55 = (uint64_t *)((char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = sub_10006922C(&qword_10064D3D0);
  __chkstk_darwin(v19);
  v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v51 - v23;
  v63[0] = a1;
  v63[1] = a2;
  v25 = sub_10008B9BC();
  swift_bridgeObjectRetain(a2);
  v26 = Text.init<A>(_:)(v63, &type metadata for String, v25);
  v62 = v27;
  v61 = v28;
  v30 = v29;
  if ((v60 & 1) != 0)
  {
    v53 = v17;
    v31 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 200);
    v51 = (uint64_t *)v13;
    v32 = a6;
    v33 = v56;
    swift_unknownObjectRetain(v56);
    v60 = v16;
    LOBYTE(v31) = v31(a5, v32);
    v34 = swift_unknownObjectRelease(v33);
    if ((v31 & 1) != 0)
      v35 = 0xEA00000000007075;
    else
      v35 = 0xEC0000006E776F64;
    v36 = Image.init(systemName:)(0x2E6E6F7276656863, v35, v34);
    v52 = v26;
    v37 = v54;
    v38 = v58;
    v39 = *(void (**)(char *, _QWORD, uint64_t))(v58 + 104);
    v56 = v30;
    v40 = v59;
    v39(v54, enum case for Image.Scale.small(_:), v59);
    KeyPath = swift_getKeyPath(&unk_1004E1100);
    v42 = v51;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))((char *)v51 + *(int *)(v57 + 28), v37, v40);
    *v42 = KeyPath;
    v43 = v55;
    sub_1000271D4((uint64_t)v42, (uint64_t)v55 + *(int *)(v60 + 36), &qword_10064D3C0);
    *v43 = v36;
    swift_retain();
    v17 = v53;
    sub_10000CB4C((uint64_t)v42, &qword_10064D3C0);
    v44 = v37;
    v26 = v52;
    v45 = v40;
    v30 = v56;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v44, v45);
    v16 = v60;
    swift_release(v36);
    sub_100070EDC((uint64_t)v43, (uint64_t)v24, &qword_10064D3C8);
    v46 = 0;
  }
  else
  {
    v46 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v24, v46, 1, v16);
  v47 = v61 & 1;
  sub_1000271D4((uint64_t)v24, (uint64_t)v21, &qword_10064D3D0);
  v48 = v62;
  *(_QWORD *)a7 = v26;
  *(_QWORD *)(a7 + 8) = v48;
  *(_BYTE *)(a7 + 16) = v47;
  *(_QWORD *)(a7 + 24) = v30;
  v49 = sub_10006922C(&qword_10064D3D8);
  sub_1000271D4((uint64_t)v21, a7 + *(int *)(v49 + 48), &qword_10064D3D0);
  sub_1002C3080(v26, v48, v47);
  swift_bridgeObjectRetain(v30);
  sub_10000CB4C((uint64_t)v24, &qword_10064D3D0);
  sub_10000CB4C((uint64_t)v21, &qword_10064D3D0);
  sub_1002C3020(v26, v48, v47);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v30).n128_u64[0];
  return result;
}

uint64_t sub_1002C131C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD v17[2];

  v8 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 32);
  swift_unknownObjectRetain(a1);
  v9 = v8(a2, a3);
  v11 = v10;
  swift_unknownObjectRelease(a1);
  v17[0] = v9;
  v17[1] = v11;
  v12 = sub_10008B9BC();
  result = Text.init<A>(_:)(v17, &type metadata for String, v12);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v14;
  *(_BYTE *)(a4 + 16) = v15 & 1;
  *(_QWORD *)(a4 + 24) = v16;
  return result;
}

uint64_t sub_1002C13B0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v25 = a4;
  v7 = type metadata accessor for TitleOnlyLabelStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10006922C(&qword_10064D2D0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 176);
  swift_unknownObjectRetain(a1);
  LOBYTE(a3) = v15(a2, a3);
  swift_unknownObjectRelease(a1);
  v26 = DOCItemSortMode.DisplayableMode.localizedName.getter(0x5040302010000uLL >> (8 * a3));
  v27 = v16;
  v17 = sub_10008B9BC();
  v26 = Text.init<A>(_:)(&v26, &type metadata for String, v17);
  v27 = v18;
  v28 = v19 & 1;
  v29 = v20;
  TitleOnlyLabelStyle.init()();
  v21 = sub_10005A360(&qword_10064D2F8, (uint64_t (*)(uint64_t))&type metadata accessor for TitleOnlyLabelStyle, (uint64_t)&protocol conformance descriptor for TitleOnlyLabelStyle);
  View.labelStyle<A>(_:)(v10, &type metadata for Text, v7, &protocol witness table for Text, v21);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_1002C3020(v26, v27, v28);
  v22 = swift_bridgeObjectRelease(v29);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(v12 + 32))(v25, v14, v11, v22);
}

uint64_t sub_1002C1564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;

  v10 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 136);
  swift_unknownObjectRetain(a2);
  v11 = v10(a3, a4);
  swift_unknownObjectRelease(a2);
  v19 = v11;
  v12 = swift_allocObject(&unk_1005DA068, 56, 7);
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a4;
  *(_QWORD *)(v12 + 32) = a1;
  *(_QWORD *)(v12 + 40) = a2;
  *(double *)(v12 + 48) = a5;
  swift_unknownObjectRetain(a2);
  v13 = sub_10006922C(&qword_10064D388);
  v14 = sub_10006922C(&qword_10064D330);
  v15 = sub_100062698(&qword_10064D390, &qword_10064D388, (uint64_t)&protocol conformance descriptor for [A]);
  v16 = sub_1002C2E28(&qword_10064D328, &qword_10064D330, (void (*)(void))sub_1002C2EAC);
  v17 = sub_1002C2FDC();
  return ((uint64_t (*)(uint64_t *, uint64_t (*)(uint64_t), uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t, unint64_t))ForEach<>.init(_:content:))(&v19, sub_1002C2FD0, v12, v13, &type metadata for DOCItemGroupingBehavior, v14, v15, v16, v17);
}

double sub_1002C16A0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double result;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;

  v8 = *a1;
  v25 = DOCItemGroupingBehavior.localizedName.getter(v8);
  v26 = v9;
  v10 = sub_10008B9BC();
  v11 = Text.init<A>(_:)(&v25, &type metadata for String, v10);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v25 = v11;
  v26 = v12;
  v27 = v16 & 1;
  v28 = v14;
  v29 = v8;
  v30 = v8;
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 56);
  swift_unknownObjectRetain(a3);
  v19 = v18(v8, a4, a5);
  v21 = v20;
  swift_unknownObjectRelease(a3);
  v22 = sub_10006922C(&qword_10064D340);
  v23 = sub_1002C2EAC();
  View.accessibilityIdentifier(_:)(v19, v21, v22, v23);
  swift_bridgeObjectRelease(v21);
  sub_1002C3020(v11, v13, v17);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v15).n128_u64[0];
  return result;
}

uint64_t sub_1002C17B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;

  v10 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 224);
  swift_unknownObjectRetain(a2);
  v11 = v10(a3, a4);
  swift_unknownObjectRelease(a2);
  v19 = v11;
  v12 = swift_allocObject(&unk_1005DA0B8, 56, 7);
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a4;
  *(_QWORD *)(v12 + 32) = a1;
  *(_QWORD *)(v12 + 40) = a2;
  *(double *)(v12 + 48) = a5;
  swift_unknownObjectRetain(a2);
  v13 = sub_10006922C(&qword_10064D3E0);
  v14 = sub_10006922C(&qword_10064D280);
  v15 = sub_100062698(&qword_10064D3E8, &qword_10064D3E0, (uint64_t)&protocol conformance descriptor for [A]);
  v16 = sub_1002C2E28(&qword_10064D278, &qword_10064D280, (void (*)(void))sub_1002C2A18);
  v17 = sub_1002C30D4();
  return ((uint64_t (*)(uint64_t *, uint64_t (*)(uint64_t), uint64_t, uint64_t, ValueMetadata *, uint64_t, uint64_t, uint64_t, unint64_t))ForEach<>.init(_:content:))(&v19, sub_1002C30B4, v12, v13, &type metadata for DOCBrowserLayoutConfiguration.SizeSetting, v14, v15, v16, v17);
}

double sub_1002C18F4(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double result;
  objc_class *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;

  v8 = *a1;
  v25 = sub_1003B87C4(v8);
  v26 = v9;
  v10 = sub_10008B9BC();
  v11 = Text.init<A>(_:)(&v25, &type metadata for String, v10);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v25 = (objc_class *)v11;
  v26 = v12;
  v27 = v16 & 1;
  v28 = v14;
  v29 = v8;
  v30 = v8;
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 88);
  swift_unknownObjectRetain(a3);
  v19 = v18(v8, a4, a5);
  v21 = v20;
  swift_unknownObjectRelease(a3);
  v22 = sub_10006922C(&qword_10064D290);
  v23 = sub_1002C2A18();
  View.accessibilityIdentifier(_:)(v19, v21, v22, v23);
  swift_bridgeObjectRelease(v21);
  sub_1002C3020(v11, v13, v17);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v15).n128_u64[0];
  return result;
}

uint64_t sub_1002C1A0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45[16];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;

  v37 = a3;
  v38 = a2;
  v44 = a5;
  v9 = type metadata accessor for Material(0);
  v41 = *(_QWORD *)(v9 - 8);
  v42 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10006922C(&qword_10064D100);
  v39 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_10006922C(&qword_10064D108);
  v15 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10006922C(&qword_10064D110);
  __chkstk_darwin(v18);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_10006922C(&qword_10064D118);
  __chkstk_darwin(v43);
  v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = v37;
  v47 = a4;
  v48 = a1;
  v49 = v38;
  v50 = a6;
  v23 = sub_10006922C(&qword_10064D120);
  v24 = sub_1002C2464(&qword_10064D128, &qword_10064D120, (void (*)(void))sub_1002C2288, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
  List<>.init(content:)(sub_1002C227C, v45, v23, v24);
  v25 = sub_100062698(&qword_10064D1D8, &qword_10064D100, (uint64_t)&protocol conformance descriptor for List<A, B>);
  View.scrollContentBackground(_:)(2, v12, v25);
  v26 = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v14, v12);
  v27 = static Material.thick.getter(v26);
  LOBYTE(v12) = static Edge.Set.all.getter(v27);
  v28 = &v20[*(int *)(v18 + 36)];
  v30 = v41;
  v29 = v42;
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v28, v11, v42);
  v28[*(int *)(sub_10006922C(&qword_10064D1E0) + 36)] = v12;
  v31 = v40;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v17, v40);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v29);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v31);
  v33 = static Alignment.center.getter(v32);
  sub_1002C208C(0.0, 1, a6, 0, 0.0, 1, 0.0, 1, (uint64_t)v22, 0.0, 1, 0.0, 1, v33, v34);
  sub_10000CB4C((uint64_t)v20, &qword_10064D110);
  v35 = sub_1002C2600();
  View.listSizesToFit(maxHeight:)(v43, v35, INFINITY);
  return sub_10000CB4C((uint64_t)v22, &qword_10064D118);
}

uint64_t sub_1002C1D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;

  v10 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 256);
  swift_unknownObjectRetain(a2);
  v11 = v10(a3, a4);
  swift_unknownObjectRelease(a2);
  v19 = v11;
  v12 = swift_allocObject(&unk_1005DA040, 56, 7);
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a4;
  *(_QWORD *)(v12 + 32) = a1;
  *(_QWORD *)(v12 + 40) = a2;
  *(double *)(v12 + 48) = a5;
  swift_unknownObjectRetain(a2);
  v13 = sub_10006922C(&qword_10064D200);
  v14 = sub_10006922C(&qword_10064D138);
  v15 = sub_100062698(&qword_10064D208, &qword_10064D200, (uint64_t)&protocol conformance descriptor for [A]);
  v16 = sub_1002C2288();
  v17 = sub_1002C27E4();
  return ((uint64_t (*)(uint64_t *, uint64_t (*)(uint64_t), uint64_t, uint64_t, ValueMetadata *, uint64_t, uint64_t, unint64_t, unint64_t))ForEach<>.init(_:content:))(&v19, sub_1002C27D8, v12, v13, &type metadata for DOCViewOptionsSection, v14, v15, v16, v17);
}

id sub_1002C1E6C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  void *v12;
  Swift::String v13;
  Swift::String_optional v14;
  Swift::String v15;
  Swift::String v16;
  unint64_t v17;
  void *v18;
  char v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  Swift::String_optional v23;
  Swift::String v24;
  Swift::String v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  char v37;
  Swift::String v38;
  _QWORD v39[4];
  Swift::String v40;
  __int128 v41;
  Swift::String v42;
  Swift::String v43;

  v6 = *a1;
  v32 = a4;
  v33 = a5;
  v34 = a2;
  v35 = a3;
  v36 = a6;
  v37 = v6;
  if (v6 <= 1)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v40 = (Swift::String)0;
    v41 = 0u;
LABEL_6:
    v39[0] = v7;
    v39[1] = v8;
    v39[2] = v9;
    v39[3] = v10;
    v27 = sub_10006922C(&qword_10064D148);
    v28 = sub_10006922C(&qword_10064D158);
    v29 = sub_1002C22F8();
    v30 = sub_1002C2354();
    return (id)Section<>.init(header:footer:content:)(&v40, v39, sub_1002C2828, v31, v27, v28, v27, v29, v30, v29);
  }
  result = (id)_DocumentManagerBundle(a1);
  if (result)
  {
    v12 = result;
    v42._object = (void *)0x8000000100523870;
    v13._countAndFlagsBits = 0x6465636E61766441;
    v13._object = (void *)0xE800000000000000;
    v14.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v14.value._object = (void *)0xEB00000000656C62;
    v15._countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    v42._countAndFlagsBits = 0xD000000000000033;
    v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, v14, (NSBundle)v12, v15, v42);

    v40 = v16;
    v17 = sub_10008B9BC();
    v40._countAndFlagsBits = Text.init<A>(_:)(&v40, &type metadata for String, v17);
    v40._object = v18;
    *(_QWORD *)&v41 = v19 & 1;
    *((_QWORD *)&v41 + 1) = v20;
    result = (id)_DocumentManagerBundle(v40._countAndFlagsBits);
    if (result)
    {
      v21 = result;
      v22._countAndFlagsBits = 0xD000000000000077;
      v43._object = (void *)0x8000000100523930;
      v22._object = (void *)0x80000001005238B0;
      v23.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v23.value._object = (void *)0xEB00000000656C62;
      v24._countAndFlagsBits = 0;
      v24._object = (void *)0xE000000000000000;
      v43._countAndFlagsBits = 0xD000000000000033;
      v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, v23, (NSBundle)v21, v24, v43);

      v38 = v25;
      v7 = Text.init<A>(_:)(&v38, &type metadata for String, v17);
      v9 = v26 & 1;
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

__n128 sub_1002C208C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __n128 result;
  unsigned int v39;
  double v40;
  double v41;
  double v42;
  double v43;
  _OWORD v44[7];

  v16 = v15;
  v18 = a15;
  v19 = a12;
  v20 = a10;
  v21 = a2 & 1;
  v22 = a1;
  if ((_DWORD)v21)
    v22 = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = v22;
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (v22 > v24 || v24 > v27)
    goto LABEL_22;
  v29 = a7;
  if ((a8 & 1) != 0)
    v29 = -INFINITY;
  v30 = a10;
  if ((a11 & 1) != 0)
    v30 = v29;
  v31 = a12;
  if ((a13 & 1) != 0)
    v31 = v30;
  if (v29 > v30 || v30 > v31)
  {
LABEL_22:
    v42 = a5;
    v43 = a7;
    v41 = a3;
    v40 = a1;
    v39 = v21;
    v33 = static os_log_type_t.fault.getter();
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a15;
    v21 = v39;
    a1 = v40;
    v20 = a10;
    a3 = v41;
    v19 = a12;
    a5 = v42;
    a7 = v43;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, *(_QWORD *)&a1, v21, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, *(_QWORD *)&a7, v26, *(_QWORD *)&v20, a11 & 1, *(_QWORD *)&v19, a13 & 1, a14, v18);
  sub_1000271D4(v16, a9, &qword_10064D110);
  v35 = a9 + *(int *)(sub_10006922C(&qword_10064D118) + 36);
  v36 = v44[5];
  *(_OWORD *)(v35 + 64) = v44[4];
  *(_OWORD *)(v35 + 80) = v36;
  *(_OWORD *)(v35 + 96) = v44[6];
  v37 = v44[1];
  *(_OWORD *)v35 = v44[0];
  *(_OWORD *)(v35 + 16) = v37;
  result = (__n128)v44[3];
  *(_OWORD *)(v35 + 32) = v44[2];
  *(__n128 *)(v35 + 48) = result;
  return result;
}

uint64_t sub_1002C2250()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_1002C2268@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1002C1A0C(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, *(double *)(v2 + 16));
}

uint64_t sub_1002C227C()
{
  return sub_1002C2D54(sub_1002C1D48);
}

unint64_t sub_1002C2288()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064D130;
  if (!qword_10064D130)
  {
    v1 = sub_10007E830(&qword_10064D138);
    sub_1002C22F8();
    sub_1002C2354();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10064D130);
  }
  return result;
}

unint64_t sub_1002C22F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064D140;
  if (!qword_10064D140)
  {
    v1 = sub_10007E830(&qword_10064D148);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10064D140);
  }
  return result;
}

unint64_t sub_1002C2354()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064D150;
  if (!qword_10064D150)
  {
    v1 = sub_10007E830(&qword_10064D158);
    sub_1002C23C0();
    sub_1002C2564();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10064D150);
  }
  return result;
}

unint64_t sub_1002C23C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064D160;
  if (!qword_10064D160)
  {
    v1 = sub_10007E830(&qword_10064D168);
    sub_100062698(&qword_10064D170, &qword_10064D178, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    sub_1002C2464(&qword_10064D180, &qword_10064D188, (void (*)(void))sub_1002C24C8, (uint64_t)&protocol conformance descriptor for <A> A?);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10064D160);
  }
  return result;
}

uint64_t sub_1002C2464(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10007E830(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002C24C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064D190;
  if (!qword_10064D190)
  {
    v1 = sub_10007E830(&qword_10064D198);
    sub_100062698(&qword_10064D1A0, &qword_10064D1A8, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
    sub_10005A360(&qword_10064D1B0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10064D190);
  }
  return result;
}

unint64_t sub_1002C2564()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064D1B8;
  if (!qword_10064D1B8)
  {
    v1 = sub_10007E830(&qword_10064D1C0);
    sub_100062698(&qword_10064D1C8, &qword_10064D1D0, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    sub_10005A360(&qword_10064D1B0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10064D1B8);
  }
  return result;
}

unint64_t sub_1002C2600()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064D1E8;
  if (!qword_10064D1E8)
  {
    v1 = sub_10007E830(&qword_10064D118);
    sub_1002C266C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10064D1E8);
  }
  return result;
}

unint64_t sub_1002C266C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10064D1F0;
  if (!qword_10064D1F0)
  {
    v1 = sub_10007E830(&qword_10064D110);
    v2[0] = sub_10007E830(&qword_10064D100);
    v2[1] = sub_100062698(&qword_10064D1D8, &qword_10064D100, (uint64_t)&protocol conformance descriptor for List<A, B>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.scrollContentBackground(_:)>>, 1);
    sub_100062698(&qword_10064D1F8, &qword_10064D1E0, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10064D1F0);
  }
  return result;
}

uint64_t sub_1002C2738(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for Image.Scale(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.imageScale.setter(v4);
}

uint64_t sub_1002C27B4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002C27D8(uint64_t a1)
{
  return sub_1002C30C0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, double))sub_1002C1E6C);
}

unint64_t sub_1002C27E4()
{
  unint64_t result;

  result = qword_10064D210;
  if (!qword_10064D210)
  {
    result = swift_getWitnessTable(&unk_1004E4138, &type metadata for DOCViewOptionsSection);
    atomic_store(result, (unint64_t *)&qword_10064D210);
  }
  return result;
}

uint64_t sub_1002C2828@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1002BF740(*(unsigned __int8 *)(v1 + 56), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24), a1);
}

uint64_t sub_1002C283C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 112))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result & 1;
  return result;
}

uint64_t sub_1002C2878(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a4 + a3 - 8) + 120))(*a1, *(_QWORD *)(a4 + a3 - 16));
}

uint64_t sub_1002C28AC()
{
  return 16;
}

__n128 sub_1002C28B8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1002C28C4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 232))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result & 1;
  return result;
}

uint64_t sub_1002C2900(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a4 + a3 - 8) + 240))(*a1, *(_QWORD *)(a4 + a3 - 16));
}

uint64_t sub_1002C2934()
{
  return 16;
}

__n128 sub_1002C2940(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1002C294C()
{
  return sub_1002C2D54(sub_1002C17B8);
}

unint64_t sub_1002C2958()
{
  unint64_t result;

  result = qword_10064D268;
  if (!qword_10064D268)
  {
    result = swift_getWitnessTable(&unk_1004E5DD8, &type metadata for DOCBrowserLayoutConfiguration.SizeSetting);
    atomic_store(result, (unint64_t *)&qword_10064D268);
  }
  return result;
}

unint64_t sub_1002C299C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064D270;
  if (!qword_10064D270)
  {
    v1 = sub_10007E830(&qword_10064D260);
    sub_1002C2E28(&qword_10064D278, &qword_10064D280, (void (*)(void))sub_1002C2A18);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10064D270);
  }
  return result;
}

unint64_t sub_1002C2A18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064D288;
  if (!qword_10064D288)
  {
    v1 = sub_10007E830(&qword_10064D290);
    sub_1002C2F50(&qword_10064D298, &qword_10064D2A0, &qword_10064D2A8, &qword_10064D2B0);
    sub_100062698(&qword_10064D2B8, &qword_10064D2C0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10064D288);
  }
  return result;
}

uint64_t sub_1002C2ABC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 176))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  return result;
}

uint64_t sub_1002C2AF4(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a4 + a3 - 8) + 184))(*a1, *(_QWORD *)(a4 + a3 - 16));
}

uint64_t sub_1002C2B28()
{
  return 16;
}

__n128 sub_1002C2B34(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1002C2B40()
{
  return sub_1002C2D54(sub_1002C0B98);
}

uint64_t sub_1002C2B4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1002C131C(v1[5], v1[2], v1[3], a1);
}

uint64_t sub_1002C2B5C()
{
  return sub_1002C2D54((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, double))sub_1002C13B0);
}

unint64_t sub_1002C2B68()
{
  unint64_t result;

  result = qword_10064D2D8;
  if (!qword_10064D2D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DOCItemSortMode, &type metadata for DOCItemSortMode);
    atomic_store(result, (unint64_t *)&qword_10064D2D8);
  }
  return result;
}

unint64_t sub_1002C2BAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064D2E0;
  if (!qword_10064D2E0)
  {
    v1 = sub_10007E830(&qword_10064D2C8);
    sub_100062698(&qword_10064D2E8, &qword_10064D2F0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10064D2E0);
  }
  return result;
}

unint64_t sub_1002C2C28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064D308;
  if (!qword_10064D308)
  {
    v1 = sub_10007E830(&qword_10064D248);
    sub_100062698(&qword_10064D300, &qword_10064D240, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
    sub_10005A360(&qword_10064D1B0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10064D308);
  }
  return result;
}

uint64_t sub_1002C2CC4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 144))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  return result;
}

uint64_t sub_1002C2CFC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a4 + a3 - 8) + 152))(*a1, *(_QWORD *)(a4 + a3 - 16));
}

uint64_t sub_1002C2D30()
{
  return 16;
}

__n128 sub_1002C2D3C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1002C2D48()
{
  return sub_1002C2D54(sub_1002C1564);
}

uint64_t sub_1002C2D54(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, double))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(double *)(v1 + 48));
}

unint64_t sub_1002C2D68()
{
  unint64_t result;

  result = qword_10064D318;
  if (!qword_10064D318)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DOCItemGroupingBehavior, &type metadata for DOCItemGroupingBehavior);
    atomic_store(result, (unint64_t *)&qword_10064D318);
  }
  return result;
}

unint64_t sub_1002C2DAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064D320;
  if (!qword_10064D320)
  {
    v1 = sub_10007E830(&qword_10064D310);
    sub_1002C2E28(&qword_10064D328, &qword_10064D330, (void (*)(void))sub_1002C2EAC);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10064D320);
  }
  return result;
}

uint64_t sub_1002C2E28(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10007E830(a2);
    a3();
    sub_10005A360(&qword_10064D1B0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002C2EAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064D338;
  if (!qword_10064D338)
  {
    v1 = sub_10007E830(&qword_10064D340);
    sub_1002C2F50(&qword_10064D348, &qword_10064D350, &qword_10064D358, &qword_10064D360);
    sub_100062698(&qword_10064D368, &qword_10064D370, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10064D338);
  }
  return result;
}

uint64_t sub_1002C2F50(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10007E830(a2);
    sub_100062698(a3, a4, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002C2FD0(uint64_t a1)
{
  return sub_1002C30C0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, double))sub_1002C16A0);
}

unint64_t sub_1002C2FDC()
{
  unint64_t result;

  result = qword_10064D398;
  if (!qword_10064D398)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DOCItemGroupingBehavior, &type metadata for DOCItemGroupingBehavior);
    atomic_store(result, (unint64_t *)&qword_10064D398);
  }
  return result;
}

uint64_t sub_1002C3020(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_1002C3030(uint64_t a1)
{
  return sub_1002C30C0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, double))sub_1002C0CD4);
}

unint64_t sub_1002C303C()
{
  unint64_t result;

  result = qword_10064D3B0;
  if (!qword_10064D3B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DOCItemSortMode, &type metadata for DOCItemSortMode);
    atomic_store(result, (unint64_t *)&qword_10064D3B0);
  }
  return result;
}

uint64_t sub_1002C3080(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1002C3090()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_1002C30B4(uint64_t a1)
{
  return sub_1002C30C0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, double))sub_1002C18F4);
}

uint64_t sub_1002C30C0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, double))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(double *)(v2 + 48));
}

unint64_t sub_1002C30D4()
{
  unint64_t result;

  result = qword_10064D3F0;
  if (!qword_10064D3F0)
  {
    result = swift_getWitnessTable(&unk_1004E5EA8, &type metadata for DOCBrowserLayoutConfiguration.SizeSetting);
    atomic_store(result, (unint64_t *)&qword_10064D3F0);
  }
  return result;
}

uint64_t sub_1002C3118()
{
  _QWORD v1[2];

  v1[0] = sub_10007E830(&qword_10064D118);
  v1[1] = sub_1002C2600();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.listSizesToFit(maxHeight:)>>, 1);
}

void sub_1002C3170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  Class isa;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];
  uint64_t v10;

  sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v9[4] = a2;
  v10 = a3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_10016C02C;
  v9[3] = &unk_1005DA590;
  v7 = _Block_copy(v9);
  v8 = v10;
  swift_retain();
  objc_msgSend(v3, "revealWithItems:selectEvenIfVisible:completionBlock:", isa, 0, v7, swift_release(v8).n128_f64[0]);
  _Block_release(v7);

}

uint64_t DOCBrowserContainerController.containedItemCollectionViewController.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _BYTE v7[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController);
  swift_beginAccess(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController, v7, 0, 0);
  v2 = *v1;
  if (!v2)
    return 0;
  v3 = type metadata accessor for DOCItemCollectionViewController(0);
  v4 = swift_dynamicCastClass(v2, v3);
  if (v4)
    v5 = v2;
  return v4;
}

id sub_1002C3518()
{
  return sub_1000DB3A0(type metadata accessor for DOCNullTransitionable);
}

Swift::Int sub_1002C3538(unint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  _QWORD v14[9];

  Hasher.init(_seed:)(v14, 0);
  v2 = 0xE700000000000000;
  v3 = 0x676E6964616F6CLL;
  switch(a1)
  {
    case 0uLL:
      break;
    case 1uLL:
      v3 = 0x746E65746E6F63;
      break;
    case 2uLL:
      v2 = 0x8000000100523C20;
      v3 = 0xD000000000000010;
      break;
    case 3uLL:
      v2 = 0xE500000000000000;
      v3 = 0x7974706D65;
      break;
    case 4uLL:
      v2 = 0xEA0000000000676ELL;
      v3 = 0x697265766F636572;
      break;
    default:
      swift_errorRetain(a1);
      v4 = (void *)_convertErrorToNSError(_:)(a1);
      v5 = objc_msgSend(v4, "domain");
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v8 = v7;

      objc_msgSend(v4, "code");
      v9 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v11 = v10;
      swift_bridgeObjectRetain(v8);
      v12._countAndFlagsBits = v9;
      v12._object = v11;
      String.append(_:)(v12);

      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v11);
      sub_1000A851C(a1);
      v3 = v6;
      v2 = v8;
      break;
  }
  String.hash(into:)(v14, v3, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

Swift::Int sub_1002C36F0()
{
  unint64_t *v0;

  return sub_1002C3538(*v0);
}

double sub_1002C36F8(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = sub_1000A855C(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int sub_1002C3738(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_1000A855C(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1002C3794(uint64_t *a1, unint64_t *a2)
{
  return sub_1002C6DC4(*a1, *a2);
}

unint64_t sub_1002C37A0@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_1002C74F0(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void *DOCBrowserContainerController.contentViewController.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController);
  swift_beginAccess(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DOCBrowserContainerController.contentViewController.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController);
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*DOCBrowserContainerController.contentViewController.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController, a1, 33, 0);
  return j__swift_endAccess;
}

void sub_1002C395C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  double v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v2 = v1;
  v20 = OBJC_IVAR____TtC5Files29DOCBrowserContainerController_allowsPickingMultipleItems;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_allowsPickingMultipleItems) = a1;
  v3 = (uint64_t)sub_100056180();
  v4 = v3;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 >= 0)
      v3 &= 0xFFFFFFFFFFFFFF8uLL;
    v5 = _CocoaArrayWrapper.endIndex.getter(v3);
    if (v5)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease(v4);
    return;
  }
  v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    goto LABEL_20;
LABEL_3:
  if (v5 < 1)
  {
    __break(1u);
  }
  else
  {
    for (i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
        v7 = (unsigned __int8 *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
      else
        v7 = (unsigned __int8 *)*(id *)(v4 + 8 * i + 32);
      v8 = v7;
      v7[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_allowsPickingMultipleItems] = *(_BYTE *)(v2 + v20);
      v9 = OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_needsOverlayUpdateWithAnimation;
      v10 = v7[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_needsOverlayUpdateWithAnimation];
      if (v10 != 2)
      {
        v11 = sub_10002DA34();
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 152))(v11);
        *(_QWORD *)&v13 = swift_release(v11).n128_u64[0];
        if ((v12 & 1) == 0 && (objc_msgSend(v8, "doc_hasAppearedOrIsAppearing", v13) & 1) != 0)
        {
          v21 = v8;
          v14 = type metadata accessor for DOCBrowserContainedViewController();
          v15 = v8;
          v16 = sub_10006922C(&qword_10064D510);
          if (swift_dynamicCast(&v22, &v21, v14, v16, 6))
          {
            v17 = v10 & 1;
            v18 = *((_QWORD *)&v23 + 1);
            v19 = v24;
            sub_10007E7A0(&v22, *((uint64_t *)&v23 + 1));
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 8))(v17, v18, v19);
            sub_100068588(&v22);
          }
          else
          {
            v24 = 0;
            v22 = 0u;
            v23 = 0u;
            sub_1001F7F28((uint64_t)&v22);
          }
          *((_BYTE *)v8 + v9) = 2;
        }
      }

    }
    swift_bridgeObjectRelease(v4);
  }
}

void sub_1002C3B58(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *Strong;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  char v12;

  v3 = v2 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_viewControllerBecomingVisible;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3, a2);
  v5 = swift_unknownObjectWeakAssign(v3, a1);
  v7 = (void *)swift_unknownObjectWeakLoadStrong(v5, v6);
  if (v7)
  {
    v9 = v7;
    if (Strong)
    {
      type metadata accessor for DOCBrowserContainedViewController();
      v10 = Strong;
      v11 = v9;
      v12 = static NSObject.== infix(_:_:)(v11, v10);

      if ((v12 & 1) != 0)
        goto LABEL_9;
    }
    else
    {

    }
  }
  else if (!Strong)
  {
    goto LABEL_10;
  }
  sub_1002C3CF4((uint64_t)v7, v8);
  v10 = Strong;
LABEL_9:

LABEL_10:
}

void sub_1002C3C24(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *Strong;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v2 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_visibleViewController;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3, a2);
  v5 = swift_unknownObjectWeakAssign(v3, a1);
  v7 = (void *)swift_unknownObjectWeakLoadStrong(v5, v6);
  if (v7)
  {
    v8 = v7;
    if (Strong)
    {
      type metadata accessor for DOCBrowserContainedViewController();
      v9 = Strong;
      v10 = v8;
      v11 = static NSObject.== infix(_:_:)(v10, v9);

      if ((v11 & 1) != 0)
        goto LABEL_9;
    }
    else
    {

    }
  }
  else if (!Strong)
  {
    goto LABEL_10;
  }
  sub_10009EDA0();
  sub_1002C3CF4(v12, v13);
  v9 = Strong;
LABEL_9:

LABEL_10:
}

void sub_1002C3CF4(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  void *Strong;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_viewControllerBecomingVisible], a2);
  v5 = Strong;
  if (Strong)
    goto LABEL_4;
  v6 = (void *)swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_visibleViewController], v3);
  if (v6)
  {
    v5 = v6;
LABEL_4:
    v7 = Strong;
    v8 = objc_msgSend(v5, "contentScrollViewForEdge:", 1);

    goto LABEL_5;
  }
  v8 = 0;
  v5 = 0;
LABEL_5:
  objc_msgSend(v2, "setContentScrollView:forEdge:", v8, 1);

  if (v5)
    v9 = objc_msgSend(v5, "contentScrollViewForEdge:", 4);
  else
    v9 = 0;
  v10 = v9;
  objc_msgSend(v2, "setContentScrollView:forEdge:");

}

unint64_t sub_1002C3DF0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  char v15;
  uint64_t v16;
  void (*v17)(unint64_t, __n128);
  uint64_t v18;
  __n128 v19;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_state);
  result = 0x746E65746E6F63;
  v4 = 0xE700000000000000;
  v5 = 0x676E6964616F6CLL;
  switch(v2)
  {
    case 0uLL:
      goto LABEL_5;
    case 1uLL:
      goto LABEL_10;
    case 2uLL:
      v4 = 0x8000000100523C20;
      result = 0xD000000000000010;
      goto LABEL_10;
    case 3uLL:
      result = 0x7974706D65;
      v4 = 0xE500000000000000;
      goto LABEL_10;
    case 4uLL:
      result = 0x697265766F636572;
      v4 = 0xEA0000000000676ELL;
      goto LABEL_10;
    case 5uLL:
      return result;
    default:
      sub_1000A850C(v2);
      swift_errorRetain(v2);
      v6 = (void *)_convertErrorToNSError(_:)(v2);
      v7 = objc_msgSend(v6, "domain");
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v10 = v9;

      objc_msgSend(v6, "code");
      v11 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v13 = v12;
      swift_bridgeObjectRetain(v10);
      v14._countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);

      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v13);
      sub_1000A853C(v2);
      v5 = v8;
      v4 = v10;
LABEL_5:
      if (v5 == 0x676E6964616F6CLL)
      {
        result = 0x676E6964616F6CLL;
        if (v4 == 0xE700000000000000)
        {
          swift_bridgeObjectRelease(0xE700000000000000);
          return sub_1000A853C(v2);
        }
      }
      else
      {
        result = v5;
      }
LABEL_10:
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)(result, v4, 0x676E6964616F6CLL, 0xE700000000000000, 0);
      swift_bridgeObjectRelease(v4);
      if ((v15 & 1) == 0)
      {
        v16 = v1 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_stateReporting;
        v17 = *(void (**)(unint64_t, __n128))(v1
                                                              + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_stateReporting);
        if (v17)
        {
          v18 = *(_QWORD *)(v16 + 8);
          v19 = swift_retain();
          v17(v2, v19);
          sub_100087534((uint64_t)v17, v18);
        }
      }
      return sub_1000A853C(v2);
  }
}

_QWORD *DOCBrowserContainerController.preferredFocusEnvironments.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  _QWORD *v8;
  _BYTE v9[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController);
  swift_beginAccess(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController, v9, 0, 0);
  v2 = *v1;
  if (*v1)
  {
    v3 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v4 = swift_allocObject(v3, 40, 7);
    *(_OWORD *)(v4 + 16) = xmmword_1004D9B40;
    *(_QWORD *)(v4 + 32) = v2;
    v8 = (_QWORD *)v4;
    specialized Array._endMutation()(v4);
    v5 = v8;
  }
  else
  {
    v5 = _swiftEmptyArrayStorage;
  }
  v6 = v2;
  return v5;
}

void sub_1002C41EC(char *a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  v9 = sub_10004F2F0(0, (unint64_t *)&qword_1006475F0, UIBarButtonItem_ptr);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v9);
  v11 = *(_QWORD *)&a1[*a4];
  *(_QWORD *)&a1[*a4] = v10;
  v12 = a1;
  swift_bridgeObjectRelease(v11);
  sub_1002C4278(a4, a5);

}

uint64_t sub_1002C4278(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  id v15;
  id v16;
  int v17;
  uint64_t v18;
  char v19;
  double v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v3 = (uint64_t)sub_100056180();
  v4 = v3;
  if (!((unint64_t)v3 >> 62))
  {
    v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v3);
    if (v5)
      goto LABEL_3;
    return swift_bridgeObjectRelease_n(v4, 2);
  }
  if (v3 < 0)
    v27 = v3;
  else
    v27 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  result = _CocoaArrayWrapper.endIndex.getter(v27);
  v5 = result;
  if (!result)
    return swift_bridgeObjectRelease_n(v4, 2);
LABEL_3:
  if (v5 >= 1)
  {
    v7 = 0;
    v8 = *a1;
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
        v9 = (_BYTE *)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v4);
      else
        v9 = *(id *)(v4 + 8 * v7 + 32);
      v10 = v9;
      v11 = *(_QWORD *)(v28 + v8);
      v12 = *(_QWORD *)&v10[*a2];
      *(_QWORD *)&v10[*a2] = v11;
      swift_bridgeObjectRetain(v11);
      *(_QWORD *)&v13 = swift_bridgeObjectRelease(v12).n128_u64[0];
      v14 = OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_needsOverlayUpdateWithAnimation;
      v10[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_needsOverlayUpdateWithAnimation] = 0;
      v15 = objc_msgSend(v10, "viewIfLoaded", v13);
      v16 = objc_msgSend(v15, "window");

      if (v16)
      {
        v17 = v10[v14];
        if (v17 != 2)
        {
          v18 = sub_10002DA34();
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 152))(v18);
          *(_QWORD *)&v20 = swift_release(v18).n128_u64[0];
          if ((v19 & 1) == 0)
          {
            if (objc_msgSend(v10, "doc_hasAppearedOrIsAppearing", v20))
            {
              v30 = v10;
              v21 = type metadata accessor for DOCBrowserContainedViewController();
              v22 = v10;
              v23 = sub_10006922C(&qword_10064D510);
              if (swift_dynamicCast(&v31, &v30, v21, v23, 6))
              {
                v24 = v17 & 1;
                v26 = *((_QWORD *)&v32 + 1);
                v25 = v33;
                sub_10007E7A0(&v31, *((uint64_t *)&v32 + 1));
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 8))(v24, v26, v25);
                sub_100068588(&v31);
              }
              else
              {
                v33 = 0;
                v31 = 0u;
                v32 = 0u;
                sub_1001F7F28((uint64_t)&v31);
              }
              v10[v14] = 2;
            }
          }
        }
      }

      ++v7;
    }
    while (v5 != v7);
    return swift_bridgeObjectRelease_n(v4, 2);
  }
  __break(1u);
  return result;
}

char *sub_1002C44B0(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  objc_class *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  void *v30;
  void **v31;
  void *v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  objc_super v43;

  v40 = a1;
  v41 = a2;
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v38 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController] = 0;
  v2[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_allowsPickingMultipleItems] = 0;
  swift_unknownObjectWeakInit(&v2[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_viewControllerBecomingVisible]);
  swift_unknownObjectWeakInit(&v2[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_visibleViewController]);
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_state] = 5;
  v37 = OBJC_IVAR____TtC5Files29DOCBrowserContainerController_queue;
  sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v12 = v2;
  v36 = static OS_dispatch_queue.main.getter(v12);
  static DispatchQoS.unspecified.getter(v36);
  v42[0] = _swiftEmptyArrayStorage;
  v13 = sub_100062658((unint64_t *)&qword_100643640, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10006922C((uint64_t *)&unk_100641280);
  v15 = sub_100062698((unint64_t *)&qword_100643650, (uint64_t *)&unk_100641280, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v42, v14, v15, v6, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v39);
  v16 = v40;
  v17 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000028, 0x800000010050C070, v11, v8, v5, v36);
  *(_QWORD *)&v2[v37] = v17;
  v18 = &v12[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_stateReporting];
  *v18 = 0;
  v18[1] = 0;
  swift_unknownObjectWeakInit(&v12[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_actionReporting]);
  v19 = &v12[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_overlayDelegate];
  *((_QWORD *)v19 + 1) = 0;
  swift_unknownObjectWeakInit(v19);
  v12[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_preventAppearanceForwarding] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_additionalLeadingNavigationBarButtonItems] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v12[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_additionalTrailingNavigationBarButtonItems] = _swiftEmptyArrayStorage;
  v12[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_isUserInteractionEnabled] = 1;
  *(_QWORD *)&v12[OBJC_IVAR____TtC5Files29DOCBrowserContainerController__containerNavigationItem] = 0;
  v20 = &v12[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_dataSource];
  v21 = v41;
  *v20 = v16;
  v20[1] = v21;
  swift_unknownObjectRetain(v16);

  v22 = (objc_class *)type metadata accessor for DOCBrowserContainerController();
  v43.receiver = v12;
  v43.super_class = v22;
  v23 = v21;
  v24 = objc_msgSendSuper2(&v43, "init");
  ObjectType = swift_getObjectType(v16, v25);
  v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 8);
  v28 = (char *)v24;
  v29 = v27(1, ObjectType, v23);
  if (v29)
  {
    v30 = (void *)v29;
    v31 = (void **)&v28[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
    swift_beginAccess(&v28[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v42, 1, 0);
    v32 = *v31;
    *v31 = v30;
    v33 = v30;

    swift_unknownObjectWeakAssign(&v28[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_visibleViewController], v33);
    sub_100054EB4(v33, 0);

  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v23 + 40))(ObjectType, v23) & 1) != 0)
  {
    sub_10000C9E0();
    if (*(_QWORD *)&v28[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_state] == 5)
      sub_100034DFC(0, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(1, ObjectType, v23);
  }
  sub_10002DE50();

  swift_unknownObjectRelease(v16);
  return v28;
}

uint64_t DOCBrowserContainerController.description.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  objc_super v14;
  uint64_t v15;
  uint64_t v16;

  v14.receiver = v0;
  v14.super_class = (Class)type metadata accessor for DOCBrowserContainerController();
  v1 = objc_msgSendSuper2(&v14, "description");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  v15 = v2;
  v16 = v4;
  v5 = objc_msgSend(v0, "navigationItem");
  v6 = objc_msgSend(v5, "title");

  if (v6)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

  }
  else
  {
    v9 = (void *)0xEA00000000002964;
    v7 = 0x656C7469746E7528;
  }
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 34;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 8736;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(0xE200000000000000);
  return v15;
}

id sub_1002C4AB4()
{
  return sub_1000DB3A0(type metadata accessor for DOCBrowserContainerController.DOCBrowserContainerControllerView);
}

Swift::Void __swiftcall DOCBrowserContainerController.loadView()()
{
  void *v0;
  uint64_t v1;
  id v2;

  v1 = type metadata accessor for DOCBrowserContainerController.DOCBrowserContainerControllerView();
  v2 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)), "init");
  objc_msgSend(v0, "setView:", v2);

}

Swift::Void __swiftcall DOCBrowserContainerController.viewDidLoad()()
{
  char *v0;
  uint64_t v1;
  uint64_t ObjectType;
  objc_super v3;

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for DOCBrowserContainerController();
  objc_msgSendSuper2(&v3, "viewDidLoad");
  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_dataSource + 8];
  ObjectType = swift_getObjectType(*(_QWORD *)&v0[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_dataSource]);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v1 + 40))(ObjectType, v1) & 1) == 0)
  {
    sub_10000C9E0();
    if (*(_QWORD *)&v0[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_state] == 5)
      sub_100034DFC(0, 0, 0);
  }
}

void sub_1002C4BA8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2;
  sub_1002C3C24(a2, v4);
  sub_1002C3B58(0, v5);
}

Swift::Void __swiftcall DOCBrowserContainerController.setEditing(_:animated:)(Swift::Bool _, Swift::Bool animated)
{
  char *v2;
  _BOOL8 v5;
  _BOOL8 v6;
  id *v7;
  double v8;
  _BYTE v9[24];
  objc_super v10;

  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for DOCBrowserContainerController();
  v5 = _;
  v6 = animated;
  objc_msgSendSuper2(&v10, "setEditing:animated:", v5, v6);
  v7 = (id *)&v2[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
  *(_QWORD *)&v8 = swift_beginAccess(v7, v9, 0, 0).n128_u64[0];
  if (*v7)
    objc_msgSend(*v7, "setEditing:animated:", v5, v6, v8);
}

void sub_1002C4C6C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t);
  id v11;
  void *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  char *v18;
  uint64_t v19;
  double v20;
  id v21;
  id v22;
  uint64_t v23;
  double v24;
  id v25;
  id v26;
  void **v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  char v32;
  void *v33;
  uint64_t Strong;
  void *v35;
  id v36;
  char v37;
  uint64_t v38;
  _BYTE v39[24];

  v2 = v1;
  objc_msgSend(a1, "doc_removeFromParentWithRemoveSubviewBlock:", 0);
  v4 = type metadata accessor for DOCBrowserContainedViewController();
  v5 = swift_dynamicCastClass(a1, v4);
  if (v5)
  {
    v7 = (_QWORD *)v5;
    v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_dataSource + 8);
    ObjectType = swift_getObjectType(*(_QWORD *)(v1 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_dataSource), v6);
    v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 32);
    v11 = a1;
    v12 = (void *)v10(ObjectType, v8);

    if (v12)
      objc_msgSend(v7, "setAppearance:", 0);
    (*(void (**)(_QWORD))((swift_isaMask & *v7) + 0x110))(0);
    (*(void (**)(_QWORD, _QWORD))((swift_isaMask & *v7) + 0xE0))(0, 0);
    v13 = (char *)v7 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_viewReusing;
    *((_QWORD *)v13 + 1) = 0;
    swift_unknownObjectWeakAssign(v13, 0);
    v14 = *(void **)((char *)v7 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_containerNavigationItem);
    *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_containerNavigationItem) = 0;

    v15 = OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_needsOverlayUpdateWithAnimation;
    *((_BYTE *)v7 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_needsOverlayUpdateWithAnimation) = 0;
    v16 = objc_msgSend(v7, "viewIfLoaded");
    v17 = objc_msgSend(v16, "window");

    if (v17)
      sub_1000926C8();
    v18 = (char *)v7 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_overlayDelegate;
    *((_QWORD *)v18 + 1) = 0;
    swift_unknownObjectWeakAssign(v18, 0);
    v19 = *(_QWORD *)((char *)v7
                    + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_additionalLeadingNavigationBarButtonItems);
    *(_QWORD *)((char *)v7
              + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_additionalLeadingNavigationBarButtonItems) = _swiftEmptyArrayStorage;
    *(_QWORD *)&v20 = swift_bridgeObjectRelease(v19).n128_u64[0];
    *((_BYTE *)v7 + v15) = 0;
    v21 = objc_msgSend(v7, "viewIfLoaded", v20);
    v22 = objc_msgSend(v21, "window");

    if (v22)
      sub_1000926C8();
    v23 = *(_QWORD *)((char *)v7
                    + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_additionalTrailingNavigationBarButtonItems);
    *(_QWORD *)((char *)v7
              + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_additionalTrailingNavigationBarButtonItems) = _swiftEmptyArrayStorage;
    *(_QWORD *)&v24 = swift_bridgeObjectRelease(v23).n128_u64[0];
    *((_BYTE *)v7 + v15) = 0;
    v25 = objc_msgSend(v7, "viewIfLoaded", v24);
    v26 = objc_msgSend(v25, "window");

    if (v26)
      sub_1000926C8();

  }
  v27 = (void **)(v2 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController);
  swift_beginAccess(v2 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController, v39, 1, 0);
  v29 = *v27;
  if (*v27)
  {
    sub_10004F2F0(0, (unint64_t *)&qword_1006434D0, UIViewController_ptr);
    v30 = a1;
    v31 = v29;
    v32 = static NSObject.== infix(_:_:)(v30, v31);

    if ((v32 & 1) != 0)
    {
      v33 = *v27;
      *v27 = 0;

    }
  }
  Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_visibleViewController, v28);
  if (Strong)
  {
    v35 = (void *)Strong;
    sub_10004F2F0(0, (unint64_t *)&qword_1006434D0, UIViewController_ptr);
    v36 = a1;
    v37 = static NSObject.== infix(_:_:)(v36, v35);

    if ((v37 & 1) != 0)
      sub_1002C3C24(0, v38);
  }
}

Swift::Void __swiftcall DOCBrowserContainerController.willMove(toParent:)(UIViewController_optional toParent)
{
  void *v1;
  void *v2;
  Class isa;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  objc_class *v7;
  uint64_t v8;
  objc_super v9;

  v2 = v1;
  isa = toParent.value.super.super.isa;
  v4 = type metadata accessor for UITraitOverrides(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (objc_class *)type metadata accessor for DOCBrowserContainerController();
  v9.receiver = v2;
  v9.super_class = v7;
  objc_msgSendSuper2(&v9, "willMoveToParentViewController:", isa);
  v8 = type metadata accessor for UITraitHorizontalSizeClass(0);
  UIViewController.traitOverrides.getter();
  UITraitOverrides.remove(_:)(v8, &protocol witness table for UITraitHorizontalSizeClass);
  UIViewController.traitOverrides.setter(v6);
}

Swift::Void __swiftcall DOCBrowserContainerController.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  void *v1;
  Class isa;
  objc_super v3;

  isa = a1.value.super.isa;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for DOCBrowserContainerController();
  objc_msgSendSuper2(&v3, "traitCollectionDidChange:", isa);
  sub_10002DE50();
}

uint64_t sub_1002C5128()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;

  v1 = objc_msgSend(v0, "childViewControllers");
  v2 = sub_10004F2F0(0, (unint64_t *)&qword_1006434D0, UIViewController_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v3);
    if (v4)
      goto LABEL_3;
    return swift_bridgeObjectRelease_n(v3, 2);
  }
  if (v3 < 0)
    v9 = v3;
  else
    v9 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  result = _CocoaArrayWrapper.endIndex.getter(v9);
  v4 = result;
  if (!result)
    return swift_bridgeObjectRelease_n(v3, 2);
LABEL_3:
  if (v4 >= 1)
  {
    v6 = 0;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v3);
      else
        v7 = *(id *)(v3 + 8 * v6 + 32);
      v8 = v7;
      ++v6;
      v10 = v7;
      sub_1002C5254(&v10, v0);

    }
    while (v4 != v6);
    return swift_bridgeObjectRelease_n(v3, 2);
  }
  __break(1u);
  return result;
}

id sub_1002C5254(id *a1, void *a2)
{
  id v3;
  unsigned int v4;
  id result;
  unsigned int v6;

  v3 = *a1;
  v4 = objc_msgSend(*a1, "_appearState");
  result = objc_msgSend(a2, "_appearState");
  if (v4 != (_DWORD)result)
  {
    v6 = objc_msgSend(v3, "_appearState");
    result = objc_msgSend(a2, "_appearState");
    switch(v6)
    {
      case 0u:
        if ((_DWORD)result == 2)
        {
          objc_msgSend(v3, "beginAppearanceTransition:animated:", 1, 0);
          return objc_msgSend(v3, "endAppearanceTransition");
        }
        if ((_DWORD)result == 1)
          goto LABEL_13;
        return result;
      case 1u:
        switch((_DWORD)result)
        {
          case 0:
            objc_msgSend(v3, "endAppearanceTransition");
            objc_msgSend(v3, "beginAppearanceTransition:animated:", 0, 0);
            return objc_msgSend(v3, "endAppearanceTransition");
          case 3:
            objc_msgSend(v3, "endAppearanceTransition");
            return objc_msgSend(v3, "beginAppearanceTransition:animated:", 0, 0);
          case 2:
            return objc_msgSend(v3, "endAppearanceTransition");
        }
        return result;
      case 2u:
        if ((_DWORD)result == 3)
          return objc_msgSend(v3, "beginAppearanceTransition:animated:", 0, 0);
        if (!(_DWORD)result)
        {
          objc_msgSend(v3, "beginAppearanceTransition:animated:", 0, 0);
          return objc_msgSend(v3, "endAppearanceTransition");
        }
        return result;
      case 3u:
        switch((_DWORD)result)
        {
          case 0:
            return objc_msgSend(v3, "endAppearanceTransition");
          case 2:
            objc_msgSend(v3, "endAppearanceTransition");
            objc_msgSend(v3, "beginAppearanceTransition:animated:", 1, 0);
            return objc_msgSend(v3, "endAppearanceTransition");
          case 1:
            objc_msgSend(v3, "endAppearanceTransition");
LABEL_13:
            result = objc_msgSend(v3, "beginAppearanceTransition:animated:", 1, 0);
            break;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

Swift::Void __swiftcall DOCBrowserContainerController.viewIsAppearing(_:)(Swift::Bool a1)
{
  char *v1;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  objc_super v13;

  v13.receiver = v1;
  v13.super_class = (Class)type metadata accessor for DOCBrowserContainerController();
  objc_msgSendSuper2(&v13, "viewIsAppearing:", a1);
  if ((v1[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_preventAppearanceForwarding] & 1) == 0)
  {
    v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Files17DOCViewController_appearStateTracker];
    v4 = v1;
    swift_retain();
    sub_1003B81F0((uint64_t)v4, v3);
    swift_release(v3);

    v5 = objc_msgSend(v4, "childViewControllers");
    v6 = sub_10004F2F0(0, (unint64_t *)&qword_1006434D0, UIViewController_ptr);
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

    if ((unint64_t)v7 >> 62)
    {
      if (v7 < 0)
        v12 = v7;
      else
        v12 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v7);
      v8 = _CocoaArrayWrapper.endIndex.getter(v12);
      if (v8)
        goto LABEL_4;
    }
    else
    {
      v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v7);
      if (v8)
      {
LABEL_4:
        if (v8 < 1)
        {
          __break(1u);
          return;
        }
        v9 = 0;
        do
        {
          if ((v7 & 0xC000000000000001) != 0)
            v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
          else
            v10 = *(id *)(v7 + 8 * v9 + 32);
          v11 = v10;
          ++v9;
          objc_msgSend(v10, "endAppearanceTransition");
          objc_msgSend(v11, "_doc_ipi_updateContentOverlayInsetsForSelfAndChildren");

        }
        while (v8 != v9);
      }
    }
    swift_bridgeObjectRelease_n(v7, 2);
  }
}

id sub_1002C55C0(unsigned __int8 *a1)
{
  id result;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  _QWORD *v16;
  void *v17;
  uint64_t v18;

  result = objc_msgSend(a1, "_doc_ipi_updateContentOverlayInsetsForSelfAndChildren");
  if ((a1[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_preventAppearanceForwarding] & 1) == 0)
  {
    v3 = objc_msgSend(a1, "childViewControllers");
    v4 = sub_10004F2F0(0, (unint64_t *)&qword_1006434D0, UIViewController_ptr);
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    if ((unint64_t)v5 >> 62)
    {
      if (v5 < 0)
        v10 = v5;
      else
        v10 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      result = (id)_CocoaArrayWrapper.endIndex.getter(v10);
      v6 = (uint64_t)result;
      if (!result)
        goto LABEL_14;
    }
    else
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = (id)swift_bridgeObjectRetain(v5);
      if (!v6)
        goto LABEL_14;
    }
    if (v6 < 1)
    {
      __break(1u);
      goto LABEL_29;
    }
    v7 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
      else
        v8 = *(id *)(v5 + 8 * v7 + 32);
      v9 = v8;
      ++v7;
      objc_msgSend(v8, "beginAppearanceTransition:animated:", 1, 0);
      objc_msgSend(v9, "_doc_ipi_updateContentOverlayInsetsForSelfAndChildren");

    }
    while (v6 != v7);
LABEL_14:
    swift_bridgeObjectRelease_n(v5, 2);
    sub_10009EDA0();
    v11 = OBJC_IVAR____TtC5Files29DOCBrowserContainerController_isUserInteractionEnabled;
    a1[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_isUserInteractionEnabled] = 1;
    v12 = (uint64_t)sub_100056180();
    v13 = v12;
    if ((unint64_t)v12 >> 62)
    {
      if (v12 < 0)
        v18 = v12;
      else
        v18 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
      result = (id)_CocoaArrayWrapper.endIndex.getter(v18);
      v14 = (uint64_t)result;
      if (result)
      {
LABEL_16:
        if (v14 >= 1)
        {
          for (i = 0; i != v14; ++i)
          {
            if ((v13 & 0xC000000000000001) != 0)
              v16 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v13);
            else
              v16 = *(id *)(v13 + 8 * i + 32);
            v17 = v16;
            (*(void (**)(_QWORD))((swift_isaMask & *v16) + 0x208))(a1[v11]);

          }
          return (id)swift_bridgeObjectRelease_n(v13, 2);
        }
LABEL_29:
        __break(1u);
        return result;
      }
    }
    else
    {
      v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = (id)swift_bridgeObjectRetain(v12);
      if (v14)
        goto LABEL_16;
    }
    return (id)swift_bridgeObjectRelease_n(v13, 2);
  }
  return result;
}

void sub_1002C5854()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_dataSource));

  swift_unknownObjectWeakDestroy(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_viewControllerBecomingVisible);
  swift_unknownObjectWeakDestroy(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_visibleViewController);
  sub_1000A853C(*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_state));

  sub_100087534(*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_stateReporting), *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_stateReporting + 8));
  sub_10008F5C0(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_actionReporting);
  sub_10008F5C0(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_overlayDelegate);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_additionalLeadingNavigationBarButtonItems));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_additionalTrailingNavigationBarButtonItems));

}

id DOCBrowserContainerController.__deallocating_deinit()
{
  return sub_1000DB3A0(type metadata accessor for DOCBrowserContainerController);
}

void DOCBrowserContainerController.effectiveAppearanceDidChange(_:)(void *a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  objc_super v6;

  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for DOCBrowserContainerController();
  objc_msgSendSuper2(&v6, "effectiveAppearanceDidChange:", a1);
  v3 = objc_msgSend(v1, "viewIfLoaded");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(a1, "backgroundColor");
    objc_msgSend(v4, "setBackgroundColor:", v5);

  }
}

id sub_1002C59F0()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id result;
  void *v17;
  double v18;
  double v19;
  void *v20;
  unsigned __int8 v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;

  v1 = v0;
  v2 = objc_msgSend(v0, "navigationItem");
  v3 = objc_msgSend(v2, "searchController");

  if (!v3)
  {
LABEL_6:
    v7 = objc_msgSend(v1, "childViewControllers");
    v8 = sub_10004F2F0(0, (unint64_t *)&qword_1006434D0, UIViewController_ptr);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

    if ((unint64_t)v9 >> 62)
    {
LABEL_22:
      if (v9 < 0)
        v22 = v9;
      else
        v22 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v9);
      v10 = _CocoaArrayWrapper.endIndex.getter(v22);
      if (v10)
      {
LABEL_8:
        v11 = 4;
        while (1)
        {
          if ((v9 & 0xC000000000000001) != 0)
            v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v9);
          else
            v12 = *(id *)(v9 + 8 * v11);
          v13 = v12;
          v14 = v11 - 3;
          if (__OFADD__(v11 - 4, 1))
          {
            __break(1u);
            goto LABEL_22;
          }
          v15 = swift_dynamicCastObjCProtocolConditional(v12, 1);
          result = objc_msgSend(v13, "view");
          if (!result)
          {
            __break(1u);
LABEL_30:
            __break(1u);
            return result;
          }
          v17 = result;
          objc_msgSend(result, "alpha");
          v19 = v18;

          result = objc_msgSend(v13, "view");
          if (!result)
            goto LABEL_30;
          v20 = result;
          v21 = objc_msgSend(result, "isHidden");

          if (v15)
          {
            if (v19 == 1.0 && (v21 & 1) == 0)
              break;
          }

          ++v11;
          if (v14 == v10)
            goto LABEL_26;
        }
        swift_bridgeObjectRelease_n(v9, 2);
        v6 = (id)swift_dynamicCastObjCProtocolConditional(v13, 1);
        if (v6)
          return v6;
        goto LABEL_27;
      }
    }
    else
    {
      v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v9);
      if (v10)
        goto LABEL_8;
    }
LABEL_26:
    swift_bridgeObjectRelease_n(v9, 2);
    v13 = 0;
LABEL_27:
    _StringGuts.grow(_:)(90);
    v23 = objc_msgSend(v1, "description");
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v26 = v25;

    v27._countAndFlagsBits = v24;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease(v26);
    v28._object = (void *)0x8000000100523E10;
    v28._countAndFlagsBits = 0xD000000000000058;
    String.append(_:)(v28);
    sub_10012B03C(0, 0xE000000000000000);
    swift_bridgeObjectRelease(0xE000000000000000);
    v6 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DOCNullTransitionable()), "init");

    return v6;
  }
  if (!objc_msgSend(v3, "isActive"))
    goto LABEL_5;
  v4 = objc_msgSend(v3, "searchResultsController");

  if (!v4)
    goto LABEL_6;
  v5 = type metadata accessor for DOCItemCollectionViewController(0);
  v6 = (id)swift_dynamicCastClass(v4, v5);
  v3 = v4;
  if (!v6)
  {
LABEL_5:

    goto LABEL_6;
  }
  return v6;
}

void DOCBrowserContainerController.reveal(items:selectEvenIfVisible:completionBlock:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  id v13;
  Class isa;
  void *v15;
  uint64_t v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (_QWORD *)((char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  *v10 = static OS_dispatch_queue.main.getter(v11);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v12 & 1) != 0)
  {
    v13 = sub_1002C59F0();
    sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    aBlock[4] = a3;
    v18 = a4;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10016C02C;
    aBlock[3] = &unk_1005DA118;
    v15 = _Block_copy(aBlock);
    v16 = v18;
    swift_retain();
    objc_msgSend(v13, "revealWithItems:selectEvenIfVisible:completionBlock:", isa, a2 & 1, v15, swift_release(v16).n128_f64[0]);
    _Block_release(v15);
    swift_unknownObjectRelease(v13);

  }
  else
  {
    __break(1u);
  }
}

id sub_1002C654C()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  id result;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;

  v1 = v0;
  v2 = objc_msgSend(v0, "navigationItem");
  v3 = objc_msgSend(v2, "searchController");

  if (!v3)
    goto LABEL_6;
  if (!objc_msgSend(v3, "isActive"))
    goto LABEL_5;
  v4 = objc_msgSend(v3, "searchResultsController");

  if (v4)
  {
    v5 = type metadata accessor for DOCItemCollectionViewController(0);
    result = (id)swift_dynamicCastClass(v4, v5);
    v3 = v4;
    if (result)
      return result;
LABEL_5:

  }
LABEL_6:
  _StringGuts.grow(_:)(70);
  v7 = objc_msgSend(v1, "description");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._object = (void *)0x8000000100523C40;
  v12._countAndFlagsBits = 0xD000000000000044;
  String.append(_:)(v12);
  sub_10012B03C(0, 0xE000000000000000);
  swift_bridgeObjectRelease(0xE000000000000000);
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DOCNullTransitionable()), "init");
}

uint64_t sub_1002C6DC4(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  unint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  char v25;

  v3 = 0x676E6964616F6CLL;
  v4 = 0xE700000000000000;
  v5 = 0x676E6964616F6CLL;
  switch(a1)
  {
    case 0:
      goto LABEL_9;
    case 1:
      v5 = 0x746E65746E6F63;
      if (a2 > 4)
        goto LABEL_13;
      goto LABEL_9;
    case 2:
      v4 = 0x8000000100523C20;
      v5 = 0xD000000000000010;
      if (a2 > 4)
        goto LABEL_13;
      goto LABEL_9;
    case 3:
      v4 = 0xE500000000000000;
      v5 = 0x7974706D65;
      goto LABEL_9;
    case 4:
      v5 = 0x697265766F636572;
      v4 = 0xEA0000000000676ELL;
      if (a2 > 4)
        goto LABEL_13;
      goto LABEL_9;
    default:
      swift_errorRetain(0x676E6964616F6CLL);
      v6 = (void *)_convertErrorToNSError(_:)(0x676E6964616F6CLL);
      v7 = objc_msgSend(v6, "domain");
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v10 = v9;

      objc_msgSend(v6, "code");
      v11 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v13 = v12;
      swift_bridgeObjectRetain(v10);
      v14._countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);

      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v13);
      sub_1000A851C(0x676E6964616F6CuLL);
      v5 = v8;
      v4 = v10;
      if (a2 <= 4)
      {
LABEL_9:
        v15 = 0xE700000000000000;
        switch(a2)
        {
          case 0uLL:
            break;
          case 1uLL:
            v3 = 0x746E65746E6F63;
            if (v5 != 0x746E65746E6F63)
              goto LABEL_22;
            goto LABEL_19;
          case 2uLL:
            v15 = 0x8000000100523C20;
            v3 = 0xD000000000000010;
            if (v5 != 0xD000000000000010)
              goto LABEL_22;
            goto LABEL_19;
          case 3uLL:
            v15 = 0xE500000000000000;
            v3 = 0x7974706D65;
            break;
          case 4uLL:
            v3 = 0x697265766F636572;
            v15 = 0xEA0000000000676ELL;
            if (v5 != 0x697265766F636572)
              goto LABEL_22;
            goto LABEL_19;
          default:
            goto LABEL_13;
        }
        if (v5 != v3)
          goto LABEL_22;
      }
      else
      {
LABEL_13:
        swift_errorRetain(a2);
        v16 = (void *)_convertErrorToNSError(_:)(a2);
        v17 = objc_msgSend(v16, "domain");
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        v20 = v19;

        objc_msgSend(v16, "code");
        v21 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v23 = v22;
        swift_bridgeObjectRetain(v20);
        v24._countAndFlagsBits = v21;
        v24._object = v23;
        String.append(_:)(v24);

        swift_bridgeObjectRelease(v20);
        swift_bridgeObjectRelease(v23);
        sub_1000A851C(a2);
        v3 = v18;
        v15 = v20;
        if (v5 != v18)
          goto LABEL_22;
      }
LABEL_19:
      if (v4 == v15)
      {
        v25 = 1;
        v15 = v4;
        goto LABEL_23;
      }
LABEL_22:
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v4, v3, v15, 0);
LABEL_23:
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v15);
      return v25 & 1;
  }
}

void sub_1002C7138(void *a1)
{
  char *v1;
  char *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  _BYTE *v10;
  _BYTE *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  char **v18;
  id v19;
  id v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v2 = v1;
  v3 = *(void **)&v1[OBJC_IVAR____TtC5Files29DOCBrowserContainerController__containerNavigationItem];
  v43 = OBJC_IVAR____TtC5Files29DOCBrowserContainerController__containerNavigationItem;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Files29DOCBrowserContainerController__containerNavigationItem] = a1;
  v4 = a1;

  v5 = (uint64_t)sub_100056180();
  v6 = v5;
  if (!((unint64_t)v5 >> 62))
  {
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v5);
    if (v7)
      goto LABEL_3;
LABEL_32:
    swift_bridgeObjectRelease_n(v6, 2);
    sub_10002DE50();
    return;
  }
  if (v5 < 0)
    v41 = v5;
  else
    v41 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v41);
  if (!v7)
    goto LABEL_32;
LABEL_3:
  if (v7 >= 1)
  {
    v8 = 0;
    v42 = v7;
    v9 = &selRef_objectForKey_ofClass_;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v10 = (_BYTE *)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
      else
        v10 = *(id *)(v6 + 8 * v8 + 32);
      v11 = v10;
      v12 = *(void **)&v2[v43];
      if (v12)
        v13 = *(id *)&v2[v43];
      else
        v13 = objc_msgSend(v2, "navigationItem");
      v14 = *(void **)&v11[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_containerNavigationItem];
      *(_QWORD *)&v11[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_containerNavigationItem] = v13;
      v15 = v13;
      v16 = v12;

      v17 = OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_needsOverlayUpdateWithAnimation;
      v11[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_needsOverlayUpdateWithAnimation] = 0;
      v18 = v9;
      v19 = objc_msgSend(v11, v9[413]);
      v20 = objc_msgSend(v19, "window");

      if (v20)
      {
        v21 = v11[v17];
        if (v21 != 2)
        {
          v22 = sub_10002DA34();
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 152))(v22);
          swift_release(v22);
          if ((v23 & 1) == 0)
          {
            if (objc_msgSend(v11, "doc_hasAppearedOrIsAppearing"))
            {
              v44 = v11;
              v24 = type metadata accessor for DOCBrowserContainedViewController();
              v25 = v11;
              v26 = sub_10006922C(&qword_10064D510);
              if (swift_dynamicCast(&v45, &v44, v24, v26, 6))
              {
                v27 = v21 & 1;
                v28 = *((_QWORD *)&v46 + 1);
                v29 = v47;
                sub_10007E7A0(&v45, *((uint64_t *)&v46 + 1));
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 8))(v27, v28, v29);
                sub_100068588(&v45);
              }
              else
              {
                v47 = 0;
                v45 = 0u;
                v46 = 0u;
                sub_1001F7F28((uint64_t)&v45);
              }
              v11[v17] = 2;
            }
          }
        }
      }

      v11[v17] = 0;
      v9 = v18;
      v30 = objc_msgSend(v11, v18[413]);
      v31 = objc_msgSend(v30, "window");

      if (v31)
      {
        v32 = v11[v17];
        if (v32 != 2)
        {
          v33 = sub_10002DA34();
          v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 152))(v33);
          swift_release(v33);
          if ((v34 & 1) == 0)
          {
            if (objc_msgSend(v11, "doc_hasAppearedOrIsAppearing"))
            {
              v44 = v11;
              v35 = type metadata accessor for DOCBrowserContainedViewController();
              v36 = v11;
              v37 = sub_10006922C(&qword_10064D510);
              if (swift_dynamicCast(&v45, &v44, v35, v37, 6))
              {
                v38 = v32 & 1;
                v39 = *((_QWORD *)&v46 + 1);
                v40 = v47;
                sub_10007E7A0(&v45, *((uint64_t *)&v46 + 1));
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 8))(v38, v39, v40);
                sub_100068588(&v45);
              }
              else
              {
                v47 = 0;
                v45 = 0u;
                v46 = 0u;
                sub_1001F7F28((uint64_t)&v45);
              }
              v11[v17] = 2;
            }
          }
        }
      }

      ++v8;
    }
    while (v42 != v8);
    goto LABEL_32;
  }
  __break(1u);
}

unint64_t sub_1002C74F0(unint64_t result)
{
  if (result > 3)
    return 0;
  return result;
}

uint64_t sub_1002C7500(unint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  void *v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  Swift::String v45;
  char v46;

  v4 = 0x746E65746E6F63;
  v5 = 0xE700000000000000;
  v6 = 0x746E65746E6F63;
  v8 = 0x676E6964616F6CLL;
  switch(a1)
  {
    case 0uLL:
      goto LABEL_10;
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      v5 = 0x8000000100523C20;
      v8 = 0xD000000000000010;
      goto LABEL_10;
    case 3uLL:
      v5 = 0xE500000000000000;
      v8 = 0x7974706D65;
      goto LABEL_10;
    case 4uLL:
      v8 = 0x697265766F636572;
      v5 = 0xEA0000000000676ELL;
      goto LABEL_10;
    default:
      swift_errorRetain(a1);
      v9 = (void *)_convertErrorToNSError(_:)(a1);
      v10 = objc_msgSend(v9, "domain");
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      objc_msgSend(v9, "code");
      v14 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v16 = v15;
      swift_bridgeObjectRetain(v13);
      v17._countAndFlagsBits = v14;
      v17._object = v16;
      String.append(_:)(v17);

      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v16);
      sub_1000A851C(a1);
      v6 = v11;
      v5 = v13;
LABEL_4:
      if (v6 == 0x746E65746E6F63)
      {
        v18 = 0xE700000000000000;
        v8 = 0x746E65746E6F63;
        if (v5 == 0xE700000000000000)
        {
LABEL_18:
          swift_bridgeObjectRelease(v18);
LABEL_21:
          v34 = 0xE700000000000000;
          v35 = 0x676E6964616F6CLL;
          switch(a2)
          {
            case 0uLL:
              goto LABEL_25;
            case 1uLL:
              goto LABEL_31;
            case 2uLL:
              v34 = 0x8000000100523C20;
              v4 = 0xD000000000000010;
              goto LABEL_31;
            case 3uLL:
              v34 = 0xE500000000000000;
              v4 = 0x7974706D65;
              goto LABEL_31;
            case 4uLL:
              v4 = 0x697265766F636572;
              v34 = 0xEA0000000000676ELL;
              goto LABEL_31;
            default:
              swift_errorRetain(a2);
              v37 = (void *)_convertErrorToNSError(_:)(a2);
              v38 = objc_msgSend(v37, "domain");
              v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
              v41 = v40;

              objc_msgSend(v37, "code");
              v42 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
              v44 = v43;
              swift_bridgeObjectRetain(v41);
              v45._countAndFlagsBits = v42;
              v45._object = v44;
              String.append(_:)(v45);

              swift_bridgeObjectRelease(v41);
              swift_bridgeObjectRelease(v44);
              sub_1000A851C(a2);
              v35 = v39;
              v34 = v41;
LABEL_25:
              if (v35 == 0x676E6964616F6CLL)
              {
                v4 = 0x676E6964616F6CLL;
                if (v34 == 0xE700000000000000)
                {
                  swift_bridgeObjectRelease(0xE700000000000000);
                  v36 = 0;
                  return v36 & 1;
                }
              }
              else
              {
                v4 = v35;
              }
LABEL_31:
              v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v34, 0x676E6964616F6CLL, 0xE700000000000000, 0);
              swift_bridgeObjectRelease(v34);
              v36 = v46 ^ 1;
              break;
          }
          return v36 & 1;
        }
      }
      else
      {
        v8 = v6;
      }
LABEL_10:
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v5, 0x746E65746E6F63, 0xE700000000000000, 0);
      swift_bridgeObjectRelease(v5);
      if ((v19 & 1) != 0)
        goto LABEL_21;
      v20 = 0x8000000100523C20;
      v21 = 0xE700000000000000;
      v22 = 0xD000000000000010;
      v23 = 0x676E6964616F6CLL;
      switch(a1)
      {
        case 0uLL:
          goto LABEL_20;
        case 1uLL:
          v23 = 0x746E65746E6F63;
          goto LABEL_20;
        case 2uLL:
          goto LABEL_16;
        case 3uLL:
          v21 = 0xE500000000000000;
          v23 = 0x7974706D65;
          goto LABEL_20;
        case 4uLL:
          v23 = 0x697265766F636572;
          v21 = 0xEA0000000000676ELL;
          goto LABEL_20;
        default:
          swift_errorRetain(a1);
          v24 = (void *)_convertErrorToNSError(_:)(a1);
          v25 = objc_msgSend(v24, "domain");
          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
          v28 = v27;

          objc_msgSend(v24, "code");
          v29 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
          v31 = v30;
          swift_bridgeObjectRetain(v28);
          v32._countAndFlagsBits = v29;
          v32._object = v31;
          String.append(_:)(v32);

          swift_bridgeObjectRelease(v28);
          swift_bridgeObjectRelease(v31);
          sub_1000A851C(a1);
          v22 = v26;
          v20 = v28;
LABEL_16:
          if (v22 == 0xD000000000000010)
          {
            v18 = 0x8000000100523C20;
            v21 = v20;
            v23 = 0xD000000000000010;
            if (v20 == 0x8000000100523C20)
              goto LABEL_18;
          }
          else
          {
            v21 = v20;
            v23 = v22;
          }
LABEL_20:
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v21, 0xD000000000000010, 0x8000000100523C20, 0);
          swift_bridgeObjectRelease(v21);
          if ((v33 & 1) != 0)
            goto LABEL_21;
          v36 = 1;
          break;
      }
      return v36 & 1;
  }
}

uint64_t type metadata accessor for DOCNullTransitionable()
{
  return objc_opt_self(_TtC5Files21DOCNullTransitionable);
}

unint64_t *assignWithCopy for DOCBrowserContainerState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
      swift_errorRetain(*a2);
    *a1 = v4;
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain(*a2);
    v5 = *a1;
    *a1 = v4;
    swift_errorRelease(v5);
  }
  return a1;
}

_QWORD *initializeWithTake for DOCFileProviderSyncStateHeaderViewModel.State(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for DOCBrowserContainerState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_5:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t storeEnumTagSinglePayload for DOCBrowserContainerState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 4;
  }
  return result;
}

_QWORD *sub_1002C7BE8(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

unint64_t sub_1002C7C0C()
{
  unint64_t result;

  result = qword_10064D508;
  if (!qword_10064D508)
  {
    result = swift_getWitnessTable(&unk_1004E126C, &type metadata for DOCBrowserContainerState);
    atomic_store(result, (unint64_t *)&qword_10064D508);
  }
  return result;
}

uint64_t sub_1002C7C50()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002C7C74(uint64_t result, char a2)
{
  if (a2 == 2)
    return swift_bridgeObjectRelease(result);
  if (!a2)
    return swift_errorRelease(result);
  return result;
}

uint64_t sub_1002C7C90()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002C7CB4()
{
  uint64_t v0;
  unint64_t v1;

  swift_release(*(_QWORD *)(v0 + 16));

  v1 = *(_QWORD *)(v0 + 48);
  if (v1 >= 5)
    swift_errorRelease(v1);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002C7CF8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1002C7D24()
{
  uint64_t v0;

  sub_1002C4BA8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1002C7D2C()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >= 5)
    swift_errorRelease(v1);

  return swift_deallocObject(v0, 40, 7);
}

void sub_1002C7D68()
{
  uint64_t v0;

  sub_10002A100(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

ValueMetadata *type metadata accessor for DOCPickerOperation()
{
  return &type metadata for DOCPickerOperation;
}

unint64_t sub_1002C7D88()
{
  unint64_t result;

  result = qword_10064D550;
  if (!qword_10064D550)
  {
    result = swift_getWitnessTable(&unk_1004E137C, &type metadata for DOCPickerOperation);
    atomic_store(result, (unint64_t *)&qword_10064D550);
  }
  return result;
}

unint64_t sub_1002C7E6C()
{
  unint64_t result;

  result = qword_10064D568[0];
  if (!qword_10064D568[0])
  {
    result = swift_getWitnessTable(&unk_1004E1418, &type metadata for LocationOptionsProvider);
    atomic_store(result, qword_10064D568);
  }
  return result;
}

id sub_1002C7EB4()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
  qword_10064D560 = (uint64_t)result;
  return result;
}

uint64_t sub_1002C7EEC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2[3] = a1;
  v2[4] = a2;
  v3 = type metadata accessor for DOCFileEntity(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[7] = swift_task_alloc(v5);
  v2[8] = swift_task_alloc(v5);
  v6 = sub_10006922C((uint64_t *)&unk_1006438C0);
  v2[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[11] = swift_task_alloc(v8);
  v2[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_1002C7F98, 0, 0);
}

uint64_t sub_1002C7F98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  v2 = v0[3];
  v1 = v0[4];
  v0[2] = &off_1005C05D0;
  v3 = swift_task_alloc(32);
  v0[13] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(_:)[1]);
  v0[14] = v4;
  v5 = sub_10006922C(&qword_10064D5B0);
  v6 = sub_1002C92CC();
  *v4 = v0;
  v4[1] = sub_1002C8040;
  return Sequence.asyncMap<A>(_:)(&unk_10064D5A8, v3, v5, v0[9], v6);
}

uint64_t sub_1002C8040(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 104);
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = a1;
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 16));
  return swift_task_switch(sub_1002C80AC, 0, 0);
}

uint64_t sub_1002C80AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 48);
    v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v6 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    v7 = _swiftEmptyArrayStorage;
    do
    {
      v9 = *(_QWORD *)(v0 + 88);
      v8 = *(_QWORD *)(v0 + 96);
      v10 = *(_QWORD *)(v0 + 40);
      sub_1002C9318(v5, v8);
      sub_1002C9360(v8, v9);
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v9, 1, v10);
      v12 = *(_QWORD *)(v0 + 88);
      if (v11 == 1)
      {
        sub_1002C93A8(v12);
      }
      else
      {
        v14 = *(_QWORD *)(v0 + 56);
        v13 = *(_QWORD *)(v0 + 64);
        sub_10011154C(v12, v13);
        sub_10011154C(v13, v14);
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
          v7 = (_QWORD *)sub_10015453C(0, v7[2] + 1, 1, (unint64_t)v7);
        v16 = v7[2];
        v15 = v7[3];
        if (v16 >= v15 >> 1)
          v7 = (_QWORD *)sub_10015453C(v15 > 1, v16 + 1, 1, (unint64_t)v7);
        v17 = *(_QWORD *)(v0 + 56);
        v7[2] = v16 + 1;
        sub_10011154C(v17, (uint64_t)v7+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v16);
      }
      v5 += v6;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 120), 2);
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    v7 = _swiftEmptyArrayStorage;
  }
  v18 = *(_QWORD *)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 56);
  v19 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v7);
}

uint64_t sub_1002C825C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v3 = *a2;
  v6 = (uint64_t (*)(uint64_t))((char *)&dword_10064D588 + dword_10064D588);
  v4 = (_QWORD *)swift_task_alloc(unk_10064D58C);
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_1002C82C0;
  return v6(v3);
}

uint64_t sub_1002C82C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002C831C, 0, 0);
}

uint64_t sub_1002C831C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v3 = v1;
    sub_10012BCCC(v3, v2);
    v4 = type metadata accessor for DOCFileEntity(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 0, 1, v4);

  }
  else
  {
    v5 = type metadata accessor for DOCFileEntity(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 1, 1, v5);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1002C83B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[5];
  uint64_t v13;

  v2 = sub_10006922C(&qword_10064D590);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  if (qword_100640FA8 != -1)
    swift_once(&qword_100640FA8, sub_1002C7EB4);
  v5 = (void *)qword_10064D560;
  URL._bridgeToObjectiveC()((NSURL *)&OBJC_METACLASS____TtC5Files32DOCCardPopoverAdaptablePresenter.vtable);
  v7 = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_1005DA7D8, v9 + v4, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v10 + v9, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = sub_1002C91E8;
  v13 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100083540;
  aBlock[3] = &unk_1005DA7F0;
  v11 = _Block_copy(aBlock);
  objc_msgSend(v5, "fetchItemForURL:completionHandler:", v7, v11, swift_release(v13).n128_f64[0]);
  _Block_release(v11);

}

uint64_t sub_1002C8524(void *a1, uint64_t a2)
{
  id v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1)
  {
    v8 = (uint64_t)a1;
    v2 = a1;
    v3 = sub_10006922C(&qword_10064D590);
    return CheckedContinuation.resume(returning:)(&v8, v3);
  }
  else
  {
    if (a2)
    {
      v6 = a2;
    }
    else
    {
      sub_10021F574();
      v6 = static NSError.noSuchFileError.getter();
    }
    v8 = v6;
    swift_errorRetain(a2);
    v7 = sub_10006922C(&qword_10064D590);
    return CheckedContinuation.resume(throwing:)(&v8, v7);
  }
}

uint64_t sub_1002C85C4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = *v1;
  v4 = v1[1];
  v5 = (_QWORD *)swift_task_alloc(dword_10064D59C);
  *(_QWORD *)(v2 + 24) = v5;
  *v5 = v2;
  v5[1] = sub_10025E54C;
  return sub_1002C7EEC(v3, v4);
}

uint64_t sub_1002C8618(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v3 = *(_QWORD *)(v1 + 8);
  v6 = (uint64_t (*)(uint64_t))((char *)&dword_10064D588 + dword_10064D588);
  v4 = (_QWORD *)swift_task_alloc(unk_10064D58C);
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_1002C867C;
  return v6(v3);
}

uint64_t sub_1002C867C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002C86D8, 0, 0);
}

uint64_t sub_1002C86D8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v3 = v1;
    sub_10012BCCC(v3, v2);
    v4 = type metadata accessor for DOCFileEntity(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 0, 1, v4);

  }
  else
  {
    v5 = type metadata accessor for DOCFileEntity(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 1, 1, v5);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002C8770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  *(_QWORD *)(v3 + 16) = a1;
  v6 = (_QWORD *)swift_task_alloc(dword_10064C3AC);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_1001170D0;
  return sub_10029F2AC(a2, a3);
}

uint64_t *initializeBufferWithCopyOfBuffer for LocationOptionsProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for LocationOptionsProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  return a1;
}

uint64_t *assignWithTake for LocationOptionsProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for LocationOptionsProvider()
{
  return &type metadata for LocationOptionsProvider;
}

uint64_t sub_1002C8898(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1[10] = a1;
  v3 = type metadata accessor for Logger(0);
  v1[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[12] = v4;
  v1[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v1[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[15] = v6;
  v7 = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[16] = v7;
  type metadata accessor for DOCNamedLocationResolver();
  v8 = (_QWORD *)swift_task_alloc(dword_1006501BC);
  v1[17] = v8;
  *v8 = v1;
  v8[1] = sub_1002C895C;
  return sub_10036EA5C(v7, a1);
}

uint64_t sub_1002C895C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1002C8B38;
  else
    v3 = sub_1002C89C0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002C89C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[16];
  v2 = swift_task_alloc(32);
  v0[19] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[20] = v3;
  v4 = sub_10006922C(&qword_100647560);
  *v3 = v0;
  v3[1] = sub_1002C8A78;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 9, 0, 0, 0x286D657449746567, 0xED0000293A726F66, sub_1002C917C, v2, v4);
}

uint64_t sub_1002C8A78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1002C8E50;
  else
    v4 = sub_1002C8AE4;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002C8AE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1002C8B38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *(_QWORD *)(v1 + 144);
  v4 = *(_QWORD *)(v1 + 96);
  v3 = *(_QWORD *)(v1 + 104);
  v5 = *(_QWORD *)(v1 + 88);
  v6 = Logger.AppIntents.unsafeMutableAddressor(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  swift_errorRetain(v2);
  v7 = swift_errorRetain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(_QWORD *)(v1 + 80);
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v28 = v12;
    *(_DWORD *)v11 = 136315394;
    v13 = v12;
    v14 = 0xE900000000000073;
    v15 = 0x746E656D75636F44;
    switch(v10)
    {
      case 0:
        goto LABEL_8;
      case 1:
        v14 = 0xE700000000000000;
        v15 = 0x706F746B736544;
        goto LABEL_8;
      case 2:
        v15 = 0x64616F6C6E776F44;
        goto LABEL_8;
      case 3:
        v14 = 0xEB00000000657669;
        v15 = 0x724464756F6C4369;
LABEL_8:
        v25 = *(_QWORD *)(v1 + 96);
        v26 = *(_QWORD *)(v1 + 88);
        v27 = *(_QWORD *)(v1 + 104);
        *(_QWORD *)(v1 + 48) = sub_1000544FC(v15, v14, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56);
        swift_bridgeObjectRelease(v14);
        *(_WORD *)(v11 + 12) = 2080;
        swift_getErrorValue(v2, v1 + 56, v1 + 16);
        v21 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
        v23 = v22;
        *(_QWORD *)(v1 + 64) = sub_1000544FC(v21, v22, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72);
        swift_bridgeObjectRelease(v23);
        swift_errorRelease(v2);
        swift_errorRelease(v2);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unable to resolve %s with error: %s", (uint8_t *)v11, 0x16u);
        swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v13, -1, -1);
        swift_slowDealloc(v11, -1, -1);

        swift_errorRelease(v2);
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
        goto LABEL_9;
      default:
        v19 = *(_QWORD *)(v1 + 80);
        swift_errorRelease(v2);
        *(_QWORD *)(v1 + 40) = v19;
        return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DOCNamedLocation, v1 + 40, &type metadata for DOCNamedLocation, &type metadata for Int);
    }
  }
  v17 = *(_QWORD *)(v1 + 96);
  v16 = *(_QWORD *)(v1 + 104);
  v18 = *(_QWORD *)(v1 + 88);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  swift_errorRelease(v2);

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
LABEL_9:
  v24 = *(_QWORD *)(v1 + 104);
  swift_task_dealloc(*(_QWORD *)(v1 + 128));
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
}

uint64_t sub_1002C8E50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
  v2 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = Logger.AppIntents.unsafeMutableAddressor(v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  swift_errorRetain(v2);
  v7 = swift_errorRetain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(_QWORD *)(v0 + 80);
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v28 = v12;
    *(_DWORD *)v11 = 136315394;
    v13 = v12;
    v14 = 0xE900000000000073;
    v15 = 0x746E656D75636F44;
    switch(v10)
    {
      case 0:
        goto LABEL_8;
      case 1:
        v14 = 0xE700000000000000;
        v15 = 0x706F746B736544;
        goto LABEL_8;
      case 2:
        v15 = 0x64616F6C6E776F44;
        goto LABEL_8;
      case 3:
        v14 = 0xEB00000000657669;
        v15 = 0x724464756F6C4369;
LABEL_8:
        v25 = *(_QWORD *)(v0 + 96);
        v26 = *(_QWORD *)(v0 + 88);
        v27 = *(_QWORD *)(v0 + 104);
        *(_QWORD *)(v0 + 48) = sub_1000544FC(v15, v14, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
        swift_bridgeObjectRelease(v14);
        *(_WORD *)(v11 + 12) = 2080;
        swift_getErrorValue(v2, v0 + 56, v0 + 16);
        v21 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
        v23 = v22;
        *(_QWORD *)(v0 + 64) = sub_1000544FC(v21, v22, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
        swift_bridgeObjectRelease(v23);
        swift_errorRelease(v2);
        swift_errorRelease(v2);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unable to resolve %s with error: %s", (uint8_t *)v11, 0x16u);
        swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v13, -1, -1);
        swift_slowDealloc(v11, -1, -1);

        swift_errorRelease(v2);
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
        goto LABEL_9;
      default:
        v19 = *(_QWORD *)(v0 + 80);
        swift_errorRelease(v2);
        *(_QWORD *)(v0 + 40) = v19;
        return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DOCNamedLocation, v0 + 40, &type metadata for DOCNamedLocation, &type metadata for Int);
    }
  }
  v17 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 104);
  v18 = *(_QWORD *)(v0 + 88);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  swift_errorRelease(v2);

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
LABEL_9:
  v24 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

void sub_1002C917C(uint64_t a1)
{
  sub_1002C83B4(a1);
}

uint64_t sub_1002C9184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10006922C(&qword_10064D590);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002C91E8(void *a1, uint64_t a2)
{
  sub_10006922C(&qword_10064D590);
  return sub_1002C8524(a1, a2);
}

uint64_t sub_1002C9238(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v5 = (_QWORD *)swift_task_alloc(dword_10064D5A4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000EA854;
  v5[2] = a1;
  v6 = *a2;
  v9 = (uint64_t (*)(uint64_t))((char *)&dword_10064D588 + dword_10064D588);
  v7 = (_QWORD *)swift_task_alloc(unk_10064D58C);
  v5[3] = v7;
  *v7 = v5;
  v7[1] = sub_1002C82C0;
  return v9(v6);
}

unint64_t sub_1002C92CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064D5B8;
  if (!qword_10064D5B8)
  {
    v1 = sub_10007E830(&qword_10064D5B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10064D5B8);
  }
  return result;
}

uint64_t sub_1002C9318(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C((uint64_t *)&unk_1006438C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002C9360(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C((uint64_t *)&unk_1006438C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002C93A8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10006922C((uint64_t *)&unk_1006438C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

objc_class *sub_1002C93EC(char *a1)
{
  char *v1;
  char *v2;
  char *v4;
  id v5;
  void *v6;
  unsigned __int8 v7;
  uint64_t v8;
  char *v9;
  objc_class **v10;
  objc_class *v11;
  char *v12;
  Class v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  Swift::OpaquePointer v17;
  Class v18;
  objc_class *v19;
  objc_class *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  objc_class *v24;
  objc_class *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  _QWORD *preferredElementSize;
  Swift::String v35;
  Class isa;
  void *v37;
  objc_class *v38;
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  NSString v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  Swift::OpaquePointer v52;
  char v53[24];
  UIImage_optional v54;

  v2 = v1;
  if (!objc_msgSend(a1, "isActive"))
    goto LABEL_6;
  v4 = *(char **)&a1[OBJC_IVAR____TtC5Files19DOCSearchController_resultCollectionViewController];
  v5 = objc_msgSend(v4, "viewIfLoaded");
  if (!v5)
    goto LABEL_6;
  v6 = v5;
  v7 = objc_msgSend(v5, "isHidden");

  if ((v7 & 1) != 0)
    goto LABEL_6;
  v8 = *(_QWORD *)&v4[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8];
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v50 = v8;
    else
      v50 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v51 = _CocoaArrayWrapper.endIndex.getter(v50);
    swift_bridgeObjectRelease(v8);
    if (v51 > 0)
      goto LABEL_7;
LABEL_6:
    v9 = v2;
    if ((sub_10013FAF4() & 1) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (*(uint64_t *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10) <= 0)
    goto LABEL_6;
LABEL_7:
  v9 = *(char **)&a1[OBJC_IVAR____TtC5Files19DOCSearchController_resultCollectionViewController];
LABEL_8:
  v10 = (objc_class **)&v9[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode];
  swift_beginAccess(&v9[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode], v53, 0, 0);
  v11 = *v10;
  v12 = v9;
  v13 = sub_100054784((uint64_t)v11, 0);
  v14 = *(_QWORD *)&v12[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_sortingDescriptor];
  v15 = *(void **)&v12[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_sortingDescriptor + 8];
  v16 = *(_QWORD *)&v12[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_sortingDescriptor + 16];
  sub_1001CEF88(v14, (uint64_t)v15, v16);
  v17._rawValue = v15;
  v18 = sub_1000459A8(v14, v17, v16);
  sub_100144F34(v14, (uint64_t)v15, v16);
  if (!v13)
  {
    v24 = v18;
    if (!v18)
      goto LABEL_17;
    goto LABEL_14;
  }
  v19 = v18;
  v20 = v13;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
  v22 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v22 >= v21 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
  v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
  specialized Array._endMutation()(v23);
  if (v18)
  {
LABEL_14:
    v25 = v18;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v25);
    v27 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v26 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v27 >= v26 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
    v28 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v25);
    specialized Array._endMutation()(v28);
  }
LABEL_17:

  v29 = sub_1003F0390((uint64_t)v11);
  if (v29)
  {
    v30 = (void *)v29;
    if (qword_100641200 != -1)
      swift_once(&qword_100641200, sub_1000B0278);
    v31 = objc_msgSend(v30, "imageWithConfiguration:", qword_100672EF8);

    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
      goto LABEL_21;
LABEL_26:
    if ((uint64_t)_swiftEmptyArrayStorage < 0)
      v47 = _swiftEmptyArrayStorage;
    else
      v47 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
    v48 = sub_10004F2F0(0, (unint64_t *)&qword_100644320, UIMenuElement_ptr);
    v49 = v31;
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    preferredElementSize = (_QWORD *)_bridgeCocoaArray<A>(_:)(v47, v48);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    goto LABEL_22;
  }
  v31 = 0;
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    goto LABEL_26;
LABEL_21:
  v32 = v31;
  v33 = swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v33);
  sub_10004F2F0(0, (unint64_t *)&qword_100644320, UIMenuElement_ptr);
  preferredElementSize = _swiftEmptyArrayStorage;
LABEL_22:
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  sub_10004F2F0(0, (unint64_t *)&qword_1006448A0, UIMenu_ptr);
  v35._countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  v54.value.super.isa = (Class)v31;
  v54.is_nil = 0;
  isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v35, (Swift::String_optional)0, v54, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)preferredElementSize, v52).super.super.isa;
  v37 = (void *)objc_opt_self(DOCAXIdentifier);
  v38 = isa;
  sub_1003F047C(v11);
  v40 = v39;
  v41 = String._bridgeToObjectiveC()();
  v42 = objc_msgSend(v37, "searchMenuButtonShowing:", v41, swift_bridgeObjectRelease(v40).n128_f64[0]);

  if (!v42)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v45 = v44;
    v42 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v43 = swift_bridgeObjectRelease(v45).n128_u64[0];
  }
  -[objc_class setAccessibilityIdentifier:](v38, "setAccessibilityIdentifier:", v42, v43);

  return v38;
}

id sub_1002C9870()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  void *v11;

  v1 = objc_msgSend(v0, "splitViewController");
  if (v1)
  {
    v2 = v1;
    v3 = objc_opt_self(DOCSplitBrowserViewController);
    v4 = (void *)swift_dynamicCastObjCClass(v2, v3);
    if (v4)
    {
      v5 = objc_msgSend(v4, "fullDocumentManagerViewController");

      if (v5)
        goto LABEL_8;
    }
    else
    {

    }
  }
  v6 = sub_10004F2F0(0, &qword_100648590, &off_1005BCED8);
  v7 = UIViewController.doc_nearestAncestor<A>(ofType:searchPresentingHierarchy:)(v6, 0, v6);
  if (v7)
  {
    v5 = (id)v7;
    goto LABEL_8;
  }
  v10 = objc_msgSend(v0, "viewIfLoaded");
  if (!v10)
    goto LABEL_13;
  v11 = v10;
  v8 = objc_msgSend(v10, "window");

  if (!v8)
  {
LABEL_14:
    v9 = objc_msgSend(v0, "traitCollection");
    goto LABEL_15;
  }
  v5 = objc_msgSend(v8, "rootViewController");

  if (!v5)
  {
LABEL_13:
    v8 = 0;
    goto LABEL_14;
  }
LABEL_8:
  v8 = v5;
  v9 = objc_msgSend(v8, "traitCollection");

  if (!v9)
    goto LABEL_14;
LABEL_15:

  return v9;
}

uint64_t sub_1002C99D4()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  unsigned __int8 v4;
  id v5;
  uint64_t v6;

  v1 = objc_msgSend(v0, "splitViewController");
  if (!v1)
    return 1;
  v2 = v1;
  v3 = objc_msgSend(v1, "doc_splitViewState");
  v4 = objc_msgSend(v3, "isSidebarShownInline");

  if ((v4 & 1) != 0 || (v5 = objc_msgSend(v2, "preferredSplitBehavior"), v5 == (id)1))
  {
    v6 = 1;
  }
  else if (v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = (uint64_t)objc_msgSend(v2, "_canTileSidebarColumn:", 0);
  }

  return v6;
}

void sub_1002C9A98()
{
  char *v0;
  char *v1;
  void *v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  char *v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  char *v14;
  _QWORD *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  _QWORD v24[4];

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration];
  if (!objc_msgSend(v2, "isPickerUI")
    || v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_forceEditingMode] == 1)
  {
    v4 = v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_searchPresentationState];
    v5 = v4 - 2;
    v6 = v4 & 1;
    if (v5 < 3 || v6 == 0)
    {
      v8 = &v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting];
      Strong = swift_unknownObjectWeakLoadStrong(&v1[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting], v3);
      if (Strong)
      {
        v11 = Strong;
        v12 = *((_QWORD *)v8 + 1);
        ObjectType = swift_getObjectType(Strong, v10);
        v24[3] = type metadata accessor for DOCItemCollectionViewController(0);
        v24[0] = v1;
        v14 = v1;
        v15 = sub_1002CB478();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 8))(v24, v15, 2, 0, ObjectType, v12);
        swift_bridgeObjectRelease(v15);
        swift_unknownObjectRelease(v11);
        sub_100068588(v24);
      }
      if (v1[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_forceEditingMode] == 1
        && (objc_msgSend(v1, "doc_isAppearing") & 1) == 0)
      {
        v16 = objc_msgSend(v1, "navigationController");
        if (v16)
        {
          v17 = v16;
          v18 = (uint64_t)sub_100034068(0);
          v19 = v18;
          if ((unint64_t)v18 >> 62)
          {
            if (v18 >= 0)
              v18 &= 0xFFFFFFFFFFFFFF8uLL;
            v20 = _CocoaArrayWrapper.endIndex.getter(v18);
          }
          else
          {
            v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease(v19);
          objc_msgSend(v17, "setToolbarHidden:animated:", v20 == 0, 0, v24[0]);

        }
        v21 = (void *)objc_opt_self(DOCTabbedBrowserViewController);
        v22 = objc_msgSend(v2, "sceneIdentifier");
        v23 = objc_msgSend(v21, "globalTabbedBrowserControllerForIdentifier:", v22);

        objc_msgSend(v23, "updateTabBarVisibility");
      }
    }
  }
}

void sub_1002C9CCC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v1 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_viewOptionsViewController;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_viewOptionsViewController);
  if (v2)
  {
    v8 = v2;
    if (objc_msgSend(v8, "doc_hasAppearedOrIsAppearing"))
    {
      v3 = sub_1002CD61C();
      v4 = objc_msgSend(v3, "_doc_ipi_view");

      if (v4 && (v5 = objc_msgSend(v4, "window"), v4, v5))
      {

        v6 = v5;
      }
      else
      {
        objc_msgSend(v8, "dismissViewControllerAnimated:completion:", 0, 0);
        v7 = *(void **)(v0 + v1);
        *(_QWORD *)(v0 + v1) = 0;

        v6 = v7;
      }
    }
    else
    {
      v6 = v8;
    }

  }
}

_QWORD *sub_1002C9DC4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  id v5;
  unsigned __int8 v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  unint64_t v14;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (v2)
  {
    v3 = (char)result;
    v4 = v2 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type;
    if ((*(_BYTE *)(v4 + 16) & 1) != 0
      || (v5 = *(id *)v4,
          v6 = objc_msgSend(v5, "doc_displaysSearchResults"),
          v5,
          (v6 & 1) == 0))
    {
      v7 = *(id *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration);
      v8 = sub_100053FC4();

      v9 = v8[2];
      if (v9)
      {
        swift_bridgeObjectRetain(v8);
        v10 = 0;
        v11 = _swiftEmptyArrayStorage;
        do
        {
          v12 = *((_BYTE *)v8 + v10 + 32);
          if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
            v11 = sub_100153874(0, v11[2] + 1, 1, v11);
          v14 = v11[2];
          v13 = v11[3];
          if (v14 >= v13 >> 1)
            v11 = sub_100153874((_QWORD *)(v13 > 1), v14 + 1, 1, v11);
          ++v10;
          v11[2] = v14 + 1;
          *((_BYTE *)v11 + v14 + 32) = v12;
        }
        while (v9 != v10);
        swift_bridgeObjectRelease(v8);
      }
      else
      {
        v11 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease(v8);
      if (v11[2])
      {
        if ((v3 & 1) != 0)
          sub_100458EEC(0, 0, 7);
        return v11;
      }
      swift_bridgeObjectRelease(v11);
    }
    return _swiftEmptyArrayStorage;
  }
  __break(1u);
  return result;
}

double sub_1002C9F70(char a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  double result;
  uint64_t v26;

  v2 = a1;
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration)
                 + OBJC_IVAR____TtC5Files21DOCFileProviderSource_sortingModes);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(v3);
    sub_100081810(0, v4, 0);
    v5 = 0;
    v6 = v3;
    do
    {
      v7 = DOCItemSortDescriptor.init(type:isReversed:)(*(unsigned __int8 *)(v6 + v5 + 32), 0);
      v9 = v8;
      v11 = v10;
      v13 = v12;
      v15 = _swiftEmptyArrayStorage[2];
      v14 = _swiftEmptyArrayStorage[3];
      if (v15 >= v14 >> 1)
        sub_100081810(v14 > 1, v15 + 1, 1);
      ++v5;
      _swiftEmptyArrayStorage[2] = v15 + 1;
      v16 = &_swiftEmptyArrayStorage[4 * v15];
      *((_BYTE *)v16 + 32) = v7;
      v16[5] = v9;
      v16[6] = v11;
      *((_BYTE *)v16 + 56) = v13 & 1;
    }
    while (v4 != v5);
    swift_bridgeObjectRelease(v6);
    v1 = v26;
    v2 = a1;
  }
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_sortingDescriptor + 8);
  if (v17)
  {
    v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_sortingDescriptor + 16);
    swift_bridgeObjectRetain(*(_QWORD *)(v1
                                       + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_sortingDescriptor
                                       + 8));
    swift_bridgeObjectRetain(v18);
    sub_10000F428(v2);
    if ((v19 & 1) != 0)
    {
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      v21 = *(id *)DOCLog.UI.unsafeMutableAddressor(v20);
      static os_log_type_t.debug.getter();
      v22 = sub_10006922C((uint64_t *)&unk_100644560);
      v23 = v2;
      v24 = swift_allocObject(v22, 112, 7);
      *(_OWORD *)(v24 + 16) = xmmword_1004D4CE0;
      *(_QWORD *)(v24 + 56) = type metadata accessor for DOCItemCollectionViewController(0);
      *(_QWORD *)(v24 + 64) = sub_10005A360(&qword_1006460C0, type metadata accessor for DOCItemCollectionViewController, (uint64_t)&protocol conformance descriptor for NSObject);
      *(_QWORD *)(v24 + 32) = v1;
      __asm { BR              X10 }
    }
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v17);
  }
  if (_swiftEmptyArrayStorage[2])
  {
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    __asm { BR              X8 }
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(_swiftEmptyArrayStorage).n128_u64[0];
  return result;
}

uint64_t sub_1002CA4FC()
{
  uint64_t v0;
  void *v1;
  char v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  unsigned int v25;

  v6[12] = &type metadata for String;
  v6[13] = sub_10006A638();
  v6[9] = 1936154996;
  v6[10] = v7;
  v8 = v1;
  os_log(_:dso:log:type:_:)("Flip the currently selected sort descriptor: %@", 47, 2, &_mh_execute_header, v3, v25, v6);

  swift_bridgeObjectRelease(v6);
  v9 = DOCItemSortDescriptor.init(type:isReversed:)(v5, (v2 & 1) == 0);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v0);
  v16 = &v8[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_overlayDelegate];
  Strong = swift_unknownObjectWeakLoadStrong(&v8[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_overlayDelegate], v17);
  if (Strong)
  {
    v20 = Strong;
    v21 = *((_QWORD *)v16 + 1);
    ObjectType = swift_getObjectType(Strong, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 8))(v9, v11, v13, v15 & 1, ObjectType, v21);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v11);
    v23 = swift_unknownObjectRelease(v20);
  }
  else
  {
    swift_bridgeObjectRelease(v13);
    v23 = swift_bridgeObjectRelease(v11);
  }
  return _s5Files31DOCItemCollectionViewControllerC13updateOverlay8animatedySb_tF_0(v23);
}

uint64_t sub_1002CA508()
{
  uint64_t v0;
  void *v1;
  char v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  unsigned int v25;

  v6[12] = &type metadata for String;
  v6[13] = sub_10006A638();
  v6[9] = 1702521203;
  v6[10] = v7;
  v8 = v1;
  os_log(_:dso:log:type:_:)("Flip the currently selected sort descriptor: %@", 47, 2, &_mh_execute_header, v3, v25, v6);

  swift_bridgeObjectRelease(v6);
  v9 = DOCItemSortDescriptor.init(type:isReversed:)(v5, (v2 & 1) == 0);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v0);
  v16 = &v8[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_overlayDelegate];
  Strong = swift_unknownObjectWeakLoadStrong(&v8[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_overlayDelegate], v17);
  if (Strong)
  {
    v20 = Strong;
    v21 = *((_QWORD *)v16 + 1);
    ObjectType = swift_getObjectType(Strong, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 8))(v9, v11, v13, v15 & 1, ObjectType, v21);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v11);
    v23 = swift_unknownObjectRelease(v20);
  }
  else
  {
    swift_bridgeObjectRelease(v13);
    v23 = swift_bridgeObjectRelease(v11);
  }
  return _s5Files31DOCItemCollectionViewControllerC13updateOverlay8animatedySb_tF_0(v23);
}

uint64_t sub_1002CA514()
{
  uint64_t v0;
  void *v1;
  char v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  unsigned int v25;

  v6[12] = &type metadata for String;
  v6[13] = sub_10006A638();
  v6[9] = 1684957547;
  v6[10] = v7;
  v8 = v1;
  os_log(_:dso:log:type:_:)("Flip the currently selected sort descriptor: %@", 47, 2, &_mh_execute_header, v3, v25, v6);

  swift_bridgeObjectRelease(v6);
  v9 = DOCItemSortDescriptor.init(type:isReversed:)(v5, (v2 & 1) == 0);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v0);
  v16 = &v8[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_overlayDelegate];
  Strong = swift_unknownObjectWeakLoadStrong(&v8[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_overlayDelegate], v17);
  if (Strong)
  {
    v20 = Strong;
    v21 = *((_QWORD *)v16 + 1);
    ObjectType = swift_getObjectType(Strong, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 8))(v9, v11, v13, v15 & 1, ObjectType, v21);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v11);
    v23 = swift_unknownObjectRelease(v20);
  }
  else
  {
    swift_bridgeObjectRelease(v13);
    v23 = swift_bridgeObjectRelease(v11);
  }
  return _s5Files31DOCItemCollectionViewControllerC13updateOverlay8animatedySb_tF_0(v23);
}

void sub_1002CA520()
{
  JUMPOUT(0x1002CA534);
}

id sub_1002CA714(uint64_t a1)
{
  return sub_1001405E0(a1, type metadata accessor for DOCActionToolBarItem);
}

void sub_1002CA730(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  char *v4;
  char v8;
  char *v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  void (*v14)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);
  char *v15;
  _QWORD v16[4];

  sub_1002CA7FC(a2, a3, a1);
  if ((v8 & 1) != 0)
  {
    v9 = &v4[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting];
    Strong = swift_unknownObjectWeakLoadStrong(&v4[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting]);
    if (Strong)
    {
      v11 = Strong;
      v12 = *((_QWORD *)v9 + 1);
      ObjectType = swift_getObjectType(Strong);
      v16[3] = type metadata accessor for DOCItemCollectionViewController(0);
      v16[0] = v4;
      v14 = *(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 8);
      v15 = v4;
      v14(v16, a2, a3, a4 & 1, ObjectType, v12);
      swift_unknownObjectRelease(v11);
      sub_100068588(v16);
    }
  }
}

void sub_1002CA7FC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  id v7;
  unsigned __int8 v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (v4)
  {
    v6 = v4 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type;
    if ((*(_BYTE *)(v6 + 16) & 1) != 0
      || (v7 = *(id *)v6,
          v8 = objc_msgSend(v7, "doc_displaysSearchResults"),
          v7,
          (v8 & 1) == 0))
    {
      v9 = *(void **)(v3 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_containerNavigationItem);
      if (v9)
      {
        v10 = objc_msgSend(v9, "searchController");
        if (v10)
        {
          v11 = v10;
          v12 = type metadata accessor for DOCSearchController();
          v13 = swift_dynamicCastClass(v11, v12);
          if (v13)
          {
            v14 = *(id *)(v13 + OBJC_IVAR____TtC5Files19DOCSearchController_resultCollectionViewController);

            v15 = a3[3];
            v16 = sub_10007E7A0(a3, v15);
            v17 = _bridgeAnythingToObjectiveC<A>(_:)(v16, v15);
            swift_unknownObjectRelease(v17);

          }
          else
          {

          }
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1002CA988()
{
  char *v0;
  char *v1;
  void *v2;
  id *v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  NSString v9;
  id v10;
  id v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  Swift::String v18;
  Swift::String_optional v19;
  Swift::String v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  NSString v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  id v46;
  void *v47;
  Swift::String v48;
  Swift::String_optional v49;
  Swift::String v50;
  void *object;
  NSString v52;
  id v53;
  void *v54;
  Swift::String v55;
  Swift::String_optional v56;
  Swift::String v57;
  void *v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  NSString v63;
  id v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_containerNavigationItem];
  if (v2)
  {
    v3 = (id *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration];
    v4 = *(void **)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration + 24];
    v5 = *(void **)&v1[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration];
    v64 = v4;
    v6 = v2;
    v7 = sub_100389394(v4, v5);
    v8 = v7[2];
    swift_bridgeObjectRelease(v7);
    if ((sub_1002CB12C(v4) & 1) != 0)
    {
      objc_msgSend(v6, "set_alternateLargeTitles:", 0);
      v9 = String._bridgeToObjectiveC()();
      objc_msgSend(v6, "setTitle:", v9);

LABEL_30:
      v39 = 2;
LABEL_33:
      objc_msgSend(v6, "setLargeTitleDisplayMode:", v39);
      if (v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_searchPresentationState]
         - 2 < 3)
      {
        objc_msgSend(v6, "setBackButtonTitle:", 0);
LABEL_39:
        sub_100043720();

        return;
      }
      sub_10000E7DC();
      if (v42)
      {
        v43 = v42;
        v44 = sub_10000860C();
        sub_100463014((uint64_t)v44, v45);

      }
      v46 = (id)_DocumentManagerBundle(v42);
      if (v46)
      {
        v47 = v46;
        v66._countAndFlagsBits = 0xD000000000000030;
        v66._object = (void *)0x80000001005241A0;
        v48._countAndFlagsBits = 0x686372616553;
        v48._object = (void *)0xE600000000000000;
        v49.value._countAndFlagsBits = 0x617A696C61636F4CLL;
        v49.value._object = (void *)0xEB00000000656C62;
        v50._countAndFlagsBits = 0x686372616553;
        v50._object = (void *)0xE600000000000000;
        object = NSLocalizedString(_:tableName:bundle:value:comment:)(v48, v49, (NSBundle)v47, v50, v66)._object;

        v52 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(object);
        objc_msgSend(v6, "setBackButtonTitle:", v52);

        goto LABEL_39;
      }
      __break(1u);
      goto LABEL_50;
    }
    v10 = objc_msgSend(v1, "isEditing");
    if ((_DWORD)v10 && (v1[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_forceEditingMode] & 1) == 0)
    {
      v16 = (id)_DocumentManagerBundle(v10);
      if (!v16)
      {
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      v17 = v16;
      v65._object = (void *)0x80000001005241E0;
      v18._countAndFlagsBits = 0x49207463656C6553;
      v18._object = (void *)0xEC000000736D6574;
      v19.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v19.value._object = (void *)0xEB00000000656C62;
      v20._countAndFlagsBits = 0;
      v20._object = (void *)0xE000000000000000;
      v65._countAndFlagsBits = 0xD000000000000040;
      v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, (NSBundle)v17, v20, v65)._object;

      swift_bridgeObjectRelease(v21);
      v22 = (uint64_t)sub_100034068(0);
      v23 = v22;
      if ((unint64_t)v22 >> 62)
      {
        if (v22 >= 0)
          v22 &= 0xFFFFFFFFFFFFFF8uLL;
        v24 = _CocoaArrayWrapper.endIndex.getter(v22);
      }
      else
      {
        v24 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v25 = swift_bridgeObjectRelease(v23);
      if (v24)
      {
        v26 = objc_msgSend(v1, "traitCollection");
        v27 = objc_msgSend(v26, "horizontalSizeClass");

        if (v27 == (id)1
          || (v28 = objc_msgSend(v1, "traitCollection"),
              v29 = objc_msgSend(v28, "userInterfaceIdiom"),
              v28,
              v29 == (id)6))
        {
          v30 = 0xD000000000000058;
          v31 = 0x80000001005242A0;
          v32 = 0x6D65744920756C25;
          v33 = 0xE900000000000073;
        }
        else
        {
          v32 = 0xD000000000000012;
          v30 = 0xD000000000000049;
          v33 = 0x8000000100524230;
          v31 = 0x8000000100524250;
        }
        v59 = DOCLocalizedDictionaryString(_:comment:)(*(Swift::String *)&v32, *(Swift::String *)&v30);
        v60 = sub_10006922C((uint64_t *)&unk_100644560);
        v61 = swift_allocObject(v60, 72, 7);
        *(_OWORD *)(v61 + 16) = xmmword_1004D9670;
        *(_QWORD *)(v61 + 56) = &type metadata for Int;
        *(_QWORD *)(v61 + 64) = &protocol witness table for Int;
        *(_QWORD *)(v61 + 32) = v24;
        static String.localizedStringWithFormat(_:_:)(v59._countAndFlagsBits, v59._object, v61);
        v58 = v62;
        swift_bridgeObjectRelease(v59._object);
        swift_bridgeObjectRelease(v61);
      }
      else
      {
        v53 = (id)_DocumentManagerBundle(v25);
        if (!v53)
        {
LABEL_51:
          __break(1u);
          return;
        }
        v54 = v53;
        v67._object = (void *)0x80000001005241E0;
        v55._countAndFlagsBits = 0x49207463656C6553;
        v55._object = (void *)0xEC000000736D6574;
        v56.value._countAndFlagsBits = 0x617A696C61636F4CLL;
        v56.value._object = (void *)0xEB00000000656C62;
        v57._countAndFlagsBits = 0;
        v57._object = (void *)0xE000000000000000;
        v67._countAndFlagsBits = 0xD000000000000040;
        v58 = NSLocalizedString(_:tableName:bundle:value:comment:)(v55, v56, (NSBundle)v54, v57, v67)._object;

      }
      objc_msgSend(v6, "set_alternateLargeTitles:", 0);
      v63 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v58);
      objc_msgSend(v6, "setTitle:", v63);

      if (!v8)
        goto LABEL_30;
      goto LABEL_32;
    }
    if (v4)
    {
      v11 = v64;
      v12 = sub_100389394(v4, v5);

      if (!v12[2])
      {
        swift_bridgeObjectRelease(v12);
        v13 = objc_msgSend(v11, "displayName");
        if (v13)
        {
LABEL_22:
          v34 = v13;
          v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
          v14 = v35;

          v12 = _swiftEmptyArrayStorage;
          goto LABEL_23;
        }
LABEL_21:
        v13 = objc_msgSend(*v3, "displayName");
        goto LABEL_22;
      }
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      if (!_swiftEmptyArrayStorage[2])
      {
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        goto LABEL_21;
      }
    }
    v15 = v12[4];
    v14 = v12[5];
    swift_bridgeObjectRetain(v14);
LABEL_23:
    v36 = &v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_existingOverlayTitleBeforeRename];
    v37 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_existingOverlayTitleBeforeRename + 8];
    if (v37
      && (*(_QWORD *)v36 == v15 ? (v38 = v37 == v14) : (v38 = 0),
          v38 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v36, v37, v15, v14, 0) & 1) != 0))
    {
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v14);
      if (!v8)
        goto LABEL_30;
    }
    else
    {
      swift_bridgeObjectRetain(v14);
      sub_100086C88(v12, v15, v14);
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v14);
      v40 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v14);
      objc_msgSend(v6, "setTitle:", v40);

      v41 = *((_QWORD *)v36 + 1);
      *(_QWORD *)v36 = 0;
      *((_QWORD *)v36 + 1) = 0;
      swift_bridgeObjectRelease(v41);
      if (!v8)
        goto LABEL_30;
    }
LABEL_32:
    v39 = 1;
    goto LABEL_33;
  }
}

void sub_1002CB044()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_viewOptionsViewController);
  if (v1)
  {
    v2 = objc_msgSend(v1, "popoverPresentationController");
    if (v2)
    {
      v6 = v2;
      v3 = objc_msgSend(v2, "sourceItem");
      if (v3)
      {
        swift_unknownObjectRelease(v3);
        v4 = *(void **)(v0 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_containerNavigationItem);
        if (!v4 || (v5 = objc_msgSend(v4, "overflowPresentationSource")) == 0)
          v5 = sub_1002CD61C();
        objc_msgSend(v6, "setSourceItem:", v5);

        swift_unknownObjectRelease(v5);
      }
      else
      {

      }
    }
  }
}

uint64_t sub_1002CB12C(void *a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v23;
  char v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];

  if (a1)
  {
    v2 = a1;
    if (objc_msgSend(v2, "isRoot") && objc_msgSend(v1, "enclosedInUIPDocumentLanding"))
    {
      v3 = objc_msgSend(v2, "sourceIdentifier");
      v43[0] = v3;
      v4 = objc_msgSend(v2, "originalSourceIdentifier");
      v43[1] = v4;
      v5 = (void *)DOCDocumentSourceIdentifierRecentDocuments;
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
      v8 = v7;
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      if (v6 == v9 && v8 == v10)
      {

        swift_bridgeObjectRelease_n(v8, 2);
      }
      else
      {
        v12 = v10;
        v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v9, v10, 0);
        v14 = v5;

        swift_bridgeObjectRelease(v8);
        swift_bridgeObjectRelease(v12);
        if ((v13 & 1) == 0)
        {
          if (v4)
          {
            v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
            v17 = v16;
            v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
            v20 = v18;
            if (v15 == v19 && v17 == v18)
            {
              v21 = v14;

              swift_bridgeObjectRelease_n(v17, 2);
LABEL_21:
              v5 = v2;
              goto LABEL_18;
            }
            v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v19, v18, 0);
            v25 = v14;

            swift_bridgeObjectRelease(v17);
            swift_bridgeObjectRelease(v20);
            if ((v24 & 1) != 0)
              goto LABEL_21;
          }
          else
          {

          }
          v26 = (void *)DOCDocumentSourceIdentifierSharedItems;
          v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
          v29 = v28;
          v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
          v32 = v30;
          if (v27 == v31 && v29 == v30)
          {
            v33 = v26;
            swift_bridgeObjectRelease_n(v29, 2);
          }
          else
          {
            v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v31, v30, 0);
            v35 = v26;
            swift_bridgeObjectRelease(v29);
            swift_bridgeObjectRelease(v32);
            if ((v34 & 1) == 0)
            {
              if (v4)
              {
                v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
                v39 = v38;
                v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
                v42 = v40;
                if (v37 == v41 && v39 == v40)
                  LOBYTE(v4) = 1;
                else
                  LOBYTE(v4) = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, v41, v40, 0);

                swift_bridgeObjectRelease(v39);
                swift_bridgeObjectRelease(v42);
              }
              else
              {

              }
              goto LABEL_27;
            }
          }

          LOBYTE(v4) = 1;
LABEL_27:
          v36 = sub_10006922C((uint64_t *)&unk_10064D870);
          swift_arrayDestroy(v43, 2, v36);
          return v4 & 1;
        }
      }

LABEL_18:
      v23 = sub_10006922C((uint64_t *)&unk_10064D870);
      swift_arrayDestroy(v43, 2, v23);
      LOBYTE(v4) = 1;
      return v4 & 1;
    }

  }
  LOBYTE(v4) = 0;
  return v4 & 1;
}

_QWORD *sub_1002CB478()
{
  char *v0;
  char *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  NSString v19;
  id v20;
  _QWORD *result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  id v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t inited;
  void *v33;
  uint64_t v34;
  id v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  id v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;

  v1 = v0;
  v2 = sub_1002C9870();
  if (!sub_10007B5C0(1))
  {
    v18 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v19 = String._bridgeToObjectiveC()();
    objc_msgSend(v18, "BOOLForKey:", v19);

    return _swiftEmptyArrayStorage;
  }

  if (v1[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_forceEditingMode] == 1)
  {
    v3 = sub_1002CB9CC();
    v4 = (uint64_t)sub_100034068(0);
    v5 = v4;
    if ((unint64_t)v4 >> 62)
    {
      if (v4 >= 0)
        v4 &= 0xFFFFFFFFFFFFFF8uLL;
      v6 = _CocoaArrayWrapper.endIndex.getter(v4);
    }
    else
    {
      v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v5);
    v7 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8];
    v8 = v1;
    v9 = swift_bridgeObjectRetain(v7);
    v10 = (uint64_t)sub_1002D2DD8(v9, (uint64_t)v8);
    swift_bridgeObjectRelease(v7);

    if ((unint64_t)v10 >> 62)
    {
      if (v10 < 0)
        v52 = v10;
      else
        v52 = v10 & 0xFFFFFFFFFFFFFF8;
      v11 = _CocoaArrayWrapper.endIndex.getter(v52);
    }
    else
    {
      v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v10);
    objc_msgSend(v3, "setEnabled:", v6 < v11);
    v12 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v13 = swift_allocObject(v12, 56, 7);
    *(_OWORD *)(v13 + 16) = xmmword_1004D9720;
    *(_QWORD *)(v13 + 32) = v3;
    v14 = (void *)objc_opt_self(UIBarButtonItem);
    v15 = v3;
    *(_QWORD *)(v13 + 40) = objc_msgSend(v14, "flexibleSpaceItem");
    v16 = sub_1002CBAE4();
    *(_QWORD *)(v13 + 48) = v16;
    specialized Array._endMutation()(v16);
    v17 = v13;

    return (_QWORD *)v17;
  }
  v20 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration], "identifier");
  result = sub_100034068(0);
  v22 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection];
  if (v22)
  {
    v23 = (uint64_t)result;
    v24 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8];
    v25 = v22 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type;
    if ((*(_BYTE *)(v25 + 16) & 1) != 0)
    {
      v26 = *(void **)(*(_QWORD *)v25 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode);
      swift_bridgeObjectRetain(*(_QWORD *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController
                                            + 8]);
      swift_unknownObjectRetain(v26);
    }
    else
    {
      v26 = *(void **)(v25 + 8);
      swift_unknownObjectRetain(v26);
      swift_bridgeObjectRetain(v24);
    }
    v27 = sub_10035AC04(v23, v24, v26, (uint64_t)v20);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v24);
    swift_unknownObjectRelease(v26);
    v28 = sub_1002C9870();
    v29 = v1;
    v30 = sub_1002D43F4((uint64_t)v27, v29, v28);
    swift_bridgeObjectRelease(v27);

    v55 = (unint64_t)v30;
    v31 = sub_10006922C(&qword_10064FE20);
    inited = swift_initStackObject(v31, &v54);
    *(_OWORD *)(inited + 16) = xmmword_1004D9670;
    v33 = (void *)DOCDocumentSourceIdentifierTrashedItems;
    *(_QWORD *)(inited + 32) = DOCDocumentSourceIdentifierTrashedItems;
    v34 = inited + 32;
    v35 = v33;
    v36 = sub_1000DFACC((uint64_t)v20, inited);
    swift_setDeallocating(inited);
    v37 = *(_QWORD *)(inited + 16);
    type metadata accessor for DOCDocumentSourceIdentifier(0);
    swift_arrayDestroy(v34, v37, v38);
    if ((v36 & 1) == 0)
    {
      v39 = (void *)sub_1002D47D8(v28);
      v40 = sub_100034068(0);
      v41 = (uint64_t)sub_1002CBBFC(v40);
      swift_bridgeObjectRelease(v40);
      if ((unint64_t)v41 >> 62)
      {
        if (v41 < 0)
          v53 = v41;
        else
          v53 = v41 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v41);
        v42 = _CocoaArrayWrapper.endIndex.getter(v53);
        swift_bridgeObjectRelease(v41);
      }
      else
      {
        v42 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v41);
      objc_msgSend(v39, "setEnabled:", v42 > 0);
      v43 = objc_msgSend((id)objc_opt_self(UIBarButtonItem), "flexibleSpaceItem");
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v43);
      v45 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v44 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v45 >= v44 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
      v46 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v43);
      specialized Array._endMutation()(v46);
      v47 = v39;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v47);
      v49 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v48 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v49 >= v48 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
      v50 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v47);
      specialized Array._endMutation()(v50);
      v51 = *(void **)&v29[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_moreActionsBarButton];
      *(_QWORD *)&v29[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_moreActionsBarButton] = v47;

      v20 = v28;
      v28 = v51;
    }

    return (_QWORD *)v55;
  }
  __break(1u);
  return result;
}

id sub_1002CB9CC()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v10;
  _BYTE v11[24];

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_bbiStorage];
  swift_beginAccess(v1 + 32, v11, 33, 0);
  v2 = *(void **)(v1 + 40);
  swift_retain(v1);
  if (v2)
  {
    v3 = v2;
  }
  else
  {
    v4 = sub_1002CF1E0(v0);
    *(_QWORD *)(v1 + 40) = v4;
    type metadata accessor for DOCBarButtonItemGroup();
    v5 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v6 = swift_allocObject(v5, 40, 7);
    *(_OWORD *)(v6 + 16) = xmmword_1004D9B40;
    *(_QWORD *)(v6 + 32) = v4;
    v10 = v6;
    specialized Array._endMutation()(v6);
    v3 = v4;
    v7 = static UIBarButtonItemGroup.fixedGroup(representativeItem:items:)(0, v10);
    swift_bridgeObjectRelease(v10);

    v2 = 0;
    *(_QWORD *)(v1 + 32) = v7;
  }
  swift_endAccess(v11);
  v8 = v2;
  swift_release(v1);
  return v3;
}

id sub_1002CBAE4()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v10;
  _BYTE v11[24];

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_bbiStorage];
  swift_beginAccess(v1 + 48, v11, 33, 0);
  v2 = *(void **)(v1 + 56);
  swift_retain(v1);
  if (v2)
  {
    v3 = v2;
  }
  else
  {
    v4 = sub_1002CF398(v0);
    *(_QWORD *)(v1 + 56) = v4;
    type metadata accessor for DOCBarButtonItemGroup();
    v5 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v6 = swift_allocObject(v5, 40, 7);
    *(_OWORD *)(v6 + 16) = xmmword_1004D9B40;
    *(_QWORD *)(v6 + 32) = v4;
    v10 = v6;
    specialized Array._endMutation()(v6);
    v3 = v4;
    v7 = static UIBarButtonItemGroup.fixedGroup(representativeItem:items:)(0, v10);
    swift_bridgeObjectRelease(v10);

    v2 = 0;
    *(_QWORD *)(v1 + 48) = v7;
  }
  swift_endAccess(v11);
  v8 = v2;
  swift_release(v1);
  return v3;
}

_QWORD *sub_1002CBBFC(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  if (!result)
    return _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (v2)
  {
    v3 = (uint64_t)result;
    v4 = v2 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type;
    if ((*(_BYTE *)(v4 + 16) & 1) != 0)
      v5 = *(void **)(*(_QWORD *)v4 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode);
    else
      v5 = *(void **)(v4 + 8);
    swift_unknownObjectRetain(v5);
    v6 = sub_10034F94C(v3, UIDocumentBrowserActionAvailabilityToolbar, v5, *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration), 0, 0);
    swift_unknownObjectRelease(v5);
    return (_QWORD *)v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002CBCD4(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void (**v18)(_QWORD, _QWORD, _QWORD);
  Class isa;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _QWORD v23[4];

  v3 = type metadata accessor for DOCActionToolBarItem();
  v4 = swift_dynamicCastClass(a1, v3);
  if (!v4 || (v5 = v4, (v6 = *(void **)(v4 + OBJC_IVAR____TtC5Files20DOCActionToolBarItem_docAction)) == 0))
  {
    objc_msgSend(v1, "setEditing:animated:", 0, 1);
    return;
  }
  if (*(_BYTE *)(v4 + OBJC_IVAR____TtC5Files20DOCActionToolBarItem_onSelectedItems) == 1)
  {
    v7 = a1;
    v22 = v6;
    v8 = (uint64_t)sub_100034068(0);
    if ((unint64_t)v8 >> 62)
    {
      v20 = v8 & 0xFFFFFFFFFFFFFF8;
      if (v8 < 0)
        v20 = v8;
      v21 = v8;
      v9 = _CocoaArrayWrapper.endIndex.getter(v20);
      v8 = v21;
    }
    else
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v8);
    if (v9 < 1)
    {

      return;
    }
    v10 = sub_100034068(0);
  }
  else
  {
    v10 = *(_QWORD **)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8];
    v11 = a1;
    v12 = v6;
    swift_bridgeObjectRetain(v10);
  }
  v23[3] = v3;
  v23[0] = v5;
  v13 = a1;
  v14 = DOCItemCollectionViewController.actionContext(from:)();
  sub_10007EB54((uint64_t)v23);
  if (objc_msgSend(v6, "requiresResolvedItems"))
  {
    v15 = v6;
    v16 = v14;
    sub_10035E100((uint64_t)v10, v15, v16);
    swift_bridgeObjectRelease(v10);

  }
  else
  {
    v17 = objc_msgSend(v6, "unresolvedHandler");
    if (!v17)
    {

      swift_bridgeObjectRelease(v10);
      goto LABEL_15;
    }
    v18 = (void (**)(_QWORD, _QWORD, _QWORD))v17;
    v16 = v14;
    _Block_copy(v18);
    sub_10006922C((uint64_t *)&unk_1006424B0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(_QWORD, Class, id))v18)[2](v18, isa, v16);

    _Block_release(v18);
    _Block_release(v18);
    swift_bridgeObjectRelease(v10);
  }

LABEL_15:
  if ((objc_msgSend(v6, "performActionExitsEditMode", v21, v22, v23[0]) & 1) != 0)
    objc_msgSend(v1, "setEditing:animated:", 0, 1);

}

void sub_1002CBFB0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];

  v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v21, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v6, v7);
  if (Strong)
  {
    v9 = (void *)Strong;
    v10 = a3 + 16;
    swift_beginAccess(v10, &v20, 0, 0);
    v12 = swift_unknownObjectWeakLoadStrong(v10, v11);
    if (v12)
    {
      v13 = (void *)v12;
      v14 = sub_100034068(1);
      v15 = swift_allocObject(&unk_1005DA8E8, 24, 7);
      swift_unknownObjectWeakInit(v15 + 16);
      v16 = (_QWORD *)swift_allocObject(&unk_1005DAAF0, 40, 7);
      v16[2] = v15;
      v16[3] = a4;
      v16[4] = v13;
      v17 = a4;
      v18 = v13;
      v19 = sub_10006922C((uint64_t *)&unk_1006424B0);
      Array<A>.fpfs_fetchAllFPItems(completion:)(sub_1002D548C, v16, v14, v19);

      swift_bridgeObjectRelease(v14);
      swift_release(v16);
    }
    else
    {

    }
  }
}

void sub_1002CC0D8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t Strong;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void (**v20)(_QWORD, _QWORD, _QWORD);
  Class isa;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  _BYTE v27[24];

  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v27, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7, v8);
  if (Strong)
  {
    v10 = (void *)Strong;
    if (!a1)
    {
LABEL_12:

      return;
    }
    v11 = *(void **)(Strong + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_actionManager);
    v12 = a1 & 0xFFFFFFFFFFFFFF8;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0)
        v12 = a1;
      v22 = v11;
      swift_bridgeObjectRetain(a1);
      v23 = sub_10006922C((uint64_t *)&unk_1006424B0);
      v24 = _bridgeCocoaArray<A>(_:)(v12, v23);
      v25 = a1;
      a1 = v24;
      swift_bridgeObjectRelease(v25);
    }
    else
    {
      v13 = v11;
      v14 = swift_bridgeObjectRetain(a1);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v14);
    }
    v26[3] = sub_10004F2F0(0, (unint64_t *)&qword_1006475F0, UIBarButtonItem_ptr);
    v26[0] = a4;
    v15 = a4;
    v16 = DOCItemCollectionViewController.actionContext(from:)();
    sub_10007EB54((uint64_t)v26);
    if (objc_msgSend(a3, "requiresResolvedItems"))
    {
      v17 = a3;
      v18 = v16;
      sub_10035E100(a1, v17, v18);
      swift_bridgeObjectRelease(a1);

    }
    else
    {
      v19 = objc_msgSend(a3, "unresolvedHandler");
      if (!v19)
      {
        swift_bridgeObjectRelease(a1);
LABEL_10:

        if ((objc_msgSend(a3, "performActionExitsEditMode") & 1) != 0)
          objc_msgSend(v10, "setEditing:animated:", 0, 1);
        goto LABEL_12;
      }
      v20 = (void (**)(_QWORD, _QWORD, _QWORD))v19;
      v18 = v16;
      _Block_copy(v20);
      sub_10006922C((uint64_t *)&unk_1006424B0);
      isa = Array._bridgeToObjectiveC()().super.isa;
      ((void (**)(_QWORD, Class, id))v20)[2](v20, isa, v18);

      _Block_release(v20);
      _Block_release(v20);
      swift_bridgeObjectRelease(a1);
    }

    goto LABEL_10;
  }
}

void sub_1002CC2F8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  Class v4;
  Swift::OpaquePointer v5;
  Class v6;
  uint64_t v7;
  UIMenuElementSize preferredElementSize;
  id v9;
  void *v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  Swift::String v18;
  UIMenu v19;
  objc_class *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  objc_class *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  objc_class *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  UIMenuElementSize v33;
  Swift::String v34;
  Class isa;
  objc_class **v36;
  uint64_t v37;
  uint64_t v38;
  Swift::OpaquePointer v39;
  UIMenu v40;
  UIMenuElementSize v41[3];
  UIImage_optional v42;
  UIImage_optional v43;
  Swift::String swift__string;

  v2 = v1;
  v4 = sub_100054784(0, 1);
  v5._rawValue = 0;
  v6 = sub_1000459A8(0, v5, 0);
  v7 = sub_10006922C((uint64_t *)&unk_1006441A0);
  preferredElementSize = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(preferredElementSize + 16) = xmmword_1004D9B40;
  v9 = (id)_DocumentManagerBundle(preferredElementSize);
  if (!v9)
  {
    __break(1u);
    JUMPOUT(0x1002CC738);
  }
  v10 = v9;
  sub_10004F2F0(0, (unint64_t *)&qword_1006448A0, UIMenu_ptr);
  swift__string._object = (void *)0x8000000100524370;
  v11._countAndFlagsBits = 0x74704F2077656956;
  v11._object = (void *)0xEC000000736E6F69;
  v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v12.value._object = (void *)0xEB00000000656C62;
  v13._countAndFlagsBits = 0x74704F2077656956;
  v13._object = (void *)0xEC000000736E6F69;
  swift__string._countAndFlagsBits = 0xD000000000000025;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, swift__string);

  sub_10004F2F0(0, (unint64_t *)&qword_1006424C0, UIAction_ptr);
  v15 = swift_allocObject(&unk_1005DA8E8, 24, 7);
  swift_unknownObjectWeakInit(v15 + 16);
  v17 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v14._countAndFlagsBits, v14._object, 0, 0, 0, 0, 0, 0, v16, 0, 0, 0, sub_1002D5074, v15);
  *(_QWORD *)(preferredElementSize + 32) = v17;
  specialized Array._endMutation()(v17);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v42.value.super.isa = 0;
  v42.is_nil = 0;
  v19.super.super.isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v18, (Swift::String_optional)0, v42, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v39).super.super.isa;
  v41[0] = (UIMenuElementSize)_swiftEmptyArrayStorage;
  if (v4)
  {
    v20 = v4;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
    v22 = *(_QWORD *)((v41[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    v21 = *(_QWORD *)((v41[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v22 >= v21 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
    v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
    specialized Array._endMutation()(v23);
  }
  if (v6)
  {
    v24 = v6;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v24);
    v26 = *(_QWORD *)((v41[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    v25 = *(_QWORD *)((v41[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v26 >= v25 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
    v27 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v24);
    specialized Array._endMutation()(v27);
  }
  v28 = v19.super.super.isa;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
  v30 = *(_QWORD *)((v41[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
  v29 = *(_QWORD *)((v41[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v30 >= v29 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
  v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v28);
  specialized Array._endMutation()(v31);

  if ((unint64_t)v41[0] >> 62)
  {
    if ((uint64_t)v41[0] < UIMenuElementSizeSmall)
      v37 = v41[0];
    else
      v37 = v41[0] & 0xFFFFFFFFFFFFFF8;
    v38 = sub_10004F2F0(0, (unint64_t *)&qword_100644320, UIMenuElement_ptr);
    swift_bridgeObjectRetain(v41[0]);
    v33 = _bridgeCocoaArray<A>(_:)(v37, v38);
    swift_bridgeObjectRelease(v41[0]);
  }
  else
  {
    v32 = swift_bridgeObjectRetain(v41[0]);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v32);
    sub_10004F2F0(0, (unint64_t *)&qword_100644320, UIMenuElement_ptr);
    v33 = v41[0];
  }
  swift_bridgeObjectRelease(v41[0]);
  v34._countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  v43.value.super.isa = 0;
  v43.is_nil = 0;
  isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v34, (Swift::String_optional)0, v43, 0, 0xFFFFFFFFFFFFFFFFLL, v33, (Swift::OpaquePointer)v40.super.super.isa).super.super.isa;
  objc_msgSend(a1, "setMenu:", isa);
  sub_1000385C4();
  v36 = (objc_class **)(v2 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode);
  swift_beginAccess(v2 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode, v41, 0, 0);
  sub_1002D3198(*v36, a1);

}

void sub_1002CC770(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *Strong;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _BYTE v33[24];

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v33[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v7);
  v11 = &v33[-v10 - 8];
  a3 += 16;
  swift_beginAccess(a3, v33, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a3, v12);
  if (Strong
    && (v14 = Strong, v15 = objc_msgSend(Strong, "menu"), v14, v15))
  {
    v16 = objc_msgSend(v15, "children");
    v17 = sub_10004F2F0(0, (unint64_t *)&qword_100644320, UIMenuElement_ptr);
    v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

    if ((unint64_t)v18 >> 62)
    {
      if (v18 < 0)
        v24 = v18;
      else
        v24 = v18 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v18);
      v25 = _CocoaArrayWrapper.endIndex.getter(v24);
      swift_bridgeObjectRelease(v18);
      if (v25 >= 1)
        goto LABEL_5;
    }
    else if (*(uint64_t *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10) >= 1)
    {
LABEL_5:
      a1(v18);

      swift_bridgeObjectRelease(v18);
      return;
    }
    v26 = swift_bridgeObjectRelease(v18);
    v27 = Logger.UI.unsafeMutableAddressor(v26);
    v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v27, v5);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "ERROR: attempt represent in overflow as inline menu elements, but no menu elements present", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    a1((uint64_t)_swiftEmptyArrayStorage);

  }
  else
  {
    v19 = Logger.UI.unsafeMutableAddressor(Strong);
    v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, v19, v5);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "ERROR: attempt represent in overflow as inline menu elements, but no menu present", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    a1((uint64_t)_swiftEmptyArrayStorage);
  }
}

void sub_1002CCA60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t inited;
  id v8;
  uint64_t v9;
  _BYTE v10[40];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (!v1)
  {
    __break(1u);
    return;
  }
  v2 = v1 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type;
  if ((*(_BYTE *)(v2 + 16) & 1) != 0)
  {
    v3 = *(void **)(*(_QWORD *)v2 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode);
    swift_unknownObjectRetain(v3);
  }
  else
  {
    v3 = *(void **)(v2 + 8);
    swift_unknownObjectRetain(v3);
    if (!v3)
      return;
  }
  v4 = objc_msgSend(v3, "fpfs_fpItem");
  swift_unknownObjectRelease(v3);
  if (v4)
  {
    v5 = (void *)FPActionImportHere;
    v6 = sub_10006922C((uint64_t *)&unk_1006441A0);
    inited = swift_initStackObject(v6, v10);
    *(_OWORD *)(inited + 16) = xmmword_1004D9B40;
    *(_QWORD *)(inited + 32) = v4;
    v9 = inited;
    specialized Array._endMutation()(inited);
    v8 = v4;
    sub_1003598CC(v5, v9);
    swift_bridgeObjectRelease(v9);

  }
}

uint64_t sub_1002CCB98()
{
  char *v0;
  void *v1;
  uint64_t result;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)&v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration];
  result = (uint64_t)objc_msgSend(v1, "isPickerUI");
  if ((_DWORD)result)
  {
    v3 = objc_msgSend(v0, "splitViewController");
    if (v3
      && (v4 = v3,
          v5 = objc_msgSend(v3, "doc_splitViewState"),
          v4,
          LOBYTE(v4) = objc_msgSend(v5, "isSidebarShown"),
          v5,
          (v4 & 1) != 0))
    {
      return 0;
    }
    else if ((objc_msgSend(v1, "forPickingFolders") & 1) != 0)
    {
      return 1;
    }
    else
    {
      return (uint64_t)objc_msgSend(v1, "forSavingDocuments");
    }
  }
  return result;
}

_QWORD *sub_1002CCC68(unint64_t a1)
{
  unint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  Class isa;
  id v7;
  uint64_t v8;
  uint64_t v10;

  v1 = a1;
  v2 = sub_100012BA0(a1);
  if (v2)
  {
    v3 = v2;
    v4 = sub_100080FF8((uint64_t)v2);
    swift_bridgeObjectRelease(v3);
    v5 = objc_allocWithZone((Class)NSArray);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
    v7 = objc_msgSend(v5, "initWithArray:copyItems:", isa, 1);

    v10 = 0;
    v8 = sub_10004F2F0(0, (unint64_t *)&qword_1006475F0, UIBarButtonItem_ptr);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)(v7, &v10, v8);

    if (v10)
      return (_QWORD *)v10;
    else
      return _swiftEmptyArrayStorage;
  }
  else
  {
    swift_bridgeObjectRetain(v1);
  }
  return (_QWORD *)v1;
}

BOOL sub_1002CCD54()
{
  char *v0;
  id v1;
  id v2;
  _BOOL8 v3;
  id v4;
  char v5;
  double v6;

  v1 = sub_1002C9870();
  v2 = objc_msgSend(v1, "horizontalSizeClass");

  v3 = v2 == (id)1;
  v4 = sub_1002CECBC(v0);
  if ((v5 & 1) == 0)
  {
    v6 = *(double *)&v4;
    if (objc_msgSend(v0, "enclosedInUIPDocumentLanding") && (sub_1002C99D4() & 1) != 0)
      v6 = v6 + -319.0;
    return v6 <= 876.0;
  }
  return v3;
}

uint64_t sub_1002CCDF8(_QWORD *a1, _BYTE *a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t result;
  void *v9;
  objc_class *v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[4];

  if (objc_msgSend(a2, "isEditing"))
  {
    if ((a2[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_forceEditingMode] & 1) == 0 && !sub_1002CCD54())
    {
      v4 = *(_QWORD *)&a2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_bbiStorage];
      swift_beginAccess(v4 + 16, v34, 33, 0);
      v5 = *(void **)(v4 + 24);
      if (v5)
      {
        swift_retain();
        v6 = v5;
      }
      else
      {
        sub_10004F2F0(0, (unint64_t *)&qword_1006475F0, UIBarButtonItem_ptr);
        sub_10004F2F0(0, (unint64_t *)&qword_1006424C0, UIAction_ptr);
        v15 = swift_allocObject(&unk_1005DA8E8, 24, 7);
        swift_unknownObjectWeakInit(v15 + 16);
        v16 = swift_retain();
        v17 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, v16, 0, 0, 0, sub_1002D5008, v15);
        v18 = sub_10045814C((uint64_t)v17);

        *(_QWORD *)(v4 + 24) = v18;
        type metadata accessor for DOCBarButtonItemGroup();
        v19 = sub_10006922C((uint64_t *)&unk_1006441A0);
        v20 = swift_allocObject(v19, 40, 7);
        *(_OWORD *)(v20 + 16) = xmmword_1004D9B40;
        *(_QWORD *)(v20 + 32) = v18;
        v33 = v20;
        specialized Array._endMutation()(v20);
        v6 = v18;
        v21 = static UIBarButtonItemGroup.fixedGroup(representativeItem:items:)(0, v33);
        swift_bridgeObjectRelease(v33);

        v5 = 0;
        *(_QWORD *)(v4 + 16) = v21;
      }
      swift_endAccess(v34);
      v22 = v5;
      v23 = swift_release(v4);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
      v25 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v24 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v25 >= v24 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
      v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v6);
      specialized Array._endMutation()(v26);
    }
    v27 = *(void **)(*(_QWORD *)&a2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration]
                   + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain);
    if (v27)
      v28 = objc_msgSend(v27, "isiCloudDriveProvider");
    else
      v28 = 0;
    v29 = sub_100034068(0);
    v30 = sub_10034F138((id)2, (uint64_t)v29, v28, *(id **)&a2[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration]);
    v31 = swift_bridgeObjectRelease(v29);
    __chkstk_darwin(v31);
    v32 = sub_1002D30C4(v30, (uint64_t (*)(void))sub_1002D5408);
    swift_bridgeObjectRelease(v30);
    return sub_1000887E8((uint64_t)v32);
  }
  else
  {
    v7 = *(void **)&a2[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration];
    if (objc_msgSend(v7, "isPickerUI"))
    {
      result = (uint64_t)objc_msgSend(v7, "forPickingDocuments");
      if (!(_DWORD)result)
        return result;
      result = (uint64_t)sub_100038208();
      if (!result)
        return result;

    }
    if (a2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_multiselectActionStatus] == 1)
    {
      v9 = sub_1002CD234(1);
    }
    else
    {
      result = sub_1002CCD54();
      if ((result & 1) != 0)
        return result;
      v10 = sub_1002CD408();
      v34[3] = sub_10004F2F0(0, (unint64_t *)&qword_1006475F0, UIBarButtonItem_ptr);
      v34[0] = v10;
      sub_100027934((uint64_t)v34);
      sub_100068588(v34);
      v9 = sub_1002CD408();
    }
    v11 = v9;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
    v13 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v12 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v13 >= v12 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
    v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
    return specialized Array._endMutation()(v14);
  }
}

id sub_1002CD234(char a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;
  id result;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _BYTE v18[24];

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_bbiStorage);
  swift_beginAccess(v3 + 144, v18, 33, 0);
  if (*(_QWORD *)(v3 + 152))
  {
    v16 = *(id *)(v3 + 152);
    swift_endAccess(v18);
    v4 = v16;
    v5 = v16;
    if ((a1 & 1) == 0)
      return v16;
  }
  else
  {
    v7 = objc_msgSend(objc_allocWithZone((Class)UIActivityIndicatorView), "initWithActivityIndicatorStyle:", 100, swift_retain().n128_f64[0]);
    v8 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithCustomView:", v7);

    *(_QWORD *)(v3 + 152) = v8;
    type metadata accessor for DOCBarButtonItemGroup();
    v9 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v10 = swift_allocObject(v9, 40, 7);
    *(_OWORD *)(v10 + 16) = xmmword_1004D9B40;
    *(_QWORD *)(v10 + 32) = v8;
    v17 = v10;
    specialized Array._endMutation()(v10);
    v5 = v8;
    v11 = static UIBarButtonItemGroup.fixedGroup(representativeItem:items:)(0, v17);
    v12 = *(void **)(v3 + 144);
    *(_QWORD *)(v3 + 144) = v11;
    swift_endAccess(v18);
    swift_release(v3);
    swift_bridgeObjectRelease(v17);

    v4 = 0;
    if ((a1 & 1) == 0)
      return v5;
  }
  v13 = v4;
  result = objc_msgSend(v5, "customView");
  if (result)
  {
    v14 = result;
    v15 = objc_opt_self(UIActivityIndicatorView);
    objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(v14, v15, 0, 0, 0), "startAnimating");

    return v5;
  }
  __break(1u);
  return result;
}

objc_class *sub_1002CD408()
{
  uint64_t v0;
  uint64_t v1;
  objc_class *v2;
  objc_class *v3;
  Class v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v10;
  _BYTE v11[24];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_bbiStorage);
  swift_beginAccess(v1 + 80, v11, 33, 0);
  v2 = *(objc_class **)(v1 + 88);
  swift_retain();
  if (v2)
  {
    v3 = v2;
  }
  else
  {
    v4 = sub_1002CF554(v0);
    *(_QWORD *)(v1 + 88) = v4;
    type metadata accessor for DOCBarButtonItemGroup();
    v5 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v6 = swift_allocObject(v5, 40, 7);
    *(_OWORD *)(v6 + 16) = xmmword_1004D9B40;
    *(_QWORD *)(v6 + 32) = v4;
    v10 = v6;
    specialized Array._endMutation()(v6);
    v3 = v4;
    v7 = static UIBarButtonItemGroup.fixedGroup(representativeItem:items:)(0, v10);
    swift_bridgeObjectRelease(v10);

    v2 = 0;
    *(_QWORD *)(v1 + 80) = v7;
  }
  swift_endAccess(v11);
  v8 = v2;
  swift_release(v1);
  return v3;
}

BOOL sub_1002CD520(_QWORD *a1, void *a2)
{
  id v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = sub_10009A6F8(1);
  if (v4)
  {
    if (a2)
    {
      v5 = a2;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
      v7 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v6 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v7 >= v6 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v5);
      specialized Array._endMutation()(v8);
    }
    v9 = v4;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
    v11 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v10 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v11 >= v10 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
    v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
    specialized Array._endMutation()(v12);

  }
  return v4 != 0;
}

id sub_1002CD61C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  objc_class **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE v13[24];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_bbiStorage);
  swift_beginAccess(v1 + 112, v13, 33, 0);
  v2 = *(void **)(v1 + 120);
  if (v2)
  {
    swift_retain();
    v3 = v2;
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithImage:style:target:action:", 0, 0, 0, 0, swift_retain().n128_f64[0]);
    v5 = (objc_class **)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode);
    swift_beginAccess(v5, v12, 0, 0);
    sub_1002D3198(*v5, v4);
    *(_QWORD *)(v1 + 120) = v4;
    type metadata accessor for DOCBarButtonItemGroup();
    v6 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v7 = swift_allocObject(v6, 40, 7);
    *(_OWORD *)(v7 + 16) = xmmword_1004D9B40;
    *(_QWORD *)(v7 + 32) = v4;
    v11 = v7;
    specialized Array._endMutation()(v7);
    v3 = v4;
    v8 = static UIBarButtonItemGroup.fixedGroup(representativeItem:items:)(0, v11);
    swift_bridgeObjectRelease(v11);

    v2 = 0;
    *(_QWORD *)(v1 + 112) = v8;
  }
  swift_endAccess(v13);
  v9 = v2;
  swift_release(v1);
  return v3;
}

uint64_t sub_1002CD78C()
{
  char *v0;
  id v1;
  void *v2;
  unsigned int v3;
  uint64_t result;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration], "forMovingDocuments") & 1) != 0|| objc_msgSend(v0, "enclosedInUIPDocumentLanding")&& objc_msgSend(v0, "enclosingDocumentLandingMode"))
  {
    return 2;
  }
  v1 = objc_msgSend(v0, "effectiveAppearance");
  if (!v1)
    return 2;
  v2 = v1;
  v3 = objc_msgSend(v1, "showsCreateButton");

  if (!v3
    || (objc_msgSend((id)objc_opt_self(DOCFeature), "_UIPTabInfrastructureEnabled") & 1) == 0
    && (objc_msgSend(v0, "isEditing") & 1) != 0)
  {
    return 2;
  }
  result = (uint64_t)objc_msgSend(v0, "isEditing");
  if ((result & 1) != 0)
  {
LABEL_10:
    v5 = 0;
    return v5 & 1;
  }
  v6 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection];
  if (v6)
  {
    v7 = v6 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type;
    if ((*(_BYTE *)(v7 + 16) & 1) != 0)
    {
      v8 = *(void **)(*(_QWORD *)v7 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode);
      swift_unknownObjectRetain(v8);
    }
    else
    {
      v8 = *(void **)(v7 + 8);
      swift_unknownObjectRetain(v8);
      if (!v8)
      {
        v10 = *(void **)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration + 24];
        if (v10)
        {
          v11 = v10;
          v12 = objc_msgSend(v11, "sourceIdentifier");
          v13 = DOCDocumentSourceIdentifierRecentDocuments;
          v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
          v16 = v15;
          v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
          v19 = v18;
          if (v14 == v17 && v16 == v18)
            v5 = 1;
          else
            v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0);

          swift_bridgeObjectRelease(v16);
          swift_bridgeObjectRelease(v19);
          return v5 & 1;
        }
        goto LABEL_10;
      }
    }
    v5 = sub_100359CA0(v8, v9);
    swift_unknownObjectRelease(v8);
    return v5 & 1;
  }
  __break(1u);
  return result;
}

id sub_1002CD9A8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v10;
  _BYTE v11[24];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_bbiStorage);
  swift_beginAccess(v1 + 64, v11, 33, 0);
  v2 = *(void **)(v1 + 72);
  swift_retain();
  if (v2)
  {
    v3 = v2;
  }
  else
  {
    v4 = sub_1002CFB08(v0);
    *(_QWORD *)(v1 + 72) = v4;
    type metadata accessor for DOCBarButtonItemGroup();
    v5 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v6 = swift_allocObject(v5, 40, 7);
    *(_OWORD *)(v6 + 16) = xmmword_1004D9B40;
    *(_QWORD *)(v6 + 32) = v4;
    v10 = v6;
    specialized Array._endMutation()(v6);
    v3 = v4;
    v7 = static UIBarButtonItemGroup.fixedGroup(representativeItem:items:)(0, v10);
    swift_bridgeObjectRelease(v10);

    v2 = 0;
    *(_QWORD *)(v1 + 64) = v7;
  }
  swift_endAccess(v11);
  v8 = v2;
  swift_release(v1);
  return v3;
}

id sub_1002CDAC0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v11;
  _BYTE v12[24];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_bbiStorage);
  swift_beginAccess(v1 + 128, v12, 33, 0);
  v2 = *(void **)(v1 + 136);
  if (v2)
  {
    swift_retain();
    v3 = v2;
  }
  else
  {
    v4 = objc_allocWithZone((Class)type metadata accessor for DOCLegacyOverflowBarButtonItem());
    v5 = objc_msgSend(v4, "init", swift_retain().n128_f64[0]);
    *(_QWORD *)(v1 + 136) = v5;
    type metadata accessor for DOCBarButtonItemGroup();
    v6 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v7 = swift_allocObject(v6, 40, 7);
    *(_OWORD *)(v7 + 16) = xmmword_1004D9B40;
    *(_QWORD *)(v7 + 32) = v5;
    v11 = v7;
    specialized Array._endMutation()(v7);
    v3 = v5;
    v8 = static UIBarButtonItemGroup.fixedGroup(representativeItem:items:)(0, v11);
    swift_bridgeObjectRelease(v11);

    v2 = 0;
    *(_QWORD *)(v1 + 128) = v8;
  }
  swift_endAccess(v12);
  v9 = v2;
  swift_release(v1);
  return v3;
}

id sub_1002CDBF0()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v10;
  _BYTE v11[24];

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_bbiStorage];
  swift_beginAccess(v1 + 96, v11, 33, 0);
  v2 = *(void **)(v1 + 104);
  swift_retain();
  if (v2)
  {
    v3 = v2;
  }
  else
  {
    v4 = sub_1002CFCD0(v0);
    *(_QWORD *)(v1 + 104) = v4;
    type metadata accessor for DOCBarButtonItemGroup();
    v5 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v6 = swift_allocObject(v5, 40, 7);
    *(_OWORD *)(v6 + 16) = xmmword_1004D9B40;
    *(_QWORD *)(v6 + 32) = v4;
    v10 = v6;
    specialized Array._endMutation()(v6);
    v3 = v4;
    v7 = static UIBarButtonItemGroup.fixedGroup(representativeItem:items:)(0, v10);
    swift_bridgeObjectRelease(v10);

    v2 = 0;
    *(_QWORD *)(v1 + 96) = v7;
  }
  swift_endAccess(v11);
  v8 = v2;
  swift_release(v1);
  return v3;
}

id sub_1002CDD08()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v11;
  _BYTE v12[24];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_bbiStorage);
  swift_beginAccess(v1 + 176, v12, 33, 0);
  v2 = *(void **)(v1 + 184);
  if (v2)
  {
    swift_retain(v1);
    v3 = v2;
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIActivityIndicatorView), "initWithActivityIndicatorStyle:", 100, swift_retain(v1).n128_f64[0]);
    v5 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithCustomView:", v4);

    *(_QWORD *)(v1 + 184) = v5;
    type metadata accessor for DOCBarButtonItemGroup();
    v6 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v7 = swift_allocObject(v6, 40, 7);
    *(_OWORD *)(v7 + 16) = xmmword_1004D9B40;
    *(_QWORD *)(v7 + 32) = v5;
    v11 = v7;
    specialized Array._endMutation()(v7);
    v3 = v5;
    v8 = static UIBarButtonItemGroup.fixedGroup(representativeItem:items:)(0, v11);
    swift_bridgeObjectRelease(v11);

    v2 = 0;
    *(_QWORD *)(v1 + 176) = v8;
  }
  swift_endAccess(v12);
  v9 = v2;
  swift_release(v1);
  return v3;
}

void sub_1002CDE60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  void (**v6)(_QWORD, _QWORD);
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t Strong;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  char *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  id v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  void *v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t Available;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD aBlock[5];
  _QWORD *v79;
  _BYTE v80[32];
  _BYTE v81[32];
  char v82[32];

  v76 = a2;
  v5 = (_QWORD *)type metadata accessor for DispatchWorkItemFlags(0);
  v6 = (void (**)(_QWORD, _QWORD))*(v5 - 1);
  __chkstk_darwin(v5);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v75 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v82, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a3, v16);
  if (Strong)
  {
    v18 = Strong;
    v72 = v13;
    v73 = v12;
    v19 = (void *)objc_opt_self(DOCTabbedBrowserViewController);
    v74 = (char *)OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration;
    v20 = objc_msgSend(*(id *)(v18 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration), "sceneIdentifier");
    v21 = objc_msgSend(v19, "globalTabbedBrowserControllerForIdentifier:", v20);

    if (!v21
      || (v22 = (uint64_t)objc_msgSend(v21, "effectiveFullBrowser"),
          v21,
          !v22))
    {

      return;
    }
    v67 = v10;
    v68 = v9;
    v69 = v8;
    v23 = swift_allocObject(&unk_1005DAB18, 24, 7);
    *(_QWORD *)(v23 + 16) = a1;
    aBlock[0] = _swiftEmptyArrayStorage;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0)
        v21 = (id)a1;
      else
        v21 = (id)(a1 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain_n(a1, 3);
      v24 = _CocoaArrayWrapper.endIndex.getter(v21);
    }
    else
    {
      v24 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(a1, 3);
    }
    v70 = (id)v22;
    if (v24)
    {
      v65 = (uint64_t)v6;
      v66 = v5;
      v71 = v23;
      if (v24 < 1)
      {
        __break(1u);
        goto LABEL_38;
      }
      for (i = 0; i != v24; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
          v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        else
          v27 = *(id *)(a1 + 8 * i + 32);
        v28 = v27;
        v29 = objc_msgSend(v27, "fileProviderItem");

        if (v29)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
          v32 = *(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
          v31 = *(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v32 >= v31 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
          v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v29);
          specialized Array._endMutation()(v26);
        }
      }
      swift_bridgeObjectRelease(a1);
      v33 = aBlock[0];
      v23 = v71;
      v5 = v66;
      v6 = (void (**)(_QWORD, _QWORD))v65;
    }
    else
    {
      swift_bridgeObjectRelease(a1);
      v33 = (uint64_t)_swiftEmptyArrayStorage;
    }
    v24 = swift_allocObject(&unk_1005DAB40, 24, 7);
    swift_bridgeObjectRelease(a1);
    *(_QWORD *)(v24 + 16) = v33;
    if ((unint64_t)v33 >> 62)
    {
      if (v33 < 0)
        v61 = v33;
      else
        v61 = v33 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v33);
      v62 = sub_10006922C((uint64_t *)&unk_1006424B0);
      v71 = _bridgeCocoaArray<A>(_:)(v61, v62);
    }
    else
    {
      v34 = swift_bridgeObjectRetain_n(v33, 2);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v34);
      v71 = v33;
    }
    swift_bridgeObjectRelease(v33);
    v65 = type metadata accessor for DOCRelatedNodeMatcher();
    v66 = *(_QWORD **)(v18 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
    v35 = *(void **)&v74[v18];
    sub_1000685A8(v76, (uint64_t)v81);
    sub_1000685A8((uint64_t)v81, (uint64_t)v80);
    a1 = swift_allocObject(&unk_1005DAB68, 72, 7);
    *(_QWORD *)(a1 + 16) = v23;
    *(_QWORD *)(a1 + 24) = v24;
    v36 = v70;
    *(_QWORD *)(a1 + 32) = v70;
    sub_10007EBDC((uint64_t)v81, a1 + 40);
    swift_retain_n(v23, 2);
    swift_retain_n(v24, 2);
    v37 = (char *)v36;
    v38 = v35;
    if ((objc_msgSend(v38, "supportsRelatedFilesInPicker") & 1) != 0)
    {
      sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
      v70 = v38;
      v74 = v37;
      v39 = v75;
      v40 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v15, enum case for DispatchQoS.QoSClass.userInitiated(_:), v72);
      v64 = static OS_dispatch_queue.global(qos:)(v15);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v40);
      v41 = (_QWORD *)swift_allocObject(&unk_1005DABB8, 56, 7);
      v42 = v66;
      v43 = v71;
      v41[2] = v66;
      v41[3] = v43;
      v71 = v43;
      v41[4] = v65;
      v41[5] = sub_1002D5508;
      v41[6] = a1;
      aBlock[4] = sub_100146228;
      v79 = v41;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10004A82C;
      aBlock[3] = &unk_1005DABD0;
      v44 = _Block_copy(aBlock);
      v45 = v42;
      swift_bridgeObjectRetain(v43);
      swift_retain(a1);
      v76 = v24;
      v46 = v73;
      static DispatchQoS.unspecified.getter(v47);
      v77 = _swiftEmptyArrayStorage;
      v48 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v49 = sub_10006922C((uint64_t *)&unk_100647540);
      v50 = sub_1000791AC();
      v51 = v69;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v77, v49, v50, v5, v48);
      v52 = (void *)v64;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v51, v44);
      _Block_release(v44);

      ((void (**)(char *, _QWORD *))v6)[1](v51, v5);
      v53 = v46;
      v24 = v76;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v53, v68);
      v54 = v79;
      swift_release(v24);
      swift_release(v23);
      swift_release(a1);

      swift_bridgeObjectRelease(v71);
      v5 = v74;

      v55 = (uint64_t)v54;
LABEL_27:
      swift_release(v55);

      sub_10007EB54((uint64_t)v80);
      swift_release(v23);
      swift_release(v24);
      return;
    }
    v6 = (void (**)(_QWORD, _QWORD))v38;
    v5 = v37;
    v21 = (id)sub_10006922C((uint64_t *)&unk_1006424B0);
    Available = Array<A>.fpfs_syncFetchAvailableFPItems()(_swiftEmptyArrayStorage, v21);
    v22 = Available;
    if (!(Available >> 62))
    {
      v57 = swift_bridgeObjectRetain(Available);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v57);
      v58 = v22;
LABEL_26:
      sub_1000685A8((uint64_t)v80, (uint64_t)aBlock);
      v59 = (_QWORD *)swift_allocObject(&unk_1005DAB90, 80, 7);
      v59[2] = v23;
      v59[3] = v24;
      v59[4] = v22;
      v59[5] = v5;
      sub_10007EBDC((uint64_t)aBlock, (uint64_t)(v59 + 6));
      swift_retain(v23);
      swift_retain(v24);
      v60 = v5;
      sub_10035E724(v58, (uint64_t (*)(_QWORD *))sub_1002D551C, (uint64_t)v59);
      swift_release(v23);
      swift_release(a1);

      swift_bridgeObjectRelease(v71);
      swift_release(v59);
      swift_bridgeObjectRelease(v58);
      v55 = v24;
      goto LABEL_27;
    }
LABEL_38:
    if (v22 < 0)
      v63 = v22;
    else
      v63 = v22 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v22);
    v58 = _bridgeCocoaArray<A>(_:)(v63, v21);
    swift_bridgeObjectRelease(v22);
    goto LABEL_26;
  }
}

uint64_t sub_1002CE64C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t Available;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  uint64_t v18;
  _BYTE v19[32];

  v10 = sub_10006922C((uint64_t *)&unk_1006424B0);
  Available = Array<A>.fpfs_syncFetchAvailableFPItems()(a1, v10);
  v12 = Available;
  if ((unint64_t)Available >> 62)
  {
    if (Available < 0)
      v18 = Available;
    else
      v18 = Available & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(Available);
    v14 = _bridgeCocoaArray<A>(_:)(v18, v10);
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    v13 = swift_bridgeObjectRetain(Available);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v13);
    v14 = v12;
  }
  sub_1000685A8(a5, (uint64_t)v19);
  v15 = (_QWORD *)swift_allocObject(&unk_1005DAD20, 80, 7);
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = v12;
  v15[5] = a4;
  sub_10007EBDC((uint64_t)v19, (uint64_t)(v15 + 6));
  swift_retain(a2);
  swift_retain(a3);
  v16 = a4;
  sub_10035E724(v14, (uint64_t (*)(_QWORD *))sub_1002D551C, (uint64_t)v15);
  swift_release(v15);
  return swift_bridgeObjectRelease(v14);
}

void sub_1002CE774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  Class isa;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  _QWORD aBlock[5];
  uint64_t v26;
  _BYTE v27[32];
  char v28[24];

  v12 = a3 + 16;
  swift_beginAccess(a2 + 16, aBlock, 33, 0);
  v13 = swift_bridgeObjectRetain(a1);
  sub_100130640(v13);
  swift_endAccess(aBlock);
  swift_beginAccess(v12, aBlock, 33, 0);
  v14 = swift_bridgeObjectRetain(a4);
  sub_10012FFA0(v14);
  swift_endAccess(aBlock);
  swift_beginAccess(v12, v28, 0, 0);
  v15 = *(_QWORD *)(a3 + 16);
  sub_1000685A8(a6, (uint64_t)v27);
  v16 = swift_allocObject(&unk_1005DAC08, 64, 7);
  sub_10007EBDC((uint64_t)v27, v16 + 16);
  *(_QWORD *)(v16 + 48) = a5;
  *(_QWORD *)(v16 + 56) = a2;
  v17 = objc_allocWithZone((Class)FPDownloadOperation);
  sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
  swift_bridgeObjectRetain(v15);
  v18 = a5;
  swift_retain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v20 = objc_msgSend(v17, "initWithItems:", isa);

  objc_msgSend(v20, "setQualityOfService:", 25);
  v21 = swift_allocObject(&unk_1005DAC30, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_1002D5590;
  *(_QWORD *)(v21 + 24) = v16;
  aBlock[4] = sub_1002D559C;
  v26 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10043060C;
  aBlock[3] = &unk_1005DAC48;
  v22 = _Block_copy(aBlock);
  v23 = v26;
  swift_retain();
  objc_msgSend(v20, "setDownloadCompletionBlock:", v22, swift_release(v23).n128_f64[0]);
  _Block_release(v22);
  v24 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
  objc_msgSend(v24, "scheduleAction:", v20);
  swift_release(v16);
  swift_bridgeObjectRelease(v15);

}

void sub_1002CE9D0(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  Class isa;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void **aBlock;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  void *v27;
  void (*v28)();
  uint64_t v29;
  char v30[24];

  if (a1)
  {
    v7 = swift_allocObject(&unk_1005DACD0, 32, 7);
    *(_QWORD *)(v7 + 16) = a1;
    *(_QWORD *)(v7 + 24) = a3;
    v28 = sub_1002D55D0;
    v29 = v7;
    aBlock = _NSConcreteStackBlock;
    v25 = 1107296256;
    v26 = sub_10004A82C;
    v27 = &unk_1005DACE8;
    v8 = _Block_copy(&aBlock);
    v9 = v29;
    v10 = a1;
    v11 = a3;
    v12 = v9;
  }
  else
  {
    v14 = a4 + 16;
    v15 = (void *)objc_opt_self(DOCItemBookmark);
    swift_beginAccess(v14, v30, 0, 0);
    v16 = *(_QWORD *)(a4 + 16);
    sub_10004F2F0(0, &qword_100651E40, DOCItemBookmark_ptr);
    swift_bridgeObjectRetain(v16);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v18 = objc_msgSend(v15, "documentsURLsForItemBookmarks:", isa, swift_bridgeObjectRelease(v16).n128_f64[0]);

    v19 = type metadata accessor for URL(0);
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);

    v21 = swift_allocObject(&unk_1005DAC80, 32, 7);
    *(_QWORD *)(v21 + 16) = a3;
    *(_QWORD *)(v21 + 24) = v20;
    v28 = sub_1001462A4;
    v29 = v21;
    aBlock = _NSConcreteStackBlock;
    v25 = 1107296256;
    v26 = sub_10004A82C;
    v27 = &unk_1005DAC98;
    v8 = _Block_copy(&aBlock);
    v22 = v29;
    v23 = a3;
    v12 = v22;
  }
  swift_release(v12);
  DOCRunInMainThread(v8);
  _Block_release(v8);
  sub_1002CEBAC(a2);
}

void sub_1002CEBAC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char *v7;
  _BYTE v8[24];
  uint64_t v9;

  sub_1000685A8(a1, (uint64_t)v8);
  if (v9)
  {
    v1 = type metadata accessor for DOCActionContext();
    if ((swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, v1, 6) & 1) != 0)
    {
      v2 = v7;
      v3 = *(void **)&v7[OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController];
      v4 = type metadata accessor for DOCItemCollectionViewController(0);
      v5 = swift_dynamicCastClass(v3, v4);
      if (v5)
      {
        *(_BYTE *)(v5 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_multiselectActionStatus) = 2;
        v6 = v3;
        sub_100175A34();

      }
    }
  }
  else
  {
    sub_10007EB54((uint64_t)v8);
  }
}

void sub_1002CEC7C(uint64_t a1, uint64_t a2)
{
  id v3;

  if (a1)
  {
    v3 = (id)_convertErrorToNSError(_:)(a1);
    DOCPresentAlertForError(v3, a2);

  }
  else
  {
    __break(1u);
  }
}

id sub_1002CECBC(char *a1)
{
  id v2;
  void *v3;
  id v4;
  id result;
  void *v6;
  id v7;
  id v8;
  char *v9;
  id v10;
  CGFloat Width;
  char v12[24];
  CGRect v13;

  v2 = objc_msgSend(a1, "splitViewController");
  if (!v2
    || (v3 = v2,
        v4 = objc_msgSend(v2, "doc_splitViewState"),
        v3,
        LOBYTE(v3) = objc_msgSend(v4, "isSidebarShown"),
        v4,
        (v3 & 1) == 0))
  {
    if (objc_msgSend(a1, "enclosingTabSwitcherStyle") == (id)2)
      goto LABEL_7;
  }
  if (objc_msgSend((id)objc_opt_self(DOCFeature), "_UIPTabInfrastructureEnabled"))
  {
    result = objc_msgSend(a1, "splitViewController");
    if (!result)
      return result;
    v6 = result;
    v7 = objc_msgSend(result, "doc_splitViewState");

    LODWORD(v6) = objc_msgSend(v7, "isSidebarShownInOverlay");
    if ((_DWORD)v6)
    {
LABEL_7:
      v8 = objc_msgSend(a1, "viewIfLoaded");
      v9 = &a1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode];
      swift_beginAccess(v9, v12, 0, 0);
      if (*(_QWORD *)v9 == 2)
      {
        if (!v8)
          return 0;
        v10 = objc_msgSend(v8, "window");

        v8 = v10;
        if (!v10)
          return 0;
LABEL_13:
        objc_msgSend(v8, "bounds");
        Width = CGRectGetWidth(v13);

        return *(id *)&Width;
      }
      if (v8)
        goto LABEL_13;
    }
  }
  return 0;
}

uint64_t sub_1002CEE78()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  __n128 v8;
  void *Strong;
  void *v10;

  v1 = sub_1001F6D68(0xD000000000000014, (void *)0x8000000100524300);
  v2 = objc_msgSend(v0, "isEditing") ^ 1;
  v3 = swift_allocObject(&unk_1005DA938, 40, 7);
  *(_QWORD *)(v3 + 16) = v0;
  *(_BYTE *)(v3 + 24) = v2;
  *(_QWORD *)(v3 + 32) = v1;
  v4 = v0;
  swift_retain(v1);
  sub_10000E7DC();
  if (v5)
  {
    v7 = v5;
    swift_retain(v3);
    sub_10045EA44((uint64_t (*)(id))sub_1002D5054, v3, 1);

    swift_release_n(v3, 2, v8);
  }
  else
  {
    Strong = (void *)swift_unknownObjectWeakLoadStrong(&v4[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_actionReporting], v6);
    if (Strong)
    {
      v10 = Strong;
      objc_msgSend(Strong, "didToggleEditStateWithEditing:in:", v2, v4);
      swift_unknownObjectRelease(v10);
    }
    (*(void (**)(id))(*(_QWORD *)v1 + 160))(objc_msgSend(v4, "setEditing:animated:", v2, 1));
    swift_release(v3);
  }
  return swift_release(v1);
}

uint64_t sub_1002CEFB4(char *a1, uint64_t a2, uint64_t a3)
{
  char v4;
  void *Strong;
  void *v7;

  v4 = a2;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(&a1[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_actionReporting], a2);
  if (Strong)
  {
    v7 = Strong;
    objc_msgSend(Strong, "didToggleEditStateWithEditing:in:", v4 & 1, a1);
    swift_unknownObjectRelease(v7);
  }
  return (*(uint64_t (**)(id))(*(_QWORD *)a3 + 160))(objc_msgSend(a1, "setEditing:animated:", v4 & 1, 1));
}

double sub_1002CF03C()
{
  _OWORD *v0;
  double result;

  result = 0.0;
  v0[11] = 0u;
  v0[12] = 0u;
  v0[9] = 0u;
  v0[10] = 0u;
  v0[7] = 0u;
  v0[8] = 0u;
  v0[5] = 0u;
  v0[6] = 0u;
  v0[3] = 0u;
  v0[4] = 0u;
  v0[1] = 0u;
  v0[2] = 0u;
  return result;
}

void sub_1002CF060()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v1 = *(void **)(v0 + 24);

  v2 = *(void **)(v0 + 40);
  v3 = *(void **)(v0 + 56);

  v4 = *(void **)(v0 + 72);
  v5 = *(void **)(v0 + 88);

  v6 = *(void **)(v0 + 104);
  v7 = *(void **)(v0 + 120);

  v8 = *(void **)(v0 + 136);
  v9 = *(void **)(v0 + 152);

  v10 = *(void **)(v0 + 168);
  v11 = *(void **)(v0 + 184);

  v12 = *(id *)(v0 + 200);
}

uint64_t sub_1002CF114()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v1 = *(void **)(v0 + 24);

  v2 = *(void **)(v0 + 40);
  v3 = *(void **)(v0 + 56);

  v4 = *(void **)(v0 + 72);
  v5 = *(void **)(v0 + 88);

  v6 = *(void **)(v0 + 104);
  v7 = *(void **)(v0 + 120);

  v8 = *(void **)(v0 + 136);
  v9 = *(void **)(v0 + 152);

  v10 = *(void **)(v0 + 168);
  v11 = *(void **)(v0 + 184);

  v12 = *(void **)(v0 + 200);
  return v0;
}

uint64_t sub_1002CF1C0()
{
  uint64_t v0;

  sub_1002CF114();
  return swift_deallocClassInstance(v0, 208, 7);
}

id sub_1002CF1E0(void *a1)
{
  id result;
  void *v3;
  Swift::String v4;
  Swift::String_optional v5;
  Swift::String v6;
  void *object;
  uint64_t v8;
  id v9;
  NSString v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  id v17;
  _QWORD v18[4];
  Swift::String v19;

  result = (id)_DocumentManagerBundle(a1);
  if (result)
  {
    v3 = result;
    v19._object = (void *)0x8000000100524550;
    v4._countAndFlagsBits = 0x41207463656C6553;
    v4._object = (void *)0xEA00000000006C6CLL;
    v5.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v5.value._object = (void *)0xEB00000000656C62;
    v6._countAndFlagsBits = 0;
    v6._object = (void *)0xE000000000000000;
    v19._countAndFlagsBits = 0xD000000000000032;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v3, v6, v19)._object;

    v8 = type metadata accessor for DOCItemCollectionViewController(0);
    v18[3] = v8;
    v18[0] = a1;
    v9 = a1;
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    if (v8)
    {
      v11 = sub_10007E7A0(v18, v8);
      v12 = *(_QWORD *)(v8 - 8);
      __chkstk_darwin(v11);
      v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v12 + 16))(v14);
      v15 = _bridgeAnythingToObjectiveC<A>(_:)(v14, v8);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v8);
      sub_100068588(v18);
    }
    else
    {
      v15 = 0;
    }
    v16 = objc_allocWithZone((Class)UIBarButtonItem);
    v17 = objc_msgSend(v16, "initWithTitle:style:target:action:", v10, 0, v15, "selectAllItems", v18[0]);

    swift_unknownObjectRelease(v15);
    return v17;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1002CF398(void *a1)
{
  id result;
  void *v3;
  Swift::String v4;
  Swift::String_optional v5;
  Swift::String v6;
  void *object;
  uint64_t v8;
  id v9;
  NSString v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  id v17;
  _QWORD v18[4];
  Swift::String v19;

  result = (id)_DocumentManagerBundle(a1);
  if (result)
  {
    v3 = result;
    v19._object = (void *)0x8000000100524590;
    v4._countAndFlagsBits = 0x7463656C65736544;
    v4._object = (void *)0xEC0000006C6C4120;
    v5.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v5.value._object = (void *)0xEB00000000656C62;
    v6._countAndFlagsBits = 0;
    v6._object = (void *)0xE000000000000000;
    v19._countAndFlagsBits = 0xD000000000000034;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v3, v6, v19)._object;

    v8 = type metadata accessor for DOCItemCollectionViewController(0);
    v18[3] = v8;
    v18[0] = a1;
    v9 = a1;
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    if (v8)
    {
      v11 = sub_10007E7A0(v18, v8);
      v12 = *(_QWORD *)(v8 - 8);
      __chkstk_darwin(v11);
      v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v12 + 16))(v14);
      v15 = _bridgeAnythingToObjectiveC<A>(_:)(v14, v8);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v8);
      sub_100068588(v18);
    }
    else
    {
      v15 = 0;
    }
    v16 = objc_allocWithZone((Class)UIBarButtonItem);
    v17 = objc_msgSend(v16, "initWithTitle:style:target:action:", v10, 0, v15, "deselectAllItems", v18[0]);

    swift_unknownObjectRelease(v15);
    return v17;
  }
  else
  {
    __break(1u);
  }
  return result;
}

Class sub_1002CF554(uint64_t a1)
{
  Class result;
  Class v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  __n128 v8;
  Class isa;
  uint64_t v10;
  UIMenuElementSize v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  Swift::String v17;
  Class v18;
  Swift::OpaquePointer v19;
  UIMenuElementSize aBlock[5];
  uint64_t v21;
  UIImage_optional v22;
  UIAction_optional v23;
  UIImage_optional v24;
  UIMenu_optional v25;
  Swift::String swift__string;

  result = (Class)(id)_DocumentManagerBundle(a1);
  if (result)
  {
    v2 = result;
    sub_10004F2F0(0, (unint64_t *)&qword_1006475F0, UIBarButtonItem_ptr);
    sub_10004F2F0(0, (unint64_t *)&qword_1006424C0, UIAction_ptr);
    swift__string._object = (void *)0x8000000100524320;
    v3._countAndFlagsBits = 0x5B207463656C6553;
    v3._object = (void *)0xED00005D756E656DLL;
    v4.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v4.value._object = (void *)0xEB00000000656C62;
    v5._countAndFlagsBits = 0x7463656C6553;
    v5._object = (void *)0xE600000000000000;
    swift__string._countAndFlagsBits = 0xD000000000000027;
    v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, swift__string);

    v7 = swift_allocObject(&unk_1005DA8E8, 24, 7);
    swift_unknownObjectWeakInit(v7 + 16);
    v22.is_nil = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v6._countAndFlagsBits, v6._object, 0, 0, 0, 0, 0, 0, v8, 0, 0, 0, sub_1002D506C, v7);
    v22.value.super.isa = 0;
    v23.value.super.super.isa = 0;
    isa = UIBarButtonItem.init(title:image:primaryAction:menu:)((Swift::String_optional)0, v22, v23, v25).super.super.isa;
    sub_10004F2F0(0, (unint64_t *)&qword_1006448A0, UIMenu_ptr);
    v10 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v11 = swift_allocObject(v10, 40, 7);
    *(_OWORD *)(v11 + 16) = xmmword_1004D9B40;
    v12 = (void *)objc_opt_self(UIDeferredMenuElement);
    v13 = swift_allocObject(&unk_1005DA8E8, 24, 7);
    swift_unknownObjectWeakInit(v13 + 16);
    aBlock[4] = (UIMenuElementSize)sub_1002D5410;
    v21 = v13;
    aBlock[0] = (UIMenuElementSize)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (UIMenuElementSize)sub_100458078;
    aBlock[3] = (UIMenuElementSize)&unk_1005DAA90;
    v14 = _Block_copy(aBlock);
    swift_release(v21);
    v15 = objc_msgSend(v12, "elementWithUncachedProvider:", v14);
    _Block_release(v14);
    *(_QWORD *)(v11 + 32) = v15;
    aBlock[0] = v11;
    specialized Array._endMutation()(v16);
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    v24.value.super.isa = 0;
    v24.is_nil = 0;
    v18 = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v17, (Swift::String_optional)0, v24, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, aBlock[0], v19).super.super.isa;
    -[objc_class setMenuRepresentation:](isa, "setMenuRepresentation:", v18);

    return isa;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002CF824(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *Strong;
  char *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String_optional v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  __n128 v19;
  void *v20;
  NSString v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  _QWORD v28[4];
  char v29[24];
  Swift::String v30;

  v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v29, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v4, v5);
  if (Strong)
  {
    v7 = Strong;
    if ((objc_msgSend(Strong, "isEditing") & 1) != 0)
    {
LABEL_3:
      a1(_swiftEmptyArrayStorage);

      return;
    }
    v8 = *(void **)&v7[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration];
    v9 = objc_msgSend(v8, "isPickerUI");
    if ((_DWORD)v9)
    {
      if (!objc_msgSend(v8, "forPickingDocuments"))
        goto LABEL_3;
      v10 = sub_100038208();
      if (!v10)
        goto LABEL_3;

    }
    v11 = (id)_DocumentManagerBundle(v9);
    if (v11)
    {
      v12 = v11;
      v13 = sub_10004F2F0(0, (unint64_t *)&qword_1006424C0, UIAction_ptr);
      v30._countAndFlagsBits = 0xD000000000000027;
      v30._object = (void *)0x8000000100524320;
      v14._countAndFlagsBits = 0x5B207463656C6553;
      v14._object = (void *)0xED00005D756E656DLL;
      v15.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v15.value._object = (void *)0xEB00000000656C62;
      v16._countAndFlagsBits = 0x7463656C6553;
      v16._object = (void *)0xE600000000000000;
      v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, (NSBundle)v12, v16, v30);

      v18 = swift_allocObject(&unk_1005DA8E8, 24, 7);
      swift_unknownObjectWeakInit(v18 + 16);
      v20 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v17._countAndFlagsBits, v17._object, 0, 0, 0, 0, 0, 0, v19, 0, 0, 0, sub_1002D506C, v18);
      v21 = String._bridgeToObjectiveC()();
      v22 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v21);

      objc_msgSend(v20, "setImage:", v22);
      v28[3] = v13;
      v28[0] = v20;
      v23 = v20;
      sub_100027934((uint64_t)v28);
      sub_100068588(v28);
      v24 = sub_10006922C((uint64_t *)&unk_1006441A0);
      v25 = swift_allocObject(v24, 40, 7);
      *(_OWORD *)(v25 + 16) = xmmword_1004D9B40;
      *(_QWORD *)(v25 + 32) = v23;
      v28[0] = v25;
      specialized Array._endMutation()(v25);
      v26 = (_QWORD *)v28[0];
      v27 = v23;
      a1(v26);

      swift_bridgeObjectRelease(v26);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    a1(_swiftEmptyArrayStorage);
  }
}

id sub_1002CFB08(uint64_t a1)
{
  id v2;
  NSString v3;
  id v4;
  id v5;
  id result;
  void *v7;
  Swift::String v8;
  Swift::String_optional v9;
  Swift::String v10;
  void *object;
  NSString v12;
  Swift::String v13;

  if (qword_100641200 != -1)
    swift_once(&qword_100641200, sub_1000B0278);
  v2 = (id)qword_100672EF8;
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v3, v2);

  v5 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithImage:style:target:action:", v4, 0, a1, "wantsToCreateNewFolder");
  result = (id)_DocumentManagerBundle(v5);
  if (result)
  {
    v7 = result;
    v8._countAndFlagsBits = 0xD000000000000019;
    v13._countAndFlagsBits = 0xD000000000000024;
    v13._object = (void *)0x80000001005119B0;
    v8._object = (void *)0x8000000100511990;
    v9.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v9.value._object = (void *)0xEB00000000656C62;
    v10._countAndFlagsBits = 0x646C6F462077654ELL;
    v10._object = (void *)0xEA00000000007265;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, (NSBundle)v7, v10, v13)._object;

    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    objc_msgSend(v5, "setTitle:", v12);

    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1002CFCD0(void *a1)
{
  void *v2;
  NSString v3;
  id v4;
  id v5;
  id v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = (void *)objc_opt_self(UIImage);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "__systemImageNamedSwift:", v3);

  v5 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithImage:style:target:action:", v4, 0, 0, 0);
  objc_msgSend(v5, "setTarget:", a1);
  objc_msgSend(v5, "setAction:", "wantsToCreateNewFile");
  v6 = v5;
  v7 = objc_msgSend(a1, "effectiveAppearance");
  v8 = v7;
  if (v7)
  {
    v9 = objc_msgSend(v7, "collectionCreateButtonTitle");

    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v11 = v10;

    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
  }
  objc_msgSend(v6, "setTitle:", v8);

  sub_1002CCA60();
  objc_msgSend(v6, "setEnabled:", v12 & 1);
  objc_msgSend(v6, "setAccessibilityIdentifier:", DOCFullDocumentManagerViewControllerNavigationBarCreateButtonIdentifier);
  return v6;
}

id sub_1002CFEC0()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  id v6;
  id v7;
  void *v8;
  NSString v9;
  NSString v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  objc_super v15;

  if (qword_100641150 != -1)
    swift_once(&qword_100641150, sub_1000B20A8);
  v1 = objc_msgSend((id)qword_100672DD8, "ellipsisMenuItemImageName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v3 = v2;

  if (qword_100641200 != -1)
    swift_once(&qword_100641200, sub_1000B0278);
  v4 = (id)qword_100672EF8;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v6 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v5, v4);

  v15.receiver = v0;
  v15.super_class = (Class)type metadata accessor for DOCLegacyOverflowBarButtonItem();
  v7 = objc_msgSendSuper2(&v15, "init");
  objc_msgSend(v7, "setImage:", v6);
  objc_msgSend(v7, "setStyle:", 0);
  v8 = (void *)objc_opt_self(DOCAXIdentifier);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "itemCollectionMenuButtonShowing:", v9);

  if (!v10)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v13 = v12;
    v10 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v11 = swift_bridgeObjectRelease(v13).n128_u64[0];
  }
  objc_msgSend(v7, "setAccessibilityIdentifier:", v10, v11);

  return v7;
}

id sub_1002D00C8()
{
  return sub_1001405E0(0, type metadata accessor for DOCLegacyOverflowBarButtonItem);
}

void sub_1002D00D8(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  _BYTE v7[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (Strong)
  {
    v6 = (void *)Strong;
    sub_1002D0130(a1);

  }
}

uint64_t sub_1002D0130(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  unsigned __int8 *v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  int v31;
  _QWORD v32[3];

  v2 = objc_msgSend(a1, "identifier");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  v6 = HIBYTE(v5) & 0xF;
  v7 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0x2000000000000000) != 0)
    v8 = HIBYTE(v5) & 0xF;
  else
    v8 = v3 & 0xFFFFFFFFFFFFLL;
  if (!v8)
    return swift_bridgeObjectRelease(v5);
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
    {
      if ((v3 & 0x1000000000000000) != 0)
        v9 = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v3, v5);
      v10 = (uint64_t)sub_1002D26A0(v9, v7, 10);
      LOBYTE(v3) = v11 & 1;
      goto LABEL_44;
    }
    v32[0] = v3;
    v32[1] = v5 & 0xFFFFFFFFFFFFFFLL;
    if (v3 == 43)
    {
      if (!v6)
        goto LABEL_58;
      if (v6 == 1 || (BYTE1(v3) - 48) > 9u)
        goto LABEL_31;
      v10 = (BYTE1(v3) - 48);
      if (v6 != 2)
      {
        if ((BYTE2(v3) - 48) > 9u)
          goto LABEL_31;
        v10 = 10 * (BYTE1(v3) - 48) + (BYTE2(v3) - 48);
        v12 = v6 - 3;
        if (v12)
        {
          v13 = (unsigned __int8 *)v32 + 3;
          while (1)
          {
            v14 = *v13 - 48;
            if (v14 > 9)
              goto LABEL_31;
            v15 = 10 * v10;
            if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63)
              goto LABEL_31;
            v10 = v15 + v14;
            if (__OFADD__(v15, v14))
              goto LABEL_31;
            LOBYTE(v3) = 0;
            ++v13;
            if (!--v12)
              goto LABEL_44;
          }
        }
      }
    }
    else
    {
      if (v3 == 45)
      {
        if (v6)
        {
          if (v6 != 1 && (BYTE1(v3) - 48) <= 9u)
          {
            if (v6 == 2)
            {
              LOBYTE(v3) = 0;
              v10 = -(uint64_t)(BYTE1(v3) - 48);
              goto LABEL_44;
            }
            if ((BYTE2(v3) - 48) <= 9u)
            {
              v10 = -10 * (BYTE1(v3) - 48) - (BYTE2(v3) - 48);
              v20 = v6 - 3;
              if (!v20)
                goto LABEL_43;
              v27 = (unsigned __int8 *)v32 + 3;
              while (1)
              {
                v28 = *v27 - 48;
                if (v28 > 9)
                  break;
                v29 = 10 * v10;
                if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63)
                  break;
                v10 = v29 - v28;
                if (__OFSUB__(v29, v28))
                  break;
                LOBYTE(v3) = 0;
                ++v27;
                if (!--v20)
                  goto LABEL_44;
              }
            }
          }
LABEL_31:
          v10 = 0;
          LOBYTE(v3) = 1;
          goto LABEL_44;
        }
        __break(1u);
LABEL_58:
        __break(1u);
        JUMPOUT(0x1002D0500);
      }
      if (!v6 || (v3 - 48) > 9u)
        goto LABEL_31;
      v10 = (v3 - 48);
      if (v6 != 1)
      {
        if ((BYTE1(v3) - 48) > 9u)
          goto LABEL_31;
        v10 = 10 * (v3 - 48) + (BYTE1(v3) - 48);
        v16 = v6 - 2;
        if (v16)
        {
          v17 = (unsigned __int8 *)v32 + 2;
          while (1)
          {
            v18 = *v17 - 48;
            if (v18 > 9)
              goto LABEL_31;
            v19 = 10 * v10;
            if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63)
              goto LABEL_31;
            v10 = v19 + v18;
            if (__OFADD__(v19, v18))
              goto LABEL_31;
            LOBYTE(v3) = 0;
            ++v17;
            if (!--v16)
              goto LABEL_44;
          }
        }
      }
    }
LABEL_43:
    LOBYTE(v3) = 0;
    goto LABEL_44;
  }
  v10 = (uint64_t)sub_1002D233C(v3, v5, 10);
  LOBYTE(v3) = v30;
LABEL_44:
  result = swift_bridgeObjectRelease(v5);
  if ((v3 & 1) == 0 && (unint64_t)v10 < 3)
  {
    v22 = *(id *)DOCLog.UI.unsafeMutableAddressor(result);
    static os_log_type_t.debug.getter();
    v23 = sub_10006922C((uint64_t *)&unk_100644560);
    v24 = swift_allocObject(v23, 112, 7);
    *(_OWORD *)(v24 + 16) = xmmword_1004D4CE0;
    *(_QWORD *)(v24 + 56) = type metadata accessor for DOCItemCollectionViewController(0);
    v25 = sub_10005A360(&qword_1006460C0, type metadata accessor for DOCItemCollectionViewController, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v24 + 32) = v1;
    *(_QWORD *)(v24 + 96) = &type metadata for Int;
    *(_QWORD *)(v24 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v24 + 64) = v25;
    *(_QWORD *)(v24 + 72) = v10;
    v26 = v1;
    os_log(_:dso:log:type:_:)("Display mode tapped %d", v31);

    swift_bridgeObjectRelease(v24);
    return sub_1002D0CB0(v10);
  }
  return result;
}

void sub_1002D0538(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  _BYTE v7[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (Strong)
  {
    v6 = (void *)Strong;
    sub_1002D0590(a1);

  }
}

double sub_1002D0590(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  unint64_t v6;
  int v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  unint64_t v14;
  unint64_t v15;
  id v16;
  Swift::String v17;

  v2 = objc_msgSend(a1, "identifier");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  v17._countAndFlagsBits = v3;
  v17._object = v5;
  v6 = sub_1001BE2BC(v17);
  v7 = v6;
  v8 = v6;
  v9 = *(id *)DOCLog.UI.unsafeMutableAddressor(v6);
  v10 = static os_log_type_t.debug.getter();
  v11 = sub_10006922C((uint64_t *)&unk_100644560);
  v12 = swift_allocObject(v11, 112, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1004D4CE0;
  *(_QWORD *)(v12 + 56) = type metadata accessor for DOCItemCollectionViewController(0);
  *(_QWORD *)(v12 + 64) = sub_10005A360(&qword_1006460C0, type metadata accessor for DOCItemCollectionViewController, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v12 + 32) = v1;
  v14 = 0x800000010050B9E0;
  v15 = 0xD000000000000010;
  switch(v7)
  {
    case 0:
      goto LABEL_8;
    case 1:
      v14 = 0xEC00000065746144;
      v15 = 0x646573557473616CLL;
      goto LABEL_8;
    case 2:
      v14 = 0xE400000000000000;
      v15 = 1701667182;
      goto LABEL_8;
    case 3:
      v14 = 0xE400000000000000;
      v15 = 1936154996;
      goto LABEL_8;
    case 4:
      v14 = 0xE400000000000000;
      v15 = 1702521203;
      goto LABEL_8;
    case 5:
      v14 = 0xE400000000000000;
      v15 = 1684957547;
      goto LABEL_8;
    case 6:
      v14 = 0xE800000000000000;
      v15 = 0x7942646572616873;
LABEL_8:
      *(_QWORD *)(v12 + 96) = &type metadata for String;
      *(_QWORD *)(v12 + 104) = sub_10006A638();
      *(_QWORD *)(v12 + 72) = v15;
      *(_QWORD *)(v12 + 80) = v14;
      v16 = v1;
      os_log(_:dso:log:type:_:)("Sort mode tapped: %@", 20, 2, &_mh_execute_header, v9, v10, v12);

      swift_bridgeObjectRelease(v12);
      result = sub_1002C9F70(0x5040302010000uLL >> (8 * v8));
      break;
    default:
      return result;
  }
  return result;
}

void sub_1002D07AC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  _BYTE v8[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v4, v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    DOCItemCollectionViewController.groupOption(changeTo:)(a3);

  }
}

void DOCItemCollectionViewController.groupOption(changeTo:)(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Strong;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  id v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = Logger.UI.unsafeMutableAddressor(v6);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  v13 = os_log_type_enabled(v11, v12);
  v30 = a1;
  if (v13)
  {
    v14 = swift_slowAlloc(12, -1);
    v29 = v2;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    v32 = v16;
    *(_DWORD *)v15 = 136315138;
    LOBYTE(v31) = a1;
    v17 = String.init<A>(describing:)(&v31, &type metadata for DOCItemGroupingBehavior);
    v19 = v18;
    v31 = sub_1000544FC(v17, v18, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Change collection grouping behavior to: %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    v20 = v15;
    v2 = v29;
    swift_slowDealloc(v20, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v21 = v2 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_overlayDelegate;
  Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_overlayDelegate, v22);
  if (Strong)
  {
    v25 = Strong;
    v26 = *(_QWORD *)(v21 + 8);
    ObjectType = swift_getObjectType(Strong, v24);
    v28 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration), "identifier");
    (*(void (**)(_QWORD, id, uint64_t, uint64_t))(v26 + 24))(v30, v28, ObjectType, v26);

    swift_unknownObjectRelease(v25);
  }
  _s5Files31DOCItemCollectionViewControllerC13updateOverlay8animatedySb_tF_0();
}

void sub_1002D0AC8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  _BYTE v8[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v4, v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    a3();

  }
}

void sub_1002D0B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _BYTE v16[24];

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2, v7);
  if (Strong)
  {
    v9 = (void *)Strong;
    v10 = Logger.UI.unsafeMutableAddressor(Strong);
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v10, v3);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "received request to create new folder", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100188E58(0, 1);

  }
}

void sub_1002D0C60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2, v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_1002CEE78();

  }
}

uint64_t sub_1002D0CB0(uint64_t a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  id v15;
  int v17;

  v3 = *(id *)DOCLog.UI.unsafeMutableAddressor();
  static os_log_type_t.debug.getter();
  v4 = sub_10006922C((uint64_t *)&unk_100644560);
  v5 = swift_allocObject(v4, 112, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1004D4CE0;
  *(_QWORD *)(v5 + 56) = type metadata accessor for DOCItemCollectionViewController(0);
  v6 = sub_10005A360(&qword_1006460C0, type metadata accessor for DOCItemCollectionViewController, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v5 + 32) = v1;
  *(_QWORD *)(v5 + 96) = &type metadata for Int;
  *(_QWORD *)(v5 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v5 + 64) = v6;
  *(_QWORD *)(v5 + 72) = a1;
  v7 = v1;
  os_log(_:dso:log:type:_:)("Change display mode to: %d", v17);

  swift_bridgeObjectRelease(v5);
  v8 = &v7[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_overlayDelegate];
  Strong = swift_unknownObjectWeakLoadStrong(&v7[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_overlayDelegate], v9);
  if (Strong)
  {
    v12 = Strong;
    v13 = *((_QWORD *)v8 + 1);
    ObjectType = swift_getObjectType(Strong, v11);
    v15 = objc_msgSend(*(id *)&v7[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration], "identifier");
    (*(void (**)(uint64_t, id, uint64_t, uint64_t))(v13 + 16))(a1, v15, ObjectType, v13);

    Strong = swift_unknownObjectRelease(v12);
  }
  return _s5Files31DOCItemCollectionViewControllerC13updateOverlay8animatedySb_tF_0(Strong);
}

id sub_1002D0E1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String *v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Class isa;

  v2 = v1;
  v4 = sub_100197A4C();
  v5 = objc_allocWithZone((Class)type metadata accessor for DOCViewOptionsViewController());
  v7 = sub_1000E62EC((uint64_t)v4, v6);
  objc_msgSend(v7, "setModalPresentationStyle:", 7);
  v8 = objc_msgSend(v7, "popoverPresentationController");
  objc_msgSend(v8, "setSourceItem:", a1);

  v9 = objc_msgSend(v7, "popoverPresentationController");
  if (v9)
  {
    v10 = v9;
    objc_msgSend(v9, "setPermittedArrowDirections:", 1);

  }
  v11 = objc_msgSend(v7, "popoverPresentationController");
  if (v11)
  {
    v12 = v11;
    objc_msgSend(v11, "setDelegate:", v2);

  }
  v13 = objc_msgSend(v7, "popoverPresentationController");
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(v13, "adaptiveSheetPresentationController");
    v16 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v17 = swift_allocObject(v16, 40, 7);
    *(_OWORD *)(v17 + 16) = xmmword_1004D9B40;
    v18 = objc_msgSend((id)objc_opt_self(UISheetPresentationControllerDetent), "mediumDetent");
    *(_QWORD *)(v17 + 32) = v18;
    specialized Array._endMutation()(v18);
    sub_10004F2F0(0, &qword_10064D880, UISheetPresentationControllerDetent_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v17);
    objc_msgSend(v15, "setDetents:", isa);

    objc_msgSend(v15, "setSelectedDetentIdentifier:", UISheetPresentationControllerDetentIdentifierMedium);
  }
  return v7;
}

void sub_1002D1018(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  _QWORD aBlock[5];
  uint64_t v12;
  char v13[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    v5 = *(void **)(Strong + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_viewOptionsViewController);
    if (v5)
    {
      v6 = swift_allocObject(&unk_1005DAA28, 32, 7);
      *(_QWORD *)(v6 + 16) = v4;
      *(_QWORD *)(v6 + 24) = v5;
      aBlock[4] = sub_1002D53E8;
      v12 = v6;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10004A82C;
      aBlock[3] = &unk_1005DAA40;
      v7 = _Block_copy(aBlock);
      v8 = v12;
      v9 = v5;
      v10 = v4;
      swift_release(v8);
      DOCRunInMainThread(v7);
      _Block_release(v7);

      v4 = v9;
    }

  }
}

void sub_1002D1114(void *a1, uint64_t a2)
{
  void *v4;
  _QWORD v5[6];

  v5[4] = sub_1002D11AC;
  v5[5] = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_10004A82C;
  v5[3] = &unk_1005DAA68;
  v4 = _Block_copy(v5);
  objc_msgSend(a1, "presentViewController:animated:completion:", a2, 1, v4);
  _Block_release(v4);
}

uint64_t sub_1002D11AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v11;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = Logger.UI.unsafeMutableAddressor(v2);
  v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 16))(v4, v5, v0);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "ViewOptionsViewController presented", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

Swift::Void __swiftcall DOCItemCollectionViewController.toggleShowAllFilenameExtensions()()
{
  if (qword_1006410A8 != -1)
    swift_once(&qword_1006410A8, sub_1000AA544);
  objc_msgSend(*(id *)(qword_100672D18 + 40), "setForceDisplayFilenameExtensions:", objc_msgSend(*(id *)(qword_100672D18 + 40), "forceDisplayFilenameExtensions") ^ 1);
  sub_100095BFC();
  _s5Files31DOCItemCollectionViewControllerC13updateOverlay8animatedySb_tF_0();
}

void sub_1002D1318(uint64_t a1, unsigned int a2)
{
  DOCItemCollectionViewController.groupOption(changeTo:)(a2);
}

double sub_1002D1320(uint64_t a1, char a2)
{
  return sub_1002C9F70(0x5040302010000uLL >> (8 * a2));
}

uint64_t sub_1002D133C(uint64_t a1, uint64_t a2)
{
  return sub_1002D50B8(a2 & 1, a2);
}

Swift::Void __swiftcall DOCItemCollectionViewController.prepareForPopoverPresentation(_:)(UIPopoverPresentationController a1)
{
  uint64_t v1;
  uint64_t v2;
  void *Strong;
  void *v5;
  id v6;
  objc_class *v7;
  id v8;
  char v9;
  void *v10;
  id v11;
  void *v12;
  objc_class *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;

  v2 = v1;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_moreActionsAlert);
  if (Strong)
  {
    v5 = Strong;
    v6 = objc_msgSend(Strong, "popoverPresentationController");

    if (v6)
    {
      sub_10004F2F0(0, &qword_10064D5C0, UIPopoverPresentationController_ptr);
      v7 = a1.super.super.isa;
      v8 = v6;
      v9 = static NSObject.== infix(_:_:)(v8, v7);

      if ((v9 & 1) != 0)
        -[objc_class setSourceItem:](v7, "setSourceItem:", *(_QWORD *)(v2 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_moreActionsBarButton));
    }
  }
  v10 = *(void **)(v2 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_viewOptionsViewController);
  if (v10)
  {
    v11 = objc_msgSend(v10, "popoverPresentationController");
    if (v11)
    {
      v12 = v11;
      sub_10004F2F0(0, &qword_10064D5C0, UIPopoverPresentationController_ptr);
      v13 = a1.super.super.isa;
      v14 = v12;
      LOBYTE(v12) = static NSObject.== infix(_:_:)(v14, v13);

      if ((v12 & 1) != 0)
      {
        v15 = sub_1002CD61C();
        v16 = objc_msgSend(v15, "_doc_ipi_view");

        if (v16)
        {
          v17 = objc_msgSend(v16, "window");

          if (v17)
          {

            v18 = sub_1002CD61C();
            -[objc_class setBarButtonItem:](v13, "setBarButtonItem:", v18);

          }
        }
      }
    }
  }
}

id sub_1002D1668(uint64_t a1)
{
  return sub_1001405E0(a1, type metadata accessor for UIDocumentBrowserActionBarButton);
}

char *sub_1002D1684(void *a1, char a2, void *a3)
{
  id v6;
  char *v7;
  _QWORD v9[4];

  v9[3] = type metadata accessor for DOCItemCollectionViewController(0);
  v9[0] = a3;
  v6 = a3;
  v7 = sub_1002D39A0(a1, v9, (uint64_t)"actionBarButtonTriggeredWithActionBarButton:");
  sub_100068588(v9);
  objc_msgSend(v7, "setEnabled:", a2 & 1, v9[0]);
  return v7;
}

void sub_1002D1708(char *a1)
{
  void *v1;
  void *v2;
  id v4;
  char *v5;
  id v6;
  _QWORD v7[4];

  v2 = *(void **)&a1[OBJC_IVAR____TtC5Files32UIDocumentBrowserActionBarButton_docAction];
  if (v2)
  {
    v7[3] = type metadata accessor for UIDocumentBrowserActionBarButton();
    v7[0] = a1;
    v4 = v2;
    v5 = a1;
    v6 = DOCItemCollectionViewController.actionContext(from:)();
    sub_10007EB54((uint64_t)v7);
    objc_msgSend(v1, "performActionWithAction:actionContext:", v4, v6, v7[0]);

  }
}

void sub_1002D17E4(void *a1, void *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t All;
  double v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  void (**v37)(_QWORD, _QWORD, _QWORD);
  id v38;
  Class isa;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  void *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  id v68;
  _QWORD aBlock[5];
  uint64_t v70;

  v3 = v2;
  v68 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v66 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v64 = *(_QWORD *)(v7 - 8);
  v65 = v7;
  __chkstk_darwin(v7);
  v63 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTimeInterval(0);
  v60 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v62 = type metadata accessor for DispatchTime(0);
  v59 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v14);
  v61 = (char *)&v57 - v16;
  v17 = objc_msgSend(a1, "identifier", v15);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierMultipleSelection);
  v23 = v21;
  if (v18 == v22 && v20 == v21)
  {
    swift_bridgeObjectRelease_n(v20, 2);
  }
  else
  {
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v22, v21, 0);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v23);
    v25 = 0;
    if ((v24 & 1) == 0)
      goto LABEL_7;
  }
  if (v3[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_multiselectActionStatus] != 2)
    return;
  v25 = 1;
LABEL_7:
  v26 = sub_100034068(0);
  v27 = sub_10006922C((uint64_t *)&unk_1006424B0);
  All = Array<A>.fpfs_syncFetchAllFPItems()(v26, v27);
  *(_QWORD *)&v29 = swift_bridgeObjectRelease(v26).n128_u64[0];
  if (!All)
    return;
  v58 = v5;
  v30 = (unint64_t)All >> 62;
  if (v25
    && objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration], "forPickingFolders", v29))
  {
    if (v30)
    {
      if (All >= 0)
        v40 = All & 0xFFFFFFFFFFFFFF8;
      else
        v40 = All;
      swift_bridgeObjectRetain(All);
      v41 = _CocoaArrayWrapper.endIndex.getter(v40);
      swift_bridgeObjectRelease(All);
      if (v41)
        goto LABEL_12;
    }
    else if (*(_QWORD *)((All & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_12;
    }
    swift_bridgeObjectRelease(All);
    sub_10024BE54();
    goto LABEL_30;
  }
LABEL_12:
  v31 = All & 0xFFFFFFFFFFFFFF8;
  if (v30)
  {
    if (All < 0)
      v31 = All;
    swift_bridgeObjectRetain(All);
    v33 = _bridgeCocoaArray<A>(_:)(v31, v27);
    swift_bridgeObjectRelease(All);
  }
  else
  {
    v32 = swift_bridgeObjectRetain(All);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v32);
    v33 = All;
  }
  if (objc_msgSend(a1, "requiresResolvedItems", swift_bridgeObjectRelease(All).n128_f64[0]))
  {
    v34 = a1;
    v35 = v68;
    sub_10035E100(v33, v34, v35);
    swift_bridgeObjectRelease(v33);

    if ((v25 & 1) == 0)
      goto LABEL_31;
  }
  else
  {
    v36 = objc_msgSend(a1, "unresolvedHandler");
    if (v36)
    {
      v37 = (void (**)(_QWORD, _QWORD, _QWORD))v36;
      v38 = v68;
      _Block_copy(v37);
      isa = Array._bridgeToObjectiveC()().super.isa;
      ((void (**)(_QWORD, Class, id))v37)[2](v37, isa, v38);

      _Block_release(v37);
      _Block_release(v37);
      swift_bridgeObjectRelease(v33);

      if ((v25 & 1) == 0)
        goto LABEL_31;
    }
    else
    {
      swift_bridgeObjectRelease(v33);
      if ((v25 & 1) == 0)
        goto LABEL_31;
    }
  }
LABEL_30:
  v3[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_multiselectActionStatus] = 0;
  sub_100175A34();
  v42 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v68 = (id)static OS_dispatch_queue.main.getter(v42);
  static DispatchTime.now()(v68);
  *v11 = 500;
  v43 = v60;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v60 + 104))(v11, enum case for DispatchTimeInterval.milliseconds(_:), v9);
  v44 = v61;
  + infix(_:_:)(v13, v11);
  (*(void (**)(_QWORD *, uint64_t))(v43 + 8))(v11, v9);
  v45 = *(void (**)(char *, uint64_t))(v59 + 8);
  v46 = v62;
  v45(v13, v62);
  v47 = swift_allocObject(&unk_1005DA8E8, 24, 7);
  swift_unknownObjectWeakInit(v47 + 16);
  aBlock[4] = sub_1002D4FE0;
  v70 = v47;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = &unk_1005DA900;
  v48 = _Block_copy(aBlock);
  swift_release(v70);
  v49 = v63;
  static DispatchQoS.unspecified.getter(v50);
  aBlock[0] = _swiftEmptyArrayStorage;
  v51 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v52 = sub_10006922C((uint64_t *)&unk_100647540);
  v53 = sub_1000791AC();
  v54 = v66;
  v55 = v58;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v52, v53, v58, v51);
  v56 = v68;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v44, v49, v54, v48);
  _Block_release(v48);

  (*(void (**)(char *, uint64_t))(v67 + 8))(v54, v55);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v49, v65);
  v45(v44, v46);
LABEL_31:
  objc_msgSend(v3, "setEditing:animated:", 0, 1);
}

void sub_1002D1DC8(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *Strong;
  int v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  _BYTE v10[24];
  _BYTE v11[24];
  _BYTE v12[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0, 0);
  Strong = (unsigned __int8 *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_multiselectActionStatus];

    if (!v3)
    {
      swift_beginAccess(v1, v11, 0, 0);
      v4 = swift_unknownObjectWeakLoadStrong(v1);
      if (v4)
      {
        v5 = (void *)v4;
        *(_BYTE *)(v4 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_multiselectActionStatus) = 1;
        sub_100175A34();

      }
      swift_beginAccess(v1, v10, 0, 0);
      v6 = (void *)swift_unknownObjectWeakLoadStrong(v1);
      if (v6)
      {
        v7 = v6;
        *((_BYTE *)v6 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_needsOverlayUpdateWithAnimation) = 1;
        v8 = objc_msgSend(v6, "viewIfLoaded");
        v9 = objc_msgSend(v8, "window");

        if (v9)
          sub_1000926C8();

      }
    }
  }
}

void sub_1002D1F44(uint64_t a1, uint64_t a2, void (*a3)(id))
{
  void *v4;
  id *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22[3];
  id v23;
  id v24;

  if (!a2)
  {
    a3(0);
    return;
  }
  v4 = (void *)_convertErrorToNSError(_:)(a2);
  v5 = (id *)DOCLog.UI.unsafeMutableAddressor(v4);
  v6 = *v5;
  v7 = static os_log_type_t.error.getter(v6);
  v8 = sub_10006922C((uint64_t *)&unk_100644560);
  v9 = swift_allocObject(v8, 72, 7);
  v22[1] = (id)2;
  *(_OWORD *)(v9 + 16) = xmmword_1004D9670;
  *(_QWORD *)(v9 + 56) = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
  *(_QWORD *)(v9 + 64) = sub_100151F4C();
  *(_QWORD *)(v9 + 32) = v4;
  v24 = v4;
  os_log(_:dso:log:type:_:)("Got a nil item from createDOCItemBookmark while attempting to access a file. %@", 79, 2, &_mh_execute_header, v6, v7, v9);

  v10 = objc_msgSend(v24, "domain", swift_bridgeObjectRelease(v9).n128_f64[0]);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
  v16 = v14;
  if (v11 == v15 && v13 == v14)
  {
    swift_bridgeObjectRelease_n(v13, 2);
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v15, v14, 0);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v16);
    if ((v17 & 1) == 0)
    {
LABEL_9:
      v23 = v24;
      a3(v24);

      v21 = v23;
      goto LABEL_10;
    }
  }
  if (objc_msgSend(v24, "code", 1) != (id)3072)
    goto LABEL_9;
  v18 = *v5;
  v19 = static os_log_type_t.error.getter(v18);
  v20 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v20 + 16) = *(_OWORD *)v22;
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  *(_QWORD *)(v20 + 64) = sub_10006A638();
  *(_QWORD *)(v20 + 32) = 0xD00000000000001BLL;
  *(_QWORD *)(v20 + 40) = 0x8000000100524730;
  os_log(_:dso:log:type:_:)("%@: Download operation canceled", 31, 2, &_mh_execute_header, v18, v19, v20);

  swift_bridgeObjectRelease(v20);
  v21 = v24;
LABEL_10:

}

uint64_t sub_1002D21CC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

unsigned __int8 *sub_1002D2244(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002D2420(a1, a2, a3);
}

uint64_t sub_1002D2258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_1002D291C(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_1002D2420(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12 | ((((unint64_t)v12 >> 32) & 1) << 32);
}

unsigned __int8 *sub_1002D233C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_1002D291C(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_1002D26A0(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

unsigned __int8 *sub_1002D2420(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  uint64_t v31;
  unsigned __int8 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          v8 = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = (int)v8 * (uint64_t)(int)a3;
            if (v23 != (int)v23)
              goto LABEL_72;
            v24 = v21 + v22;
            v8 = v23 + v24;
            if (__OFADD__((_DWORD)v23, v24))
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          v28 = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = (int)v28 * (uint64_t)(int)a3;
            if (v31 != (int)v31)
              goto LABEL_72;
            v32 = v29 + v30;
            v28 = v31 + v32;
            if (__OFADD__((_DWORD)v31, v32))
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          v8 = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = (int)v8 * (uint64_t)(int)a3;
            if (v14 != (int)v14)
              goto LABEL_72;
            v15 = v10 + v11;
            v8 = v14 - v15;
            if (__OFSUB__((_DWORD)v14, v15))
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_1002D26A0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1002D291C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_1002D2998(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_1002D2998(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_1002D2ADC(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_10007F6D4(v12, 0);
      v5 = sub_1002D2BC8((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_1002D2ADC(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1002D21CC(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1002D21CC(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_1002D2BC8(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1002D21CC(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1002D21CC(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

_QWORD *sub_1002D2DD8(uint64_t a1, uint64_t a2)
{
  char **v2;
  char **v3;
  char **v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  Swift::OpaquePointer v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char **v26;
  char *v27;
  char **v28;
  uint64_t v29;
  _QWORD *v30;

  v3 = v2;
  v29 = a2;
  v5 = (char **)type metadata accessor for UTType(0);
  v6 = (unint64_t)*(v5 - 1);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_29;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v9)
  {
    while (1)
    {
      v27 = v8;
      v28 = v5;
      v25 = v6;
      v26 = v3;
      v10 = 0;
      v8 = (char *)(a1 & 0xC000000000000001);
      v3 = &selRef_viewOptionsRoot;
      v5 = &selRef_collectionView_targetContentOffsetForProposedContentOffset_;
      while (v8)
      {
        v11 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a1);
        v6 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_26:
          __break(1u);
          return v30;
        }
LABEL_7:
        if (objc_msgSend(v11, v3[449])
          && (objc_msgSend(v11, v5[485]) & 1) != 0
          && (objc_msgSend(v11, "isCopying") & 1) == 0
          && (objc_msgSend(v11, "isFullyFormed") & 1) != 0)
        {
          v12 = *(void **)(v29 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration);
          if (((objc_msgSend(v12, "forMovingDocuments") & 1) != 0
             || objc_msgSend(v12, "forSavingDocuments")
             || (objc_msgSend(v12, "forPickingFoldersOnly") & 1) != 0)
            && (objc_msgSend(v11, "isFolder") & 1) == 0)
          {
            swift_unknownObjectRelease(v11);
            v5 = &selRef_collectionView_targetContentOffsetForProposedContentOffset_;
          }
          else
          {
            v13 = (uint64_t)objc_msgSend(v11, "isFolder");
            if ((v13 & 1) != 0)
              goto LABEL_17;
            v14 = objc_msgSend(v11, "contentType");
            static UTType._unconditionallyBridgeFromObjectiveC(_:)();

            v15 = objc_msgSend(v12, "documentContentTypes");
            v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v28);

            v17._rawValue = (void *)v16;
            v18 = v16;
            v19 = v27;
            HIDWORD(v24) = UTType.doc_conformsToAny(inContentTypes:)(v17);
            swift_bridgeObjectRelease(v18);
            v13 = (*(uint64_t (**)(char *, char **))(v25 + 8))(v19, v28);
            if ((v24 & 0x100000000) != 0)
            {
LABEL_17:
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
              v20 = v30[2];
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
              v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v11);
              specialized ContiguousArray._endMutation()(v21);
            }
            else
            {
              swift_unknownObjectRelease(v11);
            }
            v3 = &selRef_viewOptionsRoot;
            v5 = &selRef_collectionView_targetContentOffsetForProposedContentOffset_;
          }
        }
        else
        {
          swift_unknownObjectRelease(v11);
        }
        ++v10;
        if (v6 == v9)
          return v30;
      }
      if (v10 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_29:
      if (a1 < 0)
        v23 = a1;
      else
        v23 = a1 & 0xFFFFFFFFFFFFFF8;
      v9 = _CocoaArrayWrapper.endIndex.getter(v23);
      if (!v9)
        return _swiftEmptyArrayStorage;
    }
    v11 = *(void **)(a1 + 8 * v10 + 32);
    swift_unknownObjectRetain(v11);
    v6 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_26;
    goto LABEL_7;
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1002D30C4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    v6 = a1 + 40;
    do
    {
      v7 = *(void **)(v6 - 8);
      v6 += 16;
      v8 = v7;
      v9 = a2();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v11 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
      specialized ContiguousArray._endMutation()(v12);
      --v3;
    }
    while (v3);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_1002D3198(objc_class *a1, void *a2)
{
  uint64_t v4;
  NSString v5;
  id v6;
  id v7;
  double v8;
  double v9;
  NSString v10;
  id v11;
  id v12;
  double v13;
  double v14;
  NSString v15;
  id v16;
  id v17;
  double v18;
  double v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  double v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;

  if (qword_100641200 != -1)
    swift_once(&qword_100641200, sub_1000B0278);
  v4 = qword_100672EF8;
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v5);

  if (!v6
    || (v7 = objc_msgSend(v6, "imageWithConfiguration:", v4),
        v6,
        objc_msgSend(v7, "size"),
        v9 = v8,
        v7,
        v9 <= -1.0))
  {
    v9 = -1.0;
  }
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v10);

  if (!v11
    || (v12 = objc_msgSend(v11, "imageWithConfiguration:", v4),
        v11,
        objc_msgSend(v12, "size"),
        v14 = v13,
        v12,
        v14 <= v9))
  {
    v14 = v9;
  }
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v15);

  if (!v16
    || (v17 = objc_msgSend(v16, "imageWithConfiguration:", v4),
        v16,
        objc_msgSend(v17, "size"),
        v19 = v18,
        v17,
        v19 <= v14))
  {
    v19 = v14;
  }
  v20 = (void *)sub_1003F0390((uint64_t)a1);
  if (v20)
  {
    v21 = v20;
    v22 = objc_msgSend(v20, "imageWithConfiguration:", v4);

  }
  else
  {
    v22 = 0;
  }
  objc_msgSend(a2, "setImage:", v22);
  if (v19 > 0.0 && v22)
  {
    v23 = v22;
    objc_msgSend(v23, "size");
    objc_msgSend(a2, "setImageInsets:", 0.0, (v19 - v24) * -0.5, 0.0, (v19 - v24) * -0.5);

  }
  v25 = (void *)objc_opt_self(DOCAXIdentifier);
  sub_1003F047C(a1);
  v27 = v26;
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  v31 = objc_msgSend(v25, "itemCollectionMenuButtonShowing:", v28);

  if (!v31)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v30 = v29;
    v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
  }
  objc_msgSend(a2, "setAccessibilityIdentifier:", v31, v31);

}

_QWORD *sub_1002D3624(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *result;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v3)
  {
    v18 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    v5 = (_BYTE *)(a1 + 56);
    while (1)
    {
      v6 = *((_QWORD *)v5 - 2);
      v7 = *((_QWORD *)v5 - 1);
      v8 = *v5;
      v13[0] = *(v5 - 24);
      v14 = v6;
      v15 = v7;
      v16 = v8;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v7);
      sub_10006142C((uint64_t)v13);
      swift_bridgeObjectRelease(v7);
      v9 = swift_bridgeObjectRelease(v6);
      if (v1)
        break;
      v5 += 32;
      v10 = v17;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
      v11 = v18[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
      specialized ContiguousArray._endMutation()(v12);
      if (!--v3)
        return v18;
    }
    return (_QWORD *)swift_release(v18);
  }
  return result;
}

uint64_t sub_1002D3744(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
  {
LABEL_15:
    v3 = 0;
    goto LABEL_16;
  }
  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
LABEL_18:
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(a1);
    if (v3)
      goto LABEL_4;
LABEL_16:
    v10._countAndFlagsBits = 0xD000000000000034;
    v11._object = (void *)0x800000010051D0D0;
    v10._object = (void *)0x800000010051D100;
    v11._countAndFlagsBits = 0xD00000000000002ELL;
    v12 = DOCLocalizedDictionaryString(_:comment:)(v11, v10);
    v13 = sub_10006922C((uint64_t *)&unk_100644560);
    v14 = swift_allocObject(v13, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_1004D9670;
    *(_QWORD *)(v14 + 56) = &type metadata for UInt;
    *(_QWORD *)(v14 + 64) = &protocol witness table for UInt;
    *(_QWORD *)(v14 + 32) = v3;
    v15 = static String.localizedStringWithFormat(_:_:)(v12._countAndFlagsBits, v12._object, v14);
    swift_bridgeObjectRelease(v12._object);
    swift_bridgeObjectRelease(v14);
    return v15;
  }
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v3)
    goto LABEL_16;
LABEL_4:
  v4 = FPActionReparent;
  swift_bridgeObjectRetain(a1);
  v5 = 4;
  do
  {
    v6 = v5 - 4;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
      v8 = v5 - 3;
      if (__OFADD__(v6, 1))
        goto LABEL_17;
    }
    else
    {
      v7 = *(void **)(a1 + 8 * v5);
      swift_unknownObjectRetain(v7);
      v8 = v5 - 3;
      if (__OFADD__(v6, 1))
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
    }
    v9 = objc_msgSend(v7, "canPerform:", v4);
    swift_unknownObjectRelease(v7);
    if (!v9)
    {
      swift_bridgeObjectRelease(a1);
      goto LABEL_15;
    }
    ++v5;
  }
  while (v8 != v3);
  swift_bridgeObjectRelease(a1);
  if (!v2)
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_16;
  }
  if (a1 < 0)
    v18 = a1;
  else
    v18 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v3 = _CocoaArrayWrapper.endIndex.getter(v18);
  swift_bridgeObjectRelease(a1);
  if ((v3 & 0x8000000000000000) == 0)
    goto LABEL_16;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

char *sub_1002D39A0(void *a1, _QWORD *a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  char *v25;
  NSString v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  NSString v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  uint64_t v51;

  v6 = objc_msgSend(a1, "identifier");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierDelete);
  if (v7 == v10 && v9 == v11)
  {
    swift_bridgeObjectRelease_n(v9, 2);
    goto LABEL_11;
  }
  v13 = v11;
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v13);
  if ((v14 & 1) != 0)
  {
LABEL_11:
    v29 = type metadata accessor for UIDocumentBrowserActionBarButton();
    v30 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v29));
    v31 = a2[3];
    v32 = sub_10007E7A0(a2, v31);
    v33 = _bridgeAnythingToObjectiveC<A>(_:)(v32, v31);
    v25 = (char *)objc_msgSend(v30, "initWithBarButtonSystemItem:target:action:", 16, v33, a3);
    v34 = v33;
LABEL_12:
    swift_unknownObjectRelease(v34);
    goto LABEL_13;
  }
  v15 = objc_msgSend(a1, "image");
  if (!v15)
  {
    v38 = objc_msgSend(a1, "localizedTitle");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v40 = v39;

    v41 = objc_msgSend(a1, "style");
    sub_100069BD8((uint64_t)a2, (uint64_t)v50);
    v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v40);
    v43 = v51;
    if (v51)
    {
      v44 = sub_10007E7A0(v50, v51);
      v45 = *(_QWORD *)(v43 - 8);
      __chkstk_darwin(v44);
      v47 = (char *)v50 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v45 + 16))(v47);
      v48 = _bridgeAnythingToObjectiveC<A>(_:)(v47, v43);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v43);
      sub_100068588(v50);
    }
    else
    {
      v48 = 0;
    }
    v49 = type metadata accessor for UIDocumentBrowserActionBarButton();
    v25 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v49)), "initWithTitle:style:target:action:", v42, v41, v48, a3);

    v34 = v48;
    goto LABEL_12;
  }
  v16 = v15;
  v17 = type metadata accessor for UIDocumentBrowserActionBarButton();
  v18 = v16;
  v19 = objc_msgSend(a1, "style");
  v20 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v17));
  v21 = a2[3];
  v22 = sub_10007E7A0(a2, v21);
  v23 = _bridgeAnythingToObjectiveC<A>(_:)(v22, v21);
  v24 = objc_msgSend(v20, "initWithImage:style:target:action:", v18, v19, v23, a3);
  swift_unknownObjectRelease(v23);

  v25 = (char *)v24;
  v26 = objc_msgSend(a1, "localizedTitle");
  if (!v26)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v28 = v27;
    v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v28);
  }
  objc_msgSend(v25, "setTitle:", v26);

LABEL_13:
  v35 = *(void **)&v25[OBJC_IVAR____TtC5Files32UIDocumentBrowserActionBarButton_docAction];
  *(_QWORD *)&v25[OBJC_IVAR____TtC5Files32UIDocumentBrowserActionBarButton_docAction] = a1;
  v36 = a1;

  return v25;
}

_BYTE *sub_1002D3D0C(void *a1, __int16 a2, void *a3, void *a4)
{
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  NSString v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  id v38;
  NSString v39;
  id v40;
  uint64_t v41;
  id v42;
  id v43;
  _BYTE *v44;
  NSString v45;
  id v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  id v51;
  void *v52;
  id v53;
  _BYTE *v54;
  NSString v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  _QWORD v67[4];

  if (!a1)
    return objc_msgSend((id)objc_opt_self(UIBarButtonItem), "flexibleSpaceItem");
  v8 = a1;
  v9 = objc_msgSend(v8, "identifier");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierDuplicate);
  if (v13 == v10 && v14 == v12)
  {
    swift_bridgeObjectRelease(v12);
LABEL_17:
    swift_bridgeObjectRelease(v12);
    if (objc_msgSend(a4, "horizontalSizeClass") != (id)2)
    {
      if (DOCScreenSizeSEPhone() && objc_msgSend(a4, "verticalSizeClass") == (id)1)
      {
        v38 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithScale:", 1);
        v39 = String._bridgeToObjectiveC()();
        v40 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v39, v38);

        v41 = type metadata accessor for DOCActionToolBarItem();
        v42 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v41));
        v43 = a3;
        v44 = objc_msgSend(v42, "initWithImage:style:target:action:", v40, 0, v43, "barButtonTappedWithSender:");

      }
      else
      {
        v45 = String._bridgeToObjectiveC()();
        v46 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v45);

        v47 = type metadata accessor for DOCActionToolBarItem();
        v48 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v47));
        v49 = a3;
        v44 = objc_msgSend(v48, "initWithImage:style:target:action:", v46, 0, v49, "barButtonTappedWithSender:");

      }
      goto LABEL_26;
    }
    goto LABEL_18;
  }
  v16 = v14;
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v10, v12, 0);
  swift_bridgeObjectRelease(v16);
  if ((v17 & 1) != 0)
    goto LABEL_17;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierMove);
  if (v18 == v10 && v19 == v12)
  {
    swift_bridgeObjectRelease(v12);
LABEL_30:
    swift_bridgeObjectRelease(v12);
    if (objc_msgSend(a4, "horizontalSizeClass") != (id)2)
    {
      if (DOCScreenSizeSEPhone())
        objc_msgSend(a4, "verticalSizeClass");
      v58 = type metadata accessor for DOCActionToolBarItem();
      v59 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v58)), "initWithBarButtonSystemItem:target:action:", 10, a3, "barButtonTappedWithSender:");
      goto LABEL_35;
    }
    goto LABEL_18;
  }
  v21 = v19;
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v10, v12, 0);
  swift_bridgeObjectRelease(v21);
  if ((v22 & 1) != 0)
    goto LABEL_30;
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierShare);
  v25 = v24;
  if (v23 == v10 && v24 == v12)
  {
    swift_bridgeObjectRelease(v12);
    goto LABEL_37;
  }
  v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v10, v12, 0);
  swift_bridgeObjectRelease(v25);
  if ((v60 & 1) == 0)
  {
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierMixedDelete);
    v64 = v63;
    if (v62 == v10 && v63 == v12)
    {
      swift_bridgeObjectRelease_n(v12, 2);
    }
    else
    {
      v65 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v63, v10, v12, 0);
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v64);
      if ((v65 & 1) == 0)
        goto LABEL_18;
    }
    if (objc_msgSend(a4, "horizontalSizeClass") != (id)2)
    {
      if (DOCScreenSizeSEPhone())
        objc_msgSend(a4, "verticalSizeClass");
      v66 = type metadata accessor for DOCActionToolBarItem();
      v59 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v66)), "initWithBarButtonSystemItem:target:action:", 16, a3, "barButtonTappedWithSender:");
      goto LABEL_35;
    }
LABEL_18:
    v27 = objc_msgSend(v8, "localizedTitle");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v29 = v28;

    v30 = type metadata accessor for DOCItemCollectionViewController(0);
    v67[3] = v30;
    v67[0] = a3;
    v31 = a3;
    v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v29);
    if (v30)
    {
      v33 = sub_10007E7A0(v67, v30);
      v34 = *(_QWORD *)(v30 - 8);
      __chkstk_darwin(v33);
      v36 = (char *)v67 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v34 + 16))(v36);
      v37 = _bridgeAnythingToObjectiveC<A>(_:)(v36, v30);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v30);
      sub_100068588(v67);
    }
    else
    {
      v37 = 0;
    }
    v50 = type metadata accessor for DOCActionToolBarItem();
    v51 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v50));
    v44 = objc_msgSend(v51, "initWithTitle:style:target:action:", v32, 0, v37, "barButtonTappedWithSender:", v67[0]);

    swift_unknownObjectRelease(v37);
    goto LABEL_26;
  }
LABEL_37:
  swift_bridgeObjectRelease(v12);
  if (objc_msgSend(a4, "horizontalSizeClass") == (id)2)
    goto LABEL_18;
  if (DOCScreenSizeSEPhone())
    objc_msgSend(a4, "verticalSizeClass");
  v61 = type metadata accessor for DOCActionToolBarItem();
  v59 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v61)), "initWithBarButtonSystemItem:target:action:", 9, a3, "barButtonTappedWithSender:");
LABEL_35:
  v44 = v59;
LABEL_26:
  v52 = *(void **)&v44[OBJC_IVAR____TtC5Files20DOCActionToolBarItem_docAction];
  *(_QWORD *)&v44[OBJC_IVAR____TtC5Files20DOCActionToolBarItem_docAction] = a1;
  v53 = v8;

  v44[OBJC_IVAR____TtC5Files20DOCActionToolBarItem_onSelectedItems] = HIBYTE(a2) & 1;
  objc_msgSend(v44, "setEnabled:", a2 & 1);
  v54 = v44;
  v55 = objc_msgSend(v53, "localizedTitle");
  if (!v55)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v57 = v56;
    v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v57);
  }
  objc_msgSend(v54, "setTitle:", v55);

  return v54;
}

_QWORD *sub_1002D43F4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  _QWORD *result;
  __int16 *v8;
  void *v9;
  __int16 v10;
  id v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v4);
    v8 = (__int16 *)(a1 + 40);
    do
    {
      v9 = (void *)*((_QWORD *)v8 - 1);
      v10 = *v8;
      v8 += 8;
      v11 = v9;
      v12 = sub_1002D3D0C(v9, v10, a2, a3);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      v14 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
      specialized ContiguousArray._endMutation()(v15);
      --v4;
    }
    while (v4);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_1002D44D0(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  id v19;
  __n128 v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_20;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v2);
    if ((v2 & 0x8000000000000000) == 0)
    {
      v32 = v1 & 0xC000000000000001;
      sub_10004F2F0(0, (unint64_t *)&qword_1006424C0, UIAction_ptr);
      v4 = 0;
      v31 = UIDocumentBrowserActionIdentifierUnpin;
      v33 = v1;
      while (1)
      {
        if (v2 == v4)
        {
          __break(1u);
LABEL_20:
          if (v1 < 0)
            v30 = v1;
          else
            v30 = v1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v1);
          v2 = _CocoaArrayWrapper.endIndex.getter(v30);
          swift_bridgeObjectRelease(v1);
          goto LABEL_3;
        }
        if (v32)
          v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
        else
          v8 = *(id *)(v1 + 8 * v4 + 32);
        v9 = v8;
        v10 = objc_msgSend(v8, "image");
        v11 = objc_msgSend(v9, "localizedTitle");
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v14 = v13;

        v15 = swift_allocObject(&unk_1005DA8E8, 24, 7);
        swift_unknownObjectWeakInit(v15 + 16);
        v16 = swift_allocObject(&unk_1005DA960, 24, 7);
        swift_unknownObjectWeakInit(v16 + 16);
        v17 = (_QWORD *)swift_allocObject(&unk_1005DAAC8, 40, 7);
        v17[2] = v15;
        v17[3] = v16;
        v17[4] = v9;
        v18 = v10;
        v19 = v9;
        v21 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v12, v14, 0, 0, v10, 0, 0, 0, v20, 0, 0, 0, sub_1002D544C, v17);
        v22 = objc_msgSend(v19, "identifier");
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        v25 = v24;

        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        v28 = v26;
        if (v23 == v27 && v25 == v26)
        {
          swift_bridgeObjectRelease_n(v25, 2);
        }
        else
        {
          v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v26, 0);
          swift_bridgeObjectRelease(v25);
          swift_bridgeObjectRelease(v28);
          if ((v29 & 1) == 0)
            goto LABEL_8;
        }
        objc_msgSend(v21, "setState:", 1);
LABEL_8:
        ++v4;

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v5);
        v6 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
        v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v21);
        specialized ContiguousArray._endMutation()(v7);
        v1 = v33;
        if (v2 == v4)
          return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1002D47D8(void *a1)
{
  char *v1;
  unint64_t v2;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  Swift::String v8;
  Swift::String_optional v9;
  Swift::String v10;
  void *object;
  NSString v12;
  id v13;
  void *v14;
  id v15;
  _QWORD *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  UIMenuElementSize preferredElementSize;
  Swift::String v26;
  Class isa;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  Swift::OpaquePointer v45;
  UIImage_optional v46;
  Swift::String v47;

  v4 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_moreActionsBarButton;
  v5 = *(void **)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_moreActionsBarButton];
  if (!v5)
  {
    v6 = (id)_DocumentManagerBundle(a1);
    if (v6)
    {
      v7 = v6;
      v2 = 0xD000000000000011;
      v47._countAndFlagsBits = 0xD000000000000046;
      v47._object = (void *)0x8000000100524670;
      v8._object = (void *)0x8000000100524650;
      v8._countAndFlagsBits = 0xD000000000000011;
      v9.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v9.value._object = (void *)0xEB00000000656C62;
      v10._countAndFlagsBits = 0xA680E265726F4DLL;
      v10._object = (void *)0xA700000000000000;
      object = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, (NSBundle)v7, v10, v47)._object;

      v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(object);
      v13 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithTitle:style:target:action:", v12, 0, 0, 0);

      v14 = *(void **)&v1[v4];
      *(_QWORD *)&v1[v4] = v13;

      v5 = *(void **)&v1[v4];
      if (v5)
        goto LABEL_4;
    }
    else
    {
      __break(1u);
    }
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v2 + 34, 0x8000000100524610, "Files/DOCItemCollectionViewController+Overlay.swift", 51, 2, 440, 0);
    __break(1u);
    return result;
  }
LABEL_4:
  v15 = v5;
  v16 = sub_100034068(0);
  v17 = (int64_t)sub_1002CBBFC(v16);
  swift_bridgeObjectRelease(v16);
  v18 = (uint64_t)sub_100034068(0);
  v19 = v18;
  if ((unint64_t)v18 >> 62)
  {
    if (v18 >= 0)
      v18 &= 0xFFFFFFFFFFFFFF8uLL;
    v20 = _CocoaArrayWrapper.endIndex.getter(v18);
  }
  else
  {
    v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v19);
  if (v20 >= 1)
  {
    if ((unint64_t)v17 >> 62)
    {
      if (v17 < 0)
        v28 = v17;
      else
        v28 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v17);
      v29 = _CocoaArrayWrapper.endIndex.getter(v28);
      swift_bridgeObjectRelease(v17);
      if (v29 > 0)
      {
LABEL_9:
        v21 = v15;
        v22 = v1;
        v23 = (uint64_t)sub_1002D44D0(v17);
        swift_bridgeObjectRelease(v17);

        if ((unint64_t)v23 >> 62)
        {
          if (v23 < 0)
            v43 = v23;
          else
            v43 = v23 & 0xFFFFFFFFFFFFFF8;
          v44 = sub_10004F2F0(0, (unint64_t *)&qword_100644320, UIMenuElement_ptr);
          swift_bridgeObjectRetain(v23);
          preferredElementSize = _bridgeCocoaArray<A>(_:)(v43, v44);
          swift_bridgeObjectRelease(v23);
        }
        else
        {
          v24 = swift_bridgeObjectRetain(v23);
          dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v24);
          sub_10004F2F0(0, (unint64_t *)&qword_100644320, UIMenuElement_ptr);
          preferredElementSize = v23;
        }
        sub_10004F2F0(0, (unint64_t *)&qword_1006448A0, UIMenu_ptr);
        v26._countAndFlagsBits = 0;
        v26._object = (void *)0xE000000000000000;
        v46.value.super.isa = 0;
        v46.is_nil = 0;
        isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v26, (Swift::String_optional)0, v46, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v45).super.super.isa;
        swift_bridgeObjectRelease(v23);
        objc_msgSend(v21, "setMenu:", isa);

        sub_1000385C4();
        goto LABEL_20;
      }
    }
    else if (*(uint64_t *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10) > 0)
    {
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease(v17);
LABEL_20:
  if (objc_msgSend(a1, "horizontalSizeClass") == (id)2)
  {
    objc_msgSend(v15, "setImage:", 0);
  }
  else
  {
    if (DOCScreenSizeSEPhone() && objc_msgSend(a1, "verticalSizeClass") == (id)1)
    {
      v30 = qword_100641150;
      v31 = v15;
      if (v30 != -1)
        swift_once(&qword_100641150, sub_1000B20A8);
      v32 = objc_msgSend((id)qword_100672DD8, "ellipsisMenuItemSmallImageName");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v34 = v33;

      v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
      v36 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v35);
    }
    else
    {
      v37 = qword_100641150;
      v31 = v15;
      if (v37 != -1)
        swift_once(&qword_100641150, sub_1000B20A8);
      v38 = objc_msgSend((id)qword_100672DD8, "ellipsisMenuItemImageName");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v40 = v39;

      v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v40);
      v36 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v35);
    }
    v41 = v36;

    objc_msgSend(v31, "setImage:", v41);
  }
  return (uint64_t)v15;
}

void _s5Files31DOCItemCollectionViewControllerC13updateOverlay8animatedySb_tF_0()
{
  char *v0;
  char *v1;
  char v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;

  v1 = v0;
  if ((objc_msgSend(v0, "doc_scheduleHandlerIfInLiveResize:", "_doc_performLiveResizeSkipped_updateOverlay") & 1) == 0)
  {
    sub_100006DF8();
    if ((v2 & 1) == 0)
    {
      v3 = sub_1002C9870();
      if (sub_10007B5C0(1))
      {
        v4 = sub_100031D00();
        v5 = sub_100057F7C();
        v6 = sub_100010844();
        v7 = *(void **)&v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_containerNavigationItem];
        if (v7)
        {
          v8 = v7;
          objc_msgSend(v8, "setHidesBackButton:", objc_msgSend(v1, "hidesNavigationBackButton"));

        }
        if (objc_msgSend(v1, "isEditing"))
        {
          sub_1002C9A98();
        }
        else
        {
          v10 = swift_bridgeObjectRetain(*(_QWORD *)&v1[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_additionalLeadingNavigationBarButtonItems]);
          sub_1000887E8(v10);
        }
        sub_1001F7950((unint64_t)v4, v5, v6, 1);
        swift_bridgeObjectRelease(v4);
        swift_bridgeObjectRelease(v5);
        swift_bridgeObjectRelease(v6);
        sub_100033EB8();
        sub_1002CA988();
        v11 = objc_msgSend(v1, "splitViewController");
        if (v11)
        {
          v12 = v11;
          v13 = objc_opt_self(DOCSplitBrowserViewController);
          v14 = (void *)swift_dynamicCastObjCClass(v12, v13);
          if (v14)
          {
            v15 = objc_msgSend(v14, "sidebarViewController");
            sub_1000511A0();

            v12 = v15;
          }

        }
        sub_1002CB044();

      }
      else
      {
        v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
        v16 = String._bridgeToObjectiveC()();
        objc_msgSend(v9, "BOOLForKey:", v16);

      }
    }
  }
}

uint64_t type metadata accessor for DOCActionToolBarItem()
{
  return objc_opt_self(_TtC5Files20DOCActionToolBarItem);
}

uint64_t _s10BBIStorageCMa()
{
  return objc_opt_self(_TtCC5Files31DOCItemCollectionViewController10BBIStorage);
}

uint64_t type metadata accessor for DOCLegacyOverflowBarButtonItem()
{
  return objc_opt_self(_TtC5FilesP33_B7E312367DDCD26ACFB01C644C4A173430DOCLegacyOverflowBarButtonItem);
}

uint64_t type metadata accessor for UIDocumentBrowserActionBarButton()
{
  return objc_opt_self(_TtC5Files32UIDocumentBrowserActionBarButton);
}

uint64_t sub_1002D4FBC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1002D4FE0()
{
  uint64_t v0;

  sub_1002D1DC8(v0);
}

void sub_1002D4FE8(uint64_t a1)
{
  uint64_t v1;

  sub_1002D0AC8(a1, v1, sub_1001785DC);
}

void sub_1002D5008(uint64_t a1)
{
  uint64_t v1;

  sub_1002D0AC8(a1, v1, (void (*)(void))sub_1002CEE78);
}

uint64_t sub_1002D5028()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002D5054()
{
  uint64_t v0;

  return sub_1002CEFB4(*(char **)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_1002D5064(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;

  sub_1002CC770(a1, a2, v2);
}

void sub_1002D506C(uint64_t a1)
{
  uint64_t v1;

  sub_1002D0C60(a1, v1);
}

void sub_1002D5074(uint64_t a1)
{
  uint64_t v1;

  sub_1002D0AC8(a1, v1, (void (*)(void))sub_1002D5174);
}

uint64_t sub_1002D5094()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002D50B8(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  id v10;

  v4 = v2 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_overlayDelegate;
  result = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_overlayDelegate, a2);
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType(result, v6);
    v10 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration), "identifier");
    (*(void (**)(_QWORD, id, uint64_t, uint64_t))(v8 + 32))(a1 & 1, v10, ObjectType, v8);

    return swift_unknownObjectRelease(v7);
  }
  return result;
}

uint64_t sub_1002D5174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Logger.UI.unsafeMutableAddressor(v4);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "View Options UIAction tapped", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v12 = *(void **)(v1 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_containerNavigationItem);
  if (!v12 || (v13 = objc_msgSend(v12, "overflowPresentationSource")) == 0)
    v13 = sub_1002CD61C();
  v14 = sub_1002D0E1C((uint64_t)v13);
  v15 = *(void **)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_viewOptionsViewController);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_viewOptionsViewController) = v14;

  v16 = swift_allocObject(&unk_1005DA8E8, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16);
  swift_retain();
  sub_10000E7DC();
  if (v17)
  {
    v18 = v17;
    swift_release(v16);
    v19 = swift_allocObject(&unk_1005DAA00, 32, 7);
    *(_QWORD *)(v19 + 16) = sub_1002D5390;
    *(_QWORD *)(v19 + 24) = v16;
    swift_retain();
    sub_10045EA44((uint64_t (*)(id))sub_100066584, v19, 1);

    swift_release(v19);
    swift_unknownObjectRelease(v13);
  }
  else
  {
    sub_1002D1018(v16);
    swift_unknownObjectRelease(v13);
    swift_release(v16);
  }
  return swift_release(v16);
}

void sub_1002D5390()
{
  uint64_t v0;

  sub_1002D1018(v0);
}

uint64_t sub_1002D5398()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002D53BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1002D53E8()
{
  uint64_t v0;

  sub_1002D1114(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1002D53F0(void *a1)
{
  uint64_t v1;

  sub_1002D0538(a1, v1);
}

void sub_1002D53F8(void *a1)
{
  uint64_t v1;

  sub_1002D00D8(a1, v1);
}

void sub_1002D5400(uint64_t a1)
{
  uint64_t v1;

  sub_1002D0B1C(a1, v1);
}

char *sub_1002D5408(void *a1, char a2)
{
  uint64_t v2;

  return sub_1002D1684(a1, a2, *(void **)(v2 + 16));
}

void sub_1002D5410(void (*a1)(_QWORD *), uint64_t a2)
{
  uint64_t v2;

  sub_1002CF824(a1, a2, v2);
}

uint64_t sub_1002D5418()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_1002D544C(uint64_t a1)
{
  uint64_t v1;

  sub_1002CBFB0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1002D5458()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

void sub_1002D548C(uint64_t a1)
{
  uint64_t v1;

  sub_1002CC0D8(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

void sub_1002D5498(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1002CDE60(a1, a2, v2);
}

uint64_t sub_1002D54A0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002D54C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  if (*(_QWORD *)(v0 + 64))
    sub_100068588((_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1002D5508(uint64_t a1)
{
  uint64_t v1;

  return sub_1002CE64C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), v1 + 40);
}

uint64_t sub_1002D5520()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002D5554()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    sub_100068588((_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void sub_1002D5590(void *a1)
{
  uint64_t v1;

  sub_1002CE9D0(a1, v1 + 16, *(void **)(v1 + 48), *(_QWORD *)(v1 + 56));
}

void sub_1002D559C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1002D1F44(a1, a2, *(void (**)(id))(v2 + 16));
}

uint64_t sub_1002D55A4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1002D55D0()
{
  uint64_t v0;

  sub_1002CEC7C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1002D55DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  if (*(_QWORD *)(v0 + 72))
    sub_100068588((_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 80, 7);
}

void sub_1002D5628(uint64_t a1)
{
  uint64_t v1;

  sub_1002CE774(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), v1 + 48);
}

uint64_t sub_1002D5638()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_1002D565C(uint64_t a1)
{
  uint64_t v1;

  sub_1002D07AC(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_1002D56C0@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  double v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t result;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[4];
  __int128 v36[5];

  v3 = *(double *)v1;
  if (*(_QWORD *)(v1 + 56) == 6)
  {
    v4 = sub_10006922C(&qword_100644AE8);
    v5 = (_QWORD *)swift_allocObject(v4, 104, 7);
    *((_OWORD *)v5 + 1) = xmmword_1004D9670;
    sub_1002D64B4(v1, (uint64_t)v35);
    v5[4] = 0x7FEFFFFFFFFFFFFFLL;
    v6 = v35[1];
    *(_OWORD *)(v5 + 5) = v35[0];
    *(_OWORD *)(v5 + 7) = v6;
    v7 = v35[3];
    *(_OWORD *)(v5 + 9) = v35[2];
    *(_OWORD *)(v5 + 11) = v7;
  }
  else
  {
    v5 = sub_1002D6CF0(v1);
  }
  *(_QWORD *)&v36[0] = v5;
  swift_bridgeObjectRetain(v5);
  sub_1002D5A04((uint64_t *)v36);
  swift_bridgeObjectRelease(v5);
  v8 = *(_QWORD *)&v36[0];
  v9 = *(_QWORD *)(*(_QWORD *)&v36[0] + 16);
  if (!v9)
  {
    v8 = swift_release(*(_QWORD *)&v36[0]);
    __break(1u);
    goto LABEL_20;
  }
  v10 = *(_QWORD *)&v36[0] + 32;
  v11 = v9 - 1;
  if (v3 <= *(double *)(*(_QWORD *)&v36[0] + 32 + 72 * (v9 - 1)))
  {
    v15 = v10 + 72 * v11;
    v16 = *(_OWORD *)(v15 + 56);
    v17 = *(_OWORD *)(v15 + 40);
    v18 = *(_OWORD *)(v15 + 24);
    v19 = *(_OWORD *)(v15 + 8);
    if (v9 != 1)
    {
      if (v3 > *(double *)(v10 + 72 * v9 - 144))
      {
LABEL_14:
        v27 = v19;
        v29 = v18;
        v31 = v17;
        v33 = v16;
        result = swift_release(*(_QWORD *)&v36[0]);
        goto LABEL_15;
      }
      v20 = *(_QWORD *)&v36[0] + 72 * v9 - 184;
      while (--v11)
      {
        v21 = v20 - 72;
        v22 = v3 > *(double *)v20;
        v20 -= 72;
        if (v22)
        {
          v16 = *(_OWORD *)(v21 + 200);
          v17 = *(_OWORD *)(v21 + 184);
          v18 = *(_OWORD *)(v21 + 168);
          v19 = *(_OWORD *)(v21 + 152);
          goto LABEL_14;
        }
      }
      v32 = *(_OWORD *)(v20 + 112);
      v34 = *(_OWORD *)(v20 + 128);
      v28 = *(_OWORD *)(v20 + 80);
      v30 = *(_OWORD *)(v20 + 96);
LABEL_18:
      result = swift_release(v8);
      v26 = v32;
      v25 = v34;
      v24 = v28;
      v23 = v30;
      goto LABEL_16;
    }
LABEL_20:
    v28 = v19;
    v30 = v18;
    v32 = v17;
    v34 = v16;
    goto LABEL_18;
  }
  v12 = *(_OWORD *)(*(_QWORD *)&v36[0] + 56);
  v36[0] = *(_OWORD *)(*(_QWORD *)&v36[0] + 40);
  v36[1] = v12;
  v13 = *(_OWORD *)(v8 + 88);
  v36[2] = *(_OWORD *)(v8 + 72);
  v36[3] = v13;
  v31 = *(_OWORD *)(v8 + 72);
  v33 = *(_OWORD *)(v8 + 88);
  v27 = *(_OWORD *)(v8 + 40);
  v29 = *(_OWORD *)(v8 + 56);
  swift_release(v8);
  result = sub_10031302C((__int128 *)v1, v36);
LABEL_15:
  v24 = v27;
  v23 = v29;
  v26 = v31;
  v25 = v33;
LABEL_16:
  *a1 = v24;
  a1[1] = v23;
  a1[2] = v26;
  a1[3] = v25;
  return result;
}

uint64_t sub_1002D58C4()
{
  uint64_t v0;
  double v1;
  uint64_t result;
  _BOOL8 v3;
  uint64_t v4;
  BOOL v5;
  _OWORD v6[4];
  void *v7[6];
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v1 = *(double *)v0;
  sub_1002D56C0(v6);
  sub_1002D6E08(v0, (uint64_t *)v6, (uint64_t)v7);
  sub_1001456E8(v7);
  if (v1 < v11 + v12 + v12 + v8 + v9 + v9 + v10 + v10 + v8 + v9 + v9 + v10 + v10)
    return 1;
  v3 = (*(_BYTE *)(v0 + 88) & 1) == 0;
  v4 = sub_1002D5974(v0, v1);
  v5 = __OFADD__(v4, v3);
  result = v4 + v3;
  if (v5)
    __break(1u);
  return result;
}

uint64_t sub_1002D5974(uint64_t a1, double a2)
{
  int v3;
  uint64_t v4;
  __int128 v6;
  double v7;
  double v8;
  double v9;

  v3 = *(unsigned __int8 *)(a1 + 73);
  sub_1002D56C0(&v6);
  if (v3)
    v4 = 2;
  else
    v4 = 3;
  if (((double)v4 + -1.0) * v8
     + v9
     + v9
     + (*(double *)&v6 + *((double *)&v6 + 1) + *((double *)&v6 + 1) + v7 + v7) * (double)v4 <= a2)
    return v4;
  else
    return 2;
}

Swift::Int sub_1002D5A04(uint64_t *a1)
{
  uint64_t v2;
  double *v3;
  Swift::Int result;
  double *v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_10046569C(v2);
  v3 = *(double **)(v2 + 16);
  v5[0] = (double *)(v2 + 32);
  v5[1] = v3;
  result = sub_1002D5A6C(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1002D5A6C(double **a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  double *v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  double *v23;
  double v24;
  Swift::Int v25;
  uint64_t v26;
  double v27;
  Swift::Int v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  double *v91;
  uint64_t v92;
  uint64_t v93;
  double *i;
  double v95;
  uint64_t v96;
  double *v97;
  _OWORD *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  _QWORD *v116;
  Swift::Int v117;
  Swift::Int v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  double *v123;
  double *v124;

  v3 = (Swift::Int)a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v91 = *a1;
      v92 = -1;
      v93 = 1;
      for (i = *a1; ; i += 9)
      {
        v95 = v91[9 * v93];
        v96 = v92;
        v97 = i;
        do
        {
          v98 = v97 + 9;
          if (v95 >= *v97)
            break;
          if (!v91)
            goto LABEL_144;
          v99 = *((_OWORD *)v97 + 5);
          v100 = *((_OWORD *)v97 + 6);
          v101 = *((_OWORD *)v97 + 7);
          v102 = *((_OWORD *)v97 + 8);
          v103 = *((_OWORD *)v97 + 3);
          *(_OWORD *)(v97 + 13) = *((_OWORD *)v97 + 2);
          *(_OWORD *)(v97 + 15) = v103;
          v105 = *(_OWORD *)v97;
          v104 = *((_OWORD *)v97 + 1);
          *(_OWORD *)(v97 + 1) = v99;
          v97[17] = v97[8];
          *v97 = v95;
          *(_OWORD *)(v97 + 3) = v100;
          *(_OWORD *)(v97 + 5) = v101;
          *(_OWORD *)(v97 + 7) = v102;
          v97 -= 9;
          *v98 = v105;
          v98[1] = v104;
        }
        while (!__CFADD__(v96++, 1));
        ++v93;
        --v92;
        if (v93 == v3)
          return result;
      }
    }
    goto LABEL_140;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_149:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v117 = result;
  v114 = (uint64_t *)a1;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    v123 = (double *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_106;
    }
    v116 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &_s9ScenariosVN);
    *(_QWORD *)(v7 + 16) = v6;
    v116 = (_QWORD *)v7;
    v123 = (double *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v115 = (uint64_t)(*a1 + 18);
  v113 = (uint64_t)(*a1 - 9);
  v11 = (char *)_swiftEmptyArrayStorage;
  v118 = v3;
  v124 = v10;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = v10[9 * v9];
      v15 = v10[9 * v13];
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = (double *)(v115 + 72 * v13);
        v17 = v14;
        while (1)
        {
          v18 = v17;
          v17 = *v16;
          if (v14 < v15 == *v16 >= v18)
            break;
          ++v9;
          v16 += 9;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_141;
        if (v13 < v9)
        {
          v19 = 9 * v9;
          v20 = 9 * v13;
          v21 = v9;
          v22 = v13;
          do
          {
            if (v22 != --v21)
            {
              if (!v10)
                goto LABEL_147;
              v23 = &v10[v19];
              v24 = v10[v20 + 8];
              v121 = *(_OWORD *)&v10[v20 + 2];
              v122 = *(_OWORD *)&v10[v20];
              v119 = *(_OWORD *)&v10[v20 + 6];
              v120 = *(_OWORD *)&v10[v20 + 4];
              memmove(&v10[v20], &v10[v19 - 9], 0x48uLL);
              v10 = v124;
              *(_OWORD *)(v23 - 9) = v122;
              *(_OWORD *)(v23 - 7) = v121;
              *(_OWORD *)(v23 - 5) = v120;
              *(_OWORD *)(v23 - 3) = v119;
              *(v23 - 1) = v24;
            }
            ++v22;
            v19 -= 9;
            v20 += 9;
          }
          while (v22 < v21);
          v3 = v118;
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_139;
      if (v9 - v13 < v117)
      {
        v25 = v13 + v117;
        if (__OFADD__(v13, v117))
          goto LABEL_142;
        if (v25 >= v3)
          v25 = v3;
        if (v25 < v13)
          goto LABEL_143;
        if (v9 != v25)
        {
          v26 = v113 + 72 * v9;
          do
          {
            v27 = v10[9 * v9];
            v28 = v13;
            v29 = v26;
            do
            {
              v30 = (_OWORD *)(v29 + 72);
              if (v27 >= *(double *)v29)
                break;
              if (!v10)
                goto LABEL_145;
              v31 = *(_OWORD *)(v29 + 80);
              v32 = *(_OWORD *)(v29 + 96);
              v33 = *(_OWORD *)(v29 + 112);
              v34 = *(_OWORD *)(v29 + 128);
              v35 = *(_OWORD *)(v29 + 48);
              *(_OWORD *)(v29 + 104) = *(_OWORD *)(v29 + 32);
              *(_OWORD *)(v29 + 120) = v35;
              v37 = *(_OWORD *)v29;
              v36 = *(_OWORD *)(v29 + 16);
              *(_OWORD *)(v29 + 8) = v31;
              *(_QWORD *)(v29 + 136) = *(_QWORD *)(v29 + 64);
              *(double *)v29 = v27;
              *(_OWORD *)(v29 + 24) = v32;
              *(_OWORD *)(v29 + 40) = v33;
              *(_OWORD *)(v29 + 56) = v34;
              v29 -= 72;
              ++v28;
              *v30 = v37;
              v30[1] = v36;
            }
            while (v9 != v28);
            ++v9;
            v26 += 72;
          }
          while (v9 != v25);
          v9 = v25;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_134:
      __break(1u);
      goto LABEL_135;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_100464E4C(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v39 = *((_QWORD *)v11 + 2);
    v38 = *((_QWORD *)v11 + 3);
    v12 = v39 + 1;
    v10 = v124;
    if (v39 >= v38 >> 1)
    {
      v88 = sub_100464E4C((char *)(v38 > 1), v39 + 1, 1, v11);
      v10 = v124;
      v11 = v88;
    }
    *((_QWORD *)v11 + 2) = v12;
    v40 = v11 + 32;
    v41 = &v11[16 * v39 + 32];
    *(_QWORD *)v41 = v13;
    *((_QWORD *)v41 + 1) = v9;
    if (v39)
      break;
    v12 = 1;
LABEL_15:
    v3 = v118;
    if (v9 >= v118)
    {
      v8 = v116;
LABEL_106:
      v90 = v11;
      v116 = v8;
      if (v12 < 2)
        goto LABEL_96;
      v107 = *v114;
      while (1)
      {
        v108 = v12 - 2;
        if (v12 < 2)
          break;
        if (!v107)
          goto LABEL_148;
        v89 = v90;
        v109 = *(_QWORD *)&v90[16 * v108 + 32];
        v110 = *(_QWORD *)&v90[16 * v12 + 24];
        sub_1002D61FC((double *)(v107 + 72 * v109), (double *)(v107 + 72 * *(_QWORD *)&v90[16 * v12 + 16]), v107 + 72 * v110, v123);
        if (v1)
          goto LABEL_95;
        if (v110 < v109)
          goto LABEL_136;
        if ((swift_isUniquelyReferenced_nonNull_native(v89) & 1) == 0)
          v89 = sub_10046564C((uint64_t)v89);
        if (v108 >= *((_QWORD *)v89 + 2))
          goto LABEL_137;
        v111 = &v89[16 * v108 + 32];
        *(_QWORD *)v111 = v109;
        *((_QWORD *)v111 + 1) = v110;
        v112 = *((_QWORD *)v89 + 2);
        if (v12 > v112)
          goto LABEL_138;
        memmove(&v89[16 * v12 + 16], &v89[16 * v12 + 32], 16 * (v112 - v12));
        v90 = v89;
        *((_QWORD *)v89 + 2) = v112 - 1;
        v12 = v112 - 1;
        if (v112 <= 2)
          goto LABEL_96;
      }
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
      goto LABEL_149;
    }
  }
  while (1)
  {
    v42 = v12 - 1;
    if (v12 >= 4)
    {
      v47 = &v40[16 * v12];
      v48 = *((_QWORD *)v47 - 8);
      v49 = *((_QWORD *)v47 - 7);
      v53 = __OFSUB__(v49, v48);
      v50 = v49 - v48;
      if (v53)
        goto LABEL_123;
      v52 = *((_QWORD *)v47 - 6);
      v51 = *((_QWORD *)v47 - 5);
      v53 = __OFSUB__(v51, v52);
      v45 = v51 - v52;
      v46 = v53;
      if (v53)
        goto LABEL_124;
      v54 = v12 - 2;
      v55 = &v40[16 * v12 - 32];
      v57 = *(_QWORD *)v55;
      v56 = *((_QWORD *)v55 + 1);
      v53 = __OFSUB__(v56, v57);
      v58 = v56 - v57;
      if (v53)
        goto LABEL_126;
      v53 = __OFADD__(v45, v58);
      v59 = v45 + v58;
      if (v53)
        goto LABEL_129;
      if (v59 >= v50)
      {
        v77 = &v40[16 * v42];
        v79 = *(_QWORD *)v77;
        v78 = *((_QWORD *)v77 + 1);
        v53 = __OFSUB__(v78, v79);
        v80 = v78 - v79;
        if (v53)
          goto LABEL_133;
        v70 = v45 < v80;
        goto LABEL_84;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v71 = *((_QWORD *)v11 + 4);
        v72 = *((_QWORD *)v11 + 5);
        v53 = __OFSUB__(v72, v71);
        v64 = v72 - v71;
        v65 = v53;
        goto LABEL_78;
      }
      v44 = *((_QWORD *)v11 + 4);
      v43 = *((_QWORD *)v11 + 5);
      v53 = __OFSUB__(v43, v44);
      v45 = v43 - v44;
      v46 = v53;
    }
    if ((v46 & 1) != 0)
      goto LABEL_125;
    v54 = v12 - 2;
    v60 = &v40[16 * v12 - 32];
    v62 = *(_QWORD *)v60;
    v61 = *((_QWORD *)v60 + 1);
    v63 = __OFSUB__(v61, v62);
    v64 = v61 - v62;
    v65 = v63;
    if (v63)
      goto LABEL_128;
    v66 = &v40[16 * v42];
    v68 = *(_QWORD *)v66;
    v67 = *((_QWORD *)v66 + 1);
    v53 = __OFSUB__(v67, v68);
    v69 = v67 - v68;
    if (v53)
      goto LABEL_131;
    if (__OFADD__(v64, v69))
      goto LABEL_132;
    if (v64 + v69 >= v45)
    {
      v70 = v45 < v69;
LABEL_84:
      if (v70)
        v42 = v54;
      goto LABEL_86;
    }
LABEL_78:
    if ((v65 & 1) != 0)
      goto LABEL_127;
    v73 = &v40[16 * v42];
    v75 = *(_QWORD *)v73;
    v74 = *((_QWORD *)v73 + 1);
    v53 = __OFSUB__(v74, v75);
    v76 = v74 - v75;
    if (v53)
      goto LABEL_130;
    if (v76 < v64)
      goto LABEL_15;
LABEL_86:
    v81 = v42 - 1;
    if (v42 - 1 >= v12)
    {
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if (!v10)
      goto LABEL_146;
    v82 = v11;
    v83 = &v40[16 * v81];
    v84 = *(_QWORD *)v83;
    v85 = &v40[16 * v42];
    v86 = *((_QWORD *)v85 + 1);
    sub_1002D61FC(&v10[9 * *(_QWORD *)v83], &v10[9 * *(_QWORD *)v85], (unint64_t)&v10[9 * v86], v123);
    if (v1)
      break;
    if (v86 < v84)
      goto LABEL_120;
    if (v42 > *((_QWORD *)v82 + 2))
      goto LABEL_121;
    *(_QWORD *)v83 = v84;
    *(_QWORD *)&v40[16 * v81 + 8] = v86;
    v87 = *((_QWORD *)v82 + 2);
    if (v42 >= v87)
      goto LABEL_122;
    v11 = v82;
    v12 = v87 - 1;
    memmove(&v40[16 * v42], v85 + 16, 16 * (v87 - 1 - v42));
    *((_QWORD *)v82 + 2) = v87 - 1;
    v10 = v124;
    if (v87 <= 2)
      goto LABEL_15;
  }
  v89 = v82;
LABEL_95:
  v90 = v89;
LABEL_96:
  swift_bridgeObjectRelease(v90);
  v116[2] = 0;
  return swift_bridgeObjectRelease(v116);
}

uint64_t sub_1002D61FC(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double v18;
  uint64_t result;
  double *v20;
  double *v21;
  double *v22;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 72;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 72;
  v22 = __dst;
  v21 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -71)
    {
      if (a4 != __src || &__src[9 * v11] <= a4)
        memmove(a4, __src, 72 * v11);
      v14 = &v4[9 * v11];
      v20 = v14;
      v22 = v6;
      if (v7 < v6 && v10 >= 72)
      {
        v15 = (double *)(a3 - 72);
        v16 = v6;
        while (1)
        {
          v17 = v15 + 9;
          v18 = *(v16 - 9);
          v16 -= 9;
          if (*(v14 - 9) >= v18)
          {
            v20 = v14 - 9;
            if (v17 < v14 || v15 >= v14 || v17 != v14)
              memmove(v15, v14 - 9, 0x48uLL);
            v16 = v6;
            v14 -= 9;
            if (v6 <= v7)
              goto LABEL_38;
          }
          else
          {
            if (v17 != v6 || v15 >= v6)
              memmove(v15, v16, 0x48uLL);
            v22 = v16;
            if (v16 <= v7)
              goto LABEL_38;
          }
          v15 -= 9;
          v6 = v16;
          if (v14 <= v4)
            goto LABEL_38;
        }
      }
      goto LABEL_38;
    }
  }
  else if (v8 >= -71)
  {
    if (a4 != __dst || &__dst[9 * v9] <= a4)
      memmove(a4, __dst, 72 * v9);
    v12 = &v4[9 * v9];
    v20 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 72)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
            memmove(v7, v4, 0x48uLL);
          v4 += 9;
          v21 = v4;
          v13 = v6;
        }
        else
        {
          v13 = v6 + 9;
          if (v7 < v6 || v7 >= v13 || v7 != v6)
            memmove(v7, v6, 0x48uLL);
        }
        v7 += 9;
        if (v4 >= v12)
          break;
        v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      v22 = v7;
    }
LABEL_38:
    sub_100464FF0((void **)&v22, (const void **)&v21, &v20);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

double sub_1002D64B4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  char v11;
  double v12;
  double v13;
  double v14;
  double result;

  if (qword_100640E70 != -1)
    swift_once(&qword_100640E70, sub_1001FF464);
  v4 = *(double *)&qword_1006729E0;
  if (qword_100640E88 != -1)
    swift_once(&qword_100640E88, sub_1001FF49C);
  v5 = *(double *)&qword_1006729F8 - v4;
  sub_100316528();
  v7 = v4 + v5 * v6;
  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
    v8 = v7;
  else
    v8 = v7 * 0.785;
  v9 = *(double *)(a1 + 64);
  if (qword_100640E90 != -1)
    swift_once(&qword_100640E90, sub_1001FF4B0);
  if (v8 >= *(double *)&qword_100672A00)
    v8 = *(double *)&qword_100672A00;
  if (qword_100640E50 != -1)
    swift_once(&qword_100640E50, sub_1001FF41C);
  if (*(double *)&qword_1006729C0 > v8)
    v8 = *(double *)&qword_1006729C0;
  v10 = sub_1001FF54C(v8, 1.0);
  if ((v11 & 1) != 0)
    v12 = UIRoundToScale(v8, v9);
  else
    v12 = *(double *)&v10;
  sub_100316528();
  v14 = UIFloorToScale((v13 + v13 + 1.0) * 12.0, v9);
  *(double *)a2 = v12;
  *(double *)(a2 + 8) = v14;
  __asm { FMOV            V0.2D, #12.0 }
  *(_OWORD *)(a2 + 16) = _Q0;
  *(_OWORD *)(a2 + 32) = xmmword_1004E1600;
  result = 20.0;
  *(_OWORD *)(a2 + 48) = xmmword_1004E1610;
  return result;
}

void sub_1002D6640(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

_BYTE *sub_1002D6690()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  char v8;
  double v9;
  double v10;
  uint64_t v11;
  char v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  _BOOL4 v25;
  double v26;
  double v27;
  _BYTE *result;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  char v47;
  unsigned __int8 v48;

  if (qword_100640E58 != -1)
    swift_once(&qword_100640E58, sub_1001FF42C);
  v4 = *(double *)&qword_1006729C8;
  if (qword_100640E68 != -1)
    swift_once(&qword_100640E68, sub_1001FF450);
  v5 = *(double *)&qword_1006729D8 - v4;
  sub_100316528();
  v7 = v4 + v5 * v6;
  v8 = *(_BYTE *)(v1 + 88);
  if ((v8 & 1) != 0)
    v9 = v7;
  else
    v9 = v7 * 0.785;
  v10 = *(double *)(v1 + 64);
  if (qword_100640E90 != -1)
    swift_once(&qword_100640E90, sub_1001FF4B0);
  if (v9 >= *(double *)&qword_100672A00)
    v9 = *(double *)&qword_100672A00;
  if (qword_100640E50 != -1)
    swift_once(&qword_100640E50, sub_1001FF41C);
  if (*(double *)&qword_1006729C0 > v9)
    v9 = *(double *)&qword_1006729C0;
  *(double *)&v11 = COERCE_DOUBLE(sub_1001FF54C(v9, 1.0));
  if ((v12 & 1) != 0)
  {
    v13 = UIRoundToScale(v9, v10);
    if (!v2)
    {
LABEL_20:
      v14 = 4.0;
      v15 = 8.0;
      if ((v8 & 1) == 0)
        v15 = 4.0;
      v46 = v15;
      sub_100316528();
      v17 = (v16 + v16 + 1.0) * 6.0;
      v18 = v10;
      goto LABEL_27;
    }
  }
  else
  {
    v13 = *(double *)&v11;
    if (!v2)
      goto LABEL_20;
  }
  v19 = 4.0;
  if ((v8 & 1) != 0)
    v19 = 8.0;
  v46 = v19;
  sub_100316528();
  v21 = *(double *)(v1 + 64);
  v22 = UIFloorToScale((v20 + v20 + 1.0) * 8.0, v21);
  v14 = 10.0;
  if (v3 > 719.0)
  {
    sub_100316528();
    v17 = (v23 + v23 + 1.0) * 12.0;
    v18 = v21;
LABEL_27:
    v22 = UIFloorToScale(v17, v18);
  }
  if (v3 >= 500.0)
  {
    v25 = 0;
  }
  else
  {
    v24 = *(unsigned __int8 *)(v1 + 73);
    v25 = v24 == 2;
    v26 = v46 + -4.0;
    v27 = v14 + -12.0;
    if (v24 != 2)
    {
      v26 = v46;
      v27 = v14;
    }
    v46 = fmax(v26, 4.0);
    if (v27 < 4.0)
      v14 = 4.0;
    else
      v14 = v27;
  }
  sub_10005C528((_BYTE *)(v1 + 48), &v47);
  result = sub_10005C528(&v47, &v48);
  v29.i32[0] = 3;
  v30.i32[0] = v48;
  v31 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v30, v29), 0);
  __asm { FMOV            V1.2D, #10.0 }
  *(double *)_Q1.i64 = v46;
  __asm { FMOV            V3.2D, #12.0 }
  _Q3.i64[0] = fmax(v46 + -2.0, 4.0);
  v38 = vbslq_s8(v31, _Q3, _Q1);
  v39 = 12.0;
  if (v48 == 3)
    v40 = 12.0;
  else
    v40 = v46;
  if (v48 != 3)
    v39 = 20.0;
  if (v25)
  {
    v41 = v22 + v22 + v13 + 8.0 + v22 + v22 + v13 + 8.0 + v14 + v14 + *(double *)v38.i64 - v3;
    v42 = v41 * 0.5;
    if (v41 <= 0.0)
      v42 = 0.0;
    v43 = fmax(v22 - v42, 2.0);
    if (v42 > 0.0)
      v22 = v43;
    v44 = v3 - (*(double *)v38.i64 + v14 + v14 + v13 + v22 + v22 + 8.0 + v13 + v22 + v22 + 8.0);
    if (v44 <= 0.0)
      v44 = 0.0;
    v45 = (v13 * 0.2 - v44) * 0.5;
    if (v45 < 0.0)
      v45 = 0.0;
    if (v45 > 0.0)
      v22 = fmax(v22 - v45, 2.0);
  }
  *(double *)v0 = v13;
  *(double *)(v0 + 8) = v22;
  *(_QWORD *)(v0 + 16) = 0x4010000000000000;
  *(double *)(v0 + 24) = v40;
  *(int8x16_t *)(v0 + 32) = v38;
  *(double *)(v0 + 48) = v39;
  *(double *)(v0 + 56) = v14;
  return result;
}

_QWORD *sub_1002D6CF0(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  sub_100154F24(0, 5, 0);
  v2 = 0;
  do
  {
    v3 = *((_BYTE *)&off_1005BEEF0 + v2 + 32);
    v4 = qword_1004E1648[v3];
    sub_1002D6640(a1, v3);
    v5 = v13;
    v6 = v14;
    v7 = v15;
    v8 = v16;
    v10 = _swiftEmptyArrayStorage[2];
    v9 = _swiftEmptyArrayStorage[3];
    if (v10 >= v9 >> 1)
    {
      sub_100154F24(v9 > 1, v10 + 1, 1);
      v8 = v16;
      v7 = v15;
      v6 = v14;
      v5 = v13;
    }
    _swiftEmptyArrayStorage[2] = v10 + 1;
    v11 = &_swiftEmptyArrayStorage[9 * v10];
    v11[4] = v4;
    ++v2;
    *(_OWORD *)(v11 + 5) = v5;
    *(_OWORD *)(v11 + 7) = v6;
    *(_OWORD *)(v11 + 9) = v7;
    *(_OWORD *)(v11 + 11) = v8;
  }
  while (v2 != 5);
  return _swiftEmptyArrayStorage;
}

NSString *sub_1002D6E08@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  UIFontTextStyle v16;
  const UIFontTextStyle *v17;
  UIFontTextStyle v18;
  BOOL v19;
  NSString *v20;
  NSString *result;
  char v22;
  unsigned __int8 v23;
  char v24;

  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  v12 = a2[6];
  v11 = a2[7];
  sub_10005C528((_BYTE *)(a1 + 48), &v22);
  sub_10005C528(&v22, &v23);
  v13 = v23;
  if (v23 != 3)
  {
    if (*(unsigned __int8 *)(a1 + 72) < 2u)
      v14 = 2;
    else
      v14 = 3;
    sub_10005C528(&v22, &v24);
    if (v24 != 3 && (*(_BYTE *)(a1 + 88) & 1) != 0)
    {
      v15 = 2;
      if (*(_QWORD *)(a1 + 56) == 6)
        goto LABEL_8;
    }
    else
    {
      v15 = 0;
      if (*(_QWORD *)(a1 + 56) == 6)
      {
LABEL_8:
        v16 = UIFontTextStyleBody;
        v17 = &UIFontTextStyleSubheadline;
LABEL_12:
        v18 = *v17;
        goto LABEL_13;
      }
    }
    v16 = UIFontTextStyleSubheadline;
    v17 = &UIFontTextStyleCaption1;
    goto LABEL_12;
  }
  v15 = 0;
  v16 = UIFontTextStyleCaption1;
  v14 = 2;
  v18 = UIFontTextStyleCaption1;
LABEL_13:
  v19 = v13 != 3;
  v20 = v16;
  result = v18;
  *(_QWORD *)a3 = v20;
  *(_QWORD *)(a3 + 8) = v14;
  *(_QWORD *)(a3 + 16) = result;
  *(_QWORD *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = v19;
  *(_BYTE *)(a3 + 41) = v19;
  *(_BYTE *)(a3 + 42) = v19;
  *(_QWORD *)(a3 + 48) = v5;
  *(_QWORD *)(a3 + 56) = v6;
  *(_QWORD *)(a3 + 64) = v7;
  *(_QWORD *)(a3 + 72) = v8;
  *(_QWORD *)(a3 + 80) = v9;
  *(_QWORD *)(a3 + 88) = v10;
  *(_QWORD *)(a3 + 96) = v12;
  *(_QWORD *)(a3 + 104) = v11;
  return result;
}

double sub_1002D6F6C@<D0>(_OWORD *a1@<X8>)
{
  void *v2;
  id v3;
  id v4;
  CGFloat bottom;
  CGFloat right;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  double v22;
  CGFloat v23;
  CGFloat v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  char v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  double result;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[4];
  __int128 v45;
  __int128 v46;
  CGFloat v47;
  CGFloat v48;
  char v49;
  id v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;

  v2 = (void *)objc_opt_self(UIDevice);
  v3 = objc_msgSend(v2, "currentDevice");
  v4 = objc_msgSend(v3, "userInterfaceIdiom");

  if (v4 == (id)6)
  {
    v42 = *(_OWORD *)&UIEdgeInsetsZero.top;
    bottom = UIEdgeInsetsZero.bottom;
    right = UIEdgeInsetsZero.right;
    v7 = objc_msgSend(objc_allocWithZone((Class)UITraitCollection), "init");
    v8 = objc_msgSend(v7, "userInterfaceIdiom");
    objc_msgSend(v7, "displayScale");
    v10 = v9;
    v11 = v7;
    v12 = sub_100373B78(v11);
    v13 = UITraitCollection.doc_preferredLayoutSizeCategory.getter();
    v14 = sub_1001463A0();
    UITraitCollection.subscript.getter(&v45, &type metadata for DOCBrowserLayoutConfiguration.Trait, &type metadata for DOCBrowserLayoutConfiguration.Trait, v14);
    v15 = v45;
    v16 = BYTE8(v45);
    v17 = objc_msgSend((id)objc_opt_self(UIFontMetrics), "defaultMetrics");
    objc_msgSend(v17, "scaledValueForValue:compatibleWithTraitCollection:", v11, 1.0);
    v19 = v18;

    v45 = xmmword_1004E1620;
    v46 = v42;
    v47 = bottom;
    v48 = right;
    v49 = 2;
    v50 = v8;
    v51 = v10;
    v52 = v12;
    v53 = v13;
    v54 = v15;
    v55 = v16;
    v56 = v19;
    sub_1002D64B4((uint64_t)&v45, (uint64_t)v44);
  }
  else
  {
    v20 = objc_msgSend(v2, "currentDevice");
    v21 = objc_msgSend(v20, "userInterfaceIdiom");

    if (v21)
      v22 = 1022.0;
    else
      v22 = 718.0;
    v43 = *(_OWORD *)&UIEdgeInsetsZero.top;
    v23 = UIEdgeInsetsZero.bottom;
    v24 = UIEdgeInsetsZero.right;
    v25 = objc_msgSend(objc_allocWithZone((Class)UITraitCollection), "init");
    v26 = objc_msgSend(v25, "userInterfaceIdiom");
    objc_msgSend(v25, "displayScale");
    v28 = v27;
    v29 = v25;
    v30 = sub_100373B78(v29);
    v31 = UITraitCollection.doc_preferredLayoutSizeCategory.getter();
    v32 = sub_1001463A0();
    UITraitCollection.subscript.getter(&v45, &type metadata for DOCBrowserLayoutConfiguration.Trait, &type metadata for DOCBrowserLayoutConfiguration.Trait, v32);
    v33 = v45;
    v34 = BYTE8(v45);
    v35 = objc_msgSend((id)objc_opt_self(UIFontMetrics), "defaultMetrics");
    objc_msgSend(v35, "scaledValueForValue:compatibleWithTraitCollection:", v29, 1.0);
    v37 = v36;

    *(double *)&v45 = v22;
    *((double *)&v45 + 1) = v22;
    v46 = v43;
    v47 = v23;
    v48 = v24;
    v49 = 2;
    v50 = v26;
    v51 = v28;
    v52 = v30;
    v53 = v31;
    v54 = v33;
    v55 = v34;
    v56 = v37;
    sub_1002D6640((uint64_t)&v45, 2);
  }
  result = *(double *)v44;
  v39 = v44[1];
  v40 = v44[2];
  v41 = v44[3];
  *a1 = v44[0];
  a1[1] = v39;
  a1[2] = v40;
  a1[3] = v41;
  return result;
}

__n128 initializeWithCopy for DOCItemCollectionLayoutTraits.GridItemBadgeTraits(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DOCItemCollectionLayoutTraits.GridItemBadgeTraits(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DOCItemCollectionLayoutTraits.GridItemBadgeTraits(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 72) = v3;
  return result;
}

ValueMetadata *_s9ScenariosVMa()
{
  return &_s9ScenariosVN;
}

uint64_t sub_1002D7328(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  id v13;

  v4 = swift_allocObject(&unk_1005DB048, 24, 7);
  *(_QWORD *)(v4 + 16) = a2;
  if ((unint64_t)a1 >> 62)
    goto LABEL_12;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = a2;
  swift_bridgeObjectRetain(a1);
  for (; v5; v5 = _CocoaArrayWrapper.endIndex.getter(v12))
  {
    v7 = 4;
    while (1)
    {
      v8 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1)
         : *(id *)(a1 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v11 = sub_1002EAE30(v8);

      if ((v11 & 1) != 0)
      {
        ++v7;
        if (v10 != v5)
          continue;
      }
      goto LABEL_17;
    }
    __break(1u);
LABEL_12:
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    v13 = a2;
    swift_bridgeObjectRetain(a1);
  }
  v11 = 1;
LABEL_17:
  swift_bridgeObjectRelease(a1);

  swift_release(v4);
  return v11 & 1;
}

Swift::Bool __swiftcall DOCCopyOperation.handlePresendNotifications_asDSCopy()()
{
  char *v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  char *v4;
  char v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  __n128 v13;
  char v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  __n128 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  Swift::Int v50;
  unint64_t v51;
  char v52;
  char v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  id v59;
  unint64_t v60;
  char v61;
  char v62;
  char isUniquelyReferenced_nonNull_native;
  void *v64;
  uint64_t v65;
  Swift::Bool result;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  id v74;
  unint64_t v75;
  id v76[2];

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files16DOCCopyOperation_sourceItems];
  v2 = (unint64_t)v1 >> 62;
  if ((unint64_t)v1 >> 62)
  {
LABEL_61:
    if (v1 < 0)
      v67 = v1;
    else
      v67 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v68 = _CocoaArrayWrapper.endIndex.getter(v67);
    swift_bridgeObjectRelease(v1);
    if (!v68)
      return 0;
  }
  else if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  v3 = *(void **)&v0[OBJC_IVAR____TtC5Files16DOCCopyOperation_destinationFolderItem];
  if ((sub_1002EAE30(v3) & 1) == 0)
    return 0;
  swift_bridgeObjectRetain(v1);
  v4 = v0;
  v5 = sub_1002D7328(v1, v4);
  swift_bridgeObjectRelease(v1);
  if ((v5 & 1) == 0)
    return 0;
  v6 = (void *)objc_opt_self(FPProviderDomain);
  v76[0] = 0;
  v7 = v3;
  v8 = objc_msgSend(v6, "providerDomainForItem:cachePolicy:error:", v7, 3, v76);
  v9 = v76[0];
  if (v8)
  {
    v10 = v8;
    v11 = v76[0];

    v12 = v10;
    v14 = FPProviderDomain.shouldUseDSEnumeration.getter(v13);

    if ((v14 & 1) != 0)
      return 1;
  }
  else
  {
    v15 = v76[0];
    v16 = _convertNSErrorToError(_:)(v9);

    swift_willThrow(v17);
    swift_errorRelease(v16);
  }
  v18 = objc_msgSend(v4, "stitcher");
  if (!v18)
    return 1;
  v19 = v18;
  objc_msgSend(v18, "start");
  v20 = sub_1003F2414((uint64_t)_swiftEmptyArrayStorage);
  if (v2)
  {
    if (v1 < 0)
      v22 = v1;
    else
      v22 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v1, 2);
    v21 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v1);
    v70 = v4;
    if (!v21)
      goto LABEL_58;
  }
  else
  {
    v21 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v1);
    v70 = v4;
    if (!v21)
    {
LABEL_58:
      swift_bridgeObjectRelease(v1);
      v65 = *(_QWORD *)&v70[OBJC_IVAR____TtC5Files16DOCCopyOperation_dsItemIDToPlaceholderID];
      *(_QWORD *)&v70[OBJC_IVAR____TtC5Files16DOCCopyOperation_dsItemIDToPlaceholderID] = v20;
      objc_msgSend(v19, "flush", swift_bridgeObjectRelease(v65).n128_f64[0]);

      return 1;
    }
  }
  v74 = v7;
  v75 = v1 & 0xC000000000000001;
  v23 = 4;
  v71 = v1;
  v72 = v19;
  v73 = v21;
  while (1)
  {
    v0 = (char *)(v23 - 4);
    if (v75)
      v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23 - 4, v1);
    else
      v26 = *(id *)(v1 + 8 * v23);
    v27 = v26;
    v2 = v23 - 3;
    if (__OFADD__(v0, 1))
    {
      __break(1u);
      goto LABEL_61;
    }
    v28 = objc_msgSend(v26, "itemID");
    v29 = objc_msgSend(v7, "itemIdentifier");
    v30 = objc_msgSend(v7, "providerDomainID");
    v31 = objc_msgSend(v19, "createPlaceholderWithCopyOfExistingItem:lastUsageUpdatePolicy:underParent:inProviderDomainID:", v27, 1, v29, v30);

    v33 = v20 & 0xC000000000000001;
    if (v31)
      break;
    if (!v33)
    {
      swift_bridgeObjectRetain(v20);
      v60 = sub_100140C4C((uint64_t)v28);
      v62 = v61;
      swift_bridgeObjectRelease(v20);
      v25 = v73;
      if ((v62 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
        v76[0] = (id)v20;
        v7 = v74;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1002E95F8((uint64_t *)&unk_10064DB50);
          v20 = (uint64_t)v76[0];
        }

        v64 = *(void **)(*(_QWORD *)(v20 + 56) + 8 * v60);
        sub_1002E4790(v60, v20);

        swift_bridgeObjectRelease(0x8000000000000000);
        v19 = v72;
      }
      else
      {

        v7 = v74;
        v19 = v72;
      }
      goto LABEL_22;
    }
    if (v20 < 0)
      v45 = v20;
    else
      v45 = v20 & 0xFFFFFFFFFFFFFF8;
    v46 = v28;
    swift_bridgeObjectRetain(v20);
    v47 = __CocoaDictionary.lookup(_:)(v46, v45);

    if (!v47)
    {

      swift_bridgeObjectRelease(v20);
      v7 = v74;
      goto LABEL_21;
    }
    v48 = swift_unknownObjectRelease(v47);
    v49 = __CocoaDictionary.count.getter(v45, v48);
    v50 = sub_1002DAD50(v45, v49, (uint64_t *)&unk_10064DB50, (unint64_t *)&unk_1006428C0, FPItemID_ptr);
    swift_retain();
    v51 = sub_100140C4C((uint64_t)v46);
    v53 = v52;
    swift_release(v50);
    if ((v53 & 1) == 0)
      goto LABEL_69;

    v54 = *(void **)(*(_QWORD *)(v50 + 56) + 8 * v51);
    sub_1002E4790(v51, v50);

    swift_bridgeObjectRelease(v20);
    v20 = v50;
LABEL_20:
    v7 = v74;
    v19 = v72;
LABEL_21:
    v25 = v73;
LABEL_22:
    ++v23;
    if (v2 == v25)
      goto LABEL_58;
  }
  if (v33)
  {
    if (v20 < 0)
      v34 = v20;
    else
      v34 = v20 & 0xFFFFFFFFFFFFFF8;
    v35 = __CocoaDictionary.count.getter(v34, v32);
    if (__OFADD__(v35, 1))
      goto LABEL_67;
    v20 = sub_1002DAD50(v34, v35 + 1, (uint64_t *)&unk_10064DB50, (unint64_t *)&unk_1006428C0, FPItemID_ptr);
  }
  v36 = swift_isUniquelyReferenced_nonNull_native(v20);
  v76[0] = (id)v20;
  v38 = sub_100140C4C((uint64_t)v28);
  v39 = *(_QWORD *)(v20 + 16);
  v40 = (v37 & 1) == 0;
  v41 = v39 + v40;
  if (__OFADD__(v39, v40))
  {
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
  }
  v42 = v37;
  if (*(_QWORD *)(v20 + 24) >= v41)
  {
    if ((v36 & 1) != 0)
    {
      v20 = (uint64_t)v76[0];
      if ((v37 & 1) == 0)
      {
LABEL_48:
        *(_QWORD *)(v20 + 8 * (v38 >> 6) + 64) |= 1 << v38;
        v55 = 8 * v38;
        *(_QWORD *)(*(_QWORD *)(v20 + 48) + v55) = v28;
        *(_QWORD *)(*(_QWORD *)(v20 + 56) + v55) = v31;
        v56 = *(_QWORD *)(v20 + 16);
        v57 = __OFADD__(v56, 1);
        v58 = v56 + 1;
        if (v57)
          goto LABEL_68;
        *(_QWORD *)(v20 + 16) = v58;
        v59 = v28;
        goto LABEL_19;
      }
    }
    else
    {
      sub_1002E95F8((uint64_t *)&unk_10064DB50);
      v20 = (uint64_t)v76[0];
      if ((v42 & 1) == 0)
        goto LABEL_48;
    }
LABEL_18:
    v24 = *(_QWORD *)(v20 + 56);

    *(_QWORD *)(v24 + 8 * v38) = v31;
LABEL_19:

    swift_bridgeObjectRelease(0x8000000000000000);
    v1 = v71;
    goto LABEL_20;
  }
  sub_1002E13FC(v41, v36, (uint64_t *)&unk_10064DB50);
  v43 = sub_100140C4C((uint64_t)v28);
  if ((v42 & 1) == (v44 & 1))
  {
    v38 = v43;
    v20 = (uint64_t)v76[0];
    if ((v42 & 1) == 0)
      goto LABEL_48;
    goto LABEL_18;
  }
  v69 = sub_10004F2F0(0, (unint64_t *)&unk_1006428C0, FPItemID_ptr);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v69);
  __break(1u);
  return result;
}

Swift::Bool __swiftcall DOCCopyOperation.handleActionMain_asDSCopy()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  sub_1002D7C1C((uint64_t)&v4);
  v1 = v5;
  if (v5)
  {
    sub_1000E85C4(&v4, (uint64_t)v6);
    v2 = sub_10007E7A0(v6, v6[3]);
    sub_100291584(*v2, v0);
    sub_100068588(v6);
  }
  else
  {
    sub_10000CB4C((uint64_t)&v4, (uint64_t *)&unk_10064B420);
  }
  return v1 != 0;
}

Swift::Bool __swiftcall DOCCopyOperation.shouldUseDSCopyEngine()()
{
  char *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files16DOCCopyOperation_sourceItems];
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files16DOCCopyOperation_sourceItems];
    else
      v3 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)&v0[OBJC_IVAR____TtC5Files16DOCCopyOperation_sourceItems]);
    v4 = _CocoaArrayWrapper.endIndex.getter(v3);
    swift_bridgeObjectRelease(v1);
    if (!v4)
      goto LABEL_9;
  }
  else if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_9:
    v2 = 0;
    return v2 & 1;
  }
  if ((sub_1002EAE30(*(void **)&v0[OBJC_IVAR____TtC5Files16DOCCopyOperation_destinationFolderItem]) & 1) == 0)
    goto LABEL_9;
  swift_bridgeObjectRetain(v1);
  v2 = sub_1002D7328(v1, v0);
  swift_bridgeObjectRelease(v1);
  return v2 & 1;
}

void sub_1002D7C1C(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v3;
  char v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Files16DOCCopyOperation_sourceItems];
  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v9 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Files16DOCCopyOperation_sourceItems];
    else
      v9 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)&v1[OBJC_IVAR____TtC5Files16DOCCopyOperation_sourceItems]);
    v10 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v3);
    if (!v10)
      goto LABEL_11;
  }
  else if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_11:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return;
  }
  if ((sub_1002EAE30(*(void **)&v1[OBJC_IVAR____TtC5Files16DOCCopyOperation_destinationFolderItem]) & 1) == 0)
    goto LABEL_11;
  swift_bridgeObjectRetain(v3);
  v4 = sub_1002D7328(v3, v1);
  swift_bridgeObjectRelease(v3);
  if ((v4 & 1) == 0)
    goto LABEL_11;
  v5 = sub_1000BEED8();
  if (v5)
  {
    v6 = v5;
    v7 = type metadata accessor for DOCDSCopyEngineXPCConnection();
    v8 = swift_allocObject(v7, 24, 7);
    *(_QWORD *)(v8 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = &off_1005DAE48;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000038, 0x8000000100524BB0, "Files/FPItemManager+DSCopyEngine.swift", 38, 2, 302, 0);
    __break(1u);
  }
}

uint64_t DOCCopyOperation.transferResults.getter()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  objc_super v7;
  _BYTE v8[24];
  uint64_t v9;

  sub_1002D7C1C((uint64_t)v8);
  v1 = v9;
  sub_10000CB4C((uint64_t)v8, (uint64_t *)&unk_10064B420);
  if (v1)
  {
    v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files16DOCCopyOperation_dsTransferResults];
    swift_bridgeObjectRetain(v2);
  }
  else
  {
    v7.receiver = v0;
    v7.super_class = (Class)type metadata accessor for DOCCopyOperation();
    v3 = objc_msgSendSuper2(&v7, "transferResults");
    if (v3)
    {
      v4 = v3;
      v5 = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
      v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for AnyHashable, v5, &protocol witness table for AnyHashable);

    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t sub_1002D7EBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  dispatch_group_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  double v29;
  id v30;
  void *v31;
  const void *v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t i;
  unint64_t v37;
  char v38;
  unint64_t v39;
  dispatch_group_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  char *v46;
  dispatch_group_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  char *v51;
  int64_t v52;
  _QWORD aBlock[5];
  uint64_t v54;
  _OWORD v55[2];
  uint64_t v56;
  _OWORD v57[2];
  uint64_t v58;
  _OWORD v59[2];
  uint64_t v60;
  NSURL v61;

  v3 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v3);
  v5 = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v51 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return 0;
  v45[1] = v1;
  sub_1002EB7A8(a1);
  v9 = swift_allocObject(&unk_1005DAF30, 24, 7);
  v10 = sub_1003F2768((uint64_t)_swiftEmptyArrayStorage);
  v48 = v9;
  *(_QWORD *)(v9 + 16) = v10;
  v45[0] = v9 + 16;
  v47 = dispatch_group_create();
  v11 = a1 + 64;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(a1 + 64);
  v52 = (unint64_t)(v12 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v16 = 0;
  v46 = v5;
  if (v14)
    goto LABEL_31;
LABEL_7:
  v33 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    if (v33 < v52)
    {
      v34 = *(_QWORD *)(v11 + 8 * v33);
      ++v16;
      if (v34)
        goto LABEL_24;
      v16 = v33 + 1;
      if (v33 + 1 < v52)
      {
        v34 = *(_QWORD *)(v11 + 8 * v16);
        if (v34)
          goto LABEL_24;
        v16 = v33 + 2;
        if (v33 + 2 < v52)
        {
          v34 = *(_QWORD *)(v11 + 8 * v16);
          if (v34)
            goto LABEL_24;
          v16 = v33 + 3;
          if (v33 + 3 < v52)
          {
            v34 = *(_QWORD *)(v11 + 8 * v16);
            if (v34)
              goto LABEL_24;
            v16 = v33 + 4;
            if (v33 + 4 < v52)
            {
              v34 = *(_QWORD *)(v11 + 8 * v16);
              if (!v34)
              {
                v35 = v33 + 5;
                if (v35 < v52)
                {
                  v34 = *(_QWORD *)(v11 + 8 * v35);
                  if (v34)
                  {
                    v16 = v35;
                    goto LABEL_24;
                  }
                  while (1)
                  {
                    v16 = v35 + 1;
                    if (__OFADD__(v35, 1))
                      goto LABEL_36;
                    if (v16 >= v52)
                      goto LABEL_32;
                    v34 = *(_QWORD *)(v11 + 8 * v16);
                    ++v35;
                    if (v34)
                      goto LABEL_24;
                  }
                }
                goto LABEL_32;
              }
LABEL_24:
              v14 = (v34 - 1) & v34;
              for (i = __clz(__rbit64(v34)) + (v16 << 6); ; i = v39 | (v16 << 6))
              {
                sub_10006777C(*(_QWORD *)(a1 + 48) + 40 * i, (uint64_t)v59);
                v58 = v60;
                v57[0] = v59[0];
                v57[1] = v59[1];
                if (*(_QWORD *)(a1 + 16) && (v37 = sub_100067654((uint64_t)v57), (v38 & 1) != 0))
                {
                  (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v5, *(_QWORD *)(a1 + 56) + *(_QWORD *)(v7 + 72) * v37, v6);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
                  {
                    (*(void (**)(void))(v7 + 32))();
                    v17 = v47;
                    dispatch_group_enter(v47);
                    v50 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
                    URL._bridgeToObjectiveC()(&v61);
                    v49 = v18;
                    sub_10006777C((uint64_t)v57, (uint64_t)v55);
                    v19 = swift_allocObject(&unk_1005DAF58, 72, 7);
                    v20 = v7;
                    v21 = v48;
                    *(_QWORD *)(v19 + 16) = v17;
                    *(_QWORD *)(v19 + 24) = v21;
                    v22 = v55[1];
                    *(_OWORD *)(v19 + 32) = v55[0];
                    *(_OWORD *)(v19 + 48) = v22;
                    *(_QWORD *)(v19 + 64) = v56;
                    aBlock[4] = sub_1002EBF0C;
                    v54 = v19;
                    aBlock[0] = _NSConcreteStackBlock;
                    aBlock[1] = 1107296256;
                    aBlock[2] = sub_100083540;
                    aBlock[3] = &unk_1005DAF70;
                    v23 = v11;
                    v24 = _Block_copy(aBlock);
                    v25 = v6;
                    v26 = v54;
                    v27 = v17;
                    v5 = v46;
                    v7 = v20;
                    swift_retain();
                    v28 = v26;
                    v6 = v25;
                    *(_QWORD *)&v29 = swift_release(v28).n128_u64[0];
                    v30 = v50;
                    v31 = v49;
                    objc_msgSend(v50, "fetchItemForURL:completionHandler:", v49, v24, v29);
                    v32 = v24;
                    v11 = v23;
                    _Block_release(v32);

                    (*(void (**)(char *, uint64_t))(v7 + 8))(v51, v6);
                    result = sub_100067748((uint64_t)v57);
                    if (!v14)
                      goto LABEL_7;
                    goto LABEL_31;
                  }
                }
                else
                {
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
                }
                sub_100067748((uint64_t)v57);
                result = sub_10000CB4C((uint64_t)v5, &qword_100643470);
                if (!v14)
                  goto LABEL_7;
LABEL_31:
                v39 = __clz(__rbit64(v14));
                v14 &= v14 - 1;
              }
            }
          }
        }
      }
    }
LABEL_32:
    swift_release(a1);
    v40 = v47;
    OS_dispatch_group.wait()();
    swift_beginAccess(v45[0], aBlock, 0, 0);
    v41 = v48;
    v42 = *(_QWORD *)(v48 + 16);
    v43 = swift_bridgeObjectRetain(v42);
    sub_1002D84DC(v43);
    swift_bridgeObjectRelease(v42);

    v44 = *(_QWORD *)(v41 + 16);
    swift_bridgeObjectRetain(v44);
    swift_release(v41);
    return v44;
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void sub_1002D8400(void *a1, uint64_t a2, dispatch_group_t group, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  id v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE v14[40];

  if (!a1 || a2)
  {
    dispatch_group_leave(group);
  }
  else
  {
    v8 = a4 + 16;
    sub_10006777C(a5, (uint64_t)v14);
    swift_beginAccess(v8, v13, 33, 0);
    v9 = a1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a4 + 16));
    v12 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = 0x8000000000000000;
    sub_10035782C((uint64_t)v9, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
    v11 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = v12;
    swift_bridgeObjectRelease(v11);
    sub_100067748((uint64_t)v14);
    swift_endAccess(v13);

    dispatch_group_leave(group);
  }
}

void sub_1002D84DC(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  void **v47;
  uint64_t v48;
  void *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  id v55;
  id v56;
  id v57;
  void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  unint64_t v87;
  _BYTE v88[40];
  char v89[32];

  v3 = sub_10006922C((uint64_t *)&unk_100643900);
  __chkstk_darwin(v3);
  v5 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v79 = *(_QWORD *)(v6 - 8);
  v80 = v6;
  __chkstk_darwin(v6);
  v76 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v73 = (char *)&v69 - v9;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v78 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v85 = (char *)&v69 - v14;
  v15 = sub_10006922C(&qword_10064DA40);
  __chkstk_darwin(v15);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v69 - v19;
  v81 = v1;
  v21 = &v1[OBJC_IVAR____TtC5Files16DOCCopyOperation_dsSourceItemToURL];
  swift_beginAccess(v21, v89, 0, 0);
  v22 = *(_QWORD *)v21;
  if (*(_QWORD *)v21)
  {
    v86 = v20;
    v75 = v5;
    v23 = *(_QWORD *)(v22 + 64);
    v77 = v22 + 64;
    v24 = 1 << *(_BYTE *)(v22 + 32);
    v25 = -1;
    if (v24 < 64)
      v25 = ~(-1 << v24);
    v26 = v25 & v23;
    v27 = (unint64_t)(v24 + 63) >> 6;
    v70 = v27 - 1;
    v28 = swift_bridgeObjectRetain(v22);
    v29 = 0;
    v82 = v27;
    v72 = v27 - 5;
    v83 = v28;
    v71 = v28 + 104;
    v30 = (uint64_t *)&unk_10064DA48;
    v84 = a1;
    v31 = v78;
    while (!v26)
    {
      v39 = v29 + 1;
      if (__OFADD__(v29, 1))
      {
        __break(1u);
        return;
      }
      if (v39 >= v82)
      {
        v41 = v29;
      }
      else
      {
        v40 = *(_QWORD *)(v77 + 8 * v39);
        if (v40)
          goto LABEL_13;
        v41 = v29 + 1;
        if ((uint64_t)(v29 + 2) < v82)
        {
          v40 = *(_QWORD *)(v77 + 8 * (v29 + 2));
          if (v40)
          {
            v39 = v29 + 2;
            goto LABEL_13;
          }
          v41 = v29 + 2;
          if ((uint64_t)(v29 + 3) < v82)
          {
            v40 = *(_QWORD *)(v77 + 8 * (v29 + 3));
            if (v40)
            {
              v39 = v29 + 3;
LABEL_13:
              v26 = (v40 - 1) & v40;
              v33 = __clz(__rbit64(v40)) + (v39 << 6);
              v87 = v39;
LABEL_9:
              v34 = *(_QWORD *)(v83 + 56);
              v35 = *(void **)(*(_QWORD *)(v83 + 48) + 8 * v33);
              *(_QWORD *)v17 = v35;
              v36 = v34 + *(_QWORD *)(v11 + 72) * v33;
              v37 = sub_10006922C(v30);
              (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(&v17[*(int *)(v37 + 48)], v36, v10);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v17, 0, 1, v37);
              v38 = v35;
              a1 = v84;
              goto LABEL_16;
            }
            v39 = v29 + 4;
            v41 = v29 + 3;
            if ((uint64_t)(v29 + 4) < v82)
            {
              v40 = *(_QWORD *)(v77 + 8 * v39);
              if (v40)
                goto LABEL_13;
              while (v72 != v29)
              {
                v40 = *(_QWORD *)(v71 + 8 * v29++);
                if (v40)
                {
                  v39 = v29 + 4;
                  goto LABEL_13;
                }
              }
              v41 = v70;
            }
          }
        }
      }
      v42 = sub_10006922C(v30);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v17, 1, 1, v42);
      v26 = 0;
      v87 = v41;
LABEL_16:
      v43 = v17;
      v44 = (uint64_t)v86;
      sub_100070EDC((uint64_t)v17, (uint64_t)v86, &qword_10064DA40);
      v45 = v30;
      v46 = v30;
      v47 = (void **)v44;
      v48 = sub_10006922C(v46);
      if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 48))(v47, 1, v48) == 1)
      {
        swift_release(v83);
        return;
      }
      v49 = *v47;
      v50 = (char *)v47 + *(int *)(v48 + 48);
      v51 = v85;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v85, v50, v10);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v31, v51, v10);
      v52 = sub_10005A360(&qword_10064D980, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      AnyHashable.init<A>(_:)(v31, v10, v52);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v51, v10);
      if (!*(_QWORD *)(a1 + 16) || (v53 = sub_100067654((uint64_t)v88), (v54 & 1) == 0))
      {
        sub_100067748((uint64_t)v88);

        goto LABEL_6;
      }
      v55 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v53);
      sub_100067748((uint64_t)v88);
      v56 = objc_msgSend(v81, "lastUsageUpdatePolicy");
      if (v56 == (id)2)
      {
        v67 = v76;
        Date.init()(2);
        FPItem.setLastOpenDate(_:delay:)(v67, 0.0);
        v68 = v67;
        v31 = v78;
        (*(void (**)(char *, uint64_t))(v79 + 8))(v68, v80);
LABEL_25:

        goto LABEL_6;
      }
      if (v56 != (id)1)
        goto LABEL_25;
      v57 = objc_msgSend(v49, "lastUsedDate");
      if (!v57)
      {
        v61 = (uint64_t)v75;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v79 + 56))(v75, 1, 1, v80);
LABEL_30:

        sub_10000CB4C(v61, (uint64_t *)&unk_100643900);
        goto LABEL_31;
      }
      v58 = v57;
      v59 = v76;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v57);

      v60 = v79;
      v61 = (uint64_t)v75;
      v62 = v59;
      v63 = v80;
      v74 = *(void (**)(char *, char *, uint64_t))(v79 + 32);
      v74(v75, v62, v80);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v60 + 56))(v61, 0, 1, v63);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v61, 1, v63) == 1)
        goto LABEL_30;
      v64 = v73;
      v65 = v61;
      v66 = v80;
      v74(v73, (char *)v65, v80);
      FPItem.setLastOpenDate(_:delay:)(v64, 0.0);

      (*(void (**)(char *, uint64_t))(v79 + 8))(v64, v66);
LABEL_31:
      a1 = v84;
      v31 = v78;
LABEL_6:
      v30 = v45;
      v17 = v43;
      v29 = v87;
    }
    v32 = __clz(__rbit64(v26));
    v26 &= v26 - 1;
    v87 = v29;
    v33 = v32 | (v29 << 6);
    goto LABEL_9;
  }
}

uint64_t sub_1002D8B44(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  __n128 v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD);
  _QWORD *v16;
  id v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  __n128 v20;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[32];

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10028DB10((uint64_t)v24);
  if (*v13)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a2, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    v12.n128_f64[0] = sub_10043B5B8((uint64_t)v10, a1);
  }
  ((void (*)(_BYTE *, _QWORD, __n128))v11)(v24, 0, v12);
  v15 = sub_10028DB54((uint64_t)v24);
  if (*v14)
  {
    v16 = v14;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
    v17 = a1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v16);
    v23 = *v16;
    *v16 = 0x8000000000000000;
    sub_10035798C((uint64_t)v17, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
    v19 = *v16;
    *v16 = v23;
    v20 = swift_bridgeObjectRelease(v19);
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v20);
  }
  return ((uint64_t (*)(_BYTE *, _QWORD))v15)(v24, 0);
}

Swift::Int sub_1002D8CF0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  id v32;
  uint64_t v33;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v35 = a3;
  v11 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v35 - v15;
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_projectBox(a6);
  sub_1002320B8(a1, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    v22 = (uint64_t *)(a5 + 16);
    v23 = sub_10000CB4C((uint64_t)v16, &qword_100643470);
    v24 = *(id *)DOCLog.UI.unsafeMutableAddressor(v23);
    v25 = static os_log_type_t.error.getter(v24);
    v26 = sub_10006922C((uint64_t *)&unk_100644560);
    v27 = swift_allocObject(v26, 152, 7);
    *(_OWORD *)(v27 + 16) = xmmword_1004D9880;
    *(_QWORD *)(v27 + 56) = &type metadata for String;
    v28 = sub_10006A638();
    *(_QWORD *)(v27 + 64) = v28;
    *(_QWORD *)(v27 + 32) = 0xD000000000000018;
    *(_QWORD *)(v27 + 40) = 0x8000000100520F20;
    *(_QWORD *)(v27 + 96) = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    *(_QWORD *)(v27 + 104) = sub_100083500((unint64_t *)&qword_100653000, (unint64_t *)&qword_1006419B0, FPItem_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v27 + 72) = a4;
    if (a2)
    {
      v29 = a4;
      v30 = _convertErrorToNSError(_:)(a2);
      v37 = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
      v38 = sub_100083500((unint64_t *)&qword_1006448B0, (unint64_t *)&qword_100644570, NSError_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
      *(_QWORD *)&v36 = v30;
      sub_1000E85C4(&v36, v27 + 112);
    }
    else
    {
      *(_QWORD *)(v27 + 136) = &type metadata for String;
      *(_QWORD *)(v27 + 144) = v28;
      strcpy((char *)(v27 + 112), "Unknown error");
      *(_WORD *)(v27 + 126) = -4864;
      v32 = a4;
    }
    os_log(_:dso:log:type:_:)("%@: Unable to fetch URL for destination FPItem %@, %@", 53, 2, &_mh_execute_header, v24, v25, v27, v35);

    swift_bridgeObjectRelease(v27);
    swift_beginAccess(v22, &v36, 1, 0);
    v33 = *v22;
    *v22 = a2;
    swift_errorRetain(a2);
    swift_errorRelease(v33);
  }
  else
  {
    v31 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v31(v20, v16, v17);
    v31(v13, v20, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v13, 0, 1, v17);
    swift_beginAccess(v21, &v36, 1, 0);
    sub_100118024((uint64_t)v13, v21);
  }
  return OS_dispatch_semaphore.signal()();
}

void sub_1002D903C(void *a1, uint64_t a2, void *a3, NSObject *a4, uint64_t a5, void *a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  id v23;
  void *v24;
  void (*v25)(char *, char *, uint64_t);
  unint64_t *v26;
  unint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  id v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  _QWORD *v37;
  NSObject *v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD aBlock[5];
  _QWORD *v47;

  v42 = a5;
  v43 = a6;
  v45 = a3;
  v9 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v42 - v17;
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v42 - v21;
  v44 = a1;
  v23 = objc_msgSend(a1, "fileURL", v20);
  if (!v23)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    goto LABEL_9;
  }
  v24 = v23;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v23);

  v25 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v25(v11, v18, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
LABEL_9:
    sub_10000CB4C((uint64_t)v11, &qword_100643470);
    dispatch_group_enter(a4);
    v31 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
    v32 = (_QWORD *)swift_allocObject(&unk_1005DAFA8, 64, 7);
    v34 = v43;
    v33 = v44;
    v32[2] = a4;
    v32[3] = v33;
    v32[4] = v42;
    v32[5] = v34;
    v35 = v45;
    v32[6] = a2;
    v32[7] = v35;
    aBlock[4] = sub_1002EBF64;
    v47 = v32;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100175118;
    aBlock[3] = &unk_1005DAFC0;
    v36 = _Block_copy(aBlock);
    v37 = v47;
    v38 = a4;
    v39 = v33;
    swift_retain();
    v40 = v34;
    swift_retain();
    v41 = v35;
    objc_msgSend(v31, "fetchURLForItem:completionHandler:", v39, v36, swift_release(v37).n128_f64[0]);
    _Block_release(v36);

    return;
  }
  v26 = (unint64_t *)(a2 + 16);
  v25(v22, v11, v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v22, v12);
  swift_beginAccess(v26, aBlock, 33, 0);
  v27 = *v26;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v26);
  *v26 = v27;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v27 = sub_100153AD4(0, *(_QWORD *)(v27 + 16) + 1, 1, v27);
    *v26 = v27;
  }
  v30 = *(_QWORD *)(v27 + 16);
  v29 = *(_QWORD *)(v27 + 24);
  if (v30 >= v29 >> 1)
  {
    v27 = sub_100153AD4(v29 > 1, v30 + 1, 1, v27);
    *v26 = v27;
  }
  *(_QWORD *)(v27 + 16) = v30 + 1;
  v25((char *)(v27+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v30), v15, v12);
  swift_endAccess(aBlock);
  sub_1002D8B44(v44, (uint64_t)v22);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v22, v12);
}

void sub_1002D93C8(uint64_t a1, uint64_t a2, NSObject *a3, void *a4, char *a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  dispatch_group_t v45;
  void *v46;
  id v47;
  id v48;
  NSObject *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  char *v61;
  uint64_t v62;
  void *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  dispatch_group_t v69;
  void *v70;
  __int128 aBlock;
  uint64_t (*v72)(uint64_t);
  void *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[4];

  v62 = a7;
  v63 = a8;
  v61 = a5;
  v69 = a3;
  v70 = a4;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v68 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v67 = (char *)v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v65 = *(_QWORD *)(v13 - 8);
  v66 = v13;
  __chkstk_darwin(v13);
  v64 = (char *)v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v15);
  v17 = (char *)v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  __chkstk_darwin(v18);
  v21 = (char *)v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)v60 - v23;
  sub_1002320B8(a1, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    v25 = (uint64_t *)(v61 + 16);
    sub_10000CB4C((uint64_t)v17, &qword_100643470);
    dispatch_group_leave(v69);
    v27 = *(id *)DOCLog.UI.unsafeMutableAddressor(v26);
    v28 = static os_log_type_t.error.getter(v27);
    v29 = sub_10006922C((uint64_t *)&unk_100644560);
    v30 = swift_allocObject(v29, 152, 7);
    *(_OWORD *)(v30 + 16) = xmmword_1004D9880;
    *(_QWORD *)(v30 + 56) = &type metadata for String;
    v31 = sub_10006A638();
    *(_QWORD *)(v30 + 64) = v31;
    *(_QWORD *)(v30 + 32) = 0xD000000000000018;
    *(_QWORD *)(v30 + 40) = 0x8000000100520F20;
    *(_QWORD *)(v30 + 96) = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    *(_QWORD *)(v30 + 104) = sub_100083500((unint64_t *)&qword_100653000, (unint64_t *)&qword_1006419B0, FPItem_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    v32 = v70;
    *(_QWORD *)(v30 + 72) = v70;
    v33 = a2;
    if (a2)
    {
      v34 = v32;
      v35 = _convertErrorToNSError(_:)(a2);
      v73 = (void *)sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
      v74 = sub_100083500((unint64_t *)&qword_1006448B0, (unint64_t *)&qword_100644570, NSError_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
      *(_QWORD *)&aBlock = v35;
      sub_1000E85C4(&aBlock, v30 + 112);
    }
    else
    {
      *(_QWORD *)(v30 + 136) = &type metadata for String;
      *(_QWORD *)(v30 + 144) = v31;
      strcpy((char *)(v30 + 112), "Unknown error");
      *(_WORD *)(v30 + 126) = -4864;
      v56 = v32;
    }
    os_log(_:dso:log:type:_:)("%@: Unable to fetch URL for source FPItem %@, %@", 48, 2, &_mh_execute_header, v27, v28, v30);

    swift_bridgeObjectRelease(v30);
    swift_beginAccess(v25, &aBlock, 0, 0);
    v57 = *v25;
    v58 = *v25;
    if (!*v25)
    {
      swift_errorRetain(v33);
      v58 = v33;
    }
    swift_beginAccess(v25, v76, 1, 0);
    v59 = *v25;
    *v25 = v58;
    swift_errorRetain(v57);
    swift_errorRelease(v59);
  }
  else
  {
    v36 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    v36(v24, v17, v18);
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, v24, v18);
    v37 = *(unsigned __int8 *)(v19 + 80);
    v38 = (v37 + 24) & ~v37;
    v39 = (v20 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
    v60[0] = v11;
    v60[1] = a6;
    v40 = (v39 + 15) & 0xFFFFFFFFFFFFFFF8;
    v41 = (v40 + 15) & 0xFFFFFFFFFFFFFFF8;
    v42 = swift_allocObject(&unk_1005DAFF8, v41 + 8, v37 | 7);
    v61 = v24;
    *(_QWORD *)(v42 + 16) = v62;
    v36((char *)(v42 + v38), v21, v18);
    v43 = v63;
    *(_QWORD *)(v42 + v39) = v63;
    v44 = v70;
    *(_QWORD *)(v42 + v40) = v70;
    v45 = v69;
    *(_QWORD *)(v42 + v41) = v69;
    v74 = (uint64_t)sub_1002EC02C;
    v75 = v42;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v72 = sub_10004A82C;
    v73 = &unk_1005DB010;
    v46 = _Block_copy(&aBlock);
    swift_retain();
    v47 = v43;
    v48 = v44;
    v49 = v45;
    v50 = v64;
    static DispatchQoS.unspecified.getter(v49);
    v76[0] = _swiftEmptyArrayStorage;
    v51 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v52 = sub_10006922C((uint64_t *)&unk_100647540);
    v53 = sub_1000791AC();
    v54 = v67;
    v55 = v60[0];
    dispatch thunk of SetAlgebra.init<A>(_:)(v76, v52, v53, v60[0], v51);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v50, v54, v46);
    _Block_release(v46);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v54, v55);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v50, v66);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v61, v18);
    swift_release(v75);
  }
}

void sub_1002D9928(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, NSObject *a5)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t *v13;
  unint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  dispatch_group_t v18;
  _BYTE v19[24];

  v18 = a5;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = (unint64_t *)(a1 + 16);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v9 + 16))(v12, a2, v8, v10);
  swift_beginAccess(a1 + 16, v19, 33, 0);
  v14 = *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
  *(_QWORD *)(a1 + 16) = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v14 = sub_100153AD4(0, *(_QWORD *)(v14 + 16) + 1, 1, v14);
    *v13 = v14;
  }
  v17 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(v14 + 24);
  if (v17 >= v16 >> 1)
  {
    v14 = sub_100153AD4(v16 > 1, v17 + 1, 1, v14);
    *v13 = v14;
  }
  *(_QWORD *)(v14 + 16) = v17 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v9 + 32))(v14+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v17, v12, v8);
  swift_endAccess(v19);
  sub_1002D8B44(a4, a2);
  dispatch_group_leave(v18);
}

void sub_1002D9A94(int a1, int a2, unsigned __int8 *a3)
{
  uint64_t v3;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  Class isa;
  NSURL *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  unsigned __int8 *v17;
  double v18;
  unsigned __int8 v19;
  id v20;
  void *v21;
  uint64_t v22;
  id aBlock[5];
  uint64_t v24;

  v5 = objc_msgSend(a3, "shouldBounceOnCollision");
  if ((_DWORD)v5)
  {
    v6 = objc_msgSend(objc_allocWithZone((Class)DSConflictStrategy), "init");
    objc_msgSend(v6, "setType:", 0);
  }
  else
  {
    v6 = sub_1002EB340((uint64_t)v5);
  }
  v7 = a3[OBJC_IVAR____TtC5Files16DOCCopyOperation_isDuplication];
  v8 = *(void **)(v3 + 16);
  type metadata accessor for URL(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  URL._bridgeToObjectiveC()(v10);
  v12 = v11;
  v13 = swift_allocObject(&unk_1005DAE68, 24, 7);
  *(_QWORD *)(v13 + 16) = a3;
  aBlock[4] = sub_1002EB76C;
  v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1002DA704;
  aBlock[3] = &unk_1005DAE80;
  v14 = _Block_copy(aBlock);
  v15 = v24;
  v16 = v6;
  v17 = a3;
  *(_QWORD *)&v18 = swift_release(v15).n128_u64[0];
  aBlock[0] = 0;
  v19 = objc_msgSend(v8, "copyItemsAtURLs:toURL:options:conflictStrategy:receiveTargets:error:", isa, v12, v7, v16, v14, aBlock, v18);
  _Block_release(v14);

  v20 = aBlock[0];
  if ((v19 & 1) == 0)
  {
    v21 = v20;
    _convertNSErrorToError(_:)(v20);

    swift_willThrow(v22);
  }

}

void sub_1002D9C78(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  void *v28;
  int v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  unint64_t v32;
  char v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  Swift::Int v40;
  uint64_t v41;
  id v42;
  id v43;
  __n128 v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  char v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  id v64;
  void *v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  unint64_t v71;
  char v72;
  id v73;
  void *v74;
  char *v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  int64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  char v96[24];
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  void *v100;

  v4 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v4);
  v6 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject(&unk_1005DAEB8, 24, 7);
  v12 = sub_1003F277C((uint64_t)_swiftEmptyArrayStorage);
  v91 = v11;
  *(_QWORD *)(v11 + 16) = v12;
  sub_100433674(a1);
  v14 = v13;
  v15 = sub_1002D7EBC(v13);
  swift_bridgeObjectRelease(v14);
  v16 = *(_QWORD *)&a2[OBJC_IVAR____TtC5Files16DOCCopyOperation_dsTransferResults];
  *(_QWORD *)&a2[OBJC_IVAR____TtC5Files16DOCCopyOperation_dsTransferResults] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  if (!v15)
    goto LABEL_79;
  if (!*(_QWORD *)(v15 + 16))
  {
    v17 = objc_msgSend((id)objc_opt_self(DOCUndoManager), "shared");
    objc_msgSend(v17, "removeAllActionsWithTarget:", a2);

  }
  v18 = *(_QWORD *)(v15 + 64);
  v81 = v15 + 64;
  v19 = 1 << *(_BYTE *)(v15 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v84 = OBJC_IVAR____TtC5Files16DOCCopyOperation_dsItemIDToPlaceholderID;
  v89 = &a2[OBJC_IVAR____TtC5Files16DOCCopyOperation_dsSourceURLToItem];
  swift_beginAccess(&a2[OBJC_IVAR____TtC5Files16DOCCopyOperation_dsSourceURLToItem], v96, 0, 0);
  v90 = 0;
  v83 = (unint64_t)(v19 + 63) >> 6;
  v79 = v83 - 1;
  v80 = (char *)&type metadata for Swift.AnyObject + 8;
  v82 = a2;
  v87 = v6;
  v88 = v8;
  v86 = v10;
  v85 = v15;
  if (!v21)
    goto LABEL_9;
LABEL_7:
  v22 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v23 = v22 | (v90 << 6);
LABEL_8:
  sub_10006777C(*(_QWORD *)(v15 + 48) + 40 * v23, (uint64_t)&v93);
  *((_QWORD *)&v95 + 1) = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v23);
  v24 = *((id *)&v95 + 1);
  while (1)
  {
    sub_100070EDC((uint64_t)&v93, (uint64_t)&v97, (uint64_t *)&unk_10064DA18);
    if (!*((_QWORD *)&v98 + 1))
      goto LABEL_78;
    v93 = v97;
    v94 = v98;
    v28 = v100;
    *(_QWORD *)&v95 = v99;
    v29 = swift_dynamicCast(v6, &v93, &type metadata for AnyHashable, v7, 6);
    v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    if (!v29)
    {
      v30(v6, 1, 1, v7);
LABEL_75:
      swift_release(v15);

      sub_10000CB4C((uint64_t)v6, &qword_100643470);
      goto LABEL_79;
    }
    v30(v6, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      goto LABEL_75;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    v31 = *(_QWORD *)v89;
    if (!*(_QWORD *)v89 || !*(_QWORD *)(v31 + 16))
    {

LABEL_77:
      (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v10, v7, v76);
LABEL_78:
      swift_release(v15);
LABEL_79:
      v77 = v91;
      sub_1002DA50C(a2, v91);
      swift_release(v77);
      return;
    }
    swift_bridgeObjectRetain(*(_QWORD *)v89);
    v32 = sub_100140624((uint64_t)v10);
    if ((v33 & 1) == 0)
    {

      v76 = swift_bridgeObjectRelease(v31);
      goto LABEL_77;
    }
    v34 = *(id *)(*(_QWORD *)(v31 + 56) + 8 * v32);
    swift_bridgeObjectRelease(v31);
    v35 = (void *)objc_opt_self(FPActionOperationLocator);
    v36 = objc_msgSend(v35, "locatorForItem:", v34);
    if (v36)
    {
      v37 = v36;
      v38 = objc_msgSend(v35, "locatorForItem:", v28);
      if (v38)
      {
        v39 = v38;
        v40 = *(_QWORD *)(v91 + 16);
        if ((v40 & 0xC000000000000001) != 0)
        {
          if (v40 < 0)
            v41 = *(_QWORD *)(v91 + 16);
          else
            v41 = v40 & 0xFFFFFFFFFFFFFF8;
          v42 = v37;
          v43 = v39;
          v45 = __CocoaDictionary.count.getter(v41, v44);
          if (__OFADD__(v45, 1))
            goto LABEL_82;
          v40 = sub_1002DAD50(v41, v45 + 1, (uint64_t *)&unk_10064DA28, &qword_100644410, FPActionOperationLocator_ptr);
        }
        else
        {
          v46 = v37;
          v47 = v39;
        }
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
        *(_QWORD *)&v93 = v40;
        *(_QWORD *)(v91 + 16) = 0x8000000000000000;
        v50 = sub_100140E80((uint64_t)v37);
        v51 = *(_QWORD *)(v40 + 16);
        v52 = (v49 & 1) == 0;
        v53 = v51 + v52;
        if (__OFADD__(v51, v52))
          goto LABEL_81;
        v54 = v49;
        if (*(_QWORD *)(v40 + 24) >= v53)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_1002E95F8((uint64_t *)&unk_10064DA28);
        }
        else
        {
          sub_1002E13FC(v53, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10064DA28);
          v55 = sub_100140E80((uint64_t)v37);
          if ((v54 & 1) != (v56 & 1))
            goto LABEL_85;
          v50 = v55;
        }
        v57 = (_QWORD *)v93;
        if ((v54 & 1) != 0)
        {
          v58 = *(_QWORD *)(v93 + 56);

          *(_QWORD *)(v58 + 8 * v50) = v39;
        }
        else
        {
          *(_QWORD *)(v93 + 8 * (v50 >> 6) + 64) |= 1 << v50;
          *(_QWORD *)(v57[6] + 8 * v50) = v37;
          *(_QWORD *)(v57[7] + 8 * v50) = v39;
          v59 = v57[2];
          v60 = __OFADD__(v59, 1);
          v61 = v59 + 1;
          if (v60)
            goto LABEL_83;
          v57[2] = v61;
          v62 = v37;
        }
        *(_QWORD *)(v91 + 16) = v57;

        swift_bridgeObjectRelease(0x8000000000000000);
        a2 = v82;
        v8 = v88;
      }
      else
      {

      }
    }
    v63 = *(_QWORD *)&a2[v84];
    if (!v63)
      goto LABEL_68;
    swift_bridgeObjectRetain(*(_QWORD *)&a2[v84]);
    v64 = objc_msgSend(v34, "itemID");
    v65 = v64;
    if ((v63 & 0xC000000000000001) != 0)
    {
      if (v63 >= 0)
        v66 = v63 & 0xFFFFFFFFFFFFFF8;
      else
        v66 = v63;
      v67 = v64;
      v68 = __CocoaDictionary.lookup(_:)(v67, v66);

      if (!v68)
      {
LABEL_67:
        swift_bridgeObjectRelease(v63);

        v8 = v88;
LABEL_68:

LABEL_69:
        v10 = v86;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v86, v7);
        goto LABEL_70;
      }
      v92 = v68;
      v69 = sub_10004F2F0(0, (unint64_t *)&unk_1006428C0, FPItemID_ptr);
      swift_unknownObjectRetain(v68);
      swift_dynamicCast(&v93, &v92, v80, v69, 7);
      v70 = (id)v93;
      swift_unknownObjectRelease(v68);
    }
    else
    {
      if (!*(_QWORD *)(v63 + 16))
        goto LABEL_67;
      v71 = sub_100140C4C((uint64_t)v64);
      if ((v72 & 1) == 0)
        goto LABEL_67;
      v70 = *(id *)(*(_QWORD *)(v63 + 56) + 8 * v71);
    }
    swift_bridgeObjectRelease(v63);

    v8 = v88;
    if (!v70)
      goto LABEL_68;
    v73 = objc_msgSend(a2, "stitcher");
    if (v73)
    {
      v74 = v73;
      objc_msgSend(v73, "replacePlaceholderWithID:withItem:", v70, v28);

      goto LABEL_69;
    }
    v75 = v86;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v86, v7);

    v10 = v75;
LABEL_70:
    v6 = v87;
    v15 = v85;
    if (v21)
      goto LABEL_7;
LABEL_9:
    v25 = v90 + 1;
    if (__OFADD__(v90, 1))
      break;
    if (v25 < v83)
    {
      v26 = *(_QWORD *)(v81 + 8 * v25);
      if (v26)
        goto LABEL_12;
      v27 = v90 + 2;
      ++v90;
      if (v25 + 1 < v83)
      {
        v26 = *(_QWORD *)(v81 + 8 * v27);
        if (v26)
          goto LABEL_15;
        v90 = v25 + 1;
        if (v25 + 2 < v83)
        {
          v26 = *(_QWORD *)(v81 + 8 * (v25 + 2));
          if (v26)
          {
            v25 += 2;
            goto LABEL_12;
          }
          v27 = v25 + 3;
          v90 = v25 + 2;
          if (v25 + 3 < v83)
          {
            v26 = *(_QWORD *)(v81 + 8 * v27);
            if (!v26)
            {
              while (1)
              {
                v25 = v27 + 1;
                if (__OFADD__(v27, 1))
                  goto LABEL_84;
                if (v25 >= v83)
                {
                  v90 = v79;
                  goto LABEL_26;
                }
                v26 = *(_QWORD *)(v81 + 8 * v25);
                ++v27;
                if (v26)
                  goto LABEL_12;
              }
            }
LABEL_15:
            v25 = v27;
LABEL_12:
            v21 = (v26 - 1) & v26;
            v23 = __clz(__rbit64(v26)) + (v25 << 6);
            v90 = v25;
            goto LABEL_8;
          }
        }
      }
    }
LABEL_26:
    v21 = 0;
    v94 = 0u;
    v95 = 0u;
    v93 = 0u;
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  v78 = sub_10004F2F0(0, &qword_100644410, FPActionOperationLocator_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v78);
  __break(1u);
}

void sub_1002DA50C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(a1, "callbackQueue", v10);
  if (v13)
  {
    v14 = v13;
    v15 = swift_allocObject(&unk_1005DAEE0, 32, 7);
    *(_QWORD *)(v15 + 16) = a1;
    *(_QWORD *)(v15 + 24) = a2;
    aBlock[4] = sub_1002EB7A0;
    v25 = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004A82C;
    aBlock[3] = &unk_1005DAEF8;
    v16 = _Block_copy(aBlock);
    v17 = a1;
    swift_retain();
    static DispatchQoS.unspecified.getter(v18);
    v23 = _swiftEmptyArrayStorage;
    v19 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v20 = sub_10006922C((uint64_t *)&unk_100647540);
    v21 = sub_1000791AC();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v20, v21, v4, v19);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v7, v16);
    _Block_release(v16);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    swift_release(v25);
  }
  else
  {
    __break(1u);
  }
}

double sub_1002DA704(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, __n128);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  double result;

  v4 = *(void (**)(uint64_t, __n128))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = type metadata accessor for URL(0);
  v6 = sub_10005A360(&qword_10064D980, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, v5, v5, v6);
  v8 = swift_retain();
  v4(v7, v8);
  swift_release(v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v7).n128_u64[0];
  return result;
}

void sub_1002DA788(void *a1, uint64_t a2)
{
  uint64_t v4;
  Class isa;
  unint64_t v6;
  Class v7;
  _BYTE v8[24];

  swift_beginAccess(a2 + 16, v8, 0, 0);
  v4 = *(_QWORD *)(a2 + 16);
  sub_10004F2F0(0, &qword_100644410, FPActionOperationLocator_ptr);
  sub_100083500(&qword_10064DA38, &qword_100644410, FPActionOperationLocator_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  swift_bridgeObjectRetain(v4);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  v6 = sub_1003F348C((uint64_t)_swiftEmptyArrayStorage);
  sub_10006922C((uint64_t *)&unk_100643490);
  v7 = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "completedWithResultsByRoot:errorsByRoot:error:", isa, v7, 0, swift_bridgeObjectRelease(v6).n128_f64[0]);

}

Swift::Int sub_1002DA8A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10006922C((uint64_t *)&unk_100653150);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_10004F2F0(0, (unint64_t *)&unk_100644310, UIButton_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_10004F2F0(0, (unint64_t *)&unk_1006475D0, UIDocumentBrowserAction_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002E13FC(v22 + 1, 1, (uint64_t *)&unk_100653150);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_1002DAAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10006922C(&qword_10064DAC8);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_10004F2F0(0, (unint64_t *)&unk_1006428C0, FPItemID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_1002E13FC(v22 + 1, 1, &qword_10064DAC8);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(result);
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_1002DAD50(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int result;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (a2)
  {
    sub_10006922C(a3);
    v10 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v35 = v10;
    v11 = __CocoaDictionary.makeIterator()(a1);
    v12 = __CocoaDictionary.Iterator.next()(v11);
    if (v12)
    {
      v14 = v12;
      v15 = v13;
      v16 = sub_10004F2F0(0, a4, a5);
      do
      {
        v33 = v14;
        swift_dynamicCast(&v34, &v33, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
        v32 = v15;
        swift_dynamicCast(&v33, &v32, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
        v10 = v35;
        v27 = *(_QWORD *)(v35 + 16);
        if (*(_QWORD *)(v35 + 24) <= v27)
        {
          sub_1002E13FC(v27 + 1, 1, a3);
          v10 = v35;
        }
        v18 = v33;
        v17 = v34;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v10 + 40));
        v20 = v10 + 64;
        v21 = -1 << *(_BYTE *)(v10 + 32);
        v22 = result & ~v21;
        v23 = v22 >> 6;
        if (((-1 << v22) & ~*(_QWORD *)(v10 + 64 + 8 * (v22 >> 6))) != 0)
        {
          v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 64 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v28 = 0;
          v29 = (unint64_t)(63 - v21) >> 6;
          do
          {
            if (++v23 == v29 && (v28 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v30 = v23 == v29;
            if (v23 == v29)
              v23 = 0;
            v28 |= v30;
            v31 = *(_QWORD *)(v20 + 8 * v23);
          }
          while (v31 == -1);
          v24 = __clz(__rbit64(~v31)) + (v23 << 6);
        }
        *(_QWORD *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
        v25 = 8 * v24;
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + v25) = v17;
        *(_QWORD *)(*(_QWORD *)(v10 + 56) + v25) = v18;
        ++*(_QWORD *)(v10 + 16);
        v14 = __CocoaDictionary.Iterator.next()(result);
        v15 = v26;
      }
      while (v14);
    }
    swift_release(v11);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v10;
}

void sub_1002DAF84(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t i;
  int v53;
  uint64_t v54;

  v3 = v2;
  v6 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario(0);
  v51 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v54 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10006922C(&qword_10064D978);
  v53 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (*(_QWORD *)(v12 + 16))
  {
    v15 = 1 << *(_BYTE *)(v12 + 32);
    v16 = *(_QWORD *)(v12 + 64);
    v50 = (_QWORD *)(v12 + 64);
    if (v15 < 64)
      v17 = ~(-1 << v15);
    else
      v17 = -1;
    v18 = v17 & v16;
    v48 = v2;
    v49 = (unint64_t)(v15 + 63) >> 6;
    v19 = v13 + 64;
    v20 = swift_retain();
    v21 = 0;
    v22 = v12;
    for (i = v12; ; v22 = i)
    {
      if (v18)
      {
        v24 = __clz(__rbit64(v18));
        v18 &= v18 - 1;
        v25 = v24 | (v21 << 6);
      }
      else
      {
        v26 = v21 + 1;
        if (__OFADD__(v21, 1))
        {
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        if (v26 >= v49)
        {
          swift_release(v22);
          v3 = v48;
          v27 = v50;
          if ((v53 & 1) == 0)
            goto LABEL_41;
LABEL_38:
          v46 = 1 << *(_BYTE *)(i + 32);
          if (v46 >= 64)
            bzero(v27, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v27 = -1 << v46;
          v45 = i;
          *(_QWORD *)(i + 16) = 0;
          goto LABEL_44;
        }
        v27 = v50;
        v28 = v50[v26];
        ++v21;
        if (!v28)
        {
          v21 = v26 + 1;
          if (v26 + 1 >= v49)
            goto LABEL_37;
          v28 = v50[v21];
          if (!v28)
          {
            v29 = v26 + 2;
            if (v29 >= v49)
            {
LABEL_37:
              swift_release(v22);
              v3 = v48;
              if ((v53 & 1) == 0)
              {
LABEL_41:
                v45 = i;
                goto LABEL_44;
              }
              goto LABEL_38;
            }
            v28 = v50[v29];
            if (!v28)
            {
              while (1)
              {
                v21 = v29 + 1;
                if (__OFADD__(v29, 1))
                  break;
                if (v21 >= v49)
                  goto LABEL_37;
                v28 = v50[v21];
                ++v29;
                if (v28)
                  goto LABEL_23;
              }
LABEL_46:
              __break(1u);
              return;
            }
            v21 = v29;
          }
        }
LABEL_23:
        v18 = (v28 - 1) & v28;
        v25 = __clz(__rbit64(v28)) + (v21 << 6);
      }
      v30 = *(_QWORD *)(v9 + 72);
      v31 = *(_QWORD *)(v22 + 48) + v30 * v25;
      if ((v53 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 32))(v11, v31, v8, v20);
        v32 = *(_QWORD *)(v22 + 56);
        v33 = *(_QWORD *)(v51 + 72);
        sub_1001D0788(v32 + v33 * v25, v54, type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario);
      }
      else
      {
        (*(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16))(v11, v31, v8, v20);
        v34 = *(_QWORD *)(v22 + 56);
        v33 = *(_QWORD *)(v51 + 72);
        sub_10007C6DC(v34 + v33 * v25, v54, type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario);
      }
      v35 = *(_QWORD *)(v14 + 40);
      v36 = sub_10005A360(&qword_10064D980, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v37 = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v8, v36);
      v38 = -1 << *(_BYTE *)(v14 + 32);
      v39 = v37 & ~v38;
      v40 = v39 >> 6;
      if (((-1 << v39) & ~*(_QWORD *)(v19 + 8 * (v39 >> 6))) != 0)
      {
        v23 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v19 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v41 = 0;
        v42 = (unint64_t)(63 - v38) >> 6;
        do
        {
          if (++v40 == v42 && (v41 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v43 = v40 == v42;
          if (v40 == v42)
            v40 = 0;
          v41 |= v43;
          v44 = *(_QWORD *)(v19 + 8 * v40);
        }
        while (v44 == -1);
        v23 = __clz(__rbit64(~v44)) + (v40 << 6);
      }
      *(_QWORD *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 48) + v30 * v23, v11, v8);
      sub_1001D0788(v54, *(_QWORD *)(v14 + 56) + v33 * v23, type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario);
      ++*(_QWORD *)(v14 + 16);
    }
  }
  v45 = v12;
LABEL_44:
  swift_release(v45);
  *v3 = v14;
}

void sub_1002DB3A0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  char v38;
  __int128 v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C(&qword_10064DAF0);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v37 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain();
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v22 >= v36)
          goto LABEL_36;
        v23 = v37[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v36)
            goto LABEL_36;
          v23 = v37[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_36:
              swift_release(v5);
              v3 = v35;
              if ((v38 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v37[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_43;
                if (v13 >= v36)
                  goto LABEL_36;
                v23 = v37[v13];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v13 = v24;
          }
        }
LABEL_33:
        v11 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = *(_QWORD *)(v5 + 48) + 40 * v21;
      v31 = *(_QWORD *)v29;
      v30 = *(_QWORD *)(v29 + 8);
      v32 = *(_QWORD *)(v29 + 16);
      v39 = *(_OWORD *)(v29 + 24);
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
      if ((v38 & 1) == 0)
      {
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain(v39);
        swift_retain();
        swift_bridgeObjectRetain(v33);
      }
      Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
      swift_bridgeObjectRetain(v30);
      String.hash(into:)(v40, v31, v30);
      swift_bridgeObjectRelease(v30);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = *(_QWORD *)(v8 + 48) + 40 * v18;
      *(_QWORD *)v19 = v31;
      *(_QWORD *)(v19 + 8) = v30;
      *(_QWORD *)(v19 + 16) = v32;
      *(_OWORD *)(v19 + 24) = v39;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_1002DB6EC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v3 = v2;
  v6 = type metadata accessor for RestorableSettings(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10006922C(&qword_10064DAB0);
  v29 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  if (*(_QWORD *)(v10 + 16))
  {
    v28 = v3;
    v11 = 1 << *(_BYTE *)(v10 + 32);
    v12 = (_QWORD *)(v10 + 64);
    v13 = -1;
    if (v11 < 64)
      v13 = ~(-1 << v11);
    v14 = v13 & *(_QWORD *)(v10 + 64);
    v15 = (unint64_t)(v11 + 63) >> 6;
    swift_retain();
    v16 = 0;
    while (1)
    {
      if (v14)
      {
        v18 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v19 = v18 | (v16 << 6);
      }
      else
      {
        v20 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          return;
        }
        if (v20 >= v15)
          goto LABEL_25;
        v21 = v12[v20];
        ++v16;
        if (!v21)
        {
          v16 = v20 + 1;
          if (v20 + 1 >= v15)
            goto LABEL_25;
          v21 = v12[v16];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v15)
            {
LABEL_25:
              swift_release(v10);
              if ((a2 & 1) == 0)
              {
                swift_release(v10);
                v3 = v28;
                goto LABEL_32;
              }
              v27 = 1 << *(_BYTE *)(v10 + 32);
              if (v27 >= 64)
                bzero((void *)(v10 + 64), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v12 = -1 << v27;
              v3 = v28;
              *(_QWORD *)(v10 + 16) = 0;
              break;
            }
            v21 = v12[v22];
            if (!v21)
            {
              while (1)
              {
                v16 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_34;
                if (v16 >= v15)
                  goto LABEL_25;
                v21 = v12[v16];
                ++v22;
                if (v21)
                  goto LABEL_22;
              }
            }
            v16 = v22;
          }
        }
LABEL_22:
        v14 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v16 << 6);
      }
      v23 = *(_QWORD *)(v10 + 48) + 16 * v19;
      v24 = *(void **)v23;
      v25 = *(_BYTE *)(v23 + 8);
      v26 = *(_QWORD *)(v10 + 56) + *(_QWORD *)(v7 + 72) * v19;
      if ((a2 & 1) != 0)
      {
        sub_1001D0788(v26, (uint64_t)v9, type metadata accessor for RestorableSettings);
      }
      else
      {
        sub_10007C6DC(v26, (uint64_t)v9, type metadata accessor for RestorableSettings);
        v17 = v24;
      }
      sub_1002E50C8(v24, v25, (uint64_t)v9, v29);
    }
  }
  swift_release(v10);
LABEL_32:
  *v3 = v29;
}

void sub_1002DB948(uint64_t a1, uint64_t a2)
{
  sub_1002E317C(a1, a2, &qword_10064DAC0);
}

Swift::Int sub_1002DB954(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::UInt v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C(&qword_10064D988);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = v3;
    v9 = 0;
    v35 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v34)
          goto LABEL_36;
        v22 = v35[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v34)
            goto LABEL_36;
          v22 = v35[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v33;
                goto LABEL_43;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v35 = -1 << v32;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v34)
                  goto LABEL_36;
                v22 = v35[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(v5 + 56);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v31 = *(_QWORD *)(v29 + v28);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v29 + v28));
      Hasher.init(_seed:)(v36, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v30);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v18) = v30;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v18) = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

void sub_1002DBC2C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  Swift::Int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  _QWORD *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  int64_t v68;
  __int128 v69;
  _QWORD v70[9];
  _OWORD v71[2];
  _BYTE v72[48];
  _BYTE v73[48];
  _BYTE v74[160];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C(&qword_10064DAE8);
  v67 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v58 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v57 = (unint64_t)(v9 + 63) >> 6;
    v65 = v7 + 64;
    swift_retain();
    v12 = 0;
    v66 = v5;
    while (1)
    {
      if (v11)
      {
        v49 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v50 = v49 | (v12 << 6);
      }
      else
      {
        v51 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_35:
          __break(1u);
          return;
        }
        if (v51 >= v57)
          goto LABEL_27;
        v52 = v58[v51];
        ++v12;
        if (!v52)
        {
          v12 = v51 + 1;
          if (v51 + 1 >= v57)
            goto LABEL_27;
          v52 = v58[v12];
          if (!v52)
          {
            v53 = v51 + 2;
            if (v53 >= v57)
            {
LABEL_27:
              swift_release(v5);
              if ((v67 & 1) != 0)
              {
                v56 = 1 << *(_BYTE *)(v5 + 32);
                if (v56 >= 64)
                  bzero(v58, ((unint64_t)(v56 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v58 = -1 << v56;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v52 = v58[v53];
            if (!v52)
            {
              while (1)
              {
                v12 = v53 + 1;
                if (__OFADD__(v53, 1))
                  goto LABEL_35;
                if (v12 >= v57)
                  goto LABEL_27;
                v52 = v58[v12];
                ++v53;
                if (v52)
                  goto LABEL_24;
              }
            }
            v12 = v53;
          }
        }
LABEL_24:
        v11 = (v52 - 1) & v52;
        v50 = __clz(__rbit64(v52)) + (v12 << 6);
      }
      v68 = v12;
      if ((v67 & 1) != 0)
      {
        v54 = *(_QWORD *)(v5 + 56);
        v55 = *(_QWORD *)(v5 + 48) + 160 * v50;
        v69 = *(_OWORD *)v55;
        v23 = *(void **)(v55 + 16);
        v22 = *(unsigned __int8 *)(v55 + 24);
        v29 = *(_OWORD *)(v55 + 32);
        v28 = *(_OWORD *)(v55 + 48);
        v27 = *(_QWORD *)(v55 + 64);
        v30 = *(_OWORD *)(v55 + 72);
        v31 = *(_OWORD *)(v55 + 88);
        v26 = *(_QWORD *)(v55 + 104);
        v33 = *(_OWORD *)(v55 + 120);
        v32 = *(_OWORD *)(v55 + 136);
        v24 = *(_QWORD *)(v55 + 152);
        v25 = *(_BYTE *)(v55 + 112);
        v21 = *(_QWORD *)(v54 + 8 * v50);
      }
      else
      {
        v13 = (_OWORD *)(*(_QWORD *)(v5 + 48) + 160 * v50);
        v14 = v13[2];
        v15 = v13[3];
        v16 = v13[5];
        *(_OWORD *)&v74[64] = v13[4];
        *(_OWORD *)&v74[80] = v16;
        *(_OWORD *)&v74[48] = v15;
        v17 = v13[6];
        v18 = v13[7];
        v19 = v13[9];
        *(_OWORD *)&v74[128] = v13[8];
        *(_OWORD *)&v74[144] = v19;
        *(_OWORD *)&v74[96] = v17;
        *(_OWORD *)&v74[112] = v18;
        v20 = v13[1];
        *(_OWORD *)v74 = *v13;
        *(_OWORD *)&v74[16] = v20;
        *(_OWORD *)&v74[32] = v14;
        v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v50);
        v22 = BYTE8(v20);
        v23 = (void *)v20;
        v69 = *(_OWORD *)v74;
        v24 = *((_QWORD *)&v19 + 1);
        v63 = *(_OWORD *)&v74[120];
        v64 = *(_OWORD *)&v74[136];
        v25 = v18;
        v61 = *(_OWORD *)&v74[88];
        v62 = *(_OWORD *)&v74[72];
        v26 = *(_QWORD *)&v74[104];
        v27 = *(_QWORD *)&v74[64];
        v59 = v14;
        v60 = *(_OWORD *)&v74[48];
        sub_100145718((uint64_t)v74);
        v29 = v59;
        v28 = v60;
        v31 = v61;
        v30 = v62;
        v33 = v63;
        v32 = v64;
      }
      v71[0] = v29;
      v71[1] = v28;
      *(_QWORD *)v72 = v27;
      *(_OWORD *)&v72[8] = v30;
      *(_OWORD *)&v72[24] = v31;
      *(_QWORD *)&v72[40] = v26;
      v73[0] = v25;
      *(_OWORD *)&v73[8] = v33;
      *(_OWORD *)&v73[24] = v32;
      *(_QWORD *)&v73[40] = v24;
      v79 = *(_OWORD *)&v72[32];
      v80 = *(_OWORD *)v73;
      v75 = v29;
      v76 = v28;
      v77 = *(_OWORD *)v72;
      v78 = *(_OWORD *)&v72[16];
      v81 = *(_OWORD *)&v73[16];
      v82 = *(_OWORD *)&v73[32];
      *(_OWORD *)&v74[39] = *(_OWORD *)v72;
      *(_OWORD *)&v74[55] = *(_OWORD *)&v72[16];
      *(_OWORD *)&v74[7] = v29;
      *(_OWORD *)&v74[23] = v28;
      *(_OWORD *)&v74[103] = *(_OWORD *)&v73[16];
      *(_OWORD *)&v74[119] = *(_OWORD *)&v73[32];
      *(_OWORD *)&v74[71] = *(_OWORD *)&v72[32];
      *(_OWORD *)&v74[87] = *(_OWORD *)v73;
      Hasher.init(_seed:)(v70, *(_QWORD *)(v8 + 40));
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
      v36 = v35;
      v37 = (id)v69;
      String.hash(into:)(v70, v34, v36);

      swift_bridgeObjectRelease(v36);
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(*((_QWORD *)&v69 + 1));
      v40 = v39;
      v41 = *((id *)&v69 + 1);
      String.hash(into:)(v70, v38, v40);

      swift_bridgeObjectRelease(v40);
      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v44 = v43;
      v45 = v23;
      String.hash(into:)(v70, v42, v44);

      swift_bridgeObjectRelease(v44);
      Hasher._combine(_:)(v22 - 1);
      sub_100027B74((uint64_t)v71);
      sub_1002F2ED0((uint64_t)v70);
      sub_10003BDA0((uint64_t)v71);
      v46 = Hasher._finalize()();
      v47 = _HashTable.nextHole(atOrAfter:)(v46 & ~(-1 << *(_BYTE *)(v8 + 32)), v65, ~(-1 << *(_BYTE *)(v8 + 32)));
      *(_QWORD *)(v65 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47;
      v48 = *(_QWORD *)(v8 + 48) + 160 * v47;
      *(_OWORD *)v48 = v69;
      *(_QWORD *)(v48 + 16) = v45;
      *(_BYTE *)(v48 + 24) = v22;
      *(_OWORD *)(v48 + 105) = *(_OWORD *)&v74[80];
      *(_OWORD *)(v48 + 121) = *(_OWORD *)&v74[96];
      *(_OWORD *)(v48 + 137) = *(_OWORD *)&v74[112];
      *(_QWORD *)(v48 + 152) = *(_QWORD *)&v74[127];
      *(_OWORD *)(v48 + 41) = *(_OWORD *)&v74[16];
      *(_OWORD *)(v48 + 57) = *(_OWORD *)&v74[32];
      *(_OWORD *)(v48 + 73) = *(_OWORD *)&v74[48];
      *(_OWORD *)(v48 + 89) = *(_OWORD *)&v74[64];
      *(_OWORD *)(v48 + 25) = *(_OWORD *)v74;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v47) = v21;
      ++*(_QWORD *)(v8 + 16);
      v5 = v66;
      v12 = v68;
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_1002DC12C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C((uint64_t *)&unk_100653230);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v14 << 6);
      }
      else
      {
        v24 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v38[v24];
        ++v14;
        if (!v25)
        {
          v14 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v38[v14];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                v14 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v14 >= v37)
                  goto LABEL_36;
                v25 = v38[v14];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v14 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v14 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        sub_1000D1378(v39, *((unint64_t *)&v39 + 1));
      }
      Hasher.init(_seed:)(v40, *(_QWORD *)(v9 + 40));
      String.hash(into:)(v40, v34, v33);
      v15 = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = v15 & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v39;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  swift_release(v5);
  *v3 = v9;
}

uint64_t sub_1002DC438(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C((uint64_t *)&unk_10064DAA0);
  v42 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_57;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v39 = v3;
  v40 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
LABEL_11:
  if (v11)
  {
    v16 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v17 = v16 | (v13 << 6);
    goto LABEL_25;
  }
  v18 = v13 + 1;
  if (__OFADD__(v13, 1))
    goto LABEL_58;
  if (v18 >= v40)
  {
    swift_release(v5);
    v3 = v39;
    v19 = (_QWORD *)(v5 + 64);
    if ((v42 & 1) != 0)
    {
LABEL_53:
      v37 = 1 << *(_BYTE *)(v5 + 32);
      if (v37 >= 64)
        bzero(v19, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v19 = -1 << v37;
      *(_QWORD *)(v5 + 16) = 0;
    }
  }
  else
  {
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v41 + 8 * v18);
    ++v13;
    if (v20)
      goto LABEL_24;
    v13 = v18 + 1;
    if (v18 + 1 >= v40)
      goto LABEL_50;
    v20 = *(_QWORD *)(v41 + 8 * v13);
    if (v20)
    {
LABEL_24:
      v11 = (v20 - 1) & v20;
      v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_25:
      v22 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *(_QWORD *)(v5 + 56) + 40 * v17;
      v25 = *(_QWORD *)v23;
      v24 = *(_QWORD *)(v23 + 8);
      v26 = *(_QWORD *)(v23 + 16);
      v43 = v22;
      v44 = *(_OWORD *)(v23 + 24);
      v27 = *((_QWORD *)&v22 + 1);
      if ((v42 & 1) == 0)
      {
        sub_1000D1378(v22, *((unint64_t *)&v22 + 1));
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v44);
        swift_retain(*((_QWORD *)&v44 + 1));
      }
      Hasher.init(_seed:)(v45, *(_QWORD *)(v8 + 40));
      switch(v27)
      {
        case 0:
          v28 = 0;
          goto LABEL_40;
        case 1:
          v28 = 1;
          goto LABEL_40;
        case 2:
          v28 = 2;
          goto LABEL_40;
        case 3:
          v28 = 3;
          goto LABEL_40;
        case 4:
          v28 = 4;
          goto LABEL_40;
        case 5:
          v28 = 5;
          goto LABEL_40;
        case 6:
          v28 = 6;
          goto LABEL_40;
        case 7:
          v28 = 7;
          goto LABEL_40;
        case 8:
          v28 = 8;
          goto LABEL_40;
        case 9:
          v28 = 9;
          goto LABEL_40;
        case 10:
          v28 = 11;
LABEL_40:
          Hasher._combine(_:)(v28);
          break;
        default:
          Hasher._combine(_:)(0xAuLL);
          String.hash(into:)(v45, v43, v27);
          break;
      }
      v29 = Hasher._finalize()();
      v30 = -1 << *(_BYTE *)(v8 + 32);
      v31 = v29 & ~v30;
      v32 = v31 >> 6;
      if (((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_10;
      }
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      while (++v32 != v34 || (v33 & 1) == 0)
      {
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v12 + 8 * v32);
        if (v36 != -1)
        {
          v14 = __clz(__rbit64(~v36)) + (v32 << 6);
LABEL_10:
          *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
          *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v14) = v43;
          v15 = *(_QWORD *)(v8 + 56) + 40 * v14;
          *(_QWORD *)v15 = v25;
          *(_QWORD *)(v15 + 8) = v24;
          *(_QWORD *)(v15 + 16) = v26;
          *(_OWORD *)(v15 + 24) = v44;
          ++*(_QWORD *)(v8 + 16);
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      JUMPOUT(0x1002DC848);
    }
    v21 = v18 + 2;
    if (v21 < v40)
    {
      v20 = *(_QWORD *)(v41 + 8 * v21);
      if (!v20)
      {
        while (1)
        {
          v13 = v21 + 1;
          if (__OFADD__(v21, 1))
            goto LABEL_59;
          if (v13 >= v40)
            goto LABEL_50;
          v20 = *(_QWORD *)(v41 + 8 * v13);
          ++v21;
          if (v20)
            goto LABEL_24;
        }
      }
      v13 = v21;
      goto LABEL_24;
    }
LABEL_50:
    swift_release(v5);
    v3 = v39;
    if ((v42 & 1) != 0)
      goto LABEL_53;
  }
LABEL_57:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_1002DC874(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  __n128 v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v3 = v2;
  v32 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10006922C((uint64_t *)&unk_100653220);
  v10 = a2;
  v33 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  if (*(_QWORD *)(v9 + 16))
  {
    v11 = 1 << *(_BYTE *)(v9 + 32);
    v12 = *(_QWORD *)(v9 + 64);
    v30 = v3;
    v31 = (_QWORD *)(v9 + 64);
    v13 = -1;
    if (v11 < 64)
      v13 = ~(-1 << v11);
    v14 = v13 & v12;
    v15 = (unint64_t)(v11 + 63) >> 6;
    v16 = swift_retain(v9);
    v17 = 0;
    while (1)
    {
      if (v14)
      {
        v18 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v19 = v18 | (v17 << 6);
      }
      else
      {
        v20 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          return;
        }
        v21 = v31;
        if (v20 >= v15)
          goto LABEL_25;
        v22 = v31[v20];
        ++v17;
        if (!v22)
        {
          v17 = v20 + 1;
          if (v20 + 1 >= v15)
            goto LABEL_25;
          v22 = v31[v17];
          if (!v22)
          {
            v23 = v20 + 2;
            if (v23 >= v15)
            {
LABEL_25:
              swift_release(v9);
              if ((v10 & 1) == 0)
              {
                swift_release(v9);
                v3 = v30;
                goto LABEL_32;
              }
              v29 = 1 << *(_BYTE *)(v9 + 32);
              if (v29 >= 64)
                bzero(v21, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v21 = -1 << v29;
              v3 = v30;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v22 = v31[v23];
            if (!v22)
            {
              while (1)
              {
                v17 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_34;
                if (v17 >= v15)
                  goto LABEL_25;
                v22 = v31[v17];
                ++v23;
                if (v22)
                  goto LABEL_22;
              }
            }
            v17 = v23;
          }
        }
LABEL_22:
        v14 = (v22 - 1) & v22;
        v19 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      v24 = *(_QWORD *)(v9 + 48) + 24 * v19;
      v26 = *(_QWORD *)v24;
      v25 = *(_QWORD *)(v24 + 8);
      v27 = *(_BYTE *)(v24 + 16);
      v28 = *(_QWORD *)(v9 + 56) + *(_QWORD *)(v6 + 72) * v19;
      if ((v10 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 32))(v8, v28, v32, v16);
      }
      else
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v28, v32);
        sub_100292218(v26, v25, v27);
      }
      sub_1002E5210(v26, v25, v27, (uint64_t)v8, v33);
    }
  }
  swift_release(v9);
LABEL_32:
  *v3 = v33;
}

void sub_1002DCAFC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t i;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int64_t v29;
  _QWORD *v30;
  char v31;
  uint64_t v32;
  int64_t v33;
  _QWORD v34[5];

  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10006922C((uint64_t *)&unk_10064DA90);
  v31 = a2;
  v32 = static _DictionaryStorage.resize(original:capacity:move:)(v4, v5, a2);
  if (*(_QWORD *)(v4 + 16))
  {
    v6 = 1 << *(_BYTE *)(v4 + 32);
    v30 = (_QWORD *)(v4 + 64);
    v7 = -1;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    v8 = v7 & *(_QWORD *)(v4 + 64);
    v29 = (unint64_t)(v6 + 63) >> 6;
    swift_retain(v4);
    for (i = 0; ; i = v33)
    {
      if (v8)
      {
        v10 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v33 = i;
        v11 = v10 | (i << 6);
      }
      else
      {
        v12 = i + 1;
        if (__OFADD__(i, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return;
        }
        if (v12 >= v29)
          goto LABEL_25;
        v13 = v30[v12];
        v14 = i + 1;
        if (!v13)
        {
          v14 = i + 2;
          if (i + 2 >= v29)
            goto LABEL_25;
          v13 = v30[v14];
          if (!v13)
          {
            v15 = i + 3;
            if (i + 3 >= v29)
            {
LABEL_25:
              swift_release(v4);
              if ((v31 & 1) != 0)
              {
                v27 = 1 << *(_BYTE *)(v4 + 32);
                if (v27 > 63)
                  bzero(v30, ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v27;
                *(_QWORD *)(v4 + 16) = 0;
              }
              break;
            }
            v13 = v30[v15];
            if (!v13)
            {
              while (1)
              {
                v14 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_32;
                if (v14 >= v29)
                  goto LABEL_25;
                v13 = v30[v14];
                ++v15;
                if (v13)
                  goto LABEL_22;
              }
            }
            v14 = i + 3;
          }
        }
LABEL_22:
        v8 = (v13 - 1) & v13;
        v33 = v14;
        v11 = __clz(__rbit64(v13)) + (v14 << 6);
      }
      v16 = v4;
      v17 = *(_QWORD *)(v4 + 48) + 24 * v11;
      v18 = *(_QWORD *)v17;
      v19 = *(_QWORD *)(v17 + 8);
      v20 = *(_BYTE *)(v17 + 16);
      v21 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 40 * v11);
      v22 = *v21;
      v23 = v21[1];
      v24 = v21[2];
      v25 = v21[3];
      v26 = v21[4];
      if ((v31 & 1) == 0)
      {
        sub_100292218(v18, v19, v20);
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v25);
        swift_retain(v26);
      }
      v34[0] = v22;
      v34[1] = v23;
      v34[2] = v24;
      v34[3] = v25;
      v34[4] = v26;
      sub_1002E537C(v18, v19, v20, (uint64_t)v34, v32);
      v4 = v16;
    }
  }
  swift_release(v4);
  *v28 = v32;
}

Swift::Int sub_1002DCD64(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  int v22;
  Swift::UInt64 v23;
  Swift::UInt64 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int *v34;
  char v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C((uint64_t *)&unk_1006531F0);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v9 = 0;
    v37 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v9 << 6);
      }
      else
      {
        v18 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v18 >= v36)
          goto LABEL_39;
        v19 = v37[v18];
        ++v9;
        if (!v19)
        {
          v9 = v18 + 1;
          if (v18 + 1 >= v36)
            goto LABEL_39;
          v19 = v37[v9];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v36)
            {
LABEL_39:
              if ((v35 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v34;
                goto LABEL_46;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero(v37, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v37 = -1 << v33;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v37[v20];
            if (!v19)
            {
              while (1)
              {
                v9 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_48;
                if (v9 >= v36)
                  goto LABEL_39;
                v19 = v37[v9];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v9 = v20;
          }
        }
LABEL_24:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v9 << 6);
      }
      v21 = *(_QWORD *)(v5 + 48) + 24 * v17;
      v22 = *(unsigned __int8 *)(v21 + 16);
      v24 = *(_QWORD *)v21;
      v23 = *(_QWORD *)(v21 + 8);
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
      if (v22)
      {
        if (v22 == 1)
        {
          Hasher._combine(_:)(1uLL);
          Hasher._combine(_:)(v24);
          Hasher._combine(_:)(v23);
        }
        else
        {
          Hasher._combine(_:)(2uLL);
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        Hasher._combine(_:)(v24);
      }
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v13 + 8 * (v27 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_47;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v13 + 8 * v28);
        }
        while (v32 == -1);
        v14 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = *(_QWORD *)(v8 + 48) + 24 * v14;
      *(_QWORD *)v15 = v24;
      *(_QWORD *)(v15 + 8) = v23;
      *(_BYTE *)(v15 + 16) = v22;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v14) = v25;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_46:
  *v3 = v8;
  return result;
}

Swift::Int sub_1002DD090(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  Swift::UInt64 v23;
  Swift::UInt64 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int *v37;
  int64_t v38;
  _QWORD *v39;
  Swift::Int v40;
  char v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C((uint64_t *)&unk_10064DA80);
  v41 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v37 = v3;
    v9 = 0;
    v39 = (_QWORD *)(v5 + 64);
    v40 = v5;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v38 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
          return result;
        }
        result = (Swift::Int)v39;
        if (v19 >= v38)
          goto LABEL_41;
        v20 = v39[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v38)
            goto LABEL_41;
          v20 = v39[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v38)
            {
LABEL_41:
              if ((v41 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v37;
                goto LABEL_48;
              }
              v36 = 1 << *(_BYTE *)(v5 + 32);
              if (v36 >= 64)
                bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v36;
              v3 = v37;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v39[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_50;
                if (v9 >= v38)
                  goto LABEL_41;
                v20 = v39[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = *(_QWORD *)(v5 + 48) + 24 * v18;
      v24 = *(_QWORD *)v22;
      v23 = *(_QWORD *)(v22 + 8);
      v25 = *(unsigned __int8 *)(v22 + 16);
      v26 = *(_QWORD *)(v5 + 56) + 40 * v18;
      v27 = *(_QWORD *)v26;
      v28 = *(_QWORD *)(v26 + 8);
      v42 = *(_QWORD *)(v26 + 16);
      v43 = *(_OWORD *)(v26 + 24);
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v43);
        swift_retain(*((_QWORD *)&v43 + 1));
      }
      Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
      if (v25)
      {
        if (v25 == 1)
        {
          Hasher._combine(_:)(1uLL);
          Hasher._combine(_:)(v24);
          Hasher._combine(_:)(v23);
        }
        else
        {
          Hasher._combine(_:)(2uLL);
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        Hasher._combine(_:)(v24);
      }
      result = Hasher._finalize()();
      v29 = -1 << *(_BYTE *)(v8 + 32);
      v30 = result & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_49;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v13 + 8 * v31);
        }
        while (v35 == -1);
        v14 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = *(_QWORD *)(v8 + 48) + 24 * v14;
      *(_QWORD *)v15 = v24;
      *(_QWORD *)(v15 + 8) = v23;
      *(_BYTE *)(v15 + 16) = v25;
      v16 = *(_QWORD *)(v8 + 56) + 40 * v14;
      *(_QWORD *)v16 = v27;
      *(_QWORD *)(v16 + 8) = v28;
      *(_QWORD *)(v16 + 16) = v42;
      *(_OWORD *)(v16 + 24) = v43;
      ++*(_QWORD *)(v8 + 16);
      v5 = v40;
    }
  }
  result = swift_release(v5);
LABEL_48:
  *v3 = v8;
  return result;
}

void sub_1002DD41C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  Swift::UInt v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD *v34;
  __int128 v35;
  _QWORD v36[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C((uint64_t *)&unk_1006531E0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v13 << 6);
      }
      else
      {
        v17 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          return;
        }
        if (v17 >= v33)
          goto LABEL_44;
        v18 = v34[v17];
        ++v13;
        if (!v18)
        {
          v13 = v17 + 1;
          if (v17 + 1 >= v33)
            goto LABEL_44;
          v18 = v34[v13];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v33)
            {
LABEL_44:
              swift_release(v5);
              v3 = v32;
              if ((a2 & 1) != 0)
              {
                v31 = 1 << *(_BYTE *)(v5 + 32);
                if (v31 >= 64)
                  bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              goto LABEL_49;
            }
            v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                v13 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_51;
                if (v13 >= v33)
                  goto LABEL_44;
                v18 = v34[v13];
                ++v19;
                if (v18)
                  goto LABEL_24;
              }
            }
            v13 = v19;
          }
        }
LABEL_24:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
      v35 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v16);
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v16 + 8);
      if ((a2 & 1) == 0)
      {
        sub_100292204(v35, v21);
        swift_unknownObjectRetain(v20);
      }
      Hasher.init(_seed:)(v36, *(_QWORD *)(v8 + 40));
      if (!v21)
        break;
      if (v21 == 1)
      {
        v22 = 2;
        goto LABEL_33;
      }
      if (v21 == 2)
      {
        v22 = 3;
LABEL_33:
        Hasher._combine(_:)(v22);
        goto LABEL_35;
      }
      Hasher._combine(_:)(1uLL);
      String.hash(into:)(v36, v35, v21);
LABEL_35:
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v8 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_50;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v14) = v35;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v14) = v20;
      ++*(_QWORD *)(v8 + 16);
    }
    v22 = 0;
    goto LABEL_33;
  }
LABEL_49:
  swift_release(v5);
  *v3 = v8;
}

void sub_1002DD754(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  __int128 v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C((uint64_t *)&unk_10064DA70);
  v41 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_51;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v40 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v38 = v3;
  v39 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_25;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      return;
    }
    if (v18 >= v39)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v40 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v39)
        goto LABEL_44;
      v20 = *(_QWORD *)(v40 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v39)
        {
LABEL_44:
          swift_release(v5);
          v3 = v38;
          if ((v41 & 1) == 0)
            goto LABEL_51;
          goto LABEL_47;
        }
        v20 = *(_QWORD *)(v40 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_53;
            if (v13 >= v39)
              goto LABEL_44;
            v20 = *(_QWORD *)(v40 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_24;
          }
        }
        v13 = v21;
      }
    }
LABEL_24:
    v11 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_25:
    v22 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v23 = *(_QWORD *)(v5 + 56) + 40 * v17;
    v25 = *(_QWORD *)v23;
    v24 = *(_QWORD *)(v23 + 8);
    v26 = *(_QWORD *)(v23 + 16);
    v42 = v22;
    v43 = *(_OWORD *)(v23 + 24);
    v27 = *((_QWORD *)&v22 + 1);
    if ((v41 & 1) == 0)
    {
      sub_100292204(v22, *((unint64_t *)&v22 + 1));
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v43);
      swift_retain(*((_QWORD *)&v43 + 1));
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    switch(v27)
    {
      case 0:
        v28 = 0;
        goto LABEL_33;
      case 1:
        v28 = 2;
        goto LABEL_33;
      case 2:
        v28 = 3;
LABEL_33:
        Hasher._combine(_:)(v28);
        goto LABEL_35;
    }
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v44, v42, v27);
LABEL_35:
    v29 = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v8 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_52;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v12 + 8 * v32);
      }
      while (v36 == -1);
      v14 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v14) = v42;
    v15 = *(_QWORD *)(v8 + 56) + 40 * v14;
    *(_QWORD *)v15 = v25;
    *(_QWORD *)(v15 + 8) = v24;
    *(_QWORD *)(v15 + 16) = v26;
    *(_OWORD *)(v15 + 24) = v43;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v38;
  v19 = (_QWORD *)(v5 + 64);
  if ((v41 & 1) == 0)
    goto LABEL_51;
LABEL_47:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v19, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_51:
  swift_release(v5);
  *v3 = v8;
}

void sub_1002DDAEC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C(&qword_10064D9B0);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v24 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v25 = v24 | (v13 << 6);
      goto LABEL_34;
    }
    v26 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v26 >= v41)
      break;
    v27 = (_QWORD *)(v5 + 64);
    v28 = *(_QWORD *)(v42 + 8 * v26);
    ++v13;
    if (!v28)
    {
      v13 = v26 + 1;
      if (v26 + 1 >= v41)
        goto LABEL_36;
      v28 = *(_QWORD *)(v42 + 8 * v13);
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = *(_QWORD *)(v42 + 8 * v29);
        if (!v28)
        {
          while (1)
          {
            v13 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v13 >= v41)
              goto LABEL_36;
            v28 = *(_QWORD *)(v42 + 8 * v13);
            ++v29;
            if (v28)
              goto LABEL_33;
          }
        }
        v13 = v29;
      }
    }
LABEL_33:
    v11 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v13 << 6);
LABEL_34:
    v34 = 8 * v25;
    v35 = *(void **)(*(_QWORD *)(v5 + 48) + v34);
    v36 = *(void **)(*(_QWORD *)(v5 + 56) + v34);
    if ((v43 & 1) == 0)
    {
      v37 = v35;
      v38 = v36;
    }
    v14 = *(_QWORD *)(v8 + 40);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v17 = v16;
    Hasher.init(_seed:)(v44, v14);
    String.hash(into:)(v44, v15, v17);
    v18 = Hasher._finalize()();
    swift_bridgeObjectRelease(v17);
    v19 = -1 << *(_BYTE *)(v8 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v32 = v21 == v31;
        if (v21 == v31)
          v21 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v33 == -1);
      v22 = __clz(__rbit64(~v33)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    v23 = 8 * v22;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v23) = v35;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v23) = v36;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v27 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v27, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1002DDE18(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C(&qword_10064DB20);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_25;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v21 >= v12)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v12)
        goto LABEL_37;
      v23 = *(_QWORD *)(v37 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_46;
            if (v14 >= v12)
              goto LABEL_37;
            v23 = *(_QWORD *)(v37 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_24;
          }
        }
        v14 = v24;
      }
    }
LABEL_24:
    v11 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_25:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v41 = *(_QWORD *)(v25 + 32);
      v39 = v26;
      v40 = v27;
      sub_100079B28((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v38);
    }
    else
    {
      sub_10006777C(v25, (uint64_t)&v39);
      sub_100069BD8(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v38);
    }
    v28 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v8 + 48) + 40 * v15;
    v17 = v39;
    v18 = v40;
    *(_QWORD *)(v16 + 32) = v41;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    sub_100079B28(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

void sub_1002DE12C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __n128 v17;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t i;
  int v48;
  uint64_t v49;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v49 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10006922C((uint64_t *)&unk_10064D9F0);
  v48 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v46 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v44 = v2;
  v45 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  v17 = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v45)
      break;
    v24 = v46;
    v25 = v46[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v45)
        goto LABEL_36;
      v25 = v46[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v45)
        {
LABEL_36:
          swift_release(v9);
          v3 = v44;
          if ((v48 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v46[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v18 >= v45)
              goto LABEL_36;
            v25 = v46[v18];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v18 = v26;
      }
    }
LABEL_23:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v49 + 72);
    v28 = *(_QWORD *)(v9 + 48) + v27 * v22;
    if ((v48 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v49 + 32))(v8, v28, v6, v17);
      v29 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v22);
      v31 = *v29;
      v30 = v29[1];
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v49 + 16))(v8, v28, v6, v17);
      v32 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v22);
      v31 = *v32;
      v30 = v32[1];
      swift_bridgeObjectRetain(v30);
    }
    v33 = *(_QWORD *)(v11 + 40);
    v34 = sub_10005A360(&qword_10064D980, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v6, v34);
    v36 = -1 << *(_BYTE *)(v11 + 32);
    v37 = v35 & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v16 + 8 * (v37 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v16 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v16 + 8 * v38);
      }
      while (v42 == -1);
      v19 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v49 + 32))(*(_QWORD *)(v11 + 48) + v27 * v19, v8, v6);
    v20 = (_QWORD *)(*(_QWORD *)(v11 + 56) + 16 * v19);
    *v20 = v31;
    v20[1] = v30;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v44;
  v24 = v46;
  if ((v48 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v43 = 1 << *(_BYTE *)(v9 + 32);
  if (v43 >= 64)
    bzero(v24, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v43;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  swift_release(v9);
  *v3 = v11;
}

Swift::Int sub_1002DE4D8(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C((uint64_t *)&unk_1006532D0);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v9 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_36;
        v21 = v33[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_36;
          v21 = v33[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v31;
                goto LABEL_43;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_45;
                if (v9 >= v32)
                  goto LABEL_36;
                v21 = v33[v9];
                ++v22;
                if (v21)
                  goto LABEL_33;
              }
            }
            v9 = v22;
          }
        }
LABEL_33:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v27 = *(_QWORD *)(v5 + 56);
      v28 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v19);
      v29 = *(_QWORD *)(v27 + 8 * v19);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v27 + 8 * v19));
      Hasher.init(_seed:)(v34, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v17) = v29;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

void sub_1002DE7A8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C((uint64_t *)&unk_1006531B0);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v13 << 6);
      goto LABEL_34;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v13;
    if (!v26)
    {
      v13 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v13);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v13 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v13 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v13);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v13 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v13 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1002DEACC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  char v31;
  id v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C(&qword_10064DB78);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v3;
  v35 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v12)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_36;
      v24 = *(_QWORD *)(v35 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v34;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v24 = *(_QWORD *)(v35 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v31 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v21);
    if ((a2 & 1) == 0)
      v32 = v30;
    v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v18 == v27;
        if (v18 == v27)
          v18 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v29 == -1);
      v19 = __clz(__rbit64(~v29)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19) = v30;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v19) = v31;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v34;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1002DED90(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C(&qword_1006532C0);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    swift_retain();
    v14 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v14 << 6);
      }
      else
      {
        v24 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v38[v24];
        ++v14;
        if (!v25)
        {
          v14 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v38[v14];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                v14 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v14 >= v37)
                  goto LABEL_36;
                v25 = v38[v14];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v14 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v14 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        sub_10012F5E0(v39, *((unint64_t *)&v39 + 1));
      }
      Hasher.init(_seed:)(v40, *(_QWORD *)(v9 + 40));
      String.hash(into:)(v40, v34, v33);
      v15 = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = v15 & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v39;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  swift_release(v5);
  *v3 = v9;
}

void sub_1002DF09C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C((uint64_t *)&unk_1006533B0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain();
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v18 >= v35)
          goto LABEL_37;
        v19 = v36[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v35)
            goto LABEL_37;
          v19 = v36[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v36[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_44;
                if (v13 >= v35)
                  goto LABEL_37;
                v19 = v36[v13];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v13 = v20;
          }
        }
LABEL_24:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_100079B28(v24, v38);
      }
      else
      {
        sub_100069BD8((uint64_t)v24, (uint64_t)v38);
        swift_bridgeObjectRetain(v22);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v23, v22);
      v25 = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = v25 & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v14 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      sub_100079B28(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v14));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_1002DF398(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t i;
  int v46;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10006922C(&qword_10064DAB8);
  v46 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v44 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v42 = v2;
  v43 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  v18 = swift_retain();
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v43)
      break;
    v24 = v44;
    v25 = v44[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v43)
        goto LABEL_36;
      v25 = v44[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v43)
        {
LABEL_36:
          swift_release(v10);
          v3 = v42;
          if ((v46 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v44[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v43)
              goto LABEL_36;
            v25 = v44[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v46 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 32))(v9, v28, v6, v18);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v9, v28, v6, v18);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_unknownObjectRetain(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_10005A360(&qword_10064D980, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v32 = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v33 = -1 << *(_BYTE *)(v12 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v17 + 8 * v35);
      }
      while (v39 == -1);
      v20 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v42;
  v24 = v44;
  if ((v46 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v40 = 1 << *(_BYTE *)(v10 + 32);
  if (v40 >= 64)
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v40;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  swift_release(v10);
  *v3 = v12;
}

void sub_1002DF72C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  char v41;
  _QWORD v42[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C(&qword_10064DAD0);
  v41 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v38 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v40 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v39 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain();
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v24 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v25 = v24 | (v13 << 6);
      }
      else
      {
        v26 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v26 >= v39)
          goto LABEL_36;
        v27 = v40[v26];
        ++v13;
        if (!v27)
        {
          v13 = v26 + 1;
          if (v26 + 1 >= v39)
            goto LABEL_36;
          v27 = v40[v13];
          if (!v27)
          {
            v28 = v26 + 2;
            if (v28 >= v39)
            {
LABEL_36:
              swift_release(v5);
              v3 = v38;
              if ((v41 & 1) != 0)
              {
                v37 = 1 << *(_BYTE *)(v5 + 32);
                if (v37 >= 64)
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v40 = -1 << v37;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v27 = v40[v28];
            if (!v27)
            {
              while (1)
              {
                v13 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_43;
                if (v13 >= v39)
                  goto LABEL_36;
                v27 = v40[v13];
                ++v28;
                if (v27)
                  goto LABEL_33;
              }
            }
            v13 = v28;
          }
        }
LABEL_33:
        v11 = (v27 - 1) & v27;
        v25 = __clz(__rbit64(v27)) + (v13 << 6);
      }
      v33 = 8 * v25;
      v34 = *(void **)(*(_QWORD *)(v5 + 48) + v33);
      v35 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v33);
      if ((v41 & 1) == 0)
      {
        v36 = v34;
        swift_bridgeObjectRetain(v35);
      }
      v14 = *(_QWORD *)(v8 + 40);
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v17 = v16;
      Hasher.init(_seed:)(v42, v14);
      String.hash(into:)(v42, v15, v17);
      v18 = Hasher._finalize()();
      swift_bridgeObjectRelease(v17);
      v19 = -1 << *(_BYTE *)(v8 + 32);
      v20 = v18 & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
      {
        v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v21 == v30;
          if (v21 == v30)
            v21 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v21);
        }
        while (v32 == -1);
        v22 = __clz(__rbit64(~v32)) + (v21 << 6);
      }
      *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      v23 = 8 * v22;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v23) = v34;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v23) = v35;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_1002DFA48(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  char v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  __int128 v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C(&qword_10064DB88);
  v40 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v3;
  v39 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v39 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v38;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v39 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v22);
    v32 = *(_QWORD *)(v5 + 56) + 32 * v22;
    v41 = *(_OWORD *)v32;
    v33 = *(void **)(v32 + 16);
    v34 = *(_BYTE *)(v32 + 24);
    if ((v40 & 1) == 0)
    {
      v35 = v31;
      v36 = v33;
    }
    v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19) = v31;
    v20 = *(_QWORD *)(v8 + 56) + 32 * v19;
    *(_OWORD *)v20 = v41;
    *(_QWORD *)(v20 + 16) = v33;
    *(_BYTE *)(v20 + 24) = v34;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v38;
  v24 = (_QWORD *)(v5 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1002DFD40(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t i;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C(&qword_10064DB80);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v39 = v2;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v41 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v40 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v11)
      {
        v23 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v24 = v23 | (v13 << 6);
      }
      else
      {
        v25 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v25 >= v40)
          goto LABEL_36;
        v26 = v41[v25];
        ++v13;
        if (!v26)
        {
          v13 = v25 + 1;
          if (v25 + 1 >= v40)
            goto LABEL_36;
          v26 = v41[v13];
          if (!v26)
          {
            v27 = v25 + 2;
            if (v27 >= v40)
            {
LABEL_36:
              swift_release(v5);
              v3 = v39;
              if ((v43 & 1) != 0)
              {
                v38 = 1 << *(_BYTE *)(v5 + 32);
                if (v38 >= 64)
                  bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v41 = -1 << v38;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v26 = v41[v27];
            if (!v26)
            {
              while (1)
              {
                v13 = v27 + 1;
                if (__OFADD__(v27, 1))
                  goto LABEL_43;
                if (v13 >= v40)
                  goto LABEL_36;
                v26 = v41[v13];
                ++v27;
                if (v26)
                  goto LABEL_33;
              }
            }
            v13 = v27;
          }
        }
LABEL_33:
        v11 = (v26 - 1) & v26;
        v24 = __clz(__rbit64(v26)) + (v13 << 6);
      }
      v32 = *(_QWORD *)(v5 + 48) + 32 * v24;
      v33 = *(id *)v32;
      v34 = *(_QWORD *)(v32 + 8);
      v35 = *(_QWORD *)(v32 + 16);
      v36 = *(_BYTE *)(v32 + 24);
      v37 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v24);
      if ((v43 & 1) == 0)
      {
        sub_1000E4F7C(*(id *)v32, *(_QWORD *)(v32 + 8), *(_QWORD *)(v32 + 16), *(_BYTE *)(v32 + 24));
        swift_bridgeObjectRetain(v37);
      }
      Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
      sub_100200624((uint64_t)v33, v34, v35, v36);
      v15 = v14;
      String.hash(into:)(v44, v16, v14);
      swift_bridgeObjectRelease(v15);
      v17 = Hasher._finalize()();
      v18 = -1 << *(_BYTE *)(v8 + 32);
      v19 = v17 & ~v18;
      v20 = v19 >> 6;
      if (((-1 << v19) & ~*(_QWORD *)(v12 + 8 * (v19 >> 6))) != 0)
      {
        v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v12 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v30 = v20 == v29;
          if (v20 == v29)
            v20 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v20);
        }
        while (v31 == -1);
        v21 = __clz(__rbit64(~v31)) + (v20 << 6);
      }
      *(_QWORD *)(v12 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      v22 = *(_QWORD *)(v8 + 48) + 32 * v21;
      *(_QWORD *)v22 = v33;
      *(_QWORD *)(v22 + 8) = v34;
      *(_QWORD *)(v22 + 16) = v35;
      *(_BYTE *)(v22 + 24) = v36;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v21) = v37;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_1002E0084(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  __int128 v48;
  _QWORD v49[9];

  v3 = v2;
  v6 = type metadata accessor for ScrollPositionInfo.ItemOffset(0);
  v45 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v47 = (uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10006922C(&qword_10064DB68);
  v46 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v42 = v3;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v44 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v43 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  swift_retain();
  v16 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v16 << 6);
      goto LABEL_24;
    }
    v22 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return;
    }
    if (v22 >= v43)
      goto LABEL_36;
    v23 = v44[v22];
    ++v16;
    if (!v23)
    {
      v16 = v22 + 1;
      if (v22 + 1 >= v43)
        goto LABEL_36;
      v23 = v44[v16];
      if (!v23)
        break;
    }
LABEL_23:
    v14 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v8 + 56);
    v26 = v8;
    v27 = *(_QWORD *)(v8 + 48) + 40 * v21;
    v29 = *(_QWORD *)v27;
    v28 = *(_QWORD *)(v27 + 8);
    v30 = *(_QWORD *)(v27 + 16);
    v31 = *(_QWORD *)(v45 + 72);
    v32 = v25 + v31 * v21;
    v48 = *(_OWORD *)(v27 + 24);
    if ((v46 & 1) != 0)
    {
      sub_1001D0788(v32, v47, type metadata accessor for ScrollPositionInfo.ItemOffset);
    }
    else
    {
      sub_10007C6DC(v32, v47, type metadata accessor for ScrollPositionInfo.ItemOffset);
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v48);
      swift_retain();
    }
    Hasher.init(_seed:)(v49, *(_QWORD *)(v10 + 40));
    swift_bridgeObjectRetain(v28);
    String.hash(into:)(v49, v29, v28);
    swift_bridgeObjectRelease(v28);
    v33 = Hasher._finalize()();
    v34 = -1 << *(_BYTE *)(v10 + 32);
    v35 = v33 & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v15 + 8 * (v35 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v15 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      v18 = v48;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      v18 = v48;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v15 + 8 * v36);
      }
      while (v40 == -1);
      v17 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v15 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v19 = *(_QWORD *)(v10 + 48) + 40 * v17;
    *(_QWORD *)v19 = v29;
    *(_QWORD *)(v19 + 8) = v28;
    *(_QWORD *)(v19 + 16) = v30;
    *(_OWORD *)(v19 + 24) = v18;
    sub_1001D0788(v47, *(_QWORD *)(v10 + 56) + v31 * v17, type metadata accessor for ScrollPositionInfo.ItemOffset);
    ++*(_QWORD *)(v10 + 16);
    v8 = v26;
  }
  v24 = v22 + 2;
  if (v24 < v43)
  {
    v23 = v44[v24];
    if (!v23)
    {
      while (1)
      {
        v16 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_43;
        if (v16 >= v43)
          goto LABEL_36;
        v23 = v44[v16];
        ++v24;
        if (v23)
          goto LABEL_23;
      }
    }
    v16 = v24;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v8);
  v3 = v42;
  if ((v46 & 1) != 0)
  {
    v41 = 1 << *(_BYTE *)(v8 + 32);
    if (v41 >= 64)
      bzero(v44, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v44 = -1 << v41;
    *(_QWORD *)(v8 + 16) = 0;
  }
LABEL_41:
  swift_release(v8);
  *v3 = v10;
}

Swift::Int sub_1002E044C(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  Swift::Int *v34;
  int64_t v35;
  _QWORD *v36;
  char v37;
  __int128 v38;
  uint64_t v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C(&qword_10064D970);
  v37 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v36 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v34 = v3;
    v35 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v35)
          goto LABEL_36;
        v22 = v36[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v35)
            goto LABEL_36;
          v22 = v36[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_36:
              if ((v37 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v34;
                goto LABEL_43;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v36 = -1 << v33;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v36[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v35)
                  goto LABEL_36;
                v22 = v36[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v29 = *(_QWORD *)(v5 + 56) + 24 * v20;
      v38 = *(_OWORD *)v29;
      v30 = *(void **)(v29 + 16);
      if ((v37 & 1) == 0)
      {
        v31 = v30;
        v32 = (id)v38;
        swift_bridgeObjectRetain(*((_QWORD *)&v38 + 1));
      }
      Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v28;
      v18 = *(_QWORD *)(v8 + 56) + 24 * v17;
      *(_OWORD *)v18 = v38;
      *(_QWORD *)(v18 + 16) = v30;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

void sub_1002E0754(uint64_t a1, uint64_t a2)
{
  sub_1002E2E60(a1, a2, &qword_10064DAD8);
}

void sub_1002E0760(uint64_t a1, uint64_t a2)
{
  sub_1002E13FC(a1, a2, (uint64_t *)&unk_100653150);
}

void sub_1002E076C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C((uint64_t *)&unk_100653370);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1002E0A78(uint64_t a1, uint64_t a2)
{
  sub_1002E13FC(a1, a2, &qword_10064DAC8);
}

void sub_1002E0A84(uint64_t a1, uint64_t a2)
{
  sub_1002E317C(a1, a2, &qword_10064DB30);
}

void sub_1002E0A90(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C(&qword_10064CA98);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v38 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v37;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v38 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v22);
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v22);
    v33 = *v32;
    v34 = v32[1];
    if ((v39 & 1) == 0)
    {
      v35 = v31;
      swift_bridgeObjectRetain(v34);
    }
    v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19) = v31;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v19);
    *v20 = v33;
    v20[1] = v34;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1002E0D74(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  id v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C(&qword_10064DA50);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v37 = v3;
  v38 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v18 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_25;
    }
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v20 >= v38)
      break;
    v21 = (_QWORD *)(v5 + 64);
    v22 = *(_QWORD *)(v39 + 8 * v20);
    ++v13;
    if (!v22)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v38)
        goto LABEL_37;
      v22 = *(_QWORD *)(v39 + 8 * v13);
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v38)
        {
LABEL_37:
          swift_release(v5);
          v3 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v22 = *(_QWORD *)(v39 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v13 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_46;
            if (v13 >= v38)
              goto LABEL_37;
            v22 = *(_QWORD *)(v39 + 8 * v13);
            ++v23;
            if (v22)
              goto LABEL_24;
          }
        }
        v13 = v23;
      }
    }
LABEL_24:
    v11 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_25:
    v24 = *(_QWORD *)(v5 + 48) + 40 * v19;
    if ((a2 & 1) != 0)
    {
      v25 = *(_OWORD *)v24;
      v26 = *(_OWORD *)(v24 + 16);
      v42 = *(_QWORD *)(v24 + 32);
      v40 = v25;
      v41 = v26;
      v27 = *(id *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    }
    else
    {
      sub_10006777C(v24, (uint64_t)&v40);
      v27 = *(id *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    }
    v28 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v12 + 8 * v31);
      }
      while (v35 == -1);
      v14 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v8 + 48) + 40 * v14;
    v16 = v40;
    v17 = v41;
    *(_QWORD *)(v15 + 32) = v42;
    *(_OWORD *)v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v14) = v27;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v21 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v21, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

void sub_1002E1084(uint64_t a1, uint64_t a2)
{
  sub_1002E2720(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for URL, &qword_10064DB38, &qword_10064D980, (uint64_t)&protocol conformance descriptor for URL);
}

void sub_1002E10A8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  Swift::Int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  int v43;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10006922C((uint64_t *)&unk_10064DB40);
  v43 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v42 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v40 = v3;
  v41 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  v18 = swift_retain();
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v41)
      break;
    v24 = v42;
    v25 = v42[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_36;
      v25 = v42[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release(v10);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v41)
              goto LABEL_36;
            v25 = v42[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(void **)(*(_QWORD *)(v10 + 48) + 8 * v22);
    v28 = *(_QWORD *)(v7 + 72);
    v29 = *(_QWORD *)(v10 + 56) + v28 * v22;
    if ((v43 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 32))(v9, v29, v6, v18);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v9, v29, v6, v18);
      v30 = v27;
    }
    v31 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v12 + 40));
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v20) = v27;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 56) + v28 * v20, v9, v6);
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v40;
  v24 = v42;
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  swift_release(v10);
  *v3 = v12;
}

void sub_1002E13FC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10006922C(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v38 = v4;
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v22 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v23 = v22 | (v15 << 6);
      goto LABEL_34;
    }
    v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v13)
      break;
    v25 = (_QWORD *)(v6 + 64);
    v26 = *(_QWORD *)(v39 + 8 * v24);
    ++v15;
    if (!v26)
    {
      v15 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_36;
      v26 = *(_QWORD *)(v39 + 8 * v15);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v13)
        {
LABEL_36:
          swift_release(v6);
          v4 = v38;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v39 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v15 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v15 >= v13)
              goto LABEL_36;
            v26 = *(_QWORD *)(v39 + 8 * v15);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v15 = v27;
      }
    }
LABEL_33:
    v12 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_34:
    v32 = 8 * v23;
    v33 = *(void **)(*(_QWORD *)(v6 + 48) + v32);
    v34 = *(void **)(*(_QWORD *)(v6 + 56) + v32);
    if ((a2 & 1) == 0)
    {
      v35 = v33;
      v36 = v34;
    }
    v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v9 + 40));
    v17 = -1 << *(_BYTE *)(v9 + 32);
    v18 = v16 & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v14 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = 8 * v20;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v33;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v38;
  v25 = (_QWORD *)(v6 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v6 + 32);
  if (v37 >= 64)
    bzero(v25, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v37;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  swift_release(v6);
  *v4 = v9;
}

void sub_1002E16C8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v5 = type metadata accessor for URL(0);
  v46 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v2;
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10006922C((uint64_t *)&unk_10064DA08);
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    swift_release(v8);
    v39 = v42;
LABEL_44:
    *v39 = v10;
    return;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v44 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v43 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  v16 = swift_retain();
  v17 = 0;
  HIDWORD(v41) = a2;
  v18 = 16;
  if ((a2 & 1) != 0)
    v18 = 32;
  v45 = v18;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_26;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v22 >= v43)
    {
      swift_release(v8);
      v39 = v42;
      v23 = v44;
      if ((v41 & 0x100000000) != 0)
      {
LABEL_39:
        v40 = 1 << *(_BYTE *)(v8 + 32);
        if (v40 >= 64)
          bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v23 = -1 << v40;
        *(_QWORD *)(v8 + 16) = 0;
      }
LABEL_43:
      swift_release(v8);
      goto LABEL_44;
    }
    v23 = v44;
    v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v43)
        goto LABEL_36;
      v24 = v44[v17];
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_26:
    v26 = *(_QWORD *)(v46 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v46 + v45))(v7, *(_QWORD *)(v8 + 48) + v26 * v21, v5, v16);
    v27 = v8;
    v28 = *(_BYTE *)(*(_QWORD *)(v8 + 56) + v21);
    v29 = *(_QWORD *)(v10 + 40);
    v30 = sub_10005A360(&qword_10064D980, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v31 = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v5, v30);
    v32 = -1 << *(_BYTE *)(v10 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v34);
      }
      while (v38 == -1);
      v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v46 + 32))(*(_QWORD *)(v10 + 48) + v26 * v19, v7, v5);
    *(_BYTE *)(*(_QWORD *)(v10 + 56) + v19) = v28;
    ++*(_QWORD *)(v10 + 16);
    v8 = v27;
  }
  v25 = v22 + 2;
  if (v25 >= v43)
  {
LABEL_36:
    swift_release(v8);
    v39 = v42;
    if ((v41 & 0x100000000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v24 = v44[v25];
  if (v24)
  {
    v17 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v17 >= v43)
      goto LABEL_36;
    v24 = v44[v17];
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
}

void sub_1002E1A64(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  Swift::UInt64 v46;
  Swift::Int v47;
  unint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t *v75;
  _QWORD *v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  Swift::UInt64 v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  Swift::UInt64 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  int v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  char v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10006922C(&qword_10064DA00);
  v80 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)(v4, v5, a2);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v76 = (_QWORD *)(v4 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 64);
    v77 = (unint64_t)(v8 + 63) >> 6;
    v78 = v6 + 64;
    swift_retain();
    v11 = 0;
    v79 = v4;
    while (1)
    {
      if (v10)
      {
        v58 = __clz(__rbit64(v10));
        v59 = (v10 - 1) & v10;
        v60 = v58 | (v11 << 6);
      }
      else
      {
        v61 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_37:
          __break(1u);
          return;
        }
        if (v61 >= v77)
          goto LABEL_30;
        v62 = v76[v61];
        ++v11;
        if (!v62)
        {
          v11 = v61 + 1;
          if (v61 + 1 >= v77)
            goto LABEL_30;
          v62 = v76[v11];
          if (!v62)
          {
            v63 = v61 + 2;
            if (v63 >= v77)
            {
LABEL_30:
              swift_release(v4);
              if ((v80 & 1) != 0)
              {
                v74 = 1 << *(_BYTE *)(v4 + 32);
                if (v74 >= 64)
                  bzero(v76, ((unint64_t)(v74 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v76 = -1 << v74;
                *(_QWORD *)(v4 + 16) = 0;
              }
              break;
            }
            v62 = v76[v63];
            if (!v62)
            {
              while (1)
              {
                v11 = v63 + 1;
                if (__OFADD__(v63, 1))
                  goto LABEL_37;
                if (v11 >= v77)
                  goto LABEL_30;
                v62 = v76[v11];
                ++v63;
                if (v62)
                  goto LABEL_27;
              }
            }
            v11 = v63;
          }
        }
LABEL_27:
        v59 = (v62 - 1) & v62;
        v60 = __clz(__rbit64(v62)) + (v11 << 6);
      }
      v84 = v59;
      v85 = v11;
      if ((v80 & 1) != 0)
      {
        v64 = *(_QWORD *)(v4 + 56);
        v65 = *(_QWORD *)(v4 + 48) + 168 * v60;
        v32 = *(_QWORD *)v65;
        v33 = *(_QWORD *)(v65 + 8);
        v34 = *(_QWORD *)(v65 + 16);
        v35 = *(_QWORD *)(v65 + 24);
        v36 = *(_QWORD *)(v65 + 32);
        v37 = *(_BYTE *)(v65 + 40);
        v38 = *(_BYTE *)(v65 + 41);
        v131 = *(_DWORD *)(v65 + 43);
        v132 = *(_BYTE *)(v65 + 47);
        v39 = *(_BYTE *)(v65 + 42);
        v82 = *(_QWORD *)(v65 + 56);
        v83 = *(_QWORD *)(v65 + 48);
        v90 = *(_QWORD *)(v65 + 72);
        v91 = *(_QWORD *)(v65 + 64);
        v88 = *(_QWORD *)(v65 + 88);
        v89 = *(_QWORD *)(v65 + 80);
        v40 = *(double *)(v65 + 112);
        v86 = *(_QWORD *)(v65 + 104);
        v87 = *(_QWORD *)(v65 + 96);
        v41 = *(double *)(v65 + 120);
        v42 = *(double *)(v65 + 128);
        v43 = *(double *)(v65 + 136);
        v44 = *(double *)(v65 + 144);
        v45 = *(double *)(v65 + 152);
        v81 = *(_QWORD *)(v65 + 160);
        v66 = (__int128 *)(v64 + 224 * v60);
        v67 = v66[13];
        v129 = v66[12];
        v130 = v67;
        v68 = v66[11];
        v127 = v66[10];
        v128 = v68;
        v69 = v66[9];
        v125 = v66[8];
        v126 = v69;
        v70 = v66[7];
        v123 = v66[6];
        v124 = v70;
        v71 = v66[5];
        v121 = v66[4];
        v122 = v71;
        v72 = v66[3];
        v119 = v66[2];
        v120 = v72;
        v73 = v66[1];
        v117 = *v66;
        v118 = v73;
      }
      else
      {
        v12 = *(_QWORD *)(v4 + 48) + 168 * v60;
        v13 = *(_OWORD *)(v12 + 48);
        v14 = *(_OWORD *)(v12 + 64);
        v15 = *(_OWORD *)(v12 + 96);
        v97 = *(_OWORD *)(v12 + 80);
        v98 = v15;
        v95 = v13;
        v96 = v14;
        v16 = *(_OWORD *)(v12 + 112);
        v17 = *(_OWORD *)(v12 + 128);
        v18 = *(_OWORD *)(v12 + 144);
        v102 = *(_QWORD *)(v12 + 160);
        v100 = v17;
        v101 = v18;
        v99 = v16;
        v19 = *(_OWORD *)(v12 + 32);
        v20 = *(_OWORD *)v12;
        v93 = *(_OWORD *)(v12 + 16);
        v94 = v19;
        v92 = v20;
        v21 = (__int128 *)(*(_QWORD *)(v4 + 56) + 224 * v60);
        v22 = v21[1];
        v103 = *v21;
        v104 = v22;
        v23 = v21[5];
        v25 = v21[2];
        v24 = v21[3];
        v107 = v21[4];
        v108 = v23;
        v105 = v25;
        v106 = v24;
        v26 = v21[6];
        v27 = v21[7];
        v28 = v21[9];
        v111 = v21[8];
        v112 = v28;
        v109 = v26;
        v110 = v27;
        v29 = v21[10];
        v30 = v21[11];
        v31 = v21[13];
        v115 = v21[12];
        v116 = v31;
        v113 = v29;
        v114 = v30;
        sub_1001456B8((uint64_t)&v92);
        sub_1001456B8((uint64_t)&v103);
        v127 = v113;
        v128 = v114;
        v129 = v115;
        v130 = v116;
        v123 = v109;
        v124 = v110;
        v125 = v111;
        v126 = v112;
        v119 = v105;
        v120 = v106;
        v121 = v107;
        v122 = v108;
        v117 = v103;
        v118 = v104;
        v33 = *((_QWORD *)&v92 + 1);
        v32 = v92;
        v35 = *((_QWORD *)&v93 + 1);
        v34 = v93;
        v36 = v94;
        v37 = BYTE8(v94);
        v38 = BYTE9(v94);
        v39 = BYTE10(v94);
        v131 = *(_DWORD *)((char *)&v94 + 11);
        v132 = HIBYTE(v94);
        v82 = *((_QWORD *)&v95 + 1);
        v83 = v95;
        v90 = *((_QWORD *)&v96 + 1);
        v91 = v96;
        v88 = *((_QWORD *)&v97 + 1);
        v89 = v97;
        v40 = *(double *)&v99;
        v86 = *((_QWORD *)&v98 + 1);
        v87 = v98;
        v41 = *((double *)&v99 + 1);
        v43 = *((double *)&v100 + 1);
        v42 = *(double *)&v100;
        v45 = *((double *)&v101 + 1);
        v44 = *(double *)&v101;
        v81 = v102;
      }
      Hasher.init(_seed:)(&v103, *(_QWORD *)(v7 + 40));
      v133 = v32;
      v134 = v33;
      v135 = v34;
      v136 = v35;
      v137 = v36;
      v138 = v37 & 1;
      v139 = v38 & 1;
      v140 = v39 & 1;
      v141 = v83;
      v142 = v82;
      v143 = v91;
      v144 = v90;
      v145 = v89;
      v146 = v88;
      v147 = v87;
      v148 = v86;
      sub_100390ED8((uint64_t)&v103);
      sub_100312808(v40, v41);
      UIEdgeInsets.hash(into:)(&v103, v42, v43, v44, v45);
      if ((v81 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v46 = v81;
      else
        v46 = 0;
      Hasher._combine(_:)(v46);
      v47 = Hasher._finalize()();
      v48 = _HashTable.nextHole(atOrAfter:)(v47 & ~(-1 << *(_BYTE *)(v7 + 32)), v78, ~(-1 << *(_BYTE *)(v7 + 32)));
      *(_QWORD *)(v78 + ((v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v48;
      v49 = *(_QWORD *)(v7 + 48) + 168 * v48;
      *(_QWORD *)v49 = v32;
      *(_QWORD *)(v49 + 8) = v33;
      *(_QWORD *)(v49 + 16) = v34;
      *(_QWORD *)(v49 + 24) = v35;
      *(_QWORD *)(v49 + 32) = v36;
      *(_BYTE *)(v49 + 40) = v37;
      *(_BYTE *)(v49 + 41) = v38;
      *(_BYTE *)(v49 + 42) = v39;
      *(_DWORD *)(v49 + 43) = v131;
      *(_BYTE *)(v49 + 47) = v132;
      *(_QWORD *)(v49 + 48) = v83;
      *(_QWORD *)(v49 + 56) = v82;
      *(_QWORD *)(v49 + 64) = v91;
      *(_QWORD *)(v49 + 72) = v90;
      *(_QWORD *)(v49 + 80) = v89;
      *(_QWORD *)(v49 + 88) = v88;
      *(_QWORD *)(v49 + 96) = v87;
      *(_QWORD *)(v49 + 104) = v86;
      *(double *)(v49 + 112) = v40;
      *(double *)(v49 + 120) = v41;
      *(double *)(v49 + 128) = v42;
      *(double *)(v49 + 136) = v43;
      *(double *)(v49 + 144) = v44;
      *(double *)(v49 + 152) = v45;
      *(_QWORD *)(v49 + 160) = v81;
      v50 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 224 * v48);
      v51 = v128;
      v50[10] = v127;
      v50[11] = v51;
      v52 = v130;
      v50[12] = v129;
      v50[13] = v52;
      v53 = v124;
      v50[6] = v123;
      v50[7] = v53;
      v54 = v126;
      v50[8] = v125;
      v50[9] = v54;
      v55 = v120;
      v50[2] = v119;
      v50[3] = v55;
      v56 = v122;
      v50[4] = v121;
      v50[5] = v56;
      v57 = v118;
      *v50 = v117;
      v50[1] = v57;
      ++*(_QWORD *)(v7 + 16);
      v4 = v79;
      v10 = v84;
      v11 = v85;
    }
  }
  swift_release(v4);
  *v75 = v7;
}

void sub_1002E2074(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::UInt64 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  Swift::Int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  Swift::UInt64 v35;
  Swift::UInt v36;
  void *v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t i;
  char v49;
  __int128 v50;
  _QWORD v51[10];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C((uint64_t *)&unk_100653290);
  v49 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v46 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v44 = v3;
    v45 = (unint64_t)(v9 + 63) >> 6;
    v47 = v7 + 64;
    swift_retain();
    v12 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v11)
      {
        v29 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v30 = v29 | (v12 << 6);
      }
      else
      {
        v31 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_36:
          __break(1u);
          return;
        }
        if (v31 >= v45)
          goto LABEL_29;
        v32 = v46[v31];
        ++v12;
        if (!v32)
        {
          v12 = v31 + 1;
          if (v31 + 1 >= v45)
            goto LABEL_29;
          v32 = v46[v12];
          if (!v32)
          {
            v33 = v31 + 2;
            if (v33 >= v45)
            {
LABEL_29:
              swift_release(v5);
              v3 = v44;
              if ((v49 & 1) != 0)
              {
                v43 = 1 << *(_BYTE *)(v5 + 32);
                if (v43 > 63)
                  bzero(v46, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v46 = -1 << v43;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v32 = v46[v33];
            if (!v32)
            {
              while (1)
              {
                v12 = v33 + 1;
                if (__OFADD__(v33, 1))
                  goto LABEL_36;
                if (v12 >= v45)
                  goto LABEL_29;
                v32 = v46[v12];
                ++v33;
                if (v32)
                  goto LABEL_26;
              }
            }
            v12 = v33;
          }
        }
LABEL_26:
        v11 = (v32 - 1) & v32;
        v30 = __clz(__rbit64(v32)) + (v12 << 6);
      }
      v34 = *(_QWORD *)(v5 + 48) + 40 * v30;
      v35 = *(_QWORD *)v34;
      v36 = *(_QWORD *)(v34 + 24);
      v37 = *(void **)(v34 + 32);
      v38 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v30);
      v50 = *(_OWORD *)(v34 + 8);
      v39 = *(void **)(v34 + 16);
      if ((v49 & 1) == 0)
      {
        v40 = (id)v50;
        v41 = v39;
        v42 = v37;
      }
      Hasher.init(_seed:)(v51, *(_QWORD *)(v8 + 40));
      if ((v35 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v13 = v35;
      else
        v13 = 0;
      Hasher._combine(_:)(v13);
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      v16 = v15;
      v17 = (id)v50;
      String.hash(into:)(v51, v14, v16);

      swift_bridgeObjectRelease(v16);
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v20 = v19;
      v21 = v39;
      String.hash(into:)(v51, v18, v20);

      swift_bridgeObjectRelease(v20);
      Hasher._combine(_:)(v36);
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v24 = v23;
      v25 = v37;
      String.hash(into:)(v51, v22, v24);

      swift_bridgeObjectRelease(v24);
      v26 = Hasher._finalize()();
      v27 = _HashTable.nextHole(atOrAfter:)(v26 & ~(-1 << *(_BYTE *)(v8 + 32)), v47, ~(-1 << *(_BYTE *)(v8 + 32)));
      *(_QWORD *)(v47 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      v28 = *(_QWORD *)(v8 + 48) + 40 * v27;
      *(_QWORD *)v28 = v35;
      *(_OWORD *)(v28 + 8) = v50;
      *(_QWORD *)(v28 + 24) = v36;
      *(_QWORD *)(v28 + 32) = v25;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v27) = v38;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_1002E23E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C(&qword_10064DB28);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v24 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v25 = v24 | (v13 << 6);
      goto LABEL_34;
    }
    v26 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v26 >= v41)
      break;
    v27 = (_QWORD *)(v5 + 64);
    v28 = *(_QWORD *)(v42 + 8 * v26);
    ++v13;
    if (!v28)
    {
      v13 = v26 + 1;
      if (v26 + 1 >= v41)
        goto LABEL_36;
      v28 = *(_QWORD *)(v42 + 8 * v13);
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = *(_QWORD *)(v42 + 8 * v29);
        if (!v28)
        {
          while (1)
          {
            v13 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v13 >= v41)
              goto LABEL_36;
            v28 = *(_QWORD *)(v42 + 8 * v13);
            ++v29;
            if (v28)
              goto LABEL_33;
          }
        }
        v13 = v29;
      }
    }
LABEL_33:
    v11 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v13 << 6);
LABEL_34:
    v34 = 8 * v25;
    v35 = *(void **)(*(_QWORD *)(v5 + 48) + v34);
    v36 = *(void **)(*(_QWORD *)(v5 + 56) + v34);
    if ((v43 & 1) == 0)
    {
      v37 = v35;
      v38 = v36;
    }
    v14 = *(_QWORD *)(v8 + 40);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v17 = v16;
    Hasher.init(_seed:)(v44, v14);
    String.hash(into:)(v44, v15, v17);
    v18 = Hasher._finalize()();
    swift_bridgeObjectRelease(v17);
    v19 = -1 << *(_BYTE *)(v8 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v32 = v21 == v31;
        if (v21 == v31)
          v21 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v33 == -1);
      v22 = __clz(__rbit64(~v33)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    v23 = 8 * v22;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v23) = v35;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v23) = v36;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v27 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v27, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1002E2714(uint64_t a1, uint64_t a2)
{
  sub_1002E317C(a1, a2, &qword_10064D9D0);
}

void sub_1002E2720(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t i;
  uint64_t (*v50)(uint64_t);
  unint64_t *v51;
  uint64_t v52;
  int v53;

  v51 = a5;
  v52 = a6;
  v8 = v6;
  v50 = a3;
  v11 = a3(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v46 - v13;
  v15 = *v8;
  if (*(_QWORD *)(*v8 + 24) > a1)
    a1 = *(_QWORD *)(*v8 + 24);
  sub_10006922C(a4);
  v53 = a2;
  v16 = static _DictionaryStorage.resize(original:capacity:move:)(v15, a1, a2);
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_43;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 64);
  v48 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v46 = v8;
  v47 = (unint64_t)(v18 + 63) >> 6;
  v22 = v16 + 64;
  v23 = swift_retain();
  v24 = 0;
  for (i = v15; ; v15 = i)
  {
    if (v21)
    {
      v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v27 = v26 | (v24 << 6);
      goto LABEL_24;
    }
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v28 >= v47)
      break;
    v29 = v48;
    v30 = v48[v28];
    ++v24;
    if (!v30)
    {
      v24 = v28 + 1;
      if (v28 + 1 >= v47)
        goto LABEL_36;
      v30 = v48[v24];
      if (!v30)
      {
        v31 = v28 + 2;
        if (v31 >= v47)
        {
LABEL_36:
          swift_release(v15);
          v8 = v46;
          if ((v53 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v30 = v48[v31];
        if (!v30)
        {
          while (1)
          {
            v24 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_45;
            if (v24 >= v47)
              goto LABEL_36;
            v30 = v48[v24];
            ++v31;
            if (v30)
              goto LABEL_23;
          }
        }
        v24 = v31;
      }
    }
LABEL_23:
    v21 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_24:
    v32 = *(_QWORD *)(v12 + 72);
    v33 = *(_QWORD *)(v15 + 48) + v32 * v27;
    if ((v53 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v12 + 32))(v14, v33, v11, v23);
      v34 = *(id *)(*(_QWORD *)(v15 + 56) + 8 * v27);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v12 + 16))(v14, v33, v11, v23);
      v34 = *(id *)(*(_QWORD *)(v15 + 56) + 8 * v27);
    }
    v35 = *(_QWORD *)(v17 + 40);
    v36 = sub_10005A360(v51, v50, v52);
    v37 = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v11, v36);
    v38 = -1 << *(_BYTE *)(v17 + 32);
    v39 = v37 & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v22 + 8 * (v39 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v22 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v22 + 8 * v40);
      }
      while (v44 == -1);
      v25 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(*(_QWORD *)(v17 + 48) + v32 * v25, v14, v11);
    *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v25) = v34;
    ++*(_QWORD *)(v17 + 16);
  }
  swift_release(v15);
  v8 = v46;
  v29 = v48;
  if ((v53 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v45 = 1 << *(_BYTE *)(v15 + 32);
  if (v45 >= 64)
    bzero(v29, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v29 = -1 << v45;
  *(_QWORD *)(v15 + 16) = 0;
LABEL_43:
  swift_release(v15);
  *v8 = v17;
}

void sub_1002E2AAC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __n128 v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t *v48;
  int64_t v49;
  _QWORD *v50;
  uint64_t v51;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = v2;
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10006922C(&qword_100653190);
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    swift_release(v9);
    v44 = v48;
LABEL_44:
    *v44 = v11;
    return;
  }
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v50 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v49 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  v17 = swift_retain();
  v18 = 0;
  v47 = a2;
  v19 = 16;
  if ((a2 & 1) != 0)
    v19 = 32;
  v51 = v19;
  while (1)
  {
    if (v15)
    {
      v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v23 = v22 | (v18 << 6);
      goto LABEL_26;
    }
    v24 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v24 >= v49)
    {
      swift_release(v9);
      v44 = v48;
      v25 = v50;
      if ((v47 & 1) != 0)
      {
LABEL_39:
        v45 = 1 << *(_BYTE *)(v9 + 32);
        if (v45 >= 64)
          bzero(v25, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v25 = -1 << v45;
        *(_QWORD *)(v9 + 16) = 0;
      }
LABEL_43:
      swift_release(v9);
      goto LABEL_44;
    }
    v25 = v50;
    v26 = v50[v24];
    ++v18;
    if (!v26)
    {
      v18 = v24 + 1;
      if (v24 + 1 >= v49)
        goto LABEL_36;
      v26 = v50[v18];
      if (!v26)
        break;
    }
LABEL_25:
    v15 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v18 << 6);
LABEL_26:
    v28 = *(_QWORD *)(v6 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + v51))(v8, *(_QWORD *)(v9 + 48) + v28 * v23, v5, v17);
    v29 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 32 * v23);
    v31 = v29[2];
    v30 = v29[3];
    v33 = *v29;
    v32 = v29[1];
    v34 = *(_QWORD *)(v11 + 40);
    v35 = sub_10005A360((unint64_t *)&unk_1006443A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v5, v35);
    v37 = -1 << *(_BYTE *)(v11 + 32);
    v38 = v36 & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v16 + 8 * (v38 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v16 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v16 + 8 * v39);
      }
      while (v43 == -1);
      v20 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v28 * v20, v8, v5);
    v21 = (_QWORD *)(*(_QWORD *)(v11 + 56) + 32 * v20);
    *v21 = v33;
    v21[1] = v32;
    v21[2] = v31;
    v21[3] = v30;
    ++*(_QWORD *)(v11 + 16);
  }
  v27 = v24 + 2;
  if (v27 >= v49)
  {
LABEL_36:
    swift_release(v9);
    v44 = v48;
    if ((v47 & 1) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v26 = v50[v27];
  if (v26)
  {
    v18 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v18 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v18 >= v49)
      goto LABEL_36;
    v26 = v50[v18];
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
}

void sub_1002E2E54(uint64_t a1, uint64_t a2)
{
  sub_1002E2E60(a1, a2, &qword_10064DAF8);
}

void sub_1002E2E60(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10006922C(a3);
  v38 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  swift_retain(v6);
  v14 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_unknownObjectRetain(v34);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v24 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  swift_release(v6);
  *v4 = v9;
}

void sub_1002E3170(uint64_t a1, uint64_t a2)
{
  sub_1002E317C(a1, a2, (uint64_t *)&unk_10064DB00);
}

void sub_1002E317C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10006922C(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_44;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v40 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v38 = v4;
  v39 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  swift_retain(v6);
  v14 = 0;
  while (1)
  {
    if (v12)
    {
      v19 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_25;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v21 >= v39)
      break;
    v22 = (_QWORD *)(v6 + 64);
    v23 = *(_QWORD *)(v40 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v39)
        goto LABEL_37;
      v23 = *(_QWORD *)(v40 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v39)
        {
LABEL_37:
          swift_release(v6);
          v4 = v38;
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v23 = *(_QWORD *)(v40 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_46;
            if (v14 >= v39)
              goto LABEL_37;
            v23 = *(_QWORD *)(v40 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_24;
          }
        }
        v14 = v24;
      }
    }
LABEL_24:
    v12 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_25:
    v25 = *(_QWORD *)(v6 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v43 = *(_QWORD *)(v25 + 32);
      v41 = v26;
      v42 = v27;
      v28 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v20);
    }
    else
    {
      sub_10006777C(v25, (uint64_t)&v41);
      v28 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v20);
      swift_retain(v28);
    }
    v29 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v9 + 40));
    v30 = -1 << *(_BYTE *)(v9 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v13 + 8 * v32);
      }
      while (v36 == -1);
      v15 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v9 + 48) + 40 * v15;
    v17 = v41;
    v18 = v42;
    *(_QWORD *)(v16 + 32) = v43;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v15) = v28;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v38;
  v22 = (_QWORD *)(v6 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v37 = 1 << *(_BYTE *)(v6 + 32);
  if (v37 >= 64)
    bzero(v22, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v37;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_44:
  swift_release(v6);
  *v4 = v9;
}

void sub_1002E3488(uint64_t a1, uint64_t a2)
{
  sub_1002E34A0(a1, a2, &qword_10064D9A8);
}

void sub_1002E3494(uint64_t a1, uint64_t a2)
{
  sub_1002E34A0(a1, a2, &qword_10064D9A0);
}

void sub_1002E34A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  char v20;
  void *v21;
  id v22;
  uint64_t v23;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10006922C(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 1 << *(_BYTE *)(v6 + 32);
    v10 = (_QWORD *)(v6 + 64);
    v11 = -1;
    if (v9 < 64)
      v11 = ~(-1 << v9);
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v13 = (unint64_t)(v9 + 63) >> 6;
    swift_retain();
    v14 = 0;
    while (1)
    {
      if (v12)
      {
        v15 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v16 = v15 | (v14 << 6);
      }
      else
      {
        v17 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return;
        }
        if (v17 >= v13)
          goto LABEL_25;
        v18 = v10[v17];
        ++v14;
        if (!v18)
        {
          v14 = v17 + 1;
          if (v17 + 1 >= v13)
            goto LABEL_25;
          v18 = v10[v14];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v13)
            {
LABEL_25:
              swift_release(v6);
              if ((a2 & 1) != 0)
              {
                v23 = 1 << *(_BYTE *)(v6 + 32);
                if (v23 > 63)
                  bzero((void *)(v6 + 64), ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v10 = -1 << v23;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v18 = v10[v19];
            if (!v18)
            {
              while (1)
              {
                v14 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_32;
                if (v14 >= v13)
                  goto LABEL_25;
                v18 = v10[v14];
                ++v19;
                if (v18)
                  goto LABEL_22;
              }
            }
            v14 = v19;
          }
        }
LABEL_22:
        v12 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v14 << 6);
      }
      v20 = *(_BYTE *)(*(_QWORD *)(v6 + 48) + v16);
      v21 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v16);
      if ((a2 & 1) == 0)
        v22 = v21;
      sub_1002E54D0(v20, (uint64_t)v21, v8);
    }
  }
  swift_release(v6);
  *v4 = v8;
}

void sub_1002E3678(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  __int128 *v23;
  id v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10006922C((uint64_t *)&unk_10064D990);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_25;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v18 >= v12)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v34 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v12)
        goto LABEL_37;
      v20 = *(_QWORD *)(v34 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v20 = *(_QWORD *)(v34 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_46;
            if (v14 >= v12)
              goto LABEL_37;
            v20 = *(_QWORD *)(v34 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_24;
          }
        }
        v14 = v21;
      }
    }
LABEL_24:
    v11 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_25:
    v22 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v23 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v17);
    if ((a2 & 1) != 0)
    {
      sub_1000E85C4(v23, (uint64_t)v35);
    }
    else
    {
      sub_100092328((uint64_t)v23, (uint64_t)v35);
      v24 = v22;
    }
    v25 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v26 = -1 << *(_BYTE *)(v8 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      v15 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15) = v22;
    sub_1000E85C4(v35, *(_QWORD *)(v8 + 56) + 40 * v15);
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v19 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

unint64_t sub_1002E3954(int64_t a1, uint64_t a2)
{
  return sub_1002E3C18(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for URL, &qword_10064D980, (uint64_t)&protocol conformance descriptor for URL, type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario);
}

void sub_1002E3978(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[9];

  v2 = a2;
  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      v43 = v7;
      while (1)
      {
        v10 = 16 * v6;
        v11 = *(_QWORD *)(v2 + 48) + 16 * v6;
        v12 = *(void **)v11;
        v13 = *(_BYTE *)(v11 + 8);
        Hasher.init(_seed:)(v44, *(_QWORD *)(v2 + 40));
        if ((v13 & 1) != 0)
        {
          Hasher._combine(_:)(1uLL);
          v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
          v15 = v4;
          v17 = v16;
          v18 = v2;
          v19 = v9;
          v20 = v12;
          String.hash(into:)(v44, v14, v17);

          v9 = v19;
          v2 = v18;
          v21 = v17;
          v4 = v15;
          v7 = v43;
          swift_bridgeObjectRelease(v21);
        }
        else
        {
          Hasher._combine(_:)(0);
          v22 = v12;
          NSObject.hash(into:)(v44);
        }
        v23 = Hasher._finalize()();

        v24 = v23 & v7;
        if (v3 >= (uint64_t)v9)
          break;
        if (v24 < v9)
          goto LABEL_14;
LABEL_15:
        v25 = *(_QWORD *)(v2 + 48);
        v26 = (_OWORD *)(v25 + 16 * v3);
        v27 = (_OWORD *)(v25 + v10);
        if (16 * v3 != v10 || v26 >= v27 + 1)
          *v26 = *v27;
        v28 = *(_QWORD *)(v2 + 56);
        v29 = type metadata accessor for RestorableSettings(0);
        v30 = *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72);
        v31 = v30 * v3;
        v32 = v28 + v30 * v3;
        v33 = v30 * v6;
        v34 = v28 + v30 * v6;
        v35 = v34 + v30;
        if (v31 < v33 || v32 >= v35)
        {
          swift_arrayInitWithTakeFrontToBack(v32, v34, 1, v29);
        }
        else
        {
          v3 = v6;
          if (v31 == v33)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront(v32);
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_24;
      }
      if (v24 < v9)
        goto LABEL_6;
LABEL_14:
      if (v3 < (uint64_t)v24)
        goto LABEL_6;
      goto LABEL_15;
    }
LABEL_24:
    v37 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v38 = *v37;
    v39 = (-1 << v3) - 1;
  }
  else
  {
    v37 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v39 = *v37;
    v38 = (-1 << a1) - 1;
  }
  *v37 = v39 & v38;
  v40 = *(_QWORD *)(v2 + 16);
  v41 = __OFSUB__(v40, 1);
  v42 = v40 - 1;
  if (v41)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v42;
    ++*(_DWORD *)(v2 + 36);
  }
}

unint64_t sub_1002E3BF4(int64_t a1, uint64_t a2)
{
  return sub_1002E3C18(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (unint64_t *)&unk_1006443A0, (uint64_t)&protocol conformance descriptor for UUID, type metadata accessor for DOCSharedTestableProgressOperationProvider.UpdateHandlerInfo);
}

unint64_t sub_1002E3C18(int64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  uint64_t v8;
  unint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(_QWORD);
  void (*v47)(char *, unint64_t, uint64_t);
  unint64_t v48;
  uint64_t (*v49)(uint64_t);
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;

  v46 = a6;
  v50 = a4;
  v51 = a5;
  v49 = a3;
  v8 = a3(0);
  v52 = *(_QWORD *)(v8 - 8);
  result = __chkstk_darwin(v8);
  v11 = (char *)&v45 - v10;
  v12 = a2 + 64;
  v13 = -1 << *(_BYTE *)(a2 + 32);
  v14 = (a1 + 1) & ~v13;
  if (((1 << v14) & *(_QWORD *)(a2 + 64 + 8 * (v14 >> 6))) != 0)
  {
    v15 = ~v13;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v13);
    if ((*(_QWORD *)(v12 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
    {
      v48 = (result + 1) & v15;
      v16 = *(_QWORD *)(v52 + 72);
      v47 = *(void (**)(char *, unint64_t, uint64_t))(v52 + 16);
      v17 = v15;
      do
      {
        v18 = v12;
        v19 = v16;
        v20 = v16 * v14;
        v47(v11, *(_QWORD *)(a2 + 48) + v16 * v14, v8);
        v21 = v17;
        v22 = *(_QWORD *)(a2 + 40);
        v23 = sub_10005A360(v50, v49, v51);
        v24 = dispatch thunk of Hashable._rawHashValue(seed:)(v22, v8, v23);
        result = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v11, v8);
        v25 = v24 & v21;
        v17 = v21;
        if (a1 >= (uint64_t)v48)
        {
          if (v25 >= v48 && a1 >= (uint64_t)v25)
          {
LABEL_16:
            v28 = *(_QWORD *)(a2 + 48);
            v29 = v28 + v19 * a1;
            v30 = v28 + v20;
            if (v19 * a1 < v20 || v29 >= v30 + v19)
            {
              swift_arrayInitWithTakeFrontToBack(v29, v30, 1, v8);
            }
            else if (v19 * a1 != v20)
            {
              swift_arrayInitWithTakeBackToFront(v29);
            }
            v31 = *(_QWORD *)(a2 + 56);
            v32 = v46(0);
            v33 = *(_QWORD *)(*(_QWORD *)(v32 - 8) + 72);
            v34 = v33 * a1;
            result = v31 + v33 * a1;
            v35 = v33 * v14;
            v36 = v31 + v33 * v14;
            v37 = v36 + v33;
            v38 = v34 < v35 || result >= v37;
            v12 = v18;
            if (v38)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v36, 1, v32);
              a1 = v14;
              v17 = v21;
            }
            else
            {
              a1 = v14;
              v17 = v21;
              if (v34 != v35)
              {
                result = swift_arrayInitWithTakeBackToFront(result);
                a1 = v14;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v25 >= v48 || a1 >= (uint64_t)v25)
        {
          goto LABEL_16;
        }
        v12 = v18;
LABEL_5:
        v14 = (v14 + 1) & v17;
        v16 = v19;
      }
      while (((*(_QWORD *)(v12 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
    }
    v39 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    v40 = *v39;
    v41 = (-1 << a1) - 1;
  }
  else
  {
    v39 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    v41 = *v39;
    v40 = (-1 << a1) - 1;
  }
  *v39 = v41 & v40;
  v42 = *(_QWORD *)(a2 + 16);
  v43 = __OFSUB__(v42, 1);
  v44 = v42 - 1;
  if (v43)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v44;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1002E3EE8(unint64_t result, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  Swift::UInt v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD v36[9];

  v2 = result;
  v3 = a2 + 64;
  v4 = -1 << *(_BYTE *)(a2 + 32);
  v5 = (result + 1) & ~v4;
  if (((1 << v5) & *(_QWORD *)(a2 + 64 + 8 * (v5 >> 6))) != 0)
  {
    v6 = ~v4;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v4);
    if ((*(_QWORD *)(v3 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
    {
      v7 = (result + 1) & v6;
      v8 = a2;
      while (1)
      {
        v9 = 24 * v5;
        v10 = *(_QWORD *)(v8 + 48) + 24 * v5;
        v12 = *(_QWORD *)v10;
        v11 = *(_QWORD *)(v10 + 8);
        v13 = *(unsigned __int8 *)(v10 + 16);
        Hasher.init(_seed:)(v36, *(_QWORD *)(v8 + 40));
        if (v13)
        {
          if (v13 != 1)
            __asm { BR              X8 }
          v14 = 5;
        }
        else
        {
          v14 = 4;
        }
        Hasher._combine(_:)(v14);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v36, v12, v11);
        v15 = Hasher._finalize()();
        result = sub_1002B81DC(v12, v11, v13);
        v16 = v15 & v6;
        if (v2 >= (uint64_t)v7)
        {
          v8 = a2;
          if (v16 < v7)
            goto LABEL_5;
        }
        else
        {
          v8 = a2;
          if (v16 >= v7)
            goto LABEL_17;
        }
        if (v2 >= (uint64_t)v16)
        {
LABEL_17:
          v17 = *(_QWORD *)(v8 + 48);
          v18 = v17 + 24 * v2;
          v19 = (__int128 *)(v17 + v9);
          if (24 * v2 < v9 || v18 >= (unint64_t)v19 + 24 || v2 != v5)
          {
            v20 = *v19;
            *(_QWORD *)(v18 + 16) = *((_QWORD *)v19 + 2);
            *(_OWORD *)v18 = v20;
          }
          v21 = *(_QWORD *)(v8 + 56);
          v22 = type metadata accessor for Date(0);
          v23 = *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72);
          v24 = v23 * v2;
          result = v21 + v23 * v2;
          v25 = v23 * v5;
          v26 = v21 + v23 * v5;
          v27 = v26 + v23;
          if (v24 < v25 || result >= v27)
          {
            result = swift_arrayInitWithTakeFrontToBack(result, v26, 1, v22);
            v2 = v5;
            v8 = a2;
          }
          else
          {
            v2 = v5;
            v8 = a2;
            if (v24 != v25)
            {
              result = swift_arrayInitWithTakeBackToFront(result);
              v2 = v5;
            }
          }
        }
LABEL_5:
        v5 = (v5 + 1) & v6;
        if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
          goto LABEL_29;
      }
    }
    v8 = a2;
LABEL_29:
    v29 = (uint64_t *)(v3 + 8 * ((unint64_t)v2 >> 6));
    v31 = *v29;
    v30 = (-1 << v2) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v3 + 8 * (result >> 6));
    v30 = *v29;
    v31 = (-1 << result) - 1;
    v8 = a2;
  }
  *v29 = v30 & v31;
  v32 = *(_QWORD *)(v8 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
    JUMPOUT(0x1002E41A8);
  }
  *(_QWORD *)(v8 + 16) = v34;
  ++*(_DWORD *)(v8 + 36);
  return result;
}

unint64_t sub_1002E41B8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v27, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1002E438C(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD v37[9];

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      while (1)
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 40 * v6);
        v11 = *v10;
        v12 = v10[1];
        v13 = v10[3];
        v14 = v10[4];
        Hasher.init(_seed:)(v37, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v13);
        swift_retain();
        String.hash(into:)(v37, v11, v12);
        v15 = Hasher._finalize()();
        swift_release(v14);
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(v12);
        v16 = v15 & v7;
        if (v3 >= (uint64_t)v9)
          break;
        if (v16 < v9)
          goto LABEL_11;
LABEL_12:
        v17 = *(_QWORD *)(a2 + 48);
        v18 = v17 + 40 * v3;
        v19 = (__int128 *)(v17 + 40 * v6);
        if (v3 != v6 || v18 >= (unint64_t)v19 + 40)
        {
          v20 = *v19;
          v21 = v19[1];
          *(_QWORD *)(v18 + 32) = *((_QWORD *)v19 + 4);
          *(_OWORD *)v18 = v20;
          *(_OWORD *)(v18 + 16) = v21;
        }
        v22 = *(_QWORD *)(a2 + 56);
        v23 = type metadata accessor for ScrollPositionInfo.ItemOffset(0);
        v24 = *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72);
        v25 = v24 * v3;
        v26 = v22 + v24 * v3;
        v27 = v24 * v6;
        v28 = v22 + v24 * v6;
        v29 = v28 + v24;
        if (v25 < v27 || v26 >= v29)
        {
          swift_arrayInitWithTakeFrontToBack(v26, v28, 1, v23);
        }
        else
        {
          v3 = v6;
          if (v25 == v27)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront(v26);
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v16 < v9)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v16)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v31 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v32 = *v31;
    v33 = (-1 << v3) - 1;
  }
  else
  {
    v31 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v33 = *v31;
    v32 = (-1 << a1) - 1;
  }
  *v31 = v33 & v32;
  v34 = *(_QWORD *)(a2 + 16);
  v35 = __OFSUB__(v34, 1);
  v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v36;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_1002E45C4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)(v24, *(_QWORD *)(a2 + 40));
        Hasher._combine(_:)(v10);
        result = Hasher._finalize()();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_QWORD *)(v12 + 8 * v3);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = v15 + 24 * v3;
          v17 = (__int128 *)(v15 + 24 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= (unint64_t)v17 + 24))
          {
            v9 = *v17;
            *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)v16 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1002E4790(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(a2 + 48);
            v17 = (_QWORD *)(v16 + 8 * v3);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1)
              *v17 = *v18;
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_QWORD *)(v19 + 8 * v3);
            v21 = (_QWORD *)(v19 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 1))
            {
              *v20 = *v21;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_1002E4940(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 < v9 || v3 < v13)
            goto LABEL_6;
        }
        else if (v13 < v9 && v3 < v13)
        {
          goto LABEL_6;
        }
        v16 = *(_QWORD *)(a2 + 48);
        v17 = (_QWORD *)(v16 + 8 * v3);
        v18 = (_QWORD *)(v16 + 8 * v6);
        if (v3 != v6 || v17 >= v18 + 1)
          *v17 = *v18;
        v19 = *(_QWORD *)(a2 + 56);
        v20 = type metadata accessor for URL(0);
        v21 = *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72);
        v22 = v21 * v3;
        v23 = v19 + v21 * v3;
        v24 = v21 * v6;
        v25 = v19 + v21 * v6;
        v26 = v25 + v21;
        if (v22 < v24 || v23 >= v26)
        {
          swift_arrayInitWithTakeFrontToBack(v23, v25, 1, v20);
        }
        else
        {
          v3 = v6;
          if (v22 == v24)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v28 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v29 = *v28;
    v30 = (-1 << v3) - 1;
  }
  else
  {
    v28 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v30 = *v28;
    v29 = (-1 << a1) - 1;
  }
  *v28 = v30 & v29;
  v31 = *(_QWORD *)(a2 + 16);
  v32 = __OFSUB__(v31, 1);
  v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_1002E4B18(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _BYTE v27[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_10006777C(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v27);
        v9 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
        result = sub_100067748((uint64_t)v27);
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 >= v8 && v3 >= v10)
          {
LABEL_16:
            v13 = *(_QWORD *)(a2 + 48);
            v14 = v13 + 40 * v3;
            v15 = (__int128 *)(v13 + 40 * v6);
            if (v3 != v6 || v14 >= (unint64_t)v15 + 40)
            {
              v16 = *v15;
              v17 = v15[1];
              *(_QWORD *)(v14 + 32) = *((_QWORD *)v15 + 4);
              *(_OWORD *)v14 = v16;
              *(_OWORD *)(v14 + 16) = v17;
            }
            v18 = *(_QWORD *)(a2 + 56);
            v19 = (_QWORD *)(v18 + 8 * v3);
            v20 = (_QWORD *)(v18 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v19 >= v20 + 1))
            {
              *v19 = *v20;
              v3 = v6;
            }
          }
        }
        else if (v10 >= v8 || v3 >= v10)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1002E4CE0(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  Swift::Int v12;
  id v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v12 = *(_QWORD *)(a2 + 40);
        v13 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v14 = NSObject._rawHashValue(seed:)(v12);

        v15 = v14 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v15 >= v9 && v3 >= v15)
          {
LABEL_16:
            v18 = *(_QWORD *)(a2 + 48);
            v19 = (_QWORD *)(v18 + 8 * v3);
            v20 = (_QWORD *)(v18 + 8 * v6);
            if (v3 != v6 || v19 >= v20 + 1)
              *v19 = *v20;
            v21 = *(_QWORD *)(a2 + 56);
            v22 = v21 + 40 * v3;
            v23 = (__int128 *)(v21 + 40 * v6);
            if (v3 != v6 || (v3 = v6, v22 >= (unint64_t)v23 + 40))
            {
              v10 = *v23;
              v11 = v23[1];
              *(_QWORD *)(v22 + 32) = *((_QWORD *)v23 + 4);
              *(_OWORD *)v22 = v10;
              *(_OWORD *)(v22 + 16) = v11;
              v3 = v6;
            }
          }
        }
        else if (v15 >= v9 || v3 >= v15)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v26 = *v24;
    v25 = (-1 << a1) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_1002E4EA4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  __int128 *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD v31[9];
  id v32;
  uint64_t v33[3];
  uint64_t v34;
  uint64_t v35;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1000A0110(*(_QWORD *)(a2 + 48) + 56 * v6, (uint64_t)&v32);
        Hasher.init(_seed:)(v31, *(_QWORD *)(a2 + 40));
        v12 = v34;
        v13 = v35;
        sub_10007E7A0(v33, v34);
        dispatch thunk of Hashable.hash(into:)(v31, v12, v13);
        v14 = Hasher._finalize()();
        result = (unint64_t)sub_1000A00DC(&v32);
        v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8)
            goto LABEL_5;
        }
        else if (v15 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          v16 = *(_QWORD *)(a2 + 48);
          v17 = v16 + 56 * v3;
          v18 = (__int128 *)(v16 + 56 * v6);
          if (v3 != v6 || v17 >= (unint64_t)v18 + 56)
          {
            v19 = *v18;
            v20 = v18[1];
            v21 = v18[2];
            *(_QWORD *)(v17 + 48) = *((_QWORD *)v18 + 6);
            *(_OWORD *)(v17 + 16) = v20;
            *(_OWORD *)(v17 + 32) = v21;
            *(_OWORD *)v17 = v19;
          }
          v22 = *(_QWORD *)(a2 + 56);
          v23 = v22 + 56 * v3;
          v24 = (__int128 *)(v22 + 56 * v6);
          if (v3 != v6 || (v3 = v6, v23 >= (unint64_t)v24 + 56))
          {
            v9 = *v24;
            v10 = v24[1];
            v11 = v24[2];
            *(_QWORD *)(v23 + 48) = *((_QWORD *)v24 + 6);
            *(_OWORD *)(v23 + 16) = v10;
            *(_OWORD *)(v23 + 32) = v11;
            *(_OWORD *)v23 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v26 = *v25;
    v27 = (-1 << v3) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    v27 = *v25;
    v26 = (-1 << result) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(a2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1002E50C8(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v19[9];

  Hasher.init(_seed:)(v19, *(_QWORD *)(a4 + 40));
  if ((a2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v10 = v9;
    v11 = a1;
    String.hash(into:)(v19, v8, v10);

    swift_bridgeObjectRelease(v10);
  }
  else
  {
    Hasher._combine(_:)(0);
    v12 = a1;
    NSObject.hash(into:)(v19);

  }
  v13 = Hasher._finalize()();
  v14 = _HashTable.nextHole(atOrAfter:)(v13 & ~(-1 << *(_BYTE *)(a4 + 32)), a4 + 64, ~(-1 << *(_BYTE *)(a4 + 32)));
  *(_QWORD *)(a4 + 64 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
  v15 = *(_QWORD *)(a4 + 48) + 16 * v14;
  *(_QWORD *)v15 = a1;
  *(_BYTE *)(v15 + 8) = a2 & 1;
  v16 = *(_QWORD *)(a4 + 56);
  v17 = type metadata accessor for RestorableSettings(0);
  result = sub_1001D0788(a3, v16 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * v14, type metadata accessor for RestorableSettings);
  ++*(_QWORD *)(a4 + 16);
  return result;
}

uint64_t sub_1002E5210(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  Swift::UInt v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[9];

  Hasher.init(_seed:)(v17, *(_QWORD *)(a5 + 40));
  if (a3)
  {
    if (a3 != 1)
      __asm { BR              X9 }
    v10 = 5;
  }
  else
  {
    v10 = 4;
  }
  Hasher._combine(_:)(v10);
  String.hash(into:)(v17, a1, a2);
  v11 = Hasher._finalize()();
  v12 = _HashTable.nextHole(atOrAfter:)(v11 & ~(-1 << *(_BYTE *)(a5 + 32)), a5 + 64, ~(-1 << *(_BYTE *)(a5 + 32)));
  *(_QWORD *)(a5 + 64 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
  v13 = *(_QWORD *)(a5 + 48) + 24 * v12;
  *(_QWORD *)v13 = a1;
  *(_QWORD *)(v13 + 8) = a2;
  *(_BYTE *)(v13 + 16) = a3;
  v14 = *(_QWORD *)(a5 + 56);
  v15 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v12, a4, v15);
  ++*(_QWORD *)(a5 + 16);
  return result;
}

__n128 sub_1002E537C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  Swift::UInt v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 result;
  _QWORD v16[9];

  Hasher.init(_seed:)(v16, *(_QWORD *)(a5 + 40));
  if (a3)
  {
    if (a3 != 1)
      __asm { BR              X9 }
    v10 = 5;
  }
  else
  {
    v10 = 4;
  }
  Hasher._combine(_:)(v10);
  String.hash(into:)(v16, a1, a2);
  v11 = Hasher._finalize()();
  v12 = _HashTable.nextHole(atOrAfter:)(v11 & ~(-1 << *(_BYTE *)(a5 + 32)), a5 + 64, ~(-1 << *(_BYTE *)(a5 + 32)));
  *(_QWORD *)(a5 + 64 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
  v13 = *(_QWORD *)(a5 + 48) + 24 * v12;
  *(_QWORD *)v13 = a1;
  *(_QWORD *)(v13 + 8) = a2;
  *(_BYTE *)(v13 + 16) = a3;
  v14 = *(_QWORD *)(a5 + 56) + 40 * v12;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(a4 + 32);
  result = *(__n128 *)(a4 + 16);
  *(_OWORD *)v14 = *(_OWORD *)a4;
  *(__n128 *)(v14 + 16) = result;
  ++*(_QWORD *)(a5 + 16);
  return result;
}

void sub_1002E54D0(char a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, *(_QWORD *)(a3 + 40));
  __asm { BR              X10 }
}

unint64_t sub_1002E5524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  Swift::Int v4;
  unint64_t result;
  uint64_t v6;

  String.hash(into:)(&v6, 1701667182, v1);
  swift_bridgeObjectRelease(v1);
  v4 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(v0 + 32)), v0 + 64, ~(-1 << *(_BYTE *)(v0 + 32)));
  *(_QWORD *)(v0 + 64 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_BYTE *)(*(_QWORD *)(v0 + 48) + result) = v3;
  *(_QWORD *)(*(_QWORD *)(v0 + 56) + 8 * result) = v2;
  ++*(_QWORD *)(v0 + 16);
  return result;
}

void *sub_1002E55F0()
{
  return sub_1002E5A58(type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario, (uint64_t (*)(_QWORD))&type metadata accessor for URL, &qword_10064D978);
}

void *sub_1002E560C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  __int128 v26;

  v1 = v0;
  sub_10006922C(&qword_10064DAF0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 40 * v15;
    v18 = *(_QWORD *)(v17 + 8);
    v19 = *(_QWORD *)(v17 + 16);
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = *(_QWORD *)(v4 + 48) + v16;
    v26 = *(_OWORD *)(v17 + 24);
    *(_QWORD *)v22 = *(_QWORD *)v17;
    *(_QWORD *)(v22 + 8) = v18;
    *(_QWORD *)(v22 + 16) = v19;
    *(_OWORD *)(v22 + 24) = v26;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v26);
    swift_retain();
    result = (void *)swift_bridgeObjectRetain(v21);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002E57F8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for RestorableSettings(0);
  v29 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006922C(&qword_10064DAB0);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (id)swift_release(v5);
LABEL_28:
    *v1 = v7;
    return result;
  }
  v26 = v1;
  result = (id)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v27 = v5 + 64;
  v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v23 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      v11 = v23 + 1;
      if (v23 + 1 >= v28)
        goto LABEL_26;
      v24 = *(_QWORD *)(v27 + 8 * v11);
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = *(_QWORD *)(v5 + 48) + 16 * v16;
    v19 = *(void **)v18;
    v20 = *(_BYTE *)(v18 + 8);
    v21 = *(_QWORD *)(v29 + 72) * v16;
    sub_10007C6DC(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4, type metadata accessor for RestorableSettings);
    v22 = *(_QWORD *)(v7 + 48) + v17;
    *(_QWORD *)v22 = v19;
    *(_BYTE *)(v22 + 8) = v20;
    sub_1001D0788((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21, type metadata accessor for RestorableSettings);
    result = v19;
  }
  v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    result = (id)swift_release(v5);
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v11 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v11 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v11);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1002E5A3C()
{
  return sub_1002E5A58(type metadata accessor for DOCSharedTestableProgressOperationProvider.UpdateHandlerInfo, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_10064D9D8);
}

void *sub_1002E5A58(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD), uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD);
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t (*v43)(_QWORD);
  uint64_t v44;
  uint64_t v45;

  v43 = a1;
  v6 = a1(0);
  v42 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v41 = (char *)&v36 - v7;
  v40 = a2(0);
  v8 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v39 = (char *)&v36 - v9;
  sub_10006922C(a3);
  v36 = v3;
  v10 = *v3;
  v11 = static _DictionaryStorage.copy(original:)(*v3);
  v12 = *(_QWORD *)(v10 + 16);
  v45 = v11;
  if (!v12)
  {
    result = (void *)swift_release(v10);
    v35 = v45;
    v34 = v36;
LABEL_25:
    *v34 = v35;
    return result;
  }
  v13 = v11;
  result = (void *)(v11 + 64);
  v15 = (unint64_t)((1 << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  if (v13 != v10 || (unint64_t)result >= v10 + 64 + 8 * v15)
  {
    result = memmove(result, (const void *)(v10 + 64), 8 * v15);
    v13 = v45;
  }
  v16 = 0;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v10 + 16);
  v17 = 1 << *(_BYTE *)(v10 + 32);
  v44 = v10;
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v10 + 64);
  v37 = v10 + 64;
  v38 = (unint64_t)(v17 + 63) >> 6;
  v21 = v39;
  v20 = v40;
  v22 = (uint64_t)v41;
  for (i = v45; ; result = (void *)sub_1001D0788(v22, *(_QWORD *)(i + 56) + v30, v29))
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v16 << 6);
      v26 = v44;
      goto LABEL_9;
    }
    v31 = v16 + 1;
    v26 = v44;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v31 >= v38)
      goto LABEL_23;
    v32 = *(_QWORD *)(v37 + 8 * v31);
    ++v16;
    if (!v32)
    {
      v16 = v31 + 1;
      if (v31 + 1 >= v38)
        goto LABEL_23;
      v32 = *(_QWORD *)(v37 + 8 * v16);
      if (!v32)
        break;
    }
LABEL_22:
    v19 = (v32 - 1) & v32;
    v25 = __clz(__rbit64(v32)) + (v16 << 6);
LABEL_9:
    v27 = *(_QWORD *)(v8 + 72) * v25;
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v21, *(_QWORD *)(v26 + 48) + v27, v20);
    v28 = *(_QWORD *)(v26 + 56);
    v29 = v43;
    v30 = *(_QWORD *)(v42 + 72) * v25;
    sub_10007C6DC(v28 + v30, v22, v43);
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(i + 48) + v27, v21, v20);
  }
  v33 = v31 + 2;
  if (v33 >= v38)
  {
LABEL_23:
    result = (void *)swift_release(v44);
    v34 = v36;
    v35 = v45;
    goto LABEL_25;
  }
  v32 = *(_QWORD *)(v37 + 8 * v33);
  if (v32)
  {
    v16 = v33;
    goto LABEL_22;
  }
  while (1)
  {
    v16 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v16 >= v38)
      goto LABEL_23;
    v32 = *(_QWORD *)(v37 + 8 * v16);
    ++v33;
    if (v32)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void sub_1002E5D1C()
{
  sub_1002EA6F8(&qword_10064DAC0);
}

void *sub_1002E5D28()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10006922C(&qword_10064D988);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_bridgeObjectRetain(v17);
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002E5EC8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10006922C((uint64_t *)&unk_10064DB10);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_1002E6070()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  _OWORD v29[10];

  v1 = v0;
  sub_10006922C(&qword_10064DAE8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = (_OWORD *)(*(_QWORD *)(v2 + 48) + 160 * v15);
    v17 = v16[2];
    v18 = v16[3];
    v19 = v16[5];
    v29[4] = v16[4];
    v29[5] = v19;
    v29[3] = v18;
    v20 = v16[6];
    v21 = v16[7];
    v22 = v16[9];
    v29[8] = v16[8];
    v29[9] = v22;
    v29[6] = v20;
    v29[7] = v21;
    v23 = v16[1];
    v29[0] = *v16;
    v29[1] = v23;
    v29[2] = v17;
    v24 = 8 * v15;
    v25 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    memmove((void *)(*(_QWORD *)(v4 + 48) + 160 * v15), v16, 0xA0uLL);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v24) = v25;
    result = (void *)sub_100145718((uint64_t)v29);
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002E626C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  sub_10006922C((uint64_t *)&unk_100653230);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain(v18);
    result = (void *)sub_1000D1378(v24, *((unint64_t *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002E6430()
{
  sub_1002E6E24((uint64_t *)&unk_10064DAA0, (void (*)(_QWORD, _QWORD))sub_1000D1378);
}

uint64_t sub_1002E6444()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  const void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v36 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006922C((uint64_t *)&unk_100653220);
  v33 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = *(_QWORD *)(v3 + 16);
  v39 = v4;
  if (!v5)
  {
    result = swift_release(v3);
    v31 = v39;
    v30 = v33;
LABEL_28:
    *v30 = v31;
    return result;
  }
  v6 = v4;
  v7 = (void *)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v35 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)v7 >= v3 + 64 + 8 * v8)
  {
    memmove(v7, v35, 8 * v8);
    v6 = v39;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v38 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v34 = (unint64_t)(v11 + 63) >> 6;
  v14 = v36;
  v15 = v37;
  while (1)
  {
    if (v13)
    {
      v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v17 = v16 | (v10 << 6);
      result = v38;
      goto LABEL_12;
    }
    v27 = v10 + 1;
    result = v38;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v34)
      goto LABEL_26;
    v28 = *((_QWORD *)v35 + v27);
    ++v10;
    if (!v28)
    {
      v10 = v27 + 1;
      if (v27 + 1 >= v34)
        goto LABEL_26;
      v28 = *((_QWORD *)v35 + v10);
      if (!v28)
        break;
    }
LABEL_25:
    v13 = (v28 - 1) & v28;
    v17 = __clz(__rbit64(v28)) + (v10 << 6);
LABEL_12:
    v19 = 24 * v17;
    v20 = *(_QWORD *)(result + 48) + 24 * v17;
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD *)(v1 + 72) * v17;
    v24 = *(_BYTE *)(v20 + 16);
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v14, *(_QWORD *)(result + 56) + v23, v15);
    v25 = v39;
    v26 = *(_QWORD *)(v39 + 48) + v19;
    *(_QWORD *)v26 = v21;
    *(_QWORD *)(v26 + 8) = v22;
    *(_BYTE *)(v26 + 16) = v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v25 + 56) + v23, v14, v15);
    sub_100292218(v21, v22, v24);
  }
  v29 = v27 + 2;
  if (v29 >= v34)
  {
LABEL_26:
    result = swift_release(v38);
    v30 = v33;
    v31 = v39;
    goto LABEL_28;
  }
  v28 = *((_QWORD *)v35 + v29);
  if (v28)
  {
    v10 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v10 >= v34)
      goto LABEL_26;
    v28 = *((_QWORD *)v35 + v10);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1002E66C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  __int128 v31;

  v1 = v0;
  sub_10006922C((uint64_t *)&unk_10064DA90);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = 40 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 16);
    v25 = *(_QWORD *)(v4 + 48) + v16;
    v31 = *(_OWORD *)(v21 + 24);
    v26 = *(_BYTE *)(v17 + 16);
    *(_QWORD *)v25 = *(_QWORD *)v17;
    *(_QWORD *)(v25 + 8) = v19;
    *(_BYTE *)(v25 + 16) = v26;
    v27 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v27 = v22;
    *(_QWORD *)(v27 + 8) = v23;
    *(_QWORD *)(v27 + 16) = v24;
    *(_OWORD *)(v27 + 24) = v31;
    sub_100292218(v18, v19, v26);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v31);
    swift_retain(*((_QWORD *)&v31 + 1));
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_1002E68C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;

  v1 = v0;
  sub_10006922C((uint64_t *)&unk_1006531F0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v25 = __clz(__rbit64(v23));
    v12 = (v23 - 1) & v23;
    v15 = v25 + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v18 = *(_BYTE *)(v17 + 16);
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = *(_QWORD *)(v4 + 48) + v16;
    *(_OWORD *)v21 = *(_OWORD *)v17;
    *(_BYTE *)(v21 + 16) = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002E6A64()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  __int128 v29;

  v1 = v0;
  sub_10006922C((uint64_t *)&unk_10064DA80);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v18 = *(_BYTE *)(v17 + 16);
    v19 = 40 * v15;
    v20 = *(_QWORD *)(v2 + 56) + v19;
    v22 = *(_QWORD *)v20;
    v21 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v4 + 48) + v16;
    v29 = *(_OWORD *)(v20 + 24);
    *(_OWORD *)v24 = *(_OWORD *)v17;
    *(_BYTE *)(v24 + 16) = v18;
    v25 = *(_QWORD *)(v4 + 56) + v19;
    *(_QWORD *)v25 = v22;
    *(_QWORD *)(v25 + 8) = v21;
    *(_QWORD *)(v25 + 16) = v23;
    *(_OWORD *)(v25 + 24) = v29;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v29);
    swift_retain(*((_QWORD *)&v29 + 1));
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_1002E6C5C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10006922C((uint64_t *)&unk_1006531E0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    sub_100292204(v19, *((unint64_t *)&v19 + 1));
    result = (void *)swift_unknownObjectRetain(v17);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002E6E10()
{
  sub_1002E6E24((uint64_t *)&unk_10064DA70, (void (*)(_QWORD, _QWORD))sub_100292204);
}

void sub_1002E6E24(uint64_t *a1, void (*a2)(_QWORD, _QWORD))
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  __int128 v30;

  v4 = v2;
  sub_10006922C(a1);
  v5 = *v2;
  v6 = static _DictionaryStorage.copy(original:)(*v2);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    swift_release(v5);
    *v4 = v7;
    return;
  }
  v8 = (void *)(v6 + 64);
  v9 = v5 + 64;
  v10 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v10)
    memmove(v8, (const void *)(v5 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v27 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v16)
      goto LABEL_26;
    v28 = *(_QWORD *)(v9 + 8 * v27);
    ++v12;
    if (!v28)
    {
      v12 = v27 + 1;
      if (v27 + 1 >= v16)
        goto LABEL_26;
      v28 = *(_QWORD *)(v9 + 8 * v12);
      if (!v28)
        break;
    }
LABEL_25:
    v15 = (v28 - 1) & v28;
    v18 = __clz(__rbit64(v28)) + (v12 << 6);
LABEL_12:
    v19 = 16 * v18;
    v20 = 40 * v18;
    v21 = *(_QWORD *)(v5 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 16);
    v25 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + v19);
    v30 = *(_OWORD *)(v21 + 24);
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + v19) = v25;
    v26 = *(_QWORD *)(v7 + 56) + v20;
    *(_QWORD *)v26 = v22;
    *(_QWORD *)(v26 + 8) = v23;
    *(_QWORD *)(v26 + 16) = v24;
    *(_OWORD *)(v26 + 24) = v30;
    a2(v25, *((_QWORD *)&v25 + 1));
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v30);
    swift_retain(*((_QWORD *)&v30 + 1));
  }
  v29 = v27 + 2;
  if (v29 >= v16)
    goto LABEL_26;
  v28 = *(_QWORD *)(v9 + 8 * v29);
  if (v28)
  {
    v12 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v28 = *(_QWORD *)(v9 + 8 * v12);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_1002E701C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  sub_10006922C(&qword_10064DB70);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    sub_10006777C(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v17 = *(_QWORD *)(v4 + 48) + 40 * v15;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_unknownObjectRetain(v16);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002E71F4()
{
  return sub_1002E95F8(&qword_10064D9B0);
}

void sub_1002E7200()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_10006922C(&qword_10064DB20);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_10006777C(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_100069BD8(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    sub_100079B28(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1002E73E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  const void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v36 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v35 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006922C((uint64_t *)&unk_10064D9F0);
  v32 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = *(_QWORD *)(v3 + 16);
  v38 = v4;
  if (!v5)
  {
    swift_release(v3);
    v30 = v38;
    v29 = v32;
LABEL_28:
    *v29 = v30;
    return;
  }
  v6 = v4;
  v7 = (void *)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v34 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)v7 >= v3 + 64 + 8 * v8)
  {
    memmove(v7, v34, 8 * v8);
    v6 = v38;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v37 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v33 = (unint64_t)(v11 + 63) >> 6;
  v15 = v35;
  v14 = v36;
  v16 = v38;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v10 << 6);
      v19 = v37;
      goto LABEL_12;
    }
    v26 = v10 + 1;
    v19 = v37;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v33)
      goto LABEL_26;
    v27 = *((_QWORD *)v34 + v26);
    ++v10;
    if (!v27)
    {
      v10 = v26 + 1;
      if (v26 + 1 >= v33)
        goto LABEL_26;
      v27 = *((_QWORD *)v34 + v10);
      if (!v27)
        break;
    }
LABEL_25:
    v13 = (v27 - 1) & v27;
    v18 = __clz(__rbit64(v27)) + (v10 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(_QWORD *)(v19 + 48) + v20, v14);
    v21 = 16 * v18;
    v22 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 16 * v18);
    v23 = *v22;
    v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v16 + 48) + v20, v15, v14);
    v25 = (_QWORD *)(*(_QWORD *)(v16 + 56) + v21);
    *v25 = v23;
    v25[1] = v24;
    swift_bridgeObjectRetain(v24);
  }
  v28 = v26 + 2;
  if (v28 >= v33)
  {
LABEL_26:
    swift_release(v37);
    v29 = v32;
    v30 = v38;
    goto LABEL_28;
  }
  v27 = *((_QWORD *)v34 + v28);
  if (v27)
  {
    v10 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v10 >= v33)
      goto LABEL_26;
    v27 = *((_QWORD *)v34 + v10);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void *sub_1002E7654()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_10006922C((uint64_t *)&unk_1006532D0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_bridgeObjectRetain(v16);
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002E77F4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_10006922C((uint64_t *)&unk_1006531B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_1002E79AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  char v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10006922C(&qword_10064DB78);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v17 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = v16;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v17;
    result = v16;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002E7B4C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  _OWORD v27[2];
  uint64_t v28;

  v1 = v0;
  sub_10006922C(&qword_10064DAE0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    sub_10006777C(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v27);
    v16 = *(_QWORD *)(v2 + 56) + 24 * v15;
    v17 = *(void **)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    v20 = *(_QWORD *)(v4 + 48) + 40 * v15;
    v21 = v27[0];
    v22 = v27[1];
    *(_QWORD *)(v20 + 32) = v28;
    *(_OWORD *)v20 = v21;
    *(_OWORD *)(v20 + 16) = v22;
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 56) + 24 * v15);
    *v23 = v17;
    v23[1] = v18;
    v23[2] = v19;
    result = sub_10006A92C(v17, v18, v19);
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002E7D38()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  sub_10006922C(&qword_1006532C0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain(v18);
    result = (void *)sub_10012F5E0(v24, *((unint64_t *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002E7EFC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_10006922C((uint64_t *)&unk_1006533B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_100069BD8(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_100079B28(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1002E80E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006922C(&qword_10064DAB8);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v5);
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_unknownObjectRetain(v19);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002E8310()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10006922C(&qword_10064DAD0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002E84B8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  id v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  sub_10006922C(&qword_10064DB88);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(void **)(v19 + 16);
    v21 = *(_BYTE *)(v19 + 24);
    v22 = *(_OWORD *)v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v23 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v23 = v22;
    *(_QWORD *)(v23 + 16) = v20;
    *(_BYTE *)(v23 + 24) = v21;
    v24 = v17;
    v25 = v20;
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1002E8678()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_10006922C(&qword_10064DB80);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 32 * v15;
    v18 = *(void **)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = 8 * v15;
    v22 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v21);
    v23 = *(_QWORD *)(v4 + 48) + v16;
    v24 = *(_BYTE *)(v17 + 24);
    *(_QWORD *)v23 = *(_QWORD *)v17;
    *(_QWORD *)(v23 + 8) = v19;
    *(_QWORD *)(v23 + 16) = v20;
    *(_BYTE *)(v23 + 24) = v24;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v21) = v22;
    sub_1000E4F7C(v18, v19, v20, v24);
    swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1002E883C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;

  v1 = type metadata accessor for ScrollPositionInfo.ItemOffset(0);
  v35 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006922C(&qword_10064DB68);
  v32 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v4 + 16);
  v36 = v5;
  if (!v6)
  {
    swift_release(v4);
    v30 = v36;
    v29 = v32;
LABEL_28:
    *v29 = v30;
    return;
  }
  v7 = v5;
  v8 = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)v8 >= v4 + 64 + 8 * v9)
  {
    memmove(v8, (const void *)(v4 + 64), 8 * v9);
    v7 = v36;
  }
  v33 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v34 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v26 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v34)
      goto LABEL_26;
    v27 = *(_QWORD *)(v33 + 8 * v26);
    ++v11;
    if (!v27)
    {
      v11 = v26 + 1;
      if (v26 + 1 >= v34)
        goto LABEL_26;
      v27 = *(_QWORD *)(v33 + 8 * v11);
      if (!v27)
        break;
    }
LABEL_25:
    v14 = (v27 - 1) & v27;
    v16 = __clz(__rbit64(v27)) + (v11 << 6);
LABEL_12:
    v17 = 40 * v16;
    v18 = *(_QWORD *)(v4 + 48) + 40 * v16;
    v20 = *(_QWORD *)v18;
    v19 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v35 + 72) * v16;
    v23 = *(_QWORD *)(v4 + 56) + v22;
    v37 = *(_OWORD *)(v18 + 24);
    sub_10007C6DC(v23, (uint64_t)v3, type metadata accessor for ScrollPositionInfo.ItemOffset);
    v24 = v36;
    v25 = *(_QWORD *)(v36 + 48) + v17;
    *(_QWORD *)v25 = v20;
    *(_QWORD *)(v25 + 8) = v19;
    *(_QWORD *)(v25 + 16) = v21;
    *(_OWORD *)(v25 + 24) = v37;
    sub_1001D0788((uint64_t)v3, *(_QWORD *)(v24 + 56) + v22, type metadata accessor for ScrollPositionInfo.ItemOffset);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v37);
    swift_retain();
  }
  v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_26:
    swift_release(v4);
    v29 = v32;
    v30 = v36;
    goto LABEL_28;
  }
  v27 = *(_QWORD *)(v33 + 8 * v28);
  if (v27)
  {
    v11 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v11 >= v34)
      goto LABEL_26;
    v27 = *(_QWORD *)(v33 + 8 * v11);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void *sub_1002E8ACC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_10006922C(&qword_10064DB60);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002E8C78()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  id v23;
  id v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  __int128 v28;

  v1 = v0;
  sub_10006922C(&qword_10064D970);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(void **)(v19 + 16);
    v28 = *(_OWORD *)v19;
    v21 = *(_OWORD *)v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v22 = v21;
    *(_QWORD *)(v22 + 16) = v20;
    v23 = v20;
    v24 = (id)v28;
    result = (void *)swift_bridgeObjectRetain(*((_QWORD *)&v28 + 1));
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002E8E54()
{
  return sub_1002EA540(&qword_10064DAD8);
}

id sub_1002E8E60()
{
  return sub_1002E95F8((uint64_t *)&unk_100653150);
}

void sub_1002E8E6C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  id v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_10006922C((uint64_t *)&unk_100653370);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    v22 = v20;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_1002E901C()
{
  return sub_1002E95F8(&qword_10064DAC8);
}

void sub_1002E9028()
{
  sub_1002EA6F8(&qword_10064DB30);
}

void sub_1002E9034()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  sub_10006922C(&qword_10064CA98);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *v19;
    v21 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v20;
    v22[1] = v21;
    v23 = v17;
    swift_bridgeObjectRetain(v21);
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1002E91E8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  uint64_t v25;

  v1 = v0;
  sub_10006922C(&qword_10064DA50);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    sub_10006777C(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v24);
    v16 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v17 = *(_QWORD *)(v4 + 48) + 40 * v15;
    v18 = v24[0];
    v19 = v24[1];
    *(_QWORD *)(v17 + 32) = v25;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    v20 = v16;
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_1002E93C0()
{
  return sub_1002EA0B8((uint64_t (*)(_QWORD))&type metadata accessor for URL, &qword_10064DB38);
}

void sub_1002E93D4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006922C((uint64_t *)&unk_10064DB40);
  v25 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    swift_release(v5);
    *v25 = v7;
    return;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = v5 + 64;
  v27 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v11);
      if (!v22)
        break;
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v19 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 56) + v19, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v18;
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 56) + v19, v4, v1);
    v20 = v18;
  }
  v23 = v21 + 2;
  if (v23 >= v27)
    goto LABEL_26;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_1002E95F8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  sub_10006922C(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    v19 = *(void **)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v19;
    v20 = v18;
    result = v19;
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002E9794()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006922C((uint64_t *)&unk_10064DA08);
  v23 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    swift_release(v5);
    *v23 = v7;
    return;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v24 = v5 + 64;
  v25 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v25)
        goto LABEL_26;
      v20 = *(_QWORD *)(v24 + 8 * v11);
      if (!v20)
        break;
    }
LABEL_25:
    v14 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_BYTE *)(*(_QWORD *)(v7 + 56) + v16) = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v25)
    goto LABEL_26;
  v20 = *(_QWORD *)(v24 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_1002E99B4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;

  v1 = v0;
  sub_10006922C(&qword_10064DA00);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v58 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v58 >= v13)
      goto LABEL_26;
    v59 = *(_QWORD *)(v6 + 8 * v58);
    ++v9;
    if (!v59)
    {
      v9 = v58 + 1;
      if (v58 + 1 >= v13)
        goto LABEL_26;
      v59 = *(_QWORD *)(v6 + 8 * v9);
      if (!v59)
        break;
    }
LABEL_25:
    v12 = (v59 - 1) & v59;
    v15 = __clz(__rbit64(v59)) + (v9 << 6);
LABEL_12:
    v16 = 168 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 168 * v15;
    v18 = *(_OWORD *)(v17 + 48);
    v19 = *(_OWORD *)(v17 + 64);
    v20 = *(_OWORD *)(v17 + 96);
    v66 = *(_OWORD *)(v17 + 80);
    v67 = v20;
    v64 = v18;
    v65 = v19;
    v21 = *(_OWORD *)(v17 + 112);
    v22 = *(_OWORD *)(v17 + 128);
    v23 = *(_OWORD *)(v17 + 144);
    v71 = *(_QWORD *)(v17 + 160);
    v69 = v22;
    v70 = v23;
    v68 = v21;
    v24 = *(_OWORD *)(v17 + 32);
    v25 = *(_OWORD *)v17;
    v62 = *(_OWORD *)(v17 + 16);
    v63 = v24;
    v61 = v25;
    v26 = 224 * v15;
    v27 = (__int128 *)(*(_QWORD *)(v2 + 56) + v26);
    v28 = v27[2];
    v29 = v27[3];
    v30 = v27[5];
    v76 = v27[4];
    v77 = v30;
    v75 = v29;
    v31 = v27[6];
    v32 = v27[7];
    v33 = v27[9];
    v80 = v27[8];
    v81 = v33;
    v78 = v31;
    v79 = v32;
    v34 = v27[10];
    v35 = v27[11];
    v36 = v27[13];
    v84 = v27[12];
    v85 = v36;
    v82 = v34;
    v83 = v35;
    v37 = v27[1];
    v72 = *v27;
    v73 = v37;
    v74 = v28;
    v38 = *(_QWORD *)(v4 + 48) + v16;
    v39 = v71;
    v40 = v68;
    v41 = v70;
    *(_OWORD *)(v38 + 128) = v69;
    *(_OWORD *)(v38 + 144) = v41;
    *(_OWORD *)(v38 + 112) = v40;
    v42 = v64;
    v43 = v65;
    v44 = v67;
    *(_OWORD *)(v38 + 80) = v66;
    *(_OWORD *)(v38 + 96) = v44;
    *(_OWORD *)(v38 + 48) = v42;
    *(_OWORD *)(v38 + 64) = v43;
    v46 = v62;
    v45 = v63;
    *(_OWORD *)v38 = v61;
    *(_OWORD *)(v38 + 16) = v46;
    *(_OWORD *)(v38 + 32) = v45;
    *(_QWORD *)(v38 + 160) = v39;
    v47 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v26);
    v48 = v73;
    *v47 = v72;
    v47[1] = v48;
    v49 = v74;
    v50 = v75;
    v51 = v77;
    v47[4] = v76;
    v47[5] = v51;
    v47[2] = v49;
    v47[3] = v50;
    v52 = v78;
    v53 = v79;
    v54 = v81;
    v47[8] = v80;
    v47[9] = v54;
    v47[6] = v52;
    v47[7] = v53;
    v55 = v82;
    v56 = v83;
    v57 = v85;
    v47[12] = v84;
    v47[13] = v57;
    v47[10] = v55;
    v47[11] = v56;
    sub_1001456B8((uint64_t)&v61);
    result = (void *)sub_1001456B8((uint64_t)&v72);
  }
  v60 = v58 + 2;
  if (v60 >= v13)
    goto LABEL_26;
  v59 = *(_QWORD *)(v6 + 8 * v60);
  if (v59)
  {
    v9 = v60;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v60 + 1;
    if (__OFADD__(v60, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v59 = *(_QWORD *)(v6 + 8 * v9);
    ++v60;
    if (v59)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002E9C64()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  __int128 v28;

  v1 = v0;
  sub_10006922C((uint64_t *)&unk_100653290);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 40 * v15;
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *(_QWORD *)(v17 + 24);
    v21 = *(void **)(v17 + 32);
    v22 = *(_QWORD *)(v4 + 48) + v16;
    v28 = *(_OWORD *)(v17 + 8);
    *(_QWORD *)v22 = *(_QWORD *)v17;
    *(_OWORD *)(v22 + 8) = v28;
    *(_QWORD *)(v22 + 24) = v20;
    *(_QWORD *)(v22 + 32) = v21;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    v23 = (id)v28;
    v24 = *((id *)&v28 + 1);
    result = v21;
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002E9E44()
{
  return sub_1002E95F8(&qword_10064DB28);
}

void *sub_1002E9E50()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  id v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[2];

  v1 = v0;
  sub_10006922C((uint64_t *)&unk_10064D9E0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v42 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v42 >= v13)
      goto LABEL_26;
    v43 = *(_QWORD *)(v6 + 8 * v42);
    ++v9;
    if (!v43)
    {
      v9 = v42 + 1;
      if (v42 + 1 >= v13)
        goto LABEL_26;
      v43 = *(_QWORD *)(v6 + 8 * v9);
      if (!v43)
        break;
    }
LABEL_25:
    v12 = (v43 - 1) & v43;
    v15 = __clz(__rbit64(v43)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 224 * v15;
    v19 = (__int128 *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = v19[2];
    v21 = v19[3];
    v22 = v19[5];
    v49 = v19[4];
    v50 = v22;
    v48 = v21;
    v23 = v19[9];
    v25 = v19[6];
    v24 = v19[7];
    v53 = v19[8];
    v54 = v23;
    v51 = v25;
    v52 = v24;
    v27 = v19[11];
    v26 = v19[12];
    v28 = v19[10];
    *(_OWORD *)((char *)v57 + 9) = *(__int128 *)((char *)v19 + 201);
    v56 = v27;
    v57[0] = v26;
    v55 = v28;
    v29 = v19[1];
    v45 = *v19;
    v46 = v29;
    v47 = v20;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v30 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v18);
    v31 = v46;
    *v30 = v45;
    v30[1] = v31;
    v32 = v47;
    v33 = v48;
    v34 = v50;
    v30[4] = v49;
    v30[5] = v34;
    v30[2] = v32;
    v30[3] = v33;
    v35 = v51;
    v36 = v52;
    v37 = v54;
    v30[8] = v53;
    v30[9] = v37;
    v30[6] = v35;
    v30[7] = v36;
    v38 = v55;
    v39 = v56;
    v40 = v57[0];
    *(_OWORD *)((char *)v30 + 201) = *(_OWORD *)((char *)v57 + 9);
    v30[11] = v39;
    v30[12] = v40;
    v30[10] = v38;
    v41 = v17;
    result = sub_1002EB2E0(&v45);
  }
  v44 = v42 + 2;
  if (v44 >= v13)
    goto LABEL_26;
  v43 = *(_QWORD *)(v6 + 8 * v44);
  if (v43)
  {
    v9 = v44;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v43 = *(_QWORD *)(v6 + 8 * v9);
    ++v44;
    if (v43)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002EA098()
{
  sub_1002EA6F8(&qword_10064D9D0);
}

id sub_1002EA0A4()
{
  return sub_1002EA0B8((uint64_t (*)(_QWORD))&type metadata accessor for UTType, &qword_10064D9B8);
}

id sub_1002EA0B8(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;

  v4 = a1(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - v6;
  sub_10006922C(a2);
  v27 = v2;
  v8 = *v2;
  v9 = static _DictionaryStorage.copy(original:)(*v2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_26:
    result = (id)swift_release(v8);
    *v27 = v10;
    return result;
  }
  result = (id)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v28 = v8 + 64;
  v29 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v29)
        goto LABEL_26;
      v24 = *(_QWORD *)(v28 + 8 * v14);
      if (!v24)
        break;
    }
LABEL_25:
    v17 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v20, v4);
    v21 = 8 * v19;
    v22 = *(void **)(*(_QWORD *)(v8 + 56) + v21);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v20, v7, v4);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + v21) = v22;
    result = v22;
  }
  v25 = v23 + 2;
  if (v25 >= v29)
    goto LABEL_26;
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
  {
    v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v14 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v14);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002EA2E0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(unint64_t, char *, uint64_t);
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  __int128 v32;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006922C(&qword_100653190);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    swift_release(v6);
LABEL_28:
    *v1 = v8;
    return;
  }
  v30 = v1;
  v9 = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)v9 >= v6 + 64 + 8 * v10)
    memmove(v9, (const void *)(v6 + 64), 8 * v10);
  v31 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v27 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v16)
      goto LABEL_26;
    v28 = *(_QWORD *)(v31 + 8 * v27);
    ++v12;
    if (!v28)
    {
      v12 = v27 + 1;
      if (v27 + 1 >= v16)
        goto LABEL_26;
      v28 = *(_QWORD *)(v31 + 8 * v12);
      if (!v28)
        break;
    }
LABEL_25:
    v15 = (v28 - 1) & v28;
    v18 = __clz(__rbit64(v28)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 32 * v18;
    v21 = *(_QWORD *)(v6 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 24);
    v24 = *(_QWORD *)(v8 + 48) + v19;
    v25 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    v32 = *(_OWORD *)(v21 + 8);
    v25(v24, v5, v2);
    v26 = *(_QWORD *)(v8 + 56) + v20;
    *(_QWORD *)v26 = v22;
    *(_OWORD *)(v26 + 8) = v32;
    *(_QWORD *)(v26 + 24) = v23;
  }
  v29 = v27 + 2;
  if (v29 >= v16)
  {
LABEL_26:
    swift_release(v6);
    v1 = v30;
    goto LABEL_28;
  }
  v28 = *(_QWORD *)(v31 + 8 * v29);
  if (v28)
  {
    v12 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v28 = *(_QWORD *)(v31 + 8 * v12);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void *sub_1002EA534()
{
  return sub_1002EA540(&qword_10064DAF8);
}

void *sub_1002EA540(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_10006922C(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    result = (void *)swift_unknownObjectRetain(v21);
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1002EA6EC()
{
  sub_1002EA6F8((uint64_t *)&unk_10064DB00);
}

void sub_1002EA6F8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  uint64_t v25;

  v2 = v1;
  sub_10006922C(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    sub_10006777C(*(_QWORD *)(v3 + 48) + 40 * v16, (uint64_t)v24);
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v16);
    v18 = *(_QWORD *)(v5 + 48) + 40 * v16;
    v19 = v24[0];
    v20 = v24[1];
    *(_QWORD *)(v18 + 32) = v25;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16) = v17;
    swift_retain(v17);
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1002EA8C8()
{
  sub_1002EA8E0(&qword_10064D9A8);
}

void sub_1002EA8D4()
{
  sub_1002EA8E0(&qword_10064D9A0);
}

void sub_1002EA8E0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  id v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_10006922C(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = *(void **)(*(_QWORD *)(v3 + 56) + 8 * v16);
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16) = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16) = v17;
    v18 = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1002EAA78()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  __int128 v23[2];

  v1 = v0;
  sub_10006922C((uint64_t *)&unk_10064D990);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 40 * v15;
    sub_100092328(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v23);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_1000E85C4(v23, *(_QWORD *)(v4 + 56) + v18);
    v19 = v17;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1002EAC40()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  _OWORD v28[3];
  uint64_t v29;
  _OWORD v30[3];
  uint64_t v31;

  v1 = v0;
  sub_10006922C((uint64_t *)&unk_10064D960);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 56 * v15;
    sub_1000A0110(*(_QWORD *)(v2 + 48) + 56 * v15, (uint64_t)v30);
    sub_1000A0110(*(_QWORD *)(v2 + 56) + v16, (uint64_t)v28);
    v17 = *(_QWORD *)(v4 + 48) + v16;
    v18 = v31;
    v19 = v30[2];
    v20 = v30[1];
    *(_OWORD *)v17 = v30[0];
    *(_OWORD *)(v17 + 16) = v20;
    *(_OWORD *)(v17 + 32) = v19;
    *(_QWORD *)(v17 + 48) = v18;
    v21 = *(_QWORD *)(v4 + 56) + v16;
    v22 = v28[0];
    v23 = v28[1];
    v24 = v28[2];
    *(_QWORD *)(v21 + 48) = v29;
    *(_OWORD *)(v21 + 16) = v23;
    *(_OWORD *)(v21 + 32) = v24;
    *(_OWORD *)v21 = v22;
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1002EAE30(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  os_log_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  os_log_t v54;
  uint64_t *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "providerID", v4);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(DOCDocumentSourceIdentifierLocal);
  if (v8 == v11 && v10 == v12)
    goto LABEL_14;
  v14 = v12;
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v11, v12, 0);
  swift_bridgeObjectRelease(v14);
  if ((v15 & 1) != 0)
  {
LABEL_11:
    swift_bridgeObjectRelease(v10);
LABEL_15:
    v24 = 1;
    return v24 & 1;
  }
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(DOCDocumentSourceIdentifierExternalDeviceFileProvider);
  if (v8 == v16 && v10 == v17)
    goto LABEL_14;
  v19 = v17;
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v16, v17, 0);
  swift_bridgeObjectRelease(v19);
  if ((v20 & 1) != 0)
    goto LABEL_11;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(DOCDocumentSourceIdentifierSMBFileProvider);
  v23 = v21;
  if (v8 == v22 && v10 == v21)
  {
LABEL_14:
    swift_bridgeObjectRelease_n(v10, 2);
    goto LABEL_15;
  }
  v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v22, v21, 0);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v10);
  if ((v26 & 1) != 0)
    goto LABEL_15;
  v27 = (void *)objc_opt_self(FPProviderDomain);
  v59 = 0;
  v28 = a1;
  v29 = objc_msgSend(v27, "providerDomainForItem:cachePolicy:error:", v28, 3, &v59);
  v30 = v59;
  if (v29)
  {
    v31 = v29;
    v32 = v59;

    v24 = FPProviderDomain.shouldUseDSCopyEngine.getter();
  }
  else
  {
    v33 = v59;
    v34 = _convertNSErrorToError(_:)(v30);

    swift_willThrow(v35);
    v37 = Logger.DocumentManager.unsafeMutableAddressor(v36);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v37, v2);
    v38 = v28;
    swift_errorRetain(v34);
    v39 = v38;
    v40 = swift_errorRetain(v34);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc(22, -1);
      v55 = (uint64_t *)swift_slowAlloc(8, -1);
      v56 = (void *)swift_slowAlloc(32, -1);
      v59 = v56;
      *(_DWORD *)v43 = 136315394;
      v44 = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
      v54 = v41;
      v45 = DOCNode.nodeDescription.getter(v44);
      v47 = v46;
      v57 = sub_1000544FC(v45, v46, (uint64_t *)&v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);

      swift_bridgeObjectRelease(v47);
      *(_WORD *)(v43 + 12) = 2112;
      swift_errorRetain(v34);
      v48 = _swift_stdlib_bridgeErrorToNSError(v34);
      v57 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
      v49 = v55;
      *v55 = v48;
      swift_errorRelease(v34);
      swift_errorRelease(v34);
      v50 = v54;
      _os_log_impl((void *)&_mh_execute_header, v54, v42, "Could not fetch provider domain for %s: %@", (uint8_t *)v43, 0x16u);
      v51 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v49, 1, v51);
      swift_slowDealloc(v49, -1, -1);
      v52 = v56;
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v43, -1, -1);

      swift_errorRelease(v34);
    }
    else
    {
      swift_errorRelease(v34);

      swift_errorRelease(v34);
      swift_errorRelease(v34);

    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v24 = 0;
  }
  return v24 & 1;
}

uint64_t type metadata accessor for DOCDSCopyEngineXPCConnection()
{
  return objc_opt_self(_TtC5FilesP33_26835C2B0009611E315373376F63BE5B28DOCDSCopyEngineXPCConnection);
}

_QWORD *sub_1002EB2E0(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v2 = a1[1];
  v3 = (void *)a1[3];
  v4 = (void *)a1[5];
  v5 = (void *)a1[6];
  v6 = (void *)a1[26];
  swift_unknownObjectRetain(*a1);
  swift_unknownObjectRetain(v2);
  v7 = v3;
  v8 = v4;
  v9 = v5;
  v10 = v6;
  return a1;
}

id sub_1002EB340(uint64_t a1)
{
  id result;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String_optional v5;
  void *object;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String_optional v11;
  void *v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  void *v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  Swift::String_optional v22;
  Swift::String v23;
  void *v24;
  uint64_t v25;
  void *v26;
  Swift::String v27;
  Swift::String_optional v28;
  Swift::String v29;
  void *v30;
  id v31;
  NSString v32;
  NSString v33;
  NSString v34;
  NSString v35;
  NSString v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;

  result = (id)_DocumentManagerBundle(a1);
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  v2 = result;
  v3._countAndFlagsBits = 0xD000000000000015;
  v4._countAndFlagsBits = 0xD00000000000001BLL;
  v37._countAndFlagsBits = 0xD000000000000031;
  v37._object = (void *)0x8000000100524910;
  v4._object = (void *)0x80000001005248D0;
  v3._object = (void *)0x80000001005248F0;
  v5.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v5.value._object = (void *)0xEB00000000656C62;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v2, v3, v37)._object;

  result = (id)_DocumentManagerBundle(v7);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v8 = result;
  v9._countAndFlagsBits = 0xD00000000000001DLL;
  v38._countAndFlagsBits = 0xD000000000000033;
  v38._object = (void *)0x80000001005249F0;
  v9._object = (void *)0x8000000100524950;
  v10._object = (void *)0x8000000100524970;
  v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v11.value._object = (void *)0xEB00000000656C62;
  v10._countAndFlagsBits = 0x1000000000000070;
  v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v11, (NSBundle)v8, v10, v38)._object;

  result = (id)_DocumentManagerBundle(v13);
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v14 = result;
  v15._countAndFlagsBits = 0xD000000000000028;
  v39._object = (void *)0x8000000100524A60;
  v15._object = (void *)0x8000000100524A30;
  v16.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v16.value._object = (void *)0xEB00000000656C62;
  v17._countAndFlagsBits = 0x746F42207065654BLL;
  v17._object = (void *)0xE900000000000068;
  v39._countAndFlagsBits = 0xD000000000000038;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v39)._object;

  result = (id)_DocumentManagerBundle(v19);
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v20 = result;
  v21._countAndFlagsBits = 0xD000000000000023;
  v40._object = (void *)0x8000000100524A60;
  v21._object = (void *)0x8000000100524AA0;
  v22.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v22.value._object = (void *)0xEB00000000656C62;
  v23._countAndFlagsBits = 1886352467;
  v23._object = (void *)0xE400000000000000;
  v40._countAndFlagsBits = 0xD000000000000038;
  v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, (NSBundle)v20, v23, v40)._object;

  result = (id)_DocumentManagerBundle(v25);
  if (result)
  {
    v26 = result;
    v27._countAndFlagsBits = 0xD000000000000026;
    v41._object = (void *)0x8000000100524A60;
    v27._object = (void *)0x8000000100524AD0;
    v28.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v28.value._object = (void *)0xEB00000000656C62;
    v29._countAndFlagsBits = 0x6563616C706552;
    v29._object = (void *)0xE700000000000000;
    v41._countAndFlagsBits = 0xD000000000000038;
    v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, v28, (NSBundle)v26, v29, v41)._object;

    v31 = objc_msgSend(objc_allocWithZone((Class)DSConflictStrategy), "init");
    objc_msgSend(v31, "setType:", 2);
    v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    objc_msgSend(v31, "setLocalizedAlertTitle:", v32);

    v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
    objc_msgSend(v31, "setLocalizedAlertMessageFormat:", v33);

    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
    objc_msgSend(v31, "setLocalizedTitle:forResolution:", v34, 2);

    v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
    objc_msgSend(v31, "setLocalizedTitle:forResolution:", v35, 0);

    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
    objc_msgSend(v31, "setLocalizedTitle:forResolution:", v36, 1);

    return v31;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1002EB748()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1002EB76C(uint64_t a1)
{
  uint64_t v1;

  sub_1002D9C78(a1, *(char **)(v1 + 16));
}

uint64_t sub_1002EB774()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1002EB7A0()
{
  uint64_t v0;

  sub_1002DA788(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

double sub_1002EB7A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  __int128 v32;
  int v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  char *v35;
  void *v36;
  NSURL *v37;
  void *v38;
  void *v39;
  NSURL *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  id v44;
  void (*v45)(char *, uint64_t);
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSURL *v51;
  NSURL *v52;
  uint64_t v53;
  uint64_t v54;
  NSURL *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  __n128 v61;
  void (*v62)(char *, uint64_t, __n128);
  double result;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  __int128 v68;
  uint64_t v69;
  NSURL *v70;
  uint64_t v71;
  unsigned int v72;
  id v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  _OWORD v80[2];
  uint64_t v81;

  v2 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v2);
  v4 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v75 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v79 = (char *)&v64 - v9;
  v10 = sub_10006922C(&qword_10064DA58);
  __chkstk_darwin(v10);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v64 - v14;
  v16 = *(_QWORD *)(a1 + 64);
  v74 = a1 + 64;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v20 = (unint64_t)(v17 + 63) >> 6;
  v64 = v20 - 1;
  swift_bridgeObjectRetain(a1);
  v21 = 0;
  v73 = 0;
  v76 = v20;
  v66 = v20 - 5;
  v65 = a1 + 104;
  v68 = xmmword_1004D9B50;
  v67 = 0x80000001005248B0;
  v77 = v4;
  v69 = a1;
  if (!v19)
    goto LABEL_9;
LABEL_7:
  v22 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v78 = v21;
  v23 = v22 | (v21 << 6);
LABEL_8:
  sub_10006777C(*(_QWORD *)(a1 + 48) + 40 * v23, (uint64_t)v12);
  v24 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(v6 + 72) * v23;
  v25 = sub_10006922C((uint64_t *)&unk_10064DA60);
  (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(&v12[*(int *)(v25 + 48)], v24, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v12, 0, 1, v25);
  v4 = v77;
  while (1)
  {
    sub_100070EDC((uint64_t)v12, (uint64_t)v15, &qword_10064DA58);
    v29 = sub_10006922C((uint64_t *)&unk_10064DA60);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v15, 1, v29) == 1)
      break;
    v30 = &v15[*(int *)(v29 + 48)];
    v31 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v31(v79, v30, v5);
    v32 = *((_OWORD *)v15 + 1);
    v80[0] = *(_OWORD *)v15;
    v80[1] = v32;
    v81 = *((_QWORD *)v15 + 4);
    v33 = swift_dynamicCast(v4, v80, &type metadata for AnyHashable, v5, 6);
    v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    if (!v33)
    {
      v34(v4, 1, 1, v5);
LABEL_6:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v79, v5);
      sub_10000CB4C((uint64_t)v4, &qword_100643470);
      v21 = v78;
      if (v19)
        goto LABEL_7;
      goto LABEL_9;
    }
    v34(v4, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
      goto LABEL_6;
    v35 = v75;
    v31(v75, v4, v5);
    v36 = (void *)objc_opt_self(QLThumbnailAddition);
    URL._bridgeToObjectiveC()(v37);
    v39 = v38;
    URL._bridgeToObjectiveC()(v40);
    v42 = v41;
    *(_QWORD *)&v80[0] = 0;
    LODWORD(v36) = objc_msgSend(v36, "associateThumbnailsForDocumentAtURL:withDocumentAtURL:error:", v39, v41, v80);

    v43 = *(_QWORD *)&v80[0];
    if ((_DWORD)v36)
    {
      v44 = *(id *)&v80[0];
      v45 = *(void (**)(char *, uint64_t))(v6 + 8);
      v45(v35, v5);
      v45(v79, v5);
    }
    else
    {
      v46 = *(id *)&v80[0];
      v71 = _convertNSErrorToError(_:)(v43);

      v48 = swift_willThrow(v47);
      v73 = *(id *)DOCLog.UI.unsafeMutableAddressor(v48);
      v72 = static os_log_type_t.error.getter(v73);
      v49 = sub_10006922C((uint64_t *)&unk_100644560);
      v50 = swift_allocObject(v49, 192, 7);
      *(_OWORD *)(v50 + 16) = v68;
      *(_QWORD *)(v50 + 56) = &type metadata for String;
      *(_QWORD *)(v50 + 64) = sub_10006A638();
      *(_QWORD *)(v50 + 32) = 0xD000000000000018;
      v51 = (NSURL *)v67;
      *(_QWORD *)(v50 + 40) = v67;
      URL._bridgeToObjectiveC()(v51);
      v70 = v52;
      v53 = sub_10004F2F0(0, (unint64_t *)&qword_1006533E0, NSURL_ptr);
      *(_QWORD *)(v50 + 96) = v53;
      v54 = sub_100083500((unint64_t *)&qword_100646B10, (unint64_t *)&qword_1006533E0, NSURL_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
      *(_QWORD *)(v50 + 104) = v54;
      v55 = v70;
      *(_QWORD *)(v50 + 72) = v70;
      URL._bridgeToObjectiveC()(v55);
      *(_QWORD *)(v50 + 136) = v53;
      *(_QWORD *)(v50 + 144) = v54;
      *(_QWORD *)(v50 + 112) = v56;
      v57 = v71;
      v58 = _convertErrorToNSError(_:)(v71);
      *(_QWORD *)(v50 + 176) = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
      *(_QWORD *)(v50 + 184) = sub_100083500((unint64_t *)&qword_1006448B0, (unint64_t *)&qword_100644570, NSError_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
      *(_QWORD *)(v50 + 152) = v58;
      v59 = v73;
      os_log(_:dso:log:type:_:)("%@: Unable to associate thumbnail for %@ to source %@ : %@", 58, 2, &_mh_execute_header, v73, v72, v50);
      swift_errorRelease(v57);

      v60 = v50;
      a1 = v69;
      v61 = swift_bridgeObjectRelease(v60);
      v62 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
      v62(v75, v5, v61);
      ((void (*)(char *, uint64_t))v62)(v79, v5);
      v73 = 0;
    }
    v4 = v77;
    v21 = v78;
    if (v19)
      goto LABEL_7;
LABEL_9:
    v26 = v21 + 1;
    if (__OFADD__(v21, 1))
      __break(1u);
    if (v26 >= v76)
    {
      v78 = v21;
    }
    else
    {
      v27 = *(_QWORD *)(v74 + 8 * v26);
      if (v27)
        goto LABEL_12;
      if ((uint64_t)(v21 + 2) >= v76)
      {
        v78 = v21 + 1;
      }
      else
      {
        v27 = *(_QWORD *)(v74 + 8 * (v21 + 2));
        if (v27)
        {
          v26 = v21 + 2;
LABEL_12:
          v19 = (v27 - 1) & v27;
          v23 = __clz(__rbit64(v27)) + (v26 << 6);
          v78 = v26;
          goto LABEL_8;
        }
        if ((uint64_t)(v21 + 3) >= v76)
        {
          v78 = v21 + 2;
        }
        else
        {
          v27 = *(_QWORD *)(v74 + 8 * (v21 + 3));
          if (v27)
          {
            v26 = v21 + 3;
            goto LABEL_12;
          }
          v26 = v21 + 4;
          if ((uint64_t)(v21 + 4) >= v76)
          {
            v78 = v21 + 3;
          }
          else
          {
            v27 = *(_QWORD *)(v74 + 8 * v26);
            if (v27)
              goto LABEL_12;
            while (v66 != v21)
            {
              v27 = *(_QWORD *)(v65 + 8 * v21++);
              if (v27)
              {
                v26 = v21 + 4;
                goto LABEL_12;
              }
            }
            v78 = v64;
          }
        }
      }
    }
    v28 = sub_10006922C((uint64_t *)&unk_10064DA60);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v12, 1, 1, v28);
    v19 = 0;
  }
  *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

uint64_t sub_1002EBEB4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002EBED8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  sub_100068588((_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 72, 7);
}

void sub_1002EBF0C(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1002D8400(a1, a2, *(dispatch_group_t *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + 32);
}

uint64_t sub_1002EBF18()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 64, 7);
}

void sub_1002EBF64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1002D93C8(a1, a2, *(NSObject **)(v2 + 16), *(void **)(v2 + 24), *(char **)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(void **)(v2 + 56));
}

uint64_t sub_1002EBF74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v8 + 8, v5);
}

void sub_1002EC02C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1002D9928(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(NSObject **)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

void sub_1002EC0A8(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  _QWORD *v33;
  _QWORD aBlock[5];
  _QWORD *v35;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend((id)objc_opt_self(DOCUserInterfaceStateStore), "sharedStore");
  v12 = objc_msgSend(v2, "configuration");
  v13 = objc_msgSend(v11, "interfaceStateForConfiguration:", v12);

  if (v13)
  {
    v14 = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    v15 = (void *)DOCNode.sourceIdentifier.getter(v14);
    v32 = objc_msgSend(objc_allocWithZone((Class)DOCConcreteLocation), "initWithSourceIdentifier:node:", v15, a1);

    if (objc_msgSend(v32, "canBeRestored"))
    {
      v16 = (char *)objc_msgSend(v2, "hierarchyController");
      v30 = *(id *)&v16[OBJC_IVAR____TtC5Files22DOCHierarchyController_lastVisitedLocationSavingQueue];

      v17 = swift_allocObject(&unk_1005DB0D8, 24, 7);
      swift_unknownObjectWeakInit(v17 + 16);
      v18 = (_QWORD *)swift_allocObject(&unk_1005DB3F8, 40, 7);
      v19 = v32;
      v18[2] = v17;
      v18[3] = v19;
      v18[4] = v13;
      aBlock[4] = sub_1002F0B74;
      v35 = v18;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10004A82C;
      aBlock[3] = &unk_1005DB410;
      v20 = _Block_copy(aBlock);
      swift_retain();
      v32 = v32;
      v29 = v13;
      static DispatchQoS.unspecified.getter(v29);
      v33 = _swiftEmptyArrayStorage;
      v21 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v22 = v8;
      v23 = v5;
      v24 = sub_10006922C((uint64_t *)&unk_100647540);
      v25 = sub_100062698((unint64_t *)&qword_100641270, (uint64_t *)&unk_100647540, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v24, v25, v4, v21);
      v26 = v30;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v20);
      _Block_release(v20);

      (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v22);
      v27 = v35;
      swift_release(v17);
      swift_release(v27);
    }
    else
    {

    }
  }
}

void sub_1002EC424(uint64_t a1, char a2)
{
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  char **v8;
  BOOL *v9;
  id v10;
  _BYTE v11[24];

  v4 = sub_1002CDD08();
  v5 = objc_msgSend(v4, "customView");

  if (v5)
  {
    v6 = objc_opt_self(UIActivityIndicatorView);
    v7 = (void *)swift_dynamicCastObjCClassUnconditional(v5, v6, 0, 0, 0);
    v8 = &selRef_startAnimating;
    if ((a2 & 1) == 0)
      v8 = &selRef_stopAnimating;
    objc_msgSend(v7, *v8);
    v9 = (BOOL *)(a1 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_isUserInteractionEnabled);
    swift_beginAccess(a1 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_isUserInteractionEnabled, v11, 1, 0);
    *v9 = (a2 & 1) == 0;
    if ((a2 & 1) != 0)
    {
      v10 = objc_msgSend((id)objc_opt_self(DOCKeyboardFocusManager), "sharedManager");
      objc_msgSend(v10, "unregisterKeyboardFocusable:", a1);

    }
    _s5Files31DOCItemCollectionViewControllerC13updateOverlay8animatedySb_tF_0();

  }
  else
  {
    __break(1u);
  }
}

double sub_1002EC544(void *a1)
{
  void *v1;
  id v3;
  unsigned int v4;
  double result;
  char *v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;

  v3 = objc_msgSend(v1, "configuration");
  v4 = objc_msgSend(v3, "forSavingDocuments");

  if (v4)
  {
    v6 = (char *)objc_msgSend(v1, "pickerFilenameView");
    if (v6)
    {
      v7 = v6;
      v8 = objc_msgSend(a1, "displayName");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v10 = v9;

      v11 = *(_QWORD *)(*(_QWORD *)&v7[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_pickerContext]
                      + OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave);
      if (v11 && *(_QWORD *)(v11 + 16) == 1)
      {
        v12 = sub_1000D6978();
        v13 = String._bridgeToObjectiveC()();
        objc_msgSend(v12, "setText:", v13, swift_bridgeObjectRelease(v10).n128_f64[0]);

      }
      else
      {

        *(_QWORD *)&result = swift_bridgeObjectRelease(v10).n128_u64[0];
      }
    }
  }
  return result;
}

double sub_1002EC6E4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  id v22;
  id v23;
  void *v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  id v33;
  _QWORD *v34;
  double v35;
  id v36;
  unsigned int v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  void (*v43)(uint64_t, uint64_t, __n128);
  _BOOL8 v44;
  __n128 v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  BOOL v63;
  _QWORD *v64;
  id v65;
  _QWORD *v66;
  char *v67;
  void **v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double result;
  id v78;
  unsigned __int8 v79;
  unint64_t v80;
  _BOOL4 v81;
  uint64_t v82;
  uint64_t v83;
  void **v84;
  void (*v85)(char *, void **, uint64_t);
  uint64_t i;
  unint64_t v87;
  unint64_t v88;
  double v89;
  char *v90;
  void *v91;
  uint64_t v92;
  id v93;
  id v94;
  void **v95;
  uint64_t v96;
  uint64_t v97;
  Swift::String v98;
  unint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  id v103;
  id v104;
  char v105;
  id v106;
  id v107;
  unint64_t v108;
  int v109;
  void **v110;
  uint64_t v111;
  void **v112;
  uint64_t v113;
  void *v114;
  unint64_t v115;
  unint64_t v116;
  id v117;
  id v118;
  void *v119;
  unsigned int v120;
  uint64_t v121;
  void **v122;
  void *v123;
  void **v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  char *v129;
  unint64_t v130;
  char v131;
  unint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  NSString v136;
  id v137;
  uint64_t v138;
  id v139;
  void *v140;
  Swift::String v141;
  Swift::String_optional v142;
  Swift::String v143;
  void *object;
  NSString v145;
  id v146;
  NSString v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  NSString v153;
  double v154;
  id v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  _QWORD *v164;
  id v165;
  uint64_t v166;
  char *v167;
  unint64_t v168;
  __int128 v169;
  unsigned int v170;
  _QWORD *v171;
  uint64_t v172;
  void (*v173)(char *, uint64_t, uint64_t, uint64_t);
  void *v174;
  id v175;
  char *v176;
  void (*v177)(uint64_t);
  void (*v178)(char *, void **, uint64_t);
  void **v179;
  _QWORD *v180;
  _QWORD v181[3];
  char v182[8];
  void **aBlock;
  uint64_t v184;
  uint64_t (*v185)(uint64_t);
  void *v186;
  void (*v187)();
  uint64_t v188;
  Swift::String v189;

  v2 = v1;
  v174 = (void *)a1;
  v178 = (void (*)(char *, void **, uint64_t))type metadata accessor for DOCOperationItem(0);
  v3 = *((_QWORD *)v178 - 1);
  __chkstk_darwin(v178);
  v5 = (void **)((char *)&v159 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v8 = (unint64_t)&v159 - v7;
  v9 = type metadata accessor for CharacterSet(0);
  v166 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v167 = (char *)&v159 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v172 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v179 = (void **)((char *)&v159 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v15 = (void (*)(uint64_t))((char *)&v159 - v14);
  v16 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v16);
  v18 = (char *)&v159 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  v176 = (char *)&v159 - v21;
  v22 = objc_msgSend(v1, "pickerContext", v20);

  if (v22)
  {
    v23 = DOCFullDocumentManagerViewController.sidebarViewController.getter();
    if (!v23)
    {
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v11);
      __break(1u);
LABEL_96:
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000010, 0x8000000100524D40, "Files/DOCFullDocumentManagerViewController+DocumentPicker.swift", 63, 2, 237, 0);
      goto LABEL_101;
    }
    v24 = v23;
    sub_1002352D4();

  }
  v177 = v15;
  v25 = (char *)objc_msgSend(v2, "pickerContext");
  if (!v25)
  {
    v28 = swift_allocObject(&unk_1005DB088, 24, 7);
    *(_QWORD *)(v28 + 16) = &_swiftEmptyDictionarySingleton;
    v64 = (_QWORD *)swift_allocObject(&unk_1005DB128, 48, 7);
    v31 = v174;
    v64[2] = v2;
    v64[3] = v31;
    v64[4] = 0;
    v64[5] = v28;
    v171 = v64;
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1002F0B84;
    goto LABEL_27;
  }
  v26 = v25;
  v162 = v18;
  v163 = v9;
  v27 = *(_QWORD *)&v25[OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave];
  swift_bridgeObjectRetain(v27);

  v28 = swift_allocObject(&unk_1005DB088, 24, 7);
  v29 = v2;
  *(_QWORD *)(v28 + 16) = &_swiftEmptyDictionarySingleton;
  v2 = (_QWORD *)(v28 + 16);
  v30 = (_QWORD *)swift_allocObject(&unk_1005DB0B0, 48, 7);
  v31 = v174;
  v30[2] = v29;
  v30[3] = v31;
  v30[4] = v27;
  v30[5] = v28;
  v171 = v30;
  if (!v27)
  {
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1002F06A4;
    v2 = v29;
LABEL_27:
    v65 = v31;
    v66 = v2;
    v67 = (char *)objc_msgSend(v66, "pickerContext", swift_retain().n128_f64[0]);
    if (v67)
    {
      v40 = *(_QWORD *)&v67[OBJC_IVAR____TtC5Files16DOCPickerContext_itemsToMove];
      if (v40)
      {
        v175 = v67;
        swift_bridgeObjectRetain(v40);
        v68 = (void **)objc_msgSend(v66, "pickerOperationFor:", v65);
        LODWORD(v38) = 1;
        switch((unint64_t)v68)
        {
          case 0uLL:
            swift_bridgeObjectRelease(v40);
            v70 = *(id *)DOCLog.UI.unsafeMutableAddressor(v69);
            v71 = static os_log_type_t.error.getter(v70);
            v72 = sub_10006922C((uint64_t *)&unk_100644560);
            v73 = swift_allocObject(v72, 72, 7);
            *(_OWORD *)(v73 + 16) = xmmword_1004D9670;
            *(_QWORD *)(v73 + 56) = &type metadata for String;
            *(_QWORD *)(v73 + 64) = sub_10006A638();
            *(_QWORD *)(v73 + 32) = 0xD000000000000013;
            *(_QWORD *)(v73 + 40) = 0x8000000100524D90;
            os_log(_:dso:log:type:_:)("%@: No operation to perform on these items", 42, 2, &_mh_execute_header, v70, v71, v73);
            swift_release(v28);

            goto LABEL_32;
          case 1uLL:
            goto LABEL_37;
          case 2uLL:
            LODWORD(v38) = 0;
LABEL_37:
            v56 = v40 & 0xFFFFFFFFFFFFFF8;
            if ((unint64_t)v40 >> 62)
              goto LABEL_87;
            v11 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
            goto LABEL_39;
          case 3uLL:
            goto LABEL_98;
          default:
            aBlock = v68;
            _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DOCPickerOperation, &aBlock, &type metadata for DOCPickerOperation, &type metadata for Int);
            __break(1u);
LABEL_98:
            v158 = 223;
            goto LABEL_100;
        }
      }

    }
    v177 = (void (*)(uint64_t))isUniquelyReferenced_nonNull_native;
    v78 = objc_msgSend(v66, "configuration");
    v79 = objc_msgSend(v78, "forPickingFolders");

    if ((v79 & 1) != 0)
    {
      v81 = 0;
      v82 = 0;
      LODWORD(v176) = 0;
      v83 = 0;
      v84 = (void **)_swiftEmptyArrayStorage;
      goto LABEL_69;
    }
    goto LABEL_96;
  }
  v32 = v31;
  swift_bridgeObjectRetain_n(v27, 2);
  v33 = v32;
  v164 = v29;
  v34 = v29;
  *(_QWORD *)&v35 = swift_retain().n128_u64[0];
  v165 = v34;
  v36 = objc_msgSend(v34, "configuration", v35);
  v37 = objc_msgSend(v36, "forSavingDocuments");

  if (!v37)
  {
    v74 = swift_bridgeObjectRelease_n(v27, 2);
    v70 = *(id *)DOCLog.UI.unsafeMutableAddressor(v74);
    v75 = static os_log_type_t.error.getter(v70);
    v76 = sub_10006922C((uint64_t *)&unk_100644560);
    v73 = swift_allocObject(v76, 72, 7);
    *(_OWORD *)(v73 + 16) = xmmword_1004D9670;
    *(_QWORD *)(v73 + 56) = &type metadata for String;
    *(_QWORD *)(v73 + 64) = sub_10006A638();
    *(_QWORD *)(v73 + 32) = 0xD000000000000013;
    *(_QWORD *)(v73 + 40) = 0x8000000100524D90;
    os_log(_:dso:log:type:_:)("%@: Trying to export with the wrong interaction mode", 52, 2, &_mh_execute_header, v70, v75, v73);
    swift_release(v28);
LABEL_32:

    swift_bridgeObjectRelease(v73);
    *(_QWORD *)&result = swift_release(v171).n128_u64[0];
    return result;
  }
  v161 = v28;
  v28 = *(_QWORD *)(v27 + 16);
  v160 = v27;
  v159 = v28;
  if (!v28)
  {
    v173 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v172 + 56);
    swift_bridgeObjectRetain(v27);
    v39 = v176;
LABEL_48:
    v173(v39, 1, 1, v11);
LABEL_49:
    *(_QWORD *)&v89 = swift_bridgeObjectRelease(v160).n128_u64[0];
    v90 = (char *)objc_msgSend(v165, "pickerFilenameView", v89);
    v91 = v90;
    v28 = v161;
    if (!v90)
    {
      v102 = 0;
      goto LABEL_57;
    }
    v92 = *(_QWORD *)(*(_QWORD *)&v90[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_pickerContext]
                    + OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave);
    if (!v92
      || *(_QWORD *)(v92 + 16) != 1
      || (v93 = sub_1000D6978(),
          v94 = objc_msgSend(v93, "text"),
          v93,
          !v94))
    {

      v102 = 0;
      v91 = 0;
      goto LABEL_57;
    }
    v95 = (void **)static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
    v97 = v96;

    v98._countAndFlagsBits = 46;
    v98._object = (void *)0xE100000000000000;
    if (String.hasPrefix(_:)(v98))
    {
      v99 = sub_10028A0E8();
      v100 = swift_allocError(&type metadata for FilenameValidationError, v99, 0, 0);
      *v101 = 2;
      goto LABEL_76;
    }
    v129 = v167;
    CharacterSet.init(charactersIn:)(58, 0xE100000000000000);
    aBlock = v95;
    v184 = v97;
    v130 = sub_10008B9BC();
    StringProtocol.rangeOfCharacter(from:options:range:)(v129, 0, 0, 0, 1, &type metadata for String, v130);
    if ((v131 & 1) == 0)
    {
      v132 = sub_10028A0E8();
      v100 = swift_allocError(&type metadata for FilenameValidationError, v132, 0, 0);
      *v133 = 3;
      (*(void (**)(char *, uint64_t))(v166 + 8))(v129, v163);
LABEL_76:
      swift_bridgeObjectRelease_n(v160, 2);
      swift_bridgeObjectRelease(v97);
      swift_getErrorValue(v100, v182, v181);
      Error.localizedDescription.getter(v181[1], v181[2]);
      v135 = v134;
      v136 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v135);
      v137 = objc_msgSend((id)objc_opt_self(DOCAlertController), "alertControllerWithTitle:message:preferredStyle:", 0, v136, 1);

      v139 = (id)_DocumentManagerBundle(v138);
      if (v139)
      {
        v140 = v139;
        v189._object = (void *)0xE200000000000000;
        v141._countAndFlagsBits = 19279;
        v141._object = (void *)0xE200000000000000;
        v142.value._countAndFlagsBits = 0x617A696C61636F4CLL;
        v142.value._object = (void *)0xEB00000000656C62;
        v143._countAndFlagsBits = 0;
        v143._object = (void *)0xE000000000000000;
        v189._countAndFlagsBits = 19279;
        object = NSLocalizedString(_:tableName:bundle:value:comment:)(v141, v142, (NSBundle)v140, v143, v189)._object;

        v145 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(object);
        v146 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v145, 0, 0);

        objc_msgSend(v137, "addAction:", v146);
        objc_msgSend(v165, "presentViewController:animated:completion:", v137, 1, 0);

        swift_release(v171);
        swift_errorRelease(v100);
        goto LABEL_73;
      }
      goto LABEL_94;
    }
    (*(void (**)(char *, uint64_t))(v166 + 8))(v129, v163);
    v147 = String._bridgeToObjectiveC()();
    if (v159)
    {
      if (!*(_QWORD *)(v160 + 16))
      {
LABEL_92:
        __break(1u);
        goto LABEL_93;
      }
      v148 = v172;
      v149 = (uint64_t)v162;
      (*(void (**)(char *, unint64_t, uint64_t))(v172 + 16))(v162, v160 + ((*(unsigned __int8 *)(v148 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80)), v11);
      v173((char *)v149, 0, 1, v11);
      v150 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v148 + 48))(v149, 1, v11);
      if ((_DWORD)v150 != 1)
      {
        URL.pathExtension.getter(v150);
        v152 = v151;
        (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v149, v11);
        v153 = String._bridgeToObjectiveC()();
        *(_QWORD *)&v154 = swift_bridgeObjectRelease(v152).n128_u64[0];
LABEL_84:
        v155 = objc_msgSend(v147, "fp_filenameFromDisplayNameWithExtension:", v153, v154, v159);

        v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v155);
        v91 = v156;
        swift_bridgeObjectRelease(v97);

LABEL_57:
        v83 = v160;
        v103 = v165;
        v104 = objc_msgSend(v165, "configuration", v159);
        v105 = objc_msgSend(v104, "isContentManaged");

        v106 = objc_msgSend(v103, "configuration");
        v107 = objc_msgSend(v106, "interactionMode");

        if (v107 == (id)2)
        {
          LODWORD(v176) = 1;
          v2 = v164;
        }
        else
        {
          v2 = v164;
          if (v107 != (id)3)
          {
            swift_bridgeObjectRelease(v83);
            swift_bridgeObjectRelease(v91);
            v158 = 211;
LABEL_100:
            _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000031, 0x8000000100524DB0, "Files/DOCFullDocumentManagerViewController+DocumentPicker.swift", 63, 2, v158, 0);
LABEL_101:
            __break(1u);
            JUMPOUT(0x1002EDA30);
          }
          LODWORD(v176) = 0;
        }
        swift_bridgeObjectRetain(v91);
        v84 = (void **)sub_1002F0828(v83, v102, (uint64_t)v91, v105);
        v82 = 2;
        swift_bridgeObjectRelease_n(v91, 2);
        v108 = *(_QWORD *)(v83 + 16);
        v80 = swift_bridgeObjectRelease(v83).n128_u64[0];
        v109 = 0;
        v81 = v108 > 1;
        v177 = sub_1002F06A4;
        goto LABEL_70;
      }
    }
    else
    {
      v149 = (uint64_t)v162;
      v173(v162, 1, 1, v11);
    }
    sub_100157D6C(v149);
    v153 = 0;
    goto LABEL_84;
  }
  v38 = v172;
  v5 = (void **)(v27 + ((*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80)));
  v175 = *(id *)(v172 + 72);
  v178 = *(void (**)(char *, void **, uint64_t))(v172 + 16);
  swift_bridgeObjectRetain(v27);
  v169 = xmmword_1004D4CE0;
  v168 = 0x8000000100524D90;
  v39 = v176;
  v40 = (uint64_t)v177;
  while (1)
  {
    v178(v39, v5, v11);
    v173 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
    v173(v39, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v39, 1, v11) == 1)
      goto LABEL_49;
    (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v40, v39, v11);
    v44 = URL.startAccessingSecurityScopedResource()();
    v3 = v44;
    if (!v44)
    {
      v46 = *(id *)DOCLog.UI.unsafeMutableAddressor(v44);
      v170 = static os_log_type_t.error.getter(v46);
      v47 = sub_10006922C((uint64_t *)&unk_100644560);
      v48 = swift_allocObject(v47, 112, 7);
      *(_OWORD *)(v48 + 16) = v169;
      *(_QWORD *)(v48 + 56) = &type metadata for String;
      v49 = sub_10006A638();
      *(_QWORD *)(v48 + 64) = v49;
      *(_QWORD *)(v48 + 32) = 0xD000000000000013;
      *(_QWORD *)(v48 + 40) = v168;
      v50 = URL.absoluteString.getter(v49);
      *(_QWORD *)(v48 + 96) = &type metadata for String;
      *(_QWORD *)(v48 + 104) = v49;
      v38 = v172;
      *(_QWORD *)(v48 + 72) = v50;
      *(_QWORD *)(v48 + 80) = v51;
      v40 = (uint64_t)v177;
      os_log(_:dso:log:type:_:)("%@: Cannot acces URL to export : %@", 35, 2, &_mh_execute_header, v46, v170, v48);

      v45 = swift_bridgeObjectRelease(v48);
    }
    v52 = (uint64_t)v179;
    ((void (*)(void **, uint64_t, uint64_t, __n128))v178)(v179, v40, v11, v45);
    swift_beginAccess(v2, &aBlock, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v180 = (_QWORD *)*v2;
    v54 = v180;
    *v2 = 0x8000000000000000;
    v8 = sub_100140624(v52);
    v56 = v54[2];
    v57 = (v55 & 1) == 0;
    v58 = v56 + v57;
    if (__OFADD__(v56, v57))
      break;
    v40 = v55;
    if (v54[3] >= v58)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v61 = v180;
        if ((v55 & 1) != 0)
          goto LABEL_9;
      }
      else
      {
        sub_1002E9794();
        v61 = v180;
        if ((v40 & 1) != 0)
          goto LABEL_9;
      }
    }
    else
    {
      sub_1002E16C8(v58, isUniquelyReferenced_nonNull_native);
      v59 = sub_100140624((uint64_t)v179);
      if ((v40 & 1) != (v60 & 1))
        goto LABEL_95;
      v8 = v59;
      v61 = v180;
      if ((v40 & 1) != 0)
      {
LABEL_9:
        *(_BYTE *)(v61[7] + v8) = v3 & 1;
        goto LABEL_10;
      }
    }
    v61[(v8 >> 6) + 8] |= 1 << v8;
    v178((char *)(v61[6] + v8 * (_QWORD)v175), v179, v11);
    *(_BYTE *)(v61[7] + v8) = v3 & 1;
    v62 = v61[2];
    v63 = __OFADD__(v62, 1);
    v56 = v62 + 1;
    if (v63)
      goto LABEL_86;
    v61[2] = v56;
LABEL_10:
    v41 = *v2;
    *v2 = v61;
    v42 = swift_bridgeObjectRelease(v41);
    v43 = *(void (**)(uint64_t, uint64_t, __n128))(v38 + 8);
    v43((uint64_t)v179, v11, v42);
    swift_endAccess(&aBlock);
    v40 = (uint64_t)v177;
    ((void (*)(void (*)(uint64_t), uint64_t))v43)(v177, v11);
    v39 = v176;
    v5 = (void **)((char *)v175 + (_QWORD)v5);
    if (!--v28)
      goto LABEL_48;
  }
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  if (v40 >= 0)
    v157 = v56;
  else
    v157 = v40;
  swift_bridgeObjectRetain(v40);
  v11 = _CocoaArrayWrapper.endIndex.getter(v157);
  swift_bridgeObjectRelease(v40);
LABEL_39:
  v177 = (void (*)(uint64_t))isUniquelyReferenced_nonNull_native;
  LODWORD(v176) = v38;
  if (!v11)
  {

    v80 = swift_bridgeObjectRelease(v40).n128_u64[0];
    v84 = (void **)_swiftEmptyArrayStorage;
    goto LABEL_68;
  }
  aBlock = (void **)_swiftEmptyArrayStorage;
  sub_100155054(0, v11 & ~(v11 >> 63), 0);
  if (v11 < 0)
  {
    __break(1u);
    goto LABEL_92;
  }
  v164 = v2;
  v161 = v28;
  v84 = aBlock;
  v85 = v178;
  v179 = (void **)v40;
  if ((v40 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v11; ++i)
    {
      *(_QWORD *)v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v179);
      swift_storeEnumTagMultiPayload(v8, v85, 1);
      aBlock = v84;
      v88 = (unint64_t)v84[2];
      v87 = (unint64_t)v84[3];
      if (v88 >= v87 >> 1)
      {
        sub_100155054(v87 > 1, v88 + 1, 1);
        v85 = v178;
        v84 = aBlock;
      }
      v84[2] = (void *)(v88 + 1);
      sub_1000E2AB4(v8, (uint64_t)v84+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v88);
    }
  }
  else
  {
    v110 = (void **)(v40 + 32);
    v111 = v11;
    v112 = v5;
    do
    {
      v113 = v11;
      v114 = *v110;
      *v112 = *v110;
      swift_storeEnumTagMultiPayload(v112, v85, 1);
      aBlock = v84;
      v116 = (unint64_t)v84[2];
      v115 = (unint64_t)v84[3];
      v117 = v114;
      if (v116 >= v115 >> 1)
      {
        sub_100155054(v115 > 1, v116 + 1, 1);
        v84 = aBlock;
      }
      v84[2] = (void *)(v116 + 1);
      sub_1000E2AB4((uint64_t)v112, (uint64_t)v84+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v116);
      ++v110;
      --v111;
      v85 = v178;
      v11 = v113;
    }
    while (v111);
  }

  v80 = swift_bridgeObjectRelease(v179).n128_u64[0];
  v28 = v161;
  v2 = v164;
LABEL_68:
  v82 = 0;
  v83 = 0;
  v81 = v11 > 1;
LABEL_69:
  v109 = 1;
LABEL_70:
  v118 = objc_msgSend(v2, "configuration", *(double *)&v80, v159);
  v119 = v2;
  v120 = objc_msgSend(v118, "forPickingFolders");

  if (v120)
  {
    swift_bridgeObjectRelease(v84);
    v121 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v122 = (void **)swift_allocObject(v121, 40, 7);
    *((_OWORD *)v122 + 1) = xmmword_1004D9B40;
    v123 = v174;
    v122[4] = v174;
    aBlock = v122;
    specialized Array._endMutation()(v122);
    v124 = aBlock;
    sub_1002EDA40((uint64_t)aBlock, v119, (uint64_t)v123, v83, v28);
    swift_release(v28);
    swift_bridgeObjectRelease(v124);
    swift_release(v171);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v83).n128_u64[0];
    return result;
  }
  swift_bridgeObjectRelease(v83);
  v125 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
  v126 = (uint64_t)v171;
  swift_retain();
  sub_100477E1C(v176, (uint64_t)v84, (uint64_t)v174, v81, v82, v109, (uint64_t)v119, (uint64_t)v177, v126);

  swift_bridgeObjectRelease(v84);
  swift_release(v126);
  v127 = swift_allocObject(&unk_1005DB0D8, 24, 7);
  swift_unknownObjectWeakInit(v127 + 16);
  v187 = sub_1002F06D4;
  v188 = v127;
  aBlock = _NSConcreteStackBlock;
  v184 = 1107296256;
  v185 = sub_10004A82C;
  v186 = &unk_1005DB0F0;
  v128 = _Block_copy(&aBlock);
  swift_release(v188);
  DOCRunInMainThread(v128);
  swift_release(v126);
  _Block_release(v128);
LABEL_73:
  *(_QWORD *)&result = swift_release(v28).n128_u64[0];
  return result;
}

void sub_1002EDA40(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  char *v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  id *v57;
  void (*v58)(uint64_t *, void *);
  id v59;
  void *v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  NSString v67;
  Class isa;
  id v69;
  id v70;
  dispatch_group_t v71;
  id v72;
  _QWORD *v73;
  id v74;
  void *v75;
  _QWORD *v76;
  NSObject *v77;
  id v78;
  double v79;
  void *v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  char *v86;
  char *v87;
  void *v88;
  uint64_t *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  Class v93;
  __n128 v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  id v99;
  id v100;
  Class v101;
  Class v102;
  id v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  dispatch_group_t v122;
  _QWORD *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  uint64_t *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  id v146;
  dispatch_group_t v147;
  uint64_t v148;
  id v149;
  void *v150;
  id v151;
  char v152[24];
  _QWORD *v153;
  void **aBlock;
  uint64_t v155;
  void *v156;
  void *v157;
  void *v158;
  _QWORD *v159;
  uint64_t v160;

  v131 = a5;
  v130 = a4;
  v136 = type metadata accessor for DispatchWorkItemFlags(0);
  v135 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v134 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for Date(0);
  v144 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v143 = (char *)&v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for DOCSmartFolderInputFile(0);
  __chkstk_darwin(v142);
  v141 = (uint64_t *)((char *)&v126 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for DispatchQoS(0);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v15 = (char *)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v126 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = (void *)a3;
  sub_1002EC0A8(a3);
  if (!a1)
  {
    v33 = swift_allocObject(&unk_1005DB1A0, 24, 7);
    *(_QWORD *)(v33 + 16) = a2;
    v158 = sub_1002F0A60;
    v159 = (_QWORD *)v33;
    aBlock = _NSConcreteStackBlock;
    v155 = 1107296256;
    v156 = sub_10004A82C;
    v157 = &unk_1005DB1B8;
    v34 = _Block_copy(&aBlock);
    v35 = v159;
    v36 = a2;
    swift_release(v35);
    DOCRunInMainThread(v34);
    _Block_release(v34);
    v37 = swift_allocObject(&unk_1005DB0D8, 24, 7);
    swift_unknownObjectWeakInit(v37 + 16);
    v158 = sub_1002F0A68;
    v159 = (_QWORD *)v37;
    aBlock = _NSConcreteStackBlock;
    v155 = 1107296256;
    v38 = &unk_1005DB1E0;
    v156 = sub_10004A82C;
LABEL_33:
    v157 = v38;
    v125 = _Block_copy(&aBlock);
    swift_release(v159);
    DOCRunInMainThread(v125);
    _Block_release(v125);
    return;
  }
  v148 = swift_allocObject(&unk_1005DB218, 24, 7);
  *(_QWORD *)(v148 + 16) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a1);
  v147 = dispatch_group_create();
  v20 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v21 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v16);
  static DispatchQoS.unspecified.getter(v21);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v22 = sub_10005A360((unint64_t *)&qword_100643640, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v23 = sub_10006922C((uint64_t *)&unk_100641280);
  v24 = sub_100062698((unint64_t *)&qword_100643650, (uint64_t *)&unk_100641280, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v23, v24, v11, v22);
  v129 = v15;
  v128 = v20;
  v146 = (id)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002CLL, 0x8000000100524E60, v15, v13, v19, 0);
  v25 = objc_msgSend(a2, "configuration");
  v26 = swift_bridgeObjectRetain(a1);
  v27 = DOCAnalyticsActionEvent.FileProvider.init(items:)(v26);
  v28 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v29 = objc_msgSend(v28, "bundleIdentifier");

  if (v29)
  {
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

  }
  else
  {
    v30 = 0;
    v32 = 0;
  }
  v126 = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
  v39 = DOCNode.sourceIdentifier.getter(v126);
  v40 = DOCAnalyticsActionEvent.Source.init(sourceIdentifier:)(v39);
  v41 = DOCAnalyticsActionEvent.init(actionType:configuration:provider:bundleIdentifier:source:viewMode:)(&v160, 1, v25, v27, v30, v32, v40, 0);
  v42 = *(id *)DOCAnalyticsManager.shared.unsafeMutableAddressor(v41);
  DOCAnalyticsManager.sendActionEvent(_:)(&v160);
  sub_1000B3334((uint64_t)&v160);

  v149 = a2;
  v127 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v81 = a1;
    else
      v81 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v43 = _CocoaArrayWrapper.endIndex.getter(v81);
    if (!v43)
      goto LABEL_18;
  }
  else
  {
    v43 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (!v43)
      goto LABEL_18;
  }
  v140 = (id)objc_opt_self(FPItemManager);
  if (v43 >= 1)
  {
    v44 = 0;
    v137 = a1 & 0xC000000000000001;
    v139 = a1;
    v138 = v43;
    v45 = v141;
    v46 = v143;
    do
    {
      if (v137)
        v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v44, a1);
      else
        v47 = *(id *)(a1 + 8 * v44 + 32);
      v48 = v149;
      ++v44;
      v49 = v47;
      v151 = v47;
      v50 = objc_msgSend(v47, "displayName");
      v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      v53 = v52;

      v54 = objc_msgSend(v49, "contentType");
      static UTType._unconditionallyBridgeFromObjectiveC(_:)(v54);

      v56 = Date.init()(v55);
      *v45 = v51;
      v45[1] = v53;
      v57 = (id *)DOCSmartFolderManager.sharedManager.unsafeMutableAddressor(v56);
      v58 = *(void (**)(uint64_t *, void *))((swift_isaMask & *(_QWORD *)*v57) + 0xA8);
      v59 = *v57;
      v60 = v150;
      v58(v45, v150);

      v61 = objc_msgSend(v48, "configuration");
      v62 = objc_msgSend(v61, "hostIdentifier");

      static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      v64 = v63;

      v65 = v60;
      Date.init()(v65);
      v66 = objc_allocWithZone((Class)DOCHotFolderEvent);
      v67 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v64);
      isa = Date._bridgeToObjectiveC()().super.isa;
      v69 = objc_msgSend(v66, "initWithAppBundleIdentifier:folderItem:type:lastUsedDate:frecency:", v67, v65, 1, isa, 1.0);

      (*(void (**)(char *, uint64_t))(v144 + 8))(v46, v145);
      v70 = *v57;
      DOCSmartFolderManager.register(event:)(v69);

      v71 = v147;
      dispatch_group_enter(v147);
      v72 = objc_msgSend(v140, "defaultManager");
      v73 = (_QWORD *)swift_allocObject(&unk_1005DB240, 40, 7);
      v74 = v146;
      v73[2] = v71;
      v73[3] = v74;
      v73[4] = v148;
      v158 = sub_1002F0AA4;
      v159 = v73;
      aBlock = _NSConcreteStackBlock;
      v155 = 1107296256;
      v156 = sub_100175118;
      v157 = &unk_1005DB258;
      v75 = _Block_copy(&aBlock);
      v76 = v159;
      v77 = v71;
      v78 = v74;
      swift_retain();
      *(_QWORD *)&v79 = swift_release(v76).n128_u64[0];
      v80 = v151;
      objc_msgSend(v72, "fetchURLForItem:completionHandler:", v151, v75, v79);
      _Block_release(v75);

      sub_10012B5F0((uint64_t)v45);
      a1 = v139;
    }
    while (v138 != v44);
LABEL_18:
    *(_QWORD *)&v82 = swift_bridgeObjectRelease(a1).n128_u64[0];
    if (v127)
    {
      if (a1 < 0)
        v84 = a1;
      else
        v84 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v83 = _CocoaArrayWrapper.endIndex.getter(v84);
      *(_QWORD *)&v82 = swift_bridgeObjectRelease(a1).n128_u64[0];
    }
    else
    {
      v83 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v85 = v149;
    v86 = v129;
    if (v83 > 0
      && (v87 = (char *)objc_msgSend(v149, "pickerFilenameView", v82)) != 0)
    {
      v88 = v87;
      v89 = (uint64_t *)&v87[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tags];
      swift_beginAccess(&v87[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tags], v152, 0, 0);
      v90 = *v89;
      swift_bridgeObjectRetain(v90);

      v91 = (char *)objc_msgSend(v85, "pickerContext");
      if (v91)
      {
        v92 = *(_QWORD *)&v91[OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave];

        if (v92)
        {
          sub_10004F2F0(0, (unint64_t *)&unk_1006565A0, DOCTag_ptr);
          v93 = Array._bridgeToObjectiveC()().super.isa;
          v94 = swift_bridgeObjectRelease(v90);
          v95 = (id)FPTagsFromDOCTags(v93, v94);

          v96 = sub_10004F2F0(0, (unint64_t *)&unk_100646CB0, FPTag_ptr);
          v97 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v95, v96);

          swift_bridgeObjectRetain(v97);
          v98 = sub_1002F06DC(a1, v97);
          swift_bridgeObjectRelease_n(v97, 2);
          v99 = objc_msgSend((id)objc_opt_self(DOCUndoManager), "shared");
          v100 = objc_allocWithZone((Class)DOCSetTagsOperation);
          v101 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(a1);
          sub_10006922C(&qword_100644AF8);
          v102 = Array._bridgeToObjectiveC()().super.isa;
          v103 = objc_msgSend(v100, "initWithItems:tagsLists:isUndoable:shouldClearUndoStack:undoManager:", v101, v102, 0, 0, v99, swift_bridgeObjectRelease(v98).n128_f64[0]);

          v104 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
          objc_msgSend(v104, "scheduleAction:", v103);

LABEL_32:
          v107 = (void *)static OS_dispatch_queue.main.getter(v105);
          v108 = (_QWORD *)swift_allocObject(&unk_1005DB290, 48, 7);
          v109 = v130;
          v110 = v131;
          v108[2] = v130;
          v108[3] = v110;
          v111 = v148;
          v108[4] = v85;
          v108[5] = v111;
          v158 = sub_1002F0AEC;
          v159 = v108;
          aBlock = _NSConcreteStackBlock;
          v155 = 1107296256;
          v156 = sub_10004A82C;
          v157 = &unk_1005DB2A8;
          v112 = _Block_copy(&aBlock);
          swift_bridgeObjectRetain(v109);
          swift_retain();
          v113 = v85;
          swift_retain();
          static DispatchQoS.unspecified.getter(v114);
          v153 = _swiftEmptyArrayStorage;
          v115 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v116 = sub_10006922C((uint64_t *)&unk_100647540);
          v117 = sub_100062698((unint64_t *)&qword_100641270, (uint64_t *)&unk_100647540, (uint64_t)&protocol conformance descriptor for [A]);
          v118 = v86;
          v119 = v134;
          v120 = v116;
          v121 = v136;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v153, v120, v117, v136, v115);
          v122 = v147;
          OS_dispatch_group.notify(qos:flags:queue:execute:)(v118, v119, v107, v112);
          _Block_release(v112);

          (*(void (**)(char *, uint64_t))(v135 + 8))(v119, v121);
          (*(void (**)(char *, uint64_t))(v132 + 8))(v118, v133);
          v123 = v159;
          swift_release(v111);
          swift_release(v123);
          v124 = swift_allocObject(&unk_1005DB0D8, 24, 7);
          swift_unknownObjectWeakInit(v124 + 16);
          v158 = sub_1002F0A68;
          v159 = (_QWORD *)v124;
          aBlock = _NSConcreteStackBlock;
          v155 = 1107296256;
          v38 = &unk_1005DB2D0;
          v156 = sub_10004A82C;
          goto LABEL_33;
        }
      }
      swift_bridgeObjectRelease(a1);
      v106 = v90;
    }
    else
    {
      v106 = a1;
    }
    swift_bridgeObjectRelease(v106);
    goto LABEL_32;
  }
  __break(1u);
}

void sub_1002EE790(void *a1)
{
  id v2;
  void *v3;
  Class isa;

  v2 = objc_msgSend(a1, "delegate");
  if (v2)
  {
    v3 = v2;
    if ((objc_msgSend(v2, "respondsToSelector:", "documentBrowser:didPickDocumentsAtURLs:") & 1) != 0)
    {
      type metadata accessor for URL(0);
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v3, "documentBrowser:didPickDocumentsAtURLs:", a1, isa);
      swift_unknownObjectRelease(v3);

    }
    else
    {
      swift_unknownObjectRelease(v3);
    }
  }
}

double sub_1002EE858(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  double result;
  id v24;
  _QWORD *v25;
  NSObject *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD aBlock[5];
  _QWORD *v39;

  v32 = a5;
  v35 = a4;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v31 - v21;
  sub_1002320B8(a1, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_100157D6C((uint64_t)v15);
    dispatch_group_leave(a3);
  }
  else
  {
    v31 = a3;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v15, v16);
    sub_10004F2F0(0, &qword_100644C20, FPSandboxingURLWrapper_ptr);
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, v22, v16);
    v24 = sub_1003A2A18((uint64_t)v19, 0);
    v25 = (_QWORD *)swift_allocObject(&unk_1005DB358, 40, 7);
    v26 = v31;
    v25[2] = v32;
    v25[3] = v24;
    v25[4] = v26;
    aBlock[4] = sub_1002F0B30;
    v39 = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004A82C;
    aBlock[3] = &unk_1005DB370;
    v27 = _Block_copy(aBlock);
    swift_retain();
    v32 = v24;
    static DispatchQoS.unspecified.getter(v26);
    v37 = _swiftEmptyArrayStorage;
    v28 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v29 = sub_10006922C((uint64_t *)&unk_100647540);
    v30 = sub_100062698((unint64_t *)&qword_100641270, (uint64_t *)&unk_100647540, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v29, v30, v7, v28);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v27);
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v34);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
    *(_QWORD *)&result = swift_release(v39).n128_u64[0];
  }
  return result;
}

void sub_1002EEC9C(uint64_t a1, void *a2, NSObject *a3)
{
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  swift_beginAccess(a1 + 16, v11, 33, 0);
  v6 = a2;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
  v7 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v7 + 0x10);
  v8 = *(_QWORD *)(v7 + 24);
  if (v9 >= v8 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
  v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v6);
  specialized Array._endMutation()(v10);
  swift_endAccess(v11);
  dispatch_group_leave(a3);
}

void sub_1002EED40(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[5];
  uint64_t v34;

  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v15 = *(_QWORD *)(a1 + 16);
    v30 = a3;
    v31 = a4;
    v29 = a1;
    if (v15)
    {
      v16 = (uint64_t *)(a2 + 16);
      v17 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      v32 = *(_QWORD *)(v9 + 72);
      v18 = a1;
      v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
      swift_bridgeObjectRetain(v18);
      while (1)
      {
        v19(v14, v17, v8);
        v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
        v20(v14, 0, 1, v8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
          break;
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
        swift_beginAccess(v16, aBlock, 32, 0);
        v21 = *v16;
        if (*(_QWORD *)(*v16 + 16) && (v22 = sub_100140624((uint64_t)v11), (v23 & 1) != 0))
        {
          v24 = *(_BYTE *)(*(_QWORD *)(v21 + 56) + v22);
          swift_endAccess(aBlock);
          if ((v24 & 1) != 0)
            URL.stopAccessingSecurityScopedResource()();
        }
        else
        {
          swift_endAccess(aBlock);
        }
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        v17 += v32;
        if (!--v15)
          goto LABEL_12;
      }
    }
    else
    {
      v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      swift_bridgeObjectRetain(a1);
LABEL_12:
      v20(v14, 1, 1, v8);
    }
    swift_bridgeObjectRelease(v29);
    a3 = v30;
    a4 = v31;
  }
  v25 = swift_allocObject(&unk_1005DB308, 32, 7);
  *(_QWORD *)(v25 + 16) = a3;
  *(_QWORD *)(v25 + 24) = a4;
  aBlock[4] = sub_1002F0B24;
  v34 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = &unk_1005DB320;
  v26 = _Block_copy(aBlock);
  v27 = v34;
  v28 = a3;
  swift_retain();
  swift_release(v27);
  DOCRunInMainThread(v26);
  _Block_release(v26);
}

void sub_1002EEFBC(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  SEL *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  void *v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  Class isa;
  void *v24;
  void *v25;
  _QWORD *v26;
  _BYTE v27[24];

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(a1, "delegate", v6);
  if (v9)
  {
    v10 = v9;
    v11 = (SEL *)&off_10061F000;
    if ((objc_msgSend(v9, "respondsToSelector:", "documentBrowser:didPickDocumentsAtURLs:") & 1) == 0)
    {
      swift_unknownObjectRelease(v10);
      return;
    }
    v12 = (uint64_t *)(a2 + 16);
    swift_beginAccess(v12, v27, 0, 0);
    v13 = *v12;
    if ((unint64_t)*v12 >> 62)
    {
      if (v13 < 0)
        v22 = *v12;
      else
        v22 = v13 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v13);
      v14 = _CocoaArrayWrapper.endIndex.getter(v22);
      if (v14)
        goto LABEL_5;
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*v12);
      if (v14)
      {
LABEL_5:
        v24 = v10;
        v25 = a1;
        v26 = _swiftEmptyArrayStorage;
        sub_100154E04(0, v14 & ~(v14 >> 63), 0);
        if (v14 < 0)
        {
          __break(1u);
          return;
        }
        v15 = 0;
        v16 = v26;
        do
        {
          if ((v13 & 0xC000000000000001) != 0)
            v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v13);
          else
            v17 = *(id *)(v13 + 8 * v15 + 32);
          v18 = v17;
          v19 = objc_msgSend(v17, "url");
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v19);

          v26 = v16;
          v21 = v16[2];
          v20 = v16[3];
          if (v21 >= v20 >> 1)
          {
            sub_100154E04(v20 > 1, v21 + 1, 1);
            v16 = v26;
          }
          ++v15;
          v16[2] = v21 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))((unint64_t)v16+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v21, v8, v4);
        }
        while (v14 != v15);
        swift_bridgeObjectRelease(v13);
        v10 = v24;
        a1 = v25;
        v11 = (SEL *)&off_10061F000;
        goto LABEL_20;
      }
    }
    swift_bridgeObjectRelease(v13);
    v16 = _swiftEmptyArrayStorage;
LABEL_20:
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v10, v11[275], a1, isa);
    swift_bridgeObjectRelease(v16);
    swift_unknownObjectRelease(v10);

  }
}

void sub_1002EF244(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  void *v3;
  char *v4;
  id v5;
  void **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;
  char v17[24];
  char v18[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v18, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = (char *)objc_msgSend(Strong, "effectiveBrowserViewController");
    if (v4)
    {
      v5 = v4;
      v6 = (void **)&v4[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
      swift_beginAccess(&v4[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v17, 0, 0);
      v7 = *v6;
      if (*v6)
      {
        v8 = type metadata accessor for DOCItemCollectionViewController(0);
        v9 = swift_dynamicCastClass(v7, v8);
        if (v9)
        {
          v10 = v9;
          v11 = v7;

          v12 = swift_allocObject(&unk_1005DB150, 25, 7);
          *(_QWORD *)(v12 + 16) = v10;
          *(_BYTE *)(v12 + 24) = 1;
          v15[4] = sub_1001CEFDC;
          v16 = v12;
          v15[0] = _NSConcreteStackBlock;
          v15[1] = 1107296256;
          v15[2] = sub_10004A82C;
          v15[3] = &unk_1005DB168;
          v13 = _Block_copy(v15);
          v14 = v16;
          v5 = v11;
          swift_release(v14);
          DOCRunInMainThread(v13);
          _Block_release(v13);
        }
      }

      v3 = v5;
    }

  }
}

uint64_t sub_1002EF3F4(void *a1)
{
  void *v1;
  void *v2;
  char *v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v19;
  id v20;
  Class isa;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t result;
  char *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  id v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  char v64;
  id v65;
  Class v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  id v74;
  id v75;
  id v76;
  unsigned int v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  id v89;
  int v90;
  uint64_t v91;
  id v92;
  unsigned int v93;
  void *v94;
  void **v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  char *v101;
  void *v102;
  id v103;
  unsigned int v104;
  id v105;
  id v106;
  uint64_t v107;
  id v108;
  id v109;
  uint64_t v110;
  unsigned int v111;
  id *v112;
  uint64_t v113;
  id v114;
  unsigned int v115;
  _QWORD v116[4];
  char v117[24];

  v2 = v1;
  v4 = (char *)objc_msgSend(v1, "pickerFilenameView");
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)(*(_QWORD *)&v4[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_pickerContext]
                   + OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave);
    if (v6
      && *(_QWORD *)(v6 + 16) == 1
      && (v7 = sub_1000D6978(), v8 = objc_msgSend(v7, "text"), v7, v8))
    {
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v11 = v10;

      v12 = String.count.getter(v9, v11);
      swift_bridgeObjectRelease(v11);
      if (!v12)
        return 0;
    }
    else
    {

    }
  }
  v13 = (char *)objc_msgSend(v2, "pickerContext");
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)&v13[OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave];
    swift_bridgeObjectRetain(v15);

    if (v15)
    {
      v16 = (char *)objc_msgSend(v2, "pickerContext", swift_bridgeObjectRelease(v15).n128_f64[0]);
      if (v16)
      {
        v17 = v16;
        v18 = &v16[OBJC_IVAR____TtC5Files16DOCPickerContext_utisToSave];
        swift_beginAccess(&v16[OBJC_IVAR____TtC5Files16DOCPickerContext_utisToSave], v117, 0, 0);
        v19 = *(_QWORD *)v18;
        swift_bridgeObjectRetain(*(_QWORD *)v18);

        v20 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
        swift_bridgeObjectRetain(v19);
        isa = Array._bridgeToObjectiveC()().super.isa;
        v22 = objc_msgSend(v20, "eligibleActionsForDroppingUTIs:underItem:", isa, a1, swift_bridgeObjectRelease(v19).n128_f64[0]);

        type metadata accessor for FPAction(0);
        v24 = v23;
        v25 = sub_10005A360((unint64_t *)&qword_1006418B0, (uint64_t (*)(uint64_t))type metadata accessor for FPAction, (uint64_t)&unk_1004D69D0);
        v26 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v22, v24, v25);

        v27 = objc_msgSend((id)objc_opt_self(DOCManagedPermission), "defaultPermission");
        v28 = objc_msgSend(v2, "configuration");
        v115 = objc_msgSend(v27, "canAppWithConfiguration:handleNode:", v28, a1);

        v112 = (id *)DOCLog.UI.unsafeMutableAddressor(v29);
        v30 = *v112;
        v111 = static os_log_type_t.debug.getter(v30);
        v113 = sub_10006922C((uint64_t *)&unk_100644560);
        v31 = swift_allocObject(v113, 192, 7);
        *(_OWORD *)(v31 + 16) = xmmword_1004D9B50;
        *(_QWORD *)(v31 + 56) = &type metadata for String;
        v32 = sub_10006A638();
        *(_QWORD *)(v31 + 64) = v32;
        *(_QWORD *)(v31 + 32) = 0xD000000000000015;
        *(_QWORD *)(v31 + 40) = 0x8000000100524C30;
        v33 = objc_msgSend(a1, "displayName");
        v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        v36 = v35;

        *(_QWORD *)(v31 + 96) = &type metadata for String;
        *(_QWORD *)(v31 + 104) = v32;
        *(_QWORD *)(v31 + 72) = v34;
        *(_QWORD *)(v31 + 80) = v36;
        *(_QWORD *)(v31 + 136) = sub_10006922C(&qword_10064F390);
        *(_QWORD *)(v31 + 144) = sub_100062698((unint64_t *)&qword_100647550, &qword_10064F390, (uint64_t)&protocol conformance descriptor for [A]);
        *(_QWORD *)(v31 + 112) = v19;
        *(_QWORD *)(v31 + 176) = sub_10006922C(&qword_10064DB90);
        *(_QWORD *)(v31 + 184) = sub_100062698(&qword_10064DB98, &qword_10064DB90, (uint64_t)&protocol conformance descriptor for Set<A>);
        *(_QWORD *)(v31 + 152) = v26;
        swift_bridgeObjectRetain(v26);
        os_log(_:dso:log:type:_:)("%@: %@ eligibleActions for these UTIs %@ %@", 43, 2, &_mh_execute_header, v30, v111, v31);

        v37 = objc_msgSend(v2, "configuration", swift_bridgeObjectRelease(v31).n128_f64[0]);
        v38 = objc_msgSend(v37, "interactionMode");

        switch((unint64_t)v38)
        {
          case 0uLL:
            goto LABEL_64;
          case 1uLL:
            _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000016, 0x8000000100524CC0, "Files/DOCFullDocumentManagerViewController+DocumentPicker.swift", 63, 2, 278, 0);
            goto LABEL_66;
          case 2uLL:
            v39 = *v112;
            v40 = static os_log_type_t.debug.getter(v39);
            v41 = swift_allocObject(v113, 72, 7);
            *(_OWORD *)(v41 + 16) = xmmword_1004D9670;
            *(_QWORD *)(v41 + 56) = &type metadata for String;
            *(_QWORD *)(v41 + 64) = v32;
            *(_QWORD *)(v41 + 32) = 0xD000000000000015;
            *(_QWORD *)(v41 + 40) = 0x8000000100524C30;
            os_log(_:dso:log:type:_:)("%@: expecting copy", 18, 2, &_mh_execute_header, v39, v40, v41);

            swift_bridgeObjectRelease(v41);
            v42 = FPActionCopy;
            LODWORD(v41) = sub_100028BE0((uint64_t)v42, v26);

            swift_bridgeObjectRelease(v26);
            return v41 & v115;
          case 3uLL:
            v59 = *v112;
            v60 = static os_log_type_t.debug.getter(v59);
            v61 = swift_allocObject(v113, 72, 7);
            *(_OWORD *)(v61 + 16) = xmmword_1004D9670;
            *(_QWORD *)(v61 + 56) = &type metadata for String;
            *(_QWORD *)(v61 + 64) = v32;
            *(_QWORD *)(v61 + 32) = 0xD000000000000015;
            *(_QWORD *)(v61 + 40) = 0x8000000100524C30;
            os_log(_:dso:log:type:_:)("%@: expecting reparent", 22, 2, &_mh_execute_header, v59, v60, v61);

            swift_bridgeObjectRelease(v61);
            v62 = FPActionReparent;
            LODWORD(v61) = sub_100028BE0((uint64_t)v62, v26);

            swift_bridgeObjectRelease(v26);
            if ((v61 & v115) != 0)
              return 2;
            else
              return 0;
          default:
            v108 = objc_msgSend(v2, "configuration");
            v109 = objc_msgSend(v108, "interactionMode");

            type metadata accessor for DOCDocumentInteractionMode(0);
            v116[3] = v110;
            v116[0] = v109;
            doc_fatalErrorUnrecognizedEnumValueEncountered(_:)(v116);
            __break(1u);
LABEL_64:
            _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000016, 0x8000000100524CE0, "Files/DOCFullDocumentManagerViewController+DocumentPicker.swift", 63, 2, 276, 0);
LABEL_66:
            __break(1u);
            JUMPOUT(0x1002F00C8);
        }
      }
    }
  }
  v44 = (char *)objc_msgSend(v2, "pickerContext");
  if (!v44)
    goto LABEL_43;
  v45 = v44;
  v46 = *(_QWORD *)&v44[OBJC_IVAR____TtC5Files16DOCPickerContext_itemsToMove];
  swift_bridgeObjectRetain(v46);

  if (!v46)
    goto LABEL_43;
  if (!((unint64_t)v46 >> 62))
  {
    v47 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v46);
    if (v47)
      goto LABEL_17;
    goto LABEL_42;
  }
  if (v46 < 0)
    v91 = v46;
  else
    v91 = v46 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v46);
  if (!_CocoaArrayWrapper.endIndex.getter(v91))
  {
LABEL_42:
    swift_bridgeObjectRelease_n(v46, 2);
LABEL_43:
    v92 = objc_msgSend(v2, "configuration");
    v93 = objc_msgSend(v92, "forPickingFolders");

    if (!v93)
      return 0;
    result = (uint64_t)objc_msgSend(v2, "effectiveBrowserViewController");
    if (!result)
      return result;
    v94 = (void *)result;
    v95 = (void **)(result + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController);
    swift_beginAccess(result + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController, v116, 0, 0);
    v96 = *v95;
    if (!v96
      || (v97 = type metadata accessor for DOCItemCollectionViewController(0),
          (v98 = swift_dynamicCastClass(v96, v97)) == 0))
    {

      return 0;
    }
    v99 = v98;
    v100 = v96;

    v101 = (char *)objc_retain(*(id *)(v99
                                     + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration));

    v102 = *(void **)&v101[OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain];
    v103 = v102;

    if (!v102)
      return 0;
    v104 = objc_msgSend(v103, "supportsPickingFolders");

    if (!v104)
      return 0;
    v105 = objc_msgSend(v2, "configuration");
    v106 = objc_msgSend(v105, "interactionMode");

    if (v106 == (id)1)
      return 3;
    else
      return 0;
  }
LABEL_17:
  if ((v46 & 0xC000000000000001) != 0)
  {
    v114 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v46);
    *(_QWORD *)&v49 = swift_bridgeObjectRelease(v46).n128_u64[0];
    if ((unint64_t)v46 >> 62)
      goto LABEL_59;
    v48 = v46 & 0xFFFFFFFFFFFFFF8;
  }
  else
  {
    v48 = v46 & 0xFFFFFFFFFFFFFF8;
    if (!*(_QWORD *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_58;
    }
    v114 = *(id *)(v46 + 32);
    *(_QWORD *)&v49 = swift_bridgeObjectRelease(v46).n128_u64[0];
  }
  v50 = *(_QWORD *)(v48 + 16);
  while (1)
  {
    v51 = _swiftEmptyArrayStorage;
    if (!v50)
      break;
    v116[0] = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v50);
    if ((v50 & 0x8000000000000000) == 0)
    {
      v52 = 0;
      do
      {
        if ((v46 & 0xC000000000000001) != 0)
          v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v52, v46);
        else
          v53 = *(id *)(v46 + 8 * v52 + 32);
        v54 = v53;
        ++v52;
        v55 = objc_msgSend(v53, "parentItemID");

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v56);
        v57 = *(_QWORD *)(v116[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v57);
        v58 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v57, v55);
        specialized ContiguousArray._endMutation()(v58);
      }
      while (v50 != v52);
      v51 = (_QWORD *)v116[0];
      break;
    }
LABEL_58:
    __break(1u);
LABEL_59:
    if (v46 < 0)
      v107 = v46;
    else
      v107 = v46 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v46);
    v50 = _CocoaArrayWrapper.endIndex.getter(v107);
    *(_QWORD *)&v49 = swift_bridgeObjectRelease(v46).n128_u64[0];
  }
  v63 = objc_msgSend(a1, "itemID", v49);
  v64 = sub_1000E0058((uint64_t)v63, (uint64_t)v51);
  swift_bridgeObjectRelease(v51);

  if ((v64 & 1) != 0)
  {
    swift_bridgeObjectRelease(v46);

    return 0;
  }
  v65 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
  sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
  v66 = Array._bridgeToObjectiveC()().super.isa;
  v67 = objc_msgSend(v65, "eligibleActionsForDroppingItems:underItem:", v66, a1, swift_bridgeObjectRelease(v46).n128_f64[0]);

  type metadata accessor for FPAction(0);
  v69 = v68;
  v70 = sub_10005A360((unint64_t *)&qword_1006418B0, (uint64_t (*)(uint64_t))type metadata accessor for FPAction, (uint64_t)&unk_1004D69D0);
  v71 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v67, v69, v70);

  v72 = (void *)objc_opt_self(DOCManagedPermission);
  v73 = objc_msgSend(v72, "defaultPermission");
  v74 = objc_msgSend(v2, "configuration");
  v75 = objc_msgSend(v73, "userActionForConfiguration:", v74);

  v76 = objc_msgSend(v72, "defaultPermission");
  v77 = objc_msgSend(v76, "canItem:performAction:item:", v114, v75, a1);

  v79 = *(id *)DOCLog.UI.unsafeMutableAddressor(v78);
  v80 = static os_log_type_t.debug.getter(v79);
  v81 = sub_10006922C((uint64_t *)&unk_100644560);
  v82 = swift_allocObject(v81, 152, 7);
  *(_OWORD *)(v82 + 16) = xmmword_1004D9880;
  *(_QWORD *)(v82 + 56) = &type metadata for String;
  v83 = sub_10006A638();
  *(_QWORD *)(v82 + 64) = v83;
  *(_QWORD *)(v82 + 32) = 0xD000000000000015;
  *(_QWORD *)(v82 + 40) = 0x8000000100524C30;
  v84 = objc_msgSend(a1, "displayName");
  v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
  v87 = v86;

  *(_QWORD *)(v82 + 96) = &type metadata for String;
  *(_QWORD *)(v82 + 104) = v83;
  *(_QWORD *)(v82 + 72) = v85;
  *(_QWORD *)(v82 + 80) = v87;
  *(_QWORD *)(v82 + 136) = sub_10006922C(&qword_10064DB90);
  *(_QWORD *)(v82 + 144) = sub_100062698(&qword_10064DB98, &qword_10064DB90, (uint64_t)&protocol conformance descriptor for Set<A>);
  *(_QWORD *)(v82 + 112) = v71;
  swift_bridgeObjectRetain(v71);
  os_log(_:dso:log:type:_:)("%@: %@ expecting reparent in eligibleActions %@", 47, 2, &_mh_execute_header, v79, v80, v82);

  swift_bridgeObjectRelease(v82);
  v88 = FPActionReparent;
  LOBYTE(v79) = sub_100028BE0((uint64_t)v88, v71);

  if ((v79 & 1) != 0 && v77)
  {

    swift_bridgeObjectRelease(v71);
    return 2;
  }
  else
  {
    v89 = FPActionCopy;
    v90 = sub_100028BE0((uint64_t)v89, v71);

    swift_bridgeObjectRelease(v71);
    return v90 & v77;
  }
}

uint64_t sub_1002F0124(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Class isa;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  void *v30;
  _QWORD *v31;
  os_log_t v32;
  uint64_t v33;
  _QWORD *v34;
  os_log_t v35;
  id v36;
  _BYTE v37[24];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v37, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a1);
  if (result)
  {
    v11 = (void *)result;
    v12 = (void *)objc_opt_self(NSKeyedArchiver);
    v36 = 0;
    v13 = objc_msgSend(v12, "archivedDataWithRootObject:requiringSecureCoding:error:", a2, 1, &v36);
    v14 = v36;
    if (v13)
    {
      v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;

      isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(a3, "setLastUsedOpenSaveLocation:", isa);

      v19 = objc_msgSend((id)objc_opt_self(DOCUserInterfaceStateStore), "sharedStore");
      v20 = objc_msgSend(v11, "configuration");
      objc_msgSend(v19, "updateInterfaceState:forConfiguration:", a3, v20);

      return sub_1000D4C00(v15, v17);
    }
    else
    {
      v21 = v14;
      v22 = _convertNSErrorToError(_:)(v14);

      v24 = swift_willThrow(v23);
      v25 = Logger.DocumentManager.unsafeMutableAddressor(v24);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v25, v6);
      swift_errorRetain(v22);
      v26 = swift_errorRetain(v22);
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.error.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        v35 = v27;
        v29 = (uint8_t *)swift_slowAlloc(12, -1);
        v34 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v29 = 138412290;
        swift_errorRetain(v22);
        v30 = (void *)_swift_stdlib_bridgeErrorToNSError(v22);
        v36 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37);
        v31 = v34;
        *v34 = v30;
        swift_errorRelease(v22);
        swift_errorRelease(v22);
        v32 = v35;
        _os_log_impl((void *)&_mh_execute_header, v35, v28, "Failed to store the last used save location: %@", v29, 0xCu);
        v33 = sub_10006922C(&qword_100643AB0);
        swift_arrayDestroy(v31, 1, v33);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v29, -1, -1);

        swift_errorRelease(v22);
      }
      else
      {

        swift_errorRelease(v22);
        swift_errorRelease(v22);
        swift_errorRelease(v22);

      }
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  return result;
}

void sub_1002F0478()
{
  void *v0;
  char *v1;
  void *v2;
  void **v3;
  void *v4;
  uint64_t v5;
  id v6;
  _BYTE v7[24];

  v1 = (char *)objc_msgSend(v0, "effectiveBrowserViewController");
  if (v1)
  {
    v2 = v1;
    v3 = (void **)&v1[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
    swift_beginAccess(&v1[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v7, 0, 0);
    v4 = *v3;
    if (v4)
    {
      v5 = type metadata accessor for DOCItemCollectionViewController(0);
      if (swift_dynamicCastClass(v4, v5))
      {
        v6 = v4;

        _s5Files31DOCItemCollectionViewControllerC13updateOverlay8animatedySb_tF_0();
        v2 = v6;
      }
    }

  }
}

void sub_1002F0524(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  void *v3;
  char *v4;
  id v5;
  void **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;
  char v17[24];
  char v18[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v18, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = (char *)objc_msgSend(Strong, "effectiveBrowserViewController");
    if (v4)
    {
      v5 = v4;
      v6 = (void **)&v4[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
      swift_beginAccess(&v4[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v17, 0, 0);
      v7 = *v6;
      if (*v6)
      {
        v8 = type metadata accessor for DOCItemCollectionViewController(0);
        v9 = swift_dynamicCastClass(v7, v8);
        if (v9)
        {
          v10 = v9;
          v11 = v7;

          v12 = swift_allocObject(&unk_1005DB3A8, 25, 7);
          *(_QWORD *)(v12 + 16) = v10;
          *(_BYTE *)(v12 + 24) = 0;
          v15[4] = sub_1002F0B80;
          v16 = v12;
          v15[0] = _NSConcreteStackBlock;
          v15[1] = 1107296256;
          v15[2] = sub_10004A82C;
          v15[3] = &unk_1005DB3C0;
          v13 = _Block_copy(v15);
          v14 = v16;
          v5 = v11;
          swift_release(v14);
          DOCRunInMainThread(v13);
          _Block_release(v13);
        }
      }

      v3 = v5;
    }

  }
}

uint64_t sub_1002F067C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1002F06A4(uint64_t a1)
{
  uint64_t v1;

  sub_1002EDA40(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1002F06B0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1002F06D4()
{
  uint64_t v0;

  sub_1002EF244(v0);
}

_QWORD *sub_1002F06DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v4)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_1001552E4(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
      break;
    v6 = 0;
    while (v4 != v6)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      else
        v7 = *(id *)(a1 + 8 * v6 + 32);
      v8 = v7;
      swift_bridgeObjectRetain(a2);

      v10 = _swiftEmptyArrayStorage[2];
      v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1)
        sub_1001552E4(v9 > 1, v10 + 1, 1);
      ++v6;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      _swiftEmptyArrayStorage[v10 + 4] = a2;
      if (v4 == v6)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1002F0828(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v29 = a2;
  v28 = type metadata accessor for DOCOperationItem(0);
  v8 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    v24 = v4;
    v30 = _swiftEmptyArrayStorage;
    sub_100155054(0, v11, 0);
    v12 = v30;
    v13 = type metadata accessor for URL(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v26 = *(_QWORD *)(v14 + 72);
    v27 = v13;
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v16 = a4 & 1;
    do
    {
      v17 = sub_10006922C(&qword_10064DBA0);
      v18 = &v10[*(int *)(v17 + 48)];
      v19 = *(int *)(v17 + 64);
      v25(v10, v15, v27);
      v20 = v28;
      *(_QWORD *)v18 = v29;
      *((_QWORD *)v18 + 1) = a3;
      v10[v19] = v16;
      swift_storeEnumTagMultiPayload(v10, v20, 0);
      v30 = v12;
      v22 = v12[2];
      v21 = v12[3];
      swift_bridgeObjectRetain(a3);
      if (v22 >= v21 >> 1)
      {
        sub_100155054(v21 > 1, v22 + 1, 1);
        v12 = v30;
      }
      v12[2] = v22 + 1;
      sub_1000E2AB4((uint64_t)v10, (uint64_t)v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v22);
      v15 += v26;
      --v11;
    }
    while (v11);
  }
  return v12;
}

uint64_t sub_1002F09DC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002F0A18()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1002F0A3C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1002F0A60()
{
  uint64_t v0;

  sub_1002EE790(*(void **)(v0 + 16));
}

void sub_1002F0A68()
{
  uint64_t v0;

  sub_1002F0524(v0);
}

uint64_t sub_1002F0A70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

double sub_1002F0AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1002EE858(a1, a2, *(NSObject **)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_1002F0AB0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1002F0AEC()
{
  uint64_t v0;

  sub_1002EED40(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1002F0AF8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1002F0B24()
{
  uint64_t v0;

  sub_1002EEFBC(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1002F0B30()
{
  uint64_t v0;

  sub_1002EEC9C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(NSObject **)(v0 + 32));
}

uint64_t sub_1002F0B40()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002F0B74()
{
  uint64_t v0;

  return sub_1002F0124(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1002F0BA8(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  KeyPath = swift_getKeyPath(&unk_1004E18E8);
  v4 = swift_getKeyPath(&unk_1004E1910);
  BYTE1(v14) = a1;
  swift_retain(v1);
  static Published.subscript.setter((char *)&v14 + 1, v1, KeyPath, v4);
  v5 = v1 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_forwardingDelegate;
  result = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_forwardingDelegate, v6);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)(v5 + 8);
    ObjectType = swift_getObjectType(result, v8);
    v12 = swift_getKeyPath(&unk_1004E18E8);
    v13 = swift_getKeyPath(&unk_1004E1910);
    static Published.subscript.getter(&v14, v1, v12, v13);
    swift_release(v12);
    swift_release(v13);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 8))(v1, v14, ObjectType, v10);
    return swift_unknownObjectRelease(v9);
  }
  return result;
}

uint64_t sub_1002F0CAC(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  KeyPath = swift_getKeyPath(&unk_1004E18A0);
  v4 = swift_getKeyPath(&unk_1004E18C8);
  BYTE1(v14) = a1;
  swift_retain(v1);
  static Published.subscript.setter((char *)&v14 + 1, v1, KeyPath, v4);
  v5 = v1 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_forwardingDelegate;
  result = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_forwardingDelegate, v6);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)(v5 + 8);
    ObjectType = swift_getObjectType(result, v8);
    v12 = swift_getKeyPath(&unk_1004E18A0);
    v13 = swift_getKeyPath(&unk_1004E18C8);
    static Published.subscript.getter(&v14, v1, v12, v13);
    swift_release(v12);
    swift_release(v13);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 16))(v1, v14, ObjectType, v10);
    return swift_unknownObjectRelease(v9);
  }
  return result;
}

uint64_t sub_1002F0DB0(char a1)
{
  uint64_t v1;
  char v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1 & 1;
  KeyPath = swift_getKeyPath(&unk_1004E1858);
  v4 = swift_getKeyPath(&unk_1004E1880);
  BYTE1(v14) = v2;
  swift_retain(v1);
  static Published.subscript.setter((char *)&v14 + 1, v1, KeyPath, v4);
  v5 = v1 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_forwardingDelegate;
  result = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_forwardingDelegate, v6);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)(v5 + 8);
    ObjectType = swift_getObjectType(result, v8);
    v12 = swift_getKeyPath(&unk_1004E1858);
    v13 = swift_getKeyPath(&unk_1004E1880);
    static Published.subscript.getter(&v14, v1, v12, v13);
    swift_release(v12);
    swift_release(v13);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 24))(v1, v14, ObjectType, v10);
    return swift_unknownObjectRelease(v9);
  }
  return result;
}

uint64_t sub_1002F0EB4(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  char v12;

  KeyPath = swift_getKeyPath(&unk_1004E1930);
  v4 = swift_getKeyPath(&unk_1004E1958);
  v12 = a1;
  swift_retain(v1);
  static Published.subscript.setter(&v12, v1, KeyPath, v4);
  v5 = v1 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_forwardingDelegate;
  result = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_forwardingDelegate, v6);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)(v5 + 8);
    ObjectType = swift_getObjectType(result, v8);
    (*(void (**)(uint64_t, uint64_t))(v10 + 32))(ObjectType, v10);
    return swift_unknownObjectRelease(v9);
  }
  return result;
}

uint64_t sub_1002F0F58()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1004E1930);
  v2 = swift_getKeyPath(&unk_1004E1958);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1002F0FC8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1004E18E8);
  v2 = swift_getKeyPath(&unk_1004E1910);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1002F1038@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1004E18E8);
  v5 = swift_getKeyPath(&unk_1004E1910);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1002F10B4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1004E18A0);
  v2 = swift_getKeyPath(&unk_1004E18C8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1002F1124@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1004E18A0);
  v5 = swift_getKeyPath(&unk_1004E18C8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1002F11A0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1004E1858);
  v2 = swift_getKeyPath(&unk_1004E1880);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1002F1210@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

_QWORD *sub_1002F1288()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  v1 = (char *)v0 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel__showFilenameExtensions;
  v2 = sub_10006922C(&qword_10064DD08);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel__selectedGroupingBehavior;
  v4 = sub_10006922C(&qword_10064DD10);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = (char *)v0 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel__selectedSortMode;
  v6 = sub_10006922C(&qword_10064DD18);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)v0 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel__selectedSizeSetting;
  v8 = sub_10006922C(&qword_10064DD20);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  sub_10008F5C0((uint64_t)v0 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_forwardingDelegate);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_availableSections));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_groupingBehaviors));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_sortModes));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_sizeSettings));
  return v0;
}

uint64_t sub_1002F13CC()
{
  uint64_t v0;

  sub_1002F1288();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1002F13F0()
{
  return type metadata accessor for DOCViewOptionsViewModel(0);
}

uint64_t type metadata accessor for DOCViewOptionsViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10064DBF0;
  if (!qword_10064DBF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DOCViewOptionsViewModel);
  return result;
}

void sub_1002F1434(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[15];

  v10[0] = &unk_1004E17B8;
  v10[1] = &unk_1004E17B8;
  v10[2] = &unk_1004E17B8;
  v10[3] = &unk_1004E17B8;
  v10[4] = &unk_1004E17B8;
  sub_1002F156C(319, &qword_10064DC00, (uint64_t)&type metadata for Bool);
  if (v3 <= 0x3F)
  {
    v10[5] = *(_QWORD *)(v2 - 8) + 64;
    sub_1002F156C(319, &qword_10064DC08, (uint64_t)&type metadata for DOCItemGroupingBehavior);
    if (v5 <= 0x3F)
    {
      v10[6] = *(_QWORD *)(v4 - 8) + 64;
      sub_1002F156C(319, &qword_10064DC10, (uint64_t)&type metadata for DOCItemSortMode);
      if (v7 <= 0x3F)
      {
        v10[7] = *(_QWORD *)(v6 - 8) + 64;
        sub_1002F156C(319, (unint64_t *)&unk_10064DC18, (uint64_t)&type metadata for DOCBrowserLayoutConfiguration.SizeSetting);
        if (v9 <= 0x3F)
        {
          v10[8] = *(_QWORD *)(v8 - 8) + 64;
          v10[9] = &unk_1004E17D0;
          v10[10] = &unk_1004E17E8;
          v10[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
          v10[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
          v10[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
          v10[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
          swift_updateClassMetadata2(a1, 256, 15, v10, a1 + 80);
        }
      }
    }
  }
}

void sub_1002F156C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for Published(0, a3);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void *sub_1002F15B0()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_1002F15BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t sub_1002F15E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t sub_1002F1614()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 72));
  return v1;
}

uint64_t sub_1002F1640()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 88));
  return v1;
}

uint64_t sub_1002F1670(uint64_t a1, uint64_t a2)
{
  return sub_1002F1750(a1, a2, (SEL *)&selRef_groupByMenuButton);
}

uint64_t sub_1002F167C(uint64_t a1, uint64_t a2)
{
  return sub_1002F1750(a1, a2, (SEL *)&selRef_sortByMenuButton);
}

uint64_t sub_1002F1688()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;

  v0 = (void *)objc_opt_self(DOCAXIdentifier);
  v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE700000000000000);
  v2 = objc_msgSend(v0, "sizeSettingMenuItemForSize:", v1);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

uint64_t sub_1002F1738(uint64_t a1, uint64_t a2)
{
  return sub_1002F1750(a1, a2, (SEL *)&selRef_sizeSettingMenuButton);
}

uint64_t sub_1002F1744(uint64_t a1, uint64_t a2)
{
  return sub_1002F1750(a1, a2, (SEL *)&selRef_showFilenameExtensions);
}

uint64_t sub_1002F1750(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v3;
  uint64_t v4;

  v3 = objc_msgSend((id)objc_opt_self(DOCAXIdentifier), *a3);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v4;
}

uint64_t sub_1002F17B0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_groupingBehaviors));
}

uint64_t sub_1002F17C4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_sortModes));
}

uint64_t sub_1002F17D8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_selectedSortOrderAscending);
}

uint64_t sub_1002F17E8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_sizeSettings));
}

uint64_t sub_1002F17F8(char a1)
{
  return sub_1002F0DB0(a1 & 1);
}

uint64_t sub_1002F1800()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_availableSections));
}

uint64_t sub_1002F1810@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = ObservableObject<>.objectWillChange.getter(*v1);
  *a1 = result;
  return result;
}

unint64_t sub_1002F1838(uint64_t a1)
{
  unint64_t result;

  result = sub_1000E6B7C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002F185C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1002F1210(a1, (uint64_t)&unk_1004E1858, (uint64_t)&unk_1004E1880, a2);
}

uint64_t sub_1002F1880(char *a1)
{
  return sub_1002F0DB0(*a1);
}

uint64_t sub_1002F18A8(char *a1)
{
  return sub_1002F0CAC(*a1);
}

uint64_t sub_1002F18D0(char *a1)
{
  return sub_1002F0BA8(*a1);
}

uint64_t sub_1002F18F4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1002F1210(a1, (uint64_t)&unk_1004E1930, (uint64_t)&unk_1004E1958, a2);
}

uint64_t sub_1002F1918(char *a1)
{
  return sub_1002F0EB4(*a1);
}

Swift::String *sub_1002F193C(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, char a7, int a8, uint64_t a9)
{
  Swift::String *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  Swift::String *result;
  Swift::String *v20;
  Swift::String v21;
  Swift::String_optional v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  Swift::String *v26;
  Swift::String v27;
  Swift::String_optional v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  Swift::String *v32;
  Swift::String v33;
  Swift::String_optional v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  Swift::String *v38;
  Swift::String v39;
  Swift::String_optional v40;
  Swift::String v41;
  Swift::String v42;
  uint64_t v43;
  Swift::String *v44;
  Swift::String v45;
  Swift::String_optional v46;
  Swift::String v47;
  Swift::String v48;
  char *v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  _BYTE v69[24];
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;

  v66 = a5;
  v67 = a8;
  v62 = a3;
  v63 = a6;
  v64 = a2;
  v65 = a4;
  v61 = a1;
  v11 = sub_10006922C(&qword_10064DD28);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v60 - v17;
  result = (Swift::String *)(id)_DocumentManagerBundle(v16);
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  v20 = result;
  v70._countAndFlagsBits = 0xD000000000000025;
  v70._object = (void *)0x8000000100524370;
  v21._countAndFlagsBits = 0x74704F2077656956;
  v21._object = (void *)0xEC000000736E6F69;
  v22.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v22.value._object = (void *)0xEB00000000656C62;
  v23._countAndFlagsBits = 0x74704F2077656956;
  v23._object = (void *)0xEC000000736E6F69;
  v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, (NSBundle)v20, v23, v70);

  v9[1] = v24;
  result = (Swift::String *)(id)_DocumentManagerBundle(v25);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v26 = result;
  v71._countAndFlagsBits = 0xD00000000000003CLL;
  v71._object = (void *)0x8000000100524750;
  v27._countAndFlagsBits = 0x79422070756F7247;
  v27._object = (void *)0xE800000000000000;
  v28.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v28.value._object = (void *)0xEB00000000656C62;
  v29._countAndFlagsBits = 0x79422070756F7247;
  v29._object = (void *)0xE800000000000000;
  v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, v28, (NSBundle)v26, v29, v71);

  v9[2] = v30;
  result = (Swift::String *)(id)_DocumentManagerBundle(v31);
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v32 = result;
  v72._countAndFlagsBits = 0xD00000000000003BLL;
  v72._object = (void *)0x8000000100525070;
  v33._countAndFlagsBits = 0x79422074726F53;
  v33._object = (void *)0xE700000000000000;
  v34.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v34.value._object = (void *)0xEB00000000656C62;
  v35._countAndFlagsBits = 0x79422074726F53;
  v35._object = (void *)0xE700000000000000;
  v36 = NSLocalizedString(_:tableName:bundle:value:comment:)(v33, v34, (NSBundle)v32, v35, v72);

  v9[3] = v36;
  result = (Swift::String *)(id)_DocumentManagerBundle(v37);
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v38 = result;
  v60 = v12;
  v73._countAndFlagsBits = 0xD000000000000042;
  v73._object = (void *)0x80000001005250D0;
  v39._object = (void *)0x80000001005250B0;
  v39._countAndFlagsBits = 0xD000000000000012;
  v40.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v40.value._object = (void *)0xEB00000000656C62;
  v41._countAndFlagsBits = 0xD000000000000012;
  v41._object = (void *)0x80000001005250B0;
  v42 = NSLocalizedString(_:tableName:bundle:value:comment:)(v39, v40, (NSBundle)v38, v41, v73);

  v9[4] = v42;
  result = (Swift::String *)(id)_DocumentManagerBundle(v43);
  if (result)
  {
    v44 = result;
    v45._countAndFlagsBits = 0xD00000000000001CLL;
    v74._countAndFlagsBits = 0xD00000000000004ELL;
    v74._object = (void *)0x8000000100525140;
    v45._object = (void *)0x8000000100525120;
    v46.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v46.value._object = (void *)0xEB00000000656C62;
    v47._countAndFlagsBits = 0xD00000000000001CLL;
    v47._object = (void *)0x8000000100525120;
    v48 = NSLocalizedString(_:tableName:bundle:value:comment:)(v45, v46, (NSBundle)v44, v47, v74);

    v9[5] = v48;
    v49 = (char *)v9 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_forwardingDelegate;
    *((_QWORD *)v49 + 1) = 0;
    swift_unknownObjectWeakInit(v49);
    *(uint64_t *)((char *)&v9->_countAndFlagsBits + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_groupingBehaviors) = v61;
    *(uint64_t *)((char *)&v9->_countAndFlagsBits + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_sortModes) = v62;
    *(uint64_t *)((char *)&v9->_countAndFlagsBits + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_sizeSettings) = v63;
    v50 = swift_beginAccess((char *)v9 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel__selectedGroupingBehavior, v69, 33, 0);
    LOBYTE(v68) = v64;
    Published.init(initialValue:)(&v68, &type metadata for DOCItemGroupingBehavior, v50);
    swift_endAccess(v69);
    v51 = swift_beginAccess((char *)v9 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel__selectedSortMode, v69, 33, 0);
    LOBYTE(v68) = v65;
    Published.init(initialValue:)(&v68, &type metadata for DOCItemSortMode, v51);
    swift_endAccess(v69);
    *((_BYTE *)&v9->_countAndFlagsBits + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_selectedSortOrderAscending) = v66 & 1;
    v52 = swift_beginAccess((char *)v9 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel__selectedSizeSetting, v69, 33, 0);
    LOBYTE(v68) = a7 & 1;
    Published.init(initialValue:)(&v68, &type metadata for DOCBrowserLayoutConfiguration.SizeSetting, v52);
    swift_endAccess(v69);
    v53 = swift_beginAccess((char *)v9 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel__showFilenameExtensions, v69, 33, 0);
    LOBYTE(v68) = v67 & 1;
    Published.init(initialValue:)(&v68, &type metadata for Bool, v53);
    *(uint64_t *)((char *)&v9->_countAndFlagsBits + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel_availableSections) = (uint64_t)&off_1005BF218;
    v68 = a9;
    v54 = (char *)v9 + OBJC_IVAR____TtC5Files23DOCViewOptionsViewModel__showFilenameExtensions;
    v55 = sub_10006922C(&qword_10064DD08);
    Published.projectedValue.getter();
    swift_endAccess(v69);
    v56 = sub_10006922C(&qword_100646CE8);
    v57 = sub_1002F2018();
    Publisher<>.assign(to:)(v18, v56, v57);
    v58 = v60;
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v15, v18, v11);
    v59 = swift_beginAccess(v54, v69, 33, 0);
    Published.projectedValue.setter(v15, v55, v59);
    swift_endAccess(v69);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v18, v11);
    return v9;
  }
LABEL_11:
  __break(1u);
  return result;
}

void sub_1002F1EF4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1002F1F2C()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  id v3;
  uint64_t v4;

  v1 = (void *)objc_opt_self(DOCAXIdentifier);
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v0);
  v3 = objc_msgSend(v1, "groupByMenuItemForGrouping:", v2);

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  return v4;
}

unint64_t sub_1002F2018()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100646CF0;
  if (!qword_100646CF0)
  {
    v1 = sub_10007E830(&qword_100646CE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for AnyPublisher<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100646CF0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DOCSearchController.LayoutConfiguration(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for DOCProgressUIConfiguration(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
  }
  v4 = *(unsigned __int8 *)a1;
  v5 = v4 >= 2;
  v6 = v4 - 2;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCSearchController.LayoutConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)result = a2 + 1;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCProgressUIConfiguration()
{
  return &type metadata for DOCProgressUIConfiguration;
}

uint64_t _s12PopoverStyleOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1002F21D0 + 4 * byte_1004E1985[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1002F2204 + 4 * byte_1004E1980[v4]))();
}

uint64_t sub_1002F2204(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002F220C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002F2214);
  return result;
}

uint64_t sub_1002F2220(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002F2228);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1002F222C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002F2234(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s12PopoverStyleOMa()
{
  return &_s12PopoverStyleON;
}

unint64_t sub_1002F2254()
{
  unint64_t result;

  result = qword_10064DD30;
  if (!qword_10064DD30)
  {
    result = swift_getWitnessTable(&unk_1004E19F8, &_s12PopoverStyleON);
    atomic_store(result, (unint64_t *)&qword_10064DD30);
  }
  return result;
}

uint64_t static DOCDocumentSource.== infix(_:_:)(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;

  v3 = objc_msgSend(a1, "identifier");
  v4 = objc_msgSend(a2, "identifier");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  if (v5 == v8 && v7 == v9)
  {
    v12 = 1;
    v11 = v7;
  }
  else
  {
    v11 = v9;
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
  }
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v11);

  return v12 & 1;
}

uint64_t sub_1002F2364(void **a1, void **a2)
{
  return _sSo17DOCDocumentSourceC5FilesE1loiySbAB_ABtFZ_0(*a1, *a2);
}

uint64_t _sSo17DOCDocumentSourceC5FilesE1loiySbAB_ABtFZ_0(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  void *object;
  char v13;

  v3 = objc_msgSend(a1, "displayName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v5 = v4;

  v6 = String.lowercased()();
  swift_bridgeObjectRelease(v5);
  v7 = objc_msgSend(a2, "displayName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v9 = v8;

  v10 = String.lowercased()();
  object = v10._object;
  swift_bridgeObjectRelease(v9);
  if (v6._countAndFlagsBits == v10._countAndFlagsBits && v6._object == v10._object)
  {
    v13 = 0;
    object = v6._object;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v6._countAndFlagsBits, v6._object, v10._countAndFlagsBits, v10._object, 1);
  }
  swift_bridgeObjectRelease(v6._object);
  swift_bridgeObjectRelease(object);
  return v13 & 1;
}

unint64_t sub_1002F247C()
{
  unint64_t result;
  unint64_t v1;

  result = qword_10064DD38;
  if (!qword_10064DD38)
  {
    v1 = sub_1002F24C4();
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10064DD38);
  }
  return result;
}

unint64_t sub_1002F24C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100643AC0;
  if (!qword_100643AC0)
  {
    v1 = objc_opt_self(DOCDocumentSource);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_100643AC0);
  }
  return result;
}

uint64_t type metadata accessor for DOCKeyboardNotifications()
{
  return objc_opt_self(_TtC5Files24DOCKeyboardNotifications);
}

void **sub_1002F2520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void **aBlock;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  void *v35;
  uint64_t (*v36)();
  uint64_t v37;

  v6 = sub_10006922C((uint64_t *)&unk_1006441A0);
  v7 = swift_allocObject(v6, 56, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1004D9720;
  v8 = (void *)objc_opt_self(NSNotificationCenter);
  v9 = objc_msgSend(v8, "defaultCenter");
  v10 = (void *)objc_opt_self(NSOperationQueue);
  v11 = objc_msgSend(v10, "mainQueue");
  v12 = swift_allocObject(&unk_1005DB718, 32, 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  v36 = sub_10010DF60;
  v37 = v12;
  aBlock = _NSConcreteStackBlock;
  v33 = 1107296256;
  v34 = sub_1000B3580;
  v35 = &unk_1005DB730;
  v13 = _Block_copy(&aBlock);
  v14 = v37;
  swift_retain();
  swift_release(v14);
  v15 = objc_msgSend(v9, "addObserverForName:object:queue:usingBlock:", UIKeyboardWillShowNotification, 0, v11, v13);
  _Block_release(v13);

  *(_QWORD *)(v7 + 32) = v15;
  v16 = objc_msgSend(v8, "defaultCenter");
  v17 = objc_msgSend(v10, "mainQueue");
  v18 = swift_allocObject(&unk_1005DB768, 32, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  v36 = sub_100066584;
  v37 = v18;
  aBlock = _NSConcreteStackBlock;
  v33 = 1107296256;
  v34 = sub_1000B3580;
  v35 = &unk_1005DB780;
  v19 = _Block_copy(&aBlock);
  v20 = v37;
  swift_retain();
  swift_release(v20);
  v21 = objc_msgSend(v16, "addObserverForName:object:queue:usingBlock:", UIKeyboardDidChangeFrameNotification, 0, v17, v19);
  _Block_release(v19);

  *(_QWORD *)(v7 + 40) = v21;
  v22 = objc_msgSend(v8, "defaultCenter");
  v23 = objc_msgSend(v10, "mainQueue");
  v24 = swift_allocObject(&unk_1005DB7B8, 32, 7);
  *(_QWORD *)(v24 + 16) = a3;
  *(_QWORD *)(v24 + 24) = a4;
  v36 = sub_10010DF60;
  v37 = v24;
  aBlock = _NSConcreteStackBlock;
  v33 = 1107296256;
  v34 = sub_1000B3580;
  v35 = &unk_1005DB7D0;
  v25 = _Block_copy(&aBlock);
  v26 = v37;
  swift_retain();
  swift_release(v26);
  v27 = objc_msgSend(v22, "addObserverForName:object:queue:usingBlock:", UIKeyboardWillHideNotification, 0, v23, v25);
  _Block_release(v25);

  *(_QWORD *)(v7 + 48) = v27;
  aBlock = (void **)v7;
  specialized Array._endMutation()(v28);
  return aBlock;
}

uint64_t sub_1002F2894()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002F28D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  __n128 v16;
  char v17;
  uint64_t result;
  __n128 v19;
  char v20;
  __n128 v21;
  _BYTE v22[120];
  _BYTE v23[120];
  _BYTE v24[184];
  _QWORD v25[23];

  if (!a1)
    goto LABEL_10;
  v2 = v1;
  v4 = *(void **)(a1 + 552);
  v5 = *(void **)(v2 + 552);
  swift_retain();
  v6 = v4;
  v7 = objc_msgSend(v6, "horizontalSizeClass");
  if (v7 != objc_msgSend(v5, "horizontalSizeClass")
    || (v8 = objc_msgSend(v6, "verticalSizeClass"), v8 != objc_msgSend(v5, "verticalSizeClass")))
  {
    swift_release(a1);

    goto LABEL_10;
  }
  v9 = sub_1001463A0();
  UITraitCollection.subscript.getter(v25, &type metadata for DOCBrowserLayoutConfiguration.Trait, &type metadata for DOCBrowserLayoutConfiguration.Trait, v9);
  v10 = v25[0];
  UITraitCollection.subscript.getter(v25, &type metadata for DOCBrowserLayoutConfiguration.Trait, &type metadata for DOCBrowserLayoutConfiguration.Trait, v9);
  if (v10 != v25[0])
  {

    swift_release(a1);
    goto LABEL_10;
  }
  if ((unint64_t)(v10 - 1) < 2)
  {
    swift_retain();
    v11 = sub_100071B10();
    v13 = v12;
    if (v11 == sub_100071B10() && ((v13 ^ v14) & 1) == 0)
    {
      sub_10006B424((uint64_t)v24);
      sub_10006B424((uint64_t)v25);
      v15 = sub_10007C194((uint64_t)v24, (uint64_t)v25);
      sub_10003BDA0((uint64_t)v25);
      sub_10003BDA0((uint64_t)v24);
LABEL_17:
      swift_release_n(a1, 2, v16);

      v17 = !v15;
      return v17 & 1;
    }

    swift_release_n(a1, 2, v19);
    goto LABEL_10;
  }
  if (!v10)
  {
    swift_retain_n(a1, 2);
    sub_10009DED4((uint64_t)v22);
    sub_10009DED4((uint64_t)v23);
    v20 = sub_1002F4710((uint64_t)v22, (uint64_t)v23);
    sub_1001D0668((uint64_t)v23);
    sub_1001D0668((uint64_t)v22);
    if ((v20 & 1) != 0)
    {
      sub_10006B5D4((uint64_t)v24);
      sub_10006B5D4((uint64_t)v25);
      v15 = sub_100078AD8((uint64_t)v24, (uint64_t)v25);
      swift_release(a1);
      sub_10002A0C4((uint64_t)v25);
      sub_10002A0C4((uint64_t)v24);
      goto LABEL_17;
    }

    swift_release_n(a1, 3, v21);
LABEL_10:
    v17 = 1;
    return v17 & 1;
  }
  v25[0] = v10;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DOCDisplayMode, v25, &type metadata for DOCDisplayMode, &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_1002F2B60(double *a1, double *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (((*(unsigned __int8 *)a1 ^ *(unsigned __int8 *)a2) & 1) != 0)
    return 0;
  if (a1[1] != a2[1] || a1[2] != a2[2])
    return 0;
  v3 = *((_QWORD *)a2 + 3);
  v4 = *((_QWORD *)a1 + 3);
  sub_10007C3E0();
  return static NSObject.== infix(_:_:)(v4, v3) & 1;
}

uint64_t sub_1002F2BCC(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[7];
  char v13;
  _OWORD v14[7];
  char v15;

  v2 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  v12[5] = v2;
  v12[6] = *(_OWORD *)(a1 + 96);
  v13 = *(_BYTE *)(a1 + 112);
  v3 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v4;
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[3];
  v14[2] = a2[2];
  v14[3] = v7;
  v14[0] = v5;
  v14[1] = v6;
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v15 = *((_BYTE *)a2 + 112);
  v14[5] = v9;
  v14[6] = v10;
  v14[4] = v8;
  return sub_1002F4710((uint64_t)v12, (uint64_t)v14) & 1;
}

BOOL sub_1002F2C4C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[11];
  uint64_t v14;
  _OWORD v15[11];
  uint64_t v16;

  v2 = *(_OWORD *)(a1 + 144);
  v13[8] = *(_OWORD *)(a1 + 128);
  v13[9] = v2;
  v13[10] = *(_OWORD *)(a1 + 160);
  v14 = *(_QWORD *)(a1 + 176);
  v3 = *(_OWORD *)(a1 + 80);
  v13[4] = *(_OWORD *)(a1 + 64);
  v13[5] = v3;
  v4 = *(_OWORD *)(a1 + 112);
  v13[6] = *(_OWORD *)(a1 + 96);
  v13[7] = v4;
  v5 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v13[2] = *(_OWORD *)(a1 + 32);
  v13[3] = v6;
  v7 = *(_OWORD *)(a2 + 144);
  v15[8] = *(_OWORD *)(a2 + 128);
  v15[9] = v7;
  v15[10] = *(_OWORD *)(a2 + 160);
  v16 = *(_QWORD *)(a2 + 176);
  v8 = *(_OWORD *)(a2 + 80);
  v15[4] = *(_OWORD *)(a2 + 64);
  v15[5] = v8;
  v9 = *(_OWORD *)(a2 + 112);
  v15[6] = *(_OWORD *)(a2 + 96);
  v15[7] = v9;
  v10 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v10;
  v11 = *(_OWORD *)(a2 + 48);
  v15[2] = *(_OWORD *)(a2 + 32);
  v15[3] = v11;
  return sub_100078AD8((uint64_t)v13, (uint64_t)v15);
}

BOOL sub_1002F2CEC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_100078C50((uint64_t)v7, (uint64_t)v9);
}

Swift::Int sub_1002F2D44(double a1, double a2, double a3, double a4)
{
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11, 0);
  sub_100312808(a1, a2);
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = *(_QWORD *)&a3;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = *(_QWORD *)&a4;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  return Hasher._finalize()();
}

Swift::Int sub_1002F2DD0()
{
  double *v0;

  return sub_1002F2D44(*v0, v0[1], v0[2], v0[3]);
}

void sub_1002F2DDC()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  sub_100312808(*(double *)v0, *(double *)(v0 + 8));
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
}

Swift::Int sub_1002F2E28(uint64_t a1)
{
  double *v1;
  double v2;
  double v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  _QWORD v9[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  Hasher.init(_seed:)(v9, a1);
  sub_100312808(v2, v3);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v4;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v5;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

uint64_t sub_1002F2EA0(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2)
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  else
    return 0;
}

uint64_t sub_1002F2ED0(uint64_t a1)
{
  id *v1;
  id *v2;
  id v4;
  id v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  Swift::UInt64 v14;
  id v16;

  v2 = v1;
  v4 = *v1;
  NSObject.hash(into:)(a1);

  v5 = v2[1];
  NSObject.hash(into:)(a1);

  Hasher._combine(_:)((Swift::UInt)v2[2]);
  Hasher._combine(_:)((Swift::UInt)v2[3]);
  Hasher._combine(_:)((Swift::UInt)v2[4]);
  v6 = (Swift::UInt64)v2[7];
  v7 = (Swift::UInt64)v2[8];
  sub_100312808(*((double *)v2 + 5), *((double *)v2 + 6));
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v6;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v7;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  v16 = v2[9];
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v12 = v11;
  v13 = v16;
  String.hash(into:)(a1, v10, v12);
  swift_bridgeObjectRelease(v12);
  sub_10007C390(&v16);
  Hasher._combine(_:)((_BYTE)v2[10] & 1);
  if (((unint64_t)v2[11] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v14 = (Swift::UInt64)v2[11];
  else
    v14 = 0;
  Hasher._combine(_:)(v14);
  return UIEdgeInsets.hash(into:)(a1, *((double *)v2 + 12), *((double *)v2 + 13), *((double *)v2 + 14), *((double *)v2 + 15));
}

BOOL sub_1002F2FEC(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[8];
  _OWORD v14[8];

  v2 = a1[5];
  v13[4] = a1[4];
  v13[5] = v2;
  v3 = a1[7];
  v13[6] = a1[6];
  v13[7] = v3;
  v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  v5 = a1[3];
  v13[2] = a1[2];
  v13[3] = v5;
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[3];
  v14[2] = a2[2];
  v14[3] = v8;
  v14[0] = v6;
  v14[1] = v7;
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[7];
  v14[6] = a2[6];
  v14[7] = v11;
  v14[4] = v9;
  v14[5] = v10;
  return sub_10007C194((uint64_t)v13, (uint64_t)v14);
}

Swift::Int sub_1002F305C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_1002F2ED0((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1002F309C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1002F2ED0((uint64_t)v2);
  return Hasher._finalize()();
}

void **sub_1002F30D4@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double v3;
  double v4;
  void **result;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  _BYTE v12[24];
  _OWORD v13[7];
  double v14;

  swift_beginAccess(a1 + 608, v12, 33, 0);
  sub_1002F4858(v13);
  swift_endAccess(v12);
  v3 = v14;
  if (qword_100640E68 != -1)
    swift_once(&qword_100640E68, sub_1001FF450);
  v4 = *(double *)&qword_1006729D8;
  result = sub_1001456E8((void **)v13);
  if (v4 + 1.0 < 0.0)
  {
    __break(1u);
  }
  else
  {
    if (v3 >= 0.0 && v3 < v4 + 1.0)
    {
      v11 = 0;
      v10 = 30.0;
      v7 = 14.0;
      v8 = 1.5;
      v9 = 2.0;
    }
    else
    {
      v7 = 22.0;
      v8 = 2.0;
      v9 = 2.5;
      v10 = 46.0;
      v11 = 1;
    }
    *a2 = v10;
    a2[1] = v10;
    a2[2] = v7;
    a2[3] = v7;
    a2[4] = v8;
    a2[5] = v9;
    a2[6] = v8;
    a2[7] = v9;
    *((_QWORD *)a2 + 8) = v11;
  }
  return result;
}

uint64_t sub_1002F31D0(unsigned __int8 a1, void *a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8;
  uint64_t v9;
  int v18;
  void *v19;
  id v20;
  id v21;
  double v22;
  double v23;
  double v24;
  double v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  signed __int8 v32;
  double v33;
  double v34;
  unint64_t v35;
  id v36;
  int v37;
  id *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  double v42;
  double v43;
  NSString *v44;
  id v45;
  char v46;
  uint64_t v47;
  uint64_t v49;
  unsigned __int8 v50;
  _OWORD v51[14];
  _QWORD __src[36];
  _BYTE v53[184];
  _OWORD v54[8];

  v9 = v8;
  *(_BYTE *)(v9 + 128) = 0;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  v18 = a1;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  sub_1000D07C0((uint64_t)v53);
  sub_100070EDC((uint64_t)v53, v9 + 136, (uint64_t *)&unk_100641300);
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  *(_OWORD *)(v9 + 352) = 0u;
  *(_OWORD *)(v9 + 368) = 0u;
  *(_QWORD *)(v9 + 384) = 0;
  *(_BYTE *)(v9 + 392) = 1;
  *(_QWORD *)(v9 + 400) = 0;
  *(_BYTE *)(v9 + 408) = 2;
  sub_1000D07E4(v54);
  sub_100070EDC((uint64_t)v54, v9 + 416, &qword_100658670);
  *(_BYTE *)(v9 + 544) = a1;
  *(double *)(v9 + 560) = a3;
  *(double *)(v9 + 568) = a4;
  *(double *)(v9 + 576) = a5;
  *(double *)(v9 + 584) = a6;
  *(double *)(v9 + 592) = a7;
  *(double *)(v9 + 600) = a8;
  *(_QWORD *)(v9 + 552) = a2;
  if (v18 == 3)
  {
    v19 = (void *)objc_opt_self(UIScreen);
    v20 = a2;
    v21 = objc_msgSend(v19, "mainScreen");
    objc_msgSend(v21, "bounds");
    v23 = v22;
    v25 = v24;

  }
  else
  {
    v26 = a2;
    v25 = a4;
    v23 = a3;
  }
  if (qword_100641000 != -1)
    swift_once(&qword_100641000, sub_1000A14B8);
  v27 = off_10064F3A8;
  *(double *)__src = v23;
  *(double *)&__src[1] = v25;
  type metadata accessor for CGSize(0);
  v29 = v28;
  v30 = sub_1000A11DC();
  v31 = sub_10005A360(&qword_10064DEE8, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  Dictionary<>.doc_firstKey(forValue:)(v51, __src, v27, &type metadata for DOCItemCollectionSizeClass, v29, v30, v31);
  v32 = v51[0];
  if (LOBYTE(v51[0]) == 17)
  {
    v32 = sub_10000B128(v23, v25);
    if (v32 == 17)
    {
      *(double *)__src = v25;
      *(double *)&__src[1] = v23;
      Dictionary<>.doc_firstKey(forValue:)(v51, __src, v27, &type metadata for DOCItemCollectionSizeClass, v29, v30, v31);
      v32 = v51[0];
      if (LOBYTE(v51[0]) == 17)
      {
        v32 = sub_10000B128(v25, v23);
        if (v32 == 17)
        {
          v32 = sub_1000A1330(1, v23);
          sub_1000A1220(v32);
          if (v33 != v23)
          {
            v32 = sub_1000A1330(0, v23);
            sub_1000A1220(v32);
            if (v34 != v23)
              v32 = sub_1000A1330(1, v23);
          }
        }
      }
    }
  }
  sub_1002F54AC(v51);
  __src[0] = a2;
  *(double *)&__src[1] = a3;
  *(double *)&__src[2] = a4;
  *(double *)&__src[3] = a5;
  *(double *)&__src[4] = a6;
  *(double *)&__src[5] = a7;
  *(double *)&__src[6] = a8;
  LOBYTE(__src[7]) = a1;
  sub_100070EDC((uint64_t)v51, (uint64_t)&__src[8], &qword_10064DED8);
  memcpy((void *)(v9 + 608), __src, 0x120uLL);
  v35 = sub_1001463A0();
  v36 = a2;
  UITraitCollection.subscript.getter(&v49, &type metadata for DOCBrowserLayoutConfiguration.Trait, &type metadata for DOCBrowserLayoutConfiguration.Trait, v35);
  v37 = v50;
  if (v49 == 2)
  {
    v38 = (id *)&UIFontTextStyleBody;
    v39 = 8;
  }
  else
  {
    v40 = 8 * v32;
    v38 = *(id **)((char *)&off_1005DBC78 + v40);
    v39 = *(_QWORD *)((char *)&unk_1004E1DB0 + v40);
  }
  v41 = *v38;
  if (v37)
    v42 = 8.0;
  else
    v42 = 6.0;
  if (v37)
    v43 = 48.0;
  else
    v43 = 36.0;
  v44 = UIFontTextStyleCaption1;
  v45 = objc_msgSend(v36, "preferredContentSizeCategory");
  v46 = UIContentSizeCategory.isAccessibilityCategory.getter(v45);

  *(double *)(v9 + 896) = v43 + v42 + v42;
  *(double *)(v9 + 904) = v42;
  if ((v46 & 1) != 0)
    v47 = 2;
  else
    v47 = 1;
  *(_QWORD *)(v9 + 912) = v41;
  *(_QWORD *)(v9 + 920) = v44;
  *(_QWORD *)(v9 + 928) = v39;
  *(_BYTE *)(v9 + 936) = 1;
  *(_QWORD *)(v9 + 944) = v47;
  *(_QWORD *)(v9 + 952) = v47;
  return v9;
}

void DOCItemCollectionRowStyle.hash(into:)(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t sub_1002F3618()
{
  return sub_10005A360(&qword_100641638, (uint64_t (*)(uint64_t))type metadata accessor for DOCItemCollectionRowStyle, (uint64_t)&unk_1004D6920);
}

void destroy for DOCItemCollectionLayoutTraits.GridSpecContext(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {

  }
}

uint64_t initializeWithCopy for DOCItemCollectionLayoutTraits.GridSpecContext(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  _OWORD *v6;
  id v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  id v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = (_OWORD *)(a2 + 64);
  v5 = *(void **)(a2 + 64);
  v7 = v4;
  if (v5)
  {
    v8 = *(_QWORD *)(a2 + 72);
    v9 = *(void **)(a2 + 80);
    *(_QWORD *)(a1 + 64) = v5;
    *(_QWORD *)(a1 + 72) = v8;
    *(_QWORD *)(a1 + 80) = v9;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_WORD *)(a1 + 105) = *(_WORD *)(a2 + 105);
    v10 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v10;
    v11 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v11;
    v12 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v12;
    v13 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v13;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    v14 = v5;
    v15 = v9;
  }
  else
  {
    v16 = v6[11];
    *(_OWORD *)(a1 + 224) = v6[10];
    *(_OWORD *)(a1 + 240) = v16;
    v17 = v6[13];
    *(_OWORD *)(a1 + 256) = v6[12];
    *(_OWORD *)(a1 + 272) = v17;
    v18 = v6[7];
    *(_OWORD *)(a1 + 160) = v6[6];
    *(_OWORD *)(a1 + 176) = v18;
    v19 = v6[9];
    *(_OWORD *)(a1 + 192) = v6[8];
    *(_OWORD *)(a1 + 208) = v19;
    v20 = v6[3];
    *(_OWORD *)(a1 + 96) = v6[2];
    *(_OWORD *)(a1 + 112) = v20;
    v21 = v6[5];
    *(_OWORD *)(a1 + 128) = v6[4];
    *(_OWORD *)(a1 + 144) = v21;
    v22 = v6[1];
    *(_OWORD *)(a1 + 64) = *v6;
    *(_OWORD *)(a1 + 80) = v22;
  }
  return a1;
}

uint64_t assignWithCopy for DOCItemCollectionLayoutTraits.GridSpecContext(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  _OWORD *v7;
  void *v8;
  void *v9;
  _OWORD *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  id v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = (_OWORD *)(a1 + 64);
  v8 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = (_OWORD *)(a2 + 64);
  v9 = *(void **)(a2 + 64);
  if (v8)
  {
    if (v9)
    {
      *(_QWORD *)(a1 + 64) = v9;
      v11 = v9;

      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v12 = *(void **)(a2 + 80);
      v13 = *(void **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v12;
      v14 = v12;

      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
      *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    }
    else
    {
      sub_1002F3A60(a1 + 64);
      v23 = *(_OWORD *)(a2 + 80);
      *v7 = *v10;
      *(_OWORD *)(a1 + 80) = v23;
      v24 = *(_OWORD *)(a2 + 144);
      v26 = *(_OWORD *)(a2 + 96);
      v25 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v24;
      *(_OWORD *)(a1 + 96) = v26;
      *(_OWORD *)(a1 + 112) = v25;
      v27 = *(_OWORD *)(a2 + 208);
      v29 = *(_OWORD *)(a2 + 160);
      v28 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v27;
      *(_OWORD *)(a1 + 160) = v29;
      *(_OWORD *)(a1 + 176) = v28;
      v30 = *(_OWORD *)(a2 + 272);
      v32 = *(_OWORD *)(a2 + 224);
      v31 = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 272) = v30;
      *(_OWORD *)(a1 + 224) = v32;
      *(_OWORD *)(a1 + 240) = v31;
    }
  }
  else if (v9)
  {
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    v15 = *(void **)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
    *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
    v16 = *(_OWORD *)(a2 + 112);
    v17 = *(_OWORD *)(a2 + 128);
    v18 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v18;
    *(_OWORD *)(a1 + 112) = v16;
    *(_OWORD *)(a1 + 128) = v17;
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    v19 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v19;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v20 = *(_OWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = v20;
    v21 = v9;
    v22 = v15;
  }
  else
  {
    v33 = *(_OWORD *)(a2 + 80);
    *v7 = *v10;
    *(_OWORD *)(a1 + 80) = v33;
    v34 = *(_OWORD *)(a2 + 96);
    v35 = *(_OWORD *)(a2 + 112);
    v36 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v36;
    *(_OWORD *)(a1 + 96) = v34;
    *(_OWORD *)(a1 + 112) = v35;
    v37 = *(_OWORD *)(a2 + 160);
    v38 = *(_OWORD *)(a2 + 176);
    v39 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v39;
    *(_OWORD *)(a1 + 160) = v37;
    *(_OWORD *)(a1 + 176) = v38;
    v40 = *(_OWORD *)(a2 + 224);
    v41 = *(_OWORD *)(a2 + 240);
    v42 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v42;
    *(_OWORD *)(a1 + 224) = v40;
    *(_OWORD *)(a1 + 240) = v41;
  }
  return a1;
}

uint64_t sub_1002F3A60(uint64_t a1)
{
  destroy for DOCGridLayout();
  return a1;
}

void *initializeWithTake for DOCItemCollectionLayoutTraits.GridSpecContext(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t assignWithTake for DOCItemCollectionLayoutTraits.GridSpecContext(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 64);
  v6 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  if (!v6)
    goto LABEL_5;
  if (!v5)
  {
    sub_1002F3A60(a1 + 64);
LABEL_5:
    v14 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v14;
    v15 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v15;
    v16 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v16;
    v17 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v17;
    v18 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v18;
    v19 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v19;
    v20 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v20;
    return a1;
  }
  *(_QWORD *)(a1 + 64) = v5;

  v7 = *(_QWORD *)(a2 + 80);
  v8 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;

  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  v10 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v10;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  v12 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v12;
  v13 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v13;
  return a1;
}

uint64_t getEnumTagSinglePayload for DOCItemCollectionLayoutTraits.GridSpecContext(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 288))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCItemCollectionLayoutTraits.GridSpecContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 288) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 288) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCItemCollectionLayoutTraits.GridSpecContext()
{
  return &type metadata for DOCItemCollectionLayoutTraits.GridSpecContext;
}

uint64_t getEnumTagSinglePayload for DOCItemCollectionLayoutTraits.ListTraits(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCBrowserLayoutConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCItemCollectionLayoutTraits.ListTraits()
{
  return &type metadata for DOCItemCollectionLayoutTraits.ListTraits;
}

ValueMetadata *type metadata accessor for DOCItemCollectionLayoutTraits.GridItemBadgeTraits()
{
  return &type metadata for DOCItemCollectionLayoutTraits.GridItemBadgeTraits;
}

void destroy for DOCItemCollectionLayoutTraits.GridTraits(id *a1)
{

}

uint64_t initializeWithCopy for DOCItemCollectionLayoutTraits.GridTraits(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a2 + 16);
  v4 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = *(void **)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v7 = v3;
  v8 = v4;
  v9 = v6;
  return a1;
}

uint64_t assignWithCopy for DOCItemCollectionLayoutTraits.GridTraits(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(void **)(a2 + 16);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = v4;

  v7 = *(void **)(a2 + 24);
  v8 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  v9 = v7;

  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(void **)(a2 + 56);
  v11 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  v12 = v10;

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

__n128 initializeWithTake for DOCItemCollectionLayoutTraits.GridTraits(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for DOCItemCollectionLayoutTraits.GridTraits(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;

  v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for DOCItemCollectionLayoutTraits.GridTraits(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 113))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCItemCollectionLayoutTraits.GridTraits(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 113) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 113) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCItemCollectionLayoutTraits.GridTraits()
{
  return &type metadata for DOCItemCollectionLayoutTraits.GridTraits;
}

ValueMetadata *type metadata accessor for DOCItemCollectionLayoutTraits.ItemStatusBadgeTraits()
{
  return &type metadata for DOCItemCollectionLayoutTraits.ItemStatusBadgeTraits;
}

void destroy for DOCItemCollectionLayoutTraits.ListItemTraits(id *a1)
{

}

uint64_t initializeWithCopy for DOCItemCollectionLayoutTraits.ListItemTraits(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  __int128 v6;
  id v7;
  id v8;
  id v9;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(void **)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v5;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  v7 = v3;
  v8 = v4;
  v9 = v5;
  return a1;
}

uint64_t assignWithCopy for DOCItemCollectionLayoutTraits.ListItemTraits(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v10 = *(void **)(a2 + 72);
  v11 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  v12 = v10;

  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

__n128 initializeWithTake for DOCItemCollectionLayoutTraits.ListItemTraits(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for DOCItemCollectionLayoutTraits.ListItemTraits(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);

  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for DOCItemCollectionLayoutTraits.ListItemTraits(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCItemCollectionLayoutTraits.ListItemTraits(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void destroy for DOCItemCollectionLayoutTraits.GridItemTraits(id *a1)
{

}

uint64_t initializeWithCopy for DOCItemCollectionLayoutTraits.GridItemTraits(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  id v13;
  id v14;
  id v15;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  v8 = *(_OWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 96);
  v10 = *(_OWORD *)(a2 + 112);
  v11 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  v12 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v12;
  v13 = v3;
  v14 = v5;
  v15 = v6;
  return a1;
}

uint64_t assignWithCopy for DOCItemCollectionLayoutTraits.GridItemTraits(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(void **)(a2 + 16);
  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 24);
  v11 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  v12 = v10;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  return a1;
}

__n128 initializeWithTake for DOCItemCollectionLayoutTraits.GridItemTraits(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for DOCItemCollectionLayoutTraits.GridItemTraits(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  __int128 v6;
  __int128 v7;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for DOCItemCollectionLayoutTraits.GridItemTraits(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 184))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCItemCollectionLayoutTraits.GridItemTraits(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 184) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 184) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

unint64_t sub_1002F4684()
{
  unint64_t result;

  result = qword_10064DEC8;
  if (!qword_10064DEC8)
  {
    result = swift_getWitnessTable(&unk_1004E1C5C, &type metadata for DOCItemCollectionLayoutTraits.ListItemTraits);
    atomic_store(result, (unint64_t *)&qword_10064DEC8);
  }
  return result;
}

unint64_t sub_1002F46CC()
{
  unint64_t result;

  result = qword_10064DED0;
  if (!qword_10064DED0)
  {
    result = swift_getWitnessTable(&unk_1004E1CC4, &type metadata for DOCItemCollectionLayoutTraits.ItemStatusBadgeTraits);
    atomic_store(result, (unint64_t *)&qword_10064DED0);
  }
  return result;
}

uint64_t sub_1002F4710(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (*(double *)a1 != *(double *)a2)
    goto LABEL_16;
  if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
    goto LABEL_16;
  sub_10007C3E0();
  if ((static NSObject.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) & 1) == 0)
    goto LABEL_16;
  v4 = static NSObject.== infix(_:_:)(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  v5 = 0;
  if ((v4 & 1) != 0
    && ((*(_BYTE *)(a1 + 32) & 1) == 0) != (*(_BYTE *)(a2 + 32) & 1)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(double *)(a1 + 48) == *(double *)(a2 + 48))
  {
    if ((static NSObject.== infix(_:_:)(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56)) & 1) == 0
      || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
    {
      goto LABEL_16;
    }
    v5 = 0;
    if (*(double *)(a1 + 72) == *(double *)(a2 + 72)
      && *(double *)(a1 + 80) == *(double *)(a2 + 80)
      && *(double *)(a1 + 88) == *(double *)(a2 + 88)
      && *(double *)(a1 + 96) == *(double *)(a2 + 96))
    {
      if (*(_QWORD *)(a1 + 104) == *(_QWORD *)(a2 + 104))
      {
        v5 = ((*(_BYTE *)(a1 + 112) & 1) == 0) ^ *(_BYTE *)(a2 + 112);
        return v5 & 1;
      }
LABEL_16:
      v5 = 0;
    }
  }
  return v5 & 1;
}

double sub_1002F4858@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  char v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  double result;
  __int128 v43;
  char v44;
  __int128 v45;
  __int128 v46;
  _QWORD v47[3];
  __int128 v48;
  char v49;
  char v50;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _OWORD v81[14];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  void *v122[2];
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  char v126;
  char v127;
  char v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  char v163;
  char v164;
  char v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  _OWORD v195[2];
  uint64_t v196;
  uint64_t v197;
  char v198;
  id v199;
  uint64_t v200;
  char v201;
  char v202;
  uint64_t v203;
  char v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  _BYTE v220[224];
  _OWORD v221[15];

  v2 = v1;
  v45 = *(_OWORD *)(v1 + 24);
  v46 = *(_OWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v44 = *(_BYTE *)(v1 + 56);
  v6 = *(id *)v1;
  v7 = objc_msgSend(v6, "userInterfaceIdiom");
  objc_msgSend(v6, "displayScale");
  v9 = v8;
  v10 = v6;
  v11 = sub_100373B78(v10);
  v12 = UITraitCollection.doc_preferredLayoutSizeCategory.getter();
  v13 = sub_1001463A0();
  UITraitCollection.subscript.getter(&v159, &type metadata for DOCBrowserLayoutConfiguration.Trait, &type metadata for DOCBrowserLayoutConfiguration.Trait, v13);
  v14 = v159;
  v15 = v160;
  v16 = objc_msgSend((id)objc_opt_self(UIFontMetrics), "defaultMetrics");
  objc_msgSend(v16, "scaledValueForValue:compatibleWithTraitCollection:", v10, 1.0);
  v18 = v17;

  v195[0] = v46;
  v195[1] = v45;
  v196 = v4;
  v197 = v5;
  v198 = v44;
  v199 = v7;
  v200 = v9;
  v201 = v11;
  v202 = v12;
  v203 = v14;
  v204 = v15;
  v19 = v2 + 64;
  v205 = v18;
  sub_100070EDC(v19, (uint64_t)v220, &qword_10064DED8);
  sub_100070EDC((uint64_t)v220, (uint64_t)v221, &qword_10064DED8);
  if (sub_1000A849C((uint64_t *)v221) == 1)
  {
    sub_1002D56C0(&v121);
    sub_1002D6E08((uint64_t)v195, (uint64_t *)&v121, (uint64_t)v122);
    if (qword_100640FB8 != -1)
      swift_once(&qword_100640FB8, sub_10030D4EC);
    v20 = qword_10064E2D0;
    swift_retain();
    sub_10030D5A4((double *)v195, (uint64_t)v122, 1, (uint64_t)&v123);
    v21 = v141;
    v120 = v140;
    v117 = v137;
    v118 = v138;
    v119 = v139;
    v113 = v133;
    v114 = v134;
    v115 = v135;
    v116 = v136;
    v111 = v146;
    v112 = v147;
    v109 = v144;
    v110 = v145;
    v107 = v142;
    v108 = v143;
    sub_1002F5350((uint64_t)&v123);
    v22 = sub_1002D58C4();
    if (v21 >= v22)
    {
      sub_1002F53B0((uint64_t)&v123);
      v104 = v156;
      v105 = v157;
      v106 = v158;
      v100 = v152;
      v101 = v153;
      v102 = v154;
      v103 = v155;
      v96 = v148;
      v97 = v149;
      v98 = v150;
      v99 = v151;
      v24 = *((_QWORD *)&v123 + 1);
      v23 = v123;
      v25 = v124;
      v26 = v125;
      v27 = v126;
      v28 = v127;
      v29 = v128;
      v30 = v129;
      v31 = v130;
      v32 = v131;
      v33 = v132;
      v86 = v117;
      v87 = v118;
      v88 = v119;
      v82 = v113;
      v83 = v114;
      v84 = v115;
      v85 = v116;
      *(_QWORD *)&v89 = v120;
      *((_QWORD *)&v89 + 1) = v21;
      v94 = v111;
      v95 = v112;
      v92 = v109;
      v93 = v110;
      v90 = v107;
      v91 = v108;
    }
    else
    {
      sub_10030E1B0(&v123, v22, v195, 1, v15 ^ 1, &v159);
      sub_1002F53B0((uint64_t)&v123);
      sub_1002F53B0((uint64_t)&v123);
      v104 = v192;
      v105 = v193;
      v106 = v194;
      v100 = v188;
      v101 = v189;
      v102 = v190;
      v103 = v191;
      v96 = v184;
      v97 = v185;
      v98 = v186;
      v99 = v187;
      v92 = v180;
      v93 = v181;
      v94 = v182;
      v95 = v183;
      v88 = v176;
      v89 = v177;
      v90 = v178;
      v91 = v179;
      v84 = v172;
      v85 = v173;
      v86 = v174;
      v87 = v175;
      v82 = v170;
      v83 = v171;
      v23 = v159;
      v24 = v160;
      v25 = v161;
      v26 = v162;
      v27 = v163;
      v28 = v164;
      v29 = v165;
      v30 = v166;
      v31 = v167;
      v32 = v168;
      v33 = v169;
    }
    v47[0] = v23;
    v47[1] = v24;
    v47[2] = v25;
    v48 = v26;
    v49 = v27 & 1;
    v50 = v28 & 1;
    v51 = v29 & 1;
    v52 = v30;
    v53 = v31;
    v54 = v32;
    v55 = v33;
    v66 = v92;
    v67 = v93;
    v68 = v94;
    v69 = v95;
    v62 = v88;
    v63 = v89;
    v64 = v90;
    v65 = v91;
    v58 = v84;
    v59 = v85;
    v60 = v86;
    v61 = v87;
    v56 = v82;
    v57 = v83;
    v78 = v104;
    v79 = v105;
    v80 = v106;
    v74 = v100;
    v75 = v101;
    v77 = v103;
    v76 = v102;
    v70 = v96;
    v71 = v97;
    v73 = v99;
    v72 = v98;
    sub_1001456B8((uint64_t)&v82);
    sub_1002F53B0((uint64_t)v47);
    sub_1001456E8(v122);
    swift_release(v20);
    v81[10] = v92;
    v81[11] = v93;
    v81[12] = v94;
    v81[13] = v95;
    v81[6] = v88;
    v81[7] = v89;
    v81[8] = v90;
    v81[9] = v91;
    v81[2] = v84;
    v81[3] = v85;
    v81[4] = v86;
    v81[5] = v87;
    v81[0] = v82;
    v81[1] = v83;
    DOCSplitBrowserViewController.didCommitPreview(of:)(v81);
    sub_100070EDC((uint64_t)v81, v19, &qword_10064DED8);
    sub_1001456B8((uint64_t)&v82);
    v216 = v92;
    v217 = v93;
    v218 = v94;
    v219 = v95;
    v212 = v88;
    v213 = v89;
    v214 = v90;
    v215 = v91;
    v208 = v84;
    v209 = v85;
    v210 = v86;
    v211 = v87;
    v34 = v82;
    v35 = v83;
  }
  else
  {
    v216 = v221[10];
    v217 = v221[11];
    v218 = v221[12];
    v219 = v221[13];
    v212 = v221[6];
    v213 = v221[7];
    v214 = v221[8];
    v215 = v221[9];
    v208 = v221[2];
    v209 = v221[3];
    v210 = v221[4];
    v211 = v221[5];
    v34 = v221[0];
    v35 = v221[1];
  }
  v206 = v34;
  v207 = v35;
  sub_1002F5410((uint64_t)v220);
  v36 = v217;
  a1[10] = v216;
  a1[11] = v36;
  v37 = v219;
  a1[12] = v218;
  a1[13] = v37;
  v38 = v213;
  a1[6] = v212;
  a1[7] = v38;
  v39 = v215;
  a1[8] = v214;
  a1[9] = v39;
  v40 = v209;
  a1[2] = v208;
  a1[3] = v40;
  v41 = v211;
  a1[4] = v210;
  a1[5] = v41;
  result = *(double *)&v206;
  v43 = v207;
  *a1 = v206;
  a1[1] = v43;
  return result;
}

void sub_1002F51DC(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (a3)
  {

  }
}

uint64_t sub_1002F5218(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v5;

  v2 = *(_QWORD *)(a1 + 72);
  v5 = *(void **)(a1 + 64);
  v3 = *(void **)(a1 + 80);

  sub_1002F5324(v5, v2, v3);
  return a1;
}

void sub_1002F5324(void *a1, uint64_t a2, void *a3)
{
  if (a1)
  {

  }
}

uint64_t sub_1002F5350(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v2 = *(void **)(a1 + 16);
  v3 = *(void **)(a1 + 112);
  v4 = *(void **)(a1 + 128);
  v5 = *(void **)(a1 + 336);
  v6 = *(void **)(a1 + 352);
  v7 = *(id *)a1;
  v8 = v2;
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v12 = v6;
  return a1;
}

uint64_t sub_1002F53B0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 16);
  v4 = *(void **)(a1 + 112);
  v5 = *(void **)(a1 + 128);
  v6 = *(void **)(a1 + 336);

  return a1;
}

uint64_t sub_1002F5410(uint64_t a1)
{
  sub_1002F5480(*(id *)a1, *(_QWORD *)(a1 + 8), *(void **)(a1 + 16));
  return a1;
}

id sub_1002F5480(id result, uint64_t a2, void *a3)
{
  id v3;

  if (result)
  {
    v3 = result;
    return a3;
  }
  return result;
}

double sub_1002F54AC(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1002F54D0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;

  v2 = *(void **)(a1 + 24);
  v3 = *(void **)(a1 + 56);
  v4 = *(id *)(a1 + 16);
  v5 = v2;
  v6 = v3;
  return a1;
}

id sub_1002F550C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v9;
  id v10;
  id result;

  if (a3)
  {
    v9 = a3;
    v10 = a4;
    return a8;
  }
  return result;
}

void destroy for DOCItemCollectionLayoutTraits.GridTraits.GroupedLayoutTraits(uint64_t a1)
{

}

uint64_t initializeWithCopy for DOCItemCollectionLayoutTraits.GridTraits.GroupedLayoutTraits(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for DOCItemCollectionLayoutTraits.GridTraits.GroupedLayoutTraits(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(void **)(a2 + 24);
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  v5 = v3;

  return a1;
}

uint64_t assignWithTake for DOCItemCollectionLayoutTraits.GridTraits.GroupedLayoutTraits(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for DOCItemCollectionLayoutTraits.GridTraits.GroupedLayoutTraits()
{
  return &type metadata for DOCItemCollectionLayoutTraits.GridTraits.GroupedLayoutTraits;
}

_QWORD *sub_1002F5628(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v4 = v3;
  v21 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a3 >> 62)
    goto LABEL_18;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  while (v6)
  {
    for (i = 4; ; ++i)
    {
      v9 = i - 4;
      if ((a3 & 0xC000000000000001) == 0)
        break;
      v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a3);
      v11 = i - 3;
      if (__OFADD__(v9, 1))
        goto LABEL_17;
LABEL_11:
      v20 = v10;
      a1(&v19, &v20);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);
        swift_unknownObjectRelease(v10);
        return (_QWORD *)swift_bridgeObjectRelease(v21);
      }
      v12 = swift_unknownObjectRelease(v10);
      v13 = v19;
      if (v19)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        v15 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v14 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v15 >= v14 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
        specialized Array._endMutation()(v8);
      }
      if (v11 == v6)
      {
        swift_bridgeObjectRelease(a3);
        return (_QWORD *)v21;
      }
    }
    v10 = *(_QWORD *)(a3 + 8 * i);
    swift_unknownObjectRetain(v10);
    v11 = i - 3;
    if (!__OFADD__(v9, 1))
      goto LABEL_11;
LABEL_17:
    __break(1u);
LABEL_18:
    if (a3 < 0)
      v17 = a3;
    else
      v17 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v6 = _CocoaArrayWrapper.endIndex.getter(v17);
  }
  swift_bridgeObjectRelease(a3);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1002F57D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for DOCItemActionLogger();
  v1 = swift_allocObject(v0, 24, 7);
  result = sub_1002F580C();
  qword_100672BC8 = v1;
  return result;
}

uint64_t sub_1002F580C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  static DispatchQoS.utility.getter();
  v17 = _swiftEmptyArrayStorage;
  v10 = sub_10005A360((unint64_t *)&qword_100643640, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v11 = sub_10006922C((uint64_t *)&unk_100641280);
  v12 = sub_10008825C((unint64_t *)&qword_100643650, (uint64_t *)&unk_100641280);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v11, v12, v4, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v0);
  v13 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002DLL, 0x80000001005254E0, v9, v6, v3, 0);
  v14 = v16;
  *(_QWORD *)(v16 + 16) = v13;
  return v14;
}

uint64_t sub_1002F59E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(_QWORD *)(v4 + 16);
  v16 = (_QWORD *)swift_allocObject(&unk_1005DBD48, 48, 7);
  v16[2] = a4;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  aBlock[4] = sub_100300ADC;
  v27 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = &unk_1005DBD60;
  v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a4);
  v18 = swift_bridgeObjectRetain(a3);
  static DispatchQoS.unspecified.getter(v18);
  v25 = _swiftEmptyArrayStorage;
  v19 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_10006922C((uint64_t *)&unk_100647540);
  v21 = sub_10008825C((unint64_t *)&qword_100641270, (uint64_t *)&unk_100647540);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v20, v21, v9, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release(v27);
}

uint64_t sub_1002F5BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  NSString v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSArray v36;
  NSString v37;
  id v38;
  id v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v47 = type metadata accessor for UTType(0);
  v8 = *(_QWORD *)(v47 - 8);
  v9 = __chkstk_darwin(v47);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v43 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v43 - v15;
  v46 = a3;
  if (!((unint64_t)a1 >> 62))
  {
    v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if ((unint64_t)v17 < 0x3E8)
      goto LABEL_3;
    v44 = a4;
    v45 = a2;
    v48 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRetain(a1);
LABEL_14:
    v24 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v25 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, a1);
      }
      else
      {
        v25 = *(void **)(a1 + 8 * v24 + 32);
        swift_unknownObjectRetain(v25);
      }
      ++v24;
      v26 = objc_msgSend(v25, "contentType");
      static UTType._unconditionallyBridgeFromObjectiveC(_:)(v26);

      sub_1000C9308((uint64_t)v14, v11);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v47);
      swift_unknownObjectRelease(v25);
    }
    while (v17 != v24);
    swift_bridgeObjectRelease(a1);
    v27 = v48;
    a2 = v45;
    goto LABEL_20;
  }
  if (a1 < 0)
    v41 = a1;
  else
    v41 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v17 = _CocoaArrayWrapper.endIndex.getter(v41);
  swift_bridgeObjectRelease(a1);
  if (v17 > 999)
  {
    v48 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRetain(a1);
    v42 = _CocoaArrayWrapper.endIndex.getter(v41);
    if (!v42)
    {
LABEL_36:
      swift_bridgeObjectRelease(a1);
      v27 = &_swiftEmptySetSingleton;
LABEL_20:
      v18 = sub_10028FE20((uint64_t)v27);
      swift_bridgeObjectRelease(v27);
      goto LABEL_21;
    }
    v17 = v42;
    if (v42 < 1)
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    v44 = a4;
    v45 = a2;
    goto LABEL_14;
  }
LABEL_3:
  v18 = _swiftEmptyArrayStorage;
  if (!v17)
    goto LABEL_21;
  v48 = _swiftEmptyArrayStorage;
  sub_100154EF8(0, v17 & ~(v17 >> 63), 0);
  if (v17 < 0)
    goto LABEL_35;
  v44 = a4;
  v45 = a2;
  v19 = 0;
  v18 = v48;
  do
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v20 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, a1);
    }
    else
    {
      v20 = *(void **)(a1 + 8 * v19 + 32);
      swift_unknownObjectRetain(v20);
    }
    v21 = objc_msgSend(v20, "contentType");
    static UTType._unconditionallyBridgeFromObjectiveC(_:)(v21);
    swift_unknownObjectRelease(v20);

    v48 = v18;
    v23 = v18[2];
    v22 = v18[3];
    if (v23 >= v22 >> 1)
    {
      sub_100154EF8(v22 > 1, v23 + 1, 1);
      v18 = v48;
    }
    ++v19;
    v18[2] = v23 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))((unint64_t)v18+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v23, v16, v47);
  }
  while (v17 != v19);
  a2 = v45;
LABEL_21:
  v28 = (void *)sub_100123758(a1);
  v29 = (void *)objc_opt_self(WFContextualAction);
  v30 = String._bridgeToObjectiveC()();
  v31 = objc_msgSend(v29, "systemActionWithType:identifier:displayString:inputTypes:", a2, 0, v30, 0);

  if (v28)
  {
    v32 = objc_msgSend(v28, "displayName");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v34 = v33;

  }
  else
  {
    v34 = 0;
  }
  v35 = v31;
  v36.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  if (v34)
  {
    v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v34);
  }
  else
  {
    v37 = 0;
  }
  v38 = objc_msgSend(objc_allocWithZone((Class)WFContextualActionEvent), "initWithAction:contentTypes:containerName:surface:", v35, v36.super.isa, v37, 1);

  v39 = objc_msgSend((id)objc_opt_self(VCVoiceShortcutClient), "standardClient");
  objc_msgSend(v39, "logRunOfContextualAction:", v38);

  return swift_unknownObjectRelease(v28);
}

uint64_t type metadata accessor for DOCItemActionLogger()
{
  return objc_opt_self(_TtC5Files19DOCItemActionLogger);
}

id sub_1002F608C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id result;
  void *v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Class isa;
  id v48;
  uint64_t v49;
  Swift::String v50;

  v0 = type metadata accessor for UTType(0);
  v49 = *(_QWORD *)(v0 - 8);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v1);
  v6 = (char *)&v48 - v5;
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v48 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v48 - v11;
  result = (id)_DocumentManagerBundle(v10);
  if (result)
  {
    v14 = result;
    v50._countAndFlagsBits = 0xD000000000000026;
    v50._object = (void *)0x80000001005261E0;
    v15._countAndFlagsBits = 0x70756B72614DLL;
    v15._object = (void *)0xE600000000000000;
    v16.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v16.value._object = (void *)0xEB00000000656C62;
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v50);

    v19 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v19);
    v48 = v20;

    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierMarkup);
    v23 = v22;
    v24 = sub_1002F639C(v21, v22, v18._countAndFlagsBits, (uint64_t)v18._object, 0x70756B72614DLL, 0xE600000000000000, (uint64_t)v20);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v18._object);
    v25 = sub_10006922C(&qword_100643CC0);
    v26 = swift_allocObject(v25, 96, 7);
    *(_OWORD *)(v26 + 16) = xmmword_1004D9B50;
    v27 = static UTType.png.getter(v26);
    v28 = UTType.identifier.getter(v27);
    v30 = v29;
    v31 = *(uint64_t (**)(char *, uint64_t))(v49 + 8);
    v32 = v31(v12, v0);
    *(_QWORD *)(v26 + 32) = v28;
    *(_QWORD *)(v26 + 40) = v30;
    v33 = static UTType.jpeg.getter(v32);
    v34 = UTType.identifier.getter(v33);
    v36 = v35;
    v37 = v31(v9, v0);
    *(_QWORD *)(v26 + 48) = v34;
    *(_QWORD *)(v26 + 56) = v36;
    v38 = static UTType.tiff.getter(v37);
    v39 = UTType.identifier.getter(v38);
    v41 = v40;
    v42 = v31(v6, v0);
    *(_QWORD *)(v26 + 64) = v39;
    *(_QWORD *)(v26 + 72) = v41;
    v43 = static UTType.pdf.getter(v42);
    v44 = UTType.identifier.getter(v43);
    v46 = v45;
    v31(v3, v0);
    *(_QWORD *)(v26 + 80) = v44;
    *(_QWORD *)(v26 + 88) = v46;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v26);
    objc_msgSend(v24, "setSupportedContentTypes:", isa);

    objc_msgSend(v24, "setMenuSortOrder:", 19);
    return v24;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1002F639C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;
  id v16;
  NSString v17;
  NSString v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  void **v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  void *v28;
  void *v29;
  _QWORD *v30;

  v15 = (_QWORD *)swift_allocObject(&unk_1005DC5B8, 72, 7);
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a5;
  v15[5] = a6;
  v15[6] = v7;
  v15[7] = a3;
  v15[8] = a4;
  v16 = objc_allocWithZone((Class)UIDocumentBrowserAction);
  swift_bridgeObjectRetain_n(a2, 2);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a6);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v18 = String._bridgeToObjectiveC()();
  v29 = sub_100304018;
  v30 = v15;
  v25 = _NSConcreteStackBlock;
  v26 = 1107296256;
  v27 = sub_100120C10;
  v28 = &unk_1005DC5D0;
  v19 = _Block_copy(&v25);
  v20 = objc_msgSend(v16, "initWithIdentifier:localizedTitle:unresolvedHandler:", v17, v18, v19);

  _Block_release(v19);
  swift_release(v30);
  objc_msgSend(v20, "setImage:", a7);
  objc_msgSend(v20, "setPerformActionExitsEditMode:", 1);
  objc_msgSend(v20, "setSupportsMultipleItems:", 0);
  if (UIDocumentBrowserActionAvailabilityToolbar < 2uLL)
  {
    v21 = 1;
    if (UIDocumentBrowserActionAvailabilityPreviewPanel < 2uLL)
      goto LABEL_6;
    goto LABEL_5;
  }
  v21 = UIDocumentBrowserActionAvailabilityToolbar | 1;
  if ((UIDocumentBrowserActionAvailabilityPreviewPanel & ~(UIDocumentBrowserActionAvailabilityToolbar | 1)) != 0)
LABEL_5:
    v21 |= UIDocumentBrowserActionAvailabilityPreviewPanel;
LABEL_6:
  objc_msgSend(v20, "setAvailability:", v21);
  v29 = sub_1002F70D8;
  v30 = 0;
  v25 = _NSConcreteStackBlock;
  v26 = 1107296256;
  v27 = sub_100068430;
  v28 = &unk_1005DC5F8;
  v22 = _Block_copy(&v25);
  v23 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithBlock:", v22);
  _Block_release(v22);
  swift_release(v30);
  objc_msgSend(v20, "setFilteringPredicate:", v23);

  return v20;
}

id sub_1002F660C(uint64_t a1)
{
  id result;
  void *v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  Swift::String v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  Class isa;
  Swift::String v15;

  result = (id)_DocumentManagerBundle(a1);
  if (result)
  {
    v2 = result;
    v15._countAndFlagsBits = 0xD00000000000002ALL;
    v15._object = (void *)0x80000001005260A0;
    v3._countAndFlagsBits = 1835627092;
    v3._object = (void *)0xE400000000000000;
    v4.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v4.value._object = (void *)0xEB00000000656C62;
    v5._countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, v15);

    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v7);

    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierTrim);
    v11 = v10;
    v12 = sub_1002F639C(v9, v10, v6._countAndFlagsBits, (uint64_t)v6._object, 1835627092, 0xE400000000000000, (uint64_t)v8);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v6._object);
    v13 = sub_100302700();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v13);
    objc_msgSend(v12, "setSupportedContentTypes:", isa);

    objc_msgSend(v12, "setMenuSortOrder:", 22);
    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002F679C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t All;
  char *v77;
  unint64_t v78;
  char *v79;
  void *v80;
  _BYTE v81[32];

  v75 = a6;
  v78 = a5;
  v14 = sub_10006922C(&qword_100643470);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v71 - v18;
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v79 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v77 = (char *)&v71 - v24;
  v25 = sub_10006922C(&qword_1006438A0);
  __chkstk_darwin(v25);
  v27 = (char *)&v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100069BD8(a2, (uint64_t)v81);
  v28 = type metadata accessor for DOCActionContext();
  if ((swift_dynamicCast(&v80, v81, (char *)&type metadata for Any + 8, v28, 6) & 1) != 0)
  {
    v29 = v80;
    v30 = sub_10006922C((uint64_t *)&unk_1006424B0);
    All = Array<A>.fpfs_syncFetchAllFPItems()(a1, v30);
    if (!All)
    {

      return;
    }
    v73 = v27;
    v74 = a8;
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierMarkup);
    v33 = v32;
    if (v31 == a3 && v32 == a4)
    {
      v34 = 3;
LABEL_6:
      v35 = v75;
      swift_bridgeObjectRelease(a4);
LABEL_11:
      if (qword_100640FB0 != -1)
        swift_once(&qword_100640FB0, sub_1002F57D4);
      sub_1002F59E0(v34, v78, v35, a1);
LABEL_14:
      v37 = All;
      v72 = v29;
      if ((unint64_t)All >> 62)
      {
        if (All >= 0)
          v54 = All & 0xFFFFFFFFFFFFFF8;
        else
          v54 = All;
        swift_bridgeObjectRetain(All);
        v55 = v54;
        v37 = All;
        v38 = _CocoaArrayWrapper.endIndex.getter(v55);
        if (v38)
          goto LABEL_16;
      }
      else
      {
        v38 = *(_QWORD *)((All & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(All);
        if (v38)
        {
LABEL_16:
          if (v38 < 1)
          {
            __break(1u);
            return;
          }
          v39 = 0;
          v78 = v37 & 0xC000000000000001;
          v40 = (char *)_swiftEmptyArrayStorage;
          do
          {
            if (v78)
              v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v39, v37);
            else
              v41 = *(id *)(v37 + 8 * v39 + 32);
            v42 = v41;
            v43 = objc_msgSend(v41, "fileURL");
            if (v43)
            {
              v44 = v43;
              static URL._unconditionallyBridgeFromObjectiveC(_:)(v43);

              v45 = 0;
            }
            else
            {
              v45 = 1;
            }
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v17, v45, 1, v20);
            sub_1000B34E4((uint64_t)v17, (uint64_t)v19);

            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
            {
              sub_10000CB4C((uint64_t)v19, &qword_100643470);
            }
            else
            {
              v46 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
              v47 = v77;
              v46(v77, v19, v20);
              v46(v79, v47, v20);
              if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
                v40 = (char *)sub_100153AD4(0, *((_QWORD *)v40 + 2) + 1, 1, (unint64_t)v40);
              v49 = *((_QWORD *)v40 + 2);
              v48 = *((_QWORD *)v40 + 3);
              if (v49 >= v48 >> 1)
                v40 = (char *)sub_100153AD4(v48 > 1, v49 + 1, 1, (unint64_t)v40);
              *((_QWORD *)v40 + 2) = v49 + 1;
              v46(&v40[((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(_QWORD *)(v21 + 72) * v49], v79, v20);
              v37 = All;
            }
            ++v39;
          }
          while (v38 != v39);
          goto LABEL_42;
        }
      }
      v40 = (char *)_swiftEmptyArrayStorage;
LABEL_42:
      swift_bridgeObjectRelease(v37);
      v56 = swift_allocObject(&unk_1005DC630, 32, 7);
      v57 = v37;
      v58 = v56;
      v59 = v72;
      *(_QWORD *)(v56 + 16) = v57;
      *(_QWORD *)(v56 + 24) = v59;
      v60 = sub_10006922C(&qword_10064E040);
      v61 = swift_allocObject(v60, 24, 7);
      *(_QWORD *)(v61 + 16) = v59;
      v62 = swift_allocObject(&unk_1005DC658, 32, 7);
      *(_QWORD *)(v62 + 16) = sub_100304058;
      *(_QWORD *)(v62 + 24) = v58;
      v63 = sub_10006922C(&qword_10064E048);
      v64 = swift_allocObject(v63, 32, 7);
      *(_QWORD *)(v64 + 16) = sub_10006657C;
      *(_QWORD *)(v64 + 24) = v62;
      v65 = type metadata accessor for TaskPriority(0);
      v66 = (uint64_t)v73;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v73, 1, 1, v65);
      v67 = (_QWORD *)swift_allocObject(&unk_1005DC680, 72, 7);
      v67[2] = 0;
      v67[3] = 0;
      v67[4] = v40;
      v67[5] = v61;
      v68 = v74;
      v67[6] = v64;
      v67[7] = v68;
      v67[8] = a9;
      v69 = v59;
      swift_retain();
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRetain(a9);
      v70 = sub_100174E78(v66, (uint64_t)&unk_10064E058, (uint64_t)v67);

      swift_bridgeObjectRelease(v40);
      swift_release(v58);
      swift_release(v70);
      return;
    }
    v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, a3, a4, 0);
    swift_bridgeObjectRelease(v33);
    if ((v36 & 1) != 0)
    {
      v34 = 3;
    }
    else
    {
      v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierTrim);
      v52 = v51;
      if (v50 == a3 && v51 == a4)
      {
        v34 = 4;
        goto LABEL_6;
      }
      v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, a3, a4, 0);
      swift_bridgeObjectRelease(v52);
      if ((v53 & 1) == 0)
        goto LABEL_14;
      v34 = 4;
    }
    v35 = v75;
    goto LABEL_11;
  }
}

void sub_1002F6D74(uint64_t a1, void *a2)
{
  id v4;
  Class isa;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  _QWORD v10[5];
  uint64_t v11;

  v4 = objc_msgSend((id)objc_opt_self(DOCManagedPermission), "defaultPermission");
  sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v6 = swift_allocObject(&unk_1005DC6F8, 32, 7);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v10[4] = sub_100304360;
  v11 = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_10004A82C;
  v10[3] = &unk_1005DC710;
  v7 = _Block_copy(v10);
  v8 = v11;
  swift_bridgeObjectRetain(a1);
  v9 = a2;
  swift_release(v8);
  objc_msgSend(v4, "adoptPersonaFromItems:andPerformBlock:", isa, v7);
  _Block_release(v7);

}

uint64_t sub_1002F6E94(uint64_t a1, uint64_t a2)
{
  id v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _UNKNOWN **v17;
  char *v18;
  void *v19;
  void **v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v30;
  char v31[24];
  char v32[24];
  char v33[24];

  v4 = objc_allocWithZone((Class)type metadata accessor for DOCPreviewController(0));
  v5 = (char *)DOCPreviewController.init()();
  objc_msgSend(v5, "setAppearanceActions:", 4);
  DOCPreviewController.set(_:defaultIndex:)(a1, 0, 0, 0, 1);
  v6 = *(void **)(a2 + OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController);
  ObjectType = swift_getObjectType(v6, v7);
  v9 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for DOCPreviewControllerTransitioningProvider);
  if (v9)
    v10 = v9;
  else
    v10 = 0;
  if (v9)
    v11 = v6;
  else
    v11 = 0;
  if (v11)
  {
    v12 = &v5[OBJC_IVAR____TtC5Files20DOCPreviewController_transitioningProvider];
    *((_QWORD *)v12 + 1) = v10;
    swift_unknownObjectWeakAssign(v12, v11);
  }
  v13 = type metadata accessor for DOCBrowserContainedViewController();
  v14 = swift_dynamicCastClass(v6, v13);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)(v14 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_documentManager);
    if (v16)
      v17 = &protocol witness table for DOCDocumentManager;
    else
      v17 = 0;
    v18 = &v5[OBJC_IVAR____TtC5Files20DOCPreviewController_editingDelegate];
    swift_beginAccess(&v5[OBJC_IVAR____TtC5Files20DOCPreviewController_editingDelegate], v32, 1, 0);
    *((_QWORD *)v18 + 1) = v17;
    swift_unknownObjectWeakAssign(v18, v16);
    v19 = *(void **)(v15 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration);
    v20 = (void **)&v5[OBJC_IVAR____TtC5Files20DOCPreviewController_configuration];
    swift_beginAccess(&v5[OBJC_IVAR____TtC5Files20DOCPreviewController_configuration], v31, 1, 0);
    v21 = *v20;
    *v20 = v19;
    v22 = v6;
    v23 = v19;

    v24 = *(_QWORD *)(v15 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_actionManager);
    v25 = &v5[OBJC_IVAR____TtC5Files20DOCPreviewController_actionManager];
    swift_beginAccess(&v5[OBJC_IVAR____TtC5Files20DOCPreviewController_actionManager], &v30, 1, 0);
    swift_unknownObjectWeakAssign(v25, v24);

  }
  v26 = qword_100640EB0;
  v27 = v6;
  if (v26 != -1)
    swift_once(&qword_100640EB0, sub_10021F734);
  swift_beginAccess(&static DOCPreviewRouter.shared, v33, 0, 0);
  v28 = static DOCPreviewRouter.shared;
  swift_retain();
  sub_10021F8B0(v5, 1, v27, 0, 0);

  return swift_release(v28);
}

uint64_t sub_1002F70D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  sub_1000271D4(a1, (uint64_t)&v19, &qword_100642730);
  if (!*((_QWORD *)&v20 + 1))
    goto LABEL_21;
  v1 = sub_10006922C((uint64_t *)&unk_1006444E0);
  if ((swift_dynamicCast(&v18, &v19, (char *)&type metadata for Any + 8, v1, 6) & 1) == 0)
    return 0;
  v2 = v18;
  if (*(_QWORD *)(v18 + 16) && (v3 = sub_10007EF08(0x7365646F4E636F64, 0xE800000000000000), (v4 & 1) != 0))
  {
    sub_100069BD8(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v19);
  }
  else
  {
    v19 = 0u;
    v20 = 0u;
  }
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v20 + 1))
  {
LABEL_21:
    sub_10000CB4C((uint64_t)&v19, &qword_100642730);
    return 0;
  }
  v5 = sub_10006922C((uint64_t *)&unk_100643CB0);
  result = swift_dynamicCast(&v18, &v19, (char *)&type metadata for Any + 8, v5, 6);
  if ((result & 1) == 0)
    return 0;
  v7 = v18;
  *(_QWORD *)&v19 = _swiftEmptyArrayStorage;
  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0)
      v15 = v18;
    else
      v15 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v18);
    v8 = _CocoaArrayWrapper.endIndex.getter(v15);
    result = swift_bridgeObjectRelease(v7);
    if (v8)
      goto LABEL_11;
LABEL_30:
    swift_bridgeObjectRelease(v7);
    v14 = (unint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_34;
    goto LABEL_31;
  }
  v8 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v8)
    goto LABEL_30;
LABEL_11:
  if (v8 >= 1)
  {
    for (i = 0; i != v8; ++i)
    {
      if ((v7 & 0xC000000000000001) != 0)
      {
        v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v7);
      }
      else
      {
        v10 = *(void **)(v7 + 8 * i + 32);
        swift_unknownObjectRetain(v10);
      }
      if ((objc_msgSend(v10, "isTrashed") & 1) != 0
        || (v11 = objc_msgSend(v10, "isAnyParentTrashed"), (v11 & 1) != 0))
      {
        swift_unknownObjectRelease(v10);
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        v12 = *(_QWORD *)(v19 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
        v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
        specialized ContiguousArray._endMutation()(v13);
      }
    }
    swift_bridgeObjectRelease(v7);
    v14 = v19;
    if ((v19 & 0x8000000000000000) != 0)
      goto LABEL_34;
LABEL_31:
    if ((v14 & 0x4000000000000000) == 0)
    {
      v16 = *(_QWORD *)(v14 + 16);
LABEL_33:
      swift_release(v14);
      return v16 == 1;
    }
LABEL_34:
    v17 = swift_bridgeObjectRetain(v14);
    v16 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_release(v14);
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002F7354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  return swift_task_switch(sub_1002F7374, 0, 0);
}

uint64_t sub_1002F7374()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[2];
  v2 = swift_task_alloc(32);
  v0[7] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[8] = v3;
  *v3 = v0;
  v3[1] = sub_1002F7410;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 10, &type metadata for Bool, &type metadata for Bool, 0, 0, &unk_10064E068, v2, &type metadata for Bool);
}

uint64_t sub_1002F7410()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1002F746C, 0, 0);
}

uint64_t sub_1002F746C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v0 + 81) = *(_BYTE *)(v0 + 80);
  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 72) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1002F74DC, v2, v3);
}

uint64_t sub_1002F74DC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_BYTE *)(v0 + 81);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 72));
  sub_1002F7D90(v5, v4, v1, v3, v2);
  return swift_task_switch(sub_1002F7550, 0, 0);
}

uint64_t sub_1002F7550()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002F7558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3[10] = a2;
  v3[11] = a3;
  v3[9] = a1;
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_10006922C(&qword_1006438A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[12] = swift_task_alloc(v4);
  v3[13] = swift_task_alloc(v4);
  v5 = type metadata accessor for URL(0);
  v3[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[15] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[16] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[17] = swift_task_alloc(v8);
  v3[18] = swift_task_alloc(v8);
  v9 = sub_10006922C(&qword_100643470);
  v3[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002F7628, 0, 0);
}

uint64_t sub_1002F7628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD, uint64_t, uint64_t, _QWORD);
  _QWORD *v40;
  uint64_t v41;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_QWORD, _QWORD, _QWORD);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 120);
    v4 = *(unsigned __int8 *)(v3 + 80);
    v5 = (v4 + 32) & ~v4;
    v6 = v1 + v5;
    v48 = *(_QWORD *)(v3 + 72);
    v49 = v5;
    v7 = *(void (**)(_QWORD, _QWORD, _QWORD))(v3 + 16);
    v46 = v5 + *(_QWORD *)(v0 + 128);
    v45 = v4 | 7;
    swift_bridgeObjectRetain(v1);
    v44 = v3;
    v47 = v7;
    while (1)
    {
      v12 = *(_QWORD *)(v0 + 152);
      v13 = *(_QWORD *)(v0 + 112);
      v7(v12, v6, v13);
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v14(v12, 0, 1, v13);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v12, 1, v13) == 1)
        break;
      v43 = v14;
      v50 = v6;
      v51 = v2;
      v15 = *(_QWORD *)(v0 + 144);
      v16 = *(_QWORD *)(v0 + 136);
      v18 = *(_QWORD *)(v0 + 104);
      v17 = *(_QWORD *)(v0 + 112);
      v52 = *(_QWORD *)(v0 + 96);
      v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
      v20 = v19(v15, *(_QWORD *)(v0 + 152), v17);
      static TaskPriority.userInitiated.getter(v20);
      v21 = type metadata accessor for TaskPriority(0);
      v22 = *(_QWORD *)(v21 - 8);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
      v7(v16, v15, v17);
      v23 = swift_allocObject(&unk_1005DC6A8, v46, v45);
      *(_QWORD *)(v23 + 16) = 0;
      v24 = (_QWORD *)(v23 + 16);
      *(_QWORD *)(v23 + 24) = 0;
      v19(v23 + v49, v16, v17);
      sub_1000271D4(v18, v52, &qword_1006438A0);
      v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v52, 1, v21);
      v27 = *(_QWORD *)(v0 + 96);
      if (v25 == 1)
      {
        sub_10000CB4C(*(_QWORD *)(v0 + 96), &qword_1006438A0);
        v28 = 0;
      }
      else
      {
        v29 = TaskPriority.rawValue.getter(v26);
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v27, v21);
        v28 = v29;
      }
      v30 = *v24;
      if (*v24)
      {
        v31 = *(_QWORD *)(v23 + 24);
        ObjectType = swift_getObjectType(*v24);
        swift_unknownObjectRetain(v30);
        v33 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v31);
        v35 = v34;
        swift_unknownObjectRelease(v30);
      }
      else
      {
        v33 = 0;
        v35 = 0;
      }
      v36 = **(_QWORD **)(v0 + 80);
      v37 = swift_allocObject(&unk_1005DC6D0, 32, 7);
      *(_QWORD *)(v37 + 16) = &unk_10064E080;
      *(_QWORD *)(v37 + 24) = v23;
      v38 = v35 | v33;
      if (v35 | v33)
      {
        v38 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = v33;
        *(_QWORD *)(v0 + 40) = v35;
      }
      v3 = v44;
      v8 = *(_QWORD *)(v0 + 144);
      v10 = *(_QWORD *)(v0 + 104);
      v9 = *(_QWORD *)(v0 + 112);
      *(_QWORD *)(v0 + 48) = 1;
      *(_QWORD *)(v0 + 56) = v38;
      *(_QWORD *)(v0 + 64) = v36;
      v11 = swift_task_create(v28 | 0x3100, v0 + 48, &type metadata for Bool, &unk_10064E090, v37);
      swift_release(v11);
      sub_10000CB4C(v10, &qword_1006438A0);
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v8, v9);
      v7 = v47;
      v6 = v50 + v48;
      v2 = v51 - 1;
      if (v51 == 1)
      {
        v43(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 112));
        break;
      }
    }
  }
  else
  {
    v39 = *(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 56);
    swift_bridgeObjectRetain(v1);
    v39(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 112));
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  v40 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.next(isolation:)[1]);
  *(_QWORD *)(v0 + 160) = v40;
  v41 = sub_10006922C(&qword_10064E070);
  *v40 = v0;
  v40[1] = sub_1002F7998;
  return TaskGroup.next(isolation:)(v0 + 168, 0, 0, v41);
}

uint64_t sub_1002F7998()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 160));
  return swift_task_switch(sub_1002F79EC, 0, 0);
}

uint64_t sub_1002F79EC()
{
  uint64_t v0;
  int v1;
  char v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(unsigned __int8 *)(v0 + 168);
  if (v1 == 2)
  {
    TaskGroup.cancelAll()();
    v2 = 0;
  }
  else
  {
    if ((v1 & 1) == 0)
    {
      v3 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.next(isolation:)[1]);
      *(_QWORD *)(v0 + 160) = v3;
      v4 = sub_10006922C(&qword_10064E070);
      *v3 = v0;
      v3[1] = sub_1002F7998;
      return TaskGroup.next(isolation:)(v0 + 168, 0, 0, v4);
    }
    v2 = 1;
  }
  v7 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 104);
  **(_BYTE **)(v0 + 72) = v2;
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002F7AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[5] = a1;
  v4[6] = a4;
  v5 = type metadata accessor for URL(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002F7B44, 0, 0);
}

uint64_t sub_1002F7B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  id v8;
  NSURL *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;

  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 72);
    **(_BYTE **)(v0 + 40) = 0;
    swift_task_dealloc(v1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v3, *(_QWORD *)(v0 + 48), v5);
    v6 = type metadata accessor for DOCAssetMetadataFetcher();
    inited = swift_initStackObject(v6, v0 + 16);
    *(_QWORD *)(v0 + 80) = inited;
    v8 = objc_allocWithZone((Class)AVURLAsset);
    URL._bridgeToObjectiveC()(v9);
    v11 = v10;
    v12 = objc_msgSend(v8, "initWithURL:options:", v10, 0);

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    *(_QWORD *)(inited + 16) = v12;
    sub_10006922C((uint64_t *)&unk_10064E098);
    v13 = static AVPartialAsyncProperty<A>.hasProtectedContent.getter();
    *(_QWORD *)(v0 + 88) = v13;
    v14 = (_QWORD *)swift_task_alloc(async function pointer to AVAsynchronousKeyValueLoading.load<A>(_:)[1]);
    *(_QWORD *)(v0 + 96) = v14;
    *v14 = v0;
    v14[1] = sub_1002F7C90;
    return AVAsynchronousKeyValueLoading.load<A>(_:)(v0 + 104, v13);
  }
}

uint64_t sub_1002F7C90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 96));
  v3 = *(_QWORD *)(v2 + 88);
  if (v0)
  {
    swift_errorRelease(v0);
    swift_release(v3);
    v4 = sub_1002F7D50;
  }
  else
  {
    swift_release(v3);
    v4 = sub_1002F7D0C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002F7D0C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 72);
  **(_BYTE **)(v0 + 40) = *(_BYTE *)(v0 + 104);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002F7D50()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 72);
  **(_BYTE **)(v0 + 40) = 0;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1002F7D90(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  char *v8;
  id v9;
  void *v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  Swift::String v22;
  Swift::String_optional v23;
  Swift::String v24;
  void *object;
  NSString v26;
  NSString v27;
  id v28;
  uint64_t v29;
  id v30;
  void *v31;
  Swift::String v32;
  Swift::String_optional v33;
  Swift::String v34;
  void *v35;
  NSString v36;
  id v37;
  id v38;
  uint64_t v39;
  void (*v40)(__n128);
  id v41;
  __n128 v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;

  v5 = *(void **)(a1 + 16);
  if ((a3 & 1) == 0)
  {
    v40 = *(void (**)(__n128))(a2 + 16);
    v39 = *(_QWORD *)(a2 + 24);
    v41 = v5;
    v42 = swift_retain();
    v40(v42);

    swift_release(v39);
    return;
  }
  v8 = v5;
  v9 = (id)_DocumentManagerBundle(v8);
  if (v9)
  {
    v10 = v9;
    v43._countAndFlagsBits = 0xD00000000000004ALL;
    v43._object = (void *)0x80000001005260F0;
    v11._countAndFlagsBits = 0x7420656C62616E55;
    v11._object = (void *)0xEC0000004025206FLL;
    v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v12.value._object = (void *)0xEB00000000656C62;
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v43);

    v15 = sub_10006922C((uint64_t *)&unk_100644560);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_1004D9670;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_10006A638();
    *(_QWORD *)(v16 + 32) = a4;
    *(_QWORD *)(v16 + 40) = a5;
    swift_bridgeObjectRetain(a5);
    String.init(format:_:)(v14._countAndFlagsBits, v14._object, v16);
    v18 = v17;
    swift_bridgeObjectRelease(v14._object);
    v20 = (id)_DocumentManagerBundle(v19);
    if (v20)
    {
      v21 = v20;
      v44._countAndFlagsBits = 0xD000000000000056;
      v44._object = (void *)0x8000000100526180;
      v22._object = (void *)0x8000000100526140;
      v22._countAndFlagsBits = 0xD000000000000034;
      v23.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v23.value._object = (void *)0xEB00000000656C62;
      v24._countAndFlagsBits = 0;
      v24._object = (void *)0xE000000000000000;
      object = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, v23, (NSBundle)v21, v24, v44)._object;

      v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v18);
      v27 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(object);
      v28 = objc_msgSend((id)objc_opt_self(DOCAlertController), "alertControllerWithTitle:message:preferredStyle:", v26, v27, 1);

      v30 = (id)_DocumentManagerBundle(v29);
      if (v30)
      {
        v31 = v30;
        v45._object = (void *)0xE200000000000000;
        v32._countAndFlagsBits = 19279;
        v32._object = (void *)0xE200000000000000;
        v33.value._countAndFlagsBits = 0x617A696C61636F4CLL;
        v33.value._object = (void *)0xEB00000000656C62;
        v34._countAndFlagsBits = 0;
        v34._object = (void *)0xE000000000000000;
        v45._countAndFlagsBits = 19279;
        v35 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, v33, (NSBundle)v31, v34, v45)._object;

        v36 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v35);
        v37 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v36, 0, 0);

        objc_msgSend(v28, "addAction:", v37);
        v38 = *(id *)&v8[OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController];
        objc_msgSend(v38, "presentViewController:animated:completion:", v28, 1, 0);

        return;
      }
      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_9:
  __break(1u);
}

void sub_1002F80F0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  char *v11;
  id v12;
  __n128 v13;
  void *v14;
  _BYTE v15[32];

  sub_100069BD8(a2, (uint64_t)v15);
  v7 = type metadata accessor for DOCActionContext();
  if ((swift_dynamicCast(&v14, v15, (char *)&type metadata for Any + 8, v7, 6) & 1) != 0)
  {
    v8 = v14;
    if (qword_100640FB0 != -1)
      swift_once(&qword_100640FB0, sub_1002F57D4);
    sub_1002F59E0(6, 0x73736572706D6F43, 0xE800000000000000, a1);
    v9 = swift_allocObject(&unk_1005DBEB0, 33, 7);
    *(_QWORD *)(v9 + 16) = a1;
    *(_QWORD *)(v9 + 24) = v8;
    v10 = a3 & 1;
    *(_BYTE *)(v9 + 32) = v10;
    if (a4)
    {
      swift_unknownObjectRetain_n(a4, 2);
      swift_bridgeObjectRetain(a1);
      v11 = v8;
      sub_1002F826C(a4, a1, v11, v10);
      swift_unknownObjectRelease_n(a4, 2);
      swift_release(v9);

    }
    else
    {
      swift_retain();
      swift_bridgeObjectRetain(a1);
      v12 = v8;
      sub_10012680C(a1, (uint64_t)sub_100301140, v9);

      swift_release_n(v9, 2, v13);
    }
  }
}

void sub_1002F826C(uint64_t a1, uint64_t a2, char *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t ObjectType;
  void *v17;
  uint64_t v18;
  uint64_t All;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t i;
  unint64_t v24;
  unint64_t v25;
  void **v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  int v38;
  char *v39;
  id v40;
  uint64_t v41;
  _QWORD *v42;

  v8 = type metadata accessor for DOCOperationItem(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (void **)((char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v15 = (uint64_t *)((char *)&v37 - v14);
  if (a1)
  {
    ObjectType = swift_getObjectType(a1, v13);
    swift_unknownObjectRetain(a1);
    v17 = (void *)DOCNode.fpfs_syncFetchFPItem()(ObjectType);
    if (!v17)
    {
      swift_unknownObjectRelease(a1);
      return;
    }
    v40 = v17;
    v18 = sub_10006922C((uint64_t *)&unk_1006424B0);
    All = Array<A>.fpfs_syncFetchAllFPItems()(a2, v18);
    if (!All)
    {
      swift_unknownObjectRelease(a1);

      return;
    }
    v38 = a4;
    v39 = a3;
    v41 = All;
    if ((unint64_t)All >> 62)
    {
      if (All >= 0)
        All &= 0xFFFFFFFFFFFFFF8uLL;
      v20 = _CocoaArrayWrapper.endIndex.getter(All);
      if (v20)
        goto LABEL_6;
    }
    else
    {
      v20 = *(_QWORD *)((All & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v20)
      {
LABEL_6:
        v42 = _swiftEmptyArrayStorage;
        sub_100155054(0, v20 & ~(v20 >> 63), 0);
        if (v20 < 0)
        {
          __break(1u);
          return;
        }
        v37 = a1;
        v21 = v41;
        v22 = v42;
        if ((v41 & 0xC000000000000001) != 0)
        {
          for (i = 0; i != v20; ++i)
          {
            *v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v21);
            swift_storeEnumTagMultiPayload(v15, v8, 1);
            v42 = v22;
            v25 = v22[2];
            v24 = v22[3];
            if (v25 >= v24 >> 1)
            {
              sub_100155054(v24 > 1, v25 + 1, 1);
              v21 = v41;
              v22 = v42;
            }
            v22[2] = v25 + 1;
            sub_1000E2AB4((uint64_t)v15, (uint64_t)v22+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v25);
          }
        }
        else
        {
          v26 = (void **)(v41 + 32);
          do
          {
            v27 = *v26;
            *v12 = *v26;
            swift_storeEnumTagMultiPayload(v12, v8, 1);
            v42 = v22;
            v28 = v22[2];
            v29 = v22[3];
            v30 = v27;
            if (v28 >= v29 >> 1)
            {
              sub_100155054(v29 > 1, v28 + 1, 1);
              v22 = v42;
            }
            v22[2] = v28 + 1;
            sub_1000E2AB4((uint64_t)v12, (uint64_t)v22+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v28);
            ++v26;
            --v20;
            v21 = v41;
          }
          while (v20);
        }
        swift_bridgeObjectRelease(v21);
        a1 = v37;
        goto LABEL_24;
      }
    }
    swift_bridgeObjectRelease(v41);
    v22 = _swiftEmptyArrayStorage;
LABEL_24:
    v31 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
    v32 = v39;
    v33 = *(_QWORD *)&v39[OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController];
    v34 = swift_allocObject(&unk_1005DBED8, 33, 7);
    *(_QWORD *)(v34 + 16) = v40;
    *(_QWORD *)(v34 + 24) = v32;
    *(_BYTE *)(v34 + 32) = v38 & 1;
    v35 = v40;
    v36 = v32;
    sub_100477E1C(6, (uint64_t)v22, (uint64_t)v40, 0, 0, 1, v33, (uint64_t)sub_100303AF4, v34);
    swift_unknownObjectRelease(a1);
    swift_bridgeObjectRelease(v22);

    swift_release(v34);
  }
}

void sub_1002F8618(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  _QWORD aBlock[5];
  _QWORD *v26;

  if (a1)
  {
    v8 = a1 & 0xFFFFFFFFFFFFFF8;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 >= 0)
        v23 = a1 & 0xFFFFFFFFFFFFFF8;
      else
        v23 = a1;
      swift_bridgeObjectRetain(a1);
      if (_CocoaArrayWrapper.endIndex.getter(v23))
      {
LABEL_4:
        if ((a1 & 0xC000000000000001) != 0)
        {
          v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
        }
        else
        {
          if (!*(_QWORD *)(v8 + 16))
          {
            __break(1u);
            return;
          }
          v10 = *(id *)(a1 + 32);
        }
        v24 = v10;
        swift_bridgeObjectRelease(a1);
        if ((a4 & 1) != 0)
        {
          v11 = *(_QWORD *)(a3 + OBJC_IVAR____TtC5Files16DOCActionContext_actionReporting);
          if (v11)
          {
            v12 = (void *)objc_opt_self(DOCTabbedBrowserViewController);
            v13 = *(void **)(a3 + OBJC_IVAR____TtC5Files16DOCActionContext_configuration);
            v14 = a2;
            swift_unknownObjectRetain(v11);
            v15 = objc_msgSend(v13, "sceneIdentifier");
            v16 = objc_msgSend(v12, "globalTabbedBrowserControllerForIdentifier:", v15);

            if (v16)
            {
              v17 = (_QWORD *)swift_allocObject(&unk_1005DBF00, 64, 7);
              v17[2] = v16;
              v17[3] = v14;
              v17[4] = v11;
              v17[5] = v24;
              v17[6] = 0;
              v17[7] = 0;
              aBlock[4] = sub_100303C78;
              v26 = v17;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256;
              aBlock[2] = sub_10004A82C;
              aBlock[3] = &unk_1005DBF18;
              v18 = _Block_copy(aBlock);
              v19 = v26;
              v20 = v14;
              swift_unknownObjectRetain(v11);
              v21 = v16;
              v22 = v24;
              swift_release(v19);
              DOCRunInMainThread(v18);
              _Block_release(v18);

              swift_unknownObjectRelease(v11);
            }
            else
            {

              swift_unknownObjectRelease(v11);
            }
            return;
          }
        }
        else
        {
          sub_100303B00((uint64_t)v24, a3, 0, 0);
        }

        return;
      }
    }
    else
    {
      v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (v9)
        goto LABEL_4;
    }
    swift_bridgeObjectRelease(a1);
  }
}

void sub_1002F888C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  char *v11;
  id v12;
  __n128 v13;
  void *v14;
  _BYTE v15[32];

  sub_100069BD8(a2, (uint64_t)v15);
  v7 = type metadata accessor for DOCActionContext();
  if ((swift_dynamicCast(&v14, v15, (char *)&type metadata for Any + 8, v7, 6) & 1) != 0)
  {
    v8 = v14;
    v9 = swift_allocObject(&unk_1005DC090, 33, 7);
    *(_QWORD *)(v9 + 16) = a1;
    *(_QWORD *)(v9 + 24) = v8;
    v10 = a3 & 1;
    *(_BYTE *)(v9 + 32) = v10;
    if (a4)
    {
      swift_unknownObjectRetain_n(a4, 2);
      swift_bridgeObjectRetain(a1);
      v11 = v8;
      sub_1002F89B8(a4, a1, v11, v10);
      swift_unknownObjectRelease_n(a4, 2);
      swift_release(v9);

    }
    else
    {
      swift_retain();
      swift_bridgeObjectRetain(a1);
      v12 = v8;
      sub_100127650(a1, (uint64_t)sub_100303DAC, v9);

      swift_release_n(v9, 2, v13);
    }
  }
}

void sub_1002F89B8(uint64_t a1, uint64_t a2, char *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t ObjectType;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void **v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t All;
  id v58;
  _QWORD *v59;

  v8 = type metadata accessor for DOCOperationItem(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (void **)((char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v49 - v14;
  v16 = __chkstk_darwin(v13);
  v19 = (uint64_t *)((char *)&v49 - v18);
  if (a1)
  {
    v56 = v16;
    ObjectType = swift_getObjectType(a1, v17);
    swift_unknownObjectRetain(a1);
    v21 = (void *)DOCNode.fpfs_syncFetchFPItem()(ObjectType);
    if (!v21)
    {
      swift_unknownObjectRelease(a1);
      return;
    }
    v58 = v21;
    v22 = sub_10006922C((uint64_t *)&unk_1006424B0);
    All = Array<A>.fpfs_syncFetchAllFPItems()(a2, v22);
    if (!All)
    {
      swift_unknownObjectRelease(a1);

      return;
    }
    if (qword_100640FB0 != -1)
      swift_once(&qword_100640FB0, sub_1002F57D4);
    v50 = a1;
    sub_1002F59E0(7, 0x6572706D6F636E55, 0xEA00000000007373, a2);
    if ((unint64_t)All >> 62)
    {
      v47 = All;
      if (All >= 0)
        v48 = All & 0xFFFFFFFFFFFFFF8;
      else
        v48 = All;
      swift_bridgeObjectRetain(All);
      v23 = _CocoaArrayWrapper.endIndex.getter(v48);
      swift_bridgeObjectRelease(v47);
      v52 = a4;
      if (v23)
      {
LABEL_8:
        v59 = _swiftEmptyArrayStorage;
        sub_100155054(0, v23 & ~(v23 >> 63), 0);
        if (v23 < 0)
        {
          __break(1u);
          return;
        }
        v55 = a3;
        v24 = v59;
        v25 = v56;
        if ((All & 0xC000000000000001) != 0)
        {
          v26 = 0;
          v27 = All;
          do
          {
            *v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v27);
            swift_storeEnumTagMultiPayload(v19, v25, 1);
            v59 = v24;
            v29 = v24[2];
            v28 = v24[3];
            if (v29 >= v28 >> 1)
            {
              sub_100155054(v28 > 1, v29 + 1, 1);
              v25 = v56;
              v24 = v59;
            }
            ++v26;
            v24[2] = v29 + 1;
            sub_1000E2AB4((uint64_t)v19, (uint64_t)v24+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v29);
          }
          while (v23 != v26);
        }
        else
        {
          v30 = (void **)(All + 32);
          do
          {
            v31 = *v30;
            *v12 = *v30;
            swift_storeEnumTagMultiPayload(v12, v25, 1);
            v59 = v24;
            v33 = v24[2];
            v32 = v24[3];
            v34 = v31;
            if (v33 >= v32 >> 1)
            {
              sub_100155054(v32 > 1, v33 + 1, 1);
              v24 = v59;
            }
            v24[2] = v33 + 1;
            sub_1000E2AB4((uint64_t)v12, (uint64_t)v24+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v33);
            ++v30;
            --v23;
            v25 = v56;
            v27 = All;
          }
          while (v23);
        }
        swift_bridgeObjectRelease(v27);
        a3 = v55;
        v35 = v24[2];
        if (v35)
          goto LABEL_22;
        goto LABEL_30;
      }
    }
    else
    {
      v23 = *(_QWORD *)((All & 0xFFFFFFFFFFFFFF8) + 0x10);
      v52 = a4;
      if (v23)
        goto LABEL_8;
    }
    swift_bridgeObjectRelease(All);
    v24 = _swiftEmptyArrayStorage;
    v35 = _swiftEmptyArrayStorage[2];
    if (v35)
    {
LABEL_22:
      All = objc_opt_self(FPItemManager);
      v36 = *(_QWORD *)&a3[OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController];
      v37 = *(unsigned __int8 *)(v9 + 80);
      v38 = (v37 + 32) & ~v37;
      v39 = a3;
      v40 = (uint64_t)v24 + v38;
      v55 = *(char **)(v9 + 72);
      v56 = v36;
      v53 = v37 | 7;
      v54 = &v55[v38];
      v52 &= 1u;
      v51 = xmmword_1004D9670;
      do
      {
        sub_100303DB8(v40, (uint64_t)v15);
        v41 = objc_msgSend((id)All, "defaultManager");
        v42 = sub_10006922C(&qword_100646C60);
        v43 = swift_allocObject(v42, v54, v53);
        *(_OWORD *)(v43 + 16) = v51;
        sub_100303DB8((uint64_t)v15, v43 + v38);
        v44 = swift_allocObject(&unk_1005DC0B8, 33, 7);
        *(_QWORD *)(v44 + 16) = v58;
        *(_QWORD *)(v44 + 24) = v39;
        *(_BYTE *)(v44 + 32) = v52;
        v45 = v58;
        v46 = v39;
        sub_100477E1C(7, v43, (uint64_t)v58, 0, 0, 1, v56, (uint64_t)sub_100303DFC, v44);

        swift_bridgeObjectRelease(v43);
        swift_release(v44);
        sub_100303E08((uint64_t)v15);
        v40 += (uint64_t)v55;
        --v35;
      }
      while (v35);

      goto LABEL_31;
    }
LABEL_30:

LABEL_31:
    swift_bridgeObjectRelease(v24);
    swift_unknownObjectRelease(v50);
  }
}

void sub_1002F8EB0(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  _QWORD aBlock[5];
  _QWORD *v26;

  if (a1)
  {
    v8 = a1 & 0xFFFFFFFFFFFFFF8;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 >= 0)
        v23 = a1 & 0xFFFFFFFFFFFFFF8;
      else
        v23 = a1;
      swift_bridgeObjectRetain(a1);
      if (_CocoaArrayWrapper.endIndex.getter(v23))
      {
LABEL_4:
        if ((a1 & 0xC000000000000001) != 0)
        {
          v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
        }
        else
        {
          if (!*(_QWORD *)(v8 + 16))
          {
            __break(1u);
            return;
          }
          v10 = *(id *)(a1 + 32);
        }
        v24 = v10;
        swift_bridgeObjectRelease(a1);
        if ((a4 & 1) != 0)
        {
          v11 = *(_QWORD *)(a3 + OBJC_IVAR____TtC5Files16DOCActionContext_actionReporting);
          if (v11)
          {
            v12 = (void *)objc_opt_self(DOCTabbedBrowserViewController);
            v13 = *(void **)(a3 + OBJC_IVAR____TtC5Files16DOCActionContext_configuration);
            v14 = a2;
            swift_unknownObjectRetain(v11);
            v15 = objc_msgSend(v13, "sceneIdentifier");
            v16 = objc_msgSend(v12, "globalTabbedBrowserControllerForIdentifier:", v15);

            if (v16)
            {
              v17 = (_QWORD *)swift_allocObject(&unk_1005DC0E0, 64, 7);
              v17[2] = v16;
              v17[3] = v14;
              v17[4] = v11;
              v17[5] = v24;
              v17[6] = 0;
              v17[7] = 0;
              aBlock[4] = sub_100303C78;
              v26 = v17;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256;
              aBlock[2] = sub_10004A82C;
              aBlock[3] = &unk_1005DC0F8;
              v18 = _Block_copy(aBlock);
              v19 = v26;
              v20 = v14;
              swift_unknownObjectRetain(v11);
              v21 = v16;
              v22 = v24;
              swift_release(v19);
              DOCRunInMainThread(v18);
              _Block_release(v18);

              swift_unknownObjectRelease(v11);
            }
            else
            {

              swift_unknownObjectRelease(v11);
            }
            return;
          }
        }
        else
        {
          sub_100303B00((uint64_t)v24, a3, 0, 0);
        }

        return;
      }
    }
    else
    {
      v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (v9)
        goto LABEL_4;
    }
    swift_bridgeObjectRelease(a1);
  }
}

void sub_1002F9124(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t All;
  uint64_t v6;
  id v7;
  Class isa;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  _QWORD v15[5];
  uint64_t v16;
  _OWORD v17[2];

  v4 = sub_10006922C((uint64_t *)&unk_1006424B0);
  All = Array<A>.fpfs_syncFetchAllFPItems()(a1, v4);
  if (All)
  {
    v6 = All;
    v7 = objc_allocWithZone((Class)FPEvictOperation);
    sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    swift_bridgeObjectRetain(v6);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v6);
    v9 = objc_msgSend(v7, "initWithItems:", isa);

    sub_100069BD8(a2, (uint64_t)v17);
    v10 = swift_allocObject(&unk_1005DC180, 56, 7);
    sub_100079B28(v17, (_OWORD *)(v10 + 16));
    *(_QWORD *)(v10 + 48) = v6;
    v15[4] = sub_100303E74;
    v16 = v10;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    v15[2] = sub_10015936C;
    v15[3] = &unk_1005DC198;
    v11 = _Block_copy(v15);
    v12 = v16;
    v13 = v9;
    swift_release(v12);
    objc_msgSend(v13, "setActionCompletionBlock:", v11);
    _Block_release(v11);

    v14 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
    objc_msgSend(v14, "scheduleAction:", v13);

  }
}

void sub_1002F92C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  char v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  id v38;
  void *v39;
  Swift::String v40;
  Swift::String_optional v41;
  Swift::String v42;
  void *v43;
  uint64_t v44;
  objc_class *v45;
  objc_class *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  NSBundle v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  NSString v56;
  NSString v57;
  id v58;
  uint64_t v59;
  id v60;
  void *v61;
  Swift::String v62;
  Swift::String_optional v63;
  Swift::String v64;
  void *object;
  NSString v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  id v72;
  void *v73;
  _QWORD *v74;
  void *v75;
  _QWORD *v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  id v81;
  void *v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String_optional v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  id v94;
  void *v95;
  uint64_t v96;
  id v97;
  void *v98;
  Swift::String v99;
  Swift::String v100;
  Swift::String_optional v101;
  Swift::String v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  objc_class *v112;
  unint64_t v113;
  uint64_t v114;
  void *v115;
  void *v116;
  void *v117;
  __int128 aBlock;
  __int128 v119;
  id (*v120)();
  _QWORD *v121;
  Swift::String v122;
  Swift::String v123;
  Swift::String v124;
  Swift::String v125;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1
    || (*(_QWORD *)&aBlock = a1,
        swift_errorRetain(a1),
        v12 = sub_10006922C((uint64_t *)&unk_100643490),
        v13 = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr),
        v9 = swift_dynamicCast(&v116, &aBlock, v12, v13, 6),
        (v9 & 1) == 0))
  {
    v24 = Logger.UI.unsafeMutableAddressor(v9);
    v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v24, v7);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Remove Download completed successfully", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return;
  }
  v14 = v116;
  sub_100069BD8(a2, (uint64_t)&aBlock);
  v15 = type metadata accessor for DOCActionContext();
  if ((swift_dynamicCast(&v116, &aBlock, (char *)&type metadata for Any + 8, v15, 6) & 1) == 0)
  {

    return;
  }
  v16 = v116;
  v17 = objc_msgSend(v14, "domain");
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
  v23 = v21;
  if (v18 == v22 && v20 == v21)
  {
    swift_bridgeObjectRelease_n(v20, 2);
  }
  else
  {
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v22, v21, 0);
    swift_bridgeObjectRelease(v20);
    v30 = (id)swift_bridgeObjectRelease(v23);
    if ((v29 & 1) == 0)
      goto LABEL_17;
  }
  v30 = objc_msgSend(v14, "code");
  if (v30 == (id)16)
  {
    v31 = objc_msgSend(v14, "userInfo");
    v32 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v31, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    v35 = v34;
    if (*(_QWORD *)(v32 + 16) && (v36 = sub_10007EF08(v33, v34), (v37 & 1) != 0))
    {
      sub_100069BD8(*(_QWORD *)(v32 + 56) + 32 * v36, (uint64_t)&aBlock);
    }
    else
    {
      aBlock = 0u;
      v119 = 0u;
    }
    v3 = (id)0xD00000000000001ALL;
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v32);
    if (*((_QWORD *)&v119 + 1))
    {
      v80 = swift_dynamicCast(&v116, &aBlock, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      if ((_DWORD)v80)
      {
        v43 = v117;
LABEL_37:
        v86 = objc_msgSend(v14, "userInfo");
        v87 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v86, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

        v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureErrorKey);
        v90 = v89;
        if (*(_QWORD *)(v87 + 16) && (v91 = sub_10007EF08(v88, v89), (v92 & 1) != 0))
        {
          sub_100069BD8(*(_QWORD *)(v87 + 56) + 32 * v91, (uint64_t)&aBlock);
        }
        else
        {
          aBlock = 0u;
          v119 = 0u;
        }
        swift_bridgeObjectRelease(v90);
        swift_bridgeObjectRelease(v87);
        if (*((_QWORD *)&v119 + 1))
        {
          v93 = swift_dynamicCast(&v116, &aBlock, (char *)&type metadata for Any + 8, &type metadata for String, 6);
          if ((_DWORD)v93)
          {
            v55 = v117;
            while (1)
            {
              while (1)
              {
                v56 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease(v43);
                v57 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease(v55);
                v58 = objc_msgSend((id)objc_opt_self(DOCAlertController), "alertControllerWithTitle:message:preferredStyle:", v56, v57, 1);

                v60 = (id)_DocumentManagerBundle(v59);
                if (!v60)
                  goto LABEL_72;
                v61 = v60;
                v123._object = (void *)0xE200000000000000;
                v62._countAndFlagsBits = 19279;
                v62._object = (void *)0xE200000000000000;
                v63.value._countAndFlagsBits = 0x617A696C61636F4CLL;
                v63.value._object = (void *)0xEB00000000656C62;
                v64._countAndFlagsBits = 0;
                v64._object = (void *)0xE000000000000000;
                v123._countAndFlagsBits = 19279;
                object = NSLocalizedString(_:tableName:bundle:value:comment:)(v62, v63, (NSBundle)v61, v64, v123)._object;

                v66 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease(object);
                v67 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v66, 0, 0);

                objc_msgSend(v58, "addAction:", v67);
                v68 = v58;
                v69 = objc_msgSend(v68, "actions");
                v70 = sub_10004F2F0(0, &qword_1006572A0, UIAlertAction_ptr);
                a3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v69, v70);

                if ((unint64_t)a3 >> 62)
                {
                  if (a3 < 0)
                    v109 = a3;
                  else
                    v109 = a3 & 0xFFFFFFFFFFFFFF8;
                  swift_bridgeObjectRetain(a3);
                  v43 = (void *)_CocoaArrayWrapper.endIndex.getter(v109);
                  swift_bridgeObjectRelease(a3);
                  if (!v43)
                  {
LABEL_57:
                    v71 = swift_bridgeObjectRelease(a3);
                    __break(1u);
LABEL_58:
                    __break(1u);
LABEL_59:
                    v72 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v71, a3);
LABEL_29:
                    v73 = v72;
                    swift_bridgeObjectRelease(a3);
                    objc_msgSend(v68, "setPreferredAction:", v73);

                    v74 = (_QWORD *)swift_allocObject(&unk_1005DC1D0, 40, 7);
                    v74[2] = v14;
                    v74[3] = v16;
                    v74[4] = v68;
                    v120 = sub_100303E84;
                    v121 = v74;
                    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
                    *((_QWORD *)&aBlock + 1) = 1107296256;
                    *(_QWORD *)&v119 = sub_10004A82C;
                    *((_QWORD *)&v119 + 1) = &unk_1005DC1E8;
                    v75 = _Block_copy(&aBlock);
                    v76 = v121;
                    v77 = v68;
                    v78 = v14;
                    v79 = v16;
                    swift_release(v76);
                    DOCRunInMainThread(v75);

                    _Block_release(v75);
                    return;
                  }
                }
                else
                {
                  v43 = *(void **)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
                  if (!v43)
                    goto LABEL_57;
                }
                v71 = (unint64_t)v43 - 1;
                if (__OFSUB__(v43, 1))
                  goto LABEL_58;
                if ((a3 & 0xC000000000000001) != 0)
                  goto LABEL_59;
                if ((v71 & 0x8000000000000000) != 0)
                {
                  __break(1u);
                }
                else if (v71 < *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
                {
                  v72 = *(id *)(a3 + 8 * v71 + 32);
                  goto LABEL_29;
                }
                __break(1u);
LABEL_62:
                v110 = a3 < 0 ? a3 : a3 & 0xFFFFFFFFFFFFFF8;
                swift_bridgeObjectRetain(a3);
                v111 = _CocoaArrayWrapper.endIndex.getter(v110);
                v93 = swift_bridgeObjectRelease(a3);
                if (v111 == 1)
                  break;
LABEL_68:
                v112 = (objc_class *)(id)_DocumentManagerBundle(v93);
                if (!v112)
                  goto LABEL_77;
                v46 = v112;
                v53 = (unint64_t)v3 + 29;
                v49 = (unint64_t)v3 + 45;
                v47 = (unint64_t)v3 + 92;
                v113 = 0x8000000100525800;
                v48 = 0x8000000100525770;
                v54 = 0x80000001005257C0;
                v50 = 0x617A696C61636F4CLL;
                v51 = 0xEB00000000656C62;
                v52.super.isa = v46;
LABEL_20:
                v55 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v49, *(Swift::String_optional *)&v50, v52, *(Swift::String *)&v53, *(Swift::String *)&v47)._object;

              }
              swift_bridgeObjectRetain(a3);
              if (!_CocoaArrayWrapper.endIndex.getter(v110))
              {
                v93 = swift_bridgeObjectRelease(a3);
                goto LABEL_68;
              }
LABEL_48:
              v115 = v16;
              if ((a3 & 0xC000000000000001) != 0)
              {
                v94 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a3);
              }
              else
              {
                if (!*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
LABEL_72:
                  __break(1u);
LABEL_73:
                  __break(1u);
                  goto LABEL_74;
                }
                v94 = *(id *)(a3 + 32);
              }
              v95 = v94;
              v96 = swift_bridgeObjectRelease(a3);
              v97 = (id)_DocumentManagerBundle(v96);
              if (!v97)
                goto LABEL_76;
              v98 = v97;
              v99._countAndFlagsBits = 0x100000000000003FLL;
              v125._countAndFlagsBits = (uint64_t)v3 + 81;
              v125._object = (void *)0x80000001005258F0;
              v99._object = (void *)0x8000000100525880;
              v100._object = (void *)0x80000001005258C0;
              v101.value._countAndFlagsBits = 0x617A696C61636F4CLL;
              v101.value._object = (void *)0xEB00000000656C62;
              v100._countAndFlagsBits = 0x100000000000002FLL;
              v102 = NSLocalizedString(_:tableName:bundle:value:comment:)(v99, v101, (NSBundle)v98, v100, v125);

              v103 = sub_10006922C((uint64_t *)&unk_100644560);
              v104 = swift_allocObject(v103, 72, 7);
              *(_OWORD *)(v104 + 16) = xmmword_1004D9670;
              v3 = objc_msgSend(v95, "displayName");
              v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
              v107 = v106;

              *(_QWORD *)(v104 + 56) = &type metadata for String;
              *(_QWORD *)(v104 + 64) = sub_10006A638();
              *(_QWORD *)(v104 + 32) = v105;
              *(_QWORD *)(v104 + 40) = v107;
              String.init(format:_:)(v102._countAndFlagsBits, v102._object, v104);
              v55 = v108;
              swift_bridgeObjectRelease(v102._object);

              v16 = v115;
            }
          }
        }
        else
        {
          v93 = sub_10000CB4C((uint64_t)&aBlock, &qword_100642730);
        }
        if ((unint64_t)a3 >> 62)
          goto LABEL_62;
        if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) != 1)
          goto LABEL_68;
        swift_bridgeObjectRetain(a3);
        goto LABEL_48;
      }
    }
    else
    {
      v80 = sub_10000CB4C((uint64_t)&aBlock, &qword_100642730);
    }
    v81 = (id)_DocumentManagerBundle(v80);
    if (v81)
    {
      v82 = v81;
      v83._countAndFlagsBits = 0xD000000000000019;
      v84._countAndFlagsBits = 0xD000000000000027;
      v124._countAndFlagsBits = 0xD00000000000005FLL;
      v124._object = (void *)0x8000000100525710;
      v84._object = (void *)0x80000001005256C0;
      v83._object = (void *)0x80000001005256F0;
      v85.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v85.value._object = (void *)0xEB00000000656C62;
      v43 = NSLocalizedString(_:tableName:bundle:value:comment:)(v84, v85, (NSBundle)v82, v83, v124)._object;

      goto LABEL_37;
    }
    goto LABEL_75;
  }
LABEL_17:
  v38 = (id)_DocumentManagerBundle(v30);
  if (!v38)
    goto LABEL_73;
  v39 = v38;
  v40._countAndFlagsBits = 0xD000000000000013;
  v122._countAndFlagsBits = 0xD000000000000038;
  v122._object = (void *)0x8000000100525620;
  v40._object = (void *)0x8000000100525600;
  v41.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v41.value._object = (void *)0xEB00000000656C62;
  v42._countAndFlagsBits = 0x726F727245;
  v42._object = (void *)0xE500000000000000;
  v43 = NSLocalizedString(_:tableName:bundle:value:comment:)(v40, v41, (NSBundle)v39, v42, v122)._object;

  v45 = (objc_class *)(id)_DocumentManagerBundle(v44);
  if (v45)
  {
    v46 = v45;
    v47 = 0xD000000000000031;
    v113 = 0x8000000100525680;
    v48 = 0x8000000100525660;
    v49 = 0xD00000000000001ALL;
    v50 = 0x617A696C61636F4CLL;
    v51 = 0xEB00000000656C62;
    v52.super.isa = v46;
    v53 = 0xD00000000000001ALL;
    v54 = 0x8000000100525660;
    goto LABEL_20;
  }
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
}

uint64_t sub_1002F9D9C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;

  sub_1000271D4(a1, (uint64_t)&v16, &qword_100642730);
  if (!*((_QWORD *)&v17 + 1))
    goto LABEL_23;
  v1 = sub_10006922C((uint64_t *)&unk_1006444E0);
  if ((swift_dynamicCast(&v15, &v16, (char *)&type metadata for Any + 8, v1, 6) & 1) == 0)
    return 0;
  v2 = v15;
  if (*(_QWORD *)(v15 + 16) && (v3 = sub_10007EF08(0x7365646F4E636F64, 0xE800000000000000), (v4 & 1) != 0))
  {
    sub_100069BD8(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v16);
  }
  else
  {
    v16 = 0u;
    v17 = 0u;
  }
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v17 + 1))
  {
LABEL_23:
    sub_10000CB4C((uint64_t)&v16, &qword_100642730);
    return 0;
  }
  v5 = sub_10006922C((uint64_t *)&unk_100643CB0);
  if ((swift_dynamicCast(&v15, &v16, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
  {
    v6 = v15;
    if (v15 >> 62)
      goto LABEL_27;
    v7 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v15);
    while (v7)
    {
      v8 = 4;
      while (1)
      {
        v9 = v8 - 4;
        if ((v6 & 0xC000000000000001) == 0)
          break;
        v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v6);
        v11 = v8 - 3;
        if (__OFADD__(v9, 1))
          goto LABEL_26;
LABEL_19:
        if (!objc_msgSend(v10, "isDownloaded") || (objc_msgSend(v10, "isTrashed") & 1) != 0)
        {
          swift_unknownObjectRelease(v10);
        }
        else
        {
          v12 = objc_msgSend(v10, "isAnyParentTrashed");
          swift_unknownObjectRelease(v10);
          if ((v12 & 1) == 0)
          {
            swift_bridgeObjectRelease_n(v6, 2);
            return 1;
          }
        }
        ++v8;
        if (v11 == v7)
          goto LABEL_31;
      }
      v10 = *(void **)(v6 + 8 * v8);
      swift_unknownObjectRetain(v10);
      v11 = v8 - 3;
      if (!__OFADD__(v9, 1))
        goto LABEL_19;
LABEL_26:
      __break(1u);
LABEL_27:
      if (v6 < 0)
        v14 = v6;
      else
        v14 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v7 = _CocoaArrayWrapper.endIndex.getter(v14);
    }
LABEL_31:
    swift_bridgeObjectRelease_n(v6, 2);
  }
  return 0;
}

void sub_1002F9FC0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t All;
  uint64_t v8;
  id v9;
  Class isa;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  _QWORD v15[5];
  uint64_t v16;
  _OWORD v17[2];

  v6 = sub_10006922C((uint64_t *)&unk_1006424B0);
  All = Array<A>.fpfs_syncFetchAllFPItems()(a1, v6);
  if (All)
  {
    v8 = All;
    v9 = objc_allocWithZone((Class)FPDownloadOperation);
    sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v8);
    v11 = objc_msgSend(v9, "initWithItems:", isa);

    objc_msgSend(v11, "setRecursively:", a3 & 1);
    sub_100069BD8(a2, (uint64_t)v17);
    v12 = swift_allocObject(&unk_1005DC298, 48, 7);
    sub_100079B28(v17, (_OWORD *)(v12 + 16));
    v15[4] = sub_100303EE8;
    v16 = v12;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    v15[2] = sub_10043060C;
    v15[3] = &unk_1005DC2B0;
    v13 = _Block_copy(v15);
    swift_release(v16);
    objc_msgSend(v11, "setDownloadCompletionBlock:", v13);
    _Block_release(v13);
    v14 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
    objc_msgSend(v14, "scheduleAction:", v11);

  }
}

void sub_1002FA160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  void *object;
  uint64_t v14;
  id v15;
  void *v16;
  Swift::String v17;
  Swift::String_optional v18;
  Swift::String v19;
  void *v20;
  NSString v21;
  NSString v22;
  id v23;
  uint64_t v24;
  id v25;
  void *v26;
  Swift::String v27;
  Swift::String_optional v28;
  Swift::String v29;
  void *v30;
  NSString v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  void *v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  _QWORD aBlock[5];
  _QWORD *v49;
  void *v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;

  if (a2)
  {
    v4 = (void *)_convertErrorToNSError(_:)(a2);
    sub_100069BD8(a3, (uint64_t)aBlock);
    v5 = type metadata accessor for DOCActionContext();
    v6 = swift_dynamicCast(&v50, aBlock, (char *)&type metadata for Any + 8, v5, 6);
    if ((v6 & 1) != 0)
    {
      v7 = v50;
      v8 = (id)_DocumentManagerBundle(v6);
      if (!v8)
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      v9 = v8;
      v51._countAndFlagsBits = 0xD000000000000031;
      v51._object = (void *)0x8000000100525A20;
      v10._object = (void *)0x8000000100525600;
      v10._countAndFlagsBits = 0xD000000000000013;
      v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v11.value._object = (void *)0xEB00000000656C62;
      v12._countAndFlagsBits = 0x726F727245;
      v12._object = (void *)0xE500000000000000;
      object = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v51)._object;

      v15 = (id)_DocumentManagerBundle(v14);
      if (!v15)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      v16 = v15;
      v52._countAndFlagsBits = 0xD00000000000002ALL;
      v52._object = (void *)0x8000000100525A80;
      v17._object = (void *)0x8000000100525A60;
      v17._countAndFlagsBits = 0xD000000000000013;
      v18.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v18.value._object = (void *)0xEB00000000656C62;
      v19._countAndFlagsBits = 0xD000000000000013;
      v19._object = (void *)0x8000000100525A60;
      v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, v18, (NSBundle)v16, v19, v52)._object;

      v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(object);
      v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
      v23 = objc_msgSend((id)objc_opt_self(DOCAlertController), "alertControllerWithTitle:message:preferredStyle:", v21, v22, 1);

      v25 = (id)_DocumentManagerBundle(v24);
      if (!v25)
      {
LABEL_27:
        __break(1u);
        return;
      }
      v26 = v25;
      v53._object = (void *)0xE200000000000000;
      v27._countAndFlagsBits = 19279;
      v27._object = (void *)0xE200000000000000;
      v28.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v28.value._object = (void *)0xEB00000000656C62;
      v29._countAndFlagsBits = 0;
      v29._object = (void *)0xE000000000000000;
      v53._countAndFlagsBits = 19279;
      v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, v28, (NSBundle)v26, v29, v53)._object;

      v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v30);
      v32 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v31, 0, 0);

      objc_msgSend(v23, "addAction:", v32);
      v33 = v23;
      v34 = objc_msgSend(v33, "actions");
      v35 = sub_10004F2F0(0, &qword_1006572A0, UIAlertAction_ptr);
      v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, v35);

      if ((unint64_t)v36 >> 62)
      {
        if (v36 < 0)
          v47 = v36;
        else
          v47 = v36 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v36);
        v37 = _CocoaArrayWrapper.endIndex.getter(v47);
        swift_bridgeObjectRelease(v36);
        if (v37)
        {
LABEL_8:
          v38 = v37 - 1;
          if (!__OFSUB__(v37, 1))
          {
            if ((v36 & 0xC000000000000001) == 0)
            {
              if ((v38 & 0x8000000000000000) != 0)
              {
                __break(1u);
              }
              else if (v38 < *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                v39 = *(id *)(v36 + 8 * v38 + 32);
LABEL_13:
                v40 = v39;
                swift_bridgeObjectRelease(v36);
                objc_msgSend(v33, "setPreferredAction:", v40);

                v41 = (_QWORD *)swift_allocObject(&unk_1005DC2E8, 40, 7);
                v41[2] = v4;
                v41[3] = v7;
                v41[4] = v33;
                aBlock[4] = sub_100303EF4;
                v49 = v41;
                aBlock[0] = _NSConcreteStackBlock;
                aBlock[1] = 1107296256;
                aBlock[2] = sub_10004A82C;
                aBlock[3] = &unk_1005DC300;
                v42 = _Block_copy(aBlock);
                v43 = v49;
                v44 = v33;
                v45 = v4;
                v46 = v7;
                swift_release(v43);
                DOCRunInMainThread(v42);
                _Block_release(v42);

                return;
              }
              __break(1u);
              goto LABEL_25;
            }
LABEL_22:
            v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v36);
            goto LABEL_13;
          }
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
      }
      else
      {
        v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v37)
          goto LABEL_8;
      }
      v38 = swift_bridgeObjectRelease(v36);
      __break(1u);
      goto LABEL_21;
    }

  }
}

uint64_t sub_1002FA5DC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;

  sub_1000271D4(a1, (uint64_t)&v16, &qword_100642730);
  if (!*((_QWORD *)&v17 + 1))
    goto LABEL_24;
  v1 = sub_10006922C((uint64_t *)&unk_1006444E0);
  if ((swift_dynamicCast(&v15, &v16, (char *)&type metadata for Any + 8, v1, 6) & 1) == 0)
    return 0;
  v2 = v15;
  if (*(_QWORD *)(v15 + 16) && (v3 = sub_10007EF08(0x7365646F4E636F64, 0xE800000000000000), (v4 & 1) != 0))
  {
    sub_100069BD8(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v16);
  }
  else
  {
    v16 = 0u;
    v17 = 0u;
  }
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v17 + 1))
  {
LABEL_24:
    sub_10000CB4C((uint64_t)&v16, &qword_100642730);
    return 0;
  }
  v5 = sub_10006922C((uint64_t *)&unk_100643CB0);
  if ((swift_dynamicCast(&v15, &v16, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
  {
    v6 = v15;
    if (v15 >> 62)
      goto LABEL_30;
    v7 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v7)
    {
      swift_bridgeObjectRetain(v6);
      for (i = 4; ; ++i)
      {
        v9 = i - 4;
        if ((v6 & 0xC000000000000001) == 0)
          break;
        v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v6);
        v11 = i - 3;
        if (__OFADD__(v9, 1))
          goto LABEL_29;
LABEL_17:
        if (((objc_msgSend(v10, "isFolder") & 1) != 0
           || (objc_msgSend(v10, "isAppContainer") & 1) != 0
           || objc_msgSend(v10, "isDownloaded"))
          && !objc_msgSend(v10, "isFolder"))
        {
          swift_bridgeObjectRelease_n(v6, 2);
          swift_unknownObjectRelease(v10);
          return 0;
        }
        v12 = objc_msgSend(v10, "isDownloading");
        swift_unknownObjectRelease(v10);
        if ((v12 & 1) != 0)
        {
          swift_bridgeObjectRelease_n(v6, 2);
          return 0;
        }
        if (v11 == v7)
        {
          swift_bridgeObjectRelease_n(v6, 2);
          return 1;
        }
      }
      v10 = *(void **)(v6 + 8 * i);
      swift_unknownObjectRetain(v10);
      v11 = i - 3;
      if (!__OFADD__(v9, 1))
        goto LABEL_17;
LABEL_29:
      __break(1u);
LABEL_30:
      if (v6 < 0)
        v14 = v6;
      else
        v14 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v7 = _CocoaArrayWrapper.endIndex.getter(v14);
      swift_bridgeObjectRelease(v6);
    }
    swift_bridgeObjectRelease(v6);
  }
  return 0;
}

void sub_1002FA844(uint64_t a1, uint64_t a2)
{
  sub_1002FB0B0(a1, a2, (Class *)FPPinOperation_ptr, (uint64_t)&unk_1005DC388, (uint64_t)sub_100303F1C, (uint64_t)&unk_1005DC3A0);
}

void sub_1002FA868(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  Swift::String v17;
  Swift::String_optional v18;
  Swift::String v19;
  void *object;
  uint64_t v21;
  id v22;
  void *v23;
  Swift::String v24;
  Swift::String_optional v25;
  Swift::String v26;
  void *v27;
  NSString v28;
  NSString v29;
  id v30;
  uint64_t v31;
  id v32;
  void *v33;
  Swift::String v34;
  Swift::String_optional v35;
  Swift::String v36;
  void *v37;
  NSString v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  _QWORD aBlock[5];
  _QWORD *v61;
  void *v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&aBlock[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    aBlock[0] = a1;
    swift_errorRetain(a1);
    v9 = sub_10006922C((uint64_t *)&unk_100643490);
    v10 = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
    v6 = swift_dynamicCast(&v62, aBlock, v9, v10, 6);
    if ((v6 & 1) != 0)
    {
      v11 = v62;
      sub_100069BD8(a2, (uint64_t)aBlock);
      v12 = type metadata accessor for DOCActionContext();
      v13 = swift_dynamicCast(&v62, aBlock, (char *)&type metadata for Any + 8, v12, 6);
      if ((v13 & 1) == 0)
      {

        return;
      }
      v14 = v62;
      v15 = (id)_DocumentManagerBundle(v13);
      if (!v15)
        goto LABEL_29;
      v16 = v15;
      v17._countAndFlagsBits = 0xD000000000000013;
      v63._countAndFlagsBits = 0xD000000000000038;
      v63._object = (void *)0x8000000100525AF0;
      v17._object = (void *)0x8000000100525600;
      v18.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v18.value._object = (void *)0xEB00000000656C62;
      v19._countAndFlagsBits = 0x726F727245;
      v19._object = (void *)0xE500000000000000;
      object = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, v18, (NSBundle)v16, v19, v63)._object;

      v22 = (id)_DocumentManagerBundle(v21);
      if (!v22)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      v23 = v22;
      v64._countAndFlagsBits = 0xD000000000000031;
      v64._object = (void *)0x8000000100525B50;
      v24._object = (void *)0x8000000100525B30;
      v24._countAndFlagsBits = 0xD00000000000001ALL;
      v25.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v25.value._object = (void *)0xEB00000000656C62;
      v26._countAndFlagsBits = 0xD00000000000001ALL;
      v26._object = (void *)0x8000000100525B30;
      v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, v25, (NSBundle)v23, v26, v64)._object;

      v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(object);
      v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v27);
      v30 = objc_msgSend((id)objc_opt_self(DOCAlertController), "alertControllerWithTitle:message:preferredStyle:", v28, v29, 1);

      v32 = (id)_DocumentManagerBundle(v31);
      if (!v32)
      {
LABEL_31:
        __break(1u);
        return;
      }
      v33 = v32;
      v65._object = (void *)0xE200000000000000;
      v34._countAndFlagsBits = 19279;
      v34._object = (void *)0xE200000000000000;
      v35.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v35.value._object = (void *)0xEB00000000656C62;
      v36._countAndFlagsBits = 0;
      v36._object = (void *)0xE000000000000000;
      v65._countAndFlagsBits = 19279;
      v37 = NSLocalizedString(_:tableName:bundle:value:comment:)(v34, v35, (NSBundle)v33, v36, v65)._object;

      v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v37);
      v39 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v38, 0, 0);

      objc_msgSend(v30, "addAction:", v39);
      v40 = v30;
      v41 = objc_msgSend(v40, "actions");
      v42 = sub_10004F2F0(0, &qword_1006572A0, UIAlertAction_ptr);
      v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, v42);

      if ((unint64_t)v43 >> 62)
      {
        if (v43 < 0)
          v58 = v43;
        else
          v58 = v43 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v43);
        v44 = (char *)_CocoaArrayWrapper.endIndex.getter(v58);
        swift_bridgeObjectRelease(v43);
        if (!v44)
          goto LABEL_15;
      }
      else
      {
        v44 = *(char **)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v44)
        {
LABEL_15:
          swift_bridgeObjectRelease(v43);
          objc_msgSend(v40, "setPreferredAction:", v44);

          v47 = (_QWORD *)swift_allocObject(&unk_1005DC3D8, 40, 7);
          v47[2] = v11;
          v47[3] = v14;
          v47[4] = v40;
          aBlock[4] = sub_100303F28;
          v61 = v47;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_10004A82C;
          aBlock[3] = &unk_1005DC3F0;
          v48 = _Block_copy(aBlock);
          v49 = v61;
          v50 = v40;
          v51 = v11;
          v52 = v14;
          swift_release(v49);
          DOCRunInMainThread(v48);
          _Block_release(v48);

          return;
        }
      }
      v45 = v44 - 1;
      if (__OFSUB__(v44, 1))
      {
        __break(1u);
      }
      else if ((v43 & 0xC000000000000001) == 0)
      {
        if (((unint64_t)v45 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if ((unint64_t)v45 < *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v46 = (char *)*(id *)(v43 + 8 * (_QWORD)v45 + 32);
LABEL_14:
          v44 = v46;
          goto LABEL_15;
        }
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      v46 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v45, v43);
      goto LABEL_14;
    }
  }
  v53 = Logger.UI.unsafeMutableAddressor(v6);
  v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v53, v4);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Keep Downloaded completed successfully", v57, 2u);
    swift_slowDealloc(v57, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1002FAE00(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;

  sub_1000271D4(a1, (uint64_t)&v22, &qword_100642730);
  if (!*((_QWORD *)&v23 + 1))
    goto LABEL_29;
  v1 = sub_10006922C((uint64_t *)&unk_1006444E0);
  if ((swift_dynamicCast(&v21, &v22, (char *)&type metadata for Any + 8, v1, 6) & 1) == 0)
    return 0;
  v2 = v21;
  if (*(_QWORD *)(v21 + 16) && (v3 = sub_10007EF08(0x7365646F4E636F64, 0xE800000000000000), (v4 & 1) != 0))
  {
    sub_100069BD8(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v22);
  }
  else
  {
    v22 = 0u;
    v23 = 0u;
  }
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v23 + 1))
  {
LABEL_29:
    sub_10000CB4C((uint64_t)&v22, &qword_100642730);
    return 0;
  }
  v5 = sub_10006922C((uint64_t *)&unk_100643CB0);
  if ((swift_dynamicCast(&v21, &v22, (char *)&type metadata for Any + 8, v5, 6) & 1) == 0)
    return 0;
  v6 = v21;
  if (v21 >> 62)
    goto LABEL_35;
  v7 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v21);
  while (v7)
  {
    v8 = v6 & 0xC000000000000001;
    v9 = 4;
    while (1)
    {
      v10 = v9 - 4;
      if (!v8)
        break;
      v11 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v6);
      v12 = v9 - 3;
      if (__OFADD__(v10, 1))
        goto LABEL_33;
LABEL_17:
      if ((objc_msgSend(v11, "isTrashed") & 1) != 0)
      {
        swift_bridgeObjectRelease_n(v6, 2);
        swift_unknownObjectRelease(v11);
        return 0;
      }
      v13 = objc_msgSend(v11, "isAnyParentTrashed");
      swift_unknownObjectRelease(v11);
      if (v13)
        goto LABEL_31;
      ++v9;
      if (v12 == v7)
      {
        v14 = 4;
        while (1)
        {
          v15 = v14 - 4;
          if (v8)
          {
            v16 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, v6);
            v17 = v14 - 3;
            if (__OFADD__(v15, 1))
              goto LABEL_34;
          }
          else
          {
            v16 = *(void **)(v6 + 8 * v14);
            swift_unknownObjectRetain(v16);
            v17 = v14 - 3;
            if (__OFADD__(v15, 1))
              goto LABEL_34;
          }
          v18 = objc_msgSend(v16, "isItemPinned");
          swift_unknownObjectRelease(v16);
          if (v18)
            break;
          ++v14;
          if (v17 == v7)
            goto LABEL_28;
        }
LABEL_31:
        swift_bridgeObjectRelease_n(v6, 2);
        return 0;
      }
    }
    v11 = *(void **)(v6 + 8 * v9);
    swift_unknownObjectRetain(v11);
    v12 = v9 - 3;
    if (!__OFADD__(v10, 1))
      goto LABEL_17;
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    if (v6 < 0)
      v20 = v6;
    else
      v20 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v7 = _CocoaArrayWrapper.endIndex.getter(v20);
  }
LABEL_28:
  swift_bridgeObjectRelease_n(v6, 2);
  return 1;
}

void sub_1002FB08C(uint64_t a1, uint64_t a2)
{
  sub_1002FB0B0(a1, a2, (Class *)FPUnpinOperation_ptr, (uint64_t)&unk_1005DC478, (uint64_t)sub_100303F50, (uint64_t)&unk_1005DC490);
}

void sub_1002FB0B0(uint64_t a1, uint64_t a2, Class *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t All;
  uint64_t v14;
  id v15;
  Class isa;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  _QWORD v23[5];
  uint64_t v24;
  _OWORD v25[2];

  v12 = sub_10006922C((uint64_t *)&unk_1006424B0);
  All = Array<A>.fpfs_syncFetchAllFPItems()(a1, v12);
  if (All)
  {
    v14 = All;
    v15 = objc_allocWithZone(*a3);
    sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v14);
    v17 = objc_msgSend(v15, "initWithItems:", isa);

    sub_100069BD8(a2, (uint64_t)v25);
    v18 = swift_allocObject(a4, 48, 7);
    sub_100079B28(v25, (_OWORD *)(v18 + 16));
    v23[4] = a5;
    v24 = v18;
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 1107296256;
    v23[2] = sub_10015936C;
    v23[3] = a6;
    v19 = _Block_copy(v23);
    v20 = v24;
    v21 = v17;
    swift_release(v20);
    objc_msgSend(v21, "setActionCompletionBlock:", v19);
    _Block_release(v19);

    v22 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
    objc_msgSend(v22, "scheduleAction:", v21);

  }
}

void sub_1002FB248(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  Swift::String v17;
  Swift::String_optional v18;
  Swift::String v19;
  void *object;
  uint64_t v21;
  id v22;
  void *v23;
  Swift::String v24;
  Swift::String_optional v25;
  Swift::String v26;
  void *v27;
  NSString v28;
  NSString v29;
  id v30;
  uint64_t v31;
  id v32;
  void *v33;
  Swift::String v34;
  Swift::String_optional v35;
  Swift::String v36;
  void *v37;
  NSString v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  _QWORD aBlock[5];
  _QWORD *v61;
  void *v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&aBlock[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    aBlock[0] = a1;
    swift_errorRetain(a1);
    v9 = sub_10006922C((uint64_t *)&unk_100643490);
    v10 = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
    v6 = swift_dynamicCast(&v62, aBlock, v9, v10, 6);
    if ((v6 & 1) != 0)
    {
      v11 = v62;
      sub_100069BD8(a2, (uint64_t)aBlock);
      v12 = type metadata accessor for DOCActionContext();
      v13 = swift_dynamicCast(&v62, aBlock, (char *)&type metadata for Any + 8, v12, 6);
      if ((v13 & 1) == 0)
      {

        return;
      }
      v14 = v62;
      v15 = (id)_DocumentManagerBundle(v13);
      if (!v15)
        goto LABEL_29;
      v16 = v15;
      v17._countAndFlagsBits = 0xD000000000000013;
      v63._countAndFlagsBits = 0xD000000000000040;
      v63._object = (void *)0x8000000100525F20;
      v17._object = (void *)0x8000000100525600;
      v18.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v18.value._object = (void *)0xEB00000000656C62;
      v19._countAndFlagsBits = 0x726F727245;
      v19._object = (void *)0xE500000000000000;
      object = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, v18, (NSBundle)v16, v19, v63)._object;

      v22 = (id)_DocumentManagerBundle(v21);
      if (!v22)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      v23 = v22;
      v64._countAndFlagsBits = 0xD000000000000039;
      v64._object = (void *)0x8000000100525FA0;
      v24._object = (void *)0x8000000100525F70;
      v24._countAndFlagsBits = 0xD000000000000022;
      v25.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v25.value._object = (void *)0xEB00000000656C62;
      v26._countAndFlagsBits = 0xD000000000000022;
      v26._object = (void *)0x8000000100525F70;
      v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, v25, (NSBundle)v23, v26, v64)._object;

      v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(object);
      v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v27);
      v30 = objc_msgSend((id)objc_opt_self(DOCAlertController), "alertControllerWithTitle:message:preferredStyle:", v28, v29, 1);

      v32 = (id)_DocumentManagerBundle(v31);
      if (!v32)
      {
LABEL_31:
        __break(1u);
        return;
      }
      v33 = v32;
      v65._object = (void *)0xE200000000000000;
      v34._countAndFlagsBits = 19279;
      v34._object = (void *)0xE200000000000000;
      v35.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v35.value._object = (void *)0xEB00000000656C62;
      v36._countAndFlagsBits = 0;
      v36._object = (void *)0xE000000000000000;
      v65._countAndFlagsBits = 19279;
      v37 = NSLocalizedString(_:tableName:bundle:value:comment:)(v34, v35, (NSBundle)v33, v36, v65)._object;

      v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v37);
      v39 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v38, 0, 0);

      objc_msgSend(v30, "addAction:", v39);
      v40 = v30;
      v41 = objc_msgSend(v40, "actions");
      v42 = sub_10004F2F0(0, &qword_1006572A0, UIAlertAction_ptr);
      v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, v42);

      if ((unint64_t)v43 >> 62)
      {
        if (v43 < 0)
          v58 = v43;
        else
          v58 = v43 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v43);
        v44 = (char *)_CocoaArrayWrapper.endIndex.getter(v58);
        swift_bridgeObjectRelease(v43);
        if (!v44)
          goto LABEL_15;
      }
      else
      {
        v44 = *(char **)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v44)
        {
LABEL_15:
          swift_bridgeObjectRelease(v43);
          objc_msgSend(v40, "setPreferredAction:", v44);

          v47 = (_QWORD *)swift_allocObject(&unk_1005DC4C8, 40, 7);
          v47[2] = v11;
          v47[3] = v14;
          v47[4] = v40;
          aBlock[4] = sub_100303F90;
          v61 = v47;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_10004A82C;
          aBlock[3] = &unk_1005DC4E0;
          v48 = _Block_copy(aBlock);
          v49 = v61;
          v50 = v40;
          v51 = v11;
          v52 = v14;
          swift_release(v49);
          DOCRunInMainThread(v48);
          _Block_release(v48);

          return;
        }
      }
      v45 = v44 - 1;
      if (__OFSUB__(v44, 1))
      {
        __break(1u);
      }
      else if ((v43 & 0xC000000000000001) == 0)
      {
        if (((unint64_t)v45 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if ((unint64_t)v45 < *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v46 = (char *)*(id *)(v43 + 8 * (_QWORD)v45 + 32);
LABEL_14:
          v44 = v46;
          goto LABEL_15;
        }
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      v46 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v45, v43);
      goto LABEL_14;
    }
  }
  v53 = Logger.UI.unsafeMutableAddressor(v6);
  v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v53, v4);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Stop Keeping Downloaded completed successfully", v57, 2u);
    swift_slowDealloc(v57, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

id sub_1002FB7E0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v10 = *(id *)DOCLog.UI.unsafeMutableAddressor(a1);
  v11 = static os_log_type_t.error.getter(v10);
  v12 = sub_10006922C((uint64_t *)&unk_100644560);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1004D9670;
  *(_QWORD *)(v13 + 56) = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
  *(_QWORD *)(v13 + 64) = sub_100083450((unint64_t *)&qword_1006448B0, (unint64_t *)&qword_100644570, NSError_ptr);
  *(_QWORD *)(v13 + 32) = a1;
  v14 = a1;
  os_log(_:dso:log:type:_:)(a4, a5, 2, &_mh_execute_header, v10, v11, v13);

  swift_bridgeObjectRelease(v13);
  return objc_msgSend(*(id *)(a2 + OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController), "presentViewController:animated:completion:", a3, 1, 0);
}

uint64_t sub_1002FB904(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;

  sub_1000271D4(a1, (uint64_t)&v16, &qword_100642730);
  if (!*((_QWORD *)&v17 + 1))
    goto LABEL_20;
  v1 = sub_10006922C((uint64_t *)&unk_1006444E0);
  if ((swift_dynamicCast(&v15, &v16, (char *)&type metadata for Any + 8, v1, 6) & 1) == 0)
    return 0;
  v2 = v15;
  if (*(_QWORD *)(v15 + 16) && (v3 = sub_10007EF08(0x7365646F4E636F64, 0xE800000000000000), (v4 & 1) != 0))
  {
    sub_100069BD8(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v16);
  }
  else
  {
    v16 = 0u;
    v17 = 0u;
  }
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v17 + 1))
  {
LABEL_20:
    sub_10000CB4C((uint64_t)&v16, &qword_100642730);
    return 0;
  }
  v5 = sub_10006922C((uint64_t *)&unk_100643CB0);
  if ((swift_dynamicCast(&v15, &v16, (char *)&type metadata for Any + 8, v5, 6) & 1) == 0)
    return 0;
  v6 = v15;
  if (v15 >> 62)
    goto LABEL_24;
  v7 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v15);
  while (v7)
  {
    v8 = 4;
    while (1)
    {
      v9 = v8 - 4;
      if ((v6 & 0xC000000000000001) == 0)
        break;
      v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v6);
      v11 = v8 - 3;
      if (__OFADD__(v9, 1))
        goto LABEL_23;
LABEL_17:
      v12 = objc_msgSend(v10, "isItemPinned");
      swift_unknownObjectRelease(v10);
      if ((v12 & 1) == 0)
      {
        swift_bridgeObjectRelease_n(v6, 2);
        return 0;
      }
      ++v8;
      if (v11 == v7)
        goto LABEL_19;
    }
    v10 = *(void **)(v6 + 8 * v8);
    swift_unknownObjectRetain(v10);
    v11 = v8 - 3;
    if (!__OFADD__(v9, 1))
      goto LABEL_17;
LABEL_23:
    __break(1u);
LABEL_24:
    if (v6 < 0)
      v14 = v6;
    else
      v14 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v7 = _CocoaArrayWrapper.endIndex.getter(v14);
  }
LABEL_19:
  swift_bridgeObjectRelease_n(v6, 2);
  return 1;
}

void sub_1002FBAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD aBlock[5];
  uint64_t v19;
  void *v20;

  if (!((unint64_t)a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v4)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease(a1);
    return;
  }
  if (a1 < 0)
    v17 = a1;
  else
    v17 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v17))
    goto LABEL_15;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v5 = *(_QWORD *)(a1 + 32);
    swift_unknownObjectRetain(v5);
  }
  swift_bridgeObjectRelease(a1);
  ObjectType = swift_getObjectType(v5, v6);
  v8 = (void *)DOCNode.fpfs_syncFetchFPItem()(ObjectType);
  swift_unknownObjectRelease(v5);
  if (v8)
  {
    sub_100069BD8(a2, (uint64_t)aBlock);
    v9 = type metadata accessor for DOCActionContext();
    if ((swift_dynamicCast(&v20, aBlock, (char *)&type metadata for Any + 8, v9, 6) & 1) != 0)
    {
      v10 = v20;
      v11 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
      v12 = objc_msgSend(v8, "itemID");
      v13 = swift_allocObject(&unk_1005DC568, 24, 7);
      *(_QWORD *)(v13 + 16) = v10;
      aBlock[4] = sub_100303FDC;
      v19 = v13;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10013103C;
      aBlock[3] = &unk_1005DC580;
      v14 = _Block_copy(aBlock);
      v15 = v19;
      v16 = v10;
      swift_release(v15);
      objc_msgSend(v11, "fetchParentsForItemID:recursively:completionHandler:", v12, 1, v14);
      _Block_release(v14);

    }
    else
    {

    }
  }
}

void sub_1002FBD08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  unsigned __int8 v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;

  if (a1)
  {
    v5 = a1 & 0xFFFFFFFFFFFFFF8;
    if ((unint64_t)a1 >> 62)
      goto LABEL_22;
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v6)
    {
      v7 = 0;
      v8 = a1 & 0xC000000000000001;
      while (1)
      {
        v9 = v8 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1) : *(id *)(a1 + 8 * v7 + 32);
        v10 = v9;
        if (objc_msgSend(v9, "isItemPinned"))
        {
          v11 = objc_msgSend(v10, "isPinnedSubitem");

          if ((v11 & 1) == 0)
          {
            if (v8)
            {
              v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1);
              if (!__OFADD__(v7, 1))
              {
                v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 + 1, a1);
LABEL_20:
                v17 = v13;
                sub_100303B00((uint64_t)v12, a3, 0, 0);

                return;
              }
              __break(1u);
            }
            else if (!__OFADD__(v7, 1))
            {
              v14 = *(void **)(a1 + 8 * v7 + 32);
              v15 = *(void **)(a1 + 32 + 8 * (v7 + 1));
              v12 = v14;
              v13 = v15;
              goto LABEL_20;
            }
            __break(1u);
            return;
          }
        }
        else
        {

        }
        v5 = v7 + 1;
        if (__OFADD__(v7, 1))
          break;
        ++v7;
        if (v5 == v6)
          return;
      }
      __break(1u);
LABEL_22:
      if (a1 >= 0)
        v16 = v5;
      else
        v16 = a1;
      swift_bridgeObjectRetain(a1);
      v6 = _CocoaArrayWrapper.endIndex.getter(v16);
      swift_bridgeObjectRelease(a1);
    }
  }
}

uint64_t sub_1002FBEA0(uint64_t a1, uint64_t a2)
{
  return sub_1002FBFF4(a1, a2, (SEL *)&selRef_doc_isCollaborationInvitation);
}

void sub_1002FBEAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _BYTE v13[32];

  if (!((unint64_t)a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v4)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease(a1);
    return;
  }
  if (a1 < 0)
    v11 = a1;
  else
    v11 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v11))
    goto LABEL_15;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v5 = *(_QWORD *)(a1 + 32);
    swift_unknownObjectRetain(v5);
  }
  swift_bridgeObjectRelease(a1);
  ObjectType = swift_getObjectType(v5, v6);
  v8 = (void *)DOCNode.fpfs_syncFetchFPItem()(ObjectType);
  swift_unknownObjectRelease(v5);
  if (v8)
  {
    sub_100069BD8(a2, (uint64_t)v13);
    v9 = type metadata accessor for DOCActionContext();
    if ((swift_dynamicCast(&v12, v13, (char *)&type metadata for Any + 8, v9, 6) & 1) != 0)
    {
      v10 = v12;
      sub_100303B00((uint64_t)v8, (uint64_t)v12, 0, 0);

    }
    else
    {

    }
  }
}

uint64_t sub_1002FBFF4(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;

  sub_1000271D4(a1, (uint64_t)&v19, &qword_100642730);
  if (!*((_QWORD *)&v20 + 1))
    goto LABEL_23;
  v4 = sub_10006922C((uint64_t *)&unk_1006444E0);
  if ((swift_dynamicCast(&v18, &v19, (char *)&type metadata for Any + 8, v4, 6) & 1) == 0)
    return 0;
  v5 = v18;
  if (*(_QWORD *)(v18 + 16) && (v6 = sub_10007EF08(0x7365646F4E636F64, 0xE800000000000000), (v7 & 1) != 0))
  {
    sub_100069BD8(*(_QWORD *)(v5 + 56) + 32 * v6, (uint64_t)&v19);
  }
  else
  {
    v19 = 0u;
    v20 = 0u;
  }
  swift_bridgeObjectRelease(v5);
  if (!*((_QWORD *)&v20 + 1))
  {
LABEL_23:
    sub_10000CB4C((uint64_t)&v19, &qword_100642730);
    return 0;
  }
  v8 = sub_10006922C((uint64_t *)&unk_100643CB0);
  if ((swift_dynamicCast(&v18, &v19, (char *)&type metadata for Any + 8, v8, 6) & 1) != 0)
  {
    v9 = v18;
    if (v18 >> 62)
      goto LABEL_27;
    v10 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v18);
    while (v10)
    {
      v11 = 4;
      while (1)
      {
        v12 = v11 - 4;
        if ((v9 & 0xC000000000000001) == 0)
          break;
        v13 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v9);
        v14 = v11 - 3;
        if (__OFADD__(v12, 1))
          goto LABEL_26;
LABEL_19:
        if ((objc_msgSend(v13, "isTrashed") & 1) != 0
          || (objc_msgSend(v13, "isAnyParentTrashed") & 1) != 0)
        {
          swift_unknownObjectRelease(v13);
        }
        else
        {
          v15 = objc_msgSend(v13, *a3);
          swift_unknownObjectRelease(v13);
          if ((v15 & 1) == 0)
          {
            swift_bridgeObjectRelease_n(v9, 2);
            return 1;
          }
        }
        ++v11;
        if (v14 == v10)
          goto LABEL_31;
      }
      v13 = *(void **)(v9 + 8 * v11);
      swift_unknownObjectRetain(v13);
      v14 = v11 - 3;
      if (!__OFADD__(v12, 1))
        goto LABEL_19;
LABEL_26:
      __break(1u);
LABEL_27:
      if (v9 < 0)
        v17 = v9;
      else
        v17 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v9);
      v10 = _CocoaArrayWrapper.endIndex.getter(v17);
    }
LABEL_31:
    swift_bridgeObjectRelease_n(v9, 2);
  }
  return 0;
}

void sub_1002FC218(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  _QWORD aBlock[5];
  uint64_t v18;
  void *v19;

  sub_100069BD8(a2, (uint64_t)aBlock);
  v3 = type metadata accessor for DOCActionContext();
  if ((swift_dynamicCast(&v19, aBlock, (char *)&type metadata for Any + 8, v3, 6) & 1) == 0)
    return;
  v4 = v19;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    if (_CocoaArrayWrapper.endIndex.getter(v16))
      goto LABEL_4;
LABEL_14:

    swift_bridgeObjectRelease(a1);
    return;
  }
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v5)
    goto LABEL_14;
LABEL_4:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v6 = *(_QWORD *)(a1 + 32);
    swift_unknownObjectRetain(v6);
  }
  swift_bridgeObjectRelease(a1);
  ObjectType = swift_getObjectType(v6, v7);
  v9 = (void *)DOCNode.fpfs_syncFetchFPItem()(ObjectType);
  swift_unknownObjectRelease(v6);
  if (v9)
  {
    v10 = objc_msgSend((id)objc_opt_self(DOCManagedPermission), "defaultPermission");
    v11 = swift_allocObject(&unk_1005DC798, 32, 7);
    *(_QWORD *)(v11 + 16) = v9;
    *(_QWORD *)(v11 + 24) = v4;
    aBlock[4] = sub_100304394;
    v18 = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004A82C;
    aBlock[3] = &unk_1005DC7B0;
    v12 = _Block_copy(aBlock);
    v13 = v18;
    v14 = v9;
    v15 = v4;
    swift_release(v13);
    objc_msgSend(v10, "adoptPersonaFromItem:andPerformBlock:", v14, v12);
    _Block_release(v12);

  }
  else
  {

  }
}

void sub_1002FC40C(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD aBlock[5];
  uint64_t v15;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v6);
  FPItem.setLastOpenDate(_:delay:)(v8, 0.0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v9 = swift_allocObject(&unk_1005DC7E8, 32, 7);
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a1;
  aBlock[4] = sub_10030439C;
  v15 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = &unk_1005DC800;
  v10 = _Block_copy(aBlock);
  v11 = v15;
  v12 = a2;
  v13 = a1;
  swift_release(v11);
  DOCRunInMainThread(v10);
  _Block_release(v10);
}

uint64_t sub_1002FC520(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;

  sub_1000271D4(a1, (uint64_t)&v16, &qword_100642730);
  if (!*((_QWORD *)&v17 + 1))
    goto LABEL_26;
  v1 = sub_10006922C((uint64_t *)&unk_1006444E0);
  if ((swift_dynamicCast(&v15, &v16, (char *)&type metadata for Any + 8, v1, 6) & 1) == 0)
    return 0;
  v2 = v15;
  if (*(_QWORD *)(v15 + 16) && (v3 = sub_10007EF08(0x7365646F4E636F64, 0xE800000000000000), (v4 & 1) != 0))
  {
    sub_100069BD8(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v16);
  }
  else
  {
    v16 = 0u;
    v17 = 0u;
  }
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v17 + 1))
  {
LABEL_26:
    sub_10000CB4C((uint64_t)&v16, &qword_100642730);
    return 0;
  }
  v5 = sub_10006922C((uint64_t *)&unk_100643CB0);
  if ((swift_dynamicCast(&v15, &v16, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
  {
    v6 = v15;
    if (v15 >> 62)
      goto LABEL_30;
    v7 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v15);
    while (v7)
    {
      v8 = 4;
      while (1)
      {
        v9 = v8 - 4;
        if ((v6 & 0xC000000000000001) == 0)
          break;
        v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v6);
        v11 = v8 - 3;
        if (__OFADD__(v9, 1))
          goto LABEL_29;
LABEL_17:
        if ((objc_msgSend(v10, "isTrashed") & 1) != 0
          || (objc_msgSend(v10, "isAnyParentTrashed") & 1) != 0
          || (objc_msgSend(v10, "isFolder") & 1) != 0
          || (objc_msgSend(v10, "isAppContainer") & 1) != 0)
        {
          swift_unknownObjectRelease(v10);
        }
        else
        {
          v12 = objc_msgSend(v10, "doc_isCollaborationInvitation");
          swift_unknownObjectRelease(v10);
          if ((v12 & 1) == 0)
          {
            swift_bridgeObjectRelease_n(v6, 2);
            return 1;
          }
        }
        ++v8;
        if (v11 == v7)
          goto LABEL_34;
      }
      v10 = *(void **)(v6 + 8 * v8);
      swift_unknownObjectRetain(v10);
      v11 = v8 - 3;
      if (!__OFADD__(v9, 1))
        goto LABEL_17;
LABEL_29:
      __break(1u);
LABEL_30:
      if (v6 < 0)
        v14 = v6;
      else
        v14 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v7 = _CocoaArrayWrapper.endIndex.getter(v14);
    }
LABEL_34:
    swift_bridgeObjectRelease_n(v6, 2);
  }
  return 0;
}

void sub_1002FC76C(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t i;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD v36[4];

  sub_1000271D4(a2, (uint64_t)v36, &qword_100642730);
  if (!v36[3])
  {
    sub_10000CB4C((uint64_t)v36, &qword_100642730);
    return;
  }
  v9 = type metadata accessor for DOCActionContext();
  if ((swift_dynamicCast(&v35, v36, (char *)&type metadata for Any + 8, v9, 6) & 1) != 0)
  {
    v10 = v35;
    v11 = swift_allocObject(&unk_1005DC8D8, 41, 7);
    *(_QWORD *)(v11 + 16) = v10;
    *(_QWORD *)(v11 + 24) = a3;
    *(_QWORD *)(v11 + 32) = a1;
    v12 = a4 & 1;
    *(_BYTE *)(v11 + 40) = v12;
    if (a5)
    {
      swift_unknownObjectRetain_n(a5, 2);
      swift_bridgeObjectRetain(a1);
      v13 = a3;
      v14 = v10;
      sub_1002FCA78(a5, v14, v13, a1, v12);
      swift_unknownObjectRelease_n(a5, 2);
      swift_release(v11);

      return;
    }
    v36[0] = _swiftEmptyArrayStorage;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0)
        v30 = a1;
      else
        v30 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(a1, 2);
      v31 = a3;
      v32 = v10;
      v15 = _CocoaArrayWrapper.endIndex.getter(v30);
      if (v15)
      {
LABEL_8:
        if (v15 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v15; ++i)
        {
          if ((a1 & 0xC000000000000001) != 0)
            v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
          else
            v20 = *(id *)(a1 + 8 * i + 32);
          v21 = v20;
          v22 = objc_msgSend(v20, "fileProviderItem");

          if (v22)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
            v25 = *(_QWORD *)((v36[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v24 = *(_QWORD *)((v36[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v25 >= v24 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
            v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v22);
            specialized Array._endMutation()(v19);
          }
        }
        swift_bridgeObjectRelease(a1);
        v26 = v36[0];
        if (!(v36[0] >> 62))
          goto LABEL_19;
        goto LABEL_27;
      }
    }
    else
    {
      v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(a1, 2);
      v16 = a3;
      v17 = v10;
      if (v15)
        goto LABEL_8;
    }
    swift_bridgeObjectRelease(a1);
    v26 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
LABEL_19:
      v27 = swift_bridgeObjectRetain(v26);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v27);
      v28 = v26;
LABEL_20:
      swift_bridgeObjectRelease(v26);
      swift_retain();
      sub_100128494(v28, (void (*)(void))sub_100304434, v11);
      swift_bridgeObjectRelease(v28);

      swift_release_n(v11, 2, v29);
      return;
    }
LABEL_27:
    if (v26 < 0)
      v33 = v26;
    else
      v33 = v26 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v26);
    v34 = sub_10006922C((uint64_t *)&unk_1006424B0);
    v28 = _bridgeCocoaArray<A>(_:)(v33, v34);
    swift_bridgeObjectRelease(v26);
    goto LABEL_20;
  }
}

void sub_1002FCA78(uint64_t a1, void *a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t ObjectType;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSURL *v30;
  void *v31;
  void *v32;
  Class isa;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  id v41;
  id v42;
  _QWORD *v43;
  uint64_t v44;
  Class v45;
  id v46;
  char *v47;
  uint64_t v48;
  id v49;
  void (**v50)(uint64_t, uint64_t);
  uint64_t v51;
  id v52;
  id v53;
  char *v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  int v61;
  id v62;
  id v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD aBlock[5];
  _QWORD *v68;

  v10 = sub_10006922C(&qword_100643EC0);
  __chkstk_darwin(v10);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v65 = *(_QWORD *)(v13 - 8);
  v66 = v13;
  __chkstk_darwin(v13);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1
    || (ObjectType = swift_getObjectType(a1, v14), (v18 = (void *)DOCNode.fpfs_syncFetchFPItem()(ObjectType)) == 0))
  {
    v38 = (_QWORD *)swift_allocObject(&unk_1005DC900, 40, 7);
    v38[2] = a2;
    v38[3] = 0;
    v38[4] = a3;
    aBlock[4] = sub_100304448;
    v68 = v38;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004A82C;
    aBlock[3] = &unk_1005DC918;
    v39 = _Block_copy(aBlock);
    v40 = v68;
    v41 = a2;
    v42 = a3;
    swift_release(v40);
    DOCRunInMainThread(v39);
    _Block_release(v39);
    return;
  }
  v62 = v18;
  v61 = a5;
  v19 = swift_allocObject(&unk_1005DC950, 24, 7);
  *(_QWORD *)(v19 + 16) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DOCShortcutsActionRunner()), "init");
  v63 = objc_msgSend(objc_allocWithZone((Class)WFContextualActionContext), "initWithSurface:", 1);
  aBlock[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)a4 >> 62)
  {
    if (a4 < 0)
      v44 = a4;
    else
      v44 = a4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a4);
    v20 = _CocoaArrayWrapper.endIndex.getter(v44);
    if (v20)
      goto LABEL_5;
LABEL_23:
    swift_bridgeObjectRelease(a4);
    v43 = _swiftEmptyArrayStorage;
    goto LABEL_24;
  }
  v20 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a4);
  if (!v20)
    goto LABEL_23;
LABEL_5:
  if (v20 < 1)
  {
    __break(1u);
    return;
  }
  v58 = v19;
  v59 = a2;
  v60 = a3;
  v21 = 0;
  v64 = a4 & 0xC000000000000001;
  v22 = a4;
  do
  {
    if (v64)
      v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, a4);
    else
      v24 = *(id *)(a4 + 8 * v21 + 32);
    v25 = v24;
    v26 = objc_msgSend(v24, "fileURL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v26);

    v27 = objc_msgSend(v25, "contentType");
    static UTType._unconditionallyBridgeFromObjectiveC(_:)(v27);

    v28 = type metadata accessor for UTType(0);
    v29 = *(_QWORD *)(v28 - 8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v12, 0, 1, v28);
    URL._bridgeToObjectiveC()(v30);
    v32 = v31;
    isa = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v12, 1, v28) != 1)
    {
      isa = UTType._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v28);
    }
    v34 = objc_msgSend(objc_allocWithZone((Class)WFContextualActionFile), "initWithFileURL:type:", v32, isa);

    (*(void (**)(char *, uint64_t))(v65 + 8))(v16, v66);
    a4 = v22;
    if (v34)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
      v37 = *(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      v36 = *(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v37 >= v36 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
      v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v34);
      specialized Array._endMutation()(v23);
    }
    ++v21;
  }
  while (v20 != v21);
  swift_bridgeObjectRelease(v22);
  v43 = (_QWORD *)aBlock[0];
  a2 = v59;
  a3 = v60;
  v19 = v58;
LABEL_24:
  sub_10004F2F0(0, (unint64_t *)&unk_10064E030, WFContextualActionFile_ptr);
  v45 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v43);
  v46 = v63;
  objc_msgSend(v63, "setFiles:", v45);

  v47 = *(char **)(v19 + 16);
  if (v47)
  {
    v48 = swift_allocObject(&unk_1005DC978, 64, 7);
    *(_QWORD *)(v48 + 16) = a2;
    *(_QWORD *)(v48 + 24) = a3;
    v49 = v62;
    *(_QWORD *)(v48 + 32) = a4;
    *(_QWORD *)(v48 + 40) = v49;
    *(_BYTE *)(v48 + 48) = v61 & 1;
    *(_QWORD *)(v48 + 56) = v19;
    v50 = (void (**)(uint64_t, uint64_t))&v47[OBJC_IVAR____TtC5FilesP33_AE816C615539461ED264CC7968FD4AFF24DOCShortcutsActionRunner_completionHandler];
    v51 = *(_QWORD *)&v47[OBJC_IVAR____TtC5FilesP33_AE816C615539461ED264CC7968FD4AFF24DOCShortcutsActionRunner_completionHandler
                        + 8];
    *v50 = sub_100304498;
    v50[1] = (void (*)(uint64_t, uint64_t))v48;
    v52 = a2;
    v53 = a3;
    swift_bridgeObjectRetain(a4);
    v54 = v47;
    v55 = v49;
    swift_retain();
    swift_retain();
    swift_release(v51);
    v56 = objc_msgSend(objc_allocWithZone((Class)WFContextualActionRunnerClient), "initWithContextualAction:actionContext:", v53, v46);
    objc_msgSend(v56, "setDelegate:", v54);
    objc_msgSend(v56, "start");
    swift_release(v19);

    swift_release(v48);
  }
  else
  {
    swift_release(v19);

  }
}

void sub_1002FCFA8(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  _BOOL8 v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  Swift::String v24;
  Swift::String_optional v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  id v36;
  uint64_t v37;
  id v38;
  void *v39;
  Swift::String v40;
  Swift::String_optional v41;
  Swift::String v42;
  void *object;
  NSString v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[2];
  __int128 v56;
  __int128 v57;
  Swift::String v58;
  Swift::String v59;

  v5 = *(void **)(a1 + OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController);
  v6 = objc_msgSend(v5, "viewIfLoaded");
  if (v6
    && (v7 = v6, v8 = objc_msgSend(v6, "window"), v7, v8)
    && (v9 = objc_msgSend(v8, "windowScene"), v8, v9))
  {
    v10 = objc_msgSend(v9, "activationState");

    v11 = v10 != (id)2;
    if (!a2)
    {
LABEL_5:
      v56 = 0u;
      v57 = 0u;
      goto LABEL_13;
    }
  }
  else
  {
    v11 = 1;
    if (!a2)
      goto LABEL_5;
  }
  v12 = (void *)_convertErrorToNSError(_:)(a2);
  v13 = objc_msgSend(v12, "userInfo");

  v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v13, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  v17 = v16;
  if (!*(_QWORD *)(v14 + 16) || (v18 = sub_10007EF08(v15, v16), (v19 & 1) == 0))
  {
    v56 = 0u;
    v57 = 0u;
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v14);
    goto LABEL_13;
  }
  sub_100069BD8(*(_QWORD *)(v14 + 56) + 32 * v18, (uint64_t)&v56);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v14);
  if (!*((_QWORD *)&v57 + 1))
  {
LABEL_13:
    v20 = sub_10000CB4C((uint64_t)&v56, &qword_100642730);
    goto LABEL_14;
  }
  v20 = swift_dynamicCast(v55, &v56, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if ((_DWORD)v20)
  {
    v21 = v55[1];
    goto LABEL_16;
  }
LABEL_14:
  v22 = (id)_DocumentManagerBundle(v20);
  if (!v22)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v23 = v22;
  v58._object = (void *)0x80000001005264C0;
  v24._object = (void *)0x80000001005264A0;
  v24._countAndFlagsBits = 0x100000000000001DLL;
  v25.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v25.value._object = (void *)0xEB00000000656C62;
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  v58._countAndFlagsBits = 0xD000000000000065;
  v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, v25, (NSBundle)v23, v26, v58);

  v28 = sub_10006922C((uint64_t *)&unk_100644560);
  v29 = swift_allocObject(v28, 72, 7);
  *(_OWORD *)(v29 + 16) = xmmword_1004D9670;
  v30 = objc_msgSend(a3, "displayString");
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;

  *(_QWORD *)(v29 + 56) = &type metadata for String;
  *(_QWORD *)(v29 + 64) = sub_10006A638();
  *(_QWORD *)(v29 + 32) = v31;
  *(_QWORD *)(v29 + 40) = v33;
  String.init(format:_:)(v27._countAndFlagsBits, v27._object, v29);
  v21 = v34;
  swift_bridgeObjectRelease(v27._object);
LABEL_16:
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  v36 = objc_msgSend((id)objc_opt_self(DOCAlertController), "alertControllerWithTitle:message:preferredStyle:", 0, v35, 1);

  v38 = (id)_DocumentManagerBundle(v37);
  if (v38)
  {
    v39 = v38;
    v59._object = (void *)0xE200000000000000;
    v40._countAndFlagsBits = 19279;
    v40._object = (void *)0xE200000000000000;
    v41.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v41.value._object = (void *)0xEB00000000656C62;
    v42._countAndFlagsBits = 0;
    v42._object = (void *)0xE000000000000000;
    v59._countAndFlagsBits = 19279;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v40, v41, (NSBundle)v39, v42, v59)._object;

    v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v45 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v44, 0, 0);

    objc_msgSend(v36, "addAction:", v45);
    v46 = v36;
    v47 = objc_msgSend(v46, "actions");
    v48 = sub_10004F2F0(0, &qword_1006572A0, UIAlertAction_ptr);
    v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v47, v48);

    if ((unint64_t)v49 >> 62)
    {
      if (v49 < 0)
        v54 = v49;
      else
        v54 = v49 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v49);
      v50 = _CocoaArrayWrapper.endIndex.getter(v54);
      swift_bridgeObjectRelease(v49);
      if (v50)
      {
LABEL_19:
        v51 = v50 - 1;
        if (!__OFSUB__(v50, 1))
        {
          if ((v49 & 0xC000000000000001) == 0)
          {
            if ((v51 & 0x8000000000000000) != 0)
            {
              __break(1u);
            }
            else if (v51 < *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              v52 = *(id *)(v49 + 8 * v51 + 32);
LABEL_24:
              v53 = v52;
              swift_bridgeObjectRelease(v49);
              objc_msgSend(v46, "setPreferredAction:", v53);

              objc_msgSend(v5, "presentViewController:animated:completion:", v46, v11, 0);
              return;
            }
            __break(1u);
            goto LABEL_34;
          }
LABEL_31:
          v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v51, v49);
          goto LABEL_24;
        }
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
    }
    else
    {
      v50 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v50)
        goto LABEL_19;
    }
    v51 = swift_bridgeObjectRelease(v49);
    __break(1u);
    goto LABEL_30;
  }
LABEL_35:
  __break(1u);
}

uint64_t sub_1002FD4DC(void *a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  void *object;
  char v21;
  char v22;

  v4 = objc_msgSend(a1, "stringByDeletingPathExtension");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = objc_msgSend(a1, "pathExtension");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v10 = v9;

  v11 = String.lowercased()();
  swift_bridgeObjectRelease(v10);
  v12 = objc_msgSend(a2, "stringByDeletingPathExtension");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v16 = objc_msgSend(a2, "pathExtension");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v18 = v17;

  v19 = String.lowercased()();
  object = v19._object;
  swift_bridgeObjectRelease(v18);
  if (v5 == v13 && v7 == v15)
  {
    swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v13, v15, 0);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v7);
    if ((v21 & 1) == 0)
    {
      v22 = 0;
      goto LABEL_10;
    }
  }
  if (v11._countAndFlagsBits == v19._countAndFlagsBits && v11._object == v19._object)
  {
    v22 = 1;
    object = v11._object;
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v11._countAndFlagsBits, v11._object, v19._countAndFlagsBits, v19._object, 0);
  }
LABEL_10:
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(v11._object);
  return v22 & 1;
}

void sub_1002FD69C(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  id v35;
  id v36;
  uint64_t v37;
  void *v38;
  void *v39;
  _QWORD aBlock[5];
  _QWORD *v41;

  v38 = a3;
  v39 = a4;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(a1, "fileURL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v14);

  v16 = URL.lastPathComponent.getter(v15);
  v18 = v17;
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  swift_bridgeObjectRetain(v18);
  v20 = sub_1003038F0(a2, v16, v18);
  v21 = swift_bridgeObjectRelease_n(v18, 2);
  if (v20)
  {
    v22 = objc_msgSend(v20, "fileURL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v22);

    LOBYTE(v22) = URL.startAccessingSecurityScopedResource()();
    v19(v13, v10);
    v23 = objc_msgSend(a1, "fileURL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v23);

    LOBYTE(v23) = URL.startAccessingSecurityScopedResource()();
    v24 = ((uint64_t (*)(char *, uint64_t))v19)(v13, v10);
    __chkstk_darwin(v24);
    *(&v37 - 2) = (uint64_t)a1;
    sub_1003044CC(v20, (uint64_t)sub_1003044B4, &v37 - 4);
    sub_1002FDB10(a1, v22 & 1, v20, v23 & 1);

  }
  else
  {
    v25 = Logger.UI.unsafeMutableAddressor(v21);
    v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v25, v6);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Shortcuts: Couldn't find the original file to overwrite", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v30 = (_QWORD *)swift_allocObject(&unk_1005DC9F0, 40, 7);
    v32 = v38;
    v31 = v39;
    v30[2] = v38;
    v30[3] = 0;
    v30[4] = v31;
    aBlock[4] = sub_100304C3C;
    v41 = v30;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004A82C;
    aBlock[3] = &unk_1005DCA08;
    v33 = _Block_copy(aBlock);
    v34 = v41;
    v35 = v32;
    v36 = v31;
    swift_release(v34);
    DOCRunInMainThread(v33);
    _Block_release(v33);
  }
}

id sub_1002FDB10(void *a1, char a2, void *a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id result;
  id v13;
  id v14;
  uint64_t v15;

  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(a1, "dispose");
  if ((a2 & 1) != 0)
  {
    v13 = objc_msgSend(a3, "fileURL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v13);

    URL.stopAccessingSecurityScopedResource()();
    result = (id)(*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  if ((a4 & 1) != 0)
  {
    v14 = objc_msgSend(a1, "fileURL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v14);

    URL.stopAccessingSecurityScopedResource()();
    return (id)(*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return result;
}

id sub_1002FDC18(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  NSURL *v9;
  void *v10;
  void *v11;
  NSURL *v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  id result;
  void *v17;
  id v18;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v8 = objc_msgSend(a2, "fileURL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v8);

  URL._bridgeToObjectiveC()(v9);
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  URL._bridgeToObjectiveC()(v12);
  v14 = v13;
  v18 = 0;
  v15 = objc_msgSend(v7, "copyItemAtURL:toURL:error:", v11, v13, &v18);

  result = v18;
  if ((v15 & 1) == 0)
  {
    v17 = result;
    _convertNSErrorToError(_:)(result);

    return (id)swift_willThrow();
  }
  return result;
}

void sub_1002FDD8C(void *a1, void *a2, void *a3, void *a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  Class isa;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  int v34;
  _QWORD aBlock[5];
  uint64_t v36;

  v34 = a5;
  v33 = a4;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10006922C((uint64_t *)&unk_100644550);
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = swift_allocObject(v12, v14 + *(_QWORD *)(v9 + 72), v13 | 7);
  *(_OWORD *)(v15 + 16) = xmmword_1004D9670;
  v16 = objc_msgSend(a1, "fileURL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v16);

  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v15 + v14, v11, v8);
  v17 = objc_allocWithZone((Class)type metadata accessor for DOCMoveOperation());
  v18 = a2;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  v20 = objc_msgSend(v17, "initWithURLs:destinationFolder:", isa, v18);

  objc_msgSend(v20, "setLastUsageUpdatePolicy:", 2);
  objc_msgSend(v20, "setShouldBounceOnCollision:", 1);
  v21 = objc_msgSend(a1, "fileURL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v21);

  LOBYTE(v21) = URL.startAccessingSecurityScopedResource()();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v22 = swift_allocObject(&unk_1005DCB08, 65, 7);
  *(_QWORD *)(v22 + 16) = a1;
  *(_BYTE *)(v22 + 24) = v21 & 1;
  v23 = v33;
  *(_QWORD *)(v22 + 32) = a3;
  *(_QWORD *)(v22 + 40) = v23;
  *(_QWORD *)(v22 + 48) = v20;
  *(_QWORD *)(v22 + 56) = v18;
  *(_BYTE *)(v22 + 64) = v34;
  aBlock[4] = sub_1003049F8;
  v36 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10015936C;
  aBlock[3] = &unk_1005DCB20;
  v24 = _Block_copy(aBlock);
  v25 = v36;
  v26 = v20;
  v27 = v18;
  v28 = v26;
  v29 = a1;
  v30 = a3;
  v31 = v23;
  swift_release(v25);
  objc_msgSend(v28, "setActionCompletionBlock:", v24);
  _Block_release(v24);

  v32 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
  objc_msgSend(v32, "scheduleAction:", v28);

}

id sub_1002FE048(uint64_t a1, void *a2, int a3, char *a4, void *a5, void *a6, void *a7, char a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  char *v31;
  id v32;
  _QWORD *v33;
  const void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  _QWORD *v54;
  void *v55;
  _QWORD *v56;
  id v57;
  id v58;
  id v59;
  id result;
  id v61;
  char *v62;
  uint64_t v63;
  void *v64;
  char *v65;
  int v66;
  void **aBlock;
  uint64_t v68;
  uint64_t (*v69)(uint64_t);
  void *v70;
  void (*v71)();
  _QWORD *v72;

  v66 = a3;
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v65 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v63 - v19;
  if (a1)
  {
    v21 = swift_errorRetain(a1);
    v22 = *(id *)DOCLog.UI.unsafeMutableAddressor(v21);
    v23 = static os_log_type_t.error.getter(v22);
    v24 = sub_10006922C((uint64_t *)&unk_100644560);
    v25 = swift_allocObject(v24, 72, 7);
    *(_OWORD *)(v25 + 16) = xmmword_1004D9670;
    v26 = _convertErrorToNSError(_:)(a1);
    v63 = v16;
    v64 = a2;
    v27 = v15;
    *(_QWORD *)(v25 + 56) = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
    *(_QWORD *)(v25 + 64) = sub_100083450((unint64_t *)&qword_1006448B0, (unint64_t *)&qword_100644570, NSError_ptr);
    *(_QWORD *)(v25 + 32) = v26;
    os_log(_:dso:log:type:_:)("Error: FPItemManager failed to move completed output in to place. %@", 68, 2, &_mh_execute_header, v22, v23, v25);

    swift_bridgeObjectRelease(v25);
    v28 = (_QWORD *)swift_allocObject(&unk_1005DCBA8, 40, 7);
    v28[2] = a4;
    v28[3] = 0;
    v28[4] = a5;
    v71 = sub_100304C3C;
    v72 = v28;
    aBlock = _NSConcreteStackBlock;
    v68 = 1107296256;
    v69 = sub_10004A82C;
    v70 = &unk_1005DCBC0;
    v29 = _Block_copy(&aBlock);
    v30 = v72;
    v31 = a4;
    v32 = a5;
    v33 = v30;
    v15 = v27;
    v16 = v63;
    swift_release(v33);
    DOCRunInMainThread(v29);
    v34 = v29;
    a2 = v64;
    _Block_release(v34);
    swift_errorRelease(a1);
    goto LABEL_14;
  }
  v35 = objc_msgSend(a6, "transferResults");
  if (v35)
  {
    v36 = v35;
    v37 = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    v38 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v36, &type metadata for AnyHashable, v37, &protocol witness table for AnyHashable);

    v39 = a2;
    v40 = objc_msgSend(a2, "fileURL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v40);

    v41 = v65;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v20, v15);
    v42 = sub_10005A360(&qword_10064D980, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    AnyHashable.init<A>(_:)(v41, v15, v42);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
    if (!*(_QWORD *)(v38 + 16) || (v43 = sub_100067654((uint64_t)&aBlock), (v44 & 1) == 0))
    {
      swift_bridgeObjectRelease(v38);
      sub_100067748((uint64_t)&aBlock);
LABEL_11:
      a2 = v39;
      goto LABEL_14;
    }
    v45 = *(id *)(*(_QWORD *)(v38 + 56) + 8 * v43);
    swift_bridgeObjectRelease(v38);
    sub_100067748((uint64_t)&aBlock);
    a2 = v39;
    if ((a8 & 1) != 0)
    {
      v46 = *(_QWORD *)&a4[OBJC_IVAR____TtC5Files16DOCActionContext_actionReporting];
      if (v46)
      {
        v47 = v16;
        v48 = v15;
        v49 = (void *)objc_opt_self(DOCTabbedBrowserViewController);
        v50 = *(void **)&a4[OBJC_IVAR____TtC5Files16DOCActionContext_configuration];
        v51 = a7;
        swift_unknownObjectRetain(v46);
        v52 = objc_msgSend(v50, "sceneIdentifier");
        v53 = objc_msgSend(v49, "globalTabbedBrowserControllerForIdentifier:", v52);

        if (v53)
        {
          v54 = (_QWORD *)swift_allocObject(&unk_1005DCB58, 64, 7);
          v54[2] = v53;
          v54[3] = v51;
          v54[4] = v46;
          v54[5] = v45;
          v54[6] = 0;
          v54[7] = 0;
          v71 = (void (*)())sub_100303C78;
          v72 = v54;
          aBlock = _NSConcreteStackBlock;
          v68 = 1107296256;
          v69 = sub_10004A82C;
          v70 = &unk_1005DCB70;
          v55 = _Block_copy(&aBlock);
          v56 = v72;
          v57 = v45;
          v58 = v51;
          swift_unknownObjectRetain(v46);
          v59 = v53;
          swift_release(v56);
          DOCRunInMainThread(v55);
          _Block_release(v55);

          swift_unknownObjectRelease(v46);
        }
        else
        {

          swift_unknownObjectRelease(v46);
        }
        v15 = v48;
        v16 = v47;
        goto LABEL_11;
      }
    }
    else
    {
      sub_100303B00((uint64_t)v45, (uint64_t)a4, 0, 0);
    }

  }
LABEL_14:
  result = objc_msgSend(a2, "dispose");
  if ((v66 & 1) != 0)
  {
    v61 = objc_msgSend(a2, "fileURL");
    v62 = v65;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v61);

    URL.stopAccessingSecurityScopedResource()();
    return (id)(*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v62, v15);
  }
  return result;
}

void sub_1002FE578(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, char a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char **v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  char **v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  _QWORD *v40;
  id v41;
  id v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _QWORD aBlock[5];
  _QWORD *v56;

  v50 = a5;
  v51 = a6;
  v14 = type metadata accessor for Logger(0);
  v52 = *(_QWORD *)(v14 - 8);
  v53 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = a3;
  if (a1)
  {
    if ((unint64_t)a1 >> 62)
    {
      if (a1 >= 0)
        v43 = a1 & 0xFFFFFFFFFFFFFF8;
      else
        v43 = a1;
      swift_bridgeObjectRetain(a1);
      v17 = _CocoaArrayWrapper.endIndex.getter(v43);
      if (v17)
        goto LABEL_4;
    }
    else
    {
      v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (v17)
      {
LABEL_4:
        if (v17 < 1)
        {
          __break(1u);
          return;
        }
        v46 = a8;
        v18 = 0;
        v19 = a1 & 0xC000000000000001;
        v20 = &selRef_setAccessibilityValue_;
        v48 = a7 & 1;
        v49 = a1 & 0xC000000000000001;
        do
        {
          if (v19)
            v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, a1);
          else
            v21 = *(id *)(a1 + 8 * v18 + 32);
          v22 = v21;
          v23 = objc_msgSend(a4, v20[298]);
          if (v23 == (id)1)
          {
            sub_1002FDD8C(v22, v51, a3, a4, v48);
          }
          else if (v23)
          {
            v24 = v17;
            v25 = a4;
            v26 = v20;
            v27 = Logger.UI.unsafeMutableAddressor(v23);
            v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 16))(v16, v27, v53);
            v29 = Logger.logObject.getter(v28);
            v30 = static os_log_type_t.error.getter(v29);
            if (os_log_type_enabled(v29, v30))
            {
              v31 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v31 = 0;
              _os_log_impl((void *)&_mh_execute_header, v29, v30, "Error: unsupported shortcuts result file operation type", v31, 2u);
              v32 = v31;
              a3 = v47;
              swift_slowDealloc(v32, -1, -1);
            }

            (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v53);
            v20 = v26;
            a4 = v25;
            v17 = v24;
            v19 = v49;
          }
          else
          {
            sub_1002FD69C(v22, v50, a3, a4);
          }

          ++v18;
        }
        while (v17 != v18);
        swift_bridgeObjectRelease(a1);
        a8 = v46;
        goto LABEL_27;
      }
    }
    swift_bridgeObjectRelease(a1);
LABEL_27:
    swift_beginAccess(a8 + 16, aBlock, 1, 0);
    v44 = *(void **)(a8 + 16);
    *(_QWORD *)(a8 + 16) = 0;

    return;
  }
  if (!a2
    || (aBlock[0] = a2,
        swift_errorRetain(a2),
        v33 = sub_10006922C((uint64_t *)&unk_100643490),
        v34 = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr),
        (swift_dynamicCast(&v54, aBlock, v33, v34, 6) & 1) == 0)
    || (v35 = v54, v36 = NSError.isUserCancelledError.getter(), v35, (v36 & 1) == 0))
  {
    v37 = (_QWORD *)swift_allocObject(&unk_1005DC9A0, 40, 7);
    v38 = v47;
    v37[2] = v47;
    v37[3] = a2;
    v37[4] = a4;
    aBlock[4] = sub_100304C3C;
    v56 = v37;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004A82C;
    aBlock[3] = &unk_1005DC9B8;
    v39 = _Block_copy(aBlock);
    v40 = v56;
    swift_errorRetain(a2);
    v41 = v38;
    v42 = a4;
    swift_release(v40);
    DOCRunInMainThread(v39);
    _Block_release(v39);
  }
}

uint64_t sub_1002FE8E8(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t ObjectType;
  uint64_t v4;

  if (a1)
  {
    ObjectType = swift_getObjectType(a1, a2);
    v4 = DOCNode.fpfs_syncFetchFPItem()(ObjectType);
  }
  else
  {
    v4 = 0;
  }
  a2(v4);
  return swift_unknownObjectRelease(v4);
}

id sub_1002FE93C(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  id v7;
  NSString v8;

  v1 = objc_msgSend(a1, "iconSymbolName");
  if (!v1)
    goto LABEL_5;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v5 = v4;

  swift_bridgeObjectRetain(v5);
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v7 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v6);

  if (!v7)
  {
    sub_10004F2F0(0, (unint64_t *)&qword_10064E0C0, UIImage_ptr);
    v7 = (id)static UIImage.doc_executablesFrameworkImage(named:)(v3, v5);
    swift_bridgeObjectRelease(v5);
    if (v7)
      return v7;
LABEL_5:
    v8 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v8);

    return v7;
  }
  swift_bridgeObjectRelease(v5);
  return v7;
}

BOOL sub_1002FEA64(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void *v20;
  _BOOL8 v21;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  Class isa;
  id v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  Class v56;
  id v57;
  void *v58;
  id v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  __int128 v78;
  __int128 v79;

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000271D4(a1, (uint64_t)&v78, &qword_100642730);
  if (!*((_QWORD *)&v79 + 1))
    goto LABEL_23;
  v9 = sub_10006922C((uint64_t *)&unk_1006444E0);
  if ((swift_dynamicCast(&v77, &v78, (char *)&type metadata for Any + 8, v9, 6) & 1) == 0)
    return 0;
  v10 = v77;
  if (*(_QWORD *)(v77 + 16) && (v11 = sub_10007EF08(0x7365646F4E636F64, 0xE800000000000000), (v12 & 1) != 0))
  {
    sub_100069BD8(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)&v78);
  }
  else
  {
    v78 = 0u;
    v79 = 0u;
  }
  swift_bridgeObjectRelease(v10);
  if (!*((_QWORD *)&v79 + 1))
  {
LABEL_23:
    sub_10000CB4C((uint64_t)&v78, &qword_100642730);
    return 0;
  }
  v13 = sub_10006922C((uint64_t *)&unk_100643CB0);
  if ((swift_dynamicCast(&v77, &v78, (char *)&type metadata for Any + 8, v13, 6) & 1) == 0)
    return 0;
  v74 = a3;
  v14 = v77;
  v15 = v77 >> 62;
  if (!(v77 >> 62))
  {
    v16 = *(_QWORD *)((v77 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v16)
    {
      v76 = 0;
      v72 = v5;
      v73 = v8;
      v71 = v6;
      swift_bridgeObjectRetain(v77);
      goto LABEL_12;
    }
    goto LABEL_59;
  }
LABEL_32:
  if (v14 < 0)
    v26 = v14;
  else
    v26 = v14 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v14);
  v27 = _CocoaArrayWrapper.endIndex.getter(v26);
  swift_bridgeObjectRelease(v14);
  if (v27 <= 0)
  {
LABEL_59:
    swift_bridgeObjectRelease(v14);
    return 0;
  }
  v76 = v15;
  v72 = v5;
  v73 = v8;
  v71 = v6;
  swift_bridgeObjectRetain(v14);
  v16 = _CocoaArrayWrapper.endIndex.getter(v26);
  if (!v16)
  {
    swift_bridgeObjectRelease(v14);
    v24 = 0;
    goto LABEL_38;
  }
LABEL_12:
  v15 = v14 & 0xC000000000000001;
  v5 = 4;
  do
  {
    v6 = v5 - 4;
    if (v15)
    {
      v17 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v14);
      v18 = v5 - 3;
      if (__OFADD__(v6, 1))
        goto LABEL_31;
    }
    else
    {
      v17 = *(void **)(v14 + 8 * v5);
      swift_unknownObjectRetain(v17);
      v18 = v5 - 3;
      if (__OFADD__(v6, 1))
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }
    if ((objc_msgSend(v17, "isTrashed") & 1) != 0)
    {
      swift_bridgeObjectRelease_n(v14, 2);
      swift_unknownObjectRelease(v17);
      return 0;
    }
    v19 = objc_msgSend(v17, "isAnyParentTrashed");
    swift_unknownObjectRelease(v17);
    if ((v19 & 1) != 0)
    {
LABEL_58:
      swift_bridgeObjectRelease_n(v14, 2);
      return 0;
    }
    ++v5;
  }
  while (v18 != v16);
  swift_bridgeObjectRelease(v14);
  if (v15)
  {
    swift_bridgeObjectRetain(v14);
    v20 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
    swift_bridgeObjectRelease(v14);
  }
  else
  {
    if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
      __break(1u);
    v20 = *(void **)(v14 + 32);
    swift_unknownObjectRetain(v20);
  }
  v23 = v76;
  v24 = (char *)objc_msgSend(v20, "providerDomainID");
  swift_unknownObjectRelease(v20);
  if (!v23)
  {
    v76 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    v25 = v24;
    swift_bridgeObjectRetain(v14);
    goto LABEL_42;
  }
LABEL_38:
  if (v14 < 0)
    v28 = v14;
  else
    v28 = v14 & 0xFFFFFFFFFFFFFF8;
  v29 = v24;
  swift_bridgeObjectRetain(v14);
  v76 = _CocoaArrayWrapper.endIndex.getter(v28);
LABEL_42:
  if (v76)
  {
    v75 = v14 & 0xC000000000000001;
    v30 = 4;
    while (1)
    {
      v32 = v30 - 4;
      if (v75)
      {
        v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v30 - 4, v14);
        v34 = v30 - 3;
        if (__OFADD__(v32, 1))
          goto LABEL_68;
      }
      else
      {
        v33 = *(id *)(v14 + 8 * v30);
        swift_unknownObjectRetain(v33);
        v34 = v30 - 3;
        if (__OFADD__(v32, 1))
        {
LABEL_68:
          __break(1u);
LABEL_69:
          if (v14 < 0)
            v70 = v14;
          else
            v70 = v14 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v14);
          v60 = _CocoaArrayWrapper.endIndex.getter(v70);
          goto LABEL_66;
        }
      }
      v35 = objc_msgSend(v33, "providerDomainID");
      v36 = v35;
      if (!v24)
      {
        swift_bridgeObjectRelease_n(v14, 2);
        swift_unknownObjectRelease(v33);

        return 0;
      }
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      v39 = v38;
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v8 = v24;
      if (v37 == v40 && v39 == v41)
      {
        v31 = v24;
        swift_unknownObjectRelease(v33);

        swift_bridgeObjectRelease_n(v39, 2);
      }
      else
      {
        v43 = v41;
        v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, v40, v41, 0);
        v45 = v8;
        swift_unknownObjectRelease(v33);

        swift_bridgeObjectRelease(v39);
        swift_bridgeObjectRelease(v43);
        v24 = v8;
        if ((v44 & 1) == 0)
        {

          goto LABEL_58;
        }
      }
      ++v30;
      if (v34 == v76)
      {

        swift_bridgeObjectRelease(v14);
        goto LABEL_63;
      }
    }
  }
  swift_bridgeObjectRelease(v14);

LABEL_63:
  v33 = objc_msgSend(objc_allocWithZone((Class)WFContextualActionContext), "initWithSurface:", 1);
  v8 = v73;
  v46 = URL.init(fileURLWithPath:isDirectory:)(0, 0xE000000000000000, 0);
  __chkstk_darwin(v46);
  *(&v71 - 2) = (uint64_t)v8;
  v47 = sub_1002F5628((void (*)(uint64_t *__return_ptr, uint64_t *))sub_1003043E8, (uint64_t)(&v71 - 4), v14);
  swift_bridgeObjectRelease(v14);
  sub_10004F2F0(0, (unint64_t *)&unk_10064E030, WFContextualActionFile_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v47);
  objc_msgSend(v33, "setFiles:", isa);

  v49 = objc_msgSend((id)objc_opt_self(VCVoiceShortcutClient), "standardClient");
  v50 = sub_10006922C((uint64_t *)&unk_1006441A0);
  v51 = swift_allocObject(v50, 40, 7);
  *(_OWORD *)(v51 + 16) = xmmword_1004D9B40;
  v52 = v74;
  *(_QWORD *)(v51 + 32) = v74;
  *(_QWORD *)&v78 = v51;
  specialized Array._endMutation()(v51);
  v53 = v78;
  v54 = sub_10004F2F0(0, &qword_10064E0A8, WFContextualAction_ptr);
  v55 = v52;
  v56 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v53);
  *(_QWORD *)&v78 = 0;
  v57 = objc_msgSend(v49, "filteredContextualActions:forContext:byType:error:", v56, v33, 0, &v78);

  v58 = (void *)v78;
  if (!v57)
  {
    v61 = (id)v78;
    v62 = _convertNSErrorToError(_:)(v58);

    v64 = swift_willThrow(v63);
    v65 = *(id *)DOCLog.UI.unsafeMutableAddressor(v64);
    v66 = static os_log_type_t.error.getter(v65);
    v67 = sub_10006922C((uint64_t *)&unk_100644560);
    v68 = swift_allocObject(v67, 72, 7);
    *(_OWORD *)(v68 + 16) = xmmword_1004D9670;
    v69 = _convertErrorToNSError(_:)(v62);
    *(_QWORD *)(v68 + 56) = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
    *(_QWORD *)(v68 + 64) = sub_100083450((unint64_t *)&qword_1006448B0, (unint64_t *)&qword_100644570, NSError_ptr);
    *(_QWORD *)(v68 + 32) = v69;
    os_log(_:dso:log:type:_:)("Error: Shortcuts failed to filter actions with error: %@", 56, 2, &_mh_execute_header, v65, v66, v68);

    swift_bridgeObjectRelease(v68);
    swift_errorRelease(v62);

    (*(void (**)(char *, uint64_t))(v71 + 8))(v8, v72);
    return 0;
  }
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v57, v54);
  v59 = v58;

  if ((unint64_t)v14 >> 62)
    goto LABEL_69;
  v60 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v14);
LABEL_66:

  swift_bridgeObjectRelease(v14);
  v21 = v60 != 0;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v8, v72);
  swift_bridgeObjectRelease(v14);
  return v21;
}

uint64_t sub_1002FF288@<X0>(void **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  NSURL *v27;
  char *v28;
  void *v29;
  void *v30;
  Class isa;
  id v32;
  uint64_t result;
  uint64_t v34;
  _QWORD *v35;

  v34 = a2;
  v35 = a3;
  v4 = sub_10006922C(&qword_100643EC0);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v34 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v34 - v18;
  v20 = *a1;
  v21 = objc_msgSend(v20, "nodeURL");
  if (v21)
  {
    v22 = v21;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v21);

    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v17, v10);
    v23 = 0;
  }
  else
  {
    v23 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, v23, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v34, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v14, v10);
    sub_10000CB4C((uint64_t)v9, &qword_100643470);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v9, v10);
  }
  v24 = objc_msgSend(v20, "contentType", v34);
  static UTType._unconditionallyBridgeFromObjectiveC(_:)(v24);

  v25 = type metadata accessor for UTType(0);
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v6, 0, 1, v25);
  URL._bridgeToObjectiveC()(v27);
  v28 = v19;
  v30 = v29;
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v6, 1, v25) != 1)
  {
    isa = UTType._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v25);
  }
  v32 = objc_msgSend(objc_allocWithZone((Class)WFContextualActionFile), "initWithFileURL:type:", v30, isa);

  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v28, v10);
  *v35 = v32;
  return result;
}

void sub_1002FF578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t ObjectType;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t All;
  uint64_t v14;
  Class isa;
  char *v16;
  _BYTE v17[32];

  sub_100069BD8(a2, (uint64_t)v17);
  v5 = type metadata accessor for DOCActionContext();
  if ((swift_dynamicCast(&v16, v17, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
  {
    v7 = v16;
    v8 = *(void **)&v16[OBJC_IVAR____TtC5Files16DOCActionContext_actionReporting];
    if (v8 && a3)
    {
      ObjectType = swift_getObjectType(a3, v6);
      swift_unknownObjectRetain(v8);
      v10 = DOCNode.fpfs_syncFetchFPItem()(ObjectType);
      if (v10)
      {
        v11 = (void *)v10;
        v12 = sub_10006922C((uint64_t *)&unk_1006424B0);
        All = Array<A>.fpfs_syncFetchAllFPItems()(a1, v12);
        if (All)
        {
          v14 = All;
          sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v14);
          objc_msgSend(v8, "createNewFolderIn:moving:", v11, isa);

          swift_unknownObjectRelease(v8);
        }
        else
        {

          swift_unknownObjectRelease(v8);
        }
      }
      else
      {

        swift_unknownObjectRelease(v8);
      }
    }
    else
    {

    }
  }
}

uint64_t sub_1002FF6D4(uint64_t a1, uint64_t a2)
{
  return sub_1002FBFF4(a1, a2, (SEL *)&selRef_isAppContainer);
}

void sub_1002FF6E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  id v8;

  if (!((unint64_t)a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v2)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease(a1);
    return;
  }
  if (a1 < 0)
    v7 = a1;
  else
    v7 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v7))
    goto LABEL_13;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v3 = *(_QWORD *)(a1 + 32);
    swift_unknownObjectRetain(v3);
  }
  swift_bridgeObjectRelease(a1);
  ObjectType = swift_getObjectType(v3, v4);
  v6 = DOCNode.documentAttributes.getter(ObjectType);
  if (v6)
  {
    v8 = (id)v6;
    SYDocumentAttributes.performReturnToDocumentRequest()();
    swift_unknownObjectRelease(v3);

  }
  else
  {
    swift_unknownObjectRelease(v3);
  }
}

void sub_1002FF7E8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;

  if (!((unint64_t)a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v2)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease(a1);
    return;
  }
  if (a1 < 0)
    v12 = a1;
  else
    v12 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v12))
    goto LABEL_13;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v3 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v3 = *(void **)(a1 + 32);
    swift_unknownObjectRetain(v3);
  }
  swift_bridgeObjectRelease(a1);
  ObjectType = swift_getObjectType(v3, v4);
  v6 = DOCNode.documentAttributes.getter(ObjectType);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = swift_allocObject(&unk_1005DBDE8, 32, 7);
    *(_QWORD *)(v8 + 16) = v3;
    *(_QWORD *)(v8 + 24) = v7;
    v13[4] = sub_100300B00;
    v14 = v8;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_100175118;
    v13[3] = &unk_1005DBE00;
    v9 = _Block_copy(v13);
    v10 = v14;
    swift_unknownObjectRetain(v3);
    v11 = v7;
    swift_release(v10);
    objc_msgSend(v3, "fetchURL:", v9);
    _Block_release(v9);
    swift_unknownObjectRelease(v3);

  }
  else
  {
    swift_unknownObjectRelease(v3);
  }
}

uint64_t sub_1002FF978(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000271D4(a1, (uint64_t)v8, &qword_100643470);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    result = sub_10000CB4C((uint64_t)v8, &qword_100643470);
    if (a2)
    {
      v14 = swift_errorRetain(a2);
      v15 = *(id *)DOCLog.UI.unsafeMutableAddressor(v14);
      v16 = static os_log_type_t.error.getter(v15);
      v17 = sub_10006922C((uint64_t *)&unk_100644560);
      v18 = swift_allocObject(v17, 112, 7);
      *(_OWORD *)(v18 + 16) = xmmword_1004D4CE0;
      v19 = objc_msgSend(a3, "description");
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;

      *(_QWORD *)(v18 + 56) = &type metadata for String;
      *(_QWORD *)(v18 + 64) = sub_10006A638();
      *(_QWORD *)(v18 + 32) = v20;
      *(_QWORD *)(v18 + 40) = v22;
      v23 = _convertErrorToNSError(_:)(a2);
      *(_QWORD *)(v18 + 96) = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
      *(_QWORD *)(v18 + 104) = sub_100083450((unint64_t *)&qword_1006448B0, (unint64_t *)&qword_100644570, NSError_ptr);
      *(_QWORD *)(v18 + 72) = v23;
      os_log(_:dso:log:type:_:)("Could not fetch URL for node %@: %@", 35, 2, &_mh_execute_header, v15, v16, v18);

      swift_bridgeObjectRelease(v18);
      return swift_errorRelease(a2);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    SYDocumentAttributes.performReplyToSenderRequest(with:)(v12);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return result;
}

uint64_t sub_1002FFBC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    result = _CocoaArrayWrapper.endIndex.getter(v8);
    if (result)
      goto LABEL_3;
    return swift_bridgeObjectRelease(a1);
  }
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(a1);
  if (!v2)
    return swift_bridgeObjectRelease(a1);
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v4 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v4 = *(void **)(a1 + 32);
    swift_unknownObjectRetain(v4);
LABEL_6:
    swift_bridgeObjectRelease(a1);
    v5 = swift_allocObject(&unk_1005DBD98, 24, 7);
    *(_QWORD *)(v5 + 16) = v4;
    v9[4] = sub_100300AE8;
    v10 = v5;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1107296256;
    v9[2] = sub_100175118;
    v9[3] = &unk_1005DBDB0;
    v6 = _Block_copy(v9);
    v7 = v10;
    swift_unknownObjectRetain(v4);
    swift_release(v7);
    objc_msgSend(v4, "fetchURL:", v6);
    _Block_release(v6);
    return swift_unknownObjectRelease(v4);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002FFD18(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  NSURL *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  id v29;
  uint64_t (*v30)(_BYTE *, uint64_t);
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[16];
  id v44;

  v6 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v6);
  v8 = &v43[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v43[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000271D4(a1, (uint64_t)v8, &qword_100643470);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    result = sub_10000CB4C((uint64_t)v8, &qword_100643470);
    if (a2)
    {
      v14 = swift_errorRetain(a2);
      v15 = *(id *)DOCLog.UI.unsafeMutableAddressor(v14);
      v16 = static os_log_type_t.error.getter(v15);
      v17 = sub_10006922C((uint64_t *)&unk_100644560);
      v18 = swift_allocObject(v17, 112, 7);
      *(_OWORD *)(v18 + 16) = xmmword_1004D4CE0;
      v19 = objc_msgSend(a3, "description");
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;

      *(_QWORD *)(v18 + 56) = &type metadata for String;
      *(_QWORD *)(v18 + 64) = sub_10006A638();
      *(_QWORD *)(v18 + 32) = v20;
      *(_QWORD *)(v18 + 40) = v22;
      v23 = _convertErrorToNSError(_:)(a2);
      *(_QWORD *)(v18 + 96) = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
      *(_QWORD *)(v18 + 104) = sub_100083450((unint64_t *)&qword_1006448B0, (unint64_t *)&qword_100644570, NSError_ptr);
      *(_QWORD *)(v18 + 72) = v23;
      os_log(_:dso:log:type:_:)("Could not fetch URL for node %@: %@", 35, 2, &_mh_execute_header, v15, v16, v18);

      swift_bridgeObjectRelease(v18);
      return swift_errorRelease(a2);
    }
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v12, v8, v9);
    v24 = (void *)objc_opt_self(SYDocumentAttributes);
    URL._bridgeToObjectiveC()(v25);
    v27 = v26;
    v44 = 0;
    v28 = objc_msgSend(v24, "removeDocumentAttributesForFileAtURL:error:", v26, &v44);

    v29 = v44;
    if (v28)
    {
      v30 = *(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8);
      v31 = v44;
      return v30(v12, v9);
    }
    else
    {
      v32 = v44;
      v33 = _convertNSErrorToError(_:)(v29);

      v35 = swift_willThrow(v34);
      v36 = *(id *)DOCLog.UI.unsafeMutableAddressor(v35);
      v37 = static os_log_type_t.error.getter(v36);
      v38 = sub_10006922C((uint64_t *)&unk_100644560);
      v39 = swift_allocObject(v38, 112, 7);
      *(_OWORD *)(v39 + 16) = xmmword_1004D4CE0;
      URL._bridgeToObjectiveC()((NSURL *)&off_1004D4000);
      v41 = v40;
      *(_QWORD *)(v39 + 56) = sub_10004F2F0(0, (unint64_t *)&qword_1006533E0, NSURL_ptr);
      *(_QWORD *)(v39 + 64) = sub_100083450((unint64_t *)&qword_100646B10, (unint64_t *)&qword_1006533E0, NSURL_ptr);
      *(_QWORD *)(v39 + 32) = v41;
      v42 = _convertErrorToNSError(_:)(v33);
      *(_QWORD *)(v39 + 96) = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
      *(_QWORD *)(v39 + 104) = sub_100083450((unint64_t *)&qword_1006448B0, (unint64_t *)&qword_100644570, NSError_ptr);
      *(_QWORD *)(v39 + 72) = v42;
      os_log(_:dso:log:type:_:)("Could not remove Synapse attributes for file at %@: %@", 54, 2, &_mh_execute_header, v36, v37, v39);
      swift_errorRelease(v33);

      swift_bridgeObjectRelease(v39);
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
    }
  }
  return result;
}

uint64_t sub_10030010C(NSString *a1, NSURL *a2, void *a3, void (*a4)(char *), void *a5, uint64_t *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *clients;
  Class isa;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  NSURL v38;
  void (*v39)(char *);
  uint64_t *v40;
  id v41;

  v39 = a4;
  v40 = a6;
  v38._clients = a3;
  v38._reserved = a5;
  v8 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v8);
  v38.super.isa = (Class)((char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v38 - v19;
  v38._urlString = a1;
  URL._bridgeToObjectiveC()(&v38);
  v22 = v21;
  v41 = 0;
  v38._baseURL = a2;
  v23 = -[NSURL URLForDirectory:inDomain:appropriateForURL:create:error:](a2, "URLForDirectory:inDomain:appropriateForURL:create:error:", 99, 1, v21, 1, &v41);

  v24 = v41;
  if (v23)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v25 = v24;

    v27 = UUID.init()(v26);
    v28 = UUID.uuidString.getter(v27);
    v30 = v29;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    URL.appendingPathComponent(_:)(v28, v30);
    swift_bridgeObjectRelease(v30);
    clients = v38._clients;
    sub_10000CB4C((uint64_t)v38._clients, &qword_100643470);
    (*(void (**)(void *, char *, uint64_t))(v15 + 16))(clients, v20, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(clients, 0, 1, v14);
    v39(v18);
    isa = v38.super.isa;
    NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)(v38._urlString, v18, 0, 0, 0);
    sub_10000CB4C((uint64_t)isa, &qword_100643470);
    v36 = *(void (**)(char *, uint64_t))(v15 + 8);
    v36(v18, v14);
    return ((uint64_t (*)(char *, uint64_t))v36)(v20, v14);
  }
  else
  {
    v33 = v41;
    v34 = _convertNSErrorToError(_:)(v24);

    swift_willThrow();
    v35 = *v40;
    *v40 = v34;
    return swift_errorRelease(v35);
  }
}

void sub_1003003FC(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(char *, _QWORD, __n128), uint64_t a6)
{
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  id v16;
  char *v17;
  void **v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  __n128 v29;
  _BYTE v31[24];

  v12 = sub_10006922C(&qword_100643470);
  v13 = __chkstk_darwin(v12);
  v15 = &v31[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = objc_msgSend(a1, "effectiveFullBrowser", v13);
  v17 = (char *)objc_msgSend(v16, "effectiveBrowserViewController");

  if (v17)
  {
    v18 = (void **)&v17[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
    swift_beginAccess(&v17[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v31, 0, 0);
    v19 = *v18;
    if (v19
      && (v20 = type metadata accessor for DOCItemCollectionViewController(0),
          (v21 = swift_dynamicCastClass(v19, v20)) != 0))
    {
      v22 = v21;
      v23 = v19;

      v24 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_performingBatchSelection;
      if ((*(_BYTE *)(v22 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_performingBatchSelection) & 1) == 0)
      {
        *(_BYTE *)(v22 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_performingBatchSelection) = 1;
        sub_10009A978(0, (uint64_t)_swiftEmptyArrayStorage);
        *(_BYTE *)(v22 + v24) = 0;
      }
    }
    else
    {
      v23 = v17;
    }

  }
  v25 = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
  v26 = (void *)DOCNode.sourceIdentifier.getter(v25);
  v27 = objc_msgSend(objc_allocWithZone((Class)DOCConcreteLocation), "initWithSourceIdentifier:node:", v26, a2);

  objc_msgSend(a3, "didSelectItem:atParentLocation:wasAlreadySelected:onlyRevealIfColumn:", a4, v27, 0, 1);
  if (a5)
  {
    v28 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v15, 1, 1, v28);
    v29 = swift_retain();
    a5(v15, 0, v29);
    sub_100087534((uint64_t)a5, a6);

    sub_10000CB4C((uint64_t)v15, &qword_100643470);
  }
  else
  {

  }
}

uint64_t sub_100300630(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  char *v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v10 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v13);
  v17 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v16);
  if (!a2)
  {
    v20 = (char *)&v30 - v19;
    sub_1000271D4(a1, (uint64_t)v12, &qword_100643470);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    {
      return sub_10000CB4C((uint64_t)v12, &qword_100643470);
    }
    else
    {
      v21 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
      v31 = v20;
      v21(v20, v12, v13);
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v20, v13);
      v22 = *(unsigned __int8 *)(v14 + 80);
      v23 = (v22 + 24) & ~v22;
      v24 = (v15 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
      v25 = swift_allocObject(&unk_1005DBFA0, v24 + 16, v22 | 7);
      *(_QWORD *)(v25 + 16) = a3;
      v21((char *)(v25 + v23), v17, v13);
      v26 = (uint64_t *)(v25 + v24);
      *v26 = a4;
      v26[1] = a5;
      aBlock[4] = sub_100303D48;
      v33 = v25;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10004A82C;
      aBlock[3] = &unk_1005DBFB8;
      v27 = _Block_copy(aBlock);
      v28 = v33;
      v29 = a3;
      sub_10008BA00(a4, a5);
      swift_release(v28);
      DOCRunInMainThread(v27);
      _Block_release(v27);
      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v31, v13);
    }
  }
  return result;
}

void sub_100300854(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, NSURL *a4@<X8>)
{
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[5];
  uint64_t v12;

  URL._bridgeToObjectiveC()(a4);
  v8 = v7;
  if (a2)
  {
    v11[4] = a2;
    v12 = a3;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100175118;
    v11[3] = &unk_1005DBFE0;
    v9 = _Block_copy(v11);
    v10 = v12;
    swift_retain();
    swift_release(v10);
  }
  else
  {
    v9 = 0;
  }
  objc_msgSend(a1, "revealDocumentAtURL:importIfNeeded:openDocument:revealContents:updateLastUsedDate:completion:", v8, 0, 0, 0, 0, v9);
  _Block_release(v9);

}

id sub_100300A48()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DOCShortcutsActionRunner();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DOCShortcutsActionRunner()
{
  return objc_opt_self(_TtC5FilesP33_AE816C615539461ED264CC7968FD4AFF24DOCShortcutsActionRunner);
}

uint64_t sub_100300AB0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100300ADC()
{
  uint64_t *v0;

  return sub_1002F5BE0(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100300AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1002FFD18(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_100300AF0()
{
  return sub_100304324((void (*)(_QWORD))&_swift_unknownObjectRelease, 32);
}

uint64_t sub_100300B00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1002FF978(a1, a2, *(void **)(v2 + 16));
}

id sub_100300B08(uint64_t a1)
{
  id result;
  void *v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  void *object;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  NSString v11;
  void *v12;
  id v13;
  NSString v14;
  id v15;
  void *v16;
  id v17;
  void **aBlock;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  void *v21;
  void *v22;
  uint64_t v23;
  Swift::String v24;

  result = (id)_DocumentManagerBundle(a1);
  if (result)
  {
    v2 = result;
    v24._countAndFlagsBits = 0xD000000000000058;
    v24._object = (void *)0x8000000100526550;
    v3._object = (void *)0x8000000100526530;
    v3._countAndFlagsBits = 0xD000000000000018;
    v4.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v4.value._object = (void *)0xEB00000000656C62;
    v5._countAndFlagsBits = 0xD000000000000018;
    v5._object = (void *)0x8000000100526530;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, v24)._object;

    static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierReveal);
    v8 = v7;
    v9 = objc_allocWithZone((Class)UIDocumentBrowserAction);
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v8);
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v22 = sub_1002FBEAC;
    v23 = 0;
    aBlock = _NSConcreteStackBlock;
    v19 = 1107296256;
    v20 = sub_100120C10;
    v21 = &unk_1005DCC60;
    v12 = _Block_copy(&aBlock);
    v13 = objc_msgSend(v9, "initWithIdentifier:localizedTitle:unresolvedHandler:", v10, v11, v12);

    _Block_release(v12);
    swift_release(v23);
    v14 = String._bridgeToObjectiveC()();
    v15 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v14);

    objc_msgSend(v13, "setImage:", v15);
    objc_msgSend(v13, "setAvailability:", 1);
    objc_msgSend(v13, "setSupportsMultipleItems:", 0);
    objc_msgSend(v13, "setRequiresFullyFormedItems:", 0);
    v22 = sub_1002FBEA0;
    v23 = 0;
    aBlock = _NSConcreteStackBlock;
    v19 = 1107296256;
    v20 = sub_100068430;
    v21 = &unk_1005DCC88;
    v16 = _Block_copy(&aBlock);
    v17 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithBlock:", v16);
    _Block_release(v16);
    swift_release(v23);
    objc_msgSend(v13, "setFilteringPredicate:", v17);

    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100300DC0(uint64_t a1, char a2)
{
  id result;
  void *v5;
  Swift::String v6;
  Swift::String_optional v7;
  Swift::String v8;
  void *object;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSString v14;
  NSString v15;
  void *v16;
  id v17;
  NSString v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  void **aBlock;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  void *v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  Swift::String v29;

  result = (id)_DocumentManagerBundle(a1);
  if (result)
  {
    v5 = result;
    v29._countAndFlagsBits = 0xD000000000000045;
    v29._object = (void *)0x8000000100525490;
    v6._object = (void *)0x8000000100525470;
    v6._countAndFlagsBits = 0xD00000000000001BLL;
    v7.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v7.value._object = (void *)0xEB00000000656C62;
    v8._countAndFlagsBits = 0x73736572706D6F43;
    v8._object = (void *)0xE800000000000000;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, (NSBundle)v5, v8, v29)._object;

    static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierArchive);
    v11 = v10;
    v12 = swift_allocObject(&unk_1005DBE38, 32, 7);
    *(_BYTE *)(v12 + 16) = a2 & 1;
    *(_QWORD *)(v12 + 24) = a1;
    v13 = objc_allocWithZone((Class)UIDocumentBrowserAction);
    swift_unknownObjectRetain(a1);
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v27 = sub_100301124;
    v28 = v12;
    aBlock = _NSConcreteStackBlock;
    v24 = 1107296256;
    v25 = sub_100120C10;
    v26 = &unk_1005DBE50;
    v16 = _Block_copy(&aBlock);
    v17 = objc_msgSend(v13, "initWithIdentifier:localizedTitle:unresolvedHandler:", v14, v15, v16);

    _Block_release(v16);
    swift_release(v28);
    v18 = String._bridgeToObjectiveC()();
    v19 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v18);

    objc_msgSend(v17, "setImage:", v19);
    if (UIDocumentBrowserActionAvailabilityToolbar >= 2uLL)
    {
      v20 = UIDocumentBrowserActionAvailabilityToolbar | 1;
      if ((UIDocumentBrowserActionAvailabilityPreviewPanelActivitySheet & ~(UIDocumentBrowserActionAvailabilityToolbar | 1)) == 0)
      {
LABEL_7:
        objc_msgSend(v17, "setAvailability:", v20);
        objc_msgSend(v17, "setMenuSortOrder:", 4);
        objc_msgSend(v17, "setSupportsMultipleItems:", 1);
        v27 = (void (*)(uint64_t, uint64_t))sub_1001199E8;
        v28 = 0;
        aBlock = _NSConcreteStackBlock;
        v24 = 1107296256;
        v25 = sub_100068430;
        v26 = &unk_1005DBE78;
        v21 = _Block_copy(&aBlock);
        v22 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithBlock:", v21);
        _Block_release(v21);
        swift_release(v28);
        objc_msgSend(v17, "setFilteringPredicate:", v22);

        return v17;
      }
    }
    else
    {
      v20 = 1;
      if (UIDocumentBrowserActionAvailabilityPreviewPanelActivitySheet < 2uLL)
        goto LABEL_7;
    }
    v20 |= UIDocumentBrowserActionAvailabilityPreviewPanelActivitySheet;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_100301100()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100301124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1002F80F0(a1, a2, *(_BYTE *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100301130()
{
  return sub_100304324((void (*)(_QWORD))&_swift_bridgeObjectRelease, 33);
}

void sub_100301140(uint64_t a1)
{
  uint64_t v1;

  sub_1002F826C(a1, *(_QWORD *)(v1 + 16), *(char **)(v1 + 24), *(unsigned __int8 *)(v1 + 32));
}

id sub_10030114C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id result;
  void *v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  void *object;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSString v19;
  NSString v20;
  void *v21;
  id v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Class isa;
  void *v33;
  id v34;
  void **aBlock;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  void *v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  Swift::String v41;

  v4 = type metadata accessor for UTType(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (id)_DocumentManagerBundle(v6);
  if (result)
  {
    v10 = result;
    v41._countAndFlagsBits = 0xD000000000000047;
    v41._object = (void *)0x8000000100525530;
    v11._object = (void *)0x8000000100525510;
    v11._countAndFlagsBits = 0xD00000000000001DLL;
    v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v12.value._object = (void *)0xEB00000000656C62;
    v13._countAndFlagsBits = 0x6572706D6F636E55;
    v13._object = (void *)0xEA00000000007373;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v41)._object;

    static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierUnarchive);
    v16 = v15;
    v17 = swift_allocObject(&unk_1005DC018, 32, 7);
    *(_BYTE *)(v17 + 16) = a2 & 1;
    *(_QWORD *)(v17 + 24) = a1;
    v18 = objc_allocWithZone((Class)UIDocumentBrowserAction);
    swift_unknownObjectRetain(a1);
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v39 = sub_100303D90;
    v40 = v17;
    aBlock = _NSConcreteStackBlock;
    v36 = 1107296256;
    v37 = sub_100120C10;
    v38 = &unk_1005DC030;
    v21 = _Block_copy(&aBlock);
    v22 = objc_msgSend(v18, "initWithIdentifier:localizedTitle:unresolvedHandler:", v19, v20, v21);

    _Block_release(v21);
    swift_release(v40);
    v23 = String._bridgeToObjectiveC()();
    v24 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v23);

    objc_msgSend(v22, "setImage:", v24);
    if (UIDocumentBrowserActionAvailabilityToolbar > 1uLL)
    {
      v25 = UIDocumentBrowserActionAvailabilityToolbar | 1;
      if ((UIDocumentBrowserActionAvailabilityPreviewPanelActivitySheet & ~(UIDocumentBrowserActionAvailabilityToolbar | 1)) == 0)
      {
LABEL_7:
        objc_msgSend(v22, "setAvailability:", v25);
        objc_msgSend(v22, "setMenuSortOrder:", 5);
        objc_msgSend(v22, "setSupportsMultipleItems:", 1);
        v26 = sub_10006922C(&qword_100643CC0);
        v27 = swift_allocObject(v26, 48, 7);
        *(_OWORD *)(v27 + 16) = xmmword_1004D9670;
        v28 = static UTType.archive.getter();
        v29 = UTType.identifier.getter(v28);
        v31 = v30;
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
        *(_QWORD *)(v27 + 32) = v29;
        *(_QWORD *)(v27 + 40) = v31;
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v27);
        objc_msgSend(v22, "setSupportedContentTypes:", isa);

        v39 = (void (*)(uint64_t, uint64_t))sub_1001199E8;
        v40 = 0;
        aBlock = _NSConcreteStackBlock;
        v36 = 1107296256;
        v37 = sub_100068430;
        v38 = &unk_1005DC058;
        v33 = _Block_copy(&aBlock);
        v34 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithBlock:", v33);
        _Block_release(v33);
        swift_release(v40);
        objc_msgSend(v22, "setFilteringPredicate:", v34);

        return v22;
      }
    }
    else
    {
      v25 = 1;
      if (UIDocumentBrowserActionAvailabilityPreviewPanelActivitySheet < 2uLL)
        goto LABEL_7;
    }
    v25 |= UIDocumentBrowserActionAvailabilityPreviewPanelActivitySheet;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

id sub_10030155C(uint64_t a1)
{
  id result;
  void *v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  void *object;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  NSString v11;
  void *v12;
  id v13;
  NSString v14;
  id v15;
  void *v16;
  id v17;
  void **aBlock;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  void *v21;
  void *v22;
  uint64_t v23;
  Swift::String v24;

  result = (id)_DocumentManagerBundle(a1);
  if (result)
  {
    v2 = result;
    v24._countAndFlagsBits = 0xD000000000000044;
    v24._object = (void *)0x80000001005255B0;
    v3._object = (void *)0x8000000100525580;
    v3._countAndFlagsBits = 0xD000000000000022;
    v4.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v4.value._object = (void *)0xEB00000000656C62;
    v5._countAndFlagsBits = 0x442065766F6D6552;
    v5._object = (void *)0xEF64616F6C6E776FLL;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, v24)._object;

    static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierEvict);
    v8 = v7;
    v9 = objc_allocWithZone((Class)UIDocumentBrowserAction);
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v8);
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v22 = sub_1002F9124;
    v23 = 0;
    aBlock = _NSConcreteStackBlock;
    v19 = 1107296256;
    v20 = sub_100120C10;
    v21 = &unk_1005DC120;
    v12 = _Block_copy(&aBlock);
    v13 = objc_msgSend(v9, "initWithIdentifier:localizedTitle:unresolvedHandler:", v10, v11, v12);

    _Block_release(v12);
    swift_release(v23);
    objc_msgSend(v13, "setAvailability:", UIDocumentBrowserActionAvailabilityToolbar | 1);
    objc_msgSend(v13, "setMenuSortOrder:", 0);
    objc_msgSend(v13, "setSupportsMultipleItems:", 1);
    v14 = String._bridgeToObjectiveC()();
    v15 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v14);

    objc_msgSend(v13, "setImage:", v15);
    v22 = sub_1002F9D9C;
    v23 = 0;
    aBlock = _NSConcreteStackBlock;
    v19 = 1107296256;
    v20 = sub_100068430;
    v21 = &unk_1005DC148;
    v16 = _Block_copy(&aBlock);
    v17 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithBlock:", v16);
    _Block_release(v16);
    swift_release(v23);
    objc_msgSend(v13, "setFilteringPredicate:", v17);

    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100301840(uint64_t a1)
{
  char v1;
  id result;
  void *v3;
  Swift::String v4;
  Swift::String_optional v5;
  Swift::String v6;
  void *object;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSString v12;
  NSString v13;
  void *v14;
  id v15;
  NSString v16;
  id v17;
  void *v18;
  id v19;
  void **aBlock;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  void *v23;
  void *v24;
  uint64_t v25;
  Swift::String v26;

  v1 = a1;
  result = (id)_DocumentManagerBundle(a1);
  if (result)
  {
    v3 = result;
    v4._countAndFlagsBits = 0xD00000000000001FLL;
    v26._countAndFlagsBits = 0xD000000000000047;
    v26._object = (void *)0x80000001005259B0;
    v4._object = (void *)0x8000000100525990;
    v5.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v5.value._object = (void *)0xEB00000000656C62;
    v6._countAndFlagsBits = 0x64616F6C6E776F44;
    v6._object = (void *)0xEC000000776F4E20;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v3, v6, v26)._object;

    static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierDownload);
    v9 = v8;
    v10 = swift_allocObject(&unk_1005DC220, 17, 7);
    *(_BYTE *)(v10 + 16) = v1 & 1;
    v11 = objc_allocWithZone((Class)UIDocumentBrowserAction);
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v24 = sub_100303EBC;
    v25 = v10;
    aBlock = _NSConcreteStackBlock;
    v21 = 1107296256;
    v22 = sub_100120C10;
    v23 = &unk_1005DC238;
    v14 = _Block_copy(&aBlock);
    v15 = objc_msgSend(v11, "initWithIdentifier:localizedTitle:unresolvedHandler:", v12, v13, v14);

    _Block_release(v14);
    swift_release(v25);
    objc_msgSend(v15, "setAvailability:", UIDocumentBrowserActionAvailabilityToolbar | 1);
    objc_msgSend(v15, "setMenuSortOrder:", 1);
    v16 = String._bridgeToObjectiveC()();
    v17 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v16);

    objc_msgSend(v15, "setImage:", v17);
    objc_msgSend(v15, "setSupportsMultipleItems:", 1);
    v24 = sub_1002FA5DC;
    v25 = 0;
    aBlock = _NSConcreteStackBlock;
    v21 = 1107296256;
    v22 = sub_100068430;
    v23 = &unk_1005DC260;
    v18 = _Block_copy(&aBlock);
    v19 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithBlock:", v18);
    _Block_release(v18);
    swift_release(v25);
    objc_msgSend(v15, "setFilteringPredicate:", v19);

    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100301B40(uint64_t a1, uint64_t a2)
{
  char v3;
  id result;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  Swift::String_optional v10;
  Swift::String v11;
  uint64_t countAndFlagsBits;
  unint64_t v13;

  v3 = a1;
  result = (id)_DocumentManagerBundle(a1);
  v5 = result;
  if ((v3 & 1) != 0)
  {
    if (a2 != 1)
    {
      if (result)
      {
        v6 = 0xD00000000000003CLL;
        v7 = 0xD0000000000000D2;
        v13 = 0x8000000100525D30;
        v8 = "DON'T Keep Downloaded [UIMenuController, more than one item]";
        goto LABEL_12;
      }
      goto LABEL_16;
    }
    if (result)
    {
      v6 = 0xD000000000000032;
      v7 = 0xD0000000000000C8;
      v13 = 0x8000000100525E50;
      v8 = "DON'T Keep Downloaded [UIMenuController, one item]";
LABEL_12:
      v9 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      goto LABEL_13;
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a2 == 1)
  {
    if (result)
    {
      v7 = 0xD000000000000051;
      v13 = 0x8000000100525C90;
      v9 = 0x8000000100525C60;
      v6 = 0xD00000000000002CLL;
LABEL_13:
      v10.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v10.value._object = (void *)0xEB00000000656C62;
      v11._countAndFlagsBits = 0x776F44207065654BLL;
      v11._object = (void *)0xEF646564616F6C6ELL;
      countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v6, v10, (NSBundle)v5, v11, *(Swift::String *)&v7)._countAndFlagsBits;

      return (id)countAndFlagsBits;
    }
    goto LABEL_15;
  }
  if (result)
  {
    v6 = 0xD000000000000036;
    v7 = 0xD00000000000005BLL;
    v13 = 0x8000000100525C00;
    v8 = "Keep Downloaded [UIMenuController, more than one item]";
    goto LABEL_12;
  }
LABEL_17:
  __break(1u);
  return result;
}

id sub_100301CD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  NSString v8;
  void *v9;
  id v10;
  NSString v11;
  id v12;
  void *v13;
  id v14;
  void **v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  void *v19;
  void *v20;
  uint64_t v21;

  static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierPin);
  v3 = v2;
  sub_100301B40(0, a1);
  v5 = v4;
  v6 = objc_allocWithZone((Class)UIDocumentBrowserAction);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v20 = sub_1002FA844;
  v21 = 0;
  v16 = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = sub_100120C10;
  v19 = &unk_1005DC328;
  v9 = _Block_copy(&v16);
  v10 = objc_msgSend(v6, "initWithIdentifier:localizedTitle:unresolvedHandler:", v7, v8, v9);

  _Block_release(v9);
  swift_release(v21);
  objc_msgSend(v10, "setAvailability:", UIDocumentBrowserActionAvailabilityToolbar | 1);
  objc_msgSend(v10, "setMenuSortOrder:", 1);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v11);

  objc_msgSend(v10, "setImage:", v12);
  objc_msgSend(v10, "setSupportsMultipleItems:", 1);
  v20 = sub_1002FAE00;
  v21 = 0;
  v16 = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = sub_100068430;
  v19 = &unk_1005DC350;
  v13 = _Block_copy(&v16);
  v14 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithBlock:", v13);
  _Block_release(v13);
  swift_release(v21);
  objc_msgSend(v10, "setFilteringPredicate:", v14);

  return v10;
}

id sub_100301F30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  NSString v8;
  void *v9;
  id v10;
  NSString v11;
  id v12;
  void *v13;
  id v14;
  void **v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  void *v19;
  void *v20;
  uint64_t v21;

  static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierUnpin);
  v3 = v2;
  sub_100301B40(1, a1);
  v5 = v4;
  v6 = objc_allocWithZone((Class)UIDocumentBrowserAction);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v20 = sub_1002FB08C;
  v21 = 0;
  v16 = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = sub_100120C10;
  v19 = &unk_1005DC418;
  v9 = _Block_copy(&v16);
  v10 = objc_msgSend(v6, "initWithIdentifier:localizedTitle:unresolvedHandler:", v7, v8, v9);

  _Block_release(v9);
  swift_release(v21);
  objc_msgSend(v10, "setAvailability:", UIDocumentBrowserActionAvailabilityToolbar | 1);
  objc_msgSend(v10, "setMenuSortOrder:", 1);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v11);

  objc_msgSend(v10, "setImage:", v12);
  objc_msgSend(v10, "setSupportsMultipleItems:", 1);
  v20 = sub_1002FB904;
  v21 = 0;
  v16 = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = sub_100068430;
  v19 = &unk_1005DC440;
  v13 = _Block_copy(&v16);
  v14 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithBlock:", v13);
  _Block_release(v13);
  swift_release(v21);
  objc_msgSend(v10, "setFilteringPredicate:", v14);

  return v10;
}

id sub_100302188(uint64_t a1)
{
  id result;
  void *v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  void *object;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  NSString v11;
  void *v12;
  id v13;
  NSString v14;
  id v15;
  void *v16;
  id v17;
  void **aBlock;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  void *v21;
  void *v22;
  uint64_t v23;
  Swift::String v24;

  result = (id)_DocumentManagerBundle(a1);
  if (result)
  {
    v2 = result;
    v24._countAndFlagsBits = 0xD00000000000006FLL;
    v24._object = (void *)0x8000000100526030;
    v3._object = (void *)0x8000000100526010;
    v3._countAndFlagsBits = 0xD000000000000016;
    v4.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v4.value._object = (void *)0xEB00000000656C62;
    v5._countAndFlagsBits = 0xD000000000000016;
    v5._object = (void *)0x8000000100526010;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, v24)._object;

    static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierShowDownloadedFolder);
    v8 = v7;
    v9 = objc_allocWithZone((Class)UIDocumentBrowserAction);
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v8);
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v22 = sub_1002FBAF0;
    v23 = 0;
    aBlock = _NSConcreteStackBlock;
    v19 = 1107296256;
    v20 = sub_100120C10;
    v21 = &unk_1005DC508;
    v12 = _Block_copy(&aBlock);
    v13 = objc_msgSend(v9, "initWithIdentifier:localizedTitle:unresolvedHandler:", v10, v11, v12);

    _Block_release(v12);
    swift_release(v23);
    v14 = String._bridgeToObjectiveC()();
    v15 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v14);

    objc_msgSend(v13, "setImage:", v15);
    objc_msgSend(v13, "setAvailability:", 1);
    objc_msgSend(v13, "setMenuSortOrder:", 1);
    objc_msgSend(v13, "setSupportsMultipleItems:", 0);
    v22 = sub_1002FBEA0;
    v23 = 0;
    aBlock = _NSConcreteStackBlock;
    v19 = 1107296256;
    v20 = sub_100068430;
    v21 = &unk_1005DC530;
    v16 = _Block_copy(&aBlock);
    v17 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithBlock:", v16);
    _Block_release(v16);
    swift_release(v23);
    objc_msgSend(v13, "setFilteringPredicate:", v17);

    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100302440(uint64_t a1)
{
  id result;
  void *v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  void *object;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  NSString v11;
  void *v12;
  id v13;
  NSString v14;
  id v15;
  void *v16;
  id v17;
  void **aBlock;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  void *v21;
  void *v22;
  uint64_t v23;
  Swift::String v24;

  result = (id)_DocumentManagerBundle(a1);
  if (result)
  {
    v2 = result;
    v24._countAndFlagsBits = 0xD000000000000046;
    v24._object = (void *)0x8000000100526250;
    v3._object = (void *)0x8000000100526230;
    v3._countAndFlagsBits = 0xD00000000000001DLL;
    v4.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v4.value._object = (void *)0xEB00000000656C62;
    v5._countAndFlagsBits = 0x6F4C206B63697551;
    v5._object = (void *)0xEA00000000006B6FLL;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, v24)._object;

    static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierQuickLook);
    v8 = v7;
    v9 = objc_allocWithZone((Class)UIDocumentBrowserAction);
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v8);
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v22 = sub_1002FC218;
    v23 = 0;
    aBlock = _NSConcreteStackBlock;
    v19 = 1107296256;
    v20 = sub_100120C10;
    v21 = &unk_1005DC738;
    v12 = _Block_copy(&aBlock);
    v13 = objc_msgSend(v9, "initWithIdentifier:localizedTitle:unresolvedHandler:", v10, v11, v12);

    _Block_release(v12);
    swift_release(v23);
    v14 = String._bridgeToObjectiveC()();
    v15 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v14);

    objc_msgSend(v13, "setImage:", v15);
    objc_msgSend(v13, "setAvailability:", 1);
    objc_msgSend(v13, "setMenuSortOrder:", 7);
    objc_msgSend(v13, "setSupportsMultipleItems:", 0);
    v22 = sub_1002FC520;
    v23 = 0;
    aBlock = _NSConcreteStackBlock;
    v19 = 1107296256;
    v20 = sub_100068430;
    v21 = &unk_1005DC760;
    v16 = _Block_copy(&aBlock);
    v17 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithBlock:", v16);
    _Block_release(v16);
    swift_release(v23);
    objc_msgSend(v13, "setFilteringPredicate:", v17);

    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_100302700()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, char *, uint64_t);
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  int64_t v41;
  char *v42;
  char *v43;
  uint64_t (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  _QWORD *v59;

  v0 = sub_10006922C(&qword_100643EC0);
  __chkstk_darwin(v0);
  v2 = (char *)&v54 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UTType(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v56 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v58 = (char *)&v54 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v54 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v54 - v13;
  __chkstk_darwin(v12);
  v55 = (char *)&v54 - v15;
  v16 = objc_msgSend((id)objc_opt_self(AVMovie), "movieTypes");
  type metadata accessor for AVFileType(0);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

  v19 = *(_QWORD *)(v18 + 16);
  v57 = v11;
  if (v19)
  {
    swift_bridgeObjectRetain(v18);
    v20 = 0;
    v21 = (char *)_swiftEmptyArrayStorage;
    v54 = v14;
    do
    {
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v18 + 8 * v20 + 32));
      UTType.init(_:)(v22, v23);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
      {
        sub_10000CB4C((uint64_t)v2, &qword_100643EC0);
      }
      else
      {
        v24 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
        v25 = v55;
        v24(v55, v2, v3);
        v24(v14, v25, v3);
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
          v21 = (char *)sub_100153308(0, *((_QWORD *)v21 + 2) + 1, 1, (unint64_t)v21);
        v27 = *((_QWORD *)v21 + 2);
        v26 = *((_QWORD *)v21 + 3);
        if (v27 >= v26 >> 1)
          v21 = (char *)sub_100153308(v26 > 1, v27 + 1, 1, (unint64_t)v21);
        *((_QWORD *)v21 + 2) = v27 + 1;
        v14 = v54;
        v24(&v21[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v27], v54, v3);
        v11 = v57;
      }
      ++v20;
    }
    while (v19 != v20);
    result = (_QWORD *)swift_bridgeObjectRelease_n(v18, 2);
  }
  else
  {
    result = (_QWORD *)swift_bridgeObjectRelease(v18);
    v21 = (char *)_swiftEmptyArrayStorage;
  }
  v59 = _swiftEmptyArrayStorage;
  v55 = (char *)*((_QWORD *)v21 + 2);
  if (v55)
  {
    v29 = 0;
    while (v29 < *((_QWORD *)v21 + 2))
    {
      v30 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      v31 = *(_QWORD *)(v4 + 72);
      v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v11, &v21[v30 + v31 * v29], v3);
      v33 = v58;
      static UTType.movie.getter(v32);
      v34 = UTType.conforms(to:)(v33);
      v35 = *(void (**)(char *, uint64_t))(v4 + 8);
      v35(v33, v3);
      if ((v34 & 1) != 0)
      {
        v36 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
        v36(v56, v11, v3);
        v37 = v59;
        if ((swift_isUniquelyReferenced_nonNull_native(v59) & 1) == 0)
        {
          sub_100154EF8(0, v37[2] + 1, 1);
          v37 = v59;
        }
        v39 = v37[2];
        v38 = v37[3];
        if (v39 >= v38 >> 1)
        {
          sub_100154EF8(v38 > 1, v39 + 1, 1);
          v37 = v59;
        }
        v37[2] = v39 + 1;
        result = (_QWORD *)((uint64_t (*)(char *, char *, uint64_t))v36)((char *)v37 + v30 + v39 * v31, v56, v3);
        v59 = v37;
        v11 = v57;
      }
      else
      {
        result = (_QWORD *)((uint64_t (*)(char *, uint64_t))v35)(v11, v3);
      }
      if (v55 == (char *)++v29)
        goto LABEL_24;
    }
    __break(1u);
  }
  else
  {
LABEL_24:
    swift_bridgeObjectRelease(v21);
    v40 = (char *)v59;
    v41 = v59[2];
    if (v41)
    {
      v59 = _swiftEmptyArrayStorage;
      sub_100081774(0, v41, 0);
      v42 = &v40[(*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)];
      v43 = *(char **)(v4 + 72);
      v56 = v40;
      v57 = v43;
      v44 = *(uint64_t (**)(char *, char *, uint64_t))(v4 + 16);
      do
      {
        v45 = v58;
        v46 = v44(v58, v42, v3);
        v47 = UTType.identifier.getter(v46);
        v49 = v48;
        (*(void (**)(char *, uint64_t))(v4 + 8))(v45, v3);
        v50 = v59;
        if ((swift_isUniquelyReferenced_nonNull_native(v59) & 1) == 0)
        {
          sub_100081774(0, v50[2] + 1, 1);
          v50 = v59;
        }
        v52 = v50[2];
        v51 = v50[3];
        if (v52 >= v51 >> 1)
        {
          sub_100081774(v51 > 1, v52 + 1, 1);
          v50 = v59;
        }
        v50[2] = v52 + 1;
        v53 = &v50[2 * v52];
        v53[4] = v47;
        v53[5] = v49;
        v42 = &v57[(_QWORD)v42];
        --v41;
      }
      while (v41);
      swift_release(v56);
    }
    else
    {
      swift_release(v59);
      return _swiftEmptyArrayStorage;
    }
    return v50;
  }
  return result;
}

uint64_t sub_100302C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  NSString v28;
  unsigned int v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  v4 = sub_10006922C(&qword_10064E0B8);
  inited = swift_initStackObject(v4, &v39);
  *(_OWORD *)(inited + 16) = xmmword_1004E1E40;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(WFRotateImageLeftFilesActionIdentifier);
  *(_QWORD *)(inited + 40) = v6;
  if (UIDocumentBrowserActionAvailabilityToolbar > 1uLL)
  {
    v7 = UIDocumentBrowserActionAvailabilityToolbar | 1;
    if ((UIDocumentBrowserActionAvailabilityPreviewPanel & ~(UIDocumentBrowserActionAvailabilityToolbar | 1)) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 1;
  if (UIDocumentBrowserActionAvailabilityPreviewPanel >= 2uLL)
LABEL_5:
    v7 |= UIDocumentBrowserActionAvailabilityPreviewPanel;
LABEL_6:
  *(_QWORD *)(inited + 48) = v7;
  *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(WFRotateImageRightFilesActionIdentifier);
  *(_QWORD *)(inited + 64) = v8;
  *(_QWORD *)(inited + 72) = UIDocumentBrowserActionAvailabilityToolbar | 1;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(WFMakePDFFilesActionIdentifier);
  *(_QWORD *)(inited + 88) = v9;
  if (UIDocumentBrowserActionAvailabilityToolbar > 1uLL)
  {
    v10 = UIDocumentBrowserActionAvailabilityToolbar | 1;
    if ((UIDocumentBrowserActionAvailabilityPreviewPanel & ~(UIDocumentBrowserActionAvailabilityToolbar | 1)) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  v10 = 1;
  if (UIDocumentBrowserActionAvailabilityPreviewPanel >= 2uLL)
LABEL_10:
    v10 |= UIDocumentBrowserActionAvailabilityPreviewPanel;
LABEL_11:
  *(_QWORD *)(inited + 96) = v10;
  *(_QWORD *)(inited + 104) = static String._unconditionallyBridgeFromObjectiveC(_:)(WFReduceFileSizeFilesActionIdentifier);
  *(_QWORD *)(inited + 112) = v11;
  if (UIDocumentBrowserActionAvailabilityToolbar > 1uLL)
  {
    v12 = UIDocumentBrowserActionAvailabilityToolbar | 1;
    if ((UIDocumentBrowserActionAvailabilityPreviewPanel & ~(UIDocumentBrowserActionAvailabilityToolbar | 1)) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
  v12 = 1;
  if (UIDocumentBrowserActionAvailabilityPreviewPanel >= 2uLL)
LABEL_15:
    v12 |= UIDocumentBrowserActionAvailabilityPreviewPanel;
LABEL_16:
  *(_QWORD *)(inited + 120) = v12;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(WFExportAsFilesActionIdentifier);
  *(_QWORD *)(inited + 136) = v13;
  if (UIDocumentBrowserActionAvailabilityToolbar > 1uLL)
  {
    v14 = UIDocumentBrowserActionAvailabilityToolbar | 1;
    if ((UIDocumentBrowserActionAvailabilityPreviewPanel & ~(UIDocumentBrowserActionAvailabilityToolbar | 1)) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
  v14 = 1;
  if (UIDocumentBrowserActionAvailabilityPreviewPanel >= 2uLL)
LABEL_20:
    v14 |= UIDocumentBrowserActionAvailabilityPreviewPanel;
LABEL_21:
  *(_QWORD *)(inited + 144) = v14;
  *(_QWORD *)(inited + 152) = static String._unconditionallyBridgeFromObjectiveC(_:)(WFRemoveBackgroundFilesActionIdentifier);
  *(_QWORD *)(inited + 160) = v15;
  if (UIDocumentBrowserActionAvailabilityToolbar < 2uLL)
  {
    v16 = 1;
    if (UIDocumentBrowserActionAvailabilityPreviewPanel < 2uLL)
      goto LABEL_26;
    goto LABEL_25;
  }
  v16 = UIDocumentBrowserActionAvailabilityToolbar | 1;
  if ((UIDocumentBrowserActionAvailabilityPreviewPanel & ~(UIDocumentBrowserActionAvailabilityToolbar | 1)) != 0)
LABEL_25:
    v16 |= UIDocumentBrowserActionAvailabilityPreviewPanel;
LABEL_26:
  *(_QWORD *)(inited + 168) = v16;
  v17 = sub_1003F2790(inited);
  v18 = *(_QWORD *)(v17 + 16);
  swift_bridgeObjectRetain(a2);
  if (v18 && (v19 = sub_10007EF08(a1, a2), (v20 & 1) != 0))
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v19);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(a2);
    static String._unconditionallyBridgeFromObjectiveC(_:)(DOCDefaultsSuiteName);
    v23 = v22;
    v24 = objc_allocWithZone((Class)NSUserDefaults);
    v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v23);
    v26 = objc_msgSend(v24, "initWithSuiteName:", v25);

    if (v26
      && (v28 = String._bridgeToObjectiveC()(),
          v29 = objc_msgSend(v26, "BOOLForKey:", v28),
          v26,
          v28,
          v29))
    {
      v30 = *(id *)DOCLog.UI.unsafeMutableAddressor(v27);
      v31 = static os_log_type_t.info.getter();
      v32 = sub_10006922C((uint64_t *)&unk_100644560);
      v33 = swift_allocObject(v32, 72, 7);
      *(_OWORD *)(v33 + 16) = xmmword_1004D9670;
      *(_QWORD *)(v33 + 56) = &type metadata for String;
      *(_QWORD *)(v33 + 64) = sub_10006A638();
      *(_QWORD *)(v33 + 32) = a1;
      *(_QWORD *)(v33 + 40) = a2;
      swift_bridgeObjectRetain(a2);
      os_log(_:dso:log:type:_:)("Note: Allowing action with identifier '%{public}@' due to applied defaults", 74, 2, &_mh_execute_header, v30, v31, v33);

      swift_bridgeObjectRelease(v33);
      return 1;
    }
    else
    {
      v34 = *(id *)DOCLog.UI.unsafeMutableAddressor(v27);
      v35 = static os_log_type_t.error.getter(v34);
      v36 = sub_10006922C((uint64_t *)&unk_100644560);
      v37 = swift_allocObject(v36, 72, 7);
      *(_OWORD *)(v37 + 16) = xmmword_1004D9670;
      *(_QWORD *)(v37 + 56) = &type metadata for String;
      *(_QWORD *)(v37 + 64) = sub_10006A638();
      *(_QWORD *)(v37 + 32) = a1;
      *(_QWORD *)(v37 + 40) = a2;
      swift_bridgeObjectRetain(a2);
      os_log(_:dso:log:type:_:)("Error: Undefined availability for action with identifier '%{public}@'", 69, 2, &_mh_execute_header, v34, v35, v37);

      swift_bridgeObjectRelease(v37);
      return 0;
    }
  }
  return v21;
}

uint64_t sub_100303034(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = sub_10006922C(&qword_10064E0B0);
  inited = swift_initStackObject(v4, &v22);
  *(_OWORD *)(inited + 16) = xmmword_1004E1E40;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(WFRotateImageLeftFilesActionIdentifier);
  *(_QWORD *)(inited + 40) = v6;
  *(_QWORD *)(inited + 48) = 20;
  *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(WFRotateImageRightFilesActionIdentifier);
  *(_QWORD *)(inited + 64) = v7;
  *(_QWORD *)(inited + 72) = 21;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(WFMakePDFFilesActionIdentifier);
  *(_QWORD *)(inited + 88) = v8;
  *(_QWORD *)(inited + 96) = 23;
  *(_QWORD *)(inited + 104) = static String._unconditionallyBridgeFromObjectiveC(_:)(WFReduceFileSizeFilesActionIdentifier);
  *(_QWORD *)(inited + 112) = v9;
  *(_QWORD *)(inited + 120) = 26;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(WFExportAsFilesActionIdentifier);
  *(_QWORD *)(inited + 136) = v10;
  *(_QWORD *)(inited + 144) = 24;
  *(_QWORD *)(inited + 152) = static String._unconditionallyBridgeFromObjectiveC(_:)(WFRemoveBackgroundFilesActionIdentifier);
  *(_QWORD *)(inited + 160) = v11;
  *(_QWORD *)(inited + 168) = 25;
  v12 = sub_1003F28A0(inited);
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain(a2);
  v13 = sub_10007EF08(a1, a2);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
LABEL_5:
    v16 = swift_bridgeObjectRelease(v12);
    v17 = *(id *)DOCLog.UI.unsafeMutableAddressor(v16);
    v18 = static os_log_type_t.error.getter(v17);
    v19 = sub_10006922C((uint64_t *)&unk_100644560);
    v20 = swift_allocObject(v19, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_1004D9670;
    *(_QWORD *)(v20 + 56) = &type metadata for String;
    *(_QWORD *)(v20 + 64) = sub_10006A638();
    *(_QWORD *)(v20 + 32) = a1;
    *(_QWORD *)(v20 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    os_log(_:dso:log:type:_:)("Error: Undefined menu sort order for action with identifier '%{public}@'", 72, 2, &_mh_execute_header, v17, v18, v20);

    swift_bridgeObjectRelease(v20);
    return 0;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v12);
  return v15;
}

id sub_100303234(void *a1, uint64_t a2, char a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  NSString v15;
  NSString v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  void **v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  void *v41;
  void *v42;
  uint64_t v43;

  v6 = objc_msgSend(a1, "identifier");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v8 = v7;

  v9 = objc_msgSend(a1, "displayString");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v11 = v10;

  v12 = swift_allocObject(&unk_1005DC838, 40, 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_BYTE *)(v12 + 24) = a3;
  *(_QWORD *)(v12 + 32) = a2;
  v13 = objc_allocWithZone((Class)UIDocumentBrowserAction);
  swift_unknownObjectRetain(a2);
  v14 = a1;
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v42 = sub_1003043D0;
  v43 = v12;
  v38 = _NSConcreteStackBlock;
  v39 = 1107296256;
  v40 = sub_1003A7858;
  v41 = &unk_1005DC850;
  v17 = _Block_copy(&v38);
  v18 = objc_msgSend(v13, "initWithIdentifier:localizedTitle:resolvedHandler:", v15, v16, v17);

  _Block_release(v17);
  swift_release(v43);
  v19 = sub_1002FE93C(v14);
  objc_msgSend(v18, "setImage:", v19);

  objc_msgSend(v18, "setSupportsMultipleItems:", 1);
  objc_msgSend(v18, "setRequiresResolvedItems:", 1);
  v20 = objc_msgSend(v14, "identifier");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v24 = sub_100302C0C(v21, v23);
  swift_bridgeObjectRelease(v23);
  objc_msgSend(v18, "setAvailability:", v24);
  v25 = objc_msgSend(v14, "identifier");
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;

  v29 = sub_100303034(v26, v28);
  LOBYTE(v26) = v30;
  swift_bridgeObjectRelease(v28);
  if ((v26 & 1) != 0)
    v31 = 29;
  else
    v31 = v29;
  objc_msgSend(v18, "setMenuSortOrder:", v31);
  v32 = swift_allocObject(&unk_1005DC888, 24, 7);
  *(_QWORD *)(v32 + 16) = v14;
  v42 = sub_1003043E0;
  v43 = v32;
  v38 = _NSConcreteStackBlock;
  v39 = 1107296256;
  v40 = sub_100068430;
  v41 = &unk_1005DC8A0;
  v33 = _Block_copy(&v38);
  v34 = (void *)objc_opt_self(NSPredicate);
  v35 = v14;
  v36 = objc_msgSend(v34, "predicateWithBlock:", v33);
  _Block_release(v33);
  swift_release(v43);
  objc_msgSend(v18, "setFilteringPredicate:", v36);

  return v18;
}

id sub_100303578(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  NSString v16;
  void *v17;
  id v18;
  NSString v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  void *v30;
  void *v31;
  uint64_t v32;

  v2 = a2;
  if (a2)
  {
    if ((sub_1003598CC(FPActionReparent, a2) & 1) != 0)
    {
      if ((unint64_t)v2 >> 62)
      {
        if (v2 >= 0)
          v24 = v2 & 0xFFFFFFFFFFFFFF8;
        else
          v24 = v2;
        swift_bridgeObjectRetain(v2);
        v25 = _CocoaArrayWrapper.endIndex.getter(v24);
        v26 = v2;
        v2 = v25;
        swift_bridgeObjectRelease(v26);
      }
      else
      {
        v2 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
    }
    else
    {
      v2 = 0;
    }
  }
  v4._countAndFlagsBits = 0xD00000000000002ELL;
  v5._countAndFlagsBits = 0xD000000000000034;
  v4._object = (void *)0x800000010051D0D0;
  v5._object = (void *)0x800000010051D100;
  v6 = DOCLocalizedDictionaryString(_:comment:)(v4, v5);
  v7 = sub_10006922C((uint64_t *)&unk_100644560);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1004D9670;
  *(_QWORD *)(v8 + 56) = &type metadata for Int;
  *(_QWORD *)(v8 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v8 + 32) = v2;
  static String.localizedStringWithFormat(_:_:)(v6._countAndFlagsBits, v6._object, v8);
  v10 = v9;
  swift_bridgeObjectRelease(v6._object);
  swift_bridgeObjectRelease(v8);
  static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierNewFolderFromSelection);
  v12 = v11;
  v13 = swift_allocObject(&unk_1005DCBF8, 24, 7);
  *(_QWORD *)(v13 + 16) = a1;
  v14 = objc_allocWithZone((Class)UIDocumentBrowserAction);
  swift_unknownObjectRetain(a1);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  v31 = sub_100304ACC;
  v32 = v13;
  v27 = _NSConcreteStackBlock;
  v28 = 1107296256;
  v29 = sub_100120C10;
  v30 = &unk_1005DCC10;
  v17 = _Block_copy(&v27);
  v18 = objc_msgSend(v14, "initWithIdentifier:localizedTitle:unresolvedHandler:", v15, v16, v17);

  _Block_release(v17);
  swift_release(v32);
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v19);

  objc_msgSend(v18, "setImage:", v20);
  objc_msgSend(v18, "setAvailability:", UIDocumentBrowserActionAvailabilityToolbar | 1);
  objc_msgSend(v18, "setMenuSortOrder:", 9);
  objc_msgSend(v18, "setSupportsMultipleItems:", 1);
  v31 = sub_1002FF6D4;
  v32 = 0;
  v27 = _NSConcreteStackBlock;
  v28 = 1107296256;
  v29 = sub_100068430;
  v30 = &unk_1005DCC38;
  v21 = _Block_copy(&v27);
  v22 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithBlock:", v21);
  _Block_release(v21);
  swift_release(v32);
  objc_msgSend(v18, "setFilteringPredicate:", v22);

  return v18;
}

void *sub_1003038F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  NSString v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = v3;
  v26 = a3;
  v25 = a2;
  v6 = type metadata accessor for URL(0);
  v23 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v9; v9 = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    v21[1] = v4;
    v22 = a1 & 0xC000000000000001;
    v10 = 4;
    while (1)
    {
      v11 = v22 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, a1) : *(id *)(a1 + 8 * v10);
      v12 = v11;
      v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1))
        break;
      v14 = String._bridgeToObjectiveC()();
      v15 = objc_msgSend(v12, "fileURL");
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v15);

      URL.lastPathComponent.getter(v16);
      v18 = v17;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v24);
      v4 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v18);
      LOBYTE(v18) = sub_1002FD4DC(v14, v4);

      if ((v18 & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        return v12;
      }

      ++v10;
      if (v13 == v9)
        goto LABEL_17;
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_17:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_100303AC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 33, 7);
}

void sub_100303AF4(uint64_t a1)
{
  uint64_t v1;

  sub_1002F8618(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

void sub_100303B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  id v9;
  id v10;
  id v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  id v15;
  _QWORD v16[5];
  _QWORD *v17;

  v8 = (void *)objc_opt_self(DOCTabbedBrowserViewController);
  v9 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a2
                                                             + OBJC_IVAR____TtC5Files16DOCActionContext_configuration), "sceneIdentifier"));
  v10 = objc_msgSend(v8, "globalTabbedBrowserControllerForIdentifier:", v9);

  if (v10)
  {
    v11 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
    v12 = (_QWORD *)swift_allocObject(&unk_1005DBF50, 40, 7);
    v12[2] = v10;
    v12[3] = a3;
    v12[4] = a4;
    v16[4] = sub_100303CB0;
    v17 = v12;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1107296256;
    v16[2] = sub_100175118;
    v16[3] = &unk_1005DBF68;
    v13 = _Block_copy(v16);
    v14 = v17;
    v15 = v10;
    sub_10008BA00(a3, a4);
    swift_release(v14);
    objc_msgSend(v11, "fetchURLForItem:completionHandler:", a1, v13);
    _Block_release(v13);

  }
}

uint64_t sub_100303C7C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100303CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100300630(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_100303CBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  if (*(_QWORD *)(v0 + v5))
    swift_release(*(_QWORD *)(v0 + v5 + 8));
  return swift_deallocObject(v0, v5 + 16, v3 | 7);
}

void sub_100303D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v1 = type metadata accessor for URL(0);
  v2 = (uint64_t *)(v0
                 + ((*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64)
                   + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))
                   + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_100300854(*(void **)(v0 + 16), *v2, v2[1], (NSURL *)v2);
}

void sub_100303D90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1002F888C(a1, a2, *(_BYTE *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100303D9C()
{
  return sub_100304324((void (*)(_QWORD))&_swift_bridgeObjectRelease, 33);
}

void sub_100303DAC(uint64_t a1)
{
  uint64_t v1;

  sub_1002F89B8(a1, *(_QWORD *)(v1 + 16), *(char **)(v1 + 24), *(unsigned __int8 *)(v1 + 32));
}

uint64_t sub_100303DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DOCOperationItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100303DFC(uint64_t a1)
{
  uint64_t v1;

  sub_1002F8EB0(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t sub_100303E08(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DOCOperationItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100303E48()
{
  uint64_t v0;

  sub_100068588((_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_100303E74(uint64_t a1)
{
  uint64_t v1;

  sub_1002F92C0(a1, v1 + 16, *(_QWORD *)(v1 + 48));
}

id sub_100303E84()
{
  uint64_t v0;

  return sub_1002FB7E0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), "Error: Could not remove download. %@", 36);
}

uint64_t sub_100303EAC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_100303EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1002F9FC0(a1, a2, *(_BYTE *)(v2 + 16));
}

uint64_t sub_100303EC4()
{
  uint64_t v0;

  sub_100068588((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100303EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1002FA160(a1, a2, v2 + 16);
}

id sub_100303EF4()
{
  uint64_t v0;

  return sub_1002FB7E0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), "Error: Could not download. %@", 29);
}

void sub_100303F1C(uint64_t a1)
{
  uint64_t v1;

  sub_1002FA868(a1, v1 + 16);
}

id sub_100303F28()
{
  uint64_t v0;

  return sub_1002FB7E0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), "Error: Could not keep downloaded. %@", 36);
}

void sub_100303F50(uint64_t a1)
{
  uint64_t v1;

  sub_1002FB248(a1, v1 + 16);
}

uint64_t sub_100303F5C()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

id sub_100303F90()
{
  uint64_t v0;

  return sub_1002FB7E0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), "Error: Could not stop keeping downloaded. %@", 44);
}

uint64_t sub_100303FB8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100303FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1002FBD08(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100303FE4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

void sub_100304018(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1002F679C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_100304048()
{
  return sub_100304324((void (*)(_QWORD))&_swift_bridgeObjectRelease, 32);
}

void sub_100304058()
{
  uint64_t v0;

  sub_1002F6D74(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100304060()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100304084()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1003040C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v6;

  v6 = *(_OWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = swift_task_alloc(dword_10064E054);
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100118844;
  *(_QWORD *)(v3 + 48) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  *(_OWORD *)(v3 + 32) = v6;
  return swift_task_switch(sub_1002F7374, 0, 0);
}

uint64_t sub_100304144(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_10064E064);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1000EA854;
  return sub_1002F7558(a1, a2, v6);
}

uint64_t sub_1003041AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100304220(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_10064E07C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100118844;
  return sub_1002F7AE4(a1, v5, v6, v7);
}

uint64_t sub_1003042A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10064E08C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000EA854;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10064E088 + dword_10064E088))(a1, v4);
}

uint64_t sub_100304314()
{
  return sub_100304324((void (*)(_QWORD))&_swift_bridgeObjectRelease, 32);
}

uint64_t sub_100304324(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));

  return swift_deallocObject(v2, a2, 7);
}

uint64_t sub_100304360()
{
  uint64_t v0;

  return sub_1002F6E94(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100304368()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100304394()
{
  uint64_t v0;

  sub_1002FC40C(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10030439C()
{
  uint64_t v0;

  return sub_100120024(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1003043A4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1003043D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1002FC76C(a1, a2, *(void **)(v2 + 16), *(_BYTE *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

BOOL sub_1003043E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1002FEA64(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_1003043E8@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1002FF288(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_100304400()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 41, 7);
}

void sub_100304434(uint64_t a1)
{
  uint64_t v1;

  sub_1002FCA78(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40));
}

void sub_100304448()
{
  uint64_t v0;

  sub_1002FCFA8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100304454()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void sub_100304498(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1002FE578(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40), *(_BYTE *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

id sub_1003044B4(uint64_t a1)
{
  uint64_t v1;

  return sub_1002FDC18(a1, *(void **)(v1 + 16));
}

uint64_t sub_1003044CC(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  id v18;
  NSURL *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  char *v32;
  NSURL *v33;
  void *v34;
  void *v35;
  unsigned int v36;
  id v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id aBlock[5];
  uint64_t v50;
  uint64_t v51;

  v47 = a2;
  v48 = a3;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v44 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v42 - v8;
  v10 = sub_10006922C(&qword_100643470);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v42 - v14;
  v16 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v17 = objc_msgSend(objc_allocWithZone((Class)NSFileCoordinator), "init");
  v51 = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v15, 1, 1, v4);
  v18 = objc_msgSend(a1, "fileURL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v18);

  URL._bridgeToObjectiveC()(v19);
  v21 = v20;
  v45 = v5;
  v46 = v4;
  v43 = *(void (**)(char *, uint64_t))(v5 + 8);
  v43(v9, v4);
  v22 = (_QWORD *)swift_allocObject(&unk_1005DCA90, 56, 7);
  v22[2] = v16;
  v22[3] = v15;
  v23 = v48;
  v22[4] = v47;
  v22[5] = v23;
  v22[6] = &v51;
  v24 = swift_allocObject(&unk_1005DCAB8, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_100304994;
  *(_QWORD *)(v24 + 24) = v22;
  aBlock[4] = sub_1000D9F90;
  v50 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_10046E2C4;
  aBlock[3] = &unk_1005DCAD0;
  v25 = _Block_copy(aBlock);
  v26 = v50;
  v27 = v16;
  swift_retain();
  swift_release(v26);
  v48 = v17;
  aBlock[0] = 0;
  objc_msgSend(v17, "coordinateWritingItemAtURL:options:error:byAccessor:", v21, 0, aBlock, v25);
  _Block_release(v25);

  v28 = aBlock[0];
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation(v24, "", 100, 945, 113, 1);
  swift_release(v24);
  if ((v21 & 1) != 0)
    __break(1u);
  sub_1000271D4((uint64_t)v15, (uint64_t)v13, &qword_100643470);
  v29 = v45;
  v30 = v46;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v13, 1, v46) == 1)
  {
    sub_10000CB4C((uint64_t)v13, &qword_100643470);
    if (v28)
    {
LABEL_4:
      v31 = v28;
      swift_willThrow(v31);

      sub_10000CB4C((uint64_t)v15, &qword_100643470);
      goto LABEL_12;
    }
  }
  else
  {
    v32 = v44;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v44, v13, v30);
    URL._bridgeToObjectiveC()(v33);
    v35 = v34;
    aBlock[0] = 0;
    v36 = objc_msgSend(v27, "removeItemAtURL:error:", v34, aBlock);

    v37 = aBlock[0];
    if (!v36)
    {
      v40 = aBlock[0];
      _convertNSErrorToError(_:)(v37);

      ((void (*)(void))swift_willThrow)();
      v43(v32, v30);
      sub_10000CB4C((uint64_t)v15, &qword_100643470);

      goto LABEL_12;
    }
    v38 = aBlock[0];
    v43(v32, v30);
    if (v28)
      goto LABEL_4;
  }
  if (v51)
  {
    v39 = swift_errorRetain(v51);
    swift_willThrow(v39);
  }

  sub_10000CB4C((uint64_t)v15, &qword_100643470);
LABEL_12:
  swift_errorRelease(v51);
  return swift_release(v22);
}

uint64_t sub_100304970()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100304994(NSString *a1)
{
  uint64_t v1;

  return sub_10030010C(a1, *(NSURL **)(v1 + 16), *(void **)(v1 + 24), *(void (**)(char *))(v1 + 32), *(void **)(v1 + 40), *(uint64_t **)(v1 + 48));
}

uint64_t sub_1003049A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003049B4()
{
  id *v0;

  return swift_deallocObject(v0, 65, 7);
}

id sub_1003049F8(uint64_t a1)
{
  uint64_t v1;

  return sub_1002FE048(a1, *(void **)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(char **)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48), *(void **)(v1 + 56), *(_BYTE *)(v1 + 64));
}

uint64_t sub_100304A14()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  if (*(_QWORD *)(v0 + 48))
    swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void sub_100304A60()
{
  uint64_t v0;

  sub_1003003FC(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(void (**)(char *, _QWORD, __n128))(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_100304A74()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100304AA8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100304ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1002FF578(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100304C48()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  Swift::String v18;
  void (*v19)(char *, uint64_t);
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v0 = sub_10006922C(&qword_10064E2B8);
  v34 = *(_QWORD *)(v0 - 8);
  v35 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10006922C(&qword_10064E2C0);
  __chkstk_darwin(v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10030C410();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(16, 1, &type metadata for QuickLookFileIntent, v6);
  v7._object = (void *)0xEB0000000020796DLL;
  v7._countAndFlagsBits = 0x2079616C70736944;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_1004E2228);
  v9 = sub_10021F534((unint64_t *)&qword_100643928, (uint64_t)&unk_1004DB0C8);
  v33 = v9;
  v10 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v9);
  v11 = swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v10, v3, v11);
  swift_release(v10);
  v12._countAndFlagsBits = 0x656C696620;
  v12._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v5, &type metadata for QuickLookFileIntent, v6);
  v36 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for QuickLookFileIntent, v6);
  v13 = v35;
  v32 = *(void (**)(char *, uint64_t))(v34 + 8);
  v32(v2, v35);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(11, 1, &type metadata for QuickLookFileIntent, v6);
  v14._countAndFlagsBits = 0x6F4C206B63697551;
  v14._object = (void *)0xEB00000000206B6FLL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v14);
  v15 = swift_getKeyPath(&unk_1004E2228);
  v16 = _AssistantIntent.IntentProjection.subscript.getter(v15, v9);
  v17 = swift_release(v15);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v16, v3, v17);
  swift_release(v16);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v5, &type metadata for QuickLookFileIntent, v6);
  v34 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for QuickLookFileIntent, v6);
  v19 = v32;
  v32(v2, v13);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(23, 1, &type metadata for QuickLookFileIntent, v6);
  v20._object = (void *)0x8000000100526EC0;
  v20._countAndFlagsBits = 0xD000000000000017;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  v21 = swift_getKeyPath(&unk_1004E2228);
  v22 = _AssistantIntent.IntentProjection.subscript.getter(v21, v33);
  v23 = swift_release(v21);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v22, v3, v23);
  swift_release(v22);
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v24);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v5, &type metadata for QuickLookFileIntent, v6);
  v25 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for QuickLookFileIntent, v6);
  v19(v2, v13);
  v26 = sub_10006922C(&qword_10064E2C8);
  v27 = swift_allocObject(v26, 56, 7);
  *(_OWORD *)(v27 + 16) = xmmword_1004D9880;
  v28 = v34;
  *(_QWORD *)(v27 + 32) = v36;
  *(_QWORD *)(v27 + 40) = v28;
  *(_QWORD *)(v27 + 48) = v25;
  v29 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v27);
  return v29;
}

uint64_t sub_100304FF4(uint64_t a1)
{
  return sub_100305500(a1, (uint64_t)&unk_1004E2228, (uint64_t (*)(__n128))sub_10030C410, (uint64_t)sub_100305010);
}

uint64_t sub_100305010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x67706A2E6F746F74, 0xE800000000000000);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x206563696F766E49, 0xEB00000000666470);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x65746F6E79656BLL, 0xE700000000000000);
  v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x454D44414552, 0xE600000000000000);
  v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000017, 0x8000000100526E80);
  v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD00000000000001FLL, 0x8000000100526EA0);
  v6 = sub_10006922C(&qword_10064E140);
  v7 = swift_allocObject(v6, 80, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1004E1E40;
  *(_QWORD *)(v7 + 32) = v0;
  *(_QWORD *)(v7 + 40) = v1;
  *(_QWORD *)(v7 + 48) = v2;
  *(_QWORD *)(v7 + 56) = v3;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  v8 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100305140()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  Swift::String v18;
  void (*v19)(char *, uint64_t);
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v0 = sub_10006922C(&qword_10064E2A0);
  v32 = *(_QWORD *)(v0 - 8);
  v33 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10006922C(&qword_10064E2A8);
  __chkstk_darwin(v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100170058();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 1, &type metadata for RevealFileIntent, v6);
  v7._object = (void *)0x8000000100526E60;
  v7._countAndFlagsBits = 0xD000000000000011;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_1004E2200);
  v9 = sub_10021F534((unint64_t *)&qword_100643928, (uint64_t)&unk_1004DB0C8);
  v10 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v9);
  v11 = swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v10, v3, v11);
  swift_release(v10);
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v5, &type metadata for RevealFileIntent, v6);
  v34 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for RevealFileIntent, v6);
  v13 = v33;
  v31 = *(void (**)(char *, uint64_t))(v32 + 8);
  v31(v2, v33);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(15, 1, &type metadata for RevealFileIntent, v6);
  v14._countAndFlagsBits = 0x6D20657461636F4CLL;
  v14._object = (void *)0xEA00000000002079;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v14);
  v15 = swift_getKeyPath(&unk_1004E2200);
  v16 = _AssistantIntent.IntentProjection.subscript.getter(v15, v9);
  v17 = swift_release(v15);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v16, v3, v17);
  swift_release(v16);
  v18._countAndFlagsBits = 0x656C696620;
  v18._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v5, &type metadata for RevealFileIntent, v6);
  v32 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for RevealFileIntent, v6);
  v19 = v31;
  v31(v2, v13);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(7, 1, &type metadata for RevealFileIntent, v6);
  v20._countAndFlagsBits = 0x206C6165766552;
  v20._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  v21 = swift_getKeyPath(&unk_1004E2200);
  v22 = _AssistantIntent.IntentProjection.subscript.getter(v21, v9);
  v23 = swift_release(v21);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v22, v3, v23);
  swift_release(v22);
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v24);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v5, &type metadata for RevealFileIntent, v6);
  v25 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for RevealFileIntent, v6);
  v19(v2, v13);
  v26 = sub_10006922C(&qword_10064E2B0);
  v27 = swift_allocObject(v26, 56, 7);
  *(_OWORD *)(v27 + 16) = xmmword_1004D9880;
  v28 = v32;
  *(_QWORD *)(v27 + 32) = v34;
  *(_QWORD *)(v27 + 40) = v28;
  *(_QWORD *)(v27 + 48) = v25;
  v29 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v27);
  return v29;
}

uint64_t sub_1003054E4(uint64_t a1)
{
  return sub_100305500(a1, (uint64_t)&unk_1004E2200, (uint64_t (*)(__n128))sub_100170058, (uint64_t)sub_100305630);
}

uint64_t sub_100305500(uint64_t a1, uint64_t a2, uint64_t (*a3)(__n128), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v7 = type metadata accessor for _AssistantIntent.Value(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(a2);
  v12 = sub_10021F534((unint64_t *)&qword_100643928, (uint64_t)&unk_1004DB0C8);
  v13 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v12);
  v14 = swift_release(KeyPath);
  v15 = a3(v14);
  _AssistantIntent.Value.init<A>(for:builder:)(v13, a4, 0, v15);
  v16 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v17 = sub_10006922C(&qword_10064E170);
  v18 = swift_allocObject(v17, 40, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1004D9670;
  *(_QWORD *)(v18 + 32) = v16;
  v19 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v18);
  return v19;
}

uint64_t sub_100305630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x393232385F474D49, 0xED0000636965682ELL);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD00000000000001CLL, 0x8000000100526DA0);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000016, 0x8000000100526DC0);
  v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000014, 0x8000000100526DE0);
  v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000023, 0x8000000100526E00);
  v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000029, 0x8000000100526E30);
  v6 = sub_10006922C(&qword_10064E140);
  v7 = swift_allocObject(v6, 80, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1004E1E40;
  *(_QWORD *)(v7 + 32) = v0;
  *(_QWORD *)(v7 + 40) = v1;
  *(_QWORD *)(v7 + 48) = v2;
  *(_QWORD *)(v7 + 56) = v3;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  v8 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100305768(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  void (*v12)(char *, uint64_t);
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  Swift::String v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  Swift::String v43;
  Swift::String v44;
  char *v45;
  uint64_t v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  Swift::String v52;
  uint64_t v53;
  Swift::String v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  Swift::String v58;
  uint64_t v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  unsigned int v80;
  void (*v81)(char *);
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);

  v78 = a1;
  v83 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v1 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v3 = (char *)&v69 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10006922C(&qword_10064E288);
  __chkstk_darwin(v4);
  v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10006922C(&qword_10064E290);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1002A2C80();
  _AssistantIntent.Phrase.init(stringLiteral:)(0x6120657461657243, 0xEF7265646C6F6620, &type metadata for CreateFolderIntent, v11);
  v77 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v10, &type metadata for CreateFolderIntent, v11);
  v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  v82 = v7;
  v12(v10, v7);
  v84 = v12;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(23, 1, &type metadata for CreateFolderIntent, v11);
  v13._countAndFlagsBits = 0xD000000000000017;
  v13._object = (void *)0x8000000100526CF0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v13);
  v80 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v14 = v1;
  v81 = *(void (**)(char *))(v1 + 104);
  v74 = v3;
  v15 = v83;
  v81(v3);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v3, v4);
  v79 = *(void (**)(char *, uint64_t))(v14 + 8);
  v79(v3, v15);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v16);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for CreateFolderIntent, v11);
  v76 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v10, &type metadata for CreateFolderIntent, v11);
  v12(v10, v7);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(26, 2, &type metadata for CreateFolderIntent, v11);
  v17._countAndFlagsBits = 0xD000000000000016;
  v17._object = (void *)0x8000000100526D10;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  KeyPath = swift_getKeyPath(&unk_1004E21B0);
  v19 = sub_10030CEA8(&qword_10064E280, &qword_100648C80, (void (*)(void))sub_10030CE5C);
  v71 = v19;
  v20 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v19);
  v21 = swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v20, v4, v21);
  swift_release(v20);
  v22._countAndFlagsBits = 544106784;
  v22._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v22);
  v23 = swift_getKeyPath(&unk_1004E21D8);
  v24 = sub_10021F534((unint64_t *)&qword_100643928, (uint64_t)&unk_1004DB0C8);
  v25 = _AssistantIntent.IntentProjection.subscript.getter(v23, v24);
  v26 = swift_release(v23);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v25, v4, v26);
  swift_release(v25);
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for CreateFolderIntent, v11);
  v75 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v10, &type metadata for CreateFolderIntent, v11);
  v84(v10, v82);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(20, 2, &type metadata for CreateFolderIntent, v11);
  v28._countAndFlagsBits = 0x6120657461657243;
  v28._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v28);
  v29 = swift_getKeyPath(&unk_1004E21B0);
  v30 = _AssistantIntent.IntentProjection.subscript.getter(v29, v19);
  v31 = swift_release(v29);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v30, v4, v31);
  swift_release(v30);
  v32._countAndFlagsBits = 0x207265646C6F6620;
  v32._object = (void *)0xEB00000000206E69;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v32);
  v33 = swift_getKeyPath(&unk_1004E21D8);
  v34 = _AssistantIntent.IntentProjection.subscript.getter(v33, v24);
  v35 = swift_release(v33);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v34, v4, v35);
  swift_release(v34);
  v36._countAndFlagsBits = 0;
  v36._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v36);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for CreateFolderIntent, v11);
  v73 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v10, &type metadata for CreateFolderIntent, v11);
  v37 = v82;
  v38 = v84;
  v84(v10, v82);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(18, 1, &type metadata for CreateFolderIntent, v11);
  v39._countAndFlagsBits = 0x2077656E20646441;
  v39._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v39);
  v40 = swift_getKeyPath(&unk_1004E21D8);
  v41 = _AssistantIntent.IntentProjection.subscript.getter(v40, v24);
  v42 = swift_release(v40);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v41, v4, v42);
  swift_release(v41);
  v43._countAndFlagsBits = 0x6F74636572696420;
  v43._object = (void *)0xEA00000000007972;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v43);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for CreateFolderIntent, v11);
  v72 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v10, &type metadata for CreateFolderIntent, v11);
  v38(v10, v37);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(58, 2, &type metadata for CreateFolderIntent, v11);
  v44._countAndFlagsBits = 0xD000000000000028;
  v44._object = (void *)0x8000000100526D30;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v44);
  v45 = v74;
  v46 = v83;
  ((void (*)(char *, _QWORD, uint64_t))v81)(v74, v80, v83);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v45, v4);
  v79(v45, v46);
  v47._object = (void *)0x8000000100526D60;
  v47._countAndFlagsBits = 0xD000000000000011;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v47);
  v48 = swift_getKeyPath(&unk_1004E21B0);
  v49 = v71;
  v50 = _AssistantIntent.IntentProjection.subscript.getter(v48, v71);
  v51 = swift_release(v48);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v50, v4, v51);
  swift_release(v50);
  v52._countAndFlagsBits = 63;
  v52._object = (void *)0xE100000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v52);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for CreateFolderIntent, v11);
  v70 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v10, &type metadata for CreateFolderIntent, v11);
  v53 = v82;
  v84(v10, v82);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(28, 2, &type metadata for CreateFolderIntent, v11);
  v54._countAndFlagsBits = 0xD000000000000018;
  v54._object = (void *)0x8000000100526D80;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v54);
  v55 = swift_getKeyPath(&unk_1004E21B0);
  v56 = _AssistantIntent.IntentProjection.subscript.getter(v55, v49);
  v57 = swift_release(v55);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v56, v4, v57);
  swift_release(v56);
  v58._countAndFlagsBits = 544106784;
  v58._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v58);
  v59 = v83;
  ((void (*)(char *, _QWORD, uint64_t))v81)(v45, v80, v83);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v45, v4);
  v79(v45, v59);
  v60._countAndFlagsBits = 0;
  v60._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v60);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for CreateFolderIntent, v11);
  v61 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v10, &type metadata for CreateFolderIntent, v11);
  v84(v10, v53);
  v62 = sub_10006922C(&qword_10064E298);
  v63 = swift_allocObject(v62, 88, 7);
  *(_OWORD *)(v63 + 16) = xmmword_1004DB540;
  v64 = v76;
  *(_QWORD *)(v63 + 32) = v77;
  *(_QWORD *)(v63 + 40) = v64;
  v65 = v73;
  *(_QWORD *)(v63 + 48) = v75;
  *(_QWORD *)(v63 + 56) = v65;
  v66 = v70;
  *(_QWORD *)(v63 + 64) = v72;
  *(_QWORD *)(v63 + 72) = v66;
  *(_QWORD *)(v63 + 80) = v61;
  v67 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v63);
  return v67;
}

uint64_t sub_100305FDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v0 = type metadata accessor for _AssistantIntent.Value(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1004E21B0);
  v5 = sub_10030CEA8(&qword_10064E280, &qword_100648C80, (void (*)(void))sub_10030CE5C);
  v6 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v5);
  swift_release(KeyPath);
  v7 = sub_1002A2C80();
  _AssistantIntent.Value.init<A>(for:builder:)(v6, sub_100306180, 0, v7);
  v8 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v3);
  v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v3, v0);
  v10 = swift_getKeyPath(&unk_1004E21D8);
  v11 = sub_10021F534((unint64_t *)&qword_100643928, (uint64_t)&unk_1004DB0C8);
  v12 = _AssistantIntent.IntentProjection.subscript.getter(v10, v11);
  swift_release(v10);
  _AssistantIntent.Value.init<A>(for:builder:)(v12, sub_1003062AC, 0, v7);
  v13 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v3);
  v9(v3, v0);
  v14 = sub_10006922C(&qword_10064E170);
  v15 = swift_allocObject(v14, 48, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1004D4CE0;
  *(_QWORD *)(v15 + 32) = v8;
  *(_QWORD *)(v15 + 40) = v13;
  v16 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v15);
  return v16;
}

uint64_t sub_100306180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000017, 0x8000000100526CB0);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x73616D6F6C706944, 0xE800000000000000);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6F70655220786154, 0xEB00000000737472);
  v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000010, 0x8000000100526CD0);
  v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x7361736956, 0xE500000000000000);
  v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x70756B636142, 0xE600000000000000);
  v6 = sub_10006922C(&qword_10064E140);
  v7 = swift_allocObject(v6, 80, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1004E1E40;
  *(_QWORD *)(v7 + 32) = v0;
  *(_QWORD *)(v7 + 40) = v1;
  *(_QWORD *)(v7 + 48) = v2;
  *(_QWORD *)(v7 + 56) = v3;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  v8 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_1003062AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x746E656D75636F44, 0xE900000000000073);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x64616F6C6E776F44, 0xE900000000000073);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6F746F685020794DLL, 0xE900000000000073);
  v3 = sub_10006922C(&qword_10064E140);
  v4 = swift_allocObject(v3, 56, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1004D9880;
  *(_QWORD *)(v4 + 32) = v0;
  *(_QWORD *)(v4 + 40) = v1;
  *(_QWORD *)(v4 + 48) = v2;
  v5 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_100306370(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  Swift::String v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  Swift::String v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  Swift::String v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v38 = a1;
  v42 = sub_10006922C(&qword_10064E268);
  v1 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v3 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10006922C(&qword_10064E270);
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10021F4A0();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(10, 1, &type metadata for DuplicateFilesIntent, v7);
  v8._countAndFlagsBits = 0x746163696C707544;
  v8._object = (void *)0xEA00000000002065;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v8);
  KeyPath = swift_getKeyPath(&unk_1004E2188);
  v10 = sub_10030CFB0((unint64_t *)&qword_100643920, &qword_10064C3B0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v43 = v10;
  v11 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v10);
  v12 = swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v11, v4, v12);
  swift_release(v11);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v13);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for DuplicateFilesIntent, v7);
  v41 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for DuplicateFilesIntent, v7);
  v14 = *(void (**)(char *, uint64_t))(v1 + 8);
  v15 = v42;
  v14(v3, v42);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(22, 1, &type metadata for DuplicateFilesIntent, v7);
  v16._countAndFlagsBits = 0xD000000000000016;
  v16._object = (void *)0x8000000100526C50;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v16);
  v17 = swift_getKeyPath(&unk_1004E2188);
  v18 = _AssistantIntent.IntentProjection.subscript.getter(v17, v10);
  v19 = swift_release(v17);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v18, v4, v19);
  swift_release(v18);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for DuplicateFilesIntent, v7);
  v40 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for DuplicateFilesIntent, v7);
  v14(v3, v15);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 1, &type metadata for DuplicateFilesIntent, v7);
  v21._object = (void *)0x8000000100526C70;
  v21._countAndFlagsBits = 0xD000000000000011;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v21);
  v22 = swift_getKeyPath(&unk_1004E2188);
  v23 = _AssistantIntent.IntentProjection.subscript.getter(v22, v43);
  v24 = swift_release(v22);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v23, v4, v24);
  swift_release(v23);
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v25);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for DuplicateFilesIntent, v7);
  v39 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for DuplicateFilesIntent, v7);
  v26 = v42;
  v14(v3, v42);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(26, 1, &type metadata for DuplicateFilesIntent, v7);
  v27._countAndFlagsBits = 0xD000000000000014;
  v27._object = (void *)0x8000000100526C90;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  v28 = swift_getKeyPath(&unk_1004E2188);
  v29 = _AssistantIntent.IntentProjection.subscript.getter(v28, v43);
  v30 = swift_release(v28);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v29, v4, v30);
  swift_release(v29);
  v31._countAndFlagsBits = 0x73656C696620;
  v31._object = (void *)0xE600000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v31);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v6, &type metadata for DuplicateFilesIntent, v7);
  v32 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for DuplicateFilesIntent, v7);
  v14(v3, v26);
  v33 = sub_10006922C(&qword_10064E278);
  v34 = swift_allocObject(v33, 64, 7);
  *(_OWORD *)(v34 + 16) = xmmword_1004D9B50;
  v35 = v40;
  *(_QWORD *)(v34 + 32) = v41;
  *(_QWORD *)(v34 + 40) = v35;
  *(_QWORD *)(v34 + 48) = v39;
  *(_QWORD *)(v34 + 56) = v32;
  v36 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v34);
  return v36;
}

uint64_t sub_1003067EC(uint64_t a1)
{
  return sub_100306F4C(a1, (uint64_t)&unk_1004E2188, (uint64_t (*)(__n128))sub_10021F4A0, (uint64_t)sub_100306808);
}

uint64_t sub_100306808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x69207261626F6F46, 0xEC0000006567616DLL);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000011, 0x8000000100526BD0);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x2E343230322D3351, 0xEF737265626D756ELL);
  v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x2E45434E4543494CLL, 0xEA0000000000646DLL);
  v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000026, 0x8000000100526BF0);
  v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000025, 0x8000000100526C20);
  v6 = sub_10006922C(&qword_10064E140);
  v7 = swift_allocObject(v6, 80, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1004E1E40;
  *(_QWORD *)(v7 + 32) = v0;
  *(_QWORD *)(v7 + 40) = v1;
  *(_QWORD *)(v7 + 48) = v2;
  *(_QWORD *)(v7 + 56) = v3;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  v8 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10030694C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  Swift::String v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  void (*v36)(char *, uint64_t);
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  unsigned int v56;
  void (*v57)(char *);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v54 = a1;
  v1 = sub_10006922C(&qword_10064E250);
  v2 = *(_QWORD *)(v1 - 8);
  v60 = v1;
  v61 = v2;
  __chkstk_darwin(v1);
  v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v5 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10006922C(&qword_10064E258);
  __chkstk_darwin(v8);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000EA624();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(18, 2, &type metadata for DeleteFilesIntent, v11);
  v12._countAndFlagsBits = 0x2065766F4DLL;
  v12._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  KeyPath = swift_getKeyPath(&unk_1004E2160);
  v14 = sub_10030CFB0((unint64_t *)&qword_100643920, &qword_10064C3B0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v58 = v14;
  v15 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v14);
  v16 = swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v15, v8, v16);
  swift_release(v15);
  v17._countAndFlagsBits = 0x73617274206F7420;
  v17._object = (void *)0xED0000206E692068;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  v56 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v57 = *(void (**)(char *))(v5 + 104);
  v18 = v59;
  v57(v7);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v55 = *(void (**)(char *, uint64_t))(v5 + 8);
  v55(v7, v18);
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for DeleteFilesIntent, v11);
  v53 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v4, &type metadata for DeleteFilesIntent, v11);
  v20 = v60;
  v61 = *(_QWORD *)(v61 + 8);
  ((void (*)(char *, uint64_t))v61)(v4, v60);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(10, 2, &type metadata for DeleteFilesIntent, v11);
  v21._countAndFlagsBits = 0x206873617254;
  v21._object = (void *)0xE600000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v21);
  v22 = swift_getKeyPath(&unk_1004E2160);
  v23 = _AssistantIntent.IntentProjection.subscript.getter(v22, v14);
  v24 = swift_release(v22);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v23, v8, v24);
  swift_release(v23);
  v25._countAndFlagsBits = 544106784;
  v25._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v25);
  v26 = v59;
  ((void (*)(char *, _QWORD, uint64_t))v57)(v7, v56, v59);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v55(v7, v26);
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for DeleteFilesIntent, v11);
  v52 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v4, &type metadata for DeleteFilesIntent, v11);
  ((void (*)(char *, uint64_t))v61)(v4, v20);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(11, 2, &type metadata for DeleteFilesIntent, v11);
  v28._countAndFlagsBits = 0x206574656C6544;
  v28._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v28);
  v29 = swift_getKeyPath(&unk_1004E2160);
  v30 = _AssistantIntent.IntentProjection.subscript.getter(v29, v58);
  v31 = swift_release(v29);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v30, v8, v31);
  swift_release(v30);
  v32._countAndFlagsBits = 544106784;
  v32._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v32);
  v33 = v56;
  v34 = v59;
  v35 = (void (*)(char *, uint64_t, uint64_t))v57;
  ((void (*)(char *, _QWORD, uint64_t))v57)(v7, v56, v59);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v36 = v55;
  v55(v7, v34);
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v37);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for DeleteFilesIntent, v11);
  v51 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v4, &type metadata for DeleteFilesIntent, v11);
  ((void (*)(char *, uint64_t))v61)(v4, v60);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(23, 2, &type metadata for DeleteFilesIntent, v11);
  v38._object = (void *)0x8000000100526BB0;
  v38._countAndFlagsBits = 0xD000000000000015;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v38);
  v35(v7, v33, v34);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v36(v7, v34);
  v39._countAndFlagsBits = 8250;
  v39._object = (void *)0xE200000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v39);
  v40 = swift_getKeyPath(&unk_1004E2160);
  v41 = _AssistantIntent.IntentProjection.subscript.getter(v40, v58);
  v42 = swift_release(v40);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v41, v8, v42);
  swift_release(v41);
  v43._countAndFlagsBits = 0;
  v43._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v43);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for DeleteFilesIntent, v11);
  v44 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v4, &type metadata for DeleteFilesIntent, v11);
  ((void (*)(char *, uint64_t))v61)(v4, v60);
  v45 = sub_10006922C(&qword_10064E260);
  v46 = swift_allocObject(v45, 64, 7);
  *(_OWORD *)(v46 + 16) = xmmword_1004D9B50;
  v47 = v52;
  *(_QWORD *)(v46 + 32) = v53;
  *(_QWORD *)(v46 + 40) = v47;
  *(_QWORD *)(v46 + 48) = v51;
  *(_QWORD *)(v46 + 56) = v44;
  v48 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v46);
  return v48;
}

uint64_t sub_100306F30(uint64_t a1)
{
  return sub_100306F4C(a1, (uint64_t)&unk_1004E2160, (uint64_t (*)(__n128))sub_1000EA624, (uint64_t)sub_100307084);
}

uint64_t sub_100306F4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(__n128), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v7 = type metadata accessor for _AssistantIntent.Value(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(a2);
  v12 = sub_10030CFB0((unint64_t *)&qword_100643920, &qword_10064C3B0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v13 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v12);
  v14 = swift_release(KeyPath);
  v15 = a3(v14);
  _AssistantIntent.Value.init<A>(for:builder:)(v13, a4, 0, v15);
  v16 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v17 = sub_10006922C(&qword_10064E170);
  v18 = swift_allocObject(v17, 40, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1004D9670;
  *(_QWORD *)(v18 + 32) = v16;
  v19 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v18);
  return v19;
}

uint64_t sub_100307084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000013, 0x80000001005266A0);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x62777A7275697870, 0xED000031366C6171);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000025, 0x8000000100526AC0);
  v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD00000000000006ALL, 0x8000000100526AF0);
  v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000010, 0x8000000100526B60);
  v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD00000000000002DLL, 0x8000000100526B80);
  v6 = sub_10006922C(&qword_10064E140);
  v7 = swift_allocObject(v6, 80, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1004E1E40;
  *(_QWORD *)(v7 + 32) = v0;
  *(_QWORD *)(v7 + 40) = v1;
  *(_QWORD *)(v7 + 48) = v2;
  *(_QWORD *)(v7 + 56) = v3;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  v8 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_1003071BC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  Swift::String v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v26 = sub_10006922C(&qword_10064E238);
  v0 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v2 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10006922C(&qword_10064E240);
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10030CC24();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 1, &type metadata for FavoriteFoldersIntent, v6);
  v7._countAndFlagsBits = 543450177;
  v7._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_1004E2138);
  v9 = sub_10030CFB0((unint64_t *)&qword_100643920, &qword_10064C3B0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v10 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v9);
  v11 = swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v10, v3, v11);
  swift_release(v10);
  v12._countAndFlagsBits = 0x6F766166206F7420;
  v12._object = (void *)0xED00007365746972;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v5, &type metadata for FavoriteFoldersIntent, v6);
  v25 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for FavoriteFoldersIntent, v6);
  v13 = *(void (**)(char *, uint64_t))(v0 + 8);
  v14 = v26;
  v13(v2, v26);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(16, 1, &type metadata for FavoriteFoldersIntent, v6);
  v15._countAndFlagsBits = 0x20656B614DLL;
  v15._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  v16 = swift_getKeyPath(&unk_1004E2138);
  v17 = _AssistantIntent.IntentProjection.subscript.getter(v16, v9);
  v18 = swift_release(v16);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v17, v3, v18);
  swift_release(v17);
  v19._countAndFlagsBits = 0x726F766166206120;
  v19._object = (void *)0xEB00000000657469;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v5, &type metadata for FavoriteFoldersIntent, v6);
  v20 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for FavoriteFoldersIntent, v6);
  v13(v2, v14);
  v21 = sub_10006922C(&qword_10064E248);
  v22 = swift_allocObject(v21, 48, 7);
  *(_OWORD *)(v22 + 16) = xmmword_1004D4CE0;
  *(_QWORD *)(v22 + 32) = v25;
  *(_QWORD *)(v22 + 40) = v20;
  v23 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v22);
  return v23;
}

uint64_t sub_1003074A4(uint64_t a1)
{
  return sub_100307D60(a1, (uint64_t)sub_1003074B8, (uint64_t)sub_1003074D0);
}

uint64_t sub_1003074B8()
{
  return sub_10030C2B8(0x657469726F766146, 0xE800000000000000);
}

uint64_t sub_1003074D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000027, 0x8000000100526A70);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x636F642064726F57, 0xEE0073746E656D75);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000023, 0x8000000100526A20);
  v3 = sub_10006922C(&qword_10064E140);
  v4 = swift_allocObject(v3, 56, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1004D9880;
  *(_QWORD *)(v4 + 32) = v0;
  *(_QWORD *)(v4 + 40) = v1;
  *(_QWORD *)(v4 + 48) = v2;
  v5 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_1003075A0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  Swift::String v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v26 = sub_10006922C(&qword_10064E238);
  v0 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v2 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10006922C(&qword_10064E240);
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10030CC24();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(22, 1, &type metadata for FavoriteFoldersIntent, v6);
  v7._countAndFlagsBits = 0x2065766F6D6552;
  v7._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_1004E2138);
  v9 = sub_10030CFB0((unint64_t *)&qword_100643920, &qword_10064C3B0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v10 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v9);
  v11 = swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v10, v3, v11);
  swift_release(v10);
  v12._countAndFlagsBits = 0x6166206D6F726620;
  v12._object = (void *)0xEF73657469726F76;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v5, &type metadata for FavoriteFoldersIntent, v6);
  v25 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for FavoriteFoldersIntent, v6);
  v13 = *(void (**)(char *, uint64_t))(v0 + 8);
  v14 = v26;
  v13(v2, v26);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(22, 1, &type metadata for FavoriteFoldersIntent, v6);
  v15._countAndFlagsBits = 0x20656B6154;
  v15._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  v16 = swift_getKeyPath(&unk_1004E2138);
  v17 = _AssistantIntent.IntentProjection.subscript.getter(v16, v9);
  v18 = swift_release(v16);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v17, v3, v18);
  swift_release(v17);
  v19._object = (void *)0x8000000100526AA0;
  v19._countAndFlagsBits = 0xD000000000000011;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v5, &type metadata for FavoriteFoldersIntent, v6);
  v20 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for FavoriteFoldersIntent, v6);
  v13(v2, v14);
  v21 = sub_10006922C(&qword_10064E248);
  v22 = swift_allocObject(v21, 48, 7);
  *(_OWORD *)(v22 + 16) = xmmword_1004D4CE0;
  *(_QWORD *)(v22 + 32) = v25;
  *(_QWORD *)(v22 + 40) = v20;
  v23 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v22);
  return v23;
}

uint64_t sub_10030788C(uint64_t a1)
{
  return sub_100307D60(a1, (uint64_t)sub_1003078A0, (uint64_t)sub_10030D414);
}

uint64_t sub_1003078A0()
{
  return sub_10030C2B8(0x69726F7661666E55, 0xEA00000000006574);
}

uint64_t sub_1003078BC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t KeyPath;
  uint64_t v9;
  __n128 v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __n128 v26;
  Swift::String v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = sub_10006922C(&qword_10064E238);
  v0 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v2 = (char *)&v45 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10006922C(&qword_10064E240);
  __chkstk_darwin(v3);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10030CC24();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(1, 2, &type metadata for FavoriteFoldersIntent, v6);
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_1004E2110);
  v48 = sub_10030D290();
  v9 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v48);
  v10 = swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v9, v3, v10);
  swift_release(v9);
  v11._countAndFlagsBits = 32;
  v11._object = (void *)0xE100000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v11);
  v12 = swift_getKeyPath(&unk_1004E2138);
  v13 = sub_10030CFB0((unint64_t *)&qword_100643920, &qword_10064C3B0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v47 = v13;
  v14 = _AssistantIntent.IntentProjection.subscript.getter(v12, v13);
  v15 = swift_release(v12);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v14, v3, v15);
  swift_release(v14);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v16);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v5, &type metadata for FavoriteFoldersIntent, v6);
  v49 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for FavoriteFoldersIntent, v6);
  v45 = *(void (**)(char *, uint64_t))(v0 + 8);
  v17 = v50;
  v45(v2, v50);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(8, 2, &type metadata for FavoriteFoldersIntent, v6);
  v18._countAndFlagsBits = 544499027;
  v18._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  v19 = swift_getKeyPath(&unk_1004E2138);
  v20 = _AssistantIntent.IntentProjection.subscript.getter(v19, v13);
  v21 = swift_release(v19);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v20, v3, v21);
  swift_release(v20);
  v22._countAndFlagsBits = 544432416;
  v22._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v22);
  v23 = swift_getKeyPath(&unk_1004E2110);
  v24 = v48;
  v25 = _AssistantIntent.IntentProjection.subscript.getter(v23, v48);
  v26 = swift_release(v23);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v25, v3, v26);
  swift_release(v25);
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v5, &type metadata for FavoriteFoldersIntent, v6);
  v46 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for FavoriteFoldersIntent, v6);
  v28 = v17;
  v29 = v45;
  v45(v2, v28);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(14, 2, &type metadata for FavoriteFoldersIntent, v6);
  v30._countAndFlagsBits = 0x7420746E61772049;
  v30._object = (void *)0xEA0000000000206FLL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v30);
  v31 = swift_getKeyPath(&unk_1004E2110);
  v32 = _AssistantIntent.IntentProjection.subscript.getter(v31, v24);
  v33 = swift_release(v31);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v32, v3, v33);
  swift_release(v32);
  v34._countAndFlagsBits = 544828704;
  v34._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v34);
  v35 = swift_getKeyPath(&unk_1004E2138);
  v36 = _AssistantIntent.IntentProjection.subscript.getter(v35, v47);
  v37 = swift_release(v35);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v36, v3, v37);
  swift_release(v36);
  v38._countAndFlagsBits = 0;
  v38._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v38);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v5, &type metadata for FavoriteFoldersIntent, v6);
  v39 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for FavoriteFoldersIntent, v6);
  v29(v2, v50);
  v40 = sub_10006922C(&qword_10064E248);
  v41 = swift_allocObject(v40, 56, 7);
  *(_OWORD *)(v41 + 16) = xmmword_1004D9880;
  v42 = v46;
  *(_QWORD *)(v41 + 32) = v49;
  *(_QWORD *)(v41 + 40) = v42;
  *(_QWORD *)(v41 + 48) = v39;
  v43 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v41);
  return v43;
}

uint64_t sub_100307D4C(uint64_t a1)
{
  return sub_100307D60(a1, (uint64_t)sub_100307EF4, (uint64_t)sub_10030D414);
}

uint64_t sub_100307D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t KeyPath;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v5 = type metadata accessor for _AssistantIntent.Value(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1004E2110);
  v10 = sub_10030D290();
  v11 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v10);
  swift_release(KeyPath);
  v12 = sub_10030CC24();
  _AssistantIntent.Value.init<A>(for:builder:)(v11, a2, 0, v12);
  v13 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v8);
  v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, v5);
  v15 = swift_getKeyPath(&unk_1004E2138);
  v16 = sub_10030CFB0((unint64_t *)&qword_100643920, &qword_10064C3B0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v17 = _AssistantIntent.IntentProjection.subscript.getter(v15, v16);
  swift_release(v15);
  _AssistantIntent.Value.init<A>(for:builder:)(v17, a3, 0, v12);
  v18 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v8);
  v14(v8, v5);
  v19 = sub_10006922C(&qword_10064E170);
  v20 = swift_allocObject(v19, 48, 7);
  *(_OWORD *)(v20 + 16) = xmmword_1004D4CE0;
  *(_QWORD *)(v20 + 32) = v13;
  *(_QWORD *)(v20 + 40) = v18;
  v21 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v20);
  return v21;
}

uint64_t sub_100307EF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x657469726F766146, 0xE800000000000000);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x69726F7661666E55, 0xEA00000000006574);
  v2 = sub_10006922C(&qword_10064E140);
  v3 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1004D4CE0;
  *(_QWORD *)(v3 + 32) = v0;
  *(_QWORD *)(v3 + 40) = v1;
  v4 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_100307F90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  Swift::String v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  Swift::String v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v32 = a1;
  v1 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v36 = *(_QWORD *)(v1 - 8);
  v37 = v1;
  __chkstk_darwin(v1);
  v35 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_10006922C(&qword_10064E218);
  v3 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10006922C(&qword_10064E220);
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100111478();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 1, &type metadata for GetContentOfFolderIntent, v9);
  v10._countAndFlagsBits = 0x739980E274616857;
  v10._object = (void *)0xAC000000206E6920;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v10);
  KeyPath = swift_getKeyPath(&unk_1004E20E8);
  v12 = sub_10021F534((unint64_t *)&qword_100643928, (uint64_t)&unk_1004DB0C8);
  v13 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v12);
  v14 = swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v13, v6, v14);
  swift_release(v13);
  v15._countAndFlagsBits = 63;
  v15._object = (void *)0xE100000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for GetContentOfFolderIntent, v9);
  v34 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v5, &type metadata for GetContentOfFolderIntent, v9);
  v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17 = v33;
  v16(v5, v33);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(30, 2, &type metadata for GetContentOfFolderIntent, v9);
  v18._object = (void *)0x8000000100526A50;
  v18._countAndFlagsBits = 0xD000000000000011;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  v19 = swift_getKeyPath(&unk_1004E20E8);
  v20 = _AssistantIntent.IntentProjection.subscript.getter(v19, v12);
  v21 = swift_release(v19);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v20, v6, v21);
  swift_release(v20);
  v22._countAndFlagsBits = 0x207265646C6F6620;
  v22._object = (void *)0xED0000206D6F7266;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v22);
  v24 = v35;
  v23 = v36;
  v25 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v35, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v37);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v24, v6);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v25);
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for GetContentOfFolderIntent, v9);
  v27 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v5, &type metadata for GetContentOfFolderIntent, v9);
  v16(v5, v17);
  v28 = sub_10006922C(&qword_10064E228);
  v29 = swift_allocObject(v28, 48, 7);
  *(_OWORD *)(v29 + 16) = xmmword_1004D4CE0;
  *(_QWORD *)(v29 + 32) = v34;
  *(_QWORD *)(v29 + 40) = v27;
  v30 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)(v29);
  swift_bridgeObjectRelease(v29);
  return v30;
}

uint64_t sub_100308300(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v2 = type metadata accessor for DOCFileEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v9 - v6;
  sub_1000EACB4(a1, (uint64_t)&v9 - v6);
  sub_1000EACB4((uint64_t)v7, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_1000EACF8((uint64_t)v7);
}

uint64_t sub_1003083A8(uint64_t a1)
{
  return sub_100305500(a1, (uint64_t)&unk_1004E20E8, (uint64_t (*)(__n128))sub_100111478, (uint64_t)sub_1003083C4);
}

uint64_t sub_1003083C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x64616F6C6E776F44, 0xE900000000000073);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(1933984848, 0xE400000000000000);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6B726F77656D6F48, 0xE800000000000000);
  v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x646C6F462077654ELL, 0xEA00000000007265);
  v4 = sub_10006922C(&qword_10064E140);
  v5 = swift_allocObject(v4, 64, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1004D9B50;
  *(_QWORD *)(v5 + 32) = v0;
  *(_QWORD *)(v5 + 40) = v1;
  *(_QWORD *)(v5 + 48) = v2;
  *(_QWORD *)(v5 + 56) = v3;
  v6 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_1003084A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t KeyPath;
  uint64_t v14;
  __n128 v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a1;
  v1 = sub_10006922C(&qword_10064E200);
  v34 = *(_QWORD *)(v1 - 8);
  v35 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10006922C(&qword_10064E208);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10030CC68();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(10, 2, &type metadata for GetFilesIntent, v11);
  v12._countAndFlagsBits = 544499015;
  v12._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  KeyPath = swift_getKeyPath(&unk_1004E20C0);
  v32 = sub_10030CFB0((unint64_t *)&qword_100643920, &qword_10064C3B0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v14 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v32);
  v15 = swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v14, v8, v15);
  swift_release(v14);
  v16._countAndFlagsBits = 0x206D6F726620;
  v16._object = (void *)0xE600000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v4);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for GetFilesIntent, v11);
  v31 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for GetFilesIntent, v11);
  v18 = v35;
  v19 = *(void (**)(char *, uint64_t))(v34 + 8);
  v19(v3, v35);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(7, 1, &type metadata for GetFilesIntent, v11);
  v20._countAndFlagsBits = 0x207463656C6553;
  v20._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  v21 = swift_getKeyPath(&unk_1004E20C0);
  v22 = _AssistantIntent.IntentProjection.subscript.getter(v21, v32);
  v23 = swift_release(v21);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v22, v8, v23);
  swift_release(v22);
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v24);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for GetFilesIntent, v11);
  v25 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for GetFilesIntent, v11);
  v19(v3, v18);
  v26 = sub_10006922C(&qword_10064E210);
  v27 = swift_allocObject(v26, 48, 7);
  *(_OWORD *)(v27 + 16) = xmmword_1004D4CE0;
  *(_QWORD *)(v27 + 32) = v31;
  *(_QWORD *)(v27 + 40) = v25;
  v28 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)(v27);
  swift_bridgeObjectRelease(v27);
  return v28;
}

uint64_t sub_1003087DC(uint64_t a1)
{
  return sub_100306F4C(a1, (uint64_t)&unk_1004E20C0, (uint64_t (*)(__n128))sub_10030CC68, (uint64_t)sub_1003087F8);
}

uint64_t sub_1003087F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000013, 0x8000000100526A00);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x696F707265776F50, 0xEB0000000073746ELL);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000023, 0x8000000100526A20);
  v3 = sub_10006922C(&qword_10064E140);
  v4 = swift_allocObject(v3, 56, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1004D9880;
  *(_QWORD *)(v4 + 32) = v0;
  *(_QWORD *)(v4 + 40) = v1;
  *(_QWORD *)(v4 + 48) = v2;
  v5 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_1003088C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  Swift::String v9;
  uint64_t KeyPath;
  uint64_t v11;
  __n128 v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  Swift::String v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  Swift::String v26;
  void (*v27)(char *, uint64_t);
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  Swift::String v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  uint64_t v60;

  v59 = sub_10006922C(&qword_10064E1E8);
  v2 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v4 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10006922C(&qword_10064E1F0);
  __chkstk_darwin(v5);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10016F75C();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 2, &type metadata for MoveFilesIntent, v8);
  v9._countAndFlagsBits = 0x2065766F4DLL;
  v9._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v9);
  KeyPath = swift_getKeyPath(&unk_1004E2048);
  v54 = sub_10030CFB0((unint64_t *)&qword_100643920, &qword_10064C3B0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v11 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v54);
  v12 = swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v11, v5, v12);
  swift_release(v11);
  v13._countAndFlagsBits = 544175136;
  v13._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v13);
  v14 = swift_getKeyPath(&unk_1004E2070);
  v60 = sub_10021F534((unint64_t *)&qword_100643928, (uint64_t)&unk_1004DB0C8);
  v53 = a1;
  v15 = _AssistantIntent.IntentProjection.subscript.getter(v14, v60);
  v16 = swift_release(v14);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v15, v5, v16);
  swift_release(v15);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v7, &type metadata for MoveFilesIntent, v8);
  v18 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v4, &type metadata for MoveFilesIntent, v8);
  v19 = *(void (**)(char *, uint64_t))(v2 + 8);
  v57 = v18;
  v58 = v19;
  v20 = v59;
  v19(v4, v59);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(5, 1, &type metadata for MoveFilesIntent, v8);
  v21._countAndFlagsBits = 0x2065766F4DLL;
  v21._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v21);
  v22 = swift_getKeyPath(&unk_1004E2048);
  v23 = v54;
  v24 = _AssistantIntent.IntentProjection.subscript.getter(v22, v54);
  v25 = swift_release(v22);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v24, v5, v25);
  swift_release(v24);
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v7, &type metadata for MoveFilesIntent, v8);
  v56 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v4, &type metadata for MoveFilesIntent, v8);
  v27 = v58;
  v58(v4, v20);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(26, 2, &type metadata for MoveFilesIntent, v8);
  v28._countAndFlagsBits = 0x6C69662065766F4DLL;
  v28._object = (void *)0xEA00000000002065;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v28);
  v29 = swift_getKeyPath(&unk_1004E2048);
  v30 = _AssistantIntent.IntentProjection.subscript.getter(v29, v23);
  v31 = swift_release(v29);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v30, v5, v31);
  swift_release(v30);
  v32._countAndFlagsBits = 0x796D206F746E6920;
  v32._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v32);
  v33 = swift_getKeyPath(&unk_1004E2070);
  v34 = _AssistantIntent.IntentProjection.subscript.getter(v33, v60);
  v35 = swift_release(v33);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v34, v5, v35);
  swift_release(v34);
  v36._countAndFlagsBits = 0x7265646C6F6620;
  v36._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v36);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v7, &type metadata for MoveFilesIntent, v8);
  v55 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v4, &type metadata for MoveFilesIntent, v8);
  v37 = v59;
  v27(v4, v59);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(43, 2, &type metadata for MoveFilesIntent, v8);
  v38._countAndFlagsBits = 0x2065766F4DLL;
  v38._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v38);
  v39 = swift_getKeyPath(&unk_1004E2048);
  v40 = _AssistantIntent.IntentProjection.subscript.getter(v39, v23);
  v41 = swift_release(v39);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v40, v5, v41);
  swift_release(v40);
  v42._countAndFlagsBits = 544175136;
  v42._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v42);
  v43 = swift_getKeyPath(&unk_1004E2070);
  v44 = _AssistantIntent.IntentProjection.subscript.getter(v43, v60);
  v45 = swift_release(v43);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v44, v5, v45);
  swift_release(v44);
  v46._object = (void *)0x80000001005269D0;
  v46._countAndFlagsBits = 0xD000000000000022;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v46);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v7, &type metadata for MoveFilesIntent, v8);
  v47 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v4, &type metadata for MoveFilesIntent, v8);
  v58(v4, v37);
  v48 = sub_10006922C(&qword_10064E1F8);
  v49 = swift_allocObject(v48, 64, 7);
  *(_OWORD *)(v49 + 16) = xmmword_1004D9B50;
  v50 = v56;
  *(_QWORD *)(v49 + 32) = v57;
  *(_QWORD *)(v49 + 40) = v50;
  *(_QWORD *)(v49 + 48) = v55;
  *(_QWORD *)(v49 + 56) = v47;
  v51 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)(v49);
  swift_bridgeObjectRelease(v49);
  return v51;
}

uint64_t sub_100308E6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v2 = type metadata accessor for DOCFileEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v9 - v6;
  sub_1000EACB4(a1, (uint64_t)&v9 - v6);
  sub_1000EACB4((uint64_t)v7, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_1000EACF8((uint64_t)v7);
}

uint64_t sub_100308F14(uint64_t a1)
{
  return sub_100309598(a1, (uint64_t)sub_100308F30, (uint64_t)sub_100309068, (uint64_t)sub_10030906C);
}

uint64_t sub_100308F30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD00000000000002FLL, 0x80000001005268A0);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD00000000000001DLL, 0x80000001005268D0);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000011, 0x8000000100526630);
  v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x20676E6977617244, 0xED00006567616D69);
  v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000020, 0x80000001005268F0);
  v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000023, 0x8000000100526920);
  v6 = sub_10006922C(&qword_10064E140);
  v7 = swift_allocObject(v6, 80, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1004E1E40;
  *(_QWORD *)(v7 + 32) = v0;
  *(_QWORD *)(v7 + 40) = v1;
  *(_QWORD *)(v7 + 48) = v2;
  *(_QWORD *)(v7 + 56) = v3;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  v8 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10030906C()
{
  return sub_10030C2B8(0x65736C6166, 0xE500000000000000);
}

uint64_t sub_100309080(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  Swift::String v11;
  uint64_t KeyPath;
  uint64_t v13;
  __n128 v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  Swift::String v29;
  void (*v30)(char *, uint64_t);
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v46[2];
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = sub_10006922C(&qword_10064E1E8);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = v2;
  __chkstk_darwin(v2);
  v6 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10006922C(&qword_10064E1F0);
  __chkstk_darwin(v7);
  v9 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10016F75C();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(41, 2, &type metadata for MoveFilesIntent, v10);
  v11._countAndFlagsBits = 0x2065766F4DLL;
  v11._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v11);
  KeyPath = swift_getKeyPath(&unk_1004E2048);
  v49 = sub_10030CFB0((unint64_t *)&qword_100643920, &qword_10064C3B0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v46[1] = a1;
  v13 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v49);
  v14 = swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v13, v7, v14);
  swift_release(v13);
  v15._countAndFlagsBits = 544175136;
  v15._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  v16 = swift_getKeyPath(&unk_1004E2070);
  v52 = sub_10021F534((unint64_t *)&qword_100643928, (uint64_t)&unk_1004DB0C8);
  v17 = _AssistantIntent.IntentProjection.subscript.getter(v16, v52);
  v18 = swift_release(v16);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v17, v7, v18);
  swift_release(v17);
  v19._countAndFlagsBits = 0xD000000000000020;
  v19._object = (void *)0x8000000100526950;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for MoveFilesIntent, v10);
  v51 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v6, &type metadata for MoveFilesIntent, v10);
  v47 = *(void (**)(char *, uint64_t))(v3 + 8);
  v48 = v4;
  v47(v6, v4);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(33, 2, &type metadata for MoveFilesIntent, v10);
  v20._countAndFlagsBits = 0x2065766F4DLL;
  v20._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  v21 = swift_getKeyPath(&unk_1004E2048);
  v22 = v49;
  v23 = _AssistantIntent.IntentProjection.subscript.getter(v21, v49);
  v24 = swift_release(v21);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v23, v7, v24);
  swift_release(v23);
  v25._countAndFlagsBits = 544175136;
  v25._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v25);
  v26 = swift_getKeyPath(&unk_1004E2070);
  v27 = _AssistantIntent.IntentProjection.subscript.getter(v26, v52);
  v28 = swift_release(v26);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v27, v7, v28);
  swift_release(v27);
  v29._object = (void *)0x8000000100526980;
  v29._countAndFlagsBits = 0xD000000000000018;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v29);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for MoveFilesIntent, v10);
  v50 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v6, &type metadata for MoveFilesIntent, v10);
  v30 = v47;
  v47(v6, v4);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(52, 2, &type metadata for MoveFilesIntent, v10);
  v31._countAndFlagsBits = 0x6C69662065766F4DLL;
  v31._object = (void *)0xEA00000000002065;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v31);
  v32 = swift_getKeyPath(&unk_1004E2048);
  v33 = _AssistantIntent.IntentProjection.subscript.getter(v32, v22);
  v34 = swift_release(v32);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v33, v7, v34);
  swift_release(v33);
  v35._countAndFlagsBits = 0x796D206F746E6920;
  v35._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v35);
  v36 = swift_getKeyPath(&unk_1004E2070);
  v37 = _AssistantIntent.IntentProjection.subscript.getter(v36, v52);
  v38 = swift_release(v36);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v37, v7, v38);
  swift_release(v37);
  v39._countAndFlagsBits = 0xD000000000000021;
  v39._object = (void *)0x80000001005269A0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v39);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for MoveFilesIntent, v10);
  v40 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v6, &type metadata for MoveFilesIntent, v10);
  v30(v6, v48);
  v41 = sub_10006922C(&qword_10064E1F8);
  v42 = swift_allocObject(v41, 56, 7);
  *(_OWORD *)(v42 + 16) = xmmword_1004D9880;
  v43 = v50;
  *(_QWORD *)(v42 + 32) = v51;
  *(_QWORD *)(v42 + 40) = v43;
  *(_QWORD *)(v42 + 48) = v40;
  v44 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)(v42);
  swift_bridgeObjectRelease(v42);
  return v44;
}

uint64_t sub_10030957C(uint64_t a1)
{
  return sub_100309598(a1, (uint64_t)sub_10030D400, (uint64_t)sub_100309068, (uint64_t)sub_1003097C0);
}

uint64_t sub_100309598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v7 = type metadata accessor for _AssistantIntent.Value(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1004E2048);
  v12 = sub_10030CFB0((unint64_t *)&qword_100643920, &qword_10064C3B0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v13 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v12);
  swift_release(KeyPath);
  v14 = sub_10016F75C();
  _AssistantIntent.Value.init<A>(for:builder:)(v13, a2, 0, v14);
  v15 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v10);
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  v17 = swift_getKeyPath(&unk_1004E2070);
  v18 = sub_10021F534((unint64_t *)&qword_100643928, (uint64_t)&unk_1004DB0C8);
  v19 = _AssistantIntent.IntentProjection.subscript.getter(v17, v18);
  swift_release(v17);
  _AssistantIntent.Value.init<A>(for:builder:)(v19, a3, 0, v14);
  v20 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v10);
  v16(v10, v7);
  v21 = swift_getKeyPath(&unk_1004E2098);
  v22 = sub_10030CEA8(&qword_10064E198, &qword_100643A40, (void (*)(void))sub_10030CF0C);
  v23 = _AssistantIntent.IntentProjection.subscript.getter(v21, v22);
  swift_release(v21);
  _AssistantIntent.Value.init<A>(for:builder:)(v23, a4, 0, v14);
  v24 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v10);
  v16(v10, v7);
  v25 = sub_10006922C(&qword_10064E170);
  v26 = swift_allocObject(v25, 56, 7);
  *(_OWORD *)(v26 + 16) = xmmword_1004D9880;
  *(_QWORD *)(v26 + 32) = v15;
  *(_QWORD *)(v26 + 40) = v20;
  *(_QWORD *)(v26 + 48) = v24;
  v27 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v26);
  return v27;
}

uint64_t sub_1003097C0()
{
  return sub_10030C2B8(1702195828, 0xE400000000000000);
}

uint64_t sub_1003097D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t KeyPath;
  uint64_t v14;
  __n128 v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  Swift::String v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  Swift::String v56;
  Swift::String v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  Swift::String v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  Swift::String v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  Swift::String v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  Swift::String v78;
  Swift::String v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  Swift::String v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  __n128 v87;
  Swift::String v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  Swift::String v93;
  Swift::String v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  Swift::String v98;
  uint64_t v99;
  uint64_t v100;
  __n128 v101;
  Swift::String v102;
  uint64_t v103;
  uint64_t v104;
  __n128 v105;
  Swift::String v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t);
  uint64_t v130;
  uint64_t v131;

  v128 = a1;
  v1 = sub_10006922C(&qword_10064E1C8);
  v129 = *(void (**)(char *, uint64_t))(v1 - 8);
  v130 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v116 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10006922C(&qword_10064E1D0);
  __chkstk_darwin(v8);
  v10 = (char *)&v116 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10030CCAC();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 2, &type metadata for CompressFilesIntent, v11);
  v12._countAndFlagsBits = 0x73736572706D6F43;
  v12._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  KeyPath = swift_getKeyPath(&unk_1004E1FD0);
  v131 = sub_10030CFB0((unint64_t *)&qword_100643920, &qword_10064C3B0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v14 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v131);
  v15 = swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v14, v8, v15);
  swift_release(v14);
  v16._countAndFlagsBits = 544106784;
  v16._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v4);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v17);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CompressFilesIntent, v11);
  v125 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CompressFilesIntent, v11);
  v18 = v130;
  v19 = (void (*)(char *, uint64_t))*((_QWORD *)v129 + 1);
  v19(v3, v130);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(12, 2, &type metadata for CompressFilesIntent, v11);
  v20._countAndFlagsBits = 0x2065766968637241;
  v20._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  v21 = swift_getKeyPath(&unk_1004E1FD0);
  v22 = _AssistantIntent.IntentProjection.subscript.getter(v21, v131);
  v23 = swift_release(v21);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v22, v8, v23);
  swift_release(v22);
  v24._countAndFlagsBits = 544175136;
  v24._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v24);
  v25 = swift_getKeyPath(&unk_1004E1FF8);
  v127 = sub_10030CFB0(&qword_10064E1C0, (uint64_t *)&unk_1006438C0, (uint64_t)&protocol conformance descriptor for <A> A?);
  v26 = _AssistantIntent.IntentProjection.subscript.getter(v25, v127);
  v27 = swift_release(v25);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v26, v8, v27);
  swift_release(v26);
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v28);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CompressFilesIntent, v11);
  v124 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CompressFilesIntent, v11);
  v129 = v19;
  v19(v3, v18);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(20, 2, &type metadata for CompressFilesIntent, v11);
  v29._countAndFlagsBits = 544237914;
  v29._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v29);
  v30 = swift_getKeyPath(&unk_1004E1FD0);
  v31 = _AssistantIntent.IntentProjection.subscript.getter(v30, v131);
  v32 = swift_release(v30);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v31, v8, v32);
  swift_release(v31);
  v33._object = (void *)0x8000000100526820;
  v33._countAndFlagsBits = 0xD000000000000010;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v33);
  v34 = swift_getKeyPath(&unk_1004E1FF8);
  v35 = v127;
  v36 = _AssistantIntent.IntentProjection.subscript.getter(v34, v127);
  v37 = swift_release(v34);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v36, v8, v37);
  swift_release(v36);
  v38._countAndFlagsBits = 0;
  v38._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v38);
  v117 = v3;
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CompressFilesIntent, v11);
  v123 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CompressFilesIntent, v11);
  v19(v3, v130);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(25, 2, &type metadata for CompressFilesIntent, v11);
  v39._countAndFlagsBits = 0x73736572706D6F43;
  v39._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v39);
  v40 = swift_getKeyPath(&unk_1004E1FD0);
  v41 = v131;
  v42 = _AssistantIntent.IntentProjection.subscript.getter(v40, v131);
  v43 = swift_release(v40);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v42, v8, v43);
  swift_release(v42);
  v44._object = (void *)0x8000000100526840;
  v44._countAndFlagsBits = 0xD000000000000010;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v44);
  v45 = swift_getKeyPath(&unk_1004E1FF8);
  v46 = _AssistantIntent.IntentProjection.subscript.getter(v45, v35);
  v47 = swift_release(v45);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v46, v8, v47);
  swift_release(v46);
  v48._countAndFlagsBits = 0;
  v48._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v48);
  v49 = v117;
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CompressFilesIntent, v11);
  v122 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v49, &type metadata for CompressFilesIntent, v11);
  v50 = v129;
  v51 = v130;
  v129(v49, v130);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(31, 1, &type metadata for CompressFilesIntent, v11);
  v52._countAndFlagsBits = 0xD00000000000001FLL;
  v52._object = (void *)0x8000000100526860;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v52);
  v53 = swift_getKeyPath(&unk_1004E1FD0);
  v54 = _AssistantIntent.IntentProjection.subscript.getter(v53, v41);
  v55 = swift_release(v53);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v54, v8, v55);
  swift_release(v54);
  v56._countAndFlagsBits = 0;
  v56._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v56);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CompressFilesIntent, v11);
  v121 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v49, &type metadata for CompressFilesIntent, v11);
  v50(v49, v51);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(12, 2, &type metadata for CompressFilesIntent, v11);
  v57._countAndFlagsBits = 0x2065766968637241;
  v57._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v57);
  v58 = swift_getKeyPath(&unk_1004E1FD0);
  v59 = v131;
  v60 = _AssistantIntent.IntentProjection.subscript.getter(v58, v131);
  v61 = swift_release(v58);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v60, v8, v61);
  swift_release(v60);
  v62._countAndFlagsBits = 544432416;
  v62._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v62);
  v63 = swift_getKeyPath(&unk_1004E2020);
  v126 = sub_10030D08C();
  v64 = _AssistantIntent.IntentProjection.subscript.getter(v63, v126);
  v65 = swift_release(v63);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v64, v8, v65);
  swift_release(v64);
  v66._countAndFlagsBits = 0;
  v66._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v66);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CompressFilesIntent, v11);
  v120 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v49, &type metadata for CompressFilesIntent, v11);
  v67 = v51;
  v68 = v51;
  v69 = v129;
  v129(v49, v67);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 2, &type metadata for CompressFilesIntent, v11);
  v70._countAndFlagsBits = 0x73736572706D6F43;
  v70._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v70);
  v71 = swift_getKeyPath(&unk_1004E1FD0);
  v72 = _AssistantIntent.IntentProjection.subscript.getter(v71, v59);
  v73 = swift_release(v71);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v72, v8, v73);
  swift_release(v72);
  v74._countAndFlagsBits = 544432416;
  v74._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v74);
  v75 = swift_getKeyPath(&unk_1004E2020);
  v76 = _AssistantIntent.IntentProjection.subscript.getter(v75, v126);
  v77 = swift_release(v75);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v76, v8, v77);
  swift_release(v76);
  v78._countAndFlagsBits = 0;
  v78._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v78);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CompressFilesIntent, v11);
  v119 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v49, &type metadata for CompressFilesIntent, v11);
  v69(v49, v68);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(18, 3, &type metadata for CompressFilesIntent, v11);
  v79._countAndFlagsBits = 0x2065766968637241;
  v79._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v79);
  v80 = swift_getKeyPath(&unk_1004E1FD0);
  v81 = _AssistantIntent.IntentProjection.subscript.getter(v80, v131);
  v82 = swift_release(v80);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v81, v8, v82);
  swift_release(v81);
  v83._countAndFlagsBits = 544432416;
  v83._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v83);
  v84 = swift_getKeyPath(&unk_1004E2020);
  v85 = v126;
  v86 = _AssistantIntent.IntentProjection.subscript.getter(v84, v126);
  v87 = swift_release(v84);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v86, v8, v87);
  swift_release(v86);
  v88._countAndFlagsBits = 0x206F746E6920;
  v88._object = (void *)0xE600000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v88);
  v89 = swift_getKeyPath(&unk_1004E1FF8);
  v90 = v127;
  v91 = _AssistantIntent.IntentProjection.subscript.getter(v89, v127);
  v92 = swift_release(v89);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v91, v8, v92);
  swift_release(v91);
  v93._countAndFlagsBits = 0;
  v93._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v93);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CompressFilesIntent, v11);
  v118 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v49, &type metadata for CompressFilesIntent, v11);
  v129(v49, v130);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(30, 3, &type metadata for CompressFilesIntent, v11);
  v94._countAndFlagsBits = 0x73736572706D6F43;
  v94._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v94);
  v95 = swift_getKeyPath(&unk_1004E1FD0);
  v96 = _AssistantIntent.IntentProjection.subscript.getter(v95, v131);
  v97 = swift_release(v95);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v96, v8, v97);
  swift_release(v96);
  v98._countAndFlagsBits = 544432416;
  v98._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v98);
  v99 = swift_getKeyPath(&unk_1004E2020);
  v100 = _AssistantIntent.IntentProjection.subscript.getter(v99, v85);
  v101 = swift_release(v99);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v100, v8, v101);
  swift_release(v100);
  v102._countAndFlagsBits = 0xD000000000000011;
  v102._object = (void *)0x8000000100526880;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v102);
  v103 = swift_getKeyPath(&unk_1004E1FF8);
  v104 = _AssistantIntent.IntentProjection.subscript.getter(v103, v90);
  v105 = swift_release(v103);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v104, v8, v105);
  swift_release(v104);
  v106._countAndFlagsBits = 0;
  v106._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v106);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for CompressFilesIntent, v11);
  v107 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v49, &type metadata for CompressFilesIntent, v11);
  v129(v49, v130);
  v108 = sub_10006922C(&qword_10064E1E0);
  v109 = swift_allocObject(v108, 104, 7);
  *(_OWORD *)(v109 + 16) = xmmword_1004DB480;
  v110 = v124;
  *(_QWORD *)(v109 + 32) = v125;
  *(_QWORD *)(v109 + 40) = v110;
  v111 = v122;
  *(_QWORD *)(v109 + 48) = v123;
  *(_QWORD *)(v109 + 56) = v111;
  v112 = v120;
  *(_QWORD *)(v109 + 64) = v121;
  *(_QWORD *)(v109 + 72) = v112;
  v113 = v118;
  *(_QWORD *)(v109 + 80) = v119;
  *(_QWORD *)(v109 + 88) = v113;
  *(_QWORD *)(v109 + 96) = v107;
  v114 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)(v109);
  swift_bridgeObjectRelease(v109);
  return v114;
}

uint64_t sub_10030A42C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v2 = sub_10006922C((uint64_t *)&unk_1006438C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v9 - v6;
  sub_1002C9318(a1, (uint64_t)&v9 - v6);
  sub_1002C9318((uint64_t)v7, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_1002C93A8((uint64_t)v7);
}

uint64_t sub_10030A4D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v0 = type metadata accessor for _AssistantIntent.Value(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1004E1FD0);
  v5 = sub_10030CFB0((unint64_t *)&qword_100643920, &qword_10064C3B0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v6 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v5);
  swift_release(KeyPath);
  v7 = sub_10030CCAC();
  _AssistantIntent.Value.init<A>(for:builder:)(v6, sub_10030A684, 0, v7);
  v8 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v3);
  v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v3, v0);
  v10 = swift_getKeyPath(&unk_1004E1FF8);
  v11 = sub_10030CFB0(&qword_10064E1C0, (uint64_t *)&unk_1006438C0, (uint64_t)&protocol conformance descriptor for <A> A?);
  v12 = _AssistantIntent.IntentProjection.subscript.getter(v10, v11);
  swift_release(v10);
  _AssistantIntent.Value.init<A>(for:builder:)(v12, sub_10030A74C, 0, v7);
  v13 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v3);
  v9(v3, v0);
  v14 = sub_10006922C(&qword_10064E170);
  v15 = swift_allocObject(v14, 48, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1004D4CE0;
  *(_QWORD *)(v15 + 32) = v8;
  *(_QWORD *)(v15 + 40) = v13;
  v16 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v15);
  return v16;
}

uint64_t sub_10030A684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6C69662073696874, 0xE900000000000065);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000015, 0x80000001005267D0);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD00000000000002CLL, 0x80000001005267F0);
  v3 = sub_10006922C(&qword_10064E140);
  v4 = swift_allocObject(v3, 56, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1004D9880;
  *(_QWORD *)(v4 + 32) = v0;
  *(_QWORD *)(v4 + 40) = v1;
  *(_QWORD *)(v4 + 48) = v2;
  v5 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_10030A74C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000012, 0x80000001005267B0);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(1933984848, 0xE400000000000000);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6B726F77656D6F48, 0xE800000000000000);
  v3 = sub_10006922C(&qword_10064E140);
  v4 = swift_allocObject(v3, 56, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1004D9880;
  *(_QWORD *)(v4 + 32) = v0;
  *(_QWORD *)(v4 + 40) = v1;
  *(_QWORD *)(v4 + 48) = v2;
  v5 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_10030A800(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  Swift::String v11;
  uint64_t KeyPath;
  uint64_t v13;
  __n128 v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __n128 v26;
  Swift::String v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v45 = a1;
  v49 = sub_10006922C(&qword_10064E1A8);
  v47 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v2 = (char *)&v45 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10006922C(&qword_10064E1B0);
  __chkstk_darwin(v7);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10030CCF0();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(11, 2, &type metadata for RenameFileIntent, v10);
  v11._countAndFlagsBits = 0x20656D616E6552;
  v11._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v11);
  KeyPath = swift_getKeyPath(&unk_1004E1F58);
  v50 = sub_10021F534((unint64_t *)&qword_100643928, (uint64_t)&unk_1004DB0C8);
  v13 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v50);
  v14 = swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v13, v7, v14);
  swift_release(v13);
  v15._countAndFlagsBits = 544106784;
  v15._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v3);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v6, v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v16);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for RenameFileIntent, v10);
  v48 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for RenameFileIntent, v10);
  v46 = *(void (**)(char *, uint64_t))(v47 + 8);
  v17 = v49;
  v46(v2, v49);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(11, 2, &type metadata for RenameFileIntent, v10);
  v18._countAndFlagsBits = 0x20656D616E6552;
  v18._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  v19 = swift_getKeyPath(&unk_1004E1F58);
  v20 = _AssistantIntent.IntentProjection.subscript.getter(v19, v50);
  v21 = swift_release(v19);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v20, v7, v21);
  swift_release(v20);
  v22._countAndFlagsBits = 544175136;
  v22._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v22);
  v23 = swift_getKeyPath(&unk_1004E1F80);
  v24 = sub_10030CE5C();
  v25 = _AssistantIntent.IntentProjection.subscript.getter(v23, v24);
  v26 = swift_release(v23);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v25, v7, v26);
  swift_release(v25);
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for RenameFileIntent, v10);
  v47 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for RenameFileIntent, v10);
  v28 = v17;
  v29 = v46;
  v46(v2, v28);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(27, 2, &type metadata for RenameFileIntent, v10);
  v30._object = (void *)0x8000000100526770;
  v30._countAndFlagsBits = 0xD000000000000017;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v30);
  v31 = swift_getKeyPath(&unk_1004E1F58);
  v32 = _AssistantIntent.IntentProjection.subscript.getter(v31, v50);
  v33 = swift_release(v31);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v32, v7, v33);
  swift_release(v32);
  v34._countAndFlagsBits = 544175136;
  v34._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v34);
  v35 = swift_getKeyPath(&unk_1004E1F80);
  v36 = _AssistantIntent.IntentProjection.subscript.getter(v35, v24);
  v37 = swift_release(v35);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v36, v7, v37);
  swift_release(v36);
  v38._countAndFlagsBits = 0;
  v38._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v38);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for RenameFileIntent, v10);
  v39 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for RenameFileIntent, v10);
  v29(v2, v49);
  v40 = sub_10006922C(&qword_10064E1B8);
  v41 = swift_allocObject(v40, 56, 7);
  *(_OWORD *)(v41 + 16) = xmmword_1004D9880;
  v42 = v47;
  *(_QWORD *)(v41 + 32) = v48;
  *(_QWORD *)(v41 + 40) = v42;
  *(_QWORD *)(v41 + 48) = v39;
  v43 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)(v41);
  swift_bridgeObjectRelease(v41);
  return v43;
}

uint64_t sub_10030ACDC(uint64_t a1)
{
  return sub_10030ACF8(a1, (uint64_t)sub_10030AF08, (uint64_t)sub_10030B058, (uint64_t)sub_10030906C);
}

uint64_t sub_10030ACF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v7 = type metadata accessor for _AssistantIntent.Value(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1004E1F58);
  v12 = sub_10021F534((unint64_t *)&qword_100643928, (uint64_t)&unk_1004DB0C8);
  v13 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v12);
  swift_release(KeyPath);
  v14 = sub_10030CCF0();
  _AssistantIntent.Value.init<A>(for:builder:)(v13, a2, 0, v14);
  v15 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v10);
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  v17 = swift_getKeyPath(&unk_1004E1F80);
  v18 = sub_10030CE5C();
  v19 = _AssistantIntent.IntentProjection.subscript.getter(v17, v18);
  swift_release(v17);
  _AssistantIntent.Value.init<A>(for:builder:)(v19, a3, 0, v14);
  v20 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v10);
  v16(v10, v7);
  v21 = swift_getKeyPath(&unk_1004E1FA8);
  v22 = sub_10030CEA8(&qword_10064E198, &qword_100643A40, (void (*)(void))sub_10030CF0C);
  v23 = _AssistantIntent.IntentProjection.subscript.getter(v21, v22);
  swift_release(v21);
  _AssistantIntent.Value.init<A>(for:builder:)(v23, a4, 0, v14);
  v24 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v10);
  v16(v10, v7);
  v25 = sub_10006922C(&qword_10064E170);
  v26 = swift_allocObject(v25, 56, 7);
  *(_OWORD *)(v26 + 16) = xmmword_1004D9880;
  *(_QWORD *)(v26 + 32) = v15;
  *(_QWORD *)(v26 + 40) = v20;
  *(_QWORD *)(v26 + 48) = v24;
  v27 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v26);
  return v27;
}

uint64_t sub_10030AF08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD00000000000001BLL, 0x80000001005266C0);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6E61617265646C41, 0xEC000000676E702ELL);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6F6C6F53206E6149, 0xEF70616D74696220);
  v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6574536F72706552, 0xEE007478742E7370);
  v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000014, 0x80000001005266E0);
  v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x1000000000000027, 0x8000000100526700);
  v6 = sub_10006922C(&qword_10064E140);
  v7 = swift_allocObject(v6, 80, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1004E1E40;
  *(_QWORD *)(v7 + 32) = v0;
  *(_QWORD *)(v7 + 40) = v1;
  *(_QWORD *)(v7 + 48) = v2;
  *(_QWORD *)(v7 + 56) = v3;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  v8 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10030B05C(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  Swift::String v11;
  uint64_t KeyPath;
  uint64_t v13;
  __n128 v14;
  Swift::String v15;
  Swift::String v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  Swift::String v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __n128 v36;
  Swift::String v37;
  uint64_t v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v54 = a1;
  v60 = sub_10006922C(&qword_10064E1A8);
  v58 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v2 = (char *)&v54 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10006922C(&qword_10064E1B0);
  __chkstk_darwin(v7);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10030CCF0();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(11, 2, &type metadata for RenameFileIntent, v10);
  v11._countAndFlagsBits = 0x20656D616E6552;
  v11._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v11);
  KeyPath = swift_getKeyPath(&unk_1004E1F58);
  v61 = sub_10021F534((unint64_t *)&qword_100643928, (uint64_t)&unk_1004DB0C8);
  v13 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v61);
  v14 = swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v13, v7, v14);
  swift_release(v13);
  v15._countAndFlagsBits = 544106784;
  v15._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v3);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v6, v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v16);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for RenameFileIntent, v10);
  v59 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for RenameFileIntent, v10);
  v17 = *(void (**)(char *, uint64_t))(v58 + 8);
  v18 = v60;
  v17(v2, v60);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(42, 2, &type metadata for RenameFileIntent, v10);
  v19._countAndFlagsBits = 0x20656D616E6552;
  v19._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  v20 = swift_getKeyPath(&unk_1004E1F58);
  v21 = _AssistantIntent.IntentProjection.subscript.getter(v20, v61);
  v22 = swift_release(v20);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v21, v7, v22);
  swift_release(v21);
  v23._countAndFlagsBits = 544175136;
  v23._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v23);
  v24 = swift_getKeyPath(&unk_1004E1F80);
  v55 = sub_10030CE5C();
  v25 = _AssistantIntent.IntentProjection.subscript.getter(v24, v55);
  v26 = swift_release(v24);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v25, v7, v26);
  swift_release(v25);
  v27._countAndFlagsBits = 0xD00000000000001FLL;
  v27._object = (void *)0x8000000100526730;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for RenameFileIntent, v10);
  v58 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for RenameFileIntent, v10);
  v56 = v17;
  v17(v2, v18);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(37, 2, &type metadata for RenameFileIntent, v10);
  v28._countAndFlagsBits = 0x20656D616E6552;
  v28._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v28);
  v29 = swift_getKeyPath(&unk_1004E1F58);
  v30 = _AssistantIntent.IntentProjection.subscript.getter(v29, v61);
  v31 = swift_release(v29);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v30, v7, v31);
  swift_release(v30);
  v32._countAndFlagsBits = 544175136;
  v32._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v32);
  v33 = swift_getKeyPath(&unk_1004E1F80);
  v34 = v55;
  v35 = _AssistantIntent.IntentProjection.subscript.getter(v33, v55);
  v36 = swift_release(v33);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v35, v7, v36);
  swift_release(v35);
  v37._object = (void *)0x8000000100526750;
  v37._countAndFlagsBits = 0xD00000000000001ALL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v37);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for RenameFileIntent, v10);
  v57 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for RenameFileIntent, v10);
  v38 = v60;
  v17(v2, v60);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(53, 2, &type metadata for RenameFileIntent, v10);
  v39._countAndFlagsBits = 0xD000000000000017;
  v39._object = (void *)0x8000000100526770;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v39);
  v40 = swift_getKeyPath(&unk_1004E1F58);
  v41 = _AssistantIntent.IntentProjection.subscript.getter(v40, v61);
  v42 = swift_release(v40);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v41, v7, v42);
  swift_release(v41);
  v43._countAndFlagsBits = 544175136;
  v43._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v43);
  v44 = swift_getKeyPath(&unk_1004E1F80);
  v45 = _AssistantIntent.IntentProjection.subscript.getter(v44, v34);
  v46 = swift_release(v44);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v45, v7, v46);
  swift_release(v45);
  v47._object = (void *)0x8000000100526790;
  v47._countAndFlagsBits = 0xD00000000000001ALL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v47);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v9, &type metadata for RenameFileIntent, v10);
  v48 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v2, &type metadata for RenameFileIntent, v10);
  v56(v2, v38);
  v49 = sub_10006922C(&qword_10064E1B8);
  v50 = swift_allocObject(v49, 64, 7);
  *(_OWORD *)(v50 + 16) = xmmword_1004D9B50;
  v51 = v58;
  *(_QWORD *)(v50 + 32) = v59;
  *(_QWORD *)(v50 + 40) = v51;
  *(_QWORD *)(v50 + 48) = v57;
  *(_QWORD *)(v50 + 56) = v48;
  v52 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)(v50);
  swift_bridgeObjectRelease(v50);
  return v52;
}

uint64_t sub_10030B69C(uint64_t a1)
{
  return sub_10030ACF8(a1, (uint64_t)sub_10030D404, (uint64_t)sub_10030B058, (uint64_t)sub_1003097C0);
}

uint64_t sub_10030B6B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000013, 0x80000001005266A0);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x5F70696C73796150, 0xEF313230322E3031);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x68736E6565726353, 0xEA0000000000746FLL);
  v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6669672E6E6F6F53, 0xE800000000000000);
  v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6574536F72706552, 0xED0000646D2E7370);
  v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x70756B636142, 0xE600000000000000);
  v6 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6E6F697461636156, 0xED000070697A2E73);
  v7 = sub_10006922C(&qword_10064E140);
  v8 = swift_allocObject(v7, 88, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1004DB540;
  *(_QWORD *)(v8 + 32) = v0;
  *(_QWORD *)(v8 + 40) = v1;
  *(_QWORD *)(v8 + 48) = v2;
  *(_QWORD *)(v8 + 56) = v3;
  *(_QWORD *)(v8 + 64) = v4;
  *(_QWORD *)(v8 + 72) = v5;
  *(_QWORD *)(v8 + 80) = v6;
  v9 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v8);
  return v9;
}

uint64_t sub_10030B820()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t KeyPath;
  uint64_t v12;
  __n128 v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  Swift::String v38;
  void (*v39)(char *, uint64_t);
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;

  v0 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v57 = *(_QWORD *)(v0 - 8);
  v58 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v55 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_10006922C(&qword_10064E178);
  v3 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10006922C(&qword_10064E180);
  __chkstk_darwin(v6);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1002B1A6C();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 2, &type metadata for SaveToFilesIntent, v9);
  v10._countAndFlagsBits = 0x2065766153;
  v10._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v10);
  KeyPath = swift_getKeyPath(&unk_1004E1F08);
  v60 = sub_10030CFB0((unint64_t *)&qword_100643920, &qword_10064C3B0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v12 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v60);
  v13 = swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v12, v6, v13);
  swift_release(v12);
  v14._countAndFlagsBits = 544175136;
  v14._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v14);
  v15 = swift_getKeyPath(&unk_1004E1F30);
  v56 = sub_10021F534((unint64_t *)&qword_100643928, (uint64_t)&unk_1004DB0C8);
  v16 = _AssistantIntent.IntentProjection.subscript.getter(v15, v56);
  v17 = swift_release(v15);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v16, v6, v17);
  swift_release(v16);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for SaveToFilesIntent, v9);
  v59 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v5, &type metadata for SaveToFilesIntent, v9);
  v61 = *(void (**)(char *, uint64_t))(v3 + 8);
  v61(v5, v62);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 2, &type metadata for SaveToFilesIntent, v9);
  v19._countAndFlagsBits = 0x2065766153;
  v19._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  v20 = swift_getKeyPath(&unk_1004E1F08);
  v21 = v60;
  v22 = _AssistantIntent.IntentProjection.subscript.getter(v20, v60);
  v23 = swift_release(v20);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v22, v6, v23);
  swift_release(v22);
  v24._countAndFlagsBits = 544106784;
  v24._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v24);
  v26 = v57;
  v25 = v58;
  (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v2, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v58);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v2, v6);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v2, v25);
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for SaveToFilesIntent, v9);
  v58 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v5, &type metadata for SaveToFilesIntent, v9);
  v28 = v62;
  v61(v5, v62);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(26, 2, &type metadata for SaveToFilesIntent, v9);
  v29._countAndFlagsBits = 0x6C69662065766153;
  v29._object = (void *)0xEA00000000002065;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v29);
  v30 = swift_getKeyPath(&unk_1004E1F08);
  v31 = _AssistantIntent.IntentProjection.subscript.getter(v30, v21);
  v32 = swift_release(v30);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v31, v6, v32);
  swift_release(v31);
  v33._countAndFlagsBits = 0x796D206F746E6920;
  v33._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v33);
  v34 = swift_getKeyPath(&unk_1004E1F30);
  v35 = v56;
  v36 = _AssistantIntent.IntentProjection.subscript.getter(v34, v56);
  v37 = swift_release(v34);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v36, v6, v37);
  swift_release(v36);
  v38._countAndFlagsBits = 0x7265646C6F6620;
  v38._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v38);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for SaveToFilesIntent, v9);
  v57 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v5, &type metadata for SaveToFilesIntent, v9);
  v39 = v61;
  v61(v5, v28);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(22, 2, &type metadata for SaveToFilesIntent, v9);
  v40._countAndFlagsBits = 543450177;
  v40._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v40);
  v41 = swift_getKeyPath(&unk_1004E1F08);
  v42 = _AssistantIntent.IntentProjection.subscript.getter(v41, v60);
  v43 = swift_release(v41);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v42, v6, v43);
  swift_release(v42);
  v44._countAndFlagsBits = 0x20656874206F7420;
  v44._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v44);
  v45 = swift_getKeyPath(&unk_1004E1F30);
  v46 = _AssistantIntent.IntentProjection.subscript.getter(v45, v35);
  v47 = swift_release(v45);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v46, v6, v47);
  swift_release(v46);
  v48._countAndFlagsBits = 0x6F74636572696420;
  v48._object = (void *)0xEA00000000007972;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v48);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v8, &type metadata for SaveToFilesIntent, v9);
  v49 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v5, &type metadata for SaveToFilesIntent, v9);
  v39(v5, v62);
  v50 = sub_10006922C(&qword_10064E188);
  v51 = swift_allocObject(v50, 64, 7);
  *(_OWORD *)(v51 + 16) = xmmword_1004D9B50;
  v52 = v58;
  *(_QWORD *)(v51 + 32) = v59;
  *(_QWORD *)(v51 + 40) = v52;
  *(_QWORD *)(v51 + 48) = v57;
  *(_QWORD *)(v51 + 56) = v49;
  v53 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)(v51);
  swift_bridgeObjectRelease(v51);
  return v53;
}

uint64_t sub_10030BE4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v0 = type metadata accessor for _AssistantIntent.Value(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1004E1F08);
  v5 = sub_10030CFB0((unint64_t *)&qword_100643920, &qword_10064C3B0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v6 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v5);
  swift_release(KeyPath);
  v7 = sub_1002B1A6C();
  _AssistantIntent.Value.init<A>(for:builder:)(v6, sub_10030BFF0, 0, v7);
  v8 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v3);
  v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v3, v0);
  v10 = swift_getKeyPath(&unk_1004E1F30);
  v11 = sub_10021F534((unint64_t *)&qword_100643928, (uint64_t)&unk_1004DB0C8);
  v12 = _AssistantIntent.IntentProjection.subscript.getter(v10, v11);
  swift_release(v10);
  _AssistantIntent.Value.init<A>(for:builder:)(v12, sub_100309068, 0, v7);
  v13 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v3);
  v9(v3, v0);
  v14 = sub_10006922C(&qword_10064E170);
  v15 = swift_allocObject(v14, 48, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1004D4CE0;
  *(_QWORD *)(v15 + 32) = v8;
  *(_QWORD *)(v15 + 40) = v13;
  v16 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v15);
  return v16;
}

uint64_t sub_10030BFF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD00000000000002ALL, 0x80000001005265E0);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000012, 0x8000000100526610);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000011, 0x8000000100526630);
  v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x20676E6977617244, 0xED00006567616D69);
  v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD00000000000001CLL, 0x8000000100526650);
  v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000028, 0x8000000100526670);
  v6 = sub_10006922C(&qword_10064E140);
  v7 = swift_allocObject(v6, 80, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1004E1E40;
  *(_QWORD *)(v7 + 32) = v0;
  *(_QWORD *)(v7 + 40) = v1;
  *(_QWORD *)(v7 + 48) = v2;
  *(_QWORD *)(v7 + 56) = v3;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  v8 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10030C128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x64616F6C6E776F44, 0xE900000000000073);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x706F746B736544, 0xE700000000000000);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x746E656D75636F44, 0xE900000000000073);
  v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x72546C6F6F686353, 0xEA00000000007069);
  v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x207463656A6F7250, 0xE90000000000005ALL);
  v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x69746E756F636341, 0xEA0000000000676ELL);
  v6 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x70756B636142, 0xE600000000000000);
  v7 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(1668507981, 0xE400000000000000);
  v8 = sub_10006922C(&qword_10064E140);
  v9 = swift_allocObject(v8, 96, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1004DB580;
  *(_QWORD *)(v9 + 32) = v0;
  *(_QWORD *)(v9 + 40) = v1;
  *(_QWORD *)(v9 + 48) = v2;
  *(_QWORD *)(v9 + 56) = v3;
  *(_QWORD *)(v9 + 64) = v4;
  *(_QWORD *)(v9 + 72) = v5;
  *(_QWORD *)(v9 + 80) = v6;
  *(_QWORD *)(v9 + 88) = v7;
  v10 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v9);
  return v10;
}

uint64_t sub_10030C29C()
{
  return sub_10030C2B8(0xD000000000000021, 0x80000001005265B0);
}

uint64_t sub_10030C2B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(a1, a2);
  v3 = sub_10006922C(&qword_10064E140);
  v4 = swift_allocObject(v3, 40, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1004D9670;
  *(_QWORD *)(v4 + 32) = v2;
  v5 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_10030C320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v0 = type metadata accessor for _AssistantIntent.NegativeAssistantIntentPhrases(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10030C410();
  _AssistantIntent.NegativeAssistantIntentPhrases.init<A>(for:phrases:)(&type metadata for QuickLookFileIntent, sub_10030C29C, 0, &type metadata for QuickLookFileIntent, v4);
  v5 = static _AssistantIntent.NegativeAssistantIntentPhrasesBuilder.buildExpression(_:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v6 = sub_10006922C(&qword_10064E138);
  v7 = swift_allocObject(v6, 40, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1004D9670;
  *(_QWORD *)(v7 + 32) = v5;
  v8 = static _AssistantIntent.NegativeAssistantIntentPhrasesBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v7);
  return v8;
}

ValueMetadata *type metadata accessor for FileAssistantIntents()
{
  return &type metadata for FileAssistantIntents;
}

unint64_t sub_10030C410()
{
  unint64_t result;

  result = qword_10064E130;
  if (!qword_10064E130)
  {
    result = swift_getWitnessTable(&unk_1004E9BD0, &type metadata for QuickLookFileIntent);
    atomic_store(result, (unint64_t *)&qword_10064E130);
  }
  return result;
}

uint64_t sub_10030C454()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  void (*v18)(char *, uint64_t);
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v68 = *(_QWORD *)(v0 - 8);
  v69 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v65 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10006922C(&qword_100643360);
  __chkstk_darwin(v3);
  v5 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v65 - v7;
  v9 = sub_10006922C(&qword_100647F10);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for _AssistantIntent(0, v10);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_10046A3A8();
  v17 = sub_10030C410();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v74, sub_100304C48, 0, sub_100304FF4, 0, &type metadata for QuickLookFileIntent, v17);
  v73 = static _AssistantIntent.Builder.buildExpression(_:)(v16);
  v18 = *(void (**)(char *, uint64_t))(v14 + 8);
  v18(v16, v13);
  v74 = sub_100379ACC();
  v19 = sub_100170058();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v74, sub_100305140, 0, sub_1003054E4, 0, &type metadata for RevealFileIntent, v19);
  v72 = static _AssistantIntent.Builder.buildExpression(_:)(v16);
  v18(v16, v13);
  v74 = sub_1002A37B8();
  v75 = v20;
  v76 = v21;
  v22 = sub_1002A2C80();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v74, sub_100305768, 0, sub_100305FDC, 0, &type metadata for CreateFolderIntent, v22);
  v71 = static _AssistantIntent.Builder.buildExpression(_:)(v16);
  v18(v16, v13);
  v74 = sub_10021F0BC();
  v23 = sub_10021F4A0();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v74, sub_100306370, 0, sub_1003067EC, 0, &type metadata for DuplicateFilesIntent, v23);
  v70 = static _AssistantIntent.Builder.buildExpression(_:)(v16);
  v18(v16, v13);
  sub_10006922C(&qword_100643368);
  v24 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v12, 1, 1, v24);
  v74 = 0;
  v25 = type metadata accessor for IntentDialog(0);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v26(v8, 1, 1, v25);
  v26(v5, 1, 1, v25);
  (*(void (**)(char *, _QWORD, uint64_t))(v68 + 104))(v2, enum case for InputConnectionBehavior.default(_:), v69);
  v27 = sub_10021F534((unint64_t *)&qword_100643D40, (uint64_t)&unk_1004DAF80);
  v74 = IntentParameter<>.init(description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v12, &v74, v8, v5, v2, v27);
  v28 = sub_1000EA624();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v74, sub_10030694C, 0, sub_100306F30, 0, &type metadata for DeleteFilesIntent, v28);
  v69 = static _AssistantIntent.Builder.buildExpression(_:)(v16);
  v18(v16, v13);
  v74 = sub_100367E1C();
  v75 = v29;
  v30 = sub_10030CC24();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v74, sub_1003071BC, 0, sub_1003074A4, 0, &type metadata for FavoriteFoldersIntent, v30);
  v68 = static _AssistantIntent.Builder.buildExpression(_:)(v16);
  v18(v16, v13);
  v74 = sub_100367E1C();
  v75 = v31;
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v74, sub_1003075A0, 0, sub_10030788C, 0, &type metadata for FavoriteFoldersIntent, v30);
  v67 = static _AssistantIntent.Builder.buildExpression(_:)(v16);
  v18(v16, v13);
  v74 = sub_100367E1C();
  v75 = v32;
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v74, sub_1003078BC, 0, sub_100307D4C, 0, &type metadata for FavoriteFoldersIntent, v30);
  v66 = static _AssistantIntent.Builder.buildExpression(_:)(v16);
  v18(v16, v13);
  v74 = sub_100110E2C();
  v33 = sub_100111478();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v74, sub_100307F90, 0, sub_1003083A8, 0, &type metadata for GetContentOfFolderIntent, v33);
  v65 = static _AssistantIntent.Builder.buildExpression(_:)(v16);
  v18(v16, v13);
  v74 = sub_100373370();
  v34 = sub_10030CC68();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v74, sub_1003084A0, 0, sub_1003087DC, 0, &type metadata for GetFilesIntent, v34);
  v35 = static _AssistantIntent.Builder.buildExpression(_:)(v16);
  v18(v16, v13);
  v74 = sub_10016F974();
  v75 = v36;
  v76 = v37;
  v38 = sub_10016F75C();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v74, sub_1003088C4, 0, sub_100308F14, 0, &type metadata for MoveFilesIntent, v38);
  v39 = static _AssistantIntent.Builder.buildExpression(_:)(v16);
  v18(v16, v13);
  v74 = sub_10016F974();
  v75 = v40;
  v76 = v41;
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v74, sub_100309080, 0, sub_10030957C, 0, &type metadata for MoveFilesIntent, v38);
  v42 = static _AssistantIntent.Builder.buildExpression(_:)(v16);
  v18(v16, v13);
  v74 = sub_100327FF8();
  v75 = v43;
  v76 = v44;
  v45 = sub_10030CCAC();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v74, sub_1003097D0, 0, sub_10030A4D8, 0, &type metadata for CompressFilesIntent, v45);
  v46 = static _AssistantIntent.Builder.buildExpression(_:)(v16);
  v18(v16, v13);
  v74 = sub_1003C9330();
  v75 = v47;
  v76 = v48;
  v49 = sub_10030CCF0();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v74, sub_10030A800, 0, sub_10030ACDC, 0, &type metadata for RenameFileIntent, v49);
  v50 = static _AssistantIntent.Builder.buildExpression(_:)(v16);
  v18(v16, v13);
  v74 = sub_1003C9330();
  v75 = v51;
  v76 = v52;
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v74, sub_10030B05C, 0, sub_10030B69C, 0, &type metadata for RenameFileIntent, v49);
  v53 = static _AssistantIntent.Builder.buildExpression(_:)(v16);
  v18(v16, v13);
  v74 = sub_1002B1310();
  v75 = v54;
  v55 = sub_1002B1A6C();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v74, sub_10030B820, 0, sub_10030BE4C, 0, &type metadata for SaveToFilesIntent, v55);
  v56 = static _AssistantIntent.Builder.buildExpression(_:)(v16);
  v18(v16, v13);
  v57 = sub_10006922C(&qword_10064E168);
  v58 = swift_allocObject(v57, 160, 7);
  *(_OWORD *)(v58 + 16) = xmmword_1004E1EA0;
  v59 = v72;
  *(_QWORD *)(v58 + 32) = v73;
  *(_QWORD *)(v58 + 40) = v59;
  v60 = v70;
  *(_QWORD *)(v58 + 48) = v71;
  *(_QWORD *)(v58 + 56) = v60;
  v61 = v68;
  *(_QWORD *)(v58 + 64) = v69;
  *(_QWORD *)(v58 + 72) = v61;
  v62 = v66;
  *(_QWORD *)(v58 + 80) = v67;
  *(_QWORD *)(v58 + 88) = v62;
  *(_QWORD *)(v58 + 96) = v65;
  *(_QWORD *)(v58 + 104) = v35;
  *(_QWORD *)(v58 + 112) = v39;
  *(_QWORD *)(v58 + 120) = v42;
  *(_QWORD *)(v58 + 128) = v46;
  *(_QWORD *)(v58 + 136) = v50;
  *(_QWORD *)(v58 + 144) = v53;
  *(_QWORD *)(v58 + 152) = v56;
  v63 = static _AssistantIntent.Builder.buildBlock(_:)();
  swift_bridgeObjectRelease(v58);
  return v63;
}

unint64_t sub_10030CC24()
{
  unint64_t result;

  result = qword_10064E148;
  if (!qword_10064E148)
  {
    result = swift_getWitnessTable(&unk_1004E3FA4, &type metadata for FavoriteFoldersIntent);
    atomic_store(result, (unint64_t *)&qword_10064E148);
  }
  return result;
}

unint64_t sub_10030CC68()
{
  unint64_t result;

  result = qword_10064E150;
  if (!qword_10064E150)
  {
    result = swift_getWitnessTable(&unk_1004E4408, &type metadata for GetFilesIntent);
    atomic_store(result, (unint64_t *)&qword_10064E150);
  }
  return result;
}

unint64_t sub_10030CCAC()
{
  unint64_t result;

  result = qword_10064E158;
  if (!qword_10064E158)
  {
    result = swift_getWitnessTable(&unk_1004E2D9C, &type metadata for CompressFilesIntent);
    atomic_store(result, (unint64_t *)&qword_10064E158);
  }
  return result;
}

unint64_t sub_10030CCF0()
{
  unint64_t result;

  result = qword_10064E160;
  if (!qword_10064E160)
  {
    result = swift_getWitnessTable(&unk_1004E6538, &type metadata for RenameFileIntent);
    atomic_store(result, (unint64_t *)&qword_10064E160);
  }
  return result;
}

_QWORD *sub_10030CD34@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_10030CD6C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  swift_bridgeObjectRetain(v2);
  return IntentParameter.wrappedValue.setter(&v2);
}

_QWORD *sub_10030CDA4@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

_QWORD *sub_10030CDC8@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

_QWORD *sub_10030CDEC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[2];

  result = IntentParameter.wrappedValue.getter(v4);
  v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t sub_10030CE24(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v2 = *a1;
  v1 = a1[1];
  v4[0] = v2;
  v4[1] = v1;
  swift_bridgeObjectRetain(v1);
  return IntentParameter.wrappedValue.setter(v4);
}

unint64_t sub_10030CE5C()
{
  unint64_t result;

  result = qword_10064E190;
  if (!qword_10064E190)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10064E190);
  }
  return result;
}

uint64_t sub_10030CEA8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10007E830(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10030CF0C()
{
  unint64_t result;

  result = qword_10064E1A0;
  if (!qword_10064E1A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Bool, &type metadata for Bool);
    atomic_store(result, (unint64_t *)&qword_10064E1A0);
  }
  return result;
}

_QWORD *sub_10030CF50@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

_QWORD *sub_10030CF8C@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

uint64_t sub_10030CFB0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10007E830(a2);
    sub_10021F534((unint64_t *)&qword_100643928, (uint64_t)&unk_1004DB0C8);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_10030D020@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_10030D058(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

unint64_t sub_10030D08C()
{
  unint64_t result;

  result = qword_10064E1D8;
  if (!qword_10064E1D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CompressionFormat, &type metadata for CompressionFormat);
    atomic_store(result, (unint64_t *)&qword_10064E1D8);
  }
  return result;
}

uint64_t sub_10030D0D4(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  swift_bridgeObjectRetain(v2);
  return IntentParameter.wrappedValue.setter(&v2);
}

_QWORD *sub_10030D10C@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

uint64_t sub_10030D12C(uint64_t a1)
{
  return sub_100308E6C(a1);
}

_QWORD *sub_10030D144@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_10030D180(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

_QWORD *sub_10030D1B4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

_QWORD *sub_10030D1F0@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

uint64_t sub_10030D210(uint64_t a1)
{
  return sub_100308300(a1);
}

_QWORD *sub_10030D224@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_10030D25C(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

unint64_t sub_10030D290()
{
  unint64_t result;

  result = qword_10064E230;
  if (!qword_10064E230)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FavoriteFolderOperation, &type metadata for FavoriteFolderOperation);
    atomic_store(result, (unint64_t *)&qword_10064E230);
  }
  return result;
}

_QWORD *sub_10030D2D4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_10030D30C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  swift_bridgeObjectRetain(v2);
  return IntentParameter.wrappedValue.setter(&v2);
}

double sub_10030D34C@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  IntentParameter.wrappedValue.getter(&v3);
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_10030D384(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v2 = *a1;
  v1 = a1[1];
  v4[0] = v2;
  v4[1] = v1;
  swift_bridgeObjectRetain(v1);
  return IntentParameter.wrappedValue.setter(v4);
}

uint64_t sub_10030D3BC(uint64_t a1)
{
  return sub_100308E6C(a1);
}

uint64_t sub_10030D3D0(uint64_t a1)
{
  return sub_100308300(a1);
}

uint64_t sub_10030D3E4(uint64_t a1)
{
  return sub_100308300(a1);
}

BOOL sub_10030D41C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[14];
  _OWORD v18[14];

  v2 = a1[11];
  v17[10] = a1[10];
  v17[11] = v2;
  v3 = a1[13];
  v17[12] = a1[12];
  v17[13] = v3;
  v4 = a1[7];
  v17[6] = a1[6];
  v17[7] = v4;
  v5 = a1[9];
  v17[8] = a1[8];
  v17[9] = v5;
  v6 = a1[3];
  v17[2] = a1[2];
  v17[3] = v6;
  v7 = a1[5];
  v17[4] = a1[4];
  v17[5] = v7;
  v8 = a1[1];
  v17[0] = *a1;
  v17[1] = v8;
  v9 = a2[11];
  v18[10] = a2[10];
  v18[11] = v9;
  v10 = a2[13];
  v18[12] = a2[12];
  v18[13] = v10;
  v11 = a2[7];
  v18[6] = a2[6];
  v18[7] = v11;
  v12 = a2[9];
  v18[8] = a2[8];
  v18[9] = v12;
  v13 = a2[3];
  v18[2] = a2[2];
  v18[3] = v13;
  v14 = a2[5];
  v18[4] = a2[4];
  v18[5] = v14;
  v15 = a2[1];
  v18[0] = *a2;
  v18[1] = v15;
  return sub_100312BA4((uint64_t)v17, (uint64_t)v18);
}

BOOL sub_10030D4BC(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

unint64_t sub_10030D4EC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t result;
  _QWORD v4[2];

  v0 = type metadata accessor for DOCGridLayout.LayoutCalculator();
  v1 = (_QWORD *)swift_allocObject(v0, 48, 7);
  v1[2] = 0x3FC999999999999ALL;
  v4[0] = sub_1003F0964((uint64_t)_swiftEmptyArrayStorage);
  v4[1] = sub_1003F0B88((uint64_t)_swiftEmptyArrayStorage);
  v2 = sub_10006922C(&qword_10064E448);
  swift_allocObject(v2, 40, 7);
  v1[3] = DOCThreadSafeState.init(_:)(v4);
  v1[4] = sub_1003F0964((uint64_t)_swiftEmptyArrayStorage);
  result = sub_1003F0B88((uint64_t)_swiftEmptyArrayStorage);
  v1[5] = result;
  qword_10064E2D0 = (uint64_t)v1;
  return result;
}

double sub_10030D5A4@<D0>(double *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(__int128 *__return_ptr, uint64_t (*)(), _BYTE *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  void (*v61)(uint64_t (*)(), _BYTE *, char *);
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double result;
  _BYTE v78[16];
  uint64_t *v79;
  __int128 *v80;
  _QWORD v81[2];
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char v124;
  char v125;
  int v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  double v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE v143[224];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158[5];
  char v159;
  char v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  double v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  double v174;
  uint64_t v175;
  uint64_t v176;
  _BYTE v177[224];
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  int v192;
  char v193;
  _OWORD v194[15];

  v8 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_BYTE *)(a2 + 41);
  v13 = *(_BYTE *)(a2 + 42);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a2 + 72);
  v18 = *(_QWORD *)(a2 + 80);
  v19 = *(_QWORD *)(a2 + 88);
  v21 = *(_QWORD *)(a2 + 96);
  v20 = *(_QWORD *)(a2 + 104);
  v22 = *(_BYTE *)(a2 + 40) & 1;
  v23 = v12 & 1;
  v24 = v13 & 1;
  v26 = *a1;
  v25 = *((_QWORD *)a1 + 1);
  v27 = *((_QWORD *)a1 + 2);
  v28 = *((_QWORD *)a1 + 3);
  v29 = a1[4];
  v30 = *((_QWORD *)a1 + 5);
  v31 = *((_QWORD *)a1 + 8);
  v102 = *(_QWORD *)(a2 + 8);
  v103 = v8;
  v158[0] = v8;
  v158[1] = v102;
  v99 = v9;
  v158[2] = v9;
  v32 = v10;
  v158[3] = v10;
  v97 = v11;
  v158[4] = v11;
  v98 = v22;
  v159 = v22;
  v160 = v12 & 1;
  v161 = v13 & 1;
  v94 = v14;
  v95 = v17;
  v162 = v14;
  v33 = v15;
  v163 = v15;
  v164 = v17;
  v96 = v16;
  v165 = v16;
  v100 = v29;
  v101 = v18;
  v166 = v18;
  v34 = v19;
  v167 = v19;
  v35 = v21;
  v168 = v21;
  v91 = v20;
  v92 = v26;
  v169 = v20;
  v170 = v26;
  v171 = v25;
  v172 = v27;
  v173 = v28;
  v174 = v29;
  v175 = v30;
  v176 = v31;
  sub_1002F54AC(v194);
  v93 = v33;
  v89 = v34;
  v90 = v35;
  v87 = v27;
  v88 = v25;
  v85 = v31;
  v86 = v28;
  v84 = a3;
  if ((a3 & 1) == 0)
  {
    v118 = v103;
    v119 = v102;
    v120 = v99;
    v121 = v32;
    v122 = v97;
    v123 = v98;
    v124 = v23;
    v125 = v24;
    v128 = v94;
    v129 = v33;
    v130 = v95;
    v131 = v96;
    v132 = v101;
    v133 = v34;
    v42 = v34;
    v134 = v35;
    v43 = v92;
    v135 = v91;
    v136 = v92;
    v137 = v25;
    v138 = v27;
    v139 = v28;
    v140 = v100;
    v141 = v30;
    v142 = v31;
    sub_100070EDC((uint64_t)v194, (uint64_t)v143, &qword_10064DED8);
    sub_100313810((uint64_t)&v118);
    goto LABEL_7;
  }
  v83 = v30;
  v36 = v91;
  v38 = v95;
  v37 = v96;
  v39 = v94;
  v40 = sub_1001456B8(a2);
  if (qword_100640FC0 != -1)
    v40 = swift_once(&qword_100640FC0, sub_10031277C);
  v41 = v94;
  if ((byte_10064E2D8 & 1) != 0)
  {
    v118 = v103;
    v119 = v102;
    v120 = v99;
    v121 = v32;
    v122 = v97;
    v123 = v98;
    v124 = v23;
    v125 = v24;
    v128 = v94;
    v129 = v93;
    v130 = v95;
    v131 = v96;
    v42 = v89;
    v35 = v90;
    v132 = v101;
    v133 = v89;
    v134 = v90;
    v135 = v91;
    v43 = v92;
    v136 = v92;
    v27 = v87;
    v25 = v88;
    v137 = v88;
    v138 = v87;
    v31 = v85;
    v28 = v86;
    v139 = v86;
    v140 = v100;
    v30 = v83;
    v141 = v83;
    v142 = v85;
    sub_100070EDC((uint64_t)v194, (uint64_t)v143, &qword_10064DED8);
    sub_100313810((uint64_t)&v118);
    sub_1001456E8((void **)a2);
LABEL_7:
    sub_100070EDC((uint64_t)v194, (uint64_t)v177, &qword_10064DED8);
    v44 = v93;
    goto LABEL_8;
  }
  v81[0] = v4;
  v81[1] = v81;
  v50 = *(_QWORD *)(v4 + 24);
  __chkstk_darwin(v40);
  v82 = v32;
  v79 = v158;
  v51 = *(void (**)(__int128 *__return_ptr, uint64_t (*)(), _BYTE *, uint64_t))(*(_QWORD *)v50
                                                                                                  + 160);
  v52 = sub_10006922C(&qword_10064DED8);
  v53 = v82;
  v51(&v178, sub_100313AC0, v78, v52);
  v55 = v102;
  v54 = v103;
  v56 = v24;
  v57 = v23;
  v58 = v99;
  sub_100070EDC((uint64_t)&v178, (uint64_t)&v104, &qword_10064DED8);
  v118 = v54;
  v119 = v55;
  v120 = v58;
  v121 = v53;
  v23 = v57;
  v24 = v56;
  v32 = v53;
  v122 = v97;
  v123 = v98;
  v124 = v23;
  v125 = v56;
  v128 = v39;
  v129 = v93;
  v49 = v38;
  v130 = v38;
  v131 = v37;
  v25 = v88;
  v132 = v101;
  v133 = v89;
  v134 = v90;
  v135 = v36;
  v136 = v92;
  v137 = v88;
  v28 = v86;
  v27 = v87;
  v138 = v87;
  v139 = v86;
  v140 = v100;
  v141 = v83;
  v31 = v85;
  v142 = v85;
  sub_100070EDC((uint64_t)&v104, (uint64_t)v143, &qword_10064DED8);
  sub_100313810((uint64_t)&v118);
  sub_1001456E8((void **)a2);
  sub_100070EDC((uint64_t)&v104, (uint64_t)&v144, &qword_10064DED8);
  if (sub_1000A849C((uint64_t *)&v144) != 1)
  {
    sub_1001456B8(a2);
    sub_100313924((uint64_t)&v104);
    v188 = v154;
    v189 = v155;
    v190 = v156;
    v191 = v157;
    v184 = v150;
    v185 = v151;
    v186 = v152;
    v187 = v153;
    v180 = v146;
    v181 = v147;
    v182 = v148;
    v183 = v149;
    v178 = v144;
    v179 = v145;
    v48 = v93;
    v46 = v83;
    goto LABEL_19;
  }
  sub_100070EDC((uint64_t)&v104, (uint64_t)v177, &qword_10064DED8);
  v30 = v83;
  v43 = v92;
  v44 = v93;
  v42 = v89;
  v35 = v90;
  v4 = v81[0];
LABEL_8:
  v118 = v103;
  v119 = v102;
  v120 = v99;
  v121 = v32;
  v122 = v97;
  v123 = v98;
  v124 = v23;
  v125 = v24;
  v126 = v192;
  v127 = v193;
  v128 = v94;
  v129 = v44;
  v130 = v95;
  v131 = v96;
  v132 = v101;
  v133 = v42;
  v134 = v35;
  v45 = v91;
  v135 = v91;
  v136 = v43;
  v137 = v25;
  v138 = v27;
  v139 = v28;
  v140 = v100;
  v46 = v30;
  v141 = v30;
  v142 = v31;
  sub_100070EDC((uint64_t)v177, (uint64_t)v143, &qword_10064DED8);
  sub_100313810((uint64_t)&v118);
  sub_100313924((uint64_t)v177);
  sub_100313144(v158, (uint64_t)&v144);
  v114 = v154;
  v115 = v155;
  v116 = v156;
  v117 = v157;
  v110 = v150;
  v111 = v151;
  v112 = v152;
  v113 = v153;
  v106 = v146;
  v107 = v147;
  v108 = v148;
  v109 = v149;
  v104 = v144;
  v105 = v145;
  sub_1001456B8(a2);
  sub_1001456B8((uint64_t)&v144);
  v36 = v45;
  if ((v84 & 1) != 0)
  {
    sub_1001456B8(a2);
    v47 = sub_1001456B8((uint64_t)&v144);
    if (qword_100640FC0 != -1)
      v47 = swift_once(&qword_100640FC0, sub_10031277C);
    v41 = v94;
    v25 = v88;
    if (byte_10064E2D8 != 1)
    {
      v59 = *(_QWORD *)(v4 + 24);
      __chkstk_darwin(v47);
      v79 = v158;
      v80 = &v144;
      v60 = v23;
      v61 = *(void (**)(uint64_t (*)(), _BYTE *, char *))(*(_QWORD *)v59 + 168);
      sub_1001456B8(a2);
      sub_1001456B8((uint64_t)&v144);
      v61(sub_100313AC8, v78, (char *)&type metadata for () + 8);
      v23 = v60;
      sub_1001456E8((void **)a2);
      sub_1001456E8((void **)&v144);
    }
    sub_100313994((uint64_t)&v118);
    sub_1001456E8((void **)&v144);
    sub_1001456E8((void **)a2);
    v188 = v114;
    v189 = v115;
    v190 = v116;
    v191 = v117;
    v184 = v110;
    v185 = v111;
    v186 = v112;
    v187 = v113;
    v180 = v106;
    v181 = v107;
    v182 = v108;
    v183 = v109;
    v178 = v104;
    v179 = v105;
    v48 = v93;
    v49 = v95;
  }
  else
  {
    sub_100313994((uint64_t)&v118);
    v188 = v114;
    v189 = v115;
    v190 = v116;
    v191 = v117;
    v184 = v110;
    v185 = v111;
    v186 = v112;
    v187 = v113;
    v180 = v106;
    v181 = v107;
    v182 = v108;
    v183 = v109;
    v178 = v104;
    v179 = v105;
    v48 = v93;
    v41 = v94;
    v49 = v95;
    v25 = v88;
  }
  v28 = v86;
  v27 = v87;
  v31 = v85;
LABEL_19:
  v62 = v189;
  *(_OWORD *)(a4 + 272) = v188;
  *(_OWORD *)(a4 + 288) = v62;
  v63 = v191;
  *(_OWORD *)(a4 + 304) = v190;
  *(_OWORD *)(a4 + 320) = v63;
  v64 = v185;
  *(_OWORD *)(a4 + 208) = v184;
  *(_OWORD *)(a4 + 224) = v64;
  v65 = v187;
  *(_OWORD *)(a4 + 240) = v186;
  *(_OWORD *)(a4 + 256) = v65;
  v66 = v181;
  *(_OWORD *)(a4 + 144) = v180;
  *(_OWORD *)(a4 + 160) = v66;
  v67 = v183;
  *(_OWORD *)(a4 + 176) = v182;
  *(_OWORD *)(a4 + 192) = v67;
  v68 = v179;
  *(_OWORD *)(a4 + 112) = v178;
  *(_OWORD *)(a4 + 128) = v68;
  *(_DWORD *)(a4 + 379) = v192;
  *(_BYTE *)(a4 + 383) = v193;
  v70 = v102;
  v69 = v103;
  *(_QWORD *)a4 = v103;
  *(_QWORD *)(a4 + 8) = v70;
  v71 = v99;
  *(_QWORD *)(a4 + 16) = v99;
  *(_QWORD *)(a4 + 24) = v32;
  v72 = v97;
  *(_QWORD *)(a4 + 32) = v97;
  v73 = v98;
  *(_BYTE *)(a4 + 40) = v98;
  *(_BYTE *)(a4 + 41) = v23;
  *(_BYTE *)(a4 + 42) = v24;
  *(_QWORD *)(a4 + 48) = v41;
  *(_QWORD *)(a4 + 56) = v48;
  v74 = v96;
  *(_QWORD *)(a4 + 64) = v49;
  *(_QWORD *)(a4 + 72) = v74;
  *(_QWORD *)&v68 = v101;
  v75 = v89;
  v76 = v90;
  *(_QWORD *)(a4 + 80) = v101;
  *(_QWORD *)(a4 + 88) = v75;
  *(_QWORD *)(a4 + 96) = v76;
  *(_QWORD *)(a4 + 104) = v36;
  *(_QWORD *)(a4 + 336) = v69;
  *(_QWORD *)(a4 + 344) = v70;
  *(_QWORD *)(a4 + 352) = v71;
  *(_QWORD *)(a4 + 360) = v32;
  *(_QWORD *)(a4 + 368) = v72;
  *(_BYTE *)(a4 + 376) = v73;
  *(_BYTE *)(a4 + 377) = v23;
  *(_BYTE *)(a4 + 378) = v24;
  *(_QWORD *)(a4 + 384) = v41;
  *(_QWORD *)(a4 + 392) = v48;
  *(_QWORD *)(a4 + 400) = v49;
  *(_QWORD *)(a4 + 408) = v74;
  *(_QWORD *)(a4 + 416) = v68;
  *(_QWORD *)(a4 + 424) = v75;
  *(_QWORD *)(a4 + 432) = v76;
  *(_QWORD *)(a4 + 440) = v36;
  *(double *)(a4 + 448) = v92;
  *(_QWORD *)(a4 + 456) = v25;
  *(_QWORD *)(a4 + 464) = v27;
  *(_QWORD *)(a4 + 472) = v28;
  result = v100;
  *(double *)(a4 + 480) = v100;
  *(_QWORD *)(a4 + 488) = v46;
  *(_QWORD *)(a4 + 496) = v31;
  return result;
}

Swift::Int sub_10030DE94()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  _QWORD v9[9];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  Hasher.init(_seed:)(v9, 0);
  v1 = v0[5];
  v14 = v0[4];
  v15 = v1;
  v16 = v0[6];
  v2 = v0[1];
  v10 = *v0;
  v11 = v2;
  v3 = v0[3];
  v12 = v0[2];
  v13 = v3;
  sub_100390ED8((uint64_t)v9);
  v4 = *((_QWORD *)v0 + 15);
  if ((v0[7] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = *((_QWORD *)v0 + 14);
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v4;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  UIEdgeInsets.hash(into:)(v9, *((double *)v0 + 16), *((double *)v0 + 17), *((double *)v0 + 18), *((double *)v0 + 19));
  if ((v0[10] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = *((_QWORD *)v0 + 20);
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

BOOL sub_10030DF4C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[10];
  uint64_t v14;
  _OWORD v15[10];
  uint64_t v16;

  v2 = *(_OWORD *)(a1 + 144);
  v13[8] = *(_OWORD *)(a1 + 128);
  v13[9] = v2;
  v14 = *(_QWORD *)(a1 + 160);
  v3 = *(_OWORD *)(a1 + 80);
  v13[4] = *(_OWORD *)(a1 + 64);
  v13[5] = v3;
  v4 = *(_OWORD *)(a1 + 112);
  v13[6] = *(_OWORD *)(a1 + 96);
  v13[7] = v4;
  v5 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v13[2] = *(_OWORD *)(a1 + 32);
  v13[3] = v6;
  v7 = *(_OWORD *)(a2 + 144);
  v15[8] = *(_OWORD *)(a2 + 128);
  v15[9] = v7;
  v16 = *(_QWORD *)(a2 + 160);
  v8 = *(_OWORD *)(a2 + 80);
  v15[4] = *(_OWORD *)(a2 + 64);
  v15[5] = v8;
  v9 = *(_OWORD *)(a2 + 112);
  v15[6] = *(_OWORD *)(a2 + 96);
  v15[7] = v9;
  v10 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v10;
  v11 = *(_OWORD *)(a2 + 48);
  v15[2] = *(_OWORD *)(a2 + 32);
  v15[3] = v11;
  return sub_100312850((uint64_t)v13, (uint64_t)v15);
}

Swift::Int sub_10030DFDC()
{
  return sub_10030DE94();
}

void sub_10030E034(uint64_t a1)
{
  double *v1;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;

  v3 = v1[14];
  v4 = v1[15];
  v5 = v1[16];
  v6 = v1[17];
  v7 = v1[18];
  v8 = v1[19];
  v9 = *((_QWORD *)v1 + 20);
  sub_100390ED8(a1);
  sub_100312808(v3, v4);
  UIEdgeInsets.hash(into:)(a1, v5, v6, v7, v8);
  if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = v9;
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
}

Swift::Int sub_10030E0E8(uint64_t a1)
{
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  _QWORD v14[9];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v2 = v1[5];
  v19 = v1[4];
  v20 = v2;
  v21 = v1[6];
  v3 = v1[1];
  v15 = *v1;
  v16 = v3;
  v4 = v1[3];
  v17 = v1[2];
  v18 = v4;
  v5 = *((double *)v1 + 14);
  v6 = *((double *)v1 + 15);
  v7 = *((double *)v1 + 16);
  v8 = *((double *)v1 + 17);
  v9 = *((double *)v1 + 18);
  v10 = *((double *)v1 + 19);
  v11 = *((_QWORD *)v1 + 20);
  Hasher.init(_seed:)(v14, a1);
  sub_100390ED8((uint64_t)v14);
  sub_100312808(v5, v6);
  UIEdgeInsets.hash(into:)(v14, v7, v8, v9, v10);
  if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v12 = v11;
  else
    v12 = 0;
  Hasher._combine(_:)(v12);
  return Hasher._finalize()();
}

void *sub_10030E1B0@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, int a4@<W3>, int a5@<W4>, void *a6@<X8>)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  int8x16_t v30;
  __int128 v31;
  int8x16_t v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  int8x16_t v43;
  int8x16_t v44;
  _BOOL4 v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  _QWORD *v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  double v60;
  double v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  double v75;
  uint64_t v76;
  double v77;
  char v78;
  uint64_t v79;
  double v80;
  double v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  char v96;
  double v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  id v102;
  id v103;
  id v104;
  void *v105;
  double v106;
  uint64_t v107;
  char v108;
  void *v109;
  _BYTE *v110;
  uint64_t v111;
  char v112;
  void *v113;
  void *v114;
  id v115;
  id v116;
  uint64_t v117;
  char v118;
  void (*v119)(int8x16_t *__return_ptr, uint64_t (*)(), char **, uint64_t);
  uint64_t v120;
  int v121;
  uint64_t v122;
  _DWORD *v123;
  uint64_t v124;
  int8x16_t v125;
  int8x16_t v126;
  id v127;
  id v128;
  id v129;
  id v130;
  uint64_t v131;
  double v132;
  int8x16_t v133;
  uint64_t v134;
  int8x16_t v135;
  uint64_t v136;
  void (*v137)(uint64_t (*)(), char **, char *);
  id v138;
  id v139;
  int8x16_t v140;
  int v141;
  double v142;
  double v143;
  uint64_t v144;
  double v145;
  uint64_t v146;
  double v147;
  __int128 v148;
  _BYTE *v149;
  int8x16_t v150;
  __int128 v151;
  int v152;
  uint64_t v153;
  int8x16_t v154;
  int8x16_t *v155;
  _BYTE *v156;
  int v157;
  _DWORD *v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  double v162;
  double v163;
  uint64_t v164;
  double v165;
  _BOOL8 v166;
  uint64_t v167;
  double v168;
  double v169;
  id v170;
  double v171;
  double v172;
  double v173;
  uint64_t v174;
  char v175;
  _QWORD *v176;
  id v177;
  id v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  id v186;
  char v187;
  id v188;
  id v189;
  id v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  double v198;
  double v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  double v206;
  uint64_t v207;
  double v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  char v217;
  double v218;
  double v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  id v223;
  id v224;
  id v225;
  id v226;
  void *v227;
  double v228;
  _BYTE *v229;
  void *v230;
  id v231;
  id v232;
  uint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  id v237;
  void (*v238)(_OWORD *__return_ptr, void **(*)@<X0>(uint64_t *@<X0>, void *@<X8>), char **, uint64_t);
  uint64_t v239;
  void *v240;
  uint64_t v241;
  _DWORD *v242;
  double v243;
  void *v244;
  int8x16_t v245;
  int8x16_t v246;
  id v247;
  id v248;
  id v249;
  id v250;
  uint64_t v251;
  int8x16_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  int8x16_t v256;
  uint64_t v257;
  void (*v258)(uint64_t (*)(), char **, char *);
  id v259;
  id v260;
  id v261;
  int8x16_t v262;
  int8x16_t v263;
  id v264;
  id v265;
  int8x16_t v266;
  id v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  double v271;
  double v272;
  double v273;
  uint64_t v274;
  double v275;
  uint64_t v276;
  double v277;
  __int128 v278;
  _BYTE *v279;
  int8x16_t v280;
  __int128 v281;
  int8x16_t v282;
  int8x16_t *v283;
  _BYTE *v284;
  _DWORD *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v289;
  void (*v290)(void **(*)(_QWORD *), char **, char *);
  char *v291;
  __int128 *v292;
  uint64_t *v293;
  int8x16_t *v294;
  int v295;
  void *v296;
  double v297;
  double v298;
  double v299;
  int8x16_t *v300;
  int8x16_t *v301;
  _BYTE *v302;
  int8x16_t *v303;
  uint64_t v304;
  uint64_t v305;
  id v306;
  _DWORD *v307;
  double v308;
  _QWORD *v309;
  _BYTE *v310;
  _BYTE *v311;
  int8x16_t *v312;
  _BYTE *v313;
  _BYTE *v314;
  uint64_t v315;
  double v316;
  uint64_t v317;
  double v318;
  double v319;
  double v320;
  int v321;
  double v322;
  int v323;
  double v324;
  int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  double v329;
  double v330;
  double v331;
  double v332;
  uint64_t v333;
  id v334;
  uint64_t v335;
  uint64_t v336;
  int8x16_t v337;
  id v338;
  void *v339;
  int v340;
  id v341;
  double v342;
  uint64_t v343;
  int8x16_t v344;
  double v345;
  uint64_t v346;
  id v347;
  int v348;
  double v349;
  unsigned int v350;
  double v351;
  double v352;
  uint64_t v353;
  double v354;
  uint64_t v355;
  uint64_t v356;
  id v357;
  uint64_t v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  double v362;
  int8x16_t v363;
  int8x16_t v364;
  uint64_t v365;
  double v366;
  double v367;
  uint64_t v368;
  uint64_t v369;
  double v370;
  double v371;
  id v372[3];
  double v373;
  int8x16_t v374;
  int8x16_t v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  uint64_t v381;
  int8x16_t v382;
  int8x16_t v383;
  int8x16_t v384;
  int8x16_t v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  uint64_t v391;
  void *v392;
  uint64_t v393;
  int8x16_t v394;
  uint64_t v395;
  int8x16_t v396;
  uint64_t v397;
  _OWORD v398[10];
  double v399;
  int8x16_t v400;
  uint64_t v401;
  int8x16_t v402;
  int8x16_t v403;
  int8x16_t v404;
  int8x16_t v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  uint64_t v411;
  int v412;
  char v413;
  __int128 v414;
  uint64_t v415;
  int8x16_t v416;
  int8x16_t v417;
  int8x16_t v418;
  int8x16_t v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  uint64_t v425;
  int v426;
  char v427;
  int8x16_t v428;
  uint64_t v429;
  int8x16_t v430;
  int8x16_t v431;
  int8x16_t v432;
  int8x16_t v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  uint64_t v439;
  int v440;
  char v441;
  int8x16_t v442;
  int8x16_t v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  int8x16_t v450;
  int8x16_t v451;
  __int128 v452;
  int8x16_t v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  double v466;
  uint64_t v467;
  _BYTE v468[504];
  _OWORD v469[7];
  uint64_t v470;
  void *v471;
  _QWORD v472[6];
  _BYTE v473[40];
  uint64_t v474;
  _OWORD v475[7];
  uint64_t v476;
  void *v477;
  _OWORD v478[3];
  _QWORD v479[6];
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  _BYTE v487[504];
  _OWORD v488[14];
  uint64_t v489[5];
  char v490;
  char v491;
  char v492;
  double v493;
  double v494;
  double v495;
  double v496;
  double v497;
  uint64_t v498;
  uint64_t v499;
  double v500;
  double v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  double v507;
  uint64_t v508[5];
  char v509;
  char v510;
  char v511;
  double v512;
  double v513;
  double v514;
  double v515;
  double v516;
  uint64_t v517;
  uint64_t v518;
  double v519;
  double v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  double v526;
  __int128 v527;
  uint64_t v528;
  int8x16_t v529;
  int8x16_t v530;
  __int128 v531;
  int8x16_t v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  uint64_t v538;
  int v539;
  char v540;

  v295 = a5;
  v340 = a4;
  v296 = a6;
  memcpy(v468, a1, sizeof(v468));
  v9 = a1[1];
  v480 = *a1;
  v481 = v9;
  v10 = a1[3];
  v482 = a1[2];
  v483 = v10;
  v11 = a1[5];
  v484 = a1[4];
  v485 = v11;
  v12 = a1[7];
  v486 = a1[6];
  v13 = *((_QWORD *)&v480 + 1);
  v365 = *((_QWORD *)&v481 + 1);
  v14 = (void *)v481;
  v355 = v482;
  v350 = BYTE8(v482);
  v348 = BYTE9(v482);
  v359 = BYTE10(v482);
  v15 = *((double *)&v483 + 1);
  v16 = *(double *)&v484;
  v331 = *(double *)&v485;
  v332 = *((double *)&v484 + 1);
  v17 = *((_QWORD *)&v485 + 1);
  v368 = v486;
  v329 = *(double *)&v483;
  v330 = *((double *)&v486 + 1);
  v19 = (void *)*((_QWORD *)a1 + 42);
  v18 = *((_QWORD *)a1 + 43);
  v363.i64[0] = *((_QWORD *)a1 + 44);
  v327 = *((_QWORD *)a1 + 45);
  v328 = v18;
  v326 = *((_QWORD *)a1 + 46);
  v325 = *((unsigned __int8 *)a1 + 376);
  v323 = *((unsigned __int8 *)a1 + 377);
  v321 = *((unsigned __int8 *)a1 + 378);
  v539 = *(_DWORD *)((char *)a1 + 379);
  v540 = *((_BYTE *)a1 + 383);
  v324 = *((double *)a1 + 48);
  v322 = *((double *)a1 + 49);
  v20 = *((double *)a1 + 50);
  v319 = *((double *)a1 + 51);
  v320 = v20;
  v21 = *((double *)a1 + 52);
  v22 = *((_QWORD *)a1 + 53);
  v317 = *((_QWORD *)a1 + 54);
  v318 = v21;
  v23 = *((double *)a1 + 55);
  v315 = v22;
  v316 = v23;
  v354 = *((double *)a1 + 56);
  v353 = *((_QWORD *)a1 + 57);
  v24 = *((_QWORD *)a1 + 59);
  v358 = *((_QWORD *)a1 + 58);
  v25 = *((_QWORD *)a1 + 60);
  v361 = *((_QWORD *)a1 + 61);
  v345 = *((double *)a1 + 62);
  v346 = v25;
  v26 = a1[12];
  v27 = a1[13];
  v28 = a1[10];
  v535 = a1[11];
  v536 = v26;
  v537 = v27;
  v29 = (id)*((_QWORD *)a1 + 29);
  v538 = *((_QWORD *)a1 + 28);
  v30 = (int8x16_t)a1[8];
  v31 = a1[9];
  v531 = v12;
  v532 = v30;
  v533 = v31;
  v534 = v28;
  v32 = (int8x16_t)a1[15];
  v530 = (int8x16_t)a1[16];
  v529 = v32;
  v32.i64[0] = *((_QWORD *)a1 + 34);
  v337 = v32;
  v32.i64[0] = *((_QWORD *)a1 + 35);
  *(int8x16_t *)v372 = v32;
  v528 = *((_QWORD *)a1 + 38);
  v527 = a1[18];
  v32.i64[1] = *((_QWORD *)&v527 + 1);
  v32.i64[0] = *((_QWORD *)a1 + 39);
  v344 = v32;
  v32.i64[0] = *((_QWORD *)a1 + 40);
  v364 = v32;
  v343 = *((_QWORD *)a1 + 41);
  v33 = (id)v480;
  v34 = v14;
  v35 = v33;
  v36 = v34;
  v37 = v35;
  v38 = v36;
  v39 = v37;
  v40 = v38;
  v41 = v39;
  v42 = v40;
  v347 = v41;
  v334 = v42;
  v292 = a1;
  sub_1002F5350((uint64_t)a1);
  sub_1001456B8((uint64_t)&v480);
  swift_beginAccess(v468, &v467, 1, 0);
  v43 = v364;
  v44 = *(int8x16_t *)v372;
  v45 = *(double *)v372 < *(double *)v364.i64;
  v335 = a2;
  v46 = (uint64_t)v29 < a2;
  v357 = v19;
  if ((uint64_t)v29 >= a2 && *(double *)v372 >= *(double *)v364.i64)
  {
    v47 = 0;
LABEL_4:
    *(int8x16_t *)v372 = v44;
    v364 = v43;
    v48 = (uint64_t)v347;

    v49 = v29;
    v29 = v334;

    v446 = v535;
    v447 = v536;
    v448 = v537;
    v442 = (int8x16_t)v531;
    v443 = v532;
    v444 = v533;
    v445 = v534;
    *(_QWORD *)&v449 = v538;
    *((_QWORD *)&v449 + 1) = v49;
    v451 = v530;
    v450 = v529;
    *(_QWORD *)&v452 = v337.i64[0];
    *((id *)&v452 + 1) = v372[0];
    *(_QWORD *)&v454 = v528;
    v453 = (int8x16_t)v527;
    *((_QWORD *)&v454 + 1) = v344.i64[0];
    *(_QWORD *)&v455 = v364.i64[0];
    *((_QWORD *)&v455 + 1) = v343;
    *(_QWORD *)&v456 = v357;
    *((_QWORD *)&v456 + 1) = v328;
    *(_QWORD *)&v457 = v363.i64[0];
    *((_QWORD *)&v457 + 1) = v327;
    *(_QWORD *)&v458 = v326;
    BYTE8(v458) = v325;
    BYTE9(v458) = v323;
    BYTE10(v458) = v321;
    HIBYTE(v458) = v540;
    *(_DWORD *)((char *)&v458 + 11) = v539;
    *(double *)&v459 = v324;
    *((double *)&v459 + 1) = v322;
    *(double *)&v460 = v320;
    *((double *)&v460 + 1) = v319;
    *(double *)&v461 = v318;
    *((_QWORD *)&v461 + 1) = v315;
    *(_QWORD *)&v462 = v317;
    *((double *)&v462 + 1) = v316;
    *(double *)&v463 = v354;
    *((_QWORD *)&v463 + 1) = v353;
    *(_QWORD *)&v464 = v358;
    *((_QWORD *)&v464 + 1) = v24;
    *(_QWORD *)&v465 = v346;
    *((_QWORD *)&v465 + 1) = v361;
    v466 = v345;
LABEL_101:
    v488[10] = v452;
    v488[11] = v453;
    v488[12] = v454;
    v488[13] = v455;
    v488[6] = v448;
    v488[7] = v449;
    v488[8] = v450;
    v488[9] = v451;
    v488[2] = v444;
    v488[3] = v445;
    v488[4] = v446;
    v488[5] = v447;
    v488[0] = v442;
    v488[1] = v443;
    v398[8] = v464;
    v398[9] = v465;
    v399 = v466;
    v398[4] = v460;
    v398[5] = v461;
    v398[7] = v463;
    v398[6] = v462;
    v398[0] = v456;
    v398[1] = v457;
    v398[3] = v459;
    v398[2] = v458;

    if (v47 >= 1 && (v340 & 1) != 0)
    {
      *(_QWORD *)v487 = v48;
      *(_QWORD *)&v487[8] = v13;
      *(_QWORD *)&v487[16] = v29;
      *(_QWORD *)&v487[24] = v365;
      *(_QWORD *)&v487[32] = v355;
      v487[40] = v350;
      v487[41] = v348;
      v487[42] = v359;
      *(double *)&v487[48] = v329;
      *(double *)&v487[56] = v15;
      *(double *)&v487[64] = v16;
      *(double *)&v487[72] = v332;
      *(double *)&v487[80] = v331;
      *(_QWORD *)&v487[88] = v17;
      *(_QWORD *)&v487[96] = v368;
      *(double *)&v487[104] = v330;
      *(int8x16_t *)&v487[112] = v442;
      *(int8x16_t *)&v487[128] = v443;
      *(_OWORD *)&v487[192] = v447;
      *(_OWORD *)&v487[176] = v446;
      *(_OWORD *)&v487[160] = v445;
      *(_OWORD *)&v487[144] = v444;
      *(int8x16_t *)&v487[256] = v451;
      *(int8x16_t *)&v487[240] = v450;
      *(_OWORD *)&v487[224] = v449;
      *(_OWORD *)&v487[208] = v448;
      *(_OWORD *)&v487[320] = v455;
      *(_OWORD *)&v487[304] = v454;
      *(int8x16_t *)&v487[288] = v453;
      *(_OWORD *)&v487[272] = v452;
      *(_OWORD *)&v487[448] = v463;
      *(_OWORD *)&v487[464] = v464;
      *(_OWORD *)&v487[480] = v465;
      *(double *)&v487[496] = v466;
      *(_OWORD *)&v487[384] = v459;
      *(_OWORD *)&v487[400] = v460;
      *(_OWORD *)&v487[416] = v461;
      *(_OWORD *)&v487[432] = v462;
      *(_OWORD *)&v487[336] = v456;
      *(_OWORD *)&v487[352] = v457;
      *(_OWORD *)&v487[368] = v458;
      v287 = sub_1002F5350((uint64_t)v487);
      if (qword_100640FC0 != -1)
        goto LABEL_112;
      goto LABEL_104;
    }
LABEL_106:
    if ((v295 & 1) != 0)
      goto LABEL_108;
LABEL_107:
    memcpy(v487, v468, sizeof(v487));
    sub_1002F5350((uint64_t)v487);
    sub_1003133A8(v292, (__int128 *)v487, (__int128 *)a3);
    sub_1002F53B0((uint64_t)v487);
    goto LABEL_108;
  }
  v47 = 0;
  v314 = &v487[168];
  v293 = &v395;
  v294 = (int8x16_t *)&v393;
  v307 = &v487[43];
  v302 = v473;
  v303 = (int8x16_t *)v472;
  v312 = (int8x16_t *)&v468[240];
  v313 = &v468[112];
  v310 = &v468[379];
  v311 = &v468[288];
  v308 = (double)v335 + 0.2;
  v298 = v15 + v15;
  v299 = v308 + -1.0;
  v297 = v16 + v16;
  v300 = (int8x16_t *)v479;
  v301 = (int8x16_t *)v478;
  v367 = v329;
  v351 = v331;
  v352 = v332;
  v349 = v330;
  v291 = &type metadata for ()[8];
  v309 = a3;
  v369 = v17;
  v370 = v16;
  v362 = v15;
  v356 = v13;
  while (1)
  {
    LODWORD(v342) = v46;
    LODWORD(v339) = v45;
    v364 = v43;
    *(int8x16_t *)v372 = v44;
    v50 = a3;
    v51 = v29;
    v336 = v47;
    v52 = v347;
    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v347);
    v55 = v54;
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    v58 = v56;
    if (v53 == v57 && v55 == v56)
      v59 = 1;
    else
      v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v55, v57, v56, 0);
    v60 = fmax(v351 + -2.0, 4.0);
    v61 = fmax(v352 + -2.0, 4.0);
    v373 = fmax(v349 + -2.0, 4.0);
    v62 = v347;
    v63 = v334;
    v64 = v334;
    v65 = v62;
    v66 = v64;

    swift_bridgeObjectRelease(v55);
    swift_bridgeObjectRelease(v58);
    v67 = v61;
    v371 = v61;
    v341 = v66;
    v338 = v65;
    v366 = v60;
    if ((v59 & 1) == 0)
    {

      v74 = v359;
      v75 = v373;
      v76 = v368;
      v77 = v61;
      goto LABEL_21;
    }
    v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    v70 = v69;
    v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    v73 = v71;
    if (v68 == v72 && v70 == v71)
    {

      swift_bridgeObjectRelease_n(v70, 2);
      v74 = v359;
      v75 = v373;
      v76 = v368;
      v77 = v61;
    }
    else
    {
      v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v70, v72, v71, 0);

      swift_bridgeObjectRelease(v70);
      swift_bridgeObjectRelease(v73);
      v74 = v359;
      v75 = v373;
      v76 = v368;
      v77 = v61;
      if ((v78 & 1) == 0)
        goto LABEL_21;
    }
    if (v77 == v352 && v60 == v351)
    {
      v29 = v51;
      if (v75 == v349)
      {
        v360 = v24;
        a3 = v50;
        if ((LOBYTE(v342) & 1) != 0)
        {
          v79 = 0;
          v425 = v538;
          v415 = v528;
          v427 = v540;
          v426 = v539;
          v422 = v535;
          v423 = v536;
          v424 = v537;
          v418 = (int8x16_t)v531;
          v419 = v532;
          v420 = v533;
          v421 = v534;
          v417 = v530;
          v416 = v529;
          v305 = v363.i64[0];
          v306 = v357;
          v342 = v345;
          v414 = v527;
          v80 = v367;
        }
        else
        {
          v13 = v356;
          v80 = v367;
          if ((v339 & 1) == 0)
          {

            v436 = v535;
            v437 = v536;
            v438 = v537;
            v439 = v538;
            v432 = (int8x16_t)v531;
            v433 = v532;
            v434 = v533;
            v435 = v534;
            v431 = v530;
            v430 = v529;
            v429 = v528;
            v428 = (int8x16_t)v527;
            v441 = v540;
            v440 = v539;
            v47 = v336;
            v164 = v361;
LABEL_100:

            v446 = v436;
            v447 = v437;
            v448 = v438;
            v442 = v432;
            v443 = v433;
            v444 = v434;
            v445 = v435;
            *(_QWORD *)&v449 = v439;
            *((_QWORD *)&v449 + 1) = v29;
            v451 = v431;
            v450 = v430;
            *(_QWORD *)&v452 = v337.i64[0];
            *((id *)&v452 + 1) = v372[0];
            *(_QWORD *)&v454 = v429;
            v453 = v428;
            *((_QWORD *)&v454 + 1) = v344.i64[0];
            *(_QWORD *)&v455 = v364.i64[0];
            *((_QWORD *)&v455 + 1) = v343;
            *(_QWORD *)&v456 = v357;
            *((_QWORD *)&v456 + 1) = v328;
            *(_QWORD *)&v457 = v363.i64[0];
            *((_QWORD *)&v457 + 1) = v327;
            *(_QWORD *)&v458 = v326;
            BYTE8(v458) = v325;
            BYTE9(v458) = v323;
            BYTE10(v458) = v321;
            HIBYTE(v458) = v441;
            *(_DWORD *)((char *)&v458 + 11) = v440;
            *(double *)&v459 = v324;
            *((double *)&v459 + 1) = v322;
            *(double *)&v460 = v320;
            *((double *)&v460 + 1) = v319;
            *(double *)&v461 = v318;
            *((_QWORD *)&v461 + 1) = v315;
            *(_QWORD *)&v462 = v317;
            *((double *)&v462 + 1) = v316;
            *(double *)&v463 = v354;
            *((_QWORD *)&v463 + 1) = v353;
            *(_QWORD *)&v464 = v358;
            *((_QWORD *)&v464 + 1) = v360;
            *(_QWORD *)&v465 = v346;
            *((_QWORD *)&v465 + 1) = v164;
            v466 = v345;
            v48 = (uint64_t)v347;
            v29 = v334;
            goto LABEL_101;
          }
          v79 = 0;
          v425 = v538;
          v415 = v528;
          v427 = v540;
          v426 = v539;
          v422 = v535;
          v423 = v536;
          v424 = v537;
          v418 = (int8x16_t)v531;
          v419 = v532;
          v420 = v533;
          v421 = v534;
          v417 = v530;
          v416 = v529;
          v305 = v363.i64[0];
          v306 = v357;
          v342 = v345;
          v414 = v527;
        }
        v159 = v315;
        goto LABEL_47;
      }
    }
LABEL_21:
    v81 = v77;
    v82 = v17;
    v83 = *(double *)v50;
    v84 = v50[1];
    v85 = v16;
    v87 = v50[2];
    v86 = v50[3];
    v88 = v50[4];
    v89 = v50[5];
    v90 = v15;
    v91 = *((double *)v50 + 8);
    v508[0] = (uint64_t)v65;
    v92 = v356;
    v508[1] = v356;
    v508[2] = (uint64_t)v66;
    v93 = v365;
    v508[3] = v365;
    v94 = v355;
    v508[4] = v355;
    v95 = v350;
    v509 = v350;
    v96 = v348;
    v510 = v348;
    v511 = v74;
    v97 = v367;
    v512 = v367;
    v513 = v90;
    v514 = v85;
    v515 = v81;
    v516 = v60;
    v517 = v82;
    v518 = v76;
    v519 = v75;
    v354 = v83;
    v520 = v83;
    v353 = v84;
    v521 = v84;
    v522 = v87;
    v523 = v86;
    v524 = v88;
    v525 = v89;
    v526 = v91;
    sub_1002F54AC(v488);
    v360 = v86;
    v358 = v87;
    v361 = v89;
    v342 = v91;
    if ((v340 & 1) == 0)
    {
      *(_QWORD *)v487 = v65;
      *(_QWORD *)&v487[8] = v92;
      *(_QWORD *)&v487[16] = v66;
      *(_QWORD *)&v487[24] = v93;
      *(_QWORD *)&v487[32] = v94;
      v487[40] = v95;
      v487[41] = v96;
      v487[42] = v74;
      *(double *)&v487[48] = v97;
      *(double *)&v487[56] = v90;
      *(double *)&v487[64] = v370;
      *(double *)&v487[72] = v371;
      *(double *)&v487[80] = v60;
      *(_QWORD *)&v487[88] = v369;
      *(_QWORD *)&v487[96] = v368;
      *(double *)&v487[104] = v373;
      *(double *)&v487[112] = v354;
      *(_QWORD *)&v487[120] = v353;
      *(_QWORD *)&v487[128] = v87;
      *(_QWORD *)&v487[136] = v86;
      *(_QWORD *)&v487[144] = v88;
      *(_QWORD *)&v487[152] = v89;
      *(double *)&v487[160] = v91;
      v113 = v66;
      v114 = v65;
      v108 = v96;
      v110 = v314;
      v111 = v93;
      sub_100070EDC((uint64_t)v488, (uint64_t)v314, &qword_10064DED8);
      v109 = v114;
      v115 = v114;
      v66 = v113;
      v116 = v113;
      sub_100313810((uint64_t)v487);
      sub_100070EDC((uint64_t)v488, (uint64_t)v398, &qword_10064DED8);
LABEL_29:
      v112 = v359;
      goto LABEL_30;
    }
    v98 = v65;
    v99 = v92;
    v100 = qword_100640FC0;
    v101 = v98;
    v102 = v66;
    v103 = v101;
    v104 = v102;
    v105 = v104;
    if (v100 != -1)
      v104 = (id)swift_once(&qword_100640FC0, sub_10031277C);
    v106 = v371;
    if ((byte_10064E2D8 & 1) == 0)
    {
      v117 = *(_QWORD *)(v304 + 24);
      __chkstk_darwin(v104);
      *(&v291 - 2) = (char *)v508;
      v118 = v74;
      v119 = *(void (**)(int8x16_t *__return_ptr, uint64_t (*)(), char **, uint64_t))(*(_QWORD *)v117 + 160);
      v120 = sub_10006922C(&qword_10064DED8);
      v119(&v374, sub_100313AC0, &v291 - 4, v120);
      v121 = v348;
      sub_100070EDC((uint64_t)&v374, (uint64_t)&v382, &qword_10064DED8);
      *(_QWORD *)v487 = v103;
      v122 = v99;
      *(_QWORD *)&v487[8] = v99;
      *(_QWORD *)&v487[16] = v105;
      *(_QWORD *)&v487[24] = v365;
      *(_QWORD *)&v487[32] = v355;
      v487[40] = v350;
      v487[41] = v121;
      v487[42] = v118;
      *(double *)&v487[48] = v367;
      *(double *)&v487[56] = v362;
      *(double *)&v487[64] = v370;
      *(double *)&v487[72] = v106;
      *(double *)&v487[80] = v60;
      *(_QWORD *)&v487[88] = v369;
      *(_QWORD *)&v487[96] = v368;
      *(double *)&v487[104] = v373;
      *(double *)&v487[112] = v354;
      *(_QWORD *)&v487[120] = v353;
      *(_QWORD *)&v487[128] = v358;
      v86 = v360;
      *(_QWORD *)&v487[136] = v360;
      *(_QWORD *)&v487[144] = v88;
      *(_QWORD *)&v487[152] = v89;
      *(double *)&v487[160] = v342;
      sub_100070EDC((uint64_t)&v382, (uint64_t)v314, &qword_10064DED8);
      sub_100313810((uint64_t)v487);

      sub_100070EDC((uint64_t)&v382, (uint64_t)&v384, &qword_10064DED8);
      if (sub_1000A849C(v384.i64) != 1)
      {
        sub_100313924((uint64_t)&v382);
        v408 = v388;
        v409 = v389;
        v410 = v390;
        v339 = v392;
        v411 = v391;
        v404 = v384;
        v405 = v385;
        v406 = v386;
        v407 = v387;
        v263 = *v294;
        v403 = v294[1];
        v402 = v263;
        v401 = v293[2];
        v400 = *(int8x16_t *)v293;
        v364 = vextq_s8(v396, v396, 8uLL);
        *(int8x16_t *)v372 = vextq_s8(v394, v394, 8uLL);
        v343 = v397;
        v65 = v338;
        v95 = v350;
        v48 = v355;
        v134 = v365;
        v66 = v341;
        v132 = v367;
        v124 = v88;
        goto LABEL_38;
      }
      sub_100070EDC((uint64_t)&v382, (uint64_t)v398, &qword_10064DED8);
      v90 = v362;
      v95 = v350;
      v94 = v355;
      v111 = v365;
      v87 = v358;
      v108 = v121;
      v109 = v338;
      v110 = v314;
      v66 = v341;
      v97 = v367;
      v91 = v342;
      goto LABEL_29;
    }
    *(_QWORD *)v487 = v103;
    *(_QWORD *)&v487[8] = v99;
    *(_QWORD *)&v487[16] = v105;
    v107 = v365;
    *(_QWORD *)&v487[24] = v365;
    v372[0] = v103;
    v94 = v355;
    *(_QWORD *)&v487[32] = v355;
    v95 = v350;
    v487[40] = v350;
    v487[41] = v96;
    v487[42] = v74;
    v97 = v367;
    *(double *)&v487[48] = v367;
    v90 = v362;
    *(double *)&v487[56] = v362;
    *(double *)&v487[64] = v370;
    *(double *)&v487[72] = v371;
    *(double *)&v487[80] = v60;
    *(_QWORD *)&v487[88] = v369;
    *(_QWORD *)&v487[96] = v368;
    *(double *)&v487[104] = v373;
    *(double *)&v487[112] = v354;
    *(_QWORD *)&v487[120] = v353;
    v87 = v358;
    *(_QWORD *)&v487[128] = v358;
    v86 = v360;
    *(_QWORD *)&v487[136] = v360;
    *(_QWORD *)&v487[144] = v88;
    *(_QWORD *)&v487[152] = v89;
    v91 = v342;
    *(double *)&v487[160] = v342;
    v108 = v96;
    v109 = v338;
    v110 = v314;
    sub_100070EDC((uint64_t)v488, (uint64_t)v314, &qword_10064DED8);
    sub_100313810((uint64_t)v487);

    v111 = v107;
    sub_100070EDC((uint64_t)v488, (uint64_t)v398, &qword_10064DED8);
    v112 = v74;
    v66 = v341;
LABEL_30:
    *(_QWORD *)v487 = v109;
    *(_QWORD *)&v487[8] = v356;
    *(_QWORD *)&v487[16] = v66;
    *(_QWORD *)&v487[24] = v111;
    *(_QWORD *)&v487[32] = v94;
    v487[40] = v95;
    v487[41] = v108;
    v487[42] = v112;
    v123 = v307;
    *v307 = v412;
    *((_BYTE *)v123 + 4) = v413;
    *(double *)&v487[48] = v97;
    *(double *)&v487[56] = v90;
    *(double *)&v487[64] = v370;
    *(double *)&v487[72] = v371;
    *(double *)&v487[80] = v60;
    *(_QWORD *)&v487[88] = v369;
    *(_QWORD *)&v487[96] = v368;
    *(double *)&v487[104] = v373;
    *(double *)&v487[112] = v354;
    *(_QWORD *)&v487[120] = v353;
    *(_QWORD *)&v487[128] = v87;
    *(_QWORD *)&v487[136] = v86;
    v124 = v88;
    *(_QWORD *)&v487[144] = v88;
    *(_QWORD *)&v487[152] = v89;
    *(double *)&v487[160] = v91;
    sub_100070EDC((uint64_t)v398, (uint64_t)v110, &qword_10064DED8);
    sub_100313810((uint64_t)v487);
    sub_100313924((uint64_t)v398);
    sub_100313144(v508, (uint64_t)v469);
    v388 = v469[4];
    v389 = v469[5];
    v390 = v469[6];
    v391 = v470;
    v384 = (int8x16_t)v469[0];
    v385 = (int8x16_t)v469[1];
    v386 = v469[2];
    v387 = v469[3];
    v126 = v303[1];
    v382 = *v303;
    v125.i64[1] = v382.i64[1];
    v383 = v126;
    v126.i64[0] = v472[4];
    v125.i64[0] = v472[5];
    *(int8x16_t *)v372 = v125;
    v374 = *(int8x16_t *)v302;
    v375.i64[0] = *((_QWORD *)v302 + 2);
    v343 = v474;
    v339 = v471;
    v363 = v126;
    v364 = *(int8x16_t *)&v473[24];
    if ((v340 & 1) != 0)
    {
      v127 = v109;
      v128 = v66;
      sub_1001456B8((uint64_t)v469);
      v129 = v127;
      v130 = v128;
      v131 = sub_1001456B8((uint64_t)v469);
      if (qword_100640FC0 != -1)
        v131 = swift_once(&qword_100640FC0, sub_10031277C);
      v106 = v371;
      v132 = v367;
      if ((byte_10064E2D8 & 1) != 0)
      {
        sub_100313994((uint64_t)v487);
        sub_1001456E8((void **)v469);

        v408 = v388;
        v409 = v389;
        v410 = v390;
        v411 = v391;
        v404 = v384;
        v405 = v385;
        v406 = v386;
        v407 = v387;
        v403 = v383;
        v402 = v382;
        v400 = v374;
        v401 = v375.i64[0];
        v364 = vextq_s8(v364, v364, 8uLL);
        v133.i64[0] = (uint64_t)v372[0];
        v133.i64[1] = v363.i64[0];
        *(int8x16_t *)v372 = v133;
        v95 = v350;
        v48 = v355;
        v134 = v365;
        v66 = v341;
        v65 = v338;
        v122 = v356;
        v121 = v348;
        goto LABEL_38;
      }
      v136 = *(_QWORD *)(v304 + 24);
      __chkstk_darwin(v131);
      *(&v291 - 2) = (char *)v508;
      *(&v291 - 1) = (char *)v469;
      v137 = *(void (**)(uint64_t (*)(), char **, char *))(*(_QWORD *)v136 + 168);
      v138 = v129;
      v139 = v130;
      sub_1001456B8((uint64_t)v469);
      v137(sub_100313AC8, &v291 - 4, &type metadata for ()[8]);
      v121 = v348;

      sub_1001456E8((void **)v469);
      sub_100313994((uint64_t)v487);
      sub_1001456E8((void **)v469);

      v408 = v388;
      v409 = v389;
      v410 = v390;
      v411 = v391;
      v404 = v384;
      v405 = v385;
      v406 = v386;
      v407 = v387;
      v403 = v383;
      v402 = v382;
      v400 = v374;
      v401 = v375.i64[0];
      v364 = vextq_s8(v364, v364, 8uLL);
      v140.i64[0] = (uint64_t)v372[0];
      v140.i64[1] = v363.i64[0];
      *(int8x16_t *)v372 = v140;
      v95 = v350;
      v48 = v355;
      v134 = v365;
      v66 = v341;
      v65 = v338;
    }
    else
    {
      sub_1001456B8((uint64_t)v469);
      sub_100313994((uint64_t)v487);
      v408 = v388;
      v409 = v389;
      v410 = v390;
      v411 = v391;
      v404 = v384;
      v405 = v385;
      v406 = v386;
      v407 = v387;
      v403 = v383;
      v402 = v382;
      v400 = v374;
      v401 = v375.i64[0];
      v364 = vextq_s8(v364, v364, 8uLL);
      v135.i64[0] = (uint64_t)v372[0];
      v135.i64[1] = v363.i64[0];
      *(int8x16_t *)v372 = v135;
      v106 = v371;
      v65 = v109;
      v134 = v111;
      v132 = v367;
      v121 = v348;
      v48 = v355;
    }
    v122 = v356;
LABEL_38:
    memcpy(v487, v468, sizeof(v487));
    *(_QWORD *)v468 = v65;
    *(_QWORD *)&v468[8] = v122;
    *(_QWORD *)&v468[16] = v66;
    *(_QWORD *)&v468[24] = v134;
    *(_QWORD *)&v468[32] = v48;
    v468[40] = v95;
    v468[41] = v121;
    v141 = v359;
    v468[42] = v359;
    *(double *)&v468[48] = v132;
    v142 = v362;
    *(double *)&v468[56] = v362;
    v143 = v370;
    *(double *)&v468[64] = v370;
    *(double *)&v468[72] = v106;
    *(double *)&v468[80] = v60;
    v144 = v369;
    *(_QWORD *)&v468[88] = v369;
    v145 = v132;
    v146 = v368;
    *(_QWORD *)&v468[96] = v368;
    v147 = v373;
    *(double *)&v468[104] = v373;
    v148 = v409;
    v149 = v313;
    *((_OWORD *)v313 + 4) = v408;
    *((_OWORD *)v149 + 5) = v148;
    *((_OWORD *)v149 + 6) = v410;
    *((_QWORD *)v149 + 14) = v411;
    v150 = v405;
    *(int8x16_t *)v149 = v404;
    *((int8x16_t *)v149 + 1) = v150;
    v151 = v407;
    *((_OWORD *)v149 + 2) = v406;
    *((_OWORD *)v149 + 3) = v151;
    v152 = v121;
    v153 = (uint64_t)v339;
    *(_QWORD *)&v468[232] = v339;
    v154 = v403;
    v156 = v311;
    v155 = v312;
    *v312 = v402;
    v155[1] = v154;
    v154.i64[0] = (uint64_t)v372[1];
    v337 = v154;
    *(int8x16_t *)&v468[272] = vextq_s8(*(int8x16_t *)v372, *(int8x16_t *)v372, 8uLL);
    *((_QWORD *)v156 + 2) = v401;
    v154.i64[1] = v400.i64[1];
    *(int8x16_t *)v156 = v400;
    v154.i64[0] = v364.i64[1];
    v344 = v154;
    *(int8x16_t *)&v468[312] = vextq_s8(v364, v364, 8uLL);
    *(_QWORD *)&v468[328] = v343;
    *(_QWORD *)&v468[336] = v65;
    *(_QWORD *)&v468[344] = v122;
    *(_QWORD *)&v468[352] = v66;
    *(_QWORD *)&v468[360] = v134;
    *(_QWORD *)&v468[368] = v48;
    v468[376] = v95;
    v468[377] = v152;
    v468[378] = v141;
    v157 = v152;
    LODWORD(v155) = v412;
    v158 = v310;
    v310[4] = v413;
    *v158 = (_DWORD)v155;
    v367 = v145;
    *(double *)&v468[384] = v145;
    *(double *)&v468[392] = v142;
    *(double *)&v468[400] = v143;
    *(double *)&v468[408] = v106;
    *(double *)&v468[416] = v60;
    *(_QWORD *)&v468[424] = v144;
    *(_QWORD *)&v468[432] = v146;
    *(double *)&v468[440] = v147;
    *(double *)&v468[448] = v354;
    *(_QWORD *)&v468[456] = v353;
    *(_QWORD *)&v468[464] = v358;
    *(_QWORD *)&v468[472] = v360;
    v346 = v124;
    *(_QWORD *)&v468[480] = v124;
    *(_QWORD *)&v468[488] = v361;
    *(double *)&v468[496] = v342;
    sub_1002F53B0((uint64_t)v487);
    if (v153 >= v335)
    {
      v160 = v157;
      v67 = v106;
      v13 = v122;
      if (*(double *)v372 >= *(double *)v364.i64)
      {
        v161 = (uint64_t)v341;

        v436 = v408;
        v437 = v409;
        v438 = v410;
        v439 = v411;
        v432 = v404;
        v433 = v405;
        v434 = v406;
        v435 = v407;
        v431 = v403;
        v430 = v402;
        v428 = v400;
        v429 = v401;
        v440 = v412;
        v441 = v413;
        v47 = v336 + 1;
        v162 = v373;
        v29 = v339;
        v163 = v367;
        v164 = v361;
        a3 = v309;
        if (__OFADD__(v336, 1))
          break;
        v165 = v106;
        v357 = v65;
        v363.i64[0] = v161;
        v327 = v365;
        v328 = v13;
        v326 = v355;
        v325 = v350;
        v323 = v160;
        v321 = v359;
        v324 = v367;
        v15 = v362;
        v322 = v362;
        v16 = v370;
        v319 = v106;
        v320 = v370;
        v17 = v369;
        v315 = v369;
        v316 = v373;
        v317 = v368;
        v318 = v366;
        v345 = v342;
        v329 = v367;
        v330 = v373;
        v331 = v366;
        v332 = v106;
        goto LABEL_96;
      }
      v422 = v408;
      v423 = v409;
      v424 = v410;
      v425 = v411;
      v418 = v404;
      v419 = v405;
      v420 = v406;
      v421 = v407;
      v66 = v341;
      v305 = (uint64_t)v341;
      v306 = v65;
      v327 = v365;
      v328 = v122;
      v417 = v403;
      v416 = v402;
      v326 = v48;
      v325 = v95;
      v323 = v160;
      v321 = v359;
      v415 = v401;
      v80 = v367;
      v324 = v367;
      v322 = v362;
      v319 = v106;
      v320 = v370;
      v427 = v413;
      v159 = v369;
      v317 = v368;
      v318 = v60;
      v316 = v373;
      v426 = v412;
      v79 = 1;
      v329 = v367;
      v330 = v373;
      v331 = v60;
      v332 = v67;
      v414 = (__int128)v400;
      v29 = v339;
      a3 = v309;
    }
    else
    {
      v422 = v408;
      v423 = v409;
      v424 = v410;
      v425 = v411;
      v418 = v404;
      v419 = v405;
      v420 = v406;
      v421 = v407;
      v305 = (uint64_t)v66;
      v306 = v65;
      v327 = v134;
      v328 = v122;
      v417 = v403;
      v416 = v402;
      v326 = v48;
      v325 = v95;
      v323 = v157;
      v321 = v141;
      v415 = v401;
      v324 = v367;
      v322 = v142;
      v319 = v106;
      v320 = v143;
      v427 = v413;
      v317 = v146;
      v318 = v60;
      v316 = v147;
      v426 = v412;
      v79 = 1;
      v329 = v367;
      v330 = v147;
      v67 = v106;
      v331 = v60;
      v332 = v106;
      v414 = (__int128)v400;
      v29 = v339;
      v80 = v367;
      v159 = v144;
      a3 = v309;
    }
LABEL_47:
    v166 = v308 >= 1.0;
    v168 = *(double *)a3;
    v167 = a3[1];
    v169 = *((double *)a3 + 8);
    v170 = v65;
    v363.i64[0] = (uint64_t)v66;
    v171 = v80;
    if ((DOCGuardAssert(_:_:logOnlyIfDebugging:logOnlyIfUnitTesting:)(v166, sub_100310E8C, 0, 0, 0) & 1) != 0)
    {
      v172 = UIFloorToScale((v168 - (v373 + v373) - v299 * v366) / v308, v169);
      if (qword_100640E90 != -1)
        swift_once(&qword_100640E90, sub_1001FF4B0);
      if (v172 - v298 - v297 >= *(double *)&qword_100672A00)
        v173 = *(double *)&qword_100672A00;
      else
        v173 = v172 - v298 - v297;
      if (qword_100640E50 != -1)
        swift_once(&qword_100640E50, sub_1001FF41C);
      if (*(double *)&qword_1006729C0 > v173)
        v173 = *(double *)&qword_1006729C0;
      *(double *)&v174 = COERCE_DOUBLE(sub_1001FF54C(v173, 1.0));
      if ((v175 & 1) != 0)
        v171 = UIRoundToScale(v173, v169);
      else
        v171 = *(double *)&v174;
    }
    v333 = v79;
    v357 = v170;
    v176 = a3;
    v177 = v29;
    v178 = v347;
    v179 = static String._unconditionallyBridgeFromObjectiveC(_:)(v347);
    v181 = v180;
    v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(v178);
    v184 = v182;
    v367 = v171;
    if (v179 != v183)
      goto LABEL_63;
    if (v181 == v182)
    {
      v185 = v357;
      v186 = (id)v363.i64[0];

      swift_bridgeObjectRelease_n(v181, 2);
    }
    else
    {
LABEL_63:
      v187 = _stringCompareWithSmolCheck(_:_:expecting:)(v179, v181, v183, v182, 0);
      v188 = v357;
      v189 = (id)v363.i64[0];

      swift_bridgeObjectRelease(v181);
      swift_bridgeObjectRelease(v184);
      if ((v187 & 1) == 0)
      {

        v197 = v359;
        v198 = v373;
        v48 = (uint64_t)v357;
        v199 = v67;
        goto LABEL_75;
      }
    }
    v190 = v334;
    v191 = static String._unconditionallyBridgeFromObjectiveC(_:)(v334);
    v193 = v192;
    v195 = static String._unconditionallyBridgeFromObjectiveC(_:)(v190);
    v196 = v194;
    if (v191 == v195 && v193 == v194)
    {

      v48 = (uint64_t)v357;
      swift_bridgeObjectRelease_n(v193, 2);
      v197 = v359;
      v198 = v373;
      v199 = v67;
      if (v171 != v80)
        goto LABEL_75;
    }
    else
    {
      v200 = _stringCompareWithSmolCheck(_:_:expecting:)(v191, v193, v195, v194, 0);

      v201 = (uint64_t)v357;
      swift_bridgeObjectRelease(v193);
      v202 = v196;
      v48 = v201;
      swift_bridgeObjectRelease(v202);
      v197 = v359;
      v198 = v373;
      v199 = v67;
      if ((v200 & 1) == 0 || v171 != v80)
        goto LABEL_75;
    }
    if (v199 == v352 && v366 == v351)
    {
      v29 = v177;
      if (v198 == v349)
      {
        v315 = v159;
        v203 = (void *)v363.i64[0];

        v165 = v67;
        v162 = v373;
        v436 = v422;
        v437 = v423;
        v438 = v424;
        v439 = v425;
        v432 = v418;
        v433 = v419;
        v434 = v420;
        v435 = v421;
        v431 = v417;
        v430 = v416;
        v429 = v415;
        v428 = (int8x16_t)v414;
        v441 = v427;
        v357 = v306;
        v363.i64[0] = v305;
        v204 = v353;
        v345 = v342;
        v440 = v426;
        a3 = v176;
        v13 = v356;
        v205 = v333;
        v164 = v361;
        goto LABEL_94;
      }
    }
LABEL_75:
    v206 = v171;
    v207 = v167;
    v208 = v168;
    v209 = v176[2];
    v210 = v176[3];
    v211 = v176[4];
    v212 = v176[5];
    v489[0] = v48;
    v13 = v356;
    v489[1] = v356;
    v213 = (void *)v363.i64[0];
    v489[2] = v363.i64[0];
    v214 = v365;
    v489[3] = v365;
    v215 = v355;
    v489[4] = v355;
    v216 = v350;
    v490 = v350;
    v217 = v348;
    v491 = v348;
    v492 = v197;
    v493 = v206;
    v218 = v362;
    v494 = v362;
    v495 = v370;
    v496 = v199;
    v497 = v366;
    v498 = v369;
    v219 = v169;
    v220 = v368;
    v499 = v368;
    v500 = v198;
    v501 = v208;
    v502 = v207;
    v358 = v209;
    v503 = v209;
    v504 = v210;
    v345 = v219;
    v346 = v211;
    v505 = v211;
    v506 = v212;
    v507 = v219;
    sub_1002F54AC(v488);
    v360 = v210;
    v361 = v212;
    if ((v340 & 1) == 0)
    {
      *(_QWORD *)v487 = v48;
      *(_QWORD *)&v487[8] = v13;
      *(_QWORD *)&v487[16] = v213;
      *(_QWORD *)&v487[24] = v214;
      *(_QWORD *)&v487[32] = v215;
      v487[40] = v216;
      v487[41] = v217;
      v487[42] = v197;
      *(double *)&v487[48] = v206;
      *(double *)&v487[56] = v218;
      *(double *)&v487[64] = v370;
      *(double *)&v487[72] = v371;
      *(double *)&v487[80] = v366;
      *(_QWORD *)&v487[88] = v369;
      *(_QWORD *)&v487[96] = v220;
      *(double *)&v487[104] = v198;
      *(double *)&v487[112] = v208;
      *(_QWORD *)&v487[120] = v207;
      *(_QWORD *)&v487[128] = v358;
      *(_QWORD *)&v487[136] = v210;
      *(_QWORD *)&v487[144] = v346;
      *(_QWORD *)&v487[152] = v212;
      *(double *)&v487[160] = v345;
      v229 = v314;
      v230 = v213;
      sub_100070EDC((uint64_t)v488, (uint64_t)v314, &qword_10064DED8);
      v231 = (id)v48;
      v232 = v213;
      sub_100313810((uint64_t)v487);
      sub_100070EDC((uint64_t)v488, (uint64_t)v398, &qword_10064DED8);
      goto LABEL_83;
    }
    v221 = v346;
    v222 = qword_100640FC0;
    v223 = (id)v48;
    v224 = v213;
    v225 = v223;
    v226 = v224;
    v227 = v226;
    if (v222 != -1)
      v226 = (id)swift_once(&qword_100640FC0, sub_10031277C);
    v13 = v356;
    v228 = v371;
    if ((byte_10064E2D8 & 1) != 0)
    {
      *(_QWORD *)v487 = v225;
      *(_QWORD *)&v487[8] = v356;
      *(_QWORD *)&v487[16] = v227;
      *(_QWORD *)&v487[24] = v365;
      v215 = v355;
      *(_QWORD *)&v487[32] = v355;
      v216 = v350;
      v487[40] = v350;
      v217 = v348;
      v487[41] = v348;
      v197 = v359;
      v487[42] = v359;
      v206 = v367;
      *(double *)&v487[48] = v367;
      *(double *)&v487[56] = v218;
      *(double *)&v487[64] = v370;
      *(double *)&v487[72] = v371;
      *(double *)&v487[80] = v366;
      *(_QWORD *)&v487[88] = v369;
      v220 = v368;
      *(_QWORD *)&v487[96] = v368;
      v198 = v373;
      *(double *)&v487[104] = v373;
      *(double *)&v487[112] = v208;
      *(_QWORD *)&v487[120] = v207;
      *(_QWORD *)&v487[128] = v358;
      v210 = v360;
      *(_QWORD *)&v487[136] = v360;
      *(_QWORD *)&v487[144] = v221;
      v212 = v361;
      *(_QWORD *)&v487[152] = v361;
      *(double *)&v487[160] = v345;
      v229 = v314;
      sub_100070EDC((uint64_t)v488, (uint64_t)v314, &qword_10064DED8);
      sub_100313810((uint64_t)v487);

      sub_100070EDC((uint64_t)v488, (uint64_t)v398, &qword_10064DED8);
      v48 = (uint64_t)v357;
      v230 = (void *)v363.i64[0];
      goto LABEL_83;
    }
    v372[0] = &v291;
    v233 = *(_QWORD *)(v304 + 24);
    __chkstk_darwin(v226);
    *(&v291 - 2) = (char *)v489;
    v234 = v227;
    v236 = v235;
    v237 = v225;
    v238 = *(void (**)(_OWORD *__return_ptr, void **(*)@<X0>(uint64_t *@<X0>, void *@<X8>), char **, uint64_t))(*(_QWORD *)v233 + 160);
    v239 = sub_10006922C(&qword_10064DED8);
    v238(v398, sub_100313AA8, &v291 - 4, v239);
    v240 = v237;
    v241 = v236;
    sub_100070EDC((uint64_t)v398, (uint64_t)&v382, &qword_10064DED8);
    *(_QWORD *)v487 = v240;
    *(_QWORD *)&v487[8] = v13;
    *(_QWORD *)&v487[16] = v234;
    *(_QWORD *)&v487[24] = v236;
    *(_QWORD *)&v487[32] = v355;
    v487[40] = v350;
    v487[41] = v348;
    v487[42] = v359;
    *(double *)&v487[48] = v367;
    *(double *)&v487[56] = v218;
    *(double *)&v487[64] = v370;
    *(double *)&v487[72] = v228;
    *(double *)&v487[80] = v366;
    *(_QWORD *)&v487[88] = v369;
    *(_QWORD *)&v487[96] = v368;
    *(double *)&v487[104] = v373;
    *(double *)&v487[112] = v208;
    *(_QWORD *)&v487[120] = v207;
    *(_QWORD *)&v487[128] = v358;
    *(_QWORD *)&v487[136] = v360;
    *(_QWORD *)&v487[144] = v221;
    *(_QWORD *)&v487[152] = v361;
    *(double *)&v487[160] = v345;
    sub_100070EDC((uint64_t)&v382, (uint64_t)v314, &qword_10064DED8);
    sub_100313810((uint64_t)v487);

    sub_100070EDC((uint64_t)&v382, (uint64_t)&v384, &qword_10064DED8);
    if (sub_1000A849C(v384.i64) == 1)
    {
      sub_100070EDC((uint64_t)&v382, (uint64_t)v398, &qword_10064DED8);
      v220 = v368;
      v197 = v359;
      v217 = v348;
      v216 = v350;
      v215 = v355;
      v210 = v360;
      v229 = v314;
      v212 = v361;
      v198 = v373;
      v48 = (uint64_t)v357;
      v230 = (void *)v363.i64[0];
      v206 = v367;
LABEL_83:
      *(_QWORD *)v487 = v48;
      *(_QWORD *)&v487[8] = v13;
      *(_QWORD *)&v487[16] = v230;
      *(_QWORD *)&v487[24] = v365;
      *(_QWORD *)&v487[32] = v215;
      v487[40] = v216;
      v487[41] = v217;
      v487[42] = v197;
      v242 = v307;
      *v307 = v412;
      *((_BYTE *)v242 + 4) = v413;
      *(double *)&v487[48] = v206;
      *(double *)&v487[56] = v218;
      *(double *)&v487[64] = v370;
      *(double *)&v487[72] = v371;
      *(double *)&v487[80] = v366;
      *(_QWORD *)&v487[88] = v369;
      *(_QWORD *)&v487[96] = v220;
      *(double *)&v487[104] = v198;
      v243 = v208;
      *(double *)&v487[112] = v208;
      v353 = v207;
      *(_QWORD *)&v487[120] = v207;
      *(_QWORD *)&v487[128] = v358;
      *(_QWORD *)&v487[136] = v210;
      *(_QWORD *)&v487[144] = v346;
      *(_QWORD *)&v487[152] = v212;
      *(double *)&v487[160] = v345;
      sub_100070EDC((uint64_t)v398, (uint64_t)v229, &qword_10064DED8);
      sub_100313810((uint64_t)v487);
      sub_100313924((uint64_t)v398);
      sub_100313144(v489, (uint64_t)v475);
      v388 = v475[4];
      v389 = v475[5];
      v390 = v475[6];
      v244 = v477;
      v391 = v476;
      v384 = (int8x16_t)v475[0];
      v385 = (int8x16_t)v475[1];
      v386 = v475[2];
      v387 = v475[3];
      v245 = v301[1];
      v382 = *v301;
      v383 = v245;
      v337 = (int8x16_t)v478[2];
      v400 = *v300;
      v246.i64[1] = v400.i64[1];
      v401 = v300[1].i64[0];
      v246.i64[0] = v479[3];
      v344 = v246;
      v246.i64[0] = v479[4];
      *(int8x16_t *)v372 = v246;
      v343 = v479[5];
      v247 = (id)v48;
      v248 = v230;
      sub_1001456B8((uint64_t)v475);
      if ((v340 & 1) != 0)
      {
        v249 = v247;
        v250 = v248;
        v251 = sub_1001456B8((uint64_t)v475);
        if (qword_100640FC0 != -1)
          v251 = swift_once(&qword_100640FC0, sub_10031277C);
        v241 = v365;
        v228 = v371;
        if ((byte_10064E2D8 & 1) != 0)
        {
          sub_100313994((uint64_t)v487);
          sub_1001456E8((void **)v475);

          v378 = v388;
          v379 = v389;
          v380 = v390;
          v381 = v391;
          v374 = v384;
          v375 = v385;
          v376 = v386;
          v377 = v387;
          v405 = v383;
          v404 = v382;
          v402 = v400;
          v403.i64[0] = v401;
          v252.i64[0] = v344.i64[0];
          v252.i64[1] = (uint64_t)v372[0];
          v344 = v252;
          v253 = v353;
          v254 = v333;
          v218 = v362;
          v255 = v359;
        }
        else
        {
          v257 = *(_QWORD *)(v304 + 24);
          __chkstk_darwin(v251);
          *(&v291 - 2) = (char *)v489;
          *(&v291 - 1) = (char *)v475;
          v258 = *(void (**)(uint64_t (*)(), char **, char *))(*(_QWORD *)v257 + 168);
          v259 = v249;
          v339 = v244;
          v260 = v259;
          v261 = v250;
          sub_1001456B8((uint64_t)v475);
          v258(sub_100313AC8, &v291 - 4, v291);

          sub_1001456E8((void **)v475);
          sub_100313994((uint64_t)v487);
          sub_1001456E8((void **)v475);

          v244 = v339;
          v255 = v359;
          v378 = v388;
          v379 = v389;
          v380 = v390;
          v381 = v391;
          v374 = v384;
          v375 = v385;
          v376 = v386;
          v377 = v387;
          v405 = v383;
          v404 = v382;
          v402 = v400;
          v403.i64[0] = v401;
          v262.i64[0] = v344.i64[0];
          v262.i64[1] = (uint64_t)v372[0];
          v344 = v262;
          v253 = v353;
          v254 = v333;
          v218 = v362;
        }
        v13 = v356;
      }
      else
      {
        sub_100313994((uint64_t)v487);

        v378 = v388;
        v379 = v389;
        v380 = v390;
        v381 = v391;
        v374 = v384;
        v375 = v385;
        v376 = v386;
        v377 = v387;
        v405 = v383;
        v404 = v382;
        v402 = v400;
        v403.i64[0] = v401;
        v256.i64[0] = v344.i64[0];
        v256.i64[1] = (uint64_t)v372[0];
        v344 = v256;
        v241 = v365;
        v13 = v356;
        v228 = v371;
        v253 = v353;
        v254 = v333;
        v218 = v362;
        v255 = v359;
      }
      goto LABEL_93;
    }
    v264 = v240;
    v265 = v234;
    sub_100313924((uint64_t)&v382);

    v378 = v388;
    v379 = v389;
    v380 = v390;
    v244 = v392;
    v381 = v391;
    v374 = v384;
    v375 = v385;
    v376 = v386;
    v377 = v387;
    v266 = *v294;
    v405 = v294[1];
    v404 = v266;
    v337 = v394;
    v403.i64[0] = v293[2];
    v402 = *(int8x16_t *)v293;
    v344 = v396;
    v343 = v397;
    v255 = v359;
    v254 = v333;
    v243 = v208;
    v253 = v207;
LABEL_93:
    v205 = v254 + 1;
    memcpy(v487, v468, sizeof(v487));
    v267 = v357;
    *(_QWORD *)v468 = v357;
    *(_QWORD *)&v468[8] = v13;
    v268 = v363.i64[0];
    *(_QWORD *)&v468[16] = v363.i64[0];
    *(_QWORD *)&v468[24] = v241;
    v269 = v355;
    *(_QWORD *)&v468[32] = v355;
    v48 = v350;
    v468[40] = v350;
    v270 = v348;
    v468[41] = v348;
    v468[42] = v255;
    v271 = v367;
    *(double *)&v468[48] = v367;
    *(double *)&v468[56] = v218;
    v272 = v370;
    *(double *)&v468[64] = v370;
    *(double *)&v468[72] = v228;
    v273 = v366;
    *(double *)&v468[80] = v366;
    v274 = v369;
    *(_QWORD *)&v468[88] = v369;
    v275 = v218;
    v276 = v368;
    *(_QWORD *)&v468[96] = v368;
    v277 = v373;
    *(double *)&v468[104] = v373;
    v278 = v379;
    v279 = v313;
    *((_OWORD *)v313 + 4) = v378;
    *((_OWORD *)v279 + 5) = v278;
    *((_OWORD *)v279 + 6) = v380;
    *((_QWORD *)v279 + 14) = v381;
    v280 = v375;
    *(int8x16_t *)v279 = v374;
    *((int8x16_t *)v279 + 1) = v280;
    v281 = v377;
    *((_OWORD *)v279 + 2) = v376;
    *((_OWORD *)v279 + 3) = v281;
    *(_QWORD *)&v468[232] = v244;
    v282 = v405;
    v284 = v311;
    v283 = v312;
    *v312 = v404;
    v283[1] = v282;
    v282.i64[1] = v337.i64[1];
    *(int8x16_t *)&v468[272] = v337;
    v282.i64[0] = v337.i64[1];
    *(int8x16_t *)v372 = v282;
    *((_QWORD *)v284 + 2) = v403.i64[0];
    *(int8x16_t *)v284 = v402;
    v282.i64[1] = v344.i64[1];
    *(int8x16_t *)&v468[312] = v344;
    v282.i64[0] = v344.i64[1];
    v364 = v282;
    *(_QWORD *)&v468[328] = v343;
    *(_QWORD *)&v468[336] = v267;
    *(_QWORD *)&v468[344] = v13;
    *(_QWORD *)&v468[352] = v268;
    *(_QWORD *)&v468[360] = v365;
    *(_QWORD *)&v468[368] = v269;
    v468[376] = v48;
    v468[377] = v270;
    v468[378] = v255;
    LODWORD(v283) = v412;
    v285 = v310;
    v310[4] = v413;
    *v285 = (_DWORD)v283;
    *(double *)&v468[384] = v271;
    *(double *)&v468[392] = v275;
    *(double *)&v468[400] = v272;
    *(double *)&v468[408] = v371;
    *(double *)&v468[416] = v273;
    *(_QWORD *)&v468[424] = v274;
    *(_QWORD *)&v468[432] = v276;
    *(double *)&v468[440] = v277;
    v354 = v243;
    *(double *)&v468[448] = v243;
    v286 = v253;
    *(_QWORD *)&v468[456] = v253;
    *(_QWORD *)&v468[464] = v358;
    *(_QWORD *)&v468[472] = v360;
    *(_QWORD *)&v468[480] = v346;
    v164 = v361;
    *(_QWORD *)&v468[488] = v361;
    *(double *)&v468[496] = v345;
    sub_1002F53B0((uint64_t)v487);
    v162 = v277;
    v436 = v378;
    v437 = v379;
    v438 = v380;
    v439 = v381;
    v432 = v374;
    v433 = v375;
    v434 = v376;
    v435 = v377;
    v429 = v403.i64[0];
    v440 = v412;
    v327 = v365;
    v328 = v13;
    v326 = v269;
    v325 = v48;
    v323 = v270;
    v441 = v413;
    v321 = v255;
    v324 = v271;
    v322 = v362;
    v319 = v371;
    v320 = v272;
    v317 = v276;
    v318 = v273;
    v315 = v274;
    v316 = v277;
    v165 = v371;
    v431 = v405;
    v430 = v404;
    v329 = v271;
    v330 = v277;
    v331 = v273;
    v332 = v371;
    v428 = v402;
    v66 = v341;
    a3 = v309;
    v29 = v244;
    v65 = v338;
    v204 = v286;
LABEL_94:
    v47 = v336 + v205;
    if (__OFADD__(v336, v205))
      break;
    v353 = v204;
    v163 = v367;
    v17 = v369;
    v16 = v370;
    v15 = v362;
    if (!v205)
      goto LABEL_100;
LABEL_96:
    v367 = v163;
    v361 = v164;
    v535 = v436;
    v536 = v437;
    v537 = v438;
    v538 = v439;
    v531 = (__int128)v432;
    v532 = v433;
    v533 = v434;
    v534 = v435;
    v530 = v431;
    v529 = v430;
    v527 = (__int128)v428;
    v528 = v429;
    v44 = *(int8x16_t *)v372;
    v43 = v364;
    v45 = *(double *)v372 < *(double *)v364.i64;
    v539 = v440;
    v351 = v366;
    v352 = v165;
    v349 = v162;
    v540 = v441;
    v46 = (uint64_t)v29 < v335;
    v24 = v360;
    if ((uint64_t)v29 >= v335)
    {
      v351 = v366;
      v352 = v165;
      v349 = v162;
      if (*(double *)v372 >= *(double *)v364.i64)
        goto LABEL_4;
    }
  }
  __break(1u);
LABEL_112:
  v287 = swift_once(&qword_100640FC0, sub_10031277C);
LABEL_104:
  if (byte_10064E2D8 == 1)
  {
    sub_1002F53B0((uint64_t)v487);
    goto LABEL_106;
  }
  v289 = *(_QWORD *)(v304 + 24);
  __chkstk_darwin(v287);
  *(&v291 - 2) = (char *)v398;
  *(&v291 - 1) = (char *)v488;
  v290 = *(void (**)(void **(*)(_QWORD *), char **, char *))(*(_QWORD *)v289 + 168);
  sub_1001456B8((uint64_t)&v456);
  sub_1001456B8((uint64_t)&v442);
  v290(sub_100313808, &v291 - 4, &type metadata for ()[8]);
  sub_1001456E8((void **)&v456);
  sub_1001456E8((void **)&v442);
  sub_1002F53B0((uint64_t)v487);
  if ((v295 & 1) == 0)
    goto LABEL_107;
LABEL_108:

  return memcpy(v296, v468, 0x1F8uLL);
}

unint64_t sub_100310E8C()
{
  return 0xD00000000000003BLL;
}

double sub_100310EA8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  void (*v20)(double *__return_ptr, id *(*)@<X0>(id *@<X0>, uint64_t@<X8>), uint64_t *, uint64_t);
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  void (*v32)(char *);
  _QWORD *v33;
  id v34;
  id v35;
  void (*v36)(void);
  _QWORD *v37;
  void *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  id v44;
  id v45;
  id v46;
  double v47;
  double v48;
  id v49;
  __n128 v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  NSString *v56;
  NSString *v57;
  id v58;
  unint64_t v59;
  id v60;
  NSString v61;
  Class isa;
  const __CFAttributedString *v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  void *v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  id v76;
  double v77;
  double v78;
  double v79;
  double v80;
  uint64_t v81;
  char *v82;
  id v83;
  NSString v84;
  uint64_t v85;
  id v86;
  NSString v87;
  void *v88;
  double v89;
  double v90;
  id v91;
  id v92;
  double v93;
  double v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v99;
  _QWORD *v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  char *v105;
  char *v106;
  id v107;
  void *v108;
  uint64_t v109;
  id v110;
  id v111;
  id v112;
  __int128 v113;
  double v114;
  double v115;
  __int128 v116;
  __int128 v117;
  _OWORD v118[11];
  uint64_t v119;
  _QWORD v120[23];
  _OWORD v121[3];
  __int128 v122;
  __int128 v123;
  _OWORD v124[7];
  _BYTE v125[200];
  _OWORD v126[12];
  id v127;
  _BYTE v128[200];
  _BYTE v129[200];
  double v130;
  char v131;
  _QWORD v132[5];
  _QWORD v133[23];
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;

  v4 = v3;
  v7 = *(_OWORD *)(a3 + 144);
  v142 = *(_OWORD *)(a3 + 128);
  v143 = v7;
  v144 = *(_OWORD *)(a3 + 160);
  v145 = *(_QWORD *)(a3 + 176);
  v8 = *(_OWORD *)(a3 + 80);
  v138 = *(_OWORD *)(a3 + 64);
  v139 = v8;
  v9 = *(_OWORD *)(a3 + 112);
  v140 = *(_OWORD *)(a3 + 96);
  v141 = v9;
  v10 = *(_OWORD *)(a3 + 16);
  v134 = *(_OWORD *)a3;
  v135 = v10;
  v11 = *(_OWORD *)(a3 + 48);
  v136 = *(_OWORD *)(a3 + 32);
  v137 = v11;
  v12 = *(double *)(a1 + 112);
  v13 = *(void **)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(id *)a1;
  v16 = v13;
  v112 = a2;
  v17 = objc_msgSend(a2, "preferredContentSizeCategory");
  v18 = v17;
  *(double *)v132 = v12;
  v132[1] = v15;
  v132[2] = v16;
  v132[3] = v14;
  v132[4] = v17;
  if (qword_100640FC0 != -1)
    v17 = (id)swift_once(&qword_100640FC0, sub_10031277C);
  if ((byte_10064E2D8 & 1) != 0
    || (v19 = *(_QWORD *)(v4 + 24),
        __chkstk_darwin(v17),
        v100 = v132,
        v20 = *(void (**)(double *__return_ptr, id *(*)@<X0>(id *@<X0>, uint64_t@<X8>), uint64_t *, uint64_t))(*(_QWORD *)v19 + 160),
        v21 = sub_10006922C(&qword_10064E440),
        v20(&v130, sub_100312D14, &v99, v21),
        (v131 & 1) != 0))
  {
    v108 = v18;
    v109 = v4;
    v110 = v16;
    v111 = v15;
    v22 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    v23 = objc_allocWithZone((Class)type metadata accessor for DOCItemCollectionGridCell());
    v24 = v22;
    v26 = sub_100497280(v22, v25, 0.0, 0.0, 0.0, 0.0);
    v27 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DOCItemCollectionCellContent()), "init");
    v28 = objc_msgSend(objc_allocWithZone((Class)DOCAppearance), "init");
    v29 = *(void **)&v27[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_appearance];
    *(_QWORD *)&v27[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_appearance] = v28;
    v30 = v28;
    sub_1000722BC(v29);

    v118[8] = v142;
    v118[9] = v143;
    v118[10] = v144;
    v119 = v145;
    v118[4] = v138;
    v118[5] = v139;
    v118[6] = v140;
    v118[7] = v141;
    v118[0] = v134;
    v118[1] = v135;
    v118[2] = v136;
    v118[3] = v137;
    DOCSplitBrowserViewController.didCommitPreview(of:)(v118);
    v31 = (uint64_t)&v27[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_gridItemLayoutTraits];
    sub_100070EDC((uint64_t)&v27[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_gridItemLayoutTraits], (uint64_t)v133, (uint64_t *)&unk_100641300);
    sub_100070EDC(v31, (uint64_t)v120, (uint64_t *)&unk_100641300);
    sub_100070EDC((uint64_t)v118, v31, (uint64_t *)&unk_100641300);
    sub_100070B28(a3);
    sub_100070B28(a3);
    sub_1000716DC(v133, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100071748);
    sub_1000716DC(v120, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100071784);
    sub_100070B64(v133);
    sub_10002A0C4(a3);
    sub_1000716DC(v133, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100071784);
    v32 = *(void (**)(char *))((swift_isaMask & *v26) + 0x200);
    v33 = v26;
    v106 = v27;
    v32(v27);

    v107 = v24;
    v34 = objc_msgSend(v24, "widthAnchor");
    v35 = objc_msgSend(v34, "constraintEqualToConstant:", v12);

    objc_msgSend(v35, "setActive:", 1);
    v36 = *(void (**)(void))((swift_isaMask & *v33) + 0x338);
    v37 = v33;
    v36();

    v38 = *(void **)((char *)v37 + OBJC_IVAR____TtC5Files25DOCItemCollectionGridCell_gridTitleLabel);
    v39 = *(_QWORD *)(a3 + 40);
    v41 = a3;
    v40 = *(void **)a3;
    *(_QWORD *)&v104 = *(_QWORD *)(v41 + 8);
    v42 = (void *)objc_opt_self(UIColor);
    v43 = v38;
    v44 = v40;
    v45 = objc_msgSend(v42, "blackColor");
    v105 = (char *)v37;
    v46 = objc_msgSend(v37, "effectiveUserInterfaceLayoutDirection");
    objc_msgSend(v112, "displayScale");
    v48 = v47;
    v49 = v44;
    v50.n128_u64[0] = v39;
    v51 = UICeilToScale(v50, v48);
    v52 = sub_10006922C((uint64_t *)&unk_1006424D0);
    v53 = swift_allocObject(v52, 112, 7);
    *(_OWORD *)(v53 + 16) = xmmword_1004D4CE0;
    *(_QWORD *)(v53 + 32) = NSFontAttributeName;
    v54 = sub_10004F2F0(0, (unint64_t *)&unk_10064F630, UIFont_ptr);
    *(_QWORD *)(v53 + 40) = v49;
    *(_QWORD *)(v53 + 64) = v54;
    *(_QWORD *)(v53 + 72) = NSForegroundColorAttributeName;
    *(_QWORD *)(v53 + 104) = sub_10004F2F0(0, (unint64_t *)&qword_100644600, UIColor_ptr);
    *(_QWORD *)(v53 + 80) = v45;
    v55 = (double *)v49;
    v56 = NSFontAttributeName;
    v57 = NSForegroundColorAttributeName;
    v58 = v45;
    v59 = sub_100076434(v53);
    v60 = objc_allocWithZone((Class)NSAttributedString);
    v61 = String._bridgeToObjectiveC()();
    type metadata accessor for Key(0);
    sub_10005FB20();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v63 = (const __CFAttributedString *)objc_msgSend(v60, "initWithString:attributes:", v61, isa, swift_bridgeObjectRelease(v59).n128_f64[0]);

    v64 = sub_100052934(v63, v104, v51, 0.0, 0.0);
    v65 = sub_100051614(v64, v55, (uint64_t)v46, 0.0, 0.0, v48);
    v67 = v66;
    sub_100030BB4(v66, (_QWORD *)0x630A620A61, 0xE500000000000000, (uint64_t)v55, (uint64_t)&v113, v65);
    v68 = v114;
    v69 = v115;
    v103 = v117;
    v104 = v116;
    v102 = v113;

    v121[0] = v104;
    v121[1] = v103;
    v121[2] = v102;
    *(double *)&v122 = v68;
    *((double *)&v122 + 1) = v69;
    *(_QWORD *)&v123 = v63;
    *((_QWORD *)&v123 + 1) = v64;
    *(_OWORD *)((char *)&v124[5] + 8) = 0u;
    *(_OWORD *)((char *)&v124[4] + 8) = 0u;
    *(_OWORD *)((char *)&v124[3] + 8) = 0u;
    *(_OWORD *)((char *)&v124[2] + 8) = 0u;
    *(_OWORD *)((char *)&v124[1] + 8) = 0u;
    *(_OWORD *)((char *)v124 + 8) = 0u;
    *(_QWORD *)&v124[0] = v67;
    *((_QWORD *)&v124[6] + 1) = v46;
    *(_QWORD *)v125 = v55;
    *(_OWORD *)&v125[56] = v122;
    *(_OWORD *)&v125[40] = v102;
    *(_OWORD *)&v125[24] = v103;
    *(_OWORD *)&v125[8] = v104;
    *(_OWORD *)&v125[120] = v124[2];
    *(_OWORD *)&v125[104] = v124[1];
    *(_OWORD *)&v125[88] = v124[0];
    *(_OWORD *)&v125[72] = v123;
    *(_OWORD *)&v125[184] = v124[6];
    *(_OWORD *)&v125[168] = v124[5];
    *(_OWORD *)&v125[152] = v124[4];
    *(_OWORD *)&v125[136] = v124[3];
    v126[10] = *(_OWORD *)&v125[160];
    v126[11] = *(_OWORD *)&v125[176];
    v127 = v46;
    v126[6] = *(_OWORD *)&v125[96];
    v126[7] = *(_OWORD *)&v125[112];
    v126[9] = *(_OWORD *)&v125[144];
    v126[8] = *(_OWORD *)&v125[128];
    v126[2] = *(_OWORD *)&v125[32];
    v126[3] = *(_OWORD *)&v125[48];
    v126[4] = *(_OWORD *)&v125[64];
    v126[5] = *(_OWORD *)&v125[80];
    v126[0] = *(_OWORD *)v125;
    v126[1] = *(_OWORD *)&v125[16];
    DOCSplitBrowserViewController.didCommitPreview(of:)(v126);
    v70 = *(void **)&v43[OBJC_IVAR____TtC5Files12DOCFastLabel_textLayer];
    v71 = (uint64_t)v70
        + OBJC_IVAR____TtCC5Files12DOCFastLabelP33_7D1ECDF4F67D1CFA2DCB702D72CE29F114FastLabelLayer_labelInformation;
    sub_100070EDC((uint64_t)v70+ OBJC_IVAR____TtCC5Files12DOCFastLabelP33_7D1ECDF4F67D1CFA2DCB702D72CE29F114FastLabelLayer_labelInformation, (uint64_t)v128, (uint64_t *)&unk_100641310);
    sub_100070EDC((uint64_t)v126, v71, (uint64_t *)&unk_100641310);
    sub_1000B2740((uint64_t)v125);
    sub_1000B2740((uint64_t)v125);
    sub_1001BF860((uint64_t)v128);
    objc_msgSend(v70, "setNeedsDisplay");
    sub_100058CC0((uint64_t)v125);
    sub_100070EDC(v71, (uint64_t)v129, (uint64_t *)&unk_100641310);
    sub_100070EDC((uint64_t)v129, (uint64_t)&v130, (uint64_t *)&unk_100641310);
    if (sub_1000A849C((uint64_t *)&v130) != 1)
      objc_msgSend(v43, "setFont:", *(_QWORD *)&v130);
    sub_1000B2454((uint64_t)v121);
    objc_msgSend(v43, "bounds");
    v73 = v72;
    v75 = v74;
    v76 = objc_msgSend(v43, "contentScaleFactor");
    v78 = UIPointRoundToScale(v76, (v73 - v68) * 0.5, (v75 - v69) * 0.5, v77);
    v80 = v79;
    sub_1000B2398(v121);
    objc_msgSend(v70, "setFrame:", v78, v80, v68, v69);
    objc_msgSend(v43, "invalidateIntrinsicContentSize");
    sub_100058CC0((uint64_t)v125);

    v81 = OBJC_IVAR____TtC5Files25DOCItemCollectionGridCell_subtitleLabel;
    v82 = v105;
    v83 = *(id *)&v105[OBJC_IVAR____TtC5Files25DOCItemCollectionGridCell_subtitleLabel];
    v84 = String._bridgeToObjectiveC()();
    objc_msgSend(v83, "setText:", v84);

    v85 = OBJC_IVAR____TtC5Files25DOCItemCollectionGridCell_secondSubtitleLabel;
    v86 = *(id *)&v82[OBJC_IVAR____TtC5Files25DOCItemCollectionGridCell_secondSubtitleLabel];
    v87 = String._bridgeToObjectiveC()();
    objc_msgSend(v86, "setText:", v87);

    objc_msgSend(*(id *)&v82[v81], "invalidateIntrinsicContentSize");
    objc_msgSend(*(id *)&v82[v85], "invalidateIntrinsicContentSize");
    v88 = (void *)objc_opt_self(DOCSeparatorView);
    objc_msgSend(v88, "separatorThicknessForTraitCollection:", v112);
    v90 = v89;
    v91 = v107;
    v92 = objc_msgSend(v107, "systemLayoutSizeFittingSize:", UILayoutFittingCompressedSize.width, UILayoutFittingCompressedSize.height);
    v94 = v90 + v93;
    v95 = v110;
    v96 = v108;
    if (byte_10064E2D8 != 1)
    {
      v97 = *(_QWORD *)(v109 + 24);
      __chkstk_darwin(v92);
      v100 = v132;
      v101 = v94;
      (*(void (**)(id *(*)(uint64_t)))(*(_QWORD *)v97 + 168))(sub_1003137FC);
    }

  }
  else
  {
    v94 = v130;

  }
  return v94;
}

void **sub_1003118B8@<X0>(uint64_t *a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  char v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v20[14];

  v4 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    sub_1001456B8((uint64_t)a2);
    v6 = sub_1001407E0((uint64_t)a2);
    if ((v7 & 1) != 0)
    {
      v8 = (_OWORD *)(*(_QWORD *)(v4 + 56) + 224 * v6);
      v9 = v8[1];
      v20[0] = *v8;
      v20[1] = v9;
      v10 = v8[5];
      v12 = v8[2];
      v11 = v8[3];
      v20[4] = v8[4];
      v20[5] = v10;
      v20[2] = v12;
      v20[3] = v11;
      v13 = v8[6];
      v14 = v8[7];
      v15 = v8[9];
      v20[8] = v8[8];
      v20[9] = v15;
      v20[6] = v13;
      v20[7] = v14;
      v16 = v8[10];
      v17 = v8[11];
      v18 = v8[13];
      v20[12] = v8[12];
      v20[13] = v18;
      v20[10] = v16;
      v20[11] = v17;
      memmove(a3, v8, 0xE0uLL);
      DOCSplitBrowserViewController.didCommitPreview(of:)(a3);
      sub_1001456B8((uint64_t)v20);
      return sub_1001456E8(a2);
    }
    sub_1001456E8(a2);
  }
  sub_1002F54AC(v20);
  return (void **)sub_100070EDC((uint64_t)v20, (uint64_t)a3, &qword_10064DED8);
}

void **sub_100311998(_QWORD *a1, void **a2, _OWORD *a3)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v9;

  sub_1001456B8((uint64_t)a2);
  sub_1001456B8((uint64_t)a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  v9 = *a1;
  *a1 = 0x8000000000000000;
  sub_100357AEC(a3, (uint64_t)a2, isUniquelyReferenced_nonNull_native);
  v7 = *a1;
  *a1 = v9;
  swift_bridgeObjectRelease(v7);
  return sub_1001456E8(a2);
}

id *sub_100311A1C@<X0>(id *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  void *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  id v11;
  id v12;
  id v13;

  v4 = result[1];
  if (v4[2])
  {
    v6 = (void *)a2[1];
    v12 = (id)a2[2];
    v13 = v6;
    v11 = (id)a2[4];
    sub_10007C3B8(&v11);
    sub_10007C3B8(&v13);
    sub_10007C3B8(&v12);
    v7 = sub_100140788((uint64_t)a2);
    if ((v8 & 1) != 0)
      v9 = *(_QWORD *)(v4[7] + 8 * v7);
    else
      v9 = 0;
    v10 = v8 ^ 1;
    sub_10007C390(&v13);
    sub_10007C390(&v12);
    result = sub_10007C390(&v11);
  }
  else
  {
    v9 = 0;
    v10 = 1;
  }
  *(_QWORD *)a3 = v9;
  *(_BYTE *)(a3 + 8) = v10 & 1;
  return result;
}

id *sub_100311AD0(uint64_t a1, _QWORD *a2, double a3)
{
  void *v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v10;
  id v11;
  id v12;
  id v13;

  v6 = (void *)a2[1];
  v12 = (id)a2[2];
  v13 = v6;
  v11 = (id)a2[4];
  sub_10007C3B8(&v13);
  sub_10007C3B8(&v12);
  sub_10007C3B8(&v11);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + 8));
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0x8000000000000000;
  sub_100357CAC((uint64_t)a2, isUniquelyReferenced_nonNull_native, a3);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  swift_bridgeObjectRelease(v8);
  sub_10007C390(&v13);
  sub_10007C390(&v12);
  return sub_10007C390(&v11);
}

id *sub_100311B88(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 *v2;
  Swift::UInt64 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v18;
  id v19;
  id v20;

  v2 = v1;
  if ((*v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  v20 = (id)v2[1];
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v7 = v6;
  v8 = v20;
  String.hash(into:)(a1, v5, v7);
  swift_bridgeObjectRelease(v7);
  sub_10007C390(&v20);
  v19 = (id)v2[2];
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v11 = v10;
  v12 = v19;
  String.hash(into:)(a1, v9, v11);
  swift_bridgeObjectRelease(v11);
  sub_10007C390(&v19);
  Hasher._combine(_:)(v2[3]);
  v18 = (id)v2[4];
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v15 = v14;
  v16 = v18;
  String.hash(into:)(a1, v13, v15);
  swift_bridgeObjectRelease(v15);
  return sub_10007C390(&v18);
}

Swift::Int sub_100311C8C()
{
  __int128 *v0;
  __int128 v1;
  _QWORD v3[9];
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v1 = v0[1];
  v4 = *v0;
  v5 = v1;
  v6 = *((_QWORD *)v0 + 4);
  Hasher.init(_seed:)(v3, 0);
  sub_100311B88((uint64_t)v3);
  return Hasher._finalize()();
}

id *sub_100311CDC(uint64_t a1)
{
  return sub_100311B88(a1);
}

Swift::Int sub_100311D14(uint64_t a1)
{
  __int128 *v1;
  __int128 v2;
  _QWORD v4[9];
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v2 = v1[1];
  v5 = *v1;
  v6 = v2;
  v7 = *((_QWORD *)v1 + 4);
  Hasher.init(_seed:)(v4, a1);
  sub_100311B88((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t sub_100311D60(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_10031294C((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t sub_100311DA8()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for DOCGridLayout.LayoutCalculator()
{
  return objc_opt_self(_TtCV5Files13DOCGridLayoutP33_EC46DC84A51D0CD0E111D44B095D1ABD16LayoutCalculator);
}

void destroy for DOCGridLayout.LayoutCalculator.HeightDeterminingFactors(id *a1)
{

}

_QWORD *initializeWithCopy for DOCGridLayout.LayoutCalculator.HeightDeterminingFactors(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v5 = (void *)a2[2];
  v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  v6 = (void *)a2[4];
  a1[4] = v6;
  v7 = v3;
  v8 = v5;
  v9 = v6;
  return a1;
}

_QWORD *assignWithCopy for DOCGridLayout.LayoutCalculator.HeightDeterminingFactors(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  *a1 = *a2;
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  v7 = (void *)a2[2];
  v8 = (void *)a1[2];
  a1[2] = v7;
  v9 = v7;

  a1[3] = a2[3];
  v10 = (void *)a2[4];
  v11 = (void *)a1[4];
  a1[4] = v10;
  v12 = v10;

  return a1;
}

uint64_t assignWithTake for DOCGridLayout.LayoutCalculator.HeightDeterminingFactors(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;

  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;

  return a1;
}

ValueMetadata *type metadata accessor for DOCGridLayout.LayoutCalculator.HeightDeterminingFactors()
{
  return &type metadata for DOCGridLayout.LayoutCalculator.HeightDeterminingFactors;
}

void _s14descr1005E3D29O4SpecVwxx(id *a1)
{

}

uint64_t initializeWithCopy for DOCGridLayout.LayoutCalculator.CalculationVariables(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  id v9;
  id v10;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v9 = v3;
  v10 = v5;
  return a1;
}

uint64_t assignWithCopy for DOCGridLayout.LayoutCalculator.CalculationVariables(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(void **)(a2 + 16);
  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return a1;
}

__n128 initializeWithTake for DOCGridLayout.LayoutCalculator.CalculationVariables(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for DOCGridLayout.LayoutCalculator.CalculationVariables(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v8;
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for DOCGridLayout.LayoutCalculator.CalculationVariables(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 168))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCGridLayout.LayoutCalculator.CalculationVariables(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCGridLayout.LayoutCalculator.CalculationVariables()
{
  return &type metadata for DOCGridLayout.LayoutCalculator.CalculationVariables;
}

uint64_t initializeWithCopy for DOCGridLayout(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  id v10;
  id v11;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  v9 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v10 = v3;
  v11 = v5;
  return a1;
}

uint64_t assignWithCopy for DOCGridLayout(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(void **)(a2 + 16);
  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  return a1;
}

__n128 initializeWithTake for DOCGridLayout(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v10;
  return result;
}

uint64_t assignWithTake for DOCGridLayout(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v10;
  v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for DOCGridLayout(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 224))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCGridLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 224) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 224) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCGridLayout()
{
  return &type metadata for DOCGridLayout;
}

uint64_t destroy for _DOCBrowserHistoryDataSourceBase.RefreshContext(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *_s5Files32_DOCBrowserHistoryDataSourceBaseC14RefreshContextVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for _DOCBrowserHistoryDataSourceBase.RefreshContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for _DOCBrowserHistoryDataSourceBase.RefreshContext(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for DOCGridLayout.LayoutCalculator.State()
{
  return &type metadata for DOCGridLayout.LayoutCalculator.State;
}

unint64_t sub_1003126F0()
{
  unint64_t result;

  result = qword_10064E430;
  if (!qword_10064E430)
  {
    result = swift_getWitnessTable(&unk_1004E2348, &type metadata for DOCGridLayout.LayoutCalculator.CalculationVariables);
    atomic_store(result, (unint64_t *)&qword_10064E430);
  }
  return result;
}

unint64_t sub_100312738()
{
  unint64_t result;

  result = qword_10064E438;
  if (!qword_10064E438)
  {
    result = swift_getWitnessTable(&unk_1004E2370, &type metadata for DOCGridLayout.LayoutCalculator.HeightDeterminingFactors);
    atomic_store(result, (unint64_t *)&qword_10064E438);
  }
  return result;
}

void sub_10031277C()
{
  id v0;
  NSString v1;
  unsigned __int8 v2;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  byte_10064E2D8 = v2;
}

void sub_100312808(double a1, double a2)
{
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)&a1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)&a2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
}

BOOL sub_100312850(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BOOL8 result;
  _OWORD v13[7];
  _OWORD v14[7];

  v4 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  v14[5] = v4;
  v14[6] = *(_OWORD *)(a1 + 96);
  v5 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v6;
  v7 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v7;
  v8 = *(_OWORD *)(a2 + 32);
  v9 = *(_OWORD *)(a2 + 48);
  v10 = *(_OWORD *)(a2 + 96);
  v13[5] = *(_OWORD *)(a2 + 80);
  v13[6] = v10;
  v11 = *(_OWORD *)(a2 + 64);
  v13[3] = v9;
  v13[4] = v11;
  v13[2] = v8;
  if (!sub_100391780((uint64_t)v14, (uint64_t)v13)
    || *(double *)(a1 + 112) != *(double *)(a2 + 112)
    || *(double *)(a1 + 120) != *(double *)(a2 + 120))
  {
    return 0;
  }
  result = 0;
  if (*(double *)(a1 + 128) == *(double *)(a2 + 128)
    && *(double *)(a1 + 136) == *(double *)(a2 + 136)
    && *(double *)(a1 + 144) == *(double *)(a2 + 144)
    && *(double *)(a1 + 152) == *(double *)(a2 + 152))
  {
    return *(double *)(a1 + 160) == *(double *)(a2 + 160);
  }
  return result;
}

uint64_t sub_10031294C(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;

  if (*(double *)a1 != *(double *)a2)
    goto LABEL_17;
  v4 = *(void **)(a1 + 8);
  v34 = *(id *)(a2 + 8);
  v35 = v4;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  if (v5 == v8 && v7 == v9)
  {
    sub_10007C3B8(&v35);
    sub_10007C3B8(&v34);
    swift_bridgeObjectRelease_n(v7, 2);
    sub_10007C390(&v34);
    sub_10007C390(&v35);
  }
  else
  {
    v11 = v9;
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
    sub_10007C3B8(&v35);
    sub_10007C3B8(&v34);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v11);
    sub_10007C390(&v34);
    sub_10007C390(&v35);
    v13 = 0;
    if ((v12 & 1) == 0)
      return v13 & 1;
  }
  v14 = *(void **)(a1 + 16);
  v32 = *(id *)(a2 + 16);
  v33 = v14;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  v20 = v18;
  if (v15 == v19 && v17 == v18)
  {
    sub_10007C3B8(&v33);
    sub_10007C3B8(&v32);
    swift_bridgeObjectRelease_n(v17, 2);
    sub_10007C390(&v32);
    sub_10007C390(&v33);
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v19, v18, 0);
    sub_10007C3B8(&v33);
    sub_10007C3B8(&v32);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v20);
    sub_10007C390(&v32);
    sub_10007C390(&v33);
    v13 = 0;
    if ((v21 & 1) == 0)
      return v13 & 1;
  }
  if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
  {
LABEL_17:
    v13 = 0;
    return v13 & 1;
  }
  v22 = *(void **)(a1 + 32);
  v30 = *(id *)(a2 + 32);
  v31 = v22;
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v28 = v26;
  if (v23 == v27 && v25 == v26)
    v13 = 1;
  else
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v26, 0);
  sub_10007C3B8(&v31);
  sub_10007C3B8(&v30);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v28);
  sub_10007C390(&v30);
  sub_10007C390(&v31);
  return v13 & 1;
}

BOOL sub_100312BA4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BOOL8 result;
  _OWORD v13[7];
  _OWORD v14[7];

  v4 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  v14[5] = v4;
  v14[6] = *(_OWORD *)(a1 + 96);
  v5 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v6;
  v7 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v7;
  v8 = *(_OWORD *)(a2 + 32);
  v9 = *(_OWORD *)(a2 + 48);
  v10 = *(_OWORD *)(a2 + 96);
  v13[5] = *(_OWORD *)(a2 + 80);
  v13[6] = v10;
  v11 = *(_OWORD *)(a2 + 64);
  v13[3] = v9;
  v13[4] = v11;
  v13[2] = v8;
  if (!sub_100391780((uint64_t)v14, (uint64_t)v13)
    || *(double *)(a1 + 112) != *(double *)(a2 + 112)
    || *(_QWORD *)(a1 + 120) != *(_QWORD *)(a2 + 120)
    || *(double *)(a1 + 128) != *(double *)(a2 + 128))
  {
    return 0;
  }
  result = 0;
  if (*(double *)(a1 + 136) == *(double *)(a2 + 136)
    && *(double *)(a1 + 144) == *(double *)(a2 + 144)
    && *(double *)(a1 + 152) == *(double *)(a2 + 152))
  {
    return *(double *)(a1 + 160) == *(double *)(a2 + 160)
        && *(double *)(a1 + 168) == *(double *)(a2 + 168)
        && *(double *)(a1 + 176) == *(double *)(a2 + 176)
        && *(double *)(a1 + 184) == *(double *)(a2 + 184)
        && *(double *)(a1 + 192) == *(double *)(a2 + 192)
        && *(double *)(a1 + 200) == *(double *)(a2 + 200)
        && *(double *)(a1 + 208) == *(double *)(a2 + 208)
        && *(double *)(a1 + 216) == *(double *)(a2 + 216);
  }
  return result;
}

id *sub_100312D14@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100311A1C(a1, *(_QWORD **)(v2 + 16), a2);
}

uint64_t sub_100312D1C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  unint64_t v9;
  uint64_t v10;
  NSString v11;
  id v12;
  NSString v13;
  id v14;
  id v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = 0;
  v28 = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease(v28);
  v27 = 0xD000000000000016;
  v28 = 0x80000001005271F0;
  v8._countAndFlagsBits = a1;
  v8._object = a2;
  String.append(_:)(v8);
  v10 = v27;
  v9 = v28;
  if (DOCIsRunningUnitTests()())
  {
    v11 = String._bridgeToObjectiveC()();
    v12 = objc_allocWithZone((Class)NSException);
    swift_bridgeObjectRetain(v9);
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
    v14 = objc_msgSend(v12, "initWithName:reason:userInfo:", v11, v13, 0);

    objc_msgSend(v14, "raise");
  }
  v15 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v16 = String._bridgeToObjectiveC()();
  objc_msgSend(v15, "BOOLForKey:", v16);

  v18 = Logger.UI.unsafeMutableAddressor(v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v18, v4);
  v19 = swift_bridgeObjectRetain(v9);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v27 = v23;
    v25 = v4;
    *(_DWORD *)v22 = 136315138;
    swift_bridgeObjectRetain(v9);
    v26 = sub_1000544FC(v10, v9, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    swift_bridgeObjectRelease_n(v9, 3);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v25);
  }
  else
  {

    swift_bridgeObjectRelease_n(v9, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_10031302C(__int128 *a1, __int128 *a2)
{
  Swift::String v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  Swift::String v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;

  *(_QWORD *)&v13 = 0;
  *((_QWORD *)&v13 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(121);
  v20 = v13;
  v4._countAndFlagsBits = 0xD000000000000055;
  v4._object = (void *)0x8000000100527250;
  String.append(_:)(v4);
  v5 = a1[5];
  v17 = a1[4];
  v18 = v5;
  v19 = *((_QWORD *)a1 + 12);
  v6 = a1[1];
  v13 = *a1;
  v14 = v6;
  v7 = a1[3];
  v15 = a1[2];
  v16 = v7;
  _print_unlocked<A, B>(_:_:)(&v13, &v20, &_s14descr1005DD249O11EnvironmentVN, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v8._object = (void *)0x80000001005272B0;
  v8._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v8);
  v9 = a2[1];
  v13 = *a2;
  v14 = v9;
  v10 = a2[3];
  v15 = a2[2];
  v16 = v10;
  _print_unlocked<A, B>(_:_:)(&v13, &v20, &_s14descr1005E3D29O4SpecV13LayoutMetricsVN, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v11 = *((_QWORD *)&v20 + 1);
  sub_100312D1C(v20, *((void **)&v20 + 1));
  return swift_bridgeObjectRelease(v11);
}

void sub_100313144(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *((double *)a1 + 8);
  v4 = *((double *)a1 + 10);
  v5 = *((double *)a1 + 13);
  v6 = v4 + *((double *)a1 + 14) - (v5 + v5);
  v7 = *((double *)a1 + 6) + *((double *)a1 + 7) + *((double *)a1 + 7) + v3 + v3;
  v8 = v6 / (v7 + v4);
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v8 < 9.22337204e18)
  {
    v31 = v3 + v3;
    v32 = a1[7];
    v33 = a1[6];
    v34 = a1[8];
    v10 = *(double *)a1;
    v11 = a1[1];
    v12 = a1[2];
    v28 = *(_OWORD *)(a1 + 3);
    v13 = *((_BYTE *)a1 + 40);
    v14 = *((_BYTE *)a1 + 41);
    v15 = *((_BYTE *)a1 + 42);
    v16 = a1[9];
    v29 = a1[11];
    v30 = a1[12];
    v17 = (uint64_t)v8;
    if ((uint64_t)v8 <= 1)
      v18 = 1;
    else
      v18 = (uint64_t)v8;
    v19 = (double)v18;
    v20 = v6 - (v7 + v4) * (double)v18;
    v21 = 0.0;
    if (v20 < 0.0)
      v20 = 0.0;
    v22 = *((double *)a1 + 20);
    v23 = UIFloorToScale(v7 + v20 / v19, v22);
    v24 = v23;
    if (v17 < 2)
      goto LABEL_17;
    v21 = v4;
    if (v4 + v4 < *((double *)a1 + 19))
      goto LABEL_17;
    v25 = v4 + v23 * 0.2 - v5;
    if (v25 <= 0.0)
    {
      v21 = v4;
    }
    else
    {
      v26 = (double)(v18 - 1);
      v21 = fmax(UIRoundToScale(v4 - v25 / v26, v22), 2.0);
      v27 = v4 + v24 * 0.2 - v5 - (v4 - v21) * v26;
      if (v27 > 0.0)
      {
        v23 = UIRoundToScale(v24 - v27 / v19, v22);
        if (v7 > v23)
          v23 = v7;
        goto LABEL_17;
      }
    }
    v23 = v24;
LABEL_17:
    *(double *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v12;
    *(_OWORD *)(a2 + 24) = v28;
    *(_BYTE *)(a2 + 40) = v13;
    *(_BYTE *)(a2 + 41) = v14;
    *(_BYTE *)(a2 + 42) = v15;
    *(_QWORD *)(a2 + 48) = v33;
    *(_QWORD *)(a2 + 56) = v32;
    *(_QWORD *)(a2 + 64) = v34;
    *(_QWORD *)(a2 + 72) = v16;
    *(double *)(a2 + 80) = v4;
    *(_QWORD *)(a2 + 88) = v29;
    *(_QWORD *)(a2 + 96) = v30;
    *(double *)(a2 + 104) = v5;
    *(_QWORD *)(a2 + 112) = v33;
    *(_QWORD *)(a2 + 120) = v18;
    *(_QWORD *)(a2 + 128) = v29;
    *(double *)(a2 + 136) = v5;
    *(_QWORD *)(a2 + 144) = v30;
    *(double *)(a2 + 152) = v5;
    *(_QWORD *)(a2 + 160) = v16;
    *(double *)(a2 + 168) = v4;
    *(double *)(a2 + 176) = v24;
    *(_QWORD *)(a2 + 184) = v34;
    *(double *)(a2 + 192) = v24 - v31;
    *(_QWORD *)(a2 + 200) = v16;
    *(double *)(a2 + 208) = v21;
    *(double *)(a2 + 216) = v23;
    return;
  }
LABEL_20:
  __break(1u);
}

uint64_t sub_1003133A8(__int128 *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  Swift::String v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  Swift::String v23;
  void *object;
  Swift::String v25;
  Swift::String v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  void *v30;
  Swift::String v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  Swift::String v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  Swift::String v49;
  uint64_t v50;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[32];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

  v6 = sub_1002D58C4();
  v7 = a1[1];
  v81 = *a1;
  v82 = v7;
  v83 = a1[2];
  v8 = *((double *)a1 + 6);
  v9 = *((double *)a1 + 7);
  v10 = *((double *)a1 + 8);
  v11 = *((_QWORD *)a1 + 9);
  v12 = *((double *)a1 + 10);
  v80 = *(__int128 *)((char *)a1 + 88);
  v13 = *((double *)a1 + 13);
  v14 = ((double)v6 + -1.0) * v12 + (v9 + v9 + v8 + v10 + v10) * (double)v6 + v13 + v13 - *(double *)a3;
  *(_QWORD *)&v52 = 0;
  *((_QWORD *)&v52 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(536);
  v65 = v52;
  v15._countAndFlagsBits = 0xD00000000000004ELL;
  v15._object = (void *)0x8000000100526FE0;
  String.append(_:)(v15);
  v16 = *((_QWORD *)a1 + 29);
  v79 = *((_QWORD *)a1 + 28);
  v17 = a1[12];
  v76 = a1[11];
  v77 = v17;
  v78 = a1[13];
  v18 = a1[8];
  v72 = a1[7];
  v73 = v18;
  v19 = a1[10];
  v74 = a1[9];
  v75 = v19;
  v20 = a1[20];
  v70 = a1[19];
  v71 = v20;
  v21 = a1[18];
  v68 = a1[17];
  v69 = v21;
  v22 = a1[16];
  v66 = a1[15];
  v67 = v22;
  v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(object);
  v25._countAndFlagsBits = 0x202020202020200ALL;
  v25._object = (void *)0xEF3D6E696D202D20;
  String.append(_:)(v25);
  *(_QWORD *)&v52 = sub_1002D58C4();
  v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v27 = v26._object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v27);
  v28._countAndFlagsBits = 0x20646C756F772820;
  v28._object = (void *)0xEB00000000206562;
  String.append(_:)(v28);
  v29._countAndFlagsBits = Double.description.getter(v14);
  v30 = v29._object;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v30);
  v31._countAndFlagsBits = 0xD000000000000087;
  v31._object = (void *)0x8000000100527030;
  String.append(_:)(v31);
  v32 = a3[5];
  v56 = a3[4];
  *(_OWORD *)v57 = v32;
  *(_QWORD *)&v57[16] = *((_QWORD *)a3 + 12);
  v33 = a3[1];
  v52 = *a3;
  v53 = v33;
  v34 = a3[3];
  v54 = a3[2];
  v55 = v34;
  _print_unlocked<A, B>(_:_:)(&v52, &v65, &_s14descr1005DD249O11EnvironmentVN, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v35._object = (void *)0x80000001005270C0;
  v35._countAndFlagsBits = 0xD000000000000062;
  String.append(_:)(v35);
  v52 = v81;
  v53 = v82;
  v54 = v83;
  *(double *)&v55 = v8;
  *((double *)&v55 + 1) = v9;
  *(double *)&v56 = v10;
  *((_QWORD *)&v56 + 1) = v11;
  *(double *)v57 = v12;
  *(_OWORD *)&v57[8] = v80;
  *(double *)&v57[24] = v13;
  _print_unlocked<A, B>(_:_:)(&v52, &v65, &_s14descr1005E3D29O4SpecVN, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v36._countAndFlagsBits = 0xD000000000000015;
  v36._object = (void *)0x8000000100527130;
  String.append(_:)(v36);
  v56 = v76;
  *(_OWORD *)v57 = v77;
  *(_OWORD *)&v57[16] = v78;
  v52 = v72;
  v53 = v73;
  v54 = v74;
  v55 = v75;
  *(_QWORD *)&v58 = v79;
  *((_QWORD *)&v58 + 1) = v16;
  v63 = v70;
  v64 = v71;
  v61 = v68;
  v62 = v69;
  v59 = v66;
  v60 = v67;
  _print_unlocked<A, B>(_:_:)(&v52, &v65, &type metadata for DOCGridLayout, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v37._object = (void *)0x8000000100527150;
  v37._countAndFlagsBits = 0xD000000000000062;
  String.append(_:)(v37);
  v38 = a2[5];
  v56 = a2[4];
  *(_OWORD *)v57 = v38;
  *(_OWORD *)&v57[16] = a2[6];
  v39 = a2[1];
  v52 = *a2;
  v53 = v39;
  v40 = a2[3];
  v54 = a2[2];
  v55 = v40;
  _print_unlocked<A, B>(_:_:)(&v52, &v65, &_s14descr1005E3D29O4SpecVN, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v41._countAndFlagsBits = 0xD000000000000015;
  v41._object = (void *)0x8000000100527130;
  String.append(_:)(v41);
  v42 = a2[18];
  v61 = a2[17];
  v62 = v42;
  v43 = a2[20];
  v63 = a2[19];
  v64 = v43;
  v44 = a2[14];
  *(_OWORD *)&v57[16] = a2[13];
  v58 = v44;
  v45 = a2[16];
  v59 = a2[15];
  v60 = v45;
  v46 = a2[10];
  v54 = a2[9];
  v55 = v46;
  v47 = a2[12];
  v56 = a2[11];
  *(_OWORD *)v57 = v47;
  v48 = a2[8];
  v52 = a2[7];
  v53 = v48;
  _print_unlocked<A, B>(_:_:)(&v52, &v65, &type metadata for DOCGridLayout, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v49._countAndFlagsBits = 0xD00000000000002BLL;
  v49._object = (void *)0x80000001005271C0;
  String.append(_:)(v49);
  v50 = *((_QWORD *)&v65 + 1);
  sub_100312D1C(v65, *((void **)&v65 + 1));
  return swift_bridgeObjectRelease(v50);
}

id *sub_1003137FC(uint64_t a1)
{
  uint64_t v1;

  return sub_100311AD0(a1, *(_QWORD **)(v1 + 16), *(double *)(v1 + 24));
}

void **sub_100313808(_QWORD *a1)
{
  uint64_t v1;

  return sub_100311998(a1, *(void ***)(v1 + 16), *(_OWORD **)(v1 + 24));
}

uint64_t sub_100313810(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v7;
  void *v8;

  v2 = *(void **)(a1 + 16);
  v3 = *(void **)(a1 + 184);
  v7 = *(_QWORD *)(a1 + 176);
  v8 = *(void **)(a1 + 168);
  v4 = *(id *)a1;
  v5 = v2;
  sub_1002F5480(v8, v7, v3);
  return a1;
}

uint64_t sub_100313924(uint64_t a1)
{
  sub_1002F5324(*(void **)a1, *(_QWORD *)(a1 + 8), *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_100313994(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v5;
  void *v6;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 184);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(void **)(a1 + 168);

  sub_1002F5324(v6, v5, v3);
  return a1;
}

void **sub_100313AA8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;

  return sub_1003118B8(a1, *(void ***)(v2 + 16), a2);
}

ValueMetadata *type metadata accessor for DOCPeekedTrailingGridLayout()
{
  return &type metadata for DOCPeekedTrailingGridLayout;
}

id sub_100313B1C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  NSString v5;
  id result;
  void *v7;
  int v8;
  void *v9;
  char **v10;
  id v11;

  v1 = OBJC_IVAR____TtC5Files28DOCServiceInfoViewController_isInPopoverMode;
  if ((v0[OBJC_IVAR____TtC5Files28DOCServiceInfoViewController_isInPopoverMode] & 1) == 0)
  {
    v2 = objc_msgSend(v0, "popoverPresentationController");
    if (v2)
    {
      v3 = v2;
      v4 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      v5 = String._bridgeToObjectiveC()();
      objc_msgSend(v4, "postNotificationName:object:userInfo:", v5, v3, 0);

    }
  }
  result = objc_msgSend(v0, "view");
  if (result)
  {
    v7 = result;
    v8 = v0[v1];
    v9 = (void *)objc_opt_self(UIColor);
    v10 = &selRef_clearColor;
    if (!v8)
      v10 = &selRef_systemBackgroundColor;
    v11 = objc_msgSend(v9, *v10);
    objc_msgSend(v7, "setBackgroundColor:", v11);

    return objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC5Files28DOCServiceInfoViewController_infoViewController], "setIsInfoInPopoverMode:", v0[v1]);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100313D08()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  id result;
  void *v4;
  NSString v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  id v23;
  id v24;
  double v25;
  double v26;
  id v27;
  double v28;
  double v29;
  double v30;
  double v31;
  id v32;
  id v33;
  objc_super v34;
  objc_super v35;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v35.receiver = v0;
  v35.super_class = ObjectType;
  objc_msgSendSuper2(&v35, "viewDidLoad");
  result = objc_msgSend(v0, "view");
  if (!result)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v4 = result;
  v5 = objc_msgSend((id)objc_opt_self(DOCAXIdentifier), "itemInfoNavigationRoot");
  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v8 = v7;
    v5 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v6 = swift_bridgeObjectRelease(v8).n128_u64[0];
  }
  objc_msgSend(v4, "setAccessibilityIdentifier:", v5, v6);

  v9 = *(void **)&v1[OBJC_IVAR____TtC5Files28DOCServiceInfoViewController_infoNavigationController];
  objc_msgSend(v1, "addChildViewController:", v9);
  result = objc_msgSend(v1, "view");
  if (!result)
    goto LABEL_16;
  v10 = result;
  result = objc_msgSend(v9, "view");
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v11 = result;
  objc_msgSend(v10, "addSubview:", result);

  result = objc_msgSend(v9, "view");
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v12 = result;
  result = objc_msgSend(v1, "view");
  if (!result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = result;
  objc_msgSend(result, "bounds");
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;

  objc_msgSend(v12, "setFrame:", v15, v17, v19, v21);
  objc_msgSend(v9, "didMoveToParentViewController:", v1);
  result = objc_msgSend(v9, "view");
  if (!result)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  v22 = result;
  objc_msgSend(result, "setAutoresizingMask:", 18);

  v23 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC5Files28DOCServiceInfoViewController_infoViewController], "navigationItem");
  sub_10021D764();
  v24 = sub_100458778(2, (uint64_t)v1, (uint64_t)"doneButtonTapped:");
  objc_msgSend(v23, "setRightBarButtonItem:", v24);

  objc_msgSend(v1, "preferredContentSize");
  if (v26 == 0.0 && v25 == 0.0)
  {
    objc_msgSend(v9, "preferredContentSize");
    v27 = objc_msgSend(v1, "traitCollection");
    sub_100314900();
    v29 = v28;
    v31 = v30;

    v32 = objc_msgSend(v1, "traitCollection");
    v33 = objc_msgSend(v32, "userInterfaceIdiom");

    if (v33 == (id)6
      || (v34.receiver = v1, v34.super_class = ObjectType, objc_msgSendSuper2(&v34, "modalPresentationStyle") != (id)2))
    {
      objc_msgSend(v1, "setPreferredContentSize:", v29, v31);
    }
  }
  return sub_100313B1C();
}

id sub_1003140AC(void *a1, uint64_t a2)
{
  void *v2;
  objc_class *ObjectType;
  double v5;
  double v6;
  double v7;
  double v8;
  id v9;
  id v10;
  id result;
  objc_super v12;
  objc_super v13;

  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v13.receiver = v2;
  v13.super_class = ObjectType;
  objc_msgSendSuper2(&v13, "preferredContentSizeDidChangeForChildContentContainer:", a1);
  objc_msgSend(a1, "preferredContentSize");
  v6 = v5;
  v8 = v7;
  v9 = objc_msgSend(v2, "traitCollection");
  v10 = objc_msgSend(v9, "userInterfaceIdiom");

  if (v10 == (id)6)
    return objc_msgSend(v2, "setPreferredContentSize:", v6, v8);
  v12.receiver = v2;
  v12.super_class = ObjectType;
  result = objc_msgSendSuper2(&v12, "modalPresentationStyle");
  if (result != (id)2)
    return objc_msgSend(v2, "setPreferredContentSize:", v6, v8);
  return result;
}

void sub_1003141DC(uint64_t a1)
{
  unsigned __int8 *v1;
  id v3;
  id v4;
  int v5;
  int v6;
  objc_super v7;

  v7.receiver = v1;
  v7.super_class = (Class)swift_getObjectType(v1);
  objc_msgSendSuper2(&v7, "traitCollectionDidChange:", a1);
  v3 = objc_msgSend(v1, "traitCollection");
  v4 = objc_msgSend(v3, "_presentationSemanticContext");

  v5 = v4 == (id)3;
  v6 = v1[OBJC_IVAR____TtC5Files28DOCServiceInfoViewController_isInPopoverMode];
  v1[OBJC_IVAR____TtC5Files28DOCServiceInfoViewController_isInPopoverMode] = v5;
  if (v5 != v6)
    sub_100313B1C();
}

void sub_1003143CC(uint64_t a1, uint64_t a2)
{
  void *v2;
  objc_class *ObjectType;
  id v5;
  id v6;
  objc_super v7;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v8.receiver = v2;
  v8.super_class = ObjectType;
  objc_msgSendSuper2(&v8, "setModalPresentationStyle:", a1);
  v5 = objc_msgSend(v2, "traitCollection");
  v6 = objc_msgSend(v5, "userInterfaceIdiom");

  if (v6 != (id)6)
  {
    v7.receiver = v2;
    v7.super_class = ObjectType;
    if (objc_msgSendSuper2(&v7, "modalPresentationStyle") == (id)2)
      objc_msgSend(v2, "setPreferredContentSize:", 0.0, 0.0);
  }
}

void sub_1003144B4()
{
  uint64_t v0;

}

uint64_t type metadata accessor for DOCServiceInfoViewController()
{
  return objc_opt_self(_TtC5Files28DOCServiceInfoViewController);
}

id sub_100314790(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;
  _BYTE *v5;
  objc_class *ObjectType;
  id v11;
  id v12;
  char *v13;
  Class isa;
  id v15;
  id v16;
  id v17;
  objc_super v19;

  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType(v5);
  v5[OBJC_IVAR____TtC5Files28DOCServiceInfoViewController_isInPopoverMode] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC5Files28DOCServiceInfoViewController_configuration] = a1;
  v11 = objc_allocWithZone((Class)DOCItemInfoViewController);
  swift_unknownObjectRetain(a2);
  v12 = a1;
  v13 = v5;
  sub_10006922C((uint64_t *)&unk_1006424B0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(v11, "initWithNodes:configuration:actionReporting:", isa, v12, a2, swift_bridgeObjectRelease(a3).n128_f64[0]);

  swift_unknownObjectRelease(a2);
  *(_QWORD *)&v13[OBJC_IVAR____TtC5Files28DOCServiceInfoViewController_infoViewController] = v15;
  v16 = objc_msgSend(objc_allocWithZone((Class)UINavigationController), "initWithRootViewController:", v15);
  *(_QWORD *)&v13[OBJC_IVAR____TtC5Files28DOCServiceInfoViewController_infoNavigationController] = v16;
  objc_msgSend(v16, "_setBuiltinTransitionStyle:", 1);
  if ((a4 & 1) != 0)
  {
    v17 = v15;
    objc_msgSend(v17, "displayTagView");

  }
  v19.receiver = v13;
  v19.super_class = ObjectType;
  return objc_msgSendSuper2(&v19, "init");
}

uint64_t sub_100314900()
{
  void *v0;
  id v1;
  double v2;
  CGFloat v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double Width;
  id v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double Height;
  double v22[4];
  CGRect v23;
  CGRect v24;

  v0 = (void *)objc_opt_self(UIScreen);
  v1 = objc_msgSend(v0, "mainScreen");
  objc_msgSend(v1, "bounds");
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;

  v23.origin.x = v3;
  v23.origin.y = v5;
  v23.size.width = v7;
  v23.size.height = v9;
  Width = CGRectGetWidth(v23);
  v11 = objc_msgSend(v0, "mainScreen");
  objc_msgSend(v11, "bounds");
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;

  v24.origin.x = v13;
  v24.origin.y = v15;
  v24.size.width = v17;
  v24.size.height = v19;
  Height = CGRectGetHeight(v24);
  if (Height >= Width)
    Height = Width;
  v22[2] = Height * 0.666666667;
  return UITraitCollection.doc_preferredValidatedLayoutSizeCategory(_:)(sub_100314B0C, v22);
}

id sub_100314A5C(void *a1)
{
  unsigned __int8 *v1;
  id result;
  id v4;
  int v5;
  int v6;
  objc_super v7;

  v7.receiver = v1;
  v7.super_class = (Class)swift_getObjectType(v1);
  result = objc_msgSendSuper2(&v7, "modalPresentationStyle");
  if (a1 == (void *)-1)
    v4 = result;
  else
    v4 = a1;
  v5 = v4 == (id)7;
  v6 = v1[OBJC_IVAR____TtC5Files28DOCServiceInfoViewController_isInPopoverMode];
  v1[OBJC_IVAR____TtC5Files28DOCServiceInfoViewController_isInPopoverMode] = v5;
  if (v6 != v5)
    return sub_100313B1C();
  return result;
}

uint64_t sub_100314AC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100314AEC()
{
  return sub_10022304C();
}

BOOL sub_100314B0C(char a1)
{
  uint64_t v1;

  return dbl_1004E24B0[a1] < *(double *)(v1 + 16);
}

void _sSo29DOCSplitBrowserViewControllerC5FilesE9didSelect_2atySo19DOCConcreteLocationC_AGSgtF_0(void *a1)
{
  void *v1;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD aBlock[5];
  uint64_t v13;
  char v14[24];

  if (qword_100640E38 != -1)
    swift_once(&qword_100640E38, sub_10009870C);
  v3 = (void *)sub_10008B434((uint64_t)_swiftEmptyArrayStorage);
  swift_beginAccess(&off_100645FC0, v14, 1, 0);
  v4 = off_100645FC0;
  off_100645FC0 = v3;
  if (objc_msgSend(a1, "isFPV2", swift_bridgeObjectRelease(v4).n128_f64[0]))
  {
    v5 = objc_msgSend(v1, "fullDocumentManagerViewController");
    v6 = objc_msgSend(v5, "hierarchyController");

    sub_1001D4F4C(a1, a1, (int)objc_msgSend(v1, "isCollapsed"), 1, 0, 0, 0);
  }
  else
  {
    v6 = objc_msgSend(v1, "sourceObserver");
    v7 = swift_allocObject(&unk_1005DD0B0, 32, 7);
    *(_QWORD *)(v7 + 16) = a1;
    *(_QWORD *)(v7 + 24) = v1;
    aBlock[4] = sub_100316344;
    v13 = v7;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10002E508;
    aBlock[3] = &unk_1005DD0C8;
    v8 = _Block_copy(aBlock);
    v9 = v13;
    v10 = a1;
    v11 = v1;
    objc_msgSend(v6, "retrieveAllSourcesCompletionBlock:", v8, swift_release(v9).n128_f64[0]);
    _Block_release(v8);
  }

}

void DOCSplitBrowserViewController.didSelect(_:at:wasAlreadySelected:onlyRevealIfColumnMode:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  void *v4;
  id v9;

  v9 = objc_msgSend(v4, "fullDocumentManagerViewController");
  objc_msgSend(v9, "didSelectItem:atParentLocation:wasAlreadySelected:onlyRevealIfColumn:", a1, a2, a3 & 1, a4 & 1);

}

void sub_1003151B4(void *a1, uint64_t a2, void *a3, SEL *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a1;
  v8 = objc_msgSend(v7, "fullDocumentManagerViewController");
  objc_msgSend(v8, *a4, v6);

}

double sub_1003153B0(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Class v21;
  double result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Class isa;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  void *v47;
  char *v48;
  unint64_t v49;
  void *v50;
  char *v51;
  uint64_t v52;
  id v53;
  __objc2_prot *v54;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v43 - v12;
  v53 = objc_msgSend(v3, "fullDocumentManagerViewController", v11);
  v14 = objc_msgSend(v3, "fullDocumentManagerViewController");
  v15 = objc_msgSend(v14, "delegate");

  if (!v15)
  {

    return result;
  }
  v52 = a1;
  v54 = &OBJC_PROTOCOL___UIDocumentBrowserViewControllerPrivateDelegate;
  v16 = (void *)swift_dynamicCastObjCProtocolConditional(v15, 1);
  if (!v16)
  {
    if ((a2 & 1) != 0)
      goto LABEL_9;
LABEL_11:
    if ((objc_msgSend(v15, "respondsToSelector:", "documentBrowser:didPickDocumentsAtURLs:") & 1) != 0)
    {
      v38 = sub_10006922C((uint64_t *)&unk_100644550);
      v39 = *(unsigned __int8 *)(v7 + 80);
      v40 = (v39 + 32) & ~v39;
      v41 = swift_allocObject(v38, v40 + *(_QWORD *)(v7 + 72), v39 | 7);
      *(_OWORD *)(v41 + 16) = xmmword_1004D9670;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v41 + v40, v52, v6);
      swift_unknownObjectRetain(v15);
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v15, "documentBrowser:didPickDocumentsAtURLs:", v53, isa);

      swift_bridgeObjectRelease(v41);
      swift_unknownObjectRelease_n(v15, 2);

    }
    else
    {

      swift_unknownObjectRelease(v15);
    }
    goto LABEL_15;
  }
  swift_unknownObjectRetain(v15);
  if ((a2 & 1) == 0)
    goto LABEL_11;
  if (objc_msgSend(v16, "respondsToSelector:", "documentBrowser:didPickImportedURLs:"))
  {
    if ((objc_msgSend(v16, "respondsToSelector:", "documentBrowser:didPickImportedURLs:") & 1) != 0)
    {
      v17 = sub_10006922C((uint64_t *)&unk_100644550);
      v18 = *(unsigned __int8 *)(v7 + 80);
      v19 = (v18 + 32) & ~v18;
      v20 = swift_allocObject(v17, v19 + *(_QWORD *)(v7 + 72), v18 | 7);
      *(_OWORD *)(v20 + 16) = xmmword_1004D9670;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v20 + v19, v52, v6);
      swift_unknownObjectRetain(v16);
      v21 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v16, "documentBrowser:didPickImportedURLs:", v53, v21);
      swift_bridgeObjectRelease(v20);

      swift_unknownObjectRelease_n(v16, 2);
      swift_unknownObjectRelease(v15);

      return result;
    }

    swift_unknownObjectRelease(v16);
    v37 = v15;
    goto LABEL_16;
  }
LABEL_9:
  if ((objc_msgSend(v15, "respondsToSelector:", "documentBrowser:didPickDocumentsAtURLs:") & 1) == 0)
  {
    swift_unknownObjectRelease(v15);

LABEL_15:
    v37 = v16;
    goto LABEL_16;
  }
  v51 = (char *)objc_msgSend(v53, "documentManager");
  v46 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v46(v13, v52, v6);
  v23 = *(unsigned __int8 *)(v7 + 80);
  v50 = v16;
  v24 = (v23 + 16) & ~v23;
  v44 = v23 | 7;
  v45 = v8 + 7;
  v49 = (v8 + 7 + v24) & 0xFFFFFFFFFFFFFFF8;
  v48 = (char *)((v49 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = (unint64_t)(v48 + 15) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject(&unk_1005DD060, v25 + 8, v23 | 7);
  v27 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v27(v26 + v24, v13, v6);
  *(_QWORD *)(v26 + v49) = v3;
  *(_QWORD *)&v48[v26] = v15;
  *(_QWORD *)(v26 + v25) = v53;
  v28 = type metadata accessor for DOCHierarchyController(0);
  v48 = *(char **)&v51[OBJC_IVAR____TtC5Files18DOCDocumentManager_configuration];
  v49 = v28;
  v47 = *(void **)&v51[OBJC_IVAR____TtC5Files18DOCDocumentManager_sourceObserver];
  v46(v9, v52, v6);
  v29 = (v23 + 32) & ~v23;
  v30 = (v45 + v29) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v32 = swift_allocObject(&unk_1005DD088, v31 + 8, v44);
  *(_QWORD *)(v32 + 16) = sub_100315DDC;
  *(_QWORD *)(v32 + 24) = v26;
  v27(v32 + v29, v9, v6);
  v33 = v51;
  *(_QWORD *)(v32 + v30) = v51;
  *(_QWORD *)(v32 + v31) = 1;
  swift_unknownObjectRetain(v15);
  v34 = v3;
  v35 = v53;
  swift_retain();
  v36 = v33;
  sub_1001E44F4(v48, v47, 0, (uint64_t)sub_1003162B8, v32);
  swift_release(v26);

  swift_unknownObjectRelease(v15);
  swift_release(v32);
  v37 = v50;
LABEL_16:
  *(_QWORD *)&result = swift_unknownObjectRelease(v37).n128_u64[0];
  return result;
}

void sub_1003158A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  Swift::String v29;
  Swift::String_optional v30;
  Swift::String v31;
  void *object;
  void *v33;
  __n128 v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Class isa;
  uint64_t v47;
  id v48;
  Swift::String v49;

  v11 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v19 = *(id *)DOCLog.UI.unsafeMutableAddressor(v16);
    v20 = static os_log_type_t.error.getter(v19);
    v21 = sub_10006922C((uint64_t *)&unk_100644560);
    v22 = swift_allocObject(v21, 112, 7);
    *(_OWORD *)(v22 + 16) = xmmword_1004D4CE0;
    URL._bridgeToObjectiveC()((NSURL *)&off_1004D4000);
    v24 = v23;
    *(_QWORD *)(v22 + 56) = sub_10004F2F0(0, (unint64_t *)&qword_1006533E0, NSURL_ptr);
    *(_QWORD *)(v22 + 64) = sub_100083450((unint64_t *)&qword_100646B10, (unint64_t *)&qword_1006533E0, NSURL_ptr);
    *(_QWORD *)(v22 + 32) = v24;
    v25 = _convertErrorToNSError(_:)(a2);
    *(_QWORD *)(v22 + 96) = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
    *(_QWORD *)(v22 + 104) = sub_100083450((unint64_t *)&qword_1006448B0, (unint64_t *)&qword_100644570, NSError_ptr);
    *(_QWORD *)(v22 + 72) = v25;
    os_log(_:dso:log:type:_:)("Unable to import file (%@) picked from non-Open in Place provider. Error: %@", 76, 2, &_mh_execute_header, v19, v20, v22);

    swift_bridgeObjectRelease(v22);
    v27 = (id)_DocumentManagerBundle(v26);
    if (v27)
    {
      v28 = v27;
      v49._countAndFlagsBits = 0xD00000000000002BLL;
      v49._object = (void *)0x80000001005274C0;
      v29._object = (void *)0x80000001005274A0;
      v29._countAndFlagsBits = 0xD000000000000015;
      v30.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v30.value._object = (void *)0xEB00000000656C62;
      v31._countAndFlagsBits = 0;
      v31._object = (void *)0xE000000000000000;
      object = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, v30, (NSBundle)v28, v31, v49)._object;

      v33 = (void *)_convertErrorToNSError(_:)(a2);
      v48 = String._bridgeToObjectiveC()();
      v34 = swift_bridgeObjectRelease(object);
      DOCPresentAlertForErrorWithForceHandler(v33, v48, 0, 0, 0, a4, 0, 0, v34);

    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1002320B8(a1, (uint64_t)v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
    {
      v35 = sub_100157D6C((uint64_t)v13);
      v36 = *(id *)DOCLog.UI.unsafeMutableAddressor(v35);
      v37 = static os_log_type_t.error.getter(v36);
      v38 = sub_10006922C((uint64_t *)&unk_100644560);
      v39 = swift_allocObject(v38, 72, 7);
      *(_OWORD *)(v39 + 16) = xmmword_1004D9670;
      URL._bridgeToObjectiveC()((NSURL *)&unk_1004D9000);
      v41 = v40;
      *(_QWORD *)(v39 + 56) = sub_10004F2F0(0, (unint64_t *)&qword_1006533E0, NSURL_ptr);
      *(_QWORD *)(v39 + 64) = sub_100083450((unint64_t *)&qword_100646B10, (unint64_t *)&qword_1006533E0, NSURL_ptr);
      *(_QWORD *)(v39 + 32) = v41;
      os_log(_:dso:log:type:_:)("Unable to import file (%@) picked from non open in place provider.", 66, 2, &_mh_execute_header, v36, v37, v39);

      swift_bridgeObjectRelease(v39);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v13, v14);
      if (a5
        && (objc_msgSend(a5, "respondsToSelector:", "documentBrowser:didPickDocumentsAtURLs:") & 1) != 0)
      {
        v42 = sub_10006922C((uint64_t *)&unk_100644550);
        v43 = *(unsigned __int8 *)(v15 + 80);
        v44 = (v43 + 32) & ~v43;
        v45 = swift_allocObject(v42, v44 + *(_QWORD *)(v15 + 72), v43 | 7);
        *(_OWORD *)(v45 + 16) = xmmword_1004D9670;
        (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(v45 + v44, v18, v14);
        swift_unknownObjectRetain(a5);
        isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(a5, "documentBrowser:didPickDocumentsAtURLs:", a6, isa);
        swift_unknownObjectRelease(a5);
        swift_bridgeObjectRelease(v45);

      }
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    }
  }
}

uint64_t sub_100315D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_unknownObjectRelease(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v8 + 8, v5);
}

void sub_100315DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1003158A4(a1, a2, v2 + v6, *(_QWORD *)(v2 + v7), *(void **)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

void sub_100315E54(unint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  _QWORD aBlock[5];
  uint64_t v34;

  if (a2)
  {
    v5 = static os_log_type_t.error.getter(a1);
    v6 = sub_10006922C((uint64_t *)&unk_100644560);
    v7 = swift_allocObject(v6, 72, 7);
    *(_OWORD *)(v7 + 16) = xmmword_1004D9670;
    v8 = _convertErrorToNSError(_:)(a2);
    *(_QWORD *)(v7 + 56) = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
    *(_QWORD *)(v7 + 64) = sub_100083450((unint64_t *)&qword_1006448B0, (unint64_t *)&qword_100644570, NSError_ptr);
    *(_QWORD *)(v7 + 32) = v8;
    v9 = sub_10004F2F0(0, (unint64_t *)&qword_100646CD0, OS_os_log_ptr);
    v30 = (id)static OS_os_log.default.getter(v9);
    os_log(_:dso:log:type:_:)("Error retrieving enabled sources: %@", 36, 2, &_mh_execute_header, v30, v5, v7, v30);
  }
  else
  {
    v12 = a3;
    v13 = sub_10031634C(a1, v12);

    if (v13)
    {
      v15 = objc_opt_self(DOCPickerSource);
      v16 = swift_dynamicCastObjCClass(v13, v15);
      if (v16)
      {
        v17 = v16;
        v18 = swift_allocObject(&unk_1005DD100, 32, 7);
        *(_QWORD *)(v18 + 16) = v17;
        *(_QWORD *)(v18 + 24) = a4;
        aBlock[4] = sub_100316514;
        v34 = v18;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_10004A82C;
        aBlock[3] = &unk_1005DD118;
        v19 = _Block_copy(aBlock);
        v20 = v34;
        v21 = v13;
        v22 = a4;
        swift_release(v20);
        DOCRunInMainThread(v19);
        _Block_release(v19);

        return;
      }

    }
    v23 = static os_log_type_t.error.getter(v14);
    v24 = sub_10006922C((uint64_t *)&unk_100644560);
    v7 = swift_allocObject(v24, 72, 7);
    *(_OWORD *)(v7 + 16) = xmmword_1004D9670;
    v25 = objc_msgSend(v12, "sourceIdentifier");
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 64) = sub_10006A638();
    *(_QWORD *)(v7 + 32) = v26;
    *(_QWORD *)(v7 + 40) = v28;
    v29 = sub_10004F2F0(0, (unint64_t *)&qword_100646CD0, OS_os_log_ptr);
    v32 = (id)static OS_os_log.default.getter(v29);
    os_log(_:dso:log:type:_:)("No source matching identifier: %@", 33, 2, &_mh_execute_header, v32, v23, v7, v32);
  }
  swift_bridgeObjectRelease(v7);

}

void sub_100316104(void *a1, void *a2)
{
  id v3;
  id v4;
  objc_class *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  objc_super v10;

  v3 = a1;
  v4 = objc_msgSend(a2, "configuration");
  v5 = (objc_class *)type metadata accessor for DOCPickerViewController();
  v6 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v6[OBJC_IVAR____TtC5Files23DOCPickerViewController_placeholderViewController] = 0;
  v7 = &v6[OBJC_IVAR____TtC5Files23DOCPickerViewController_delegate];
  *((_QWORD *)v7 + 1) = 0;
  swift_unknownObjectWeakInit(v7);
  *(_QWORD *)&v6[OBJC_IVAR____TtC5Files23DOCPickerViewController_source] = v3;
  *(_QWORD *)&v6[OBJC_IVAR____TtC5Files23DOCPickerViewController_configuration] = v4;
  v10.receiver = v6;
  v10.super_class = v5;
  v8 = (char *)objc_msgSendSuper2(&v10, "initWithNibName:bundle:", 0, 0);
  v9 = &v8[OBJC_IVAR____TtC5Files23DOCPickerViewController_delegate];
  *((_QWORD *)v9 + 1) = &off_1005DD030;
  swift_unknownObjectWeakAssign(v9, a2);
  UIViewController.doc_configureForPresentingLargeContent(withPreferredStyle:)(UIModalPresentationFormSheet);
  objc_msgSend(a2, "presentViewController:animated:completion:", v8, 1, 0);

}

uint64_t sub_100316220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_1003162B8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10041BF14(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100316318()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100316344(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100315E54(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24));
}

void *sub_10031634C(unint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v2 = a1;
  if (a1 >> 62)
    goto LABEL_19;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v3)
  {
    v21 = v2;
    v22 = v2 & 0xC000000000000001;
    for (i = 4; ; ++i)
    {
      v5 = i - 4;
      if (!v22)
        break;
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v2);
      v7 = i - 3;
      if (__OFADD__(v5, 1))
        goto LABEL_18;
LABEL_9:
      v8 = v6;
      v9 = objc_msgSend(v6, "identifier");
      v10 = objc_msgSend(a2, "sourceIdentifier");
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v13 = v12;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      if (v11 == v14 && v13 == v15)
      {

        swift_bridgeObjectRelease_n(v13, 2);
LABEL_17:
        swift_bridgeObjectRelease(v21);
        return v8;
      }
      v17 = v15;
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 0);

      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v17);
      if ((v18 & 1) != 0)
        goto LABEL_17;

      v2 = v21;
      if (v7 == v3)
      {
        swift_bridgeObjectRelease(v21);
        return 0;
      }
    }
    v6 = *(id *)(v2 + 8 * i);
    v7 = i - 3;
    if (!__OFADD__(v5, 1))
      goto LABEL_9;
LABEL_18:
    __break(1u);
LABEL_19:
    if (v2 < 0)
      v20 = v2;
    else
      v20 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v20);
  }
  swift_bridgeObjectRelease(v2);
  return 0;
}

void sub_100316514()
{
  uint64_t v0;

  sub_100316104(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

void sub_100316528()
{
  void *v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void **v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void *v11;
  id (*v12)(void *);
  uint64_t v13;

  v0 = (void *)objc_opt_self(UIFontMetrics);
  v1 = objc_msgSend(v0, "defaultMetrics");
  v12 = sub_10031675C;
  v13 = 0;
  v8 = _NSConcreteStackBlock;
  v9 = 1107296256;
  v10 = sub_10031678C;
  v11 = &unk_1005DD148;
  v2 = _Block_copy(&v8);
  v3 = (void *)objc_opt_self(UITraitCollection);
  v4 = objc_msgSend(v3, "traitCollectionWithTraits:", v2);
  _Block_release(v2);
  swift_release(v13);
  if ((swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(v1, "scaledValueForValue:compatibleWithTraitCollection:", v4, 1.0);

    v5 = objc_msgSend(v0, "defaultMetrics");
    v12 = sub_100316774;
    v13 = 0;
    v8 = _NSConcreteStackBlock;
    v9 = 1107296256;
    v10 = sub_10031678C;
    v11 = &unk_1005DD170;
    v6 = _Block_copy(&v8);
    v7 = objc_msgSend(v3, "traitCollectionWithTraits:", v6);
    _Block_release(v6);
    swift_release(v13);
    if ((swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1) & 1) == 0)
    {
      objc_msgSend(v5, "scaledValueForValue:compatibleWithTraitCollection:", v7, 1.0);

      return;
    }
  }
  __break(1u);
}

id sub_10031675C(void *a1)
{
  return objc_msgSend(a1, "setPreferredContentSizeCategory:", UIContentSizeCategoryLarge);
}

id sub_100316774(void *a1)
{
  return objc_msgSend(a1, "setPreferredContentSizeCategory:", UIContentSizeCategoryAccessibilityExtraExtraExtraLarge);
}

uint64_t sub_10031678C(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a2);
  v3(a2);
  return swift_unknownObjectRelease(a2);
}

unint64_t UIUserInterfaceIdiom.description.getter(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  Swift::String v3;
  void *object;
  Swift::String v5;

  v1 = a1 + 1;
  result = 0x656E6F6870;
  switch(v1)
  {
    case 0:
      result = 0x6669636570736E75;
      break;
    case 1:
      return result;
    case 2:
      result = 6578544;
      break;
    case 3:
      result = 30324;
      break;
    case 4:
      result = 0x79616C70726163;
      break;
    case 6:
      result = 6513005;
      break;
    case 7:
      result = 0x6E6F69736976;
      break;
    default:
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease(0xE000000000000000);
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      v5._countAndFlagsBits = 41;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      result = 0xD000000000000015;
      break;
  }
  return result;
}

unint64_t sub_100316914()
{
  uint64_t *v0;

  return UIUserInterfaceIdiom.description.getter(*v0);
}

__n128 _s14descr1005DD249O11EnvironmentVwcp(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t _s14descr1005DD249O11EnvironmentVwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 88);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s14descr1005DD249O11EnvironmentVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_BYTE *)(result + 88) = a2 + 1;
  }
  return result;
}

ValueMetadata *_s14descr1005DD249O11EnvironmentVMa()
{
  return &_s14descr1005DD249O11EnvironmentVN;
}

uint64_t sub_100316A00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = sub_10006922C(&qword_1006438A0);
  v3[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100316A60, 0, 0);
}

uint64_t sub_100316A60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  static String._unconditionallyBridgeFromObjectiveC(_:)(DOCDefaultsSuiteName);
  v2 = v1;
  v3 = objc_allocWithZone((Class)NSUserDefaults);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "initWithSuiteName:", v4, swift_bridgeObjectRelease(v2).n128_f64[0]);

  if (v5)
  {
    objc_msgSend(v5, "setBool:forKey:", 0, DOCUserDefaultsKeyIsSharingFolderWithAdultFamilyMember);

  }
  v7 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v0 + 24);
  static TaskPriority.background.getter();
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 0, 1, v10);
  v11 = swift_allocObject(&unk_1005DD290, 24, 7);
  swift_weakInit(v11 + 16, v7);
  v12 = (_QWORD *)swift_allocObject(&unk_1005DD2B8, 56, 7);
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = v11;
  v12[5] = v9;
  v12[6] = v8;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v8);
  v13 = sub_100317AC0(v6, (uint64_t)&unk_10064E568, (uint64_t)v12);
  swift_release(v13);
  sub_10000CB4C(v6, &qword_1006438A0);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100316BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6[35] = a5;
  v6[36] = a6;
  v6[34] = a4;
  v7 = type metadata accessor for Logger(0);
  v6[37] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[38] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[39] = swift_task_alloc(v9);
  v6[40] = swift_task_alloc(v9);
  v10 = sub_10006922C(&qword_10064E570);
  v6[41] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[42] = swift_task_alloc(v11);
  v6[43] = swift_task_alloc(v11);
  v6[44] = swift_task_alloc(v11);
  v12 = type metadata accessor for URL(0);
  v6[45] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[46] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[47] = swift_task_alloc(v14);
  v6[48] = swift_task_alloc(v14);
  return swift_task_switch(sub_100316CC8, 0, 0);
}

uint64_t sub_100316CC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 272) + 16;
  swift_beginAccess(v1, v0 + 224, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 392) = Strong;
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = *(_QWORD *)(v0 + 280);
    if ((unint64_t)v4 >> 62)
      goto LABEL_19;
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v4 = swift_bridgeObjectRetain(v4);
    *(_QWORD *)(v0 + 400) = v5;
    if (v5)
    {
      do
      {
        v6 = 0;
        while (1)
        {
          v7 = *(_QWORD *)(v0 + 280);
          if ((v7 & 0xC000000000000001) != 0)
          {
            v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v7);
            v3 = (void *)v4;
          }
          else
          {
            if (v6 >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_18;
            v3 = *(void **)(v7 + 8 * v6 + 32);
            v4 = swift_unknownObjectRetain(v3);
          }
          *(_QWORD *)(v0 + 408) = v3;
          *(_QWORD *)(v0 + 416) = v6 + 1;
          if (__OFADD__(v6, 1))
            break;
          if (objc_msgSend(v3, "isFolder")
            && (objc_msgSend(v3, "isSharedByCurrentUser") & 1) != 0)
          {
            v8 = v0 + 80;
            *(_QWORD *)(v0 + 120) = *(_QWORD *)(v0 + 376);
            *(_QWORD *)(v0 + 80) = v0;
            *(_QWORD *)(v0 + 88) = sub_100316EF0;
            v9 = swift_continuation_init(v0 + 80, 1);
            *(_QWORD *)(v0 + 144) = _NSConcreteStackBlock;
            v10 = (_QWORD *)(v0 + 144);
            v10[1] = 0x40000000;
            v10[2] = sub_10012D8FC;
            v10[3] = &unk_1005DD2D0;
            v10[4] = v9;
            objc_msgSend(v3, "fetchURL:", v10);
            return swift_continuation_await(v8);
          }
          swift_unknownObjectRelease(v3);
          v6 = *(_QWORD *)(v0 + 416);
          if (v6 == *(_QWORD *)(v0 + 400))
          {
            v3 = *(void **)(v0 + 392);
            goto LABEL_15;
          }
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        if (v4 < 0)
          v18 = v4;
        else
          v18 = v4 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v4);
        v4 = _CocoaArrayWrapper.endIndex.getter(v18);
        *(_QWORD *)(v0 + 400) = v4;
      }
      while (v4);
    }
LABEL_15:
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
    swift_release(v3);
  }
  v12 = *(_QWORD *)(v0 + 376);
  v14 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 352);
  v15 = *(_QWORD *)(v0 + 336);
  v17 = *(_QWORD *)(v0 + 312);
  v16 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 384));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100316EF0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 112);
  *(_QWORD *)(*v0 + 424) = v2;
  if (v2)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 280));
    v3 = sub_100317858;
  }
  else
  {
    v3 = sub_100316F58;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100316F58()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  void *v8;
  NSURL *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = v0 + 2;
  v3 = v1[47];
  v4 = v1[48];
  v5 = v1[45];
  v6 = v1[43];
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1[46] + 32);
  v1[54] = v7;
  v7(v4, v3, v5);
  v8 = (void *)objc_opt_self(CSCloudSharing);
  URL._bridgeToObjectiveC()(v9);
  v11 = v10;
  v1[55] = v10;
  v1[7] = v6;
  v1[2] = v1;
  v1[3] = sub_10031702C;
  v12 = swift_continuation_init(v2, 1);
  v1[23] = _NSConcreteStackBlock;
  v1 += 23;
  v1[1] = 0x40000000;
  v1[2] = sub_1003179C0;
  v1[3] = &unk_1005DD2E8;
  v1[4] = v12;
  objc_msgSend(v8, "existingShareForFileOrFolderURL:completionHandler:", v11, v1);
  return swift_continuation_await(v2);
}

uint64_t sub_10031702C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 448) = v2;
  if (v2)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 280));
    v3 = sub_100317900;
  }
  else
  {
    *(_DWORD *)(v1 + 496) = *(_DWORD *)(*(_QWORD *)(v1 + 328) + 48);
    v3 = sub_1003170A0;
  }
  return swift_task_switch(v3, 0, 0);
}

void sub_1003170A0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  BOOL v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;

  v1 = *(int *)(v0 + 496);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 432);
  v2 = *(void **)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 352);
  v9 = *(_QWORD *)(v0 + 328);
  v8 = *(_QWORD *)(v0 + 336);
  v3(v8, v6, v4);
  v10 = *(void **)(v6 + v1);
  *(_QWORD *)(v0 + 456) = v10;
  v11 = *(int *)(v9 + 48);
  v3(v7, v8, v4);
  *(_QWORD *)(v7 + v11) = v10;
  v12 = v10;

  v13 = *(int *)(v9 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, v7, v4);
  *(_QWORD *)(v8 + v13) = v12;
  v14 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(_QWORD *)(v0 + 464) = v14;
  v14(v8, v4);
  v15 = objc_msgSend((id)v12, "participants");
  v16 = sub_100317E60();
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);
  *(_QWORD *)(v0 + 472) = v17;

  if ((unint64_t)v17 >> 62)
    goto LABEL_36;
  v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v18)
    goto LABEL_3;
  do
  {
LABEL_19:
    v36 = *(_QWORD *)(v0 + 320);
    v37 = *(_QWORD *)(v0 + 296);
    v38 = *(_QWORD *)(v0 + 304);
    swift_bridgeObjectRelease(v17);
    v40 = Logger.DocumentManager.unsafeMutableAddressor(v39);
    v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v36, v40, v37);
    v17 = Logger.logObject.getter(v41);
    v42 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled((os_log_t)v17, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v17, v42, "Files Family Tip No shared folder with family member found", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }
    v44 = *(_QWORD *)(v0 + 384);
    v46 = *(_QWORD *)(v0 + 352);
    v45 = *(_QWORD *)(v0 + 360);
    v47 = *(_QWORD *)(v0 + 320);
    v48 = *(_QWORD *)(v0 + 296);
    v49 = *(_QWORD *)(v0 + 304);
    swift_unknownObjectRelease(*(_QWORD *)(v0 + 408));

    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
    sub_10000CB4C(v46, &qword_10064E570);
    v14(v44, v45);
    v12 = *(_QWORD *)(v0 + 416);
    if (v12 == *(_QWORD *)(v0 + 400))
    {
LABEL_22:
      v50 = *(_QWORD *)(v0 + 392);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
      swift_release(v50);
      v51 = *(_QWORD *)(v0 + 376);
      v53 = *(_QWORD *)(v0 + 344);
      v52 = *(_QWORD *)(v0 + 352);
      v54 = *(_QWORD *)(v0 + 336);
      v56 = *(_QWORD *)(v0 + 312);
      v55 = *(_QWORD *)(v0 + 320);
      swift_task_dealloc(*(_QWORD *)(v0 + 384));
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      (*(void (**)(void))(v0 + 8))();
      return;
    }
    while (1)
    {
      v57 = *(_QWORD *)(v0 + 280);
      if ((v57 & 0xC000000000000001) != 0)
      {
        v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v57);
      }
      else
      {
        if (v12 >= *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_35;
        v17 = *(_QWORD *)(v57 + 8 * v12 + 32);
        swift_unknownObjectRetain(v17);
      }
      *(_QWORD *)(v0 + 408) = v17;
      *(_QWORD *)(v0 + 416) = v12 + 1;
      if (__OFADD__(v12, 1))
        break;
      if (objc_msgSend((id)v17, "isFolder")
        && (objc_msgSend((id)v17, "isSharedByCurrentUser") & 1) != 0)
      {
        v58 = v0 + 80;
        *(_QWORD *)(v0 + 120) = *(_QWORD *)(v0 + 376);
        *(_QWORD *)(v0 + 80) = v0;
        *(_QWORD *)(v0 + 88) = sub_100316EF0;
        v59 = swift_continuation_init(v0 + 80, 1);
        *(_QWORD *)(v0 + 144) = _NSConcreteStackBlock;
        v60 = (_QWORD *)(v0 + 144);
        v60[1] = 0x40000000;
        v60[2] = sub_10012D8FC;
        v60[3] = &unk_1005DD2D0;
        v60[4] = v59;
        objc_msgSend((id)v17, "fetchURL:", v60);
        swift_continuation_await(v58);
        return;
      }
      swift_unknownObjectRelease(v17);
      v12 = *(_QWORD *)(v0 + 416);
      if (v12 == *(_QWORD *)(v0 + 400))
        goto LABEL_22;
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    if (v17 < 0)
      v61 = v17;
    else
      v61 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
    v18 = _CocoaArrayWrapper.endIndex.getter(v61);
    swift_bridgeObjectRelease(v17);
  }
  while (!v18);
LABEL_3:
  if ((v17 & 0xC000000000000001) != 0)
    goto LABEL_42;
  if (!*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    return;
  }
  v19 = *(id *)(v17 + 32);
LABEL_6:
  v20 = v19;
  sub_100317E9C(v19, *(_QWORD *)(v0 + 288));
  if ((v21 & 1) == 0)
  {

    if (v18 == 1)
      goto LABEL_19;
    v30 = 5;
    while (1)
    {
      v31 = v30 - 4;
      if ((v17 & 0xC000000000000001) != 0)
      {
        v32 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v30 - 4, v17);
      }
      else
      {
        if (v31 >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_42:
          v19 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v17);
          goto LABEL_6;
        }
        v32 = *(id *)(v17 + 8 * v30);
      }
      v20 = v32;
      v33 = __OFADD__(v31, 1);
      v34 = v30 - 3;
      if (v33)
        goto LABEL_34;
      sub_100317E9C(v32, *(_QWORD *)(v0 + 288));
      if ((v35 & 1) != 0)
        break;

      ++v30;
      if (v34 == v18)
        goto LABEL_19;
    }
  }
  *(_QWORD *)(v0 + 480) = v20;
  static String._unconditionallyBridgeFromObjectiveC(_:)(DOCDefaultsSuiteName);
  v23 = v22;
  v24 = objc_allocWithZone((Class)NSUserDefaults);
  v25 = String._bridgeToObjectiveC()();
  v26 = objc_msgSend(v24, "initWithSuiteName:", v25, swift_bridgeObjectRelease(v23).n128_f64[0]);

  if (v26)
  {
    objc_msgSend(v26, "setBool:forKey:", 1, DOCUserDefaultsKeyIsSharingFolderWithAdultFamilyMember);

  }
  v27 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 488) = static MainActor.shared.getter(v27);
  v28 = dispatch thunk of Actor.unownedExecutor.getter(v27, &protocol witness table for MainActor);
  swift_task_switch(sub_1003175F4, v28, v29);
}

uint64_t sub_1003175F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  swift_release(*(_QWORD *)(v0 + 488));
  if (qword_1006410F0 != -1)
    swift_once(&qword_1006410F0, sub_1000B10A4);
  v1 = *(_QWORD *)(v0 + 472);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = sub_10006922C(&qword_100646A10);
  v4 = sub_10007E788(v3, (uint64_t)qword_100652718);
  *(_BYTE *)(v0 + 500) = 1;
  v5 = swift_beginAccess(v4, v0 + 248, 33, 0);
  Tips.Parameter.wrappedValue.setter(v0 + 500, v3, v5);
  swift_endAccess(v0 + 248);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_1003176D8, 0, 0);
}

uint64_t sub_1003176D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(v1 + 304);
  v2 = *(_QWORD *)(v1 + 312);
  v4 = *(_QWORD *)(v1 + 296);
  v5 = Logger.DocumentManager.unsafeMutableAddressor(a1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Files Family Tip Found shared folder with family member", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }
  v10 = *(void **)(v1 + 456);
  v11 = *(_QWORD *)(v1 + 408);
  v12 = *(_QWORD *)(v1 + 392);
  v25 = *(_QWORD *)(v1 + 384);
  v26 = *(void (**)(uint64_t, uint64_t))(v1 + 464);
  v14 = *(_QWORD *)(v1 + 352);
  v13 = *(_QWORD *)(v1 + 360);
  v15 = *(_QWORD *)(v1 + 304);
  v16 = *(_QWORD *)(v1 + 312);
  v17 = *(_QWORD *)(v1 + 296);

  swift_unknownObjectRelease(v11);
  swift_release(v12);

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  sub_10000CB4C(v14, &qword_10064E570);
  v26(v25, v13);
  v18 = *(_QWORD *)(v1 + 376);
  v20 = *(_QWORD *)(v1 + 344);
  v19 = *(_QWORD *)(v1 + 352);
  v21 = *(_QWORD *)(v1 + 336);
  v23 = *(_QWORD *)(v1 + 312);
  v22 = *(_QWORD *)(v1 + 320);
  swift_task_dealloc(*(_QWORD *)(v1 + 384));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100317858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 392);
  swift_willThrow();
  swift_release(v2);
  swift_unknownObjectRelease(v1);
  v3 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 352);
  v6 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 384));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100317900()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void **)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 360);
  v6 = *(_QWORD *)(v0 + 368);
  swift_willThrow();
  swift_release(v3);
  swift_unknownObjectRelease(v2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);

  v7 = *(_QWORD *)(v0 + 376);
  v9 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 352);
  v10 = *(_QWORD *)(v0 + 336);
  v12 = *(_QWORD *)(v0 + 312);
  v11 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 384));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003179C0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v17;
  id v18;
  uint64_t v19;

  v8 = sub_10006922C(&qword_10064E570);
  __chkstk_darwin(v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 32);
  if (a4)
  {
    v12 = sub_10006922C((uint64_t *)&unk_100643490);
    v13 = swift_allocError(v12, &protocol self-conformance witness table for Error, 0, 0);
    *v14 = a4;
    v15 = a4;
    return swift_continuation_throwingResumeWithError(v11, v13);
  }
  else
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(a2);
    *(_QWORD *)&v10[*(int *)(v8 + 48)] = a3;
    v17 = *(_QWORD *)(*(_QWORD *)(v11 + 64) + 40);
    v18 = a3;
    sub_100318668((uint64_t)v10, v17);
    return swift_continuation_throwingResume(v11);
  }
}

uint64_t sub_100317AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned __int8 v20;
  _QWORD v22[4];

  v6 = sub_10006922C(&qword_1006438A0);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100317E18(a1, (uint64_t)v8);
  v9 = type metadata accessor for TaskPriority(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000CB4C((uint64_t)v8, &qword_1006438A0);
    v12 = 4096;
    v13 = *(_QWORD *)(a3 + 16);
    if (!v13)
    {
LABEL_6:
      v19 = 0;
      return swift_task_create(v12, v19, &type metadata for ()[8], a2, a3);
    }
  }
  else
  {
    v20 = TaskPriority.rawValue.getter(v11);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v12 = v20 | 0x1000;
    v13 = *(_QWORD *)(a3 + 16);
    if (!v13)
      goto LABEL_6;
  }
  v14 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v13);
  swift_unknownObjectRetain(v13);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v14);
  v18 = v17;
  swift_unknownObjectRelease(v13);
  if (!(v18 | v16))
    goto LABEL_6;
  v22[0] = 0;
  v22[1] = 0;
  v19 = v22;
  v22[2] = v16;
  v22[3] = v18;
  return swift_task_create(v12, v19, &type metadata for ()[8], a2, a3);
}

uint64_t sub_100317C38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 160);
  swift_willThrow();
  v2 = swift_errorRelease(v1);
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = Logger.DocumentManager.unsafeMutableAddressor(v2);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Files Family Tip Failed to fetch family", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }
  v11 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 128);
  v13 = *(_QWORD *)(v0 + 136);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100317D38()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100317D5C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100317D98(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_10064E564);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1000EA854;
  return sub_100316BD8(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100317E18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C(&qword_1006438A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100317E60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064E578;
  if (!qword_10064E578)
  {
    v1 = objc_opt_self(CKShareParticipant);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10064E578);
  }
  return result;
}

void sub_100317E9C(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char **v7;
  id v8;
  void *v9;
  BOOL v10;
  unint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  char v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  double v43;
  id v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  unint64_t v69;
  unint64_t v70;
  id v71;
  NSString v72;
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  id v91;
  uint64_t v92;
  id v93;

  v2 = a2;
  if (a2 >> 62)
    goto LABEL_99;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  if (!v4)
  {
LABEL_94:
    swift_bridgeObjectRelease(v2);
    return;
  }
LABEL_3:
  v5 = 0;
  v6 = v2 & 0xC000000000000001;
  v83 = v2 + 32;
  v84 = v2 & 0xFFFFFFFFFFFFFF8;
  v7 = &selRef_setAccessibilityValue_;
  v87 = a1;
  v88 = v2;
  v85 = v2 & 0xC000000000000001;
  v86 = v4;
  while (1)
  {
    if (v6)
    {
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
    }
    else
    {
      if (v5 >= *(_QWORD *)(v84 + 16))
        goto LABEL_105;
      v8 = *(id *)(v83 + 8 * v5);
    }
    v9 = v8;
    v10 = __OFADD__(v5, 1);
    v11 = v5 + 1;
    if (v10)
      goto LABEL_98;
    v89 = v11;
    v12 = objc_msgSend(v8, "appleID");
    if (v12)
    {
      v13 = v12;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v16 = v15;

    }
    else
    {
      v14 = 0;
      v16 = 0;
    }
    v17 = objc_msgSend(a1, v7[317], v83);
    v18 = objc_msgSend(v17, "lookupInfo");

    if (v18 && (v19 = objc_msgSend(v18, "emailAddress"), v18, v19))
    {
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;

      if (!v16)
        goto LABEL_15;
    }
    else
    {
      v20 = 0;
      v22 = 0xE000000000000000;
      if (!v16)
      {
LABEL_15:
        *(_QWORD *)&v23 = swift_bridgeObjectRelease(v22).n128_u64[0];
        goto LABEL_20;
      }
    }
    if (v14 == v20 && v16 == v22)
    {

      swift_bridgeObjectRelease(v2);
      swift_bridgeObjectRelease(v16);
      v81 = v22;
      goto LABEL_88;
    }
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v20, v22, 0);
    swift_bridgeObjectRelease(v16);
    *(_QWORD *)&v23 = swift_bridgeObjectRelease(v22).n128_u64[0];
    if ((v24 & 1) != 0)
      goto LABEL_87;
LABEL_20:
    v25 = objc_msgSend(v9, "contact", v23);
    if (!v25)
      goto LABEL_93;
    v26 = v25;
    v27 = objc_msgSend(a1, v7[317]);
    v28 = objc_msgSend(v27, "lookupInfo");

    v93 = v28;
    if (!v28)
    {

LABEL_93:
      goto LABEL_94;
    }
    v29 = objc_msgSend(v26, "emailAddresses");
    v30 = sub_10006922C(&qword_10064E588);
    v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v30);

    if ((unint64_t)v31 >> 62)
    {
      if (v31 < 0)
        v79 = v31;
      else
        v79 = v31 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v31);
      v32 = _CocoaArrayWrapper.endIndex.getter(v79);
      swift_bridgeObjectRelease(v31);
    }
    else
    {
      v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v90 = v9;
    v91 = v26;
    v92 = v30;
    if (!v32)
    {
      *(_QWORD *)&v43 = swift_bridgeObjectRelease(v31).n128_u64[0];
      goto LABEL_35;
    }
    sub_100081774(0, v32 & ~(v32 >> 63), 0);
    if (v32 < 0)
      break;
    v33 = 0;
    do
    {
      if ((v31 & 0xC000000000000001) != 0)
        v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v31);
      else
        v34 = *(id *)(v31 + 8 * v33 + 32);
      v35 = v34;
      v36 = objc_msgSend(v34, "value");
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v39 = v38;

      v41 = _swiftEmptyArrayStorage[2];
      v40 = _swiftEmptyArrayStorage[3];
      if (v41 >= v40 >> 1)
        sub_100081774(v40 > 1, v41 + 1, 1);
      ++v33;
      _swiftEmptyArrayStorage[2] = v41 + 1;
      v42 = &_swiftEmptyArrayStorage[2 * v41];
      v42[4] = v37;
      v42[5] = v39;
    }
    while (v32 != v33);
    *(_QWORD *)&v43 = swift_bridgeObjectRelease(v31).n128_u64[0];
    v9 = v90;
LABEL_35:
    v44 = objc_msgSend(v93, "emailAddress", v43);
    if (v44)
    {
      v45 = v44;
      v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      v48 = v47;

      v49 = _swiftEmptyArrayStorage[2];
      if (!v49)
        goto LABEL_51;
    }
    else
    {
      v46 = 0;
      v48 = 0xE000000000000000;
      v49 = _swiftEmptyArrayStorage[2];
      if (!v49)
        goto LABEL_51;
    }
    v50 = _swiftEmptyArrayStorage[4];
    v51 = _swiftEmptyArrayStorage[5];
    if (v50 == v46 && v51 == v48 || (_stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, v46, v48, 0) & 1) != 0)
      goto LABEL_86;
    if (v49 != 1)
    {
      a1 = &_swiftEmptyArrayStorage[7];
      v52 = 1;
      while (1)
      {
        v53 = v52 + 1;
        if (__OFADD__(v52, 1))
          goto LABEL_97;
        v54 = *(a1 - 1);
        v55 = *a1;
        v56 = v54 == v46 && v55 == v48;
        if (v56 || (_stringCompareWithSmolCheck(_:_:expecting:)(v54, v55, v46, v48, 0) & 1) != 0)
          break;
        a1 += 2;
        ++v52;
        if (v53 == v49)
          goto LABEL_51;
      }
LABEL_86:
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(v48);

LABEL_87:
      v81 = v2;
LABEL_88:
      swift_bridgeObjectRelease(v81);
      return;
    }
LABEL_51:
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v57 = objc_msgSend(v26, "phoneNumbers", swift_bridgeObjectRelease(v48).n128_f64[0]);
    v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v57, v92);

    if ((unint64_t)v58 >> 62)
    {
      if (v58 < 0)
        v80 = v58;
      else
        v80 = v58 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v58);
      v59 = _CocoaArrayWrapper.endIndex.getter(v80);
      swift_bridgeObjectRelease(v58);
      if (!v59)
        goto LABEL_84;
LABEL_53:
      v2 = 4;
      while (2)
      {
        if ((v58 & 0xC000000000000001) != 0)
          v60 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v2 - 4, v58);
        else
          v60 = *(id *)(v58 + 8 * v2);
        v61 = v60;
        a1 = (_QWORD *)(v2 - 3);
        if (__OFADD__(v2 - 4, 1))
        {
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          if (v2 < 0)
            v82 = v2;
          else
            v82 = v2 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v2);
          v4 = _CocoaArrayWrapper.endIndex.getter(v82);
          if (!v4)
            goto LABEL_94;
          goto LABEL_3;
        }
        v62 = objc_msgSend(v60, "value");
        v63 = objc_msgSend(v62, "fullyQualifiedDigits");

        if (v63)
        {
          v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
          v66 = v65;

        }
        else
        {
          v64 = 0;
          v66 = 0;
        }
        v67 = objc_msgSend(v93, "phoneNumber");
        if (v67)
        {
          v68 = v67;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
          v70 = v69;

        }
        else
        {
          v70 = 0xE000000000000000;
        }
        v71 = objc_allocWithZone((Class)CNPhoneNumber);
        v72 = String._bridgeToObjectiveC()();
        v73 = objc_msgSend(v71, "initWithStringValue:", v72, swift_bridgeObjectRelease(v70).n128_f64[0]);

        v74 = objc_msgSend(v73, "fullyQualifiedDigits");
        if (v74)
        {
          v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
          v77 = v76;

          if (v66)
          {
            if (v77)
            {
              if (v64 == v75 && v66 == v77)
              {
                swift_bridgeObjectRelease(v66);
                swift_bridgeObjectRelease(v77);
LABEL_90:

LABEL_91:
                swift_bridgeObjectRelease(v88);
                swift_bridgeObjectRelease(v58);

                return;
              }
              v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v66, v75, v77, 0);
              swift_bridgeObjectRelease(v66);
              swift_bridgeObjectRelease(v77);

              if ((v78 & 1) != 0)
                goto LABEL_91;
              goto LABEL_56;
            }
LABEL_75:

            v77 = v66;
          }
          else
          {

            if (!v77)
              goto LABEL_91;
          }
          swift_bridgeObjectRelease(v77);
LABEL_56:
          ++v2;
          if (a1 == (_QWORD *)v59)
            goto LABEL_84;
          continue;
        }
        break;
      }
      if (!v66)
        goto LABEL_90;
      goto LABEL_75;
    }
    v59 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v59)
      goto LABEL_53;
LABEL_84:

    swift_bridgeObjectRelease(v58);
    a1 = v87;
    v2 = v88;
    v5 = v89;
    v6 = v85;
    v7 = &selRef_setAccessibilityValue_;
    if (v89 == v86)
      goto LABEL_94;
  }
  __break(1u);
LABEL_105:
  __break(1u);
}

uint64_t sub_100318668(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C(&qword_10064E570);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *sub_1003186B0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  char *v3;
  uint64_t v4;
  _BYTE *v5;
  char *v6;
  uint64_t v7;
  void *Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  _BYTE v15[24];

  v1 = *(_QWORD *)(v0 + 32);
  swift_beginAccess(v1 + 16, v15, 33, 0);
  v2 = *(char **)(v1 + 24);
  if (v2)
  {
    swift_retain();
    v3 = v2;
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 16);
    v5 = objc_allocWithZone((Class)type metadata accessor for DOCProgressCollectionIndicatorButtonItem(0));
    swift_retain();
    swift_retain();
    v6 = sub_100318B84(65537, v4, v5);
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 24, v7);
    swift_unknownObjectWeakAssign(&v6[OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_viewControllerForPresentationFallback], Strong);

    *(_QWORD *)(v1 + 24) = v6;
    type metadata accessor for DOCBarButtonItemGroup();
    v9 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v10 = swift_allocObject(v9, 40, 7);
    *(_OWORD *)(v10 + 16) = xmmword_1004D9B40;
    *(_QWORD *)(v10 + 32) = v6;
    v14 = v10;
    specialized Array._endMutation()(v10);
    v3 = v6;
    v11 = static UIBarButtonItemGroup.fixedGroup(representativeItem:items:)(0, v14);
    swift_bridgeObjectRelease(v14);

    v2 = 0;
    *(_QWORD *)(v1 + 16) = v11;
  }
  swift_endAccess(v15);
  v12 = v2;
  swift_release(v1);
  return v3;
}

void sub_100318808()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + 24);

}

uint64_t sub_100318830()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 24);

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_100318860()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectWeakDestroy(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for DOCSharedOverlayContent.BBIStorage()
{
  return objc_opt_self(_TtCC5FilesP33_6559D0809CA5F323BA86F5C57192601423DOCSharedOverlayContent10BBIStorage);
}

void sub_1003188B4()
{
  id v0;
  char *v1;
  id v2;
  id v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD v25[5];
  id v26;
  uint64_t v27;
  _QWORD *v28;
  _BYTE v29[24];

  v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DOCDSFileServiceConnection()), "init");
  v1 = (char *)objc_allocWithZone((Class)type metadata accessor for DOCFileOperationsManager(0));
  v2 = v0;
  v3 = sub_100294C24((uint64_t)v2, v1);
  v4 = type metadata accessor for DOCFileOperationCollectionSource(0);
  *(_QWORD *)(swift_allocObject(v4, 56, 7) + 48) = v3;
  v5 = (char *)v3;
  v6 = sub_10008C000((uint64_t)variable initialization expression of DOCBrowserContainedViewController.uipDocLandingBackgroundAllowed, 0);
  v7 = OBJC_IVAR____TtC5Files24DOCFileOperationsManager_observers;
  v8 = *(_QWORD *)&v5[OBJC_IVAR____TtC5Files24DOCFileOperationsManager_observers];
  swift_beginAccess(v8 + 16, v29, 1, 0);
  v9 = *(_QWORD *)(v8 + 16);
  v28 = _swiftEmptyArrayStorage;
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v19 = v9;
    else
      v19 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v9, 2);
    swift_retain(v6);
    swift_retain(v8);
    v10 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(v9);
    v27 = v7;
    if (v10)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease(v9);
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v9);
  swift_retain(v6);
  swift_retain(v8);
  v27 = v7;
  if (!v10)
    goto LABEL_17;
LABEL_3:
  if (v10 < 1)
  {
    __break(1u);
    return;
  }
  v26 = v2;
  for (i = 0; i != v10; ++i)
  {
    if ((v9 & 0xC000000000000001) != 0)
    {
      v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v9);
    }
    else
    {
      v13 = *(_QWORD *)(v9 + 8 * i + 32);
      swift_retain(v13);
    }
    Strong = swift_unknownObjectWeakLoadStrong(v13 + 16, v12);
    if (Strong)
    {
      v15 = swift_unknownObjectRelease(Strong);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      v16 = v28[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v13);
      specialized ContiguousArray._endMutation()(v17);
    }
    else
    {
      swift_release(v13);
    }
  }
  swift_bridgeObjectRelease(v9);
  v18 = v28;
  v2 = v26;
LABEL_18:
  v20 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v8 + 16) = v18;
  v21 = swift_bridgeObjectRelease(v20);
  v22 = *(_QWORD *)(v8 + 16);
  __chkstk_darwin(v21);
  v25[2] = v6;
  swift_bridgeObjectRetain(v22);
  v23 = sub_100089DB8(sub_1000E85DC, (uint64_t)v25, v22);
  swift_release(v8);
  swift_bridgeObjectRelease(v22);
  if ((v23 & 1) == 0)
  {
    v24 = *(_QWORD *)&v5[v27];
    swift_retain(v24);
    sub_1000B1E54((uint64_t)v6, v24);
    swift_release(v24);
    sub_1000A786C();
    sub_10000CDB4();
  }

  swift_release(v6);
  qword_100672BD0 = (uint64_t)v6;
}

char *sub_100318B84(int a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  char *v9;
  int64x2_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  _BYTE *v15;
  id v16;
  id v17;
  char *result;
  char *v19;
  Swift::String v20;
  Swift::String_optional v21;
  Swift::String v22;
  void *object;
  NSString v24;
  uint64_t v25;
  UIMenuElementSize v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  id v32;
  uint64_t v33;
  Swift::String v34;
  Class isa;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t ObjectType;
  uint64_t v40;
  void (*v41)(char *, void (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, __n128);
  char *v42;
  __n128 v43;
  __n128 v44;
  Swift::OpaquePointer v45;
  UIMenuElementSize aBlock[5];
  uint64_t v47;
  objc_super v48;
  UIImage_optional v49;
  Swift::String v50;

  swift_unknownObjectWeakInit(&a3[OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_viewControllerForPresentationFallback], 0);
  a3[OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_isActivePopoverSource] = 0;
  v6 = OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_containerView;
  v7 = type metadata accessor for DOCProgressCollectionIndicatorButtonItem.ProgressItemContainerView();
  v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7));
  v9 = a3;
  *(_QWORD *)&a3[v6] = objc_msgSend(v8, "init");
  *(_QWORD *)&v9[OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_widthConstraint] = 0;
  v10 = (int64x2_t *)&v9[OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_metrics];
  *v10 = (int64x2_t)xmmword_1004E2590;
  v10[1] = vdupq_n_s64(0x4035800000000000uLL);
  v11 = &v9[OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_inFlightVisibilityChange];
  v12 = type metadata accessor for DOCProgressCollectionIndicatorButtonItem.VisibilityChangeTransaction(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = (uint64_t *)&v9[OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_progressSource];
  *v13 = a2;
  v13[1] = (uint64_t)&protocol witness table for DOCFilterableOperationProgressCollectionSource<A>;
  v14 = &v9[OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_configuration];
  LOBYTE(v11) = a1 & 1;
  *v14 = a1 & 1;
  v14[1] = BYTE1(a1) & 1;
  v14[2] = BYTE2(a1) & 1;
  v15 = objc_allocWithZone((Class)type metadata accessor for DOCProgressCollectionIndicatorView());
  swift_retain();
  *(_QWORD *)&v9[OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_indicatorView] = sub_1004119FC((char)v11, a2, v15, 0.3);

  v48.receiver = v9;
  v48.super_class = (Class)type metadata accessor for DOCProgressCollectionIndicatorButtonItem(0);
  v16 = objc_msgSendSuper2(&v48, "init");
  objc_msgSend(v16, "setHidden:", 1);
  v17 = v16;
  result = (char *)(id)_DocumentManagerBundle(v17);
  if (result)
  {
    v19 = result;
    v50._countAndFlagsBits = 0xD000000000000040;
    v50._object = (void *)0x8000000100527740;
    v20._object = (void *)0x8000000100527720;
    v20._countAndFlagsBits = 0xD00000000000001CLL;
    v21.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v21.value._object = (void *)0xEB00000000656C62;
    v22._countAndFlagsBits = 0x73736572676F7250;
    v22._object = (void *)0xE800000000000000;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, (NSBundle)v19, v22, v50)._object;

    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    objc_msgSend(v17, "setTitle:", v24);

    sub_100083490();
    v25 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v26 = swift_allocObject(v25, 40, 7);
    *(_OWORD *)(v26 + 16) = xmmword_1004D9B40;
    v27 = (void *)objc_opt_self(UIDeferredMenuElement);
    v28 = swift_allocObject(&unk_1005DD318, 24, 7);
    swift_unknownObjectWeakInit(v28 + 16, v17);
    aBlock[4] = (UIMenuElementSize)sub_100319018;
    v47 = v28;
    aBlock[0] = (UIMenuElementSize)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (UIMenuElementSize)sub_100458078;
    aBlock[3] = (UIMenuElementSize)&unk_1005DD330;
    v29 = _Block_copy(aBlock);
    v30 = v47;
    v31 = (char *)v17;
    swift_release(v30);
    v32 = objc_msgSend(v27, "elementWithUncachedProvider:", v29);
    _Block_release(v29);
    *(_QWORD *)(v26 + 32) = v32;
    aBlock[0] = v26;
    specialized Array._endMutation()(v33);
    v34._countAndFlagsBits = 0;
    v34._object = (void *)0xE000000000000000;
    v49.value.super.isa = 0;
    v49.is_nil = 0;
    isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v34, (Swift::String_optional)0, v49, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, aBlock[0], v45).super.super.isa;
    objc_msgSend(v31, "setMenuRepresentation:", isa);

    v36 = *(_QWORD *)&v31[OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_progressSource];
    v37 = *(_QWORD *)&v31[OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_progressSource + 8];
    ObjectType = swift_getObjectType(v36, v38);
    v40 = swift_allocObject(&unk_1005DD318, 24, 7);
    swift_unknownObjectWeakInit(v40 + 16, v31);
    v41 = *(void (**)(char *, void (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, __n128))(v37 + 16);
    v42 = v31;
    swift_unknownObjectRetain(v36);
    v43 = swift_retain();
    v41(v42, sub_100319020, v40, ObjectType, v37, v43);
    swift_unknownObjectRelease(v36);

    swift_release_n(v40, 2, v44);
    sub_10002C900();

    return v42;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100318FF4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

id sub_100319018(void (*a1)(_QWORD *), uint64_t a2)
{
  uint64_t v2;

  return sub_100405FE4(a1, a2, v2);
}

void sub_100319020(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1004062A0(a1, a2, v2);
}

id *sub_100319028()
{
  id *v0;

  sub_100319240();

  sub_10000CB4C((uint64_t)(v0 + 7), &qword_100642730);
  sub_10000CB4C((uint64_t)(v0 + 11), &qword_100642730);

  return v0;
}

uint64_t sub_1003190A8()
{
  uint64_t v0;

  sub_100319028();
  return swift_deallocClassInstance(v0, 152, 7);
}

uint64_t sub_1003190C8(uint64_t a1)
{
  Swift::String v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;

  _StringGuts.grow(_:)(61);
  v2._object = (void *)0x8000000100527910;
  v2._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v2);
  v3 = objc_msgSend(*(id *)(a1 + 16), "description");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 0xD00000000000002ALL;
  v8._object = (void *)0x8000000100527930;
  String.append(_:)(v8);
  return 0;
}

uint64_t sub_1003191A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (result)
  {
    v6 = result;
    objc_msgSend(*(id *)(a2 + 32), "removeObject:", result);
    if (*(_BYTE *)(a2 + 40) == 1 && !objc_msgSend(*(id *)(a2 + 32), "count"))
    {
      sub_100319240();
      result = swift_unknownObjectRelease(v6);
      *(_BYTE *)(a2 + 40) = 0;
    }
    else
    {
      return swift_unknownObjectRelease(v6);
    }
  }
  return result;
}

uint64_t sub_100319240()
{
  return sub_10009485C((uint64_t)sub_10031A134, (uint64_t)&unk_1005DD430);
}

uint64_t sub_100319254(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void **v5;
  id v6;
  id v7;
  char v8;
  char v9;
  uint64_t result;
  void *v11;
  id v12;
  id v13;
  char v14;
  void *v15;

  v2 = v1;
  if (objc_msgSend(a1, "isDownloadingOperation"))
  {
    v5 = (void **)(v1 + 120);
    v4 = *(void **)(v1 + 120);
    if (v4)
    {
      sub_10004F2F0(0, (unint64_t *)&unk_100646BB0, NSProgress_ptr);
      v6 = a1;
      v7 = v4;
      v8 = static NSObject.== infix(_:_:)(v6, v7);

      if ((v8 & 1) != 0)
      {
        v9 = 1;
LABEL_8:
        sub_100319CC0(a1, v9, 0);
        v15 = *v5;
        *v5 = 0;

        return 1;
      }
    }
  }
  result = (uint64_t)objc_msgSend(a1, "isUploadingOperation");
  if (!(_DWORD)result)
    return result;
  v5 = (void **)(v2 + 128);
  v11 = *(void **)(v2 + 128);
  if (v11)
  {
    sub_10004F2F0(0, (unint64_t *)&unk_100646BB0, NSProgress_ptr);
    v12 = a1;
    v13 = v11;
    v14 = static NSObject.== infix(_:_:)(v12, v13);

    v9 = 0;
    result = 0;
    if ((v14 & 1) == 0)
      return result;
    goto LABEL_8;
  }
  return 0;
}

uint64_t (*sub_100319388(void *a1, uint64_t a2))()
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  void *v6;
  id v8;
  uint64_t v9;
  id v10;
  _BYTE v11[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (!Strong)
    return (uint64_t (*)())DOCSplitBrowserViewController.didCommitPreview(of:);
  v5 = Strong;
  if ((sub_1003197CC(a1) & 1) == 0)
  {
    swift_release(v5);
    return (uint64_t (*)())DOCSplitBrowserViewController.didCommitPreview(of:);
  }
  if (objc_msgSend(a1, "isDownloadingOperation"))
  {
    sub_100319CC0(a1, 1, 1);
    v6 = *(void **)(v5 + 120);
    *(_QWORD *)(v5 + 120) = a1;
    goto LABEL_9;
  }
  if (objc_msgSend(a1, "isUploadingOperation"))
  {
    sub_100319CC0(a1, 0, 1);
    v6 = *(void **)(v5 + 128);
    *(_QWORD *)(v5 + 128) = a1;
LABEL_9:
    v8 = a1;

    if (*(_BYTE *)(v5 + 40) == 1)
      sub_100093EA0((uint64_t)sub_1003194AC, 0);
  }
  v9 = swift_allocObject(&unk_1005DD418, 32, 7);
  *(_QWORD *)(v9 + 16) = v5;
  *(_QWORD *)(v9 + 24) = a1;
  v10 = a1;
  return sub_10031A12C;
}

id sub_1003194AC(void *a1)
{
  return objc_msgSend(a1, "didUpdateSyncProgress");
}

uint64_t sub_1003194B8(uint64_t a1, void *a2)
{
  uint64_t result;

  result = sub_100319254(a2);
  if ((result & 1) != 0 && *(_BYTE *)(a1 + 40) == 1)
    return sub_100093EA0((uint64_t)sub_10031A1BC, 0);
  return result;
}

uint64_t sub_1003194FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  char v31[24];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Logger.FileProviderSyncState.unsafeMutableAddressor(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
  v8 = swift_retain_n(v1, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(12, -1);
    v29 = v2;
    v12 = (uint8_t *)v11;
    v13 = swift_slowAlloc(32, -1);
    v28 = v13;
    *(_DWORD *)v12 = 136315138;
    *(_QWORD *)&v34 = v13;
    v27[1] = v12 + 4;
    v14 = objc_msgSend(*(id *)(v1 + 16), "domainFullDisplayName");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    *(_QWORD *)&v32 = sub_1000544FC(v15, v17, (uint64_t *)&v34);
    v18 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, (char *)&v32 + 8);
    swift_release_n(v1, 2, v18);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Stopping observation of %s progress updates.", v12, 0xCu);
    v19 = v28;
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v29);
  }
  else
  {

    swift_release_n(v1, 2, v20);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  v21 = v1 + 88;
  swift_beginAccess(v21, v31, 0, 0);
  sub_1000685A8(v21, (uint64_t)&v32);
  if (!*((_QWORD *)&v33 + 1))
    return sub_10000CB4C((uint64_t)&v32, &qword_100642730);
  sub_100079B28(&v32, &v34);
  v22 = (void *)objc_opt_self(NSProgress);
  v23 = v35;
  v24 = sub_10007E7A0(&v34, v35);
  v25 = _bridgeAnythingToObjectiveC<A>(_:)(v24, v23);
  objc_msgSend(v22, "removeSubscriber:", v25);
  swift_unknownObjectRelease(v25);
  v32 = 0u;
  v33 = 0u;
  swift_beginAccess(v21, v30, 33, 0);
  sub_10007EB94((uint64_t)&v32, v21);
  swift_endAccess(v30);
  return sub_100068588(&v34);
}

uint64_t sub_1003197CC(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  double v13;
  id v14;
  __n128 v15;
  char v16;
  NSURL *v17;
  void *v18;
  void *v19;
  unsigned __int8 v20;
  void (*v21)(char *, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v24;

  v3 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v24 - v11;
  v13 = sub_100093D24((uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, double))(v7 + 48))(v5, 1, v6, v13) == 1)
  {
    sub_10000CB4C((uint64_t)v5, &qword_100643470);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
    v14 = *(id *)(v1 + 16);
    v16 = FPProviderDomain.shouldUseDSEnumeration.getter(v15);

    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
    if ((v16 & 1) != 0)
    {
      URL._bridgeToObjectiveC()(v17);
      v19 = v18;
      v20 = objc_msgSend(a1, "fp_isGlobalProgressForDomainAt:", v18);

      v21 = *(void (**)(char *, uint64_t))(v7 + 8);
      v21(v10, v6);
      v21(v12, v6);
      if ((v20 & 1) == 0)
        return 0;
    }
    else
    {
      v23 = *(void (**)(char *, uint64_t))(v7 + 8);
      v23(v10, v6);
      v23(v12, v6);
    }
  }
  return 1;
}

id sub_10031997C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 144);
  if (v1)
  {
    v2 = *(id *)(v0 + 144);
  }
  else
  {
    v3 = objc_msgSend((id)objc_opt_self(DOCICloudQuotaInAppMessaging), "shared");
    v4 = *(void **)(v0 + 144);
    *(_QWORD *)(v0 + 144) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

uint64_t sub_1003199EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  __n128 v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31[24];
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Logger.FileProviderSyncState.unsafeMutableAddressor(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
  v8 = swift_retain_n(v1, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(12, -1);
    v30 = v2;
    v12 = (uint8_t *)v11;
    v13 = swift_slowAlloc(32, -1);
    v29 = v13;
    *(_DWORD *)v12 = 136315138;
    *(_QWORD *)&v34 = v13;
    v28 = v12 + 4;
    v14 = objc_msgSend(*(id *)(v1 + 16), "domainFullDisplayName", v12 + 4);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    *(_QWORD *)&v32 = sub_1000544FC(v15, v17, (uint64_t *)&v34);
    v18 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, (char *)&v32 + 8);
    swift_release_n(v1, 2, v18);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Stopping observation of %s quota updates.", v12, 0xCu);
    v19 = v29;
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v30);
  }
  else
  {

    swift_release_n(v1, 2, v20);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  v21 = sub_10031997C();
  objc_msgSend(v21, "stopObservingUpdates");

  v22 = v1 + 56;
  swift_beginAccess(v22, v31, 0, 0);
  sub_1000685A8(v22, (uint64_t)&v32);
  if (!v33)
    return sub_10000CB4C((uint64_t)&v32, &qword_100642730);
  sub_100079B28(&v32, &v34);
  v23 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v24 = v35;
  v25 = sub_10007E7A0(&v34, v35);
  v26 = _bridgeAnythingToObjectiveC<A>(_:)(v25, v24);
  objc_msgSend(v23, "removeObserver:", v26);

  swift_unknownObjectRelease(v26);
  return sub_100068588(&v34);
}

uint64_t sub_100319CC0(void *a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __n128 v32;
  uint64_t v33;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0x73696C6275706E55;
  if ((a3 & 1) != 0)
    v12 = 0x696873696C627550;
  v42 = (char *)v12;
  if ((a3 & 1) != 0)
    v13 = 0xEA0000000000676ELL;
  else
    v13 = 0xEC000000676E6968;
  if ((a2 & 1) != 0)
    v14 = 0x64616F6C6E776F64;
  else
    v14 = 0x6E6964616F6C7075;
  if ((a2 & 1) != 0)
    v15 = 0xEB00000000676E69;
  else
    v15 = 0xE900000000000067;
  v16 = objc_msgSend(a1, "localizedDescription");
  if (v16)
  {
    v17 = v16;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

  }
  else
  {
    v20 = 0xE300000000000000;
    v18 = 4271950;
  }
  v21 = Logger.FileProviderSyncState.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v21, v8);
  swift_retain_n(v4, 2);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  v22 = swift_bridgeObjectRetain(v20);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.info.getter();
  v43 = v24;
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc(42, -1);
    v39 = v18;
    v26 = v25;
    v40 = swift_slowAlloc(128, -1);
    v45 = v40;
    *(_DWORD *)v26 = 136315906;
    v41 = v8;
    swift_bridgeObjectRetain(v13);
    v44 = sub_1000544FC((uint64_t)v42, v13, &v45);
    v42 = v11;
    v37 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
    swift_bridgeObjectRelease_n(v13, 3);
    *(_WORD *)(v26 + 12) = 2080;
    v27 = objc_msgSend(*(id *)(v4 + 16), "domainFullDisplayName");
    v28 = v4;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v38 = v9;
    v31 = v30;

    v44 = sub_1000544FC(v29, v31, &v45);
    v32 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
    swift_release_n(v28, 2, v32);
    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v26 + 22) = 2080;
    swift_bridgeObjectRetain(v15);
    v44 = sub_1000544FC(v37, v15, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
    swift_bridgeObjectRelease_n(v15, 3);
    *(_WORD *)(v26 + 32) = 2080;
    swift_bridgeObjectRetain(v20);
    v44 = sub_1000544FC(v39, v20, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
    swift_bridgeObjectRelease_n(v20, 3);
    _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v43, "%s %s %s progress: %s", (uint8_t *)v26, 0x2Au);
    v33 = v40;
    swift_arrayDestroy(v40, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v42, v41);
  }
  else
  {

    swift_bridgeObjectRelease_n(v20, 2);
    swift_bridgeObjectRelease_n(v15, 2);
    swift_release_n(v4, 2, v35);
    swift_bridgeObjectRelease_n(v13, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_10031A0B0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t (*sub_10031A0D4(void *a1))()
{
  uint64_t v1;

  return sub_100319388(a1, v1);
}

uint64_t sub_10031A0DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10031A100()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10031A12C()
{
  uint64_t v0;

  return sub_1003194B8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_10031A134()
{
  uint64_t v0;

  sub_1000947AC(v0, (void (*)(void))sub_1003199EC, (void (*)(void))sub_1003194FC);
}

uint64_t sub_10031A15C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10031A188()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10031A1B4()
{
  uint64_t v0;

  return sub_1003190C8(v0);
}

uint64_t sub_10031A1E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __n128 v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  __n128 v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  os_log_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  os_log_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  char *v89;

  v5 = v4;
  v87 = type metadata accessor for IndexPath(0);
  v10 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v82 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v76 - v13;
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v84 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v76 - v19;
  v21 = String.count.getter(a2, a3);
  v86 = a4;
  if (v21 < 1)
  {
    a3 = 0xE900000000000068;
    v83 = 0x7461507865646E69;
  }
  else
  {
    v83 = a2;
    v21 = swift_bridgeObjectRetain(a3);
  }
  v22 = IndexPath.section.getter(v21);
  v23 = objc_msgSend(v5, "numberOfSections");
  if (v22 >= (uint64_t)v23)
  {
    v30 = v23;
    v31 = Logger.UI.unsafeMutableAddressor(v23);
    v85 = v16;
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    v33 = v20;
    v81 = v15;
    v32(v20, v31, v15);
    v34 = v10;
    v35 = v87;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, a1, v87);
    v36 = v5;
    v37 = swift_bridgeObjectRetain(a3);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = swift_slowAlloc(42, -1);
      v80 = (_QWORD *)swift_slowAlloc(8, -1);
      v82 = (char *)swift_slowAlloc(64, -1);
      v89 = v82;
      *(_DWORD *)v40 = 136315906;
      swift_bridgeObjectRetain(a3);
      v88 = (_QWORD *)sub_1000544FC(v83, a3, (uint64_t *)&v89);
      v84 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v40 + 12) = 2080;
      v41 = sub_1000E9B60();
      v42 = dispatch thunk of CustomStringConvertible.description.getter(v87, v41);
      v44 = v43;
      v88 = (_QWORD *)sub_1000544FC(v42, v43, (uint64_t *)&v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      v45 = swift_bridgeObjectRelease(v44);
      (*(void (**)(char *, uint64_t, __n128))(v34 + 8))(v14, v87, v45);
      *(_WORD *)(v40 + 22) = 2048;
      v88 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      *(_WORD *)(v40 + 32) = 2112;
      v88 = v36;
      v46 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      v47 = v80;
      *v80 = v36;

      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Encountered invalid %s (%s) - numberOfSections is %ld for %@", (uint8_t *)v40, 0x2Au);
      v48 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v47, 1, v48);
      swift_slowDealloc(v47, -1, -1);
      v49 = v82;
      swift_arrayDestroy(v82, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      v50 = v40;
      v35 = v87;
      swift_slowDealloc(v50, -1, -1);

      (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v81);
    }
    else
    {
      swift_bridgeObjectRelease_n(a3, 2);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v35);

      (*(void (**)(char *, uint64_t))(v85 + 8))(v33, v81);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v86, 1, 1, v35);
  }
  else
  {
    v24 = IndexPath.row.getter(v23);
    v25 = objc_msgSend(v5, "numberOfItemsInSection:", v22);
    if (v24 >= (uint64_t)v25)
    {
      v51 = v25;
      v52 = Logger.UI.unsafeMutableAddressor(v25);
      v85 = v16;
      v53 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
      v54 = v84;
      v53(v84, v52, v15);
      v55 = v10;
      v56 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
      v57 = v82;
      v58 = v87;
      v56(v82, a1, v87);
      v80 = v5;
      v59 = swift_bridgeObjectRetain(a3);
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v62 = swift_slowAlloc(52, -1);
        v81 = v15;
        v63 = v62;
        v78 = (_QWORD *)swift_slowAlloc(8, -1);
        v79 = swift_slowAlloc(64, -1);
        v89 = (char *)v79;
        *(_DWORD *)v63 = 136316162;
        v77 = v60;
        swift_bridgeObjectRetain(a3);
        v88 = (_QWORD *)sub_1000544FC(v83, a3, (uint64_t *)&v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
        swift_bridgeObjectRelease_n(a3, 3);
        *(_WORD *)(v63 + 12) = 2080;
        v64 = sub_1000E9B60();
        v65 = dispatch thunk of CustomStringConvertible.description.getter(v58, v64);
        v67 = v66;
        v88 = (_QWORD *)sub_1000544FC(v65, v66, (uint64_t *)&v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
        v68 = swift_bridgeObjectRelease(v67);
        (*(void (**)(char *, uint64_t, __n128))(v55 + 8))(v57, v58, v68);
        *(_WORD *)(v63 + 22) = 2048;
        v88 = (_QWORD *)v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
        *(_WORD *)(v63 + 32) = 2048;
        v88 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
        *(_WORD *)(v63 + 42) = 2112;
        v69 = v80;
        v88 = v80;
        v70 = v80;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
        v71 = v78;
        *v78 = v69;

        v72 = v77;
        _os_log_impl((void *)&_mh_execute_header, v77, v61, "Encountered invalid %s (%s) - numberOfItems(inSection:%ld) is %ld for %@", (uint8_t *)v63, 0x34u);
        v73 = sub_10006922C(&qword_100643AB0);
        swift_arrayDestroy(v71, 1, v73);
        swift_slowDealloc(v71, -1, -1);
        v74 = v79;
        swift_arrayDestroy(v79, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v74, -1, -1);
        swift_slowDealloc(v63, -1, -1);

        (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v81);
      }
      else
      {
        swift_bridgeObjectRelease_n(a3, 2);
        (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v58);

        v75 = v80;
        (*(void (**)(char *, uint64_t))(v85 + 8))(v54, v15);
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v86, 1, 1, v58);
    }
    else
    {
      v26 = swift_bridgeObjectRelease(a3);
      v28 = v86;
      v27 = v87;
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 16))(v86, a1, v87, v26);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v28, 0, 1, v27);
    }
  }
}

char *sub_10031A978(uint64_t a1, void *a2, void *a3)
{
  char *v3;
  char *v7;
  id v8;
  id v9;
  Class isa;
  char *v11;
  void *v12;
  char *v13;
  objc_super v15;

  *(_QWORD *)&v3[OBJC_IVAR____TtC5Files19DOCArchiveOperation_archivedItem] = 0;
  v7 = &v3[OBJC_IVAR____TtC5Files19DOCArchiveOperation_progressHandler];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Files19DOCArchiveOperation_progressObservation] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Files19DOCArchiveOperation_items] = a1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Files19DOCArchiveOperation_destinationFolder] = a2;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Files19DOCArchiveOperation_undoManager] = a3;
  sub_100298B84();
  swift_bridgeObjectRetain(a1);
  v8 = a2;
  v9 = a3;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v15.receiver = v3;
  v15.super_class = (Class)type metadata accessor for DOCArchiveOperation();
  v11 = (char *)objc_msgSendSuper2(&v15, "initWithItems:destinationFolder:", isa, v8);

  v12 = *(void **)&v11[OBJC_IVAR____TtC5Files19DOCArchiveOperation_undoManager];
  v13 = v11;
  objc_msgSend(v12, "registerUndoOperationForSender:", v13);

  return v13;
}

id sub_10031AAFC(uint64_t a1)
{
  uint64_t v1;
  id result;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  void *object;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;

  result = (id)_DocumentManagerBundle(a1);
  if (!result)
    goto LABEL_18;
  v3 = result;
  v4._countAndFlagsBits = 0x1000000000000027;
  v26._countAndFlagsBits = 0xD00000000000003CLL;
  v26._object = (void *)0x8000000100527AF0;
  v4._object = (void *)0x8000000100527AA0;
  v5._object = (void *)0x8000000100527AD0;
  v6.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v6.value._object = (void *)0xEB00000000656C62;
  v5._countAndFlagsBits = 0x1000000000000011;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v6, (NSBundle)v3, v5, v26);
  object = v7._object;

  v9._countAndFlagsBits = 0xD000000000000042;
  v10._object = (void *)0x8000000100527B30;
  v9._object = (void *)0x8000000100527B60;
  v10._countAndFlagsBits = 0xD000000000000028;
  v11 = DOCLocalizedDictionaryString(_:comment:)(v10, v9);
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files19DOCArchiveOperation_items);
  if (!((unint64_t)v12 >> 62))
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (id)swift_bridgeObjectRetain(v12);
    v14 = v13;
    if (v13)
      goto LABEL_4;
LABEL_15:
    swift_bridgeObjectRelease(v12);
    __break(1u);
    goto LABEL_16;
  }
  if (v12 < 0)
    v25 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files19DOCArchiveOperation_items);
  else
    v25 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v12);
  v14 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRetain(v12);
  result = (id)_CocoaArrayWrapper.endIndex.getter(v25);
  if (!result)
    goto LABEL_15;
LABEL_4:
  if ((v12 & 0xC000000000000001) != 0)
  {
LABEL_16:
    v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
    goto LABEL_7;
  }
  if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  v15 = *(id *)(v12 + 32);
LABEL_7:
  v16 = v15;
  v17 = objc_msgSend(v15, "displayName", swift_bridgeObjectRelease(v12).n128_f64[0]);

  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  if (v14 == 1)
  {
    swift_bridgeObjectRelease(v11._object);
    v21 = sub_10006922C((uint64_t *)&unk_100644560);
    v22 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v22 + 16) = xmmword_1004D9670;
    *(_QWORD *)(v22 + 56) = &type metadata for String;
    *(_QWORD *)(v22 + 64) = sub_10006A638();
    *(_QWORD *)(v22 + 32) = v18;
    *(_QWORD *)(v22 + 40) = v20;
    v23 = static String.localizedStringWithFormat(_:_:)(v7._countAndFlagsBits, v7._object, v22);
  }
  else
  {
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v7._object);
    v24 = sub_10006922C((uint64_t *)&unk_100644560);
    v22 = swift_allocObject(v24, 72, 7);
    *(_OWORD *)(v22 + 16) = xmmword_1004D9670;
    *(_QWORD *)(v22 + 56) = &type metadata for Int;
    *(_QWORD *)(v22 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v22 + 32) = v14;
    v23 = static String.localizedStringWithFormat(_:_:)(v11._countAndFlagsBits, v11._object, v22);
    object = v11._object;
  }
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(v22);
  return (id)v23;
}

char *sub_10031ADEC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[5];
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files19DOCArchiveOperation_items);
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files19DOCArchiveOperation_destinationFolder);
  v3 = *(void **)(v0 + OBJC_IVAR____TtC5Files19DOCArchiveOperation_undoManager);
  v4 = objc_allocWithZone((Class)type metadata accessor for DOCArchiveOperation());
  swift_bridgeObjectRetain(v1);
  v5 = sub_10031A978(v1, v2, v3);
  v6 = swift_allocObject(&unk_1005DD530, 24, 7);
  *(_QWORD *)(v6 + 16) = v5;
  v11[4] = sub_10031B248;
  v12 = v6;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_100083540;
  v11[3] = &unk_1005DD548;
  v7 = _Block_copy(v11);
  v8 = v12;
  v9 = v5;
  objc_msgSend(v9, "setArchiveCompletionBlock:", v7, swift_release(v8).n128_f64[0]);
  _Block_release(v7);

  return v9;
}

uint64_t sub_10031AF34()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  __n128 v5;
  id v6;
  id v7;
  char *v8;
  uint64_t v10;

  v1 = *(void **)&v0[OBJC_IVAR____TtC5Files19DOCArchiveOperation_archivedItem];
  if (!v1)
    return 0;
  v2 = sub_10006922C((uint64_t *)&unk_1006441A0);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1004D9B40;
  *(_QWORD *)(v3 + 32) = v1;
  v10 = v3;
  specialized Array._endMutation()(v3);
  v4 = *(void **)&v0[OBJC_IVAR____TtC5Files19DOCArchiveOperation_undoManager];
  objc_allocWithZone((Class)type metadata accessor for DOCDeleteOperation(0, v5));
  v6 = v1;
  v7 = v4;
  v8 = v0;
  return DOCDeleteOperation.init(items:originalOperation:undoManager:)(v10, v0, v7);
}

void sub_10031B044(void **a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t Strong;
  char *v6;
  void (*v7)(id);
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  char *v13;
  char v14[24];

  v3 = *a1;
  v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    v6 = (char *)Strong;
    v7 = *(void (**)(id))(Strong + OBJC_IVAR____TtC5Files19DOCArchiveOperation_progressHandler);
    if (v7)
    {
      v8 = *(_QWORD *)(Strong + OBJC_IVAR____TtC5Files19DOCArchiveOperation_progressHandler + 8);
      v9 = objc_msgSend(v3, "fractionCompleted", swift_retain().n128_f64[0]);
      v7(v9);
      sub_100087534((uint64_t)v7, v8);
    }
    if (objc_msgSend(v3, "isFinished"))
    {
      v10 = OBJC_IVAR____TtC5Files19DOCArchiveOperation_progressObservation;
      v11 = *(void **)&v6[OBJC_IVAR____TtC5Files19DOCArchiveOperation_progressObservation];
      if (v11)
      {
        v12 = v11;
        dispatch thunk of NSKeyValueObservation.invalidate()();

        v13 = *(char **)&v6[v10];
      }
      else
      {
        v13 = 0;
      }
      *(_QWORD *)&v6[v10] = 0;

      v6 = v13;
    }

  }
}

id sub_10031B158()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DOCArchiveOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DOCArchiveOperation()
{
  return objc_opt_self(_TtC5Files19DOCArchiveOperation);
}

uint64_t sub_10031B224()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10031B248(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;

  v2 = *(_QWORD *)(v1 + 16);
  v4 = *(id *)(v2 + OBJC_IVAR____TtC5Files19DOCArchiveOperation_archivedItem);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC5Files19DOCArchiveOperation_archivedItem) = a1;
  v3 = a1;

}

void sub_10031B284(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "currentLocationTitle");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

uint64_t sub_10031B2E8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3[12] = a1;
  v3[13] = a3;
  v5 = type metadata accessor for Logger(0);
  v3[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[15] = v6;
  v3[16] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DOCBrowserHistoryShiftAmount(0);
  v8 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a2;
  v3[17] = v8;
  v3[18] = v9;
  v10 = type metadata accessor for MainActor(0);
  v3[19] = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  return swift_task_switch(sub_10031B3A4, v11, v12);
}

uint64_t sub_10031B3A4()
{
  uint64_t v0;
  uint64_t v1;
  void *Strong;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t (*v36)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  __n128 v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62[2];

  v1 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 152));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = objc_msgSend(Strong, "traitCollection");
    if ((DOCUsePadIdiomForTraits(v4) & 1) != 0)
    {
      v5 = objc_msgSend(v4, "horizontalSizeClass");

      if (v5 == (id)2)
      {
        v6 = objc_msgSend(v3, "presentedViewController");
        if (!v6
          || (v7 = v6,
              v8 = objc_opt_self(QLPreviewController),
              v9 = swift_dynamicCastObjCClass(v7, v8),
              v7,
              !v9))
        {
          v10 = *(_QWORD *)(v0 + 136);
          v11 = sub_10006922C(&qword_10064EBF0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
          IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 160));
          v12 = *(_BYTE *)(v0 + 160);
          *(_BYTE *)(v0 + 161) = v12;
          v13 = objc_msgSend(v3, "effectiveFullBrowser");
          v14 = objc_msgSend(v13, "traitCollection");
          LODWORD(v10) = objc_msgSend(v14, "supportHistoryNavigation");

          if ((_DWORD)v10)
          {
            sub_10006922C((uint64_t *)&unk_100644190);
            if (qword_100640D60 != -1)
              swift_once(&qword_100640D60, sub_100083BC4);
            v15 = *(_QWORD *)(v0 + 136);
            v16 = static DOCAssociatedObjectStorage.attachedTo(_:storageKey:)(v13);
            KeyPath = swift_getKeyPath(&unk_1004E2760);
            v18 = swift_task_alloc(32);
            *(_QWORD *)(v18 + 16) = v13;
            (*(void (**)(uint64_t, uint64_t (*)@<X0>(_QWORD *@<X8>), uint64_t))((swift_isaMask & *(_QWORD *)v16)
                                                                                                 + 0x90))(KeyPath, sub_100144E5C, v18);
            swift_release(KeyPath);

            swift_task_dealloc(v18);
            v19 = *(_QWORD *)(v0 + 80);
            LOBYTE(v16) = sub_10043D788(v12, v15);
            swift_release(v19);

            if ((v16 & 1) != 0)
            {
              v21 = objc_msgSend(v3, "effectiveFullBrowser");
              v22 = objc_msgSend(v21, "traitCollection");
              v23 = objc_msgSend(v22, "supportHistoryNavigation");

              if (v23)
              {
                v24 = *(_QWORD *)(v0 + 136);
                v25 = (_QWORD *)static DOCAssociatedObjectStorage.attachedTo(_:storageKey:)(v21);
                v26 = swift_getKeyPath(&unk_1004E2760);
                v27 = swift_task_alloc(32);
                *(_QWORD *)(v27 + 16) = v21;
                (*(void (**)(uint64_t, uint64_t (*)(), uint64_t))((swift_isaMask & *v25) + 0x90))(v26, sub_1001463E4, v27);
                swift_release(v26);

                swift_task_dealloc(v27);
                v28 = *(_QWORD *)(v0 + 88);
                sub_100267FB4(v12, v24);
                swift_release(v28);
              }

LABEL_32:
              v58 = *(_QWORD *)(v0 + 128);
              v57 = *(_QWORD *)(v0 + 136);
              v59 = *(_QWORD **)(v0 + 96);
              v59[3] = sub_10006922C((uint64_t *)&unk_10064EBC0);
              v59[4] = sub_1000EAC68();
              v60 = sub_10006CBAC(v59);
              static IntentResult.result<>()(v60);

              sub_100322334(v57);
              swift_task_dealloc(v57);
              swift_task_dealloc(v58);
              v36 = *(uint64_t (**)(void))(v0 + 8);
              return v36();
            }
          }
          else
          {

          }
          v39 = *(_QWORD *)(v0 + 120);
          v38 = *(_QWORD *)(v0 + 128);
          v40 = *(_QWORD *)(v0 + 112);
          v41 = Logger.UI.unsafeMutableAddressor(v20);
          v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v38, v41, v40);
          v43 = Logger.logObject.getter(v42);
          v45 = static os_log_type_t.info.getter(v44);
          v46 = os_log_type_enabled(v43, v45);
          v48 = *(_QWORD *)(v0 + 120);
          v47 = *(_QWORD *)(v0 + 128);
          v49 = *(_QWORD *)(v0 + 112);
          if (v46)
          {
            v50 = swift_slowAlloc(22, -1);
            v51 = swift_slowAlloc(64, -1);
            v62[0] = v51;
            *(_DWORD *)v50 = 136315394;
            v61 = v47;
            *(_QWORD *)(v0 + 64) = sub_1000544FC(0xD00000000000001ELL, 0x8000000100527D60, v62);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
            *(_WORD *)(v50 + 12) = 2080;
            swift_beginAccess(v0 + 161, v0 + 40, 0, 0);
            v52 = *(unsigned __int8 *)(v0 + 161);
            v53 = 0x64726177726F66;
            if ((v52 & 1) == 0)
              v53 = 0x647261776B636162;
            v54 = 0xE700000000000000;
            if ((v52 & 1) == 0)
              v54 = 0xE800000000000000;
            if (v52 == 2)
              v55 = 28526;
            else
              v55 = v53;
            if (v52 == 2)
              v56 = 0xE200000000000000;
            else
              v56 = v54;
            *(_QWORD *)(v0 + 72) = sub_1000544FC(v55, v56, v62);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80);
            swift_bridgeObjectRelease(v56);
            _os_log_impl((void *)&_mh_execute_header, v43, v45, "%s Cannot perform navigation shift action with %s direction", (uint8_t *)v50, 0x16u);
            swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v51, -1, -1);
            swift_slowDealloc(v50, -1, -1);

            (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v61, v49);
          }
          else
          {

            (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
          }
          goto LABEL_32;
        }
      }
    }
    else
    {

    }
    v32 = sub_10021CAC4();
    v33 = swift_allocError(&type metadata for DOCLinkDeferredLocalizedError, v32, 0, 0);
    *v34 = 2;
    swift_willThrow(v33);

  }
  else
  {
    v29 = sub_10021CAC4();
    v30 = swift_allocError(&type metadata for DOCLinkDeferredLocalizedError, v29, 0, 0);
    *v31 = 2;
    swift_willThrow(v30);
  }
  v35 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v35);
  v36 = *(uint64_t (**)(void))(v0 + 8);
  return v36();
}

uint64_t sub_10031B9C8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[5] = a1;
  v3[6] = a3;
  v3[7] = *a2;
  v4 = type metadata accessor for MainActor(0);
  v3[8] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[9] = v5;
  v3[10] = v6;
  return swift_task_switch(sub_10031BA3C, v5, v6);
}

uint64_t sub_10031BA3C()
{
  uint64_t v0;
  uint64_t v1;
  void *Strong;
  _QWORD *v3;
  id v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  *(_QWORD *)(v0 + 88) = Strong;
  if (Strong)
  {
    v3 = *(_QWORD **)(v0 + 40);
    v4 = objc_msgSend(Strong, "effectiveFullBrowser");
    *(_QWORD *)(v0 + 96) = v4;
    v3[3] = sub_10006922C((uint64_t *)&unk_10064EBC0);
    v3[4] = sub_1000EAC68();
    v5 = sub_10006CBAC(v3);
    v6 = (_QWORD *)swift_task_alloc(dword_10065772C);
    *(_QWORD *)(v0 + 104) = v6;
    *v6 = v0;
    v6[1] = sub_10031BB54;
    return sub_10048B3F8((uint64_t)v5, (uint64_t)v4, *(_QWORD *)(v0 + 56));
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 64));
    v8 = sub_100322214();
    v9 = swift_allocError(&type metadata for DOCAppIntentsGenericError, v8, 0, 0);
    *v10 = 0;
    swift_willThrow(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10031BB54()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 72);
    v5 = *(_QWORD *)(v2 + 80);
    v6 = sub_100324028;
  }
  else
  {

    v4 = *(_QWORD *)(v2 + 72);
    v5 = *(_QWORD *)(v2 + 80);
    v6 = sub_100324024;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10031BBC0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[5] = a1;
  v3[6] = a3;
  v3[7] = *a2;
  v4 = type metadata accessor for MainActor(0);
  v3[8] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[9] = v5;
  v3[10] = v6;
  return swift_task_switch(sub_10031BC34, v5, v6);
}

uint64_t sub_10031BC34()
{
  uint64_t v0;
  uint64_t v1;
  void *Strong;
  _QWORD *v3;
  id v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  *(_QWORD *)(v0 + 88) = Strong;
  if (Strong)
  {
    v3 = *(_QWORD **)(v0 + 40);
    v4 = objc_msgSend(Strong, "effectiveFullBrowser");
    *(_QWORD *)(v0 + 96) = v4;
    v3[3] = sub_10006922C((uint64_t *)&unk_10064EBC0);
    v3[4] = sub_1000EAC68();
    v5 = sub_10006CBAC(v3);
    v6 = (_QWORD *)swift_task_alloc(dword_10065771C);
    *(_QWORD *)(v0 + 104) = v6;
    *v6 = v0;
    v6[1] = sub_10031BD4C;
    return sub_10048B864((uint64_t)v5, (uint64_t)v4, *(_QWORD *)(v0 + 56));
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 64));
    v8 = sub_100322214();
    v9 = swift_allocError(&type metadata for DOCAppIntentsGenericError, v8, 0, 0);
    *v10 = 0;
    swift_willThrow(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10031BD4C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 72);
    v5 = *(_QWORD *)(v2 + 80);
    v6 = sub_10031BDF8;
  }
  else
  {

    v4 = *(_QWORD *)(v2 + 72);
    v5 = *(_QWORD *)(v2 + 80);
    v6 = sub_10031BDB8;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10031BDB8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);

  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10031BDF8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(void **)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD **)(v0 + 40);

  swift_release(v2);
  sub_100322258(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10031BE50(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, "effectiveFullBrowser");
  objc_msgSend(v2, "dismissSearch");

  return sub_10031BE98(a1);
}

uint64_t sub_10031BE98(void *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  _UNKNOWN **v7;
  _QWORD v9[5];

  v2 = objc_msgSend(a1, "effectiveFullBrowser");
  v3 = objc_msgSend(v2, "currentViewController");

  v4 = type metadata accessor for DOCSidebarViewController(0);
  v5 = swift_dynamicCastClass(v3, v4);
  if (v5)
  {
    v6 = (id)v5;
    v7 = &protocol witness table for DOCSidebarViewController;
  }
  else
  {

    v6 = objc_msgSend(a1, "effectiveFullBrowser");
    v4 = sub_10004F2F0(0, &qword_100648590, &off_1005BCED8);
    v7 = &protocol witness table for DOCFullDocumentManagerViewController;
  }
  v9[3] = v4;
  v9[4] = v7;
  v9[0] = v6;
  sub_10007E7A0(v9, v4);
  ((void (__cdecl *)())v7[1])();
  return sub_100068588(v9);
}

void sub_10031BFAC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  id v31;
  NSURL *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;
  __n128 v49;
  void (*v50)(char *, uint64_t, __n128);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  char *v56;
  _QWORD aBlock[5];
  uint64_t v58;

  v55 = a3;
  v54 = a2;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v56 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10006922C((uint64_t *)&unk_10064EB70);
  __chkstk_darwin(v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v11);
  v52 = (uint64_t)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v51 - v14;
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v51 - v18;
  v53 = v3;
  v20 = *(void **)(v3 + OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController);
  if (!v20)
    goto LABEL_14;
  v21 = objc_msgSend(v20, "currentPreviewItem", v17);
  if (!v21)
    goto LABEL_14;
  v22 = v21;
  v23 = objc_opt_self(QLItem);
  v24 = (void *)swift_dynamicCastObjCClass(v22, v23);
  if (!v24)
  {
    swift_unknownObjectRelease(v22);
LABEL_14:
    v31 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
    URL._bridgeToObjectiveC()(v32);
    v34 = v33;
    v35 = swift_allocObject(&unk_1005DD670, 24, 7);
    swift_unknownObjectWeakInit(v35 + 16);
    v36 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v56, a1, v5);
    v37 = *(unsigned __int8 *)(v6 + 80);
    v38 = (v37 + 24) & ~v37;
    v39 = (v7 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
    v40 = swift_allocObject(&unk_1005DD6E8, v39 + 9, v37 | 7);
    *(_QWORD *)(v40 + 16) = v35;
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v40 + v38, v36, v5);
    v41 = v40 + v39;
    v42 = v55;
    *(_QWORD *)v41 = v55;
    *(_BYTE *)(v41 + 8) = v54 & 1;
    aBlock[4] = sub_100321E4C;
    v58 = v40;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100083540;
    aBlock[3] = &unk_1005DD700;
    v43 = _Block_copy(aBlock);
    v44 = v58;
    swift_bridgeObjectRetain(v42);
    swift_release(v44);
    objc_msgSend(v31, "fetchItemForURL:completionHandler:", v34, v43);
    _Block_release(v43);

    return;
  }
  v51 = a1;
  v25 = objc_msgSend(v24, "previewItemURL");
  if (v25)
  {
    v26 = v25;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v25);

    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v27(v19, 0, 1, v5);
  }
  else
  {
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v27(v19, 1, 1, v5);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v15, v51, v5);
  v27(v15, 0, 1, v5);
  v28 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_1002320B8((uint64_t)v19, (uint64_t)v10);
  sub_1002320B8((uint64_t)v15, v28);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v29((uint64_t)v10, 1, v5) == 1)
  {
    swift_unknownObjectRelease(v22);
    sub_10000CB4C((uint64_t)v15, &qword_100643470);
    sub_10000CB4C((uint64_t)v19, &qword_100643470);
    if (v29(v28, 1, v5) == 1)
    {
      sub_10000CB4C((uint64_t)v10, &qword_100643470);
      return;
    }
    goto LABEL_13;
  }
  v30 = v52;
  sub_1002320B8((uint64_t)v10, v52);
  if (v29(v28, 1, v5) == 1)
  {
    swift_unknownObjectRelease(v22);
    sub_10000CB4C((uint64_t)v15, &qword_100643470);
    sub_10000CB4C((uint64_t)v19, &qword_100643470);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v30, v5);
LABEL_13:
    sub_10000CB4C((uint64_t)v10, (uint64_t *)&unk_10064EB70);
    a1 = v51;
    goto LABEL_14;
  }
  v45 = v30;
  v46 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v56, v28, v5);
  v47 = sub_100323D44(&qword_1006418E0, (uint64_t)&protocol conformance descriptor for URL);
  v48 = dispatch thunk of static Equatable.== infix(_:_:)(v45, v46, v5, v47);
  v49 = swift_unknownObjectRelease(v22);
  v50 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
  v50(v46, v5, v49);
  sub_10000CB4C((uint64_t)v15, &qword_100643470);
  sub_10000CB4C((uint64_t)v19, &qword_100643470);
  ((void (*)(uint64_t, uint64_t))v50)(v52, v5);
  sub_10000CB4C((uint64_t)v10, &qword_100643470);
  a1 = v51;
  if ((v48 & 1) == 0)
    goto LABEL_14;
}

void sub_10031C4B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t Strong;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  void (*v31)(_BYTE *, uint64_t, uint64_t, uint64_t);
  id v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  id v35;
  _BYTE *v36;
  uint64_t v37;
  void (*v38)(_BYTE *, uint64_t);
  id v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  char v44;
  id v45;
  id v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  id v58;
  _BYTE v59[12];
  int v60;
  id v61;
  id v62;
  int v63;
  uint64_t v64;
  _BYTE *v65;
  id v66;
  uint64_t v67;
  _QWORD aBlock[5];
  uint64_t v69;
  char v70[24];

  v63 = a6;
  v64 = a5;
  v66 = a1;
  v67 = a4;
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v65 = &v59[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_10006922C((uint64_t *)&unk_10064EB70);
  __chkstk_darwin(v10);
  v12 = &v59[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v13);
  v15 = &v59[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v18 = &v59[-v17];
  __chkstk_darwin(v19);
  v21 = &v59[-v20];
  swift_beginAccess(a3 + 16, v70, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a3 + 16);
  if (Strong)
  {
    v23 = (void *)Strong;
    v24 = *(void **)(Strong + OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController);
    if (!v24)
      goto LABEL_25;
    v25 = objc_msgSend(v24, "currentPreviewItem");
    if (!v25)
      goto LABEL_25;
    v26 = v25;
    v27 = objc_opt_self(QLItem);
    v28 = (void *)swift_dynamicCastObjCClass(v26, v27);
    if (!v28)
    {
      v32 = v26;
      goto LABEL_24;
    }
    v61 = v28;
    v62 = v26;
    v29 = objc_msgSend(v28, "previewItemURL");
    if (v29)
    {
      v30 = v29;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v29);

      v31 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v31(v21, 0, 1, v7);
    }
    else
    {
      v31 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v31(v21, 1, 1, v7);
    }
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v18, v67, v7);
    v31(v18, 0, 1, v7);
    v33 = (uint64_t)&v12[*(int *)(v10 + 48)];
    sub_1002320B8((uint64_t)v21, (uint64_t)v12);
    sub_1002320B8((uint64_t)v18, v33);
    v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    if (v34((uint64_t)v12, 1, v7) == 1)
    {
      sub_10000CB4C((uint64_t)v18, &qword_100643470);
      sub_10000CB4C((uint64_t)v21, &qword_100643470);
      if (v34(v33, 1, v7) == 1)
      {
        sub_10000CB4C((uint64_t)v12, &qword_100643470);

        swift_unknownObjectRelease(v62);
        return;
      }
    }
    else
    {
      sub_1002320B8((uint64_t)v12, (uint64_t)v15);
      if (v34(v33, 1, v7) != 1)
      {
        v36 = v65;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 32))(v65, v33, v7);
        v37 = sub_100323D44(&qword_1006418E0, (uint64_t)&protocol conformance descriptor for URL);
        v60 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v36, v7, v37);
        v38 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
        v38(v36, v7);
        sub_10000CB4C((uint64_t)v18, &qword_100643470);
        sub_10000CB4C((uint64_t)v21, &qword_100643470);
        v38(v15, v7);
        sub_10000CB4C((uint64_t)v12, &qword_100643470);
        v35 = v62;
        if ((v60 & 1) != 0)
        {

          swift_unknownObjectRelease(v35);
          return;
        }
        goto LABEL_17;
      }
      sub_10000CB4C((uint64_t)v18, &qword_100643470);
      sub_10000CB4C((uint64_t)v21, &qword_100643470);
      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v15, v7);
    }
    sub_10000CB4C((uint64_t)v12, (uint64_t *)&unk_10064EB70);
    v35 = v62;
LABEL_17:
    v39 = objc_msgSend(v61, "fpItem");
    if (!v39)
    {
      v45 = v66;
      v46 = v66;
      swift_unknownObjectRelease(v35);
      if (!v45)
      {
LABEL_26:

        return;
      }

LABEL_25:
      v47 = swift_allocObject(&unk_1005DD670, 24, 7);
      swift_unknownObjectWeakInit(v47 + 16);
      v48 = v65;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v65, v67, v7);
      v49 = *(unsigned __int8 *)(v8 + 80);
      v50 = (v49 + 24) & ~v49;
      v51 = (v50 + v9 + 23) & 0xFFFFFFFFFFFFFFF8;
      v52 = swift_allocObject(&unk_1005DD738, v51 + 8, v49 | 7);
      *(_QWORD *)(v52 + 16) = v47;
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 32))(v52 + v50, v48, v7);
      v53 = v52 + ((v50 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
      v54 = v64;
      *(_QWORD *)v53 = v64;
      *(_BYTE *)(v53 + 8) = v63 & 1;
      v55 = v66;
      *(_QWORD *)(v52 + v51) = v66;
      aBlock[4] = sub_100321F58;
      v69 = v52;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10004A82C;
      aBlock[3] = &unk_1005DD750;
      v56 = _Block_copy(aBlock);
      v57 = v69;
      swift_bridgeObjectRetain(v54);
      v58 = v55;
      swift_release(v57);
      DOCRunInMainThread(v56);
      _Block_release(v56);
      goto LABEL_26;
    }
    v40 = v39;
    v41 = v66;
    if (v66)
    {
      sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
      v42 = v41;
      v43 = v40;
      v44 = static NSObject.== infix(_:_:)(v43, v42);

      swift_unknownObjectRelease(v35);
      if ((v44 & 1) != 0)
        goto LABEL_26;
      goto LABEL_25;
    }

    v32 = v35;
LABEL_24:
    swift_unknownObjectRelease(v32);
    goto LABEL_25;
  }
}

void sub_10031CA50(uint64_t a1, uint64_t a2, objc_class *a3, char a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t Strong;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  objc_class *v23;
  char v24;
  objc_class *v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  int v32;
  id v33;
  void *v34;
  id v35;
  char *v36;
  id v37;
  char *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  char *v52;
  id v53;
  id v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  int v59;
  unint64_t v60;
  void (*v61)(uint64_t, char *, uint64_t);
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  unint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  id v72;
  void **aBlock;
  uint64_t v74;
  uint64_t (*v75)(uint64_t);
  void *v76;
  void (*v77)();
  uint64_t v78;
  char v79[32];

  v72 = a5;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  __chkstk_darwin(v12);
  v14 = (char *)&v57 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v57 - v16;
  a1 += 16;
  swift_beginAccess(a1, v79, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v66 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    v68 = (char *)Strong;
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v19(v17, a2, v9);
    v63 = (void (*)(char *, char *, uint64_t))v19;
    v19(v14, (uint64_t)v17, v9);
    v20 = *(unsigned __int8 *)(v10 + 80);
    v21 = (v20 + 16) & ~v20;
    v22 = (v11 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v70 = v14;
    v23 = a3;
    v24 = a4;
    v67 = ((v22 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    v25 = v23;
    v64 = ((v22 + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
    v65 = v20 | 7;
    v26 = swift_allocObject(&unk_1005DD788, v64, v20 | 7);
    v69 = v10;
    v27 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
    v71 = v9;
    v28 = v9;
    v29 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    v30 = v67;
    v27(v26 + v21, v17, v28);
    v31 = v68;
    *(_QWORD *)(v26 + v22) = v68;
    *(_QWORD *)(v26 + v29) = v25;
    v32 = v24 & 1;
    *(_BYTE *)(v26 + v30) = v24 & 1;
    v33 = v72;
    *(_QWORD *)(v26 + ((v22 + 31) & 0xFFFFFFFFFFFFFFF8)) = v72;
    v34 = *(void **)&v31[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController];
    if (v34)
    {
      *(_QWORD *)&v31[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController] = 0;
      v35 = v33;
      v36 = v31;
      swift_bridgeObjectRetain_n(v25, 2);
      v37 = v35;
      v38 = v36;
      v77 = sub_100321FB4;
      v78 = v26;
      aBlock = _NSConcreteStackBlock;
      v74 = 1107296256;
      v75 = sub_10004A82C;
      v76 = &unk_1005DD7F0;
      v39 = _Block_copy(&aBlock);
      v40 = v78;
      swift_retain();
      swift_release(v40);
      objc_msgSend(v34, "dismissViewControllerAnimated:completion:", 0, v39);
      _Block_release(v39);
      swift_release(v26);

      (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);
    }
    else
    {
      v61 = v27;
      v62 = v21;
      if (v33)
      {
        v41 = v33;
        v60 = (v22 + 31) & 0xFFFFFFFFFFFFFFF8;
        v59 = v32;
        v42 = (void *)objc_opt_self(DOCManagedPermission);
        swift_bridgeObjectRetain_n(v25, 2);
        v43 = v41;
        v58 = v31;
        v44 = v43;
        v72 = objc_msgSend(v42, "defaultPermission");
        v45 = v66;
        v46 = v71;
        v63(v66, v70, v71);
        v47 = swift_allocObject(&unk_1005DD7B0, v64, v65);
        v61(v47 + v62, v45, v46);
        v48 = v58;
        *(_QWORD *)(v47 + v22) = v58;
        *(_QWORD *)(v47 + v29) = v25;
        *(_BYTE *)(v47 + v30) = v59;
        v49 = v44;
        *(_QWORD *)(v47 + v60) = v44;
        v77 = (void (*)())sub_100322018;
        v78 = v47;
        aBlock = _NSConcreteStackBlock;
        v74 = 1107296256;
        v75 = sub_10004A82C;
        v76 = &unk_1005DD7C8;
        v50 = _Block_copy(&aBlock);
        v51 = v78;
        v52 = v48;
        swift_bridgeObjectRetain(v25);
        v53 = v49;
        swift_release(v51);
        v54 = v72;
        objc_msgSend(v72, "adoptPersonaFromItem:andPerformBlock:", v53, v50);
        _Block_release(v50);
        swift_release(v26);

        (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);
      }
      else
      {
        swift_bridgeObjectRetain_n(v25, 2);
        v55 = v31;
        v56 = (uint64_t)v70;
        sub_10031D0F4(0, (uint64_t)v70, v55, v25, v24 & 1);
        swift_release(v26);
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v56, v71);
      }
    }
    swift_bridgeObjectRelease(v25);

  }
}

void sub_10031CED4(uint64_t a1, char *a2, objc_class *a3, int a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  objc_class *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  char *v28;
  id v29;
  _BYTE v30[12];
  int v31;
  id v32;
  id v33;
  _QWORD aBlock[5];
  uint64_t v35;

  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = &v30[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a5)
  {
    v14 = (void *)objc_opt_self(DOCManagedPermission);
    v32 = a5;
    v33 = objc_msgSend(v14, "defaultPermission");
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(&v30[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v10);
    v15 = *(unsigned __int8 *)(v11 + 80);
    v16 = (v15 + 16) & ~v15;
    v17 = (v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
    v31 = a4;
    v18 = a3;
    v19 = a2;
    v20 = (v17 + 31) & 0xFFFFFFFFFFFFFFF8;
    v21 = swift_allocObject(&unk_1005DD828, v20 + 8, v15 | 7);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(v21 + v16, v13, v10);
    v22 = v19;
    *(_QWORD *)(v21 + v17) = v19;
    v23 = v21 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)v23 = v18;
    *(_BYTE *)(v23 + 8) = v31 & 1;
    v24 = v32;
    *(_QWORD *)(v21 + v20) = v32;
    aBlock[4] = sub_100322018;
    v35 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004A82C;
    aBlock[3] = &unk_1005DD840;
    v25 = _Block_copy(aBlock);
    v26 = v35;
    swift_bridgeObjectRetain(v18);
    v27 = v24;
    v28 = v22;
    swift_release(v26);
    v29 = v33;
    objc_msgSend(v33, "adoptPersonaFromItem:andPerformBlock:", v27, v25);
    _Block_release(v25);

  }
  else
  {
    sub_10031D0F4(0, a1, a2, a3, a4 & 1);
  }
}

void sub_10031D0F4(uint64_t a1, uint64_t a2, char *a3, Class a4, char a5)
{
  id v8;
  id v9;
  NSURL *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  char *v17;
  uint64_t v18;
  Class isa;
  double v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  NSString v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  char *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  char v50[24];
  objc_super v51;

  if (a1)
  {
    v8 = objc_msgSend(objc_allocWithZone((Class)QLItem), "initWithFPItem:", a1);
  }
  else
  {
    v9 = objc_allocWithZone((Class)QLItem);
    URL._bridgeToObjectiveC()(v10);
    v12 = v11;
    v8 = objc_msgSend(v9, "initWithURL:", v11);

  }
  v13 = sub_10006922C((uint64_t *)&unk_1006441A0);
  v14 = swift_allocObject(v13, 40, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1004D9B40;
  *(_QWORD *)(v14 + 32) = v8;
  v47[0] = v14;
  specialized Array._endMutation()(v14);
  v15 = v47[0];
  v16 = (objc_class *)type metadata accessor for DOCQLItemsPreviewController();
  v17 = (char *)objc_allocWithZone(v16);
  *(_QWORD *)&v17[OBJC_IVAR____TtC5Files27DOCQLItemsPreviewController__nonSourceBasedQLItems] = v47[0];
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0)
      v44 = v15;
    else
      v44 = v15 & 0xFFFFFFFFFFFFFF8;
    v45 = v8;
    swift_bridgeObjectRetain(v15);
    v46 = sub_10006922C(&qword_10064EB80);
    v18 = _bridgeCocoaArray<A>(_:)(v44, v46);
  }
  else
  {
    swift_bridgeObjectRetain_n(v15, 2);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v8);
    v18 = v15;
  }
  swift_bridgeObjectRelease(v15);
  sub_10006922C(&qword_10064EB80);
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v20 = swift_bridgeObjectRelease(v18).n128_u64[0];
  v51.receiver = v17;
  v51.super_class = v16;
  v21 = objc_msgSendSuper2(&v51, "initWithPreviewItems:", isa, v20);

  objc_msgSend(v21, "setDelegate:", a3);
  v22 = objc_msgSend(v21, "userActivity");

  if (!v22)
  {
    v23 = *(_QWORD *)&a3[OBJC_IVAR____TtC5Files21DRIMainViewController_quicklookStateRestorationActivityIdentifier + 8];
    v24 = objc_allocWithZone((Class)NSUserActivity);
    v25 = v21;
    swift_bridgeObjectRetain(v23);
    v26 = String._bridgeToObjectiveC()();
    v27 = objc_msgSend(v24, "initWithActivityType:", v26, swift_bridgeObjectRelease(v23).n128_f64[0]);

    objc_msgSend(v25, "setUserActivity:", v27);
  }
  v28 = objc_msgSend(v21, "userActivity", v47[0]);
  if (v28)
  {
    v29 = v28;
    if (a4)
      a4 = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v29, "setUserInfo:", a4);

  }
  objc_msgSend(v21, "setAlwaysDisplayPreviewItemTitle:", 1);
  if (qword_100640EB0 != -1)
    swift_once(&qword_100640EB0, sub_10021F734);
  swift_beginAccess(&static DOCPreviewRouter.shared, v50, 0, 0);
  v30 = static DOCPreviewRouter.shared;
  swift_retain();
  v31 = a3;
  sub_10021F8B0(v21, a5 & 1, v31, 0, 0);
  v32 = *(void **)&v31[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController];
  *(_QWORD *)&v31[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController] = v21;
  v33 = v21;

  sub_10000F580((uint64_t)v47);
  v34 = v48;
  if (v48)
  {
    v35 = v49;
    sub_10007E7A0(v47, v48);
    (*(void (**)(uint64_t, uint64_t))(v35 + 32))(v34, v35);
    sub_100068588(v47);
  }
  else
  {
    sub_10000CB4C((uint64_t)v47, &qword_10064EB50);
  }
  sub_10000F580((uint64_t)v47);
  v36 = v48;
  if (v48)
  {
    v37 = v49;
    sub_10007E7A0(v47, v48);
    (*(void (**)(uint64_t, uint64_t))(v37 + 24))(v36, v37);
    sub_100068588(v47);
  }
  else
  {
    sub_10000CB4C((uint64_t)v47, &qword_10064EB50);
  }
  sub_10000F580((uint64_t)v47);
  v38 = v48;
  if (v48)
  {
    v39 = v49;
    sub_10007E7A0(v47, v48);
    (*(void (**)(uint64_t, uint64_t))(v39 + 40))(v38, v39);
    sub_100068588(v47);
  }
  else
  {
    sub_10000CB4C((uint64_t)v47, &qword_10064EB50);
  }
  v47[0] = v33;
  KeyPath = swift_getKeyPath(&unk_1004E2738);
  v41 = swift_allocObject(&unk_1005DD670, 24, 7);
  swift_unknownObjectWeakInit(v41 + 16);
  v42 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 1, sub_100321D9C, v41, &protocol witness table for NSObject);
  swift_release(v41);
  swift_release(KeyPath);
  v43 = *(void **)&v31[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewItemObserver];
  *(_QWORD *)&v31[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewItemObserver] = v42;

  swift_release(v30);
}

uint64_t sub_10031D5F4(uint64_t a1, int a2, char a3, char a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v26;
  char *v27;
  char v28;
  void *v29;
  char *v30;
  void *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char *v37;
  _QWORD aBlock[5];
  uint64_t v39;

  v35 = a5;
  v36 = a2;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend((id)objc_opt_self(DOCFeature), "supportsQuickLookInSharedWindow");
  sub_1002320B8(a1, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    v19 = sub_10000CB4C((uint64_t)v14, &qword_100643470);
    v20 = Logger.Application.unsafeMutableAddressor(v19);
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v20, v8);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Attempted to quick look a nil url. Ignoring", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    if ((a3 & 1) != 0)
    {
      sub_10031F070((uint64_t)v18, a4 & 1);
    }
    else if ((a4 & 1) != 0)
    {
      v26 = swift_allocObject(&unk_1005DD5F8, 25, 7);
      v27 = v37;
      *(_QWORD *)(v26 + 16) = v37;
      v28 = v36 & 1;
      *(_BYTE *)(v26 + 24) = v36 & 1;
      v29 = *(void **)&v27[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController];
      if (v29)
      {
        *(_QWORD *)&v27[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController] = 0;
        v30 = v27;
        aBlock[4] = sub_100321D50;
        v39 = v26;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_10004A82C;
        aBlock[3] = &unk_1005DD610;
        v31 = _Block_copy(aBlock);
        v32 = v39;
        swift_retain();
        swift_release(v32);
        objc_msgSend(v29, "dismissViewControllerAnimated:completion:", 0, v31);
        _Block_release(v31);

        swift_release(v26);
      }
      else
      {
        v33 = v27;
        sub_10031D930(v33, v28);

        swift_release(v26);
      }
    }
    else
    {
      sub_10031BFAC((uint64_t)v18, v36 & 1, v35);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
}

void sub_10031D930(void *a1, char a2)
{
  id v4;
  id v5;
  __n128 v6;
  uint64_t v7;
  id v8;
  void *v9;
  char *v10;
  id v11;
  id v12;
  id v13;
  char *v14;
  id v15;
  id v16;
  void **v17;
  void *v18;
  id v19;
  id v20;
  char *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  char v44[24];
  char v45[24];
  char v46[24];
  char v47[24];

  v4 = objc_msgSend(a1, "configuration");
  v5 = objc_msgSend(v4, "sceneIdentifier");

  if (v5)
  {
    v7 = qword_1006411A8;
    v8 = v5;
    if (v7 != -1)
      swift_once(&qword_1006411A8, sub_100470A10);
    v9 = (void *)qword_100656EE0;
    v10 = (char *)objc_msgSend((id)qword_100656EE0, "objectForKey:", v8);
    if (!v10)
    {
      v11 = objc_allocWithZone((Class)type metadata accessor for DOCPreviewController(0));
      v10 = (char *)DOCPreviewController.init()();
      objc_msgSend(v9, "setObject:forKey:", v10, v8);
    }

    objc_msgSend(v10, "setDelegate:", a1);
    v12 = objc_msgSend(a1, "effectiveFullBrowser");
    v13 = objc_msgSend(v12, "documentManager");

    v14 = &v10[OBJC_IVAR____TtC5Files20DOCPreviewController_editingDelegate];
    swift_beginAccess(&v10[OBJC_IVAR____TtC5Files20DOCPreviewController_editingDelegate], v47, 1, 0);
    *((_QWORD *)v14 + 1) = &protocol witness table for DOCDocumentManager;
    swift_unknownObjectWeakAssign(v14, v13);

    v15 = objc_msgSend(a1, "effectiveFullBrowser");
    v16 = objc_msgSend(v15, "configuration");

    v17 = (void **)&v10[OBJC_IVAR____TtC5Files20DOCPreviewController_configuration];
    swift_beginAccess(&v10[OBJC_IVAR____TtC5Files20DOCPreviewController_configuration], v46, 1, 0);
    v18 = *v17;
    *v17 = v16;

    v19 = objc_msgSend(a1, "effectiveFullBrowser");
    v20 = objc_msgSend(v19, "actionManager");

    v21 = &v10[OBJC_IVAR____TtC5Files20DOCPreviewController_actionManager];
    swift_beginAccess(&v10[OBJC_IVAR____TtC5Files20DOCPreviewController_actionManager], v45, 1, 0);
    swift_unknownObjectWeakAssign(v21, v20);

    v22 = qword_100640EB0;
    v23 = a1;
    if (v22 != -1)
      swift_once(&qword_100640EB0, sub_10021F734);
    swift_beginAccess(&static DOCPreviewRouter.shared, v44, 0, 0);
    v24 = static DOCPreviewRouter.shared;
    v25 = swift_allocObject(&unk_1005DD648, 24, 7);
    *(_QWORD *)(v25 + 16) = v23;
    v26 = (char *)v23;
    swift_retain();
    sub_10021F8B0(v10, a2 & 1, v26, (uint64_t)sub_100321D5C, v25);
    swift_release(v25);
    v27 = *(void **)&v26[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController];
    *(_QWORD *)&v26[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController] = v10;
    v28 = v10;

    sub_10000F580((uint64_t)v41);
    v29 = v42;
    if (v42)
    {
      v30 = v43;
      sub_10007E7A0(v41, v42);
      (*(void (**)(uint64_t, uint64_t))(v30 + 32))(v29, v30);
      sub_100068588(v41);
    }
    else
    {
      sub_10000CB4C((uint64_t)v41, &qword_10064EB50);
    }
    sub_10000F580((uint64_t)v41);
    v32 = v42;
    if (v42)
    {
      v33 = v43;
      sub_10007E7A0(v41, v42);
      (*(void (**)(uint64_t, uint64_t))(v33 + 24))(v32, v33);
      sub_100068588(v41);
    }
    else
    {
      sub_10000CB4C((uint64_t)v41, &qword_10064EB50);
    }
    sub_10000F580((uint64_t)v41);
    v34 = v42;
    if (v42)
    {
      v35 = v43;
      sub_10007E7A0(v41, v42);
      (*(void (**)(uint64_t, uint64_t))(v35 + 40))(v34, v35);
      sub_100068588(v41);
    }
    else
    {
      sub_10000CB4C((uint64_t)v41, &qword_10064EB50);
    }
    v41[0] = v28;
    KeyPath = swift_getKeyPath(&unk_1004E2708);
    v37 = swift_allocObject(&unk_1005DD670, 24, 7);
    swift_unknownObjectWeakInit(v37 + 16);
    v38 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 1, sub_100321D9C, v37, &protocol witness table for NSObject);
    swift_release(v37);
    swift_release(KeyPath);
    v39 = *(void **)&v26[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewItemObserver];
    *(_QWORD *)&v26[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewItemObserver] = v38;

    swift_release(v24);
  }
  else
  {
    v40 = *(id *)DOCLog.Source.unsafeMutableAddressor(v6);
    v31 = static os_log_type_t.debug.getter();
    os_log(_:dso:log:type:_:)("Scene Identifier was nil. This may not be not be a problem. Reproduce and investigate if it is ok.", 98, 2, &_mh_execute_header, v40, v31, _swiftEmptyArrayStorage);

  }
}

void sub_10031DE38(void *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = (void *)objc_opt_self(DOCUISession);
  v3 = swift_allocObject(&unk_1005DD698, 24, 7);
  *(_QWORD *)(v3 + 16) = a1;
  v7[4] = sub_100321DB4;
  v8 = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_10004A82C;
  v7[3] = &unk_1005DD6B0;
  v4 = _Block_copy(v7);
  v5 = v8;
  v6 = a1;
  swift_release(v5);
  objc_msgSend(v2, "performAfterCATransactionCommits:", v4);
  _Block_release(v4);
}

void sub_10031DEFC(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v2, "postNotificationName:object:", CFSTR("DOCQLPreviewFinishLoadingNotificationName"), a1);

}

uint64_t sub_10031DF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  _BYTE v18[24];
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v18, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_10000F580((uint64_t)v19);

    v6 = v20;
    if (v20)
    {
      v7 = v21;
      sub_10007E7A0(v19, v20);
      (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
      sub_100068588(v19);
    }
    else
    {
      sub_10000CB4C((uint64_t)v19, &qword_10064EB50);
    }
  }
  swift_beginAccess(v3, v17, 0, 0);
  v8 = swift_unknownObjectWeakLoadStrong(v3);
  if (v8)
  {
    v9 = (void *)v8;
    sub_10000F580((uint64_t)v19);

    v10 = v20;
    if (v20)
    {
      v11 = v21;
      sub_10007E7A0(v19, v20);
      (*(void (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
      sub_100068588(v19);
    }
    else
    {
      sub_10000CB4C((uint64_t)v19, &qword_10064EB50);
    }
  }
  swift_beginAccess(v3, &v16, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v13 = (void *)result;
    sub_10000F580((uint64_t)v19);

    v14 = v20;
    if (v20)
    {
      v15 = v21;
      sub_10007E7A0(v19, v20);
      (*(void (**)(uint64_t, uint64_t))(v15 + 40))(v14, v15);
      return sub_100068588(v19);
    }
    else
    {
      return sub_10000CB4C((uint64_t)v19, &qword_10064EB50);
    }
  }
  return result;
}

void sub_10031E0F8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Strong;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  __n128 v18;
  os_log_type_t v19;
  uint8_t *v20;
  id v21;
  id v22;
  char *v23;
  void **v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  _QWORD aBlock[5];
  uint64_t v35;
  char v36[24];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  a2 += 16;
  swift_beginAccess(a2, v36, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v14 = (void *)Strong;
    if ((a1 & 1) != 0)
    {
      v15 = Logger.UI.unsafeMutableAddressor(Strong);
      v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v15, v6);
      v17 = Logger.logObject.getter(v16);
      v19 = static os_log_type_t.info.getter(v18);
      if (os_log_type_enabled(v17, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v19, "[Interaction] Clearing lastOpenedItem in documentBrowser:didPickDocumentsAt: (opened in an other app)", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v21 = objc_msgSend(v14, "configuration");
      v22 = objc_msgSend(v21, "sceneIdentifier");

      v23 = (char *)_s5Files21DOCInteractionManagerC06sharedC03forACSo8NSStringCSg_tFZ_0(v22);
      v24 = (void **)&v23[OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem];
      swift_beginAccess(&v23[OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem], aBlock, 1, 0);
      v25 = *v24;
      *v24 = 0;
      sub_1000AE638(v25);

    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v10);
      v26 = *(unsigned __int8 *)(v11 + 80);
      v27 = (v26 + 16) & ~v26;
      v28 = (v12 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
      v29 = swift_allocObject(&unk_1005DD9B8, v28 + 8, v26 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v29 + v27, (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
      *(_QWORD *)(v29 + v28) = v14;
      aBlock[4] = sub_100323DF8;
      v35 = v29;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10004A82C;
      aBlock[3] = &unk_1005DD9D0;
      v30 = _Block_copy(aBlock);
      v31 = v35;
      v32 = v14;
      swift_release(v31);
      DOCRunInMainThread(v30);

      _Block_release(v30);
    }
  }
}

void sub_10031E3C8(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  char *v37;
  void **v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  __n128 v44;
  os_log_type_t v45;
  uint8_t *v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  char *v54;
  void **v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  __n128 v61;
  os_log_type_t v62;
  uint8_t *v63;
  id v64;
  id v65;
  id v66;
  id v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  __n128 v73;
  os_log_type_t v74;
  uint8_t *v75;
  char v76;
  char v77;
  uint8_t *v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  void *v84;
  _BYTE v85[24];

  v4 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v4);
  v6 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10006922C(&qword_100643EC0);
  __chkstk_darwin(v7);
  v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v82 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v82 - v18;
  sub_10033B4A4();
  if (v20)
  {
    v84 = v20;
    if (objc_msgSend((id)objc_opt_self(DOCFeature), "supportsQuickLookInSharedWindow"))
    {
      v21 = objc_msgSend(v84, "delegate");
      if (v21)
      {
        v22 = v21;
        v23 = type metadata accessor for QuickLookSceneDelegate(0);
        if (swift_dynamicCastClass(v22, v23))
        {
          v83 = v22;
          v24 = sub_10006922C((uint64_t *)&unk_100644550);
          v25 = type metadata accessor for URL(0);
          v26 = v10;
          v27 = *(_QWORD *)(v25 - 8);
          v28 = *(unsigned __int8 *)(v27 + 80);
          v29 = (v28 + 32) & ~v28;
          v30 = swift_allocObject(v24, v29 + *(_QWORD *)(v27 + 72), v28 | 7);
          *(_OWORD *)(v30 + 16) = xmmword_1004D9670;
          v31 = v30 + v29;
          (*(void (**)(uint64_t, void *, uint64_t))(v27 + 16))(v31, a1, v25);
          sub_1003B43D8(v30);
          swift_setDeallocating(v30);
          swift_arrayDestroy(v31, *(_QWORD *)(v30 + 16), v25);
          swift_deallocClassInstance(v30, 32, 7);
          v32 = objc_msgSend(a2, "viewIfLoaded");
          v33 = objc_msgSend(v32, "window");

          v34 = objc_msgSend(v33, "windowScene");
          sub_10033AFC8(v84, v34);

          v35 = objc_msgSend(a2, "configuration");
          v36 = objc_msgSend(v35, "sceneIdentifier");

          v37 = (char *)_s5Files21DOCInteractionManagerC06sharedC03forACSo8NSStringCSg_tFZ_0(v36);
          v38 = (void **)&v37[OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem];
          swift_beginAccess(&v37[OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem], v85, 1, 0);
          v39 = *v38;
          *v38 = 0;
          sub_1000AE638(v39);

          v41 = Logger.UI.unsafeMutableAddressor(v40);
          v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v19, v41, v26);
          v43 = Logger.logObject.getter(v42);
          v45 = static os_log_type_t.info.getter(v44);
          if (os_log_type_enabled(v43, v45))
          {
            v46 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v46 = 0;
            _os_log_impl((void *)&_mh_execute_header, v43, v45, "[Interaction] Clearing lastOpenedItem in documentBrowser:didPickDocumentsAt: (focus on existing scene)", v46, 2u);
            swift_slowDealloc(v46, -1, -1);
          }

          swift_unknownObjectRelease(v83);
          (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v26);
          return;
        }
        swift_unknownObjectRelease(v22);
      }

      return;
    }

  }
  sub_10031F91C((uint64_t)a1);
  if (v47)
  {
    v48 = v47;
    v49 = objc_msgSend(a2, "viewIfLoaded");
    v50 = objc_msgSend(v49, "window");

    v51 = objc_msgSend(v50, "windowScene");
    sub_10033AFC8(v48, v51);

    v52 = objc_msgSend(a2, "configuration");
    v53 = objc_msgSend(v52, "sceneIdentifier");

    v54 = (char *)_s5Files21DOCInteractionManagerC06sharedC03forACSo8NSStringCSg_tFZ_0(v53);
    v55 = (void **)&v54[OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem];
    swift_beginAccess(&v54[OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem], v85, 1, 0);
    v56 = *v55;
    *v55 = 0;
    sub_1000AE638(v56);

    v58 = Logger.UI.unsafeMutableAddressor(v57);
    v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v58, v10);
    v60 = Logger.logObject.getter(v59);
    v62 = static os_log_type_t.info.getter(v61);
    if (os_log_type_enabled(v60, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v62, "[Interaction] Clearing lastOpenedItem in documentBrowser:didPickDocumentsAt: (focus on existing scene)", v63, 2u);
      swift_slowDealloc(v63, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    return;
  }
  v64 = objc_msgSend(a2, "viewIfLoaded");
  v65 = objc_msgSend(v64, "window");

  v66 = objc_msgSend(v65, "windowScene");
  if (!v66)
    goto LABEL_17;
  URL.contentType.getter(v67);
  v68 = UIWindowScene.configurationSupportsPreviewInNewWindow(contentType:)(v9);

  v67 = (id)sub_10000CB4C((uint64_t)v9, &qword_100643EC0);
  if ((v68 & 1) == 0)
  {
    LOBYTE(v66) = 0;
LABEL_17:
    v69 = 1;
    goto LABEL_18;
  }
  v67 = objc_msgSend((id)objc_opt_self(DOCFeature), "supportsQuickLookInSharedWindow");
  v69 = (char)v67;
  LOBYTE(v66) = 1;
LABEL_18:
  v70 = Logger.UI.unsafeMutableAddressor(v67);
  v71 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v70, v10);
  v72 = Logger.logObject.getter(v71);
  v74 = static os_log_type_t.info.getter(v73);
  if (os_log_type_enabled(v72, v74))
  {
    v75 = (uint8_t *)swift_slowAlloc(2, -1);
    v84 = a1;
    v76 = v69;
    v77 = (char)v66;
    v66 = (id)v10;
    v78 = v75;
    *(_WORD *)v75 = 0;
    _os_log_impl((void *)&_mh_execute_header, v72, v74, "[Interaction] Opening in Quick Look)", v75, 2u);
    v79 = v78;
    v10 = (uint64_t)v66;
    LOBYTE(v66) = v77;
    v69 = v76;
    a1 = v84;
    swift_slowDealloc(v79, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v80 = type metadata accessor for URL(0);
  v81 = *(_QWORD *)(v80 - 8);
  (*(void (**)(char *, void *, uint64_t))(v81 + 16))(v6, a1, v80);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v6, 0, 1, v80);
  sub_10031D5F4((uint64_t)v6, 1, (char)v66, v69, 0);
  sub_10000CB4C((uint64_t)v6, &qword_100643470);
}

void sub_10031EB54(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *Strong;
  NSObject *v14;
  id v15;
  id v16;
  char *v17;
  void **v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  __n128 v24;
  os_log_type_t v25;
  uint8_t *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  _QWORD aBlock[5];
  uint64_t v36;
  char v37[24];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  a2 += 16;
  swift_beginAccess(a2, v37, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v14 = Strong;
    if ((a1 & 1) != 0)
    {
      v15 = -[NSObject configuration](Strong, "configuration");
      v16 = objc_msgSend(v15, "sceneIdentifier");

      v17 = (char *)_s5Files21DOCInteractionManagerC06sharedC03forACSo8NSStringCSg_tFZ_0(v16);
      v18 = (void **)&v17[OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem];
      swift_beginAccess(&v17[OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem], aBlock, 1, 0);
      v19 = *v18;
      *v18 = 0;
      sub_1000AE638(v19);

      v21 = Logger.UI.unsafeMutableAddressor(v20);
      v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v21, v6);
      v23 = Logger.logObject.getter(v22);
      v25 = static os_log_type_t.info.getter(v24);
      if (os_log_type_enabled(v23, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v25, "[Interaction] Clearing lastOpenedItem in documentBrowser:didPickImportedURLs: (opened in an other app)", v26, 2u);
        swift_slowDealloc(v26, -1, -1);
        v27 = v14;
      }
      else
      {
        v27 = v23;
        v23 = v14;
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v10);
      v28 = *(unsigned __int8 *)(v11 + 80);
      v29 = (v28 + 24) & ~v28;
      v30 = swift_allocObject(&unk_1005DD940, v29 + v12, v28 | 7);
      *(_QWORD *)(v30 + 16) = v14;
      (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v30 + v29, (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
      aBlock[4] = sub_100323CB4;
      v36 = v30;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10004A82C;
      aBlock[3] = &unk_1005DD958;
      v31 = _Block_copy(aBlock);
      v32 = v36;
      v33 = v14;
      swift_release(v32);
      DOCRunInMainThread(v31);

      _Block_release(v31);
    }
  }
}

uint64_t sub_10031EE2C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v4 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10006922C(&qword_100643EC0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(a1, "viewIfLoaded", v8);
  v12 = objc_msgSend(v11, "window");

  v13 = objc_msgSend(v12, "windowScene");
  if (v13)
  {
    URL.contentType.getter(v14);
    v15 = UIWindowScene.configurationSupportsPreviewInNewWindow(contentType:)(v10);

    sub_10000CB4C((uint64_t)v10, &qword_100643EC0);
  }
  else
  {
    v15 = 0;
  }
  v16 = objc_msgSend((id)objc_opt_self(DOCFeature), "supportsQuickLookInSharedWindow");
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v6, a2, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v6, 0, 1, v17);
  sub_10031D5F4((uint64_t)v6, 1, v15 & 1, v16, 0);
  return sub_10000CB4C((uint64_t)v6, &qword_100643470);
}

uint64_t sub_10031EFFC(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;

  v9 = type metadata accessor for URL(0);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a4, v9);
  v11 = a3;
  v12 = a1;
  a5(v10);

  return swift_bridgeObjectRelease(v10);
}

void sub_10031F070(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  char *v14;
  void **v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  __n128 v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  _BYTE v25[24];
  uint64_t v26;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000F580((uint64_t)v25);
  if (v26)
  {
    v9 = sub_10006922C(&qword_10064EB58);
    v10 = type metadata accessor for BrowserSceneDelegate();
    if ((swift_dynamicCast(&v24, v25, v9, v10, 6) & 1) != 0)
    {
      v11 = v24;
      v12 = objc_msgSend(v2, "configuration");
      v13 = objc_msgSend(v12, "sceneIdentifier");

      v14 = (char *)_s5Files21DOCInteractionManagerC06sharedC03forACSo8NSStringCSg_tFZ_0(v13);
      v15 = (void **)&v14[OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem];
      swift_beginAccess(&v14[OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem], v25, 1, 0);
      v16 = *v15;
      *v15 = 0;
      sub_1000AE638(v16);

      v18 = Logger.UI.unsafeMutableAddressor(v17);
      v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, v18, v5);
      v20 = Logger.logObject.getter(v19);
      v22 = static os_log_type_t.info.getter(v21);
      if (os_log_type_enabled(v20, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v22, "[Interaction] Clearing lastOpenedItem in documentBrowser:didPickDocumentsAt: (focus on existing scene)", v23, 2u);
        swift_slowDealloc(v23, -1, -1);
      }

      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
      sub_10020C914(a1, a2 & 1);

    }
  }
  else
  {
    sub_10000CB4C((uint64_t)v25, &qword_10064EB50);
  }
}

id sub_10031F5E0(uint64_t a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  char *v5;
  NSArray v6;
  id v7;
  objc_super v9;

  *(_QWORD *)&v1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewItemObserver] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentLocationTitleObserver] = 0;
  v3 = &v1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookURL];
  v4 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = &v1[OBJC_IVAR____TtC5Files21DRIMainViewController_quicklookStateRestorationActivityIdentifier];
  *(_QWORD *)v5 = 0xD000000000000024;
  *((_QWORD *)v5 + 1) = 0x8000000100527D80;
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Files21DRIMainViewController____lazy_storage___internalConfiguration] = 0;
  if (a1)
  {
    v6.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v6.super.isa = 0;
  }
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for DRIMainViewController(0);
  v7 = objc_msgSendSuper2(&v9, "initForOpeningFilesWithContentTypes:", v6.super.isa);

  return v7;
}

id sub_10031F724(void *a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  char *v5;
  id v6;
  objc_super v8;

  *(_QWORD *)&v1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewItemObserver] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentLocationTitleObserver] = 0;
  v3 = &v1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookURL];
  v4 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = &v1[OBJC_IVAR____TtC5Files21DRIMainViewController_quicklookStateRestorationActivityIdentifier];
  *(_QWORD *)v5 = 0xD000000000000024;
  *((_QWORD *)v5 + 1) = 0x8000000100527D80;
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Files21DRIMainViewController____lazy_storage___internalConfiguration] = 0;
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for DRIMainViewController(0);
  v6 = objc_msgSendSuper2(&v8, "initWithCoder:", a1);

  return v6;
}

id sub_10031F85C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DRIMainViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10031F914()
{
  return type metadata accessor for DRIMainViewController(0);
}

void sub_10031F91C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)(_QWORD *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  SEL *v48;
  uint64_t v49;
  unint64_t i;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  double v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  __n128 v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint64_t v91;
  char *v92;
  id v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  id v103;
  NSObject *v104;
  os_log_type_t v105;
  int v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  id v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  os_log_t v120;
  uint64_t v121;
  int64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  NSObject *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  unint64_t v131;
  _QWORD *v132;
  char *v133;
  unint64_t v134;
  __int128 v135;
  char *v136;
  uint64_t v137;
  uint64_t (*v138)(char *, uint64_t);
  uint64_t v139;
  void (*v140)(char *, uint64_t, uint64_t);
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  os_log_t v144;
  int64_t v145;
  id v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD v156[5];
  _QWORD v157[3];
  uint64_t v158;
  uint64_t v159;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v129 = (char *)&v123 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v133 = (char *)&v123 - v6;
  __chkstk_darwin(v7);
  v136 = (char *)&v123 - v8;
  __chkstk_darwin(v9);
  v11 = (char *)&v123 - v10;
  v12 = type metadata accessor for URL(0);
  v156[3] = v12;
  v156[4] = &off_1005D3410;
  v13 = sub_10006CBAC(v156);
  v14 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v132 = v13;
  v15 = v14(v13, a1, v12);
  v16 = Logger.Application.unsafeMutableAddressor(v15);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v139 = v16;
  v140 = v17;
  ((void (*)(char *))v17)(v11);
  v18 = sub_100092328((uint64_t)v156, (uint64_t)v157);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter();
  v21 = os_log_type_enabled(v19, v20);
  v141 = v2;
  if (v21)
  {
    v22 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v149 = v23;
    *(_DWORD *)v22 = 136315394;
    v152 = sub_1000544FC(0xD000000000000018, 0x8000000100527DF0, (uint64_t *)&v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153);
    *(_WORD *)(v22 + 12) = 2080;
    sub_10007E7A0(v157, v158);
    v152 = ((uint64_t (*)(void))URL.absoluteString.getter)();
    v153 = v24;
    v25 = sub_10006922C(&qword_100648C80);
    v26 = String.init<A>(describing:)(&v152, v25);
    v28 = v27;
    v152 = sub_1000544FC(v26, v27, (uint64_t *)&v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153);
    swift_bridgeObjectRelease(v28);
    sub_100068588(v157);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s identifier: %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    v29 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    v30 = v11;
    v31 = v141;
  }
  else
  {
    sub_100068588(v157);

    v29 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    v30 = v11;
    v31 = v2;
  }
  v138 = v29;
  v29(v30, v31);
  v32 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v33 = objc_msgSend(v32, "connectedScenes");

  v34 = sub_10004F2F0(0, (unint64_t *)&unk_100650670, UIScene_ptr);
  v35 = sub_100323E38();
  v36 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v33, v34, v35);

  v128 = v3;
  v143 = v34;
  if ((v36 & 0xC000000000000001) != 0)
  {
    if (v36 < 0)
      v39 = v36;
    else
      v39 = v36 & 0xFFFFFFFFFFFFFF8;
    v40 = __CocoaSet.makeIterator()(v39);
    v37 = Set.Iterator.init(_cocoa:)(v157, v40, v34, v35);
    v36 = v157[0];
    v41 = v157[1];
    v42 = v157[2];
    v43 = v158;
    v44 = v159;
  }
  else
  {
    v43 = 0;
    v45 = -1 << *(_BYTE *)(v36 + 32);
    v41 = v36 + 56;
    v42 = ~v45;
    v46 = -v45;
    if (v46 < 64)
      v47 = ~(-1 << v46);
    else
      v47 = -1;
    v44 = v47 & *(_QWORD *)(v36 + 56);
  }
  v144 = (os_log_t)(v36 & 0x7FFFFFFFFFFFFFFFLL);
  v137 = v42;
  v145 = (unint64_t)(v42 + 64) >> 6;
  v48 = (SEL *)&off_10061F000;
  *(_QWORD *)&v38 = 136315394;
  v135 = v38;
  v134 = (unint64_t)"ailCallbackQueue";
  v131 = 0x8000000100527DF0;
  v130 = (char *)&type metadata for Any + 8;
  v142 = (_QWORD *)((char *)&type metadata for Swift.AnyObject + 8);
LABEL_16:
  v49 = v43;
  for (i = v44; v36 < 0; v48 = (SEL *)&off_10061F000)
  {
    v52 = __CocoaSet.Iterator.next()(v37);
    if (!v52)
      goto LABEL_54;
    v53 = v52;
    *(_QWORD *)&v149 = v52;
    swift_unknownObjectRetain(v52);
    swift_dynamicCast(&v152, &v149, v142, v143, 7);
    v54 = (id)v152;
    *(_QWORD *)&v55 = swift_unknownObjectRelease(v53).n128_u64[0];
    v43 = v49;
    v44 = i;
    if (!v54)
      goto LABEL_54;
LABEL_41:
    v59 = objc_msgSend(v54, v48[229], v55);
    if (!v59
      || (v146 = v59,
          v60 = sub_10006922C((uint64_t *)&unk_10064EB60),
          v61 = sub_10006922C(&qword_10064EB58),
          (swift_dynamicCast(&v149, &v146, v60, v61, 6) & 1) == 0))
    {
      v151 = 0;
      v149 = 0u;
      v150 = 0u;
LABEL_15:

      v37 = (_QWORD *)sub_10000CB4C((uint64_t)&v149, &qword_10064EB50);
      goto LABEL_16;
    }
    if (!*((_QWORD *)&v150 + 1))
      goto LABEL_15;
    sub_1000E85C4(&v149, (uint64_t)&v152);
    v62 = v154;
    v63 = v155;
    sub_10007E7A0(&v152, v154);
    v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v62, v63);
    if (v65)
    {
      v66 = v64;
      v67 = v65;
      v140(v133, v139, v141);
      v68 = sub_100092328((uint64_t)v156, (uint64_t)&v149);
      v69 = Logger.logObject.getter(v68);
      v70 = static os_log_type_t.debug.getter();
      v127 = v69;
      v126 = v70;
      if (os_log_type_enabled(v69, v70))
      {
        v71 = swift_slowAlloc(22, -1);
        v124 = swift_slowAlloc(64, -1);
        v148 = v124;
        *(_DWORD *)v71 = v135;
        v72 = sub_1000544FC(0xD000000000000018, v131, &v148);
        v125 = v71;
        *(_QWORD *)(v71 + 4) = v72;
        *(_WORD *)(v71 + 12) = 2080;
        sub_10007E7A0(&v149, *((uint64_t *)&v150 + 1));
        v146 = (id)((uint64_t (*)(void))URL.absoluteString.getter)();
        v147 = v73;
        v74 = sub_10006922C(&qword_100648C80);
        v75 = String.init<A>(describing:)(&v146, v74);
        v123 = v76;
        v77 = sub_1000544FC(v75, v76, &v148);
        v78 = (uint8_t *)v125;
        *(_QWORD *)(v125 + 14) = v77;
        swift_bridgeObjectRelease(v123);
        sub_100068588(&v149);
        _os_log_impl((void *)&_mh_execute_header, v127, (os_log_type_t)v126, "%s scene identifier: %s", v78, 0x16u);
        v79 = v124;
        swift_arrayDestroy(v124, 2, v130);
        swift_slowDealloc(v79, -1, -1);
        swift_slowDealloc(v125, -1, -1);
      }
      else
      {
        sub_100068588(&v149);
      }

      v80 = v138(v133, v141);
      v81 = URL.absoluteString.getter(v80);
      v83 = v82;
      if (v81 == v66 && v67 == v82)
      {
        swift_bridgeObjectRelease(v82);
        v85 = swift_bridgeObjectRelease(v67);
      }
      else
      {
        v84 = _stringCompareWithSmolCheck(_:_:expecting:)(v81, v82, v66, v67, 0);
        swift_bridgeObjectRelease(v83);
        v85 = swift_bridgeObjectRelease(v67);
        if ((v84 & 1) == 0)
        {

          v37 = (_QWORD *)sub_100068588(&v152);
          v48 = (SEL *)&off_10061F000;
          goto LABEL_16;
        }
      }
      v101 = v129;
      v102 = v141;
      ((void (*)(char *, uint64_t, uint64_t, __n128))v140)(v129, v139, v141, v85);
      sub_100092328((uint64_t)v156, (uint64_t)&v149);
      v103 = v54;
      v104 = Logger.logObject.getter(v103);
      v105 = static os_log_type_t.debug.getter();
      v106 = v105;
      if (os_log_type_enabled(v104, v105))
      {
        v107 = swift_slowAlloc(42, -1);
        v142 = (_QWORD *)swift_slowAlloc(8, -1);
        v145 = swift_slowAlloc(96, -1);
        v148 = v145;
        *(_DWORD *)v107 = 136315906;
        v144 = v104;
        v146 = (id)sub_1000544FC(0xD000000000000018, v134 | 0x8000000000000000, &v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147);
        *(_WORD *)(v107 + 12) = 2080;
        v140 = (void (*)(char *, uint64_t, uint64_t))(v107 + 14);
        v108 = sub_10007E7A0(&v149, *((uint64_t *)&v150 + 1));
        v146 = (id)URL.absoluteString.getter(v108);
        v147 = v109;
        v110 = sub_10006922C(&qword_100648C80);
        LODWORD(v143) = v106;
        v111 = String.init<A>(describing:)(&v146, v110);
        v113 = v112;
        v146 = (id)sub_1000544FC(v111, v112, &v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147);
        swift_bridgeObjectRelease(v113);
        sub_100068588(&v149);
        *(_WORD *)(v107 + 22) = 2112;
        v140 = (void (*)(char *, uint64_t, uint64_t))(v107 + 24);
        v146 = v103;
        v114 = v103;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147);
        v115 = v142;
        *v142 = v54;

        *(_WORD *)(v107 + 32) = 2080;
        v146 = objc_msgSend(v114, "delegate");
        v116 = sub_10006922C((uint64_t *)&unk_10064EC10);
        v117 = String.init<A>(describing:)(&v146, v116);
        v119 = v118;
        v146 = (id)sub_1000544FC(v117, v118, &v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147);

        swift_bridgeObjectRelease(v119);
        v120 = v144;
        _os_log_impl((void *)&_mh_execute_header, v144, (os_log_type_t)v143, "%s SUCCESS for identifier: %s windowScene: %@ delegate: %s", (uint8_t *)v107, 0x2Au);
        v121 = sub_10006922C(&qword_100643AB0);
        swift_arrayDestroy(v115, 1, v121);
        swift_slowDealloc(v115, -1, -1);
        v122 = v145;
        swift_arrayDestroy(v145, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v122, -1, -1);
        swift_slowDealloc(v107, -1, -1);

        (*(void (**)(char *, uint64_t))(v128 + 8))(v129, v141);
      }
      else
      {

        sub_100068588(&v149);
        v138(v101, v102);
      }
      sub_10021C590(v36);
      sub_100068588(&v152);
      goto LABEL_58;
    }

    v37 = (_QWORD *)sub_100068588(&v152);
    v49 = v43;
    i = v44;
  }
  if (i)
  {
    v44 = (i - 1) & i;
    v51 = __clz(__rbit64(i)) | (v49 << 6);
    v43 = v49;
    goto LABEL_40;
  }
  v56 = v49 + 1;
  if (__OFADD__(v49, 1))
  {
    __break(1u);
    return;
  }
  if (v56 < v145)
  {
    v57 = *(_QWORD *)(v41 + 8 * v56);
    v43 = v49 + 1;
    if (v57)
      goto LABEL_39;
    v43 = v49 + 2;
    if (v49 + 2 >= v145)
      goto LABEL_54;
    v57 = *(_QWORD *)(v41 + 8 * v43);
    if (v57)
      goto LABEL_39;
    v43 = v49 + 3;
    if (v49 + 3 >= v145)
      goto LABEL_54;
    v57 = *(_QWORD *)(v41 + 8 * v43);
    if (v57)
      goto LABEL_39;
    v43 = v49 + 4;
    if (v49 + 4 >= v145)
      goto LABEL_54;
    v57 = *(_QWORD *)(v41 + 8 * v43);
    if (v57)
      goto LABEL_39;
    v43 = v49 + 5;
    if (v49 + 5 >= v145)
      goto LABEL_54;
    v57 = *(_QWORD *)(v41 + 8 * v43);
    if (v57)
      goto LABEL_39;
    v43 = v49 + 6;
    if (v49 + 6 >= v145)
      goto LABEL_54;
    v57 = *(_QWORD *)(v41 + 8 * v43);
    if (v57)
    {
LABEL_39:
      v44 = (v57 - 1) & v57;
      v51 = __clz(__rbit64(v57)) + (v43 << 6);
LABEL_40:
      v54 = *(id *)(*(_QWORD *)(v36 + 48) + 8 * v51);
      if (v54)
        goto LABEL_41;
      goto LABEL_54;
    }
    v58 = v49 + 7;
    while (v145 != v58)
    {
      v57 = *(_QWORD *)(v41 + 8 * v58++);
      if (v57)
      {
        v43 = v58 - 1;
        goto LABEL_39;
      }
    }
  }
LABEL_54:
  sub_10021C590(v36);
  v86 = v136;
  v87 = v141;
  v140(v136, v139, v141);
  v88 = sub_100092328((uint64_t)v156, (uint64_t)&v152);
  v89 = Logger.logObject.getter(v88);
  v90 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v89, v90))
  {
    v91 = swift_slowAlloc(22, -1);
    v92 = v86;
    v93 = (id)swift_slowAlloc(64, -1);
    v146 = v93;
    *(_DWORD *)v91 = v135;
    *(_QWORD *)&v149 = sub_1000544FC(0xD000000000000018, v134 | 0x8000000000000000, (uint64_t *)&v146);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, (char *)&v149 + 8);
    *(_WORD *)(v91 + 12) = 2080;
    v94 = sub_10007E7A0(&v152, v154);
    *(_QWORD *)&v149 = URL.absoluteString.getter(v94);
    *((_QWORD *)&v149 + 1) = v95;
    v96 = sub_10006922C(&qword_100648C80);
    v97 = String.init<A>(describing:)(&v149, v96);
    v99 = v98;
    *(_QWORD *)&v149 = sub_1000544FC(v97, v98, (uint64_t *)&v146);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, (char *)&v149 + 8);
    swift_bridgeObjectRelease(v99);
    sub_100068588(&v152);
    _os_log_impl((void *)&_mh_execute_header, v89, v90, "%s No existing scene for %s", (uint8_t *)v91, 0x16u);
    swift_arrayDestroy(v93, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v93, -1, -1);
    swift_slowDealloc(v91, -1, -1);

    v100 = v92;
  }
  else
  {
    sub_100068588(&v152);

    v100 = v86;
  }
  v138(v100, v87);
LABEL_58:
  sub_100068588(v156);
}

void sub_1003207BC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  id v31;
  id v32;
  NSObject *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  SEL *v47;
  uint64_t v48;
  unint64_t i;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  double v54;
  int64_t v55;
  unint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint8_t *v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  __n128 v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  char *v91;
  id v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  id v104;
  NSObject *v105;
  os_log_type_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  id v120;
  _QWORD *v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  os_log_t v127;
  uint64_t v128;
  int64_t v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  NSObject *v135;
  char *v136;
  char *v137;
  unint64_t v138;
  char *v139;
  unint64_t v140;
  uint64_t v141;
  __int128 v142;
  char *v143;
  uint64_t v144;
  void (*v145)(char *, uint64_t);
  uint64_t v146;
  void (*v147)(char *, uint64_t, uint64_t);
  uint64_t v148;
  _QWORD *v149;
  os_log_t v150;
  uint64_t v151;
  int64_t v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  id v163[5];
  _QWORD v164[3];
  uint64_t v165;
  uint64_t v166;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v136 = (char *)&v130 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v139 = (char *)&v130 - v6;
  __chkstk_darwin(v7);
  v143 = (char *)&v130 - v8;
  __chkstk_darwin(v9);
  v11 = (char *)&v130 - v10;
  v163[3] = (id)sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
  v163[4] = &off_1005D3400;
  v163[0] = a1;
  v12 = Logger.Application.unsafeMutableAddressor(a1);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v146 = v12;
  v147 = v13;
  ((void (*)(char *))v13)(v11);
  v14 = sub_100092328((uint64_t)v163, (uint64_t)v164);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter();
  v17 = os_log_type_enabled(v15, v16);
  v148 = v2;
  v141 = v3;
  if (v17)
  {
    v18 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v156 = v19;
    *(_DWORD *)v18 = 136315394;
    v159 = sub_1000544FC(0xD000000000000018, 0x8000000100527DF0, (uint64_t *)&v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160);
    *(_WORD *)(v18 + 12) = 2080;
    v20 = objc_msgSend((id)*sub_10007E7A0(v164, v165), "itemID");
    v21 = FPItemID.identifierString.getter();
    v23 = v22;

    v159 = v21;
    v160 = v23;
    v24 = sub_10006922C(&qword_100648C80);
    v25 = String.init<A>(describing:)(&v159, v24);
    v27 = v26;
    v159 = sub_1000544FC(v25, v26, (uint64_t *)&v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, &v160);
    swift_bridgeObjectRelease(v27);
    sub_100068588(v164);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s identifier: %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    v28 = *(void (**)(char *, uint64_t))(v141 + 8);
    v29 = v11;
    v30 = v148;
  }
  else
  {
    sub_100068588(v164);

    v28 = *(void (**)(char *, uint64_t))(v3 + 8);
    v29 = v11;
    v30 = v2;
  }
  v145 = v28;
  v28(v29, v30);
  v31 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v32 = objc_msgSend(v31, "connectedScenes");

  v33 = sub_10004F2F0(0, (unint64_t *)&unk_100650670, UIScene_ptr);
  v34 = sub_100323E38();
  v35 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v32, v33, v34);

  v150 = v33;
  if ((v35 & 0xC000000000000001) != 0)
  {
    if (v35 < 0)
      v38 = v35;
    else
      v38 = v35 & 0xFFFFFFFFFFFFFF8;
    v39 = __CocoaSet.makeIterator()(v38);
    v36 = Set.Iterator.init(_cocoa:)(v164, v39, v33, v34);
    v35 = v164[0];
    v40 = v164[1];
    v41 = v164[2];
    v42 = v165;
    v43 = v166;
  }
  else
  {
    v42 = 0;
    v44 = -1 << *(_BYTE *)(v35 + 32);
    v40 = v35 + 56;
    v41 = ~v44;
    v45 = -v44;
    if (v45 < 64)
      v46 = ~(-1 << v45);
    else
      v46 = -1;
    v43 = v46 & *(_QWORD *)(v35 + 56);
  }
  v151 = v35 & 0x7FFFFFFFFFFFFFFFLL;
  v144 = v41;
  v152 = (unint64_t)(v41 + 64) >> 6;
  v47 = (SEL *)&off_10061F000;
  *(_QWORD *)&v37 = 136315394;
  v142 = v37;
  v140 = (unint64_t)"ailCallbackQueue";
  v138 = 0x8000000100527DF0;
  v137 = (char *)&type metadata for Any + 8;
  v149 = (_QWORD *)((char *)&type metadata for Swift.AnyObject + 8);
LABEL_16:
  v48 = v42;
  for (i = v43; v35 < 0; v47 = (SEL *)&off_10061F000)
  {
    v51 = __CocoaSet.Iterator.next()(v36);
    if (!v51)
      goto LABEL_54;
    v52 = v51;
    *(_QWORD *)&v156 = v51;
    swift_unknownObjectRetain(v51);
    swift_dynamicCast(&v159, &v156, v149, v150, 7);
    v53 = (id)v159;
    *(_QWORD *)&v54 = swift_unknownObjectRelease(v52).n128_u64[0];
    v42 = v48;
    v43 = i;
    if (!v53)
      goto LABEL_54;
LABEL_41:
    v58 = objc_msgSend(v53, v47[229], v54);
    if (!v58
      || (v153 = v58,
          v59 = sub_10006922C((uint64_t *)&unk_10064EB60),
          v60 = sub_10006922C(&qword_10064EB58),
          (swift_dynamicCast(&v156, &v153, v59, v60, 6) & 1) == 0))
    {
      v158 = 0;
      v156 = 0u;
      v157 = 0u;
LABEL_15:

      v36 = (_QWORD *)sub_10000CB4C((uint64_t)&v156, &qword_10064EB50);
      goto LABEL_16;
    }
    if (!*((_QWORD *)&v157 + 1))
      goto LABEL_15;
    sub_1000E85C4(&v156, (uint64_t)&v159);
    v61 = v161;
    v62 = v162;
    sub_10007E7A0(&v159, v161);
    v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v61, v62);
    if (v64)
    {
      v65 = v63;
      v66 = v64;
      v147(v139, v146, v148);
      v67 = sub_100092328((uint64_t)v163, (uint64_t)&v156);
      v68 = Logger.logObject.getter(v67);
      v69 = static os_log_type_t.debug.getter();
      v135 = v68;
      LODWORD(v134) = v69;
      if (os_log_type_enabled(v68, v69))
      {
        v70 = swift_slowAlloc(22, -1);
        v132 = swift_slowAlloc(64, -1);
        v155 = v132;
        *(_DWORD *)v70 = v142;
        v71 = sub_1000544FC(0xD000000000000018, v138, &v155);
        v133 = v70;
        *(_QWORD *)(v70 + 4) = v71;
        *(_WORD *)(v70 + 12) = 2080;
        v72 = objc_msgSend((id)*sub_10007E7A0(&v156, *((uint64_t *)&v157 + 1)), "itemID");
        v131 = (id)FPItemID.identifierString.getter();
        v130 = v73;

        v153 = v131;
        v154 = v130;
        v74 = sub_10006922C(&qword_100648C80);
        v75 = String.init<A>(describing:)(&v153, v74);
        v131 = (id)v76;
        v77 = sub_1000544FC(v75, v76, &v155);
        v78 = (uint8_t *)v133;
        *(_QWORD *)(v133 + 14) = v77;
        swift_bridgeObjectRelease(v131);
        sub_100068588(&v156);
        _os_log_impl((void *)&_mh_execute_header, v135, (os_log_type_t)v134, "%s scene identifier: %s", v78, 0x16u);
        v79 = v132;
        swift_arrayDestroy(v132, 2, v137);
        swift_slowDealloc(v79, -1, -1);
        swift_slowDealloc(v133, -1, -1);
      }
      else
      {
        sub_100068588(&v156);
      }

      v145(v139, v148);
      v80 = objc_msgSend(v163[0], "itemID");
      v135 = FPItemID.identifierString.getter();
      v134 = v81;

      v82 = v134;
      if (v135 == v65 && v66 == v134)
      {
        swift_bridgeObjectRelease(v134);
        v84 = swift_bridgeObjectRelease(v66);
      }
      else
      {
        v83 = _stringCompareWithSmolCheck(_:_:expecting:)(v135, v134, v65, v66, 0);
        swift_bridgeObjectRelease(v82);
        v84 = swift_bridgeObjectRelease(v66);
        if ((v83 & 1) == 0)
        {

          v36 = (_QWORD *)sub_100068588(&v159);
          v47 = (SEL *)&off_10061F000;
          goto LABEL_16;
        }
      }
      v102 = v136;
      v103 = v148;
      ((void (*)(char *, uint64_t, uint64_t, __n128))v147)(v136, v146, v148, v84);
      sub_100092328((uint64_t)v163, (uint64_t)&v156);
      v104 = v53;
      v105 = Logger.logObject.getter(v104);
      v106 = static os_log_type_t.debug.getter();
      v107 = v106;
      if (os_log_type_enabled(v105, v106))
      {
        v108 = swift_slowAlloc(42, -1);
        LODWORD(v151) = v107;
        v109 = v108;
        v149 = (_QWORD *)swift_slowAlloc(8, -1);
        v152 = swift_slowAlloc(96, -1);
        v155 = v152;
        *(_DWORD *)v109 = 136315906;
        v150 = v105;
        v153 = (id)sub_1000544FC(0xD000000000000018, v140 | 0x8000000000000000, &v155);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154);
        *(_WORD *)(v109 + 12) = 2080;
        v147 = (void (*)(char *, uint64_t, uint64_t))(v109 + 14);
        v110 = objc_msgSend((id)*sub_10007E7A0(&v156, *((uint64_t *)&v157 + 1)), "itemID");
        v111 = (id)FPItemID.identifierString.getter();
        v113 = v112;

        v153 = v111;
        v154 = v113;
        v114 = sub_10006922C(&qword_100648C80);
        v115 = String.init<A>(describing:)(&v153, v114);
        v117 = v116;
        v153 = (id)sub_1000544FC(v115, v116, &v155);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154);
        swift_bridgeObjectRelease(v117);
        sub_100068588(&v156);
        *(_WORD *)(v109 + 22) = 2112;
        v118 = v104;
        v119 = v109;
        v153 = v118;
        v120 = v118;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154);
        v121 = v149;
        *v149 = v53;

        *(_WORD *)(v119 + 32) = 2080;
        v122 = (uint8_t *)v119;
        v153 = objc_msgSend(v120, "delegate");
        v123 = sub_10006922C((uint64_t *)&unk_10064EC10);
        v124 = String.init<A>(describing:)(&v153, v123);
        v126 = v125;
        v153 = (id)sub_1000544FC(v124, v125, &v155);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154);

        swift_bridgeObjectRelease(v126);
        v127 = v150;
        _os_log_impl((void *)&_mh_execute_header, v150, (os_log_type_t)v151, "%s SUCCESS for identifier: %s windowScene: %@ delegate: %s", v122, 0x2Au);
        v128 = sub_10006922C(&qword_100643AB0);
        swift_arrayDestroy(v121, 1, v128);
        swift_slowDealloc(v121, -1, -1);
        v129 = v152;
        swift_arrayDestroy(v152, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v129, -1, -1);
        swift_slowDealloc(v122, -1, -1);

        (*(void (**)(char *, uint64_t))(v141 + 8))(v136, v148);
      }
      else
      {

        sub_100068588(&v156);
        v145(v102, v103);
      }
      sub_10021C590(v35);
      sub_100068588(&v159);
      goto LABEL_58;
    }

    v36 = (_QWORD *)sub_100068588(&v159);
    v48 = v42;
    i = v43;
  }
  if (i)
  {
    v43 = (i - 1) & i;
    v50 = __clz(__rbit64(i)) | (v48 << 6);
    v42 = v48;
    goto LABEL_40;
  }
  v55 = v48 + 1;
  if (__OFADD__(v48, 1))
  {
    __break(1u);
    return;
  }
  if (v55 < v152)
  {
    v56 = *(_QWORD *)(v40 + 8 * v55);
    v42 = v48 + 1;
    if (v56)
      goto LABEL_39;
    v42 = v48 + 2;
    if (v48 + 2 >= v152)
      goto LABEL_54;
    v56 = *(_QWORD *)(v40 + 8 * v42);
    if (v56)
      goto LABEL_39;
    v42 = v48 + 3;
    if (v48 + 3 >= v152)
      goto LABEL_54;
    v56 = *(_QWORD *)(v40 + 8 * v42);
    if (v56)
      goto LABEL_39;
    v42 = v48 + 4;
    if (v48 + 4 >= v152)
      goto LABEL_54;
    v56 = *(_QWORD *)(v40 + 8 * v42);
    if (v56)
      goto LABEL_39;
    v42 = v48 + 5;
    if (v48 + 5 >= v152)
      goto LABEL_54;
    v56 = *(_QWORD *)(v40 + 8 * v42);
    if (v56)
      goto LABEL_39;
    v42 = v48 + 6;
    if (v48 + 6 >= v152)
      goto LABEL_54;
    v56 = *(_QWORD *)(v40 + 8 * v42);
    if (v56)
    {
LABEL_39:
      v43 = (v56 - 1) & v56;
      v50 = __clz(__rbit64(v56)) + (v42 << 6);
LABEL_40:
      v53 = *(id *)(*(_QWORD *)(v35 + 48) + 8 * v50);
      if (v53)
        goto LABEL_41;
      goto LABEL_54;
    }
    v57 = v48 + 7;
    while (v152 != v57)
    {
      v56 = *(_QWORD *)(v40 + 8 * v57++);
      if (v56)
      {
        v42 = v57 - 1;
        goto LABEL_39;
      }
    }
  }
LABEL_54:
  sub_10021C590(v35);
  v85 = v143;
  v86 = v148;
  v147(v143, v146, v148);
  v87 = sub_100092328((uint64_t)v163, (uint64_t)&v159);
  v88 = Logger.logObject.getter(v87);
  v89 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v88, v89))
  {
    v90 = swift_slowAlloc(22, -1);
    v91 = v85;
    v92 = (id)swift_slowAlloc(64, -1);
    v153 = v92;
    *(_DWORD *)v90 = v142;
    *(_QWORD *)&v156 = sub_1000544FC(0xD000000000000018, v140 | 0x8000000000000000, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, (char *)&v156 + 8);
    *(_WORD *)(v90 + 12) = 2080;
    v93 = objc_msgSend((id)*sub_10007E7A0(&v159, v161), "itemID");
    v94 = FPItemID.identifierString.getter();
    v96 = v95;

    *(_QWORD *)&v156 = v94;
    *((_QWORD *)&v156 + 1) = v96;
    v97 = sub_10006922C(&qword_100648C80);
    v98 = String.init<A>(describing:)(&v156, v97);
    v100 = v99;
    *(_QWORD *)&v156 = sub_1000544FC(v98, v99, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, (char *)&v156 + 8);
    swift_bridgeObjectRelease(v100);
    sub_100068588(&v159);
    _os_log_impl((void *)&_mh_execute_header, v88, v89, "%s No existing scene for %s", (uint8_t *)v90, 0x16u);
    swift_arrayDestroy(v92, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v92, -1, -1);
    swift_slowDealloc(v90, -1, -1);

    v101 = v91;
  }
  else
  {
    sub_100068588(&v159);

    v101 = v85;
  }
  v145(v101, v86);
LABEL_58:
  sub_100068588(v163);
}

void sub_100321738(uint64_t a1, char a2, int a3, char *a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  id v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  _BYTE v50[4];
  int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t aBlock;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  void *v58;
  uint64_t (*v59)();
  uint64_t v60;

  v53 = a4;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v50[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v15 = &v50[-v14];
  v16 = swift_allocObject(&unk_1005DD580, 24, 7);
  *(_QWORD *)(v16 + 16) = a5;
  v52 = a1;
  if ((a2 & 1) != 0)
  {
    v17 = a5;
  }
  else
  {
    v17 = a5;
    if ((a1 & 1) != 0)
    {
      v18 = v17;
      v17 = objc_msgSend(v53, "presentedViewController");
      if (v17)
      {
        v19 = v17;
        v20 = sub_10004F2F0(0, (unint64_t *)&unk_10064EB40, VNDocumentCameraViewController_ptr);
        v21 = objc_msgSend(v19, "isKindOfClass:", swift_getObjCClassFromMetadata(v20));

        if (v21)
        {
          v22 = Logger.Application.unsafeMutableAddressor(v17);
          v23 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v15, v22, v9);
          v24 = Logger.logObject.getter(v23);
          v25 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v24, v25))
          {
            v26 = swift_slowAlloc(22, -1);
            v27 = swift_slowAlloc(64, -1);
            aBlock = v27;
            *(_DWORD *)v26 = 136315394;
            v54 = sub_1000544FC(0xD00000000000003FLL, 0x8000000100527D20, &aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &aBlock);
            *(_WORD *)(v26 + 12) = 2080;
            v54 = v52;
            v28 = String.init<A>(describing:)(&v54, &type metadata for DRIMainViewController.DOCPresentedViewControllerDismissalOptions);
            v52 = v9;
            v29 = v16;
            v31 = v30;
            v54 = sub_1000544FC(v28, v30, &aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &aBlock);
            v32 = v31;
            v16 = v29;
            swift_bridgeObjectRelease(v32);
            _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s options: %s satisfied. Document scanner already present. Skipping dismissal", (uint8_t *)v26, 0x16u);
            swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v27, -1, -1);
            swift_slowDealloc(v26, -1, -1);

            (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v52);
          }
          else
          {

            (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v9);
          }
          v49 = objc_msgSend(v18, "effectiveFullBrowser");
          objc_msgSend(v49, "dismissSearch");

          sub_10031BE98(v18);
          goto LABEL_14;
        }
      }
    }
  }
  v33 = Logger.Application.unsafeMutableAddressor(v17);
  v34 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, v33, v9);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = swift_slowAlloc(22, -1);
    v38 = swift_slowAlloc(64, -1);
    v54 = v38;
    *(_DWORD *)v37 = 136315394;
    v51 = a3;
    aBlock = sub_1000544FC(0xD00000000000003FLL, 0x8000000100527D20, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v56);
    *(_WORD *)(v37 + 12) = 2080;
    aBlock = v52;
    LOBYTE(v56) = a2 & 1;
    v39 = sub_10006922C(&qword_10064EB38);
    v52 = v9;
    v40 = String.init<A>(describing:)(&aBlock, v39);
    v42 = v41;
    aBlock = sub_1000544FC(v40, v41, &v54);
    LOBYTE(a3) = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v56);
    swift_bridgeObjectRelease(v42);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "%s options: %s empty or not satisfied. Dismissing presented view controllers", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v52);
  }
  else
  {

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  }
  v43 = v53;
  v44 = *(void **)&v53[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController];
  if (v44)
  {
    *(_QWORD *)&v53[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController] = 0;
    v59 = sub_100321D24;
    v60 = v16;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v56 = 1107296256;
    v57 = sub_10004A82C;
    v58 = &unk_1005DD5C0;
    v45 = _Block_copy(&aBlock);
    v46 = v60;
    swift_retain();
    swift_release(v46);
    objc_msgSend(v44, "dismissViewControllerAnimated:completion:", a3 & 1, v45);
    _Block_release(v45);
    swift_release(v16);

    return;
  }
  v59 = sub_100321D24;
  v60 = v16;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v56 = 1107296256;
  v57 = sub_10004A82C;
  v58 = &unk_1005DD598;
  v47 = _Block_copy(&aBlock);
  v48 = v60;
  swift_retain();
  swift_release(v48);
  objc_msgSend(v43, "dismissAllPresentedViewControllers:completion:", a3 & 1, v47);
  _Block_release(v47);
LABEL_14:
  swift_release(v16);
}

uint64_t sub_100321D00()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100321D24()
{
  uint64_t v0;

  return sub_10031BE50(*(void **)(v0 + 16));
}

uint64_t sub_100321D2C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

void sub_100321D50()
{
  uint64_t v0;

  sub_10031D930(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_100321D5C()
{
  uint64_t v0;

  sub_10031DE38(*(void **)(v0 + 16));
}

const char *sub_100321D64()
{
  return "currentPreviewItemIndex";
}

uint64_t sub_100321D78()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100321D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10031DF64(a1, a2, v2);
}

void sub_100321DB4()
{
  uint64_t v0;

  sub_10031DEFC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100321DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 9, v5);
}

void sub_100321E4C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_10031C4B0(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(_QWORD *)v7, *(unsigned __int8 *)(v7 + 8));
}

uint64_t sub_100321EB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + 7) & 0xFFFFFFFFFFFFF8;
  v8 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7));

  return swift_deallocObject(v0, v8 + 8, v6);
}

void sub_100321F58()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10031CA50(*(_QWORD *)(v0 + 16), v0 + v2, *(objc_class **)(v0 + ((v2 + *(_QWORD *)(v1 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)), *(_BYTE *)(v0 + ((v2 + *(_QWORD *)(v1 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(void **)(v0 + ((v2 + *(_QWORD *)(v1 + 64) + 23) & 0xFFFFFFFFFFFFF8)));
}

void sub_100321FB4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10031CED4(v0 + v2, *(char **)(v0 + v3), *(objc_class **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(unsigned __int8 *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(void **)(v0 + ((v3 + 31) & 0xFFFFFFFFFFFFF8)));
}

id sub_10032201C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "currentPreviewItemIndex");
  *a2 = result;
  return result;
}

id sub_10032204C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setCurrentPreviewItemIndex:", *a1);
}

void sub_100322064()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10031D0F4(*(_QWORD *)(v0 + ((v3 + 31) & 0xFFFFFFFFFFFFF8)), v0 + v2, *(char **)(v0 + v3), *(Class *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_BYTE *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1003220C4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10064EB8C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100118844;
  return sub_10031B9C8(a1, a2, v2);
}

unint64_t sub_100322128()
{
  unint64_t result;

  result = qword_10064EB98;
  if (!qword_10064EB98)
  {
    result = swift_getWitnessTable(&unk_1004EA408, &type metadata for SearchFileShortcutsIntent);
    atomic_store(result, &qword_10064EB98);
  }
  return result;
}

uint64_t sub_10032216C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10064EBA4);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_1000EA854;
  return sub_10031BBC0(a1, a2, v2);
}

unint64_t sub_1003221D0()
{
  unint64_t result;

  result = qword_10064EBB0;
  if (!qword_10064EBB0)
  {
    result = swift_getWitnessTable(&unk_1004EA55C, &type metadata for SearchFileAssistantIntent);
    atomic_store(result, (unint64_t *)&qword_10064EBB0);
  }
  return result;
}

unint64_t sub_100322214()
{
  unint64_t result;

  result = qword_100658ED0;
  if (!qword_100658ED0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DOCAppIntentsGenericError, &type metadata for DOCAppIntentsGenericError);
    atomic_store(result, (unint64_t *)&qword_100658ED0);
  }
  return result;
}

_QWORD *sub_100322258(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[3] - 8);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0)
    return (_QWORD *)swift_slowDealloc(*result, *(_QWORD *)(v1 + 64)+ ((*(_DWORD *)(v1 + 80) + 16) & ~(unint64_t)*(_DWORD *)(v1 + 80)), *(_DWORD *)(v1 + 80) | 7);
  return result;
}

uint64_t sub_10032228C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10064EBD4);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100118844;
  return sub_10031B2E8(a1, a2, v2);
}

unint64_t sub_1003222F0()
{
  unint64_t result;

  result = qword_10064EBE0;
  if (!qword_10064EBE0)
  {
    result = swift_getWitnessTable(&unk_1004E4D6C, &type metadata for NavigateHistoryIntent);
    atomic_store(result, (unint64_t *)&qword_10064EBE0);
  }
  return result;
}

uint64_t sub_100322334(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DOCBrowserHistoryShiftAmount(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100322374(uint64_t a1, char a2, char a3, char *a4, void *a5, void *a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  char *v20;
  char *v21;
  void *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t aBlock;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  void *v58;
  void (*v59)();
  uint64_t v60;

  v53 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v51 - v16;
  v18 = swift_allocObject(&unk_1005DDA08, 32, 7);
  *(_QWORD *)(v18 + 16) = a5;
  *(_QWORD *)(v18 + 24) = a6;
  v52 = a1;
  if ((a2 & 1) != 0)
  {
    v19 = a5;
    v20 = a6;
  }
  else
  {
    v21 = a5;
    v20 = a6;
    v51 = v20;
    if ((a1 & 1) != 0)
    {
      v20 = (char *)objc_msgSend(a4, "presentedViewController");
      if (v20)
      {
        v22 = v20;
        v23 = sub_10004F2F0(0, (unint64_t *)&unk_10064EB40, VNDocumentCameraViewController_ptr);
        v24 = objc_msgSend(v22, "isKindOfClass:", swift_getObjCClassFromMetadata(v23));

        if (v24)
        {
          v25 = Logger.Application.unsafeMutableAddressor(v20);
          v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))(v17, v25, v53);
          v27 = Logger.logObject.getter(v26);
          v28 = static os_log_type_t.debug.getter(v27);
          if (os_log_type_enabled(v27, v28))
          {
            v29 = swift_slowAlloc(22, -1);
            v30 = swift_slowAlloc(64, -1);
            aBlock = v30;
            *(_DWORD *)v29 = 136315394;
            v54 = sub_1000544FC(0xD00000000000003FLL, 0x8000000100527D20, &aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &aBlock);
            *(_WORD *)(v29 + 12) = 2080;
            v54 = v52;
            v31 = String.init<A>(describing:)(&v54, &type metadata for DRIMainViewController.DOCPresentedViewControllerDismissalOptions);
            v33 = v32;
            v54 = sub_1000544FC(v31, v32, &aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &aBlock);
            swift_bridgeObjectRelease(v33);
            _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s options: %s satisfied. Document scanner already present. Skipping dismissal", (uint8_t *)v29, 0x16u);
            swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v30, -1, -1);
            swift_slowDealloc(v29, -1, -1);
          }

          (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v53);
          v34 = *(void **)&v21[OBJC_IVAR____TtC5Files20BrowserSceneDelegate_viewController];
          if (v34)
          {
            v35 = objc_msgSend(v34, "effectiveFullBrowser", v51);
            objc_msgSend(v35, "dismissSearch");

          }
          sub_100208A70(v51, (uint64_t)v21);
          goto LABEL_17;
        }
      }
    }
  }
  v36 = Logger.Application.unsafeMutableAddressor(v20);
  v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v36, v53);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.debug.getter(v38);
  if (os_log_type_enabled(v38, v39))
  {
    v40 = swift_slowAlloc(22, -1);
    v41 = swift_slowAlloc(64, -1);
    v54 = v41;
    *(_DWORD *)v40 = 136315394;
    v51 = a4;
    aBlock = sub_1000544FC(0xD00000000000003FLL, 0x8000000100527D20, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v56);
    *(_WORD *)(v40 + 12) = 2080;
    aBlock = v52;
    LOBYTE(v56) = a2 & 1;
    v42 = sub_10006922C(&qword_10064EB38);
    v52 = v12;
    v43 = String.init<A>(describing:)(&aBlock, v42);
    v45 = v44;
    aBlock = sub_1000544FC(v43, v44, &v54);
    a4 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v56);
    swift_bridgeObjectRelease(v45);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s options: %s empty or not satisfied. Dismissing presented view controllers", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v40, -1, -1);

    (*(void (**)(char *, uint64_t))(v52 + 8))(v14, v53);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v53);
  }
  v46 = *(void **)&a4[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController];
  if (v46)
  {
    *(_QWORD *)&a4[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController] = 0;
    v59 = sub_100323EC0;
    v60 = v18;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v56 = 1107296256;
    v57 = sub_10004A82C;
    v58 = &unk_1005DDA48;
    v47 = _Block_copy(&aBlock);
    v48 = v60;
    swift_retain();
    swift_release(v48);
    objc_msgSend(v46, "dismissViewControllerAnimated:completion:", a3 & 1, v47);
    _Block_release(v47);
    swift_release(v18);

    return;
  }
  v59 = sub_100323EC0;
  v60 = v18;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v56 = 1107296256;
  v57 = sub_10004A82C;
  v58 = &unk_1005DDA20;
  v49 = _Block_copy(&aBlock);
  v50 = v60;
  swift_retain();
  swift_release(v50);
  objc_msgSend(a4, "dismissAllPresentedViewControllers:completion:", a3 & 1, v49);
  _Block_release(v49);
LABEL_17:
  swift_release(v18);
}

double sub_100322940(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, double);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  NSObject *v30;
  __n128 v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __n128 v39;
  void (*v40)(char *, uint64_t, __n128);
  os_log_t v41;
  uint64_t v42;
  double result;
  void *v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  __n128 v53;
  _DWORD *v54;
  uint64_t v55;
  os_log_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, char *, uint64_t);
  void (*v61)(uint64_t, char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v6);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  __chkstk_darwin(v12);
  v14 = (char *)&v54 - v13;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v54 - v18;
  if (!*(_QWORD *)(a1 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v10 + 56))(v8, 1, 1, v9, v17);
    goto LABEL_6;
  }
  v63 = v5;
  v64 = v16;
  v20 = v3;
  v21 = *(unsigned __int8 *)(v10 + 80);
  v22 = a1 + ((v21 + 32) & ~v21);
  v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  v23(v8, v22, v9, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
LABEL_6:
    sub_10000CB4C((uint64_t)v8, &qword_100643470);
    return result;
  }
  v62 = v21;
  v59 = ~v21;
  v60 = *(uint64_t (**)(char *, char *, uint64_t))(v10 + 32);
  v24 = v60(v19, v8, v9);
  v25 = Logger.UI.unsafeMutableAddressor(v24);
  v26 = v20;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v28 = v63;
  v27(v63, v25, v2);
  v61 = (void (*)(uint64_t, char *, uint64_t))v23;
  v29 = ((uint64_t (*)(char *, char *, uint64_t))v23)(v14, v19, v9);
  v30 = Logger.logObject.getter(v29);
  v32 = static os_log_type_t.info.getter(v31);
  if (os_log_type_enabled(v30, v32))
  {
    v56 = v30;
    v33 = (uint8_t *)swift_slowAlloc(12, -1);
    v55 = swift_slowAlloc(32, -1);
    v67 = v55;
    v57 = v26;
    v58 = v2;
    *(_DWORD *)v33 = 136315138;
    v54 = v33 + 4;
    v34 = v33;
    v35 = sub_100323D44((unint64_t *)&qword_100646B20, (uint64_t)&protocol conformance descriptor for URL);
    v36 = dispatch thunk of CustomStringConvertible.description.getter(v9, v35);
    v38 = v37;
    v66 = sub_1000544FC(v36, v37, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
    v39 = swift_bridgeObjectRelease(v38);
    v40 = *(void (**)(char *, uint64_t, __n128))(v10 + 8);
    v40(v14, v9, v39);
    v41 = v56;
    _os_log_impl((void *)&_mh_execute_header, v56, v32, "[Interaction] documentBrowser:didPickDocumentsAt: %s", v34, 0xCu);
    v42 = v55;
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v34, -1, -1);

    (*(void (**)(char *, uint64_t))(v57 + 8))(v28, v58);
  }
  else
  {
    v40 = *(void (**)(char *, uint64_t, __n128))(v10 + 8);
    ((void (*)(char *, uint64_t))v40)(v14, v9);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v2);
  }
  v44 = (void *)objc_opt_self(DOCFeature);
  v45 = v65;
  v46 = objc_msgSend(v65, "configuration");
  v47 = objc_msgSend(v44, "supportsQuickLookInsteadOfOpen:", v46);

  v48 = swift_allocObject(&unk_1005DD670, 24, 7);
  swift_unknownObjectWeakInit(v48 + 16);
  v49 = v64;
  v61((uint64_t)v64, v19, v9);
  v50 = (v62 + 24) & v59;
  v51 = swift_allocObject(&unk_1005DD990, v50 + v11, v62 | 7);
  *(_QWORD *)(v51 + 16) = v48;
  v60((char *)(v51 + v50), v49, v9);
  v52 = swift_retain();
  static LaunchUtils.tryOpeningInDefaultApp(_:item:requireOpenInPlace:preferQuickLook:alertPresenting:completionBlock:)(v19, 0, 1, v47, v45, sub_100323CE8, v51, v52);
  v53 = swift_release(v51);
  v40(v19, v9, v53);
  *(_QWORD *)&result = swift_release(v48).n128_u64[0];
  return result;
}

void sub_100322DD0(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_BYTE *, uint64_t, uint64_t, double);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  _BYTE v24[12];
  unsigned int v25;
  uint64_t v26;
  void (*v27)(_BYTE *, _BYTE *, uint64_t);

  v3 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v3);
  v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __chkstk_darwin(v10);
  v13 = &v24[-v12];
  if (*(_QWORD *)(a1 + 16))
  {
    v14 = *(unsigned __int8 *)(v7 + 80);
    v15 = a1 + ((v14 + 32) & ~v14);
    v16 = *(void (**)(_BYTE *, uint64_t, uint64_t, double))(v7 + 16);
    v16(v5, v15, v6, v11);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      v26 = ~v14;
      v27 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32);
      v27(v13, v5, v6);
      v17 = (void *)objc_opt_self(DOCFeature);
      v18 = objc_msgSend(v1, "configuration");
      v25 = objc_msgSend(v17, "supportsQuickLookInsteadOfOpen:", v18);

      v19 = swift_allocObject(&unk_1005DD670, 24, 7);
      swift_unknownObjectWeakInit(v19 + 16);
      ((void (*)(_BYTE *, _BYTE *, uint64_t))v16)(v9, v13, v6);
      v20 = (v14 + 24) & v26;
      v21 = swift_allocObject(&unk_1005DD918, v20 + v8, v14 | 7);
      *(_QWORD *)(v21 + 16) = v19;
      v27((_BYTE *)(v21 + v20), v9, v6);
      v22 = swift_retain();
      static LaunchUtils.tryOpeningInDefaultApp(_:item:requireOpenInPlace:preferQuickLook:alertPresenting:completionBlock:)(v13, 0, 0, v25, v1, sub_100323C34, v21, v22);
      v23 = swift_release(v21);
      (*(void (**)(_BYTE *, uint64_t, __n128))(v7 + 8))(v13, v6, v23);
      swift_release(v19);
      return;
    }
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, double))(v7 + 56))(v5, 1, 1, v6, v11);
  }
  sub_10000CB4C((uint64_t)v5, &qword_100643470);
}

uint64_t sub_10032304C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewItemObserver);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewItemObserver) = 0;

  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController) = 0;

  sub_10000F580((uint64_t)v10);
  v3 = v11;
  if (v11)
  {
    v4 = v12;
    sub_10007E7A0(v10, v11);
    (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
    sub_100068588(v10);
  }
  else
  {
    sub_10000CB4C((uint64_t)v10, &qword_10064EB50);
  }
  sub_10000F580((uint64_t)v10);
  v5 = v11;
  if (v11)
  {
    v6 = v12;
    sub_10007E7A0(v10, v11);
    (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
    sub_100068588(v10);
  }
  else
  {
    sub_10000CB4C((uint64_t)v10, &qword_10064EB50);
  }
  sub_10000F580((uint64_t)v10);
  v7 = v11;
  if (!v11)
    return sub_10000CB4C((uint64_t)v10, &qword_10064EB50);
  v8 = v12;
  sub_10007E7A0(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v7, v8);
  return sub_100068588(v10);
}

void *sub_100323198(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  void (*v18)(uint64_t, void *, void (*)(void *), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v19;
  void *v20;
  id v21;
  char v23[24];

  v4 = type metadata accessor for DOCPreviewController(0);
  v5 = swift_dynamicCastClass(a1, v4);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = objc_opt_self(QLItem);
  v8 = swift_dynamicCastObjCClass(a2, v7);
  if (!v8)
    return 0;
  v9 = (void *)v8;
  swift_unknownObjectRetain(a2);
  v10 = objc_msgSend(v9, "fpItem");
  if (v10)
  {
    v11 = v10;
    v12 = swift_allocObject(&unk_1005DD8F0, 24, 7);
    *(_QWORD *)(v12 + 16) = 0;
    v13 = v6 + OBJC_IVAR____TtC5Files20DOCPreviewController_transitioningProvider;
    Strong = swift_unknownObjectWeakLoadStrong(v6 + OBJC_IVAR____TtC5Files20DOCPreviewController_transitioningProvider);
    if (Strong)
    {
      v15 = Strong;
      v16 = *(_QWORD *)(v13 + 8);
      ObjectType = swift_getObjectType(Strong);
      v18 = *(void (**)(uint64_t, void *, void (*)(void *), uint64_t, uint64_t, uint64_t, __n128))(v16 + 8);
      v19 = swift_retain();
      v18(v6, v11, sub_100323C28, v12, ObjectType, v16, v19);
      swift_release(v12);

      swift_unknownObjectRelease(v15);
    }
    else
    {

    }
    swift_unknownObjectRelease(a2);
    swift_beginAccess(v12 + 16, v23, 0, 0);
    v20 = *(void **)(v12 + 16);
    v21 = v20;
    swift_release(v12);
  }
  else
  {
    swift_unknownObjectRelease(a2);
    return 0;
  }
  return v20;
}

uint64_t sub_100323324(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  __n128 v19;
  void (*v20)(char *, uint64_t, __n128);
  uint64_t v22;

  v4 = type metadata accessor for UTType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - v9;
  v11 = type metadata accessor for DOCPreviewController(0);
  if (!swift_dynamicCastClass(a1, v11))
    return 1;
  v12 = objc_opt_self(QLItem);
  v13 = swift_dynamicCastObjCClass(a2, v12);
  if (!v13)
    return QLPreviewItemEditingModeCreateCopyAndDisplayDismissActions;
  v14 = (void *)v13;
  swift_unknownObjectRetain(a2);
  v15 = objc_msgSend(v14, "fpItem");
  if (!v15)
  {
    swift_unknownObjectRelease(a2);
    return QLPreviewItemEditingModeCreateCopyAndDisplayDismissActions;
  }
  v16 = v15;
  if ((objc_msgSend(v15, "isWritable") & 1) == 0)
  {
    swift_unknownObjectRelease(a2);

    return QLPreviewItemEditingModeCreateCopyAndDisplayDismissActions;
  }
  v17 = objc_msgSend(v16, "contentType");
  static UTType._unconditionallyBridgeFromObjectiveC(_:)(v17);

  static UTType.movie.getter(v18);
  LOBYTE(v17) = UTType.conforms(to:)(v7);

  v19 = swift_unknownObjectRelease(a2);
  v20 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
  v20(v7, v4, v19);
  ((void (*)(char *, uint64_t))v20)(v10, v4);
  if ((v17 & 1) != 0)
    return 2;
  else
    return 1;
}

void sub_1003234C4(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  __n128 v19;
  void (*v20)(char *, uint64_t, __n128);
  uint64_t v21;

  v4 = type metadata accessor for UTType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - v9;
  v11 = type metadata accessor for DOCPreviewController(0);
  if (swift_dynamicCastClass(a1, v11))
  {
    v12 = objc_opt_self(QLItem);
    v13 = swift_dynamicCastObjCClass(a2, v12);
    if (v13)
    {
      v14 = (void *)v13;
      swift_unknownObjectRetain(a2);
      v15 = objc_msgSend(v14, "fpItem");
      if (v15)
      {
        v16 = v15;
        if ((objc_msgSend(v15, "isWritable") & 1) != 0)
        {
          v17 = objc_msgSend(v16, "contentType");
          static UTType._unconditionallyBridgeFromObjectiveC(_:)(v17);

          static UTType.movie.getter(v18);
          LOBYTE(v17) = UTType.conforms(to:)(v7);

          v19 = swift_unknownObjectRelease(a2);
          v20 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
          v20(v7, v4, v19);
          ((void (*)(char *, uint64_t))v20)(v10, v4);
          if ((v17 & 1) != 0)
            return;
LABEL_10:
          sub_100475060(a2);
          return;
        }
        swift_unknownObjectRelease(a2);

      }
      else
      {
        swift_unknownObjectRelease(a2);
      }
    }
    if (QLPreviewItemEditingModeCreateCopyAndDisplayDismissActions != 1)
      return;
    goto LABEL_10;
  }
}

_QWORD *sub_100323664(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  NSString *v11;

  v2 = type metadata accessor for DOCPreviewController(0);
  v3 = swift_dynamicCastClass(a1, v2);
  if (!v3)
    return _swiftEmptyArrayStorage;
  v4 = (uint64_t *)(v3 + OBJC_IVAR____TtC5Files20DOCPreviewController_source);
  v5 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC5Files20DOCPreviewController_source + 16);
  if (v5 == 255)
    return _swiftEmptyArrayStorage;
  v6 = *v4;
  v7 = (void *)v4[1];
  sub_100323BA0(*v4, v7, v5 & 1);
  if ((sub_10046EAF0(v6, v7, v5 & 1) & 1) != 0)
  {
    v8 = _swiftEmptyArrayStorage;
  }
  else
  {
    v9 = sub_10006922C(&qword_100644930);
    v8 = (_QWORD *)swift_allocObject(v9, 64, 7);
    *((_OWORD *)v8 + 1) = xmmword_1004D9670;
    type metadata accessor for ActivityType(0);
    v8[7] = v10;
    v8[4] = UIActivityTypeCopyToPasteboard;
    v11 = UIActivityTypeCopyToPasteboard;
  }
  sub_100323BCC(v6, v7, v5);
  return v8;
}

double sub_100323760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  double result;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  _BYTE v28[12];
  _BOOL4 v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = &v28[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for DOCPreviewController(0);
  if (swift_dynamicCastClass(a1, v10))
  {
    v12 = objc_opt_self(QLItem);
    v13 = swift_dynamicCastObjCClass(a2, v12);
    if (v13)
    {
      v14 = (void *)v13;
      swift_unknownObjectRetain(a2);
      v15 = objc_msgSend(v14, "fpItem");
      if (v15)
      {
        v16 = v15;
        v29 = URL.startAccessingSecurityScopedResource()();
        v17 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
        objc_msgSend(v17, "setMaxConcurrentOperationCount:", 8);
        v18 = String._bridgeToObjectiveC()();
        objc_msgSend(v17, "setName:", v18);

        v19 = swift_allocObject(&unk_1005DD878, 24, 7);
        swift_unknownObjectWeakInit(v19 + 16);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(&v28[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], a3, v6);
        v20 = *(unsigned __int8 *)(v7 + 80);
        v21 = (v20 + 24) & ~v20;
        v22 = (v8 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
        v23 = swift_allocObject(&unk_1005DD8A0, v22 + 9, v20 | 7);
        *(_QWORD *)(v23 + 16) = v19;
        (*(void (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(v23 + v21, v9, v6);
        v24 = v23 + v22;
        *(_QWORD *)v24 = v16;
        *(_BYTE *)(v24 + 8) = v29;
        aBlock[4] = sub_100323B54;
        v31 = v23;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_10004A82C;
        aBlock[3] = &unk_1005DD8B8;
        v25 = _Block_copy(aBlock);
        v26 = v31;
        v27 = v16;
        objc_msgSend(v17, "addOperationWithBlock:", v25, swift_release(v26).n128_f64[0]);
        _Block_release(v25);
        swift_unknownObjectRelease(a2);

      }
      else
      {
        *(_QWORD *)&result = swift_unknownObjectRelease(a2).n128_u64[0];
      }
    }
  }
  return result;
}

id sub_1003239F0(uint64_t a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  char *v5;
  objc_super v7;

  *(_QWORD *)&v1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewItemObserver] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentLocationTitleObserver] = 0;
  v3 = &v1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookURL];
  v4 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = &v1[OBJC_IVAR____TtC5Files21DRIMainViewController_quicklookStateRestorationActivityIdentifier];
  *(_QWORD *)v5 = 0xD000000000000024;
  *((_QWORD *)v5 + 1) = 0x8000000100527D80;
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Files21DRIMainViewController____lazy_storage___internalConfiguration] = 0;
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for DRIMainViewController(0);
  return objc_msgSendSuper2(&v7, "initWithConfiguration:", a1);
}

uint64_t sub_100323AC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 9, v5);
}

void sub_100323B54()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1004729EC(*(_QWORD *)(v0 + 16), v0 + v2, *(void **)v3, *(unsigned __int8 *)(v3 + 8));
}

id sub_100323BA0(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) == 0)
    return (id)swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a1);
  return a2;
}

void sub_100323BCC(uint64_t a1, void *a2, unsigned __int8 a3)
{
  if (a3 != 255)
    sub_100323BE4(a1, a2, a3 & 1);
}

void sub_100323BE4(uint64_t a1, void *a2, char a3)
{
  swift_bridgeObjectRelease(a1);
  if ((a3 & 1) != 0)

}

void sub_100323C28(void *a1)
{
  uint64_t v1;

  sub_100474430(a1, v1);
}

uint64_t sub_100323C34(uint64_t a1)
{
  return sub_100323CF4(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_10031EB54);
}

uint64_t sub_100323C40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100323CB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  return sub_10031EE2C(*(void **)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_100323CE8(uint64_t a1)
{
  return sub_100323CF4(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_10031E0F8);
}

uint64_t sub_100323CF4(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  return a2(a1, *(_QWORD *)(v2 + 16), v2 + ((v4 + 24) & ~v4));
}

uint64_t sub_100323D44(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100323D84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_100323DF8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10031E3C8((void *)(v0 + v2), *(void **)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

unint64_t sub_100323E38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064EC00;
  if (!qword_10064EC00)
  {
    v1 = sub_10004F2F0(255, (unint64_t *)&unk_100650670, UIScene_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10064EC00);
  }
  return result;
}

uint64_t sub_100323E94()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100323EC0()
{
  uint64_t v0;

  sub_100208A08(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

ValueMetadata *type metadata accessor for DRIMainViewController.DOCPresentedViewControllerDismissalOptions()
{
  return &type metadata for DRIMainViewController.DOCPresentedViewControllerDismissalOptions;
}

unint64_t sub_100323EDC()
{
  unint64_t result;

  result = qword_10064EC20;
  if (!qword_10064EC20)
  {
    result = swift_getWitnessTable(&unk_1004E282C, &type metadata for DRIMainViewController.DOCPresentedViewControllerDismissalOptions);
    atomic_store(result, (unint64_t *)&qword_10064EC20);
  }
  return result;
}

unint64_t sub_100323F24()
{
  unint64_t result;

  result = qword_10064EC28;
  if (!qword_10064EC28)
  {
    result = swift_getWitnessTable(&unk_1004E27FC, &type metadata for DRIMainViewController.DOCPresentedViewControllerDismissalOptions);
    atomic_store(result, (unint64_t *)&qword_10064EC28);
  }
  return result;
}

unint64_t sub_100323F6C()
{
  unint64_t result;

  result = qword_10064EC30;
  if (!qword_10064EC30)
  {
    result = swift_getWitnessTable(&unk_1004E2854, &type metadata for DRIMainViewController.DOCPresentedViewControllerDismissalOptions);
    atomic_store(result, (unint64_t *)&qword_10064EC30);
  }
  return result;
}

unint64_t sub_100323FB4()
{
  unint64_t result;

  result = qword_10064EC38;
  if (!qword_10064EC38)
  {
    result = swift_getWitnessTable(&unk_1004E288C, &type metadata for DRIMainViewController.DOCPresentedViewControllerDismissalOptions);
    atomic_store(result, (unint64_t *)&qword_10064EC38);
  }
  return result;
}

BOOL sub_100324058(void **a1, void **a2)
{
  void *v2;
  void *v3;
  _BOOL8 result;
  BOOL v5;
  id v6;
  id v7;
  char v8;

  v2 = *a1;
  v3 = *a2;
  result = ((unint64_t)*a1 | (unint64_t)*a2) == 0;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    sub_10007C3E0();
    v6 = v2;
    v7 = v3;
    v8 = static NSObject.== infix(_:_:)(v6, v7);

    return v8 & 1;
  }
  return result;
}

uint64_t sub_1003240D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double (*v8)(void (*)(void *), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v9;
  __n128 v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE v15[24];
  uint64_t v16;
  _BYTE v17[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v17, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    v4 = result + 40;
    swift_beginAccess(result + 40, v14, 0, 0);
    sub_1000923F4(v4, (uint64_t)v15);
    if (v16)
    {
      sub_100092328((uint64_t)v15, (uint64_t)v11);
      sub_10009236C((uint64_t)v15);
      v5 = v12;
      v6 = v13;
      sub_10007E7A0(v11, v12);
      v7 = swift_allocObject(&unk_1005DDCA0, 24, 7);
      swift_weakInit(v7 + 16, v3);
      v8 = *(double (**)(void (*)(void *), uint64_t, uint64_t, uint64_t, __n128))(v6 + 16);
      v9 = swift_retain();
      v10.n128_f64[0] = v8(sub_10008D734, v7, v5, v6, v9);
      swift_release_n(v7, 2, v10);
      sub_100068588(v11);
    }
    else
    {
      sub_10009236C((uint64_t)v15);
    }
    return swift_release(v3);
  }
  return result;
}

uint64_t sub_1003241EC()
{
  id *v0;

  sub_10008F5C0((uint64_t)(v0 + 2));

  sub_10009236C((uint64_t)(v0 + 5));
  sub_10008D9C4(v0[11]);
  return swift_deallocClassInstance(v0, 96, 7);
}

void **initializeBufferWithCopyOfBuffer for DOCFileProviderSyncStateHeaderViewModel.State(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void **assignWithCopy for DOCFileProviderSyncStateHeaderViewModel.State(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  v5 = v3;

  return a1;
}

void **assignWithTake for DOCFileProviderSyncStateHeaderViewModel.State(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for DOCFileProviderSyncStateHeaderViewModel.State(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DOCFileProviderSyncStateHeaderViewModel.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DOCFileProviderSyncStateHeaderViewModel.State()
{
  return &type metadata for DOCFileProviderSyncStateHeaderViewModel.State;
}

uint64_t sub_100324374()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003243A0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003243C4()
{
  uint64_t v0;

  return sub_1003240D0(v0);
}

uint64_t DOCUncheckedSendable.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 80) - 8) + 32))(v3 + *(_QWORD *)(*(_QWORD *)v3 + 88), a1);
  return v3;
}

uint64_t DOCUncheckedSendable.init(_:)(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), a1);
  return v1;
}

uint64_t DOCUncheckedSendable.performAsyncThrowing(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003244B4, 0, 0);
}

uint64_t sub_1003244B4()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  v1 = (int *)v0[2];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[6] + 16))(v0[7], v0[4] + *(_QWORD *)(*(_QWORD *)v0[4] + 88), v0[5]);
  v4 = (uint64_t (*)(_QWORD))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  v0[8] = v2;
  *v2 = v0;
  v2[1] = sub_100324530;
  return v4(v0[7]);
}

uint64_t sub_100324530()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*v1 + 56);
  v2 = *(_QWORD *)(*v1 + 64);
  v4 = *(_QWORD *)(*v1 + 40);
  v5 = *(_QWORD *)(*v1 + 48);
  v6 = *v1;
  *(_QWORD *)(v6 + 72) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    return swift_task_switch(sub_1003245D0, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v6 + 56));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1003245D0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DOCUncheckedSendable.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return v0;
}

uint64_t DOCUncheckedSendable.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t DOCWeakUncheckedSendable.__allocating_init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = sub_100324720(a1, a2, a3, a4);
  swift_unknownObjectRelease(a1);
  return v5;
}

uint64_t DOCWeakUncheckedSendable.init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1003246EC(a1);
  swift_unknownObjectRelease(a1);
  return v2;
}

uint64_t DOCWeakUncheckedSendable.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_1003246EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_unknownObjectWeakInit(v1 + 16, 0);
  swift_unknownObjectWeakAssign(v3, a1);
  return v1;
}

uint64_t sub_100324720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for DOCWeakUncheckedSendable(0, *(_QWORD *)(v4 + 80), a3, a4);
  v7 = swift_allocObject(v6, 24, 7);
  v8 = swift_unknownObjectWeakInit(v7 + 16);
  swift_unknownObjectWeakAssign(v8, a1);
  return v7;
}

uint64_t sub_100324770(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 1, &v4, a1 + 88);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for DOCUncheckedSendable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007E804(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DOCUncheckedSendable);
}

uint64_t sub_1003247EC(uint64_t a1)
{
  const char *v2;

  v2 = "\b";
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 88);
}

uint64_t type metadata accessor for DOCWeakUncheckedSendable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007E804(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DOCWeakUncheckedSendable);
}

void sub_100324838(id a1)
{
  char *v1;
  void *v2;
  void **v4;
  void *v5;
  id v6;
  char v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  char v25[24];

  v2 = v1;
  v4 = (void **)&v1[OBJC_IVAR____TtC5Files17DOCColumnViewCell_browserContainerController];
  swift_beginAccess(&v1[OBJC_IVAR____TtC5Files17DOCColumnViewCell_browserContainerController], v25, 0, 0);
  v5 = *v4;
  if (*v4)
  {
    if (!a1)
      goto LABEL_9;
    type metadata accessor for DOCBrowserContainerController();
    v6 = v5;
    a1 = a1;
    v7 = static NSObject.== infix(_:_:)(v6, a1);

    if ((v7 & 1) != 0)
      return;
  }
  else if (!a1)
  {
    return;
  }
  v8 = a1;
  if ((sub_100324A40(v8) & 1) != 0)
  {
    objc_msgSend(v8, "doc_removeFromParentWithRemoveSubviewBlock:", 0);
    v9 = objc_msgSend(v8, "viewIfLoaded");
    objc_msgSend(v9, "removeFromSuperview");

  }
  v5 = *v4;
  if (*v4)
  {
LABEL_9:
    v10 = v5;
    v11 = objc_msgSend(v2, "contentView");
    v12 = objc_msgSend(v10, "view");
    if (v12)
    {
      v13 = v12;
      objc_msgSend(v11, "addSubview:", v12);

      v14 = objc_msgSend(v10, "view");
      if (v14)
      {
        v15 = v14;
        v16 = objc_msgSend(v2, "contentView");
        objc_msgSend(v16, "bounds");
        v18 = v17;
        v20 = v19;
        v22 = v21;
        v24 = v23;

        objc_msgSend(v15, "setFrame:", v18, v20, v22, v24);
        sub_100324B18();
        sub_100324D34(0);

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_100324A40(void *a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  char v7;

  v2 = objc_msgSend(a1, "viewIfLoaded");
  v3 = objc_msgSend(v2, "superview");

  v4 = objc_msgSend(v1, "contentView");
  v5 = v4;
  if (v3)
  {
    if (!v4)
    {
      v7 = 0;
      goto LABEL_8;
    }
    sub_10004F2F0(0, (unint64_t *)&qword_100645B80, UIView_ptr);
    v6 = v3;
    v7 = static NSObject.== infix(_:_:)(v6, v5);

  }
  else
  {
    if (!v4)
    {
      v7 = 1;
      return v7 & 1;
    }
    v7 = 0;
  }
  v3 = v5;
LABEL_8:

  return v7 & 1;
}

void sub_100324B18()
{
  char *v0;
  char *v1;
  uint64_t v2;
  id v3;
  void *v4;
  char *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char *v13;
  double v14;
  id v15;
  _QWORD v16[5];
  uint64_t v17;

  v1 = v0;
  v2 = OBJC_IVAR____TtC5Files17DOCColumnViewCell_separatorView;
  v3 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC5Files17DOCColumnViewCell_separatorView], "superview");
  if (!v3)
    goto LABEL_3;
  v4 = v3;
  sub_10004F2F0(0, (unint64_t *)&qword_100645B80, UIView_ptr);
  v5 = v1;
  v6 = v4;
  LOBYTE(v4) = static NSObject.== infix(_:_:)(v6, v5);

  if ((v4 & 1) == 0)
  {
LABEL_3:
    v7 = objc_msgSend(v1, "contentView");
    objc_msgSend(v7, "addSubview:", *(_QWORD *)&v1[v2]);

  }
  v8 = objc_opt_self(UIView);
  v9 = swift_allocObject(&unk_1005DDE98, 24, 7);
  *(_QWORD *)(v9 + 16) = v1;
  v10 = swift_allocObject(&unk_1005DDEC0, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_1003266C4;
  *(_QWORD *)(v10 + 24) = v9;
  v16[4] = sub_10006657C;
  v17 = v10;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_10006655C;
  v16[3] = &unk_1005DDED8;
  v11 = _Block_copy(v16);
  v12 = v17;
  v13 = v1;
  swift_retain();
  objc_msgSend((id)v8, "performWithoutAnimation:", v11, swift_release(v12).n128_f64[0]);
  _Block_release(v11);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v10, "", 97, 92, 40, 1);
  *(_QWORD *)&v14 = swift_release(v10).n128_u64[0];
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v15 = objc_msgSend(v13, "contentView", v14);
    objc_msgSend(v15, "bringSubviewToFront:", *(_QWORD *)&v1[v2]);
    swift_release(v9);

  }
}

void sub_100324D34(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  Class isa;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  _QWORD *v42;
  id v43;
  NSObject *v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  _QWORD *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  NSObject *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  void *v61;
  uint64_t v62;
  char *v63;
  id v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  uint64_t v88;
  id v89;
  Class v90;
  uint64_t v91;
  id v92;
  void (*v93)(char *, uint64_t);
  char *v94;
  uint64_t v95;
  void *v96;
  char *v97;
  id v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  _BYTE *v128;
  Class v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  uint8_t *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  id v143;
  Class v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  uint8_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t (*v155)(char *, uint64_t, uint64_t);
  uint64_t v156;
  uint64_t v157;
  NSObject *v158;
  os_log_type_t v159;
  uint8_t *v160;
  uint64_t v161;
  id v162;
  Class v163;
  uint64_t v164;
  uint64_t v165;
  NSObject *v166;
  uint64_t v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172[3];
  uint64_t v173;
  uint64_t v174;
  _BYTE v175[16];
  uint64_t v176[3];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v169 = v4;
  v170 = v5;
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v166 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v166 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v166 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v166 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v166 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v166 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v166 - v24;
  if (a1)
  {
    v26 = type metadata accessor for DOCItemCollectionCell();
    v27 = (void *)swift_dynamicCastClass(a1, v26);
    if (v27)
      v28 = a1;
    v29 = v169;
    v30 = v170;
    v31 = *(void **)(v2 + OBJC_IVAR____TtC5Files17DOCColumnViewCell_navigationFocusGuide);
    v32 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v33 = swift_allocObject(v32, 40, 7);
    *(_OWORD *)(v33 + 16) = xmmword_1004D9B40;
    *(_QWORD *)(v33 + 32) = a1;
    v176[0] = v33;
    specialized Array._endMutation()(v33);
    v34 = v176[0];
    v35 = a1;
    v36 = v31;
    sub_10006922C((uint64_t *)&unk_100648EE0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v36, "setPreferredFocusEnvironments:", isa, swift_bridgeObjectRelease(v34).n128_f64[0]);

    v39 = Logger.UI.unsafeMutableAddressor(v38);
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v25, v39, v29);
    v40 = v27;
    v41 = v35;
    v42 = v40;
    v43 = v41;
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v44, (os_log_type_t)v45))
    {

      (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v29);
      return;
    }
    v166 = v44;
    LODWORD(v167) = v45;
    v46 = swift_slowAlloc(32, -1);
    v47 = (_QWORD *)swift_slowAlloc(8, -1);
    v168 = (id)swift_slowAlloc(64, -1);
    v176[0] = (uint64_t)v168;
    *(_DWORD *)v46 = 136315650;
    v174 = sub_1000544FC(0xD00000000000001CLL, 0x8000000100527F10, v176);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v174, v175);
    *(_WORD *)(v46 + 12) = 2112;
    v174 = (uint64_t)v43;
    v48 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v174, v175);
    *v47 = a1;
    v49 = v47;

    *(_WORD *)(v46 + 22) = 2080;
    if (v27 && (v50 = (*(uint64_t (**)(void))((swift_isaMask & *v42) + 0x1F8))()) != 0)
    {
      v51 = (void *)v50;
      sub_100076450();
      v53 = v52;
      v55 = v54;
      swift_bridgeObjectRetain(v54);

      v56 = v166;
    }
    else
    {
      v56 = v166;
      v55 = 0xE900000000000065;
      v53 = 0x6C746974206C696ELL;
    }
    v174 = sub_1000544FC(v53, v55, v176);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v174, v175);

    swift_bridgeObjectRelease(v55);
    _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)v167, "%s 1 found cell provided: %@. %s", (uint8_t *)v46, 0x20u);
    v91 = sub_10006922C(&qword_100643AB0);
    swift_arrayDestroy(v49, 1, v91);
    swift_slowDealloc(v49, -1, -1);
    v92 = v168;
    swift_arrayDestroy(v168, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v92, -1, -1);
    swift_slowDealloc(v46, -1, -1);

    v93 = *(void (**)(char *, uint64_t))(v170 + 8);
    v94 = v25;
LABEL_21:
    v95 = v169;
LABEL_22:
    v93(v94, v95);
    return;
  }
  v57 = (uint64_t *)(v2 + OBJC_IVAR____TtC5Files17DOCColumnViewCell_browserContainerController);
  swift_beginAccess(v2 + OBJC_IVAR____TtC5Files17DOCColumnViewCell_browserContainerController, v176, 0, 0);
  v59 = *v57;
  if (*v57)
  {
    v60 = (void **)(v59 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController);
    swift_beginAccess(v59 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController, &v174, 0, 0);
    v61 = *v60;
    if (*v60)
    {
      v62 = type metadata accessor for DOCItemCollectionViewController(0);
      v58 = swift_dynamicCastClass(v61, v62);
      if (v58)
      {
        v63 = (char *)v58;
        v64 = v61;
        v65 = sub_100179980();
        if (v65)
        {
          v66 = v65;
          v67 = Logger.UI.unsafeMutableAddressor(v65);
          v68 = v169;
          v69 = v170;
          (*(void (**)(char *, uint64_t, uint64_t))(v170 + 16))(v23, v67, v169);
          v70 = v66;
          v71 = Logger.logObject.getter(v70);
          v72 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v71, v72))
          {
            v168 = v64;
            v73 = swift_slowAlloc(22, -1);
            v167 = swift_slowAlloc(64, -1);
            v172[0] = v167;
            *(_DWORD *)v73 = 136315394;
            v173 = sub_1000544FC(0xD00000000000001CLL, 0x8000000100527F10, v172);
            v74 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, &v174);
            *(_WORD *)(v73 + 12) = 2080;
            v75 = (*(uint64_t (**)(__n128))((swift_isaMask & *v70) + 0x1F8))(v74);
            if (v75)
            {
              v76 = (void *)v75;
              sub_100076450();
              v78 = v77;
              v80 = v79;
              swift_bridgeObjectRetain(v79);

            }
            else
            {
              v78 = 0x6C746974206C696ELL;
              v80 = 0xE900000000000065;
            }
            v173 = sub_1000544FC(v78, v80, v172);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, &v174);

            swift_bridgeObjectRelease(v80);
            _os_log_impl((void *)&_mh_execute_header, v71, v72, "%s 2 itemCollectionVC found preferredFocusCell cell: %s", (uint8_t *)v73, 0x16u);
            v137 = v167;
            swift_arrayDestroy(v167, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v137, -1, -1);
            swift_slowDealloc(v73, -1, -1);

            (*(void (**)(char *, uint64_t))(v170 + 8))(v23, v169);
            v64 = v168;
          }
          else
          {

            (*(void (**)(char *, uint64_t))(v69 + 8))(v23, v68);
          }
          v138 = *(void **)(v2 + OBJC_IVAR____TtC5Files17DOCColumnViewCell_navigationFocusGuide);
          v139 = sub_10006922C((uint64_t *)&unk_1006441A0);
          v140 = swift_allocObject(v139, 40, 7);
          *(_OWORD *)(v140 + 16) = xmmword_1004D9B40;
          *(_QWORD *)(v140 + 32) = v70;
          v172[0] = v140;
          specialized Array._endMutation()(v140);
          v141 = v172[0];
          v142 = v70;
          v143 = v138;
          sub_10006922C((uint64_t *)&unk_100648EE0);
          v144 = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v143, "setPreferredFocusEnvironments:", v144, swift_bridgeObjectRelease(v141).n128_f64[0]);

          return;
        }
        v96 = v64;
        v97 = &v63[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode];
        *(_QWORD *)&v99 = swift_beginAccess(&v63[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode], v172, 0, 0).n128_u64[0];
        if (*(_QWORD *)v97 == 2)
        {
          v98 = objc_msgSend(v63, "isEditing", v99);
          if ((v98 & 1) == 0)
          {
            v100 = *(_QWORD *)&v63[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__selectedChildNode];
            if (v100)
            {
              v101 = swift_unknownObjectRetain(*(_QWORD *)&v63[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__selectedChildNode]);
              v102 = Logger.UI.unsafeMutableAddressor(v101);
              v103 = v169;
              v104 = v170;
              (*(void (**)(char *, uint64_t, uint64_t))(v170 + 16))(v20, v102, v169);
              v105 = swift_unknownObjectRetain_n(v100, 2);
              v106 = Logger.logObject.getter(v105);
              v107 = static os_log_type_t.error.getter(v106);
              if (!os_log_type_enabled(v106, v107))
              {

                swift_unknownObjectRelease_n(v100, 3);
                (*(void (**)(char *, uint64_t))(v104 + 8))(v20, v103);
                return;
              }
              v108 = swift_slowAlloc(22, -1);
              v109 = swift_slowAlloc(64, -1);
              v173 = v109;
              *(_DWORD *)v108 = 136315394;
              v171 = sub_1000544FC(0xD00000000000001CLL, 0x8000000100527F10, &v173);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);
              *(_WORD *)(v108 + 12) = 2080;
              v171 = v100;
              swift_unknownObjectRetain(v100);
              v110 = sub_10006922C((uint64_t *)&unk_1006424B0);
              v111 = String.init<A>(describing:)(&v171, v110);
              v113 = v112;
              v171 = sub_1000544FC(v111, v112, &v173);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);
              swift_unknownObjectRelease_n(v100, 2);
              swift_bridgeObjectRelease(v113);
              _os_log_impl((void *)&_mh_execute_header, v106, v107, "%s 2 itemCollectionVC found selectedChildNode but preferredFocusCell was nil. This is an error. Node: %s", (uint8_t *)v108, 0x16u);
              swift_arrayDestroy(v109, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v109, -1, -1);
              swift_slowDealloc(v108, -1, -1);
              swift_unknownObjectRelease(v100);

              v93 = *(void (**)(char *, uint64_t))(v170 + 8);
              v94 = v20;
              goto LABEL_21;
            }
          }
        }
        v114 = &v63[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController];
        v115 = *(_QWORD *)&v63[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8];
        v116 = v170;
        if ((unint64_t)v115 >> 62)
        {
          if (v115 < 0)
            v151 = *(_QWORD *)&v63[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8];
          else
            v151 = v115 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*(_QWORD *)&v63[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController
                                                 + 8]);
          v152 = _CocoaArrayWrapper.endIndex.getter(v151);
          swift_bridgeObjectRelease(v115);
          if (v152 >= 1)
          {
LABEL_31:
            v168 = v96;
            v117 = *((_QWORD *)v114 + 1);
            if ((unint64_t)v117 >> 62)
            {
              if (v117 < 0)
                v164 = *((_QWORD *)v114 + 1);
              else
                v164 = v117 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(*((_QWORD *)v114 + 1));
              v165 = _CocoaArrayWrapper.endIndex.getter(v164);
              v119 = v169;
              if (v165)
              {
LABEL_33:
                if (*(_QWORD *)((v117 & 0xFFFFFFFFFFFFF8) + 0x10))
                {
                  v120 = *(_QWORD *)(v117 + 32);
                  swift_unknownObjectRetain(v120);
                  swift_bridgeObjectRelease(v117);
                  v121 = sub_100195350(v120);
                  v122 = swift_unknownObjectRelease(v120);
                  if (v121)
                  {
                    v123 = *(void **)(v2 + OBJC_IVAR____TtC5Files17DOCColumnViewCell_navigationFocusGuide);
                    v124 = sub_10006922C((uint64_t *)&unk_1006441A0);
                    v125 = swift_allocObject(v124, 40, 7);
                    *(_OWORD *)(v125 + 16) = xmmword_1004D9B40;
                    *(_QWORD *)(v125 + 32) = v121;
                    v173 = v125;
                    specialized Array._endMutation()(v125);
                    v126 = v173;
                    v127 = v123;
                    v128 = v121;
                    sub_10006922C((uint64_t *)&unk_100648EE0);
                    v129 = Array._bridgeToObjectiveC()().super.isa;
                    objc_msgSend(v127, "setPreferredFocusEnvironments:", v129, swift_bridgeObjectRelease(v126).n128_f64[0]);

                    v131 = Logger.UI.unsafeMutableAddressor(v130);
                    v132 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 16))(v17, v131, v119);
                    v133 = Logger.logObject.getter(v132);
                    v134 = static os_log_type_t.info.getter();
                    if (os_log_type_enabled(v133, v134))
                    {
                      v135 = (uint8_t *)swift_slowAlloc(12, -1);
                      v136 = swift_slowAlloc(32, -1);
                      v173 = v136;
                      *(_DWORD *)v135 = 136315138;
                      v171 = sub_1000544FC(0xD00000000000001CLL, 0x8000000100527F10, &v173);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);
                      _os_log_impl((void *)&_mh_execute_header, v133, v134, "%s 3.1 itemCollectionVC found the first cell", v135, 0xCu);
                      swift_arrayDestroy(v136, 1, (char *)&type metadata for Any + 8);
                      swift_slowDealloc(v136, -1, -1);
                      swift_slowDealloc(v135, -1, -1);

                    }
                    else
                    {

                    }
                    v93 = *(void (**)(char *, uint64_t))(v116 + 8);
                    v94 = v17;
                  }
                  else
                  {
                    v145 = Logger.UI.unsafeMutableAddressor(v122);
                    v146 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 16))(v14, v145, v119);
                    v147 = Logger.logObject.getter(v146);
                    v148 = static os_log_type_t.info.getter();
                    if (os_log_type_enabled(v147, v148))
                    {
                      v149 = (uint8_t *)swift_slowAlloc(12, -1);
                      v150 = swift_slowAlloc(32, -1);
                      v173 = v150;
                      *(_DWORD *)v149 = 136315138;
                      v171 = sub_1000544FC(0xD00000000000001CLL, 0x8000000100527F10, &v173);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);
                      _os_log_impl((void *)&_mh_execute_header, v147, v148, "%s 3.2 itemCollectionVC found no cell", v149, 0xCu);
                      swift_arrayDestroy(v150, 1, (char *)&type metadata for Any + 8);
                      swift_slowDealloc(v150, -1, -1);
                      swift_slowDealloc(v149, -1, -1);
                    }

                    v93 = *(void (**)(char *, uint64_t))(v116 + 8);
                    v94 = v14;
                  }
                  v95 = v119;
                  goto LABEL_22;
                }
LABEL_61:
                __break(1u);
                return;
              }
            }
            else
            {
              v118 = *(_QWORD *)((v117 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain(*((_QWORD *)v114 + 1));
              v119 = v169;
              if (v118)
                goto LABEL_33;
            }
            swift_bridgeObjectRelease(v117);
            __break(1u);
            goto LABEL_61;
          }
        }
        else if (*(uint64_t *)((v115 & 0xFFFFFFFFFFFFF8) + 0x10) >= 1)
        {
          goto LABEL_31;
        }
        v153 = Logger.UI.unsafeMutableAddressor(v98);
        v154 = v116;
        v155 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 16);
        v156 = v169;
        v157 = v155(v11, v153, v169);
        v158 = Logger.logObject.getter(v157);
        v159 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v158, v159))
        {
          v160 = (uint8_t *)swift_slowAlloc(12, -1);
          v161 = swift_slowAlloc(32, -1);
          v173 = v161;
          *(_DWORD *)v160 = 136315138;
          v171 = sub_1000544FC(0xD00000000000001CLL, 0x8000000100527F10, &v173);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v172);
          _os_log_impl((void *)&_mh_execute_header, v158, v159, "%s 4 itemCollectionVC found no cell", v160, 0xCu);
          swift_arrayDestroy(v161, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v161, -1, -1);
          swift_slowDealloc(v160, -1, -1);

          (*(void (**)(char *, uint64_t))(v170 + 8))(v11, v156);
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v154 + 8))(v11, v156);
        }
        v162 = *(id *)(v2 + OBJC_IVAR____TtC5Files17DOCColumnViewCell_navigationFocusGuide);
        sub_10006922C((uint64_t *)&unk_100648EE0);
        v163 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v162, "setPreferredFocusEnvironments:", v163);

        return;
      }
    }
  }
  v81 = Logger.UI.unsafeMutableAddressor(v58);
  v82 = v169;
  v83 = v170;
  v84 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v170 + 16))(v8, v81, v169);
  v85 = Logger.logObject.getter(v84);
  v86 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v85, v86))
  {
    v87 = (uint8_t *)swift_slowAlloc(12, -1);
    v88 = swift_slowAlloc(32, -1);
    v172[0] = v88;
    *(_DWORD *)v87 = 136315138;
    v173 = sub_1000544FC(0xD00000000000001CLL, 0x8000000100527F10, v172);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, &v174);
    _os_log_impl((void *)&_mh_execute_header, v85, v86, "%s 5 itemCollectionVC found no cell", v87, 0xCu);
    swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v88, -1, -1);
    swift_slowDealloc(v87, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v83 + 8))(v8, v82);
  v89 = *(id *)(v2 + OBJC_IVAR____TtC5Files17DOCColumnViewCell_navigationFocusGuide);
  sub_10006922C((uint64_t *)&unk_100648EE0);
  v90 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v89, "setPreferredFocusEnvironments:", v90);

}

char *sub_100325E20(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_class *ObjectType;
  uint64_t v10;
  id v11;
  char *v12;
  uint64_t v13;
  id v14;
  id v15;
  char *v16;
  id v17;
  uint64_t v18;
  id v19;
  Class isa;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  Class v37;
  objc_super v39;

  ObjectType = (objc_class *)swift_getObjectType(v4);
  *(_QWORD *)&v4[OBJC_IVAR____TtC5Files17DOCColumnViewCell_browserContainerController] = 0;
  v10 = OBJC_IVAR____TtC5Files17DOCColumnViewCell_navigationFocusGuide;
  v11 = objc_allocWithZone((Class)UIFocusGuide);
  v12 = v4;
  *(_QWORD *)&v4[v10] = objc_msgSend(v11, "init");
  v13 = OBJC_IVAR____TtC5Files17DOCColumnViewCell_separatorView;
  *(_QWORD *)&v12[v13] = objc_msgSend(objc_allocWithZone((Class)DOCSeparatorView), "init");

  v39.receiver = v12;
  v39.super_class = ObjectType;
  v14 = objc_msgSendSuper2(&v39, "initWithFrame:", a1, a2, a3, a4);
  v15 = objc_allocWithZone((Class)UIView);
  v16 = (char *)v14;
  v17 = objc_msgSend(v15, "init");
  objc_msgSend(v16, "setBackgroundView:", v17);

  objc_msgSend(v16, "setClipsToBounds:", 1);
  v18 = OBJC_IVAR____TtC5Files17DOCColumnViewCell_navigationFocusGuide;
  objc_msgSend(v16, "addLayoutGuide:", *(_QWORD *)&v16[OBJC_IVAR____TtC5Files17DOCColumnViewCell_navigationFocusGuide]);
  v19 = *(id *)&v16[v18];
  sub_10006922C((uint64_t *)&unk_100648EE0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v19, "setPreferredFocusEnvironments:", isa);

  v21 = (void *)objc_opt_self(NSLayoutConstraint);
  v22 = sub_10006922C((uint64_t *)&unk_1006441A0);
  v23 = swift_allocObject(v22, 64, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1004DAC10;
  v24 = objc_msgSend(*(id *)&v16[v18], "leadingAnchor");
  v25 = objc_msgSend(v16, "leadingAnchor");
  v26 = objc_msgSend(v24, "constraintEqualToAnchor:", v25);

  *(_QWORD *)(v23 + 32) = v26;
  v27 = objc_msgSend(*(id *)&v16[v18], "trailingAnchor");
  v28 = objc_msgSend(v16, "trailingAnchor");
  v29 = objc_msgSend(v27, "constraintEqualToAnchor:", v28);

  *(_QWORD *)(v23 + 40) = v29;
  v30 = objc_msgSend(*(id *)&v16[v18], "topAnchor");
  v31 = objc_msgSend(v16, "topAnchor");
  v32 = objc_msgSend(v30, "constraintEqualToAnchor:", v31);

  *(_QWORD *)(v23 + 48) = v32;
  v33 = objc_msgSend(*(id *)&v16[v18], "bottomAnchor");
  v34 = objc_msgSend(v16, "bottomAnchor");
  v35 = objc_msgSend(v33, "constraintEqualToAnchor:", v34);

  *(_QWORD *)(v23 + 56) = v35;
  specialized Array._endMutation()(v36);
  sub_10004F2F0(0, (unint64_t *)&unk_100642440, NSLayoutConstraint_ptr);
  v37 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v21, "activateConstraints:", v37, swift_bridgeObjectRelease(v23).n128_f64[0]);

  objc_msgSend(v16, "setHoverStyle:", 0);
  return v16;
}

void sub_100326248()
{
  char *v0;
  id *v1;
  double v2;
  id v3;
  void *v4;
  _BYTE v5[24];
  objc_super v6;

  v6.receiver = v0;
  v6.super_class = (Class)swift_getObjectType(v0);
  objc_msgSendSuper2(&v6, "layoutSubviews");
  v1 = (id *)&v0[OBJC_IVAR____TtC5Files17DOCColumnViewCell_browserContainerController];
  *(_QWORD *)&v2 = swift_beginAccess(&v0[OBJC_IVAR____TtC5Files17DOCColumnViewCell_browserContainerController], v5, 0, 0).n128_u64[0];
  if (!*v1)
    goto LABEL_4;
  v3 = objc_msgSend(*v1, "view", v2);
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v0, "frame");
    objc_msgSend(v4, "setFrame:", 0.0, 0.0);

LABEL_4:
    sub_100324B18();
    sub_100324D34(0);
    return;
  }
  __break(1u);
}

id sub_100326338(char *a1)
{
  void *v2;
  id v3;
  double v4;
  double v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  uint64_t v13;
  id v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double MaxX;
  double v28;
  double v29;
  double v31;
  CGFloat rect;
  CGRect v33;
  CGRect v34;
  CGRect v35;

  v2 = (void *)objc_opt_self(DOCSeparatorView);
  v3 = objc_msgSend(a1, "traitCollection");
  objc_msgSend(v2, "separatorThicknessForTraitCollection:", v3);
  v5 = v4;

  objc_msgSend(a1, "bounds");
  v7 = v6;
  v9 = v8;
  v11 = v10;
  rect = v12;
  v13 = OBJC_IVAR____TtC5Files17DOCColumnViewCell_separatorView;
  v14 = objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC5Files17DOCColumnViewCell_separatorView], "frame");
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  if ((UIView.doc_isRTL.getter(v14) & 1) != 0)
  {
    v23 = 0.0;
  }
  else
  {
    v33.origin.x = v7;
    v33.origin.y = v9;
    v33.size.width = v11;
    v33.size.height = rect;
    v31 = v11;
    v24 = v9;
    v25 = v7;
    v26 = v5;
    MaxX = CGRectGetMaxX(v33);
    v34.origin.x = v16;
    v34.origin.y = v18;
    v34.size.width = v20;
    v34.size.height = v22;
    v23 = MaxX - CGRectGetWidth(v34);
    v5 = v26;
    v7 = v25;
    v9 = v24;
    v11 = v31;
  }
  objc_msgSend(a1, "safeAreaInsets", *(_QWORD *)&v31);
  v29 = v28;
  v35.origin.x = v7;
  v35.origin.y = v9;
  v35.size.width = v11;
  v35.size.height = rect;
  return objc_msgSend(*(id *)&a1[v13], "setFrame:", v23, v29, v5, CGRectGetHeight(v35));
}

void sub_1003264B8()
{
  uint64_t v0;
  void *v1;
  id *v2;
  id v3;
  char v4;
  id v5;
  id v6;
  _BYTE v7[24];

  v1 = objc_autoreleasePoolPush();
  v2 = (id *)(v0 + OBJC_IVAR____TtC5Files17DOCColumnViewCell_browserContainerController);
  swift_beginAccess(v0 + OBJC_IVAR____TtC5Files17DOCColumnViewCell_browserContainerController, v7, 1, 0);
  if (*v2)
  {
    v3 = *v2;
    v4 = sub_100324A40(v3);

    v5 = *v2;
    if ((v4 & 1) != 0 && v5)
    {
      v6 = v5;
      objc_msgSend(v6, "doc_removeFromParentWithRemoveSubviewBlock:", 0);
      sub_1002C7138(0);

      v5 = *v2;
    }
  }
  else
  {
    v5 = 0;
  }
  *v2 = 0;
  sub_100324838(v5);

  objc_autoreleasePoolPop(v1);
}

uint64_t type metadata accessor for DOCColumnViewCell()
{
  return objc_opt_self(_TtC5Files17DOCColumnViewCell);
}

uint64_t sub_1003266A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1003266C4()
{
  uint64_t v0;

  return sub_100326338(*(char **)(v0 + 16));
}

uint64_t sub_1003266CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1003266DC(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  id v6;
  char *v7;
  uint64_t v8;
  id result;
  objc_super v10;

  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Files17DOCColumnViewCell_browserContainerController] = 0;
  v5 = OBJC_IVAR____TtC5Files17DOCColumnViewCell_navigationFocusGuide;
  v6 = objc_allocWithZone((Class)UIFocusGuide);
  v7 = v2;
  *(_QWORD *)&v2[v5] = objc_msgSend(v6, "init");
  v8 = OBJC_IVAR____TtC5Files17DOCColumnViewCell_separatorView;
  *(_QWORD *)&v7[v8] = objc_msgSend(objc_allocWithZone((Class)DOCSeparatorView), "init");

  v10.receiver = v7;
  v10.super_class = ObjectType;
  result = objc_msgSendSuper2(&v10, "initWithCoder:", a1);
  if (result)
  {

    result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001DLL, 0x80000001005223F0, "Files/DOCColumnViewCell.swift", 29, 2, 58, 0);
    __break(1u);
  }
  return result;
}

_QWORD *sub_1003267F4@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

uint64_t sub_100326814()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_100326844()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v0 = sub_10006922C(&qword_100647F10);
  __chkstk_darwin(v0);
  v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LocalizedStringResource(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TypeDisplayRepresentation(0, v5);
  sub_10007E874(v8, static CompressionFormat.typeDisplayRepresentation);
  sub_10007E788(v8, (uint64_t)static CompressionFormat.typeDisplayRepresentation);
  LocalizedStringResource.init(stringLiteral:)(0x74616D726F46, 0xE600000000000000);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v7, v2);
}

uint64_t CompressionFormat.typeDisplayRepresentation.unsafeMutableAddressor(double a1)
{
  uint64_t v1;

  if (qword_100640FD8 != -1)
    swift_once(&qword_100640FD8, sub_100326844);
  v1 = type metadata accessor for TypeDisplayRepresentation(0, a1);
  return sub_10007E788(v1, (uint64_t)static CompressionFormat.typeDisplayRepresentation);
}

uint64_t static CompressionFormat.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  _BYTE v7[24];

  if (qword_100640FD8 != -1)
    swift_once(&qword_100640FD8, sub_100326844);
  v3 = type metadata accessor for TypeDisplayRepresentation(0, a2);
  v4 = sub_10007E788(v3, (uint64_t)static CompressionFormat.typeDisplayRepresentation);
  v5 = swift_beginAccess(v4, v7, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3, v5);
}

uint64_t static CompressionFormat.typeDisplayRepresentation.setter(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _BYTE v8[24];

  if (qword_100640FD8 != -1)
    swift_once(&qword_100640FD8, sub_100326844);
  v3 = type metadata accessor for TypeDisplayRepresentation(0, a2);
  v4 = sub_10007E788(v3, (uint64_t)static CompressionFormat.typeDisplayRepresentation);
  v5 = swift_beginAccess(v4, v8, 33, 0);
  v6 = *(_QWORD *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v6 + 24))(v4, a1, v3, v5);
  swift_endAccess(v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v3);
}

uint64_t (*static CompressionFormat.typeDisplayRepresentation.modify(uint64_t a1, double a2))(_QWORD)
{
  uint64_t v3;
  uint64_t v4;

  if (qword_100640FD8 != -1)
    swift_once(&qword_100640FD8, sub_100326844);
  v3 = type metadata accessor for TypeDisplayRepresentation(0, a2);
  v4 = sub_10007E788(v3, (uint64_t)static CompressionFormat.typeDisplayRepresentation);
  swift_beginAccess(v4, a1, 33, 0);
  return j__swift_endAccess;
}

Files::CompressionFormat_optional __swiftcall CompressionFormat.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  Files::CompressionFormat_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005C06A0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4.value = Files_CompressionFormat_appleArchive;
  else
    v4.value = Files_CompressionFormat_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

_UNKNOWN **static CompressionFormat.allCases.getter()
{
  return &off_1005C06F0;
}

uint64_t CompressionFormat.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x637241656C707061;
  else
    return 7367034;
}

uint64_t sub_100326BEC(char *a1, char *a2)
{
  return sub_10039E650(*a1, *a2);
}

Swift::Int sub_100326BF8()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x637241656C707061;
  else
    v2 = 7367034;
  if (v1)
    v3 = 0xEC00000065766968;
  else
    v3 = 0xE300000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100326C78(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x637241656C707061;
  else
    v2 = 7367034;
  if (*v1)
    v3 = 0xEC00000065766968;
  else
    v3 = 0xE300000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100326CD4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x637241656C707061;
  else
    v3 = 7367034;
  if (v2)
    v4 = 0xEC00000065766968;
  else
    v4 = 0xE300000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100326D50@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005C06A0, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100326DAC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 7367034;
  if (*v1)
    v2 = 0x637241656C707061;
  v3 = 0xE300000000000000;
  if (*v1)
    v3 = 0xEC00000065766968;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100326DEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100328E50();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_100326E24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100328DCC();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

void sub_100326E5C(_QWORD *a1@<X8>)
{
  *a1 = &off_1005C0718;
}

uint64_t sub_100326E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v13;
  _BYTE v14[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v14[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10007E874(v10, qword_100672BF8);
  sub_10007E788(v10, (uint64_t)qword_100672BF8);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x73736572706D6F43, 0xEE00736D65744920);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  v13 = 2;
  return LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)("COMPRESS_FILES_INTENT_TITLE", 27, 2, v9, 0x6E65746E49707041, 0xEA00000000007374, v6, v3, "Title for the Compress Items intent", 35, v13);
}

uint64_t sub_100327018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v16;
  _BYTE v17[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for IntentDialog(0);
  sub_10007E874(v13, qword_100672C10);
  sub_10007E788(v13, (uint64_t)qword_100672C10);
  v14 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000021, 0x8000000100528310);
  static Locale.current.getter(v14);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  v16 = 2;
  LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)("COMPRESS_FILES_INTENT_NEEDS_VALUE", 33, 2, v9, 0x6E65746E49707041, 0xEA00000000007374, v6, v3, "Dialog used when asking for items to compress", 45, v16);
  return IntentDialog.init(_:)(v12);
}

uint64_t sub_1003271FC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t KeyPath;
  uint64_t v9;
  Swift::String v10;
  uint64_t v12;

  v0 = sub_10006922C(&qword_10064F048);
  __chkstk_darwin(v0);
  v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10006922C(&qword_10064F050);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10030CCAC();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(36, 1, &type metadata for CompressFilesIntent, v6);
  v7._object = (void *)0x8000000100528370;
  v7._countAndFlagsBits = 0xD000000000000024;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_1004E2EB8);
  v9 = sub_10006922C(&qword_10064F058);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v9);
  swift_release(KeyPath);
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v10);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for CompressFilesIntent, v6);
  return IntentParameterSummary.init(_:table:_:)(v2, 0x6E65746E49707041, 0xEA00000000007374, sub_100327380, 0, &type metadata for CompressFilesIntent, v6);
}

uint64_t sub_100327380()
{
  uint64_t KeyPath;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v10;

  KeyPath = swift_getKeyPath(&unk_1004E2EE0);
  v1 = sub_10030CCAC();
  v2 = static IntentParameterSummary.ParameterKeyPathsBuilder.buildExpression<A>(_:)(KeyPath, v1);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_1004E2F08);
  swift_retain();
  v4 = static IntentParameterSummary.ParameterKeyPathsBuilder.buildExpression<A>(_:)(v3, v1);
  swift_release(v3);
  v5 = sub_10006922C((uint64_t *)&unk_1006441A0);
  v6 = swift_allocObject(v5, 48, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1004DA350;
  *(_QWORD *)(v6 + 32) = v2;
  *(_QWORD *)(v6 + 40) = v4;
  v10 = v6;
  specialized Array._endMutation()(v6);
  v7 = swift_retain();
  v8 = static IntentParameterSummary.ParameterKeyPathsBuilder.buildBlock(_:)(v10, &type metadata for CompressFilesIntent, v1, v7);
  swift_release(v4);
  swift_release(v2);
  swift_bridgeObjectRelease(v10);
  return v8;
}

id sub_10032747C()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
  qword_10064EF70 = (uint64_t)result;
  return result;
}

uint64_t sub_1003274B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v4[18] = a3;
  v4[19] = a4;
  v4[16] = a1;
  v4[17] = a2;
  v5 = sub_10006922C(&qword_10064F020);
  v4[20] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[21] = v6;
  v4[22] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10006922C(&qword_10064F028);
  v4[23] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[24] = v8;
  v4[25] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10006922C(&qword_10064F030);
  v4[26] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[27] = v10;
  v4[28] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DOCFileEntity(0);
  v4[29] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[30] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[31] = swift_task_alloc(v13);
  v4[32] = swift_task_alloc(v13);
  v14 = sub_10006922C((uint64_t *)&unk_1006438C0);
  v4[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003275D0, 0, 0);
}

uint64_t sub_1003275D0()
{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  id v33;
  uint64_t v34;

  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 136);
  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 152);
  v1 = sub_100329168();
  *(_QWORD *)(v0 + 272) = v1;
  v2 = (void *)ProgressReportingIntent.progress.getter(&type metadata for CompressFilesIntent, v1);
  objc_msgSend(v2, "setTotalUnitCount:", 0);

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 112));
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 232);
    v5 = *(_QWORD *)(v0 + 240);
    specialized ContiguousArray.reserveCapacity(_:)(v4);
    v7 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v8 = *(_QWORD *)(v5 + 72);
    do
    {
      v9 = *(_QWORD *)(v0 + 256);
      sub_1000EACB4(v7, v9);
      v10 = *(id *)(v9 + *(int *)(v6 + 28));
      v11 = sub_1000EACF8(v9);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v12 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
      specialized ContiguousArray._endMutation()(v13);
      v7 += v8;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  }
  v14 = *(_QWORD **)(v0 + 264);
  v16 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 240);
  IntentParameter.wrappedValue.getter(v14);
  v17 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v16);
  v18 = *(_QWORD *)(v0 + 264);
  if (v17)
  {
    sub_1002C93A8(*(_QWORD *)(v0 + 264));
    v19 = 0;
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 256);
    v21 = *(_QWORD *)(v0 + 232);
    sub_1000EACB4(*(_QWORD *)(v0 + 264), v20);
    sub_1002C93A8(v18);
    v19 = *(id *)(v20 + *(int *)(v21 + 28));
    sub_1000EACF8(v20);
  }
  v33 = v19;
  *(_QWORD *)(v0 + 280) = v19;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 97));
  v22 = *(unsigned __int8 *)(v0 + 97);
  if (qword_100640FF0 != -1)
    swift_once(&qword_100640FF0, sub_10032747C);
  if (v22)
    v23 = 4;
  else
    v23 = 0;
  v24 = *(_QWORD *)(v0 + 200);
  v34 = *(_QWORD *)(v0 + 192);
  v26 = *(_QWORD *)(v0 + 176);
  v25 = *(_QWORD *)(v0 + 184);
  v28 = *(_QWORD *)(v0 + 160);
  v27 = *(_QWORD *)(v0 + 168);
  v29 = swift_allocObject(&unk_1005DE028, 24, 7);
  swift_unknownObjectWeakInit(v29 + 16);
  v30 = (_QWORD *)swift_task_alloc(48);
  v30[2] = v29;
  v30[3] = _swiftEmptyArrayStorage;
  v30[4] = v33;
  v30[5] = v23;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v27 + 104))(v26, enum case for AsyncThrowingStream.Continuation.BufferingPolicy.unbounded<A, B>(_:), v28);
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)(&_s22ArchiveOperationStatusON, v26, sub_1003291D0, v30, &_s22ArchiveOperationStatusON);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  swift_release(v29);
  swift_task_dealloc(v30);
  AsyncThrowingStream.makeAsyncIterator()(v25);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v24, v25);
  v31 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  *(_QWORD *)(v0 + 288) = v31;
  *v31 = v0;
  v31[1] = sub_100327920;
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 88, 0, 0, *(_QWORD *)(v0 + 208), v0 + 120);
}

uint64_t sub_100327920()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 288));
  if (v0)
  {
    v2[42] = 0;
    v3 = sub_100327E04;
  }
  else
  {
    v2[37] = 0;
    v2[38] = 0;
    v3 = sub_100327988;
  }
  return swift_task_switch(v3, 0, 0);
}

void *sub_100327988(uint64_t a1)
{
  uint64_t v1;
  double v2;
  int v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  void *result;
  double v20;
  void *v21;
  _QWORD *v22;
  uint64_t (*v23)();
  void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = *(double *)(v1 + 88);
  *(double *)(v1 + 312) = v2;
  v3 = *(unsigned __int8 *)(v1 + 96);
  if (v3 == 255)
  {
    v7 = *(_QWORD *)(v1 + 296);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 216) + 8))(*(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 208));
    if (v7)
    {
      v8 = *(void **)(v1 + 280);
      v9 = *(_QWORD *)(v1 + 256);
      v10 = *(_QWORD *)(v1 + 248);
      v11 = *(_QWORD *)(v1 + 232);
      v36 = *(_QWORD *)(v1 + 264);
      v37 = *(_QWORD *)(v1 + 224);
      v38 = *(_QWORD *)(v1 + 200);
      v39 = *(_QWORD *)(v1 + 176);
      v12 = *(id *)(v1 + 296);
      sub_10012BCCC(v12, v9);
      sub_1000EACB4(v9, v10);
      v13 = sub_1003795D0(v10);
      *(_QWORD *)(v1 + 104) = v13;
      v14 = sub_10021F534((unint64_t *)&qword_100643928, (uint64_t)&unk_1004DB0C8);
      v15 = sub_100170058();
      static IntentResult.result<A, B>(value:opensIntent:)(v9, v1 + 104, v11, &type metadata for RevealFileIntent, v14, v15);

      swift_release(v13);
      sub_1000EACF8(v9);
      swift_task_dealloc(v36);
      swift_task_dealloc(v9);
      swift_task_dealloc(v10);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      v16 = *(uint64_t (**)(void))(v1 + 8);
      return (void *)v16();
    }
    v24 = *(void **)(v1 + 280);
    v25 = sub_1003291DC();
    v26 = swift_allocError(&type metadata for CompressFilesIntent.CompressionError, v25, 0, 0);
    swift_willThrow(v26);

LABEL_12:
    v27 = *(_QWORD *)(v1 + 256);
    v28 = *(_QWORD *)(v1 + 248);
    v29 = *(_QWORD *)(v1 + 224);
    v30 = *(_QWORD *)(v1 + 200);
    v31 = *(_QWORD *)(v1 + 176);
    swift_task_dealloc(*(_QWORD *)(v1 + 264));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    v16 = *(uint64_t (**)(void))(v1 + 8);
    return (void *)v16();
  }
  v4 = *(_QWORD *)(v1 + 304);
  static Task<>.checkCancellation()(a1);
  if (v4)
  {
    v5 = *(void **)(v1 + 296);
    v6 = *(void **)(v1 + 280);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 216) + 8))(*(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 208));

    sub_100329220(*(void **)&v2, v3);
    goto LABEL_12;
  }
  if ((v3 & 1) != 0)
  {
    v32 = *(void **)(v1 + 296);
    v33 = *(_QWORD *)(v1 + 272);
    v34 = *(_QWORD *)(v1 + 152);
    *(_OWORD *)(v1 + 40) = *(_OWORD *)(v1 + 136);
    *(_QWORD *)(v1 + 56) = v34;
    sub_100329244(*(id *)&v2, 1);
    v35 = (void *)ProgressReportingIntent.progress.getter(&type metadata for CompressFilesIntent, v33);
    objc_msgSend(v35, "setTotalUnitCount:", 100);

    sub_100329220(*(void **)&v2, v3);
    v22 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
    *(_QWORD *)(v1 + 328) = v22;
    v23 = sub_100327D94;
    goto LABEL_15;
  }
  v17 = *(_QWORD *)(v1 + 272);
  v18 = *(_QWORD *)(v1 + 152);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 80) = v18;
  result = (void *)ProgressReportingIntent.progress.getter(&type metadata for CompressFilesIntent, v17);
  v20 = v2 * 100.0;
  if ((~COERCE__INT64(v2 * 100.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v20 <= -9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v20 < 9.22337204e18)
  {
    v21 = result;
    objc_msgSend(result, "setCompletedUnitCount:", (uint64_t)v20);

    v22 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
    *(_QWORD *)(v1 + 320) = v22;
    v23 = sub_100327D28;
LABEL_15:
    *v22 = v1;
    v22[1] = v23;
    return (void *)_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v1 + 88, 0, 0, *(_QWORD *)(v1 + 208), v1 + 120);
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100327D28()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 320));
  if (v0)
  {
    v2[42] = v2[37];
    v3 = sub_100327E04;
  }
  else
  {
    v2[38] = 0;
    v3 = sub_100327988;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100327D94()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 328));
  if (v0)
  {
    v2[42] = v2[39];
    v3 = sub_100327E04;
  }
  else
  {
    v2[37] = v2[39];
    v2[38] = 0;
    v3 = sub_100327988;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100327E04()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void **)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 208);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v5 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 224);
  v8 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100327EA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100640FE0 != -1)
    swift_once(&qword_100640FE0, sub_100326E6C);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10007E788(v2, (uint64_t)qword_100672BF8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_100327F20(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *v1;
  v5 = v1[1];
  v6 = v1[2];
  v7 = (_QWORD *)swift_task_alloc(dword_10064F01C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000EA854;
  return sub_1003274B4(a1, v4, v5, v6);
}

uint64_t sub_100327F8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_100327FF8();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t sub_100327FB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10030CCAC();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t sub_100327FDC()
{
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000029, 0x8000000100528450);
}

uint64_t sub_100327FF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(char *, _QWORD, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void (*v54)(char *, uint64_t, uint64_t, uint64_t);
  char *v55;
  char *v56;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  uint64_t v72;
  unsigned int v73;
  void (*v74)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char v83[3];
  uint64_t v84[3];

  v0 = sub_10006922C((uint64_t *)&unk_1006438C0);
  __chkstk_darwin(v0);
  v71 = (char *)&v63 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for InputConnectionBehavior(0);
  v72 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v81 = (char *)&v63 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10006922C(&qword_100643360);
  __chkstk_darwin(v3);
  v80 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v78 = (char *)&v63 - v6;
  v7 = sub_10006922C(&qword_100647F10);
  __chkstk_darwin(v7);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Locale(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for LocalizedStringResource(0);
  v77 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_10006922C(&qword_100643368);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x736D657449, 0xE500000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
  v25(v13, enum case for LocalizedStringResource.BundleDescription.main(_:), v10);
  v76 = v22;
  LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)("COMPRESS_FILES_INTENT_ITEMS_TO_COMPRESS_PARAM_TITLE", 51, 2, v19, 0x6E65746E49707041, 0xEA00000000007374, v16, v13, "Title for the Items parameter of the Compress Items AppIntent", 61, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000021, 0x8000000100528010);
  static Locale.current.getter(v26);
  v75 = v24;
  v79 = v10;
  v70 = v25;
  v25(v13, v24, v10);
  LOWORD(v58) = 2;
  LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)("COMPRESS_FILES_INTENT_ITEMS_TO_COMPRESS_PARAM_DESCRIPTION", 57, 2, v19, 0x6E65746E49707041, 0xEA00000000007374, v16, v13, "Description for the Items parameter of the Compress Items AppIntent", 67, v58);
  v27 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56);
  v28 = v9;
  v77 = v20;
  v74 = v27;
  v27(v9, 0, 1, v20);
  v84[0] = 0;
  if (qword_100640FE8 != -1)
    swift_once(&qword_100640FE8, sub_100327018);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = sub_10007E788(v29, (uint64_t)qword_100672C10);
  v31 = *(_QWORD *)(v29 - 8);
  v32 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v78, v30, v29);
  v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
  v33(v32, 0, 1, v29);
  v34 = v80;
  v33(v80, 1, 1, v29);
  v73 = enum case for InputConnectionBehavior.default(_:);
  v72 = *(_QWORD *)(v72 + 104);
  v35 = v81;
  ((void (*)(char *))v72)(v81);
  v68 = sub_10021F534((unint64_t *)&qword_100643D40, (uint64_t)&unk_1004DAF80);
  v64 = v28;
  v69 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v76, v28, v84, v32, v34, v35, v68);
  v67 = sub_10006922C(&qword_10064F008);
  v36 = String.LocalizationValue.init(stringLiteral:)(0x74616D726F46, 0xE600000000000000);
  static Locale.current.getter(v36);
  v37 = v75;
  v38 = v79;
  v39 = v70;
  v70(v13, v75, v79);
  LOWORD(v59) = 2;
  LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)("COMPRESS_FILES_INTENT_FORMAT_PARAM_TITLE", 40, 2, v19, 0x6E65746E49707041, 0xEA00000000007374, v16, v13, "Title for the Format parameter of the Compress Items AppIntent", 62, v59);
  v40 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000019, 0x8000000100528130);
  static Locale.current.getter(v40);
  v39(v13, v37, v38);
  v41 = v39;
  LOWORD(v60) = 2;
  v42 = v64;
  LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)("COMPRESS_FILES_INTENT_FORMAT_PARAM_DESCRIPTION", 46, 2, v19, 0x6E65746E49707041, 0xEA00000000007374, v16, v13, "Description for the Format parameter of the Compress Items AppIntent", 68, v60);
  v74(v42, 0, 1, v77);
  v83[0] = 0;
  v66 = v33;
  v33(v32, 1, 1, v29);
  v43 = v80;
  v33(v80, 1, 1, v29);
  v44 = v81;
  ((void (*)(char *, _QWORD, uint64_t))v72)(v81, v73, v82);
  v45 = sub_100328E50();
  v46 = v76;
  v67 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v76, v42, v83, v32, v43, v44, &off_1005C0678, v45);
  v65 = sub_10006922C(&qword_10064F010);
  v47 = String.LocalizationValue.init(stringLiteral:)(0x6372412065766F4DLL, 0xEF6F542065766968);
  static Locale.current.getter(v47);
  v48 = v75;
  v49 = v79;
  v41(v13, v75, v79);
  LOWORD(v61) = 2;
  LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)("COMPRESS_FILES_INTENT_DESTINATION_FOLDER_PARAM_TITLE", 52, 2, v19, 0x6E65746E49707041, 0xEA00000000007374, v16, v13, "Title for the Move Archive To parameter of the Compress Items AppIntent", 71, v61);
  v50 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001CLL, 0x8000000100528270);
  static Locale.current.getter(v50);
  v41(v13, v48, v49);
  LOWORD(v62) = 2;
  LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)("COMPRESS_FILES_INTENT_DESTINATION_FOLDER_PARAM_DESCRIPTION", 58, 2, v19, 0x6E65746E49707041, 0xEA00000000007374, v16, v13, "Description for the Move Archive To parameter of the Compress Items AppIntent", 77, v62);
  v74(v42, 0, 1, v77);
  v51 = type metadata accessor for DOCFileEntity(0);
  v52 = v71;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v71, 1, 1, v51);
  v53 = v78;
  v54 = v66;
  v66(v78, 1, 1, v29);
  v55 = v80;
  v54(v80, 1, 1, v29);
  v56 = v81;
  ((void (*)(char *, _QWORD, uint64_t))v72)(v81, v73, v82);
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v46, v42, v52, v53, v55, v56, v68);
  return v69;
}

unint64_t _s5Files17CompressionFormatO26caseDisplayRepresentationsSDyAC10AppIntents0E14RepresentationVGvgZ_0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  _BYTE *v33;
  void (*v34)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;

  v0 = sub_10006922C(&qword_100643E80);
  __chkstk_darwin(v0);
  v2 = (char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = v2;
  v3 = sub_10006922C(&qword_100647F10);
  __chkstk_darwin(v3);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringResource(0);
  v7 = *(_QWORD *)(v6 - 8);
  v35 = v6;
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10006922C(&qword_10064F060);
  v11 = sub_10006922C(&qword_100653320);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = v11;
  v14 = *(_QWORD *)(v12 + 72);
  v36 = v11;
  v37 = v14;
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = swift_allocObject(v10, v16 + 2 * v14, v15 | 7);
  v39 = xmmword_1004D4CE0;
  v38 = v17;
  *(_OWORD *)(v17 + 16) = xmmword_1004D4CE0;
  v18 = (_BYTE *)(v17 + v16);
  v33 = &v18[*(int *)(v13 + 48)];
  *v18 = 0;
  LocalizedStringResource.init(stringLiteral:)(7367002, 0xE300000000000000);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000012, 0x80000001005283F0);
  v34 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
  v34(v5, 0, 1, v6);
  v19 = type metadata accessor for DisplayRepresentation.Image(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v32(v2, 1, 1, v19);
  v31 = sub_10006922C(&qword_100643E88);
  v20 = *(_QWORD *)(v7 + 72);
  v21 = *(unsigned __int8 *)(v7 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = v21 | 7;
  v24 = swift_allocObject(v31, v22 + 2 * v20, v21 | 7);
  *(_OWORD *)(v24 + 16) = v39;
  LocalizedStringResource.init(stringLiteral:)(0x656C69662070695ALL, 0xE800000000000000);
  LocalizedStringResource.init(stringLiteral:)(0x686372612070695ALL, 0xEB00000000657669);
  v25 = v30;
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v9, v5, v30, v24);
  v26 = &v18[v37];
  v37 += (uint64_t)&v18[*(int *)(v36 + 48)];
  *v26 = 1;
  LocalizedStringResource.init(stringLiteral:)(0x724120656C707041, 0xED00006576696863);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000014, 0x8000000100528410);
  v34(v5, 0, 1, v35);
  v32(v25, 1, 1, v19);
  v27 = swift_allocObject(v31, v22 + 2 * v20, v23);
  *(_OWORD *)(v27 + 16) = v39;
  LocalizedStringResource.init(stringLiteral:)(7496033, 0xE300000000000000);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000012, 0x8000000100528430);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v9, v5, v25, v27);
  return sub_1003F29B0(v38);
}

unint64_t sub_100328C0C()
{
  unint64_t result;

  result = qword_10064EF78;
  if (!qword_10064EF78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CompressionFormat, &type metadata for CompressionFormat);
    atomic_store(result, (unint64_t *)&qword_10064EF78);
  }
  return result;
}

unint64_t sub_100328C54()
{
  unint64_t result;

  result = qword_10064EF80;
  if (!qword_10064EF80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CompressionFormat, &type metadata for CompressionFormat);
    atomic_store(result, (unint64_t *)&qword_10064EF80);
  }
  return result;
}

unint64_t sub_100328C9C()
{
  unint64_t result;

  result = qword_10064EF88;
  if (!qword_10064EF88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CompressionFormat, &type metadata for CompressionFormat);
    atomic_store(result, (unint64_t *)&qword_10064EF88);
  }
  return result;
}

unint64_t sub_100328CE4()
{
  unint64_t result;

  result = qword_10064EF90;
  if (!qword_10064EF90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CompressionFormat, &type metadata for CompressionFormat);
    atomic_store(result, (unint64_t *)&qword_10064EF90);
  }
  return result;
}

void *sub_100328D28()
{
  return &protocol witness table for String;
}

unint64_t sub_100328D38()
{
  unint64_t result;

  result = qword_10064EF98;
  if (!qword_10064EF98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CompressionFormat, &type metadata for CompressionFormat);
    atomic_store(result, (unint64_t *)&qword_10064EF98);
  }
  return result;
}

unint64_t sub_100328D80()
{
  unint64_t result;

  result = qword_10064EFA0;
  if (!qword_10064EFA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CompressionFormat, &type metadata for CompressionFormat);
    atomic_store(result, (unint64_t *)&qword_10064EFA0);
  }
  return result;
}

unint64_t sub_100328DCC()
{
  unint64_t result;

  result = qword_10064EFA8;
  if (!qword_10064EFA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CompressionFormat, &type metadata for CompressionFormat);
    atomic_store(result, (unint64_t *)&qword_10064EFA8);
  }
  return result;
}

uint64_t sub_100328E10(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100328E50();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>, 1);
}

unint64_t sub_100328E50()
{
  unint64_t result;

  result = qword_10064EFB0;
  if (!qword_10064EFB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CompressionFormat, &type metadata for CompressionFormat);
    atomic_store(result, (unint64_t *)&qword_10064EFB0);
  }
  return result;
}

unint64_t sub_100328E98()
{
  unint64_t result;

  result = qword_10064EFB8;
  if (!qword_10064EFB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CompressionFormat, &type metadata for CompressionFormat);
    atomic_store(result, (unint64_t *)&qword_10064EFB8);
  }
  return result;
}

unint64_t sub_100328EE0()
{
  unint64_t result;

  result = qword_10064EFC0;
  if (!qword_10064EFC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CompressionFormat, &type metadata for CompressionFormat);
    atomic_store(result, (unint64_t *)&qword_10064EFC0);
  }
  return result;
}

unint64_t sub_100328F28()
{
  unint64_t result;

  result = qword_10064EFC8;
  if (!qword_10064EFC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CompressionFormat, &type metadata for CompressionFormat);
    atomic_store(result, (unint64_t *)&qword_10064EFC8);
  }
  return result;
}

uint64_t sub_100328F6C()
{
  return sub_100062698(&qword_10064EFD0, &qword_10064EFD8, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100328FA0()
{
  unint64_t result;

  result = qword_10064EFE0;
  if (!qword_10064EFE0)
  {
    result = swift_getWitnessTable(&unk_1004E2E2C, &type metadata for CompressFilesIntent);
    atomic_store(result, (unint64_t *)&qword_10064EFE0);
  }
  return result;
}

unint64_t sub_100328FE8()
{
  unint64_t result;

  result = qword_10064EFE8;
  if (!qword_10064EFE8)
  {
    result = swift_getWitnessTable(&unk_1004E2E54, &type metadata for CompressFilesIntent);
    atomic_store(result, (unint64_t *)&qword_10064EFE8);
  }
  return result;
}

uint64_t sub_10032902C(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_10056DAE8, 1) + 8);
}

uint64_t sub_100329050(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10056DAC0, 1);
}

uint64_t storeEnumTagSinglePayload for CompressionFormat(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1003290AC + 4 * byte_1004E2AD5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1003290E0 + 4 * asc_1004E2AD0[v4]))();
}

uint64_t sub_1003290E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003290E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003290F0);
  return result;
}

uint64_t sub_1003290FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100329104);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100329108(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100329110(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CompressionFormat()
{
  return &type metadata for CompressionFormat;
}

ValueMetadata *type metadata accessor for CompressFilesIntent()
{
  return &type metadata for CompressFilesIntent;
}

uint64_t sub_10032913C()
{
  return sub_100062698(&qword_10064EFF8, &qword_10064F000, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

unint64_t sub_100329168()
{
  unint64_t result;

  result = qword_10064F038;
  if (!qword_10064F038)
  {
    result = swift_getWitnessTable(&unk_1004E2D74, &type metadata for CompressFilesIntent);
    atomic_store(result, (unint64_t *)&qword_10064F038);
  }
  return result;
}

uint64_t sub_1003291AC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1003291D0(uint64_t a1)
{
  uint64_t v1;

  sub_10048119C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40));
}

unint64_t sub_1003291DC()
{
  unint64_t result;

  result = qword_10064F040;
  if (!qword_10064F040)
  {
    result = swift_getWitnessTable(&unk_1004E2FD4, &type metadata for CompressFilesIntent.CompressionError);
    atomic_store(result, (unint64_t *)&qword_10064F040);
  }
  return result;
}

void sub_100329220(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    sub_100329238(a1, a2 & 1);
}

void sub_100329238(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

id sub_100329244(id result, char a2)
{
  if ((a2 & 1) != 0)
    return result;
  return result;
}

uint64_t sub_100329250@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100329278@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1003292A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for CompressFilesIntent.CompressionError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100329308 + 4 * byte_1004E2ADA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100329328 + 4 * byte_1004E2ADF[v4]))();
}

_BYTE *sub_100329308(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100329328(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100329330(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100329338(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100329340(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100329348(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CompressFilesIntent.CompressionError()
{
  return &type metadata for CompressFilesIntent.CompressionError;
}

unint64_t sub_100329368()
{
  unint64_t result;

  result = qword_10064F068;
  if (!qword_10064F068)
  {
    result = swift_getWitnessTable(&unk_1004E2FAC, &type metadata for CompressFilesIntent.CompressionError);
    atomic_store(result, (unint64_t *)&qword_10064F068);
  }
  return result;
}

uint64_t sub_1003293AC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 > 1u)
    __asm { BR              X9 }
  sub_100292218(a1, a2, a3);
  return a1;
}

Swift::Int sub_1003295D0(uint64_t a1, uint64_t a2, char a3)
{
  Swift::UInt v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, 0);
  if (a3)
  {
    if (a3 != 1)
      __asm { BR              X9 }
    v6 = 5;
  }
  else
  {
    v6 = 4;
  }
  Hasher._combine(_:)(v6);
  String.hash(into:)(v8, a1, a2);
  return Hasher._finalize()();
}

Swift::Int sub_10032969C()
{
  uint64_t v0;

  return sub_1003295D0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_1003296A8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt v5;

  v3 = *v1;
  v4 = v1[1];
  if (*((_BYTE *)v1 + 16))
  {
    if (*((_BYTE *)v1 + 16) != 1)
      __asm { BR              X9 }
    v5 = 5;
  }
  else
  {
    v5 = 4;
  }
  Hasher._combine(_:)(v5);
  return String.hash(into:)(a1, v3, v4);
}

void sub_100329718()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_10032974C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  Swift::UInt v5;
  _QWORD v7[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = *((unsigned __int8 *)v1 + 16);
  Hasher.init(_seed:)(v7, a1);
  if (v4)
  {
    if (v4 != 1)
      __asm { BR              X9 }
    v5 = 5;
  }
  else
  {
    v5 = 4;
  }
  Hasher._combine(_:)(v5);
  String.hash(into:)(v7, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_10032980C(uint64_t a1, uint64_t a2)
{
  return sub_100329828(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t sub_100329828(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if (a3 != 1)
      return ((uint64_t (*)(void))((char *)&loc_100329884 + 4 * byte_1004E302C[a1]))();
    if (a6 == 1)
    {
      if (a1 == a4 && a2 == a5)
        return 1;
      return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0);
    }
    return 0;
  }
  if (a6)
    return 0;
  if (a1 == a4 && a2 == a5)
    return 1;
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0);
}

uint64_t sub_100329928(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t);
  unint64_t v100;
  void (*v101)(char *, uint64_t);
  void (*v102)(char *, uint64_t);
  uint64_t v103;
  char *v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t);
  unint64_t v107;
  void (*v108)(char *, uint64_t);
  void (*v109)(char *, uint64_t);
  void (*v110)(char *, uint64_t);
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  uint64_t v113;
  void (*v114)(char *, uint64_t);
  uint64_t v115;
  void (*v116)(char *, uint64_t);
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;

  v136 = type metadata accessor for Date.FormatStyle.Symbol.Year(0);
  v131 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v130 = (char *)&v118 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Date.FormatStyle.Symbol.Month(0);
  v128 = *(_QWORD *)(v3 - 8);
  v129 = v3;
  __chkstk_darwin(v3);
  v127 = (char *)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date.FormatStyle(0);
  v134 = *(_QWORD *)(v5 - 8);
  v135 = v5;
  v6 = __chkstk_darwin(v5);
  v133 = (char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v118 - v8;
  v10 = type metadata accessor for DateComponents(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v139 = (char *)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v141 = (char *)&v118 - v15;
  __chkstk_darwin(v14);
  v140 = (char *)&v118 - v16;
  v17 = type metadata accessor for Calendar(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v142 = (char *)&v118 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10006922C((uint64_t *)&unk_100643900);
  __chkstk_darwin(v20);
  v22 = (char *)&v118 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Date(0);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v118 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v118 - v27;
  v29 = a1;
  v31 = v30;
  sub_1001114C4(v29, (uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v22, 1, v23) != 1)
  {
    v118 = v9;
    v132 = v11;
    v119 = v10;
    v122 = v18;
    v123 = v17;
    v121 = v31;
    v32 = *(uint64_t (**)(char *, char *, uint64_t))(v31 + 32);
    v120 = v23;
    v33 = v32(v28, v22, v23);
    v34 = static Calendar.current.getter(v33);
    Date.init()(v34);
    v35 = sub_10006922C(&qword_10064F070);
    v126 = v35;
    v36 = type metadata accessor for Calendar.Component(0);
    v37 = v26;
    v137 = v26;
    v138 = v28;
    v38 = v36;
    v39 = *(_QWORD *)(v36 - 8);
    v40 = *(_QWORD *)(v39 + 72);
    v41 = *(unsigned __int8 *)(v39 + 80);
    v42 = (v41 + 32) & ~v41;
    v125 = v41 | 7;
    v43 = swift_allocObject(v35, v42 + 3 * v40, v41 | 7);
    *(_OWORD *)(v43 + 16) = xmmword_1004D9880;
    v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 104);
    v44(v43 + v42, enum case for Calendar.Component.day(_:), v38);
    v44(v43 + v42 + v40, enum case for Calendar.Component.month(_:), v38);
    v45 = enum case for Calendar.Component.year(_:);
    v44(v43 + v42 + 2 * v40, enum case for Calendar.Component.year(_:), v38);
    v46 = sub_1003F9A58(v43);
    swift_setDeallocating(v43);
    swift_arrayDestroy(v43 + v42, 3, v38);
    swift_deallocClassInstance(v43, 32, 7);
    Calendar.dateComponents(_:from:to:)(v46, v37, v138);
    swift_bridgeObjectRelease(v46);
    v47 = v42 + v40;
    v49 = v125;
    v48 = v126;
    v50 = swift_allocObject(v126, v42 + v40, v125);
    v124 = xmmword_1004D9670;
    *(_OWORD *)(v50 + 16) = xmmword_1004D9670;
    v44(v50 + v42, v45, v38);
    v51 = sub_1003F9A58(v50);
    swift_setDeallocating(v50);
    v52 = v142;
    swift_arrayDestroy(v50 + v42, 1, v38);
    swift_deallocClassInstance(v50, 32, 7);
    Calendar.dateComponents(_:from:)(v51, v137);
    swift_bridgeObjectRelease(v51);
    v53 = swift_allocObject(v48, v47, v49);
    *(_OWORD *)(v53 + 16) = v124;
    v54 = v53 + v42;
    v55 = v138;
    v44(v54, v45, v38);
    v56 = sub_1003F9A58(v53);
    swift_setDeallocating(v53);
    v57 = v38;
    v58 = v140;
    swift_arrayDestroy(v54, 1, v57);
    swift_deallocClassInstance(v53, 32, 7);
    v59 = v139;
    Calendar.dateComponents(_:from:)(v56, v55);
    v60 = swift_bridgeObjectRelease(v56);
    v61 = DateComponents.year.getter(v60);
    if ((v62 & 1) != 0
      || (v63 = v61, v64 = DateComponents.month.getter(), (v65 & 1) != 0)
      || (v66 = v64, v67 = DateComponents.day.getter(), (v68 & 1) != 0))
    {
      v75 = *(void (**)(char *, uint64_t))(v132 + 8);
      v76 = v119;
      v75(v59, v119);
      v75(v141, v76);
      v75(v58, v76);
      v77 = *(void (**)(char *, uint64_t))(v121 + 8);
      v78 = v120;
      v77(v137, v120);
      (*(void (**)(char *, uint64_t))(v122 + 8))(v52, v123);
      v77(v55, v78);
      return 0;
    }
    v69 = v67;
    if ((Calendar.isDateInToday(_:)(v55) & 1) != 0)
    {
      v70 = *(void (**)(char *, uint64_t))(v132 + 8);
      v71 = v119;
      v70(v59, v119);
      v70(v141, v71);
      v70(v58, v71);
      v72 = *(void (**)(char *, uint64_t))(v121 + 8);
      v73 = v120;
      v72(v137, v120);
      (*(void (**)(char *, uint64_t))(v122 + 8))(v52, v123);
      v72(v55, v73);
      return 0;
    }
    v79 = Calendar.isDateInYesterday(_:)(v55);
    if ((v79 & 1) != 0)
    {
      v80 = *(void (**)(char *, uint64_t))(v132 + 8);
      v81 = v119;
      v80(v59, v119);
      v80(v141, v81);
      v80(v58, v81);
      v82 = *(void (**)(char *, uint64_t))(v121 + 8);
      v83 = v120;
      v82(v137, v120);
      (*(void (**)(char *, uint64_t))(v122 + 8))(v52, v123);
      v82(v55, v83);
      return 1;
    }
    v84 = v66 | v63;
    v85 = v141;
    v86 = v136;
    if (!v84)
    {
      if (v69 >= -7)
      {
        v110 = *(void (**)(char *, uint64_t))(v132 + 8);
        v111 = v119;
        v110(v59, v119);
        v110(v85, v111);
        v110(v58, v111);
        v112 = *(void (**)(char *, uint64_t))(v121 + 8);
        v113 = v120;
        v112(v137, v120);
        (*(void (**)(char *, uint64_t))(v122 + 8))(v52, v123);
        v112(v55, v113);
        return 2;
      }
      if ((unint64_t)v69 >= 0xFFFFFFFFFFFFFFE2)
      {
        v114 = *(void (**)(char *, uint64_t))(v132 + 8);
        v115 = v119;
        v114(v59, v119);
        v114(v85, v115);
        v114(v58, v115);
        v116 = *(void (**)(char *, uint64_t))(v121 + 8);
        v117 = v120;
        v116(v137, v120);
        (*(void (**)(char *, uint64_t))(v122 + 8))(v52, v123);
        v116(v55, v117);
        return 3;
      }
    }
    v87 = DateComponents.year.getter(v79);
    v89 = v88;
    v90 = DateComponents.year.getter(v87);
    if ((v89 & 1) != 0)
    {
      v92 = v120;
      v93 = v119;
      v94 = v118;
      v95 = v133;
      if ((v91 & 1) != 0)
      {
LABEL_19:
        v96 = static FormatStyle<>.dateTime.getter(v90);
        v97 = v127;
        static Date.FormatStyle.Symbol.Month.wide.getter(v96);
        Date.FormatStyle.month(_:)(v97);
        (*(void (**)(char *, uint64_t))(v128 + 8))(v97, v129);
        v98 = v135;
        v99 = *(void (**)(char *, uint64_t))(v134 + 8);
        v99(v95, v135);
        v100 = sub_10032A398();
        Date.formatted<A>(_:)(&v143, v94, v98, v100);
        v99(v94, v98);
        v101 = *(void (**)(char *, uint64_t))(v132 + 8);
        v101(v139, v93);
        v101(v141, v93);
        v101(v58, v93);
        v102 = *(void (**)(char *, uint64_t))(v121 + 8);
        v102(v137, v92);
        (*(void (**)(char *, uint64_t))(v122 + 8))(v52, v123);
        v102(v55, v92);
        return v143;
      }
    }
    else
    {
      v92 = v120;
      v93 = v119;
      v94 = v118;
      v95 = v133;
      if ((v91 & 1) == 0 && v87 == v90)
        goto LABEL_19;
    }
    v103 = static FormatStyle<>.dateTime.getter(v90);
    v104 = v130;
    static Date.FormatStyle.Symbol.Year.defaultDigits.getter(v103);
    Date.FormatStyle.year(_:)(v104);
    (*(void (**)(char *, uint64_t))(v131 + 8))(v104, v86);
    v105 = v135;
    v106 = *(void (**)(char *, uint64_t))(v134 + 8);
    v106(v95, v135);
    v107 = sub_10032A398();
    Date.formatted<A>(_:)(&v143, v94, v105, v107);
    v106(v94, v105);
    v108 = *(void (**)(char *, uint64_t))(v132 + 8);
    v108(v139, v93);
    v108(v141, v93);
    v108(v58, v93);
    v109 = *(void (**)(char *, uint64_t))(v121 + 8);
    v109(v137, v92);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v52, v123);
    v109(v55, v92);
    return v143;
  }
  sub_10011150C((uint64_t)v22);
  return 0;
}

unint64_t sub_10032A398()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064F078;
  if (!qword_10064F078)
  {
    v1 = type metadata accessor for Date.FormatStyle(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date.FormatStyle, v1);
    atomic_store(result, (unint64_t *)&qword_10064F078);
  }
  return result;
}

uint64_t destroy for DOCItemDateGroupCategory(uint64_t a1)
{
  return sub_1002B81DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s5Files24DOCItemDateGroupCategoryOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100292218(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DOCItemDateGroupCategory(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100292218(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1002B81DC(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for DOCItemDateGroupCategory(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1002B81DC(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DOCItemDateGroupCategory(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCItemDateGroupCategory(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_10032A560(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_10032A578(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DOCItemDateGroupCategory()
{
  return &type metadata for DOCItemDateGroupCategory;
}

unint64_t sub_10032A5A4()
{
  unint64_t result;

  result = qword_10064F080[0];
  if (!qword_10064F080[0])
  {
    result = swift_getWitnessTable(&unk_1004E304C, &type metadata for DOCItemDateGroupCategory);
    atomic_store(result, qword_10064F080);
  }
  return result;
}

uint64_t sub_10032A5E8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  objc_class *v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  char *v30;
  __n128 v31;
  void (*v32)(char *, char *, __n128);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  _BYTE *v42;
  uint64_t v43;
  objc_super v44;
  _QWORD v45[5];

  v42 = a2;
  v3 = swift_isaMask & *v2;
  v4 = *(_QWORD *)(v3 + 0x50);
  __chkstk_darwin(a1);
  v41 = (char *)&v37 - v5;
  v6 = sub_10006922C(&qword_100651B30);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UIBackgroundConfiguration(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v43 = (uint64_t)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v3 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v12);
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v39 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v37 - v16;
  v18 = type metadata accessor for UICellConfigurationState(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10032AE24();
  v21 = objc_msgSend(v2, "_bridgedConfigurationState");
  static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)(v21);

  UICollectionViewCell.contentConfiguration.getter(v45, v22);
  v23 = sub_10006922C(&qword_100651B70);
  swift_dynamicCast(v17, v45, v23, AssociatedTypeWitness, 7);
  v25 = (objc_class *)type metadata accessor for DOCSidebarCell(0, v4, v12, v24);
  v44.receiver = v2;
  v44.super_class = v25;
  v26 = objc_msgSendSuper2(&v44, "contentView");
  v27 = swift_getAssociatedTypeWitness(0, v12);
  v38 = swift_dynamicCastUnknownClassUnconditional(v26, v27, 0, 0, 0);
  UICollectionViewCell.backgroundConfiguration.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    static UIBackgroundConfiguration.clear()();
    sub_10000CB4C((uint64_t)v8, &qword_100651B30);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v43, v8, v9);
  }
  v28 = (_QWORD *)(swift_isaMask & *v2);
  v29 = *((_BYTE *)v2 + v28[12]);
  v30 = (char *)v2 + v28[13];
  v31 = swift_beginAccess(v30, v45, 0, 0);
  v32 = *(void (**)(char *, char *, __n128))(*(_QWORD *)(v28[10] - 8) + 16);
  v33 = (uint64_t)v41;
  v32(v41, v30, v31);
  v35 = (uint64_t)v39;
  v34 = v40;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v39, v17, AssociatedTypeWitness);
  sub_10032BAD8(v29, (uint64_t)v20, v33, v38, v35, v43, v4, v12, v42);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v17, AssociatedTypeWitness);
}

uint64_t sub_10032A94C()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((swift_isaMask & *v0) + 0x60));
}

uint64_t sub_10032A96C(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((swift_isaMask & *v1) + 0x60)) = result;
  return result;
}

uint64_t sub_10032A98C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;
  char v6[24];

  v3 = swift_isaMask & *v1;
  v4 = (char *)v1 + *(_QWORD *)(v3 + 0x68);
  swift_beginAccess(v4, v6, 0, 0);
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_10032AA00(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;
  _BYTE v6[24];

  v3 = swift_isaMask & *v1;
  v4 = (char *)v1 + *(_QWORD *)(v3 + 0x68);
  swift_beginAccess(v4, v6, 33, 0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess(v6);
}

uint64_t sub_10032AA7C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v12;

  v1 = v0;
  v2 = swift_isaMask & *v0;
  v3 = type metadata accessor for UICellConfigurationState(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(*(_QWORD *)(v2 + 80));
  v9 = (char *)&v12 - v8;
  (*(void (**)(double))(*(_QWORD *)(v2 + 88) + 32))(v7);
  sub_10032AA00((uint64_t)v9);
  v10 = objc_msgSend(v1, "_bridgedConfigurationState");
  static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)(v10);

  sub_10032AB88((uint64_t)v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10032AB88(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;

  v3 = swift_isaMask & *v1;
  v4 = type metadata accessor for UIBackgroundConfiguration(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v25 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - v8;
  v11 = *(_QWORD *)(v3 + 80);
  v10 = *(void (***)(_QWORD, _QWORD, _QWORD))(v3 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v10);
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v24 = AssociatedTypeWitness;
  __chkstk_darwin(AssociatedTypeWitness);
  v14 = (char *)&v22 - v13;
  v16 = type metadata accessor for DOCSidebarCell.Content(0, v11, (uint64_t)v10, v15);
  v26 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v22 - v17;
  v27 = v1;
  sub_10032A5E8(v19, (_BYTE *)&v22 - v17);
  if ((sub_10032B9B0(a1, v16) & 1) != 0)
  {
    v10[5](a1, v11, v10);
    v10[6](a1, v11, v10);
    v20 = v25;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v25, v9, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v20, v4);
    (*(void (**)(_BYTE *, char *, uint64_t))(v23 + 40))(&v18[*(int *)(v16 + 48)], v14, v24);
    (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 40))(&v18[*(int *)(v16 + 52)], v9, v4);
  }
  ((void (**)(_BYTE *, uint64_t, _QWORD))v10)[7](&v18[*(int *)(v16 + 48)], v11, v10);
  sub_10032C1A8(v18);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v26 + 8))(v18, v16);
}

uint64_t sub_10032ADC8()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((swift_isaMask & *v0) + 0x70));
}

uint64_t sub_10032ADE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for UIBackgroundConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_10032AE24()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  id v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  _QWORD v21[5];

  v1 = v0;
  v2 = swift_isaMask & *v0;
  v20 = type metadata accessor for UICellConfigurationState(0);
  v3 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v5 = (char *)&v21[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v2 + 80);
  v6 = *(_QWORD *)(v2 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v6);
  v9 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21[-1] - v11;
  UICollectionViewCell.contentConfiguration.getter(v21, v13);
  v14 = sub_10006922C(&qword_100651B70);
  v15 = swift_dynamicCast(v12, v21, v14, AssociatedTypeWitness, 6);
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56);
  if (v15)
  {
    v16(v12, 0, 1, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    v16(v12, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v18 = objc_msgSend(v1, "_bridgedConfigurationState");
    static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)(v18);

    v19 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 40);
    v21[3] = AssociatedTypeWitness;
    v21[4] = swift_getAssociatedConformanceWitness(v6, v7, AssociatedTypeWitness, &unk_10056DB8C, &unk_10056DB94);
    sub_10006CBAC(v21);
    v19(v5, v7, v6);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v20);
    return UICollectionViewCell.contentConfiguration.setter(v21);
  }
}

uint64_t sub_10032B02C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (_QWORD *)((char *)v1 + *(_QWORD *)((swift_isaMask & *v1) + 0x78));
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10032B08C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  id v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  _BYTE v64[24];
  unint64_t v65[3];
  char *v66;
  char v67[32];

  v1 = v0;
  v2 = sub_10006922C(&qword_100645FB8);
  __chkstk_darwin(v2);
  v62 = (uint64_t)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v61 = (char *)&v55 - v5;
  __chkstk_darwin(v6);
  v8 = (char *)&v55 - v7;
  v9 = type metadata accessor for UICellAccessory(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v13);
  v63 = (char *)&v55 - v15;
  v16 = *((unsigned __int8 *)v0 + *(_QWORD *)((swift_isaMask & *v0) + 0x70));
  v17 = objc_msgSend(v0, "traitCollection", v14);
  v18 = objc_msgSend(v17, "sourceOutlineStyle");

  v19 = *(_QWORD *)((swift_isaMask & *v1) + 0x78);
  v55 = v1;
  v20 = (_QWORD *)((char *)v1 + v19);
  swift_beginAccess((char *)v1 + v19, v67, 0, 0);
  v21 = *v20;
  v22 = (char *)_swiftEmptyArrayStorage;
  v65[0] = (unint64_t)_swiftEmptyArrayStorage;
  v56 = v21;
  if ((unint64_t)v21 >> 62)
  {
LABEL_30:
    if (v21 < 0)
      v40 = v56;
    else
      v40 = v21 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v56);
    v41 = v40;
    v21 = v56;
    v57 = _CocoaArrayWrapper.endIndex.getter(v41);
    if (v57)
      goto LABEL_3;
  }
  else
  {
    v23 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v21);
    v57 = v23;
    if (v23)
    {
LABEL_3:
      v24 = 0;
      v59 = v21 & 0xFFFFFFFFFFFFFF8;
      v60 = v21 & 0xC000000000000001;
      v58 = v21 + 32;
      v22 = (char *)v57;
      while (1)
      {
        if (v60)
        {
          v25 = specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v21);
          v26 = v25;
          v27 = __OFADD__(v24++, 1);
          if (v27)
            goto LABEL_27;
        }
        else
        {
          if (v24 >= *(_QWORD *)(v59 + 16))
            goto LABEL_29;
          v26 = *(_QWORD *)(v58 + 8 * v24);
          swift_retain();
          v27 = __OFADD__(v24++, 1);
          if (v27)
          {
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
        }
        if ((_DWORD)v16 && *(_BYTE *)(v26 + 32) == 1)
          goto LABEL_4;
        v28 = *(_QWORD **)(v26 + OBJC_IVAR____TtC5Files27DOCSidebarCellAccessoryItem_applicableStyles);
        v29 = v28[2];
        if (!v29)
          goto LABEL_4;
        if ((id)v28[4] == v18)
        {
LABEL_15:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v25);
          v30 = v12;
          v31 = v18;
          v32 = v8;
          v33 = v16;
          v34 = *(_QWORD *)(v65[0] + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v34);
          v35 = v34;
          v16 = v33;
          v8 = v32;
          v18 = v31;
          v12 = v30;
          v22 = (char *)v57;
          v36 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v35, v26);
          specialized ContiguousArray._endMutation()(v36);
          v21 = v56;
          if ((char *)v24 == v22)
          {
LABEL_25:
            swift_bridgeObjectRelease(v21);
            v39 = v65[0];
            v22 = (char *)_swiftEmptyArrayStorage;
            if ((v65[0] & 0x8000000000000000) == 0)
              goto LABEL_35;
            goto LABEL_51;
          }
        }
        else
        {
          if (v29 != 1)
          {
            if ((id)v28[5] == v18)
              goto LABEL_15;
            if (v29 != 2)
            {
              v37 = 6;
              do
              {
                v38 = v37 - 3;
                if (__OFADD__(v37 - 4, 1))
                  goto LABEL_28;
                if ((id)v28[v37] == v18)
                  goto LABEL_15;
                ++v37;
              }
              while (v38 != v29);
            }
          }
LABEL_4:
          swift_release(v26);
          if ((char *)v24 == v22)
            goto LABEL_25;
        }
      }
    }
  }
  swift_bridgeObjectRelease(v21);
  v39 = (unint64_t)_swiftEmptyArrayStorage;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
    goto LABEL_51;
LABEL_35:
  if ((v39 & 0x4000000000000000) == 0)
  {
    v42 = *(_QWORD *)(v39 + 16);
    if (v42)
      goto LABEL_37;
LABEL_52:
    swift_release(v39);
    v51 = (char *)_swiftEmptyArrayStorage;
    return UICollectionViewListCell.accessories.setter(v51);
  }
LABEL_51:
  swift_bridgeObjectRetain(v39);
  v42 = _CocoaArrayWrapper.endIndex.getter(v54);
  swift_release(v39);
  if (!v42)
    goto LABEL_52;
LABEL_37:
  v66 = v22;
  result = sub_100155178(0, v42 & ~(v42 >> 63), 0);
  if ((v42 & 0x8000000000000000) == 0)
  {
    v44 = 0;
    v59 = v39 & 0xC000000000000001;
    v60 = v39;
    do
    {
      if (v59)
      {
        v45 = specialized _ArrayBuffer._getElementSlowPath(_:)(v44, v39);
      }
      else
      {
        v45 = *(_QWORD *)(v39 + 8 * v44 + 32);
        swift_retain();
      }
      v46 = v45 + OBJC_IVAR____TtC5Files27DOCSidebarCellAccessoryItem_accessoryIfLoaded;
      swift_beginAccess(v45 + OBJC_IVAR____TtC5Files27DOCSidebarCellAccessoryItem_accessoryIfLoaded, v65, 0, 0);
      sub_10032C468(v46, (uint64_t)v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
      {
        (*(void (**)(uint64_t))(v45 + OBJC_IVAR____TtC5Files27DOCSidebarCellAccessoryItem_accessoryProvider))(v45);
        sub_10000CB4C((uint64_t)v8, &qword_100645FB8);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
      }
      v47 = v61;
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v61, v12, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v47, 0, 1, v9);
      v48 = (uint64_t)v47;
      v49 = v62;
      sub_10032C4B0(v48, v62);
      swift_beginAccess(v46, v64, 33, 0);
      sub_10032C4F8(v49, v46);
      swift_endAccess(v64);
      v50 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v50(v63, v12, v9);
      swift_release(v45);
      v51 = v66;
      if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) == 0)
      {
        sub_100155178(0, *((_QWORD *)v51 + 2) + 1, 1);
        v51 = v66;
      }
      v53 = *((_QWORD *)v51 + 2);
      v52 = *((_QWORD *)v51 + 3);
      if (v53 >= v52 >> 1)
      {
        sub_100155178(v52 > 1, v53 + 1, 1);
        v51 = v66;
      }
      ++v44;
      *((_QWORD *)v51 + 2) = v53 + 1;
      v50(&v51[((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v53], v63, v9);
      v66 = v51;
      v39 = v60;
    }
    while (v42 != v44);
    swift_release(v60);
    return UICollectionViewListCell.accessories.setter(v51);
  }
  __break(1u);
  return result;
}

id sub_10032B668(double a1, double a2, double a3, double a4)
{
  _QWORD *v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  _QWORD *v13;
  uint64_t v14;
  id v15;
  objc_super v17;

  v9 = (_QWORD *)(swift_isaMask & *v4);
  *((_BYTE *)v4 + v9[12]) = 0;
  v10 = v9[10];
  v11 = v9[11];
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 32);
  v13 = v4;
  v12(v10, v11);
  *((_BYTE *)v13 + *(_QWORD *)((swift_isaMask & *v13) + 0x70)) = 0;
  *(_QWORD *)((char *)v13 + *(_QWORD *)((swift_isaMask & *v13) + 0x78)) = _swiftEmptyArrayStorage;

  v17.receiver = v13;
  v17.super_class = (Class)type metadata accessor for DOCSidebarCell(0, v10, v11, v14);
  v15 = objc_msgSendSuper2(&v17, "initWithFrame:", a1, a2, a3, a4);
  sub_10032AA7C();

  return v15;
}

id sub_10032B790(double a1, double a2, double a3, double a4)
{
  return sub_10032B668(a1, a2, a3, a4);
}

id sub_10032B7B0(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;

  v1 = a1;
  sub_10032B804((uint64_t)v1, v2, v3, v4);
  v6 = v5;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  return v7;
}

uint64_t sub_10032B804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  objc_super v19;

  v5 = (objc_class *)type metadata accessor for DOCSidebarCell(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), *(_QWORD *)((swift_isaMask & *v4) + 0x58), a4);
  v19.receiver = v4;
  v19.super_class = v5;
  v6 = objc_msgSendSuper2(&v19, "description");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10 = objc_msgSend(v4, "accessibilityLabel");
  if (v10)
  {
    v11 = v10;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v14 = v13;

    v15._countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v14);
    v16._countAndFlagsBits = 8285;
    v16._object = (void *)0xE200000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = v7;
    v17._object = v9;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v9);
    return 91;
  }
  return v7;
}

uint64_t sub_10032B90C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for DOCSidebarCell(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), *(_QWORD *)((swift_isaMask & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  objc_msgSendSuper2(&v7, "prepareForReuse");
  sub_10032B02C((uint64_t)_swiftEmptyArrayStorage);
  UICollectionViewListCell.accessories.setter(_swiftEmptyArrayStorage);
  return sub_10032AA7C();
}

void sub_10032B97C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v4 = a1;
  sub_10032B90C((uint64_t)v4, v1, v2, v3);

}

uint64_t sub_10032B9B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char v15;
  uint64_t v17;

  v3 = v2;
  v5 = a1;
  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UICellConfigurationState(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v3 + *(int *)(a2 + 36), v9, v11);
  v14 = sub_10032C54C();
  LOBYTE(v5) = dispatch thunk of static Equatable.== infix(_:_:)(v13, v5, v9, v14);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a2);
  if ((v5 & 1) != 0)
    v15 = *v8 ^ 1;
  else
    v15 = 1;
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, a2);
  return v15 & 1;
}

uint64_t sub_10032BAD8@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int *v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t AssociatedTypeWitness;
  _BYTE *v22;
  uint64_t v23;

  *a9 = a1;
  v17 = (int *)type metadata accessor for DOCSidebarCell.Content(0, a7, a8, a4);
  v18 = &a9[v17[9]];
  v19 = type metadata accessor for UICellConfigurationState(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a2, v19);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(&a9[v17[10]], a3, a7);
  *(_QWORD *)&a9[v17[11]] = a4;
  v20 = &a9[v17[12]];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v20, a5, AssociatedTypeWitness);
  v22 = &a9[v17[13]];
  v23 = type metadata accessor for UIBackgroundConfiguration(0);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22, a6, v23);
}

uint64_t sub_10032BBF8(uint64_t a1)
{
  _QWORD *v1;

  sub_10032AB88(a1);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x158))(a1);
}

uint64_t sub_10032BC34(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v11;

  v5 = type metadata accessor for UICellConfigurationState(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v9 = a1;
  sub_10032BBF8((uint64_t)v8);

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10032BCD0()
{
  uint64_t v0;

  return swift_getAssociatedTypeWitness(0, *(_QWORD *)(v0 + 88));
}

uint64_t sub_10032BCEC(uint64_t a1)
{
  uint64_t v1;

  swift_getObjCClassMetadata(a1);
  v1 = sub_10032BCD0();
  return swift_getObjCClassFromMetadata(v1);
}

void sub_10032BD10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  objc_super v19;
  _BYTE v20[24];

  v6 = (objc_class *)type metadata accessor for DOCSidebarCell(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), *(_QWORD *)((swift_isaMask & *v4) + 0x58), a4);
  v19.receiver = v4;
  v19.super_class = v6;
  objc_msgSendSuper2(&v19, "traitCollectionDidChange:", a1);
  v7 = (_QWORD *)((char *)v4 + *(_QWORD *)((swift_isaMask & *v4) + 0x78));
  swift_beginAccess(v7, v20, 0, 0);
  v8 = *v7;
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v18 = v8;
    else
      v18 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v8, 2);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    if (!v9)
      goto LABEL_10;
  }
  else
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(v8, 2);
    if (!v9)
    {
LABEL_10:
      swift_bridgeObjectRelease_n(v8, 2);
      return;
    }
  }
  v10 = v8 & 0xC000000000000001;
  if ((v8 & 0xC000000000000001) != 0)
  {
    v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
  }
  else
  {
    v11 = *(_QWORD *)(v8 + 32);
    swift_retain();
  }
  v12 = *(_QWORD *)(v11 + OBJC_IVAR____TtC5Files27DOCSidebarCellAccessoryItem_applicableStyles);
  if (*(_QWORD *)(v12 + 16) == 2)
  {
    v13 = &off_1005C0740;
    if ((_UNKNOWN **)v12 != &off_1005C0740 && (*(_QWORD *)(v12 + 32) || *(_QWORD *)(v12 + 40) != 1))
    {
LABEL_27:
      swift_bridgeObjectRelease(v13);
      goto LABEL_28;
    }
    swift_release(v11);
    swift_bridgeObjectRelease(&off_1005C0740);
    if (v9 == 1)
      goto LABEL_10;
    if (v10)
    {
      v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v8);
    }
    else
    {
      v11 = *(_QWORD *)(v8 + 40);
      swift_retain();
    }
    v14 = *(_QWORD *)(v11 + OBJC_IVAR____TtC5Files27DOCSidebarCellAccessoryItem_applicableStyles);
    if (*(_QWORD *)(v14 + 16) == 2)
    {
      v15 = 0;
      v16 = v9 - 2;
      v13 = &off_1005C0770;
      while ((_UNKNOWN **)v14 == &off_1005C0770 || !*(_QWORD *)(v14 + 32) && *(_QWORD *)(v14 + 40) == 1)
      {
        swift_release(v11);
        swift_bridgeObjectRelease(&off_1005C0770);
        if (v16 == v15)
          goto LABEL_10;
        v17 = v15 + 2;
        if (v10)
        {
          v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v15 + 2, v8);
          if (__OFADD__(v17, 1))
            goto LABEL_35;
        }
        else
        {
          v11 = *(_QWORD *)(v8 + 8 * v15 + 48);
          swift_retain();
          if (__OFADD__(v17, 1))
          {
LABEL_35:
            __break(1u);
            return;
          }
        }
        v14 = *(_QWORD *)(v11 + OBJC_IVAR____TtC5Files27DOCSidebarCellAccessoryItem_applicableStyles);
        ++v15;
        if (*(_QWORD *)(v14 + 16) != 2)
          goto LABEL_28;
      }
      goto LABEL_27;
    }
  }
LABEL_28:
  swift_bridgeObjectRelease_n(v8, 2);
  swift_release(v11);
  sub_10032B08C();
}

void sub_10032BFD8(void *a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v5 = a3;
  v8 = a1;
  sub_10032BD10((uint64_t)a3, (uint64_t)v8, v6, v7);

}

void sub_10032C030(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  sub_10032C388();
}

id sub_10032C054(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = a1;
  v5 = (void *)sub_10032C084((uint64_t)v1, v2, v3, v4);

  return v5;
}

uint64_t sub_10032C084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  id v6;
  uint64_t ObjectType;
  uint64_t result;
  objc_super v9;

  v5 = (objc_class *)type metadata accessor for DOCSidebarCell(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), *(_QWORD *)((swift_isaMask & *v4) + 0x58), a4);
  v9.receiver = v4;
  v9.super_class = v5;
  v6 = objc_msgSendSuper2(&v9, "contentView");
  ObjectType = swift_getObjectType(v6);
  result = swift_conformsToProtocol2(ObjectType, &protocol descriptor for UIContentView);
  if (result)
    return (uint64_t)v6;
  __break(1u);
  return result;
}

id sub_10032C100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for DOCSidebarCell(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), *(_QWORD *)((swift_isaMask & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

uint64_t sub_10032C14C(char *a1)
{
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)((swift_isaMask & *(_QWORD *)a1) + 0x50) - 8) + 8))(&a1[*(_QWORD *)((swift_isaMask & *(_QWORD *)a1) + 0x68)]);
  return swift_bridgeObjectRelease(*(_QWORD *)&a1[*(_QWORD *)((swift_isaMask & *(_QWORD *)a1) + 0x78)]);
}

uint64_t sub_10032C1A8(_BYTE *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _BYTE *v13;
  uint64_t AssociatedTypeWitness;
  _QWORD *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[5];

  v3 = swift_isaMask & *v1;
  v4 = *(_QWORD *)(v3 + 0x50);
  v20 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v6 = (char *)&v21[-1] - v5;
  v7 = sub_10006922C(&qword_100651B30);
  __chkstk_darwin(v7);
  v9 = (char *)&v21[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v3 + 88);
  v12 = (int *)type metadata accessor for DOCSidebarCell.Content(0, v4, v10, v11);
  v13 = &a1[v12[12]];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v10);
  v21[3] = AssociatedTypeWitness;
  v21[4] = swift_getAssociatedConformanceWitness(v10, v4, AssociatedTypeWitness, &unk_10056DB8C, &unk_10056DB94);
  v15 = sub_10006CBAC(v21);
  (*(void (**)(_QWORD *, _BYTE *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v15, v13, AssociatedTypeWitness);
  UICollectionViewCell.contentConfiguration.setter(v21);
  v16 = &a1[v12[13]];
  v17 = type metadata accessor for UIBackgroundConfiguration(0);
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, _BYTE *, uint64_t))(v18 + 16))(v9, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v9, 0, 1, v17);
  UICollectionViewCell.backgroundConfiguration.setter(v9);
  *((_BYTE *)v1 + *(_QWORD *)((swift_isaMask & *v1) + 0x60)) = *a1;
  (*(void (**)(char *, _BYTE *, uint64_t))(v20 + 16))(v6, &a1[v12[10]], v4);
  return sub_10032AA00((uint64_t)v6);
}

void sub_10032C388()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = swift_isaMask & *v0;
  *((_BYTE *)v0 + *(_QWORD *)(v1 + 0x60)) = 0;
  (*(void (**)(void))(*(_QWORD *)(v1 + 88) + 32))();
  *((_BYTE *)v0 + *(_QWORD *)((swift_isaMask & *v0) + 0x70)) = 0;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((swift_isaMask & *v0) + 0x78)) = _swiftEmptyArrayStorage;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x6C706D6920746F6ELL, 0xEF6465746E656D65, "Files/DOCSidebarCell.swift", 26, 2, 238, 0);
  __break(1u);
}

uint64_t sub_10032C468(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C(&qword_100645FB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10032C4B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C(&qword_100645FB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10032C4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C(&qword_100645FB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for DOCSidebarCell.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007E804(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DOCSidebarCell.Content);
}

unint64_t sub_10032C54C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064F108[0];
  if (!qword_10064F108[0])
  {
    v1 = type metadata accessor for UICellConfigurationState(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UICellConfigurationState, v1);
    atomic_store(result, qword_10064F108);
  }
  return result;
}

uint64_t sub_10032C594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_10032C59C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v12[6];

  v12[0] = &unk_1004E3148;
  v2 = type metadata accessor for UICellConfigurationState(319);
  v3 = v2;
  if (v4 <= 0x3F)
  {
    v12[1] = *(_QWORD *)(v2 - 8) + 64;
    v5 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
    v3 = v5;
    if (v6 <= 0x3F)
    {
      v12[2] = *(_QWORD *)(v5 - 8) + 64;
      v12[3] = "\b";
      AssociatedTypeWitness = swift_getAssociatedTypeWitness(319, *(_QWORD *)(a1 + 24));
      v3 = AssociatedTypeWitness;
      if (v8 <= 0x3F)
      {
        v12[4] = *(_QWORD *)(AssociatedTypeWitness - 8) + 64;
        v9 = type metadata accessor for UIBackgroundConfiguration(319);
        v3 = v9;
        if (v10 <= 0x3F)
        {
          v12[5] = *(_QWORD *)(v9 - 8) + 64;
          swift_initStructMetadata(a1, 0, 6, v12, a1 + 32);
          return 0;
        }
      }
    }
  }
  return v3;
}

uint64_t *sub_10032C698(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  void **v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(unint64_t, uint64_t, uint64_t);
  id v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t AssociatedTypeWitness;
  uint64_t v44;
  uint64_t v46;

  v4 = type metadata accessor for UICellConfigurationState(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v39 = v5;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v40 = *(_QWORD *)(v5 + 64);
  v41 = v4;
  v38 = *(_QWORD *)(v8 + 64) + 7;
  v44 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v11;
  v13 = *(_QWORD *)(v10 + 64);
  v14 = type metadata accessor for UIBackgroundConfiguration(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = v13 + v16;
  v18 = v9 | (unint64_t)v6 | v11 | v16;
  if (v18 > 7
    || ((v9 | v6 | v11 | *(_DWORD *)(v15 + 80)) & 0x100000) != 0
    || ((v13
       + v16
       + ((v11
         + ((v38
           + ((v40 + ((v6 + 1) & ~(unint64_t)v6) + v9) & ~(unint64_t)v9)) & 0xFFFFFFFFFFFFFFF8)
         + 8) & ~(unint64_t)v11)) & ~v16)
     + *(_QWORD *)(v15 + 64) > 0x18)
  {
    v21 = *a2;
    *a1 = *a2;
    v22 = (uint64_t *)(v21 + ((v18 & 0xF8 ^ 0x1F8) & (v18 + 16)));
    swift_retain(v21);
  }
  else
  {
    v37 = ~v16;
    v22 = a1;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v23 = ((unint64_t)a1 + v6 + 1) & ~(unint64_t)v6;
    v24 = ((unint64_t)a2 + v7 + 1) & ~v7;
    v46 = v14;
    v25 = v41;
    v42 = v15;
    v26 = v17;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 16))(v23, v24, v25);
    v27 = (v23 + v40 + v9) & ~(unint64_t)v9;
    v28 = (v24 + v40 + v9) & ~(unint64_t)v9;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v27, v28, v44);
    v29 = (_QWORD *)((v38 + v27) & 0xFFFFFFFFFFFFFFF8);
    v30 = (void **)((v38 + v28) & 0xFFFFFFFFFFFFFFF8);
    v31 = *v30;
    *v29 = *v30;
    v32 = ((unint64_t)v29 + v11 + 8) & ~(unint64_t)v11;
    v33 = ((unint64_t)v30 + v12 + 8) & ~v12;
    v34 = *(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 16);
    v35 = v31;
    v34(v32, v33, AssociatedTypeWitness);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v42 + 16))((v32 + v26) & v37, (v33 + v26) & v37, v46);
  }
  return v22;
}

uint64_t sub_10032C8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for UICellConfigurationState(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (a1 + *(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v8 = (v6 + *(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, _QWORD))(v7 + 8))(v8, *(_QWORD *)(a2 + 16));
  v9 = (id *)((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a2 + 24));
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = ((unint64_t)v9 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v12, AssociatedTypeWitness);
  v13 = *(_QWORD *)(v11 + 64);
  v14 = type metadata accessor for UIBackgroundConfiguration(0);
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))((v12 + v13 + *(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80), v14);
}

_BYTE *sub_10032C9FC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void **v18;
  void *v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *a1 = *a2;
  v6 = type metadata accessor for UICellConfigurationState(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (unint64_t)&a1[v8 + 1] & ~v8;
  v10 = (unint64_t)&a2[v8 + 1] & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v7 + 64) + v12;
  v14 = (v13 + v9) & ~v12;
  v15 = (v13 + v10) & ~v12;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v11 + 16))(v14, v15, *(_QWORD *)(a3 + 16));
  v16 = *(_QWORD *)(v11 + 64) + 7;
  v17 = (_QWORD *)((v16 + v14) & 0xFFFFFFFFFFFFFFF8);
  v18 = (void **)((v16 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = *v18;
  *v17 = *v18;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = ((unint64_t)v17 + v22 + 8) & ~v22;
  v24 = ((unint64_t)v18 + v22 + 8) & ~v22;
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
  v26 = v19;
  v25(v23, v24, AssociatedTypeWitness);
  v27 = *(_QWORD *)(v21 + 64);
  v28 = type metadata accessor for UIBackgroundConfiguration(0);
  v29 = *(_QWORD *)(v28 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v29 + 16))((v27 + *(unsigned __int8 *)(v29 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80), (v27 + *(unsigned __int8 *)(v29 + 80) + v24) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80), v28);
  return a1;
}

_BYTE *sub_10032CB60(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void **v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *a1 = *a2;
  v6 = type metadata accessor for UICellConfigurationState(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (unint64_t)&a1[v8 + 1] & ~v8;
  v10 = (unint64_t)&a2[v8 + 1] & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(v9, v10, v6);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v7 + 64) + v12;
  v14 = (v13 + v9) & ~v12;
  v15 = (v13 + v10) & ~v12;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v11 + 24))(v14, v15, *(_QWORD *)(a3 + 16));
  v16 = *(_QWORD *)(v11 + 64) + 7;
  v17 = (void **)((v16 + v14) & 0xFFFFFFFFFFFFFFF8);
  v18 = (void **)((v16 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = *v18;
  v20 = *v17;
  *v17 = *v18;
  v21 = v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = ((unint64_t)v17 + v24 + 8) & ~v24;
  v26 = ((unint64_t)v18 + v24 + 8) & ~v24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 24))(v25, v26, AssociatedTypeWitness);
  v27 = *(_QWORD *)(v23 + 64);
  v28 = type metadata accessor for UIBackgroundConfiguration(0);
  v29 = *(_QWORD *)(v28 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v29 + 24))((v27 + *(unsigned __int8 *)(v29 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80), (v27 + *(unsigned __int8 *)(v29 + 80) + v26) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80), v28);
  return a1;
}

_BYTE *sub_10032CCC0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *a1 = *a2;
  v6 = type metadata accessor for UICellConfigurationState(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (unint64_t)&a1[v8 + 1] & ~v8;
  v10 = (unint64_t)&a2[v8 + 1] & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v9, v10, v6);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v7 + 64) + v12;
  v14 = (v13 + v9) & ~v12;
  v15 = (v13 + v10) & ~v12;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v11 + 32))(v14, v15, *(_QWORD *)(a3 + 16));
  v16 = *(_QWORD *)(v11 + 64) + 7;
  v17 = (_QWORD *)((v16 + v14) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)((v16 + v15) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = ((unint64_t)v17 + v21 + 8) & ~v21;
  v23 = ((unint64_t)v18 + v21 + 8) & ~v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v22, v23, AssociatedTypeWitness);
  v24 = *(_QWORD *)(v20 + 64);
  v25 = type metadata accessor for UIBackgroundConfiguration(0);
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v26 + 32))((v24 + *(unsigned __int8 *)(v26 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80), (v24 + *(unsigned __int8 *)(v26 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80), v25);
  return a1;
}

_BYTE *sub_10032CE14(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void **v18;
  void *v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *a1 = *a2;
  v6 = type metadata accessor for UICellConfigurationState(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (unint64_t)&a1[v8 + 1] & ~v8;
  v10 = (unint64_t)&a2[v8 + 1] & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(v9, v10, v6);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v7 + 64) + v12;
  v14 = (v13 + v9) & ~v12;
  v15 = (v13 + v10) & ~v12;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v11 + 40))(v14, v15, *(_QWORD *)(a3 + 16));
  v16 = *(_QWORD *)(v11 + 64) + 7;
  v17 = (void **)((v16 + v14) & 0xFFFFFFFFFFFFFFF8);
  v18 = (void **)((v16 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = *v17;
  *v17 = *v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = ((unint64_t)v17 + v22 + 8) & ~v22;
  v24 = ((unint64_t)v18 + v22 + 8) & ~v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 40))(v23, v24, AssociatedTypeWitness);
  v25 = *(_QWORD *)(v21 + 64);
  v26 = type metadata accessor for UIBackgroundConfiguration(0);
  v27 = *(_QWORD *)(v26 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v27 + 40))((v25 + *(unsigned __int8 *)(v27 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80), (v25 + *(unsigned __int8 *)(v27 + 80) + v24) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80), v26);
  return a1;
}

uint64_t sub_10032CF70(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v31;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t *v38;
  uint64_t v39;
  uint64_t AssociatedTypeWitness;
  uint64_t v41;

  v41 = type metadata accessor for UICellConfigurationState(0);
  v6 = *(_QWORD *)(v41 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v9 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v7 <= v11)
    v12 = *(_DWORD *)(v10 + 84);
  else
    v12 = *(_DWORD *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v8);
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned int *)(v13 + 84);
  if (v12 <= v14)
    v12 = *(_DWORD *)(v13 + 84);
  v15 = type metadata accessor for UIBackgroundConfiguration(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int *)(v16 + 84);
  if (v12 <= v17)
    v18 = *(_DWORD *)(v16 + 84);
  else
    v18 = v12;
  if (v18 <= 0x7FFFFFFF)
    v19 = 0x7FFFFFFF;
  else
    v19 = v18;
  if (!a2)
    return 0;
  v20 = v15;
  v21 = *(unsigned __int8 *)(v6 + 80);
  v22 = *(_QWORD *)(v6 + 64);
  v23 = *(unsigned __int8 *)(v10 + 80);
  v24 = *(_QWORD *)(v10 + 64) + 7;
  v25 = *(unsigned __int8 *)(v13 + 80);
  v26 = v25 + 8;
  v27 = *(unsigned __int8 *)(v16 + 80);
  v28 = *(_QWORD *)(v13 + 64) + v27;
  if (a2 <= v19)
    goto LABEL_32;
  v29 = ((v28 + ((v26 + ((v24 + ((v22 + ((v21 + 1) & ~v21) + v23) & ~v23)) & 0xFFFFFFFFFFFFFFF8)) & ~v25)) & ~v27)
      + *(_QWORD *)(v16 + 64);
  v30 = 8 * v29;
  if (v29 > 3)
    goto LABEL_15;
  v33 = ((a2 - v19 + ~(-1 << v30)) >> v30) + 1;
  if (HIWORD(v33))
  {
    v31 = *(_DWORD *)(a1 + v29);
    if (v31)
      goto LABEL_23;
  }
  else
  {
    if (v33 <= 0xFF)
    {
      if (v33 < 2)
        goto LABEL_32;
LABEL_15:
      v31 = *(unsigned __int8 *)(a1 + v29);
      if (!*(_BYTE *)(a1 + v29))
        goto LABEL_32;
LABEL_23:
      v34 = (v31 - 1) << v30;
      if (v29 > 3)
        v34 = 0;
      if ((_DWORD)v29)
      {
        if (v29 <= 3)
          v35 = v29;
        else
          v35 = 4;
        __asm { BR              X12 }
      }
      return v19 + v34 + 1;
    }
    v31 = *(unsigned __int16 *)(a1 + v29);
    if (*(_WORD *)(a1 + v29))
      goto LABEL_23;
  }
LABEL_32:
  v36 = (a1 + v21 + 1) & ~v21;
  if ((_DWORD)v7 == v19)
  {
    v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    v17 = v7;
    v20 = v41;
    return v37(v36, v17, v20);
  }
  v36 = (v36 + v22 + v23) & ~v23;
  if ((_DWORD)v11 == v19)
  {
    v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    v17 = v11;
    v20 = v9;
    return v37(v36, v17, v20);
  }
  v38 = (uint64_t *)((v24 + v36) & 0xFFFFFFFFFFFFFFF8);
  if ((v18 & 0x80000000) != 0)
  {
    v36 = ((unint64_t)v38 + v26) & ~v25;
    if ((_DWORD)v14 == v19)
    {
      v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
      v17 = v14;
      v20 = AssociatedTypeWitness;
    }
    else
    {
      v36 = (v28 + v36) & ~v27;
      v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    }
    return v37(v36, v17, v20);
  }
  v39 = *v38;
  if ((unint64_t)*v38 >= 0xFFFFFFFF)
    LODWORD(v39) = -1;
  return (v39 + 1);
}

void sub_10032D244(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  size_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;

  v7 = *(_QWORD *)(type metadata accessor for UICellConfigurationState(0) - 8);
  v8 = *(_QWORD *)(a4 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= *(_DWORD *)(v9 + 84))
    v10 = *(_DWORD *)(v9 + 84);
  else
    v10 = *(_DWORD *)(v7 + 84);
  v11 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, v8) - 8);
  if (v10 <= *(_DWORD *)(v11 + 84))
    v10 = *(_DWORD *)(v11 + 84);
  v12 = *(_QWORD *)(type metadata accessor for UIBackgroundConfiguration(0) - 8);
  if (v10 <= *(_DWORD *)(v12 + 84))
    v13 = *(_DWORD *)(v12 + 84);
  else
    v13 = v10;
  if (v13 <= 0x7FFFFFFF)
    v14 = 0x7FFFFFFF;
  else
    v14 = v13;
  v15 = ((*(_QWORD *)(v11 + 64)
        + *(unsigned __int8 *)(v12 + 80)
        + ((*(unsigned __int8 *)(v11 + 80)
          + 8
          + ((*(_QWORD *)(v9 + 64)
            + 7
            + ((*(_QWORD *)(v7 + 64)
              + ((*(unsigned __int8 *)(v7 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
              + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
      + *(_QWORD *)(v12 + 64);
  if (a3 <= v14)
  {
    v16 = 0;
  }
  else if (v15 <= 3)
  {
    v18 = ((a3 - v14 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
    if (HIWORD(v18))
    {
      v16 = &dword_100000004;
    }
    else if (v18 >= 0x100)
    {
      v16 = 2;
    }
    else
    {
      v16 = v18 > 1;
    }
  }
  else
  {
    v16 = &_mh_execute_header.magic + 1;
  }
  if (v14 < a2)
  {
    v17 = ~v14 + a2;
    if (v15 < 4)
    {
      if ((_DWORD)v15)
      {
        v19 = v17 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if ((_DWORD)v15 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if ((_DWORD)v15 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v17;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X7 }
}

uint64_t sub_10032D5C8()
{
  uint64_t v0;
  uint64_t isEscapingClosureAtFileLocation;
  os_unfair_lock_s *v2;
  int v3;
  uint64_t v4;
  void **v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void **v12;
  uint64_t result;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void **aBlock;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  void *v22;
  uint64_t (*v23)();
  void **v24;

  isEscapingClosureAtFileLocation = v0;
  v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_stateLock);
  swift_retain(v2);
  os_unfair_lock_lock(v2 + 4);
  sub_10006A620(&aBlock);
  v3 = aBlock;
  os_unfair_lock_unlock(v2 + 4);
  v4 = swift_release(v2);
  v5 = _NSConcreteStackBlock;
  v6 = sub_10006655C;
  if (v3 != 1)
    goto LABEL_5;
  if (qword_100640FF8 != -1)
    goto LABEL_9;
  while (1)
  {
    v7 = qword_100672C28;
    v8 = *(NSObject **)(qword_100672C28 + 24);
    v9 = swift_allocObject(&unk_1005DEA88, 32, 7);
    *(_QWORD *)(v9 + 16) = isEscapingClosureAtFileLocation;
    *(_QWORD *)(v9 + 24) = v7;
    v10 = swift_allocObject(&unk_1005DEAB0, 32, 7);
    *(_QWORD *)(v10 + 16) = sub_100339220;
    *(_QWORD *)(v10 + 24) = v9;
    v23 = sub_10010DB64;
    v24 = (void **)v10;
    aBlock = v5;
    v20 = 1107296256;
    v21 = v6;
    v22 = &unk_1005DEAC8;
    v11 = _Block_copy(&aBlock);
    v12 = v24;
    swift_retain_n(v7, 2);
    (id)isEscapingClosureAtFileLocation;
    swift_retain(v10);
    swift_release(v12);
    dispatch_sync(v8, v11);
    _Block_release(v11);
    LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v10, "", 103, 47, 28, 1);
    swift_release(v7);
    swift_release(v9);
    result = swift_release(v10);
    if ((v8 & 1) != 0)
      break;
    v4 = sub_10032ED10();
LABEL_5:
    sub_1000AA44C(v4);
    if (qword_100640FF8 != -1)
      swift_once(&qword_100640FF8, sub_10009CB2C);
    v14 = qword_100672C28;
    v15 = *(NSObject **)(qword_100672C28 + 24);
    v16 = swift_allocObject(&unk_1005DEA10, 32, 7);
    *(_QWORD *)(v16 + 16) = isEscapingClosureAtFileLocation;
    *(_QWORD *)(v16 + 24) = v14;
    v17 = swift_allocObject(&unk_1005DEA38, 32, 7);
    *(_QWORD *)(v17 + 16) = sub_10009CD9C;
    *(_QWORD *)(v17 + 24) = v16;
    v23 = sub_10006657C;
    v24 = (void **)v17;
    aBlock = _NSConcreteStackBlock;
    v20 = 1107296256;
    v21 = sub_10006655C;
    v22 = &unk_1005DEA50;
    v6 = (uint64_t (*)(uint64_t))_Block_copy(&aBlock);
    v5 = v24;
    swift_retain_n(v14, 2);
    v18 = (id)isEscapingClosureAtFileLocation;
    swift_retain(v17);
    swift_release(v5);
    dispatch_sync(v15, v6);
    _Block_release(v6);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v17, "", 103, 40, 28, 1);
    swift_release(v14);
    swift_release(v16);
    result = swift_release(v17);
    if ((isEscapingClosureAtFileLocation & 1) == 0)
      return result;
    __break(1u);
LABEL_9:
    swift_once(&qword_100640FF8, sub_10009CB2C);
  }
  __break(1u);
  return result;
}

void sub_10032D8CC(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  id v13;

  v2 = 0;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      goto LABEL_23;
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        goto LABEL_23;
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          goto LABEL_23;
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            goto LABEL_23;
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    sub_1000C8568(&v13, *(id *)(*(_QWORD *)(a1 + 48) + 8 * v9));

  }
  v12 = v10 + 4;
  if (v12 >= v7)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      goto LABEL_23;
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

void sub_10032DA24()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD aBlock[5];
  uint64_t v8;
  uint64_t v9;

  v1 = v0;
  v9 = 0;
  v2 = *(NSObject **)(v0 + 24);
  v3 = swift_allocObject(&unk_1005DEC90, 32, 7);
  *(_QWORD *)(v3 + 16) = &v9;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = swift_allocObject(&unk_1005DECB8, 32, 7);
  *(_QWORD *)(v4 + 16) = sub_100339370;
  *(_QWORD *)(v4 + 24) = v3;
  aBlock[4] = sub_10010DB64;
  v8 = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10006655C;
  aBlock[3] = &unk_1005DECD0;
  v5 = _Block_copy(aBlock);
  v6 = v8;
  swift_retain();
  swift_retain();
  swift_release(v6);
  dispatch_sync(v2, v5);
  _Block_release(v5);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v4, "", 103, 25, 32, 1);
  swift_release(v4);
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }
  else if (v9)
  {
    swift_release(v3);
    return;
  }
  __break(1u);
}

double sub_10032DB64(uint64_t *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  double result;

  v3 = objc_msgSend(*(id *)(a2 + 16), "allObjects");
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, (char *)&type metadata for Any + 8);

  v5 = sub_10043BC04(v4);
  swift_bridgeObjectRelease(v4);
  v6 = *a1;
  *a1 = (uint64_t)v5;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

id sub_10032DBD8(void *a1, uint64_t a2)
{
  return sub_10009CB64(a1, a2, "DOCFileSystemCollectionManager: Adding an active collection for: %s", (SEL *)&selRef_addObject_);
}

id sub_10032DBEC(void *a1, uint64_t a2)
{
  return sub_10009CB64(a1, a2, "DOCFileSystemCollectionManager: Removing an inactive collection for: %s", (SEL *)&selRef_removeObject_);
}

double sub_10032DC00(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[5];
  uint64_t v27;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = __chkstk_darwin(v6);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0)
  {
    sub_10032DA24();
    v12 = v11;
    if ((unint64_t)v11 >> 62)
    {
      if (v11 < 0)
        v22 = v11;
      else
        v22 = v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v23 = _CocoaArrayWrapper.endIndex.getter(v22);
      swift_bridgeObjectRelease(v12);
      if (v23 >= 1)
        goto LABEL_4;
    }
    else if (*(uint64_t *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10) >= 1)
    {
LABEL_4:
      v13 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
      v25 = static OS_dispatch_queue.main.getter(v13);
      v14 = swift_allocObject(&unk_1005DEDD0, 24, 7);
      *(_QWORD *)(v14 + 16) = v12;
      aBlock[4] = sub_1003393F4;
      v27 = v14;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10004A82C;
      aBlock[3] = &unk_1005DEDE8;
      v15 = _Block_copy(aBlock);
      swift_release(v27);
      static DispatchQoS.unspecified.getter(v16);
      aBlock[0] = _swiftEmptyArrayStorage;
      v17 = v3;
      v18 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v19 = sub_10006922C((uint64_t *)&unk_100647540);
      v20 = sub_100062698((unint64_t *)&qword_100641270, (uint64_t *)&unk_100647540, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v2, v18);
      v21 = (void *)v25;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v5, v15);
      _Block_release(v15);

      (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      return result;
    }
    *(_QWORD *)&result = swift_bridgeObjectRelease(v12).n128_u64[0];
  }
  return result;
}

void sub_10032DE8C(unint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  NSObject *v33;
  __n128 v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __n128 v45;
  const char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t aBlock[5];
  uint64_t v63;

  v56 = a3;
  v57 = a4;
  v46 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v54 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  __chkstk_darwin(v5);
  v53 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v7 - 8);
  v52 = v7;
  __chkstk_darwin(v7);
  v50 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = a1;
  if (!(a1 >> 62))
  {
    v13 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10);
    v14 = swift_bridgeObjectRetain(v58);
    if (v13)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease(v58);
    return;
  }
  if (v58 < 0)
    v42 = v58;
  else
    v42 = v58 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v58);
  v13 = _CocoaArrayWrapper.endIndex.getter(v42);
  if (!v13)
    goto LABEL_17;
LABEL_3:
  if (v13 >= 1)
  {
    v59 = v12;
    v60 = v10;
    v49 = v9;
    v15 = 0;
    v47 = v58 & 0xC000000000000001;
    v14.n128_u64[0] = 136315138;
    v45 = v14;
    v44 = (char *)&type metadata for Any + 8;
    v48 = v13;
    do
    {
      if (v47)
        v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v58);
      else
        v26 = *(id *)(v58 + 8 * v15 + 32);
      v27 = v26;
      v28 = v49;
      v30 = v59;
      v29 = v60;
      v31 = Logger.Enumeration.unsafeMutableAddressor(v26);
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v30, v31, v28);
      v32 = v27;
      v33 = Logger.logObject.getter(v32);
      v35 = static os_log_type_t.info.getter(v34);
      if (os_log_type_enabled(v33, v35))
      {
        v36 = swift_slowAlloc(12, -1);
        v37 = swift_slowAlloc(32, -1);
        aBlock[0] = v37;
        *(_DWORD *)v36 = v45.n128_u32[0];
        v38 = objc_msgSend(*(id *)&v32[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode], "displayName");
        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
        v41 = v40;

        *(_QWORD *)(v36 + 4) = sub_1000544FC(v39, v41, aBlock);
        swift_bridgeObjectRelease(v41);
        _os_log_impl((void *)&_mh_execute_header, v33, v35, v46, (uint8_t *)v36, 0xCu);
        swift_arrayDestroy(v37, 1, v44);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v36, -1, -1);

        (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v28);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v28);
      }
      ++v15;
      v16 = swift_allocObject(&unk_1005DE5B0, 24, 7);
      swift_unknownObjectWeakInit(v16 + 16);
      aBlock[4] = v56;
      v63 = v16;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10004A82C;
      aBlock[3] = v57;
      v17 = _Block_copy(aBlock);
      swift_retain();
      v18 = v50;
      static DispatchQoS.unspecified.getter(v19);
      v61 = _swiftEmptyArrayStorage;
      v20 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v21 = sub_10006922C((uint64_t *)&unk_100647540);
      v22 = sub_100062698((unint64_t *)&qword_100641270, (uint64_t *)&unk_100647540, (uint64_t)&protocol conformance descriptor for [A]);
      v23 = v53;
      v24 = v55;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v61, v21, v22, v55, v20);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v23, v17);
      _Block_release(v17);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v23, v24);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v18, v52);
      v25 = v63;

      swift_release(v16);
      swift_release(v25);
    }
    while (v48 != v15);
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t sub_10032E368(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v7;

  swift_unknownObjectRetain(a3);
  v7 = swift_retain(a1);
  a4(v7);
  swift_unknownObjectRelease(a3);
  return swift_release(a1);
}

double sub_10032E3B4(uint64_t a1)
{
  uint64_t Strong;
  double result;
  uint64_t v3;

  Strong = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_delegate);
  if (Strong)
  {
    v3 = Strong;
    sub_100164D0C();
    *(_QWORD *)&result = swift_unknownObjectRelease(v3).n128_u64[0];
  }
  return result;
}

uint64_t sub_10032E3F8@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + OBJC_IVAR____TtC5Files23DOCFileSystemCollection__isObserving);
  return result;
}

uint64_t sub_10032E40C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[5];
  _QWORD *v35;
  char v36[24];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v36, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a2, v14);
  if (result)
  {
    v16 = (void *)result;
    v32 = *(_QWORD *)(result + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_workQueue);
    v17 = swift_allocObject(&unk_1005DE5B0, 24, 7);
    v31 = v7;
    v18 = v17;
    swift_unknownObjectWeakInit(v17 + 16, v16);
    v19 = (_QWORD *)swift_allocObject(&unk_1005DEBF0, 40, 7);
    v19[2] = v18;
    v19[3] = a1;
    v19[4] = a3;
    aBlock[4] = sub_100339338;
    v35 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004A82C;
    aBlock[3] = &unk_1005DEC08;
    v20 = _Block_copy(aBlock);
    v21 = a1;
    v22 = a3;
    swift_retain(v18);
    static DispatchQoS.unspecified.getter(v23);
    v33 = _swiftEmptyArrayStorage;
    v24 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = sub_10006922C((uint64_t *)&unk_100647540);
    v30 = v10;
    v26 = v25;
    v27 = sub_100062698((unint64_t *)&qword_100641270, (uint64_t *)&unk_100647540, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v26, v27, v6, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v20);
    _Block_release(v20);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v30);

    v28 = v35;
    swift_release(v18);
    return swift_release(v28);
  }
  return result;
}

void sub_10032E678(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t Strong;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v29, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v10);
  if (Strong)
  {
    v12 = (char *)Strong;
    if (a2)
    {
      v13 = a2;
      v14 = Logger.Enumeration.unsafeMutableAddressor(v13);
      v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v14, v6);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v25 = v13;
        v18 = swift_slowAlloc(12, -1);
        v26 = a3;
        v19 = (uint8_t *)v18;
        v20 = swift_slowAlloc(32, -1);
        v28 = v20;
        *(_DWORD *)v19 = 136446210;
        v27 = sub_1000544FC(0xD000000000000010, 0x8000000100512850, &v28);
        v13 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "[DSEnumeration] %{public}s: DOCICloudRootNode: main container became ready, start Observing", v19, 0xCu);
        swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v20, -1, -1);
        v21 = v19;
        a3 = v26;
        swift_slowDealloc(v21, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v22 = *(_QWORD *)&v12[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_internalObservedNode];
      *(_QWORD *)&v12[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_internalObservedNode] = v13;
      v23 = v13;
      swift_unknownObjectRelease(v22);
      sub_1000A940C();
      (*(void (**)(_QWORD, _QWORD))((swift_isaMask & *a3) + 0x98))(0, 0);

    }
  }
}

void sub_10032E8B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id Strong;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  char v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  id v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD aBlock[5];
  uint64_t v57;
  char v58[32];

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v58, 0, 0);
  Strong = (id)swift_unknownObjectWeakLoadStrong(a3, v13);
  if (!Strong)
    return;
  v50 = v6;
  v51 = v5;
  v48 = v9;
  v49 = v8;
  v53 = Strong;
  v46 = v12;
  v47 = v10;
  if (!((unint64_t)a1 >> 62))
  {
    v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v16 = Strong;
    swift_bridgeObjectRetain(a1);
    if (v15)
      goto LABEL_4;
LABEL_23:
    v45 = v53;

    swift_bridgeObjectRelease(a1);
    return;
  }
LABEL_19:
  if (a1 < 0)
    v43 = a1;
  else
    v43 = a1 & 0xFFFFFFFFFFFFFF8;
  v44 = Strong;
  swift_bridgeObjectRetain(a1);
  v15 = _CocoaArrayWrapper.endIndex.getter(v43);
  if (!v15)
    goto LABEL_23;
LABEL_4:
  v54 = a1 & 0xC000000000000001;
  v52 = (char *)OBJC_IVAR____TtC5Files23DOCFileSystemCollection_source;
  v17 = 4;
  v18 = a1;
  while (1)
  {
    if (v54)
      Strong = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 - 4, a1);
    else
      Strong = *(id *)(a1 + 8 * v17);
    a1 = (uint64_t)Strong;
    v19 = v17 - 3;
    if (__OFADD__(v17 - 4, 1))
    {
      __break(1u);
      goto LABEL_19;
    }
    v20 = type metadata accessor for DOCFileProviderSource();
    v21 = swift_dynamicCastClass(a1, v20);
    if (v21)
    {
      v22 = v21;
      v23 = OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain;
      v24 = *(void **)(v21 + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain);
      if (v24)
      {
        v25 = *(_QWORD *)&v52[(_QWORD)v53];
        if (v25)
        {
          v26 = *(void **)(v25 + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain);
          if (v26)
          {
            sub_10004F2F0(0, (unint64_t *)&unk_100643460, FPProviderDomain_ptr);
            v27 = v24;
            v28 = v26;
            v29 = static NSObject.== infix(_:_:)(v27, v28);

            if ((v29 & 1) != 0)
              break;
          }
        }
      }
    }

    ++v17;
    a1 = v18;
    if (v19 == v15)
      goto LABEL_23;
  }
  v30 = (char *)v53;

  swift_bridgeObjectRelease(v18);
  v31 = *(void **)(v22 + v23);
  if (v31)
  {
    v54 = *(_QWORD *)&v30[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_workQueue];
    v32 = swift_allocObject(&unk_1005DE5B0, 24, 7);
    swift_unknownObjectWeakInit(v32 + 16, v30);
    v33 = swift_allocObject(&unk_1005DEB50, 32, 7);
    *(_QWORD *)(v33 + 16) = v32;
    *(_QWORD *)(v33 + 24) = v31;
    aBlock[4] = sub_1003392B4;
    v57 = v33;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004A82C;
    aBlock[3] = &unk_1005DEB68;
    v34 = _Block_copy(aBlock);
    v52 = v31;
    swift_retain(v32);
    v35 = v46;
    static DispatchQoS.unspecified.getter(v36);
    v55 = _swiftEmptyArrayStorage;
    v37 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v38 = sub_10006922C((uint64_t *)&unk_100647540);
    v39 = sub_100062698((unint64_t *)&qword_100641270, (uint64_t *)&unk_100647540, (uint64_t)&protocol conformance descriptor for [A]);
    v40 = v49;
    v41 = v51;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v55, v38, v39, v51, v37);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v35, v40, v34);
    _Block_release(v34);

    (*(void (**)(char *, uint64_t))(v50 + 8))(v40, v41);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v35, v48);

    v42 = v57;
    swift_release(v32);
    swift_release(v42);
  }
  else
  {

  }
}

