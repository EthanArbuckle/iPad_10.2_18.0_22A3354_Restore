uint64_t sub_100087794(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v5 = a2;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    v8 = String.index(_:offsetBy:limitedBy:)(15, result, v7, a2, a3);
    if ((v9 & 1) != 0)
      v10 = v7;
    else
      v10 = v8;
    return String.subscript.getter(15, v10, a2, a3);
  }
  return result;
}

uint64_t sub_10008781C(uint64_t a1)
{
  return sub_100243954(a1, sub_1002495C4, (unint64_t *)&unk_100651ED0, NSUserActivity_ptr);
}

id sub_100087838()
{
  uint64_t v0;

  return (id)(*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_100087860(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  _BYTE v17[40];
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  result = Set.init(minimumCapacity:)(*(_QWORD *)(a1 + 16), &type metadata for AnyHashable, &protocol witness table for AnyHashable);
  v3 = 0;
  v5 = a1 + 64;
  v4 = *(_QWORD *)(a1 + 64);
  v20 = result;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v4;
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v3 << 6);
      goto LABEL_5;
    }
    v12 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v9)
      goto LABEL_23;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v3;
    if (!v13)
    {
      v3 = v12 + 1;
      if (v12 + 1 >= v9)
        goto LABEL_23;
      v13 = *(_QWORD *)(v5 + 8 * v3);
      if (!v13)
      {
        v3 = v12 + 2;
        if (v12 + 2 >= v9)
          goto LABEL_23;
        v13 = *(_QWORD *)(v5 + 8 * v3);
        if (!v13)
        {
          v3 = v12 + 3;
          if (v12 + 3 >= v9)
            goto LABEL_23;
          v13 = *(_QWORD *)(v5 + 8 * v3);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v3 << 6);
LABEL_5:
    sub_10006777C(*(_QWORD *)(a1 + 48) + 40 * v11, (uint64_t)v18);
    v15[0] = v18[0];
    v15[1] = v18[1];
    v16 = v19;
    sub_1000C83F0((uint64_t)v17, (uint64_t)v15);
    result = sub_100067748((uint64_t)v17);
  }
  v14 = v12 + 4;
  if (v14 >= v9)
  {
LABEL_23:
    swift_release(a1);
    return v20;
  }
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v3 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v3 >= v9)
      goto LABEL_23;
    v13 = *(_QWORD *)(v5 + 8 * v3);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100087A00(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[56];
  id v7[7];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_1000A01A4();
  result = Set.init(minimumCapacity:)(v2, &type metadata for DOCIdentityHashableLocation, v3);
  v8 = result;
  if (v2)
  {
    v5 = a1 + 32;
    do
    {
      sub_1000A0110(v5, (uint64_t)v6);
      sub_100087C98((uint64_t)v7, (uint64_t)v6);
      sub_1000A00DC(v7);
      v5 += 56;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_100087A88(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  char v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  _QWORD v23[9];

  v3 = v2;
  v6 = *v2;
  Hasher.init(_seed:)(v23, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v6);
  Task.hash(into:)(v23, a2, (char *)&type metadata for () + 8, &type metadata for Never, &protocol witness table for Never);
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  v10 = v6 + 56;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
    v22 = a1;
    goto LABEL_8;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v9);
  v12 = swift_retain();
  v13 = static Task.== infix(_:_:)(v12);
  swift_release(v11);
  if ((v13 & 1) == 0)
  {
    v14 = ~v8;
    v9 = (v9 + 1) & ~v8;
    v22 = a1;
    if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
    {
      while (1)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v9);
        v16 = swift_retain();
        v17 = static Task.== infix(_:_:)(v16);
        swift_release(v15);
        if ((v17 & 1) != 0)
          break;
        v9 = (v9 + 1) & v14;
        if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          goto LABEL_8;
      }
      a1 = v22;
      goto LABEL_10;
    }
LABEL_8:
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v23[0] = *v3;
    *v3 = 0x8000000000000000;
    swift_retain();
    sub_10008230C(v19, v9, isUniquelyReferenced_nonNull_native);
    v20 = *v3;
    *v3 = v23[0];
    swift_bridgeObjectRelease(v20);
    *v22 = a2;
    return 1;
  }
LABEL_10:
  swift_release(a2);
  swift_bridgeObjectRelease(v6);
  *a1 = *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 8 * v9);
  swift_retain();
  return 0;
}

uint64_t sub_100087C98(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  __int128 v21;
  uint64_t v23;
  id v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  __int128 v28[5];

  v3 = v2;
  v6 = *v2;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v2 + 40));
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  sub_10007E7A0((_QWORD *)(a2 + 8), v7);
  swift_bridgeObjectRetain(v6);
  dispatch thunk of Hashable.hash(into:)(v28, v7, v8);
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v6 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v6 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v23 = a1;
    v12 = ~v10;
    while (1)
    {
      sub_1000A0110(*(_QWORD *)(v6 + 48) + 56 * v11, (uint64_t)&v24);
      Hasher.init(_seed:)(v28, 0);
      v13 = v26;
      v14 = v27;
      sub_10007E7A0(v25, v26);
      dispatch thunk of Hashable.hash(into:)(v28, v13, v14);
      v15 = Hasher._finalize()();
      Hasher.init(_seed:)(v28, 0);
      v16 = *(_QWORD *)(a2 + 32);
      v17 = *(_QWORD *)(a2 + 48);
      sub_10007E7A0((_QWORD *)(a2 + 8), v16);
      dispatch thunk of Hashable.hash(into:)(v28, v16, v17);
      v18 = Hasher._finalize()();
      sub_1000A00DC(&v24);
      if (v15 == v18)
        break;
      v11 = (v11 + 1) & v12;
      if (((*(_QWORD *)(v6 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
      {
        swift_bridgeObjectRelease(v6);
        v3 = v2;
        a1 = v23;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v6);
    sub_1000A00DC((id *)a2);
    sub_1000A0110(*(_QWORD *)(*v2 + 48) + 56 * v11, v23);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v6);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    sub_1000A0110(a2, (uint64_t)v28);
    v24 = (id)*v3;
    *v3 = 0x8000000000000000;
    sub_100082510(v28, v11, isUniquelyReferenced_nonNull_native);
    v20 = *v3;
    *v3 = v24;
    swift_bridgeObjectRelease(v20);
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v21;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    return 1;
  }
}

uint64_t sub_100087ED8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  int64_t v20;
  _BYTE v21[40];
  _OWORD v22[2];
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v20 = (unint64_t)(v6 + 63) >> 6;
  v9 = a2 + 56;
  if (!v8)
    goto LABEL_9;
LABEL_7:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    sub_10006777C(*(_QWORD *)(v3 + 48) + 40 * i, (uint64_t)v24);
    v22[0] = v24[0];
    v22[1] = v24[1];
    v23 = v25;
    v15 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
    v16 = -1 << *(_BYTE *)(a2 + 32);
    v17 = v15 & ~v16;
    if (((*(_QWORD *)(v9 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
    {
LABEL_29:
      sub_100067748((uint64_t)v22);
      return 0;
    }
    v18 = ~v16;
    while (1)
    {
      sub_10006777C(*(_QWORD *)(a2 + 48) + 40 * v17, (uint64_t)v21);
      v19 = static AnyHashable.== infix(_:_:)(v21, v22);
      sub_100067748((uint64_t)v21);
      if ((v19 & 1) != 0)
        break;
      v17 = (v17 + 1) & v18;
      if (((*(_QWORD *)(v9 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
        goto LABEL_29;
    }
    result = sub_100067748((uint64_t)v22);
    if (v8)
      goto LABEL_7;
LABEL_9:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v12 >= v20)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v20)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v20)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v20)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_24:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 4;
  if (v14 >= v20)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v20)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_24;
  }
LABEL_34:
  __break(1u);
  return result;
}

double sub_100088118(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t, __n128);
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  double result;

  v4 = *(void (**)(uint64_t, __n128))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  v7 = swift_retain();
  v4(v6, v7);
  swift_release(v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

double sub_100088184(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  uint64_t v7;
  id v8;
  double result;

  v4 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v7 = sub_10004F2F0(0, &qword_100650240, DSFileOperation_ptr);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }
  swift_retain();
  v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  *(_QWORD *)&result = swift_bridgeObjectRelease(v4).n128_u64[0];
  return result;
}

unint64_t sub_100088210()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100647550;
  if (!qword_100647550)
  {
    v1 = sub_10007E830(&qword_10064F390);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100647550);
  }
  return result;
}

uint64_t sub_10008825C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10007E830(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

id sub_10008829C(uint64_t a1, unint64_t a2)
{
  return sub_10023D798(a1, a2, (unint64_t *)&qword_100645B80, UIView_ptr);
}

id sub_1000882B0(uint64_t a1, unint64_t a2)
{
  return sub_10023D798(a1, a2, &qword_100643AC0, DOCDocumentSource_ptr);
}

id sub_1000882C4(uint64_t a1, unint64_t a2)
{
  return sub_10023D798(a1, a2, &qword_100645410, NSSortDescriptor_ptr);
}

uint64_t sub_1000882D8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = v2 - 1;
    if (!v12)
      return 1;
    v13 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v15 = *(v13 - 1);
      v16 = *v13;
      v17 = *(i - 1);
      v18 = *i;
      v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) == 0)
        break;
      v13 += 2;
      if (!--v12)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_10008839C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for DOCBrowserHistoryItem(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        sub_100144EAC(a1 + v12, (uint64_t)v10);
        sub_100144EAC(a2 + v12, (uint64_t)v7);
        v15 = static UUID.== infix(_:_:)(v10, v7);
        sub_10023EF5C((uint64_t)v7);
        sub_10023EF5C((uint64_t)v10);
        v17 = v14-- != 0;
        if ((v15 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1000884B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a1 + 40);
    for (i = (uint64_t *)(a2 + 40); ; i += 5)
    {
      v5 = *(v3 - 1);
      v6 = *v3;
      v7 = *(i - 1);
      v8 = *i;
      v9 = v5 == v7 && v6 == v8;
      if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0) & 1) == 0)
        break;
      v3 += 5;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_10008853C(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;
  char v15;

  v5 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v5 < 0 || (v5 & 0x4000000000000000) != 0)
  {
    v5 = a2(v5);
    *v2 = v5;
  }
  v7 = v5 & 0xFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 <= a1)
  {
    __break(1u);
  }
  else
  {
    v9 = v8 - 1;
    v10 = v8 - 1 - a1;
    if (v10 >= 0)
    {
      v11 = v7 + 8 * a1;
      v12 = *(_QWORD *)(v11 + 32);
      v13 = memmove((void *)(v11 + 32), (const void *)(v11 + 40), 8 * v10);
      *(_QWORD *)(v7 + 16) = v9;
      specialized Array._endMutation()(v13);
      return v12;
    }
  }
  v15 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v15, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100088620(unint64_t a1)
{
  return sub_10008853C(a1, sub_1000818A0);
}

uint64_t sub_10008862C(uint64_t a1)
{
  return sub_100047DC0(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_100088F38);
}

uint64_t sub_100088638(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  char v18;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_20;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if ((_DWORD)isUniquelyReferenced_nonNull_native)
  {
    v8 = *(_QWORD *)(v3 + 24) >> 1;
    if (v8 >= v5)
    {
      v9 = *(_QWORD *)(a1 + 16);
      if (v9)
        goto LABEL_5;
LABEL_17:
      if (!v2)
        goto LABEL_18;
      goto LABEL_20;
    }
  }
  if (v4 <= v5)
    v4 += v2;
  swift_bridgeObjectRetain(v3);
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v4, 1, v3);
  swift_bridgeObjectRelease(*v1);
  *v1 = v3;
  v8 = *(_QWORD *)(v3 + 24) >> 1;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_17;
LABEL_5:
  v10 = *(_QWORD *)(v3 + 16);
  if (v8 - v10 < (uint64_t)v9)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v11 = v3 + 8 * v10 + 32;
  if (a1 + 32 < v11 + 8 * v9 && v11 < a1 + 32 + 8 * v9)
    goto LABEL_23;
  sub_10006922C(&qword_100655B90);
  swift_arrayInitWithCopy(v11);
  if (v9 < v2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v13 = *(_QWORD *)(*v1 + 16);
  v14 = __OFADD__(v13, v9);
  v15 = v13 + v9;
  if (!v14)
  {
    *(_QWORD *)(*v1 + 16) = v15;
LABEL_18:
    swift_bridgeObjectRelease(a1);
    return specialized Array._endMutation()(v16);
  }
LABEL_22:
  __break(1u);
LABEL_23:
  v18 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v18, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000887D0(uint64_t a1)
{
  return sub_100047DC0(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_100089154);
}

uint64_t sub_1000887DC(uint64_t a1)
{
  return sub_100047DC0(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_100089370);
}

uint64_t sub_1000887E8(uint64_t a1)
{
  return sub_100047DC0(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_100047F7C);
}

uint64_t sub_1000887F4(uint64_t a1)
{
  return sub_10008881C(a1, (uint64_t (*)(void))sub_100081B5C, type metadata accessor for DOCBrowserHistoryItem);
}

uint64_t sub_100088808(uint64_t a1)
{
  return sub_10008881C(a1, (uint64_t (*)(void))sub_100081B70, type metadata accessor for DOCFileOperation);
}

uint64_t sub_10008881C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;
  char v26;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native(*v3) && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  v11 = (*(_QWORD *)(v5 + 24) >> 1) - v10;
  v12 = a3(0);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v5 + v14 + v15 * v10;
  v17 = a1 + v14;
  v18 = v15 * v4;
  v19 = v16 + v18;
  v20 = v17 + v18;
  if (v17 < v19 && v16 < v20)
    goto LABEL_21;
  swift_arrayInitWithCopy(v16);
  if (!v4)
  {
LABEL_16:
    result = swift_bridgeObjectRelease(a1);
    *v3 = v5;
    return result;
  }
  v22 = *(_QWORD *)(v5 + 16);
  v23 = __OFADD__(v22, v4);
  v24 = v22 + v4;
  if (!v23)
  {
    *(_QWORD *)(v5 + 16) = v24;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v26, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100088994(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v10 = v5;
    else
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

uint64_t sub_100088A54(uint64_t (*a1)(uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v3;
  if (!(_DWORD)result || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    result = a1(v3);
    v3 = result;
    *v1 = result;
  }
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    v7 = v6 - 1;
    v8 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20);
    *(_QWORD *)(v5 + 16) = v7;
    specialized Array._endMutation()(result);
    return v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_100088ACC(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_100081920(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = sub_10006922C(&qword_100644AB0);
  result = (void *)swift_arrayDestroy(&v4[3 * a1 + 4], v7, v12);
  if (!v7)
    goto LABEL_20;
  v14 = v4[2];
  v15 = __OFSUB__(v14, a2);
  v16 = v14 - a2;
  if (v15)
    goto LABEL_26;
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (char *)&v4[3 * a2 + 4];
    if (a1 != a2 || &v4[3 * a1 + 4] >= (_QWORD *)&v17[24 * v16])
      result = memmove(&v4[3 * a1 + 4], v17, 24 * v16);
    v18 = v4[2];
    v15 = __OFADD__(v18, v8);
    v19 = v18 - v7;
    if (!v15)
    {
      v4[2] = v19;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v20 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v20, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100088C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100458908(a1, a2, a3, (unint64_t *)&qword_1006434D0, UIViewController_ptr);
}

uint64_t sub_100088C5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v3 = a2;
    v5 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v7 < 0)
    v23 = v7;
  else
    v23 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(v7);
  if (v9 < v3)
    goto LABEL_34;
LABEL_4:
  v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 - v9;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v25 = v7;
    else
      v25 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v14 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v7);
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v10 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v7);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v7);
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v7);
  swift_bridgeObjectRelease(*v4);
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = v6(0);
  v16 = (void *)swift_arrayDestroy(v13 + 32 + 8 * v5, v9, v15);
  if (!v8)
    return specialized Array._endMutation()(v16);
  if (!((unint64_t)v7 >> 62))
  {
    v17 = *(_QWORD *)(v13 + 16);
    v18 = v17 - v3;
    if (!__OFSUB__(v17, v3))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v7 < 0)
    v26 = v7;
  else
    v26 = v13;
  swift_bridgeObjectRetain(v7);
  v27 = _CocoaArrayWrapper.endIndex.getter(v26);
  v16 = (void *)swift_bridgeObjectRelease(v7);
  v18 = v27 - v3;
  if (__OFSUB__(v27, v3))
    goto LABEL_52;
LABEL_21:
  if ((v18 & 0x8000000000000000) == 0)
  {
    v19 = (const void *)(v13 + 32 + 8 * v3);
    if (v5 != v3 || v13 + 32 + 8 * v5 >= (unint64_t)v19 + 8 * v18)
      v16 = memmove((void *)(v13 + 32 + 8 * v5), v19, 8 * v18);
    if (!((unint64_t)v7 >> 62))
    {
      v20 = *(_QWORD *)(v13 + 16);
      v21 = v20 + v8;
      if (!__OFADD__(v20, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v21;
        return specialized Array._endMutation()(v16);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v7 < 0)
      v28 = v7;
    else
      v28 = v13;
    swift_bridgeObjectRetain(v7);
    v29 = _CocoaArrayWrapper.endIndex.getter(v28);
    v16 = (void *)swift_bridgeObjectRelease(v7);
    v21 = v29 + v8;
    if (!__OFADD__(v29, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100088F2C(uint64_t a1, uint64_t a2)
{
  return sub_100088C5C(a1, a2, type metadata accessor for DOCHierarchyController.PreventChangeAssertion);
}

uint64_t sub_100088F38(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100062698((unint64_t *)&unk_1006442F0, &qword_100647590, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10006922C(&qword_100647590);
          v13 = sub_1000E0F80(v18, i, a3);
          v15 = *v14;
          ((void (*)(uint64_t (**)(), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10004F2F0(0, (unint64_t *)&unk_1006442E0, DOCConcreteLocation_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100089154(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100062698((unint64_t *)&unk_100644340, (uint64_t *)&unk_100644330, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10006922C((uint64_t *)&unk_100644330);
          v13 = sub_1000E0F80(v18, i, a3);
          v15 = *v14;
          ((void (*)(uint64_t (**)(), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10004F2F0(0, (unint64_t *)&unk_100642440, NSLayoutConstraint_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100089370(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100062698(&qword_1006443E8, &qword_1006443E0, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10006922C(&qword_1006443E0);
          v13 = sub_1000E0F80(v18, i, a3);
          v15 = *v14;
          ((void (*)(uint64_t (**)(), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10004F2F0(0, &qword_100643AC0, DOCDocumentSource_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10008958C(unint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD);
  id *v24;
  id v25;
  uint64_t v26;
  uint64_t result;
  _BYTE v28[32];

  v14 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v26 = a3;
    else
      v26 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v15 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(a3);
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    if (a3 < 0)
      v18 = a3;
    else
      v18 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a3);
    if (v19 <= a2)
    {
      if (v15 >= 1)
      {
        v20 = sub_100062698(a5, a6, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v15; ++i)
        {
          v22 = sub_10006922C(a6);
          v23 = (void (*)(_BYTE *, _QWORD))a7(v28, i, a3, v22, v20);
          v25 = *v24;
          v23(v28, 0);
          *(_QWORD *)(a1 + 8 * i) = v25;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10008979C(uint64_t a1, uint64_t a2)
{
  return sub_1000DFC48(a1, a2, (uint64_t)&unk_1006442E0, DOCConcreteLocation_ptr);
}

uint64_t sub_1000897B0(uint64_t a1, uint64_t a2)
{
  return sub_1000DFC48(a1, a2, (uint64_t)&qword_1006434D0, UIViewController_ptr);
}

uint64_t sub_1000897C4(uint64_t a1, uint64_t a2)
{
  return sub_1000897D0(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for DOCBrowserContainedViewController);
}

uint64_t sub_1000897D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  id v18;
  char v19;
  uint64_t v20;

  if ((unint64_t)a2 >> 62)
    goto LABEL_20;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v20))
  {
    v7 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v8 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_5:
      v9 = v8;
      a3 = (uint64_t (*)(_QWORD))a3(0);
      v10 = static NSObject.== infix(_:_:)(v9, a1);

      if ((v10 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (v6 == 1)
        goto LABEL_18;
      if (v7)
        break;
      v7 = 5;
      while (1)
      {
        v17 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
          break;
        v18 = *(id *)(a2 + 8 * v7);
        v19 = static NSObject.== infix(_:_:)(v18, a1);

        if ((v19 & 1) != 0)
          goto LABEL_6;
        ++v7;
        if (v17 == v6)
          goto LABEL_18;
      }
      __break(1u);
    }
    v12 = 1;
    while (1)
    {
      v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, a2);
      v14 = v12 + 1;
      if (__OFADD__(v12, 1))
        break;
      v15 = v13;
      v16 = static NSObject.== infix(_:_:)(v13, a1);
      swift_unknownObjectRelease(v15);
      if ((v16 & 1) != 0)
        goto LABEL_6;
      ++v12;
      if (v14 == v6)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    if (a2 < 0)
      v20 = a2;
    else
      v20 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
LABEL_18:
  swift_bridgeObjectRelease(a2);
  return 0;
}

uint64_t sub_100089948(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  _QWORD v14[9];
  id v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v5 = a1 + 1;
  v6 = a2 + 32;
  swift_bridgeObjectRetain(a2);
  while (1)
  {
    sub_1000A0110(v6, (uint64_t)&v15);
    Hasher.init(_seed:)(v14, 0);
    v7 = v17;
    v8 = v18;
    sub_10007E7A0(v16, v17);
    dispatch thunk of Hashable.hash(into:)(v14, v7, v8);
    v9 = Hasher._finalize()();
    Hasher.init(_seed:)(v14, 0);
    v10 = a1[4];
    v11 = a1[6];
    sub_10007E7A0(v5, v10);
    dispatch thunk of Hashable.hash(into:)(v14, v10, v11);
    v12 = Hasher._finalize()();
    sub_1000A00DC(&v15);
    if (v9 == v12)
      break;
    v6 += 56;
    if (!--v2)
    {
      swift_bridgeObjectRelease(a2);
      return 0;
    }
  }
  swift_bridgeObjectRelease(a2);
  return 1;
}

uint64_t sub_100089A74(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    __asm { BR              X9 }
  }
  return 0;
}

uint64_t sub_100089CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      while ((a1 & 0xC000000000000001) == 0)
      {
        if (__OFADD__(v5, 1))
          goto LABEL_13;
        v9 = *(_QWORD *)(a1 + 32 + 8 * v5++);
        if (v9 == a2)
        {
LABEL_11:
          swift_bridgeObjectRelease(a1);
          return 1;
        }
LABEL_4:
        if (v5 == v4)
          goto LABEL_18;
      }
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
      if (!__OFADD__(v5++, 1))
        break;
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      if (a1 < 0)
        v11 = a1;
      else
        v11 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v4 = _CocoaArrayWrapper.endIndex.getter(v11);
      if (!v4)
        goto LABEL_18;
    }
    v8 = v6;
    swift_unknownObjectRelease(v6);
    if (v8 == a2)
      goto LABEL_11;
    goto LABEL_4;
  }
LABEL_18:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_100089DB8(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  uint64_t v15;
  uint64_t v17;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  while (v6)
  {
    v7 = 4;
    while (1)
    {
      v8 = v7 - 4;
      if ((a3 & 0xC000000000000001) == 0)
        break;
      v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a3);
      v10 = v7 - 3;
      if (__OFADD__(v8, 1))
        goto LABEL_16;
LABEL_9:
      v17 = v9;
      v11 = a1(&v17);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);
        swift_release(v9);
        return v13 & 1;
      }
      v12 = v11;
      swift_release(v9);
      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        v13 = 1;
        return v13 & 1;
      }
      ++v7;
      if (v10 == v6)
        goto LABEL_12;
    }
    v9 = *(_QWORD *)(a3 + 8 * v7);
    swift_retain(v9);
    v10 = v7 - 3;
    if (!__OFADD__(v8, 1))
      goto LABEL_9;
LABEL_16:
    __break(1u);
LABEL_17:
    if (a3 < 0)
      v15 = a3;
    else
      v15 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v6 = _CocoaArrayWrapper.endIndex.getter(v15);
  }
LABEL_12:
  swift_bridgeObjectRelease(a3);
  v13 = 0;
  return v13 & 1;
}

void *sub_100089EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  char v22;
  uint64_t v23;

  if ((unint64_t)a1 >> 62)
    goto LABEL_22;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    v4 = 4;
    while (1)
    {
      v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1)
         : *(id *)(a1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = objc_msgSend(v5, "identifier");
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
      v11 = v10;
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      if (v9 == v12 && v11 == v13)
      {
        swift_bridgeObjectRelease(a1);

        swift_bridgeObjectRelease(v11);
        goto LABEL_19;
      }
      v15 = v13;
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v12, v13, 0);

      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v15);
      if ((v16 & 1) != 0)
        goto LABEL_17;
      v17 = type metadata accessor for DOCFileProviderSource();
      v18 = swift_dynamicCastClass(v6, v17);
      if (v18)
      {
        v19 = *(void **)(v18 + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain);
        if (v19)
        {
          v20 = v6;
          v21 = v19;
          v22 = sub_10003C0D0(a2);

          if ((v22 & 1) != 0)
          {
LABEL_17:
            v11 = a1;
LABEL_19:
            swift_bridgeObjectRelease(v11);
            return v6;
          }
        }
      }

      ++v4;
      if (v7 == v3)
        goto LABEL_26;
    }
    __break(1u);
LABEL_22:
    if (a1 < 0)
      v23 = a1;
    else
      v23 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_26:
  swift_bridgeObjectRelease(a1);
  return 0;
}

void *sub_10008A0F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v17;

  if ((unint64_t)a1 >> 62)
    goto LABEL_19;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    v4 = 4;
    while (1)
    {
      v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1)
         : *(id *)(a1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = objc_msgSend(v5, "identifier");
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v11 = v10;
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
      if (v9 == v12 && v11 == v13)
      {
        swift_bridgeObjectRelease(a1);

        swift_bridgeObjectRelease(v11);
LABEL_17:
        swift_bridgeObjectRelease(v11);
        return v6;
      }
      v15 = v13;
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v12, v13, 0);

      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v15);
      if ((v16 & 1) != 0)
      {
        v11 = a1;
        goto LABEL_17;
      }

      ++v4;
      if (v7 == v3)
        goto LABEL_23;
    }
    __break(1u);
LABEL_19:
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_23:
  swift_bridgeObjectRelease(a1);
  return 0;
}

_QWORD *sub_10008A298(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  _QWORD *result;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!((unint64_t)a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v5)
      goto LABEL_3;
LABEL_12:
    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }
LABEL_14:
  if (a1 < 0)
    v16 = a1;
  else
    v16 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v16);
  if (!v5)
    goto LABEL_12;
LABEL_3:
  v6 = 4;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1);
    else
      v7 = *(id *)(a1 + 8 * v6);
    v8 = v7;
    v9 = v6 - 3;
    if (__OFADD__(v6 - 4, 1))
    {
      __break(1u);
      goto LABEL_14;
    }
    result = sub_10000DE10(v7, a2, a3);
    if (!result)
      break;
    v11 = result;

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
    v14 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v14 >= v13 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v11);
    specialized Array._endMutation()(v15);
    ++v6;
    if (v9 == v5)
      goto LABEL_12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10008A414(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v23[2];
  unint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD);
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v6 = sub_10006922C(&qword_10064A600);
  __chkstk_darwin(v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for DOCBrowserHistoryItem(0);
  v9 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v27 = (uint64_t)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)v23 - v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    return _swiftEmptyArrayStorage;
  v15 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v23[1] = v3;
  v24 = v15;
  v16 = a1 + v15;
  v17 = *(_QWORD *)(v9 + 72);
  v23[0] = a1;
  swift_bridgeObjectRetain(a1);
  v18 = _swiftEmptyArrayStorage;
  v25 = v9;
  v26 = a2;
  v19 = v9;
  do
  {
    a2(v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v8, 1, v28) == 1)
    {
      sub_10000CB4C((uint64_t)v8, &qword_10064A600);
    }
    else
    {
      sub_1001D0788((uint64_t)v8, (uint64_t)v13, type metadata accessor for DOCBrowserHistoryItem);
      sub_1001D0788((uint64_t)v13, v27, type metadata accessor for DOCBrowserHistoryItem);
      if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
        v18 = (_QWORD *)sub_100081B5C(0, v18[2] + 1, 1, (unint64_t)v18);
      v21 = v18[2];
      v20 = v18[3];
      if (v21 >= v20 >> 1)
        v18 = (_QWORD *)sub_100081B5C(v20 > 1, v21 + 1, 1, (unint64_t)v18);
      v18[2] = v21 + 1;
      sub_1001D0788(v27, (uint64_t)v18 + v24 + v21 * v17, type metadata accessor for DOCBrowserHistoryItem);
      v19 = v25;
      a2 = v26;
    }
    v16 += v17;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease(v23[0]);
  return v18;
}

uint64_t sub_10008A644(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

void sub_10008A658(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v3)
  {
    v5 = 0;
    v6 = 0;
    while (v2[v5 + 4] != a2)
    {
      ++v6;
      v5 += 3;
      if (v3 == v6)
        return;
    }
    v7 = v6 + 1;
    if (!__OFADD__(v6, 1))
    {
      if (v7 == v3)
        return;
      while (v7 < v3)
      {
        v9 = v2[v5 + 7];
        if (v9 != a2)
        {
          if (v7 != v6)
          {
            if (v6 >= v3)
              goto LABEL_24;
            v10 = &v2[3 * v6 + 4];
            v11 = v10[2];
            v12 = v2[v5 + 9];
            v21 = v2[v5 + 8];
            v20 = *(_OWORD *)v10;
            swift_unknownObjectRetain(*v10);
            swift_retain();
            swift_unknownObjectRetain(v9);
            swift_retain();
            if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
              v2 = sub_100452E58(v2);
            v13 = &v2[3 * v6];
            v14 = v13[4];
            v15 = v13[6];
            v13[4] = v9;
            v13[5] = v21;
            v13[6] = v12;
            swift_release(v15);
            swift_unknownObjectRelease(v14);
            if (v7 >= v2[2])
              goto LABEL_25;
            v16 = &v2[v5];
            v17 = v2[v5 + 7];
            v18 = v2[v5 + 9];
            *(_OWORD *)(v16 + 7) = v20;
            v16[9] = v11;
            swift_release(v18);
            swift_unknownObjectRelease(v17);
            *(_QWORD *)a1 = v2;
          }
          if (__OFADD__(v6++, 1))
            goto LABEL_23;
          v3 = v2[2];
        }
        ++v7;
        v5 += 3;
        if (v7 == v3)
          return;
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
    }
    __break(1u);
  }
}

id *sub_10008A81C(uint64_t a1, id *a2)
{
  _QWORD *v2;
  __int128 v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;

  if (*(_QWORD *)a1)
  {
    v4 = *(_OWORD *)(a1 + 16);
    v9[0] = *(_OWORD *)a1;
    v9[1] = v4;
    v9[2] = *(_OWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 48);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v8 = *v2;
    *v2 = 0x8000000000000000;
    sub_10007F9E4((uint64_t)v9, a2, isUniquelyReferenced_nonNull_native);
    v6 = *v2;
    *v2 = v8;
    swift_bridgeObjectRelease(v6);
    return sub_1000A00DC(a2);
  }
  else
  {
    sub_10000CB4C(a1, &qword_100655B80);
    sub_1004442B0(a2, (uint64_t)v9);
    sub_1000A00DC(a2);
    return (id *)sub_10000CB4C((uint64_t)v9, &qword_100655B80);
  }
}

uint64_t sub_10008A8E8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t updated;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = sub_10006922C(&qword_100650348);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for DOCSharedTestableProgressOperationProvider.UpdateHandlerInfo(0);
  __chkstk_darwin(updated);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_10000CB4C(a1, &qword_100650348);
    sub_100443C7C(a2, (uint64_t)v8);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_10000CB4C((uint64_t)v8, &qword_100650348);
  }
  else
  {
    sub_1001D0788(a1, (uint64_t)v11, type metadata accessor for DOCSharedTestableProgressOperationProvider.UpdateHandlerInfo);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v19 = *v3;
    *v3 = 0x8000000000000000;
    sub_10007FBA0((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    v16 = *v3;
    *v3 = v19;
    swift_bridgeObjectRelease(v16);
    v17 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a2, v17);
  }
}

void sub_10008AA68(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    v16 = sub_10001CCD0(*(_BYTE *)(*(_QWORD *)(a1 + 48) + v11));
    if ((v17 & 1) != 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v16);
      swift_bridgeObjectRetain(v15);
      v19 = swift_bridgeObjectRetain(v18);
      v20 = sub_1000882B0(v19, v15);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v18);
      if ((v20 & 1) != 0)
        continue;
    }
    return;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
}

unint64_t sub_10008AC14(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006922C(&qword_10064DB70);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  v5 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000271D4(v5, (uint64_t)v14, (uint64_t *)&unk_100653388);
    result = sub_100067654((uint64_t)v14);
    if ((v7 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v8 = v3[6] + 40 * result;
    v9 = v14[0];
    v10 = v14[1];
    *(_QWORD *)(v8 + 32) = v15;
    *(_OWORD *)v8 = v9;
    *(_OWORD *)(v8 + 16) = v10;
    *(_QWORD *)(v3[7] + 8 * result) = v16;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v3[2] = v13;
    v5 += 48;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008AD3C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006922C(&qword_10064DAE0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  v5 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000271D4(v5, (uint64_t)v16, &qword_100653398);
    result = sub_100067654((uint64_t)v16);
    if ((v7 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v8 = v3[6] + 40 * result;
    v9 = v16[0];
    v10 = v16[1];
    *(_QWORD *)(v8 + 32) = v17;
    *(_OWORD *)v8 = v9;
    *(_OWORD *)(v8 + 16) = v10;
    v11 = v3[7] + 24 * result;
    v12 = v19;
    *(_OWORD *)v11 = v18;
    *(_QWORD *)(v11 + 16) = v12;
    v13 = v3[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v3[2] = v15;
    v5 += 64;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008AE7C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006922C(a2);
  v6 = static _DictionaryStorage.allocate(capacity:)(v4);
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v7;
  }
  v9 = a1 + 32;
  swift_retain(v6);
  while (1)
  {
    sub_1000271D4(v9, (uint64_t)v18, a3);
    result = sub_100067654((uint64_t)v18);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = v7[6] + 40 * result;
    v13 = v18[0];
    v14 = v18[1];
    *(_QWORD *)(v12 + 32) = v19;
    *(_OWORD *)v12 = v13;
    *(_OWORD *)(v12 + 16) = v14;
    *(_QWORD *)(v7[7] + 8 * result) = v20;
    v15 = v7[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v7[2] = v17;
    v9 += 48;
    if (!--v8)
    {
      swift_release(v7);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008AF9C(uint64_t a1)
{
  return sub_10008AE7C(a1, &qword_10064D9D0, (uint64_t *)&unk_1006532F0);
}

unint64_t sub_10008AFB0(uint64_t a1)
{
  return sub_10008AE7C(a1, &qword_10064DAC0, (uint64_t *)&unk_100653338);
}

unint64_t sub_10008AFC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006922C((uint64_t *)&unk_100655350);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = (id)*(v6 - 1);
    swift_unknownObjectRetain(v7);
    result = sub_100140C4C((uint64_t)v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v4[6] + v11) = v8;
    *(_QWORD *)(v4[7] + v11) = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008B0CC(uint64_t a1)
{
  return sub_100079A00(a1, &qword_100653198, &qword_1006531A0, sub_100079D38);
}

unint64_t sub_10008B0E8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006922C(&qword_1006531A8);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v6 = *v5;
    v7 = (id)*(v5 - 1);
    result = sub_100079D38(v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v3[6] + v10) = v7;
    *(_QWORD *)(v3[7] + v10) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008B1F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006922C((uint64_t *)&unk_1006533B0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000271D4(v7, (uint64_t)&v16, &qword_10064FFC8);
    v8 = v16;
    v9 = v17;
    result = sub_10007EF08(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100079B28(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008B324(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006922C(&qword_10064DB60);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain(v7);
    result = sub_10007EF08(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008B434(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_10006922C((uint64_t *)&unk_100653268);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_10006922C(&qword_10064DAB0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (uint64_t)&v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000271D4(v13, (uint64_t)v5, (uint64_t *)&unk_100653268);
    v15 = *(void **)v5;
    v16 = v5[8];
    result = sub_1001406BC(*(void **)v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = v8[6] + 16 * result;
    *(_QWORD *)v20 = v15;
    *(_BYTE *)(v20 + 8) = v16;
    v21 = v8[7];
    v22 = type metadata accessor for RestorableSettings(0);
    result = sub_1001D0788(v10, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, type metadata accessor for RestorableSettings);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10008B5DC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  id *v5;
  char v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006922C(&qword_10064DB78);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (id *)(a1 + 40);
  while (1)
  {
    v6 = *(_BYTE *)v5;
    v7 = *(v5 - 1);
    result = sub_100140C08((uint64_t)v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    *(_BYTE *)(v3[7] + result) = v6;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v5 += 2;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008B6D8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _OWORD v19[3];
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006922C((uint64_t *)&unk_10064D960);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  v5 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000271D4(v5, (uint64_t)v19, &qword_100653138);
    result = sub_10007EF1C(v19);
    if ((v7 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v8 = v3[6] + 56 * result;
    v9 = v19[0];
    v10 = v19[1];
    v11 = v19[2];
    *(_QWORD *)(v8 + 48) = v20;
    *(_OWORD *)(v8 + 16) = v10;
    *(_OWORD *)(v8 + 32) = v11;
    *(_OWORD *)v8 = v9;
    v12 = v3[7] + 56 * result;
    v13 = v21;
    v14 = v22;
    v15 = v23;
    *(_QWORD *)(v12 + 48) = v24;
    *(_OWORD *)(v12 + 16) = v14;
    *(_OWORD *)(v12 + 32) = v15;
    *(_OWORD *)v12 = v13;
    v16 = v3[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v3[2] = v18;
    v5 += 112;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008B828(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_10006922C(&qword_100653380);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_10006922C(&qword_10064DAB8);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000271D4(v13, (uint64_t)v5, &qword_100653380);
    result = sub_100140624((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for URL(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10008B9BC()
{
  unint64_t result;

  result = qword_100652BE0;
  if (!qword_100652BE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100652BE0);
  }
  return result;
}

uint64_t sub_10008BA00(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_10008BA10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C(&qword_10064F398);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10008BA58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10064F370)
  {
    v2 = type metadata accessor for DispatchTime(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10064F370);
  }
}

unint64_t sub_10008BAAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100641260;
  if (!qword_100641260)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100641260);
  }
  return result;
}

void sub_10008BAF4(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_10007E830(a3);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10008BB40(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10006922C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

void sub_10008BB84(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100649F70)
  {
    v2 = type metadata accessor for UICellAccessory(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100649F70);
  }
}

void sub_10008BBD8()
{
  void *v0;
  id v1;
  NSString v2;
  id v3;
  id v4;
  NSString v5;
  unsigned __int8 v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t inited;
  unint64_t v12;
  Class isa;
  uint64_t v14;
  _OWORD v15[2];

  v0 = (void *)objc_opt_self(NSUserDefaults);
  v1 = objc_msgSend(v0, "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "valueForKey:", v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v15, v3);
    swift_unknownObjectRelease(v3);
    sub_10007EB54((uint64_t)v15);
    v4 = objc_msgSend(v0, "standardUserDefaults");
    v5 = String._bridgeToObjectiveC()();
    v6 = objc_msgSend(v4, "BOOLForKey:", v5);

    if ((v6 & 1) == 0)
      return;
  }
  else
  {
    memset(v15, 0, sizeof(v15));
    sub_10007EB54((uint64_t)v15);
  }
  v7 = objc_allocWithZone((Class)NSUserDefaults);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "initWithSuiteName:", v8);

  if (v9)
  {
    v10 = sub_10006922C(&qword_100641A70);
    inited = swift_initStackObject(v10, &v14);
    *(_OWORD *)(inited + 16) = xmmword_1004D4CE0;
    *(_QWORD *)(inited + 32) = 0xD000000000000013;
    *(_QWORD *)(inited + 40) = 0x800000010050C0C0;
    *(_QWORD *)(inited + 72) = &type metadata for Bool;
    *(_QWORD *)(inited + 80) = 0xD000000000000015;
    *(_BYTE *)(inited + 48) = 1;
    *(_QWORD *)(inited + 88) = 0x800000010050C0E0;
    *(_QWORD *)(inited + 120) = &type metadata for Bool;
    *(_BYTE *)(inited + 96) = 1;
    v12 = sub_10008B1F0(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v9, "registerDefaults:", isa, swift_bridgeObjectRelease(v12).n128_f64[0]);

  }
}

uint64_t type metadata accessor for DOCItemCollectionListCellSpringLoadedInteractionEffect()
{
  return objc_opt_self(_TtC5Files54DOCItemCollectionListCellSpringLoadedInteractionEffect);
}

uint64_t type metadata accessor for DOCItemCollectionGridCellSpringLoadedInteractionEffect()
{
  return objc_opt_self(_TtC5Files54DOCItemCollectionGridCellSpringLoadedInteractionEffect);
}

uint64_t type metadata accessor for DOCItemCollectionCellSpringLoadedInteractionBehavior()
{
  return objc_opt_self(_TtC5Files52DOCItemCollectionCellSpringLoadedInteractionBehavior);
}

uint64_t DOCFilterableOperationProgressCollectionSource.unorderedItems.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10008BF3C(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[1] = &unk_1004DFDB0;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 3, v2, a1 + 96);
}

uint64_t type metadata accessor for DOCFilterableOperationProgressCollectionSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007E804(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DOCFilterableOperationProgressCollectionSource);
}

void DOCFilterableOperationProgressCollectionSource.setItemDidUpdateHandler(forClient:handler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    swift_retain();
    sub_10008C2C4(a1, a2, a3);
    sub_100087534(a2, a3);
  }
  else
  {
    sub_10008C3D8(a1);
  }
}

_QWORD *sub_10008C000(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t (**v11)(_QWORD *, __n128);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t (*v23)(_QWORD *, __n128);
  uint64_t v24;
  __n128 v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD v39[5];
  _QWORD *v40;
  char v41[24];
  char v42[24];

  v38 = type metadata accessor for DOCFileOperation(0);
  v36 = *(_QWORD *)(v38 - 8);
  v5 = __chkstk_darwin(v38);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v33 - v8;
  v10 = _swiftEmptyArrayStorage;
  v2[2] = _swiftEmptyArrayStorage;
  v2[3] = 0;
  v11 = (uint64_t (**)(_QWORD *, __n128))(v2 + 3);
  v2[4] = 0;
  v2[5] = _swiftEmptyArrayStorage;
  swift_beginAccess(v2 + 3, v42, 1, 0);
  v12 = v2[3];
  v13 = v2[4];
  v2[3] = a1;
  v2[4] = a2;
  sub_10008BA00(a1, a2);
  sub_100087534(v12, v13);
  swift_beginAccess(v2 + 2, v41, 1, 0);
  v14 = v2[2];
  v15 = *(uint64_t (**)(uint64_t))(*v2 + 176);
  v16 = swift_bridgeObjectRetain(v14);
  v17 = v15(v16);
  v40 = _swiftEmptyArrayStorage;
  v18 = *(_QWORD *)(v17 + 16);
  v37 = v2;
  swift_retain(v2);
  if (v18)
  {
    v34 = v17;
    v35 = v14;
    v19 = *(_QWORD *)(v36 + 72);
    v36 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
    v20 = v17 + v36;
    v21 = _swiftEmptyArrayStorage;
    while (1)
    {
      sub_100294F04(v20, (uint64_t)v9);
      v39[3] = v38;
      v39[4] = &protocol witness table for DOCFileOperation;
      v22 = sub_10006CBAC(v39);
      sub_100294F04((uint64_t)v9, (uint64_t)v22);
      v23 = *v11;
      if (!*v11)
        break;
      v24 = v37[4];
      v25 = swift_retain(v24);
      v26 = v23(v39, v25);
      sub_100087534((uint64_t)v23, v24);
      sub_100068588(v39);
      if ((v26 & 1) != 0)
        goto LABEL_9;
      sub_100172A28((uint64_t)v9);
LABEL_4:
      v20 += v19;
      if (!--v18)
      {
        v10 = v40;
        v17 = v34;
        v14 = v35;
        goto LABEL_15;
      }
    }
    sub_100068588(v39);
LABEL_9:
    sub_1000E828C((uint64_t)v9, (uint64_t)v7);
    if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
      sub_100154E30(0, v21[2] + 1, 1);
    v21 = v40;
    v28 = v40[2];
    v27 = v40[3];
    if (v28 >= v27 >> 1)
    {
      sub_100154E30(v27 > 1, v28 + 1, 1);
      v21 = v40;
    }
    v21[2] = v28 + 1;
    sub_1000E828C((uint64_t)v7, (uint64_t)v21 + v36 + v28 * v19);
    goto LABEL_4;
  }
LABEL_15:
  swift_bridgeObjectRelease(v17);
  v29 = v37;
  swift_release(v37);
  v30 = sub_1000815E0((uint64_t)v10);
  v31 = v29[2];
  v29[2] = v30;
  swift_release(v10);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v31);
  return v29;
}

uint64_t sub_10008C2C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _BYTE v15[24];

  sub_10008C3D8(a1);
  v7 = swift_allocObject(&unk_1005D8078, 32, 7);
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v8 = (_QWORD *)(v3 + 40);
  swift_beginAccess(v3 + 40, v15, 33, 0);
  v9 = *(_QWORD **)(v3 + 40);
  swift_unknownObjectRetain(a1);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
  *(_QWORD *)(v3 + 40) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = sub_100081920(0, v9[2] + 1, 1, v9);
    *v8 = v9;
  }
  v12 = v9[2];
  v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    v9 = sub_100081920((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
    *v8 = v9;
  }
  v9[2] = v12 + 1;
  v13 = &v9[3 * v12];
  v13[4] = a1;
  v13[5] = sub_100298DDC;
  v13[6] = v7;
  return swift_endAccess(v15);
}

void sub_10008C3D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _BYTE v6[24];

  swift_beginAccess(v1 + 40, v6, 33, 0);
  swift_unknownObjectRetain(a1);
  sub_10008A658(v1 + 40, a1);
  v4 = v3;
  swift_unknownObjectRelease(a1);
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 16);
  if (v5 < v4)
  {
    __break(1u);
  }
  else
  {
    sub_100088ACC(v4, v5);
    swift_endAccess(v6);
  }
}

uint64_t type metadata accessor for DOCSharedTestableProgressOperationProvider()
{
  return objc_opt_self(_TtC5Files42DOCSharedTestableProgressOperationProvider);
}

id sub_10008C490()
{
  uint64_t v0;
  _QWORD *v1;
  id result;

  v0 = type metadata accessor for DOCSharedTestableProgressOperationProvider();
  v1 = (_QWORD *)swift_allocObject(v0, 40, 7);
  v1[2] = _swiftEmptyArrayStorage;
  v1[3] = &_swiftEmptyDictionarySingleton;
  v1[4] = _swiftEmptyArrayStorage;
  if (qword_100640DE8 != -1)
    swift_once(&qword_100640DE8, sub_1000AB46C);
  result = objc_msgSend((id)qword_100645BA8, "enabled");
  if ((_DWORD)result)
    result = (id)sub_1001712C0();
  qword_1006726D8 = (uint64_t)v1;
  return result;
}

uint64_t sub_10008C520(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_10008C568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10017240C);
}

uint64_t sub_10008C574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100172390);
}

uint64_t sub_10008C580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain(v10);
  return a1;
}

uint64_t sub_10008C5E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for DOCSharedTestableProgressOperationProvider.UpdateHandlerInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_100645DD0;
  if (!qword_100645DD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DOCSharedTestableProgressOperationProvider.UpdateHandlerInfo);
  return result;
}

void sub_10008C720(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = &unk_1004E75C0;
  v4[1] = &unk_1004E75D8;
  v4[2] = &unk_1004E75F0;
  v4[3] = &unk_1004E7608;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[6] = &unk_1004E7620;
  v4[7] = &unk_1004E7638;
  sub_10008C97C(319);
  if (v3 <= 0x3F)
  {
    v4[8] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for DOCProgressCollectionIndicatorButtonItem(uint64_t a1)
{
  return sub_10006BDA4(a1, (uint64_t *)&unk_1006540C8, (uint64_t)&nominal type descriptor for DOCProgressCollectionIndicatorButtonItem);
}

uint64_t sub_10008C7EC()
{
  return sub_10008D38C(1);
}

uint64_t sub_10008C810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100406D20);
}

uint64_t sub_10008C81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100406C94);
}

uint64_t sub_10008C828(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DOCProgressCollectionIndicatorButtonItem.VisibilityChangeTransaction(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10008C864(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DOCProgressCollectionIndicatorButtonItem.VisibilityChangeTransaction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008C8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DOCProgressCollectionIndicatorButtonItem.VisibilityChangeTransaction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008C8EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C(&qword_1006541A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008C934(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C(&qword_1006541A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10008C97C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1006540D8)
  {
    v2 = type metadata accessor for DOCProgressCollectionIndicatorButtonItem.VisibilityChangeTransaction(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1006540D8);
  }
}

uint64_t sub_10008C9D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1004E7608;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for DOCProgressCollectionIndicatorButtonItem.VisibilityChangeTransaction(uint64_t a1)
{
  return sub_10006BDA4(a1, qword_100654168, (uint64_t)&nominal type descriptor for DOCProgressCollectionIndicatorButtonItem.VisibilityChangeTransaction);
}

uint64_t type metadata accessor for DOCProgressCollectionIndicatorButtonItem.ProgressItemContainerView()
{
  return objc_opt_self(_TtCC5Files40DOCProgressCollectionIndicatorButtonItemP33_5AA9AA04A7C2840F7F12009703A5ACCD25ProgressItemContainerView);
}

void sub_10008CB00()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for DOCProgressCollectionIndicatorButtonItem.VisibilityChangeTransaction(0)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10008CB40(v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

void sub_10008CB40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v4 = type metadata accessor for DOCProgressCollectionIndicatorButtonItem.VisibilityChangeTransaction(0);
  v5 = *(void **)(a2 + OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_widthConstraint);
  if (v5)
  {
    objc_msgSend(v5, "setConstant:", *(double *)(a1 + *(int *)(v4 + 24)));
    v6 = sub_10004F2F0(0, &qword_1006541B8, UINavigationBar_ptr);
    v7 = (void *)UIView.doc_nearestAncestor<A>(ofType:)(v6, v6);
    if (v7)
    {
      v8 = v7;
      objc_msgSend(v7, "layoutIfNeeded");

    }
  }
  else
  {
    __break(1u);
  }
}

id sub_10008CBF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DOCProgressCollectionIndicatorButtonItem.VisibilityChangeTransaction(0)
                                      - 8)
                          + 80);
  return sub_10008CC30(a1, *(char **)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

id sub_10008CC30(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  id result;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  id v34;
  _BYTE v35[24];
  _BYTE v36[24];

  v5 = type metadata accessor for DOCProgressCollectionIndicatorButtonItem.VisibilityChangeTransaction(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10006922C(&qword_1006541B0);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10006922C(&qword_1006541A8);
  v13 = __chkstk_darwin(v12);
  v32 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v31 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v31 - v18;
  v34 = a2;
  v20 = (uint64_t)&a2[OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_inFlightVisibilityChange];
  swift_beginAccess(&a2[OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_inFlightVisibilityChange], v36, 0, 0);
  v33 = a3;
  sub_10008C864(a3, (uint64_t)v19);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v21(v19, 0, 1, v5);
  v22 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_10008C934(v20, (uint64_t)v11);
  sub_10008C934((uint64_t)v19, v22);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v23((uint64_t)v11, 1, v5) == 1)
  {
    sub_10000CB4C((uint64_t)v19, &qword_1006541A8);
    if (v23(v22, 1, v5) == 1)
    {
      sub_10000CB4C((uint64_t)v11, &qword_1006541A8);
LABEL_4:
      v24 = (uint64_t)v32;
      v21(v32, 1, 1, v5);
      swift_beginAccess(v20, v35, 33, 0);
      sub_10008C8EC(v24, v20);
      swift_endAccess(v35);
      return objc_msgSend(v34, "setHidden:", (*(_BYTE *)(v33 + *(int *)(v5 + 20)) & 1) == 0);
    }
    goto LABEL_7;
  }
  sub_10008C934((uint64_t)v11, (uint64_t)v17);
  if (v23(v22, 1, v5) == 1)
  {
    sub_10000CB4C((uint64_t)v19, &qword_1006541A8);
    sub_10008C828((uint64_t)v17);
LABEL_7:
    v26 = &qword_1006541B0;
    v27 = (uint64_t)v11;
    return (id)sub_10000CB4C(v27, v26);
  }
  sub_10008C8A8(v22, (uint64_t)v8);
  if ((static UUID.== infix(_:_:)(v17, v8) & 1) == 0 || v17[*(int *)(v5 + 20)] != v8[*(int *)(v5 + 20)])
  {
    sub_10008C828((uint64_t)v8);
    sub_10000CB4C((uint64_t)v19, &qword_1006541A8);
    sub_10008C828((uint64_t)v17);
    v27 = (uint64_t)v11;
    v26 = &qword_1006541A8;
    return (id)sub_10000CB4C(v27, v26);
  }
  v28 = *(int *)(v5 + 24);
  v29 = *(double *)&v17[v28];
  v30 = *(double *)&v8[v28];
  sub_10008C828((uint64_t)v8);
  sub_10000CB4C((uint64_t)v19, &qword_1006541A8);
  sub_10008C828((uint64_t)v17);
  result = (id)sub_10000CB4C((uint64_t)v11, &qword_1006541A8);
  if (v29 == v30)
    goto LABEL_4;
  return result;
}

uint64_t sub_10008CF84(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t result;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char v47[24];

  v4 = type metadata accessor for DOCProgressCollectionIndicatorButtonItem.VisibilityChangeTransaction(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  v45 = (uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v7);
  v43 = (uint64_t)&v42 - v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v42 - v10;
  v12 = sub_10006922C(&qword_1006541B0);
  __chkstk_darwin(v12);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10006922C(&qword_1006541A8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v42 - v19;
  v46 = a1;
  v21 = (uint64_t)a1 + OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_inFlightVisibilityChange;
  swift_beginAccess(v21, v47, 0, 0);
  v44 = a2;
  sub_10008C864(a2, (uint64_t)v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v20, 0, 1, v4);
  v22 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_10008C934(v21, (uint64_t)v14);
  sub_10008C934((uint64_t)v20, v22);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v23((uint64_t)v14, 1, v4) == 1)
  {
    sub_10000CB4C((uint64_t)v20, &qword_1006541A8);
    if (v23(v22, 1, v4) == 1)
    {
      sub_10000CB4C((uint64_t)v14, &qword_1006541A8);
LABEL_4:
      sub_10004F2F0(0, (unint64_t *)&qword_100645B80, UIView_ptr);
      v24 = v43;
      v25 = v44;
      sub_10008C864(v44, v43);
      v26 = *(unsigned __int8 *)(v5 + 80);
      v27 = (v26 + 16) & ~v26;
      v28 = v26 | 7;
      v29 = (v6 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
      v30 = swift_allocObject(&unk_1005E9360, v29 + 8, v26 | 7);
      sub_10008C8A8(v24, v30 + v27);
      v31 = v46;
      *(_QWORD *)(v30 + v29) = v46;
      v32 = v45;
      sub_10008C864(v25, v45);
      v33 = (v26 + 24) & ~v26;
      v34 = swift_allocObject(&unk_1005E9388, v33 + v6, v28);
      *(_QWORD *)(v34 + 16) = v31;
      sub_10008C8A8(v32, v34 + v33);
      v35 = v31;
      static UIView.doc_performAnimatable(allowingAnimations:animationDuration:animations:completion:)(1, sub_10008CB00, v30, sub_10008CBF0, v34, 0.2);
      swift_release(v34);
      return swift_release(v30);
    }
    goto LABEL_7;
  }
  sub_10008C934((uint64_t)v14, (uint64_t)v18);
  if (v23(v22, 1, v4) == 1)
  {
    sub_10000CB4C((uint64_t)v20, &qword_1006541A8);
    sub_10008C828((uint64_t)v18);
LABEL_7:
    v37 = &qword_1006541B0;
    v38 = (uint64_t)v14;
    return sub_10000CB4C(v38, v37);
  }
  sub_10008C8A8(v22, (uint64_t)v11);
  if ((static UUID.== infix(_:_:)(v18, v11) & 1) == 0 || v18[*(int *)(v4 + 20)] != v11[*(int *)(v4 + 20)])
  {
    sub_10008C828((uint64_t)v11);
    sub_10000CB4C((uint64_t)v20, &qword_1006541A8);
    sub_10008C828((uint64_t)v18);
    v38 = (uint64_t)v14;
    v37 = &qword_1006541A8;
    return sub_10000CB4C(v38, v37);
  }
  v39 = *(int *)(v4 + 24);
  v40 = *(double *)&v18[v39];
  v41 = *(double *)&v11[v39];
  sub_10008C828((uint64_t)v11);
  sub_10000CB4C((uint64_t)v20, &qword_1006541A8);
  sub_10008C828((uint64_t)v18);
  result = sub_10000CB4C((uint64_t)v14, &qword_1006541A8);
  if (v40 == v41)
    goto LABEL_4;
  return result;
}

uint64_t sub_10008D38C(int a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t result;
  int v24;
  double v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  _BYTE v33[4];
  int v34;
  _QWORD aBlock[5];
  uint64_t v36;
  char v37[24];

  v2 = v1;
  v34 = a1;
  v3 = type metadata accessor for DOCProgressCollectionIndicatorButtonItem.VisibilityChangeTransaction(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = __chkstk_darwin(v3);
  v7 = &v33[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v9 = &v33[-v8];
  v10 = sub_10006922C(&qword_1006541A8);
  v11 = __chkstk_darwin(v10);
  v13 = &v33[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v15 = &v33[-v14];
  v16 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_progressSource + 8];
  ObjectType = swift_getObjectType(*(_QWORD *)&v1[OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_progressSource], v17);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(ObjectType, v16);
  v20 = *(_QWORD *)(v19 + 16);
  swift_bridgeObjectRelease(v19);
  if (v20)
    v21 = 1;
  else
    v21 = *(unsigned __int8 *)(*(_QWORD *)&v2[OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_indicatorView]
                             + OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_combinedProgress
                             + 8) ^ 1;
  v22 = (uint64_t)&v2[OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_inFlightVisibilityChange];
  swift_beginAccess(&v2[OBJC_IVAR____TtC5Files40DOCProgressCollectionIndicatorButtonItem_inFlightVisibilityChange], v37, 0, 0);
  sub_10008C934(v22, (uint64_t)v15);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v4 + 48))(v15, 1, v3))
  {
    sub_10000CB4C((uint64_t)v15, &qword_1006541A8);
    result = (uint64_t)objc_msgSend(v2, "isHidden");
    v24 = result ^ 1;
    if ((v34 & 1) != 0)
      goto LABEL_9;
LABEL_8:
    if (((v21 ^ v24) & 1) == 0)
      return result;
    goto LABEL_9;
  }
  sub_10008C864((uint64_t)v15, (uint64_t)v9);
  sub_10000CB4C((uint64_t)v15, &qword_1006541A8);
  v24 = v9[*(int *)(v3 + 20)];
  result = sub_10008C828((uint64_t)v9);
  if ((v34 & 1) == 0)
    goto LABEL_8;
LABEL_9:
  if ((v21 & 1) != 0)
    v25 = 48.0;
  else
    v25 = 0.0;
  UUID.init()(result);
  v7[*(int *)(v3 + 20)] = v21 & 1;
  *(double *)&v7[*(int *)(v3 + 24)] = v25;
  sub_10008C864((uint64_t)v7, (uint64_t)v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
  swift_beginAccess(v22, aBlock, 33, 0);
  sub_10008C8EC((uint64_t)v13, v22);
  swift_endAccess(aBlock);
  if ((v21 & 1) != 0 && objc_msgSend((id)objc_opt_self(UIView), "areAnimationsEnabled"))
  {
    objc_msgSend(v2, "setHidden:", 0);
    v26 = (void *)objc_opt_self(DOCUISession);
    sub_10008C864((uint64_t)v7, (uint64_t)v9);
    v27 = *(unsigned __int8 *)(v4 + 80);
    v28 = (v27 + 24) & ~v27;
    v29 = swift_allocObject(&unk_1005E9310, v28 + v5, v27 | 7);
    *(_QWORD *)(v29 + 16) = v2;
    sub_10008C8A8((uint64_t)v9, v29 + v28);
    aBlock[4] = sub_100406D9C;
    v36 = v29;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004A82C;
    aBlock[3] = &unk_1005E9328;
    v30 = _Block_copy(aBlock);
    v31 = v36;
    v32 = v2;
    swift_release(v31);
    objc_msgSend(v26, "performAfterCATransactionCommits:", v30);
    _Block_release(v30);
  }
  else
  {
    sub_10008CF84(v2, (uint64_t)v7);
  }
  return sub_10008C828((uint64_t)v7);
}

uint64_t type metadata accessor for DOCFileProviderSyncStateHeaderViewModel()
{
  return objc_opt_self(_TtC5Files39DOCFileProviderSyncStateHeaderViewModel);
}

void sub_10008D734(void *a1)
{
  uint64_t v1;

  sub_10008D73C(a1, v1);
}

void sub_10008D73C(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  void *v6;
  id v7;
  _BYTE v8[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(void **)(Strong + 80);
    *(_QWORD *)(Strong + 80) = a1;
    v7 = a1;

    sub_10008D9D4();
    swift_release(v5);

  }
}

uint64_t sub_10008D7B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double (*v17)(void (*)(void *), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v18;
  __n128 v19;
  _BYTE v21[24];
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  char v25[24];
  _QWORD v26[3];
  uint64_t v27;
  _UNKNOWN **v28;

  v1 = v0;
  v2 = v0 + 40;
  swift_beginAccess(v0 + 40, v25, 0, 0);
  sub_1000923F4(v0 + 40, (uint64_t)v26);
  v3 = v27;
  sub_10009236C((uint64_t)v26);
  if (!v3)
  {
    v4 = *(void **)(v1 + 32);
    v5 = type metadata accessor for DOCFileProviderSyncStateProvider();
    swift_allocObject(v5, 64, 7);
    v6 = v4;
    v7 = sub_100489428(v6, 1);

    v27 = v5;
    v28 = &off_1005EFDD8;
    v26[0] = v7;
    sub_10009243C((uint64_t)v26, (uint64_t)v22);
    swift_beginAccess(v2, v21, 33, 0);
    sub_1000923AC((uint64_t)v22, v2);
    swift_endAccess(v21);
  }
  v9 = sub_10008DC24((uint64_t)v26);
  if (*(_QWORD *)(v8 + 24))
  {
    v10 = v8;
    v11 = swift_allocObject(&unk_1005DDCA0, 24, 7);
    swift_weakInit(v11 + 16, v1);
    v12 = *(_QWORD *)(v10 + 24);
    v13 = *(_QWORD *)(v10 + 32);
    sub_10007E7C8(v10, v12);
    (*(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v13 + 32))(sub_1003243C4, v11, v12, v13);
  }
  ((void (*)(_QWORD *, _QWORD))v9)(v26, 0);
  sub_1000923F4(v2, (uint64_t)v26);
  if (!v27)
    return sub_10009236C((uint64_t)v26);
  sub_100092328((uint64_t)v26, (uint64_t)v22);
  sub_10009236C((uint64_t)v26);
  v14 = v23;
  v15 = v24;
  sub_10007E7A0(v22, v23);
  v16 = swift_allocObject(&unk_1005DDCA0, 24, 7);
  swift_weakInit(v16 + 16, v1);
  v17 = *(double (**)(void (*)(void *), uint64_t, uint64_t, uint64_t, __n128))(v15 + 16);
  v18 = swift_retain();
  v19.n128_f64[0] = v17(sub_10008D734, v16, v14, v15, v18);
  swift_release_n(v16, 2, v19);
  return sub_100068588(v22);
}

void sub_10008D9C4(id a1)
{
  if (a1 != (id)1)

}

void sub_10008D9D4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  char v14;
  id v15;
  _QWORD aBlock[5];
  uint64_t v17;

  v1 = v0;
  v2 = *(void **)(v0 + 80);
  if (v2
    && (!objc_msgSend(v2, "contentType") || (v3 = *(void **)(v0 + 80)) != 0
                                         && objc_msgSend(v3, "contentType") == (id)1))
  {
    v4 = *(void **)(v0 + 80);
    if (v4)
      v5 = v4;
  }
  else
  {
    v4 = 0;
  }
  v6 = *(void **)(v0 + 88);
  if (v6 == (void *)1)
    goto LABEL_9;
  if (v4)
  {
    if (v6)
    {
      sub_10007C3E0();
      sub_1000B0268(v6);
      v15 = v4;
      v14 = static NSObject.== infix(_:_:)(v15, v6);
      sub_10008D9C4(v6);

      if ((v14 & 1) != 0)
      {
LABEL_14:

        return;
      }
      v6 = *(void **)(v1 + 88);
    }
LABEL_9:
    *(_QWORD *)(v1 + 88) = v4;
    v15 = v4;
    sub_10008D9C4(v6);
    Strong = swift_unknownObjectWeakLoadStrong(v1 + 16, v7);
    if (Strong)
    {
      v9 = Strong;
      v10 = swift_allocObject(&unk_1005DDC50, 32, 7);
      *(_QWORD *)(v10 + 16) = v9;
      *(_QWORD *)(v10 + 24) = v4;
      aBlock[4] = sub_1000912CC;
      v17 = v10;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10004A82C;
      aBlock[3] = &unk_1005DDC68;
      v11 = _Block_copy(aBlock);
      v12 = v17;
      v13 = v15;
      swift_unknownObjectRetain(v9);
      swift_release(v12);
      DOCRunInMainThread(v11);
      _Block_release(v11);
      swift_unknownObjectRelease(v9);

      return;
    }
    goto LABEL_14;
  }
  if (v6)
    goto LABEL_9;
}

uint64_t sub_10008DB78()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 80);
  if (result)
  {
    if (!objc_msgSend((id)result, "contentType"))
      return 1;
    result = *(_QWORD *)(v0 + 80);
    if (result)
    {
      result = (uint64_t)objc_msgSend((id)result, "contentType");
      if (result != 1)
      {
        result = *(_QWORD *)(v0 + 80);
        if (result)
        {
          if (!objc_msgSend((id)result, "contentType"))
            return 1;
          result = *(_QWORD *)(v0 + 80);
          if (result)
          {
            result = (uint64_t)objc_msgSend((id)result, "contentType");
            if (result != 1)
            {
              result = *(_QWORD *)(v0 + 80);
              if (result)
              {
                if (objc_msgSend((id)result, "contentType"))
                {
                  result = *(_QWORD *)(v0 + 80);
                  if (result)
                    return objc_msgSend((id)result, "contentType") == (id)1;
                  return result;
                }
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t (*sub_10008DC24(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 40, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_10008DC60(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = &unk_1004DA218;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = &unk_1004DA230;
  v4[4] = &unk_1004DA248;
  v4[5] = &unk_1004DA248;
  v4[6] = &unk_1004DA260;
  v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[8] = &unk_1004DA260;
  v4[9] = &unk_1004DA260;
  v4[10] = &unk_1004DA278;
  result = type metadata accessor for DispatchTimeInterval(319);
  if (v3 <= 0x3F)
  {
    v4[11] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 12, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for DOCFileProviderSyncStateFooterViewModel(uint64_t a1)
{
  return sub_10006BDA4(a1, qword_100642E40, (uint64_t)&nominal type descriptor for DOCFileProviderSyncStateFooterViewModel);
}

uint64_t sub_10008DD44(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  *(_QWORD *)(v3 + 24) = 0;
  swift_unknownObjectWeakInit(v3 + 16, 0);
  swift_unknownObjectWeakInit(v3 + 48, 0);
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_BYTE *)(v3 + 176) = -1;
  v6 = v3 + OBJC_IVAR____TtC5Files39DOCFileProviderSyncStateFooterViewModel_configuration;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC5Files39DOCFileProviderSyncStateFooterViewModel_configuration) = 100;
  v7 = enum case for DispatchTimeInterval.milliseconds(_:);
  v8 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  *(_QWORD *)(v3 + 32) = a1;
  v9 = type metadata accessor for DOCProviderDomainStateManager(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  *(_QWORD *)(v3 + 40) = sub_10009DBA4((uint64_t)a1);
  swift_unknownObjectWeakAssign(v3 + 48, a2);
  return v3;
}

double sub_10008DE48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t KeyPath;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  id v33[3];

  v1 = v0;
  v2 = type metadata accessor for DOCFileOperation(0);
  __chkstk_darwin(v2);
  v6 = (id *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(v0 + 152);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      v9 = v7 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
      v32 = *(_QWORD *)(v3 + 72);
      v30 = v7;
      swift_bridgeObjectRetain(v7);
      v31 = xmmword_1004D4CE0;
      do
      {
        sub_10007C6DC(v9, (uint64_t)v6, type metadata accessor for DOCFileOperation);
        v33[0] = v6[5];
        v10 = v33[0];
        KeyPath = swift_getKeyPath(&unk_1004DA2E8);
        v12 = swift_allocObject(&unk_1005C30D0, 24, 7);
        swift_weakInit(v12 + 16, v1);
        v13 = v10;
        v14 = (void *)_KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 1, sub_1000E8304, v12, &protocol witness table for NSObject);
        swift_release(KeyPath);
        swift_release(v12);

        v16 = *(void **)DOCLog.UI.unsafeMutableAddressor(v15);
        v17 = sub_10006922C((uint64_t *)&unk_100644560);
        v18 = swift_allocObject(v17, 112, 7);
        *(_OWORD *)(v18 + 16) = v31;
        v19 = v6[5];
        *(_QWORD *)(v18 + 56) = sub_10004F2F0(0, (unint64_t *)&unk_100646BB0, NSProgress_ptr);
        *(_QWORD *)(v18 + 64) = sub_1000E8324();
        *(_QWORD *)(v18 + 32) = v19;
        *(_QWORD *)(v18 + 96) = type metadata accessor for NSKeyValueObservation(0);
        *(_QWORD *)(v18 + 104) = sub_10005A360(&qword_100643190, (uint64_t (*)(uint64_t))&type metadata accessor for NSKeyValueObservation, (uint64_t)&protocol conformance descriptor for NSObject);
        *(_QWORD *)(v18 + 72) = v14;
        v20 = v16;
        v21 = v19;
        v22 = v14;
        v23 = static os_log_type_t.default.getter(v22);
        os_log(_:dso:log:type:_:)("Progress: [FOOTER] ADD fractionCompleted observer for: %{public}@, observation: %{public}@", 90, 2, &_mh_execute_header, v20, v23, v18);

        swift_bridgeObjectRelease(v18);
        swift_beginAccess(v1 + 144, v33, 33, 0);
        v24 = v22;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v24);
        v25 = *(_QWORD *)(v1 + 144);
        v27 = *(_QWORD *)(v25 + 16);
        v26 = *(_QWORD *)(v25 + 24);
        if (v27 >= v26 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        v28 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v24);
        specialized Array._endMutation()(v28);
        swift_endAccess(v33);

        sub_10007C720((uint64_t)v6, type metadata accessor for DOCFileOperation);
        v9 += v32;
        --v8;
      }
      while (v8);
      *(_QWORD *)&result = swift_bridgeObjectRelease(v30).n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_10008E104()
{
  uint64_t v0;
  int v1;
  uint64_t result;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(unsigned __int8 *)(v0 + 176);
  if (v1 != 255 && v1 == 2 && *(_QWORD *)(v0 + 168) == 0)
    return 1;
  result = *(_QWORD *)(v0 + 160);
  if (result)
  {
    if (objc_msgSend((id)result, "contentType") == (id)2)
    {
      result = *(_QWORD *)(v0 + 160);
      if (!result)
        return result;
      v4 = objc_msgSend((id)result, "subTitle");
      if (v4)
      {

        return 1;
      }
    }
    result = *(_QWORD *)(v0 + 160);
    if (result)
    {
      if (objc_msgSend((id)result, "contentType") == (id)2)
      {
        v5 = *(void **)(v0 + 160);
        if (v5)
        {
          v6 = objc_msgSend(v5, "actions");
          v7 = sub_10004F2F0(0, &qword_1006431A0, DOCICloudQuotaInAppAction_ptr);
          v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

          if ((unint64_t)v8 >> 62)
          {
            if (v8 < 0)
              v10 = v8;
            else
              v10 = v8 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v8);
            v9 = _CocoaArrayWrapper.endIndex.getter(v10);
            swift_bridgeObjectRelease(v8);
          }
          else
          {
            v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease(v8);
        }
        else
        {
          v9 = 0;
        }
        return v9 > 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10008E248(SEL *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  SEL *v20;
  uint64_t v21;
  _QWORD *v22;

  v3 = type metadata accessor for DOCFileOperation(0);
  v21 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (id *)((char *)&v19 - v7);
  v9 = *(_QWORD *)(v1 + 152);
  if (!v9)
    return 0;
  v10 = _swiftEmptyArrayStorage;
  v22 = _swiftEmptyArrayStorage;
  v11 = *(_QWORD *)(v9 + 16);
  result = swift_bridgeObjectRetain(v9);
  if (v11)
  {
    v13 = 0;
    v19 = v11;
    v20 = a1;
    while (v13 < *(_QWORD *)(v9 + 16))
    {
      v14 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
      v15 = *(_QWORD *)(v21 + 72);
      sub_10007C6DC(v9 + v14 + v15 * v13, (uint64_t)v8, type metadata accessor for DOCFileOperation);
      if (objc_msgSend(v8[5], *a1))
      {
        sub_1000E828C((uint64_t)v8, (uint64_t)v6);
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          sub_100154E30(0, v10[2] + 1, 1);
        v10 = v22;
        v17 = v22[2];
        v16 = v22[3];
        if (v17 >= v16 >> 1)
        {
          sub_100154E30(v16 > 1, v17 + 1, 1);
          v10 = v22;
        }
        v10[2] = v17 + 1;
        result = sub_1000E828C((uint64_t)v6, (uint64_t)v10 + v14 + v17 * v15);
        v11 = v19;
        a1 = v20;
      }
      else
      {
        result = sub_10007C720((uint64_t)v8, type metadata accessor for DOCFileOperation);
      }
      if (v11 == ++v13)
      {
        v10 = v22;
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease(v9);
    v18 = v10[2];
    swift_release(v10);
    return v18 != 0;
  }
  return result;
}

void sub_10008E430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  BOOL v17;
  double v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for DOCFileOperation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (id *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((sub_10008E7F4() & 1) == 0)
  {
    v6 = *(_QWORD *)(v0 + 152);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        v8 = v6 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
        v9 = *(_QWORD *)(v3 + 72);
        v21 = *(_QWORD *)(v0 + 152);
        swift_bridgeObjectRetain(v6);
        v10 = 0;
        do
        {
          sub_10007C6DC(v8, (uint64_t)v5, type metadata accessor for DOCFileOperation);
          v11 = v5[5];
          v12 = sub_10007C720((uint64_t)v5, type metadata accessor for DOCFileOperation);
          v13 = NSProgress.fileTotalCount.getter(v12);
          v15 = v14;

          if ((v15 & 1) != 0)
            v16 = 0;
          else
            v16 = v13;
          v17 = __OFADD__(v10, v16);
          v10 += v16;
          if (v17)
          {
            __break(1u);
            return;
          }
          v8 += v9;
          --v7;
        }
        while (v7);
        *(_QWORD *)&v18 = swift_bridgeObjectRelease(v21).n128_u64[0];
        if (v10 > 0)
        {
          v19 = *(void **)(v1 + 160);
          if (v19)
            objc_msgSend(v19, "contentType", v18);
        }
      }
    }
  }
}

void sub_10008E57C(void *a1)
{
  uint64_t v1;

  sub_10008E584(a1, v1);
}

void sub_10008E584(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  void *v6;
  id v7;
  _BYTE v8[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(void **)(Strong + 160);
    *(_QWORD *)(Strong + 160) = a1;
    v7 = a1;

    sub_10001ABD8();
    swift_release(v5);

  }
}

id sub_10008E600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id *v7;
  id result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = type metadata accessor for DOCFileOperation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (id *)((char *)&v20 - v6);
  result = objc_msgSend(*(id *)(v0 + 32), "isProgressPausable");
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(v0 + 152);
    if (v9)
    {
      v10 = _swiftEmptyArrayStorage;
      v21 = _swiftEmptyArrayStorage;
      v11 = *(_QWORD *)(v9 + 16);
      result = (id)swift_bridgeObjectRetain(v9);
      if (v11)
      {
        v12 = 0;
        v20 = v11;
        while (v12 < *(_QWORD *)(v9 + 16))
        {
          v13 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
          v14 = *(_QWORD *)(v2 + 72);
          sub_10007C6DC(v9 + v13 + v14 * v12, (uint64_t)v7, type metadata accessor for DOCFileOperation);
          if (objc_msgSend(v7[5], "isPausable"))
          {
            v15 = (uint64_t)v5;
            sub_1000E828C((uint64_t)v7, (uint64_t)v5);
            if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
              sub_100154E30(0, v10[2] + 1, 1);
            v10 = v21;
            v17 = v21[2];
            v16 = v21[3];
            if (v17 >= v16 >> 1)
            {
              sub_100154E30(v16 > 1, v17 + 1, 1);
              v10 = v21;
            }
            v10[2] = v17 + 1;
            v18 = (uint64_t)v10 + v13 + v17 * v14;
            v5 = (char *)v15;
            result = (id)sub_1000E828C(v15, v18);
            v11 = v20;
          }
          else
          {
            result = (id)sub_10007C720((uint64_t)v7, type metadata accessor for DOCFileOperation);
          }
          if (v11 == ++v12)
          {
            v10 = v21;
            goto LABEL_15;
          }
        }
        __break(1u);
      }
      else
      {
LABEL_15:
        swift_bridgeObjectRelease(v9);
        v19 = v10[2];
        swift_release(v10);
        return (id)(v19 != 0);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10008E7F4()
{
  return sub_10008E248((SEL *)&selRef_isPaused);
}

uint64_t sub_10008E800()
{
  uint64_t v0;

  return sub_10008E808(v0);
}

uint64_t sub_10008E808(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double (*v8)(void (*)(void *), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v9;
  __n128 v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE v15[24];
  uint64_t v16;
  _BYTE v17[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v17, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    v4 = result + 56;
    swift_beginAccess(result + 56, v14, 0, 0);
    sub_1000923F4(v4, (uint64_t)v15);
    if (v16)
    {
      sub_100092328((uint64_t)v15, (uint64_t)v11);
      sub_10009236C((uint64_t)v15);
      v5 = v12;
      v6 = v13;
      sub_10007E7A0(v11, v12);
      v7 = swift_allocObject(&unk_1005C30D0, 24, 7);
      swift_weakInit(v7 + 16, v3);
      v8 = *(double (**)(void (*)(void *), uint64_t, uint64_t, uint64_t, __n128))(v6 + 16);
      v9 = swift_retain();
      v10.n128_f64[0] = v8(sub_10008E57C, v7, v5, v6, v9);
      swift_release_n(v7, 2, v10);
      sub_100068588(v11);
    }
    else
    {
      sub_10009236C((uint64_t)v15);
    }
    return swift_release(v3);
  }
  return result;
}

id sub_10008E924(id result, char a2)
{
  if (a2 == 1)
    return result;
  return result;
}

void sub_10008E938(id a1, char a2)
{
  if (a2 == 1)

}

id sub_10008E94C(id result, char a2)
{
  if (a2 != -1)
    return sub_10008E924(result, a2);
  return result;
}

void sub_10008E960(id a1, char a2)
{
  if (a2 != -1)
    sub_10008E938(a1, a2);
}

BOOL sub_10008E974(void *a1, char a2, void *a3, char a4)
{
  char v6;

  if (a2)
  {
    if (a2 != 1)
      __asm { BR              X9 }
    if (a4 == 1)
    {
      sub_10004F2F0(0, (unint64_t *)&qword_100642430, NSObject_ptr);
      sub_10008E924(a1, 1);
      sub_10008E924(a3, 1);
      v6 = static NSObject.== infix(_:_:)(a1, a3);
      sub_10008E938(a3, 1);
      sub_10008E938(a1, 1);
      return v6 & 1;
    }
    return 0;
  }
  if (a4)
    return 0;
  return a1 == a3;
}

uint64_t sub_10008EAC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10008EACC(a1, a2, v2);
}

uint64_t sub_10008EACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];

  v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v13, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 152);
    *(_QWORD *)(result + 152) = a1;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRelease(v7);
    swift_beginAccess(v6 + 144, &v12, 1, 0);
    v8 = *(_QWORD *)(v6 + 144);
    *(_QWORD *)(v6 + 144) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v8);
    v10 = *(id *)DOCLog.UI.unsafeMutableAddressor(v9);
    v11 = static os_log_type_t.default.getter(v10);
    os_log(_:dso:log:type:_:)("Progress: [FOOTER] REMOVE fractionCompleted observer", 52, 2, &_mh_execute_header, v10, v11, _swiftEmptyArrayStorage);

    sub_10008DE48();
    sub_10001ABD8();
    return swift_release(v6);
  }
  return result;
}

uint64_t (*sub_10008EBB0(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 56, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t type metadata accessor for QueryCollectionDelayedLoadingSimulator()
{
  return objc_opt_self(_TtC5FilesP33_6AED27DA5BB19648EBDDC1DCC8BE8C6238QueryCollectionDelayedLoadingSimulator);
}

uint64_t sub_10008EC0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSString v16;
  uint64_t v18;
  _QWORD *v19;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v18);
  v19 = _swiftEmptyArrayStorage;
  v12 = sub_10005A360((unint64_t *)&qword_100643640, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v13 = sub_10006922C((uint64_t *)&unk_100641280);
  v14 = sub_10008825C((unint64_t *)&qword_100643650, (uint64_t *)&unk_100641280);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v13, v14, v6, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  *(_QWORD *)(v1 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002BLL, 0x8000000100538C60, v11, v8, v5, 0);
  v15 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v16 = String._bridgeToObjectiveC()();
  LOBYTE(v2) = objc_msgSend(v15, "BOOLForKey:", v16);

  *(_BYTE *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = 0x4000000000000000;
  *(_QWORD *)(v1 + 40) = _swiftEmptyArrayStorage;
  return v1;
}

uint64_t sub_10008EE5C()
{
  uint64_t CollectionDelayedLoadingSimulator;
  uint64_t result;

  CollectionDelayedLoadingSimulator = type metadata accessor for QueryCollectionDelayedLoadingSimulator();
  swift_allocObject(CollectionDelayedLoadingSimulator, 48, 7);
  result = sub_10008EC0C();
  qword_100657140 = result;
  return result;
}

uint64_t sub_10008EE98(uint64_t result, void *a2)
{
  uint64_t v2;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  id v12;
  char isEscapingClosureAtFileLocation;
  _QWORD v14[5];
  uint64_t v15;

  if (*(_BYTE *)(v2 + 24) == 1)
  {
    v4 = (void *)result;
    v5 = *(void **)(v2 + 16);
    v6 = (_QWORD *)swift_allocObject(&unk_1005EF000, 40, 7);
    v6[2] = a2;
    v6[3] = v2;
    v6[4] = v4;
    v7 = swift_allocObject(&unk_1005EF028, 32, 7);
    *(_QWORD *)(v7 + 16) = sub_100487874;
    *(_QWORD *)(v7 + 24) = v6;
    v14[4] = sub_10006657C;
    v15 = v7;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    v14[2] = sub_10006655C;
    v14[3] = &unk_1005EF040;
    v8 = _Block_copy(v14);
    v9 = v15;
    v10 = v5;
    v11 = a2;
    swift_retain();
    v12 = v4;
    swift_retain();
    swift_release(v9);
    dispatch_sync(v10, v8);

    _Block_release(v8);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v7, "", 107, 1114, 20, 1);
    swift_release(v6);
    result = swift_release(v7);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t sub_10008EFF0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  a4(a1 + 32, a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t initializeWithCopy for DOCItemCollectionCoreFooterAwareLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008EFF0(a1, a2, a3, (void (*)(uint64_t, uint64_t))&_swift_unknownObjectWeakCopyInit);
}

uint64_t sub_10008F04C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DOCItemCollectionCoreFooterAwareLayout(a2, a1, (uint64_t)&type metadata for DOCItemCollectionCoreFooterAwareLayout);
  return a2;
}

uint64_t sub_10008F088(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UTType(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1004EA978;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for DOCProgressProvidingOperationIconType(uint64_t a1)
{
  uint64_t result;

  result = qword_100657938;
  if (!qword_100657938)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DOCProgressProvidingOperationIconType);
  return result;
}

uint64_t type metadata accessor for DOCFileProviderSyncStateObserverCache()
{
  return objc_opt_self(_TtC5Files37DOCFileProviderSyncStateObserverCache);
}

uint64_t sub_10008F150()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for DOCFileProviderSyncStateObserverCache();
  result = swift_allocObject(v0, 24, 7);
  *(_QWORD *)(result + 16) = &_swiftEmptyDictionarySingleton;
  qword_100672620 = result;
  return result;
}

uint64_t type metadata accessor for DOCItemCollectionContainerDataSource()
{
  return objc_opt_self(_TtC5Files36DOCItemCollectionContainerDataSource);
}

id sub_10008F1A4()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;

  v1 = *(void **)(v0 + 40);
  v2 = objc_msgSend(v1, "sourceIdentifier");
  v3 = objc_msgSend(v1, "displayName");
  if (v3)
  {
    v4 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  }
  return v2;
}

uint64_t sub_10008F234()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

void *sub_10008F23C()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 64);
  v2 = v1;
  return v1;
}

void sub_10008F260(uint64_t a1)
{
  char *v1;
  void *v2;
  char *v3;
  void *v4;
  id v5;

  if (a1 == 4)
  {
    v3 = (char *)sub_100033088();
    v4 = *(void **)&v3[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection];
    v5 = v4;

    if (v4)
    {
      sub_100162B10();
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  if (a1 == 1)
  {
    v1 = (char *)sub_100033088();
    v2 = *(void **)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection];
    v5 = v2;

    if (v2)
    {
      sub_1000B0BAC();
LABEL_7:

      return;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
}

id sub_10008F310(id result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  char *v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  char *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  id v39;

  v2 = v1;
  v3 = (unint64_t)result;
  v4 = 0;
  switch((unint64_t)result)
  {
    case 0uLL:
      if (*(_BYTE *)(v2 + 97) == 1)
      {
        v5 = *(void **)(v2 + 16);
        v6 = *(void **)(v2 + 32);
        v7 = *(void **)(v2 + 56);
        *(_QWORD *)((char *)objc_allocWithZone((Class)type metadata accessor for DOCLoadingViewController())
                  + OBJC_IVAR____TtC5Files24DOCLoadingViewController____lazy_storage___task) = 0;
        v8 = v5;
        v9 = v6;
        v10 = v7;
        return sub_10004F040(v8, v6, v7);
      }
      return 0;
    case 1uLL:
    case 3uLL:
      return (id)sub_100033088();
    case 2uLL:
      return v4;
    case 4uLL:
      v26 = objc_msgSend(*(id *)(v2 + 40), "node");
      if (!v26)
        return (id)sub_100033088();
      v27 = v26;
      v28 = type metadata accessor for DOCRootNode(0);
      v29 = (void *)swift_dynamicCastClass(v27, v28);
      if (!v29)
        goto LABEL_13;
      v30 = v29;
      v31 = objc_msgSend(v29, "enumeratorError");
      if (!v31)
        goto LABEL_13;
      v39 = v31;
      v32 = sub_10006922C((uint64_t *)&unk_100643490);
      v33 = sub_10021F574();
      if ((swift_dynamicCast(&v38, &v39, v32, v33, 6) & 1) == 0)
        goto LABEL_13;
      v34 = v38;
      if ((NSError.isProviderDomainNotAuthenticated.getter() & 1) != 0)
      {
        v35 = objc_msgSend(v30, "subjectNode");
        v36 = type metadata accessor for DOCEncryptedVolumeNode(0);
        v37 = (_QWORD *)swift_dynamicCastClass(v35, v36);
        if (v37)
        {
          (*(void (**)(void))((swift_isaMask & *v37) + 0x98))();

LABEL_13:
          swift_unknownObjectRelease(v27);
        }
        else
        {

          swift_unknownObjectRelease(v27);
        }
      }
      else
      {
        swift_unknownObjectRelease(v27);

      }
      return (id)sub_100033088();
    default:
      v12 = *(char **)(v2 + 48);
      v13 = *(_QWORD *)&v12[OBJC_IVAR____TtC5Files21DOCFileProviderSource_errorCount];
      v14 = __CFADD__(v13, 1);
      v15 = v13 + 1;
      if (v14)
      {
        __break(1u);
      }
      else
      {
        *(_QWORD *)&v12[OBJC_IVAR____TtC5Files21DOCFileProviderSource_errorCount] = v15;
        v16 = *(void **)(v2 + 16);
        v17 = *(void **)(v2 + 32);
        v18 = *(void **)(v2 + 40);
        v19 = v15 < 2;
        v20 = *(void **)(v2 + 56);
        objc_allocWithZone((Class)type metadata accessor for DOCErrorViewController());
        sub_1000A850C(v3);
        v21 = v16;
        v22 = v17;
        v23 = v20;
        v24 = v12;
        v25 = v18;
        v4 = sub_1002BC6B8(v21, v17, v20, v3, v24, v18, v19);

        sub_1000A851C(v3);
        return v4;
      }
      return result;
  }
}

uint64_t sub_10008F5C0(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

uint64_t type metadata accessor for DOCInterfaceSystemAppearance_Default()
{
  return objc_opt_self(_TtC5Files36DOCInterfaceSystemAppearance_Default);
}

uint64_t type metadata accessor for DOCCollectionViewCompositionalLayout()
{
  return objc_opt_self(_TtC5Files36DOCCollectionViewCompositionalLayout);
}

uint64_t sub_10008F74C(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  objc_class *ObjectType;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  objc_super v22;
  _BYTE v23[32];
  uint64_t v24;
  _BYTE v25[24];

  ObjectType = (objc_class *)swift_getObjectType(v6, a6);
  v12 = (uint64_t)&v6[OBJC_IVAR____TtC5Files36DOCCollectionViewCompositionalLayout_coreLayout];
  swift_beginAccess(&v6[OBJC_IVAR____TtC5Files36DOCCollectionViewCompositionalLayout_coreLayout], v25, 0, 0);
  sub_1000423F8(v12, (uint64_t)v23, (void (*)(uint64_t, uint64_t))&_swift_unknownObjectWeakCopyInit);
  v14 = (void *)swift_unknownObjectWeakLoadStrong(&v24, v13);
  if (!v14
    || (v15 = v14, v16 = objc_msgSend(v14, "collectionView"),
                   v15,
                   !v16))
  {
    sub_1000423BC((uint64_t)v23);
LABEL_7:
    v22.receiver = v6;
    v22.super_class = ObjectType;
    return (uint64_t)objc_msgSendSuper2(&v22, "shouldInvalidateLayoutForBoundsChange:", a1, a2, a3, a4);
  }
  objc_msgSend(v16, "bounds");
  v18 = v17;
  v20 = v19;

  if (v18 == a3)
  {
    sub_1000423BC((uint64_t)v23);
    if (v20 != a4)
      return 1;
    goto LABEL_7;
  }
  sub_1000423BC((uint64_t)v23);
  return 1;
}

uint64_t type metadata accessor for DOCSizeCategoryDependantConstraints()
{
  return objc_opt_self(_TtC5FilesP33_39E00B7F57686CC7F9EA376E8E1834E735DOCSizeCategoryDependantConstraints);
}

ValueMetadata *type metadata accessor for DOCSidebarHeaderContentValueBinding()
{
  return &type metadata for DOCSidebarHeaderContentValueBinding;
}

uint64_t type metadata accessor for DOCGenericOperationCombinedProgress(uint64_t a1)
{
  return sub_10006BDA4(a1, qword_10064BEF0, (uint64_t)&nominal type descriptor for DOCGenericOperationCombinedProgress);
}

uint64_t type metadata accessor for DOCSidebarPaneNavigationController()
{
  return objc_opt_self(_TtC5Files34DOCSidebarPaneNavigationController);
}

uint64_t type metadata accessor for DOCProgressCollectionIndicatorView()
{
  return objc_opt_self(_TtC5Files34DOCProgressCollectionIndicatorView);
}

void sub_10008F988(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  id v5;

  v2 = swift_unknownObjectWeakAssign(v1 + OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_delegate, a1);
  Strong = swift_unknownObjectWeakLoadStrong(v2, v3);
  swift_unknownObjectRelease(Strong);
  if (Strong)
  {
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_enabled) == 1)
      Strong = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_isShowingContent);
    else
      Strong = 0;
  }
  v5 = sub_10008FCA4();
  objc_msgSend(v5, "setEnabled:", Strong);

  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_pointerInteraction), "setEnabled:", Strong);
  sub_1000901DC();
}

uint64_t sub_10008FA28(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = Logger.ProgressUI.unsafeMutableAddressor(v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v10, v5);
  v11 = v2;
  swift_bridgeObjectRetain_n(a2, 2);
  v12 = (char *)v11;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    v27 = a1;
    v16 = v15;
    v28 = swift_slowAlloc(64, -1);
    v32 = v28;
    *(_DWORD *)v16 = 136315394;
    v26[1] = v16 + 4;
    v29 = v6;
    v30 = v5;
    v17 = *(_QWORD *)&v12[OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_debugID];
    v18 = *(_QWORD *)&v12[OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_debugID + 8];
    v20 = *(_QWORD *)&v12[OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_debugID + 16];
    v19 = *(_QWORD *)&v12[OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_debugID + 24];
    swift_bridgeObjectRetain(v19);
    v21 = static String._fromSubstring(_:)(v17, v18, v20, v19);
    v23 = v22;
    swift_bridgeObjectRelease(v19);
    v31 = sub_1000544FC(v21, v23, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);

    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v16 + 12) = 2080;
    swift_bridgeObjectRetain(a2);
    v31 = sub_1000544FC(v27, a2, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "[Indicator:%s] %s", (uint8_t *)v16, 0x16u);
    v24 = v28;
    swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v9, v30);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

id sub_10008FCA4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView____lazy_storage___didTapGestureRecognizer;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView____lazy_storage___didTapGestureRecognizer);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView____lazy_storage___didTapGestureRecognizer);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v0, "didTap");
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_10008FD24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t (*v20)();
  unsigned __int8 *v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  void *v34;
  double v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  Swift::String v41;
  unint64_t v42;
  id v44;
  uint64_t v45;
  _BYTE v46[24];
  _BYTE v47[24];
  void **aBlock;
  unint64_t v49;
  uint64_t (*v50)(uint64_t);
  void *v51;
  void (*v52)();
  uint64_t v53;

  v1 = v0;
  v44 = (id)objc_opt_self(CATransaction);
  objc_msgSend(v44, "begin");
  v2 = v0 + OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_source;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_source);
  v4 = *(_QWORD *)(v2 + 8);
  ObjectType = swift_getObjectType(v3, v5);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  swift_unknownObjectRetain(v3);
  v8 = v7(ObjectType, v4);
  swift_unknownObjectRelease(v3);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = &off_100648000;
  if (v9)
  {
    v11 = (_QWORD *)(v8 + 32);
    v45 = OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_progressGroup;
    swift_bridgeObjectRetain(v8);
    do
    {
      v12 = v11[3];
      v13 = v11[4];
      sub_10007E7A0(v11, v12);
      v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
      if (objc_msgSend(v14, "isCancelled")
        || objc_msgSend(v14, "isFinished")
        || (objc_msgSend(v14, "fractionCompleted"), v15 >= 1.0))
      {

      }
      else
      {
        objc_msgSend(v14, "isPaused");

        v16 = *(_QWORD *)(v1 + v45);
        v17 = v11[3];
        v18 = sub_10007E7A0(v11, v17);
        v51 = (void *)v17;
        v19 = sub_10006CBAC(&aBlock);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v19, v18, v17);
        sub_100092328((uint64_t)v11, (uint64_t)&v52);
        swift_retain();
        sub_10029DB44((uint64_t)&aBlock, &v52);
        sub_10000CB4C((uint64_t)&aBlock, &qword_100644CA0);
        swift_release(v16);
      }
      v11 += 5;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease_n(v8, 2);
    v10 = &off_100648000;
  }
  else
  {
    swift_bridgeObjectRelease(v8);
  }
  v20 = v10[498];
  v21 = (unsigned __int8 *)(*(_QWORD *)((char *)v20 + v1) + direct field offset for DOCOperationCombinedProgress.state);
  swift_beginAccess(v21, v47, 0, 0);
  v22 = *v21;
  v23 = v22 - 2;
  v24 = v22 & 1;
  if (v23 >= 3 && v24 != 0)
  {
    sub_10008FA28(0xD000000000000036, 0x800000010051CCC0);
    v30 = v1 + OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_combinedProgress;
    v31 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_combinedProgress);
    v32 = *(_BYTE *)(v1 + OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_combinedProgress + 8);
    *(_QWORD *)v30 = 0;
    *(_BYTE *)(v30 + 8) = 1;
    if ((v32 & 1) == 0)
      sub_100241AB4(v31, 0);
    v33 = *(_QWORD *)((char *)v20 + v1);
    swift_retain();
    sub_100242678();
    swift_release(v33);
LABEL_23:
    v34 = v44;
    return objc_msgSend(v34, "commit");
  }
  sub_10008FA28(0xD00000000000002DLL, 0x800000010051CC20);
  v26 = *(_QWORD *)((char *)v20 + v1) + direct field offset for DOCOperationCombinedProgress.progressValue;
  swift_beginAccess(v26, v46, 0, 0);
  if ((*(_BYTE *)(v26 + 9) & 1) != 0)
  {
    v27 = v1 + OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_combinedProgress;
    v28 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_combinedProgress);
    v29 = *(_BYTE *)(v1 + OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_combinedProgress + 8);
    *(_QWORD *)v27 = 0;
    *(_BYTE *)(v27 + 8) = 1;
    if ((v29 & 1) == 0)
      sub_100241AB4(v28, 0);
    sub_10008FA28(0xD000000000000039, 0x800000010051CC50);
    goto LABEL_23;
  }
  if ((*(_BYTE *)(v26 + 8) & 1) != 0)
    v35 = 0.0;
  else
    v35 = *(double *)v26;
  v34 = v44;
  if (v35 >= 1.0)
  {
    v36 = swift_allocObject(&unk_1005D48F0, 24, 7);
    swift_unknownObjectWeakInit(v36 + 16, v1);
    v52 = sub_100242F08;
    v53 = v36;
    aBlock = _NSConcreteStackBlock;
    v49 = 1107296256;
    v50 = sub_10004A82C;
    v51 = &unk_1005D4908;
    v37 = _Block_copy(&aBlock);
    swift_release(v53);
    objc_msgSend(v44, "setCompletionBlock:", v37);
    _Block_release(v37);
  }
  v38 = v1 + OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_combinedProgress;
  v39 = *(uint64_t *)(v1 + OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_combinedProgress);
  v40 = *(_BYTE *)(v1 + OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_combinedProgress + 8);
  *(double *)v38 = v35;
  *(_BYTE *)(v38 + 8) = 0;
  if ((v40 & 1) != 0 || v35 != *(double *)&v39)
    sub_100241AB4(v39, v40);
  aBlock = 0;
  v49 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  v41._object = (void *)0x800000010051CC90;
  v41._countAndFlagsBits = 0xD00000000000002DLL;
  String.append(_:)(v41);
  Double.write<A>(to:)(&aBlock, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v35);
  v42 = v49;
  sub_10008FA28((uint64_t)aBlock, v49);
  swift_bridgeObjectRelease(v42);
  return objc_msgSend(v34, "commit");
}

void sub_1000901DC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *Strong;
  void *v11;
  unsigned __int8 v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for UIShape(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10006922C((uint64_t *)&unk_1006492B0);
  __chkstk_darwin(v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v1[OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_isShowingContent] == 1
    && (Strong = (void *)swift_unknownObjectWeakLoadStrong(&v1[OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_delegate], v7)) != 0&& (v11 = Strong, v12 = objc_msgSend(Strong, "respondsToSelector:", "progressIndicatorViewDidReceiveTap:"), swift_unknownObjectRelease(v11), (v12 & 1) != 0))
  {
    sub_10004F2F0(0, &qword_100649070, UIHoverStyle_ptr);
    v13 = static UIShape.circle.getter();
    UIShape.inset(by:)(v13, -8.0);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v9, 0, 1, v2);
    v14 = (void *)UIHoverStyle.init(shape:)(v9);
    objc_msgSend(v1, "setHoverStyle:", v14);

  }
  else
  {
    objc_msgSend(v1, "setHoverStyle:", 0);
  }
}

void sub_100090380(void *a1)
{
  char *v1;
  char *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  char v8;
  id v9;

  v2 = v1;
  v3 = a1;
  v4 = OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_pointerInteraction;
  v5 = *(void **)&v2[OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_pointerInteraction];
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Files34DOCProgressCollectionIndicatorView_pointerInteraction] = a1;
  v9 = a1;
  if (v3)
  {
    if (!v5)
    {
LABEL_7:
      objc_msgSend(v2, "addInteraction:", v3);
      goto LABEL_8;
    }
    sub_10004F2F0(0, &qword_100649078, UIPointerInteraction_ptr);
    v6 = v5;
    v7 = v9;
    v8 = static NSObject.== infix(_:_:)(v7, v6);

    if ((v8 & 1) != 0)
      goto LABEL_9;
  }
  else if (!v5)
  {
    goto LABEL_8;
  }
  objc_msgSend(v2, "removeInteraction:", v5);
  v3 = *(void **)&v2[v4];
  if (v3)
    goto LABEL_7;
LABEL_8:
  v6 = v5;
LABEL_9:

}

uint64_t type metadata accessor for DOCItemCollectionViewSectionHeader()
{
  return objc_opt_self(_TtC5Files34DOCItemCollectionViewSectionHeader);
}

uint64_t sub_100090484(uint64_t a1)
{
  _BYTE v2[8];

  return swift_updateClassMetadata2(a1, 256, 0, v2, a1 + 1928);
}

uint64_t type metadata accessor for DOCItemCollectionLargeTextListCell(uint64_t a1)
{
  return sub_10006BDA4(a1, (uint64_t *)&unk_100649FA0, (uint64_t)&nominal type descriptor for DOCItemCollectionLargeTextListCell);
}

uint64_t type metadata accessor for DOCFileProviderSyncStateHeaderView()
{
  return objc_opt_self(_TtC5Files34DOCFileProviderSyncStateHeaderView);
}

void sub_1000904EC(void *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;

  v2 = sub_100090BA0();
  v3 = objc_msgSend(v2, "arrangedSubviews");

  v4 = sub_10004F2F0(0, (unint64_t *)&qword_100645B80, UIView_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v11 = v5;
    else
      v11 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v11);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v5);
    if (!v6)
      goto LABEL_13;
  }
  if (v6 < 1)
  {
    __break(1u);
    return;
  }
  v7 = 0;
  do
  {
    if ((v5 & 0xC000000000000001) != 0)
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
    else
      v8 = *(id *)(v5 + 8 * v7 + 32);
    v9 = v8;
    ++v7;
    v10 = sub_100090BA0();
    objc_msgSend(v10, "removeArrangedSubview:", v9);

    objc_msgSend(v9, "removeFromSuperview");
  }
  while (v6 != v7);
LABEL_13:
  swift_bridgeObjectRelease_n(v5, 2);
  v12 = sub_100090BA0();
  v13 = sub_1000912B8();
  objc_msgSend(v12, "addArrangedSubview:", v13);

  v14 = sub_100090BA0();
  v15 = sub_100091190();
  objc_msgSend(v14, "addArrangedSubview:", v15);

  if (a1)
  {
    v16 = a1;
    v17 = sub_1000912B8();
    v18 = objc_msgSend(v16, "icon");
    objc_msgSend(v17, "setImage:", v18);

    v19 = v16;
    v20 = sub_100091190();
    v21 = objc_msgSend(v19, "title");
    objc_msgSend(v20, "setText:", v21);

  }
}

void sub_100090754(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  id v29;
  id v30;
  uint64_t KeyPath;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  id v37;
  __n128 v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;

  v2 = v1;
  v4 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10006922C((uint64_t *)&unk_1006529B0);
  __chkstk_darwin(v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10006922C((uint64_t *)&unk_10064A080);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v41 - v14;
  if (!a1)
    return;
  v16 = a1;
  v17 = objc_msgSend(v16, "actions");
  v18 = sub_10004F2F0(0, &qword_1006431A0, DOCICloudQuotaInAppAction_ptr);
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v40 = v19;
    else
      v40 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    v20 = (void *)_CocoaArrayWrapper.endIndex.getter(v40);
    swift_bridgeObjectRelease(v19);
    if (v20)
      goto LABEL_4;
  }
  else
  {
    v20 = *(void **)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v20)
    {
LABEL_4:
      if ((v19 & 0xC000000000000001) != 0)
      {
        v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v19);
      }
      else
      {
        if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v21 = *(id *)(v19 + 32);
      }
      v20 = v21;
    }
  }
  swift_bridgeObjectRelease(v19);
  v22 = sub_1003615A4();
  UIButton.configuration.getter(v22);
  v24 = type metadata accessor for UIButton.Configuration(0, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v15, 1, v24))
  {
    sub_100261834((uint64_t)v15, (uint64_t)v13);
    UIButton.configuration.setter(v13);

    sub_10026187C((uint64_t)v15);
  }
  else
  {
    v43 = v16;
    if (v20)
    {
      v25 = objc_msgSend(v20, "title");
      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v27 = v26;

    }
    else
    {
      v42 = 0;
      v27 = 0xE000000000000000;
    }
    v28 = (void *)objc_opt_self(UIFont);
    v29 = objc_msgSend(v2, "traitCollection");
    v30 = objc_msgSend(v28, "preferredFontForTextStyle:compatibleWithTraitCollection:", UIFontTextStyleSubheadline, v29);

    AttributeContainer.init()();
    AttributedString.init(_:attributes:)(v42, v27, v6);
    KeyPath = swift_getKeyPath(&unk_1004E3BA0);
    __chkstk_darwin(KeyPath);
    v32 = swift_getKeyPath(&unk_1004E3BD0);
    v44 = v30;
    v33 = sub_1002793FC();
    AttributedString.subscript.setter(&v44, v32, v33);
    v34 = type metadata accessor for AttributedString(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v9, 0, 1, v34);
    UIButton.Configuration.attributedTitle.setter(v9);
    UIButton.configuration.setter(v15);

    v16 = v43;
  }
  v35 = sub_1003615A4();
  sub_10004F2F0(0, (unint64_t *)&qword_1006424C0, UIAction_ptr);
  v36 = swift_allocObject(&unk_1005E0E00, 24, 7);
  *(_QWORD *)(v36 + 16) = v20;
  v37 = v20;
  v39 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, v38, 0, 0, 0, sub_1003619AC, v36);
  objc_msgSend(v35, "setDoc_primaryAction:", v39);

}

id sub_100090BA0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateHeaderView____lazy_storage___titleContainer;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateHeaderView____lazy_storage___titleContainer);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateHeaderView____lazy_storage___titleContainer);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
    objc_msgSend(v4, "setAxis:", 0);
    objc_msgSend(v4, "setDistribution:", 0);
    objc_msgSend(v4, "setSpacing:", *(double *)(v0 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateHeaderView_metrics + 40));
    objc_msgSend(v4, "setAlignment:", 2);
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_100090C80(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
  }
  else
  {
    v6 = (void *)a2(v2);
    v7 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v6;
    v5 = v6;

    v4 = 0;
  }
  v8 = v4;
  return v5;
}

id sub_100090CDC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;

  v2 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
  objc_msgSend(v2, "setAxis:", 1);
  objc_msgSend(v2, "setDistribution:", 0);
  v3 = a1 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateHeaderView_metrics;
  objc_msgSend(v2, "setSpacing:", *(double *)(a1 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateHeaderView_metrics + 32));
  objc_msgSend(v2, "setAlignment:", 3);
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = (void *)objc_opt_self(UIColor);
  v5 = v2;
  v6 = objc_msgSend(v4, "quaternarySystemFillColor");
  objc_msgSend(v5, "setBackgroundColor:", v6);

  v7 = objc_msgSend(v5, "layer");
  objc_msgSend(v7, "setCornerRadius:", *(double *)(v3 + 8));

  return v5;
}

id sub_100090E0C()
{
  return sub_100090C80(&OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateHeaderView____lazy_storage___mainContainer, (uint64_t (*)(uint64_t))sub_100090CDC);
}

void sub_100090E20(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;

  v3 = sub_100090E0C();
  v4 = objc_msgSend(v3, "arrangedSubviews");

  v5 = sub_10004F2F0(0, (unint64_t *)&qword_100645B80, UIView_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v12 = v6;
    else
      v12 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v7 = _CocoaArrayWrapper.endIndex.getter(v12);
    if (!v7)
      goto LABEL_13;
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v6);
    if (!v7)
      goto LABEL_13;
  }
  if (v7 < 1)
  {
    __break(1u);
    return;
  }
  v8 = 0;
  do
  {
    if ((v6 & 0xC000000000000001) != 0)
      v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
    else
      v9 = *(id *)(v6 + 8 * v8 + 32);
    v10 = v9;
    ++v8;
    v11 = sub_100090E0C();
    objc_msgSend(v11, "removeArrangedSubview:", v10);

    objc_msgSend(v10, "removeFromSuperview");
  }
  while (v7 != v8);
LABEL_13:
  swift_bridgeObjectRelease_n(v6, 2);
  v13 = OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateHeaderView_viewModel;
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateHeaderView_viewModel);
  v15 = *(void **)(v14 + 80);
  if (!v15)
  {
    swift_retain();
    goto LABEL_19;
  }
  if (!objc_msgSend(v15, "contentType", swift_retain().n128_f64[0]))
  {
    swift_release(v14);
    goto LABEL_21;
  }
  v16 = *(void **)(v14 + 80);
  if (!v16)
  {
LABEL_19:
    swift_release(v14);
    goto LABEL_22;
  }
  v17 = objc_msgSend(v16, "contentType");
  swift_release(v14);
  if (v17 == (id)1)
  {
LABEL_21:
    v18 = sub_100090E0C();
    v19 = sub_100090BA0();
    objc_msgSend(v18, "addArrangedSubview:", v19);

  }
LABEL_22:
  v20 = *(_QWORD *)(v1 + v13);
  v21 = *(void **)(v20 + 80);
  if (!v21)
  {
    swift_retain();
    goto LABEL_28;
  }
  if (!objc_msgSend(v21, "contentType", swift_retain().n128_f64[0]))
  {
    swift_release(v20);
    goto LABEL_30;
  }
  v22 = *(void **)(v20 + 80);
  if (!v22)
  {
LABEL_28:
    swift_release(v20);
    goto LABEL_31;
  }
  v23 = objc_msgSend(v22, "contentType");
  swift_release(v20);
  if (v23 == (id)1)
  {
LABEL_30:
    v24 = sub_100090E0C();
    v25 = sub_10036145C();
    objc_msgSend(v24, "addArrangedSubview:", v25);

  }
LABEL_31:
  v26 = *(_QWORD *)(v1 + v13);
  v27 = *(void **)(v26 + 80);
  if (v27)
  {
    if (!objc_msgSend(v27, "contentType", swift_retain().n128_f64[0]))
    {
      swift_release(v26);
LABEL_39:
      v30 = sub_100090E0C();
      v31 = sub_1003615A4();
      objc_msgSend(v30, "addArrangedSubview:", v31);

      goto LABEL_40;
    }
    v28 = *(void **)(v26 + 80);
    if (v28)
    {
      v29 = objc_msgSend(v28, "contentType");
      swift_release(v26);
      if (v29 != (id)1)
        goto LABEL_40;
      goto LABEL_39;
    }
  }
  else
  {
    swift_retain();
  }
  swift_release(v26);
LABEL_40:
  sub_1000904EC(a1);
  if (a1)
  {
    v32 = a1;
    v33 = sub_10036145C();
    v34 = objc_msgSend(v32, "subTitle");
    objc_msgSend(v33, "setText:", v34);

  }
  sub_100090754(a1);
}

id sub_100091190()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateHeaderView____lazy_storage___titleLabel;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateHeaderView____lazy_storage___titleLabel);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateHeaderView____lazy_storage___titleLabel);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
    v5 = sub_10000BC58();
    objc_msgSend(v4, "setFont:", v5);

    objc_msgSend(v4, "setAdjustsFontForContentSizeCategory:", 1);
    objc_msgSend(v4, "setTextAlignment:", 1);
    objc_msgSend(v4, "setNumberOfLines:", 0);
    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id sub_100091260(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
  }
  else
  {
    v6 = (void *)a2();
    v7 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v6;
    v5 = v6;

    v4 = 0;
  }
  v8 = v4;
  return v5;
}

id sub_1000912B8()
{
  return sub_100091260(&OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateHeaderView____lazy_storage___iconImageView, (uint64_t (*)(void))sub_10000BB38);
}

double sub_1000912CC()
{
  uint64_t v0;

  return sub_1000912D4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

double sub_1000912D4(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  sub_100090E20(a2);
  v3 = a1 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateHeaderView_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateHeaderView_delegate, v4);
  if (Strong)
  {
    v7 = Strong;
    v8 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(ObjectType, v8);
    *(_QWORD *)&result = swift_unknownObjectRelease(v7).n128_u64[0];
  }
  return result;
}

uint64_t type metadata accessor for DOCFileProviderSyncStateFooterView()
{
  return objc_opt_self(_TtC5Files34DOCFileProviderSyncStateFooterView);
}

void sub_100091358(void *a1, char a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  void *v29;
  Swift::String v30;
  Swift::String_optional v31;
  Swift::String v32;
  Swift::String v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  Swift::String v39;
  Swift::String_optional v40;
  Swift::String v41;
  Swift::String v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  NSString *v54;
  id v55;
  uint64_t KeyPath;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  __n128 v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  NSString *v75;
  unint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  id v80;
  __n128 v81;
  void *v82;
  NSString *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  __n128 v93;
  void *v94;
  uint64_t v95;
  NSString *v96;
  id v97;
  Swift::String v98;
  Swift::String v99;

  v3 = v2;
  v6 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10006922C((uint64_t *)&unk_1006529B0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v96 - v13;
  v15 = sub_10006922C((uint64_t *)&unk_10064A080);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v96 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v96 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v96 - v26;
  if (!a2)
  {
LABEL_9:
    v37 = (id)_DocumentManagerBundle(v25);
    if (v37)
    {
      v38 = v37;
      v99._object = (void *)0x80000001005334F0;
      v39._countAndFlagsBits = 0x6573756150;
      v39._object = (void *)0xE500000000000000;
      v40.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v40.value._object = (void *)0xEB00000000656C62;
      v41._countAndFlagsBits = 0;
      v41._object = (void *)0xE000000000000000;
      v99._countAndFlagsBits = 0xD000000000000037;
      v42 = NSLocalizedString(_:tableName:bundle:value:comment:)(v39, v40, (NSBundle)v38, v41, v99);

      v43 = sub_10040FBE0();
      UIButton.configuration.getter();
      v45 = type metadata accessor for UIButton.Configuration(0, v44);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v27, 1, v45))
      {
        swift_bridgeObjectRelease(v42._object);
        sub_100261834((uint64_t)v27, (uint64_t)v24);
        UIButton.configuration.setter(v24);

        sub_10026187C((uint64_t)v27);
      }
      else
      {
        swift_bridgeObjectRetain(v42._object);
        v54 = UIFontTextStyleFootnote;
        v55 = objc_msgSend(v3, "traitCollection");
        AttributeContainer.init()();
        AttributedString.init(_:attributes:)(v42._countAndFlagsBits, v42._object, v8);
        KeyPath = swift_getKeyPath(&unk_1004E7AA0);
        __chkstk_darwin(KeyPath);
        v57 = swift_getKeyPath(&unk_1004E7AD0);
        v97 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:compatibleWithTraitCollection:", v54, v55);
        v58 = sub_1002793FC();
        AttributedString.subscript.setter(&v97, v57, v58);
        swift_bridgeObjectRelease(v42._object);

        v59 = type metadata accessor for AttributedString(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v14, 0, 1, v59);
        UIButton.Configuration.attributedTitle.setter(v14);
        UIButton.configuration.setter(v27);

      }
      v60 = sub_10040FBE0();
      objc_msgSend(v60, "setUserInteractionEnabled:", 1);

      v61 = sub_10040FBE0();
      sub_10004F2F0(0, (unint64_t *)&qword_1006424C0, UIAction_ptr);
      v62 = swift_allocObject(&unk_1005E9AE8, 24, 7);
      swift_unknownObjectWeakInit(v62 + 16);
      v63 = swift_allocObject(&unk_1005E9B38, 32, 7);
      *(_QWORD *)(v63 + 16) = v62;
      *(_QWORD *)(v63 + 24) = v3;
      v64 = v3;
      v66 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, v65, 0, 0, 0, sub_1004119F4, v63);
      goto LABEL_29;
    }
    goto LABEL_38;
  }
  if (a2 != 1)
  {
    if (a2 != 2)
      return;
    if (a1 != (void *)2)
    {
      if (a1 != (void *)3)
        return;
      v28 = (id)_DocumentManagerBundle(v25);
      if (v28)
      {
        v29 = v28;
        v98._countAndFlagsBits = 0xD000000000000038;
        v98._object = (void *)0x80000001005334B0;
        v30._countAndFlagsBits = 0x656D75736552;
        v30._object = (void *)0xE600000000000000;
        v31.value._countAndFlagsBits = 0x617A696C61636F4CLL;
        v31.value._object = (void *)0xEB00000000656C62;
        v32._countAndFlagsBits = 0;
        v32._object = (void *)0xE000000000000000;
        v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, v31, (NSBundle)v29, v32, v98);

        v34 = sub_10040FBE0();
        UIButton.configuration.getter();
        v36 = type metadata accessor for UIButton.Configuration(0, v35);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v21, 1, v36))
        {
          swift_bridgeObjectRelease(v33._object);
          sub_100261834((uint64_t)v21, (uint64_t)v24);
          UIButton.configuration.setter(v24);

          sub_10026187C((uint64_t)v21);
        }
        else
        {
          swift_bridgeObjectRetain(v33._object);
          v83 = UIFontTextStyleFootnote;
          v84 = objc_msgSend(v3, "traitCollection");
          AttributeContainer.init()();
          AttributedString.init(_:attributes:)(v33._countAndFlagsBits, v33._object, v8);
          v85 = swift_getKeyPath(&unk_1004E7AA0);
          __chkstk_darwin(v85);
          v86 = swift_getKeyPath(&unk_1004E7AD0);
          v97 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:compatibleWithTraitCollection:", v83, v84);
          v87 = sub_1002793FC();
          AttributedString.subscript.setter(&v97, v86, v87);
          swift_bridgeObjectRelease(v33._object);

          v88 = type metadata accessor for AttributedString(0);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56))(v14, 0, 1, v88);
          UIButton.Configuration.attributedTitle.setter(v14);
          UIButton.configuration.setter(v21);

        }
        v89 = sub_10040FBE0();
        objc_msgSend(v89, "setUserInteractionEnabled:", 1);

        v61 = sub_10040FBE0();
        sub_10004F2F0(0, (unint64_t *)&qword_1006424C0, UIAction_ptr);
        v90 = swift_allocObject(&unk_1005E9AE8, 24, 7);
        swift_unknownObjectWeakInit(v90 + 16);
        v91 = swift_allocObject(&unk_1005E9B10, 32, 7);
        *(_QWORD *)(v91 + 16) = v90;
        *(_QWORD *)(v91 + 24) = v3;
        v92 = v3;
        v66 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, v93, 0, 0, 0, sub_1004119E8, v91);
LABEL_29:
        v94 = (void *)v66;
        objc_msgSend(v61, "setDoc_primaryAction:", v66);

        return;
      }
LABEL_39:
      __break(1u);
      return;
    }
    goto LABEL_9;
  }
  v46 = objc_msgSend(a1, "actions");
  v47 = sub_10004F2F0(0, &qword_1006431A0, DOCICloudQuotaInAppAction_ptr);
  v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v46, v47);

  if ((unint64_t)v48 >> 62)
  {
    if (v48 < 0)
      v95 = v48;
    else
      v95 = v48 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v48);
    v49 = (void *)_CocoaArrayWrapper.endIndex.getter(v95);
    swift_bridgeObjectRelease(v48);
    if (!v49)
      goto LABEL_18;
  }
  else
  {
    v49 = *(void **)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v49)
      goto LABEL_18;
  }
  if ((v48 & 0xC000000000000001) != 0)
  {
    v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v48);
  }
  else
  {
    if (!*(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v50 = *(id *)(v48 + 32);
  }
  v49 = v50;
LABEL_18:
  swift_bridgeObjectRelease(v48);
  v51 = sub_10040FBE0();
  UIButton.configuration.getter();
  v53 = type metadata accessor for UIButton.Configuration(0, v52);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 48))(v18, 1, v53))
  {
    sub_100261834((uint64_t)v18, (uint64_t)v24);
    UIButton.configuration.setter(v24);

    sub_10026187C((uint64_t)v18);
  }
  else
  {
    if (v49)
    {
      v67 = objc_msgSend(v49, "title");
      v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
      v70 = v69;

    }
    else
    {
      v68 = 0;
      v70 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain(v70);
    v96 = UIFontTextStyleFootnote;
    v71 = objc_msgSend(v3, "traitCollection");
    AttributeContainer.init()();
    AttributedString.init(_:attributes:)(v68, v70, v8);
    v72 = swift_getKeyPath(&unk_1004E7AA0);
    __chkstk_darwin(v72);
    v73 = swift_getKeyPath(&unk_1004E7AD0);
    v74 = (void *)objc_opt_self(UIFont);
    v75 = v96;
    v97 = objc_msgSend(v74, "preferredFontForTextStyle:compatibleWithTraitCollection:", v96, v71);
    v76 = sub_1002793FC();
    AttributedString.subscript.setter(&v97, v73, v76);
    swift_bridgeObjectRelease(v70);

    v77 = type metadata accessor for AttributedString(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v12, 0, 1, v77);
    UIButton.Configuration.attributedTitle.setter(v12);
    UIButton.configuration.setter(v18);

  }
  v78 = sub_10040FBE0();
  sub_10004F2F0(0, (unint64_t *)&qword_1006424C0, UIAction_ptr);
  v79 = swift_allocObject(&unk_1005E9AA0, 24, 7);
  *(_QWORD *)(v79 + 16) = v49;
  v80 = v49;
  v82 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, v81, 0, 0, 0, sub_1003619AC, v79);
  objc_msgSend(v78, "setDoc_primaryAction:", v82);

  sub_10008E938(a1, 1);
}

id sub_100091DEC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateFooterView____lazy_storage___subtitleContainer;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateFooterView____lazy_storage___subtitleContainer);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateFooterView____lazy_storage___subtitleContainer);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
    objc_msgSend(v4, "setAxis:", 0);
    objc_msgSend(v4, "setDistribution:", 0);
    objc_msgSend(v4, "setSpacing:", *(double *)(v0 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateFooterView_metrics + 24));
    objc_msgSend(v4, "setAlignment:", 3);
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_100091ECC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateFooterView____lazy_storage___titleContainer;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateFooterView____lazy_storage___titleContainer);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateFooterView____lazy_storage___titleContainer);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
    objc_msgSend(v4, "setAxis:", 0);
    objc_msgSend(v4, "setDistribution:", 0);
    objc_msgSend(v4, "setSpacing:", *(double *)(v0 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateFooterView_metrics + 16));
    objc_msgSend(v4, "setAlignment:", 3);
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_100091FAC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateFooterView____lazy_storage___mainContainer;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateFooterView____lazy_storage___mainContainer);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateFooterView____lazy_storage___mainContainer);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
    objc_msgSend(v4, "setAxis:", 1);
    objc_msgSend(v4, "setDistribution:", 0);
    objc_msgSend(v4, "setSpacing:", *(double *)(v0 + OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateFooterView_metrics + 32));
    objc_msgSend(v4, "setAlignment:", 3);
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_10009208C(void *a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  double v6;
  double v7;

  v2 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v3 = (void *)objc_opt_self(UIFont);
  v4 = objc_msgSend(a1, "traitCollection");
  v5 = objc_msgSend(v3, "preferredFontForTextStyle:compatibleWithTraitCollection:", UIFontTextStyleFootnote, v4);

  objc_msgSend(v2, "setFont:", v5);
  objc_msgSend(v2, "setAdjustsFontForContentSizeCategory:", 1);
  objc_msgSend(v2, "setTextAlignment:", 1);
  objc_msgSend(v2, "setNumberOfLines:", 0);
  LODWORD(v6) = 1148846080;
  objc_msgSend(v2, "setContentCompressionResistancePriority:forAxis:", 0, v6);
  LODWORD(v7) = 1148846080;
  objc_msgSend(v2, "setContentHuggingPriority:forAxis:", 0, v7);
  return v2;
}

id sub_1000921C4()
{
  return sub_100090C80(&OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateFooterView____lazy_storage___titleLabel, (uint64_t (*)(uint64_t))sub_10009208C);
}

ValueMetadata *type metadata accessor for DOCSidebarItemContentValueBinding()
{
  return &type metadata for DOCSidebarItemContentValueBinding;
}

uint64_t sub_1000921E8()
{
  uint64_t v0;

  sub_10000CB4C(v0 + OBJC_IVAR____TtC5Files33DOCNodeDiffableDataSourceSnapshot_fpItemSnapshot, (uint64_t *)&unk_100646C20);
  sub_10000CB4C(v0 + OBJC_IVAR____TtC5Files33DOCNodeDiffableDataSourceSnapshot_fiNodeSnapshot, (uint64_t *)&unk_100654FA0);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_100092238(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v6[0] = &unk_1004E8448;
  sub_10008BAF4(319, (unint64_t *)&unk_100654E68, (uint64_t *)&unk_100646C30);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10008BAF4(319, &qword_100654E78, (uint64_t *)&unk_100654E80);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 3, v6, a1 + 80);
    }
  }
}

uint64_t type metadata accessor for DOCNodeDiffableDataSourceSnapshot(uint64_t a1)
{
  uint64_t result;

  result = qword_100654E58;
  if (!qword_100654E58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DOCNodeDiffableDataSourceSnapshot);
  return result;
}

uint64_t sub_100092328(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10009236C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10006922C(&qword_100643198);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000923AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C(&qword_100643198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000923F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C(&qword_100643198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009243C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C(&qword_100643198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009255C(uint64_t result)
{
  _BYTE *v1;
  uint64_t v2;
  int v3;
  void *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v1[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_allowsPickingMultipleItems] = result;
  v2 = OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_needsOverlayUpdateWithAnimation;
  v3 = v1[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_needsOverlayUpdateWithAnimation];
  if (v3 != 2)
  {
    v4 = v1;
    v5 = sub_10002DA34();
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 152))(v5);
    result = swift_release(v5);
    if ((v6 & 1) == 0)
    {
      result = (uint64_t)objc_msgSend(v4, "doc_hasAppearedOrIsAppearing");
      if ((result & 1) != 0)
      {
        v13 = v4;
        v7 = type metadata accessor for DOCBrowserContainedViewController();
        v8 = v4;
        v9 = sub_10006922C(&qword_10064D510);
        if (swift_dynamicCast(&v14, &v13, v7, v9, 6))
        {
          v10 = v3 & 1;
          v11 = *((_QWORD *)&v15 + 1);
          v12 = v16;
          sub_10007E7A0(&v14, *((uint64_t *)&v15 + 1));
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 8))(v10, v11, v12);
          result = sub_100068588(&v14);
        }
        else
        {
          v16 = 0;
          v14 = 0u;
          v15 = 0u;
          result = sub_1001F7F28((uint64_t)&v14);
        }
        *((_BYTE *)v4 + v2) = 2;
      }
    }
  }
  return result;
}

uint64_t sub_100092678(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_isUserInteractionEnabled);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

void sub_1000926C8()
{
  unsigned __int8 *v0;
  uint64_t v1;
  int v2;
  void *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v1 = OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_needsOverlayUpdateWithAnimation;
  v2 = v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_needsOverlayUpdateWithAnimation];
  if (v2 != 2)
  {
    v3 = v0;
    v4 = sub_10002DA34();
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 152))(v4);
    swift_release(v4);
    if ((v5 & 1) == 0)
    {
      if (objc_msgSend(v3, "doc_hasAppearedOrIsAppearing"))
      {
        v12 = v3;
        v6 = type metadata accessor for DOCBrowserContainedViewController();
        v7 = v3;
        v8 = sub_10006922C(&qword_10064D510);
        if (swift_dynamicCast(&v13, &v12, v6, v8, 6))
        {
          v9 = v2 & 1;
          v10 = *((_QWORD *)&v14 + 1);
          v11 = v15;
          sub_10007E7A0(&v13, *((uint64_t *)&v14 + 1));
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 8))(v9, v10, v11);
          sub_100068588(&v13);
        }
        else
        {
          v15 = 0;
          v13 = 0u;
          v14 = 0u;
          sub_1001F7F28((uint64_t)&v13);
        }
        *((_BYTE *)v3 + v1) = 2;
      }
    }
  }
}

uint64_t sub_1000927D8(uint64_t a1)
{
  uint64_t v1;

  swift_unknownObjectWeakAssign(v1 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_actionReporting, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_10009280C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting;
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign(v4, a1);
  return swift_unknownObjectRelease(a1);
}

Swift::Void __swiftcall DOCBrowserContainedViewController.viewDidLoad()()
{
  void *v0;
  objc_super v1;

  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for DOCBrowserContainedViewController();
  objc_msgSendSuper2(&v1, "viewDidLoad");
  sub_1000926C8();
  sub_1001F6FD4(0);
}

uint64_t type metadata accessor for _DOCBrowserHistoryDataSourceBase()
{
  return objc_opt_self(_TtC5Files32_DOCBrowserHistoryDataSourceBase);
}

uint64_t sub_1000929D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100442EBC);
}

uint64_t sub_1000929DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100442E3C);
}

void sub_1000929E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1000AEC44(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_100092A60()
{
  uint64_t v0;

  sub_100092A68(*(_QWORD *)(v0 + 16), *(char **)(v0 + 24));
}

void sub_100092A68(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t (*)(), uint64_t *, char *);
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void (*v19)(__n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(uint64_t (*)(), uint64_t *, char *);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  void **aBlock;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  void *v58;
  void (*v59)();
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;

  v46 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v44 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v41 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = *(_QWORD *)(a1 + 16);
  if (v51)
  {
    v50 = *(_QWORD *)&a2[OBJC_IVAR____TtC5Files32_DOCBrowserHistoryDataSourceBase_state];
    v6 = *(void (**)(uint64_t (*)(), uint64_t *, char *))(*(_QWORD *)v50 + 168);
    v48 = a1 + 32;
    v49 = v6;
    v40 = a1;
    swift_bridgeObjectRetain(a1);
    v7 = 0;
    v47 = &type metadata for ()[8];
    v8 = v41;
    do
    {
      v9 = swift_allocObject(&unk_1005ECBE0, 32, 7);
      v54 = *(_OWORD *)(v48 + 16 * v7);
      *(_OWORD *)(v9 + 16) = v54;
      v10 = swift_allocObject(&unk_1005ECC08, 32, 7);
      *(_QWORD *)(v10 + 16) = sub_100066584;
      *(_QWORD *)(v10 + 24) = v9;
      v63 = 0;
      v61 = 0;
      v62 = 0;
      v11 = __chkstk_darwin(v10);
      *((_BYTE *)&v40 - 48) = 0;
      *(&v40 - 5) = (uint64_t)sub_100066584;
      *(&v40 - 4) = v11;
      *(&v40 - 3) = (uint64_t)&v63;
      *(&v40 - 2) = (uint64_t)&v61;
      v12 = *((_QWORD *)&v54 + 1);
      swift_retain_n(*((_QWORD *)&v54 + 1), 2);
      v49(sub_100447728, &v40 - 8, v47);
      v13 = v61;
      if (v61)
      {
        v14 = v62;
        v15 = *(_QWORD *)(v61 + 16);
        v53 = v10;
        *(_QWORD *)&v54 = v12;
        if (v15)
        {
          v16 = swift_bridgeObjectRetain(v61);
          sub_100092FC4(v16, v14);
          v17 = (uint64_t *)(v13 + 40);
          do
          {
            v19 = (void (*)(__n128))*(v17 - 1);
            v18 = *v17;
            v20 = swift_retain();
            v19(v20);
            swift_release(v18);
            v17 += 2;
            --v15;
          }
          while (v15);
          swift_bridgeObjectRelease(v13);
        }
        else
        {
          swift_bridgeObjectRetain(v61);
          swift_bridgeObjectRetain(v14);
        }
        sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
        v21 = swift_bridgeObjectRetain_n(v14, 2);
        v52 = static OS_dispatch_queue.main.getter(v21);
        v22 = swift_allocObject(&unk_1005ECC80, 32, 7);
        *(_QWORD *)(v22 + 16) = v14;
        *(_QWORD *)(v22 + 24) = a2;
        v59 = (void (*)())sub_100447A3C;
        v60 = v22;
        aBlock = _NSConcreteStackBlock;
        v56 = 1107296256;
        v57 = sub_10004A82C;
        v58 = &unk_1005ECC98;
        v23 = _Block_copy(&aBlock);
        v24 = v60;
        v25 = a2;
        v26 = swift_release(v24);
        static DispatchQoS.unspecified.getter(v26);
        aBlock = (void **)_swiftEmptyArrayStorage;
        v27 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v28 = sub_10006922C((uint64_t *)&unk_100647540);
        v29 = sub_10008825C((unint64_t *)&qword_100641270, (uint64_t *)&unk_100647540);
        v30 = v14;
        v31 = v44;
        v32 = a2;
        v33 = v46;
        dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v28, v29, v46, v27);
        v34 = (void *)v52;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v31, v23);
        _Block_release(v23);

        v35 = v33;
        a2 = v32;
        (*(void (**)(char *, uint64_t))(v45 + 8))(v31, v35);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v43);
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease_n(v30, 2);
        v10 = v53;
        v12 = v54;
      }
      if (v63 == 1)
      {
        v36 = swift_allocObject(&unk_1005ECC30, 24, 7);
        *(_QWORD *)(v36 + 16) = a2;
        v59 = sub_10009303C;
        v60 = v36;
        aBlock = _NSConcreteStackBlock;
        v56 = 1107296256;
        v57 = sub_10004A82C;
        v58 = &unk_1005ECC48;
        v37 = _Block_copy(&aBlock);
        v38 = v60;
        v39 = a2;
        swift_release(v38);
        DOCRunInMainThread(v37);
        _Block_release(v37);
      }
      ++v7;
      sub_100092FF0(v61, v62);
      swift_release(v12);
      swift_release(v10);
    }
    while (v7 != v51);
    swift_bridgeObjectRelease(v40);
  }
}

uint64_t sub_100092F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100442658);
}

uint64_t sub_100092F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004425D0);
}

uint64_t sub_100092F40(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1004E8D40;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for _DOCBrowserHistoryDataSourceBase.ThreadSafeState(uint64_t a1)
{
  return sub_10006BDA4(a1, qword_100655A68, (uint64_t)&nominal type descriptor for _DOCBrowserHistoryDataSourceBase.ThreadSafeState);
}

uint64_t sub_100092FC4(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_100092FF0(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_10009301C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007C6DC(a1, a2, type metadata accessor for _DOCBrowserHistoryDataSourceBase.ThreadSafeState);
}

void sub_10009303C()
{
  uint64_t v0;

  sub_100093044(*(_QWORD *)(v0 + 16));
}

void sub_100093044(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v3 = v2;
  if (qword_100641158 != -1)
  {
    swift_once(&qword_100641158, sub_1000A041C);
    v2 = v3;
  }
  objc_msgSend(v2, "postNotificationName:object:", qword_100672DF0, a1);

}

void sub_1000930D4(uint64_t a1)
{
  uint64_t v1;

  sub_1000930E4(a1, *(_BYTE *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE **)(v1 + 40), *(uint64_t **)(v1 + 48));
}

void sub_1000930E4(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, _BYTE *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v12 = type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v28 - v16;
  if ((a2 & 1) != 0
    || (v18 = (_QWORD *)(a1
                       + *(int *)(type metadata accessor for _DOCBrowserHistoryDataSourceBase.ThreadSafeState(0) + 20)),
        !*v18))
  {
    sub_10007C6DC(a1, (uint64_t)v17, type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet);
    a3(a1);
    sub_10007C6DC(a1, (uint64_t)v15, type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet);
    v24 = sub_100035908((uint64_t)v15, (uint64_t)v17);
    sub_10007C720((uint64_t)v15, type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet);
    sub_10007C720((uint64_t)v17, type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet);
    if ((v24 & 1) == 0)
      *a5 = 1;
    if ((a2 & 1) != 0)
    {
      v25 = a1 + *(int *)(type metadata accessor for _DOCBrowserHistoryDataSourceBase.ThreadSafeState(0) + 20);
      v26 = *a6;
      v27 = a6[1];
      *(_OWORD *)a6 = *(_OWORD *)v25;
      sub_100092FF0(v26, v27);
      *(_QWORD *)v25 = 0;
      *(_QWORD *)(v25 + 8) = 0;
    }
  }
  else
  {
    v19 = (_QWORD *)v18[1];
    v20 = swift_allocObject(&unk_1005ECCD0, 32, 7);
    *(_QWORD *)(v20 + 16) = a3;
    *(_QWORD *)(v20 + 24) = a4;
    swift_bridgeObjectRetain(v19);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
      v19 = sub_1001549E0(0, v19[2] + 1, 1, v19);
    v22 = v19[2];
    v21 = v19[3];
    if (v22 >= v21 >> 1)
      v19 = sub_1001549E0((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
    v19[2] = v22 + 1;
    v23 = &v19[2 * v22];
    v23[4] = sub_100066584;
    v23[5] = v20;
    swift_bridgeObjectRelease(v19);
  }
}

uint64_t sub_1000932F4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000932FC(a1, *(void (**)(_BYTE *))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000932FC(uint64_t a1, void (*a2)(_BYTE *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t result;
  _BYTE v29[16];

  v6 = type metadata accessor for DOCBrowserHistoryItem(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_10006922C(&qword_10064A600);
  __chkstk_darwin(v10);
  v12 = &v29[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v15 = &v29[-v14];
  __chkstk_darwin(v16);
  v18 = &v29[-v17];
  sub_1000271D4(a1, (uint64_t)&v29[-v17], &qword_10064A600);
  sub_1000271D4((uint64_t)v18, (uint64_t)v15, &qword_10064A600);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6) == 1)
  {
    sub_10000CB4C((uint64_t)v15, &qword_10064A600);
  }
  else
  {
    sub_1001D0788((uint64_t)v15, (uint64_t)v9, type metadata accessor for DOCBrowserHistoryItem);
    a2(v9);
    sub_10007C720((uint64_t)v9, type metadata accessor for DOCBrowserHistoryItem);
    sub_10000CB4C((uint64_t)v18, &qword_10064A600);
    sub_100070EDC((uint64_t)v12, (uint64_t)v18, &qword_10064A600);
  }
  v19 = type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet(0);
  v20 = *(int *)(v19 + 20);
  v21 = *(_QWORD *)(a1 + v20);
  swift_retain();
  v22 = swift_bridgeObjectRetain(v21);
  v23 = sub_10008A414(v22, (void (*)(_QWORD))a2);
  swift_bridgeObjectRelease(v21);
  swift_release(a3);
  v24 = *(int *)(v19 + 24);
  v25 = *(_QWORD *)(a1 + v24);
  swift_retain();
  v26 = swift_bridgeObjectRetain(v25);
  v27 = sub_10008A414(v26, (void (*)(_QWORD))a2);
  swift_bridgeObjectRelease(v25);
  swift_release(a3);
  sub_10007C720(a1, type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet);
  result = sub_100070EDC((uint64_t)v18, a1, &qword_10064A600);
  *(_QWORD *)(a1 + v20) = v23;
  *(_QWORD *)(a1 + v24) = v27;
  return result;
}

uint64_t type metadata accessor for DOCSearchControllerStackedLayout()
{
  return objc_opt_self(_TtC5Files32DOCSearchControllerStackedLayout);
}

uint64_t type metadata accessor for DOCItemCollectionCellContentPool()
{
  return objc_opt_self(_TtC5Files32DOCItemCollectionCellContentPool);
}

uint64_t sub_100093588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100086BF0();
  static DispatchQoS.userInitiated.getter();
  v15 = _swiftEmptyArrayStorage;
  v10 = sub_10005A360((unint64_t *)&qword_100643640, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v11 = sub_10006922C((uint64_t *)&unk_100641280);
  v12 = sub_10008825C((unint64_t *)&qword_100643650, (uint64_t *)&unk_100641280);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002DLL, 0x800000010050F3D0, v9, v6, v3, 0);
  qword_100643520 = result;
  return result;
}

ValueMetadata *type metadata accessor for DOCItemCollectionCellContentPool.CellContentPromise()
{
  return &type metadata for DOCItemCollectionCellContentPool.CellContentPromise;
}

id sub_100093754()
{
  uint64_t v0;
  void *v1;
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  id result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __n128 v18;
  unint64_t v19;
  unint64_t v20;
  char v21[24];

  v1 = *(void **)(v0 + 24);
  objc_msgSend(v1, "lock");
  v2 = (unint64_t *)(v0 + 32);
  swift_beginAccess(v0 + 32, v21, 1, 0);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v3 + 64;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = (id)swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
  v10 = 0;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v10 << 6);
LABEL_22:
    v16 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 24 * v12);
    if (v16[2] < 0)
    {
      v17 = *v16;
      v18 = swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()(v18);
      result = (id)swift_release(v17);
    }
  }
  v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v13 >= v8)
    goto LABEL_24;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  ++v10;
  if (v14)
    goto LABEL_21;
  v10 = v13 + 1;
  if (v13 + 1 >= v8)
    goto LABEL_24;
  v14 = *(_QWORD *)(v4 + 8 * v10);
  if (v14)
    goto LABEL_21;
  v10 = v13 + 2;
  if (v13 + 2 >= v8)
    goto LABEL_24;
  v14 = *(_QWORD *)(v4 + 8 * v10);
  if (v14)
    goto LABEL_21;
  v10 = v13 + 3;
  if (v13 + 3 >= v8)
    goto LABEL_24;
  v14 = *(_QWORD *)(v4 + 8 * v10);
  if (v14)
  {
LABEL_21:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_22;
  }
  v15 = v13 + 4;
  if (v15 >= v8)
  {
LABEL_24:
    swift_release(v3);
    v19 = sub_10008AD3C((uint64_t)_swiftEmptyArrayStorage);
    v20 = *v2;
    *v2 = v19;
    return objc_msgSend(v1, "unlock", swift_bridgeObjectRelease(v20).n128_f64[0]);
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      goto LABEL_24;
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_21;
  }
LABEL_26:
  __break(1u);
  return result;
}

id sub_10009392C()
{
  uint64_t v0;

  return sub_100045FB8(*(void (**)(void *))(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_100093940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_10010E4B0(a1, a2, a3, a4, a5, (unint64_t)&unk_1005C79F0, (uint64_t)sub_10009393C, (uint64_t)&unk_1005C7A08);
}

uint64_t type metadata accessor for DOCFileProviderSyncStateObserver()
{
  return objc_opt_self(_TtC5Files32DOCFileProviderSyncStateObserver);
}

uint64_t sub_10009397C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[12];
  unsigned int v19;
  uint64_t (*v20)(_BYTE *);
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v22 = a1;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v8 - 8);
  v21 = v8;
  __chkstk_darwin(v8);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v19 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v20 = *(uint64_t (**)(_BYTE *))(v9 + 104);
  v12 = v20(v11);
  static DispatchQoS.unspecified.getter(v12);
  v23 = _swiftEmptyArrayStorage;
  v13 = sub_10005A360((unint64_t *)&qword_100643640, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10006922C((uint64_t *)&unk_100641280);
  v15 = sub_10008825C((unint64_t *)&qword_100643650, (uint64_t *)&unk_100641280);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v14, v15, v2, v13);
  *(_QWORD *)(v1 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000044, 0x8000000100527960, v7, v4, v11, 0);
  *(_QWORD *)(v1 + 32) = objc_msgSend((id)objc_opt_self(NSHashTable), "hashTableWithOptions:", 517);
  *(_BYTE *)(v1 + 40) = 0;
  v16 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t))v20)(v11, v19, v21);
  static DispatchQoS.unspecified.getter(v16);
  v23 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v14, v15, v2, v13);
  *(_QWORD *)(v1 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000046, 0x80000001005279B0, v7, v4, v11, 0);
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_QWORD *)(v1 + 16) = v22;
  return v1;
}

id sub_100093C30(void *a1)
{
  return objc_msgSend(a1, "didUpdateSyncInAppMessage");
}

void sub_100093C3C(uint64_t a1)
{
  uint64_t v1;

  sub_100093C44(a1, v1);
}

void sub_100093C44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  id v5;
  Class isa;
  id v7;
  void *v8;
  id v9;
  _BYTE v10[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    v5 = sub_10031997C();
    isa = Notification._bridgeToObjectiveC()().super.isa;
    v7 = objc_msgSend(v5, "fetchMessageFromNotification:", isa);

    sub_100094098(v7);
    v8 = *(void **)(v4 + 136);
    *(_QWORD *)(v4 + 136) = v7;
    v9 = v7;

    if (*(_BYTE *)(v4 + 40) == 1)
      sub_100093EA0((uint64_t)sub_100093C30, 0);
    swift_release(v4);

  }
}

double sub_100093D24@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v2 = v1;
  v4 = objc_msgSend(*(id *)(v1 + 16), "storageURLs");
  v5 = type metadata accessor for URL(0);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  v7 = *(_QWORD *)(v6 + 16);
  swift_bridgeObjectRelease(v6);
  if ((DOCGuardAssert(_:_:logOnlyIfDebugging:logOnlyIfUnitTesting:)(v7 != 0, sub_10031A1B4, v2, 0, 0) & 1) != 0)
  {
    v8 = objc_msgSend(*(id *)(v2 + 16), "storageURLs");
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v5);

    v10 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v9 + 16))
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16))(a1, v9 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v5);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v5);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, 1, 1, v5);
    }
    *(_QWORD *)&result = swift_bridgeObjectRelease(v9).n128_u64[0];
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 1, 1, v5);
  }
  return result;
}

uint64_t sub_100093E6C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

void sub_100093E94()
{
  uint64_t *v0;

  sub_10000AB64(v0[2], v0[3], v0[4]);
}

uint64_t sub_100093EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[5];
  _QWORD *v23;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v2 + 24);
  v13 = (_QWORD *)swift_allocObject(&unk_1005DD490, 40, 7);
  v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_100093E94;
  v23 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = &unk_1005DD4A8;
  v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  v21 = _swiftEmptyArrayStorage;
  v16 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10006922C((uint64_t *)&unk_100647540);
  v18 = sub_10008825C((unint64_t *)&qword_100641270, (uint64_t *)&unk_100647540);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v23);
}

void sub_100094098(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __n128 v32;
  id v33;
  void *v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __n128 v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  __n128 v67;
  os_log_t v68;
  uint64_t v69;
  __n128 v70;
  os_log_t v71;
  int v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v71 - v10;
  if (a1)
  {
    v12 = a1;
    v13 = objc_msgSend(v12, "contentTypeDescription");
    v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v15 = v14;

    v16 = objc_msgSend(v12, "title");
    if (v16)
    {
      v17 = v16;
      v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

    }
    else
    {
      v19 = 0xE300000000000000;
      v77 = 4271950;
    }
    v33 = objc_msgSend(v12, "subTitle");
    if (v33)
    {
      v34 = v33;
      v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v82 = v35;

    }
    else
    {
      v82 = 0xE300000000000000;
      v76 = 4271950;
    }
    v36 = objc_msgSend(v12, "actions");
    v37 = sub_10004F2F0(0, &qword_1006431A0, DOCICloudQuotaInAppAction_ptr);
    v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v36, v37);

    if ((unint64_t)v38 >> 62)
    {
      if (v38 < 0)
        v49 = v38;
      else
        v49 = v38 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v38);
      v50 = _CocoaArrayWrapper.endIndex.getter(v49);
      swift_bridgeObjectRelease(v38);
      v81 = v12;
      if (v50)
        goto LABEL_12;
    }
    else
    {
      v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
      v81 = v12;
      if (v39)
      {
LABEL_12:
        if ((v38 & 0xC000000000000001) != 0)
        {
          v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v38);
        }
        else
        {
          if (!*(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          v40 = *(id *)(v38 + 32);
        }
        v41 = v40;
        v42 = objc_msgSend(v40, "title", swift_bridgeObjectRelease(v38).n128_f64[0]);

        v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        v44 = v43;

        goto LABEL_22;
      }
    }
    v75 = 4271950;
    swift_bridgeObjectRelease(v38);
    v44 = 0xE300000000000000;
LABEL_22:
    v51 = Logger.FileProviderSyncState.unsafeMutableAddressor(v45);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, v51, v4);
    swift_retain_n(v2, 2);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v19);
    v52 = v82;
    swift_bridgeObjectRetain(v82);
    v53 = swift_bridgeObjectRetain(v44);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.info.getter();
    v56 = v55;
    if (os_log_type_enabled(v54, v55))
    {
      v57 = swift_slowAlloc(52, -1);
      v72 = v56;
      v58 = v57;
      v73 = swift_slowAlloc(160, -1);
      v84 = v73;
      *(_DWORD *)v58 = 136316162;
      v80 = v5;
      v59 = objc_msgSend(*(id *)(v2 + 16), "domainFullDisplayName");
      v79 = v4;
      v60 = v59;
      v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
      v74 = v11;
      v71 = v54;
      v62 = v19;
      v63 = v61;
      v64 = v2;
      v66 = v65;

      v83 = sub_1000544FC(v63, v66, &v84);
      v67 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84);
      swift_release_n(v64, 2, v67);
      swift_bridgeObjectRelease(v66);
      *(_WORD *)(v58 + 12) = 2080;
      swift_bridgeObjectRetain(v15);
      v83 = sub_1000544FC(v78, v15, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84);
      swift_bridgeObjectRelease_n(v15, 3);
      *(_WORD *)(v58 + 22) = 2080;
      swift_bridgeObjectRetain(v62);
      v83 = sub_1000544FC(v77, v62, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84);
      swift_bridgeObjectRelease_n(v62, 3);
      *(_WORD *)(v58 + 32) = 2080;
      swift_bridgeObjectRetain(v52);
      v83 = sub_1000544FC(v76, v52, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84);
      swift_bridgeObjectRelease_n(v52, 3);
      *(_WORD *)(v58 + 42) = 2080;
      swift_bridgeObjectRetain(v44);
      v83 = sub_1000544FC(v75, v44, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84);
      swift_bridgeObjectRelease_n(v44, 3);
      v68 = v71;
      _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v72, "Publishing %s quota message: content type = %s, title = %s, subtitle = %s, action = %s.", (uint8_t *)v58, 0x34u);
      v69 = v73;
      swift_arrayDestroy(v73, 5, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v58, -1, -1);

      (*(void (**)(char *, uint64_t))(v80 + 8))(v74, v79);
      return;
    }

    swift_bridgeObjectRelease_n(v44, 2);
    swift_bridgeObjectRelease_n(v52, 2);
    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease_n(v15, 2);
    swift_release_n(v2, 2, v70);
    v47 = *(void (**)(char *, uint64_t))(v5 + 8);
    v48 = v11;
    goto LABEL_25;
  }
  v20 = Logger.FileProviderSyncState.unsafeMutableAddressor(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v20, v4);
  v21 = swift_retain_n(v2, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v80 = v5;
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v79 = v4;
    v26 = v25;
    *(_DWORD *)v24 = 136315138;
    v84 = v25;
    v82 = (unint64_t)(v24 + 4);
    v27 = v2;
    v28 = objc_msgSend(*(id *)(v2 + 16), "domainFullDisplayName");
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

    v83 = sub_1000544FC(v29, v31, &v84);
    v32 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84);
    swift_release_n(v27, 2, v32);
    swift_bridgeObjectRelease(v31);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Unpublishing %s quota message", v24, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v79);
    return;
  }

  swift_release_n(v2, 2, v46);
  v47 = *(void (**)(char *, uint64_t))(v5 + 8);
  v48 = v8;
LABEL_25:
  v47(v48, v4);
}

void sub_1000947AC(uint64_t a1, void (*a2)(void), void (*a3)(void))
{
  id v6;
  unsigned __int8 v7;

  if (objc_msgSend(*(id *)(a1 + 16), "isMainiCloudDriveDomain"))
    a2();
  v6 = *(id *)(a1 + 16);
  if ((objc_msgSend(v6, "isiCloudDriveProvider") & 1) != 0)
  {

  }
  else
  {
    v7 = objc_msgSend(v6, "isUsingFPFS");

    if ((v7 & 1) == 0)
      return;
  }
  a3();
}

void sub_100094834()
{
  uint64_t v0;

  sub_1000947AC(v0, (void (*)(void))sub_10001049C, (void (*)(void))sub_100008ECC);
}

uint64_t sub_10009485C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)(v2 + 48);
  aBlock[4] = a1;
  v23 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = a2;
  v13 = _Block_copy(aBlock);
  v14 = v12;
  swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  v21 = _swiftEmptyArrayStorage;
  v16 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10006922C((uint64_t *)&unk_100647540);
  v18 = sub_10008825C((unint64_t *)&qword_100641270, (uint64_t *)&unk_100647540);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release(v23);
}

uint64_t sub_100094A30()
{
  return sub_10009485C((uint64_t)sub_100094834, (uint64_t)&unk_1005DD458);
}

uint64_t sub_100094A44()
{
  uint64_t v0;

  return sub_100094A4C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100094A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (result)
  {
    v6 = result;
    objc_msgSend(*(id *)(a2 + 32), "addObject:", result);
    if ((*(_BYTE *)(a2 + 40) & 1) == 0)
    {
      *(_BYTE *)(a2 + 40) = 1;
      sub_100094A30();
    }
    return swift_unknownObjectRelease(v6);
  }
  return result;
}

uint64_t sub_100094AC8(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 256, 0, v2, a1 + 640);
}

uint64_t sub_100094AFC(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 256, 1, &v2, a1 + 248);
}

uint64_t type metadata accessor for DOCFileOperationCollectionSource(uint64_t a1)
{
  uint64_t result;

  result = qword_10064B870;
  if (!qword_10064B870)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DOCFileOperationCollectionSource);
  return result;
}

uint64_t sub_100094B7C()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = *(id *)(v0 + 48);
  v2 = DOCFileOperationsManager.unorderedFileOperations.getter();

  return v2;
}

void sub_100094BB0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[24];
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  char *v36;
  void *v37;
  void *v38;
  char *v39;
  char *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  char *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  char *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  char *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  char *v110;
  char *v111;
  void *v112;
  uint64_t v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  char *v122;
  void *v123;
  void *v124;
  void *v125;
  char *v126;
  void *v127;
  void *v128;

  v8[0] = &unk_1004DC390;
  v8[1] = &unk_1004DC3A8;
  v8[2] = &unk_1004DC3A8;
  v8[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v8[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v8[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[6] = &unk_1004DC3A8;
  v8[7] = &unk_1004DC3A8;
  v8[8] = &unk_1004DC3C0;
  v8[9] = &unk_1004DC3D8;
  v8[10] = &unk_1004DC3A8;
  v8[11] = &unk_1004DC3C0;
  v8[12] = &unk_1004DC3A8;
  v8[13] = &unk_1004DC3F0;
  v8[14] = &unk_1004DC3C0;
  v8[15] = &unk_1004DC3A8;
  v8[16] = &unk_1004DC3A8;
  v8[17] = &unk_1004DC3A8;
  v8[18] = &unk_1004DC3A8;
  v8[19] = &unk_1004DC3D8;
  v8[20] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v8[21] = &unk_1004DC408;
  v8[22] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[23] = &unk_1004DC390;
  sub_1000B1D24(319, (unint64_t *)&qword_1006499B0, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath);
  if (v3 <= 0x3F)
  {
    v9 = *(_QWORD *)(v2 - 8) + 64;
    v10 = &unk_1004DC3A8;
    v11 = &unk_1004DC3A8;
    v12 = &unk_1004DC3A8;
    v13 = &unk_1004DC3A8;
    v14 = &unk_1004DC390;
    v15 = &unk_1004DC3C0;
    v16 = &unk_1004DC420;
    v17 = (char *)&value witness table for Builtin.BridgeObject + 64;
    v18 = &unk_1004DC408;
    v19 = &unk_1004DC3C0;
    v20 = &unk_1004DC3C0;
    v21 = &unk_1004DC3C0;
    v22 = &unk_1004DC3A8;
    v23 = &unk_1004DC3A8;
    v24 = &unk_1004DC3A8;
    v25 = &unk_1004DC438;
    v26 = &unk_1004DC438;
    v27 = &unk_1004DC438;
    v28 = &unk_1004DC438;
    v29 = &unk_1004DC438;
    v30 = &unk_1004DC438;
    v31 = &unk_1004DC438;
    v32 = &unk_1004DC438;
    v33 = &unk_1004DC438;
    v34 = &unk_1004DC450;
    v35 = &unk_1004DC3C0;
    v36 = (char *)&value witness table for Builtin.Int64 + 64;
    v37 = &unk_1004DC3D8;
    v38 = &unk_1004DC3D8;
    v39 = (char *)&value witness table for Builtin.NativeObject + 64;
    v40 = (char *)&value witness table for Builtin.NativeObject + 64;
    v41 = &unk_1004DC3A8;
    v42 = &unk_1004DC3C0;
    v43 = &unk_1004DC3C0;
    v44 = &unk_1004DC468;
    v45 = &unk_1004DC3C0;
    v46 = &unk_1004DC3A8;
    v47 = v9;
    v48 = &unk_1004DC480;
    v49 = &unk_1004DC498;
    v50 = (char *)&value witness table for Builtin.NativeObject + 64;
    v51 = &unk_1004DC3C0;
    v52 = &unk_1004DC3A8;
    v53 = &unk_1004DC3A8;
    v54 = &unk_1004DC3A8;
    v55 = (char *)&value witness table for Builtin.Int32 + 64;
    v56 = (char *)&value witness table for Builtin.BridgeObject + 64;
    v57 = v9;
    v58 = (char *)&value witness table for Builtin.BridgeObject + 64;
    v59 = &unk_1004DC3A8;
    v60 = &unk_1004DC3A8;
    v61 = &unk_1004DC3A8;
    v62 = &unk_1004DC3C0;
    v63 = (char *)&value witness table for Builtin.UnknownObject + 64;
    sub_1000B1D24(319, &qword_100646360, (uint64_t (*)(uint64_t))&type metadata accessor for UICollectionLayoutListConfiguration);
    if (v5 <= 0x3F)
    {
      v64 = *(_QWORD *)(v4 - 8) + 64;
      v65 = &unk_1004DC3A8;
      v66 = &unk_1004DC4B0;
      v67 = &unk_1004DC3A8;
      v68 = &unk_1004DC3A8;
      v69 = &unk_1004DC3A8;
      v70 = &unk_1004DC4C8;
      v71 = &unk_1004DC4E0;
      v72 = &unk_1004DC3A8;
      v73 = &unk_1004DC3A8;
      v74 = &unk_1004DC4F8;
      v75 = &unk_1004DC4E0;
      v76 = &unk_1004DC3A8;
      v77 = &unk_1004DC3A8;
      v78 = &unk_1004DC3A8;
      v79 = &unk_1004DC3C0;
      v80 = &unk_1004DC510;
      v81 = &unk_1004DC3C0;
      v82 = (char *)&value witness table for Builtin.Int64 + 64;
      v83 = &unk_1004DC3C0;
      v84 = &unk_1004DC3A8;
      v85 = &unk_1004DC3C0;
      v86 = &unk_1004DC390;
      v87 = &unk_1004DC3C0;
      v88 = &unk_1004DC3A8;
      v89 = &unk_1004DC3A8;
      v90 = &unk_1004DC3A8;
      v91 = &unk_1004DC3C0;
      v92 = &unk_1004DC3C0;
      v93 = &unk_1004DC3A8;
      v94 = &unk_1004DC3A8;
      v95 = &unk_1004DC3A8;
      v96 = &unk_1004DC3C0;
      v97 = &unk_1004DC3C0;
      v98 = &unk_1004DC528;
      v99 = &unk_1004DC3C0;
      v100 = &unk_1004DC3C0;
      v101 = &unk_1004DC3C0;
      v102 = &unk_1004DC3C0;
      v103 = &unk_1004DC3C0;
      v104 = &unk_1004DC3A8;
      v105 = &unk_1004DC3C0;
      v106 = &unk_1004DC528;
      v107 = &unk_1004DC3A8;
      v108 = &unk_1004DC3D8;
      v109 = &unk_1004DC540;
      v110 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v111 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v112 = &unk_1004DC558;
      sub_1000B1D24(319, &qword_100646368, type metadata accessor for ScrollPositionInfo);
      if (v7 <= 0x3F)
      {
        v113 = *(_QWORD *)(v6 - 8) + 64;
        v114 = &unk_1004DC3C0;
        v115 = &unk_1004DC3C0;
        v116 = &unk_1004DC3C0;
        v117 = &unk_1004DC3C0;
        v118 = &unk_1004DC3C0;
        v119 = &unk_1004DC570;
        v120 = &unk_1004DC3C0;
        v121 = &unk_1004DC3C0;
        v122 = (char *)&value witness table for Builtin.NativeObject + 64;
        v123 = &unk_1004DC3A8;
        v124 = &unk_1004DC3A8;
        v125 = &unk_1004DC3A8;
        v126 = (char *)&value witness table for Builtin.BridgeObject + 64;
        v127 = &unk_1004DC3A8;
        v128 = &unk_1004DC3A8;
        swift_updateClassMetadata2(a1, 256, 144, v8, a1 + 608);
      }
    }
  }
}

void sub_100094F40()
{
  DOCItemCollectionViewController.updateOverlay(animated:)(0);
}

uint64_t sub_100094F70()
{
  uint64_t v0;

  return sub_100029710(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_100094F78(uint64_t a1, int a2, int a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  BOOL v31;
  char *v32;
  char v33;
  unint64_t v34;
  char *v35;
  unsigned int v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t inited;
  uint64_t v41;
  char *v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void (*v53)(char *, unint64_t, uint64_t);
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t, uint64_t);
  Class isa;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t Strong;
  void *v101;
  id v102;
  __n128 v103;
  char *v104;
  uint64_t v105;
  BOOL v106;
  __n128 v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(char *, uint64_t, uint64_t);
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  void *v118;
  char *v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char v126[40];
  uint64_t v127[3];
  uint64_t v128;
  _BYTE v129[32];

  LODWORD(v121) = a3;
  LODWORD(v120) = a2;
  v5 = type metadata accessor for Logger(0);
  v122 = *(_QWORD *)(v5 - 8);
  v123 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10006922C((uint64_t *)&unk_100642710);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v110 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v110 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v110 - v18;
  v20 = type metadata accessor for IndexPath(0);
  v21 = __chkstk_darwin(v20);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v110 - v23;
  v25 = __chkstk_darwin(v22);
  __chkstk_darwin(v25);
  v30 = *(void **)&v3[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
  if (v30)
    v31 = a1 == 0;
  else
    v31 = 1;
  if (!v31)
  {
    v32 = v3;
    v114 = v19;
    v112 = v29;
    v113 = (char *)&v110 - v26;
    v119 = v7;
    v33 = v120;
    v116 = v14;
    v115 = v28;
    v125 = v27;
    v117 = v11;
    v124 = v30;
    v34 = (unint64_t)sub_100096D88(a1);
    v35 = &v3[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode];
    swift_beginAccess(v35, v129, 0, 0);
    v31 = *(_QWORD *)v35 == 2;
    v118 = v32;
    if (v31)
    {
      swift_bridgeObjectRetain(v34);
      v36 = objc_msgSend(v32, "isEditing");
      v47 = v125;
      v48 = v33;
      if (v36
        || (v37 = *(char **)&v32[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__selectedChildNode]) == 0)
      {
        swift_bridgeObjectRelease(v34);
      }
      else
      {
        v38 = v34;
        v39 = sub_10006922C((uint64_t *)&unk_1006441A0);
        inited = swift_initStackObject(v39, v126);
        *(_OWORD *)(inited + 16) = xmmword_1004D9B40;
        *(_QWORD *)(inited + 32) = v37;
        v127[0] = inited;
        specialized Array._endMutation()(inited);
        v41 = v127[0];
        swift_unknownObjectRetain_n(v37, 2);
        v42 = sub_100096D88(v41);
        v43 = swift_bridgeObjectRelease(v41);
        if (*((_QWORD *)v42 + 2))
        {
          v44 = v125;
          v45 = (uint64_t)v114;
          (*(void (**)(char *, char *, uint64_t, __n128))(v125 + 16))(v114, &v42[(*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80)], v20, v43);
          v46 = 0;
        }
        else
        {
          v46 = 1;
          v44 = v125;
          v45 = (uint64_t)v114;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v45, v46, 1, v20);
        v103 = swift_bridgeObjectRelease(v42);
        v47 = v44;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v44 + 48))(v45, 1, v20, v103) == 1)
        {
          v34 = v38;
          swift_bridgeObjectRelease(v38);
          swift_unknownObjectRelease(v37);
          sub_10000CB4C(v45, (uint64_t *)&unk_100642710);
        }
        else
        {
          v114 = v37;
          v104 = v113;
          v111 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 32);
          v105 = v111(v113, v45, v20);
          __chkstk_darwin(v105);
          *(&v110 - 2) = (uint64_t)v104;
          v106 = sub_100173AD4((uint64_t (*)(char *))sub_1001CA4F8, (_BOOL8)(&v110 - 4), v38, (uint64_t (*)(_QWORD))&type metadata accessor for IndexPath, (uint64_t *)&unk_100642710);
          v107 = swift_bridgeObjectRelease(v38);
          if (v106)
          {
            (*(void (**)(char *, uint64_t, __n128))(v44 + 8))(v104, v20, v107);
            swift_unknownObjectRelease(v114);
            v47 = v44;
            v34 = v38;
          }
          else
          {
            (*(void (**)(uint64_t, char *, uint64_t, __n128))(v44 + 16))(v112, v104, v20, v107);
            v34 = v38;
            if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
              v34 = sub_100153D0C(0, *(_QWORD *)(v38 + 16) + 1, 1, v38);
            v109 = *(_QWORD *)(v34 + 16);
            v108 = *(_QWORD *)(v34 + 24);
            if (v109 >= v108 >> 1)
              v34 = sub_100153D0C(v108 > 1, v109 + 1, 1, v34);
            *(_QWORD *)(v34 + 16) = v109 + 1;
            v47 = v125;
            v111((char *)(v34+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(_QWORD *)(v125 + 72) * v109), v112, v20);
            swift_unknownObjectRelease(v114);
            (*(void (**)(char *, uint64_t))(v47 + 8))(v113, v20);
          }
        }
      }
    }
    else
    {
      v47 = v125;
      v48 = v33;
    }
    v49 = *(_QWORD *)(v34 + 16);
    v120 = v34;
    if (v49)
    {
      v50 = v34 + ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80));
      v51 = *(_QWORD *)(v47 + 72);
      v52 = v34;
      v53 = *(void (**)(char *, unint64_t, uint64_t))(v47 + 16);
      swift_bridgeObjectRetain_n(v52, 2);
      v54 = v48 & 1;
      while (1)
      {
        v53(v17, v50, v20);
        v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
        v55(v17, 0, 1, v20);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v17, 1, v20) == 1)
          break;
        (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v24, v17, v20);
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v124, "selectItemAtIndexPath:animated:scrollPosition:", isa, v54, 0);

        v47 = v125;
        (*(void (**)(char *, uint64_t))(v125 + 8))(v24, v20);
        v50 += v51;
        if (!--v49)
          goto LABEL_18;
      }
    }
    else
    {
      v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
      swift_bridgeObjectRetain_n(v34, 2);
LABEL_18:
      v55(v17, 1, 1, v20);
    }
    swift_bridgeObjectRelease_n(v120, 3);
    v57 = v118;
    v58 = (uint64_t)sub_100034068(0);
    v59 = v58;
    v61 = v122;
    v60 = v123;
    v62 = v119;
    v63 = (char)v121;
    v64 = (uint64_t)v117;
    if ((unint64_t)v58 >> 62)
    {
      if (v58 >= 0)
        v58 &= 0xFFFFFFFFFFFFFF8uLL;
      v65 = _CocoaArrayWrapper.endIndex.getter(v58);
    }
    else
    {
      v65 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v59);
    if (v65 == 1)
    {
      v67 = sub_100034068(0);
      v68 = sub_100096D88((uint64_t)v67);
      v69 = swift_bridgeObjectRelease(v67);
      v70 = *((_QWORD *)v68 + 2);
      if (v70)
      {
        v71 = v125;
        v72 = (uint64_t)v116;
        (*(void (**)(char *, char *, uint64_t, __n128))(v125 + 16))(v116, &v68[((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(_QWORD *)(v125 + 72) * (v70 - 1)], v20, v69);
        v73 = 0;
      }
      else
      {
        v73 = 1;
        v71 = v125;
        v72 = (uint64_t)v116;
      }
      v55((char *)v72, v73, 1, v20);
      v74 = swift_bridgeObjectRelease(v68);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v71 + 48))(v72, 1, v20, v74) == 1)
      {
        v66 = sub_10000CB4C(v72, (uint64_t *)&unk_100642710);
      }
      else
      {
        v75 = v115;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 32))(v115, v72, v20);
        v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16);
        v76(v64, v75, v20);
        v55((char *)v64, 0, 1, v20);
        sub_100244284(v64);
        sub_10000CB4C(v64, (uint64_t *)&unk_100642710);
        v76(v64, v75, v20);
        v55((char *)v64, 0, 1, v20);
        v77 = v64;
        v78 = *(_QWORD *)&v124[OBJC_IVAR____TtC5Files21DOCItemCollectionView_focusableCollectionViewState];
        v79 = v78 + OBJC_IVAR____TtC5Files31DOCFocusableCollectionViewState_indexPathForMostRecentlySelectedItem;
        swift_beginAccess(v78 + OBJC_IVAR____TtC5Files31DOCFocusableCollectionViewState_indexPathForMostRecentlySelectedItem, v127, 33, 0);
        swift_retain();
        sub_10008BB40(v77, v79, (uint64_t *)&unk_100642710);
        swift_endAccess(v127);
        swift_release(v78);
        v80 = v75;
        v61 = v122;
        v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 8))(v80, v20);
      }
      v60 = v123;
    }
    if ((v63 & 1) != 0)
    {
      v81 = Logger.UI.unsafeMutableAddressor(v66);
      (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v62, v81, v60);
      v82 = v57;
      v83 = Logger.logObject.getter(v82);
      v84 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v83, v84))
      {
        v85 = swift_slowAlloc(32, -1);
        v86 = (_QWORD *)swift_slowAlloc(8, -1);
        v121 = v86;
        v125 = swift_slowAlloc(64, -1);
        v127[0] = v125;
        *(_DWORD *)v85 = 136315650;
        v128 = sub_1000544FC(0xD000000000000033, 0x8000000100517120, v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
        *(_WORD *)(v85 + 12) = 2112;
        v128 = (uint64_t)v82;
        v87 = v82;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
        *v86 = v82;

        *(_WORD *)(v85 + 22) = 2080;
        v88 = sub_100034068(0);
        v89 = sub_10006922C((uint64_t *)&unk_1006424B0);
        v90 = Array.description.getter(v88, v89);
        v92 = v91;
        swift_bridgeObjectRelease(v88);
        v128 = sub_1000544FC(v90, v92, v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);

        swift_bridgeObjectRelease(v92);
        _os_log_impl((void *)&_mh_execute_header, v83, v84, "%s calling didSelect in column mode to reset info panel %@ selectedNodes: %s", (uint8_t *)v85, 0x20u);
        v93 = sub_10006922C(&qword_100643AB0);
        v94 = v121;
        swift_arrayDestroy(v121, 1, v93);
        swift_slowDealloc(v94, -1, -1);
        v95 = v125;
        swift_arrayDestroy(v125, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v95, -1, -1);
        swift_slowDealloc(v85, -1, -1);

        (*(void (**)(char *, uint64_t))(v122 + 8))(v119, v123);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v60);
      }
      type metadata accessor for DOCConcreteSelectionLocation();
      v96 = sub_100034068(0);
      v97 = sub_1004950C4((uint64_t)v96);
      if (v97)
      {
        v99 = (void *)v97;
        Strong = swift_unknownObjectWeakLoadStrong(&v82[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_actionReporting], v98);
        if (Strong)
        {
          v101 = (void *)Strong;
          v102 = objc_retain(*(id *)&v82[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration
                                       + 24]);
          objc_msgSend(v101, "didSelectLocation:atParentLocation:", v99, v102);

          swift_unknownObjectRelease(v101);
        }
        else
        {

        }
      }
    }

  }
}

void sub_100095AA8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  DOCItemCollectionViewController.getCurrentLocation()();
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, "node");

    if (v4)
    {
      sub_100095D98();
      if (v5)
      {
        v7 = (uint64_t)v5;
        v8 = v6;
        v9 = v5(_swiftEmptyArrayStorage);
        sub_100087534(v7, v8);
      }
      else
      {
        v9 = 0;
      }
      if ((objc_msgSend(v4, "isRootItem") & 1) == 0
        && (*(_BYTE *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_editingMode) != 2
         || objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration), "isPickerUI")))
      {
        v10 = 1;
LABEL_12:
        v11 = swift_allocObject(&unk_1005F10F8, 24, 7);
        swift_unknownObjectWeakInit(v11 + 16);
        v12 = swift_allocObject(&unk_1005F1238, 48, 7);
        *(_QWORD *)(v12 + 16) = v11;
        *(_BYTE *)(v12 + 24) = v10;
        *(_QWORD *)(v12 + 32) = v4;
        *(_QWORD *)(v12 + 40) = v9;
        return;
      }
      if (v9)
      {
        v10 = 0;
        goto LABEL_12;
      }
      swift_unknownObjectRelease(v4);
    }
  }
}

id sub_100095BFC()
{
  char *v0;
  char *v1;
  id result;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  if (qword_1006410A8 != -1)
    swift_once(&qword_1006410A8, sub_1000AA544);
  result = objc_msgSend(*(id *)(qword_100672D18 + 40), "forceDisplayFilenameExtensions");
  v3 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_isShowingAllFilenameExtensions;
  if ((_DWORD)result != v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_isShowingAllFilenameExtensions])
  {
    if (*(_QWORD *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection])
    {
      v4 = (char)result;
      v5 = sub_10004FD50();
      DOCItemCollectionViewController.items.setter(v5);
      v6 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController];
      v7 = swift_bridgeObjectRetain(v6);
      sub_100039F10(v7, 257);
      swift_bridgeObjectRelease(v6);
      v8 = objc_msgSend(v0, "presentedViewController");
      if (!v8)
      {
LABEL_12:
        v1[v3] = v4;
        return (id)sub_100014AAC();
      }
      v9 = v8;
      v10 = type metadata accessor for DOCSearchController();
      v11 = (char *)swift_dynamicCastClass(v9, v10);
      if (!v11 || (v12 = v11, result = objc_msgSend(v11, "isActive"), !(_DWORD)result))
      {

        goto LABEL_12;
      }
      v13 = *(char **)&v12[OBJC_IVAR____TtC5Files19DOCSearchController_resultCollectionViewController];
      if (*(_QWORD *)&v13[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection])
      {
        v14 = v13;
        v15 = sub_10004FD50();
        DOCItemCollectionViewController.items.setter(v15);
        v16 = *(_QWORD *)&v14[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController];
        v17 = swift_bridgeObjectRetain(v16);
        sub_100039F10(v17, 257);

        swift_bridgeObjectRelease(v16);
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

void sub_100095D98()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;

  DOCItemCollectionViewController.getCurrentLocation()();
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, "node");
    if (v3)
    {
      v4 = v3;
      if (objc_msgSend(v3, "isRootItem"))
      {

        swift_unknownObjectRelease(v4);
        return;
      }
      if (*(_BYTE *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_editingMode) == 2)
      {
        v5 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration), "isPickerUI");
        swift_unknownObjectRelease(v4);
        if ((v5 & 1) == 0)
          goto LABEL_7;
      }
      else
      {
        swift_unknownObjectRelease(v4);
      }
      v6 = swift_allocObject(&unk_1005F10F8, 24, 7);
      swift_unknownObjectWeakInit(v6 + 16);
      v7 = swift_allocObject(&unk_1005F1260, 32, 7);
      *(_QWORD *)(v7 + 16) = v6;
      *(_QWORD *)(v7 + 24) = v2;
      return;
    }
LABEL_7:

  }
}

uint64_t sub_100095F28(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  __n128 v16;
  os_log_type_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v2 = v1;
  v4 = sub_10006922C(&qword_1006438A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v28 = a1;
    else
      v28 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v12 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v13 = Logger.AppIntents.unsafeMutableAddressor(v9);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = Logger.logObject.getter(v14);
  v17 = static os_log_type_t.info.getter(v16);
  if (os_log_type_enabled(v15, v17))
  {
    v18 = (_DWORD *)swift_slowAlloc(32, -1);
    v29 = v2;
    v19 = v18;
    *v18 = 134218496;
    v20 = 500;
    if (v12 < 500)
      v20 = v12;
    v30 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    *((_WORD *)v19 + 6) = 2048;
    v30 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    *((_WORD *)v19 + 11) = 2048;
    v30 = 500;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    _os_log_impl((void *)&_mh_execute_header, v15, v17, "Donating %ld out of %ld visible items to Siri Vocabulary (corpus capacity: %ld.", (uint8_t *)v19, 0x20u);
    v21 = v19;
    v2 = v29;
    swift_slowDealloc(v21, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v22 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v6, 1, 1, v22);
  type metadata accessor for MainActor(0);
  swift_bridgeObjectRetain(a1);
  v23 = v2;
  v24 = static MainActor.shared.getter(v23);
  v25 = (_QWORD *)swift_allocObject(&unk_1005F2A38, 56, 7);
  v25[2] = v24;
  v25[3] = &protocol witness table for MainActor;
  v25[4] = v23;
  v25[5] = a1;
  v25[6] = 500;
  v26 = sub_100174E78((uint64_t)v6, (uint64_t)&unk_100658E90, (uint64_t)v25);
  return swift_release(v26);
}

uint64_t sub_1000961BC()
{
  uint64_t v0;

  return sub_10000B808(v0);
}

void sub_1000961C4()
{
  uint64_t v0;

  sub_1000961D0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

void sub_1000961D0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5, v6);
  if (Strong)
  {
    v8 = (void *)Strong;
    v9 = *(_QWORD *)(Strong + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_pendingTitleMenuContext);
    if (v9)
    {
      v10 = a2 + OBJC_IVAR____TtCC5Files31DOCItemCollectionViewController16TitleMenuContext_requestID;
      v11 = v9 + OBJC_IVAR____TtCC5Files31DOCItemCollectionViewController16TitleMenuContext_requestID;
      swift_retain(a2);
      swift_retain(v9);
      LOBYTE(v10) = static UUID.== infix(_:_:)(v10, v11);
      swift_release(a2);
      v12 = swift_release(v9);
      if ((v10 & 1) != 0)
        a3(v12);
    }

  }
}

void sub_10009629C()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  _BYTE *v19;
  char v20;
  void *v21;
  int v22;
  void *v23;
  __n128 v24;
  _QWORD *v25;
  char v26;
  char v27;
  unint64_t v28;
  char v29;
  void (*v30)(_BYTE *, uint64_t, uint64_t, uint64_t, __n128);
  _BYTE *v31;
  uint64_t v32;
  char v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void **v45;
  unint64_t v46;
  void *v47;
  __n128 v48;
  id v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[4];
  unsigned int v71;
  id v72;
  id v73;
  uint64_t v74;
  void (*v75)(_BYTE *, uint64_t, uint64_t, uint64_t, __n128);
  id v76;
  _BYTE *v77;
  _BYTE *v78;
  _BYTE *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void **aBlock;
  unint64_t v85;
  uint64_t (*v86)(uint64_t);
  void *v87;
  uint64_t (*v88)();
  uint64_t v89;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v83 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = &v70[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for DispatchQoS(0);
  v81 = *(_QWORD *)(v5 - 8);
  v82 = v5;
  __chkstk_darwin(v5);
  v7 = &v70[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_10006922C((uint64_t *)&unk_100646BD0);
  v9 = __chkstk_darwin(v8);
  v11 = &v70[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v70[-v12];
  v14 = type metadata accessor for RestorableSettings(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = &v70[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = *(void **)&v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_documentManager];
  if (!v18
    || (v19 = objc_msgSend(v18, "activeDocumentCreationSession")) == 0
    || (v20 = v19[OBJC_IVAR____TtCC5Files18DOCDocumentManager23DocumentCreationSession_isDisablingScreenUpdates],
        v19,
        (v20 & 1) == 0))
  {
    if ((objc_msgSend(v1, "doc_hasDisappearedOrIsDisappearing") & 1) == 0)
    {
      sub_100097E58();
      if ((_BYTE)v22 != 0xFF)
      {
        v78 = v17;
        v79 = v4;
        v23 = v21;
        v80 = v22;
        if (qword_100640E38 != -1)
          swift_once(&qword_100640E38, sub_10009870C);
        v24 = swift_beginAccess(&off_100645FC0, &aBlock, 32, 0);
        v25 = off_100645FC0;
        if (!*((_QWORD *)off_100645FC0 + 2))
        {
          (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56))(v13, 1, 1, v14, v24);
          v33 = v80;
LABEL_14:
          sub_10000CB4C((uint64_t)v13, (uint64_t *)&unk_100646BD0);
          swift_endAccess(&aBlock);
          sub_100097F40(v23, v33);
          return;
        }
        v77 = v7;
        v26 = v80 & 1;
        v76 = v23;
        v27 = v26;
        v28 = sub_1001406BC(v23, v26);
        if ((v29 & 1) != 0)
        {
          sub_10007C6DC(v25[7] + *(_QWORD *)(v15 + 72) * v28, (uint64_t)v13, type metadata accessor for RestorableSettings);
          v30 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56);
          v31 = v13;
          v32 = 0;
        }
        else
        {
          v30 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56);
          v31 = v13;
          v32 = 1;
        }
        v75 = v30;
        ((void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v30)(v31, v32, 1, v14);
        v33 = v80;
        sub_100097F40(v23, v80);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
          goto LABEL_14;
        v34 = v23;
        v35 = (uint64_t)v78;
        sub_1001D0788((uint64_t)v13, (uint64_t)v78, type metadata accessor for RestorableSettings);
        v36 = swift_endAccess(&aBlock);
        v72 = *(id *)DOCLog.UI.unsafeMutableAddressor(v36);
        v71 = static os_log_type_t.debug.getter();
        v37 = sub_10006922C((uint64_t *)&unk_100644560);
        v38 = swift_allocObject(v37, 112, 7);
        *(_OWORD *)(v38 + 16) = xmmword_1004D4CE0;
        v39 = v34;
        v73 = v34;
        v40 = sub_100178D2C(v34, v27);
        v74 = v2;
        v42 = v41;
        *(_QWORD *)(v38 + 56) = &type metadata for String;
        v43 = sub_10006A638();
        *(_QWORD *)(v38 + 64) = v43;
        *(_QWORD *)(v38 + 32) = v40;
        *(_QWORD *)(v38 + 40) = v42;
        aBlock = 0;
        v85 = 0xE000000000000000;
        v44 = v35;
        _print_unlocked<A, B>(_:_:)(v35, &aBlock, v14, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v45 = aBlock;
        v46 = v85;
        *(_QWORD *)(v38 + 96) = &type metadata for String;
        *(_QWORD *)(v38 + 104) = v43;
        *(_QWORD *)(v38 + 72) = v45;
        *(_QWORD *)(v38 + 80) = v46;
        v47 = v72;
        os_log(_:dso:log:type:_:)("[Restorable Settings] Restoring settings for key %@; info: %@",
          61,
          2,
          &_mh_execute_header,
          v72,
          v71,
          v38);

        v48 = swift_bridgeObjectRelease(v38);
        v75(v11, 1, 1, v14, v48);
        swift_beginAccess(&off_100645FC0, &aBlock, 33, 0);
        v49 = v76;
        sub_10043B2D8((uint64_t)v11, v39, v27);
        swift_endAccess(&aBlock);
        sub_10018C740(v44, 1);
        v50 = (uint64_t *)(v44 + *(int *)(v14 + 20));
        v51 = v44;
        v52 = *v50;
        v53 = v50[1];
        v54 = v50[2];
        v55 = v50[3];
        sub_1001D08D0(*v50, v53, v54);
        sub_1001821E4(v52, v53, v54, v55);
        sub_1001D1484(v52, v53, v54);
        v56 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
        v57 = (void *)static OS_dispatch_queue.main.getter(v56);
        v58 = swift_allocObject(&unk_1005CE960, 24, 7);
        *(_QWORD *)(v58 + 16) = v1;
        v88 = sub_1001D14B4;
        v89 = v58;
        aBlock = _NSConcreteStackBlock;
        v85 = 1107296256;
        v86 = sub_10004A82C;
        v87 = &unk_1005CE978;
        v59 = _Block_copy(&aBlock);
        v60 = v89;
        v61 = v1;
        v62 = swift_release(v60);
        v63 = v77;
        static DispatchQoS.unspecified.getter(v62);
        aBlock = (void **)_swiftEmptyArrayStorage;
        v64 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v65 = sub_10006922C((uint64_t *)&unk_100647540);
        v66 = sub_100062698((unint64_t *)&qword_100641270, (uint64_t *)&unk_100647540, (uint64_t)&protocol conformance descriptor for [A]);
        v67 = v79;
        v68 = v65;
        v69 = v74;
        dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v68, v66, v74, v64);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v63, v67, v59);
        _Block_release(v59);

        sub_100097F40(v73, v80);
        (*(void (**)(_BYTE *, uint64_t))(v83 + 8))(v67, v69);
        (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v63, v82);
        sub_10007C720(v51, type metadata accessor for RestorableSettings);
      }
    }
  }
}

void sub_1000968DC()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  double v21;
  double v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  double v28;
  double v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  Class isa;
  id v34;

  v1 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_additionalHeaderView;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_additionalHeaderView], "removeFromSuperview");
  v2 = *(void **)&v0[v1];
  if (v2)
  {
    v3 = objc_allocWithZone((Class)UIView);
    v34 = v2;
    v4 = objc_msgSend(v3, "init");
    v5 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_additionalHeaderContainerView;
    v6 = *(void **)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_additionalHeaderContainerView];
    *(_QWORD *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_additionalHeaderContainerView] = v4;

    v7 = *(void **)&v0[v5];
    if (v7)
    {
      v8 = v7;
      objc_msgSend(v8, "addSubview:", v34);
      v9 = sub_10006922C((uint64_t *)&unk_1006441A0);
      v10 = swift_allocObject(v9, 64, 7);
      *(_OWORD *)(v10 + 16) = xmmword_1004DAC10;
      v11 = objc_msgSend(v34, "topAnchor");
      v12 = objc_msgSend(v8, "topAnchor");
      v13 = objc_msgSend(v11, "constraintEqualToAnchor:", v12);

      *(_QWORD *)(v10 + 32) = v13;
      v14 = objc_msgSend(v34, "bottomAnchor");
      v15 = objc_msgSend(v8, "bottomAnchor");
      v16 = objc_msgSend(v14, "constraintEqualToAnchor:", v15);

      *(_QWORD *)(v10 + 40) = v16;
      v17 = objc_msgSend(v34, "leadingAnchor");
      v18 = objc_msgSend(v8, "leadingAnchor");
      objc_msgSend(v0, "loadViewIfNeeded");
      v19 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView;
      v20 = *(void **)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
      if (v20)
      {
        objc_msgSend(v20, "layoutMargins");
        v23 = objc_msgSend(v17, "constraintEqualToAnchor:constant:", v18, (v21 + v22) * -0.5);

        *(_QWORD *)(v10 + 48) = v23;
        v24 = objc_msgSend(v34, "trailingAnchor");
        v25 = objc_msgSend(v8, "trailingAnchor");
        objc_msgSend(v0, "loadViewIfNeeded");
        v26 = *(void **)&v0[v19];
        if (v26)
        {
          v27 = (void *)objc_opt_self(NSLayoutConstraint);
          objc_msgSend(v26, "layoutMargins");
          v30 = objc_msgSend(v24, "constraintEqualToAnchor:constant:", v25, (v28 + v29) * 0.5);

          *(_QWORD *)(v10 + 56) = v30;
          specialized Array._endMutation()(v31);
          v32 = v10;
          sub_10004F2F0(0, (unint64_t *)&unk_100642440, NSLayoutConstraint_ptr);
          isa = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v27, "activateConstraints:", isa, swift_bridgeObjectRelease(v32).n128_f64[0]);

          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
    }
    else
    {

    }
  }
}

uint64_t sub_100096C40()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;

  v0 = sub_10009C360();
  v1 = _UISceneWillBeginSystemSnapshotSequence;
  v2 = (void *)objc_opt_self(NSOperationQueue);
  v3 = objc_msgSend(v2, "mainQueue", (unsigned __int128)0, (unsigned __int128)0);
  (*(void (**)(uint64_t, __int128 *, id, void (*)(uint64_t), _QWORD))(*(_QWORD *)v0 + 144))(v1, &v12, v3, sub_100187B04, 0);
  v5 = v4;
  swift_release(v0);

  swift_bridgeObjectRelease(v5);
  sub_10000CB4C((uint64_t)&v12, &qword_100642730);
  v6 = sub_10009C360();
  v7 = _UISceneDidCompleteSystemSnapshotSequence;
  v8 = objc_msgSend(v2, "mainQueue", 0, 0, 0, 0);
  (*(void (**)(uint64_t, __int128 *, id, void (*)(char *), _QWORD))(*(_QWORD *)v6 + 144))(v7, &v12, v8, sub_100187BD0, 0);
  v10 = v9;
  swift_release(v6);

  swift_bridgeObjectRelease(v10);
  return sub_10000CB4C((uint64_t)&v12, &qword_100642730);
}

char *sub_100096D88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *result;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;

  v2 = sub_10006922C((uint64_t *)&unk_100642710);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for IndexPath(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v27 = (char *)&v23 - v10;
  v25 = v9;
  if (!((unint64_t)a1 >> 62))
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (char *)swift_bridgeObjectRetain(a1);
    if (v11)
      goto LABEL_3;
LABEL_21:
    swift_bridgeObjectRelease(a1);
    return (char *)_swiftEmptyArrayStorage;
  }
  if (a1 < 0)
    v21 = a1;
  else
    v21 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v22 = v21;
  v9 = v25;
  result = (char *)_CocoaArrayWrapper.endIndex.getter(v22);
  v11 = (uint64_t)result;
  if (!result)
    goto LABEL_21;
LABEL_3:
  if (v11 >= 1)
  {
    v13 = 0;
    v26 = a1 & 0xC000000000000001;
    v14 = (char *)_swiftEmptyArrayStorage;
    v24 = a1;
    do
    {
      if (v26)
      {
        v15 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a1);
      }
      else
      {
        v15 = *(void **)(a1 + 8 * v13 + 32);
        swift_unknownObjectRetain(v15);
      }
      sub_10017A9F4(v15, (uint64_t)v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
      {
        swift_unknownObjectRelease(v15);
        sub_10000CB4C((uint64_t)v4, (uint64_t *)&unk_100642710);
      }
      else
      {
        v16 = v11;
        v17 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
        v18 = v27;
        v17(v27, v4, v5);
        (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v18, v5);
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
          v14 = (char *)sub_100153D0C(0, *((_QWORD *)v14 + 2) + 1, 1, (unint64_t)v14);
        v20 = *((_QWORD *)v14 + 2);
        v19 = *((_QWORD *)v14 + 3);
        if (v20 >= v19 >> 1)
          v14 = (char *)sub_100153D0C(v19 > 1, v20 + 1, 1, (unint64_t)v14);
        *((_QWORD *)v14 + 2) = v20 + 1;
        v9 = v25;
        v17(&v14[((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v20], v25, v5);
        swift_unknownObjectRelease(v15);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v27, v5);
        a1 = v24;
        v11 = v16;
      }
      ++v13;
    }
    while (v11 != v13);
    swift_bridgeObjectRelease(a1);
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DOCItemCollectionViewController.StringWidthCalculationContext()
{
  return objc_opt_self(_TtCC5Files31DOCItemCollectionViewController29StringWidthCalculationContext);
}

void sub_100097068(unsigned __int8 a1)
{
  _BYTE *v1;
  _BYTE *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[5];
  uint64_t v35;

  v2 = v1;
  v4 = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v8 - 8);
  v32 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchTime(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v30 - v16;
  v18 = v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_valuesPendingUntilNextReload];
  v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_valuesPendingUntilNextReload] = a1;
  if (v4 == 2)
  {
    if (v18 == 2)
      return;
LABEL_6:
    v19 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
    v30 = static OS_dispatch_queue.main.getter(v19);
    static DispatchTime.now()(v30);
    + infix(_:_:)(v14, 1.0);
    v20 = *(void (**)(char *, uint64_t))(v12 + 8);
    v20(v14, v11);
    v21 = swift_allocObject(&unk_1005CDE48, 24, 7);
    *(_QWORD *)(v21 + 16) = v2;
    aBlock[4] = sub_1001D0A40;
    v35 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004A82C;
    aBlock[3] = &unk_1005CDE60;
    v22 = _Block_copy(aBlock);
    v23 = v35;
    v24 = v2;
    swift_release(v23);
    static DispatchQoS.unspecified.getter(v25);
    aBlock[0] = _swiftEmptyArrayStorage;
    v26 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v27 = sub_10006922C((uint64_t *)&unk_100647540);
    v28 = sub_100062698((unint64_t *)&qword_100641270, (uint64_t *)&unk_100647540, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v27, v28, v5, v26);
    v29 = (void *)v30;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v17, v10, v7, v22);
    _Block_release(v22);

    (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v32);
    v20(v17, v11);
    return;
  }
  if (v18 == 2 || ((((v4 & 1) == 0) ^ v18) & 1) == 0)
    goto LABEL_6;
}

uint64_t sub_100097344()
{
  char *v0;
  char *v1;
  void *v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  char *v7;
  id v8;
  unsigned int v9;
  id v10;
  unsigned int v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  int v21;
  uint64_t ObjectType;
  int v23;
  id v24;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration];
  if (objc_msgSend(v2, "isPickerUI")
    && (objc_msgSend(v2, "forSavingDocuments") & 1) == 0
    && !objc_msgSend(v2, "forPickingFolders"))
  {
    return 2;
  }
  result = sub_1002CCD54();
  if ((result & 1) != 0)
    return 2;
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection];
  if (v4)
  {
    v5 = (_QWORD *)(v4 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type);
    if ((*(_BYTE *)(v4 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type + 16) & 1) != 0)
      v6 = *(id *)(*v5 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode);
    else
      v6 = (id)v5[1];
    swift_unknownObjectRetain(v6);
    v7 = &v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration];
    v8 = *(id *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration];
    v9 = objc_msgSend(v1, "isEditing");
    if ((*(_BYTE *)(v4 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type + 16) & 1) != 0
      || (v10 = *(id *)(v4 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type),
          v11 = objc_msgSend(v10, "doc_displaysSearchResults"),
          v10,
          !v11))
    {
      if (v6)
      {
        v21 = v9 ^ 1;
        v20 = v8;
        swift_unknownObjectRetain(v6);
        v14 = v6;
LABEL_17:
        ObjectType = swift_getObjectType(v14, v19);
        if (objc_msgSend(v14, "isFolder"))
        {
          v23 = DOCNode.newFolderButtonMode(for:)(v20, ObjectType);
          swift_unknownObjectRelease(v14);

          swift_unknownObjectRelease(v6);
          if (v23 != 2)
            return v23 & v21;
          return 2;
        }
        swift_unknownObjectRelease(v14);

        goto LABEL_23;
      }
    }
    else
    {
      v12 = (void *)*((_QWORD *)v7 + 7);
      if (!v12)
      {

LABEL_23:
        v24 = v6;
LABEL_24:
        swift_unknownObjectRelease(v24);
        return 2;
      }
      v13 = v12;
      v14 = objc_msgSend(v13, "node");

      swift_unknownObjectRelease(v6);
      if (v14)
      {
        v16 = swift_getObjectType(v14, v15);
        swift_unknownObjectRetain(v14);
        v17 = (void *)DOCNode.sourceIdentifier.getter(v16);
        v18 = sub_100176904((uint64_t)v17);
        swift_unknownObjectRelease(v14);

        if (!v18)
        {
          v24 = v14;
          goto LABEL_24;
        }
        swift_unknownObjectRetain(v14);
        v20 = v18;
        v21 = 0;
        v6 = v14;
        goto LABEL_17;
      }
    }

    return 2;
  }
  __break(1u);
  return result;
}

void sub_100097624()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char *v16;
  NSObject *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  os_log_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  NSObject *v38;
  int v39;
  uint64_t v40;
  double v41;
  void *v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  id v50;
  void *v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  id v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  os_log_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t aBlock[5];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v66 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v66 - v11;
  if ((v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_endingInlineRename] & 1) != 0)
    return;
  v13 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_inlineRenameController;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_inlineRenameController])
  {
    v14 = Logger.Rename.unsafeMutableAddressor(v10);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v15(v9, v14, v2);
    v16 = v0;
    v17 = Logger.logObject.getter(v16);
    LODWORD(v74) = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, (os_log_type_t)v74))
    {
      v68 = v17;
      v69 = v14;
      v70 = (uint64_t)v15;
      v71 = v6;
      v72 = v3;
      v73 = v2;
      v18 = swift_slowAlloc(32, -1);
      v67 = swift_slowAlloc(96, -1);
      aBlock[0] = v67;
      *(_DWORD *)v18 = 136315650;
      v77 = sub_1000544FC(0xD00000000000001CLL, 0x8000000100517290, aBlock);
      *(_QWORD *)&v19 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78).n128_u64[0];
      *(_WORD *)(v18 + 12) = 2080;
      v20 = *(_QWORD *)&v1[v13];
      if (v20)
      {
        v21 = objc_msgSend(*(id *)(v20 + 64), "filename", v19);
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        v24 = v23;

        v77 = sub_1000544FC(v22, v24, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);

        swift_bridgeObjectRelease(v24);
        *(_WORD *)(v18 + 22) = 2080;
        v26 = *(_QWORD *)&v1[v13];
        if (v26)
        {
          v27 = *(_QWORD *)(v26 + 64);
          ObjectType = swift_getObjectType(v27, v25);
          swift_unknownObjectRetain(v27);
          v29 = DOCNode.nodeDescription.getter(ObjectType);
          v31 = v30;
          swift_unknownObjectRelease(v27);
          v77 = sub_1000544FC(v29, v31, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);

          swift_bridgeObjectRelease(v31);
          v32 = v68;
          _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v74, "%s: update existing rename session on: \"%s\" node: %s)", (uint8_t *)v18, 0x20u);
          v33 = v67;
          swift_arrayDestroy(v67, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v33, -1, -1);
          swift_slowDealloc(v18, -1, -1);

          v2 = v73;
          v34 = *(void (**)(char *, uint64_t))(v72 + 8);
          v34(v9, v73);
          v15 = (void (*)(char *, uint64_t, uint64_t))v70;
          v6 = v71;
          v14 = v69;
          goto LABEL_13;
        }
      }
      else
      {

        __break(1u);
      }

      __break(1u);
      return;
    }

    v34 = *(void (**)(char *, uint64_t))(v3 + 8);
    v34(v9, v2);
LABEL_13:
    if ((sub_1001AA810() & 1) != 0)
    {
      objc_msgSend(*(id *)&v16[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_repositionRenamingCellTimer], "invalidate");
      v47 = (void *)objc_opt_self(NSTimer);
      v48 = swift_allocObject(&unk_1005CBE18, 24, 7);
      swift_unknownObjectWeakInit(v48 + 16);
      aBlock[4] = (uint64_t)sub_1001D17CC;
      v76 = v48;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000602CC;
      aBlock[3] = (uint64_t)&unk_1005CEB08;
      v49 = _Block_copy(aBlock);
      swift_release(v76);
      v50 = objc_msgSend(v47, "scheduledTimerWithTimeInterval:repeats:block:", 0, v49, 0.1);
      _Block_release(v49);
      v51 = *(void **)&v16[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_newFolderReadyForRenameTimer];
      *(_QWORD *)&v16[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_newFolderReadyForRenameTimer] = v50;

    }
    else
    {
      v52 = ((uint64_t (*)(char *, uint64_t, uint64_t))v15)(v6, v14, v2);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc(12, -1);
        v56 = swift_slowAlloc(32, -1);
        aBlock[0] = v56;
        *(_DWORD *)v55 = 136315138;
        v77 = sub_1000544FC(0xD00000000000001CLL, 0x8000000100517290, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "%s: currently renaming item not found in item collection, aborting", v55, 0xCu);
        swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v56, -1, -1);
        swift_slowDealloc(v55, -1, -1);
      }

      v34(v6, v2);
      sub_1001AB890();
    }
    return;
  }
  if (v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_preparingForInlineRename] == 1)
  {
    v35 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_enqueuedCreatedFolderToBeRenamed;
    if (*(_QWORD *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_enqueuedCreatedFolderToBeRenamed])
    {
      v36 = Logger.Rename.unsafeMutableAddressor(v10);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v36, v2);
      v37 = v0;
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v38, (os_log_type_t)v39))
      {
        LODWORD(v71) = v39;
        v72 = v3;
        v73 = v2;
        v74 = 7104878;
        v40 = swift_slowAlloc(32, -1);
        v70 = swift_slowAlloc(96, -1);
        aBlock[0] = v70;
        *(_DWORD *)v40 = 136315650;
        v77 = sub_1000544FC(0xD00000000000001CLL, 0x8000000100517290, aBlock);
        *(_QWORD *)&v41 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78).n128_u64[0];
        *(_WORD *)(v40 + 12) = 2080;
        v42 = *(void **)&v1[v35];
        if (v42)
        {
          v43 = objc_msgSend(v42, "filename", v41);
          v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
          v46 = v45;

        }
        else
        {
          v46 = 0xE300000000000000;
          v44 = 7104878;
        }
        v77 = sub_1000544FC(v44, v46, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);

        swift_bridgeObjectRelease(v46);
        *(_WORD *)(v40 + 22) = 2080;
        v57 = *(void **)&v1[v35];
        if (v57)
        {
          v58 = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
          v59 = v57;
          v74 = DOCNode.nodeDescription.getter(v58);
          v61 = v60;

        }
        else
        {
          v61 = 0xE300000000000000;
        }
        v63 = v72;
        v62 = v73;
        v64 = v71;
        v65 = v70;
        v77 = sub_1000544FC(v74, v61, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);

        swift_bridgeObjectRelease(v61);
        _os_log_impl((void *)&_mh_execute_header, v38, v64, "%s: begin deferred rename on: \"%s\" node: %s", (uint8_t *)v40, 0x20u);
        swift_arrayDestroy(v65, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v65, -1, -1);
        swift_slowDealloc(v40, -1, -1);

        (*(void (**)(char *, uint64_t))(v63 + 8))(v12, v62);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
      }
      sub_1001AA328();
    }
  }
}

void sub_100097E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (!v1)
  {
    __break(1u);
    return;
  }
  v2 = v1 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type;
  if ((*(_BYTE *)(v2 + 16) & 1) != 0)
  {
    v3 = *(void **)(*(_QWORD *)v2 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode);
    swift_unknownObjectRetain(v3);
    goto LABEL_5;
  }
  v3 = *(void **)(v2 + 8);
  swift_unknownObjectRetain(v3);
  if (v3)
  {
LABEL_5:
    v4 = objc_msgSend(v3, "fpfs_fpItem");
    swift_unknownObjectRelease(v3);
    if (v4)
      return;
  }
  v5 = *(void **)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration + 24);
  if (v5)
    objc_msgSend(v5, "sourceIdentifier");
}

void sub_100097F40(id a1, char a2)
{
  if (a2 != -1)

}

ValueMetadata *type metadata accessor for DOCItemCollectionViewController.RestorableSettingsCacheKey()
{
  return &type metadata for DOCItemCollectionViewController.RestorableSettingsCacheKey;
}

void sub_100097F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  __n128 v9;
  char v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  NSString v18;
  Class isa;
  id v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  id v28;

  v1 = type metadata accessor for IndexPath(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10006922C((uint64_t *)&unk_100642710);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView);
  if (v8)
  {
    v28 = v8;
    sub_100064B54();
    if ((v10 & 1) != 0 || (sub_100063820(v9) & 1) != 0)
    {
      if (qword_100640E40 != -1)
        swift_once(&qword_100640E40, sub_10009B250);
      v11 = String._bridgeToObjectiveC()();
      v12 = objc_msgSend(v28, "indexPathsForVisibleSupplementaryElementsOfKind:", v11);

      v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v1);
      v14 = *(_QWORD *)(v13 + 16);
      v24 = v13;
      if (v14)
      {
        v15 = v13 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
        v16 = *(_QWORD *)(v2 + 72);
        v25 = v0;
        v26 = v16;
        v27 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
        v27(v7, v15, v1);
        while (1)
        {
          v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
          v17(v7, 0, 1, v1);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
            break;
          (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
          v18 = String._bridgeToObjectiveC()();
          isa = IndexPath._bridgeToObjectiveC()().super.isa;
          v20 = objc_msgSend(v28, "supplementaryViewForElementKind:atIndexPath:", v18, isa);

          if (v20)
          {
            v21 = type metadata accessor for DOCItemCollectionViewSectionHeader();
            v22 = (char *)swift_dynamicCastClass(v20, v21);
            if (v22)
              sub_10017DEA0(v22, (uint64_t)v4);

          }
          (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
          v15 += v26;
          if (!--v14)
            goto LABEL_16;
          v27(v7, v15, v1);
        }
      }
      else
      {
        v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
LABEL_16:
        v17(v7, 1, 1, v1);
      }

      swift_bridgeObjectRelease(v24);
    }
    else
    {

    }
  }
}

void sub_100098254(double a1, double a2)
{
  char *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *Strong;
  void *v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  id v14;
  double v15;
  double v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD v21[6];
  _BYTE v22[104];
  uint64_t v23;
  _BYTE v24[8];
  double v25;
  _BYTE v26[24];
  id v27;

  if (!objc_msgSend(v2, "isViewLoaded"))
  {
    v6 = *(_QWORD *)&v2[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_documentManager];
    if (v6
      && (Strong = (void *)swift_unknownObjectWeakLoadStrong(v6 + OBJC_IVAR____TtC5Files18DOCDocumentManager_documentBrowser)) != 0)
    {
      v8 = Strong;
      v9 = (char *)objc_msgSend(Strong, "dataSource");
      v5 = *(_QWORD *)&v9[OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_viewStyle];

      if (v5 == 1)
        goto LABEL_7;
    }
    else
    {
      v5 = 0;
    }
LABEL_12:
    sub_10009DED4((uint64_t)v22);
    sub_1001D0668((uint64_t)v22);
    v12 = v23;
    sub_10009DED4((uint64_t)v24);
    sub_1001D0668((uint64_t)v24);
    v13 = v25;
    sub_10009DED4((uint64_t)v26);
    v14 = v27;
    sub_1001D0668((uint64_t)v26);
    objc_msgSend(v14, "spacing");
    v16 = v15;

    v11 = round(a2 / (v13 + v16));
    if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    if (v11 <= -9.22337204e18)
    {
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    if (v11 >= 9.22337204e18)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
LABEL_15:
    v17 = v12 * (uint64_t)v11;
    if ((unsigned __int128)(v12 * (__int128)(uint64_t)v11) >> 64 == v17 >> 63)
    {
      v18 = *(id *)DOCLog.UI.unsafeMutableAddressor(v10);
      static os_log_type_t.debug.getter(v18);
      v19 = sub_10006922C((uint64_t *)&unk_100644560);
      v20 = swift_allocObject(v19, 112, 7);
      *(_OWORD *)(v20 + 16) = xmmword_1004D4CE0;
      *(_QWORD *)(v20 + 56) = &type metadata for Int;
      *(_QWORD *)(v20 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v20 + 32) = v17;
      *(_QWORD *)(v20 + 96) = &type metadata for Int;
      *(_QWORD *)(v20 + 104) = &protocol witness table for Int;
      *(_QWORD *)(v20 + 72) = v5;
      os_log(_:dso:log:type:_:)("estimated preload thumbnail count: %d for displayMode %d", v21[0], v21[2]);

      swift_bridgeObjectRelease(v20);
      return;
    }
    __break(1u);
    goto LABEL_18;
  }
  v4 = (uint64_t *)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode];
  swift_beginAccess(&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode], v21, 0, 0);
  v5 = *v4;
  if (*v4 != 1)
    goto LABEL_12;
LABEL_7:
  v11 = round(a2 / sub_100071B10());
  if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v11 < 9.22337204e18)
  {
    v5 = 1;
    v12 = 1;
    goto LABEL_15;
  }
LABEL_23:
  __break(1u);
}

void DOCItemCollectionViewController.isUserInteractionEnabled.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  id v4;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_isUserInteractionEnabled);
  swift_beginAccess(v1 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_isUserInteractionEnabled, v5, 1, 0);
  *v3 = a1;
  if ((a1 & 1) == 0)
  {
    v4 = objc_msgSend((id)objc_opt_self(DOCKeyboardFocusManager), "sharedManager");
    objc_msgSend(v4, "unregisterKeyboardFocusable:", v1);

  }
}

_QWORD *sub_100098590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  char v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE v18[48];

  v1 = sub_10006922C(&qword_100646C68);
  inited = swift_initStackObject(v1, v18);
  *(_OWORD *)(inited + 16) = xmmword_1004D4CE0;
  sub_10003DDDC();
  if ((v3 & 1) != 0)
    v4 = sub_10009BBE8();
  else
    v4 = 0;
  *(_QWORD *)(inited + 32) = v4;
  v5 = *(void **)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__footerView);
  *(_QWORD *)(inited + 40) = v5;
  specialized Array._endMutation()(v4);
  v6 = *(void **)(inited + 32);
  if (!v6)
  {
    v12 = v5;
    v11 = *(void **)(inited + 40);
    if (!v11)
      goto LABEL_13;
    goto LABEL_10;
  }
  v7 = v6;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
  v9 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  v8 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v9 >= v8 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
  v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
  specialized Array._endMutation()(v10);
  v11 = *(void **)(inited + 40);
  if (v11)
  {
LABEL_10:
    v13 = v11;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
    v15 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v14 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v15 >= v14 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
    v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
    specialized Array._endMutation()(v16);
  }
LABEL_13:
  swift_bridgeObjectRelease(inited);
  return _swiftEmptyArrayStorage;
}

void *sub_10009870C()
{
  void *result;

  result = (void *)sub_10008B434((uint64_t)_swiftEmptyArrayStorage);
  off_100645FC0 = result;
  return result;
}

uint64_t sub_100098730(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v5 + 104))(v4, enum case for UICollectionLayoutListConfiguration.Appearance.plain(_:));
  UICollectionLayoutListConfiguration.init(appearance:)(v4);
  if (objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration), "isInUIPDocumentLanding"))
  {
    v6 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    UICollectionLayoutListConfiguration.backgroundColor.setter(v6);
  }
  UICollectionLayoutListConfiguration.showsSeparators.setter(1);
  v7 = swift_allocObject(&unk_1005CBE18, 24, 7);
  swift_unknownObjectWeakInit(v7 + 16);
  UICollectionLayoutListConfiguration.itemSeparatorHandler.setter(sub_10007D7CC, v7);
  v8 = swift_allocObject(&unk_1005CBE18, 24, 7);
  swift_unknownObjectWeakInit(v8 + 16);
  UICollectionLayoutListConfiguration.trailingSwipeActionsConfigurationProvider.setter(sub_1001D0964, v8);
  v9 = swift_allocObject(&unk_1005CBE18, 24, 7);
  swift_unknownObjectWeakInit(v9 + 16);
  UICollectionLayoutListConfiguration._willBeginSwipingHandler.setter(sub_1001D096C, v9);
  v10 = swift_allocObject(&unk_1005CBE18, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16);
  return UICollectionLayoutListConfiguration._didEndSwipingHandler.setter(sub_1001D0974, v10);
}

uint64_t sub_1000988CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE v14[24];

  v3 = sub_10006922C(&qword_100646B38);
  v4 = __chkstk_darwin(v3);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v13[-v7];
  v9 = v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage___listLayoutConfiguration;
  swift_beginAccess(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage___listLayoutConfiguration, v14, 0, 0);
  sub_1000271D4(v9, (uint64_t)v8, &qword_100646B38);
  v10 = type metadata accessor for UICollectionLayoutListConfiguration(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(a1, v8, v10);
  sub_10000CB4C((uint64_t)v8, &qword_100646B38);
  sub_100098730(v1);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v6, a1, v10);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess(v9, v13, 33, 0);
  sub_10008BB40((uint64_t)v6, v9, &qword_100646B38);
  return swift_endAccess(v13);
}

uint64_t sub_100098AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004A754C);
}

void sub_100098AF8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100657CF8)
  {
    v2 = _s23FolderMenuConfigurationVMa(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100657CF8);
  }
}

uint64_t sub_100098B4C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    v4[2] = (char *)&value witness table for () + 64;
    v4[3] = "\b";
    v4[4] = "\b";
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t _s23FolderMenuConfigurationVMa(uint64_t a1)
{
  return sub_10006BDA4(a1, qword_1006581B8, (uint64_t)&_s23FolderMenuConfigurationVMn);
}

uint64_t sub_100098C54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage___familySharedFolderTip;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage___familySharedFolderTip))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage___familySharedFolderTip);
  }
  else
  {
    v3 = type metadata accessor for DOCTipsFamilyTip();
    v2 = swift_allocObject(v3, 16, 7);
    *(_QWORD *)(v0 + v1) = v2;
    swift_retain();
  }
  swift_retain();
  return v2;
}

id sub_100098DBC()
{
  uint64_t v0;
  _QWORD *v1;
  id result;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  _BYTE v7[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode);
  result = (id)swift_beginAccess(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode, v7, 0, 0);
  if (*v1 != 2)
    goto LABEL_7;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (!v3)
  {
    __break(1u);
    return result;
  }
  v4 = v3 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type;
  if ((*(_BYTE *)(v4 + 16) & 1) != 0)
  {
    v5 = *(void **)(*(_QWORD *)v4 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode);
    swift_unknownObjectRetain(v5);
  }
  else
  {
    v5 = *(void **)(v4 + 8);
    result = (id)swift_unknownObjectRetain(v5);
    if (!v5)
      return result;
  }
  v6 = objc_msgSend(v5, "isRootItem");
  swift_unknownObjectRelease(v5);
  if (!v6)
    return 0;
LABEL_7:
  result = *(id *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration)
                 + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain);
  if (result)
    return objc_msgSend(result, "isMainiCloudDriveDomain");
  return result;
}

void sub_100098EBC()
{
  void *v0;
  void *v1;
  id v2;
  BOOL v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  v1 = v0;
  v2 = objc_msgSend(v0, "traitCollection");
  v3 = sub_10007B5C0(8);

  if (v3)
  {
    v4 = objc_msgSend(v1, "traitCollection");
    v5 = (unint64_t)objc_msgSend(v4, "userInterfaceStyle");

    if (v5 >= 3)
    {
      type metadata accessor for UIUserInterfaceStyle(0);
      v8[3] = v7;
      v8[0] = v5;
      doc_warnUnrecognizedEnumValueEncountered(_:)(v8);
      sub_100068588(v8);
      v6 = 1;
    }
    else
    {
      v6 = qword_1004DCB50[v5];
    }
    sub_1000A8CD8(v6);
  }
}

uint64_t sub_100098F90()
{
  char *v0;
  char *v1;
  void *Strong;
  void *v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t ObjectType;
  uint64_t v12;
  char *v13;
  _QWORD v14[4];
  char v15[24];

  objc_msgSend(v0, "setNeedsFocusUpdate");
  v1 = &v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_gatheringThumbnails];
  swift_beginAccess(&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_gatheringThumbnails], v15, 1, 0);
  *v1 = 0;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(&v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_actionReporting]);
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(Strong, "didFinishGatheringItemsAndThumbnailsWithSender:", v0);
    swift_unknownObjectRelease(v3);
  }
  v4 = &v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting];
  result = swift_unknownObjectWeakLoadStrong(&v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting]);
  if (result)
  {
    v6 = result;
    v7 = *((_QWORD *)v4 + 1);
    v14[3] = type metadata accessor for DOCItemCollectionViewController(0);
    v14[0] = v0;
    v8 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8];
    if ((unint64_t)v8 >> 62)
    {
      if (v8 < 0)
        v12 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8];
      else
        v12 = v8 & 0xFFFFFFFFFFFFFF8;
      v13 = v0;
      swift_bridgeObjectRetain(v8);
      v9 = _CocoaArrayWrapper.endIndex.getter(v12);
      swift_bridgeObjectRelease(v8);
    }
    else
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      v10 = v0;
    }
    ObjectType = swift_getObjectType(v6);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 8))(v14, v9, 1, 0, ObjectType, v7);
    swift_unknownObjectRelease(v6);
    return sub_100068588(v14);
  }
  return result;
}

uint64_t DOCItemCollectionViewController.acceptsKeyboardFocus.getter()
{
  char *v0;
  id v1;
  id v2;
  id v3;
  uint64_t result;
  void *v5;
  unsigned int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15[24];
  char v16[24];

  v1 = objc_msgSend(v0, "viewIfLoaded");
  v2 = objc_msgSend(v1, "superview");

  if (!v2)
    return 0;
  v3 = objc_msgSend(v0, "presentedViewController");

  if (v3)
  {
    result = (uint64_t)objc_msgSend(v0, "presentedViewController");
    if (!result)
      return result;
    v5 = (void *)result;
    v6 = objc_msgSend((id)result, "isBeingDismissed");

    if (!v6)
      return 0;
  }
  if ((v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_endingInlineRename] & 1) == 0
    && (*(_QWORD *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_inlineRenameController]
     || (v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_preparingForInlineRename] & 1) != 0))
  {
    return 0;
  }
  result = (uint64_t)objc_msgSend(v0, "canBecomeFirstResponder");
  if (!(_DWORD)result)
    return result;
  v7 = &v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_isUserInteractionEnabled];
  swift_beginAccess(&v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_isUserInteractionEnabled], v16, 0, 0);
  if (*v7 != 1)
    return 0;
  v8 = &v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode];
  swift_beginAccess(&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode], v15, 0, 0);
  if (*(_QWORD *)v8 != 2)
    return 1;
  v9 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8];
  v10 = v0;
  v11 = swift_bridgeObjectRetain(v9);
  v12 = (uint64_t)sub_1002498D8(v11, (uint64_t)v10);
  swift_bridgeObjectRelease(v9);

  if ((unint64_t)v12 >> 62)
  {
    if (v12 < 0)
      v14 = v12;
    else
      v14 = v12 & 0xFFFFFFFFFFFFFF8;
    v13 = _CocoaArrayWrapper.endIndex.getter(v14);
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v12);
  return v13 > 0;
}

void *sub_100099308(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __n128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UICollectionLayoutListConfiguration(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000988CC((uint64_t)v13);
  sub_100064B54();
  if ((v15 & 1) == 0 && (sub_100063820(v14) & 1) == 0)
    goto LABEL_7;
  v31 = v7;
  v16 = v6;
  v17 = a1;
  v18 = v11;
  v19 = v10;
  v20 = a2;
  v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8);
  if ((unint64_t)v21 >> 62)
  {
    v29 = v21 < 0
        ? *(_QWORD *)(v3 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8)
        : v21 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v3 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8));
    v22 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v21);
  }
  else
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v23 = v22 <= 0;
  a2 = v20;
  v10 = v19;
  v11 = v18;
  a1 = v17;
  v6 = v16;
  v7 = v31;
  if (!v23)
    v24 = (unsigned int *)&enum case for UICollectionLayoutListConfiguration.HeaderMode.supplementary(_:);
  else
LABEL_7:
    v24 = (unsigned int *)&enum case for UICollectionLayoutListConfiguration.HeaderMode.none(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *v24, v6);
  UICollectionLayoutListConfiguration.headerMode.setter(v9);
  if (a1)
  {
    v25 = 0;
    v26 = 1;
  }
  else
  {
    if (objc_msgSend((id)objc_opt_self(UITraitCollection), "enclosingTabSwitcherCanBeFloating"))v25 = 0x4020000000000000;
    else
      v25 = 0;
    v26 = 0;
  }
  UICollectionLayoutListConfiguration.headerTopPadding.setter(v25, v26);
  sub_10004F2F0(0, &qword_100646D18, NSCollectionLayoutSection_ptr);
  v27 = (void *)static NSCollectionLayoutSection.list(using:layoutEnvironment:)(v13, a2);
  if ((sub_10006BCB4() & 1) != 0)
    objc_msgSend(v27, "setContentInsets:", 0.0, *(double *)(v3+ OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_tableLayoutSidebarPlainAppearanceMetrics+ 24), 0.0, *(double *)(v3+ OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_tableLayoutSidebarPlainAppearanceMetrics+ 24));
  objc_msgSend(v27, "setContentInsetsReference:", 2);
  objc_msgSend(v27, "setSupplementaryContentInsetsReference:", 1);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v27;
}

uint64_t sub_100099578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage___visibleItemsCorpus;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage___visibleItemsCorpus);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage___visibleItemsCorpus);
  }
  else
  {
    v4 = v0;
    v5 = type metadata accessor for SiriVocabulary.Corpus();
    swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    v3 = SiriVocabulary.Corpus.init(contents:capacity:)(_swiftEmptyArrayStorage, 0, 1);
    v6 = *(_QWORD *)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v3;
    swift_retain(v3);
    swift_release(v6);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_100099600(__int16 a1)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (a1 == 2)
    return 0x6F6C65526C6C7566;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease(0xE000000000000000);
  if ((a1 & 1) != 0)
    v3 = 1702195828;
  else
    v3 = 0x65736C6166;
  if ((a1 & 1) != 0)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v4);
  v6._countAndFlagsBits = 0x666E6F636572202CLL;
  v6._object = (void *)0xEF203A6572756769;
  String.append(_:)(v6);
  if ((a1 & 0x100) != 0)
    v7 = 1702195828;
  else
    v7 = 0x65736C6166;
  if ((a1 & 0x100) != 0)
    v8 = 0xE400000000000000;
  else
    v8 = 0xE500000000000000;
  v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease(v8);
  return 0x696E612866666964;
}

void sub_10009972C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  char *v21;
  __n128 v22;
  uint64_t v23;
  __n128 v24;
  void *v25;
  id v26;
  Class isa;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[40];
  _QWORD v31[3];

  v2 = v1;
  v4 = sub_10006922C((uint64_t *)&unk_100642710);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[0] = a1;
  v11 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__selectedChildNode;
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__selectedChildNode);
  swift_unknownObjectRetain(v12);
  v13 = sub_10006922C(&qword_100652EB0);
  v14 = Optional.isEqualTo(node:)(v12, v13);
  swift_unknownObjectRelease(v12);
  if ((v14 & 1) != 0)
    goto LABEL_6;
  v15 = *(_QWORD *)(v2 + v11);
  *(_QWORD *)(v2 + v11) = a1;
  v16 = (_QWORD *)(v2 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode);
  swift_unknownObjectRetain(a1);
  swift_beginAccess(v16, v31, 0, 0);
  if (*v16 != 2)
  {
    swift_unknownObjectRelease(v15);
LABEL_6:
    swift_unknownObjectRelease(a1);
    return;
  }
  if (a1)
  {
    v17 = (void *)swift_unknownObjectRetain(a1);
    sub_10018EBD8(v17, 0, 1);
    swift_unknownObjectRelease(v15);
    swift_unknownObjectRelease_n(a1, 2);
  }
  else if (v15)
  {
    v18 = sub_10006922C((uint64_t *)&unk_1006441A0);
    inited = swift_initStackObject(v18, v30);
    *(_OWORD *)(inited + 16) = xmmword_1004D9B40;
    *(_QWORD *)(inited + 32) = v15;
    v29 = inited;
    specialized Array._endMutation()(inited);
    v20 = v29;
    swift_unknownObjectRetain_n(v15, 2);
    v21 = sub_100096D88(v20);
    v22 = swift_bridgeObjectRelease(v20);
    if (*((_QWORD *)v21 + 2))
    {
      (*(void (**)(char *, char *, uint64_t, __n128))(v8 + 16))(v6, &v21[(*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)], v7, v22);
      v23 = 0;
    }
    else
    {
      v23 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v23, 1, v7);
    v24 = swift_bridgeObjectRelease(v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v8 + 48))(v6, 1, v7, v24) == 1)
    {
      swift_unknownObjectRelease_n(v15, 2);
      sub_10000CB4C((uint64_t)v6, (uint64_t *)&unk_100642710);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
      v25 = *(void **)(v2 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView);
      if (v25)
      {
        v26 = v25;
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v26, "deselectItemAtIndexPath:animated:", isa, 0);
        swift_unknownObjectRelease_n(v15, 2);

      }
      else
      {
        swift_unknownObjectRelease_n(v15, 2);
      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }
}

void sub_100099A18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_titleMenuContext;
  v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_titleMenuContext);
  swift_retain();
  LOBYTE(a1) = sub_100099DB8(a1, v9);
  swift_release(v9);
  if ((a1 & 1) == 0)
    return;
  v10 = 1061109567;
  DOCItemCollectionViewController.getCurrentLocation()();
  if (!v11
    || (v12 = v11, v13 = objc_msgSend(v11, "displayName"), v12, !v13))
  {
    v15 = 0xE400000000000000;
    v16 = *(_QWORD *)(v2 + v8);
    if (!v16)
      goto LABEL_5;
LABEL_7:
    swift_retain();
    v18 = sub_1004A2F94();
    v17 = v19;
    v11 = (void *)swift_release(v16);
    goto LABEL_8;
  }
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v15 = v14;

  v16 = *(_QWORD *)(v2 + v8);
  if (v16)
    goto LABEL_7;
LABEL_5:
  v17 = 0xE500000000000000;
  v18 = 0x2A6C696E2ALL;
LABEL_8:
  v20 = Logger.UI.unsafeMutableAddressor(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v20, v4);
  swift_bridgeObjectRetain(v15);
  v21 = swift_bridgeObjectRetain(v17);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc(22, -1);
    v29 = v18;
    v25 = v10;
    v26 = v24;
    v30 = swift_slowAlloc(64, -1);
    v33 = v30;
    *(_DWORD *)v26 = 136315394;
    v31 = v4;
    swift_bridgeObjectRetain(v15);
    v32 = sub_1000544FC(v25, v15, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
    swift_bridgeObjectRelease_n(v15, 3);
    *(_WORD *)(v26 + 12) = 2080;
    swift_bridgeObjectRetain(v17);
    v32 = sub_1000544FC(v29, v17, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
    swift_bridgeObjectRelease_n(v17, 3);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "[TitleMenus] did update '%s' menus to %s", (uint8_t *)v26, 0x16u);
    v27 = v30;
    swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v31);
  }
  else
  {

    swift_bridgeObjectRelease_n(v17, 2);
    swift_bridgeObjectRelease_n(v15, 2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  sub_100043720();
}

void sub_100099D14(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\b";
    sub_100098AF8(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      swift_updateClassMetadata2(a1, 256, 4, v6, a1 + 80);
    }
  }
}

uint64_t _s16TitleMenuContextCMa(uint64_t a1)
{
  return sub_10006BDA4(a1, (uint64_t *)&unk_100657CE8, (uint64_t)&_s16TitleMenuContextCMn);
}

uint64_t sub_100099DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  void (*v55)(_BYTE *, uint64_t);
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  char v68;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  char v74;
  uint64_t v75;
  void (*v76)(_BYTE *, uint64_t);
  _BYTE v77[12];
  int v78;
  void (*v79)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  _BYTE *v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94[24];
  char v95[32];

  v4 = type metadata accessor for UUID(0);
  v93 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v83 = &v77[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v92 = sub_10006922C((uint64_t *)&unk_1006495B0);
  v6 = __chkstk_darwin(v92);
  v87 = &v77[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v9 = &v77[-v8];
  v10 = _s23FolderMenuConfigurationVMa(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v90 = &v77[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_10006922C(&qword_100658208);
  v14 = __chkstk_darwin(v13);
  v82 = &v77[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __chkstk_darwin(v14);
  v81 = &v77[-v17];
  v18 = __chkstk_darwin(v16);
  v20 = &v77[-v19];
  __chkstk_darwin(v18);
  v22 = &v77[-v21];
  v23 = sub_10006922C((uint64_t *)&unk_1006475C0);
  v24 = __chkstk_darwin(v23);
  v84 = &v77[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = __chkstk_darwin(v24);
  v85 = &v77[-v27];
  v28 = __chkstk_darwin(v26);
  v86 = &v77[-v29];
  v30 = __chkstk_darwin(v28);
  v89 = &v77[-v31];
  v32 = __chkstk_darwin(v30);
  v34 = &v77[-v33];
  __chkstk_darwin(v32);
  v36 = &v77[-v35];
  v91 = a1;
  if (!a1)
  {
LABEL_4:
    v39 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v93 + 56);
    v39(v36, 1, 1, v4);
    v88 = a2;
    if (a2)
      goto LABEL_5;
LABEL_8:
    v41 = 1;
    goto LABEL_10;
  }
  v37 = a2;
  v38 = v91 + OBJC_IVAR____TtCC5Files31DOCItemCollectionViewController16TitleMenuContext_folderActionsMenuConfiguration;
  swift_beginAccess(v91 + OBJC_IVAR____TtCC5Files31DOCItemCollectionViewController16TitleMenuContext_folderActionsMenuConfiguration, v94, 0, 0);
  sub_1000271D4(v38, (uint64_t)v22, &qword_100658208);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v22, 1, v10))
  {
    sub_10000CB4C((uint64_t)v22, &qword_100658208);
    a2 = v37;
    goto LABEL_4;
  }
  v80 = v11;
  v42 = v10;
  v43 = v90;
  sub_1004A7714((uint64_t)v22, (uint64_t)v90);
  sub_10000CB4C((uint64_t)v22, &qword_100658208);
  v44 = v93;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v93 + 16))(v36, v43, v4);
  v45 = (uint64_t)v43;
  v10 = v42;
  v11 = v80;
  sub_1004A7758(v45);
  v46 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v44 + 56);
  v46(v36, 0, 1, v4);
  a2 = v37;
  v39 = v46;
  v88 = a2;
  if (!a2)
    goto LABEL_8;
LABEL_5:
  v40 = a2 + OBJC_IVAR____TtCC5Files31DOCItemCollectionViewController16TitleMenuContext_folderActionsMenuConfiguration;
  swift_beginAccess(v40, v95, 0, 0);
  sub_1000271D4(v40, (uint64_t)v20, &qword_100658208);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v20, 1, v10))
  {
    sub_10000CB4C((uint64_t)v20, &qword_100658208);
    v41 = 1;
  }
  else
  {
    v47 = v90;
    sub_1004A7714((uint64_t)v20, (uint64_t)v90);
    sub_10000CB4C((uint64_t)v20, &qword_100658208);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v93 + 16))(v34, v47, v4);
    sub_1004A7758((uint64_t)v47);
    v41 = 0;
  }
LABEL_10:
  v39(v34, v41, 1, v4);
  v48 = (uint64_t)&v9[*(int *)(v92 + 48)];
  sub_1000271D4((uint64_t)v36, (uint64_t)v9, (uint64_t *)&unk_1006475C0);
  sub_1000271D4((uint64_t)v34, v48, (uint64_t *)&unk_1006475C0);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
  if (v49((uint64_t)v9, 1, v4) == 1)
  {
    sub_10000CB4C((uint64_t)v34, (uint64_t *)&unk_1006475C0);
    sub_10000CB4C((uint64_t)v36, (uint64_t *)&unk_1006475C0);
    if (v49(v48, 1, v4) == 1)
    {
      sub_10000CB4C((uint64_t)v9, (uint64_t *)&unk_1006475C0);
      goto LABEL_17;
    }
LABEL_15:
    v51 = (uint64_t)v9;
LABEL_33:
    sub_10000CB4C(v51, (uint64_t *)&unk_1006495B0);
    goto LABEL_34;
  }
  v50 = v89;
  sub_1000271D4((uint64_t)v9, (uint64_t)v89, (uint64_t *)&unk_1006475C0);
  if (v49(v48, 1, v4) == 1)
  {
    sub_10000CB4C((uint64_t)v34, (uint64_t *)&unk_1006475C0);
    sub_10000CB4C((uint64_t)v36, (uint64_t *)&unk_1006475C0);
    (*(void (**)(_BYTE *, uint64_t))(v93 + 8))(v50, v4);
    goto LABEL_15;
  }
  v79 = v39;
  v80 = v10;
  v52 = v93;
  v53 = v83;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v93 + 32))(v83, v48, v4);
  v54 = sub_10005A360((unint64_t *)&qword_100655BE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v78 = dispatch thunk of static Equatable.== infix(_:_:)(v50, v53, v4, v54);
  v55 = *(void (**)(_BYTE *, uint64_t))(v52 + 8);
  v56 = v53;
  v39 = v79;
  v55(v56, v4);
  sub_10000CB4C((uint64_t)v34, (uint64_t *)&unk_1006475C0);
  sub_10000CB4C((uint64_t)v36, (uint64_t *)&unk_1006475C0);
  v55(v50, v4);
  v10 = v80;
  sub_10000CB4C((uint64_t)v9, (uint64_t *)&unk_1006475C0);
  if ((v78 & 1) == 0)
  {
LABEL_34:
    v68 = 1;
    return v68 & 1;
  }
LABEL_17:
  if (!v91)
  {
    v58 = v11;
    goto LABEL_21;
  }
  v57 = v81;
  sub_1000271D4(v91 + OBJC_IVAR____TtCC5Files31DOCItemCollectionViewController16TitleMenuContext_folderHierarchyMenuConfiguration, (uint64_t)v81, &qword_100658208);
  v58 = v11;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v57, 1, v10))
  {
    sub_10000CB4C((uint64_t)v57, &qword_100658208);
LABEL_21:
    v59 = 1;
    v61 = (uint64_t)v86;
    v60 = (uint64_t)v87;
    goto LABEL_23;
  }
  v62 = v90;
  sub_1004A7714((uint64_t)v57, (uint64_t)v90);
  sub_10000CB4C((uint64_t)v57, &qword_100658208);
  v61 = (uint64_t)v86;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v93 + 16))(v86, v62, v4);
  sub_1004A7758((uint64_t)v62);
  v59 = 0;
  v60 = (uint64_t)v87;
LABEL_23:
  v63 = (uint64_t)v85;
  v64 = 1;
  v39((_BYTE *)v61, v59, 1, v4);
  if (v88)
  {
    v65 = v82;
    sub_1000271D4(v88 + OBJC_IVAR____TtCC5Files31DOCItemCollectionViewController16TitleMenuContext_folderHierarchyMenuConfiguration, (uint64_t)v82, &qword_100658208);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v58 + 48))(v65, 1, v10))
    {
      sub_10000CB4C((uint64_t)v65, &qword_100658208);
    }
    else
    {
      v66 = v90;
      sub_1004A7714((uint64_t)v65, (uint64_t)v90);
      sub_10000CB4C((uint64_t)v65, &qword_100658208);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v93 + 16))(v63, v66, v4);
      sub_1004A7758((uint64_t)v66);
      v64 = 0;
    }
  }
  v39((_BYTE *)v63, v64, 1, v4);
  v67 = v60 + *(int *)(v92 + 48);
  sub_1000271D4(v61, v60, (uint64_t *)&unk_1006475C0);
  sub_1000271D4(v63, v67, (uint64_t *)&unk_1006475C0);
  if (v49(v60, 1, v4) != 1)
  {
    sub_1000271D4(v60, (uint64_t)v84, (uint64_t *)&unk_1006475C0);
    if (v49(v67, 1, v4) != 1)
    {
      v70 = v93;
      v71 = v83;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v93 + 32))(v83, v67, v4);
      v72 = sub_10005A360((unint64_t *)&qword_100655BE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v73 = v84;
      v74 = dispatch thunk of static Equatable.== infix(_:_:)(v84, v71, v4, v72);
      v75 = v63;
      v76 = *(void (**)(_BYTE *, uint64_t))(v70 + 8);
      v76(v71, v4);
      sub_10000CB4C(v75, (uint64_t *)&unk_1006475C0);
      sub_10000CB4C(v61, (uint64_t *)&unk_1006475C0);
      v76(v73, v4);
      sub_10000CB4C(v60, (uint64_t *)&unk_1006475C0);
      v68 = v74 ^ 1;
      return v68 & 1;
    }
    sub_10000CB4C(v63, (uint64_t *)&unk_1006475C0);
    sub_10000CB4C(v61, (uint64_t *)&unk_1006475C0);
    (*(void (**)(_BYTE *, uint64_t))(v93 + 8))(v84, v4);
    goto LABEL_32;
  }
  sub_10000CB4C(v63, (uint64_t *)&unk_1006475C0);
  sub_10000CB4C(v61, (uint64_t *)&unk_1006475C0);
  if (v49(v67, 1, v4) != 1)
  {
LABEL_32:
    v51 = v60;
    goto LABEL_33;
  }
  sub_10000CB4C(v60, (uint64_t *)&unk_1006475C0);
  v68 = 0;
  return v68 & 1;
}

id sub_10009A6F8(char a1)
{
  char *v1;
  unsigned int v3;
  id result;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = objc_msgSend(v1, "isEditing");
  result = 0;
  if (v3)
  {
    if ((v1[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_forceEditingMode] & 1) == 0)
    {
      v5 = sub_1002C9870();
      if (DOCUsePadIdiomForTraits(v5))
      {
        v6 = objc_msgSend(v5, "horizontalSizeClass");

        if (v6 == (id)2)
        {
          if (!a1)
            return 0;
LABEL_11:
          v7 = (uint64_t)sub_100034068(0);
          v8 = v7;
          if ((unint64_t)v7 >> 62)
          {
            if (v7 >= 0)
              v7 &= 0xFFFFFFFFFFFFFF8uLL;
            v9 = _CocoaArrayWrapper.endIndex.getter(v7);
          }
          else
          {
            v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease(v8);
          v10 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8];
          v11 = v1;
          v12 = swift_bridgeObjectRetain(v10);
          v13 = (uint64_t)sub_1002D2DD8(v12, (uint64_t)v11);
          swift_bridgeObjectRelease(v10);

          if ((unint64_t)v13 >> 62)
          {
            if (v13 < 0)
              v15 = v13;
            else
              v15 = v13 & 0xFFFFFFFFFFFFFF8;
            v14 = _CocoaArrayWrapper.endIndex.getter(v15);
          }
          else
          {
            v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease(v13);
          if (v9 < v14)
            return sub_1002CB9CC();
          if (v14 >= 1)
            return sub_1002CBAE4();
          return 0;
        }
      }
      else
      {

      }
      if (!a1)
        goto LABEL_11;
    }
    return 0;
  }
  return result;
}

double sub_10009A8BC(uint64_t a1)
{
  uint64_t v1;
  double result;

  swift_unknownObjectWeakAssign(v1 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_actionReporting, a1);
  sub_10002C4B8();
  *(_QWORD *)&result = swift_unknownObjectRelease(a1).n128_u64[0];
  return result;
}

void sub_10009A978(char a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  _QWORD *v27;
  id v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void (*v43)(char *, unint64_t, uint64_t);
  char *v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  char *v46;
  void *v47;
  id v48;
  Class isa;
  double v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  void *v59;
  _BYTE v60[24];
  char v61[32];

  v3 = v2;
  v6 = sub_10006922C((uint64_t *)&unk_100642710);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v53 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v53 - v13;
  v15 = type metadata accessor for IndexPath(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v58 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v56 = (char *)&v53 - v20;
  __chkstk_darwin(v19);
  v22 = (char *)&v53 - v21;
  v59 = v3;
  if ((a1 & 1) != 0)
  {
    IndexPath.init(item:section:)(0, 0);
    if ((sub_100195148((uint64_t)v22) & 1) != 0)
    {
      v57 = (unsigned int (*)(char *, uint64_t, uint64_t))a2;
      v28 = *(id *)((char *)v3 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView);
      v55 = v12;
      if (v28 && (v28 = objc_msgSend(v28, "indexPathsForSelectedItems")) != 0)
      {
        v29 = v28;
        v30 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, v15);

      }
      else
      {
        v30 = _swiftEmptyArrayStorage;
      }
      __chkstk_darwin(v28);
      *(&v53 - 2) = (uint64_t)v22;
      v32 = sub_100173AD4((uint64_t (*)(char *))sub_1001CA4F8, (_BOOL8)(&v53 - 4), (uint64_t)v30, (uint64_t (*)(_QWORD))&type metadata accessor for IndexPath, (uint64_t *)&unk_100642710);
      swift_bridgeObjectRelease(v30);
      if (v32)
      {
        v33 = sub_10006922C(&qword_100644BD0);
        v34 = *(unsigned __int8 *)(v16 + 80);
        v35 = (v34 + 32) & ~v34;
        v27 = (_QWORD *)swift_allocObject(v33, v35 + *(_QWORD *)(v16 + 72), v34 | 7);
        *((_OWORD *)v27 + 1) = xmmword_1004D9670;
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))((char *)v27 + v35, v22, v15);
        v3 = v59;
        v12 = v55;
        a2 = (uint64_t)v57;
        if (!v27[2])
          goto LABEL_34;
        goto LABEL_18;
      }
      v3 = v59;
      v31 = v16;
      v12 = v55;
      a2 = (uint64_t)v57;
    }
    else
    {
      v31 = v16;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v22, v15);
    goto LABEL_17;
  }
  v23 = *(void **)((char *)v3 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView);
  if (!v23)
  {
LABEL_17:
    v27 = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
      goto LABEL_18;
LABEL_34:
    swift_bridgeObjectRelease(v27);
    return;
  }
  v24 = a2;
  v25 = objc_msgSend(v23, "indexPathsForSelectedItems");
  if (!v25)
  {
    v27 = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
      goto LABEL_18;
    goto LABEL_34;
  }
  v26 = v25;
  v27 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v15);

  a2 = v24;
  if (!v27[2])
    goto LABEL_34;
LABEL_18:
  swift_bridgeObjectRetain(a2);
  v36 = sub_1001BC9B8((uint64_t)v27, a2);
  swift_bridgeObjectRelease(a2);
  v37 = (uint64_t)v3 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_indexPathForRememberedFocusNode;
  swift_beginAccess((char *)v3 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_indexPathForRememberedFocusNode, v61, 0, 0);
  sub_1000271D4(v37, (uint64_t)v14, (uint64_t *)&unk_100642710);
  v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v57(v14, 1, v15) == 1)
  {
    sub_10000CB4C((uint64_t)v14, (uint64_t *)&unk_100642710);
  }
  else
  {
    v38 = v56;
    v39 = (*(uint64_t (**)(void))(v16 + 32))();
    __chkstk_darwin(v39);
    *(&v53 - 2) = (uint64_t)v38;
    if (sub_100173AD4((uint64_t (*)(char *))sub_1001CA4F8, (_BOOL8)(&v53 - 4), v36, (uint64_t (*)(_QWORD))&type metadata accessor for IndexPath, (uint64_t *)&unk_100642710))
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v12, 1, 1, v15);
      swift_beginAccess(v37, v60, 33, 0);
      sub_10008BB40((uint64_t)v12, v37, (uint64_t *)&unk_100642710);
      swift_endAccess(v60);
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v38, v15);
  }
  v40 = v16;
  v41 = *(_QWORD *)(v36 + 16);
  v54 = v36;
  if (v41)
  {
    v42 = v36 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v55 = *(char **)(v16 + 72);
    v56 = (char *)OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView;
    v43 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
    v44 = v58;
    while (1)
    {
      v43(v9, v42, v15);
      v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
      v45(v9, 0, 1, v15);
      if (v57(v9, 1, v15) == 1)
        break;
      v46 = v9;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v44, v9, v15);
      objc_msgSend(v3, "loadViewIfNeeded");
      v47 = *(void **)&v56[(_QWORD)v3];
      if (!v47)
      {
        __break(1u);
        return;
      }
      v48 = v47;
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v48, "deselectItemAtIndexPath:animated:", isa, 0);

      (*(void (**)(char *, uint64_t))(v40 + 8))(v44, v15);
      v42 += (unint64_t)v55;
      --v41;
      v3 = v59;
      v9 = v46;
      if (!v41)
        goto LABEL_30;
    }
  }
  else
  {
    v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
LABEL_30:
    v45(v9, 1, 1, v15);
  }
  *(_QWORD *)&v50 = swift_bridgeObjectRelease(v54).n128_u64[0];
  *((_BYTE *)v3 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_needsOverlayUpdateWithAnimation) = 0;
  v51 = objc_msgSend(v3, "viewIfLoaded", v50);
  v52 = objc_msgSend(v51, "window");

  if (v52)
    sub_1000926C8();
}

Swift::Void __swiftcall DOCItemCollectionViewController.viewDidMove(to:shouldAppearOrDisappear:)(UIWindow_optional to, Swift::Bool shouldAppearOrDisappear)
{
  char *v2;
  Swift::Bool is_nil;
  Class isa;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  objc_super v26;

  is_nil = to.is_nil;
  isa = to.value.super.super.super.isa;
  ObjectType = swift_getObjectType(v2);
  v26.receiver = v2;
  v26.super_class = (Class)type metadata accessor for DOCItemCollectionViewController(0);
  objc_msgSendSuper2(&v26, "viewDidMoveToWindow:shouldAppearOrDisappear:", isa, is_nil);
  if (isa)
  {
    sub_100184178();
    sub_100098EBC();
    v6 = sub_10006922C((uint64_t *)&unk_1006444C0);
    v7 = swift_allocObject(v6, 48, 7);
    *(_OWORD *)(v7 + 16) = xmmword_1004D9670;
    v8 = sub_1001463A0();
    *(_QWORD *)(v7 + 32) = &type metadata for DOCBrowserLayoutConfiguration.Trait;
    *(_QWORD *)(v7 + 40) = v8;
    v9 = UIViewController.doc_registerForTraitChanges<A>(_:options:handler:)(v7, 0, 1, sub_1001D29D8, 0, ObjectType);
    swift_bridgeObjectRelease(v7);
    v10 = *(_QWORD *)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_registrationForBrowserLayoutChanges];
    *(_QWORD *)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_registrationForBrowserLayoutChanges] = v9;
    v11 = swift_unknownObjectRelease(v10);
    v12 = UIViewController.registerForUIPTraitChanges<A>(tabStyle:documentLanding:options:_:)(1, 1, 0, 1, sub_1001B9570, 0, ObjectType, v11);
    v13 = *(_QWORD *)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_registrationForUIPChanges];
    *(_QWORD *)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_registrationForUIPChanges] = v12;
    swift_unknownObjectRelease(v13);
    v14 = swift_allocObject(v6, 48, 7);
    *(_OWORD *)(v14 + 16) = xmmword_1004D9670;
    v15 = sub_1001BF81C();
    *(_QWORD *)(v14 + 32) = &type metadata for DOCUIPHorizontalInsetTrait;
    *(_QWORD *)(v14 + 40) = v15;
    v16 = UIViewController.doc_registerForTraitChanges<A>(_:options:handler:)(v14, 0, 1, sub_1001B95E4, 0, ObjectType);
    swift_bridgeObjectRelease(v14);
    v17 = *(_QWORD *)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_registrationForInsetChanges];
    *(_QWORD *)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_registrationForInsetChanges] = v16;
    swift_unknownObjectRelease(v17);
    v18 = swift_allocObject(v6, 48, 7);
    *(_OWORD *)(v18 + 16) = xmmword_1004D9670;
    *(_QWORD *)(v18 + 32) = &type metadata for DOCBrowserLayoutConfiguration.Trait;
    *(_QWORD *)(v18 + 40) = v8;
    v19 = UIViewController.doc_registerForTraitChanges<A>(_:options:handler:)(v18, 0, 1, sub_1001B9608, 0, ObjectType);
    swift_unknownObjectRelease(v19);
    swift_bridgeObjectRelease(v18);
  }
  else
  {
    v20 = *(_QWORD *)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_registrationForBrowserLayoutChanges];
    if (v20)
    {
      v21 = swift_unknownObjectRetain(*(_QWORD *)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_registrationForBrowserLayoutChanges]);
      UIViewController.unregisterForTraitChanges(_:)(v21);
      swift_unknownObjectRelease(v20);
    }
    v22 = *(_QWORD *)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_registrationForUIPChanges];
    if (v22)
    {
      v23 = swift_unknownObjectRetain(*(_QWORD *)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_registrationForUIPChanges]);
      UIViewController.unregisterForTraitChanges(_:)(v23);
      swift_unknownObjectRelease(v22);
    }
    v24 = *(_QWORD *)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_registrationForInsetChanges];
    if (v24)
    {
      v25 = swift_unknownObjectRetain(*(_QWORD *)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_registrationForInsetChanges]);
      UIViewController.unregisterForTraitChanges(_:)(v25);
      swift_unknownObjectRelease(v24);
    }
  }
}

uint64_t sub_10009B250()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionHeader);
  qword_100672740 = result;
  *(_QWORD *)algn_100672748 = v1;
  return result;
}

void sub_10009B27C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  id v6;
  id v7;
  id v8;
  char v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  id v17;
  char v18;
  _OWORD v19[2];
  _BYTE v20[24];
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (!v1)
  {
    __break(1u);
    return;
  }
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type + 16) == 1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(DOCDefaultsSuiteName);
    v3 = v2;
    v4 = objc_allocWithZone((Class)NSUserDefaults);
    v5 = String._bridgeToObjectiveC()();
    v6 = objc_msgSend(v4, "initWithSuiteName:", v5, swift_bridgeObjectRelease(v3).n128_f64[0]);

    if (v6)
    {
      v7 = objc_msgSend(v6, "valueForKey:", DOCUserDefaultsKeyFPFSDebugMode);
      if (v7)
      {
        v8 = v7;
        _bridgeAnyObjectToAny(_:)(v19, v7);
        swift_unknownObjectRelease(v8);
      }
      else
      {
        memset(v19, 0, sizeof(v19));
      }
      sub_100070EDC((uint64_t)v19, (uint64_t)v20, &qword_100642730);
      if (v21)
      {
        if ((swift_dynamicCast(&v18, v20, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
        {
          v9 = v18;

          if ((v9 & 1) != 0)
            return;
        }
        else
        {

        }
      }
      else
      {

        sub_10000CB4C((uint64_t)v20, &qword_100642730);
      }
    }
  }
  v10 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration;
  v11 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration), "promptText");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  *(_QWORD *)&v15 = swift_bridgeObjectRelease(v14).n128_u64[0];
  v16 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v16 = v12 & 0xFFFFFFFFFFFFLL;
  if (v16)
  {
    v17 = objc_msgSend(*(id *)(v0 + v10), "promptText", v15);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v17);

  }
}

Swift::Void __swiftcall DOCItemCollectionViewController.scrollViewDidScroll(_:)(UIScrollView a1)
{
  char *v1;
  id v3;
  id v4;
  void *v5;
  id v6;
  unsigned int v7;
  int v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  char *v13;
  __objc2_prot *v14;
  char v15[24];

  if (objc_msgSend(v1, "isFirstResponder"))
  {
    v3 = objc_msgSend((id)objc_opt_self(DOCDeprecatedUIMenuController), "shared");
    objc_msgSend(v3, "hideMenuIfActive");
    swift_unknownObjectRelease(v3);
  }
  sub_100097F64();
  v4 = objc_msgSend(v1, "viewIfLoaded");
  if (v4 && (v5 = v4, v6 = objc_msgSend(v4, "window"), v5, v6))
  {
    v7 = objc_msgSend(v6, "isKeyWindow");

    v8 = v7 ^ 1;
  }
  else
  {
    v8 = 1;
  }
  v9 = objc_msgSend((id)objc_opt_self(DOCUISession), "keyWindow");
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, "firstResponder");

    if (v11)
    {
      v14 = &OBJC_PROTOCOL___UITextInput;
      if (swift_dynamicCastObjCProtocolConditional(v11, 1, &v14))
      {
        if (-[objc_class isDragging](a1.super.super.super.isa, "isDragging"))
        {
          objc_msgSend(v1, "loadViewIfNeeded");
          v12 = *(void **)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
          if (!v12)
          {
            __break(1u);
            return;
          }
          if ((objc_msgSend(v12, "isDecelerating") & 1) == 0)
            objc_msgSend(v11, "resignFirstResponder");
        }
        goto LABEL_20;
      }

    }
  }
  if (-[objc_class isTracking](a1.super.super.super.isa, "isTracking"))
  {
    if (objc_msgSend(v1, "_appearState") == 2
      && (objc_msgSend(v1, "isFirstResponder") ^ 1 | v8) == 1)
    {
      v13 = &v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode];
      swift_beginAccess(&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode], v15, 0, 0);
      if (*(_QWORD *)v13 != 2)
      {
        v11 = objc_msgSend((id)objc_opt_self(DOCKeyboardFocusManager), "sharedManager");
        objc_msgSend(v11, "requestCurrentFocus:", v1);
LABEL_20:

      }
    }
  }
}

void sub_10009B744(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  id v11;

  sub_10009B27C();
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
    if (v4)
    {
      v5 = v2;
      v6 = v3;
      v7 = v4 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type;
      if ((*(_BYTE *)(v7 + 16) & 1) != 0)
      {
        v8 = *(_QWORD *)(*(_QWORD *)v7 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode);
        swift_unknownObjectRetain(v8);
      }
      else
      {
        v8 = *(_QWORD *)(v7 + 8);
        swift_unknownObjectRetain(v8);
        if (!v8)
        {
          v10 = 0;
LABEL_13:
          v11 = objc_allocWithZone((Class)type metadata accessor for DOCPromptHeaderView());
          sub_10012DBCC(v5, v6, v8, v10);
          return;
        }
      }
      v9 = objc_msgSend((id)v8, "isShared");
      swift_unknownObjectRelease(v8);
      if (v9)
        v8 = 0x322E6E6F73726570;
      else
        v8 = 0;
      if (v9)
        v10 = 0xED00006C6C69662ELL;
      else
        v10 = 0;
      goto LABEL_13;
    }
    __break(1u);
  }
}

void *sub_10009B854()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage___promptView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage___promptView);
  v3 = v2;
  if (v2 == (void *)1)
  {
    sub_10009B744(v0);
    v3 = v4;
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v6 = v4;
    sub_10008D9C4(v5);
  }
  sub_1000B0268(v2);
  return v3;
}

uint64_t sub_10009B8C0(uint64_t a1)
{
  uint64_t v1;

  return sub_100006CC4(a1, *(id *)(v1 + 16));
}

BOOL sub_10009B8FC()
{
  _BYTE *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  id v12;
  id v13;

  v1 = *(void **)&v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration];
  if ((objc_msgSend(v1, "isPopoverOrWidget") & 1) != 0
    || objc_msgSend(v1, "isPickerUI")
    && v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_allowsPickingMultipleItems] != 1)
  {
    return 0;
  }
  v2 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration], "identifier");
  v3 = DOCDocumentSourceIdentifierSearch;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v6 = v5;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  if (v4 == v7 && v6 == v8)
  {

    swift_bridgeObjectRelease_n(v6, 2);
  }
  else
  {
    v10 = v8;
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);

    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v10);
    if ((v11 & 1) == 0)
      return 1;
  }
  v12 = objc_msgSend(v0, "traitCollection");
  v13 = objc_msgSend(v12, "horizontalSizeClass");

  return v13 != (id)1;
}

void sub_10009BA54()
{
  uint64_t v0;

  sub_10009BA5C(v0);
}

void sub_10009BA5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  char v18[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v18, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v4 = (char *)Strong;
    v5 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_syncStateHeaderView;
    v6 = *(char **)(Strong + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_syncStateHeaderView);
    if (v6)
      goto LABEL_3;
    v10 = *(void **)(*(_QWORD *)(Strong
                               + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration)
                   + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain);
    if (!v10)
      goto LABEL_6;
    v11 = type metadata accessor for DOCFileProviderSyncStateHeaderViewModel();
    v12 = swift_allocObject(v11, 96, 7);
    *(_QWORD *)(v12 + 24) = 0;
    swift_unknownObjectWeakInit(v12 + 16);
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_QWORD *)(v12 + 88) = 1;
    *(_QWORD *)(v12 + 32) = v10;
    v13 = objc_allocWithZone((Class)type metadata accessor for DOCFileProviderSyncStateHeaderView());
    v14 = v10;
    swift_retain();
    v16 = sub_1003612A8(v15);
    v17 = *(void **)&v4[v5];
    *(_QWORD *)&v4[v5] = v16;

    swift_release(v12);
    v6 = *(char **)&v4[v5];
    if (v6)
    {
LABEL_3:
      v7 = &v6[OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateHeaderView_delegate];
      *((_QWORD *)v7 + 1) = &off_1005CC240;
      swift_unknownObjectWeakAssign(v7, v4);
      v8 = *(_QWORD *)&v6[OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateHeaderView_viewModel];
      *(_QWORD *)(v8 + 24) = &off_1005E0DE0;
      swift_unknownObjectWeakAssign(v8 + 16, v6);
      v9 = v6;
      swift_retain();
      sub_10008D7B8();

      swift_release(v8);
    }
    else
    {
LABEL_6:

    }
  }
}

id sub_10009BBE8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage____headerContainerView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage____headerContainerView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage____headerContainerView);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
    objc_msgSend(v4, "setAxis:", 1);
    objc_msgSend(v4, "setLayoutMarginsRelativeArrangement:", 1);
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

void sub_10009BC94(void *a1, char *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t (*v20)(void);
  uint64_t v21;
  __n128 v22;
  void *v23;
  void **v24;
  void *v25;
  void *v26;
  unsigned int v27;
  id v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t (*v36)(void);
  int v37;
  uint64_t v38;
  _BYTE *v39;
  _BOOL4 v40;
  int v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  unsigned __int8 *v59;
  _BYTE *v60;
  int v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char *v77;
  uint64_t (*v78)(void);
  int v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  _BYTE v83[200];
  _BYTE v84[200];
  char v85[32];

  v76 = a3;
  v5 = type metadata accessor for UTType(0);
  v74 = *(_QWORD *)(v5 - 8);
  v75 = v5;
  v6 = __chkstk_darwin(v5);
  v73 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v72 = (char *)&v70 - v8;
  v9 = objc_msgSend(a1, "preparedCells");
  if (v9)
  {
    v10 = v9;
    v11 = sub_10004F2F0(0, (unint64_t *)&unk_1006428D0, UICollectionViewCell_ptr);
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

    if ((unint64_t)v12 >> 62)
      goto LABEL_59;
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v13)
    {
      v70 = 0;
      v71 = v12;
      v81 = v13;
      v82 = v12 & 0xC000000000000001;
      v79 = v76 & 1;
      v14 = 4;
      v77 = a2;
      while (1)
      {
        v15 = v82
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, v12)
            : *(id *)(v12 + 8 * v14);
        v16 = v15;
        v17 = v14 - 3;
        if (__OFADD__(v14 - 4, 1))
          break;
        v18 = type metadata accessor for DOCItemCollectionCell();
        v19 = (_QWORD *)swift_dynamicCastClass(v16, v18);
        if (!v19)
          goto LABEL_6;
        v20 = *(uint64_t (**)(void))((swift_isaMask & *v19) + 0x1F8);
        v21 = v20();
        if (v21)
        {
          v23 = (void *)v21;
          v24 = (void **)(v21 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_node);
          swift_beginAccess(v21 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_node, v85, 0, 0);
          v25 = *v24;
          swift_unknownObjectRetain(v25);

          if (!v25)
          {
            v13 = v81;
            goto LABEL_48;
          }
          v26 = *(void **)&a2[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration];
          v27 = objc_msgSend(v26, "forPickingDocuments");
          v80 = v25;
          if (v27)
          {
            v78 = v20;
            v28 = objc_msgSend(v25, "contentType");
            v29 = v72;
            static UTType._unconditionallyBridgeFromObjectiveC(_:)(v28);

            v30 = v73;
            static UTType.folder.getter(v31);
            LOBYTE(v28) = static UTType.== infix(_:_:)(v29, v30);
            v32 = *(void (**)(char *, uint64_t))(v74 + 8);
            v33 = v30;
            v34 = v75;
            v32(v33, v75);
            v32(v29, v34);
            if ((v28 & 1) != 0)
            {
              v35 = objc_msgSend(v26, "forPickingDocuments");
              a2 = v77;
              v36 = v78;
              v12 = v71;
              if (v35 && objc_msgSend(v77, "isEditing"))
                v37 = a2[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_forceEditingMode];
              else
                v37 = 1;
            }
            else
            {
              v37 = 1;
              a2 = v77;
              v36 = v78;
              v12 = v71;
            }
            v38 = v36();
            if (v38)
            {
              v39 = (_BYTE *)v38;
              v40 = sub_10007181C(v80);
              v41 = v39[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_isPickable];
              v39[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_isPickable] = v40 & v37;
              if (v41 == 2 || ((v41 & 1) == 0) == (v40 & v37))
              {
                v39[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__shouldDim] = 2;
                v42 = *(void **)&v39[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__tableTitle];
                *(_QWORD *)&v39[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__tableTitle] = 0;

                sub_1000D07FC((uint64_t)v83);
                v43 = (uint64_t)&v39[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__titleWithTags];
                sub_100070EDC((uint64_t)&v39[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__titleWithTags], (uint64_t)v84, (uint64_t *)&unk_100641310);
                sub_100070EDC((uint64_t)v83, v43, (uint64_t *)&unk_100641310);
                sub_1001BF860((uint64_t)v84);
                v44 = *(void **)&v39[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__titleWithIconAndTags];
                *(_QWORD *)&v39[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__titleWithIconAndTags] = 0;

                v45 = OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_pendingNotifications;
                v46 = *(_QWORD *)&v39[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_pendingNotifications] | 0x28;
                if ((~*(_DWORD *)&v39[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_pendingNotifications] & 0x28) != 0)
                  *(_QWORD *)&v39[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_pendingNotifications] = v46;
                if (!*(_QWORD *)&v39[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_disabledNotificationCount]
                  && !sub_10007BAFC())
                {
                  *(_QWORD *)&v39[v45] = 0;
                  v47 = objc_autoreleasePoolPush();
                  v48 = v46;
                  v49 = v70;
                  sub_10006D2D4(v48, (uint64_t)v39);
                  v70 = v49;
                  objc_autoreleasePoolPop(v47);
                }

                a2 = v77;
              }
              else
              {

              }
            }
            v20 = v78;
            v50 = v78();
            v13 = v81;
            if (v50)
            {
              v51 = (_BYTE *)v50;
              if (a2[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_forceEditingMode] == 1)
                v52 = objc_msgSend(v80, "isFolder") ^ 1;
              else
                v52 = 1;
              v53 = v51[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_canBecomeSelectable];
              v51[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_canBecomeSelectable] = v52;
              if (v53 == 2 || ((((v53 & 1) == 0) ^ v52) & 1) == 0)
              {
                v54 = OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_pendingNotifications;
                v55 = *(_QWORD *)&v51[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_pendingNotifications] | 9;
                if ((~*(_DWORD *)&v51[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_pendingNotifications] & 9) != 0)
                  *(_QWORD *)&v51[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_pendingNotifications] = v55;
                if (!*(_QWORD *)&v51[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_disabledNotificationCount]
                  && !sub_10007BAFC())
                {
                  *(_QWORD *)&v51[v54] = 0;
                  v56 = objc_autoreleasePoolPush();
                  v57 = v70;
                  sub_10006D2D4(v55, (uint64_t)v51);
                  v70 = v57;
                  v58 = v56;
                  v20 = v78;
                  objc_autoreleasePoolPop(v58);
                }
                a2 = v77;
              }

              goto LABEL_46;
            }
          }
          else
          {
LABEL_46:
            v13 = v81;
          }
          v22 = swift_unknownObjectRelease(v80);
        }
LABEL_48:
        v59 = (unsigned __int8 *)((uint64_t (*)(__n128))v20)(v22);
        if (v59)
        {
          v60 = v59;
          v61 = v59[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_isSelecting];
          v59[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_isSelecting] = v79;
          if (v61 == 2 || ((v61 & 1) == 0) == (v76 & 1))
          {
            v59[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__shouldDim] = 2;
            v62 = *(void **)&v59[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__tableTitle];
            *(_QWORD *)&v59[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__tableTitle] = 0;

            sub_1000D07FC((uint64_t)v83);
            v63 = (uint64_t)&v60[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__titleWithTags];
            sub_100070EDC((uint64_t)&v60[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__titleWithTags], (uint64_t)v84, (uint64_t *)&unk_100641310);
            sub_100070EDC((uint64_t)v83, v63, (uint64_t *)&unk_100641310);
            sub_1001BF860((uint64_t)v84);
            v64 = *(void **)&v60[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__titleWithIconAndTags];
            *(_QWORD *)&v60[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__titleWithIconAndTags] = 0;

            v60[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__shouldDimThumbnail] = 2;
            v65 = OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_pendingNotifications;
            v66 = *(_QWORD *)&v60[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_pendingNotifications];
            if ((v66 & 8) == 0)
            {
              v66 |= 8uLL;
              *(_QWORD *)&v60[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_pendingNotifications] = v66;
            }
            if (!*(_QWORD *)&v60[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_disabledNotificationCount]
              && !sub_10007BAFC())
            {
              *(_QWORD *)&v60[v65] = 0;
              v67 = objc_autoreleasePoolPush();
              v68 = v70;
              sub_10006D2D4(v66, (uint64_t)v60);
              v70 = v68;
              a2 = v77;
              objc_autoreleasePoolPop(v67);
            }

            v13 = v81;
            goto LABEL_7;
          }

        }
LABEL_6:

LABEL_7:
        ++v14;
        if (v17 == v13)
          goto LABEL_63;
      }
      __break(1u);
LABEL_59:
      if (v12 < 0)
        v69 = v12;
      else
        v69 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
      v13 = _CocoaArrayWrapper.endIndex.getter(v69);
      swift_bridgeObjectRelease(v12);
    }
LABEL_63:
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10009C360()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  __n128 v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage___notificationsController;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage___notificationsController])
  {
    v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController____lazy_storage___notificationsController];
  }
  else
  {
    v3 = v0;
    v4 = sub_10006922C(&qword_100646D00);
    swift_allocObject(v4, 32, 7);
    v5 = v0;
    v2 = NSNotification.SubscriptionsController.init(observee:)(v6);
    v7 = *(_QWORD *)&v3[v1];
    *(_QWORD *)&v3[v1] = v2;
    swift_retain();
    swift_release(v7);
  }
  swift_retain();
  return v2;
}

void *sub_10009C3E4(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10009C3EC(a1, a2, v2);
}

void *sub_10009C3EC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  uint64_t v13;
  char v14[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5, v6);
  if (!Strong)
    return 0;
  v8 = (void *)Strong;
  v9 = (_QWORD *)(Strong + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode);
  swift_beginAccess(Strong + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode, &v13, 0, 0);
  if (*v9)
    v10 = sub_100099308(a1, a2);
  else
    sub_1001BEF44(a1);
  v11 = v10;

  return v11;
}

void sub_10009C498()
{
  char *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double *v11;
  double v12;
  double v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;

  objc_msgSend(v0, "loadViewIfNeeded");
  v1 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView;
  v2 = *(void **)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
  if (!v2)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  objc_msgSend(v2, "safeAreaInsets");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = (double *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_lastCollectionViewSafeInsets];
  if ((v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_lastCollectionViewSafeInsets + 32] & 1) != 0)
  {
LABEL_12:
    *(_QWORD *)v11 = v4;
    v11[1] = v6;
    *((_QWORD *)v11 + 2) = v8;
    v11[3] = v10;
    *((_BYTE *)v11 + 32) = 0;
    return;
  }
  v12 = v11[3];
  v13 = v11[1];
  v14 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_collectionViewLayoutTraits];
  if (!v14 || *(_BYTE *)(v14 + 544) != 2)
  {
LABEL_9:
    if (objc_msgSend(v0, "enclosedInUIPDocumentLanding"))
    {
      if (v6 + v10 != v12 + v13)
        sub_10017D5A0(0);
    }
    goto LABEL_12;
  }
  objc_msgSend(v0, "loadViewIfNeeded");
  v15 = *(void **)&v0[v1];
  if (!v15)
    goto LABEL_14;
  v16 = objc_msgSend(v15, "collectionViewLayout");
  v17 = objc_msgSend(v16, "_invalidationContextForRefreshingVisibleElementAttributes");

  if (!v17)
    goto LABEL_9;
  objc_msgSend(v0, "loadViewIfNeeded");
  v18 = *(void **)&v0[v1];
  if (v18)
  {
    v19 = objc_msgSend(v18, "collectionViewLayout");
    objc_msgSend(v19, "invalidateLayoutWithContext:", v17);

    goto LABEL_9;
  }
LABEL_15:
  __break(1u);
}

void sub_10009C624(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1000B33F4(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    v4[2] = &unk_1004DF350;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for DOCFocusableCollectionViewState(uint64_t a1)
{
  uint64_t result;

  result = qword_10064AD70;
  if (!qword_10064AD70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DOCFocusableCollectionViewState);
  return result;
}

void sub_10009C6D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_1004DE700;
  v4[2] = &unk_1004DE700;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_10009C780(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for DOCAbstractPacedPropertyUpdater(uint64_t a1)
{
  return sub_10006BDA4(a1, (uint64_t *)&unk_1006496B8, (uint64_t)&nominal type descriptor for DOCAbstractPacedPropertyUpdater);
}

uint64_t sub_10009C774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10025FA94);
}

void sub_10009C780(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1006496C8)
  {
    v2 = type metadata accessor for DOCAbstractPacedPropertyUpdater.ClientNotifyState(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1006496C8);
  }
}

uint64_t sub_10009C7D4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1004DE700;
  result = type metadata accessor for DispatchTime(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for DOCAbstractPacedPropertyUpdater.ClientNotifyState(uint64_t a1)
{
  return sub_10006BDA4(a1, qword_100649868, (uint64_t)&nominal type descriptor for DOCAbstractPacedPropertyUpdater.ClientNotifyState);
}

uint64_t type metadata accessor for DOCPlaceholderSearchController()
{
  return objc_opt_self(_TtC5Files30DOCPlaceholderSearchController);
}

uint64_t type metadata accessor for DOCFileSystemCollectionManager()
{
  return objc_opt_self(_TtC5Files30DOCFileSystemCollectionManager);
}

uint64_t sub_10009C89C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v19;
  _QWORD *v20;

  v1 = v0;
  v19 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v2 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = objc_msgSend(objc_allocWithZone((Class)NSCountedSet), "initWithCapacity:", 100);
  v11 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v11);
  v20 = _swiftEmptyArrayStorage;
  v12 = sub_10005A360((unint64_t *)&qword_100643640, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v13 = sub_10006922C((uint64_t *)&unk_100641280);
  v14 = sub_100062698((unint64_t *)&qword_100643650, (uint64_t *)&unk_100641280, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v13, v14, v5, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v19);
  *(_QWORD *)(v1 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x51676E696B636F4CLL, 0xEC00000065756575, v10, v7, v4, 0);
  v15 = (void *)objc_opt_self(NSNotificationCenter);
  v16 = objc_msgSend(v15, "defaultCenter");
  objc_msgSend(v16, "addObserver:selector:name:object:", v1, "applicationDidEnterBackgroundWithSender:", UIApplicationDidEnterBackgroundNotification, 0);

  v17 = objc_msgSend(v15, "defaultCenter");
  objc_msgSend(v17, "addObserver:selector:name:object:", v1, "applicationWillEnterForegroundWithSender:", UIApplicationWillEnterForegroundNotification, 0);

  return v1;
}

uint64_t sub_10009CB2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for DOCFileSystemCollectionManager();
  v1 = swift_allocObject(v0, 32, 7);
  result = sub_10009C89C();
  qword_100672C28 = v1;
  return result;
}

id sub_10009CB64(void *a1, uint64_t a2, const char *a3, SEL *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint8_t *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  SEL *v32;
  uint64_t v33;
  uint64_t v34;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = Logger.Enumeration.unsafeMutableAddressor(v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v13, v8);
  v14 = a1;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v31 = a2;
    v17 = swift_slowAlloc(12, -1);
    v32 = a4;
    v18 = (uint8_t *)v17;
    v30 = swift_slowAlloc(32, -1);
    v34 = v30;
    v28 = a3;
    *(_DWORD *)v18 = 136315138;
    v27 = v18 + 4;
    v19 = objc_msgSend(*(id *)&v14[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode], "displayName", v18 + 4);
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v29 = v8;
    v21 = v20;
    v23 = v22;

    a2 = v31;
    v33 = sub_1000544FC(v21, v23, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);

    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v28, v18, 0xCu);
    v24 = v30;
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    v25 = v18;
    a4 = v32;
    swift_slowDealloc(v25, -1, -1);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v29);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  return objc_msgSend(*(id *)(a2 + 16), *a4, v14);
}

id sub_10009CD94()
{
  uint64_t v0;

  return sub_10032DBD8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

id sub_10009CD9C()
{
  uint64_t v0;

  return sub_10009CB64(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), "DOCFileSystemCollectionManager: Adding an active collection for: %s", (SEL *)&selRef_addObject_);
}

uint64_t type metadata accessor for DOCBrowserNavigationDataSource()
{
  return objc_opt_self(_TtC5Files30DOCBrowserNavigationDataSource);
}

void sub_10009CDE4(char a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Strong;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  Class isa;
  uint64_t v27;
  uint64_t v28;
  id v29;
  char v30[24];
  char v31[24];
  objc_super v32;

  v4 = v1;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_viewStyle) != 2)
  {
    v13 = sub_10005F27C();
    v4 = v13;
    if ((unint64_t)v13 >> 62)
    {
      if (v13 >= 0)
        v13 &= 0xFFFFFFFFFFFFFF8uLL;
      v14 = _CocoaArrayWrapper.endIndex.getter(v13);
      if (v14)
      {
LABEL_18:
        v15 = __OFSUB__(v14, 1);
        v16 = v14 - 1;
        if (v15)
        {
          __break(1u);
        }
        else if ((v4 & 0xC000000000000001) == 0)
        {
          if ((v16 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v16 < *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v17 = *(id *)(v4 + 8 * v16 + 32);
LABEL_23:
            v29 = v17;
            swift_bridgeObjectRelease(v4);
            v18 = type metadata accessor for DOCBrowserContainerController();
            v19 = (void *)swift_dynamicCastClass(v29, v18);
            if (v19)
              objc_msgSend(v19, "setEditing:animated:", 0, 0);

            return;
          }
          __break(1u);
          goto LABEL_40;
        }
        v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v4);
        goto LABEL_23;
      }
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v14)
        goto LABEL_18;
    }
    swift_bridgeObjectRelease(v4);
    return;
  }
  v1 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_columnViewControllers);
  if (!v1)
    return;
  v2 = a1;
  if (!((unint64_t)v1 >> 62))
  {
    v5 = *(char **)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(v4
                                       + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_columnViewControllers));
    if (v5)
      goto LABEL_5;
LABEL_34:
    swift_bridgeObjectRelease(v1);
    return;
  }
  if (v1 >= 0)
    v20 = v1 & 0xFFFFFFFFFFFFFF8;
  else
    v20 = *(_QWORD *)(v4 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_columnViewControllers);
  swift_bridgeObjectRetain(*(_QWORD *)(v4 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_columnViewControllers));
  v5 = (char *)_CocoaArrayWrapper.endIndex.getter(v20);
  if (!v5)
    goto LABEL_34;
LABEL_5:
  if ((v1 & 0xC000000000000001) != 0)
  {
LABEL_40:
    v6 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v1);
    goto LABEL_8;
  }
  if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_42;
  }
  v6 = (char *)*(id *)(v1 + 32);
LABEL_8:
  v5 = v6;
  swift_bridgeObjectRelease(v1);
  v32.receiver = v5;
  v32.super_class = (Class)type metadata accessor for DOCColumnViewController(0);
  v3 = (uint64_t)&selRef_objectForKey_ofClass_;
  objc_msgSendSuper2(&v32, "setEditing:animated:", 0, 0);
  v7 = (uint64_t *)&v5[OBJC_IVAR____TtC5Files23DOCColumnViewController_containerControllers];
  swift_beginAccess(&v5[OBJC_IVAR____TtC5Files23DOCColumnViewController_containerControllers], v31, 0, 0);
  v1 = *v7;
  if (!((unint64_t)v1 >> 62))
  {
    v8 = *(char **)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v1);
    if (v8)
      goto LABEL_10;
LABEL_46:
    swift_bridgeObjectRelease(v1);
    goto LABEL_47;
  }
LABEL_42:
  if (v1 < 0)
    v21 = v1;
  else
    v21 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  v8 = (char *)_CocoaArrayWrapper.endIndex.getter(v21);
  if (!v8)
    goto LABEL_46;
LABEL_10:
  v9 = v8 - 1;
  if (__OFSUB__(v8, 1))
  {
    __break(1u);
    goto LABEL_54;
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
LABEL_54:
    v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v1);
    goto LABEL_15;
  }
  if (((unint64_t)v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_56;
  }
  if ((unint64_t)v9 >= *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v10 = *(id *)(v1 + 8 * (_QWORD)v9 + 32);
LABEL_15:
  v11 = v10;
  swift_bridgeObjectRelease(v1);
  objc_msgSend(v11, *(SEL *)(v3 + 1272), 0, 0);

LABEL_47:
  Strong = swift_unknownObjectWeakLoadStrong(v4 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_updateObserver, v12);
  if (Strong)
  {
    v8 = (char *)Strong;
    v23 = (uint64_t *)(v4 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_currentContainers);
    swift_beginAccess(v4 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_currentContainers, v30, 0, 0);
    v3 = *v23;
    if (!((unint64_t)*v23 >> 62))
    {
      v24 = swift_bridgeObjectRetain_n(v3, 2);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v24);
      sub_10004F2F0(0, (unint64_t *)&qword_1006434D0, UIViewController_ptr);
      v25 = v3;
LABEL_50:
      swift_bridgeObjectRelease(v3);
      sub_10004F2F0(0, (unint64_t *)&qword_1006434D0, UIViewController_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v25);
      objc_msgSend(v8, "dataSource:willSet:on:animated:", v4, isa, v5, v2 & 1);

      swift_unknownObjectRelease(v8);
      return;
    }
LABEL_57:
    if (v3 < 0)
      v27 = v3;
    else
      v27 = v3 & 0xFFFFFFFFFFFFFF8;
    v28 = sub_10004F2F0(0, (unint64_t *)&qword_1006434D0, UIViewController_ptr);
    swift_bridgeObjectRetain(v3);
    v25 = _bridgeCocoaArray<A>(_:)(v27, v28);
    goto LABEL_50;
  }

}

void sub_10009D1E8(unint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  _BYTE v8[24];

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_viewStyle) == 2)
  {
    v3 = sub_1004B9BFC(a1);
    swift_bridgeObjectRelease(a1);
    if (v3)
    {
      v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_columnViewControllers);
      *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_columnViewControllers) = v3;
      swift_bridgeObjectRelease(v4);
      return;
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000053, 0x800000010052EFB0, "Files/DOCBrowserNavigationDataSource.swift", 42, 2, 95, 0);
  }
  else
  {
    v5 = sub_10007F738(a1);
    swift_bridgeObjectRelease(a1);
    if (v5)
    {
      v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_containerControllers);
      swift_beginAccess(v6, v8, 1, 0);
      v7 = *v6;
      *v6 = (uint64_t)v5;
      swift_bridgeObjectRelease(v7);
      return;
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000055, 0x800000010052EF50, "Files/DOCBrowserNavigationDataSource.swift", 42, 2, 101, 0);
  }
  __break(1u);
}

double sub_10009D330()
{
  uint64_t v0;

  return sub_1000303F8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(_QWORD *, __n128))(v0 + 32));
}

uint64_t sub_10009D33C()
{
  uint64_t v0;

  return sub_10009D348(*(void (**)(void))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10009D348(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  v6 = a4 + 16;
  a1();
  v7 = (_QWORD *)(a3 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_stateReporting);
  v8 = *(_QWORD *)(a3 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_stateReporting);
  v9 = *(_QWORD *)(a3 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_stateReporting + 8);
  *v7 = 0;
  v7[1] = 0;
  sub_100087534(v8, v9);
  sub_1002C3DF0();
  swift_beginAccess(v6, v13, 1, 0);
  v10 = *(_QWORD *)(a4 + 16);
  v11 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  return sub_100087534(v10, v11);
}

void sub_10009D3C8()
{
  uint64_t v0;

  sub_10009D3D0(v0);
}

void sub_10009D3D0(uint64_t a1)
{
  void (*v2)(__n128);
  uint64_t v3;
  __n128 v4;
  _BYTE v5[24];

  swift_beginAccess(a1 + 16, v5, 0, 0);
  v2 = *(void (**)(__n128))(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = swift_retain();
    v2(v4);
    sub_100087534((uint64_t)v2, v3);
  }
}

void sub_10009D434(unint64_t a1)
{
  uint64_t v1;

  sub_10009D43C(a1, v1);
}

void sub_10009D43C(unint64_t a1, uint64_t a2)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  char v17;
  void (*v18)(__n128);
  uint64_t v19;
  __n128 v20;
  _QWORD v21[3];

  v5 = 0x746E65746E6F63;
  v6 = 0xE700000000000000;
  v7 = 0x676E6964616F6CLL;
  switch(a1)
  {
    case 0uLL:
      goto LABEL_6;
    case 1uLL:
      goto LABEL_10;
    case 2uLL:
      v6 = 0x8000000100523C20;
      v5 = 0xD000000000000010;
      goto LABEL_10;
    case 3uLL:
      v5 = 0x7974706D65;
      v6 = 0xE500000000000000;
      goto LABEL_10;
    case 4uLL:
      v5 = 0x697265766F636572;
      v6 = 0xEA0000000000676ELL;
      goto LABEL_10;
    default:
      swift_errorRetain(a1);
      v8 = (void *)_convertErrorToNSError(_:)(a1);
      v9 = objc_msgSend(v8, "domain");
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      objc_msgSend(v8, "code");
      v13 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v15 = v14;
      v21[0] = v10;
      v21[1] = v12;
      swift_bridgeObjectRetain(v12);
      v16._countAndFlagsBits = v13;
      v16._object = v15;
      String.append(_:)(v16);

      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v15);
      sub_1000A851C(a1);
      v7 = v10;
      v6 = v12;
LABEL_6:
      if (v7 == 0x676E6964616F6CLL)
      {
        v5 = 0x676E6964616F6CLL;
        if (v6 == 0xE700000000000000)
        {
          swift_bridgeObjectRelease(0xE700000000000000);
          return;
        }
      }
      else
      {
        v5 = v7;
      }
LABEL_10:
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, 0x676E6964616F6CLL, 0xE700000000000000, 0);
      swift_bridgeObjectRelease(v6);
      if ((v17 & 1) == 0)
      {
        swift_beginAccess(a2 + 16, v21, 0, 0);
        v18 = *(void (**)(__n128))(a2 + 16);
        if (v18)
        {
          v19 = *(_QWORD *)(a2 + 24);
          v20 = swift_retain();
          v18(v20);
          sub_100087534((uint64_t)v18, v19);
        }
      }
      return;
  }
}

uint64_t sub_10009D728(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = (uint64_t *)(v2 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_shortDebugID);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_shortDebugID + 8);
  *v3 = a1;
  v3[1] = a2;
  swift_bridgeObjectRelease(v4);
  v6 = *v3;
  v5 = v3[1];
  v7 = (_QWORD *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC5Files30DOCBrowserNavigationDataSource_historyDataSource)
                + OBJC_IVAR____TtC5Files32_DOCBrowserHistoryDataSourceBase_shortDebugID);
  v8 = v7[1];
  *v7 = v6;
  v7[1] = v5;
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRelease(v8);
}

uint64_t type metadata accessor for DOCSourceVisibilityController()
{
  return objc_opt_self(_TtC5Files29DOCSourceVisibilityController);
}

uint64_t sub_10009D7C0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t result;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  _BYTE v10[24];
  _BYTE v11[32];
  _QWORD aBlock[3];
  void *ObjectType;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  _BYTE v16[24];

  v1 = v0 + 96;
  swift_beginAccess(v0 + 96, v16, 0, 0);
  sub_1000271D4(v0 + 96, (uint64_t)aBlock, &qword_100642730);
  v2 = ObjectType;
  result = sub_10000CB4C((uint64_t)aBlock, &qword_100642730);
  if (!v2)
  {
    v4 = objc_msgSend((id)objc_opt_self(NSDistributedNotificationCenter), "defaultCenter");
    v5 = *(_QWORD *)(v0 + 88);
    v6 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
    v7 = swift_allocObject(&unk_1005E7338, 24, 7);
    swift_weakInit(v7 + 16, v0);
    v14 = sub_1003DC688;
    v15 = v7;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000B3580;
    ObjectType = &unk_1005E7350;
    v8 = _Block_copy(aBlock);
    swift_release(v15);
    v9 = objc_msgSend(v4, "addObserverForName:object:queue:usingBlock:", v5, 0, v6, v8);
    _Block_release(v8);

    ObjectType = (void *)swift_getObjectType(v9);
    aBlock[0] = v9;
    sub_10007EBDC((uint64_t)aBlock, (uint64_t)v11);
    swift_beginAccess(v1, v10, 33, 0);
    sub_10007EB94((uint64_t)v11, v1);
    return swift_endAccess(v10);
  }
  return result;
}

double sub_10009D970(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  double result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[24];

  v2 = v1;
  v4 = (uint64_t *)(v1 + 80);
  swift_beginAccess(v4, v17, 0, 0);
  v5 = *(_QWORD *)(v2 + 80);
  swift_retain();
  v6 = swift_bridgeObjectRetain(v5);
  v7 = sub_100089CB8(v6, a1);
  swift_bridgeObjectRelease(v5);
  swift_release(a1);
  if ((v7 & 1) == 0)
  {
    swift_beginAccess(v4, v16, 33, 0);
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
    v11 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v10 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v11 >= v10 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
    v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, a1);
    specialized Array._endMutation()(v12);
    swift_endAccess(v16);
    v13 = *v4;
    if (!((unint64_t)v13 >> 62))
    {
      if (*(uint64_t *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10) < 1)
        return result;
      goto LABEL_6;
    }
    if (v13 < 0)
      v14 = v13;
    else
      v14 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v15 = _CocoaArrayWrapper.endIndex.getter(v14);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
    if (v15 >= 1)
LABEL_6:
      sub_10009D7C0();
  }
  return result;
}

uint64_t type metadata accessor for DOCSourceVisibilityController.VisibilityObserver()
{
  return objc_opt_self(_TtCC5Files29DOCSourceVisibilityController18VisibilityObserver);
}

uint64_t sub_10009DAD4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_1004E93C0;
  v4[1] = &unk_1004E93D8;
  v4[2] = &unk_1004E93D8;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for DispatchTimeInterval(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for DOCProviderDomainStateManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100656090;
  if (!qword_100656090)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DOCProviderDomainStateManager);
  return result;
}

uint64_t sub_10009DBA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD *v23;

  v2 = v1;
  v22 = a1;
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v10);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_WORD *)(v2 + 16) = 512;
  *(_BYTE *)(v2 + 18) = 2;
  v21[1] = sub_100086BF0();
  v23 = _swiftEmptyArrayStorage;
  v13 = sub_10005A360((unint64_t *)&qword_100643640, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10006922C((uint64_t *)&unk_100641280);
  v15 = sub_10008825C((unint64_t *)&qword_100643650, (uint64_t *)&unk_100641280);
  v16 = dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v14, v15, v10, v13);
  static DispatchQoS.unspecified.getter(v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v3);
  *(_QWORD *)(v2 + 32) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002BLL, 0x80000001005363A0, v9, v12, v6, 0);
  v17 = v2 + OBJC_IVAR____TtC5Files29DOCProviderDomainStateManager_domainStatePollingInterval;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC5Files29DOCProviderDomainStateManager_domainStatePollingInterval) = 2;
  v18 = enum case for DispatchTimeInterval.seconds(_:);
  v19 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v17, v18, v19);
  *(_QWORD *)(v2 + 24) = v22;
  return v2;
}

uint64_t sub_10009DDC0()
{
  uint64_t v0;
  void *v1;
  _QWORD v3[23];
  _QWORD v4[16];
  _BYTE __dst[296];

  sub_1002F51DC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(void **)(v0 + 72));
  sub_100070EDC(v0 + 136, (uint64_t)v3, (uint64_t *)&unk_100641300);
  sub_1000716DC(v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100071784);
  sub_100070EDC(v0 + 416, (uint64_t)v4, &qword_100658670);
  sub_1000717C0(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10007B580);

  memcpy(__dst, (const void *)(v0 + 608), 0x120uLL);
  sub_1002F5218((uint64_t)__dst);
  v1 = *(void **)(v0 + 912);

  return swift_deallocClassInstance(v0, 960, 7);
}

uint64_t type metadata accessor for DOCItemCollectionLayoutTraits()
{
  return objc_opt_self(_TtC5Files29DOCItemCollectionLayoutTraits);
}

ValueMetadata *type metadata accessor for DOCItemCollectionLayoutTraits.ListItemTraits()
{
  return &type metadata for DOCItemCollectionLayoutTraits.ListItemTraits;
}

ValueMetadata *type metadata accessor for DOCItemCollectionLayoutTraits.GridItemTraits()
{
  return &type metadata for DOCItemCollectionLayoutTraits.GridItemTraits;
}

__n128 sub_10009DED4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  void *v4;
  void *v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;
  __n128 v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  char v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  char v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __n128 result;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  __int128 v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  unsigned __int8 v45;
  __int128 v46;
  void *v47;
  _BYTE v48[48];
  char v49;

  v3 = *(_OWORD *)(v1 + 16);
  v5 = *(void **)(v1 + 32);
  v4 = *(void **)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  v7 = *(_OWORD *)(v1 + 56);
  v8 = *(void **)(v1 + 72);
  v9 = *(_QWORD *)(v1 + 80);
  v10 = *(__n128 *)(v1 + 104);
  v11 = *(_OWORD *)(v1 + 88);
  v12 = *(_QWORD *)(v1 + 120);
  if (v5)
  {
    v13 = v6 & 1;
    v14 = *(_BYTE *)(v1 + 128) & 1;
    v15 = v5;
    v16 = v4;
    v17 = v8;
    v18 = v9;
    v19 = v12;
    v35 = v3;
    v37 = v7;
    v39 = v11;
    v41 = v10;
  }
  else
  {
    v34 = *(void **)(v1 + 40);
    v31 = *(_QWORD *)(v1 + 48);
    v20 = *(void **)(v1 + 72);
    v33 = *(_OWORD *)(v1 + 16);
    v32 = *(_OWORD *)(v1 + 56);
    sub_10001942C(v1, (uint64_t)&v43);
    v21 = v45;
    v22 = v47;
    v23 = v49;
    v42 = *(_QWORD *)(v1 + 16);
    v40 = *(_QWORD *)(v1 + 24);
    v24 = *(void **)(v1 + 40);
    v38 = *(void **)(v1 + 32);
    v36 = *(_QWORD *)(v1 + 48);
    v30 = *(_QWORD *)(v1 + 56);
    v29 = *(_QWORD *)(v1 + 64);
    v28 = *(void **)(v1 + 72);
    v25 = v44;
    *(_OWORD *)(v1 + 16) = v43;
    *(_OWORD *)(v1 + 32) = v25;
    *(_QWORD *)(v1 + 48) = v21;
    *(_OWORD *)(v1 + 56) = v46;
    *(_QWORD *)(v1 + 72) = v22;
    v26 = *(_OWORD *)&v48[16];
    *(_OWORD *)(v1 + 80) = *(_OWORD *)v48;
    *(_OWORD *)(v1 + 96) = v26;
    *(_OWORD *)(v1 + 112) = *(_OWORD *)&v48[32];
    *(_BYTE *)(v1 + 128) = v23;
    sub_1002F54D0((uint64_t)&v43);
    sub_1002F51DC(v42, v40, v38, v24, v36, v30, v29, v28);
    v7 = v32;
    v3 = v33;
    v8 = v20;
    v6 = v31;
    v4 = v34;
    v14 = v49;
    v19 = *(_QWORD *)&v48[40];
    v39 = *(_OWORD *)&v48[8];
    v41 = *(__n128 *)&v48[24];
    v13 = v45;
    v17 = v47;
    v18 = *(_QWORD *)v48;
    v16 = (void *)*((_QWORD *)&v44 + 1);
    v15 = (void *)v44;
    v35 = v43;
    v37 = v46;
  }
  sub_1002F550C(v3, *((uint64_t *)&v3 + 1), v5, v4, v6, v7, *((uint64_t *)&v7 + 1), v8);
  *(_OWORD *)a1 = v35;
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 24) = v16;
  *(_BYTE *)(a1 + 32) = v13;
  *(_OWORD *)(a1 + 40) = v37;
  *(_QWORD *)(a1 + 56) = v17;
  *(_QWORD *)(a1 + 64) = v18;
  *(_OWORD *)(a1 + 72) = v39;
  result = v41;
  *(__n128 *)(a1 + 88) = v41;
  *(_QWORD *)(a1 + 104) = v19;
  *(_BYTE *)(a1 + 112) = v14;
  return result;
}

void **sub_10009E100@<X0>(double *a1@<X8>)
{
  uint64_t v1;
  void **result;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13[9];

  if ((*(_BYTE *)(v1 + 392) & 1) != 0)
  {
    result = sub_1002F30D4(v1, v13);
    v5 = v13[0];
    v4 = v13[1];
    v7 = v13[2];
    v6 = v13[3];
    v9 = v13[4];
    v8 = v13[5];
    v11 = v13[6];
    v10 = v13[7];
    v12 = v13[8];
    *(double *)(v1 + 320) = v13[0];
    *(double *)(v1 + 328) = v4;
    *(double *)(v1 + 336) = v7;
    *(double *)(v1 + 344) = v6;
    *(double *)(v1 + 352) = v9;
    *(double *)(v1 + 360) = v8;
    *(double *)(v1 + 368) = v11;
    *(double *)(v1 + 376) = v10;
    *(double *)(v1 + 384) = v12;
    *(_BYTE *)(v1 + 392) = 0;
  }
  else
  {
    v12 = *(double *)(v1 + 384);
    v11 = *(double *)(v1 + 368);
    v10 = *(double *)(v1 + 376);
    v9 = *(double *)(v1 + 352);
    v8 = *(double *)(v1 + 360);
    v7 = *(double *)(v1 + 336);
    v6 = *(double *)(v1 + 344);
    v5 = *(double *)(v1 + 320);
    v4 = *(double *)(v1 + 328);
  }
  *a1 = v5;
  a1[1] = v4;
  a1[2] = v7;
  a1[3] = v6;
  a1[4] = v9;
  a1[5] = v8;
  a1[6] = v11;
  a1[7] = v10;
  a1[8] = v12;
  return result;
}

Swift::Void __swiftcall DOCBrowserContainerController.didMove(toParent:)(UIViewController_optional toParent)
{
  char *v1;
  char *v2;
  Class isa;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  _BYTE *v9;
  _BYTE *v10;
  id v11;
  id v12;
  char v13[24];
  objc_super v14;

  v2 = v1;
  isa = toParent.value.super.super.isa;
  v14.receiver = v2;
  v14.super_class = (Class)type metadata accessor for DOCBrowserContainerController();
  objc_msgSendSuper2(&v14, "didMoveToParentViewController:", isa);
  v4 = objc_msgSend(v2, "parentViewController");
  if (v4)
  {
    v5 = v4;
    v6 = type metadata accessor for DOCColumnViewController(0);
    v7 = swift_dynamicCastClass(v5, v6);

    if (v7)
    {
      v8 = (void **)&v2[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
      swift_beginAccess(&v2[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v13, 0, 0);
      v9 = *v8;
      if (*v8)
      {
        v9[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_needsOverlayUpdateWithAnimation] = 0;
        v10 = v9;
        v11 = objc_msgSend(v10, "viewIfLoaded");
        v12 = objc_msgSend(v11, "window");

        if (v12)
          sub_1000926C8();

      }
    }
  }
  sub_10000DC70();
}

Swift::Bool __swiftcall DOCBrowserContainerController.establishFirstResponder()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __objc2_prot *v15;
  uint64_t v16;

  v1 = v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_visibleViewController;
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (!Strong)
    goto LABEL_5;
  v3 = (void *)Strong;
  v15 = &OBJC_PROTOCOL___DOCFirstResponderEstablishing;
  v4 = (void *)swift_dynamicCastObjCProtocolConditional(Strong, 1, &v15);
  if (!v4)
  {

LABEL_5:
    v6 = *(id *)DOCLog.UI.unsafeMutableAddressor(Strong);
    v7 = static os_log_type_t.debug.getter();
    v8 = sub_10006922C((uint64_t *)&unk_100644560);
    v9 = swift_allocObject(v8, 72, 7);
    *(_OWORD *)(v9 + 16) = xmmword_1004D9670;
    v16 = swift_unknownObjectWeakLoadStrong(v1);
    v10 = sub_10006922C((uint64_t *)&unk_1006434C0);
    v11 = String.init<A>(describing:)(&v16, v10);
    v13 = v12;
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    *(_QWORD *)(v9 + 64) = sub_10006A638();
    *(_QWORD *)(v9 + 32) = v11;
    *(_QWORD *)(v9 + 40) = v13;
    os_log(_:dso:log:type:_:)("The currently visible view controller %@ cannot establish any first responder.", 78, 2, &_mh_execute_header, v6, v7, v9);

    swift_bridgeObjectRelease(v9);
    return 0;
  }
  v5 = objc_msgSend(v4, "establishFirstResponder");

  return v5;
}

Swift::Void __swiftcall DOCBrowserContainerController.viewWillDisappear(_:)(Swift::Bool a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  id v9;
  void *v10;
  uint64_t v11;
  objc_super v12;

  v12.receiver = v1;
  v12.super_class = (Class)type metadata accessor for DOCBrowserContainerController();
  objc_msgSendSuper2(&v12, "viewWillDisappear:", a1);
  if ((*((_BYTE *)v1 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_preventAppearanceForwarding) & 1) == 0)
  {
    v3 = objc_msgSend(v1, "childViewControllers");
    v4 = sub_10004F2F0(0, (unint64_t *)&qword_1006434D0, UIViewController_ptr);
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    if ((unint64_t)v5 >> 62)
    {
      if (v5 < 0)
        v11 = v5;
      else
        v11 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v6 = _CocoaArrayWrapper.endIndex.getter(v11);
      if (v6)
        goto LABEL_4;
    }
    else
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v5);
      if (v6)
      {
LABEL_4:
        if (v6 < 1)
        {
          __break(1u);
          return;
        }
        v7 = 0;
        v8 = a1;
        do
        {
          if ((v5 & 0xC000000000000001) != 0)
            v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
          else
            v9 = *(id *)(v5 + 8 * v7 + 32);
          v10 = v9;
          ++v7;
          objc_msgSend(v9, "beginAppearanceTransition:animated:", 0, v8);

        }
        while (v6 != v7);
      }
    }
    swift_bridgeObjectRelease_n(v5, 2);
  }
}

Swift::Void __swiftcall DOCBrowserContainerController.viewDidDisappear(_:)(Swift::Bool a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  uint64_t v10;
  objc_super v11;

  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for DOCBrowserContainerController();
  objc_msgSendSuper2(&v11, "viewDidDisappear:", a1);
  if ((*((_BYTE *)v1 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_preventAppearanceForwarding) & 1) == 0)
  {
    v3 = objc_msgSend(v1, "childViewControllers");
    v4 = sub_10004F2F0(0, (unint64_t *)&qword_1006434D0, UIViewController_ptr);
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    if ((unint64_t)v5 >> 62)
    {
      if (v5 < 0)
        v10 = v5;
      else
        v10 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v6 = _CocoaArrayWrapper.endIndex.getter(v10);
      if (v6)
        goto LABEL_4;
    }
    else
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v5);
      if (v6)
      {
LABEL_4:
        if (v6 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v6; ++i)
        {
          if ((v5 & 0xC000000000000001) != 0)
            v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
          else
            v8 = *(id *)(v5 + 8 * i + 32);
          v9 = v8;
          objc_msgSend(v8, "endAppearanceTransition");

        }
      }
    }
    swift_bridgeObjectRelease_n(v5, 2);
  }
}

Swift::Void __swiftcall DOCBrowserContainerController.viewDidMove(to:shouldAppearOrDisappear:)(UIWindow_optional to, Swift::Bool shouldAppearOrDisappear)
{
  char *v2;
  char *v3;
  Swift::Bool is_nil;
  Class isa;
  uint64_t v6;
  uint64_t ObjectType;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  objc_super v20;

  v3 = v2;
  is_nil = to.is_nil;
  isa = to.value.super.super.super.isa;
  v20.receiver = v3;
  v20.super_class = (Class)type metadata accessor for DOCBrowserContainerController();
  objc_msgSendSuper2(&v20, "viewDidMoveToWindow:shouldAppearOrDisappear:", isa, is_nil);
  if (isa)
  {
    v6 = *(_QWORD *)&v3[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_dataSource + 8];
    ObjectType = swift_getObjectType(*(_QWORD *)&v3[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_dataSource]);
    v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(ObjectType, v6);

    if (v8)
    {
      v9 = objc_msgSend(v3, "childViewControllers");
      v10 = sub_10004F2F0(0, (unint64_t *)&qword_1006434D0, UIViewController_ptr);
      v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

      if ((unint64_t)v11 >> 62)
      {
        if (v11 < 0)
          v19 = v11;
        else
          v19 = v11 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v11);
        v12 = _CocoaArrayWrapper.endIndex.getter(v19);
        swift_bridgeObjectRelease(v11);
        if (v12)
          goto LABEL_5;
      }
      else
      {
        v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v12)
        {
LABEL_5:
          if (v12 < 1)
          {
            __break(1u);
            return;
          }
          for (i = 0; i != v12; ++i)
          {
            if ((v11 & 0xC000000000000001) != 0)
              v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v11);
            else
              v14 = *(id *)(v11 + 8 * i + 32);
            v15 = v14;
            v16 = type metadata accessor for DOCBrowserContainedViewController();
            v17 = (void *)swift_dynamicCastClass(v15, v16);
            if (v17)
            {
              v18 = v17;
              if (objc_msgSend(v17, "wantsAppearanceOverride"))
                objc_msgSend(v18, "setAppearance:", 0);
            }

          }
        }
      }
      swift_bridgeObjectRelease(v11);
    }
  }
}

void sub_10009EC60()
{
  uint64_t v0;

  sub_10000AD40(*(_QWORD *)(v0 + 16), *(char **)(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t type metadata accessor for DOCBrowserContainerController.DOCBrowserContainerControllerView()
{
  return objc_opt_self(_TtCC5Files29DOCBrowserContainerController33DOCBrowserContainerControllerView);
}

void sub_10009EDA0()
{
  uint64_t v0;
  id *v1;
  double v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t Strong;
  id v7;
  char v8;
  void *v9;
  id v10;
  id v11;
  _BYTE v12[24];

  v1 = (id *)(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController);
  *(_QWORD *)&v2 = swift_beginAccess(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController, v12, 0, 0).n128_u64[0];
  if (*v1)
  {
    v3 = objc_msgSend(*v1, "viewIfLoaded", v2);
    if (v3)
    {
      v5 = v3;
      Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC5Files29DOCBrowserContainerController_visibleViewController, v4);
      v7 = *v1;
      v8 = *v1 == 0;
      if (Strong)
      {
        v9 = (void *)Strong;
        if (v7)
        {
          type metadata accessor for DOCBrowserContainedViewController();
          v10 = v7;
          v11 = v9;
          v8 = static NSObject.== infix(_:_:)(v11, v10);

          v9 = v10;
        }
        else
        {
          v8 = 0;
        }

      }
      objc_msgSend(v5, "setHidden:", (v8 & 1) == 0);

    }
  }
}

void sub_10009EEE4()
{
  id v0;
  NSString v1;
  unsigned __int8 v2;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  byte_1006565B0 = v2;
}

void sub_10009EF70()
{
  id v0;
  NSString v1;
  unsigned __int8 v2;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  byte_100644180 = v2;
}

void sub_10009EFFC()
{
  id v0;
  NSString v1;
  unsigned __int8 v2;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  byte_100658218 = v2;
}

void sub_10009F088()
{
  id v0;
  NSString v1;
  unsigned __int8 v2;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  byte_100657780 = v2;
}

uint64_t DOCHierarchyController.ChangeCoordinator.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for LocationPairedViewController()
{
  return objc_opt_self(_TtC5FilesP33_6DDE472ADD076946F61E7AD97D4F5D0228LocationPairedViewController);
}

uint64_t type metadata accessor for DOCPlaceHolderViewController()
{
  return objc_opt_self(_TtC5FilesP33_A5A64235B1E100244B7B9EBD6441597E28DOCPlaceHolderViewController);
}

void sub_10009F190()
{
  sub_10009F290();
}

double sub_10009F1B0(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t ObjectType;
  char *v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);
  char *v13;
  double result;
  _QWORD v15[4];

  ObjectType = swift_getObjectType(v2);
  v6 = &v2[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_eventReporting];
  *((_QWORD *)v6 + 1) = a2;
  v7 = swift_unknownObjectWeakAssign(v6, a1);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v9 = Strong;
    v10 = *((_QWORD *)v6 + 1);
    v11 = swift_getObjectType(Strong);
    v15[3] = ObjectType;
    v15[0] = v2;
    v12 = *(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 8);
    v13 = v2;
    v12(v15, 1, 1, 0, v11, v10);
    swift_unknownObjectRelease(v9);
    sub_100068588(v15);
    *(_QWORD *)&result = swift_unknownObjectRelease(a1).n128_u64[0];
  }
  else
  {
    *(_QWORD *)&result = swift_unknownObjectRelease(a1).n128_u64[0];
  }
  return result;
}

void sub_10009F290()
{
  char *v0;
  void *v1;
  id v2;

  if ((objc_msgSend(v0, "doc_scheduleHandlerIfInLiveResize:", "_doc_performLiveResizeSkipped_updateOverlay") & 1) == 0)
  {
    v1 = *(void **)&v0[OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_containerNavigationItem];
    if (v1)
    {
      v2 = v1;
      objc_msgSend(v2, "setHidesSearchBarWhenScrolling:", 0);
      objc_msgSend(v2, "setHidesBackButton:", 1);
      sub_1001F7950((unint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 1);
      sub_1004ADBC4(v2, *(void **)&v0[OBJC_IVAR____TtC5FilesP33_A5A64235B1E100244B7B9EBD6441597E28DOCPlaceHolderViewController_location]);

    }
  }
}

uint64_t sub_10009F340(uint64_t a1)
{
  _QWORD v2[6];

  v2[0] = &unk_1004DFED0;
  v2[1] = &unk_1004DFEE8;
  v2[2] = &unk_1004DFF00;
  v2[3] = &unk_1004DFF18;
  v2[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 6, v2, a1 + 304);
}

uint64_t type metadata accessor for DOCOperationCombinedProgress(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007E804(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DOCOperationCombinedProgress);
}

uint64_t sub_10009F3B8()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _BYTE v43[24];
  _BYTE v44[24];
  uint64_t v45[3];

  v2 = v0;
  v3 = sub_10009F908(sub_1003754F8, &qword_100649058);
  v4 = v3;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 >= 0)
      v3 &= 0xFFFFFFFFFFFFFF8uLL;
    v5 = _CocoaArrayWrapper.endIndex.getter(v3);
  }
  else
  {
    v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v4);
  if (v5 < 1)
  {
    v16 = 0;
    goto LABEL_25;
  }
  v6 = sub_10009F908(sub_1003754F8, &qword_100649058);
  v7 = v6;
  if ((unint64_t)v6 >> 62)
  {
    if (v6 >= 0)
      v6 &= 0xFFFFFFFFFFFFFF8uLL;
    v8 = _CocoaArrayWrapper.endIndex.getter(v6);
    if (v8)
      goto LABEL_6;
LABEL_22:
    swift_bridgeObjectRelease(v7);
    v11 = _swiftEmptyArrayStorage;
    goto LABEL_23;
  }
  v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v8)
    goto LABEL_22;
LABEL_6:
  v45[0] = (uint64_t)_swiftEmptyArrayStorage;
  v9 = (uint64_t)v45;
  sub_100154EC0(0, v8 & ~(v8 >> 63), 0);
  if (v8 < 0)
  {
    __break(1u);
LABEL_82:
    if (v9 < 0)
      v40 = v9;
    else
      v40 = v9 & 0xFFFFFFFFFFFFFF8;
    v29 = _CocoaArrayWrapper.endIndex.getter(v40);
LABEL_50:
    v16 = v42;
    v18 = v41;
    swift_bridgeObjectRelease(v9);
    v28 = 0;
    v1 = v1 / (double)v29;
    goto LABEL_62;
  }
  v10 = 0;
  v11 = (_QWORD *)v45[0];
  do
  {
    if ((v7 & 0xC000000000000001) != 0)
      v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v7);
    else
      swift_retain();
    v13 = *(_BYTE *)(v12 + *(_QWORD *)(*(_QWORD *)v12 + 336));
    swift_release(v12);
    v45[0] = (uint64_t)v11;
    v15 = v11[2];
    v14 = v11[3];
    if (v15 >= v14 >> 1)
    {
      sub_100154EC0(v14 > 1, v15 + 1, 1);
      v11 = (_QWORD *)v45[0];
    }
    ++v10;
    v11[2] = v15 + 1;
    *((_BYTE *)v11 + v15 + 32) = v13;
  }
  while (v8 != v10);
  swift_bridgeObjectRelease(v7);
LABEL_23:
  v45[0] = (uint64_t)v11;
  swift_bridgeObjectRetain(v11);
  sub_100405CE0(v45);
  swift_bridgeObjectRelease(v11);
  if (*(_QWORD *)(v45[0] + 16))
  {
    v16 = *(unsigned __int8 *)(v45[0] + 32);
    swift_release(v45[0]);
LABEL_25:
    v17 = sub_10009F908(sub_1003754F8, &qword_100649058);
    if ((unint64_t)v17 >> 62)
    {
LABEL_53:
      if (v17 < 0)
        v30 = v17;
      else
        v30 = v17 & 0xFFFFFFFFFFFFFF8;
      v18 = _CocoaArrayWrapper.endIndex.getter(v30);
    }
    else
    {
      v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v17);
    v1 = 0.0;
    if (v18 < 1)
    {
      v28 = 0;
      goto LABEL_62;
    }
    v19 = sub_10009F908(sub_1003754F8, &qword_100649058);
    v17 = v19;
    v42 = v16;
    if ((unint64_t)v19 >> 62)
    {
      if (v19 < 0)
        v31 = v19;
      else
        v31 = v19 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v19);
      v20 = _CocoaArrayWrapper.endIndex.getter(v31);
      if (v20)
        goto LABEL_30;
    }
    else
    {
      v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v19);
      if (v20)
      {
LABEL_30:
        v41 = v18;
        v21 = 0;
        v22 = 0;
LABEL_31:
        v23 = v21;
        do
        {
          if ((v17 & 0xC000000000000001) != 0)
          {
            v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v17);
            v21 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_52;
          }
          else
          {
            swift_retain();
            v21 = v23 + 1;
            if (__OFADD__(v23, 1))
            {
LABEL_52:
              __break(1u);
              goto LABEL_53;
            }
          }
          v25 = v24 + *(_QWORD *)(*(_QWORD *)v24 + 328);
          v26 = *(double *)v25;
          v27 = *(_BYTE *)(v25 + 8);
          v16 = *(unsigned __int8 *)(v24 + *(_QWORD *)(*(_QWORD *)v24 + 336));
          swift_release(v24);
          if ((v16 & 0xFE) == 2)
          {
            if ((v27 & 1) == 0)
            {
              v1 = v1 + v26;
              goto LABEL_44;
            }
            v1 = v1 + 0.0;
          }
          else if ((v16 & 1) == 0)
          {
            v1 = v1 + 1.0;
LABEL_44:
            v22 = 1;
            if (v21 != v20)
              goto LABEL_31;
            swift_bridgeObjectRelease_n(v17, 2);
            goto LABEL_48;
          }
          ++v23;
        }
        while (v21 != v20);
        swift_bridgeObjectRelease_n(v17, 2);
        if ((v22 & 1) == 0)
        {
          v28 = 1;
          v1 = 0.0;
          v16 = v42;
          v18 = v41;
          goto LABEL_62;
        }
LABEL_48:
        v9 = sub_10009F908(sub_1003754F8, &qword_100649058);
        if ((unint64_t)v9 >> 62)
          goto LABEL_82;
        v29 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_50;
      }
    }
    swift_bridgeObjectRelease_n(v17, 2);
    v28 = 1;
LABEL_62:
    v32 = (_BYTE *)(v2 + direct field offset for DOCOperationCombinedProgress.state);
    v33 = 1;
    swift_beginAccess(v2 + direct field offset for DOCOperationCombinedProgress.state, v45, 1, 0);
    v34 = *v32;
    switch(v34)
    {
      case 2:
        if (v16 == 2)
          goto LABEL_69;
        break;
      case 3:
        if (v16 == 3)
          goto LABEL_69;
        break;
      case 4:
LABEL_80:
        *v32 = v16;
        v38 = v2 + direct field offset for DOCOperationCombinedProgress.progressValue;
        swift_beginAccess(v38, v44, 1, 0);
        *(double *)v38 = v1;
        *(_BYTE *)(v38 + 8) = v28;
        *(_BYTE *)(v38 + 9) = v18 < 1;
        return v33;
      default:
        if ((v16 & 0xFE) != 2 && (v16 & 1) != ((v34 & 1) == 0))
        {
LABEL_69:
          v35 = v2 + direct field offset for DOCOperationCombinedProgress.progressValue;
          swift_beginAccess(v2 + direct field offset for DOCOperationCombinedProgress.progressValue, v43, 0, 0);
          if (v18 < 1)
            v36 = *(unsigned __int8 *)(v35 + 9);
          else
            v36 = 0;
          if (v18 >= 1 && (*(_BYTE *)(v35 + 9) & 1) == 0)
          {
            v37 = *(unsigned __int8 *)(v35 + 8);
            if (((v28 | v37) & 1) != 0)
              v36 = v28 & v37;
            else
              v36 = *(double *)v35 == v1;
          }
          v33 = v36 ^ 1u;
          goto LABEL_80;
        }
        break;
    }
    v33 = 1;
    goto LABEL_80;
  }
  swift_release(v45[0]);
  __break(1u);
  result = swift_release(v45[0]);
  __break(1u);
  return result;
}

uint64_t sub_10009F908(uint64_t (*a1)(uint64_t), uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE v27[40];
  uint64_t v28;
  _OWORD v29[2];
  __int128 v30;
  _OWORD v31[2];
  __int128 v32;
  _BYTE v33[40];
  uint64_t v34;
  _QWORD *v35;
  char v36[32];

  v4 = (uint64_t *)(v2 + qword_10064BBE0);
  swift_beginAccess(v4, v36, 0, 0);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (!v6)
    return (uint64_t)v7;
  v35 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v5);
  specialized ContiguousArray.reserveCapacity(_:)(v6);
  result = a1(v5);
  v9 = result;
  v11 = v10;
  v12 = 0;
  v13 = v5 + 64;
  while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(_BYTE *)(v5 + 32))
  {
    v15 = (unint64_t)v9 >> 6;
    if ((*(_QWORD *)(v13 + 8 * ((unint64_t)v9 >> 6)) & (1 << v9)) == 0)
      goto LABEL_24;
    if (*(_DWORD *)(v5 + 36) != v11)
      goto LABEL_25;
    sub_10006777C(*(_QWORD *)(v5 + 48) + 40 * v9, (uint64_t)v33);
    v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v9);
    v16 = v34;
    sub_10006777C((uint64_t)v33, (uint64_t)v31);
    *((_QWORD *)&v32 + 1) = v16;
    v29[0] = v31[0];
    v29[1] = v31[1];
    v30 = v32;
    swift_retain_n(v16, 2);
    sub_10000CB4C((uint64_t)v33, a2);
    sub_10006777C((uint64_t)v29, (uint64_t)v27);
    v17 = *((_QWORD *)&v30 + 1);
    v28 = *((_QWORD *)&v30 + 1);
    swift_retain();
    sub_100067748((uint64_t)v27);
    v18 = sub_10000CB4C((uint64_t)v29, a2);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
    v19 = v35[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
    v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
    result = specialized ContiguousArray._endMutation()(v20);
    v14 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 >= v14)
      goto LABEL_26;
    v21 = *(_QWORD *)(v13 + 8 * v15);
    if ((v21 & (1 << v9)) == 0)
      goto LABEL_27;
    if (*(_DWORD *)(v5 + 36) != v11)
      goto LABEL_28;
    v22 = v21 & (-2 << (v9 & 0x3F));
    if (v22)
    {
      v14 = __clz(__rbit64(v22)) | v9 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = v15 + 1;
      v24 = (unint64_t)(v14 + 63) >> 6;
      if (v15 + 1 < v24)
      {
        v25 = *(_QWORD *)(v13 + 8 * v23);
        if (!v25)
        {
          v23 = v15 + 2;
          if (v15 + 2 >= v24)
            goto LABEL_4;
          v25 = *(_QWORD *)(v13 + 8 * v23);
          if (!v25)
          {
            while (v24 - 3 != v15)
            {
              v25 = *(_QWORD *)(v5 + 88 + 8 * v15++);
              if (v25)
              {
                v23 = v15 + 2;
                goto LABEL_15;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_15:
        v14 = __clz(__rbit64(v25)) + (v23 << 6);
      }
    }
LABEL_4:
    ++v12;
    v9 = v14;
    if (v12 == v6)
    {
      v7 = v35;
      swift_bridgeObjectRelease(v5);
      return (uint64_t)v7;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

void sub_10009FBA0()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  NSString v9;
  id v10;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_observedProgress);
  if (v1)
  {
    if (*(_BYTE *)(v0 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_isObservingProgress) == 1)
    {
      *(_BYTE *)(v0 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_isObservingProgress) = 0;
      v2 = v1;
      v3 = *(void **)DOCLog.UI.unsafeMutableAddressor();
      v4 = sub_10006922C((uint64_t *)&unk_100644560);
      v5 = swift_allocObject(v4, 72, 7);
      *(_OWORD *)(v5 + 16) = xmmword_1004D9670;
      *(_QWORD *)(v5 + 56) = sub_10004F2F0(0, (unint64_t *)&unk_100646BB0, NSProgress_ptr);
      *(_QWORD *)(v5 + 64) = sub_1000E8324();
      *(_QWORD *)(v5 + 32) = v2;
      v6 = v2;
      v7 = v3;
      v8 = static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)("Progress: [CELL CONTENT] REMOVE fractionCompleted observer for: %{public}@", 74, 2, &_mh_execute_header, v7, v8, v5);

      swift_bridgeObjectRelease(v5);
      v9 = String._bridgeToObjectiveC()();
      objc_msgSend(v6, "removeObserver:forKeyPath:context:", v0, v9, &unk_100658630);

      v10 = String._bridgeToObjectiveC()();
      objc_msgSend(v6, "removeObserver:forKeyPath:context:", v0, v10, &unk_100658630);

    }
  }
}

void sub_10009FD48()
{
  qword_100672F08 = 16303;
}

void sub_10009FDF8()
{
  uint64_t v0;

  sub_1000380F4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for DOCSymbolImageBarButtonItem()
{
  return objc_opt_self(_TtC5Files27DOCSymbolImageBarButtonItem);
}

id sub_10009FE20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  NSString v12;
  id v13;
  objc_super v15;

  v6 = &v3[OBJC_IVAR____TtC5Files27DOCSymbolImageBarButtonItem_symbolDescriptor];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  *((_QWORD *)v6 + 2) = a3;
  v15.receiver = v3;
  v15.super_class = (Class)type metadata accessor for DOCSymbolImageBarButtonItem();
  swift_bridgeObjectRetain(a2);
  v7 = objc_msgSendSuper2(&v15, "init");
  v8 = (void *)objc_opt_self(UIImageSymbolConfiguration);
  v9 = v7;
  v10 = objc_msgSend(v8, "configurationWithScale:", a3, v15.receiver, v15.super_class);
  swift_bridgeObjectRetain(a2);
  v11 = v10;
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v13 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v12, v11);
  swift_bridgeObjectRelease(a2);

  objc_msgSend(v9, "setImage:", v13);
  objc_msgSend(v9, "setStyle:", 0);

  return v9;
}

void sub_10009FF74(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;

  *a2 = a1;
  v3 = a1;
  v4 = objc_msgSend(v3, "fileProviderItem");
  if (v4)
  {
    v5 = v4;
    a2[4] = &type metadata for DOCIdentityHashableLocation.FPItemImpl;
    a2[5] = sub_1000A0258();
    a2[6] = sub_1000A02E0();
    a2[1] = v3;
    a2[2] = v5;
  }
  else
  {
    v6 = objc_msgSend(v3, "representedTag");
    if (v6)
    {
      v7 = v6;
      v8 = v3;
      v9 = (id)FPTagFromDOCTag(v7);
      a2[4] = &type metadata for DOCIdentityHashableLocation.FPTagImpl;
      a2[5] = sub_100446EF4();
      a2[6] = sub_100446F38();

      a2[1] = v8;
      a2[2] = v9;
    }
    else
    {
      a2[4] = &type metadata for DOCIdentityHashableLocation.OtherImpl;
      a2[5] = sub_100446DA0();
      a2[6] = sub_100446DE4();
      a2[1] = v3;
    }
  }
}

uint64_t initializeWithCopy for DOCIdentityHashableLocation(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a1 + 8;
  v5 = a2 + 8;
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 48) = v6;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  v10 = v3;
  v9(v4, v5, v8);
  return a1;
}

id *sub_1000A00DC(id *a1)
{
  destroy for DOCIdentityHashableLocation(a1);
  return a1;
}

uint64_t sub_1000A0110(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DOCIdentityHashableLocation(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for DOCIdentityHashableLocation()
{
  return &type metadata for DOCIdentityHashableLocation;
}

unint64_t sub_1000A0160()
{
  unint64_t result;

  result = qword_100655C38;
  if (!qword_100655C38)
  {
    result = swift_getWitnessTable(&unk_1004E8E48, &type metadata for DOCIdentityHashableLocation);
    atomic_store(result, (unint64_t *)&qword_100655C38);
  }
  return result;
}

unint64_t sub_1000A01A4()
{
  unint64_t result;

  result = qword_100641758;
  if (!qword_100641758)
  {
    result = swift_getWitnessTable(&unk_1004E8ED0, &type metadata for DOCIdentityHashableLocation);
    atomic_store(result, (unint64_t *)&qword_100641758);
  }
  return result;
}

void destroy for DOCLocationChange(id *a1)
{

}

void sub_1000A0214(uint64_t a1)
{
  uint64_t v1;
  id v3;

  v3 = *(id *)(v1 + 8);
  NSObject.hash(into:)(a1);

}

unint64_t sub_1000A0258()
{
  unint64_t result;

  result = qword_100655B68;
  if (!qword_100655B68)
  {
    result = swift_getWitnessTable(&unk_1004E8F50, &type metadata for DOCIdentityHashableLocation.FPItemImpl);
    atomic_store(result, (unint64_t *)&qword_100655B68);
  }
  return result;
}

unint64_t sub_1000A029C()
{
  unint64_t result;

  result = qword_100655C40;
  if (!qword_100655C40)
  {
    result = swift_getWitnessTable(&unk_1004E8E98, &type metadata for DOCIdentityHashableLocation.FPItemImpl);
    atomic_store(result, (unint64_t *)&qword_100655C40);
  }
  return result;
}

unint64_t sub_1000A02E0()
{
  unint64_t result;

  result = qword_100655B70;
  if (!qword_100655B70)
  {
    result = swift_getWitnessTable(&unk_1004E8F10, &type metadata for DOCIdentityHashableLocation.FPItemImpl);
    atomic_store(result, (unint64_t *)&qword_100655B70);
  }
  return result;
}

uint64_t type metadata accessor for DOCDisplayModeChangeHandler()
{
  return objc_opt_self(_TtC5Files27DOCDisplayModeChangeHandler);
}

uint64_t type metadata accessor for DOCCollectionViewController()
{
  return objc_opt_self(_TtC5Files27DOCCollectionViewController);
}

uint64_t type metadata accessor for DOCBrowserHistoryDataSource()
{
  return objc_opt_self(_TtC5Files27DOCBrowserHistoryDataSource);
}

NSString sub_1000A041C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_100672DF0 = (uint64_t)result;
  return result;
}

uint64_t sub_1000A0450(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DOCBrowserHistoryItem(0) - 8) + 80);
  return sub_10002111C(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

void sub_1000A0490(uint64_t a1)
{
  char *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  void (*v17)(uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>), _QWORD, uint64_t);
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  char *v31;

  v2 = v1;
  v4 = type metadata accessor for DOCBrowserHistoryItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for _DOCBrowserHistoryDataSourceBase.ThreadSafeState(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10006922C(&qword_10064A600);
  __chkstk_darwin(v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v1[OBJC_IVAR____TtC5Files27DOCBrowserHistoryDataSource_ignoreExternalUpdates] & 1) == 0)
  {
    v30 = a1;
    v31 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    v16 = *(void **)(a1 + *(int *)(v4 + 20));
    v17 = *(void (**)(uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>), _QWORD, uint64_t))(**(_QWORD **)&v1[OBJC_IVAR____TtC5Files32_DOCBrowserHistoryDataSourceBase_state] + 160);
    v29 = v16;
    v17(sub_10009301C, 0, v10);
    sub_10007C6DC((uint64_t)v12, (uint64_t)v9, type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet);
    sub_10007C720((uint64_t)v12, type metadata accessor for _DOCBrowserHistoryDataSourceBase.ThreadSafeState);
    sub_1000271D4((uint64_t)v9, (uint64_t)v15, &qword_10064A600);
    sub_10007C720((uint64_t)v9, type metadata accessor for _DOCBrowserHistoryDataSourceBase.ItemSet);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v15, 1, v4) == 1)
    {
      sub_10000CB4C((uint64_t)v15, &qword_10064A600);

      v19 = v30;
      v18 = (uint64_t)v31;
    }
    else
    {
      v20 = *(id *)&v15[*(int *)(v4 + 20)];
      sub_10007C720((uint64_t)v15, type metadata accessor for DOCBrowserHistoryItem);
      sub_10004F2F0(0, (unint64_t *)&unk_1006442E0, DOCConcreteLocation_ptr);
      v21 = v29;
      v22 = static NSObject.== infix(_:_:)(v21, v20);

      v19 = v30;
      v18 = (uint64_t)v31;
      if ((v22 & 1) != 0)
        return;
    }
    if ((sub_1000102E0(v19) & 1) != 0)
    {
      sub_10007C6DC(v19, v18, type metadata accessor for DOCBrowserHistoryItem);
      v23 = *(unsigned __int8 *)(v5 + 80);
      v24 = v18;
      v25 = (v23 + 24) & ~v23;
      v26 = swift_allocObject(&unk_1005ECB68, v25 + v6, v23 | 7);
      *(_QWORD *)(v26 + 16) = v2;
      sub_1001D0788(v24, v26 + v25, type metadata accessor for DOCBrowserHistoryItem);
      v27 = v2;
      sub_10001A27C(0, (uint64_t)sub_1000A0450, v26);
      swift_release(v26);
    }
  }
}

double sub_1000A0778()
{
  uint64_t *v0;

  return sub_10000DA8C(v0[2], v0[3], v0[4]);
}

double sub_1000A0784()
{
  uint64_t *v0;

  return sub_100017280(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10]);
}

void *sub_1000A07B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1000A07CC(a1, v2[2], v2[4], v2[5], v2[6], v2[7], v2[8], a2);
}

void *sub_1000A07CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v13;
  int *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  char v23;
  Swift::String v24;
  Swift::String v25;
  void *object;
  Swift::String v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  unint64_t v34;
  __n128 v35;
  void *result;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  __n128 v50;
  id v54;
  unint64_t v55;
  id v56;
  ValueMetadata *v57;
  unint64_t v58;
  unint64_t v59;
  char v60[24];

  swift_beginAccess(a2 + 16, v60, 0, 0);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = (int *)type metadata accessor for DOCBrowserHistoryItem(0);
  v15 = v14[5];
  v54 = *(id *)(a1 + v15);
  v16 = v54;
  swift_bridgeObjectRetain(v13);
  v17 = objc_msgSend(v16, "fileProviderItem");
  if (v17)
  {
    v18 = v17;
    v57 = &type metadata for DOCIdentityHashableLocation.FPItemImpl;
    v58 = sub_1000A0258();
    v59 = sub_1000A02E0();
    v55 = (unint64_t)v16;
    v56 = v18;
  }
  else
  {
    v19 = objc_msgSend(v16, "representedTag");
    if (v19)
    {
      v20 = v19;
      v21 = v16;
      v22 = (id)FPTagFromDOCTag(v20);
      v57 = &type metadata for DOCIdentityHashableLocation.FPTagImpl;
      v58 = sub_100446EF4();
      v59 = sub_100446F38();

      v55 = (unint64_t)v21;
      v56 = v22;
    }
    else
    {
      v57 = &type metadata for DOCIdentityHashableLocation.OtherImpl;
      v58 = sub_100446DA0();
      v59 = sub_100446DE4();
      v55 = (unint64_t)v16;
    }
  }
  v23 = sub_100089948(&v54, v13);
  sub_1000A00DC(&v54);
  swift_bridgeObjectRelease(v13);
  if ((v23 & 1) != 0)
  {
    v54 = 0;
    v55 = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v24._countAndFlagsBits = 91;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    v25._countAndFlagsBits = static String._fromSubstring(_:)(a3, a4, a5, a6);
    object = v25._object;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(object);
    v27._object = (void *)0x8000000100535B70;
    v27._countAndFlagsBits = 0xD000000000000034;
    String.append(_:)(v27);
    v28 = *(id *)(a1 + v15);
    v29 = objc_msgSend(v28, "description");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    v33._countAndFlagsBits = v30;
    v33._object = v32;
    String.append(_:)(v33);

    swift_bridgeObjectRelease(v32);
    v34 = v55;
    sub_1000542B0((uint64_t)v54, v55);
    v35 = swift_bridgeObjectRelease(v34);
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, __n128))(*((_QWORD *)v14 - 1) + 56))(a8, 1, 1, v14, v35);
  }
  else
  {
    swift_beginAccess(a7 + 16, &v54, 0, 0);
    v37 = *(_QWORD **)(a7 + 16);
    sub_10007C6DC(a1, a8, type metadata accessor for DOCBrowserHistoryItem);
    v38 = v14[5];
    v39 = *(void **)(a8 + v38);
    swift_bridgeObjectRetain(v37);
    v40 = v39;
    result = sub_10000DE10(v39, v37, 0);
    if (result)
    {
      v41 = result;

      *(_QWORD *)(a8 + v38) = v41;
      v42 = v14[7];
      v43 = *(void **)(a8 + v42);
      v44 = v43;
      v45 = sub_10000DE10(v43, v37, 0);

      *(_QWORD *)(a8 + v42) = v45;
      v46 = v45;

      v47 = v14[6];
      v48 = *(_QWORD *)(a8 + v47);
      swift_bridgeObjectRetain(v48);

      swift_bridgeObjectRetain(v37);
      v49 = sub_10008A298(v48, v37, 0);
      swift_bridgeObjectRelease_n(v48, 2);
      swift_bridgeObjectRelease_n(v37, 2);
      *(_QWORD *)(a8 + v47) = v49;
      return (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *, __n128))(*((_QWORD *)v14 - 1) + 56))(a8, 0, 1, v14, v50);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void sub_1000A0B80()
{
  uint64_t v0;

  sub_1000A0B90(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + 32, *(_QWORD **)(v0 + 88));
}

void sub_1000A0B90(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  id v7;
  void *v8;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[24];
  _QWORD v19[7];
  _OWORD v20[3];
  uint64_t v21;

  if (a1)
  {
    sub_1000A0110(a3, (uint64_t)v20);
    v6 = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    v7 = a1;
    v8 = (void *)DOCNode.representedLocation.getter(v6);
    sub_10009FF74(v8, v19);
    swift_beginAccess(a2, v18, 33, 0);
    sub_10008A81C((uint64_t)v19, (id *)v20);
    swift_endAccess(v18);

  }
  else
  {
    sub_1000A0110(a3, (uint64_t)v20);
    swift_beginAccess(a4, v19, 33, 0);
    v10 = (_QWORD *)*a4;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
    *a4 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = sub_1001549F4(0, v10[2] + 1, 1, v10);
      *a4 = v10;
    }
    v13 = v10[2];
    v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      v10 = sub_1001549F4((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
      *a4 = v10;
    }
    v10[2] = v13 + 1;
    v14 = &v10[7 * v13];
    v15 = v20[0];
    v16 = v20[1];
    v17 = v20[2];
    v14[10] = v21;
    *((_OWORD *)v14 + 3) = v16;
    *((_OWORD *)v14 + 4) = v17;
    *((_OWORD *)v14 + 2) = v15;
    swift_endAccess(v19);
  }
}

void sub_1000A0CFC(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000A0D0C(a1, a2, *(NSObject **)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + 32, *(_QWORD *)(v2 + 88), *(NSObject **)(v2 + 96));
}

void sub_1000A0D0C(void *a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, NSObject *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  _QWORD aBlock[5];
  uint64_t v19;
  _OWORD v20[3];
  uint64_t v21;

  v10 = a4 + 16;
  v11 = a6 + 16;
  sub_1000A0110(a5, (uint64_t)v20);
  v12 = swift_allocObject(&unk_1005EC7A8, 96, 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = v10;
  v13 = v20[1];
  *(_OWORD *)(v12 + 32) = v20[0];
  *(_OWORD *)(v12 + 48) = v13;
  *(_OWORD *)(v12 + 64) = v20[2];
  *(_QWORD *)(v12 + 80) = v21;
  *(_QWORD *)(v12 + 88) = v11;
  v14 = swift_allocObject(&unk_1005EC7D0, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_1000A0B80;
  *(_QWORD *)(v14 + 24) = v12;
  aBlock[4] = sub_10006657C;
  v19 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10006655C;
  aBlock[3] = &unk_1005EC7E8;
  v15 = _Block_copy(aBlock);
  v16 = v19;
  v17 = a1;
  swift_retain();
  swift_release(v16);
  dispatch_sync(a3, v15);
  _Block_release(v15);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation(v14, "", 107, 856, 42, 1);
  swift_release(v14);
  if ((a3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    dispatch_group_leave(a7);
    swift_release(v12);
  }
}

double sub_1000A0E74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(sub_10006922C(&qword_10064A600) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10002B1C0(a1, *(_QWORD *)(v1 + 16), *(char **)(v1 + 24), *(_QWORD *)(v1 + 32), *(char **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

void sub_1000A0EE8()
{
  uint64_t v0;

  sub_1000A0EF0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000A0EF0(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[5];
  uint64_t v5;

  v4[4] = a1;
  v5 = a2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 1107296256;
  v4[2] = sub_10004A82C;
  v4[3] = &unk_1005EC8B0;
  v2 = _Block_copy(v4);
  v3 = v5;
  swift_retain();
  swift_release(v3);
  DOCRunInMainThread(v2);
  _Block_release(v2);
}

void sub_1000A0F7C()
{
  uint64_t v0;

  sub_1000A0F84(*(_QWORD *)(v0 + 16));
}

void sub_1000A0F84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = sub_10006922C(&qword_10064A600);
  __chkstk_darwin(v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(a1 + OBJC_IVAR____TtC5Files27DOCBrowserHistoryDataSource_scheduleRefreshUnderlyingNodesPending) = 0;
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC5Files27DOCBrowserHistoryDataSource_ignoreExternalUpdates) & 1) == 0)
  {
    v5 = type metadata accessor for DOCBrowserHistoryItem(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
    v6 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
    v7 = (void *)static OS_dispatch_queue.main.getter(v6);
    v8 = swift_allocObject(&unk_1005EC578, 32, 7);
    *(_QWORD *)(v8 + 16) = DOCSplitBrowserViewController.didCommitPreview(of:);
    *(_QWORD *)(v8 + 24) = 0;
    sub_10004693C((uint64_t)v4, 0, v7, (id *)sub_1000A0EE8, v8);

    swift_release(v8);
    sub_10000CB4C((uint64_t)v4, &qword_10064A600);
  }
}

void sub_1000A10B0()
{
  uint64_t v0;

  sub_10001A7BC(*(_BYTE **)(v0 + 16));
}

void sub_1000A10B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100008B08(a1, a2, v2);
}

uint64_t variable initialization expression of DOCBrowserContainedViewController.uipDocLandingBackgroundAllowed()
{
  return 1;
}

uint64_t storeEnumTagSinglePayload for DOCItemCollectionSizeClass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_1000A1114 + 4 * byte_1004E3495[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1000A1148 + 4 * byte_1004E3490[v4]))();
}

uint64_t sub_1000A1148(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A1150(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A1158);
  return result;
}

uint64_t sub_1000A1164(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A116CLL);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_1000A1170(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A1178(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DOCItemCollectionSizeClass()
{
  return &type metadata for DOCItemCollectionSizeClass;
}

unint64_t sub_1000A1198()
{
  unint64_t result;

  result = qword_10064F3B8;
  if (!qword_10064F3B8)
  {
    result = swift_getWitnessTable(&unk_1004E34BC, &type metadata for DOCItemCollectionSizeClass);
    atomic_store(result, (unint64_t *)&qword_10064F3B8);
  }
  return result;
}

unint64_t sub_1000A11DC()
{
  unint64_t result;

  result = qword_10064DEE0;
  if (!qword_10064DEE0)
  {
    result = swift_getWitnessTable(&unk_1004E34E4, &type metadata for DOCItemCollectionSizeClass);
    atomic_store(result, (unint64_t *)&qword_10064DEE0);
  }
  return result;
}

unint64_t sub_1000A1220(unsigned __int8 a1)
{
  unint64_t result;
  char v3;
  Swift::String v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;

  if (qword_100641000 != -1)
    swift_once(&qword_100641000, sub_1000A14B8);
  if (!*((_QWORD *)off_10064F3A8 + 2) || (result = sub_10003057C(a1), (v3 & 1) == 0))
  {
    v6 = 0;
    v7 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    v4._object = (void *)0x8000000100528DF0;
    v4._countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v4);
    v5 = a1;
    _print_unlocked<A, B>(_:_:)(&v5, &v6, &type metadata for DOCItemCollectionSizeClass, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v6, v7, "Files/DOCItemCollectionSizeClass.swift", 38, 2, 132, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A1330(char a1, double a2)
{
  uint64_t result;
  int64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  double *v14;
  double v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  if (qword_100641000 == -1)
    goto LABEL_2;
LABEL_29:
  swift_once(&qword_100641000, sub_1000A14B8);
LABEL_2:
  result = 0;
  v5 = 0;
  v6 = (char *)off_10064F3A8 + 64;
  v7 = 1 << *((_BYTE *)off_10064F3A8 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *((_QWORD *)off_10064F3A8 + 8);
  v10 = 1.79769313e308;
  v11 = (unint64_t)(v7 + 63) >> 6;
  if (v9)
  {
LABEL_5:
    v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v13 = v12 | (v5 << 6);
    goto LABEL_6;
  }
  while (1)
  {
    v16 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (v16 >= v11)
      return result;
    v17 = *(_QWORD *)&v6[8 * v16];
    ++v5;
    if (!v17)
    {
      v5 = v16 + 1;
      if (v16 + 1 >= v11)
        return result;
      v17 = *(_QWORD *)&v6[8 * v5];
      if (!v17)
      {
        v5 = v16 + 2;
        if (v16 + 2 >= v11)
          return result;
        v17 = *(_QWORD *)&v6[8 * v5];
        if (!v17)
          break;
      }
    }
LABEL_23:
    v9 = (v17 - 1) & v17;
    v13 = __clz(__rbit64(v17)) + (v5 << 6);
LABEL_6:
    v14 = (double *)(*((_QWORD *)off_10064F3A8 + 7) + 16 * v13);
    if ((a1 & 1) == 0)
      ++v14;
    v15 = vabdd_f64(*v14, a2);
    if (v15 < v10)
    {
      result = *(unsigned __int8 *)(*((_QWORD *)off_10064F3A8 + 6) + v13);
      v10 = v15;
      if (v9)
        goto LABEL_5;
    }
    else if (v9)
    {
      goto LABEL_5;
    }
  }
  v18 = v16 + 3;
  if (v18 < v11)
  {
    v17 = *(_QWORD *)&v6[8 * v18];
    if (!v17)
    {
      while (1)
      {
        v5 = v18 + 1;
        if (__OFADD__(v18, 1))
          goto LABEL_28;
        if (v5 >= v11)
          return result;
        v17 = *(_QWORD *)&v6[8 * v5];
        ++v18;
        if (v17)
          goto LABEL_23;
      }
    }
    v5 = v18;
    goto LABEL_23;
  }
  return result;
}

uint64_t sub_1000A14B8()
{
  uint64_t v0;
  uint64_t inited;
  void *v2;
  uint64_t result;
  _BYTE v4[440];

  v0 = sub_10006922C(&qword_10064F3B0);
  inited = swift_initStackObject(v0, v4);
  *(_OWORD *)(inited + 16) = xmmword_1004E33B0;
  *(_BYTE *)(inited + 32) = 0;
  *(_OWORD *)(inited + 40) = xmmword_1004E33C0;
  *(_BYTE *)(inited + 56) = 1;
  *(_OWORD *)(inited + 64) = xmmword_1004E33D0;
  *(_BYTE *)(inited + 80) = 2;
  *(_OWORD *)(inited + 88) = xmmword_1004E33E0;
  *(_BYTE *)(inited + 104) = 3;
  *(_OWORD *)(inited + 112) = xmmword_1004E33F0;
  *(_BYTE *)(inited + 128) = 4;
  *(_OWORD *)(inited + 136) = xmmword_1004E3400;
  *(_BYTE *)(inited + 152) = 5;
  *(_OWORD *)(inited + 160) = xmmword_1004E3410;
  *(_BYTE *)(inited + 176) = 6;
  *(_OWORD *)(inited + 184) = xmmword_1004E3420;
  *(_BYTE *)(inited + 200) = 7;
  *(_OWORD *)(inited + 208) = xmmword_1004E3430;
  *(_BYTE *)(inited + 224) = 12;
  *(_OWORD *)(inited + 232) = xmmword_1004E3440;
  *(_BYTE *)(inited + 248) = 14;
  *(_OWORD *)(inited + 256) = xmmword_1004E3450;
  *(_BYTE *)(inited + 272) = 8;
  *(_QWORD *)(inited + 280) = 0x4087400000000000;
  *(_QWORD *)(inited + 288) = 0x4091B40000000000;
  *(_BYTE *)(inited + 296) = 9;
  *(_OWORD *)(inited + 304) = xmmword_1004E3460;
  *(_BYTE *)(inited + 320) = 10;
  *(_QWORD *)(inited + 328) = 0x4089500000000000;
  *(_QWORD *)(inited + 336) = 0x4090E00000000000;
  *(_BYTE *)(inited + 344) = 11;
  *(_OWORD *)(inited + 352) = xmmword_1004E3470;
  *(_BYTE *)(inited + 368) = 13;
  *(_QWORD *)(inited + 376) = 0x408A100000000000;
  *(_QWORD *)(inited + 384) = 0x4092A80000000000;
  *(_BYTE *)(inited + 392) = 15;
  *(_OWORD *)(inited + 400) = xmmword_1004E3480;
  *(_BYTE *)(inited + 416) = 16;
  *(_QWORD *)(inited + 424) = 0x4092A00000000000;
  *(_QWORD *)(inited + 432) = 0x4098D80000000000;
  v2 = (void *)sub_1003F9298(inited);
  result = swift_setDeallocating(inited);
  off_10064F3A8 = v2;
  return result;
}

ValueMetadata *type metadata accessor for DOCItemCollectionRowColumn()
{
  return &type metadata for DOCItemCollectionRowColumn;
}

uint64_t type metadata accessor for DOCDSFileServiceConnection()
{
  return objc_opt_self(_TtC5Files26DOCDSFileServiceConnection);
}

uint64_t sub_1000A1708(uint64_t a1, uint64_t a2)
{
  sub_1000A1800(a1, a2);
  return sub_100087534(a1, a2);
}

void sub_1000A1740(uint64_t a1, uint64_t a2)
{
  void **v2;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];
  uint64_t v10;

  v5 = *v2;
  v6 = swift_allocObject(&unk_1005E28C8, 32, 7);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v9[4] = sub_1000A1948;
  v10 = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100088184;
  v9[3] = &unk_1005E28E0;
  v7 = _Block_copy(v9);
  v8 = v10;
  swift_retain();
  swift_release(v8);
  objc_msgSend(v5, "requestInProgressOperationsWithResponseBlock:", v7);
  _Block_release(v7);
}

id sub_1000A1800(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  objc_super v14;
  _QWORD aBlock[5];
  uint64_t v16;
  objc_super v17;
  char v18[24];

  v5 = (uint64_t *)&v2[OBJC_IVAR____TtC5Files26DOCDSFileServiceConnection_didUpdateInProgressFileOperationsHandler];
  swift_beginAccess(&v2[OBJC_IVAR____TtC5Files26DOCDSFileServiceConnection_didUpdateInProgressFileOperationsHandler], v18, 1, 0);
  v6 = *v5;
  v7 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  sub_10008BA00(a1, a2);
  sub_100087534(v6, v7);
  v8 = *v5;
  if (*v5)
  {
    v9 = v5[1];
    v10 = swift_allocObject(&unk_1005E2878, 32, 7);
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = v9;
    aBlock[4] = sub_100066584;
    v16 = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004A82C;
    aBlock[3] = &unk_1005E2890;
    v11 = _Block_copy(aBlock);
    v12 = v16;
    swift_retain_n(v9, 2);
    swift_release(v12);
    v14.receiver = v2;
    v14.super_class = (Class)type metadata accessor for DOCDSFileServiceConnection();
    objc_msgSendSuper2(&v14, "setDidUpdateInProgressOperationsHandler:", v11);
    _Block_release(v11);
    return (id)sub_100087534(v8, v9);
  }
  else
  {
    v17.receiver = v2;
    v17.super_class = (Class)type metadata accessor for DOCDSFileServiceConnection();
    return objc_msgSendSuper2(&v17, "setDidUpdateInProgressOperationsHandler:", 0);
  }
}

void sub_1000A1948(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000A1950(a1, a2, *(void (**)(_QWORD *, uint64_t, __n128))(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_1000A1950(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t, __n128), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD *, uint64_t, __n128);
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  _BYTE v56[40];
  _QWORD *v57;

  v8 = type metadata accessor for Date(0);
  v53 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v52 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for DOCProgressProvidingOperationIconType(0);
  __chkstk_darwin(v51);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10006922C((uint64_t *)&unk_100643900);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v43 - v16;
  v18 = type metadata accessor for DOCFileOperation(0);
  v49 = *(_QWORD *)(v18 - 8);
  v50 = v18;
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v54 = (uint64_t)&v43 - v23;
  v45 = a2;
  if (!a1)
  {
    v37 = 0;
LABEL_24:
    a3(v37, v45, v22);
LABEL_25:
    swift_bridgeObjectRelease(v37);
    return;
  }
  if (!((unint64_t)a1 >> 62))
  {
    v24 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v24)
      goto LABEL_4;
    goto LABEL_23;
  }
  if (a1 >= 0)
    v42 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v42 = a1;
  swift_bridgeObjectRetain(a1);
  v24 = _CocoaArrayWrapper.endIndex.getter(v42);
  if (!v24)
  {
LABEL_23:
    v22 = swift_bridgeObjectRelease(a1);
    v37 = _swiftEmptyArrayStorage;
    goto LABEL_24;
  }
LABEL_4:
  v57 = _swiftEmptyArrayStorage;
  v48 = v24;
  sub_100154E30(0, v24 & ~(v24 >> 63), 0);
  if ((v48 & 0x8000000000000000) == 0)
  {
    v43 = a4;
    v44 = a3;
    v25 = 0;
    v46 = a1 & 0xC000000000000001;
    v47 = a1;
    do
    {
      if (v46)
        v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, a1);
      else
        v26 = *(id *)(a1 + 8 * v25 + 32);
      v27 = v26;
      v55 = objc_msgSend(v26, "operationID", v43, v44);
      v28 = sub_10004F2F0(0, &qword_100650248, DSFileOperationID_ptr);
      v29 = sub_100372BC4();
      AnyHashable.init<A>(_:)(&v55, v28, v29);
      v30 = objc_msgSend(v27, "progress");
      v31 = objc_msgSend(v27, "dateStarted");
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v31);

      v32 = v53;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v17, 0, 1, v8);
      v33 = objc_msgSend(v27, "utType");
      static UTType._unconditionallyBridgeFromObjectiveC(_:)(v33);

      swift_storeEnumTagMultiPayload(v11, v51, 0);
      sub_10006777C((uint64_t)v56, (uint64_t)v21);
      *((_QWORD *)v21 + 5) = v30;
      sub_1001114C4((uint64_t)v17, (uint64_t)v15);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v15, 1, v8) == 1)
      {
        v34 = v52;
        Date.init(timeIntervalSinceNow:)(0.0);
        sub_10011150C((uint64_t)v17);
        sub_100067748((uint64_t)v56);
        sub_10011150C((uint64_t)v15);
        v35 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
      }
      else
      {
        sub_10011150C((uint64_t)v17);
        sub_100067748((uint64_t)v56);
        v35 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
        v34 = v52;
        v35(v52, v15, v8);
      }
      v36 = v50;
      v35(&v21[*(int *)(v50 + 24)], v34, v8);
      sub_1001D0788((uint64_t)v11, (uint64_t)&v21[*(int *)(v36 + 28)], type metadata accessor for DOCProgressProvidingOperationIconType);
      sub_1001D0788((uint64_t)v21, v54, type metadata accessor for DOCFileOperation);

      v37 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) == 0)
      {
        sub_100154E30(0, v37[2] + 1, 1);
        v37 = v57;
      }
      v38 = v48;
      v40 = v37[2];
      v39 = v37[3];
      if (v40 >= v39 >> 1)
      {
        sub_100154E30(v39 > 1, v40 + 1, 1);
        v38 = v48;
        v37 = v57;
      }
      ++v25;
      v37[2] = v40 + 1;
      sub_1001D0788(v54, (uint64_t)v37+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(_QWORD *)(v49 + 72) * v40, type metadata accessor for DOCFileOperation);
      a1 = v47;
    }
    while (v38 != v25);
    v41 = swift_bridgeObjectRelease(v47);
    v44(v37, v45, v41);
    goto LABEL_25;
  }
  __break(1u);
}

uint64_t type metadata accessor for DOCNodeDiffableDataSource()
{
  return objc_opt_self(_TtC5Files25DOCNodeDiffableDataSource);
}

uint64_t sub_1000A1E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  _BYTE v32[24];

  v1 = sub_10006922C((uint64_t *)&unk_100654FA0);
  __chkstk_darwin(v1);
  v3 = &v32[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = sub_10006922C((uint64_t *)&unk_100646C20);
  __chkstk_darwin(v4);
  v6 = &v32[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_10006922C((uint64_t *)&unk_100646C30);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v32[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
  {
    v11 = sub_10004F2F0(0, (unint64_t *)&unk_100641970, FINode_ptr);
    v12 = sub_1000AEF1C();
    v13 = sub_1000835B4((unint64_t *)&qword_1006419E0, (unint64_t *)&unk_100641970, FINode_ptr);
    NSDiffableDataSourceSnapshot.init()(&type metadata for DOCCollectionSection, v11, v12, v13);
    v14 = sub_10006922C((uint64_t *)&unk_100654E80);
    v15 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
    v15(v3, 0, 1, v14);
    v16 = type metadata accessor for DOCNodeDiffableDataSourceSnapshot(0);
    v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v17 + OBJC_IVAR____TtC5Files33DOCNodeDiffableDataSourceSnapshot_fpItemSnapshot, 1, 1, v7);
    v18 = v17 + OBJC_IVAR____TtC5Files33DOCNodeDiffableDataSourceSnapshot_fiNodeSnapshot;
    v15((_BYTE *)(v17 + OBJC_IVAR____TtC5Files33DOCNodeDiffableDataSourceSnapshot_fiNodeSnapshot), 1, 1, v14);
    *(_BYTE *)(v17 + 16) = 1;
    swift_beginAccess(v18, v32, 33, 0);
    v19 = (uint64_t *)&unk_100654FA0;
    v20 = (uint64_t)v3;
    v21 = v18;
  }
  else
  {
    v22 = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    v23 = sub_1000AEF1C();
    v24 = sub_1000835B4((unint64_t *)&qword_100657330, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    NSDiffableDataSourceSnapshot.init()(&type metadata for DOCCollectionSection, v22, v23, v24);
    v25 = type metadata accessor for DOCNodeDiffableDataSourceSnapshot(0);
    v17 = swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    v26 = v17 + OBJC_IVAR____TtC5Files33DOCNodeDiffableDataSourceSnapshot_fpItemSnapshot;
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v27(v17 + OBJC_IVAR____TtC5Files33DOCNodeDiffableDataSourceSnapshot_fpItemSnapshot, 1, 1, v7);
    v28 = v17 + OBJC_IVAR____TtC5Files33DOCNodeDiffableDataSourceSnapshot_fiNodeSnapshot;
    v29 = sub_10006922C((uint64_t *)&unk_100654E80);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
    *(_BYTE *)(v17 + 16) = 0;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v6, v10, v7);
    v27((uint64_t)v6, 0, 1, v7);
    swift_beginAccess(v26, v32, 33, 0);
    v19 = (uint64_t *)&unk_100646C20;
    v20 = (uint64_t)v6;
    v21 = v26;
  }
  sub_10008BB40(v20, v21, v19);
  swift_endAccess(v32);
  return v17;
}

uint64_t sub_1000A215C(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v5 = v4;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  v10 = (void **)(v5 + 24);
  if (a2[OBJC_IVAR____TtC5Files17DOCNodeCollection_type + 16] == 1)
  {
    v10 = (void **)(v5 + 32);
    *(_BYTE *)(v5 + 16) = 1;
    v11 = swift_allocObject(&unk_1005EB3B8, 32, 7);
    *(_QWORD *)(v11 + 16) = a3;
    *(_QWORD *)(v11 + 24) = a4;
    objc_allocWithZone((Class)sub_10006922C(&qword_100654FB0));
  }
  else
  {
    *(_BYTE *)(v5 + 16) = 0;
    v11 = swift_allocObject(&unk_1005EB3E0, 32, 7);
    *(_QWORD *)(v11 + 16) = a3;
    *(_QWORD *)(v11 + 24) = a4;
    objc_allocWithZone((Class)sub_10006922C(&qword_100654FB8));
  }
  v12 = UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)(a1, sub_10007D878, v11);

  v13 = *v10;
  *v10 = (void *)v12;

  return v5;
}

uint64_t sub_1000A2268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t result;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  _BYTE v25[24];

  v7 = sub_10006922C((uint64_t *)&unk_100654FA0);
  __chkstk_darwin(v7);
  v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = sub_10006922C((uint64_t *)&unk_100646C20);
  __chkstk_darwin(v10);
  v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((*(_BYTE *)(v3 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a1 + 16) & 1) == 0)
    {
LABEL_15:
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000041, 0x8000000100534CB0, "Files/DOCNodeDiffableDataSource.swift", 37, 2, 148, 0);
LABEL_17:
      __break(1u);
      return result;
    }
    v13 = *(void **)(v3 + 32);
    if (v13)
    {
      v14 = a1 + OBJC_IVAR____TtC5Files33DOCNodeDiffableDataSourceSnapshot_fiNodeSnapshot;
      swift_beginAccess(a1 + OBJC_IVAR____TtC5Files33DOCNodeDiffableDataSourceSnapshot_fiNodeSnapshot, v25, 0, 0);
      sub_1000271D4(v14, (uint64_t)v9, (uint64_t *)&unk_100654FA0);
      v15 = sub_10006922C((uint64_t *)&unk_100654E80);
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15) != 1)
      {
        v17 = v13;
        dispatch thunk of UICollectionViewDiffableDataSource.applySnapshotUsingReloadData(_:completion:)(v9, a2, a3);

        return (*(uint64_t (**)(_BYTE *, uint64_t))(v16 + 8))(v9, v15);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000041, 0x8000000100534D00, "Files/DOCNodeDiffableDataSource.swift", 37, 2, 141, 0);
    goto LABEL_17;
  }
  v19 = *(void **)(v3 + 24);
  if (!v19)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v20 = a1 + OBJC_IVAR____TtC5Files33DOCNodeDiffableDataSourceSnapshot_fpItemSnapshot;
  swift_beginAccess(a1 + OBJC_IVAR____TtC5Files33DOCNodeDiffableDataSourceSnapshot_fpItemSnapshot, v25, 0, 0);
  sub_1000271D4(v20, (uint64_t)v12, (uint64_t *)&unk_100646C20);
  v21 = sub_10006922C((uint64_t *)&unk_100646C30);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v22 + 48))(v12, 1, v21) == 1)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v23 = v19;
  dispatch thunk of UICollectionViewDiffableDataSource.applySnapshotUsingReloadData(_:completion:)(v12, a2, a3);

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v22 + 8))(v12, v21);
}

uint64_t type metadata accessor for DOCItemCollectionViewPool()
{
  return objc_opt_self(_TtC5Files25DOCItemCollectionViewPool);
}

uint64_t sub_1000A2500()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  __n128 v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC5Files25DOCItemCollectionViewPool____lazy_storage___notificationsController;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC5Files25DOCItemCollectionViewPool____lazy_storage___notificationsController])
  {
    v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files25DOCItemCollectionViewPool____lazy_storage___notificationsController];
  }
  else
  {
    v3 = v0;
    v4 = sub_10006922C((uint64_t *)&unk_100652FB0);
    swift_allocObject(v4, 32, 7);
    v5 = v0;
    v2 = NSNotification.SubscriptionsController.init(observee:)(v6);
    v7 = *(_QWORD *)&v3[v1];
    *(_QWORD *)&v3[v1] = v2;
    swift_retain();
    swift_release(v7);
  }
  swift_retain();
  return v2;
}

void sub_1000A25B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[23];
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  void *v9;

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[10] = &unk_1004DEA20;
  v4[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[14] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[15] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[16] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[17] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[18] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[19] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[20] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[21] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[22] = &unk_1004DEA38;
  sub_10008BB84(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    v7 = &unk_1004DEA50;
    v8 = (char *)&value witness table for Builtin.BridgeObject + 64;
    v9 = &unk_1004DEA50;
    swift_updateClassMetadata2(a1, 256, 28, v4, a1 + 1088);
  }
}

_QWORD *sub_1000A269C(void *a1, double a2, double a3, double a4, double a5)
{
  objc_class *v5;
  id v11;

  v11 = objc_allocWithZone(v5);
  return sub_10005C570(a1, a2, a3, a4, a5);
}

id sub_1000A2700()
{
  uint64_t v0;

  return objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                               + OBJC_IVAR____TtC5Files25DOCItemCollectionListCell_titleStackView), "leadingAnchor"));
}

void sub_1000A272C()
{
  qword_100672AC0 = 0x4028000000000000;
}

uint64_t type metadata accessor for DOCItemCollectionGridCell()
{
  return objc_opt_self(_TtC5Files25DOCItemCollectionGridCell);
}

void sub_1000A290C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  void **v5;
  uint64_t v6;
  void *v7;
  void *v8;
  float64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint8_t *v15;
  id v16;
  void *v17;
  char *v18;
  float64x2_t v19;
  float64x2_t *v20;
  _BYTE v22[184];
  uint64_t v23[19];
  float64x2_t v24;
  float64x2_t v25;
  char v26[24];

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC5Files21DOCItemCollectionCell_isItemAccessStatusBadgeLoaded) != 1)
    return;
  v5 = (void **)(v0 + OBJC_IVAR____TtC5Files21DOCItemCollectionCell_cellContent);
  swift_beginAccess(v0 + OBJC_IVAR____TtC5Files21DOCItemCollectionCell_cellContent, v26, 0, 0);
  v7 = *v5;
  if (v7)
  {
    v8 = *(void **)(v0 + OBJC_IVAR____TtC5Files21DOCItemCollectionCell_itemAccessStatusBadgeConstraintX);
    if (v8)
    {
      sub_100070EDC((uint64_t)v7 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_gridItemLayoutTraits, (uint64_t)v22, (uint64_t *)&unk_100641300);
      sub_100070EDC((uint64_t)v22, (uint64_t)v23, (uint64_t *)&unk_100641300);
      if (sub_1000A849C(v23) == 1)
        goto LABEL_20;
      v9 = -v25.f64[0];
      v10 = v7;
      objc_msgSend(v8, "setConstant:", v9);
    }
    else
    {
      v16 = v7;
    }
    v17 = *(void **)(v0 + OBJC_IVAR____TtC5Files21DOCItemCollectionCell_itemAccessStatusBadgeConstraintY);
    if (v17)
    {
      sub_100070EDC((uint64_t)v7 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_gridItemLayoutTraits, (uint64_t)v22, (uint64_t *)&unk_100641300);
      sub_100070EDC((uint64_t)v22, (uint64_t)v23, (uint64_t *)&unk_100641300);
      if (sub_1000A849C(v23) == 1)
      {
LABEL_21:
        __break(1u);
        return;
      }
      objc_msgSend(v17, "setConstant:", v25.f64[1]);
    }
    v18 = (char *)sub_10026F0F8();
    sub_100070EDC((uint64_t)v7 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_gridItemLayoutTraits, (uint64_t)v22, (uint64_t *)&unk_100641300);
    sub_100070EDC((uint64_t)v22, (uint64_t)v23, (uint64_t *)&unk_100641300);
    if (sub_1000A849C(v23) != 1)
    {
      v19 = v25;
      v20 = (float64x2_t *)&v18[OBJC_IVAR____TtC5Files22DOCItemStatusBadgeView_layoutTraits];
      if ((v18[OBJC_IVAR____TtC5Files22DOCItemStatusBadgeView_layoutTraits + 32] & 1) != 0
        || (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*v20, v24), (int32x4_t)vceqq_f64(v20[1], v25))), 0xFuLL))) & 1) == 0)
      {
        *v20 = v24;
        v20[1] = v19;
        LOBYTE(v20[2].f64[0]) = 0;
        objc_msgSend(v18, "invalidateIntrinsicContentSize");
      }

      return;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v11 = Logger.UI.unsafeMutableAddressor(v6);
  v12 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v2 + 16))(v4, v11, v1);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter(v13);
  if (os_log_type_enabled(v13, (os_log_type_t)v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)v14, "Cannot update constraints in updateItemAccessStatusConstraints because cellContent is nil", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
}

id sub_1000A2C00()
{
  uint64_t v0;
  uint64_t v1;
  objc_class *v2;
  char *v3;
  char *v4;
  char *v5;
  objc_super v7;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files21DOCItemCollectionCell_thumbnailView);
  v2 = (objc_class *)type metadata accessor for DOCItemCollectionGridCellSpringLoadedInteractionEffect();
  v3 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Files54DOCItemCollectionGridCellSpringLoadedInteractionEffect_blinkDuration] = 0x3FB999999999999ALL;
  v4 = &v3[OBJC_IVAR____TtC5Files54DOCItemCollectionGridCellSpringLoadedInteractionEffect_targetCell];
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR____TtC5Files54DOCItemCollectionGridCellSpringLoadedInteractionEffect_targetCell]);
  v5 = &v3[OBJC_IVAR____TtC5Files54DOCItemCollectionGridCellSpringLoadedInteractionEffect_thumbnailView];
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR____TtC5Files54DOCItemCollectionGridCellSpringLoadedInteractionEffect_thumbnailView]);
  swift_unknownObjectWeakAssign(v4, v0);
  swift_unknownObjectWeakAssign(v5, v1);
  v7.receiver = v3;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, "init");
}

void sub_1000A2CC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  void **v5;
  uint64_t v6;
  void *v7;
  void *v8;
  double v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint8_t *v15;
  id v16;
  void *v17;
  char *v18;
  float64x2_t v19;
  float64x2_t *v20;
  _BYTE v22[184];
  uint64_t v23[19];
  float64x2_t v24;
  float64x2_t v25;
  char v26[24];

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC5Files21DOCItemCollectionCell_isItemStatusBadgeLoaded) != 1)
    return;
  v5 = (void **)(v0 + OBJC_IVAR____TtC5Files21DOCItemCollectionCell_cellContent);
  swift_beginAccess(v0 + OBJC_IVAR____TtC5Files21DOCItemCollectionCell_cellContent, v26, 0, 0);
  v7 = *v5;
  if (v7)
  {
    v8 = *(void **)(v0 + OBJC_IVAR____TtC5Files21DOCItemCollectionCell_itemStatusBadgeConstraintX);
    if (v8)
    {
      sub_100070EDC((uint64_t)v7 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_gridItemLayoutTraits, (uint64_t)v22, (uint64_t *)&unk_100641300);
      sub_100070EDC((uint64_t)v22, (uint64_t)v23, (uint64_t *)&unk_100641300);
      if (sub_1000A849C(v23) == 1)
        goto LABEL_20;
      v9 = v25.f64[0];
      v10 = v7;
      objc_msgSend(v8, "setConstant:", v9);
    }
    else
    {
      v16 = v7;
    }
    v17 = *(void **)(v0 + OBJC_IVAR____TtC5Files21DOCItemCollectionCell_itemStatusBadgeConstraintY);
    if (v17)
    {
      sub_100070EDC((uint64_t)v7 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_gridItemLayoutTraits, (uint64_t)v22, (uint64_t *)&unk_100641300);
      sub_100070EDC((uint64_t)v22, (uint64_t)v23, (uint64_t *)&unk_100641300);
      if (sub_1000A849C(v23) == 1)
      {
LABEL_21:
        __break(1u);
        return;
      }
      objc_msgSend(v17, "setConstant:", v25.f64[1]);
    }
    v18 = (char *)sub_10026F0E4();
    sub_100070EDC((uint64_t)v7 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_gridItemLayoutTraits, (uint64_t)v22, (uint64_t *)&unk_100641300);
    sub_100070EDC((uint64_t)v22, (uint64_t)v23, (uint64_t *)&unk_100641300);
    if (sub_1000A849C(v23) != 1)
    {
      v19 = v25;
      v20 = (float64x2_t *)&v18[OBJC_IVAR____TtC5Files22DOCItemStatusBadgeView_layoutTraits];
      if ((v18[OBJC_IVAR____TtC5Files22DOCItemStatusBadgeView_layoutTraits + 32] & 1) != 0
        || (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*v20, v24), (int32x4_t)vceqq_f64(v20[1], v25))), 0xFuLL))) & 1) == 0)
      {
        *v20 = v24;
        v20[1] = v19;
        LOBYTE(v20[2].f64[0]) = 0;
        objc_msgSend(v18, "invalidateIntrinsicContentSize");
      }

      return;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v11 = Logger.UI.unsafeMutableAddressor(v6);
  v12 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v2 + 16))(v4, v11, v1);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter(v13);
  if (os_log_type_enabled(v13, (os_log_type_t)v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)v14, "Cannot update constraints in updateItemStatusConstraints because cellContent is nil", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
}

id sub_1000A2FC4(void *a1, uint64_t a2, SEL *a3)
{
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for DOCItemCollectionGridCell();
  return objc_msgSendSuper2(&v5, *a3);
}

uint64_t sub_1000A3080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)&v3[OBJC_IVAR____TtC5Files25DOCDefaultSourceUIManager_queue];
  v14 = swift_allocObject(a1, 24, 7);
  *(_QWORD *)(v14 + 16) = v3;
  aBlock[4] = a2;
  v24 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = a3;
  v15 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v3);
  v22 = _swiftEmptyArrayStorage;
  v16 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10006922C((uint64_t *)&unk_100647540);
  v18 = sub_10008825C((unint64_t *)&qword_100641270, (uint64_t *)&unk_100647540);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v17, v18, v7, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v24);
}

void sub_1000A3264()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  __n128 v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  uint8_t *v28;
  uint8_t *v29;
  _QWORD *v30;
  void *v31;
  char *v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  _QWORD aBlock[5];
  uint64_t v40;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)&v1[OBJC_IVAR____TtC5Files25DOCDefaultSourceUIManager_configuration];
  v7 = objc_msgSend(v6, "hostIdentifier");
  v38 = v7;
  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = v8;
    v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
  }
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v12 = v11;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(DOCDocumentsAppBundleIdentifier);
  if (v10 == v13 && v12 == v14)
  {

    swift_bridgeObjectRelease_n(v12, 2);
  }
  else
  {
    v16 = v14;
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v13, v14, 0);
    swift_bridgeObjectRelease(v16);
    if ((v17 & 1) != 0)
    {
      swift_bridgeObjectRelease(v12);

    }
    else
    {
      v18 = (void *)objc_opt_self(DOCDocumentSource);
      v19 = objc_msgSend(v18, "defaultSourceIdentifierForBundleIdentifier:", v38);

      v21 = Logger.UI.unsafeMutableAddressor(v20);
      v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v21, v2);
      v23 = Logger.logObject.getter(v22);
      v25 = static os_log_type_t.info.getter(v24);
      if (os_log_type_enabled(v23, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(2, -1);
        v38 = v19;
        v27 = v6;
        v28 = v26;
        *(_WORD *)v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v25, "[Default Source UI]: Updating Alert State", v26, 2u);
        v29 = v28;
        v6 = v27;
        v19 = v38;
        swift_slowDealloc(v29, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v30 = (_QWORD *)swift_allocObject(&unk_1005E1CB0, 48, 7);
      v30[2] = v1;
      v30[3] = v19;
      v30[4] = v10;
      v30[5] = v12;
      v31 = *(void **)&v1[OBJC_IVAR____TtC5Files25DOCDefaultSourceUIManager_sourceObserver];
      v32 = v1;
      v33 = v19;
      objc_msgSend(v31, "startObservingSources");
      v34 = swift_allocObject(&unk_1005E1CD8, 32, 7);
      *(_QWORD *)(v34 + 16) = sub_10036E83C;
      *(_QWORD *)(v34 + 24) = v30;
      aBlock[4] = sub_1002AD9DC;
      v40 = v34;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10002E508;
      aBlock[3] = &unk_1005E1CF0;
      v35 = _Block_copy(aBlock);
      v36 = v40;
      swift_retain();
      swift_release(v36);
      objc_msgSend(v31, "retrieveSourcesForConfiguration:usingBlock:", v6, v35);
      _Block_release(v35);

      swift_release(v30);
    }
  }
}

void sub_1000A3588()
{
  sub_1000A3264();
}

uint64_t type metadata accessor for DOCBadgedFittingImageView()
{
  return objc_opt_self(_TtC5Files25DOCBadgedFittingImageView);
}

void sub_1000A361C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[45];

  v4[0] = &unk_1004DDDC0;
  v4[1] = &unk_1004DDDD8;
  v4[2] = &unk_1004DDDF0;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = &unk_1004DDDC0;
  v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[7] = &unk_1004DDDC0;
  v4[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[9] = &unk_1004DDDF0;
  v4[10] = &unk_1004DDE08;
  v4[11] = &unk_1004DDDF0;
  v4[12] = &unk_1004DDDF0;
  v4[13] = &unk_1004DDDC0;
  v4[14] = &unk_1004DDDF0;
  v4[15] = &unk_1004DDDF0;
  v4[16] = &unk_1004DDE20;
  v4[17] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[18] = &unk_1004DDDC0;
  v4[19] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[20] = &unk_1004DDDC0;
  v4[21] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[22] = &unk_1004DDDF0;
  v4[23] = &unk_1004DDDF0;
  v4[24] = &unk_1004DDDF0;
  v4[25] = &unk_1004DDDC0;
  v4[26] = &unk_1004DDDF0;
  v4[27] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1000B33F4(319);
  if (v3 <= 0x3F)
  {
    v4[28] = *(_QWORD *)(v2 - 8) + 64;
    v4[29] = &unk_1004DDE38;
    v4[30] = &unk_1004DDE08;
    v4[31] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[32] = &unk_1004DDDF0;
    v4[33] = &unk_1004DDDF0;
    v4[34] = &unk_1004DDDF0;
    v4[35] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[36] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[37] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[38] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[39] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[40] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[41] = &unk_1004DDDF0;
    v4[42] = &unk_1004DDDC0;
    v4[43] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[44] = &unk_1004DDDF0;
    swift_updateClassMetadata2(a1, 256, 45, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for DOCSidebarViewController(uint64_t a1)
{
  return sub_10006BDA4(a1, qword_1006486C8, (uint64_t)&nominal type descriptor for DOCSidebarViewController);
}

uint64_t sub_1000A3770()
{
  return type metadata accessor for DOCSidebarViewController(0);
}

void sub_1000A3778()
{
  id v0;
  id v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)UICollectionViewLayout), "init");
  v1 = objc_msgSend(objc_allocWithZone((Class)UICollectionView), "initWithFrame:collectionViewLayout:", v0, 0.0, 0.0, 0.0, 0.0);

  qword_100657770 = (uint64_t)v1;
}

void sub_1000A3814(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  void *v52;
  __n128 v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  void *v75;
  uint64_t v76;
  __int128 v77;
  _QWORD v78[5];
  unsigned __int8 v79;
  _BYTE v80[40];
  _QWORD v81[5];
  char v82[8];
  __int128 v83;
  _BYTE v84[25];

  v73 = a3;
  v72 = a2;
  v71 = a1;
  v74 = a4;
  v7 = ~(_BYTE)a4;
  v8 = sub_10006922C((uint64_t *)&unk_1006455E0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v7)
  {
    v15 = type metadata accessor for IndexPath(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a5, 1, 1, v15);
    return;
  }
  v12 = v5 + OBJC_IVAR____TtC5Files24DOCSidebarViewController__diffableDataSource;
  swift_beginAccess(v5 + OBJC_IVAR____TtC5Files24DOCSidebarViewController__diffableDataSource, v82, 0, 0);
  sub_1000271D4(v12, (uint64_t)&v83, &qword_100642730);
  if (!*(_QWORD *)&v84[8])
  {
    sub_1000E4F7C(v71, v72, v73, v74);
    sub_10000CB4C((uint64_t)&v83, &qword_100642730);
    goto LABEL_7;
  }
  sub_1000E4F7C(v71, v72, v73, v74);
  v13 = sub_10006922C((uint64_t *)&unk_1006455F0);
  if ((swift_dynamicCast(v78, &v83, (char *)&type metadata for Any + 8, v13, 6) & 1) == 0)
  {
LABEL_7:
    if (qword_1006411E8 != -1)
      swift_once(&qword_1006411E8, sub_1000A3F70);
    v14 = (id)qword_100657778;
    goto LABEL_10;
  }
  v14 = (id)v78[0];
LABEL_10:
  dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

  v16 = NSDiffableDataSourceSnapshot.itemIdentifiers.getter(v8);
  v17 = v16;
  v18 = *(_QWORD *)(v16 + 16);
  if (!v18)
  {
LABEL_22:
    v53 = swift_bridgeObjectRelease(v17);
    (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v53);
    sub_1000B1664(v71, v72, v73, v74);
    v54 = type metadata accessor for IndexPath(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(a5, 1, 1, v54);
    return;
  }
  v61 = v11;
  v62 = v9;
  v63 = v8;
  v64 = a5;
  swift_bridgeObjectRetain(v16);
  v60 = v17;
  v19 = (unsigned __int8 *)(v17 + 72);
  while (1)
  {
    v21 = (void *)*((_QWORD *)v19 - 3);
    v20 = *((_QWORD *)v19 - 2);
    v22 = *((_QWORD *)v19 - 1);
    v23 = *v19;
    v77 = *(_OWORD *)(v19 - 40);
    v83 = v77;
    *(_QWORD *)v84 = v21;
    *(_QWORD *)&v84[8] = v20;
    *(_QWORD *)&v84[16] = v22;
    v84[24] = v23;
    v81[3] = &_s11OutlineItemVN;
    v81[4] = &off_1005F0720;
    v24 = (_OWORD *)swift_allocObject(&unk_1005E74A0, 57, 7);
    v81[0] = v24;
    v25 = *(_OWORD *)v84;
    v24[1] = v83;
    v24[2] = v25;
    *(_OWORD *)((char *)v24 + 41) = *(_OWORD *)&v84[9];
    sub_100092328((uint64_t)v81, (uint64_t)v80);
    v26 = v77;
    swift_unknownObjectRetain(v77);
    sub_1000B1650(v21, v20, v22, v23);
    swift_unknownObjectRetain(v26);
    sub_1000B1650(v21, v20, v22, v23);
    v27 = sub_10006922C(&qword_100652EC8);
    if (!swift_dynamicCast(v78, v80, v27, &_s11OutlineItemVN, 6))
    {
      sub_100068588(v81);
      swift_unknownObjectRelease(v26);
      sub_1000B1664(v21, v20, v22, v23);
      goto LABEL_13;
    }
    v75 = v21;
    *(_QWORD *)&v77 = v20;
    v76 = v26;
    v28 = v78[0];
    v29 = (void *)v78[2];
    v30 = v78[3];
    v31 = v78[4];
    v32 = v79;
    sub_100068588(v81);
    swift_unknownObjectRelease(v28);
    if (v32 == 255)
    {
      swift_unknownObjectRelease(v76);
      sub_1000B1664(v75, v77, v22, v23);
      goto LABEL_13;
    }
    v65 = v22;
    v70 = v23;
    v33 = v32;
    v34 = (uint64_t)v71;
    v35 = v72;
    v36 = v73;
    v37 = v74;
    sub_1000B1650(v71, v72, v73, v74);
    sub_1000B1650(v29, v30, v31, v33);
    v66 = v29;
    v67 = v30;
    v68 = v31;
    v69 = v33;
    sub_100200624((uint64_t)v29, v30, v31, v33);
    v39 = v38;
    v41 = v40;
    sub_100200624(v34, v35, v36, v37);
    v44 = v43;
    if (v39 == v42 && v41 == v43)
      break;
    v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v41, v42, v43, 0);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v44);
    sub_1000B1664(v71, v72, v73, v74);
    v46 = v66;
    v47 = v67;
    v48 = v68;
    v49 = v69;
    sub_1000B1664(v66, v67, v68, v69);
    sub_1000B1664(v46, v47, v48, v49);
    v50 = v70;
    v51 = v76;
    v52 = v75;
    if ((v45 & 1) != 0)
      goto LABEL_24;
    swift_unknownObjectRelease(v76);
    sub_1000B1664(v52, v77, v65, v50);
LABEL_13:
    v19 += 48;
    if (!--v18)
    {
      v17 = v60;
      swift_bridgeObjectRelease(v60);
      a5 = v64;
      v8 = v63;
      v9 = v62;
      v11 = v61;
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease_n(v41, 2);
  sub_1000B1664(v71, v72, v73, v74);
  v55 = v66;
  v56 = v67;
  v57 = v68;
  v58 = v69;
  sub_1000B1664(v66, v67, v68, v69);
  sub_1000B1664(v55, v56, v57, v58);
  v50 = v70;
  v51 = v76;
  v52 = v75;
LABEL_24:
  swift_bridgeObjectRelease_n(v60, 2);
  v59 = v61;
  sub_1003E521C(&v83, v64);
  sub_1000B1664(v71, v72, v73, v74);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v63);
  swift_unknownObjectRelease(v51);
  sub_1000B1664(v52, v77, v65, v50);
}

uint64_t sub_1000A3F70()
{
  void *v0;
  id v1;
  uint64_t result;

  if (qword_1006411E0 != -1)
    swift_once(&qword_1006411E0, sub_1000A3778);
  v0 = (void *)qword_100657770;
  v1 = objc_allocWithZone((Class)sub_10006922C((uint64_t *)&unk_1006455F0));
  result = UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)(v0, variable initialization expression of DOCTabBarVariableBlurBackgroundView.gradientView, 0);
  qword_100657778 = result;
  return result;
}

void sub_1000A3FE8(int a1, char a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  int v13;
  objc_class *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  void *v38;
  uint64_t v39;
  char *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  char v51;
  char v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  void *v67;
  char v68[24];
  _BYTE v69[24];
  uint64_t v70;
  objc_super v71;

  v5 = sub_10006922C((uint64_t *)&unk_1006455E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(v2, "doc_hasAppearedOrIsAppearing"))
  {
    v9 = *(_QWORD *)&v2[OBJC_IVAR____TtC5Files24DOCSidebarViewController_locationSelection];
    v10 = *(void **)(v9 + 24);
    if (v10)
    {
      v66 = *(id *)(v9 + 24);
    }
    else
    {
      v11 = *(void **)(v9 + 16);
      if (!v11)
        return;
      v66 = v11;
      v10 = 0;
    }
    v12 = v10;
    v13 = sub_100237858();
    if (v13 == 2 && (a2 & 1) == 0)
    {

      return;
    }
    v14 = (objc_class *)type metadata accessor for DOCSidebarViewController(0);
    v71.receiver = v2;
    v71.super_class = v14;
    v66 = v66;
    v15 = objc_msgSendSuper2(&v71, "collectionView");
    if (!v15)
    {
      __break(1u);
LABEL_47:
      __break(1u);
      return;
    }
    v16 = v15;
    v17 = type metadata accessor for DOCSidebarCollectionView();

    v18 = (uint64_t)&v2[OBJC_IVAR____TtC5Files24DOCSidebarViewController__diffableDataSource];
    swift_beginAccess(&v2[OBJC_IVAR____TtC5Files24DOCSidebarViewController__diffableDataSource], v68, 0, 0);
    sub_1000685A8(v18, (uint64_t)v69);
    v62 = v2;
    v60 = v6;
    v58 = v13;
    if (v70)
    {
      v19 = sub_10006922C((uint64_t *)&unk_1006455F0);
      if ((swift_dynamicCast(&v67, v69, (char *)&type metadata for Any + 8, v19, 6) & 1) != 0)
      {
        v20 = v67;
        goto LABEL_17;
      }
    }
    else
    {
      sub_10000CB4C((uint64_t)v69, &qword_100642730);
    }
    if (qword_1006411E8 != -1)
      swift_once(&qword_1006411E8, sub_1000A3F70);
    v20 = (id)qword_100657778;
LABEL_17:
    v57 = a1;
    dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

    v61 = v5;
    v59 = v8;
    v21 = NSDiffableDataSourceSnapshot.itemIdentifiers.getter(v5);
    v22 = v21;
    v23 = *(char **)(v21 + 16);
    if (v23)
    {
      swift_bridgeObjectRetain(v21);
      v63 = 0;
      v64 = 0;
      v65 = 0;
      v56 = v22;
      v24 = (unsigned __int8 *)(v22 + 72);
      v25 = 255;
      do
      {
        v26 = *v24;
        if (v26 != 255 && ~(_BYTE)v25 == 0)
        {
          v28 = (char *)*((_QWORD *)v24 - 3);
          v29 = *((_QWORD *)v24 - 2);
          v30 = *((_QWORD *)v24 - 1);
          v31 = *((_QWORD *)v24 - 5);
          swift_unknownObjectRetain(v31);
          sub_1000B1650(v28, v29, v30, v26);
          sub_100201260((uint64_t)v28, v29, v30, v26);
          v33 = v32;
          v34 = sub_100373810(v66);
          swift_unknownObjectRelease(v31);

          if (v34)
          {
            v63 = v28;
            v64 = v29;
            v65 = v30;
            v25 = v26;
          }
          else
          {
            sub_1000B1664(v28, v29, v30, v26);
            v25 = 255;
          }
        }
        v24 += 48;
        --v23;
      }
      while (v23);
      v22 = v56;
      swift_bridgeObjectRelease(v56);
      v36 = v64;
      v35 = v65;
      v23 = v63;
    }
    else
    {
      v36 = 0;
      v35 = 0;
      v25 = 255;
    }
    v37 = swift_bridgeObjectRelease(v22);
    (*(void (**)(char *, uint64_t, __n128))(v60 + 8))(v59, v61, v37);

    v38 = v62;
    v39 = *(_QWORD *)&v62[OBJC_IVAR____TtC5Files24DOCSidebarViewController_editingSession];
    if (v39)
    {
      if (*(_BYTE *)(v39 + 17) != 2 && ~(_BYTE)v25 != 0)
        goto LABEL_38;
    }
    else if ((_BYTE)v25 != 0xFF)
    {
LABEL_38:
      v46 = v58;
      v47 = &v62[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem];
      v49 = *(void **)&v62[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem];
      v48 = *(_QWORD *)&v62[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem + 8];
      v50 = *(_QWORD *)&v62[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem + 16];
      *(_QWORD *)v47 = v23;
      *((_QWORD *)v47 + 1) = v36;
      *((_QWORD *)v47 + 2) = v35;
      v51 = v47[24];
      v47[24] = v25;
      sub_1000B1650(v23, v36, v35, v25);
      sub_1000E4F7C(v23, v36, v35, v25);
      sub_1000E4F7C(v23, v36, v35, v25);
      sub_1000B1664(v49, v48, v50, v51);
      sub_100020920();
      sub_1000B1664(v23, v36, v35, v25);
      v52 = sub_1003E2494(v23, v36, v35, v25, v57 & 1, 0);
      if (v46 == 2 && v52 != 2 && (v52 & 1) == 0)
      {
        v53 = objc_msgSend(v38, "view");
        if (v53)
        {
          v54 = v53;
          objc_msgSend(v53, "layoutIfNeeded");

          sub_1000B1664(v23, v36, v35, v25);
          sub_1000B1664(v23, v36, v35, v25);

          return;
        }
        goto LABEL_47;
      }

      sub_1000B1664(v23, v36, v35, v25);
      goto LABEL_44;
    }
    v41 = &v62[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem];
    v42 = *(void **)&v62[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem];
    v43 = *(_QWORD *)&v62[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem + 8];
    v44 = *(_QWORD *)&v62[OBJC_IVAR____TtC5Files24DOCSidebarViewController_currentlySelectedSidebarItem + 16];
    *((_QWORD *)v41 + 1) = 0;
    *((_QWORD *)v41 + 2) = 0;
    *(_QWORD *)v41 = 0;
    v45 = v41[24];
    v41[24] = -1;
    sub_1000B1664(v42, v43, v44, v45);
    sub_100020920();
    sub_1003E3CDC();

LABEL_44:
    sub_1000B1664(v23, v36, v35, v25);
  }
}

void sub_1000A4544()
{
  uint64_t v0;

  sub_1000A48A8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000A454C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  if (!*(_QWORD *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_15;
  }
  v2 = a1;
  v5 = sub_10001CCD0(0);
  if ((v6 & 1) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
  if (!((unint64_t)v3 >> 62))
  {
    v7 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5));
    if (v7)
      goto LABEL_5;
LABEL_20:
    swift_bridgeObjectRelease(v3);
    v10 = _swiftEmptyArrayStorage;
LABEL_21:
    swift_beginAccess(v2 + 88, &v18, 1, 0);
    v17 = *(_QWORD *)(v2 + 88);
    *(_QWORD *)(v2 + 88) = v10;
    swift_bridgeObjectRelease(v17);
    return 1;
  }
LABEL_16:
  if (v3 < 0)
    v16 = v3;
  else
    v16 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  v7 = _CocoaArrayWrapper.endIndex.getter(v16);
  if (!v7)
    goto LABEL_20;
LABEL_5:
  v18 = _swiftEmptyArrayStorage;
  result = sub_1000817E4(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v9 = 0;
    v10 = v18;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v3);
      else
        v11 = *(id *)(v3 + 8 * v9 + 32);
      v12 = v11;
      v18 = v10;
      v14 = v10[2];
      v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_1000817E4(v13 > 1, v14 + 1, 1);
        v10 = v18;
      }
      v10[2] = v14 + 1;
      v15 = &v10[4 * v14];
      v15[5] = 0;
      v15[6] = 0;
      ++v9;
      v15[4] = v12;
      *((_BYTE *)v15 + 56) = 1;
    }
    while (v7 != v9);
    swift_bridgeObjectRelease(v3);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A46EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t i;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void **v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v19 = a2;
    else
      v19 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v4 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = _swiftEmptyArrayStorage;
  if (!v4)
  {
LABEL_15:
    swift_beginAccess(a1 + 88, &v20, 1, 0);
    v18 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v5;
    swift_bridgeObjectRelease(v18);
    return 0;
  }
  v20 = _swiftEmptyArrayStorage;
  result = sub_1000817E4(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = v20;
    if ((a2 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a2);
        v20 = v5;
        v10 = v5[2];
        v9 = v5[3];
        if (v10 >= v9 >> 1)
        {
          sub_1000817E4(v9 > 1, v10 + 1, 1);
          v5 = v20;
        }
        v5[2] = v10 + 1;
        v11 = &v5[4 * v10];
        v11[5] = 0;
        v11[6] = 0;
        v11[4] = v8;
        *((_BYTE *)v11 + 56) = 1;
      }
    }
    else
    {
      v12 = (void **)(a2 + 32);
      do
      {
        v13 = *v12;
        v20 = v5;
        v14 = v5[2];
        v15 = v5[3];
        v16 = v13;
        if (v14 >= v15 >> 1)
        {
          sub_1000817E4(v15 > 1, v14 + 1, 1);
          v5 = v20;
        }
        v5[2] = v14 + 1;
        v17 = &v5[4 * v14];
        v17[5] = 0;
        v17[6] = 0;
        v17[4] = v16;
        *((_BYTE *)v17 + 56) = 1;
        ++v12;
        --v4;
      }
      while (v4);
    }
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

void sub_1000A48A8(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t Strong;
  char *v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  int v31;
  id v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t (*v43)(__n128);
  __n128 v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  int64_t *v52;
  unsigned int v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t);
  void (*v59)(_QWORD, _QWORD);
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  _QWORD *v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_QWORD, int64_t);
  unint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  _BOOL4 v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  id v82;
  char *v83;
  unint64_t v84;
  id v85;
  void *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(_QWORD, _QWORD, _QWORD);
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  uint64_t i;
  id v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  id v111;
  id v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  void *v123;
  id v124;
  uint64_t v125;
  int64_t v126;
  Swift::String v127;
  id v128;
  void *v129;
  void *v130;
  char *v131;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  int64_t v136;
  unint64_t v137;
  __n128 v138;
  uint64_t v139;
  char *v140;
  char *v141;
  NSObject *v142;
  os_log_type_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  id *v157;
  void (*v158)(void);
  id v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(_QWORD, _QWORD, _QWORD);
  void (*v170)(_QWORD, _QWORD);
  uint64_t v171;
  int64_t v172;
  int64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  _QWORD v177[2];
  char v178;
  uint64_t v179;
  _BYTE v180[32];

  v5 = type metadata accessor for Logger(0);
  v173 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (int64_t)&v163 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (uint64_t)&v163 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v163 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v163 - v15;
  a1 += 16;
  swift_beginAccess(a1, v180, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (!Strong)
    return;
  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_112;
  v18 = (char *)Strong;
  v19 = sub_10001CCD0(1);
  if ((v20 & 1) == 0)
    goto LABEL_113;
  v169 = (void (*)(_QWORD, _QWORD, _QWORD))v8;
  v170 = (void (*)(_QWORD, _QWORD))v16;
  v171 = (uint64_t)v14;
  v172 = v5;
  v168 = v11;
  v174 = a2;
  v175 = v18;
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v19);
  v176 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v8 >> 62)
    goto LABEL_114;
  v21 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v8);
  while (1)
  {
    v22 = (uint64_t)&OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain;
    if (v21)
    {
      if (v21 < 1)
      {
LABEL_133:
        __break(1u);
        goto LABEL_134;
      }
      v23 = 0;
      while (1)
      {
        if ((v8 & 0xC000000000000001) != 0)
          v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v8);
        else
          v24 = *(id *)(v8 + 8 * v23 + 32);
        v25 = v24;
        v26 = type metadata accessor for DOCFileProviderSource();
        v27 = swift_dynamicCastClass(v25, v26);
        if (!v27)
          goto LABEL_9;
        v28 = *(void **)(v27 + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain);
        if (!v28)
          goto LABEL_9;
        v29 = v28;
        v30 = objc_msgSend(v29, "identifier");
        v31 = DOCProviderDomainIDIsSharedServerDomainID(v30);

        if (!v31)
        {

          goto LABEL_10;
        }
        v32 = objc_msgSend(v29, "identifier");
        v33 = DOCProviderDomainIDIsDefaultSharedServer();

        if ((v33 & 1) == 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v34);
          v35 = *(_QWORD *)(v176 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v35);
          v36 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v35, v25);
          specialized ContiguousArray._endMutation()(v36);
        }
        else
        {
LABEL_9:

        }
LABEL_10:
        if (v21 == ++v23)
        {
          swift_bridgeObjectRelease(v8);
          v37 = (_QWORD *)v176;
          goto LABEL_22;
        }
      }
    }
    swift_bridgeObjectRelease(v8);
    v37 = _swiftEmptyArrayStorage;
LABEL_22:
    swift_retain();
    v38 = v175;
    sub_10000E3A4(4, (uint64_t)v175, (uint64_t)v37, sub_1000A46EC);
    swift_release(v37);
    v39 = v174;
    swift_bridgeObjectRetain(v174);
    sub_10000E3A4(2, (uint64_t)v38, v39, sub_1000A454C);
    swift_bridgeObjectRelease(v39);
    v41 = DOCUSBFormatting.shared.unsafeMutableAddressor(v40);
    v42 = *(char **)v41;
    v43 = *(uint64_t (**)(__n128))(**(_QWORD **)v41 + 128);
    v44 = swift_retain();
    v11 = v43(v44);
    swift_release(v42);
    v45 = v172;
    if ((v11 & 1) == 0)
      break;
    if (!*(_QWORD *)(v39 + 16))
    {
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:

      __break(1u);
      goto LABEL_151;
    }
    v42 = (char *)v39;
    v46 = sub_10001CCD0(0);
    if ((v47 & 1) == 0)
      goto LABEL_143;
    v48 = *(_QWORD *)(*(_QWORD *)(v39 + 56) + 8 * v46);
    v49 = swift_bridgeObjectRetain(v48);
    v50 = v175;
    v11 = sub_10029649C(v49);
    swift_bridgeObjectRelease(v48);
    v51 = (uint64_t *)&v50[OBJC_IVAR____TtC5Files24DOCSidebarViewController_pendingSelectionProviderDomainIdentifier];
    v52 = (int64_t *)&v50[OBJC_IVAR____TtC5Files24DOCSidebarViewController_pendingSelectionProviderDomainIdentifier
                               + 8];
    v2 = *v52;
    v53 = (*v52 != 0) | v11;
    if (*v52)
    {
      v54 = v173;
      if ((v11 & 1) == 0)
        goto LABEL_29;
    }
    else
    {
      v54 = v173;
    }
LABEL_52:
    LODWORD(v171) = v53;
    v90 = swift_release(v37);
    v91 = Logger.Rename.unsafeMutableAddressor(v90);
    v92 = v169;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v54 + 16))(v169, v91, v45);
    v89 = v175;
    v93 = v45;
    v8 = v175;
    v94 = Logger.logObject.getter(v8);
    v95 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v94, v95))
    {
      v11 = swift_slowAlloc(18, -1);
      v96 = swift_slowAlloc(32, -1);
      v179 = v96;
      *(_DWORD *)v11 = 136315394;
      v97 = *v52;
      v176 = *v51;
      v177[0] = v97;
      swift_bridgeObjectRetain(v97);
      v98 = sub_10006922C(&qword_100648C80);
      v99 = String.init<A>(describing:)(&v176, v98);
      v101 = v100;
      v176 = sub_1000544FC(v99, v100, &v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177);

      swift_bridgeObjectRelease(v101);
      *(_WORD *)(v11 + 12) = 1024;
      LODWORD(v176) = v171 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, (char *)&v176 + 4);
      _os_log_impl((void *)&_mh_execute_header, v94, v95, "[Erase] sidebar sourcesOrderObserver updateBlock 5. pendingSelectionProviderDomainIdentifier: %s didOverrideSidebarItems: %{BOOL}d", (uint8_t *)v11, 0x12u);
      swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
      v102 = v96;
      v89 = v175;
      swift_slowDealloc(v102, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      (*(void (**)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v173 + 8))(v92, v93);
    }
    else
    {

      (*(void (**)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v54 + 8))(v92, v93);
    }
    v2 = (int64_t)&off_10061F000;
    v22 = v174;
    if (*(_QWORD *)(v174 + 16))
      goto LABEL_56;
LABEL_111:
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    if (v8 < 0)
      v153 = v8;
    else
      v153 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v21 = _CocoaArrayWrapper.endIndex.getter(v153);
  }
  v51 = (uint64_t *)&v38[OBJC_IVAR____TtC5Files24DOCSidebarViewController_pendingSelectionProviderDomainIdentifier];
  v52 = (int64_t *)&v38[OBJC_IVAR____TtC5Files24DOCSidebarViewController_pendingSelectionProviderDomainIdentifier
                             + 8];
  v2 = *v52;
  v54 = v173;
  if (!*v52)
  {
    v53 = 0;
    goto LABEL_52;
  }
LABEL_29:
  v11 = v45;
  v55 = *v51;
  v56 = swift_bridgeObjectRetain(v2);
  v57 = Logger.Rename.unsafeMutableAddressor(v56);
  v58 = *(void (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))(v54 + 16);
  v59 = v170;
  v58(v170, v57, v11);
  v60 = swift_bridgeObjectRetain_n(v2, 2);
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.debug.getter();
  v63 = os_log_type_enabled(v61, v62);
  v166 = v55;
  v167 = v57;
  v169 = (void (*)(_QWORD, _QWORD, _QWORD))v58;
  if (v63)
  {
    v11 = swift_slowAlloc(12, -1);
    v165 = swift_slowAlloc(32, -1);
    v176 = v165;
    *(_DWORD *)v11 = 136315138;
    v64 = v37;
    v65 = v172;
    v22 = v174;
    v164 = (char *)(v11 + 4);
    swift_bridgeObjectRetain(v2);
    v66 = v55;
    v8 = v65;
    v37 = v64;
    v179 = sub_1000544FC(v66, v2, &v176);
    v57 = v167;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180);
    swift_bridgeObjectRelease_n(v2, 3);
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "[Erase] sidebar sourcesOrderObserver updateBlock 2. pendingSelectionProviderDomainIdentifier: %s", (uint8_t *)v11, 0xCu);
    v67 = v165;
    swift_arrayDestroy(v165, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v68 = *(void (**)(_QWORD, int64_t))(v173 + 8);
    v68(v59, v8);
  }
  else
  {

    swift_bridgeObjectRelease_n(v2, 2);
    v68 = *(void (**)(_QWORD, int64_t))(v54 + 8);
    v68(v59, v11);
    v8 = v11;
    v22 = v174;
  }
  if (!*(_QWORD *)(v22 + 16))
    goto LABEL_135;
  v69 = sub_10001CCD0(0);
  if ((v70 & 1) == 0)
    goto LABEL_136;
  v173 = v2;
  v176 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v69);
  swift_bridgeObjectRetain(v176);
  sub_1000887DC((uint64_t)v37);
  v2 = v176;
  v71 = v171;
  v169(v171, v57, v8);
  v72 = swift_bridgeObjectRetain_n(v2, 2);
  v73 = Logger.logObject.getter(v72);
  v74 = static os_log_type_t.debug.getter();
  v75 = os_log_type_enabled(v73, v74);
  v170 = v68;
  if (v75)
  {
    v76 = (uint8_t *)swift_slowAlloc(12, -1);
    v77 = swift_slowAlloc(32, -1);
    v176 = v77;
    *(_DWORD *)v76 = 136315138;
    v78 = sub_10004F2F0(0, &qword_100643AC0, DOCDocumentSource_ptr);
    v79 = swift_bridgeObjectRetain(v2);
    v80 = Array.description.getter(v79, v78);
    v8 = v81;
    swift_bridgeObjectRelease(v2);
    v179 = sub_1000544FC(v80, v8, &v176);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, v180);
    swift_bridgeObjectRelease_n(v2, 2);
    v22 = v174;
    swift_bridgeObjectRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "[Erase] sidebar sourcesOrderObserver updateBlock 3. combinedSources: %s", v76, 0xCu);
    swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v77, -1, -1);
    swift_slowDealloc(v76, -1, -1);

    v170(v171, v172);
  }
  else
  {

    swift_bridgeObjectRelease_n(v2, 2);
    v68(v71, v8);
  }
  v11 = (uint64_t)v175;
  if ((unint64_t)v2 >> 62)
    goto LABEL_137;
  v42 = *(char **)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v173);
  v82 = (id)v11;
  if (v42)
    goto LABEL_39;
LABEL_49:
  while (2)
  {
    while (2)
    {
      while (2)
      {
        while (2)
        {
          v89 = v175;

          swift_bridgeObjectRelease(v2);
          swift_bridgeObjectRelease_n(v173, 2);
          v2 = 0x10061F000;
          if (!*(_QWORD *)(v22 + 16))
            goto LABEL_111;
LABEL_56:
          v103 = sub_10001CCD0(0);
          if ((v104 & 1) != 0)
          {
            v22 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v103);
            v176 = (uint64_t)_swiftEmptyArrayStorage;
            if (!((unint64_t)v22 >> 62))
            {
              v11 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain(v22);
              if (v11)
                goto LABEL_59;
LABEL_123:
              swift_bridgeObjectRelease(v22);
              v117 = (uint64_t)_swiftEmptyArrayStorage;
              if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) == 0)
              {
LABEL_124:
                if ((v117 & 0x4000000000000000) == 0)
                {
                  v155 = *(_QWORD *)(v117 + 16);
LABEL_126:
                  v156 = swift_release(v117);
                  if (v155 > 0)
                  {
                    v157 = (id *)DOCUSBStorageKitManager.shared.unsafeMutableAddressor(v156);
                    v158 = *(void (**)(void))((swift_isaMask & *(_QWORD *)*v157) + 0x60);
                    v159 = *v157;
                    v158();

                  }
                  return;
                }
              }
LABEL_130:
              v160 = swift_bridgeObjectRetain(v117);
              v155 = _CocoaArrayWrapper.endIndex.getter(v160);
              swift_release(v117);
              goto LABEL_126;
            }
          }
          else
          {
            __break(1u);
          }
          if (v22 < 0)
            v154 = v22;
          else
            v154 = v22 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v22);
          v11 = _CocoaArrayWrapper.endIndex.getter(v154);
          if (!v11)
            goto LABEL_123;
LABEL_59:
          if (v11 >= 1)
          {
            for (i = 0; i != v11; ++i)
            {
              if ((v22 & 0xC000000000000001) != 0)
                v106 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v22);
              else
                v106 = *(id *)(v22 + 8 * i + 32);
              v107 = v106;
              v108 = type metadata accessor for DOCFileProviderSource();
              v109 = swift_dynamicCastClass(v107, v108);
              if (v109
                && (v110 = *(void **)(v109 + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain)) != 0
                && (v111 = v110,
                    v112 = objc_msgSend(v111, *(SEL *)(v2 + 2880)),
                    v113 = DOCProviderDomainIDIsExternalDevice(v112),
                    v111,
                    v112,
                    (v113 & 1) != 0))
              {
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v114);
                v115 = *(_QWORD *)(v176 + 16);
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v115);
                v116 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v115, v107);
                specialized ContiguousArray._endMutation()(v116);
              }
              else
              {

              }
            }
            swift_bridgeObjectRelease(v22);
            v89 = v175;
            v117 = v176;
            if ((v176 & 0x8000000000000000) == 0)
              goto LABEL_124;
            goto LABEL_130;
          }
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          if (v2 < 0)
            v161 = v2;
          else
            v161 = v2 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v173);
          swift_bridgeObjectRetain(v2);
          v162 = (id)v11;
          v42 = (char *)_CocoaArrayWrapper.endIndex.getter(v161);
          swift_bridgeObjectRelease(v2);
          if (!v42)
            continue;
          break;
        }
LABEL_39:
        v83 = 0;
        v84 = v2 & 0xC000000000000001;
        v165 = v2 + 32;
        while (1)
        {
          if (v84)
          {
            swift_bridgeObjectRetain(v2);
            v85 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v83, v2);
          }
          else
          {
            v86 = *(void **)(v2 + 8 * (_QWORD)v83 + 32);
            swift_bridgeObjectRetain(v2);
            v85 = v86;
          }
          v11 = (uint64_t)v85;
          v87 = type metadata accessor for DOCFileProviderSource();
          if (swift_dynamicCastClass(v11, v87))
            break;
          swift_bridgeObjectRelease(v2);

          v88 = v83 + 1;
          if (__OFADD__(v83, 1))
          {
            __break(1u);
LABEL_102:
            __break(1u);
            goto LABEL_103;
          }
          ++v83;
          if (v88 == v42)
            goto LABEL_49;
        }

        swift_bridgeObjectRelease(v2);
        if (v42 == v83)
          continue;
        break;
      }
      v171 = v2 & 0xFFFFFFFFFFFFFF8;
      v164 = v42 - 1;
      v22 = v174;
LABEL_73:
      if (v84)
      {
        swift_bridgeObjectRetain(v2);
        v118 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v83, v2);
      }
      else
      {
        if (((unint64_t)v83 & 0x8000000000000000) != 0)
          goto LABEL_146;
        if ((unint64_t)v83 >= *(_QWORD *)(v171 + 16))
          goto LABEL_147;
        v119 = *(void **)(v165 + 8 * (_QWORD)v83);
        swift_bridgeObjectRetain(v2);
        v118 = v119;
      }
      v11 = (uint64_t)v118;
      v120 = swift_dynamicCastClass(v118, v87);
      if (!v120)
        goto LABEL_150;
      v121 = v120;
      *(_QWORD *)&v122 = swift_bridgeObjectRelease(v2).n128_u64[0];
      v123 = *(void **)(v121 + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain);
      if (!v123)
      {

        if (v83 == v42)
          goto LABEL_144;
        goto LABEL_84;
      }
      v124 = objc_msgSend(v123, "identifier", v122);
      v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v124);
      v8 = v126;

      v127._countAndFlagsBits = v125;
      v127._object = (void *)v8;
      LOBYTE(v124) = String.hasPrefix(_:)(v127);

      swift_bridgeObjectRelease(v8);
      if ((v124 & 1) == 0)
      {
        if (v83 == v42)
          goto LABEL_144;
LABEL_84:
        if (__OFADD__(v83, 1))
          goto LABEL_145;
        if (v83 + 1 == v42)
          continue;
        while (1)
        {
          v11 = (uint64_t)(v83 + 1);
          if (v84)
          {
            swift_bridgeObjectRetain(v2);
            v128 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v83 + 1, v2);
          }
          else
          {
            if (v11 < 0)
            {
              __break(1u);
LABEL_132:
              __break(1u);
              goto LABEL_133;
            }
            if ((unint64_t)v11 >= *(_QWORD *)(v171 + 16))
              goto LABEL_132;
            v129 = *(void **)(v2 + 8 * (_QWORD)v83 + 40);
            swift_bridgeObjectRetain(v2);
            v128 = v129;
          }
          v130 = v128;
          if (swift_dynamicCastClass(v128, v87))
            break;
          swift_bridgeObjectRelease(v2);

          v131 = v83 + 2;
          if (__OFADD__(v11, 1))
            goto LABEL_102;
          ++v83;
          if (v131 == v42)
            goto LABEL_49;
        }

        swift_bridgeObjectRelease(v2);
        if (v164 == v83++)
          continue;
        goto LABEL_73;
      }
      break;
    }
    v22 = v174;
    v8 = v172;
    if (v83 == v42)
      continue;
    break;
  }
  if (v84)
  {
    v133 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v83, v2);
    goto LABEL_106;
  }
LABEL_103:
  if (((unint64_t)v83 & 0x8000000000000000) != 0)
    goto LABEL_148;
  if ((unint64_t)v83 >= *(_QWORD *)(v171 + 16))
    goto LABEL_149;
  v133 = (char *)*(id *)(v165 + 8 * (_QWORD)v83);
LABEL_106:
  v42 = v133;
  v134 = swift_dynamicCastClass(v133, v87);
  if (v134)
  {
    v11 = v134;
    v135 = v173;
    swift_bridgeObjectRelease(v173);

    v136 = v2;
    v137 = v135;
    v138 = swift_bridgeObjectRelease(v136);
    v139 = v168;
    ((void (*)(uint64_t, uint64_t, int64_t, __n128))v169)(v168, v167, v8, v138);
    v140 = v42;
    swift_bridgeObjectRetain(v137);
    v141 = v140;
    v142 = Logger.logObject.getter(v141);
    v143 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v142, v143))
    {
      v144 = swift_slowAlloc(22, -1);
      v145 = swift_slowAlloc(64, -1);
      v171 = v11;
      v146 = v145;
      v179 = v145;
      *(_DWORD *)v144 = 136315394;
      swift_bridgeObjectRetain(v137);
      v176 = sub_1000544FC(v166, v137, &v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177);
      swift_bridgeObjectRelease_n(v137, 3);
      *(_WORD *)(v144 + 12) = 2080;
      v177[0] = 0;
      v177[1] = 0;
      v176 = v171;
      v178 = 1;
      v8 = v141;
      v147 = String.init<A>(describing:)(&v176, &type metadata for DOCSidebarItem);
      v149 = v148;
      v176 = sub_1000544FC(v147, v148, &v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177);

      v22 = v174;
      swift_bridgeObjectRelease(v149);
      _os_log_impl((void *)&_mh_execute_header, v142, v143, "[Erase] sidebar sourcesOrderObserver updateBlock 4. found source matching pendingSelectionProviderDomainIdentifier: %s calling didSelectItem with sidebar item: %s", (uint8_t *)v144, 0x16u);
      swift_arrayDestroy(v146, 2, (char *)&type metadata for Any + 8);
      v150 = v146;
      v11 = v171;
      swift_slowDealloc(v150, -1, -1);
      swift_slowDealloc(v144, -1, -1);

      v151 = v139;
      v152 = v172;
    }
    else
    {

      swift_bridgeObjectRelease_n(v137, 2);
      v151 = v139;
      v152 = v8;
    }
    v170(v151, v152);
    v2 = 0x10061F000;
    v89 = v175;
    sub_100235690((void *)v11, 0, 0, 1, 0);

    if (!*(_QWORD *)(v22 + 16))
      goto LABEL_111;
    goto LABEL_56;
  }
LABEL_151:

  __break(1u);
}

void sub_1000A590C(uint64_t a1)
{
  uint64_t v1;

  sub_1000A5914(a1, v1);
}

void sub_1000A5914(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];
  uint64_t v8;

  v4 = swift_allocObject(&unk_1005D4460, 32, 7);
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  v7[4] = sub_1000A4544;
  v8 = v4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_10004A82C;
  v7[3] = &unk_1005D4478;
  v5 = _Block_copy(v7);
  v6 = v8;
  swift_retain();
  swift_bridgeObjectRetain(a1);
  swift_release(v6);
  DOCRunInMainThread(v5);
  _Block_release(v5);
}

void sub_1000A59CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = OBJC_IVAR____TtC5Files24DOCSidebarViewController_sourcesOrderObserver;
  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files24DOCSidebarViewController_sourcesOrderObserver))
  {
    v3 = *(void **)(v0 + OBJC_IVAR____TtC5Files24DOCSidebarViewController_configuration);
    v4 = *(void **)(v0 + OBJC_IVAR____TtC5Files24DOCSidebarViewController_sourceObserver);
    v5 = swift_allocObject(&unk_1005D4140, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16);
    objc_allocWithZone((Class)type metadata accessor for DOCSourceOrderObserver());
    v6 = DOCSourceOrderObserver.init(configuration:sourceObserver:updateBlock:)(v3, v4, (uint64_t)sub_1000A590C, v5);
    v7 = *(void **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v6;

  }
  v8 = OBJC_IVAR____TtC5Files24DOCSidebarViewController_sourcesVisitedObserver;
  if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC5Files24DOCSidebarViewController_sourcesVisitedObserver))
  {
    v9 = swift_allocObject(&unk_1005D4140, 24, 7);
    swift_unknownObjectWeakInit(v9 + 16);
    v10 = type metadata accessor for DOCSourceVisibilityController.VisibilityObserver();
    v11 = swift_allocObject(v10, 32, 7);
    *(_QWORD *)(v11 + 16) = sub_10023D2E4;
    *(_QWORD *)(v11 + 24) = v9;
    v12 = *(_QWORD *)(v1 + v8);
    *(_QWORD *)(v1 + v8) = v11;
    swift_retain();
    swift_release(v12);
    sub_10009D970(v11);
    swift_release(v11);
  }
}

uint64_t sub_1000A5B20(char a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  char v9;
  void *v11;
  _BYTE v12[24];
  _BYTE v13[24];
  uint64_t v14;

  if ((v1[OBJC_IVAR____TtC5Files24DOCSidebarViewController_appLaunchOptimizationsActive] & 1) != 0)
    return 1;
  v2 = v1;
  if (!objc_msgSend(v1, "doc_hasAppearedOrIsAppearing"))
    return 1;
  v4 = (uint64_t)&v1[OBJC_IVAR____TtC5Files24DOCSidebarViewController__diffableDataSource];
  swift_beginAccess(&v2[OBJC_IVAR____TtC5Files24DOCSidebarViewController__diffableDataSource], v12, 0, 0);
  sub_1000271D4(v4, (uint64_t)v13, &qword_100642730);
  if (v14)
  {
    v5 = sub_10006922C((uint64_t *)&unk_1006455F0);
    if ((swift_dynamicCast(&v11, v13, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
    {
      v6 = v11;
      if (qword_1006411E8 != -1)
        swift_once(&qword_1006411E8, sub_1000A3F70);
      goto LABEL_11;
    }
  }
  else
  {
    sub_10000CB4C((uint64_t)v13, &qword_100642730);
  }
  if (qword_1006411E8 != -1)
    swift_once(&qword_1006411E8, sub_1000A3F70);
  v6 = (id)qword_100657778;
LABEL_11:
  v7 = (void *)qword_100657778;
  sub_10006922C((uint64_t *)&unk_1006455F0);
  v8 = v7;
  v9 = static NSObject.== infix(_:_:)(v6, v8);

  if ((v9 & 1) != 0
    || *(uint64_t *)&v2[OBJC_IVAR____TtC5Files24DOCSidebarViewController__updatingModelForUIChangeCount] > 0
    || *(_QWORD *)&v2[OBJC_IVAR____TtC5Files24DOCSidebarViewController_diffableReloadsCoalescedCount])
  {
    return 1;
  }
  if (!*(_QWORD *)&v2[OBJC_IVAR____TtC5Files24DOCSidebarViewController_diffableReloadIsInProgressCount])
    return 0;
  sub_100491610(0xD00000000000003DLL, 0x8000000100539380, a1 & 1);
  return 2;
}

void sub_1000A5D0C()
{
  uint64_t v0;

  sub_1000A5D14(v0);
}

void sub_1000A5D14(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  id v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    sub_10000E3A4(3, (uint64_t)v3, (uint64_t)v3, sub_100028694);

  }
}

void sub_1000A5D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *Strong;
  __n128 v11;
  id v12;
  __n128 v13;
  _QWORD v14[5];
  uint64_t v15;

  v1 = OBJC_IVAR____TtC5Files24DOCSidebarViewController_favoritesSubscriber;
  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files24DOCSidebarViewController_favoritesSubscriber))
  {
    v2 = swift_allocObject(&unk_1005D4140, 24, 7);
    swift_unknownObjectWeakInit(v2 + 16);
    v3 = (void *)objc_opt_self(DOCFavoritesManager);
    v4 = objc_msgSend(v3, "sharedManager", swift_retain().n128_f64[0]);
    v5 = swift_allocObject(&unk_1005D4410, 32, 7);
    *(_QWORD *)(v5 + 16) = sub_1000A5D0C;
    *(_QWORD *)(v5 + 24) = v2;
    v14[4] = sub_100066584;
    v15 = v5;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    v14[2] = sub_100088118;
    v14[3] = &unk_1005D4428;
    v6 = _Block_copy(v14);
    v7 = v15;
    swift_retain();
    swift_release(v7);
    v8 = objc_msgSend(v4, "addSubscriber:", v6);
    _Block_release(v6);

    v9 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v8;

    swift_beginAccess(v2 + 16, v14, 0, 0);
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v2 + 16);
    if (Strong)
    {
      v12 = Strong;
      v13.n128_f64[0] = sub_10000E3A4(3, (uint64_t)v12, (uint64_t)v12, sub_100028694);
      swift_release_n(v2, 2, v13);

    }
    else
    {
      swift_release_n(v2, 2, v11);
    }
  }
}

void sub_1000A5F38()
{
  char *v0;
  id v1;
  id v2;
  unsigned int v3;
  double v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  objc_super v10;

  v1 = objc_msgSend(v0, "effectiveAppearance");
  if (v1)
  {
    v9 = v1;
    v2 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC5Files24DOCSidebarViewController_configuration], "sourceListUI");
    v3 = objc_msgSend(v2, "overridesBackgroundColorUsingEffectiveAppearance");
    *(_QWORD *)&v4 = swift_unknownObjectRelease(v2).n128_u64[0];
    if (v3)
    {
      v5 = objc_msgSend(v9, "backgroundColor", v4);
      v10.receiver = v0;
      v10.super_class = (Class)type metadata accessor for DOCSidebarViewController(0);
      v6 = objc_msgSendSuper2(&v10, "collectionView");
      if (v6)
      {
        v7 = v6;
        v8 = type metadata accessor for DOCSidebarCollectionView();
        objc_msgSend((id)swift_dynamicCastClassUnconditional(v7, v8, 0, 0, 0), "setBackgroundColor:", v5);

      }
      else
      {
        __break(1u);
      }
    }
    else
    {

    }
  }
}

id sub_1000A6064(char a1)
{
  void *v1;
  id v3;
  id v4;
  uint64_t v5;
  id result;
  void *v7;
  Swift::String v8;
  Swift::String_optional v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v14;
  Swift::String_optional v15;
  Swift::String v16;
  Swift::String v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  Swift::String v22;
  Swift::String v23;

  v3 = objc_msgSend(v1, "traitCollection");
  v4 = objc_msgSend(v3, "sourceOutlineStyle");

  result = (id)_DocumentManagerBundle(v5);
  v7 = result;
  if (v4)
  {
    if (result)
    {
      v22._countAndFlagsBits = 0xD000000000000032;
      v22._object = (void *)0x800000010051C530;
      v8._countAndFlagsBits = 1953064005;
      v8._object = (void *)0xE400000000000000;
      v9.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v9.value._object = (void *)0xEB00000000656C62;
      v10._countAndFlagsBits = 0;
      v10._object = (void *)0xE000000000000000;
      v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, (NSBundle)v7, v10, v22);
      countAndFlagsBits = v11._countAndFlagsBits;
      object = v11._object;

LABEL_6:
      v18 = String._bridgeToObjectiveC()();
      sub_10004F2F0(0, (unint64_t *)&qword_1006424C0, UIAction_ptr);
      v19 = swift_allocObject(&unk_1005D4140, 24, 7);
      swift_unknownObjectWeakInit(v19 + 16);
      v20 = swift_allocObject(&unk_1005D42D0, 25, 7);
      *(_QWORD *)(v20 + 16) = v19;
      *(_BYTE *)(v20 + 24) = a1 & 1;
      return (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(countAndFlagsBits, object, 0, 0, 0, 0, v18, 0, v21, 0, 0, 0, sub_10023D1E8, v20);
    }
    __break(1u);
  }
  else if (result)
  {
    v23._countAndFlagsBits = 0xD00000000000003ALL;
    v23._object = (void *)0x800000010051C590;
    v14._countAndFlagsBits = 0x6469532074696445;
    v14._object = (void *)0xEC00000072616265;
    v15.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v15.value._object = (void *)0xEB00000000656C62;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, (NSBundle)v7, v16, v23);
    countAndFlagsBits = v17._countAndFlagsBits;
    object = v17._object;

    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A62A0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  __int128 v18;
  __int128 v19;

  v0 = sub_10006922C(&qword_100648CA8);
  __chkstk_darwin(v0);
  v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = swift_allocObject(&unk_1005D4140, 24, 7);
  swift_unknownObjectWeakInit(v3 + 16);
  swift_retain();
  v4 = sub_1000A6CC4();
  v18 = 0u;
  v19 = 0u;
  v5 = (void *)objc_opt_self(NSOperationQueue);
  v6 = objc_msgSend(v5, "mainQueue");
  (*(void (**)(const NSNotificationName, __int128 *, id, void (*)(uint64_t), _QWORD))(*(_QWORD *)v4 + 152))(UIAccessibilityShouldDifferentiateWithoutColorDidChangeNotification, &v18, v6, sub_1002362C8, 0);
  v8 = v7;
  swift_release(v4);

  swift_bridgeObjectRelease(v8);
  sub_10000CB4C((uint64_t)&v18, &qword_100642730);
  v9 = sub_1000A6CC4();
  v10 = DOCTagRegistryTagsDidChangeNotification;
  v18 = 0u;
  v19 = 0u;
  v11 = swift_allocObject(&unk_1005D43E8, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_10023D2B0;
  *(_QWORD *)(v11 + 24) = v3;
  v12 = objc_msgSend(v5, "mainQueue", swift_retain().n128_f64[0]);
  (*(void (**)(uint64_t, __int128 *, id, uint64_t (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v9 + 144))(v10, &v18, v12, sub_10023D2DC, v11);
  v14 = v13;
  swift_release(v9);
  swift_release(v11);

  swift_bridgeObjectRelease(v14);
  sub_10000CB4C((uint64_t)&v18, &qword_100642730);
  v15 = type metadata accessor for Notification(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v2, 1, 1, v15);
  sub_1000120C0((uint64_t)v2, v3);
  swift_release_n(v3, 2, v16);
  return sub_10000CB4C((uint64_t)v2, &qword_100648CA8);
}

uint64_t type metadata accessor for DOCSidebarViewController.LocationSelection()
{
  return objc_opt_self(_TtCC5Files24DOCSidebarViewControllerP33_DC28860F7978B10675F5AB8A848AC14217LocationSelection);
}

void *sub_1000A6510(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10005A3A0(a1, a2, v2);
}

void sub_1000A6518()
{
  void *v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  objc_super v8;
  _QWORD aBlock[5];
  uint64_t v10;

  v1 = swift_allocObject(&unk_1005F0430, 24, 7);
  swift_unknownObjectWeakInit(v1 + 16);
  v2 = objc_allocWithZone((Class)UICollectionViewCompositionalLayout);
  aBlock[4] = sub_1000A6510;
  v10 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100033024;
  aBlock[3] = &unk_1005F0560;
  v3 = _Block_copy(aBlock);
  v4 = objc_msgSend(v2, "initWithSectionProvider:", v3, swift_retain().n128_f64[0]);
  _Block_release(v3);
  v5 = v10;
  swift_release(v1);
  swift_release(v5);
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for DOCSidebarViewController(0);
  v6 = objc_msgSendSuper2(&v8, "collectionView");
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v6, "setCollectionViewLayout:", v4);

  }
  else
  {
    __break(1u);
  }
}

ValueMetadata *_s14OutlineSectionVMa()
{
  return &_s14OutlineSectionVN;
}

unint64_t sub_1000A6650()
{
  unint64_t result;

  result = qword_100657878;
  if (!qword_100657878)
  {
    result = swift_getWitnessTable(&unk_1004EA768, &_s14OutlineSectionVN);
    atomic_store(result, (unint64_t *)&qword_100657878);
  }
  return result;
}

void sub_1000A6694()
{
  uint64_t v0;

  sub_1000A669C(v0);
}

void sub_1000A669C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  char *v3;
  int v4;
  id v5;
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (char *)Strong;
    v4 = *(unsigned __int8 *)(Strong + OBJC_IVAR____TtC5Files24DOCSidebarViewController_appLaunchOptimizationsActive);
    *(_BYTE *)(Strong + OBJC_IVAR____TtC5Files24DOCSidebarViewController_appLaunchOptimizationsActive) = 0;
    if (v4 == 1)
    {
      if ((*(_BYTE *)(Strong + OBJC_IVAR____TtC5Files24DOCSidebarViewController_isObservingSectionDataProviders) & 1) == 0)
      {
        *(_BYTE *)(Strong + OBJC_IVAR____TtC5Files24DOCSidebarViewController_isObservingSectionDataProviders) = 1;
        sub_1000A59CC();
        sub_1000A5D80();
        sub_1000A62A0();
        if ((objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC5Files24DOCSidebarViewController_configuration], "isPickerUI") & 1) != 0)sub_1002353C0();
      }
      sub_100013B5C(0, 1);
    }

  }
  v5 = objc_msgSend((id)objc_opt_self(DOCIconService), "shared");
  objc_msgSend(v5, "loadIconsFromDiskIfNeeded");

}

Swift::Void __swiftcall DOCSidebarViewController.viewDidLoad()()
{
  char *v0;
  uint64_t ObjectType;
  objc_class *v2;
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  double v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  objc_super v13;
  objc_super v14;
  objc_super v15;
  objc_super v16;

  ObjectType = swift_getObjectType(v0);
  v2 = (objc_class *)type metadata accessor for DOCSidebarViewController(0);
  v16.receiver = v0;
  v16.super_class = v2;
  objc_msgSendSuper2(&v16, "viewDidLoad");
  objc_msgSend(v0, "setClearsSelectionOnViewWillAppear:", 0);
  sub_1000A5F38();
  v15.receiver = v0;
  v15.super_class = v2;
  v3 = objc_msgSendSuper2(&v15, "collectionView");
  if (!v3)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  v4 = v3;
  v5 = type metadata accessor for DOCSidebarCollectionView();
  objc_msgSend(v0, "setContentScrollView:forEdge:", swift_dynamicCastClassUnconditional(v4, v5, 0, 0, 0), 15);

  if ((v0[OBJC_IVAR____TtC5Files24DOCSidebarViewController_isObservingSectionDataProviders] & 1) == 0)
  {
    v0[OBJC_IVAR____TtC5Files24DOCSidebarViewController_isObservingSectionDataProviders] = 1;
    sub_1000A59CC();
    sub_1000A5D80();
    sub_1000A62A0();
    if (objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC5Files24DOCSidebarViewController_configuration], "isPickerUI"))sub_1002353C0();
  }
  v6 = (_QWORD *)DOCTraitChangeObservingOptions.triggerInitialObservance.unsafeMutableAddressor();
  v7 = UIViewController.registerForTabSwitcherTraitChanges<A>(options:_:)(*v6, 0, sub_10023B8D8, 0, ObjectType);
  *(_QWORD *)&v8 = swift_unknownObjectRelease(v7).n128_u64[0];
  v14.receiver = v0;
  v14.super_class = v2;
  v9 = objc_msgSendSuper2(&v14, "collectionView", v8);
  if (!v9)
    goto LABEL_10;
  v10 = v9;
  *(_BYTE *)(swift_dynamicCastClassUnconditional(v9, v5, 0, 0, 0)
           + OBJC_IVAR____TtC5Files24DOCSidebarCollectionView_requireCanBecomeFocusedTrue) = 1;

  v13.receiver = v0;
  v13.super_class = v2;
  v11 = objc_msgSendSuper2(&v13, "collectionView");
  if (v11)
  {
    v12 = v11;
    objc_msgSend(v11, "setDropDelegate:", v0);
    objc_msgSend(v12, "setSpringLoaded:", 1);

  }
  sub_1000A6518();
  sub_10001FCAC();
  sub_100013B5C(0, 1);
}

ValueMetadata *_s11OutlineItemVMa()
{
  return &_s11OutlineItemVN;
}

unint64_t sub_1000A69FC()
{
  unint64_t result;

  result = qword_100657880;
  if (!qword_100657880)
  {
    result = swift_getWitnessTable(&unk_1004EA7F8, &_s11OutlineItemVN);
    atomic_store(result, (unint64_t *)&qword_100657880);
  }
  return result;
}

unint64_t sub_1000A6A40()
{
  unint64_t result;

  result = qword_100657838;
  if (!qword_100657838)
  {
    result = swift_getWitnessTable(&unk_1004EA848, &_s11OutlineItemVN);
    atomic_store(result, (unint64_t *)&qword_100657838);
  }
  return result;
}

uint64_t sub_1000A6A84(uint64_t a1)
{
  void *v2;

  v2 = &unk_1004DDE08;
  return swift_initClassMetadata2(a1, 256, 1, &v2, a1 + 392);
}

uint64_t type metadata accessor for DOCSidebarViewController.DOCSidebarItemChangePacer(uint64_t a1)
{
  return sub_10006BDA4(a1, qword_1006488C0, (uint64_t)&nominal type descriptor for DOCSidebarViewController.DOCSidebarItemChangePacer);
}

id _s5Files24DOCSidebarViewControllerC014_newCollectionC09withFrame010collectionC6LayoutSo012UICollectionC0CSgSo6CGRectV_So0kcJ0CSgtF_0(id result, double a2, double a3, double a4, double a5)
{
  id v5;
  void *v6;
  id v7;
  uint64_t ObjCClassMetadata;
  NSString v9;
  double v10;
  uint64_t v11;
  uint64_t v12;

  if (result)
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DOCSidebarCollectionView()), "initWithFrame:collectionViewLayout:", result, a2, a3, a4, a5);
    objc_msgSend(v5, "setAlwaysBounceVertical:", 1);
    v6 = (void *)objc_opt_self(DOCAXIdentifier);
    v7 = v5;
    ObjCClassMetadata = swift_getObjCClassMetadata(objc_msgSend(v6, "sidebar"));
    v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(ObjCClassMetadata), "containerView");
    if (!v9)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v12 = v11;
      v9 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v10 = swift_bridgeObjectRelease(v12).n128_u64[0];
    }
    objc_msgSend(v7, "setAccessibilityIdentifier:", v9, v10);

    objc_msgSend(v7, "setAllowsFocus:", 1);
    objc_msgSend(v7, "_setShouldPersistSelectionOnReloadDataWhenPossible:", 1);
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A6CC4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  __n128 v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC5Files24DOCSidebarViewController____lazy_storage___notificationsController;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC5Files24DOCSidebarViewController____lazy_storage___notificationsController])
  {
    v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files24DOCSidebarViewController____lazy_storage___notificationsController];
  }
  else
  {
    v3 = v0;
    v4 = sub_10006922C(&qword_100648C70);
    swift_allocObject(v4, 32, 7);
    v5 = v0;
    v2 = NSNotification.SubscriptionsController.init(observee:)(v6);
    v7 = *(_QWORD *)&v3[v1];
    *(_QWORD *)&v3[v1] = v2;
    swift_retain();
    swift_release(v7);
  }
  swift_retain();
  return v2;
}

uint64_t type metadata accessor for DOCSidebarCollectionView()
{
  return objc_opt_self(_TtC5Files24DOCSidebarCollectionView);
}

uint64_t type metadata accessor for DOCSharedDocumentsSource()
{
  return objc_opt_self(_TtC5Files24DOCSharedDocumentsSource);
}

id sub_1000A6ECC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t countAndFlagsBits;
  id result;
  void *v5;
  Swift::String v6;
  Swift::String_optional v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC5Files24DOCSharedDocumentsSource____lazy_storage____displayName);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files24DOCSharedDocumentsSource____lazy_storage____displayName + 8);
  if (v2)
  {
    countAndFlagsBits = *v1;
LABEL_5:
    swift_bridgeObjectRetain(v2);
    return (id)countAndFlagsBits;
  }
  result = (id)_DocumentManagerBundle();
  if (result)
  {
    v5 = result;
    v11._countAndFlagsBits = 0xD00000000000002FLL;
    v11._object = (void *)0x8000000100522340;
    v6._object = (void *)0x8000000100522320;
    v6._countAndFlagsBits = 0xD000000000000010;
    v7.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v7.value._object = (void *)0xEB00000000656C62;
    v8._countAndFlagsBits = 0x646572616853;
    v8._object = (void *)0xE600000000000000;
    v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, (NSBundle)v5, v8, v11);
    countAndFlagsBits = v9._countAndFlagsBits;

    v10 = v1[1];
    *(Swift::String *)v1 = v9;
    swift_bridgeObjectRetain(v9._object);
    swift_bridgeObjectRelease(v10);
    v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DOCProgressIndicatorView()
{
  return objc_opt_self(_TtC5Files24DOCProgressIndicatorView);
}

void sub_1000A6FF8(char a1, double a2)
{
  char *v2;
  char *v5;
  objc_class *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  NSString v19;
  _BYTE v20[24];
  objc_super v21;

  *(_QWORD *)&v2[OBJC_IVAR____TtC5Files24DOCProgressIndicatorView_fractionCompleted] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Files24DOCProgressIndicatorView_preferredIconColor] = 0;
  v5 = &v2[OBJC_IVAR____TtC5Files24DOCProgressIndicatorView_contentView];
  v6 = (objc_class *)type metadata accessor for DOCProgressIndicatorView();
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v21.receiver = v2;
  v21.super_class = v6;
  v7 = (char *)objc_msgSendSuper2(&v21, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v8 = v7;
  if ((a1 & 1) != 0)
  {
    v14 = sub_1000342E4(v7, a2);
    v16 = v15;
    v12 = &v8[OBJC_IVAR____TtC5Files24DOCProgressIndicatorView_contentView];
    swift_beginAccess(&v8[OBJC_IVAR____TtC5Files24DOCProgressIndicatorView_contentView], v20, 1, 0);
    v17 = *(id *)v12;
    *(_QWORD *)v12 = v14;
    *((_QWORD *)v12 + 1) = v16;

    if (*(_QWORD *)v12)
    {
LABEL_5:
      v18 = *(id *)v12;
      v19 = String._bridgeToObjectiveC()();
      objc_msgSend(v18, "setAccessibilityIdentifier:", v19);

      return;
    }
  }
  else
  {
    v9 = sub_1002AE96C(v7, a2);
    v11 = v10;
    v12 = &v8[OBJC_IVAR____TtC5Files24DOCProgressIndicatorView_contentView];
    swift_beginAccess(&v8[OBJC_IVAR____TtC5Files24DOCProgressIndicatorView_contentView], v20, 1, 0);
    v13 = *(id *)v12;
    *(_QWORD *)v12 = v9;
    *((_QWORD *)v12 + 1) = v11;

    if (*(_QWORD *)v12)
      goto LABEL_5;
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1000A7184()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for DOCPlaceholderDataSource()
{
  return objc_opt_self(_TtC5Files24DOCPlaceholderDataSource);
}

uint64_t sub_1000A71C8()
{
  return 1;
}

void *sub_1000A71D8()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

uint64_t type metadata accessor for DOCNamedLocationResolver()
{
  return objc_opt_self(_TtC5Files24DOCNamedLocationResolver);
}

uint64_t type metadata accessor for DOCMutableSidebarSection()
{
  return objc_opt_self(_TtC5Files24DOCMutableSidebarSection);
}

void sub_1000A72B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = "(";
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1000B3490(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = &unk_1004E4688;
    v4[6] = &unk_1004E4688;
    swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for DOCFileOperationsManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100650330;
  if (!qword_100650330)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DOCFileOperationsManager);
  return result;
}

id sub_1000A7394(uint64_t a1, char *a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  objc_super v17;
  _QWORD v18[5];

  v18[3] = a3(0);
  v18[4] = a4;
  v18[0] = a1;
  v7 = OBJC_IVAR____TtC5Files24DOCFileOperationsManager_trackedItemsByID;
  v8 = a2;
  *(_QWORD *)&a2[v7] = sub_10008AF9C((uint64_t)_swiftEmptyArrayStorage);
  v9 = OBJC_IVAR____TtC5Files24DOCFileOperationsManager_observers;
  v10 = sub_10006922C(&qword_100641298);
  v11 = swift_allocObject(v10, 24, 7);
  *(_QWORD *)(v11 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)&v8[v9] = v11;
  v12 = &v8[OBJC_IVAR____TtC5Files24DOCFileOperationsManager_testablesProviderObservance];
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v8[OBJC_IVAR____TtC5Files24DOCFileOperationsManager_needsUpdate] = 1;
  v8[OBJC_IVAR____TtC5Files24DOCFileOperationsManager_hasUpdateInProgress] = 0;
  sub_100092328((uint64_t)v18, (uint64_t)&v8[OBJC_IVAR____TtC5Files24DOCFileOperationsManager_impl]);
  if (qword_100640DE0 != -1)
    swift_once(&qword_100640DE0, sub_10008C490);
  v14 = qword_1006726D8;
  *(_QWORD *)&v8[OBJC_IVAR____TtC5Files24DOCFileOperationsManager_testablesProvider] = qword_1006726D8;
  swift_retain(v14);

  v17.receiver = v8;
  v17.super_class = (Class)type metadata accessor for DOCFileOperationsManager(0);
  v15 = objc_msgSendSuper2(&v17, "init");
  sub_100068588(v18);
  return v15;
}

uint64_t sub_1000A74F8()
{
  uint64_t v0;

  return sub_1000A7504(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD **)(v0 + 40));
}

uint64_t sub_1000A7504(char *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;

  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease(0xE000000000000000);
  v23 = 0xD000000000000022;
  v24 = 0x800000010052BBF0;
  v8._countAndFlagsBits = a2;
  v8._object = a3;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  if (a4)
  {
    v10 = type metadata accessor for DOCFileOperation(0);
    v11 = Array.description.getter(a4, v10);
    v13 = v12;
    v14 = a4;
  }
  else
  {
    v13 = 0xE500000000000000;
    v11 = 0x2A6C696E2ALL;
    v14 = _swiftEmptyArrayStorage;
  }
  v15 = v13;
  String.append(_:)(*(Swift::String *)&v11);
  v16 = swift_bridgeObjectRelease(v13);
  v17 = static os_log_type_t.default.getter(v16);
  sub_100019230(v17, v23, v24);
  swift_bridgeObjectRelease(v24);
  v18 = *(_QWORD *)&a1[OBJC_IVAR____TtC5Files24DOCFileOperationsManager_testablesProvider];
  swift_beginAccess(v18 + 16, &v23, 0, 0);
  v19 = *(_QWORD *)(v18 + 16);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v14);
  sub_100088808(v19);
  v20 = a1;
  swift_bridgeObjectRetain(v14);
  sub_1000A7A2C((uint64_t)v20, v20, (uint64_t)v14);
  swift_bridgeObjectRelease(v14);

  v21 = swift_bridgeObjectRelease_n(v14, 2);
  v20[OBJC_IVAR____TtC5Files24DOCFileOperationsManager_hasUpdateInProgress] = 0;
  return sub_1000A786C(v21);
}

void sub_1000A76A8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_1000A76B4(a1, a2, v2[2], v2[3], v2[4]);
}

void sub_1000A76B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  os_log_type_t v18;
  Swift::String v19;
  Swift::String v20;
  unint64_t v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  id v25;
  _QWORD v26[3];
  char v27[8];
  void **aBlock;
  unint64_t v29;
  uint64_t (*v30)(uint64_t);
  void *v31;
  uint64_t (*v32)();
  _QWORD *v33;
  char v34[24];

  v9 = a3 + 16;
  swift_beginAccess(a3 + 16, v34, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v9, v10);
  if (Strong)
  {
    v12 = (void *)Strong;
    if (a2)
    {
      swift_getErrorValue(a2, v27, v26);
      v13 = v26[1];
      v14 = v26[2];
      swift_errorRetain(a2);
      v15 = Error.localizedDescription.getter(v13, v14);
      v17 = v16;
      v18 = static os_log_type_t.fault.getter();
      aBlock = 0;
      v29 = 0xE000000000000000;
      _StringGuts.grow(_:)(60);
      v19._object = (void *)0x800000010052BBB0;
      v19._countAndFlagsBits = 0xD00000000000003ALL;
      String.append(_:)(v19);
      v20._countAndFlagsBits = v15;
      v20._object = v17;
      String.append(_:)(v20);
      swift_bridgeObjectRelease(v17);
      v21 = v29;
      sub_100019230(v18, (uint64_t)aBlock, v29);
      swift_bridgeObjectRelease(v21);
      swift_errorRelease(a2);
    }
    else
    {
      v22 = (_QWORD *)swift_allocObject(&unk_1005E2BB0, 48, 7);
      v22[2] = v12;
      v22[3] = a4;
      v22[4] = a5;
      v22[5] = a1;
      v32 = sub_1000A74F8;
      v33 = v22;
      aBlock = _NSConcreteStackBlock;
      v29 = 1107296256;
      v30 = sub_10004A82C;
      v31 = &unk_1005E2BC8;
      v23 = _Block_copy(&aBlock);
      v24 = v33;
      swift_bridgeObjectRetain(a1);
      v25 = v12;
      swift_bridgeObjectRetain(a5);
      swift_release(v24);
      DOCRunInMainThread(v23);
      _Block_release(v23);
    }

  }
}

void sub_1000A786C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void (*v17)(void (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC5Files24DOCFileOperationsManager_needsUpdate) == 1)
  {
    v1 = v0;
    v2 = OBJC_IVAR____TtC5Files24DOCFileOperationsManager_hasUpdateInProgress;
    if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC5Files24DOCFileOperationsManager_hasUpdateInProgress) & 1) == 0)
    {
      *(_BYTE *)(v0 + OBJC_IVAR____TtC5Files24DOCFileOperationsManager_needsUpdate) = 0;
      *(_BYTE *)(v0 + v2) = 1;
      v3 = v0 + OBJC_IVAR____TtC5Files24DOCFileOperationsManager_impl;
      swift_beginAccess(v0 + OBJC_IVAR____TtC5Files24DOCFileOperationsManager_impl, &v19, 0, 0);
      sub_100092328(v3, (uint64_t)&v20);
      v4 = sub_10006922C(&qword_100650340);
      v5 = String.init<A>(describing:)(&v20, v4);
      v7 = v6;
      v20 = 0;
      v21 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease(v21);
      v20 = 0xD000000000000024;
      v21 = 0x800000010052BB80;
      v8._countAndFlagsBits = v5;
      v8._object = v7;
      String.append(_:)(v8);
      v9 = v20;
      v10 = v21;
      v12 = static os_log_type_t.default.getter(v11);
      sub_100019230(v12, v9, v10);
      swift_bridgeObjectRelease(v10);
      sub_100092328(v3, (uint64_t)&v20);
      v13 = v22;
      v14 = v23;
      sub_10007E7A0(&v20, v22);
      v15 = swift_allocObject(&unk_1005E2B60, 24, 7);
      swift_unknownObjectWeakInit(v15 + 16, v1);
      v16 = (_QWORD *)swift_allocObject(&unk_1005E2B88, 40, 7);
      v16[2] = v15;
      v16[3] = v5;
      v16[4] = v7;
      v17 = *(void (**)(void (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t, __n128))(v14 + 8);
      v18 = swift_retain(v15);
      v17(sub_1000A76A8, v16, v13, v14, v18);
      swift_release(v15);
      swift_release(v16);
      sub_100068588(&v20);
    }
  }
}

uint64_t sub_1000A7A2C(uint64_t a1, char *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t j;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  _QWORD v43[4];
  _BYTE v44[24];
  _BYTE v45[24];

  v5 = (_QWORD *)(a1 + OBJC_IVAR____TtC5Files24DOCFileOperationsManager_trackedItemsByID);
  swift_beginAccess(a1 + OBJC_IVAR____TtC5Files24DOCFileOperationsManager_trackedItemsByID, v45, 0, 0);
  v6 = swift_bridgeObjectRetain(*v5);
  v7 = sub_100087860(v6);
  v8 = (uint64_t *)&a2[OBJC_IVAR____TtC5Files24DOCFileOperationsManager_trackedItemsByID];
  swift_beginAccess(&a2[OBJC_IVAR____TtC5Files24DOCFileOperationsManager_trackedItemsByID], v44, 1, 0);
  v9 = *v8;
  swift_bridgeObjectRetain(*v8);
  v10 = sub_10008AF9C((uint64_t)_swiftEmptyArrayStorage);
  v43[0] = v10;
  v11 = *(_QWORD *)(a3 + 16);
  if (v11)
  {
    v12 = *(_QWORD *)(type metadata accessor for DOCFileOperation(0) - 8);
    v13 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v14 = *(_QWORD *)(v12 + 72);
    swift_bridgeObjectRetain(a3);
    do
    {
      sub_1003744B4(v13, v9, a2, v43);
      v13 += v14;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(a3);
    v15 = v43[0];
  }
  else
  {
    v15 = v10;
    swift_bridgeObjectRelease(v9);
  }
  v16 = *v8;
  *v8 = v15;
  swift_bridgeObjectRelease(v16);
  v17 = swift_bridgeObjectRetain(*v5);
  v18 = sub_100087860(v17);
  v19 = sub_100087ED8(v18, v7);
  swift_bridgeObjectRelease(v18);
  result = swift_bridgeObjectRelease(v7);
  if ((v19 & 1) == 0)
  {
    v21 = *(_QWORD *)(a1 + OBJC_IVAR____TtC5Files24DOCFileOperationsManager_observers);
    v22 = (uint64_t *)(v21 + 16);
    swift_beginAccess(v21 + 16, v43, 1, 0);
    v23 = *(_QWORD *)(v21 + 16);
    if ((unint64_t)v23 >> 62)
    {
      if (v23 < 0)
        v32 = *(_QWORD *)(v21 + 16);
      else
        v32 = v23 & 0xFFFFFFFFFFFFFF8;
      swift_retain(v21);
      swift_bridgeObjectRetain(v23);
      result = _CocoaArrayWrapper.endIndex.getter(v32);
      v24 = result;
      if (!result)
        goto LABEL_23;
    }
    else
    {
      v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain(v21);
      result = swift_bridgeObjectRetain(v23);
      if (!v24)
        goto LABEL_23;
    }
    if (v24 < 1)
    {
      __break(1u);
      goto LABEL_41;
    }
    for (i = 0; i != v24; ++i)
    {
      if ((v23 & 0xC000000000000001) != 0)
      {
        v27 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v23);
      }
      else
      {
        v27 = *(_QWORD *)(v23 + 8 * i + 32);
        swift_retain(v27);
      }
      Strong = swift_unknownObjectWeakLoadStrong(v27 + 16, v26);
      if (Strong)
      {
        v29 = swift_unknownObjectRelease(Strong);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v29);
        v30 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v30);
        v31 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v27);
        specialized ContiguousArray._endMutation()(v31);
      }
      else
      {
        swift_release(v27);
      }
    }
LABEL_23:
    swift_bridgeObjectRelease(v23);
    v33 = *v22;
    *v22 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v33);
    v34 = *v22;
    if ((unint64_t)*v22 >> 62)
    {
      if (v34 < 0)
        v41 = *v22;
      else
        v41 = v34 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v34, 2);
      result = _CocoaArrayWrapper.endIndex.getter(v41);
      v35 = result;
      if (result)
      {
LABEL_25:
        if (v35 >= 1)
        {
          for (j = 0; j != v35; ++j)
          {
            if ((v34 & 0xC000000000000001) != 0)
            {
              v38 = specialized _ArrayBuffer._getElementSlowPath(_:)(j, v34);
            }
            else
            {
              v38 = *(_QWORD *)(v34 + 8 * j + 32);
              swift_retain(v38);
            }
            v39 = (void *)swift_unknownObjectWeakLoadStrong(v38 + 16, v37);
            if (v39)
            {
              v40 = v39;
              objc_msgSend(v39, "didUpdateInProgressOperationsIn:", a1);
              swift_release(v38);
              swift_unknownObjectRelease(v40);
            }
            else
            {
              swift_release(v38);
            }
          }
          goto LABEL_38;
        }
LABEL_41:
        __break(1u);
        return result;
      }
    }
    else
    {
      v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain_n(v34, 2);
      if (v35)
        goto LABEL_25;
    }
LABEL_38:
    swift_bridgeObjectRelease_n(v34, 2);
    return swift_release(v21);
  }
  return result;
}

uint64_t DOCFileOperationsManager.unorderedFileOperations.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t *v4;
  uint64_t v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  char *v29;
  uint64_t v30;
  _BYTE v31[40];
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  _OWORD v35[2];
  __int128 v36;
  _BYTE v37[40];
  uint64_t v38;
  _QWORD *v39;
  char v40[16];

  v1 = type metadata accessor for DOCFileOperation(0);
  v30 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (uint64_t *)(v0 + OBJC_IVAR____TtC5Files24DOCFileOperationsManager_trackedItemsByID);
  swift_beginAccess(v4, v40, 0, 0);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (!v6)
    return (uint64_t)v7;
  v39 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v5);
  sub_100154E30(0, v6, 0);
  result = sub_1003754FC(v5);
  v9 = result;
  v11 = v10;
  v12 = 0;
  v13 = v5 + 64;
  v14 = *(_BYTE *)(v5 + 32);
  v27 = v5 + 80;
  v29 = v3;
  v28 = v6;
  while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << v14)
  {
    v17 = (unint64_t)v9 >> 6;
    if ((*(_QWORD *)(v13 + 8 * ((unint64_t)v9 >> 6)) & (1 << v9)) == 0)
      goto LABEL_26;
    if (*(_DWORD *)(v5 + 36) != v11)
      goto LABEL_27;
    sub_10006777C(*(_QWORD *)(v5 + 48) + 40 * v9, (uint64_t)v37);
    v38 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v9);
    v18 = v38;
    sub_10006777C((uint64_t)v37, (uint64_t)v35);
    *((_QWORD *)&v36 + 1) = v18;
    v33[0] = v35[0];
    v33[1] = v35[1];
    v34 = v36;
    swift_retain_n(v18, 2);
    sub_10000CB4C((uint64_t)v37, &qword_1006502D8);
    sub_10006777C((uint64_t)v33, (uint64_t)v31);
    v32 = *((_QWORD *)&v34 + 1);
    sub_10007C6DC(*((_QWORD *)&v34 + 1) + *(_QWORD *)(**((_QWORD **)&v34 + 1) + 312), (uint64_t)v3, type metadata accessor for DOCFileOperation);
    sub_100067748((uint64_t)v31);
    sub_10000CB4C((uint64_t)v33, &qword_1006502D8);
    v7 = v39;
    if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
    {
      sub_100154E30(0, v7[2] + 1, 1);
      v7 = v39;
    }
    v20 = v7[2];
    v19 = v7[3];
    if (v20 >= v19 >> 1)
    {
      sub_100154E30(v19 > 1, v20 + 1, 1);
      v7 = v39;
    }
    v7[2] = v20 + 1;
    v21 = (uint64_t)v7
        + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))
        + *(_QWORD *)(v30 + 72) * v20;
    v3 = v29;
    result = sub_1000E828C((uint64_t)v29, v21);
    v14 = *(_BYTE *)(v5 + 32);
    v15 = 1 << v14;
    if (v9 >= 1 << v14)
      goto LABEL_28;
    v22 = *(_QWORD *)(v13 + 8 * v17);
    if ((v22 & (1 << v9)) == 0)
      goto LABEL_29;
    if (*(_DWORD *)(v5 + 36) != v11)
      goto LABEL_30;
    v23 = v22 & (-2 << (v9 & 0x3F));
    if (v23)
    {
      v15 = __clz(__rbit64(v23)) | v9 & 0xFFFFFFFFFFFFFFC0;
      v16 = v28;
    }
    else
    {
      v24 = v17 + 1;
      v25 = (v15 + 63) >> 6;
      v16 = v28;
      if (v17 + 1 < v25)
      {
        v26 = *(_QWORD *)(v13 + 8 * v24);
        if (v26)
        {
LABEL_22:
          v15 = __clz(__rbit64(v26)) + (v24 << 6);
        }
        else
        {
          while (v25 - 2 != v17)
          {
            v26 = *(_QWORD *)(v27 + 8 * v17++);
            if (v26)
            {
              v24 = v17 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    ++v12;
    v9 = v15;
    if (v12 == v16)
    {
      swift_bridgeObjectRelease(v5);
      return (uint64_t)v7;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DOCContentDimmingOverlay()
{
  return objc_opt_self(_TtC5Files24DOCContentDimmingOverlay);
}

void sub_1000A81D8()
{
  char *v0;
  char *v1;
  int v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t KeyPath;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  void *v18;

  v1 = v0;
  v2 = v0[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_autohideWhenPossibleDropTarget];
  v3 = OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dropInteraction;
  v4 = *(void **)&v1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dropInteraction];
  if (v2 == 1)
  {
    if (!v4)
    {
      v5 = objc_msgSend(objc_allocWithZone((Class)UIDropInteraction), "initWithDelegate:", v1);
      v6 = *(void **)&v1[v3];
      *(_QWORD *)&v1[v3] = v5;
      v7 = v5;

      objc_msgSend(v1, "addInteraction:", v7);
      if (qword_100640E30 != -1)
        swift_once(&qword_100640E30, sub_1000B1788);
      v8 = (void *)qword_100672738;
      v18 = (void *)qword_100672738;
      KeyPath = swift_getKeyPath(&unk_1004D9B10);
      v10 = swift_allocObject(&unk_1005C28C0, 24, 7);
      swift_unknownObjectWeakInit(v10 + 16);
      v11 = v8;
      v12 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 0, sub_1000DC4A4, v10, &protocol witness table for NSObject);
      swift_release(KeyPath);
      swift_release(v10);

      v13 = *(void **)&v1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dragMonitorKVO];
      *(_QWORD *)&v1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dragMonitorKVO] = v12;

    }
  }
  else if (v4)
  {
    *(_QWORD *)&v1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dropInteraction] = 0;
    objc_msgSend(v1, "removeInteraction:", v4);
    v14 = OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dragMonitorKVO;
    v15 = *(void **)&v1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dragMonitorKVO];
    if (v15)
    {
      v16 = v15;
      dispatch thunk of NSKeyValueObservation.invalidate()();

      v17 = *(id *)&v1[v14];
    }
    else
    {
      v17 = 0;
    }
    *(_QWORD *)&v1[v14] = 0;

  }
}

uint64_t sub_1000A83AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_active) == 1)
  {
    if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_hasDropTargetRequiringAutohide) & 1) != 0)
      goto LABEL_6;
    if (qword_100640E30 != -1)
      swift_once(&qword_100640E30, sub_1000B1788);
    if (objc_msgSend((id)qword_100672738, "isItemCollectionDragActive"))
LABEL_6:
      v1 = 2;
    else
      v1 = 1;
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_state);
    *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_state) = v1;
    return sub_1000DBDF0(v3);
  }
  else
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_state);
    *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_state) = 0;
    return sub_1000DBDF0(v2);
  }
}

unint64_t destroy for DOCBrowserContainerState(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_errorRelease();
  return result;
}

uint64_t sub_1000A849C(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t getEnumTagSinglePayload for DOCBrowserContainerState(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFA && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483643);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 4;
  if (v4 >= 6)
    return v5;
  else
    return 0;
}

unint64_t sub_1000A850C(unint64_t result)
{
  if (result >= 5)
    return swift_errorRetain(result);
  return result;
}

unint64_t sub_1000A851C(unint64_t result)
{
  if (result >= 5)
    return swift_errorRelease();
  return result;
}

unint64_t sub_1000A852C(unint64_t result)
{
  if (result != 5)
    return sub_1000A850C(result);
  return result;
}

unint64_t sub_1000A853C(unint64_t result)
{
  if (result != 5)
    return sub_1000A851C(result);
  return result;
}

ValueMetadata *type metadata accessor for DOCBrowserContainerState()
{
  return &type metadata for DOCBrowserContainerState;
}

unint64_t sub_1000A855C(unint64_t a1)
{
  unint64_t result;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;

  result = 0x676E6964616F6CLL;
  switch(a1)
  {
    case 0uLL:
      return result;
    case 1uLL:
      result = 0x746E65746E6F63;
      break;
    case 2uLL:
      result = 0xD000000000000010;
      break;
    case 3uLL:
      result = 0x7974706D65;
      break;
    case 4uLL:
      result = 0x697265766F636572;
      break;
    default:
      swift_errorRetain(a1);
      v3 = (void *)_convertErrorToNSError(_:)(a1);
      v4 = objc_msgSend(v3, "domain");
      v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      v7 = v6;

      objc_msgSend(v3, "code");
      v8 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v10 = v9;
      swift_bridgeObjectRetain(v7);
      v11._countAndFlagsBits = v8;
      v11._object = v10;
      String.append(_:)(v11);

      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v10);
      sub_1000A851C(a1);
      result = v5;
      break;
  }
  return result;
}

void sub_1000A86D8()
{
  qword_10064CD50 = 0;
}

uint64_t type metadata accessor for DOCThumbnailLoadingPool()
{
  return objc_opt_self(_TtC5Files23DOCThumbnailLoadingPool);
}

uint64_t sub_1000A8704()
{
  uint64_t v0;

  return sub_1000A8710(*(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t sub_1000A8710(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE v15[24];

  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = (_BYTE *)(a1 + 16);
  result = swift_beginAccess(a1 + 16, v15, 0, 0);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    v10 = swift_beginAccess(v8, v14, 1, 0);
    *v8 = 1;
    v11 = static os_signpost_type_t.event.getter(v10);
    v12 = *(id *)updatePointsOfInterestHandler.unsafeMutableAddressor();
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:_:_:)(v11, &_mh_execute_header, v12, "Files-PPT", 9, 2, v7, "notify report did Load with ThumbnailPool- in group notify", 58, 2, _swiftEmptyArrayStorage);

    v13 = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    return a2(v13);
  }
  return result;
}

void sub_1000A8854()
{
  uint64_t v0;

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
}

void sub_1000A885C()
{
  uint64_t v0;

  sub_100049DE4(*(_QWORD *)(v0 + 16), *(NSObject **)(v0 + 24), *(_BYTE **)(v0 + 32));
}

void sub_1000A8868()
{
  uint64_t v0;

  sub_1000533EC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), v0 + 40, *(void **)(v0 + 224), *(_QWORD **)(v0 + 232));
}

uint64_t *sub_1000A8880()
{
  uint64_t v0;

  return sub_1000A888C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD ***)(v0 + 32));
}

uint64_t *sub_1000A888C(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  void *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  id v30;
  _QWORD *v31;
  id v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  int64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[25];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[25];
  _BYTE v66[40];

  swift_beginAccess(a1 + 16, v66, 0, 0);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 + 64;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v39 = (unint64_t)(v7 + 63) >> 6;
  result = (uint64_t *)swift_bridgeObjectRetain(v5);
  v11 = 0;
  v37 = a3;
  while (v9)
  {
    v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v13 = v12 | (v11 << 6);
LABEL_22:
    v17 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v13);
    v18 = (__int128 *)(*(_QWORD *)(v5 + 56) + 224 * v13);
    v19 = v18[1];
    v53 = *v18;
    v54 = v19;
    v20 = v18[5];
    v22 = v18[2];
    v21 = v18[3];
    v57 = v18[4];
    v58 = v20;
    v55 = v22;
    v56 = v21;
    v23 = v18[9];
    v25 = v18[6];
    v24 = v18[7];
    v61 = v18[8];
    v62 = v23;
    v59 = v25;
    v60 = v24;
    v27 = v18[11];
    v26 = v18[12];
    v28 = v18[10];
    *(_OWORD *)&v65[9] = *(__int128 *)((char *)v18 + 201);
    v64 = v27;
    *(_OWORD *)v65 = v26;
    v63 = v28;
    v29 = v53;
    sub_1002EB2E0(&v53);
    sub_1002EB2E0(&v53);
    v30 = v17;
    swift_unknownObjectRelease(v29);
    sub_100362C30((uint64_t)&v54);
    sub_10010CA6C((uint64_t *)&v53 + 1);
    if (v65[24] != 1 || (_QWORD)v54 == a2)
    {
      sub_100362BEC((uint64_t)&v54);

    }
    else
    {
      v31 = *a3;
      sub_1002EB2E0(&v53);
      v32 = v30;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v31);
      *a3 = v31;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v31 = sub_100154690(0, v31[2] + 1, 1, v31);
        *a3 = v31;
      }
      v35 = v31[2];
      v34 = v31[3];
      if (v35 >= v34 >> 1)
        v31 = sub_100154690((_QWORD *)(v34 > 1), v35 + 1, 1, v31);
      v44 = v57;
      v45 = v58;
      v42 = v55;
      v43 = v56;
      v48 = v61;
      v49 = v62;
      v46 = v59;
      v47 = v60;
      *(_OWORD *)&v52[9] = *(_OWORD *)&v65[9];
      v51 = v64;
      *(_OWORD *)v52 = *(_OWORD *)v65;
      v50 = v63;
      v40 = v53;
      v41 = v54;
      v31[2] = v35 + 1;
      v36 = &v31[29 * v35];
      v36[4] = v32;
      *(_OWORD *)(v36 + 7) = v41;
      *(_OWORD *)(v36 + 5) = v40;
      *(_OWORD *)(v36 + 15) = v45;
      *(_OWORD *)(v36 + 13) = v44;
      *(_OWORD *)(v36 + 11) = v43;
      *(_OWORD *)(v36 + 9) = v42;
      *(_OWORD *)(v36 + 23) = v49;
      *(_OWORD *)(v36 + 21) = v48;
      *(_OWORD *)(v36 + 19) = v47;
      *(_OWORD *)(v36 + 17) = v46;
      *(_OWORD *)((char *)v36 + 241) = *(_OWORD *)&v52[9];
      *(_OWORD *)(v36 + 29) = *(_OWORD *)v52;
      *(_OWORD *)(v36 + 27) = v51;
      *(_OWORD *)(v36 + 25) = v50;
      a3 = (_QWORD **)v37;
      *v37 = v31;

      sub_100362BEC((uint64_t)&v54);
    }
    result = sub_100362CFC((uint64_t *)&v53);
  }
  v14 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v14 >= v39)
    return (uint64_t *)swift_release(v5);
  v15 = *(_QWORD *)(v6 + 8 * v14);
  ++v11;
  if (v15)
    goto LABEL_21;
  v11 = v14 + 1;
  if (v14 + 1 >= v39)
    return (uint64_t *)swift_release(v5);
  v15 = *(_QWORD *)(v6 + 8 * v11);
  if (v15)
    goto LABEL_21;
  v11 = v14 + 2;
  if (v14 + 2 >= v39)
    return (uint64_t *)swift_release(v5);
  v15 = *(_QWORD *)(v6 + 8 * v11);
  if (v15)
  {
LABEL_21:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_22;
  }
  v16 = v14 + 3;
  if (v16 >= v39)
    return (uint64_t *)swift_release(v5);
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_21;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v39)
      return (uint64_t *)swift_release(v5);
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_21;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1000A8C0C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE v10[24];

  swift_beginAccess(a2, v10, 0, 0);
  v4 = *a2;
  swift_beginAccess(a1 + 16, v9, 33, 0);
  swift_bridgeObjectRetain(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + 16));
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0x8000000000000000;
  sub_10007FE70(v4, (uint64_t)sub_10002C5C8, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  swift_bridgeObjectRelease(v6);
  return swift_endAccess(v9);
}

uint64_t sub_1000A8CC0()
{
  uint64_t v0;

  return sub_1000A8C0C(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

void sub_1000A8CD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  char isEscapingClosureAtFileLocation;
  void **aBlock;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  void *v35;
  void *v36;
  _QWORD *v37;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (void ***)((char *)&aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  *v7 = static OS_dispatch_queue.main.getter(v8);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v10 = swift_allocObject(&unk_1005E1048, 24, 7);
  *(_QWORD *)(v10 + 16) = _swiftEmptyArrayStorage;
  v11 = *(NSObject **)(v2 + 32);
  v12 = (_QWORD *)swift_allocObject(&unk_1005E1070, 40, 7);
  v12[2] = v2;
  v12[3] = a1;
  v12[4] = v10 + 16;
  v13 = swift_allocObject(&unk_1005E1098, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_1000A8880;
  *(_QWORD *)(v13 + 24) = v12;
  v36 = sub_10010DB64;
  v37 = (_QWORD *)v13;
  aBlock = _NSConcreteStackBlock;
  v33 = 1107296256;
  v34 = sub_10006655C;
  v35 = &unk_1005E10B0;
  v14 = _Block_copy(&aBlock);
  v15 = v37;
  swift_retain();
  swift_retain();
  swift_release(v15);
  dispatch_sync(v11, v14);
  _Block_release(v14);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation(v13, "", 103, 165, 35, 1);
  swift_release(v13);
  if ((v14 & 1) != 0)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 16);
  sub_10004F2F0(0, (unint64_t *)&qword_100646CD0, OS_os_log_ptr);
  v17 = (void *)static OS_os_log.default.getter();
  v18 = static os_log_type_t.debug.getter();
  if (v16)
  {
    v19 = sub_10006922C((uint64_t *)&unk_100644560);
    v20 = swift_allocObject(v19, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_1004D9670;
    v21 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 16);
    *(_QWORD *)(v20 + 56) = &type metadata for Int;
    *(_QWORD *)(v20 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v20 + 32) = v21;
    os_log(_:dso:log:type:_:)("reloading %d thumbnail entries", (_DWORD)aBlock);

    swift_bridgeObjectRelease(v20);
    v22 = swift_allocObject(&unk_1005E0F58, 24, 7);
    *(_QWORD *)(v22 + 16) = &_swiftEmptyDictionarySingleton;
    v17 = (void *)(v22 + 16);
    v23 = objc_msgSend((id)objc_opt_self(DOCThumbnailGenerator), "sharedGenerator");
    v24 = swift_allocObject(&unk_1005E10E8, 24, 7);
    swift_weakInit(v24 + 16, v2);
    v25 = (_QWORD *)swift_allocObject(&unk_1005E1110, 48, 7);
    v25[2] = v24;
    v25[3] = v10;
    v25[4] = a1;
    v25[5] = v22;
    v36 = sub_100362E88;
    v37 = v25;
    aBlock = _NSConcreteStackBlock;
    v33 = 1107296256;
    v34 = sub_10004A82C;
    v35 = &unk_1005E1128;
    v26 = _Block_copy(&aBlock);
    v27 = v37;
    swift_retain();
    swift_retain();
    swift_release(v27);
    objc_msgSend(v23, "performInBatch:", v26);
    _Block_release(v26);

    v18 = swift_allocObject(&unk_1005E1160, 32, 7);
    *(_QWORD *)(v18 + 16) = v2;
    *(_QWORD *)(v18 + 24) = v22 + 16;
    v28 = swift_allocObject(&unk_1005E1188, 32, 7);
    *(_QWORD *)(v28 + 16) = sub_1000A8CC0;
    *(_QWORD *)(v28 + 24) = v18;
    v36 = sub_10010DB64;
    v37 = (_QWORD *)v28;
    aBlock = _NSConcreteStackBlock;
    v33 = 1107296256;
    v34 = sub_10006655C;
    v35 = &unk_1005E11A0;
    v29 = _Block_copy(&aBlock);
    v30 = v37;
    swift_retain();
    swift_retain();
    swift_release(v30);
    dispatch_sync(v11, v29);
    _Block_release(v29);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v28, "", 103, 193, 35, 1);
    swift_release(v18);
    swift_release(v12);
    swift_release(v10);
    swift_release(v22);
    swift_release(v28);
    if ((isEscapingClosureAtFileLocation & 1) == 0)
      return;
    __break(1u);
  }
  os_log(_:dso:log:type:_:)("no thumbnail entries to reload", 30, 2, &_mh_execute_header, v17, v18, _swiftEmptyArrayStorage);
  swift_release(v12);
  swift_release(v10);

}

ValueMetadata *type metadata accessor for DOCThumbnailLoadingPool.DOCThumbnailPoolEntry()
{
  return &type metadata for DOCThumbnailLoadingPool.DOCThumbnailPoolEntry;
}

uint64_t type metadata accessor for DOCSharedOverlayContent()
{
  return objc_opt_self(_TtC5FilesP33_6559D0809CA5F323BA86F5C57192601423DOCSharedOverlayContent);
}

uint64_t sub_1000A91F4()
{
  uint64_t result;

  sub_10006922C(&qword_10064E738);
  result = static DOCAssociatedObjectStorage.makeUniqueStorageKey(_:)(0xD000000000000018, 0x8000000100527790);
  qword_10064E590 = result;
  return result;
}

uint64_t type metadata accessor for DOCNavigationController()
{
  return objc_opt_self(_TtC5Files23DOCNavigationController);
}

void sub_1000A92B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[24];

  v6[0] = "\b";
  v6[1] = "\b";
  v6[2] = &unk_1004E3260;
  v6[3] = &unk_1004E3260;
  v6[4] = &unk_1004E3278;
  v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[6] = &unk_1004E3260;
  v6[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[8] = &unk_1004E3260;
  v6[9] = &unk_1004E3290;
  v6[10] = &unk_1004E32A8;
  v6[11] = &unk_1004E32A8;
  v6[12] = &unk_1004E32A8;
  v6[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[14] = &unk_1004E32A8;
  v6[15] = &unk_1004E32A8;
  v6[16] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[17] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[18] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2 = type metadata accessor for DispatchTimeInterval(319);
  if (v3 <= 0x3F)
  {
    v6[19] = *(_QWORD *)(v2 - 8) + 64;
    sub_10008BA58(319);
    if (v5 <= 0x3F)
    {
      v6[20] = *(_QWORD *)(v4 - 8) + 64;
      v6[21] = &unk_1004E3260;
      v6[22] = (char *)&value witness table for Builtin.Int32 + 64;
      v6[23] = &unk_1004E32A8;
      swift_updateClassMetadata2(a1, 256, 24, v6, a1 + 80);
    }
  }
}

uint64_t type metadata accessor for DOCFileSystemCollection(uint64_t a1)
{
  uint64_t result;

  result = qword_10064F360;
  if (!qword_10064F360)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DOCFileSystemCollection);
  return result;
}

void sub_1000A93FC()
{
  uint64_t v0;

  sub_1000126C0(v0);
}

uint64_t sub_1000A9404()
{
  uint64_t v0;

  return sub_100026CB4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000A940C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  Swift::Bool v59;
  void *v60;
  uint64_t v61;
  void *v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  id v68;
  void *v69;
  id v70;
  uint64_t v71;
  void *v72;
  char *v73;
  char *v74;
  _QWORD *v75;
  NSObject *v76;
  char *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  _BOOL4 v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  id v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  os_log_t v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint8_t *v113;
  uint64_t v114;
  id v115;
  void *v116;
  char *v117;
  char *v118;
  NSObject *v119;
  os_log_type_t v120;
  uint64_t v121;
  id v122;
  char *v123;
  void (*v124)(char *, uint64_t);
  id v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  void *v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t Strong;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD v145[2];
  os_log_t v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(char *, uint64_t, uint64_t);
  _QWORD *v157;
  uint64_t aBlock[5];
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;

  v1 = sub_10006922C(&qword_100643470);
  v2 = __chkstk_darwin(v1);
  v152 = (char *)v145 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v153 = (char *)v145 - v4;
  v5 = type metadata accessor for Logger(0);
  v157 = *(_QWORD **)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v147 = (char *)v145 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v148 = (char *)v145 - v9;
  v10 = __chkstk_darwin(v8);
  v150 = (char *)v145 - v11;
  v12 = __chkstk_darwin(v10);
  v149 = (char *)v145 - v13;
  v14 = __chkstk_darwin(v12);
  v151 = (char *)v145 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)v145 - v16;
  v18 = type metadata accessor for OSSignpostID(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)v145 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchPredicate(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (_QWORD *)((char *)v145 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = *(void **)&v0[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_workQueue];
  *v25 = v26;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v23 + 104))(v25, enum case for DispatchPredicate.onQueue(_:), v22);
  v27 = v26;
  LOBYTE(v26) = _dispatchPreconditionTest(_:)(v25);
  v28 = (*(uint64_t (**)(_QWORD *, uint64_t))(v23 + 8))(v25, v22);
  if ((v26 & 1) != 0)
  {
    v29 = static os_signpost_type_t.event.getter(v28);
    v30 = *(id *)updatePointsOfInterestHandler.unsafeMutableAddressor();
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:_:_:)(v29, &_mh_execute_header, v30, "Files-DOCFileSystemCollection", 29, 2, v21, "StartObservingNOW", 17, 2, _swiftEmptyArrayStorage);

    v31 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    v32 = Logger.Enumeration.unsafeMutableAddressor(v31);
    v33 = (void (*)(char *, uint64_t, uint64_t))v157[2];
    v155 = v32;
    v156 = v33;
    ((void (*)(char *))v33)(v17);
    v34 = v0;
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter();
    v37 = os_log_type_enabled(v35, v36);
    v38 = &unk_10064F000;
    v154 = v5;
    if (v37)
    {
      v39 = swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      aBlock[0] = v40;
      *(_DWORD *)v39 = 136315138;
      v146 = (os_log_t)(v39 + 4);
      v41 = objc_msgSend(*(id *)&v34[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_internalObservedNode], "displayName");
      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v44 = v43;

      v160 = sub_1000544FC(v42, v44, aBlock);
      v5 = v154;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161);

      v45 = v44;
      v38 = (_QWORD *)&unk_10064F000;
      swift_bridgeObjectRelease(v45);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "[DSEnumeration] startObserving: DOCNode %s", (uint8_t *)v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

    }
    v46 = (void (*)(char *, uint64_t))v157[1];
    v46(v17, v5);
    v47 = (uint64_t)v153;
    v48 = *(_QWORD *)&v34[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_source];
    if (v48)
    {
      v49 = *(void **)(v48 + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain);
      v50 = v49;
    }
    else
    {
      v49 = 0;
    }
    sub_10000ADBC(v49);

    v51 = (_QWORD *)v38[80];
    v52 = *(_QWORD *)((char *)v51 + (_QWORD)v34);
    v53 = objc_opt_self(FINode);
    v54 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(v52, v53, 0, 0, 0), "fileURL");
    if (v54)
    {
      v55 = v54;
      v56 = v152;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v54);

      v57 = type metadata accessor for URL(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 0, 1, v57);
    }
    else
    {
      v57 = type metadata accessor for URL(0);
      v56 = v152;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v152, 1, 1, v57);
    }
    sub_1000B34E4((uint64_t)v56, v47);
    type metadata accessor for URL(0);
    v58 = *(_QWORD *)(v57 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v47, 1, v57) == 1)
    {
      sub_10000CB4C(v47, &qword_100643470);
      v59 = 0;
    }
    else
    {
      v59 = URL.startAccessingSecurityScopedResource()();
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v47, v57);
    }
    v34[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_shouldStopAccessing] = v59;
    v60 = *(void **)&v34[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_sourceObserver];
    if (v60)
    {
      v61 = swift_allocObject(&unk_1005DE5B0, 24, 7);
      swift_unknownObjectWeakInit(v61 + 16, v34);
      aBlock[4] = (uint64_t)sub_1003392A4;
      v159 = v61;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10002E508;
      aBlock[3] = (uint64_t)&unk_1005DEB18;
      v62 = _Block_copy(aBlock);
      swift_release(v159);
      v63 = objc_msgSend(v60, "addSubscriber:", v62);
      _Block_release(v62);
    }
    else
    {
      v63 = 0;
    }
    v64 = *(void **)&v34[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_sourceObserverToken];
    *(_QWORD *)&v34[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_sourceObserverToken] = v63;

    objc_msgSend(v60, "startObservingSources");
    v65 = *(_QWORD *)((char *)v51 + (_QWORD)v34);
    v66 = objc_opt_self(FINode);
    v67 = (void *)swift_dynamicCastObjCClass(v65, v66);
    if (v67)
    {
      v68 = objc_msgSend(v67, "fpDomain");
      if (v68)
      {
        v69 = v68;
        v70 = v68;
        sub_10000ADBC(v69);

      }
    }
    v71 = OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observer;
    v72 = *(void **)&v34[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observer];
    if (v72)
    {
      v73 = v151;
      v156(v151, v155, v5);
      v74 = v34;
      v75 = v72;
      v76 = Logger.logObject.getter(v75);
      v77 = v34;
      v78 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v76, v78))
      {
        v79 = swift_slowAlloc(22, -1);
        v156 = (void (*)(char *, uint64_t, uint64_t))v46;
        v80 = v79;
        v81 = swift_slowAlloc(64, -1);
        *(_DWORD *)v80 = 136446466;
        v157 = v75;
        aBlock[0] = v81;
        v160 = sub_1000544FC(0xD000000000000013, 0x8000000100528CD0, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161);
        *(_WORD *)(v80 + 12) = 2080;
        v82 = objc_msgSend(*(id *)((char *)v51 + (_QWORD)v77), "displayName");
        v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
        v85 = v84;

        v160 = sub_1000544FC(v83, v85, aBlock);
        v75 = v157;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161);

        swift_bridgeObjectRelease(v85);
        _os_log_impl((void *)&_mh_execute_header, v76, v78, "[DSEnumeration] %{public}s: observer already exists, start observing %s again", (uint8_t *)v80, 0x16u);
        swift_arrayDestroy(v81, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v81, -1, -1);
        swift_slowDealloc(v80, -1, -1);

        ((void (*)(char *, uint64_t))v156)(v151, v154);
      }
      else
      {

        v46(v73, v5);
      }
      objc_msgSend(v75, "startObserving:", *(unsigned int *)&v74[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_nodeObservationOptions]);
      sub_10032FF18(1);

    }
    else
    {
      v157 = v51;
      v86 = *(char **)((char *)v51 + (_QWORD)v34);
      v87 = objc_opt_self(FINode);
      v88 = swift_dynamicCastObjCClass(v86, v87);
      if (v88)
      {
        v89 = (char *)v88;
        v90 = v149;
        v156(v149, v155, v5);
        v91 = v34;
        v92 = swift_unknownObjectRetain(v86);
        v93 = Logger.logObject.getter(v92);
        v94 = static os_log_type_t.info.getter();
        LODWORD(v152) = v94;
        v95 = os_log_type_enabled(v93, v94);
        v153 = v86;
        if (v95)
        {
          v96 = swift_slowAlloc(22, -1);
          v146 = v93;
          v97 = v96;
          v147 = (char *)swift_slowAlloc(64, -1);
          aBlock[0] = (uint64_t)v147;
          *(_DWORD *)v97 = 136446466;
          v160 = sub_1000544FC(0xD000000000000013, 0x8000000100528CD0, aBlock);
          v151 = v89;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161);
          *(_WORD *)(v97 + 12) = 2080;
          v145[1] = v97 + 14;
          v98 = v46;
          v99 = objc_msgSend(*(id *)((char *)v157 + (_QWORD)v34), "displayName");
          v100 = v34;
          v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
          v103 = v102;

          v46 = v98;
          v104 = v101;
          v34 = v100;
          v160 = sub_1000544FC(v104, v103, aBlock);
          v89 = v151;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161);

          v5 = v154;
          swift_bridgeObjectRelease(v103);
          v105 = v146;
          _os_log_impl((void *)&_mh_execute_header, v146, (os_log_type_t)v152, "[DSEnumeration] %{public}s: Creating Observer with DOCNode %s)", (uint8_t *)v97, 0x16u);
          v106 = v147;
          swift_arrayDestroy(v147, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v106, -1, -1);
          swift_slowDealloc(v97, -1, -1);

          v107 = v149;
        }
        else
        {

          v107 = v90;
        }
        v46(v107, v5);
        v115 = objc_msgSend((id)objc_opt_self(FINodeObserver), "observerForFINode:withObserver:", v89, v91);
        v116 = *(void **)&v34[v71];
        *(_QWORD *)&v34[v71] = v115;
        v152 = (char *)v115;

        v117 = v150;
        v156(v150, v155, v5);
        v118 = v91;
        v119 = Logger.logObject.getter(v118);
        v120 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v119, v120))
        {
          v121 = swift_slowAlloc(22, -1);
          v149 = (char *)swift_slowAlloc(64, -1);
          aBlock[0] = (uint64_t)v149;
          *(_DWORD *)v121 = 136446466;
          v160 = sub_1000544FC(0xD000000000000013, 0x8000000100528CD0, aBlock);
          v151 = v118;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161);
          *(_WORD *)(v121 + 12) = 2080;
          v147 = (char *)(v121 + 14);
          v122 = objc_msgSend(*(id *)((char *)v157 + (_QWORD)v34), "displayName");
          v123 = v34;
          v124 = v46;
          v125 = v122;
          v126 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
          v128 = v127;

          v46 = v124;
          v160 = sub_1000544FC(v126, v128, aBlock);
          v118 = v151;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161);

          swift_bridgeObjectRelease(v128);
          _os_log_impl((void *)&_mh_execute_header, v119, v120, "[DSEnumeration] %{public}s: Starting Observer with DOCNode %s", (uint8_t *)v121, 0x16u);
          v129 = v149;
          swift_arrayDestroy(v149, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v129, -1, -1);
          swift_slowDealloc(v121, -1, -1);

          v130 = v154;
          v124(v150, v154);
        }
        else
        {

          v46(v117, v5);
          v130 = v5;
          v123 = v34;
        }
        v131 = v148;
        v132 = *(void **)&v123[v71];
        if (v132)
          objc_msgSend(v132, "startObserving:", *(unsigned int *)&v118[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_nodeObservationOptions]);
        v133 = ((uint64_t (*)(char *, uint64_t, uint64_t))v156)(v131, v155, v130);
        v134 = Logger.logObject.getter(v133);
        v135 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v134, v135))
        {
          v136 = (uint8_t *)swift_slowAlloc(12, -1);
          v137 = swift_slowAlloc(32, -1);
          aBlock[0] = v137;
          *(_DWORD *)v136 = 136446210;
          v160 = sub_1000544FC(0xD000000000000013, 0x8000000100528CD0, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161);
          _os_log_impl((void *)&_mh_execute_header, v134, v135, "[DSEnumeration] %{public}s: start refreshing items", v136, 0xCu);
          swift_arrayDestroy(v137, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v137, -1, -1);
          swift_slowDealloc(v136, -1, -1);
        }

        v46(v131, v130);
        v138 = v153;
        sub_10032FF18(1);
        sub_100069EDC();
        swift_unknownObjectRelease(v138);

      }
      else
      {
        v108 = v34;
        v109 = v147;
        v110 = ((uint64_t (*)(char *, uint64_t, uint64_t))v156)(v147, v155, v5);
        v111 = Logger.logObject.getter(v110);
        v112 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v111, v112))
        {
          v113 = (uint8_t *)swift_slowAlloc(12, -1);
          v114 = swift_slowAlloc(32, -1);
          aBlock[0] = v114;
          *(_DWORD *)v113 = 136446210;
          v160 = sub_1000544FC(0xD000000000000013, 0x8000000100528CD0, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161);
          _os_log_impl((void *)&_mh_execute_header, v111, v112, "[DSEnumeration] %{public}s: Error Cannot observe a non FINode from Desktop Services", v113, 0xCu);
          swift_arrayDestroy(v114, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v114, -1, -1);
          swift_slowDealloc(v113, -1, -1);
        }

        v46(v109, v5);
        Strong = swift_unknownObjectWeakLoadStrong(&v108[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_delegate], v139);
        if (Strong)
        {
          v141 = Strong;
          v142 = sub_100339260();
          v143 = swift_allocError(&type metadata for FileSystemCollectionError, v142, 0, 0);
          *(_QWORD *)v144 = 0xD00000000000002CLL;
          *(_QWORD *)(v144 + 8) = 0x8000000100528CA0;
          *(_BYTE *)(v144 + 16) = 1;
          sub_100164974(v143);
          swift_unknownObjectRelease(v141);
          swift_errorRelease(v143);
        }
        sub_10032ED10();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000AA444()
{
  uint64_t v0;

  sub_1000130AC(v0);
}

uint64_t sub_1000AA44C()
{
  return sub_10000C4A8((uint64_t)sub_1000AA444, (uint64_t)&unk_1005DEB90);
}

uint64_t type metadata accessor for DOCFileExtensionManager()
{
  return objc_opt_self(_TtC5Files23DOCFileExtensionManager);
}

_QWORD *sub_1000AA544()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;

  v0 = type metadata accessor for DOCFileExtensionManager();
  v1 = swift_allocObject(v0, 56, 7);
  result = sub_1003921CC();
  qword_100672D18 = v1;
  return result;
}

ValueMetadata *type metadata accessor for DOCFileExtensionManager.State()
{
  return &type metadata for DOCFileExtensionManager.State;
}

uint64_t sub_1000AA58C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v0 = sub_10006922C((uint64_t *)&unk_10064B460);
  v1 = *(_QWORD *)(type metadata accessor for UTType(0) - 8);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ 10 * *(_QWORD *)(v1 + 72), *(unsigned __int8 *)(v1 + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_1004DB510;
  v3 = static UTType.sourceCode.getter();
  v4 = static UTType.script.getter(v3);
  v5 = static UTType.json.getter(v4);
  v6 = static UTType.propertyList.getter(v5);
  v7 = static UTType.xmlPropertyList.getter(v6);
  v8 = static UTType.binaryPropertyList.getter(v7);
  v9 = static UTType.archive.getter(v8);
  v10 = static UTType.symbolicLink.getter(v9);
  v11 = static UTType.executable.getter(v10);
  static UTType.url.getter(v11);
  return v2;
}

uint64_t sub_1000AA674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 24);
  }
  else
  {
    v2 = sub_1000AA58C();
    v3 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 24) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease(v3);
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_1000AA6CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v0 = sub_10006922C((uint64_t *)&unk_10064B460);
  v1 = type metadata accessor for UTType(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v0, v5 + 19 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_1004E53E0;
  v7 = v6 + v5;
  v8 = static UTType.pdf.getter(v6);
  v9 = static UTType.rtfd.getter(v8);
  v10 = static UTType.flatRTFD.getter(v9);
  v11 = static UTType.webArchive.getter(v10);
  v12 = static UTType.text.getter(v11);
  v13 = static UTType.image.getter(v12);
  v14 = static UTType.audiovisualContent.getter(v13);
  v15 = static UTType.playlist.getter(v14);
  v16 = static UTType.spreadsheet.getter(v15);
  v17 = static UTType.presentation.getter(v16);
  v18 = static UTType.folder.getter(v17);
  v19 = UTType.docWatchface.unsafeMutableAddressor(v18);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v21 = v20(v7 + 11 * v3, v19, v1);
  v22 = UTType.docMSOfficeWordProcessing.unsafeMutableAddressor(v21);
  v23 = v20(v7 + 12 * v3, v22, v1);
  v24 = UTType.docMSOfficeWordProcessingTemplate.unsafeMutableAddressor(v23);
  v25 = v20(v7 + 13 * v3, v24, v1);
  v26 = UTType.docMSOfficeXMLWordProcessing.unsafeMutableAddressor(v25);
  v27 = v20(v7 + 14 * v3, v26, v1);
  v28 = UTType.docOfficeOpenXMLWordProcessing.unsafeMutableAddressor(v27);
  v29 = v20(v7 + 15 * v3, v28, v1);
  v30 = UTType.docOfficeOpenXMLMacroEnabledWordProcessing.unsafeMutableAddressor(v29);
  v31 = v20(v7 + 16 * v3, v30, v1);
  v32 = UTType.docOfficeOpenXMLWordProcessingTemplate.unsafeMutableAddressor(v31);
  v33 = v20(v7 + 17 * v3, v32, v1);
  v34 = UTType.docOfficeOpenXMLMacroEnabledWordProcessingTemplate.unsafeMutableAddressor(v33);
  v20(v7 + 18 * v3, v34, v1);
  return v6;
}

uint64_t sub_1000AA8B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v2 = sub_1000AA6CC();
    v3 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease(v3);
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_1000AA910@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_10002654C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void sub_1000AA918(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[13];

  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[4] = "\b";
  v6[5] = &unk_1004E4A30;
  v6[6] = "\b";
  v6[7] = &unk_1004E4A48;
  sub_1000B1D24(319, &qword_100650788, type metadata accessor for ScrollToItem);
  if (v3 <= 0x3F)
  {
    v6[8] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000B1D24(319, &qword_100650790, type metadata accessor for ActiveScrollItemContext);
    if (v5 <= 0x3F)
    {
      v6[9] = *(_QWORD *)(v4 - 8) + 64;
      v6[10] = "\b";
      v6[11] = &unk_1004E4A30;
      v6[12] = "\b";
      swift_updateClassMetadata2(a1, 256, 13, v6, a1 + 80);
    }
  }
}

uint64_t type metadata accessor for DOCColumnViewController(uint64_t a1)
{
  return sub_10006BDA4(a1, (uint64_t *)&unk_100650778, (uint64_t)&nominal type descriptor for DOCColumnViewController);
}

uint64_t sub_1000AAA1C()
{
  return type metadata accessor for DOCColumnViewController(0);
}

NSString sub_1000AAA90()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_100672CA0 = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for DOCCircularProgressView()
{
  return objc_opt_self(_TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView);
}

id sub_1000AAB24(double a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  id v20;
  objc_super v22;

  *(_QWORD *)&v1[OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_fractionCompleted] = 0;
  v3 = OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_borderLayer;
  v4 = objc_allocWithZone((Class)CALayer);
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "init");
  v6 = OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_progressLayer;
  *(_QWORD *)&v5[v6] = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v7 = OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_indeterminateLayer;
  *(_QWORD *)&v5[v7] = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v8 = (double *)&v5[OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_minSize];
  __asm { FMOV            V0.2D, #20.0 }
  *(_OWORD *)&v5[OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_minSize] = _Q0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_preferredIconColor] = 0;
  v14 = OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_progressBorderColor;
  v15 = (void *)objc_opt_self(UIColor);
  *(_QWORD *)&v5[v14] = objc_msgSend(v15, "systemBlueColor");
  v16 = OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_progressFillColor;
  *(_QWORD *)&v5[v16] = objc_msgSend(v15, "systemBlueColor");
  v17 = OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_progressBackgroundColor;
  *(_QWORD *)&v5[v17] = objc_msgSend(v15, "systemBackgroundColor");
  *(double *)&v5[OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_changeAnimationDuration] = a1;
  v18 = *v8;
  v19 = v8[1];

  v22.receiver = v5;
  v22.super_class = (Class)type metadata accessor for DOCCircularProgressView();
  v20 = objc_msgSendSuper2(&v22, "initWithFrame:", 0.0, 0.0, v18, v19);
  objc_msgSend(v20, "setOpaque:", 0);
  sub_1000AADA8();
  sub_1000AACD8();

  return v20;
}

void sub_1000AACD8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;

  v1 = (void *)UIView.doc_tintColorIgnoringVibrancyContainer.getter();
  v2 = v1;
  v3 = *(void **)(v0
                + OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_preferredIconColor);
  if (v3)
  {
    v4 = *(id *)(v0
               + OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_preferredIconColor);
  }
  else
  {
    v4 = v1;
    v3 = 0;
  }
  v5 = *(void **)(v0
                + OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_progressBorderColor);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_progressBorderColor) = v4;
  v6 = v3;
  v7 = v4;

  v8 = *(void **)(v0
                + OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_progressFillColor);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_progressFillColor) = v7;
  v11 = v7;

  v9 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
  v10 = *(void **)(v0
                 + OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_progressBackgroundColor);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_progressBackgroundColor) = v9;

  sub_10003C988();
}

void sub_1000AADA8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;

  v1 = OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_progressLayer;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_progressLayer], "setStrokeStart:", 0.0);
  objc_msgSend(*(id *)&v0[v1], "setStrokeEnd:", 0.0);
  v2 = OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_borderLayer;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_borderLayer], "setContentsGravity:", kCAGravityCenter);
  v3 = objc_msgSend(v0, "layer");
  objc_msgSend(v3, "addSublayer:", *(_QWORD *)&v0[v1]);

  v4 = objc_msgSend(v0, "layer");
  objc_msgSend(v4, "addSublayer:", *(_QWORD *)&v0[v2]);

  v5 = objc_msgSend(v0, "layer");
  objc_msgSend(v5, "addSublayer:", *(_QWORD *)&v0[OBJC_IVAR____TtC5FilesP33_6C1A47974E8480CF19F978326BC049AE23DOCCircularProgressView_indeterminateLayer]);

}

uint64_t sub_1000AAEB4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for ScrollToItem(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ActiveScrollItemContext(uint64_t a1)
{
  return sub_10006BDA4(a1, qword_1006507F0, (uint64_t)&nominal type descriptor for ActiveScrollItemContext);
}

uint64_t type metadata accessor for DOCSourceOrderStrategy()
{
  return objc_opt_self(_TtC5Files22DOCSourceOrderStrategy);
}

void sub_1000AAF5C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  swift_beginAccess(v0 + 16, v9, 0, 0);
  v1 = *(_QWORD *)(v0 + 16);
  if (!*(_QWORD *)(v1 + 16))
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = sub_10001CCD0(0);
  if ((v3 & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v2);
  v5 = sub_10001CCD0(1);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v5);
    swift_bridgeObjectRetain(v4);
    v8 = swift_bridgeObjectRetain(v7);
    sub_1000887DC(v8);
    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t type metadata accessor for DOCSourceOrderObserver()
{
  return objc_opt_self(_TtC5Files22DOCSourceOrderObserver);
}

void sub_1000AB024(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000AB02C(a1, a2, v2);
}

void sub_1000AB02C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t Strong;
  __n128 v5;
  void *v6;
  _BYTE v7[24];

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v6 = (void *)Strong;
    sub_1000AB07C(v5);

  }
}

double sub_1000AB07C(__n128 a1)
{
  void *v1;
  void *v2;
  id v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  double result;
  _QWORD v13[5];
  uint64_t v14;

  v2 = v1;
  v3 = *(id *)DOCLog.Source.unsafeMutableAddressor(a1);
  v5 = static os_log_type_t.info.getter(v4);
  os_log(_:dso:log:type:_:)("Sorting sources: defaults did change", 36, 2, &_mh_execute_header, v3, v5, _swiftEmptyArrayStorage);

  sub_1000AAF5C();
  v7 = v6;
  v8 = swift_allocObject(&unk_1005E3888, 33, 7);
  *(_QWORD *)(v8 + 16) = v2;
  *(_QWORD *)(v8 + 24) = v7;
  *(_BYTE *)(v8 + 32) = 0;
  v13[4] = sub_1000AB258;
  v14 = v8;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10004A82C;
  v13[3] = &unk_1005E38A0;
  v9 = _Block_copy(v13);
  v10 = v14;
  v11 = v2;
  swift_bridgeObjectRetain(v7);
  swift_release(v10);
  DOCRunInMainThread(v9);
  _Block_release(v9);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v7).n128_u64[0];
  return result;
}

void sub_1000AB190()
{
  uint64_t v0;

  sub_10003C384(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000AB198(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000AB1A0(a1, a2, v2);
}

void sub_1000AB1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  v5 = swift_allocObject(&unk_1005E38D8, 32, 7);
  *(_QWORD *)(v5 + 16) = a3;
  *(_QWORD *)(v5 + 24) = a1;
  v8[4] = sub_1000AB190;
  v9 = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10004A82C;
  v8[3] = &unk_1005E38F0;
  v6 = _Block_copy(v8);
  v7 = v9;
  swift_retain();
  swift_bridgeObjectRetain(a1);
  swift_release(v7);
  DOCRunInMainThread(v6);
  _Block_release(v6);
}

void sub_1000AB258()
{
  uint64_t v0;

  sub_1000083CC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t _s14descr1005CBB91O5StateCMa()
{
  return objc_opt_self(_TtCC5Files22DOCProgressTestabilityP33_CCB57F4BDDCB2FA19B9FBF70E50F3CC35State);
}

uint64_t sub_1000AB284()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  char v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD aBlock[5];
  uint64_t v16;

  v1 = v0;
  v2 = objc_allocWithZone((Class)LSApplicationRecord);
  v3 = sub_100086818(0xD00000000000002ALL, 0x8000000100513740, 0);
  if (v3)
  {

    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  *(_BYTE *)(v0 + 16) = v4;
  v5 = objc_msgSend((id)objc_opt_self(NSDistributedNotificationCenter), "defaultCenter");
  if (qword_100640F30 != -1)
    swift_once(&qword_100640F30, sub_1000AB4A8);
  v6 = qword_100672AF0;
  v7 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v8 = swift_allocObject(&unk_1005CBA60, 24, 7);
  swift_weakInit(v8 + 16, v1);
  v9 = swift_allocObject(&unk_1005CBA88, 32, 7);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v5;
  aBlock[4] = sub_1001724D4;
  v16 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000B3580;
  aBlock[3] = &unk_1005CBAA0;
  v10 = _Block_copy(aBlock);
  v11 = v16;
  v12 = v5;
  swift_release(v11);
  v13 = objc_msgSend(v12, "addObserverForName:object:queue:usingBlock:", v6, 0, v7, v10);
  _Block_release(v10);

  swift_unknownObjectRelease(v13);
  return v1;
}

uint64_t sub_1000AB46C()
{
  uint64_t v0;
  uint64_t result;

  v0 = _s14descr1005CBB91O5StateCMa();
  swift_allocObject(v0, 17, 7);
  result = sub_1000AB284();
  qword_100645BA8 = result;
  return result;
}

NSString sub_1000AB4A8()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_100672AF0 = (uint64_t)result;
  return result;
}

uint64_t sub_1000AB4DC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_1004EB638;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for DOCLocationChangePacer(uint64_t a1)
{
  uint64_t result;

  result = qword_100658BE8;
  if (!qword_100658BE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DOCLocationChangePacer);
  return result;
}

uint64_t sub_1000AB59C()
{
  return type metadata accessor for DOCLocationChangePacer(0);
}

void sub_1000AB644(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  void *v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v6[0] = "\b";
  v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_1000B1D24(319, &qword_1006470C0, type metadata accessor for DOCHierarchyController.UpdateExpectation);
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    v6[5] = &unk_1004DCC80;
    v6[6] = &unk_1004DCC80;
    sub_1000B1D24(319, &qword_1006470C8, type metadata accessor for DOCHierarchyController.FetchingOperationToken);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = &unk_1004DCC98;
      v10 = &unk_1004DCC80;
      v11 = &unk_1004DCCB0;
      v12 = (char *)&value witness table for Builtin.UnknownObject + 64;
      v13 = (char *)&value witness table for Builtin.UnknownObject + 64;
      v14 = (char *)&value witness table for Builtin.UnknownObject + 64;
      v15 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v16 = (char *)&value witness table for Builtin.UnknownObject + 64;
      v17 = (char *)&value witness table for Builtin.Int64 + 64;
      v18 = (char *)&value witness table for Builtin.UnknownObject + 64;
      v19 = &unk_1004DCC80;
      v20 = (char *)&value witness table for Builtin.UnknownObject + 64;
      v21 = (char *)&value witness table for Builtin.UnknownObject + 64;
      v22 = &unk_1004DCC80;
      v23 = &unk_1004DCC80;
      v24 = &unk_1004DCC98;
      v25 = &unk_1004DCCC8;
      swift_updateClassMetadata2(a1, 256, 26, v6, a1 + 80);
    }
  }
}

uint64_t type metadata accessor for DOCHierarchyController(uint64_t a1)
{
  return sub_10006BDA4(a1, (uint64_t *)&unk_1006470B0, (uint64_t)&nominal type descriptor for DOCHierarchyController);
}

uint64_t sub_1000AB790()
{
  return type metadata accessor for DOCHierarchyController(0);
}

uint64_t sub_1000AB798()
{
  return sub_10010D7A0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000AB7A4);
}

void sub_1000AB7A4(uint64_t a1, void (*a2)(id), uint64_t a3, unint64_t a4, void *a5)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;

  if (a1)
  {
    v7 = *(id *)DOCLog.UI.unsafeMutableAddressor(a1);
    v8 = static os_log_type_t.error.getter();
    v9 = sub_10006922C((uint64_t *)&unk_100644560);
    v10 = swift_allocObject(v9, 72, 7);
    *(_OWORD *)(v10 + 16) = xmmword_1004D9670;
    v11 = _convertErrorToNSError(_:)(a1);
    *(_QWORD *)(v10 + 56) = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
    *(_QWORD *)(v10 + 64) = sub_100083450((unint64_t *)&qword_1006448B0, (unint64_t *)&qword_100644570, NSError_ptr);
    *(_QWORD *)(v10 + 32) = v11;
    os_log(_:dso:log:type:_:)("Error fetching the sources %@", 29, 2, &_mh_execute_header, v7, v8, v10);
LABEL_3:

    swift_bridgeObjectRelease(v10);
    a2(0);
    return;
  }
  v13 = a5;
  v18 = sub_10004C010(a4, v13);

  if (!v18)
  {
    v7 = *(id *)DOCLog.UI.unsafeMutableAddressor(v14);
    v15 = static os_log_type_t.error.getter();
    v16 = sub_10006922C((uint64_t *)&unk_100644560);
    v10 = swift_allocObject(v16, 72, 7);
    *(_OWORD *)(v10 + 16) = xmmword_1004D9670;
    *(_QWORD *)(v10 + 56) = sub_10004F2F0(0, (unint64_t *)&unk_1006442E0, DOCConcreteLocation_ptr);
    *(_QWORD *)(v10 + 64) = sub_100083450((unint64_t *)&qword_100647578, (unint64_t *)&unk_1006442E0, DOCConcreteLocation_ptr);
    *(_QWORD *)(v10 + 32) = v13;
    v17 = v13;
    os_log(_:dso:log:type:_:)("Cannot find source for location %@", 34, 2, &_mh_execute_header, v7, v15, v10, 0);
    goto LABEL_3;
  }
  a2(v18);

}

void sub_1000AB9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000BA04(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_1000AB9C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t *v15;
  void (*v16)(__n128);
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  v2 = sub_10006922C((uint64_t *)&unk_1006443D0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000ABE80(v3);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 152))(v6);
  v8 = swift_release(v6);
  if ((v7 & 1) != 0)
  {
    UUID.init()(v8);
    v9 = (int *)type metadata accessor for DOCHierarchyController.FetchingOperationToken(0);
    v5[v9[5]] = 0;
    v5[v9[6]] = 0;
    *(_QWORD *)&v5[v9[7]] = _swiftEmptyArrayStorage;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(*((_QWORD *)v9 - 1) + 56))(v5, 0, 1, v9);
  }
  else
  {
    v10 = type metadata accessor for DOCHierarchyController.FetchingOperationToken(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 1, 1, v10);
  }
  v11 = sub_1001D6804((uint64_t)v5, &OBJC_IVAR____TtC5Files22DOCHierarchyController_loadingDisabledOperation);
  v12 = sub_1000ABE80(v11);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 152))(v12);
  result = swift_release(v12);
  if ((v13 & 1) == 0)
  {
    v15 = (uint64_t *)(v1 + OBJC_IVAR____TtC5Files22DOCHierarchyController_delayedLoadingBlock);
    v16 = *(void (**)(__n128))(v1 + OBJC_IVAR____TtC5Files22DOCHierarchyController_delayedLoadingBlock);
    if (v16)
    {
      v17 = v15[1];
      v18 = swift_retain();
      v16(v18);
      sub_100087534((uint64_t)v16, v17);
      v19 = *v15;
      v20 = v15[1];
      *v15 = 0;
      v15[1] = 0;
      return sub_100087534(v19, v20);
    }
  }
  return result;
}

uint64_t sub_1000ABB28(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

uint64_t sub_1000ABB44(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 16))(*(_QWORD *)(v1 + 32), a1);
}

void sub_1000ABB70(void *a1)
{
  uint64_t v1;

  sub_1000ABB7C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(NSObject **)(v1 + 32));
}

void sub_1000ABB7C(void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  void *v14;
  id v15;
  _BYTE v16[24];
  _BYTE v17[24];

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  *v11 = static OS_dispatch_queue.main.getter(v12);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  v13 = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v13 & 1) != 0)
  {
    swift_beginAccess(a2 + 16, v17, 1, 0);
    v14 = *(void **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = a1;
    v15 = a1;

    swift_beginAccess(a3 + 16, v16, 1, 0);
    *(_BYTE *)(a3 + 16) = 1;
    dispatch_group_leave(a4);
  }
  else
  {
    __break(1u);
  }
}

void sub_1000ABCAC(void *a1)
{
  uint64_t v1;

  sub_1000ABCB8(a1, *(_QWORD *)(v1 + 16), *(void (**)(void))(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_1000ABCB8(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  id v6;
  id v7;

  if (a1)
    v6 = a1;
  else
    v6 = objc_msgSend((id)objc_opt_self(DOCConcreteLocation), "defaultLocation");
  v7 = v6;
  sub_100040340(v6, 0, a3, a4);

}

void sub_1000ABD30(void *a1)
{
  uint64_t v1;

  sub_1000ABD54(a1, *(_QWORD *)(v1 + 16), *(void (**)(void))(v1 + 24), *(_QWORD *)(v1 + 32), "resolving .defaultLocation: location is nil, using empty location instead.");
}

void sub_1000ABD54(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4, const char *a5)
{
  id v8;
  id v9;

  if (a1)
    v9 = a1;
  else
    v9 = sub_1001E468C(a5);
  v8 = a1;
  sub_100040340(v9, 1, a3, a4);

}

void sub_1000ABDC0(void *a1, void *a2)
{
  uint64_t v2;

  sub_1000ABDC8(a1, a2, *(void (**)(void))(v2 + 16));
}

void sub_1000ABDC8(void *a1, void *a2, void (*a3)(void))
{
  id v5;
  id v6;

  v5 = a2;
  v6 = a1;
  a3();

}

void sub_1000ABE28()
{
  uint64_t v0;

  sub_1000ABE30(v0);
}

void sub_1000ABE30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    sub_1000AB9C4();

  }
}

uint64_t sub_1000ABE80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC5Files22DOCHierarchyController____lazy_storage___loadingDisabledAssertions;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files22DOCHierarchyController____lazy_storage___loadingDisabledAssertions))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files22DOCHierarchyController____lazy_storage___loadingDisabledAssertions);
  }
  else
  {
    v3 = v0;
    v4 = swift_allocObject(&unk_1005CEFC0, 24, 7);
    swift_unknownObjectWeakInit(v4 + 16);
    v5 = type metadata accessor for DOCAssertionCollection(0);
    swift_allocObject(v5, 56, 7);
    v2 = DOCAssertionCollection.init(debugName:_:)(0x44676E6964616F4CLL, 0xEF64656C62617369, sub_1000ABE28, v4);
    v6 = *(_QWORD *)(v3 + v1);
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release(v6);
  }
  swift_retain();
  return v2;
}

uint64_t sub_1000ABFD0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1004DCCB0;
    v4[2] = &unk_1004DCCB0;
    v4[3] = &unk_1004DCD08;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for DOCHierarchyController.PreventChangeAssertion(uint64_t a1)
{
  return sub_10006BDA4(a1, qword_100647110, (uint64_t)&nominal type descriptor for DOCHierarchyController.PreventChangeAssertion);
}

uint64_t sub_1000AC064(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DOCHierarchyController.FetchingOperationToken(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AC0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DOCHierarchyController.FetchingOperationToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AC0E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1004DCCB0;
    v4[2] = &unk_1004DCCB0;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for DOCHierarchyController.FetchingOperationToken(uint64_t a1)
{
  return sub_10006BDA4(a1, qword_100647470, (uint64_t)&nominal type descriptor for DOCHierarchyController.FetchingOperationToken);
}

void sub_1000AC1A8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  id v25;
  id v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[5];
  _QWORD *v32;
  char v33[24];

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = swift_allocObject(&unk_1005D04A0, 24, 7);
  *(_QWORD *)(v5 + 16) = _swiftEmptyArrayStorage;
  v6 = (uint64_t *)&v0[OBJC_IVAR____TtC5Files22DOCHierarchyController_locations];
  v7 = swift_beginAccess(&v0[OBJC_IVAR____TtC5Files22DOCHierarchyController_locations], v33, 0, 0);
  v8 = *v6;
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v28 = v8;
    else
      v28 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v29 = _CocoaArrayWrapper.endIndex.getter(v28);
    v7 = swift_bridgeObjectRelease(v8);
    v10 = v29 - 1;
    if (!__OFSUB__(v29, 1))
      goto LABEL_3;
LABEL_17:
    __break(1u);
    return;
  }
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  v10 = v9 - 1;
  if (__OFSUB__(v9, 1))
    goto LABEL_17;
LABEL_3:
  if ((v10 & 0x8000000000000000) != 0
    || v10 < *(_QWORD *)&v0[OBJC_IVAR____TtC5Files22DOCHierarchyController_minParentLocations])
  {
    v16 = sub_10001B0BC((uint64_t)v0);
    if (v16)
    {
      v18 = (void *)v16;
      v19 = v17;
      v20 = *(void **)&v0[OBJC_IVAR____TtC5Files22DOCHierarchyController_itemManager];
      v21 = objc_msgSend(v17, "itemID");
      v22 = (_QWORD *)swift_allocObject(&unk_1005D04C8, 48, 7);
      v22[2] = v18;
      v22[3] = v19;
      v22[4] = v0;
      v22[5] = v5;
      aBlock[4] = sub_1001F577C;
      v32 = v22;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10013103C;
      aBlock[3] = &unk_1005D04E0;
      v23 = _Block_copy(aBlock);
      v24 = v32;
      v25 = v18;
      v26 = v19;
      v27 = v0;
      swift_retain();
      swift_release(v24);
      objc_msgSend(v20, "fetchParentsForItemID:recursively:completionHandler:", v21, 1, v23);
      _Block_release(v23);
      swift_release(v5);

      return;
    }
  }
  else
  {
    v11 = Logger.UI.unsafeMutableAddressor(v7);
    v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v11, v1);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Parent loading limit reached.", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  swift_release(v5);
}

void sub_1000AC468(void *a1)
{
  uint64_t v1;

  sub_1000AC470(a1, *(void (**)(void))(v1 + 16));
}

void sub_1000AC470(void *a1, void (*a2)(void))
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  id v10;
  id v11;

  if (a1)
  {
    v3 = a1;
    v4 = objc_msgSend(v3, "identifier");
    v5 = objc_msgSend(v3, "displayName");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v7 = v6;

    v8 = objc_allocWithZone((Class)DOCConcreteLocation);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    v10 = objc_msgSend(v8, "initWithSourceIdentifier:title:", v4, v9);

    objc_msgSend(v10, "setIsFPV2:", 1);
    v11 = v10;
    ((void (*)(id))a2)(v10);

  }
  else
  {
    a2();
  }
}

uint64_t sub_1000AC5A0(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = a4;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = Logger.UI.unsafeMutableAddressor(v11);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v14, v9);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Obtaining default location...", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v19 = objc_msgSend(a1, "hostIdentifier");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(DOCDocumentsAppBundleIdentifier);
  if (v20 == v23 && v22 == v24)
  {
    swift_bridgeObjectRelease_n(v22, 2);
    v28 = v32;
  }
  else
  {
    v26 = v24;
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v23, v24, 0);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v26);
    v28 = v32;
    if ((v27 & 1) == 0 && !objc_msgSend(a1, "isPickerUI"))
      return sub_1001E44F4(a1, a2, a3, v28, a5);
  }
  v30 = swift_allocObject(&unk_1005CF780, 32, 7);
  *(_QWORD *)(v30 + 16) = v28;
  *(_QWORD *)(v30 + 24) = a5;
  swift_retain();
  sub_1000AD3F0(a1, a2, a3, (uint64_t)sub_1000AC468, v30);
  return swift_release(v30);
}

uint64_t sub_1000AC7CC(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1000AC7E0()
{
  return sub_1000AC7CC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000AC7EC);
}

void sub_1000AC7EC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(id))
{
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  NSString v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSString v27;
  uint64_t v28;
  NSString v29;
  uint64_t v30;
  uint64_t v31;
  id v32;

  if (!a1)
  {
LABEL_4:
    if (a3)
    {
      v10 = (void *)_convertErrorToNSError(_:)(a3);
      if ((NSError.isProviderDomainNotAuthenticated.getter() & 1) != 0)
      {
        v11 = objc_msgSend(a2, "identifier");
        v12 = objc_msgSend(a2, "displayName");
        static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v14 = v13;

        v15 = objc_allocWithZone((Class)DOCConcreteLocation);
        v16 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v14);
        v17 = objc_msgSend(v15, "initWithSourceIdentifier:title:", v11, v16);

        v18 = objc_opt_self(DOCPickerSource);
        objc_msgSend(v17, "setIsFPV2:", swift_dynamicCastObjCClass(a2, v18) == 0);
        v19 = objc_msgSend(a2, "promptText");
        if (!v19)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v21 = v20;
          v19 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v21);
        }
        objc_msgSend(v17, "setPromptText:", v19);

        goto LABEL_14;
      }

    }
    v17 = objc_msgSend(objc_allocWithZone((Class)DOCConcreteLocation), "initWithSourceIdentifier:node:", a4, a1);
    goto LABEL_14;
  }
  if ((objc_msgSend((id)swift_unknownObjectRetain(a1), "isFolder") & 1) != 0)
  {
    swift_unknownObjectRelease(a1);
    goto LABEL_4;
  }
  v22 = objc_msgSend(a2, "identifier");
  v23 = objc_msgSend(a2, "displayName");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v25 = v24;

  v26 = objc_allocWithZone((Class)DOCConcreteLocation);
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  v17 = objc_msgSend(v26, "initWithSourceIdentifier:title:", v22, v27);

  v28 = objc_opt_self(DOCPickerSource);
  objc_msgSend(v17, "setIsFPV2:", swift_dynamicCastObjCClass(a2, v28) == 0);
  v29 = objc_msgSend(a2, "promptText");
  if (!v29)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v31 = v30;
    v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v31);
  }
  objc_msgSend(v17, "setPromptText:", v29);
  swift_unknownObjectRelease(a1);

LABEL_14:
  v32 = v17;
  a5(v17);

}

void sub_1000ACB00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000ACB0C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(_QWORD *)(v2 + 40));
}

void sub_1000ACB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  __n128 v39;
  void *v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  void **aBlock;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t (*v72)();
  _QWORD *v73;

  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v67 - v18;
  if (a2)
  {
    v20 = *(id *)DOCLog.UI.unsafeMutableAddressor(v17);
    v21 = static os_log_type_t.error.getter(v20);
    v22 = sub_10006922C((uint64_t *)&unk_100644560);
    v23 = swift_allocObject(v22, 72, 7);
    *(_OWORD *)(v23 + 16) = xmmword_1004D9670;
    v24 = _convertErrorToNSError(_:)(a2);
    *(_QWORD *)(v23 + 56) = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
    *(_QWORD *)(v23 + 64) = sub_100083450((unint64_t *)&qword_1006448B0, (unint64_t *)&qword_100644570, NSError_ptr);
    *(_QWORD *)(v23 + 32) = v24;
    os_log(_:dso:log:type:_:)("Error when getting the sources to resolve the location", 54, 2, &_mh_execute_header, v20, v21, v23);

    swift_bridgeObjectRelease(v23);
    v25 = swift_allocObject(&unk_1005CFD20, 32, 7);
    *(_QWORD *)(v25 + 16) = a3;
    *(_QWORD *)(v25 + 24) = a4;
    v72 = sub_1001D2A08;
    v73 = (_QWORD *)v25;
    aBlock = _NSConcreteStackBlock;
    v69 = 1107296256;
    v26 = &unk_1005CFD38;
LABEL_12:
    v70 = sub_10004A82C;
    v71 = v26;
    v54 = _Block_copy(&aBlock);
    v55 = v73;
    swift_retain();
    swift_release(v55);
    DOCRunInMainThread(v54);
LABEL_13:
    _Block_release(v54);
    return;
  }
  v67 = a3;
  v27 = a5;
  v28 = sub_10008A0F8(a1, (uint64_t)v27);

  if (!v28)
  {
LABEL_9:
    v48 = Logger.UI.unsafeMutableAddressor(v29);
    v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v19, v48, v12);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Sources don't contain the location source", v52, 2u);
      swift_slowDealloc(v52, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    v53 = swift_allocObject(&unk_1005CFBB8, 32, 7);
    *(_QWORD *)(v53 + 16) = v67;
    *(_QWORD *)(v53 + 24) = a4;
    v72 = sub_1001D2A08;
    v73 = (_QWORD *)v53;
    aBlock = _NSConcreteStackBlock;
    v69 = 1107296256;
    v26 = &unk_1005CFBD0;
    goto LABEL_12;
  }
  v30 = type metadata accessor for DOCFileProviderSource();
  v31 = swift_dynamicCastClass(v28, v30);
  if (!v31)
  {

    goto LABEL_9;
  }
  v32 = v31;
  v33 = *(void **)(v31 + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain);
  if (v33)
  {
    v34 = (_QWORD *)swift_allocObject(&unk_1005CFC58, 48, 7);
    v34[2] = v32;
    v34[3] = v27;
    v35 = v67;
    v34[4] = v67;
    v34[5] = a4;
    v36 = v27;
    v37 = v33;
    v38 = v28;
    v39 = swift_retain();
    if ((FPProviderDomain.shouldUseDSEnumeration.getter(v39) & 1) != 0)
    {
      type metadata accessor for DOCRootNode(0);
      v40 = (void *)static DOCRootNode.rootNode(for:)(v37);
      v41 = (_QWORD *)swift_allocObject(&unk_1005CFCD0, 64, 7);
      v41[2] = v40;
      v41[3] = v32;
      v41[4] = 0;
      v41[5] = v36;
      v41[6] = v35;
      v41[7] = a4;
      v72 = sub_1000AC7E0;
      v73 = v41;
      aBlock = _NSConcreteStackBlock;
      v69 = 1107296256;
      v70 = sub_10004A82C;
      v71 = &unk_1005CFCE8;
      v42 = _Block_copy(&aBlock);
      v43 = v73;
      v44 = v40;
      v45 = v36;
      v46 = v38;
      swift_retain();
      v47 = v44;
      swift_release(v43);
      DOCRunInMainThread(v42);
      _Block_release(v42);

      swift_release(v34);
      return;
    }
    v64 = *(void **)(a6 + OBJC_IVAR____TtC5Files22DOCHierarchyController_itemManager);
    v65 = swift_allocObject(&unk_1005CFC80, 32, 7);
    *(_QWORD *)(v65 + 16) = sub_1001F53A0;
    *(_QWORD *)(v65 + 24) = v34;
    v72 = sub_100066584;
    v73 = (_QWORD *)v65;
    aBlock = _NSConcreteStackBlock;
    v69 = 1107296256;
    v70 = sub_100083540;
    v71 = &unk_1005CFC98;
    v54 = _Block_copy(&aBlock);
    v66 = v73;
    swift_retain();
    swift_release(v66);
    objc_msgSend(v64, "doc_fetchRootItemForProviderDomain:completionHandler:", v37, v54);

    swift_release(v34);
    goto LABEL_13;
  }
  v56 = Logger.UI.unsafeMutableAddressor(v31);
  v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v56, v12);
  v58 = Logger.logObject.getter(v57);
  v59 = static os_log_type_t.error.getter(v58);
  if (os_log_type_enabled(v58, v59))
  {
    v60 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v60 = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "Source doesn't contain a file provider domain", v60, 2u);
    swift_slowDealloc(v60, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v61 = swift_allocObject(&unk_1005CFC08, 32, 7);
  *(_QWORD *)(v61 + 16) = v67;
  *(_QWORD *)(v61 + 24) = a4;
  v72 = sub_1001D2A08;
  v73 = (_QWORD *)v61;
  aBlock = _NSConcreteStackBlock;
  v69 = 1107296256;
  v70 = sub_10004A82C;
  v71 = &unk_1005CFC20;
  v62 = _Block_copy(&aBlock);
  v63 = v73;
  swift_retain();
  swift_release(v63);
  DOCRunInMainThread(v62);
  _Block_release(v62);

}

uint64_t sub_1000AD13C(uint64_t a1, uint64_t a2)
{
  return sub_1000AD148(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100004678);
}

uint64_t sub_1000AD148(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6]);
}

uint64_t sub_1000AD15C(uint64_t a1, uint64_t a2)
{
  return sub_1000AD148(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000AD168);
}

void sub_1000AD168(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  id v16;
  id v17;
  id v18;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void **v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  _QWORD *v35;

  if (a1)
  {
    v13 = (_QWORD *)swift_allocObject(&unk_1005CF500, 56, 7);
    v13[2] = a1;
    v13[3] = a3;
    v13[4] = a4;
    v13[5] = a6;
    v13[6] = a7;
    v34 = sub_1000AD13C;
    v35 = v13;
    v30 = _NSConcreteStackBlock;
    v31 = 1107296256;
    v32 = sub_10002E508;
    v33 = &unk_1005CF518;
    v14 = _Block_copy(&v30);
    v15 = v35;
    v16 = a7;
    v17 = a1;
    swift_retain();
    v18 = a6;
    swift_release(v15);
    objc_msgSend(a5, "retrieveSourcesForConfiguration:usingBlock:", v18, v14);
    _Block_release(v14);

  }
  else
  {
    v20 = *(id *)DOCLog.UI.unsafeMutableAddressor(0);
    v21 = static os_log_type_t.error.getter(v20);
    v22 = sub_10006922C((uint64_t *)&unk_100644560);
    v23 = swift_allocObject(v22, 72, 7);
    *(_OWORD *)(v23 + 16) = xmmword_1004D9670;
    if (a2)
    {
      v24 = _convertErrorToNSError(_:)(a2);
      v25 = (void *)sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
      v26 = sub_100083450((unint64_t *)&qword_1006448B0, (unint64_t *)&qword_100644570, NSError_ptr);
    }
    else
    {
      v26 = sub_10006A638();
      *(_QWORD *)(v23 + 40) = 0xE900000000000072;
      v24 = 0x6F727265206C696ELL;
      v25 = &type metadata for String;
    }
    *(_QWORD *)(v23 + 56) = v25;
    *(_QWORD *)(v23 + 64) = v26;
    *(_QWORD *)(v23 + 32) = v24;
    os_log(_:dso:log:type:_:)("Error getting the default source %@", 35, 2, &_mh_execute_header, v20, v21, v23);

    swift_bridgeObjectRelease(v23);
    v27 = swift_allocObject(&unk_1005CF4B0, 32, 7);
    *(_QWORD *)(v27 + 16) = a3;
    *(_QWORD *)(v27 + 24) = a4;
    v34 = sub_1001D2A08;
    v35 = (_QWORD *)v27;
    v30 = _NSConcreteStackBlock;
    v31 = 1107296256;
    v32 = sub_10004A82C;
    v33 = &unk_1005CF4C8;
    v28 = _Block_copy(&v30);
    v29 = v35;
    swift_retain();
    swift_release(v29);
    DOCRunInMainThread(v28);
    _Block_release(v28);
  }
}

void sub_1000AD3F0(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  NSString v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  id v19;
  id v20;
  id v21;
  _QWORD v22[5];
  _QWORD *v23;

  v10 = static os_log_type_t.info.getter();
  sub_10004F2F0(0, (unint64_t *)&qword_100646CD0, OS_os_log_ptr);
  v11 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:type:_:)("Obtaining default source...", 27, 2, &_mh_execute_header, v11, v10, _swiftEmptyArrayStorage);

  v12 = objc_msgSend(a1, "hostIdentifier");
  if (!v12)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v14 = v13;
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
  }
  v15 = (void *)objc_opt_self(DOCDocumentSource);
  v16 = (_QWORD *)swift_allocObject(&unk_1005CF460, 56, 7);
  v16[2] = a4;
  v16[3] = a5;
  v16[4] = a2;
  v16[5] = a1;
  v16[6] = a3;
  v22[4] = sub_1000AD15C;
  v23 = v16;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 1107296256;
  v22[2] = sub_100083540;
  v22[3] = &unk_1005CF478;
  v17 = _Block_copy(v22);
  v18 = v23;
  v19 = a3;
  swift_retain();
  v20 = a2;
  v21 = a1;
  swift_release(v18);
  objc_msgSend(v15, "defaultSourceForBundleIdentifier:completionBlock:", v12, v17);
  _Block_release(v17);

}

void sub_1000AD588()
{
  uint64_t v0;

  sub_1000AD590(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000AD590(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  _BYTE v7[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (Strong)
  {
    v6 = (void *)Strong;
    sub_100006154(a2);

  }
}

void sub_1000AD5E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000AD5F0(a1, a2, v2);
}

void sub_1000AD5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  v5 = swift_allocObject(&unk_1005D1058, 32, 7);
  *(_QWORD *)(v5 + 16) = a3;
  *(_QWORD *)(v5 + 24) = a1;
  v8[4] = sub_1000AD588;
  v9 = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10004A82C;
  v8[3] = &unk_1005D1070;
  v6 = _Block_copy(v8);
  v7 = v9;
  swift_retain();
  swift_bridgeObjectRetain(a1);
  swift_release(v7);
  DOCRunInMainThread(v6);
  _Block_release(v6);
}

void sub_1000AD6D8()
{
  id v0;
  void *v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  v0 = (id)_DocumentManagerBundle();
  if (v0)
  {
    v1 = v0;
    v6._object = (void *)0x8000000100523610;
    v2._countAndFlagsBits = 0x636F44206E616353;
    v2._object = (void *)0xEE0073746E656D75;
    v3.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v3.value._object = (void *)0xEB00000000656C62;
    v4._countAndFlagsBits = 0;
    v4._object = (void *)0xE000000000000000;
    v6._countAndFlagsBits = 0xD00000000000003CLL;
    v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v6);

    xmmword_10064CEA0 = (__int128)v5;
  }
  else
  {
    __break(1u);
  }
}

void sub_1000AD798(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = "\b";
  v4[1] = "\b";
  v4[2] = "\b";
  sub_1000B352C(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_1004E26D0;
    v4[5] = "\b";
    swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for DRIMainViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_10064EB20;
  if (!qword_10064EB20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DRIMainViewController);
  return result;
}

void sub_1000AD85C()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  unint64_t v5;
  __n128 v6;
  void *v7;
  id v8;
  id v9;

  v1 = v0;
  v9 = objc_msgSend(v0, "traitCollection");
  if (!DOCUsePadIdiomForTraits(v9))
    goto LABEL_5;
  v2 = objc_msgSend(v9, "horizontalSizeClass");

  if (v2 == (id)2)
  {
    v3 = swift_allocObject(&unk_1005DD670, 24, 7);
    swift_unknownObjectWeakInit(v3 + 16);
    v4 = objc_allocWithZone((Class)type metadata accessor for UIAppIntentInteraction(0));
    v5 = sub_1003222F0();
    v6 = swift_retain();
    v7 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for NavigateHistoryIntent, &unk_10064EBD8, v3, &type metadata for NavigateHistoryIntent, v5, v6);
    v8 = objc_msgSend(v1, "view");
    if (v8)
    {
      v9 = v8;
      objc_msgSend(v8, "addInteraction:", v7);
      swift_release(v3);

LABEL_5:
      return;
    }
    __break(1u);
  }
}

void sub_1000AD990()
{
  void *v0;
  void *v1;
  uint64_t v2;
  objc_class *v3;
  id v4;
  unint64_t v5;
  __n128 v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  __n128 v13;
  void *v14;
  id v15;
  id v16;

  v1 = v0;
  v2 = swift_allocObject(&unk_1005DD670, 24, 7);
  swift_unknownObjectWeakInit(v2 + 16);
  v3 = (objc_class *)type metadata accessor for UIAppIntentInteraction(0);
  v4 = objc_allocWithZone(v3);
  v5 = sub_100322128();
  v6 = swift_retain();
  v7 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for SearchFileShortcutsIntent, &unk_10064EB90, v2, &type metadata for SearchFileShortcutsIntent, v5, v6);
  v8 = objc_msgSend(v1, "view");
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v8, "addInteraction:", v7);
    swift_release(v2);

    v10 = swift_allocObject(&unk_1005DD670, 24, 7);
    swift_unknownObjectWeakInit(v10 + 16);
    v11 = objc_allocWithZone(v3);
    v12 = sub_1003221D0();
    v13 = swift_retain();
    v14 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for SearchFileAssistantIntent, &unk_10064EBA8, v10, &type metadata for SearchFileAssistantIntent, v12, v13);
    v15 = objc_msgSend(v1, "view");
    if (v15)
    {
      v16 = v15;
      objc_msgSend(v15, "addInteraction:", v14);
      swift_release(v10);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1000ADB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000ADB24(a1, a2, v2);
}

uint64_t sub_1000ADB24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, &v8, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = (void *)result;
    sub_10000F580((uint64_t)v9);

    v6 = v10;
    if (v10)
    {
      v7 = v11;
      sub_10007E7A0(v9, v10);
      (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
      return sub_100068588(v9);
    }
    else
    {
      return sub_10000CB4C((uint64_t)v9, &qword_10064EB50);
    }
  }
  return result;
}

void sub_1000ADBFC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  objc_class *v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;
  _QWORD v15[2];
  objc_super v16;

  v1 = v0;
  v2 = type metadata accessor for OSSignpostID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static os_signpost_type_t.event.getter(v6);
  v8 = *(id *)updatePointsOfInterestHandler.unsafeMutableAddressor();
  static OSSignpostID.exclusive.getter();
  v14 = 2;
  os_signpost(_:dso:log:name:signpostID:_:_:)(v7, &_mh_execute_header, v8, "Files-LifeCycle", 15, 2, v5, "viewDidLoad", 11, v14, _swiftEmptyArrayStorage);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v9 = (objc_class *)type metadata accessor for DRIMainViewController(0);
  v16.receiver = v1;
  v16.super_class = v9;
  objc_msgSendSuper2(&v16, "viewDidLoad");
  objc_msgSend(v1, "setAllowsDocumentCreation:", 0);
  objc_msgSend(v1, "setDelegate:", v1);
  v15[1] = v1;
  KeyPath = swift_getKeyPath(&unk_1004E27A8);
  v11 = swift_allocObject(&unk_1005DD670, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16);
  v12 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 5, sub_1000ADB1C, v11, &protocol witness table for NSObject);
  swift_release(v11);
  swift_release(KeyPath);
  v13 = *(void **)&v1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentLocationTitleObserver];
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentLocationTitleObserver] = v12;

}

id sub_1000ADDFC(uint64_t a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  char *v5;
  NSArray v6;
  id v7;
  objc_super v9;

  *(_QWORD *)&v1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewItemObserver] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentLocationTitleObserver] = 0;
  v3 = &v1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookURL];
  v4 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = &v1[OBJC_IVAR____TtC5Files21DRIMainViewController_quicklookStateRestorationActivityIdentifier];
  *(_QWORD *)v5 = 0xD000000000000024;
  *((_QWORD *)v5 + 1) = 0x8000000100527D80;
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Files21DRIMainViewController____lazy_storage___internalConfiguration] = 0;
  if (a1)
  {
    type metadata accessor for UTType(0);
    v6.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v6.super.isa = 0;
  }
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for DRIMainViewController(0);
  v7 = objc_msgSendSuper2(&v9, "initForOpeningContentTypes:", v6.super.isa);

  return v7;
}

uint64_t type metadata accessor for DOCTrashedItemsSource()
{
  return objc_opt_self(_TtC5Files21DOCTrashedItemsSource);
}

id sub_1000ADF2C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t countAndFlagsBits;
  id result;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String_optional v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC5Files21DOCTrashedItemsSource____lazy_storage____displayName);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files21DOCTrashedItemsSource____lazy_storage____displayName + 8);
  if (v2)
  {
    countAndFlagsBits = *v1;
LABEL_5:
    swift_bridgeObjectRetain(v2);
    return (id)countAndFlagsBits;
  }
  result = (id)_DocumentManagerBundle();
  if (result)
  {
    v5 = result;
    v6._countAndFlagsBits = 0xD00000000000001ALL;
    v11._countAndFlagsBits = 0xD000000000000037;
    v11._object = (void *)0x80000001005223B0;
    v6._object = (void *)0x8000000100522370;
    v7._object = (void *)0x8000000100522390;
    v8.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v8.value._object = (void *)0xEB00000000656C62;
    v7._countAndFlagsBits = 0xD000000000000010;
    v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v8, (NSBundle)v5, v7, v11);
    countAndFlagsBits = v9._countAndFlagsBits;

    v10 = v1[1];
    *(Swift::String *)v1 = v9;
    swift_bridgeObjectRetain(v9._object);
    swift_bridgeObjectRelease(v10);
    v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000AE048()
{
  unint64_t result;

  result = qword_100642B80;
  if (!qword_100642B80)
  {
    result = swift_getWitnessTable(&unk_1004D9D48, &type metadata for DOCSidebarSectionKind);
    atomic_store(result, (unint64_t *)&qword_100642B80);
  }
  return result;
}

unint64_t sub_1000AE08C()
{
  unint64_t result;

  result = qword_100641290;
  if (!qword_100641290)
  {
    result = swift_getWitnessTable(&unk_1004D9D80, &type metadata for DOCSidebarSectionKind);
    atomic_store(result, (unint64_t *)&qword_100641290);
  }
  return result;
}

uint64_t type metadata accessor for DOCSharedServerSource()
{
  return objc_opt_self(_TtC5Files21DOCSharedServerSource);
}

uint64_t type metadata accessor for DOCMutableSidebarData()
{
  return objc_opt_self(_TtC5Files21DOCMutableSidebarData);
}

unint64_t sub_1000AE110()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100649178;
  if (!qword_100649178)
  {
    v1 = type metadata accessor for DOCItemCollectionView();
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100649178);
  }
  return result;
}

id sub_1000AE158()
{
  char *v0;
  void *v1;
  id v2;

  v1 = *(void **)&v0[OBJC_IVAR____TtC5Files21DOCItemCollectionView_backgroundTapGestureRecognizer];
  objc_msgSend(v1, "addTarget:action:", v0, "_backgroundTapGestureRecognized:");
  objc_msgSend(v1, "setDelegate:", v0);
  objc_msgSend(v1, "setCancelsTouchesInView:", 0);
  objc_msgSend(v0, "addGestureRecognizer:", v1);
  v2 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  objc_msgSend(v0, "setBackgroundColor:", v2);

  return objc_msgSend(v0, "setClipsToBounds:", 1);
}

id sub_1000AE388()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC5Files21DOCItemCollectionCell____lazy_storage___renameGestureRecognizer;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files21DOCItemCollectionCell____lazy_storage___renameGestureRecognizer);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC5Files21DOCItemCollectionCell____lazy_storage___renameGestureRecognizer);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DOCButtonGestureRecognizer(0)), "initWithTarget:action:", v0, "renameGesture:");
    objc_msgSend(v4, "setDelegate:", v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_1000AE458(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UICellConfigurationState(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1004E8338;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t _s19BackgroundStateViewCMa(uint64_t a1)
{
  uint64_t result;

  result = qword_100654CE0;
  if (!qword_100654CE0)
    return swift_getSingletonMetadata(a1, &_s19BackgroundStateViewCMn);
  return result;
}

uint64_t type metadata accessor for DOCInteractionManager()
{
  return objc_opt_self(_TtC5Files21DOCInteractionManager);
}

id sub_1000AE5F8()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(NSMapTable), "mapTableWithKeyOptions:valueOptions:", 5, 0);
  qword_100643720 = (uint64_t)result;
  return result;
}

double sub_1000AE638(void *a1)
{
  uint64_t v1;
  void **v3;
  double result;
  void *v5;
  BOOL v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void **v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  _BYTE v22[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem);
  *(_QWORD *)&result = swift_beginAccess(v1 + OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem, v22, 0, 0).n128_u64[0];
  v5 = *v3;
  if (*v3)
    v6 = 1;
  else
    v6 = a1 == 0;
  if (!v6)
  {
    v7 = a1;
    v8 = *(id *)DOCLog.UI.unsafeMutableAddressor(v7);
    v9 = static os_log_type_t.info.getter();
    v10 = sub_10006922C((uint64_t *)&unk_100644560);
    v11 = swift_allocObject(v10, 72, 7);
    *(_OWORD *)(v11 + 16) = xmmword_1004D9670;
    *(_QWORD *)(v11 + 56) = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    *(_QWORD *)(v11 + 64) = sub_10010F470();
    *(_QWORD *)(v11 + 32) = v7;
    v12 = v7;
    os_log(_:dso:log:type:_:)("[Interaction] Clearing last opened item previous item: %@", 57, 2, &_mh_execute_header, v8, v9, v11);

    swift_bridgeObjectRelease(v11);
    v13 = (void **)(v1 + OBJC_IVAR____TtC5Files21DOCInteractionManager_lastSelectedItem);
    swift_beginAccess(v1 + OBJC_IVAR____TtC5Files21DOCInteractionManager_lastSelectedItem, &v21, 1, 0);
    v14 = *v13;
    *v13 = 0;
    sub_10010EDA8(v14);

    v5 = *v3;
  }
  if (v5)
  {
    v15 = v5;
    v16 = *(id *)DOCLog.UI.unsafeMutableAddressor(v15);
    v17 = static os_log_type_t.info.getter();
    v18 = sub_10006922C((uint64_t *)&unk_100644560);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_1004D9670;
    *(_QWORD *)(v19 + 56) = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    *(_QWORD *)(v19 + 64) = sub_10010F470();
    *(_QWORD *)(v19 + 32) = v15;
    v20 = v15;
    os_log(_:dso:log:type:_:)("[Interaction] Setting the last opened item: %@", 46, 2, &_mh_execute_header, v16, v17, v19);

    *(_QWORD *)&result = swift_bridgeObjectRelease(v19).n128_u64[0];
  }
  return result;
}

_BYTE *sub_1000AE894()
{
  _BYTE *result;

  result = sub_1000AE8B0();
  static DOCFileProviderSource.searchSource = (uint64_t)result;
  return result;
}

_BYTE *sub_1000AE8B0()
{
  void *v0;
  void *v1;
  id v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v0 = (void *)DOCSpotlightEnumeratedItemIdentifierSearch;
  v1 = (void *)DOCDocumentSourceIdentifierSearch;
  v2 = objc_allocWithZone((Class)type metadata accessor for DOCFileProviderSource());
  v3 = sub_10004D90C(v0, v1);
  v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_requiresCustomEnumerationProperties] = 1;
  v4 = *(_QWORD *)&v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_sortingModes];
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_sortingModes] = &off_1005BFCE8;
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)&v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_availableDisplayModes];
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_availableDisplayModes] = &off_1005BFD10;
  swift_bridgeObjectRelease(v5);
  return v3;
}

_BYTE *sub_1000AEA08()
{
  _BYTE *result;

  result = sub_1000AEA24();
  qword_100672B48 = (uint64_t)result;
  return result;
}

_BYTE *sub_1000AEA24()
{
  void *v0;
  void *v1;
  id v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;

  v0 = (void *)DOCSpotlightEnumeratedItemIdentifierRecentDocuments;
  v1 = (void *)DOCDocumentSourceIdentifierRecentDocuments;
  v2 = objc_allocWithZone((Class)type metadata accessor for DOCFileProviderSource());
  v3 = sub_10004D90C(v0, v1);
  v4 = OBJC_IVAR____TtC5Files21DOCFileProviderSource_defaultSorting;
  v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_defaultSorting] = 1;
  v5 = *(_QWORD *)&v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_sortingModes];
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_sortingModes] = &off_1005C0160;
  swift_bridgeObjectRelease(v5);
  v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_defaultGroupingMode] = v3[v4];
  v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_requiresCustomEnumerationProperties] = 1;
  v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_supportsImportInDefaultSaveLocation] = 1;
  return v3;
}

void sub_1000AEADC()
{
  void *v0;
  void *v1;
  id v2;
  _BYTE *v3;
  uint64_t v4;

  v0 = (void *)DOCSpotlightEnumeratedItemIdentifierTaggedItems;
  v1 = (void *)DOCDocumentSourceIdentifierTaggedItems;
  v2 = objc_allocWithZone((Class)type metadata accessor for DOCFileProviderSource());
  v3 = sub_10004D90C(v0, v1);
  v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_requiresCustomEnumerationProperties] = 1;
  v4 = *(_QWORD *)&v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_sortingModes];
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_sortingModes] = &off_1005C0188;
  swift_bridgeObjectRelease(v4);
  qword_100672B58 = (uint64_t)v3;
}

_BYTE *sub_1000AEB70()
{
  _BYTE *result;

  result = sub_1000AEB8C();
  qword_100672B50 = (uint64_t)result;
  return result;
}

_BYTE *sub_1000AEB8C()
{
  void *v0;
  void *v1;
  _QWORD *v2;
  _BYTE *v3;
  uint64_t v4;

  v0 = (void *)DOCSpotlightEnumeratedItemIdentifierSharedItems;
  v1 = (void *)DOCDocumentSourceIdentifierSharedItems;
  v2 = (char *)objc_allocWithZone((Class)type metadata accessor for DOCSharedDocumentsSource())
     + OBJC_IVAR____TtC5Files24DOCSharedDocumentsSource____lazy_storage____displayName;
  *v2 = 0;
  v2[1] = 0;
  v3 = sub_10004D90C(v0, v1);
  v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_defaultSorting] = 1;
  v4 = *(_QWORD *)&v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_sortingModes];
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_sortingModes] = &off_1005C01B0;
  swift_bridgeObjectRelease(v4);
  v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_groupingEnabledByDefault] = 0;
  v3[OBJC_IVAR____TtC5Files21DOCFileProviderSource_requiresCustomEnumerationProperties] = 1;
  return v3;
}

void sub_1000AEC44(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10064A480)
  {
    v2 = type metadata accessor for DOCBrowserHistoryItem(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10064A480);
  }
}

uint64_t sub_1000AEC98(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = "\b";
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = &unk_1004E8C50;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t DOCAppearStateTracker.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 19, 7);
}

uint64_t type metadata accessor for DOCAppearStateTracker()
{
  return objc_opt_self(_TtC5Files21DOCAppearStateTracker);
}

uint64_t sub_1000AED60(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 256, 0, v2, a1 + 360);
}

uint64_t type metadata accessor for DOCSidebarHeaderCell(uint64_t a1)
{
  uint64_t result;

  result = qword_10064C4F8;
  if (!qword_10064C4F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DOCSidebarHeaderCell);
  return result;
}

uint64_t sub_1000AEDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t type metadata accessor for DOCOperationProgress.ObservedEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007E804(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DOCOperationProgress.ObservedEvent);
}

uint64_t type metadata accessor for DOCLazyActionManager()
{
  return objc_opt_self(_TtC5Files20DOCLazyActionManager);
}

uint64_t storeEnumTagSinglePayload for DOCCollectionSection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DOCCollectionSection(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1000AEE94(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

ValueMetadata *type metadata accessor for DOCCollectionSection()
{
  return &type metadata for DOCCollectionSection;
}

unint64_t sub_1000AEED8()
{
  unint64_t result;

  result = qword_10064CD28;
  if (!qword_10064CD28)
  {
    result = swift_getWitnessTable(&unk_1004E0910, &type metadata for DOCCollectionSection);
    atomic_store(result, (unint64_t *)&qword_10064CD28);
  }
  return result;
}

unint64_t sub_1000AEF1C()
{
  unint64_t result;

  result = qword_100646A00;
  if (!qword_100646A00)
  {
    result = swift_getWitnessTable(&unk_1004E08D0, &type metadata for DOCCollectionSection);
    atomic_store(result, (unint64_t *)&qword_100646A00);
  }
  return result;
}

uint64_t type metadata accessor for BrowserSceneDelegate()
{
  return objc_opt_self(_TtC5Files20BrowserSceneDelegate);
}

id sub_1000AEFA0()
{
  char *v0;
  char *v1;
  char *v2;
  char *v3;
  objc_super v5;

  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files20BrowserSceneDelegate_window] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files20BrowserSceneDelegate_viewController] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files20BrowserSceneDelegate_fileImportController] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files20BrowserSceneDelegate_sourceOrderObserver] = 0;
  v1 = &v0[OBJC_IVAR____TtC5Files20BrowserSceneDelegate_newWindowActivityIdentifier];
  *(_QWORD *)v1 = 0xD000000000000024;
  *((_QWORD *)v1 + 1) = 0x8000000100519C30;
  v2 = &v0[OBJC_IVAR____TtC5Files20BrowserSceneDelegate_stateRestorationActivityIdentifier];
  *(_QWORD *)v2 = 0xD000000000000026;
  *((_QWORD *)v2 + 1) = 0x8000000100519C60;
  v3 = &v0[OBJC_IVAR____TtC5Files20BrowserSceneDelegate_stateRestorationURLKey];
  *(_QWORD *)v3 = 0xD00000000000002BLL;
  *((_QWORD *)v3 + 1) = 0x8000000100519C90;
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for BrowserSceneDelegate();
  return objc_msgSendSuper2(&v5, "init");
}

void sub_1000AF070()
{
  sub_1000138D8();
}

id sub_1000AF124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  id v5;
  unsigned int v6;
  uint64_t v7;
  id v8;
  id result;
  void *v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  void *object;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSString v19;
  NSString v20;
  void *v21;
  uint64_t v22;
  id v23;
  NSString v24;
  id v25;
  id v26;
  unsigned int v27;
  void *v28;
  void *v29;
  id v30;
  Class isa;
  char **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  id v46;
  id v47;
  id v48;
  Class v49;
  id v50;
  void **aBlock;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  void *v54;
  void *v55;
  uint64_t v56;
  Swift::String v57;

  v0 = type metadata accessor for UTType(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (void *)objc_opt_self(UIApplication);
  v5 = objc_msgSend(v4, "sharedApplication");
  v6 = objc_msgSend(v5, "supportsMultipleScenes");

  v8 = 0;
  if (!v6)
    return v8;
  result = (id)_DocumentManagerBundle(v7);
  if (result)
  {
    v10 = result;
    v57._countAndFlagsBits = 0xD000000000000043;
    v57._object = (void *)0x80000001005197D0;
    v11._object = (void *)0x80000001005197B0;
    v11._countAndFlagsBits = 0xD000000000000012;
    v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v12.value._object = (void *)0xEB00000000656C62;
    v13._countAndFlagsBits = 0xD000000000000012;
    v13._object = (void *)0x80000001005197B0;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v57)._object;

    static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserActionIdentifierNewWindow);
    v16 = v15;
    v17 = swift_allocObject(&unk_1005D2310, 24, 7);
    swift_unknownObjectWeakInit(v17 + 16);
    v18 = objc_allocWithZone((Class)UIDocumentBrowserAction);
    swift_retain();
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v55 = sub_10021C060;
    v56 = v17;
    aBlock = _NSConcreteStackBlock;
    v52 = 1107296256;
    v53 = sub_1003A7858;
    v54 = &unk_1005D27B0;
    v21 = _Block_copy(&aBlock);
    v8 = objc_msgSend(v18, "initWithIdentifier:localizedTitle:resolvedHandler:", v19, v20, v21);

    _Block_release(v21);
    v22 = v56;
    swift_release(v17);
    swift_release(v22);
    if (v8)
    {
      objc_msgSend(v8, "setMenuSortOrder:", 8);
      objc_msgSend(v8, "setAvailability:", 1);
      objc_msgSend(v8, "setSupportsMultipleItems:", 0);
      v23 = v8;
      v24 = String._bridgeToObjectiveC()();
      v25 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v24);

      objc_msgSend(v23, "setImage:", v25);
    }
    v26 = objc_msgSend(v4, "sharedApplication");
    v27 = objc_msgSend(v26, "supportsMultipleScenes");

    if (v27)
    {
      if (v8)
      {
        v55 = sub_100119C7C;
        v56 = 0;
        aBlock = _NSConcreteStackBlock;
        v52 = 1107296256;
        v53 = sub_100068430;
        v54 = &unk_1005D2800;
        v28 = _Block_copy(&aBlock);
        v29 = (void *)objc_opt_self(NSPredicate);
        v30 = v8;
        isa = (Class)objc_msgSend(v29, "predicateWithBlock:", v28);
        _Block_release(v28);
        swift_release(v56);
        v32 = &selRef_setFilteringPredicate_;
LABEL_10:
        objc_msgSend(v8, *v32, isa);

      }
    }
    else if (v8)
    {
      v33 = sub_10006922C(&qword_100643CC0);
      v34 = swift_allocObject(v33, 48, 7);
      *(_OWORD *)(v34 + 16) = xmmword_1004D9670;
      v35 = static UTType.folder.getter(v8);
      v36 = UTType.identifier.getter(v35);
      v38 = v37;
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      *(_QWORD *)(v34 + 32) = v36;
      *(_QWORD *)(v34 + 40) = v38;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v34);
      v32 = &selRef_setSupportedContentTypes_;
      goto LABEL_10;
    }
    v55 = sub_10020D0D8;
    v56 = 0;
    aBlock = _NSConcreteStackBlock;
    v52 = 1107296256;
    v53 = sub_100068430;
    v54 = &unk_1005D27D8;
    v39 = _Block_copy(&aBlock);
    v40 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithBlock:", v39);
    _Block_release(v39);
    swift_release(v56);
    if (v8)
    {
      v41 = objc_msgSend(v8, "filteringPredicate");
      if (v41)
      {
        v42 = v41;
        v43 = sub_10006922C((uint64_t *)&unk_1006441A0);
        v44 = swift_allocObject(v43, 48, 7);
        *(_OWORD *)(v44 + 16) = xmmword_1004DA350;
        *(_QWORD *)(v44 + 32) = v42;
        *(_QWORD *)(v44 + 40) = v40;
        aBlock = (void **)v44;
        specialized Array._endMutation()(v44);
        v45 = aBlock;
        sub_10004F2F0(0, (unint64_t *)&unk_100647BD0, NSPredicate_ptr);
        v46 = v8;
        v47 = v42;
        v48 = v40;
        v49 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v45);
        v50 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", v49);

        objc_msgSend(v46, "setFilteringPredicate:", v50);
        v40 = v47;
      }
      else
      {
        v48 = v8;
        objc_msgSend(v48, "setFilteringPredicate:", v40);
      }

    }
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000AF76C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[2] = &unk_1004EB638;
  v4[3] = &unk_1004EB638;
  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = &unk_1004EB688;
    v4[6] = &unk_1004EB6A0;
    result = swift_initClassMetadata2(a1, 0, 7, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for DOCValueChangePacer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007E804(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DOCValueChangePacer);
}

void sub_1000AF824()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  void (*v7)(uint64_t, __n128);
  uint64_t v8;
  __n128 v9;

  v1 = *(_QWORD *)(v0 + 96);
  if (v1)
    objc_msgSend(*(id *)(v1 + 16), "invalidate");
  v2 = *(void **)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  v5 = *(_BYTE *)(v0 + 88);
  *(_BYTE *)(v0 + 88) = -1;
  sub_1000B1664(v2, v3, v4, v5);
  v6 = *(_QWORD *)(v0 + 96);
  if (v6)
  {
    *(_QWORD *)(v0 + 96) = 0;
    swift_release(v6);
    v7 = *(void (**)(uint64_t, __n128))(v0 + 48);
    if (v7)
    {
      v8 = *(_QWORD *)(v0 + 56);
      v9 = swift_retain();
      v7(v0, v9);
      sub_100087534((uint64_t)v7, v8);
    }
  }
}

uint64_t type metadata accessor for DOCStatusFooterView()
{
  return objc_opt_self(_TtC5Files19DOCStatusFooterView);
}

double sub_1000AF8E4()
{
  double result;

  result = 40.0;
  __asm { FMOV            V1.2D, #20.0 }
  xmmword_100645A80 = xmmword_1004DBFE0;
  *(_OWORD *)&qword_100645A90 = _Q1;
  return result;
}

void sub_1000AF900(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *Strong;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;

  v3 = v2;
  v4 = sub_1000AFA68(a1, a2);
  v6 = OBJC_IVAR____TtC5Files19DOCStatusFooterView_syncStateFooterView;
  v7 = *(_QWORD *)&v2[OBJC_IVAR____TtC5Files19DOCStatusFooterView_syncStateFooterView];
  if ((v4 & 1) != 0)
  {
    if (!v7)
    {
      v10 = *(void **)(*(_QWORD *)&v2[OBJC_IVAR____TtC5Files19DOCStatusFooterView_itemCollectionConfiguration]
                     + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain);
      if (v10)
      {
        Strong = (void *)swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC5Files19DOCStatusFooterView_nodeCollection], v5);
        v12 = type metadata accessor for DOCFileProviderSyncStateFooterViewModel(0);
        swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
        v13 = v10;
        v14 = sub_10008DD44(v13, (uint64_t)Strong);

        v15 = objc_allocWithZone((Class)type metadata accessor for DOCFileProviderSyncStateFooterView());
        swift_retain(v14);
        v17 = sub_10040F428(v16);
        v18 = *(void **)&v2[v6];
        *(_QWORD *)&v3[v6] = v17;
        v19 = v17;

        sub_1000415D4();
        swift_release(v14);

      }
    }
  }
  else
  {
    if (v7 && (objc_msgSend(v2, "removeArrangedSubview:"), (v8 = *(void **)&v2[v6]) != 0))
    {
      objc_msgSend(v8, "removeFromSuperview");
      v9 = *(void **)&v2[v6];
    }
    else
    {
      v9 = 0;
    }
    *(_QWORD *)&v2[v6] = 0;

    sub_1000415D4();
  }
}

id sub_1000AFA68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *Strong;
  void *v4;
  id v5;
  unsigned __int8 v6;
  id result;

  Strong = (char *)swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC5Files19DOCStatusFooterView_nodeCollection, a2);
  if (Strong)
  {
    v4 = Strong;
    if ((Strong[OBJC_IVAR____TtC5Files17DOCNodeCollection_type + 16] & 1) != 0)
    {

    }
    else
    {
      v5 = *(id *)&Strong[OBJC_IVAR____TtC5Files17DOCNodeCollection_type];
      v6 = objc_msgSend(v5, "doc_displaysSearchResults");

      if ((v6 & 1) != 0)
        return 0;
    }
  }
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC5Files19DOCStatusFooterView_displayMode) != 2
    || (result = *(id *)(v2 + OBJC_IVAR____TtC5Files19DOCStatusFooterView_folderNode)) != 0
    && (result = objc_msgSend(result, "isRootItem"), (_DWORD)result))
  {
    result = *(id *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC5Files19DOCStatusFooterView_itemCollectionConfiguration)
                   + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain);
    if (result)
      return objc_msgSend(result, "isSyncStateMessagingSupported");
  }
  return result;
}

void sub_1000AFB50()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  id v10;
  Swift::String v11;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC5Files19DOCStatusFooterView_folderNode);
  if (v1)
  {
    v2 = objc_msgSend(v1, "isWritable");
    if ((v2 & 1) == 0)
    {
      v3 = (id)_DocumentManagerBundle(v2);
      if (v3)
      {
        v4 = v3;
        v11._object = (void *)0x80000001005134E0;
        v5._countAndFlagsBits = 0x6C6E4F2D64616552;
        v5._object = (void *)0xE900000000000079;
        v6.value._countAndFlagsBits = 0x617A696C61636F4CLL;
        v6.value._object = (void *)0xEB00000000656C62;
        v7._countAndFlagsBits = 0;
        v7._object = (void *)0xE000000000000000;
        v11._countAndFlagsBits = 0xD000000000000054;
        v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v11);

        v9 = sub_1000159B4();
        v10 = objc_msgSend(v9, "font");

        if (v10)
        {
          sub_10004F2F0(0, (unint64_t *)&qword_100643F10, NSMutableAttributedString_ptr);
          sub_10040792C(v8._countAndFlagsBits, (uint64_t)v8._object, 0x732E6C69636E6570, 0xEC0000006873616CLL, v10, 0, 1);
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
    }
  }
}

char *sub_1000AFCA4(id a1, void *a2, _OWORD *a3)
{
  id v6;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 && (objc_msgSend(a1, "isFolder") & 1) == 0)
  {
    v8 = objc_msgSend(a1, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v13 = *(id *)DOCLog.UI.unsafeMutableAddressor(v12);
    v14 = static os_log_type_t.fault.getter();
    v15 = sub_10006922C((uint64_t *)&unk_100644560);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_1004D9670;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_10006A638();
    *(_QWORD *)(v16 + 32) = v9;
    *(_QWORD *)(v16 + 40) = v11;
    os_log(_:dso:log:type:_:)("Attempt to create DOCStatusFooterView with illegal DOCNode = %@", 63, 2, &_mh_execute_header, v13, v14, v16);

    swift_bridgeObjectRelease(v16);
    sub_100029224((uint64_t)a3);
    swift_unknownObjectRelease(a1);

    return 0;
  }
  else
  {
    v6 = objc_allocWithZone((Class)type metadata accessor for DOCStatusFooterView());
    return sub_10002E5A0((uint64_t)a1, a2, a3);
  }
}

uint64_t sub_1000AFDEC()
{
  return sub_1000AFDF4();
}

uint64_t sub_1000AFDF4()
{
  return sub_100015074();
}

void sub_1000AFE14()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC5Files19DOCStatusFooterView_isListeningToProviderSyncStateUpdates) & 1) == 0)
  {
    v1 = v0;
    v2 = *(char **)(v0 + OBJC_IVAR____TtC5Files19DOCStatusFooterView_syncStateFooterView);
    if (v2)
    {
      *(_BYTE *)(v1 + OBJC_IVAR____TtC5Files19DOCStatusFooterView_isListeningToProviderSyncStateUpdates) = 1;
      v3 = *(_QWORD *)&v2[OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateFooterView_viewModel];
      *(_QWORD *)(v3 + 24) = &off_1005E9A78;
      swift_unknownObjectWeakAssign(v3 + 16, v2);
      v7 = v2;
      swift_retain();
      sub_100020270(v4, v5);
      swift_release(v3);
      v6 = &v7[OBJC_IVAR____TtC5Files34DOCFileProviderSyncStateFooterView_delegate];
      *((_QWORD *)v6 + 1) = &off_1005CB9E8;
      swift_unknownObjectWeakAssign(v6, v1);

    }
  }
}

id sub_1000AFEEC(void *a1, uint64_t a2, SEL *a3)
{
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for DOCSearchController();
  return objc_msgSendSuper2(&v5, *a3);
}

void sub_1000AFF30(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BYTE *v4;
  char v5;
  id v6;

  v2 = OBJC_IVAR____TtC5Files19DOCSearchController_suggestionsPlacement;
  v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC5Files19DOCSearchController_suggestionsPlacement);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC5Files19DOCSearchController_suggestionsPlacement) = a1 & 1;
  if (((((a1 & 1) == 0) ^ v3) & 1) == 0)
  {
    sub_10045D010();
    if ((*(_BYTE *)(v1 + v2) & 1) != 0)
    {
      v4 = *(_BYTE **)(v1 + OBJC_IVAR____TtC5Files19DOCSearchController_resultCollectionViewController);
      sub_10017B834(0);
      v5 = v4[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_contentUnavailableUIAllowed];
      v4[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_contentUnavailableUIAllowed] = 1;
      if ((v5 & 1) == 0)
        objc_msgSend(v4, "docSetNeedsUpdateContentUnavailableConfiguration");
      sub_1000968DC();
      v6 = sub_10001F69C();
      sub_10005897C(v6, 0, 0, 1, 1);

    }
  }
}

void sub_1000B00CC(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t Strong;
  double v4;
  id v5;
  uint64_t v6;

  v2 = &v1[OBJC_IVAR____TtC5Files19DOCSearchController_presentationDelegate];
  swift_unknownObjectWeakAssign(&v1[OBJC_IVAR____TtC5Files19DOCSearchController_presentationDelegate], a1);
  if (qword_100641180 != -1)
    swift_once(&qword_100641180, sub_10009EEE4);
  if ((byte_1006565B0 & 1) == 0)
  {
    Strong = swift_unknownObjectWeakLoadStrong(v2);
    *(_QWORD *)&v4 = swift_unknownObjectRelease(Strong).n128_u64[0];
    if (Strong)
    {
      v5 = objc_msgSend(v1, "presentingViewController", v4);

      if (!v5)
        sub_100012D88(1, v6);
    }
  }
}

void sub_1000B0178(int a1)
{
  char *v1;
  char *v2;
  int v3;
  char v4;
  _BYTE *v5;

  v2 = &v1[OBJC_IVAR____TtC5Files19DOCSearchController_layoutConfiguration];
  v3 = v1[OBJC_IVAR____TtC5Files19DOCSearchController_layoutConfiguration + 1];
  if (((a1 ^ v1[OBJC_IVAR____TtC5Files19DOCSearchController_layoutConfiguration]) & 1) != 0
    || v3 != BYTE1(a1)
    || ((v2[2] ^ ((a1 & 0x10000u) >> 16)) & 1) != 0)
  {
    objc_msgSend(v1, "setHidesNavigationBarDuringPresentation:", v3 == 0);
    if (v2[1])
    {
      if (v2[1] == 1)
        v4 = *v2 ^ 1;
      else
        v4 = 0;
    }
    else
    {
      v4 = 1;
    }
    objc_msgSend(v1, "setAutomaticallyShowsCancelButton:", v4 & 1);
    v5 = sub_10000860C();
    v5[OBJC_IVAR____TtC5Files32DOCSearchControllerStackedLayout_canShowAppMenuButton] = v2[1] != 2;

    sub_1000AFF30(v2[2]);
  }
}

id sub_1000B0268(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

id sub_1000B0278()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithScale:", 3);
  qword_100672EF8 = (uint64_t)result;
  return result;
}

uint64_t sub_1000B02B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001CE90C);
}

uint64_t sub_1000B02C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001CE890);
}

uint64_t sub_1000B02CC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for ScrollPositionInfo.ItemOffset(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1004DC3C0;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ScrollPositionInfo(uint64_t a1)
{
  return sub_10006BDA4(a1, qword_100646918, (uint64_t)&nominal type descriptor for ScrollPositionInfo);
}

uint64_t sub_1000B0360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001CED08);
}

uint64_t sub_1000B036C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001CEC8C);
}

uint64_t sub_1000B0378(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\b";
  result = type metadata accessor for IndexPath(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000B03F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D224C);
}

uint64_t sub_1000B0404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D21C0);
}

uint64_t sub_1000B0410(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for ScrollPositionInfo(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = " ";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for RestorableSettings(uint64_t a1)
{
  return sub_10006BDA4(a1, qword_100646D88, (uint64_t)&nominal type descriptor for RestorableSettings);
}

uint64_t sub_1000B0494(uint64_t a1)
{
  _QWORD v2[17];

  v2[0] = &unk_1004E5598;
  v2[1] = &unk_1004E55B0;
  v2[2] = &unk_1004E55B0;
  v2[3] = &unk_1004E55C8;
  v2[4] = &unk_1004E55E0;
  v2[5] = &unk_1004E55E0;
  v2[6] = &unk_1004E55E0;
  v2[7] = &unk_1004E55E0;
  v2[8] = &unk_1004E55E0;
  v2[9] = &unk_1004E55E0;
  v2[10] = &unk_1004E55F8;
  v2[11] = &unk_1004E55E0;
  v2[12] = &unk_1004E55E0;
  v2[13] = &unk_1004E55E0;
  v2[14] = &unk_1004E55F8;
  v2[15] = &unk_1004E55E0;
  v2[16] = &unk_1004E55B0;
  return swift_initClassMetadata2(a1, 256, 17, v2, a1 + 360);
}

uint64_t type metadata accessor for DOCSidebarItemCell(uint64_t a1)
{
  return sub_10006BDA4(a1, qword_100651140, (uint64_t)&nominal type descriptor for DOCSidebarItemCell);
}

uint64_t type metadata accessor for DOCDocumentManager()
{
  return objc_opt_self(_TtC5Files18DOCDocumentManager);
}

ValueMetadata *type metadata accessor for DOCDebugUIScenario()
{
  return &type metadata for DOCDebugUIScenario;
}

uint64_t type metadata accessor for DOCViewController()
{
  return objc_opt_self(_TtC5Files17DOCViewController);
}

void sub_1000B0724(void *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  char **v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t Strong;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ObjectType;
  uint64_t v34;
  char **v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = Logger.Enumeration.unsafeMutableAddressor(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
  v10 = v1;
  v11 = a1;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, (os_log_type_t)v13))
  {
    v36 = v13;
    v38 = v5;
    v39 = v4;
    v14 = swift_slowAlloc(42, -1);
    v15 = (char **)swift_slowAlloc(8, -1);
    v37 = swift_slowAlloc(64, -1);
    v41 = v37;
    *(_DWORD *)v14 = 136446978;
    v16 = *(_QWORD *)&v10[OBJC_IVAR____TtC5Files17DOCNodeCollection_logPrefix + 8];
    if (!v16)
    {

      __break(1u);
      os_unfair_lock_unlock(v2);
      __break(1u);
      return;
    }
    v17 = *(_QWORD *)&v10[OBJC_IVAR____TtC5Files17DOCNodeCollection_logPrefix];
    swift_bridgeObjectRetain(*(_QWORD *)&v10[OBJC_IVAR____TtC5Files17DOCNodeCollection_logPrefix + 8]);
    v40 = sub_1000544FC(v17, v16, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v14 + 12) = 2082;
    v40 = sub_1000544FC(0xD00000000000002ELL, 0x8000000100512790, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
    *(_WORD *)(v14 + 22) = 2112;
    v40 = (uint64_t)v10;
    v18 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);
    v35 = v15;
    *v15 = v10;

    *(_WORD *)(v14 + 32) = 2048;
    v19 = *(os_unfair_lock_s **)&v11[OBJC_IVAR____TtC5Files23DOCFileSystemCollection_stateLock];
    __chkstk_darwin(v20);
    *(&v35 - 2) = (char **)v11;
    swift_retain(v19);
    os_unfair_lock_lock(v19 + 4);
    sub_10006A67C((_QWORD *(*)(uint64_t *__return_ptr))sub_100003990, &v40);
    os_unfair_lock_unlock(v19 + 4);
    v21 = v40;
    swift_release(v19);
    if ((unint64_t)v21 >> 62)
    {
      if (v21 < 0)
        v34 = v21;
      else
        v34 = v21 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v21);
      v22 = _CocoaArrayWrapper.endIndex.getter(v34);

      swift_bridgeObjectRelease(v21);
    }
    else
    {
      v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);

    }
    v23 = v39;
    swift_bridgeObjectRelease(v21);
    v40 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41);

    _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)v36, "%{public}s %{public}s DOCNodeCollection (%@) reload with nodes: %ld", (uint8_t *)v14, 0x2Au);
    v24 = sub_10006922C(&qword_100643AB0);
    v25 = v35;
    swift_arrayDestroy(v35, 1, v24);
    swift_slowDealloc(v25, -1, -1);
    v26 = v37;
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v23);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  v28 = &v10[OBJC_IVAR____TtC5Files17DOCNodeCollection_delegate];
  Strong = swift_unknownObjectWeakLoadStrong(&v10[OBJC_IVAR____TtC5Files17DOCNodeCollection_delegate], v27);
  if (Strong)
  {
    v31 = Strong;
    v32 = *((_QWORD *)v28 + 1);
    ObjectType = swift_getObjectType(Strong, v30);
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 8))(v10, ObjectType, v32);
    swift_unknownObjectRelease(v31);
  }
}

void sub_1000B0B94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100003ABC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_1000B0BAC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = Logger.Enumeration.unsafeMutableAddressor(v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v6, v1);
  v7 = v0;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v24 = v1;
    v10 = swift_slowAlloc(32, -1);
    v22 = (_QWORD *)swift_slowAlloc(8, -1);
    v23 = swift_slowAlloc(64, -1);
    v26 = v23;
    *(_DWORD *)v10 = 136446722;
    v11 = *(_QWORD *)&v7[OBJC_IVAR____TtC5Files17DOCNodeCollection_logPrefix + 8];
    if (!v11)
    {

      __break(1u);
      return;
    }
    v12 = *(_QWORD *)&v7[OBJC_IVAR____TtC5Files17DOCNodeCollection_logPrefix];
    swift_bridgeObjectRetain(*(_QWORD *)&v7[OBJC_IVAR____TtC5Files17DOCNodeCollection_logPrefix + 8]);
    v25 = sub_1000544FC(v12, v11, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v10 + 12) = 2082;
    v25 = sub_1000544FC(0xD00000000000001ALL, 0x8000000100512870, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    *(_WORD *)(v10 + 22) = 2112;
    v25 = (uint64_t)v7;
    v13 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    v14 = v22;
    *v22 = v7;

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s %{public}s DOCNodeCollection (%@)", (uint8_t *)v10, 0x20u);
    v15 = sub_10006922C(&qword_100643AB0);
    swift_arrayDestroy(v14, 1, v15);
    swift_slowDealloc(v14, -1, -1);
    v16 = v23;
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v24);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  sub_10003498C();
  v17 = *(void **)&v7[OBJC_IVAR____TtC5Files17DOCNodeCollection_type];
  if ((v7[OBJC_IVAR____TtC5Files17DOCNodeCollection_type + 16] & 1) != 0)
  {
    v18 = *(_QWORD *)&v7[OBJC_IVAR____TtC5Files17DOCNodeCollection_type + 8];
    v19 = v17;
    sub_10000820C();
    sub_100008A60(v17, v18, 1);
  }
  else
  {
    v20 = v17;
    objc_msgSend(v20, "doc_startObservationIfNeeded");

  }
}

id sub_1000B0EFC(void *a1, uint64_t a2, char a3)
{
  id v4;

  if ((a3 & 1) == 0)
  {
    v4 = a1;
    swift_unknownObjectRetain(a2);
    a1 = v4;
  }
  return a1;
}

void sub_1000B0F28()
{
  sub_1000188A4(0xD00000000000002ALL, 0x8000000100512760);
}

uint64_t type metadata accessor for DOCTipsFamilyTip()
{
  return objc_opt_self(_TtC5Files16DOCTipsFamilyTip);
}

uint64_t sub_1000B0F84(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for DOCTipsFamilyTip();
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B0FC0(uint64_t a1)
{
  return sub_1000B0FE0(a1, qword_100652748, 0x746C75644173692BLL, 0xE800000000000000);
}

uint64_t sub_1000B0FE0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v10;

  v7 = sub_10006922C(&qword_100646A10);
  sub_10007E874(v7, a2);
  sub_10007E788(v7, (uint64_t)a2);
  v8 = type metadata accessor for DOCTipsFamilyTip();
  v10 = 0;
  return Tips.Parameter.init<A>(_:_:_:_:)(v8, a3, a4, &v10, _swiftEmptyArrayStorage, &type metadata for Bool, v8, &protocol witness table for Bool, &protocol witness table for Bool);
}

uint64_t sub_1000B1080(uint64_t a1)
{
  return sub_1000B0FE0(a1, qword_100652730, 0xD000000000000019, 0x800000010052F2F0);
}

uint64_t sub_1000B10A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  id v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 v10;

  v0 = sub_10006922C(&qword_100646A10);
  sub_10007E874(v0, qword_100652718);
  sub_10007E788(v0, (uint64_t)qword_100652718);
  static String._unconditionallyBridgeFromObjectiveC(_:)(DOCDefaultsSuiteName);
  v2 = v1;
  v3 = objc_allocWithZone((Class)NSUserDefaults);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "initWithSuiteName:", v4, swift_bridgeObjectRelease(v2).n128_f64[0]);

  if (v5)
  {
    v6 = DOCUserDefaultsKeyIsSharingFolderWithAdultFamilyMember;
    v7 = objc_msgSend(v5, "BOOLForKey:", v6);

  }
  else
  {
    v7 = 1;
  }
  v8 = type metadata accessor for DOCTipsFamilyTip();
  v10 = v7;
  return Tips.Parameter.init<A>(_:_:_:_:)(v8, 0xD000000000000025, 0x800000010052F310, &v10, _swiftEmptyArrayStorage, &type metadata for Bool, v8, &protocol witness table for Bool, &protocol witness table for Bool);
}

void sub_1000B1284(void *a1)
{
  char *v1;
  char *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  char v8;
  id v9;

  v2 = v1;
  v3 = a1;
  v4 = OBJC_IVAR____TtC5Files16DOCNavigationBar_overrideScrollEdgeAppearance;
  v5 = *(void **)&v2[OBJC_IVAR____TtC5Files16DOCNavigationBar_overrideScrollEdgeAppearance];
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Files16DOCNavigationBar_overrideScrollEdgeAppearance] = a1;
  v9 = a1;
  if (!v3)
  {
    if (!v5)
    {
LABEL_8:
      v6 = v5;
      goto LABEL_9;
    }
    v3 = 0;
LABEL_7:
    objc_msgSend(v2, "setScrollEdgeAppearance:", v3);
    goto LABEL_8;
  }
  if (!v5)
    goto LABEL_7;
  sub_10004F2F0(0, &qword_1006583F8, UINavigationBarAppearance_ptr);
  v6 = v5;
  v7 = v9;
  v8 = static NSObject.== infix(_:_:)(v7, v6);

  if ((v8 & 1) == 0)
  {
    v3 = *(void **)&v2[v4];
    goto LABEL_7;
  }
LABEL_9:

}

NSString sub_1000B1354()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1006726A0 = (uint64_t)result;
  return result;
}

uint64_t sub_1000B1388(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  v5[0] = "(";
  v5[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for DOCProgressProvidingOperationIconType(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for DOCFileOperation(uint64_t a1)
{
  uint64_t result;

  result = qword_100652530;
  if (!qword_100652530)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DOCFileOperation);
  return result;
}

uint64_t type metadata accessor for DOCBarButtonItem()
{
  return objc_opt_self(_TtC5Files16DOCBarButtonItem);
}

uint64_t sub_1000B1534(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files16DOCActionManager_actions);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files16DOCActionManager_actions) = a1;
  return swift_bridgeObjectRelease(v2);
}

void sub_1000B1590(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = "\b";
  v4[1] = &unk_1004DAC50;
  v4[2] = &unk_1004DAC68;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1000B352C(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = &unk_1004DAC68;
    v4[8] = &unk_1004DAC68;
    swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for DOCTipsManager(uint64_t a1)
{
  return sub_10006BDA4(a1, (uint64_t *)&unk_100643A08, (uint64_t)&nominal type descriptor for DOCTipsManager);
}

id sub_1000B1650(id result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != -1)
    return sub_1000E4F7C(result, a2, a3, a4);
  return result;
}

void sub_1000B1664(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != -1)
    sub_1000E4FD0(a1, a2, a3, a4);
}

ValueMetadata *type metadata accessor for DOCSidebarItem()
{
  return &type metadata for DOCSidebarItem;
}

uint64_t sub_1000B1688(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1004E3148;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1004E3148;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_initClassMetadata2(a1, 0, 4, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for DOCSidebarCell(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007E804(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DOCSidebarCell);
}

uint64_t type metadata accessor for DOCDragMonitor()
{
  return objc_opt_self(_TtC5Files14DOCDragMonitor);
}

id sub_1000B1788()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DOCDragMonitor()), "init");
  qword_100672738 = (uint64_t)result;
  return result;
}

ValueMetadata *type metadata accessor for DOCDisplayMode()
{
  return &type metadata for DOCDisplayMode;
}

uint64_t type metadata accessor for DOCApplication()
{
  return objc_opt_self(_TtC5Files14DOCApplication);
}

uint64_t type metadata accessor for FamilyFetcher()
{
  return objc_opt_self(_TtC5Files13FamilyFetcher);
}

uint64_t sub_1000B18A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 120);
  if (v1)
  {

  }
  else
  {
    v3 = *(_QWORD *)(v0 + 136);
    v2 = *(_QWORD *)(v0 + 144);
    v4 = *(_QWORD *)(v0 + 128);
    v5 = Logger.DocumentManager.unsafeMutableAddressor();
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Files Family Tip Failed to fetch family", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 144);
    v11 = *(_QWORD *)(v0 + 128);
    v12 = *(_QWORD *)(v0 + 136);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    v1 = 0;
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1000B19A4()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = objc_msgSend(objc_allocWithZone((Class)FAFetchFamilyCircleRequest), "init");
  v0[19] = v2;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1000B1A5C;
  v3 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_1000874A8;
  v4[3] = &unk_1005DD268;
  v4[4] = v3;
  objc_msgSend(v2, "startRequestWithCompletionHandler:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_1000B1A5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 160) = v1;
  if (v1)
    v2 = sub_100317C38;
  else
    v2 = sub_1000B18A8;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B1ABC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for Logger(0);
  v0[16] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[17] = v2;
  v0[18] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B19A4, 0, 0);
}

ValueMetadata *type metadata accessor for DOCSourceType()
{
  return &type metadata for DOCSourceType;
}

unint64_t sub_1000B1B2C()
{
  unint64_t result;

  result = qword_100650BE0;
  if (!qword_100650BE0)
  {
    result = swift_getWitnessTable(&unk_1004E50D8, &type metadata for DOCSourceType);
    atomic_store(result, (unint64_t *)&qword_100650BE0);
  }
  return result;
}

unint64_t sub_1000B1B70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100643928;
  if (!qword_100643928)
  {
    v1 = type metadata accessor for DOCFileEntity(255);
    result = swift_getWitnessTable(&unk_1004DB0C8, v1);
    atomic_store(result, (unint64_t *)&qword_100643928);
  }
  return result;
}

uint64_t sub_1000B1BB8()
{
  return sub_10005A360(&qword_100643DD0, type metadata accessor for DOCFileEntity, (uint64_t)&unk_1004DB150);
}

uint64_t sub_1000B1BE4()
{
  return sub_10005A360(&qword_100643DB0, type metadata accessor for DOCFileEntity, (uint64_t)&unk_1004DB120);
}

uint64_t sub_1000B1C10()
{
  return sub_10005A360((unint64_t *)&unk_100643DA0, type metadata accessor for DOCFileEntity, (uint64_t)&unk_1004DB0A0);
}

uint64_t sub_1000B1C3C()
{
  return sub_10005A360(&qword_100643D80, type metadata accessor for DOCFileEntity, (uint64_t)&unk_1004DB010);
}

uint64_t sub_1000B1C68()
{
  return sub_10005A360((unint64_t *)&unk_100643D60, type metadata accessor for DOCFileEntity, (uint64_t)&unk_1004DAFD8);
}

uint64_t sub_1000B1C94()
{
  return sub_10005A360(&qword_100643D88, type metadata accessor for DOCFileEntity, (uint64_t)&unk_1004DB040);
}

void *sub_1000B1CC0()
{
  return &protocol witness table for FileEntityIdentifier;
}

uint64_t sub_1000B1CCC()
{
  return sub_10005A360(&qword_100643D98, type metadata accessor for DOCFileEntity, (uint64_t)&unk_1004DB078);
}

uint64_t sub_1000B1CF8()
{
  return sub_10005A360((unint64_t *)&qword_100643928, type metadata accessor for DOCFileEntity, (uint64_t)&unk_1004DB0C8);
}

void sub_1000B1D24(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_1000B1D70(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for IndexPath(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1004E4A30;
    v4[2] = &unk_1004E4A88;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ScrollToItem(uint64_t a1)
{
  return sub_10006BDA4(a1, qword_100650880, (uint64_t)&nominal type descriptor for ScrollToItem);
}

uint64_t sub_1000B1E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a4;
  return swift_initClassMetadata2(a1, 0, 1, &v5, a1 + 88);
}

uint64_t sub_1000B1E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B1E00(a1, a2, a3, (uint64_t)&value witness table for Builtin.BridgeObject + 64);
}

uint64_t type metadata accessor for DOCWeakArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007E804(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DOCWeakArray);
}

uint64_t sub_1000B1E54(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  _BYTE v26[24];

  v4 = (uint64_t *)(a2 + 16);
  swift_beginAccess(a2 + 16, v26, 1, 0);
  v5 = *(_QWORD *)(a2 + 16);
  v25[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v16 = v5;
    else
      v16 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    result = _CocoaArrayWrapper.endIndex.getter(v16);
    v6 = result;
    if (result)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease(v5);
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v5);
  if (!v6)
    goto LABEL_17;
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
    return result;
  }
  for (i = 0; i != v6; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
    }
    else
    {
      v10 = *(_QWORD *)(v5 + 8 * i + 32);
      swift_retain(v10);
    }
    Strong = swift_unknownObjectWeakLoadStrong(v10 + 16, v9);
    if (Strong)
    {
      v12 = swift_unknownObjectRelease(Strong);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v13 = *(_QWORD *)(v25[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
      specialized ContiguousArray._endMutation()(v14);
    }
    else
    {
      swift_release(v10);
    }
  }
  swift_bridgeObjectRelease(v5);
  v15 = (_QWORD *)v25[0];
LABEL_18:
  v17 = *v4;
  *v4 = (uint64_t)v15;
  swift_bridgeObjectRelease(v17);
  v18 = sub_10006922C(&qword_10064B760);
  v19 = swift_allocObject(v18, 24, 7);
  v20 = swift_unknownObjectWeakInit(v19 + 16, 0);
  swift_unknownObjectWeakAssign(v20, a1);
  v21 = swift_beginAccess(v4, v25, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
  v23 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v22 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v23 >= v22 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
  v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v19);
  specialized Array._endMutation()(v24);
  return swift_endAccess(v25);
}

uint64_t sub_1000B2064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B1E00(a1, a2, a3, (uint64_t)"\b");
}

uint64_t type metadata accessor for DOCWeakArray.WeakElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007E804(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DOCWeakArray.WeakElement);
}

uint64_t type metadata accessor for DOCStackView()
{
  return objc_opt_self(_TtC5Files12DOCStackView);
}

_QWORD *sub_1000B20A8()
{
  uint64_t v0;
  _QWORD *result;

  v0 = type metadata accessor for DOCInterfaceSystemAppearance_Default();
  result = (_QWORD *)swift_allocObject(v0, 48, 7);
  result[2] = 0x73697370696C6C65;
  result[3] = 0xEF656C637269632ELL;
  result[4] = 0x73697370696C6C65;
  result[5] = 0xE800000000000000;
  qword_100672DD8 = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for DOCFastLabel()
{
  return objc_opt_self(_TtC5Files12DOCFastLabel);
}

_QWORD *sub_1000B2398(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = (void *)a1[8];
  v2 = a1[9];
  v4 = a1[11];
  v5 = a1[12];
  v6 = a1[13];
  v7 = a1[14];
  v8 = a1[15];
  v9 = a1[16];
  v10 = a1[18];
  v15 = a1[19];
  v16 = a1[17];
  v13 = a1[21];
  v14 = a1[20];
  v12 = a1[22];
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(v2);

  sub_100059B10(v4, v5, v6, v7, v8, v9);
  sub_100059B10(v16, v10, v15, v14, v13, v12);
  return a1;
}

uint64_t sub_1000B2454(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 136);
  v16 = *(_QWORD *)(a1 + 152);
  v17 = *(_QWORD *)(a1 + 144);
  v14 = *(_QWORD *)(a1 + 168);
  v15 = *(_QWORD *)(a1 + 160);
  v13 = *(_QWORD *)(a1 + 176);
  v11 = *(id *)(a1 + 64);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_100059B00(v4, v5, v6, v7, v8, v9);
  sub_100059B00(v10, v17, v16, v15, v14, v13);
  return a1;
}

uint64_t sub_1000B2514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v0 = sub_10006922C(&qword_100655D40);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007E874(v1, qword_100655C58);
  v4 = sub_10007E788(v0, (uint64_t)qword_100655C58);
  v5 = CTFontCopySystemUIFontExcessiveLineHeightCharacterSet();
  if (v5)
  {
    v6 = (void *)v5;
    static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();

    v7 = type metadata accessor for CharacterSet(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 0, 1, v7);
  }
  else
  {
    v8 = ((uint64_t (*)(void))type metadata accessor for CharacterSet)();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  }
  return sub_100070EDC((uint64_t)v3, v4, &qword_100655D40);
}

ValueMetadata *type metadata accessor for DOCFastLabel.AttachmentRenderer()
{
  return &type metadata for DOCFastLabel.AttachmentRenderer;
}

uint64_t sub_1000B2740(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(void **)(a1 + 72);
  v2 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 136);
  v18 = *(_QWORD *)(a1 + 152);
  v19 = *(_QWORD *)(a1 + 144);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(_QWORD *)(a1 + 160);
  v14 = *(_QWORD *)(a1 + 184);
  v15 = *(_QWORD *)(a1 + 176);
  v11 = *(id *)a1;
  v12 = v3;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  sub_100059B00(v5, v6, v7, v8, v9, v10);
  sub_100059B00(v19, v18, v17, v16, v15, v14);
  return a1;
}

void *sub_1000B2804(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  id v24;
  id v25;

  if (result)
  {
    v24 = result;
    v25 = a10;
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a12);
    sub_100059B00(a13, a14, a15, a16, a17, a18);
    return (void *)sub_100059B00(a19, a20, a21, a22, a23, a24);
  }
  return result;
}

uint64_t type metadata accessor for DOCFastLabel.FastLabelLayer()
{
  return objc_opt_self(_TtCC5Files12DOCFastLabelP33_7D1ECDF4F67D1CFA2DCB702D72CE29F114FastLabelLayer);
}

uint64_t type metadata accessor for AppDelegate()
{
  return objc_opt_self(_TtC5Files11AppDelegate);
}

void sub_1000B2A74()
{

}

double sub_1000B2AA4(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  CFAbsoluteTime v4;
  double result;
  double v6;

  v1 = *(id *)DOCLog.UI.unsafeMutableAddressor(a1);
  static os_log_type_t.debug.getter(v1);
  v2 = sub_10006922C((uint64_t *)&unk_100644560);
  v3 = swift_allocObject(v2, 72, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1004D9670;
  v4 = CFAbsoluteTimeGetCurrent() - *(double *)&qword_1006725F8;
  *(_QWORD *)(v3 + 56) = &type metadata for Double;
  *(_QWORD *)(v3 + 64) = &protocol witness table for Double;
  *(CFAbsoluteTime *)(v3 + 32) = v4;
  os_log(_:dso:log:type:_:)("app launched in: %f sec", v6);

  *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for DOCFileProviderSyncStateProvider()
{
  return objc_opt_self(_TtC5Files32DOCFileProviderSyncStateProvider);
}

uint64_t sub_1000B2C20(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v5 = *v2;
  swift_beginAccess(v5 + 48, v9, 1, 0);
  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v5 + 56);
  *(_QWORD *)(v5 + 48) = a1;
  *(_QWORD *)(v5 + 56) = a2;
  return sub_100087534(v6, v7);
}

void sub_1000B2C74(void (*a1)(void *))
{
  uint64_t v1;
  void *v3;
  id v4;

  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)v1 + 16) + 136);
  v4 = v3;
  a1(v3);

}

uint64_t sub_1000B2CC8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v5 = *v2;
  swift_beginAccess(v5 + 32, v9, 1, 0);
  v6 = *(_QWORD *)(v5 + 32);
  v7 = *(_QWORD *)(v5 + 40);
  *(_QWORD *)(v5 + 32) = a1;
  *(_QWORD *)(v5 + 40) = a2;
  return sub_100087534(v6, v7);
}

void sub_1000B2D1C(void (*a1)(_QWORD *, _QWORD, __n128), uint64_t a2)
{
  sub_1000B2D3C(a1, a2);
}

void sub_1000B2D3C(void (*a1)(_QWORD *, _QWORD, __n128), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (**v4)(char *, char *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  __n128 v48;
  uint64_t v49;
  void (*v50)(_QWORD *, _QWORD, __n128);
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (**v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  id v61;
  _QWORD v62[5];
  _QWORD *v63;

  v49 = a2;
  v50 = a1;
  v3 = type metadata accessor for Date(0);
  v4 = *(void (***)(char *, char *, uint64_t))(v3 - 8);
  __chkstk_darwin(v3);
  v59 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for DOCProgressProvidingOperationIconType(0);
  __chkstk_darwin(v58);
  v7 = (uint64_t *)((char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10006922C((uint64_t *)&unk_100643900);
  __chkstk_darwin(v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v49 - v12;
  v14 = type metadata accessor for DOCFileOperation(0);
  v56 = *(_QWORD *)(v14 - 8);
  v57 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v60 = (uint64_t)&v49 - v18;
  v19 = *(_QWORD *)(v2 + 16);
  v21 = *(void **)(v19 + 120);
  v20 = *(void **)(v19 + 128);
  v62[0] = _swiftEmptyArrayStorage;
  if (!v21)
  {
    v26 = v20;
    if (!v20)
      goto LABEL_10;
    goto LABEL_7;
  }
  v22 = v20;
  v55 = v21;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v55);
  v24 = *(_QWORD *)((v62[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
  v23 = *(_QWORD *)((v62[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v24 >= v23 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
  v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v55);
  specialized Array._endMutation()(v25);
  if (v20)
  {
LABEL_7:
    v55 = v20;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v55);
    v28 = *(_QWORD *)((v62[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    v27 = *(_QWORD *)((v62[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v28 >= v27 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
    v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v55);
    specialized Array._endMutation()(v29);
  }
LABEL_10:
  v30 = v62[0];

  v31 = v30;
  if (!((unint64_t)v30 >> 62))
  {
    v32 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v32)
      goto LABEL_12;
LABEL_33:
    v48 = swift_bridgeObjectRelease(v31);
    v45 = _swiftEmptyArrayStorage;
LABEL_34:
    v50(v45, 0, v48);
    swift_bridgeObjectRelease(v45);
    return;
  }
  if (v30 >= 0)
    v30 &= 0xFFFFFFFFFFFFFF8uLL;
  swift_bridgeObjectRetain(v31);
  v32 = _CocoaArrayWrapper.endIndex.getter(v30);
  swift_bridgeObjectRelease(v31);
  if (!v32)
    goto LABEL_33;
LABEL_12:
  v63 = _swiftEmptyArrayStorage;
  sub_100154E30(0, v32 & ~(v32 >> 63), 0);
  if ((v32 & 0x8000000000000000) == 0)
  {
    v33 = 0;
    v52 = v31 & 0xC000000000000001;
    v53 = v32;
    v51 = 0x8000000100538DD0;
    v54 = v31;
    v55 = v4;
    do
    {
      if (v52)
        v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v31);
      else
        v34 = *(id *)(v31 + 8 * v33 + 32);
      v35 = v34;
      v36 = NSProgress.fileTotalCount.getter(v34);
      v38 = v37;
      v61 = objc_msgSend(v35, "hash", v49);
      v39 = AnyHashable.init<A>(_:)(&v61, &type metadata for Int, &protocol witness table for Int);
      static Date.now.getter(v39);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v4[7])(v13, 0, 1, v3);
      v40 = 2;
      if ((v38 & 1) != 0)
      {
        v42 = v59;
      }
      else
      {
        v41 = v36 < 2;
        v42 = v59;
        if (!v41)
        {
          *v7 = 0xD000000000000012;
          v7[1] = v51;
          v40 = 1;
        }
      }
      swift_storeEnumTagMultiPayload(v7, v58, v40);
      sub_10006777C((uint64_t)v62, (uint64_t)v16);
      *((_QWORD *)v16 + 5) = v35;
      sub_1001114C4((uint64_t)v13, (uint64_t)v10);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v4[6])(v10, 1, v3) == 1)
      {
        Date.init(timeIntervalSinceNow:)(0.0);
        sub_10011150C((uint64_t)v13);
        sub_100067748((uint64_t)v62);
        sub_10011150C((uint64_t)v10);
        v43 = v4[4];
      }
      else
      {
        sub_10011150C((uint64_t)v13);
        sub_100067748((uint64_t)v62);
        v43 = v4[4];
        v43(v42, v10, v3);
      }
      v44 = v57;
      v43(&v16[*(int *)(v57 + 24)], v42, v3);
      sub_1001D0788((uint64_t)v7, (uint64_t)&v16[*(int *)(v44 + 28)], type metadata accessor for DOCProgressProvidingOperationIconType);
      sub_1001D0788((uint64_t)v16, v60, type metadata accessor for DOCFileOperation);
      v45 = v63;
      if ((swift_isUniquelyReferenced_nonNull_native(v63) & 1) == 0)
      {
        sub_100154E30(0, v45[2] + 1, 1);
        v45 = v63;
      }
      v47 = v45[2];
      v46 = v45[3];
      if (v47 >= v46 >> 1)
      {
        sub_100154E30(v46 > 1, v47 + 1, 1);
        v45 = v63;
      }
      ++v33;
      v45[2] = v47 + 1;
      sub_1001D0788(v60, (uint64_t)v45+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(_QWORD *)(v56 + 72) * v47, type metadata accessor for DOCFileOperation);
      v31 = v54;
      v4 = v55;
    }
    while (v53 != v33);
    v48 = swift_bridgeObjectRelease(v54);
    goto LABEL_34;
  }
  __break(1u);
}

uint64_t type metadata accessor for DOCImageViewContainerView()
{
  return objc_opt_self(_TtC5Files25DOCImageViewContainerView);
}

uint64_t sub_1000B3334(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_1000B3368()
{
  unint64_t result;

  result = qword_100646BC0;
  if (!qword_100646BC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100646BC0);
  }
  return result;
}

uint64_t sub_1000B33AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C((uint64_t *)&unk_100642710);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1000B33F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1006499B0)
  {
    v2 = type metadata accessor for IndexPath(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1006499B0);
  }
}

uint64_t sub_1000B3448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C((uint64_t *)&unk_1006475C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1000B3490(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10064AAC0)
  {
    v2 = type metadata accessor for UUID(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10064AAC0);
  }
}

uint64_t sub_1000B34E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C(&qword_100643470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000B352C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100643A30)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100643A30);
  }
}

uint64_t sub_1000B3580(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1000B3624(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C(&qword_100655D40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000B4B2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1000B4C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000B4D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000B5FD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000B6268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000B6290(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "userDidTapDownloadButton");

}

void sub_1000B6800(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  char v17;
  _QWORD v18[5];
  id v19;
  uint8_t buf[4];
  void *v21;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = docLogHandle;
  if (v6)
  {
    if (!docLogHandle)
    {
      DOCInitLogging(v6);
      v8 = docLogHandle;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1004BF08C(a1, v8, (uint64_t)v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "domain"));
    if (objc_msgSend(v9, "isEqualToString:", NSCocoaErrorDomain))
    {
      v10 = objc_msgSend(v7, "code");

      if (v10 == (id)3072)
      {
        v12 = docLogHandle;
        if (!docLogHandle)
        {
          DOCInitLogging(v11);
          v12 = docLogHandle;
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          v13 = *(void **)(a1 + 32);
          v14 = v12;
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "displayName"));
          *(_DWORD *)buf = 138412290;
          v21 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Download operation canceled for item: %@", buf, 0xCu);

        }
        goto LABEL_19;
      }
    }
    else
    {

    }
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "delegate"));
    v17 = objc_opt_respondsToSelector(v16, "nodeDownloadButton:downloadingNode:encounteredError:");

    if ((v17 & 1) != 0)
    {
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_1000B6A24;
      v18[3] = &unk_1005BE508;
      v18[4] = *(_QWORD *)(a1 + 40);
      v19 = v7;
      DOCRunInMainThread(v18);

    }
  }
  else
  {
    if (!docLogHandle)
    {
      DOCInitLogging(0);
      v8 = docLogHandle;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      sub_1004BF008(a1, v8);
  }
LABEL_19:

}

void sub_1000B6A24(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "node"));
  objc_msgSend(v4, "nodeDownloadButton:downloadingNode:encounteredError:", v2, v3, *(_QWORD *)(a1 + 40));

}

void sub_1000B6A90(uint64_t a1)
{
  NSObject *v2;

  v2 = docLogHandle;
  if (!docLogHandle)
  {
    DOCInitLogging(a1);
    v2 = docLogHandle;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_1004BF148(a1, v2);
}

void sub_1000B7140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, id *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000B71B0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "userDidTapDownloadButton");

}

void sub_1000B71DC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "userDidTapOpenButton");

}

void sub_1000B780C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

id sub_1000B7820(uint64_t a1, void *a2)
{
  return a2;
}

void sub_1000B7880(uint64_t a1)
{
  id v1;
  id v2;
  unsigned __int8 v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id to;

  objc_copyWeak(&to, (id *)(a1 + 32));
  v1 = objc_loadWeakRetained(&to);

  if (v1)
  {
    v2 = objc_loadWeakRetained(&to);
    v3 = objc_msgSend(v2, "_defaultLocationIsRecentsTab");

    if ((v3 & 1) == 0)
    {
      v4 = objc_loadWeakRetained(&to);
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "hierarchyController"));
      objc_msgSend(v5, "reset");

      v6 = objc_loadWeakRetained(&to);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "hierarchyController"));
      objc_msgSend(v7, "resetWithDefaultLocationWithAnimated:", 0);

    }
  }
  objc_destroyWeak(&to);
}

void sub_1000B7930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B8214(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000B8C0C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  if (v7)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000B8CC0;
    v8[3] = &unk_1005BE640;
    v11 = v7;
    v9 = v5;
    v10 = v6;
    DOCRunInMainThread(v8);

  }
}

uint64_t sub_1000B8CC0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1000B8CD4(uint64_t a1, void *a2)
{
  id v3;
  void (*v4)(void);
  void *v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  if (v3)
  {
    v4 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
LABEL_7:
    v4();
    goto LABEL_8;
  }
  if (!*(_QWORD *)(a1 + 32) || !*(_BYTE *)(a1 + 56))
  {
    v4 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
    goto LABEL_7;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "documentManager"));
  v6 = *(_QWORD *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000B8DB4;
  v7[3] = &unk_1005BE668;
  v8 = *(id *)(a1 + 48);
  objc_msgSend(v5, "importDocumentAt:mode:toCurrentBrowserLocationWithCompletion:", v6, 1, v7);

LABEL_8:
}

void sub_1000B8DB4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;
  id v6;

  v3 = a2;
  if (v3)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1000B8E64;
    v4[3] = &unk_1005BE690;
    v6 = *(id *)(a1 + 32);
    v5 = v3;
    objc_msgSend(v5, "bumpLastOpenDateWithCompletionHandler:", v4);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

uint64_t sub_1000B8E64(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_1000B8E78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000B8E84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000B9298(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x20u);
}

id sub_1000B9610(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_uip_setTabBarHidden:animated:", *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));
}

id sub_1000B9698(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "beginAppearanceTransition:animated:", 0, 0);
  return _objc_msgSend(*(id *)(a1 + 32), "endAppearanceTransition");
}

void sub_1000B96C8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000B9740;
  v6[3] = &unk_1005BE508;
  v4 = v2;
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  objc_msgSend(v3, "_performWhileNotingInflightSelectedViewController:block:", v4, v6);

}

id sub_1000B9740(uint64_t a1)
{
  uint64_t v1;
  objc_super v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)DOCAutoBarHidingTabBarController;
  return objc_msgSendSuper2(&v3, "_setSelectedViewController:", v1);
}

uint64_t sub_1000B9778(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1000B9818(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setViewControllers:animated:", *(_QWORD *)(a1 + 40), 0);
  objc_msgSend(*(id *)(a1 + 32), "setSelectedIndex:", *(_QWORD *)(a1 + 56));
  return objc_msgSend(*(id *)(a1 + 32), "setViewControllers:animated:", *(_QWORD *)(a1 + 48), 0);
}

void sub_1000B9BC0(id a1)
{
  CFArrayRef v1;
  void *v2;

  v1 = CGImageSourceCopyTypeIdentifiers();
  v2 = (void *)qword_100658FB8;
  qword_100658FB8 = (uint64_t)v1;

}

BOOL sub_1000BA9C0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  id v8;
  id v9;
  _BOOL8 v10;
  id v12;
  id v13;

  v5 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "containsObject:", v5))
  {
    v6 = *(void **)(a1 + 40);
    v12 = 0;
    v13 = 0;
    v7 = objc_msgSend(v6, "readTag:path:title:value:", a3, v5, &v13, &v12);
    v8 = v13;
    v9 = v12;
    if (v7)
      objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v9, v8);
    objc_msgSend(*(id *)(a1 + 32), "removeObject:", v5);

  }
  v10 = objc_msgSend(*(id *)(a1 + 32), "count") != 0;

  return v10;
}

id sub_1000BB270(uint64_t a1)
{
  unsigned __int8 v2;
  void *v3;
  void *v4;
  _BOOL8 v5;

  objc_msgSend(*(id *)(a1 + 32), "setPrefersAnimatedTabVibilityChanges:", *(unsigned __int8 *)(a1 + 40));
  v2 = objc_msgSend(*(id *)(a1 + 32), "isShowingCollapsedSidebarViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "splitViewDelegate"));
  v4 = v3;
  if ((v2 & 1) != 0)
  {
    v5 = 1;
  }
  else if (*(_BYTE *)(a1 + 41))
  {
    v5 = 0;
  }
  else
  {
    v5 = *(_BYTE *)(a1 + 42) == 0;
  }
  objc_msgSend(v3, "splitViewController:wantsToShowTabBar:", *(_QWORD *)(a1 + 32), v5);

  return objc_msgSend(*(id *)(a1 + 32), "setPrefersAnimatedTabVibilityChanges:", 0);
}

uint64_t sub_1000BB514(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_1000BB85C(uint64_t a1)
{
  void *v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "setImage:", 0);
  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_displayModeButtonItemTitle"));
  objc_msgSend(v2, "setTitle:", v3);

  return _objc_msgSend(*(id *)(a1 + 32), "_setShowsBackButtonIndicator:", 1);
}

id sub_1000BB9D0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "clearSplitViewStateTransitionStateIfNecessary");
}

id sub_1000BBAF8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "updateUIPHorizontalInsetsIfNecessaryWithCoordinator:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "updateTraitCollectionTabBarSetting");
}

id sub_1000BBB24(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;

  objc_msgSend(*(id *)(a1 + 32), "clearSplitViewStateTransitionStateIfNecessary");
  return objc_msgSend(*(id *)(a1 + 32), "updatePreferredSplitBehavior");
}

void sub_1000BBD90(uint64_t a1)
{
  void *v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "updateTraitCollectionTabBarSetting");
  objc_msgSend(*(id *)(a1 + 32), "updateDisplayModeButtonVisibility");
  objc_msgSend(*(id *)(a1 + 32), "updateUIPHorizontalInsetsIfNecessaryWithCoordinator:", *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "splitViewDelegate"));
  objc_msgSend(v2, "splitViewController:willChangeFromState:toState:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fullDocumentManagerViewController"));
  objc_msgSend(v3, "splitViewWillChangeFrom:to:alongsideCoordinator:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 40));

  if (*(_BYTE *)(a1 + 80))
    objc_msgSend(*(id *)(a1 + 32), "updateContentEditingOverlaysForState:", *(_QWORD *)(a1 + 56));
}

void sub_1000BBE20(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  objc_msgSend(*(id *)(a1 + 32), "updateContentEditingOverlaysForState:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "updateDisplayModeButtonVisibility");
  if (*(_BYTE *)(a1 + 72))
    objc_msgSend(*(id *)(a1 + 32), "_saveUserPrefersTiledSidebarForChangeFromDisplayMode:toDisplayMode:", *(_QWORD *)(a1 + 64), objc_msgSend(*(id *)(a1 + 48), "displayMode"));
  if ((objc_msgSend(v4, "isCancelled") & 1) != 0
    || !*(_BYTE *)(a1 + 73) && objc_msgSend(*(id *)(a1 + 32), "doc_isAppearing"))
  {
    objc_msgSend(*(id *)(a1 + 32), "clearSplitViewStateTransitionStateIfNecessary");
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "splitViewDelegate"));
  objc_msgSend(v3, "splitViewController:didChangeFromState:toState:isUserDisplayModeChange:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 72));

  objc_msgSend(*(id *)(a1 + 32), "setPrefersAnimatedTabVibilityChanges:", 0);
}

void sub_1000BC254(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fullDocumentManagerViewController"));
  objc_msgSend(v1, "setRootViewController:", 0);

}

void sub_1000BD81C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;

  v3 = a2;
  v4 = v3;
  v5 = docLogHandle;
  if (v3)
  {
    if (!docLogHandle)
    {
      DOCInitLogging(v3);
      v5 = docLogHandle;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1004BF784(a1, v5, (uint64_t)v4);
  }
  else
  {
    if (!docLogHandle)
    {
      DOCInitLogging(0);
      v5 = docLogHandle;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      sub_1004BF6B4(a1, v5);
  }

}

id sub_1000BD9E8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "forceUpdatePreferredContentSize");
  return _objc_msgSend(*(id *)(a1 + 32), "objc_doc_preheatDidFinish");
}

id sub_1000BE454(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "providerID"));
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

id sub_1000BEED8()
{
  void *v0;
  objc_class *v1;
  id v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  Class (*v9)(uint64_t);
  void *v10;
  uint64_t *v11;

  if (!qword_100658FC8)
  {
    v8 = off_1005BE9B0;
    v9 = 0;
    qword_100658FC8 = _sl_dlopen(&v8, 0);
  }
  if (!qword_100658FC8)
    return 0;
  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_100658FD0;
  v7 = qword_100658FD0;
  if (!qword_100658FD0)
  {
    *(_QWORD *)&v8 = _NSConcreteStackBlock;
    *((_QWORD *)&v8 + 1) = 3221225472;
    v9 = sub_1000BF018;
    v10 = &unk_1005BE9D0;
    v11 = &v4;
    sub_1000BF018((uint64_t)&v8);
    v0 = (void *)v5[3];
  }
  v1 = objc_retainAutorelease(v0);
  _Block_object_dispose(&v4, 8);
  v2 = [v1 alloc];
  return objc_msgSend(v2, "initWithOptions:delegate:", 0, 0, v4);
}

void sub_1000BEFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

Class sub_1000BF018(uint64_t a1)
{
  char *v2;
  Class result;
  char *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_100658FC8)
  {
    v5 = off_1005BE9B0;
    v6 = 0;
    qword_100658FC8 = _sl_dlopen(&v5, &v4);
    v2 = v4;
    if (!qword_100658FC8)
    {
      abort_report_np("%s", v4);
      goto LABEL_7;
    }
    if (v4)
      goto LABEL_8;
  }
  while (1)
  {
    result = objc_getClass("DSNSHelperContext");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v2 = (char *)sub_1004BF860();
LABEL_8:
    free(v2);
  }
  qword_100658FD0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_1000BFBF8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "presentTab:rawTabSwitchOnly:", 2, 1);
  return _objc_msgSend(*(id *)(a1 + 32), "_beginSystemTabBarHidden");
}

uint64_t sub_1000BFCE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1000BFD54(uint64_t a1)
{
  unsigned __int8 *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id result;

  v2 = *(unsigned __int8 **)(a1 + 32);
  v3 = v2[20];
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "fullRecentsViewController"));
  objc_msgSend(v2, "_setShowSystemTabBar:isEditing:", v3, objc_msgSend(v4, "isEditing"));

  v5 = *(id *)(a1 + 40);
  result = objc_msgSend(*(id *)(a1 + 32), "effectiveTabSwitcherTab");
  if (v5 != result)
    return objc_msgSend(*(id *)(a1 + 32), "presentTab:", *(_QWORD *)(a1 + 40));
  return result;
}

void sub_1000BFF48(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "displayedRootLocation"));
  LOBYTE(v2) = objc_msgSend(v2, "isEqual:", v3);

  if ((v2 & 1) == 0)
  {
    v4 = *(void **)(a1 + 48);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000C0010;
    v5[3] = &unk_1005BE508;
    v6 = v4;
    v7 = *(id *)(a1 + 56);
    objc_msgSend(v6, "withLocationChangePacingDisabled:", v5);

  }
}

void sub_1000C0010(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "firstObject"));
  objc_msgSend(v1, "updateSelectionToMatchBrowsedLocation:scrollToVisible:", v2, 1);

}

void sub_1000C01DC(uint64_t a1)
{
  unsigned __int8 v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;

  v2 = objc_msgSend(*(id *)(a1 + 32), "canHaveTabs");
  v3 = *(void **)(a1 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "tabBarController"));
    objc_msgSend(v4, "setSoleValidIndex:", 0);
  }
  else
  {
    v5 = objc_msgSend(v3, "tabControllerIndexForTab:", 2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tabBarController"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v5));
    objc_msgSend(v4, "setSoleValidIndex:", v6);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tabBarController"));
  objc_msgSend(v7, "setNeverAllowShowingSystemTabs:", *(_BYTE *)(a1 + 40) == 0);

  v8 = *(unsigned __int8 *)(a1 + 40);
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationController"));
  objc_msgSend(v9, "setToolbarHidden:", v8);

}

uint64_t sub_1000C02C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000C0560(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateTabButtonsVisibilityForTraits");

}

id sub_1000C09AC(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setAllowsDocumentCreation:", *(unsigned __int8 *)(a1 + 32));
}

id sub_1000C09B8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setCustomActions:", *(_QWORD *)(a1 + 32));
}

uint64_t sub_1000C0BE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000C1844(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  char v20;
  __int16 v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  void *v27;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v11 = docLogHandle;
    if (!docLogHandle)
    {
      DOCInitLogging(v6);
      v11 = docLogHandle;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 32);
      v13 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)buf = 138412802;
      v23 = v12;
      v24 = 1024;
      v25 = v13;
      v26 = 2112;
      v27 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Unable to reveal the url: %@ importIfNeeded:%d error: %@", buf, 0x1Cu);
    }
    v14 = *(_QWORD *)(a1 + 56);
    if (v14)
      (*(void (**)(uint64_t, _QWORD, void *))(v14 + 16))(v14, 0, v7);
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configuration"));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1000C1A08;
    v15[3] = &unk_1005BEBF0;
    v16 = v5;
    v20 = *(_BYTE *)(a1 + 64);
    v19 = *(id *)(a1 + 56);
    v9 = *(id *)(a1 + 48);
    v21 = *(_WORD *)(a1 + 65);
    v10 = *(_QWORD *)(a1 + 40);
    v17 = v9;
    v18 = v10;
    objc_msgSend(v16, "fetchItemWithBumpLastOpenDate:configuration:completionHandler:", 0, v8, v15);

  }
}

void sub_1000C1A08(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22;
  _QWORD *v23;
  char v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  char v31;

  v5 = a2;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1000C1C98;
  v25[3] = &unk_1005BEBA0;
  v6 = a3;
  v26 = v6;
  v7 = v5;
  v27 = v7;
  v28 = *(id *)(a1 + 32);
  v31 = *(_BYTE *)(a1 + 64);
  v30 = *(id *)(a1 + 56);
  v29 = *(id *)(a1 + 40);
  v8 = objc_retainBlock(v25);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "fullDocumentManagerViewController"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "effectiveBrowserViewController"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "contentViewController"));

  if (*(_BYTE *)(a1 + 65)
    || (v13 = objc_opt_class(_TtC5Files31DOCItemCollectionViewController),
        (objc_opt_isKindOfClass(v11, v13) & 1) != 0)
    && objc_msgSend(v11, "displayMode") == (id)2
    || *(_BYTE *)(a1 + 66)
    && (v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "configuration")),
        v15 = objc_msgSend(v14, "isPickerUI"),
        v14,
        v15))
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "fileProviderItem"));
    ((void (*)(_QWORD *, void *, _QWORD))v8[2])(v8, v12, 0);
  }
  else
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "fileProviderItem"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "itemID"));

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[FPItemManager defaultManager](FPItemManager, "defaultManager"));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1000C2308;
    v18[3] = &unk_1005BEBC8;
    v19 = *(id *)(a1 + 32);
    v24 = *(_BYTE *)(a1 + 64);
    v22 = *(id *)(a1 + 56);
    v20 = v6;
    v23 = v8;
    v21 = v7;
    objc_msgSend(v17, "fetchParentsForItemID:recursively:completionHandler:", v12, 1, v18);

  }
}

void sub_1000C1C98(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  char v17;

  v5 = a2;
  v6 = a3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000C1DA4;
  v9[3] = &unk_1005BEB78;
  v10 = *(id *)(a1 + 32);
  v11 = *(id *)(a1 + 40);
  v12 = v5;
  v13 = *(id *)(a1 + 48);
  v17 = *(_BYTE *)(a1 + 72);
  v16 = *(id *)(a1 + 64);
  v14 = v6;
  v15 = *(id *)(a1 + 56);
  v7 = v6;
  v8 = v5;
  DOCRunInMainThread(v9);

}

void sub_1000C1DA4(_QWORD *a1)
{
  _QWORD *v1;
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  id v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;

  v1 = a1;
  if (!a1[4]
    && (a1 = (_QWORD *)a1[5]) != 0
    && (a1 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "fileProviderItem"))) != 0
    && (v7 = v1[6], a1, v7))
  {
    if ((objc_msgSend((id)v1[8], "isTrashed") & 1) != 0)
    {
      v8 = (id)objc_claimAutoreleasedReturnValue(+[DOCConcreteLocation trashedItemsLocation](DOCConcreteLocation, "trashedItemsLocation"));
    }
    else
    {
      v9 = objc_alloc((Class)DOCConcreteLocation);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v1[6], "providerDomainID"));
      v8 = objc_msgSend(v9, "initWithSourceIdentifier:node:", v10, v1[6]);

    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v1[9], "fullDocumentManagerViewController"));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000C1FBC;
    v13[3] = &unk_1005BEB50;
    v17 = (id)v1[10];
    v14 = (id)v1[8];
    v15 = (id)v1[7];
    v16 = v11;
    v12 = v11;
    objc_msgSend(v12, "revealLocation:animated:completion:", v8, 0, v13);

  }
  else
  {
    v2 = docLogHandle;
    if (!docLogHandle)
    {
      DOCInitLogging(a1);
      v2 = docLogHandle;
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = v1[7];
      v4 = *((unsigned __int8 *)v1 + 88);
      v5 = v1[4];
      *(_DWORD *)buf = 138412802;
      v19 = v3;
      v20 = 1024;
      v21 = v4;
      v22 = 2112;
      v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Error fetching the item for the revealed URL: %@ importIfNeeded: %d error: %@", buf, 0x1Cu);
    }
    v6 = v1[10];
    if (v6)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v6 + 16))(v6, 0, v1[4]);
  }
}

void sub_1000C1FBC(id *a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  id v9;
  void (**v10)(id, id, _QWORD);
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  id v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  id v19;

  v2 = (uint64_t)a1[7];
  if (v2 && !a1[4])
    v2 = (*(uint64_t (**)(uint64_t, id, _QWORD))(v2 + 16))(v2, a1[5], 0);
  if (a1[4])
  {
    v3 = docLogHandle;
    if (!docLogHandle)
    {
      DOCInitLogging(v2);
      v3 = docLogHandle;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = a1[5];
      *(_DWORD *)buf = 136315394;
      v17 = "-[DOCTabbedBrowserViewController revealDocumentAtURL:importIfNeeded:openDocument:revealContents:updateLastUs"
            "edDate:completion:]_block_invoke";
      v18 = 2112;
      v19 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s 1. Starting reveal of item: %@ expecting to get completion handler to continue", buf, 0x16u);
    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "effectiveBrowserViewController"));
    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "effectiveBrowserViewController"));
      v15 = a1[4];
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v15, 1));
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1000C2210;
      v11[3] = &unk_1005BEB28;
      v12 = a1[4];
      v14 = a1[7];
      v13 = a1[5];
      objc_msgSend(v6, "revealWithItems:selectEvenIfVisible:completionBlock:", v7, 1, v11);

    }
    else
    {
      v8 = docLogHandle;
      if (!docLogHandle)
      {
        DOCInitLogging(0);
        v8 = docLogHandle;
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = a1[5];
        *(_DWORD *)buf = 136315394;
        v17 = "-[DOCTabbedBrowserViewController revealDocumentAtURL:importIfNeeded:openDocument:revealContents:updateLast"
              "UsedDate:completion:]_block_invoke";
        v18 = 2112;
        v19 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s 3. Can not reveal of item: %@ effectiveBrowserViewController is nil. Calling completion handler", buf, 0x16u);
      }
      v10 = (void (**)(id, id, _QWORD))a1[7];
      if (v10)
        v10[2](v10, a1[5], 0);
    }

  }
}

uint64_t sub_1000C2210(_QWORD *a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  int v12;

  v4 = docLogHandle;
  if (!docLogHandle)
  {
    DOCInitLogging();
    v4 = docLogHandle;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[4];
    v7 = 136315650;
    v8 = "-[DOCTabbedBrowserViewController revealDocumentAtURL:importIfNeeded:openDocument:revealContents:updateLastUsedD"
         "ate:completion:]_block_invoke";
    v9 = 2112;
    v10 = v5;
    v11 = 1024;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s 2. Finished reveal of item: %@ completion handler success: %d", (uint8_t *)&v7, 0x1Cu);
  }
  result = a1[6];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, a1[5], 0);
  return result;
}

void sub_1000C2308(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  __int16 v18;
  id v19;

  v5 = a3;
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "firstObject"));
  v7 = (void *)v6;
  if (v5 || !v6)
  {
    v10 = docLogHandle;
    if (!docLogHandle)
    {
      DOCInitLogging(v6);
      v10 = docLogHandle;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(unsigned __int8 *)(a1 + 72);
      v14 = 138412802;
      v15 = v11;
      v16 = 1024;
      v17 = v12;
      v18 = 2112;
      v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Error fetching the parent item for the revealed URL: %@ importIfNeeded: %d error: %@", (uint8_t *)&v14, 0x1Cu);
    }
    v13 = *(_QWORD *)(a1 + 56);
    if (v13)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v13 + 16))(v13, 0, *(_QWORD *)(a1 + 40));
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 64);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "fileProviderItem"));
    (*(void (**)(uint64_t, void *, void *))(v8 + 16))(v8, v7, v9);

  }
}

uint64_t sub_1000C245C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000C2660(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "switchToBrowse");
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fullRecentsViewController"));
  objc_msgSend(v2, "dismissSearch");

}

id sub_1000C2B68(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateTabBarVisibility");
}

id sub_1000C325C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "presentTab:rawTabSwitchOnly:", *(_QWORD *)(a1 + 40), 1);
}

void sub_1000C35DC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_1000C368C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1000C36A0(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (objc_msgSend(WeakRetained, "observationCount"))
      objc_msgSend(WeakRetained, "setObservationCount:", (char *)objc_msgSend(WeakRetained, "observationCount") - 1);
    if (!objc_msgSend(WeakRetained, "observationCount"))
    {
      v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "providerDomainsFINodeObserver"));
      objc_msgSend(v1, "stopObserving:", 3);

      objc_msgSend(WeakRetained, "stopObservingLegacyPickers");
      objc_msgSend(WeakRetained, "stopObservingDefaultSaveLocation");
    }
  }

}

void sub_1000C37F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1000C3808(uint64_t a1)
{
  void *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sourcesSubscribers"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  objc_msgSend(v2, "removeObjectForKey:", v3);

}

void sub_1000C390C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  __objc2_prot_list **p_base_prots;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  BOOL v19;
  uint64_t v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];

  v3 = a2;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v23;
    p_base_prots = &DOCUntrashOperation.base_prots;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v23 != v6)
          objc_enumerationMutation(v3);
        v9 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v8);
        v10 = objc_opt_class(p_base_prots + 201);
        if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
        {
          v11 = v9;
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "providerDomain"));
          v13 = v12;
          if (v12)
          {
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "providerID"));
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "providerID"));
            if (v14 != v15)
            {

              goto LABEL_10;
            }
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "identifier"));
            v17 = a1;
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "providerDomainID"));

            v19 = v16 == v18;
            p_base_prots = (__objc2_prot_list **)(&DOCUntrashOperation + 40);
            a1 = v17;
            if (v19)
            {
              v20 = DOCLocalizedDisplayName(v13);
              v14 = (void *)objc_claimAutoreleasedReturnValue(v20);
              (*(void (**)(void))(*(_QWORD *)(v17 + 40) + 16))();
LABEL_10:

            }
          }

        }
        v8 = (char *)v8 + 1;
      }
      while (v5 != v8);
      v21 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      v5 = v21;
    }
    while (v21);
  }

}

void sub_1000C3BB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1000C3BC4(uint64_t a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  id v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v6 = WeakRetained;
    v3 = WeakRetained;
    objc_sync_enter(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "providerNodes"));
    v5 = objc_msgSend(v4, "mutableCopy");

    objc_msgSend(v5, "addObjectsFromArray:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v3, "setProviderNodes:", v5);

    objc_sync_exit(v3);
    WeakRetained = v6;
  }

}

void sub_1000C3C54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C3D40(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1000C3D54(uint64_t a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  id v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v6 = WeakRetained;
    v3 = WeakRetained;
    objc_sync_enter(v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "providerNodes"));
    v5 = objc_msgSend(v4, "mutableCopy");

    objc_msgSend(v5, "removeObjectsInArray:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v3, "setProviderNodes:", v5);

    objc_sync_exit(v3);
    WeakRetained = v6;
  }

}

void sub_1000C3DE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C3F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C3FA8(uint64_t a1)
{
  id WeakRetained;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v6 = WeakRetained;
    v2 = WeakRetained;
    objc_sync_enter(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pendingChildPropertyChanges"));
    objc_msgSend(v2, "setPendingChildPropertyChanges:", 0);
    objc_sync_exit(v2);

    if (objc_msgSend(v3, "count"))
    {
      if ((objc_msgSend(v3, "containsObject:", &off_1005F4F88) & 1) != 0
        || objc_msgSend(v3, "containsObject:", &off_1005F4FA0))
      {
        v4 = (void *)objc_claimAutoreleasedReturnValue(+[DOCIconService shared](DOCIconService, "shared"));
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "providers"));
        objc_msgSend(v4, "updateFileProvidersIcon:", v5);

      }
      if (objc_msgSend(v3, "containsObject:", &off_1005F4FB8))
        objc_msgSend(v2, "providersChanged");
      objc_msgSend(v2, "sourceObserverQueue_didReceiveSourceUpdate");
    }

    WeakRetained = v6;
  }

}

void sub_1000C40AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C4174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C4188(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateProviderNodes");

}

void sub_1000C4268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C427C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateProviderNodes");

}

void sub_1000C4468(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C46C8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "didReceiveSourceUpdate");

}

void sub_1000C47D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1000C47EC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "sourceObserverQueue_didReceiveSourceUpdate");

}

id sub_1000C4AE0(void *a1, double a2, double a3, double a4)
{
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  v8 = objc_msgSend(objc_alloc((Class)ISIcon), "initWithType:", v7);
  v9 = sub_1000C4B80(v8, a2, a3, a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  if (!v10)
  {
    v11 = sub_1000C4C64(a2, a3, a4);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v11);
  }

  return v10;
}

id sub_1000C4B80(void *a1, double a2, double a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v7 = a1;
  v8 = objc_msgSend(objc_alloc((Class)ISImageDescriptor), "initWithSize:scale:", a2, a3, a4);
  objc_msgSend(v8, "setDrawBorder:", 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "imageForDescriptor:", v8));
  if (objc_msgSend(v9, "placeholder"))
  {
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "prepareImageForDescriptor:", v8));

    v9 = (void *)v10;
  }
  if (v9)
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageWithCGImage:](UIImage, "imageWithCGImage:", objc_msgSend(v9, "CGImage")));
  else
    v11 = 0;

  return v11;
}

id sub_1000C4C64(double a1, double a2, double a3)
{
  void *v6;
  id v7;
  void *v8;

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[ISIcon genericDocumentIcon](ISIcon, "genericDocumentIcon"));
  v7 = sub_1000C4B80(v6, a1, a2, a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  return v8;
}

BOOL sub_1000C4F18(uint64_t a1, uint64_t a2, CGPDFObject *a3)
{
  void *v5;
  __CFString *v6;
  _BOOL8 v7;
  CGPDFStringRef value;

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", a2, 134217984));
  if (objc_msgSend(*(id *)(a1 + 32), "containsObject:", v5))
  {
    if (CGPDFObjectGetType(a3) == kCGPDFObjectTypeString)
    {
      value = 0;
      if (CGPDFObjectGetValue(a3, kCGPDFObjectTypeString, &value))
      {
        v6 = (__CFString *)CGPDFStringCopyTextString(value);
        objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v6, v5);

      }
    }
    objc_msgSend(*(id *)(a1 + 32), "removeObject:", v5);
  }
  v7 = objc_msgSend(*(id *)(a1 + 32), "count") != 0;

  return v7;
}

id sub_1000C5280(void *a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD v6[4];
  id v7;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000C5304;
  v6[3] = &unk_1005BEDC8;
  v7 = a2;
  v3 = v7;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serviceViewControllerProxyWithErrorHandler:", v6));

  return v4;
}

uint64_t sub_1000C5304(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

_QWORD *variable initialization expression of DOCFilterableOperationProgressCollectionSource.unorderedItems()
{
  return _swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of DOCDebugInfoManager.queue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_10005A360((unint64_t *)&qword_100643640, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v12 = sub_10006922C((uint64_t *)&unk_100641280);
  v13 = sub_10008825C((unint64_t *)&qword_100643650, (uint64_t *)&unk_100641280);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v4, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002CLL, 0x800000010050BDA0, v9, v6, v3, 0);
}

uint64_t variable initialization expression of DOCFilterableOperationProgressCollectionSource.filteringPredicate()
{
  return 0;
}

void *variable initialization expression of DOCItemCollectionViewController.subscriptions()
{
  return &_swiftEmptySetSingleton;
}

uint64_t variable initialization expression of DOCItemCollectionViewController.familyFetcher@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for FamilyFetcher();
  result = swift_allocObject(v2, 16, 7);
  a1[3] = v2;
  a1[4] = (uint64_t)&_s14descr1005DD249OMn.Parent + 3;
  *a1 = result;
  return result;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.registeredItemCellClassByIdentifier()
{
  return sub_10008B324((uint64_t)_swiftEmptyArrayStorage);
}

id variable initialization expression of DOCItemCollectionViewController.sortOptionsAccessibilityModelView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

uint64_t variable initialization expression of DOCButton._userInteractionStateDeterminesLayerHitTestState_override()
{
  return 2;
}

uint64_t variable initialization expression of DOCItemCollectionViewController.indexPathForRememberedFocusNode@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C6524((uint64_t (*)(_QWORD))&type metadata accessor for IndexPath, a1);
}

void *variable initialization expression of DOCItemCollectionViewController.urlToItemCache()
{
  return &_swiftEmptyDictionarySingleton;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.itemCollectionListCellIdentifier()
{
  return 0xD000000000000020;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.itemCollectionGridCellIdentifier()
{
  return 0xD000000000000020;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.itemCollectionLargeTextListCellIdentifier()
{
  return 0xD000000000000029;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.itemCollectionCreateCellIdentifier()
{
  return 0xD000000000000022;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.itemCollectionStatusSectionFooterIdentifier()
{
  return 0xD00000000000002BLL;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.itemCollectionStatusSectionEmptyFooterIdentifier()
{
  return 0xD000000000000030;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.itemCollectionStatusSectionHeaderIdentifier()
{
  return 0xD00000000000002BLL;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.itemCollectionGroupedSectionHeaderIdentifier()
{
  return 0xD00000000000002CLL;
}

unint64_t variable initialization expression of DOCItemCollectionViewController.itemCollectionStatusSectionEmptyHeaderIdentifier()
{
  return 0xD000000000000030;
}

uint64_t variable initialization expression of DOCItemCollectionViewController.searchPresentationState()
{
  return 4;
}

_QWORD *variable initialization expression of DOCItemCollectionViewController.cellContentPool()
{
  uint64_t v0;
  _QWORD *v1;

  v0 = type metadata accessor for DOCItemCollectionCellContentPool();
  v1 = (_QWORD *)swift_allocObject(v0, 40, 7);
  v1[2] = 0;
  v1[3] = objc_msgSend(objc_allocWithZone((Class)NSLock), "init");
  v1[4] = sub_10008AD3C((uint64_t)_swiftEmptyArrayStorage);
  return v1;
}

uint64_t variable initialization expression of DOCItemCollectionViewController.thumbnailLoadingPool()
{
  return sub_1000C58B4((uint64_t (*)(_QWORD))type metadata accessor for DOCThumbnailLoadingPool, 40, sub_100019050);
}

uint64_t variable initialization expression of DOCItemCollectionViewController.collectionViewLayoutOptimizationContext()
{
  return 2;
}

id variable initialization expression of DOCItemCollectionViewController.appLaunchOptimizationsActive()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(DOCPostLaunchBuffer), "shared");
  v1 = objc_msgSend(v0, "locked");

  return v1;
}

_QWORD *variable initialization expression of DOCItemCollectionViewController.itemsController()
{
  sub_10008AC14((uint64_t)_swiftEmptyArrayStorage);
  return _swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of DOCItemCollectionViewController._groupingBehavior()
{
  return 7;
}

uint64_t variable initialization expression of DOCItemCollectionViewController.shouldShowAllFilenameExtensionPublisher()
{
  if (qword_1006410A8 != -1)
    swift_once(&qword_1006410A8, sub_1000AA544);
  return sub_100392098();
}

id variable initialization expression of DOCItemCollectionViewController.typeToFocusController()
{
  return sub_1000C5F00((uint64_t (*)(_QWORD))&type metadata accessor for DOCTypeToFocusController);
}

uint64_t variable initialization expression of DOCItemCollectionViewController.$__lazy_storage_$_listLayoutConfiguration@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C6524((uint64_t (*)(_QWORD))&type metadata accessor for UICollectionLayoutListConfiguration, a1);
}

double variable initialization expression of DOCItemCollectionViewController.tableLayoutSidebarPlainAppearanceMetrics@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_1004D4CF0;
  result = 12.0;
  *(_OWORD *)(a1 + 24) = xmmword_1004D4D00;
  return result;
}

double variable initialization expression of DOCItemCollectionViewController.preSnapshotConfiguration@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of DOCItemCollectionViewController.sortingDescriptor()
{
  return 0;
}

uint64_t variable initialization expression of DOCItemCollectionViewController.overridenEstimatedCollectionViewSize()
{
  return 0;
}

uint64_t variable initialization expression of DOCItemCollectionViewController.enqueuedNodeToSelectAndScroll()
{
  return 0;
}

uint64_t variable initialization expression of DOCItemCollectionViewController.enqueuedNodeScrollPositionInfo@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C6524(type metadata accessor for ScrollPositionInfo, a1);
}

uint64_t variable initialization expression of DOCItemCollectionViewController.bbiStorage()
{
  return sub_1000C58B4((uint64_t (*)(_QWORD))_s10BBIStorageCMa, 208, (uint64_t (*)(void))sub_1002CF03C);
}

uint64_t sub_1000C58B4(uint64_t (*a1)(_QWORD), uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5;

  v5 = a1(0);
  swift_allocObject(v5, a2, 7);
  return a3();
}

uint64_t variable initialization expression of DOCHierarchyController._currentUpdateExpectation@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C6524(type metadata accessor for DOCHierarchyController.UpdateExpectation, a1);
}

uint64_t variable initialization expression of DOCHierarchyController.loadingDisabledOperation@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C6524(type metadata accessor for DOCHierarchyController.FetchingOperationToken, a1);
}

uint64_t variable initialization expression of DOCHierarchyController.locationChangePreparationQueue()
{
  return sub_1000C6058(0xD000000000000032, 0x800000010050BFA0);
}

uint64_t variable initialization expression of DOCHierarchyController.nodeResolvingQueue()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v20 = *(_QWORD *)(v0 - 8);
  v21 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.userInitiated(_:), v9);
  v13 = static OS_dispatch_queue.global(qos:)(v12);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  static DispatchQoS.unspecified.getter(v14);
  v22 = _swiftEmptyArrayStorage;
  v15 = sub_10005A360((unint64_t *)&qword_100643640, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10006922C((uint64_t *)&unk_100641280);
  v17 = sub_10008825C((unint64_t *)&qword_100643650, (uint64_t *)&unk_100641280);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v3, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v2, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v21);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000040, 0x800000010050BFE0, v8, v5, v2, v13);
}

uint64_t variable initialization expression of DOCHierarchyController.lastVisitedLocationSavingQueue()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v0 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v10 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_10005A360((unint64_t *)&qword_100643640, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v12 = sub_10006922C((uint64_t *)&unk_100641280);
  v13 = sub_10008825C((unint64_t *)&qword_100643650, (uint64_t *)&unk_100641280);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v0, v11);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000038, 0x800000010050C030, v5, v2, v9, 0);
}

uint64_t variable initialization expression of DOCItemCollectionCellContent.lastPartialProgress()
{
  return 0;
}

double variable initialization expression of DOCImageContainerFittingView.metrics()
{
  return 5.0;
}

double variable initialization expression of DOCItemCollectionCellContent.minimumRowHeight()
{
  return 0.0;
}

uint64_t variable initialization expression of DOCImageContainerFittingView.maxThumbnailCount()
{
  return 3;
}

double variable initialization expression of DOCItemInfoContentViewController.lastThumbnailSize()
{
  return 0.0;
}

__n128 variable initialization expression of DOCItemInfoContentViewController.metrics@<Q0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __n128 result;
  _OWORD v4[5];

  sub_10023103C((uint64_t)v4);
  v2 = v4[3];
  *(_OWORD *)(a1 + 32) = v4[2];
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = v4[4];
  result = (__n128)v4[1];
  *(_OWORD *)a1 = v4[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

double variable initialization expression of DOCItemInfoContentViewController.layoutMargins()
{
  return 16.0;
}

uint64_t variable initialization expression of DOCItemInfoContentViewController._statusAppearance()
{
  return 10;
}

id variable initialization expression of DOCItemInfoContentViewController.rootContentView()
{
  return sub_1000C5F00((uint64_t (*)(_QWORD))type metadata accessor for DOCItemInfoContentViewController.RootHStack);
}

unint64_t variable initialization expression of DOCItemInfoContentViewController.actionsForCurrentActivityViewController()
{
  return sub_1003F1F0C((uint64_t)_swiftEmptyArrayStorage);
}

double variable initialization expression of DOCSidebarViewController._diffableDataSource@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

unint64_t variable initialization expression of DOCSidebarViewController.itemToCachedIcon()
{
  return sub_1003F2024((uint64_t)_swiftEmptyArrayStorage);
}

double variable initialization expression of DOCSidebarViewController.itemSelectionPacer()
{
  return sub_10023C938(3, 0.5);
}

uint64_t variable initialization expression of DOCSidebarViewController.currentlySelectedSidebarItem()
{
  return 0;
}

uint64_t variable initialization expression of DOCSidebarViewController.locationSelection()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for DOCSidebarViewController.LocationSelection();
  result = swift_allocObject(v0, 32, 7);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t variable initialization expression of DOCSidebarViewController.sectionsDisablingUpdateAnimationUntilFirstLoad()
{
  unint64_t v0;
  char v2;
  uint64_t v3;

  v0 = sub_1000AE08C();
  v3 = Set.init(minimumCapacity:)(6, &type metadata for DOCSidebarSectionKind, v0);
  sub_100026E44((uint64_t)&v2, 0);
  sub_100026E44((uint64_t)&v2, 1);
  sub_100026E44((uint64_t)&v2, 2);
  sub_100026E44((uint64_t)&v2, 3);
  sub_100026E44((uint64_t)&v2, 4);
  sub_100026E44((uint64_t)&v2, 5);
  return v3;
}

double variable initialization expression of DOCSidebarViewController.bbiStorage()
{
  uint64_t v0;
  _OWORD *v1;
  double result;

  v0 = type metadata accessor for DOCSidebarViewController.BBIStorage();
  v1 = (_OWORD *)swift_allocObject(v0, 64, 7);
  result = 0.0;
  v1[1] = 0u;
  v1[2] = 0u;
  v1[3] = 0u;
  return result;
}

id variable initialization expression of DOCSidebarViewController.actionManager()
{
  return sub_1000C5F00((uint64_t (*)(_QWORD))type metadata accessor for DOCActionManager);
}

id sub_1000C5F00(uint64_t (*a1)(_QWORD))
{
  return objc_msgSend(objc_allocWithZone((Class)a1(0)), "init");
}

double variable initialization expression of DOCItemRenameTextView.verticalMargin()
{
  return 2.0;
}

uint64_t variable initialization expression of DOCAbstractPacedPropertyUpdater.$__lazy_storage_$_clientNotifyState@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C6524(type metadata accessor for DOCAbstractPacedPropertyUpdater.ClientNotifyState, a1);
}

double variable initialization expression of DOCTabBarVariableBlurBackgroundView.metrics@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 6.0;
  *(_OWORD *)a1 = xmmword_1004D4D10;
  *(_QWORD *)(a1 + 16) = 0x402C000000000000;
  *(_QWORD *)(a1 + 24) = &off_1005C02B8;
  *(_QWORD *)(a1 + 32) = &off_1005C0308;
  return result;
}

double variable initialization expression of DOCTabBarVariableBlurBackgroundView.lastSeenBounds()
{
  return 0.0;
}

id variable initialization expression of DOCTabBarVariableBlurBackgroundView.blurView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "init");
}

uint64_t variable initialization expression of DOCOperationCombinedProgress.progressValue()
{
  return 0;
}

uint64_t variable initialization expression of DOCOperationCombinedProgress.operationProgressByID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;

  v4 = type metadata accessor for DOCOperationProgress(255, a1, a3, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for AnyHashable, v4, 0, 0);
  v6 = static Array._allocateUninitialized(_:)(0, TupleTypeMetadata2);
  return Dictionary.init(dictionaryLiteral:)(v6, &type metadata for AnyHashable, v4, &protocol witness table for AnyHashable);
}

_UNKNOWN **variable initialization expression of DOCFileProviderSource.sortingModes()
{
  return &off_1005C0448;
}

uint64_t variable initialization expression of DOCBrowserContainerController.state()
{
  return 5;
}

_UNKNOWN **variable initialization expression of DOCFileProviderSource.availableDisplayModes()
{
  return &off_1005C0470;
}

uint64_t variable initialization expression of DOCBrowserContainerController.queue()
{
  return sub_1000C6058(0xD000000000000028, 0x800000010050C070);
}

uint64_t sub_1000C6058(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v18 = a1;
  v19 = a2;
  v17 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v2 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v12 = static OS_dispatch_queue.main.getter(v11);
  static DispatchQoS.unspecified.getter(v12);
  v20 = _swiftEmptyArrayStorage;
  v13 = sub_10005A360((unint64_t *)&qword_100643640, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10006922C((uint64_t *)&unk_100641280);
  v15 = sub_10008825C((unint64_t *)&qword_100643650, (uint64_t *)&unk_100641280);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v14, v15, v5, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v17);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v18, v19, v10, v7, v4, v12);
}

uint64_t variable initialization expression of DOCFakeStaticContentProgress.identifier()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = UUID.init()(v2);
  v6 = UUID.uuidString.getter(v5);
  v8 = v7;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  v10[0] = v6;
  v10[1] = v8;
  return AnyHashable.init<A>(_:)(v10, &type metadata for String, &protocol witness table for String);
}

id variable initialization expression of DOCFakeStaticContentProgress.progress()
{
  return objc_msgSend(objc_allocWithZone((Class)NSProgress), "init");
}

unint64_t variable initialization expression of DOCFileOperationsManager.trackedItemsByID()
{
  return sub_10008AF9C((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t variable initialization expression of DOCFileOperationsManager.observers()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_10006922C(&qword_100641298);
  result = swift_allocObject(v0, 24, 7);
  *(_QWORD *)(result + 16) = _swiftEmptyArrayStorage;
  return result;
}

uint64_t variable initialization expression of DOCFileOperationsManager.testablesProviderObservance@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C6524((uint64_t (*)(_QWORD))&type metadata accessor for UUID, a1);
}

double variable initialization expression of DOCInlineRenameController.previousKeyboardFrame@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t variable initialization expression of DOCMetadataFolderSizingViewModel.folderSize()
{
  return 0;
}

uint64_t variable initialization expression of DOCItemCollectionView.focusableCollectionViewState()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);

  v0 = type metadata accessor for DOCFocusableCollectionViewState(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1 + OBJC_IVAR____TtC5Files31DOCFocusableCollectionViewState_indexPathForMostRecentlySelectedItem;
  v3 = type metadata accessor for IndexPath(0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  v4(v1 + OBJC_IVAR____TtC5Files31DOCFocusableCollectionViewState_indexPathForSelectionExtensionStart, 1, 1, v3);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC5Files31DOCFocusableCollectionViewState_hasFocus) = 0;
  return v1;
}

id variable initialization expression of DOCItemCollectionView.backgroundTapGestureRecognizer()
{
  return objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "init");
}

uint64_t _s5Files28DOCOperationCombinedProgressC7debugID33_1A97632AB0D3E1E013EFFCB739CB2E29LLSsvpfi_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = UUID.init()(v4);
  v6 = UUID.uuidString.getter(v5);
  v8 = v7;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v9 = sub_100087794(6, v6, v8);
  swift_bridgeObjectRelease(v8);
  return v9;
}

uint64_t variable initialization expression of DOCOperationProgress._cachedLocalizedOperationDescription()
{
  return 0;
}

uint64_t variable initialization expression of DOCPreviewController.source()
{
  return 0;
}

uint64_t variable initialization expression of DOCPreviewController.importedURL@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C6524((uint64_t (*)(_QWORD))&type metadata accessor for URL, a1);
}

uint64_t sub_1000C6524@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

uint64_t variable initialization expression of DOCViewController.appearStateTracker()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for DOCAppearStateTracker();
  result = swift_allocObject(v0, 19, 7);
  *(_WORD *)(result + 16) = 0;
  *(_BYTE *)(result + 18) = 0;
  return result;
}

uint64_t variable initialization expression of DOCItemCollectionCellContent.gridItemLayoutTraits@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[184];

  sub_1000D07C0((uint64_t)v3);
  return sub_100070EDC((uint64_t)v3, a1, (uint64_t *)&unk_100641300);
}

uint64_t variable initialization expression of DOCItemCollectionCellContent.listItemLayoutTraits@<X0>(uint64_t a1@<X8>)
{
  _OWORD v3[8];

  sub_1000D07E4(v3);
  return sub_100070EDC((uint64_t)v3, a1, &qword_100658670);
}

double variable initialization expression of DOCItemCollectionCellContent.stackMetrics@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 40) = 1;
  return result;
}

id variable initialization expression of DOCItemCollectionCellContent.thumbnailUpdateLock()
{
  return objc_msgSend(objc_allocWithZone((Class)NSLock), "init");
}

id variable initialization expression of DOCItemCollectionCellContent._titleColor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
}

id variable initialization expression of DOCItemCollectionCellContent.trailingAttachmentcolor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
}

uint64_t variable initialization expression of DOCItemCollectionCellContent._titleWithTags@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[200];

  sub_1000D07FC((uint64_t)v3);
  return sub_100070EDC((uint64_t)v3, a1, (uint64_t *)&unk_100641310);
}

double variable initialization expression of DOCItemCollectionCellContent.minimumProgressFractionForStatusTextUpdate()
{
  return 0.05;
}

NSNumber sub_1000C66F4()
{
  return Float._bridgeToObjectiveC()();
}

uint64_t sub_1000C66FC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  int v5;
  int v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static Float._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v4;
  return result;
}

uint64_t sub_1000C674C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  int v5;
  int v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static Float._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v4;
  return v3 & 1;
}

void sub_1000C67A0(float *a1@<X8>)
{
  *a1 = static Float._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_1000C67CC(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1000C67D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_1000C67F4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1000C6808@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_1000C681C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1000C6848@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1000C686C(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1000C6880@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000C6894(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1000C68A8()
{
  _QWORD *v0;

  return *v0 == 0;
}

_QWORD *sub_1000C68B8(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

Swift::Int sub_1000C68CC()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000C6910()
{
  Swift::UInt32 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000C6938(uint64_t a1)
{
  Swift::UInt32 *v1;
  Swift::UInt32 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

NSNumber sub_1000C6978()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t sub_1000C6980(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static CGFloat._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_1000C69D0(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return v3 & 1;
}

void sub_1000C6A24(double *a1@<X8>)
{
  *a1 = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000C6A48@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void sub_1000C6A50(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1000C6A58@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1000C6A6C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_DWORD *sub_1000C6A80@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_1000C6AAC@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_1000C6AD0(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *sub_1000C6AE4@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000C6AF8(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000C6B0C(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1000C6B20(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1000C6B34()
{
  _DWORD *v0;

  return *v0 == 0;
}

_DWORD *sub_1000C6B44(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

_DWORD *sub_1000C6B58@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL sub_1000C6B6C(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_1000C6B9C(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *sub_1000C6BB0(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

uint64_t sub_1000C6BC4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10005A360(&qword_100641DC8, (uint64_t (*)(uint64_t))type metadata accessor for UIDocumentBrowserError, (uint64_t)&unk_1004D8BA4);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000C6C04(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10005A360(&qword_100641DC8, (uint64_t (*)(uint64_t))type metadata accessor for UIDocumentBrowserError, (uint64_t)&unk_1004D8BA4);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000C6C48(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10005A360((unint64_t *)&qword_100641E00, (uint64_t (*)(uint64_t))type metadata accessor for UIDocumentBrowserError, (uint64_t)&unk_1004D905C);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

_QWORD *sub_1000C6C88@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL sub_1000C6C9C(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1000C6CCC(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1000C6CE0(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

void sub_1000C6CF4(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void sub_1000C6D00()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t sub_1000C6D28@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

uint64_t sub_1000C6D68(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10005A360(&qword_100641E20, (uint64_t (*)(uint64_t))type metadata accessor for CSSearchQueryError, (uint64_t)&unk_1004D79D4);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000C6DA8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10005A360(&qword_100641E20, (uint64_t (*)(uint64_t))type metadata accessor for CSSearchQueryError, (uint64_t)&unk_1004D79D4);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000C6DE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10005A360(&qword_100641E50, (uint64_t (*)(uint64_t))type metadata accessor for CSSearchQueryError, (uint64_t)&unk_1004D9298);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_1000C6E28()
{
  id *v0;

  return *v0;
}

BOOL sub_1000C6E30(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000C6E44()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000C6E88(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000C6EC8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_1004B0684();
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

void sub_1000C6F04(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  v4 = sub_1000D25FC(a1);
  swift_bridgeObjectRelease(a1);
  *a2 = v4;
}

BOOL sub_1000C6F40(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000C6F54(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

uint64_t sub_1000C6F68()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(UIDocumentBrowserErrorDomain);
}

uint64_t sub_1000C6F78(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10005A360((unint64_t *)&qword_100641E00, (uint64_t (*)(uint64_t))type metadata accessor for UIDocumentBrowserError, (uint64_t)&unk_1004D905C);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000C6FB8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10005A360((unint64_t *)&qword_100641E00, (uint64_t (*)(uint64_t))type metadata accessor for UIDocumentBrowserError, (uint64_t)&unk_1004D905C);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000C6FF8(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10005A360((unint64_t *)&qword_100641E00, (uint64_t (*)(uint64_t))type metadata accessor for UIDocumentBrowserError, (uint64_t)&unk_1004D905C);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000C705C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10005A360((unint64_t *)&qword_100641E00, (uint64_t (*)(uint64_t))type metadata accessor for UIDocumentBrowserError, (uint64_t)&unk_1004D905C);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

void sub_1000C70B0(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v4;

  v4 = sub_1004B0688(a1);
  swift_bridgeObjectRelease(a1);
  *a2 = v4;
}

BOOL sub_1000C70EC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

_DWORD *sub_1000C7100@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000C710C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_1006418A0, (uint64_t (*)(uint64_t))type metadata accessor for DOCDocumentSourceIdentifier, (uint64_t)&unk_1004D532C);
  v3 = sub_10005A360(&qword_1006418A8, (uint64_t (*)(uint64_t))type metadata accessor for DOCDocumentSourceIdentifier, (uint64_t)&unk_1004D52D4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

_QWORD *sub_1000C7190@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000C719C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CSSearchQueryErrorDomain);
}

uint64_t sub_1000C71AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10005A360(&qword_100641E50, (uint64_t (*)(uint64_t))type metadata accessor for CSSearchQueryError, (uint64_t)&unk_1004D9298);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000C71EC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10005A360(&qword_100641E50, (uint64_t (*)(uint64_t))type metadata accessor for CSSearchQueryError, (uint64_t)&unk_1004D9298);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000C722C(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10005A360(&qword_100641E50, (uint64_t (*)(uint64_t))type metadata accessor for CSSearchQueryError, (uint64_t)&unk_1004D9298);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000C7290()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_1000C72C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10005A360(&qword_100641E50, (uint64_t (*)(uint64_t))type metadata accessor for CSSearchQueryError, (uint64_t)&unk_1004D9298);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000C7314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_1000C7370(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641850, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1004D5C14);
  v3 = sub_10005A360(&qword_100641858, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1004D5BB4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

_DWORD *sub_1000C73F4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

float sub_1000C7404@<S0>(_DWORD *a1@<X8>)
{
  float *v1;
  float result;

  result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t sub_1000C7410(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641EF8, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_1004D7F8C);
  v3 = sub_10005A360(&qword_100641F00, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_1004D7F2C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for Float);
}

uint64_t sub_1000C74A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360((unint64_t *)&qword_1006424E0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1004D93A8);
  v3 = sub_10005A360(&qword_100641F50, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1004D7690);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C7528(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360((unint64_t *)&qword_1006418B0, (uint64_t (*)(uint64_t))type metadata accessor for FPAction, (uint64_t)&unk_1004D69D0);
  v3 = sub_10005A360(&qword_1006418B8, (uint64_t (*)(uint64_t))type metadata accessor for FPAction, (uint64_t)&unk_1004D51D4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C75AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641840, (uint64_t (*)(uint64_t))type metadata accessor for DOCSpotlightEnumeratedItemIdentifier, (uint64_t)&unk_1004D5DFC);
  v3 = sub_10005A360(&qword_100641848, (uint64_t (*)(uint64_t))type metadata accessor for DOCSpotlightEnumeratedItemIdentifier, (uint64_t)&unk_1004D5DA4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C7630(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641830, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1004D643C);
  v3 = sub_10005A360(&qword_100641838, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1004D63DC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C76B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641870, (uint64_t (*)(uint64_t))type metadata accessor for FPProviderDomainID, (uint64_t)&unk_1004D57E0);
  v3 = sub_10005A360(&qword_100641878, (uint64_t (*)(uint64_t))type metadata accessor for FPProviderDomainID, (uint64_t)&unk_1004D5788);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C7738(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641F28, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1004D7AE0);
  v3 = sub_10005A360(&qword_100641F30, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1004D7A80);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C77BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641EA0, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderItemIdentifier, (uint64_t)&unk_1004D87A4);
  v3 = sub_10005A360(&qword_100641EA8, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderItemIdentifier, (uint64_t)&unk_1004D8744);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C7840(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360((unint64_t *)&qword_100641890, (uint64_t (*)(uint64_t))type metadata accessor for ProgressUserInfoKey, (uint64_t)&unk_1004D698C);
  v3 = sub_10005A360(&qword_100641898, (uint64_t (*)(uint64_t))type metadata accessor for ProgressUserInfoKey, (uint64_t)&unk_1004D54C8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C78C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641E80, (uint64_t (*)(uint64_t))type metadata accessor for FileOperationKind, (uint64_t)&unk_1004D8A3C);
  v3 = sub_10005A360(&qword_100641E88, (uint64_t (*)(uint64_t))type metadata accessor for FileOperationKind, (uint64_t)&unk_1004D89DC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C7948(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641F68, (uint64_t (*)(uint64_t))type metadata accessor for FPProviderID, (uint64_t)&unk_1004D7328);
  v3 = sub_10005A360(&qword_100641F70, (uint64_t (*)(uint64_t))type metadata accessor for FPProviderID, (uint64_t)&unk_1004D72D0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C79CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360((unint64_t *)&qword_100645BA0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1004D915C);
  v3 = sub_10005A360((unint64_t *)&unk_100641EE0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1004D82E8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C7A50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641EC8, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1004D845C);
  v3 = sub_10005A360((unint64_t *)&unk_100641ED0, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1004D83FC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

_QWORD *sub_1000C7AD4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

double sub_1000C7AE4@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t sub_1000C7AF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = sub_10005A360(&qword_100641EB0, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1004D85B4);
  v3 = sub_10005A360(&qword_100641EB8, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1004D8554);
  v4 = sub_1000D24B8();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, v4);
}

uint64_t sub_1000C7B90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641F58, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1004D755C);
  v3 = sub_10005A360(&qword_100641F60, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1004D74FC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C7C14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641820, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderDomainIdentifier, (uint64_t)&unk_1004D6784);
  v3 = sub_10005A360(&qword_100641828, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderDomainIdentifier, (uint64_t)&unk_1004D6724);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C7C98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641E90, (uint64_t (*)(uint64_t))type metadata accessor for DOCIntentLocationType, (uint64_t)&unk_1004D88EC);
  v3 = sub_10005A360(&qword_100641E98, (uint64_t (*)(uint64_t))type metadata accessor for DOCIntentLocationType, (uint64_t)&unk_1004D8894);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C7D1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641880, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderSearchFilter, (uint64_t)&unk_1004D56A0);
  v3 = sub_10005A360(&qword_100641888, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderSearchFilter, (uint64_t)&unk_1004D5648);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C7DA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641F38, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1004D77F4);
  v3 = sub_10005A360((unint64_t *)&unk_100641F40, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1004D779C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C7E24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641E70, (uint64_t (*)(uint64_t))type metadata accessor for DOCTagRegistryChangeKey, (uint64_t)&unk_1004D901C);
  v3 = sub_10005A360(&qword_100641E78, (uint64_t (*)(uint64_t))type metadata accessor for DOCTagRegistryChangeKey, (uint64_t)&unk_1004D8DD4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C7EA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641860, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1004D6948);
  v3 = sub_10005A360(&qword_100641868, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1004D58D0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C7F2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641F78, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_1004D71E0);
  v3 = sub_10005A360(&qword_100641F80, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_1004D7180);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C7FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_10005A360((unint64_t *)&qword_100641E00, (uint64_t (*)(uint64_t))type metadata accessor for UIDocumentBrowserError, (uint64_t)&unk_1004D905C);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000C8008@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000C8030(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641F08, (uint64_t (*)(uint64_t))type metadata accessor for AVFileType, (uint64_t)&unk_1004D7E3C);
  v3 = sub_10005A360((unint64_t *)&unk_100641F10, (uint64_t (*)(uint64_t))type metadata accessor for AVFileType, (uint64_t)&unk_1004D7DE4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

void sub_1000C80B4(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1000C80C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360((unint64_t *)&unk_100650690, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1004D91A0);
  v3 = sub_10005A360(&qword_100641EF0, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1004D810C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C8144(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360((unint64_t *)&qword_100653010, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderServiceName, (uint64_t)&unk_1004D921C);
  v3 = sub_10005A360(&qword_100641F20, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderServiceName, (uint64_t)&unk_1004D7CD8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C81C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_1000C820C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10005A360(&qword_100641E60, (uint64_t (*)(uint64_t))type metadata accessor for PDFDocumentWriteOption, (uint64_t)&unk_1004D8FDC);
  v3 = sub_10005A360(&qword_100641E68, (uint64_t (*)(uint64_t))type metadata accessor for PDFDocumentWriteOption, (uint64_t)&unk_1004D8F3C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000C8290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_10005A360(&qword_100641E50, (uint64_t (*)(uint64_t))type metadata accessor for CSSearchQueryError, (uint64_t)&unk_1004D9298);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000C82E8()
{
  float *v0;

  return Float.hashValue.getter(*v0);
}

void sub_1000C82F0()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  if ((*v0 & 0x7FFFFFFF) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_1000C8320(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFF) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:bytes:count:)(a1, v2, 4);
}

uint64_t sub_1000C8334()
{
  double *v0;

  return Double.hashValue.getter(*v0);
}

void sub_1000C833C()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_1000C836C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:_:)(a1, v2);
}

uint64_t sub_1000C837C(uint64_t a1, uint64_t a2)
{
  return sub_100087314(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000C8388(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

BOOL sub_1000C83C8(float *a1, float *a2)
{
  return *a1 == *a2;
}

BOOL sub_1000C83DC(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000C83F0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  __int128 v15;
  uint64_t v17;
  _BYTE v18[40];

  v3 = v2;
  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 40);
  swift_bridgeObjectRetain(v6);
  v8 = AnyHashable._rawHashValue(seed:)(v7);
  v9 = -1 << *(_BYTE *)(v6 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    while (1)
    {
      sub_10006777C(*(_QWORD *)(v6 + 48) + 40 * v10, (uint64_t)v18);
      v12 = static AnyHashable.== infix(_:_:)(v18, a2);
      sub_100067748((uint64_t)v18);
      if ((v12 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease(v6);
    sub_100067748(a2);
    sub_10006777C(*(_QWORD *)(*v3 + 48) + 40 * v10, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    sub_10006777C(a2, (uint64_t)v18);
    v17 = *v3;
    *v3 = 0x8000000000000000;
    sub_1000CBC14((uint64_t)v18, v10, isUniquelyReferenced_nonNull_native);
    v14 = *v3;
    *v3 = v17;
    swift_bridgeObjectRelease(v14);
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    return 1;
  }
}

uint64_t sub_1000C8568(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  char isUniquelyReferenced_nonNull_native;
  id v31;
  uint64_t v32;
  void *v34;
  id v35;
  _QWORD v36[9];

  v3 = v2;
  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 40);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v10 = v9;
  Hasher.init(_seed:)(v36, v7);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v36, v8, v10);
  v11 = Hasher._finalize()();
  swift_bridgeObjectRelease(v10);
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v36[0] = *v3;
    *v3 = 0x8000000000000000;
    v31 = a2;
    sub_1000CBD7C(v31, v13, isUniquelyReferenced_nonNull_native);
    v32 = *v3;
    *v3 = v36[0];
    swift_bridgeObjectRelease(v32);
    *a1 = v31;
    return 1;
  }
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13));
  v16 = v15;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v14 == v17 && v16 == v18)
  {
LABEL_16:
    swift_bridgeObjectRelease_n(v16, 2);
  }
  else
  {
    v20 = v18;
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v20);
    if ((v21 & 1) == 0)
    {
      v22 = ~v12;
      do
      {
        v13 = (v13 + 1) & v22;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          goto LABEL_15;
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13));
        v16 = v24;
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
        if (v23 == v25 && v16 == v26)
          goto LABEL_16;
        v28 = v26;
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v16, v25, v26, 0);
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(v28);
      }
      while ((v29 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease(v6);
  v34 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v13);
  *a1 = v34;
  v35 = v34;
  return 0;
}

uint64_t sub_1000C8790(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  _QWORD v22[9];

  v7 = *v3;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  sub_1001469EC((uint64_t)v22, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_34:
    swift_bridgeObjectRelease(v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v22[0] = *v3;
    *v3 = 0x8000000000000000;
    sub_1000D1378(a2, a3);
    sub_1000CBFB8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    v21 = *v3;
    *v3 = v22[0];
    swift_bridgeObjectRelease(v21);
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  v11 = ~v9;
  v12 = *(_QWORD *)(v7 + 48);
  while (2)
  {
    v13 = (_QWORD *)(v12 + 16 * v10);
    v14 = v13[1];
    switch(v14)
    {
      case 0:
        if (a3)
          goto LABEL_4;
        goto LABEL_32;
      case 1:
        if (a3 == 1)
          goto LABEL_32;
        goto LABEL_4;
      case 2:
        if (a3 == 2)
          goto LABEL_32;
        goto LABEL_4;
      case 3:
        if (a3 == 3)
          goto LABEL_32;
        goto LABEL_4;
      case 4:
        if (a3 == 4)
          goto LABEL_32;
        goto LABEL_4;
      case 5:
        if (a3 == 5)
          goto LABEL_32;
        goto LABEL_4;
      case 6:
        if (a3 == 6)
          goto LABEL_32;
        goto LABEL_4;
      case 7:
        if (a3 == 7)
          goto LABEL_32;
        goto LABEL_4;
      case 8:
        if (a3 == 8)
          goto LABEL_32;
        goto LABEL_4;
      case 9:
        if (a3 == 9)
          goto LABEL_32;
        goto LABEL_4;
      case 10:
        if (a3 != 10)
          goto LABEL_4;
LABEL_32:
        swift_bridgeObjectRelease(v7);
        goto LABEL_33;
      default:
        if (a3 < 0xB
          || (*v13 == a2 ? (v15 = v14 == a3) : (v15 = 0),
              !v15 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14, a2, a3, 0) & 1) == 0))
        {
LABEL_4:
          v10 = (v10 + 1) & v11;
          if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
            goto LABEL_34;
          continue;
        }
        swift_bridgeObjectRelease(v7);
        sub_1000D13D0(a2, a3);
LABEL_33:
        v16 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
        v17 = *v16;
        v18 = v16[1];
        *a1 = *v16;
        a1[1] = v18;
        sub_1000D1378(v17, v18);
        return 0;
    }
  }
}

uint64_t sub_1000C89D0(Swift::Int *a1, void *a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  Swift::Int v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  Swift::Int v32;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      v31 = v9;
      v10 = sub_10004F2F0(0, (unint64_t *)&unk_1006428D0, UICollectionViewCell_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v32;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_1004443B4(v7, result + 1);
    v32 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v29 = v24 + 1;
      v30 = v8;
      sub_10004A0D8(v29, (uint64_t *)&unk_1006419C0);
      v25 = v32;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_100444640(v8, v25);
    v28 = *v3;
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_10004F2F0(0, (unint64_t *)&unk_1006428D0, UICollectionViewCell_ptr);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16, a2);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19, a2);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_10006A6D0((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_1006419C0, (unint64_t *)&unk_1006428D0, UICollectionViewCell_ptr);
    v28 = *v3;
    *v3 = v32;
  }
  swift_bridgeObjectRelease(v28);
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_1000C8C8C(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  char isUniquelyReferenced_nonNull_native;
  id v31;
  uint64_t v32;
  void *v34;
  id v35;
  _QWORD v36[9];

  v3 = v2;
  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 40);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v10 = v9;
  Hasher.init(_seed:)(v36, v7);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v36, v8, v10);
  v11 = Hasher._finalize()();
  swift_bridgeObjectRelease(v10);
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v36[0] = *v3;
    *v3 = 0x8000000000000000;
    v31 = a2;
    sub_1000CC200((uint64_t)v31, v13, isUniquelyReferenced_nonNull_native);
    v32 = *v3;
    *v3 = v36[0];
    swift_bridgeObjectRelease(v32);
    *a1 = v31;
    return 1;
  }
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13));
  v16 = v15;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v14 == v17 && v16 == v18)
  {
LABEL_16:
    swift_bridgeObjectRelease_n(v16, 2);
  }
  else
  {
    v20 = v18;
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v20);
    if ((v21 & 1) == 0)
    {
      v22 = ~v12;
      do
      {
        v13 = (v13 + 1) & v22;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          goto LABEL_15;
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13));
        v16 = v24;
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
        if (v23 == v25 && v16 == v26)
          goto LABEL_16;
        v28 = v26;
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v16, v25, v26, 0);
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(v28);
      }
      while ((v29 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease(v6);
  v34 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v13);
  *a1 = v34;
  v35 = v34;
  return 0;
}

uint64_t sub_1000C8EB4(_BYTE *a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _QWORD v16[9];

  v3 = v2;
  v6 = a2 & 1;
  v7 = *v3;
  Hasher.init(_seed:)(v16, *(_QWORD *)(*v3 + 40));
  Hasher._combine(_:)(a2 & 1);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v16[0] = *v3;
    *v3 = 0x8000000000000000;
    sub_1000CC43C(v6, v10, isUniquelyReferenced_nonNull_native);
    v15 = *v3;
    *v3 = v16[0];
    swift_bridgeObjectRelease(v15);
    result = 1;
    goto LABEL_8;
  }
  v11 = *(_QWORD *)(v7 + 48);
  if (((((_DWORD)v6 == 0) ^ *(unsigned __int8 *)(v11 + v10)) & 1) == 0)
  {
    v12 = ~v9;
    do
    {
      v10 = (v10 + 1) & v12;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_7;
    }
    while (((((_DWORD)v6 == 0) ^ *(unsigned __int8 *)(v11 + v10)) & 1) == 0);
  }
  result = 0;
  LOBYTE(v6) = *(_BYTE *)(*(_QWORD *)(*v3 + 48) + v10);
LABEL_8:
  *a1 = v6;
  return result;
}

uint64_t sub_1000C8FEC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  __n128 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_10005A360(&qword_10064D980, v12, (uint64_t)&protocol conformance descriptor for URL);
  swift_bridgeObjectRetain(v10);
  v37 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v33 = v3;
    v34 = a1;
    v35 = ~v15;
    v36 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_10005A360(&qword_1006418E0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v37, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v36 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v35;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v33;
        a1 = v34;
        v26 = v36;
        goto LABEL_7;
      }
    }
    v32 = swift_bridgeObjectRelease(v21);
    ((void (*)(uint64_t, uint64_t, __n128))v25)(v37, v6, v32);
    v22(v34, *(_QWORD *)(*v33 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v37;
    v20(v9, v37, v6);
    v38 = *v3;
    *v3 = 0x8000000000000000;
    sub_1000CC5A0((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v38;
    v30 = swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 32))(a1, v28, v6, v30);
    return 1;
  }
}

BOOL sub_1000C9248()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, *(_QWORD *)(*v0 + 40));
  Hasher._combine(_:)(0);
  v2 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v1 + 32));
  v3 = (1 << v2) & *(_QWORD *)(v1 + ((v2 >> 3) & 0xFFFFFFFFFFFFF8) + 56);
  if (!v3)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
    v7[0] = *v0;
    *v0 = 0x8000000000000000;
    sub_1000CC83C(v2, isUniquelyReferenced_nonNull_native);
    v5 = *v0;
    *v0 = v7[0];
    swift_bridgeObjectRelease(v5);
  }
  return v3 == 0;
}

uint64_t sub_1000C9308(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for UTType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_10005A360((unint64_t *)&unk_10064D9C0, v12, (uint64_t)&protocol conformance descriptor for UTType);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_10005A360((unint64_t *)&qword_100641980, (uint64_t (*)(uint64_t))&type metadata accessor for UTType, (uint64_t)&protocol conformance descriptor for UTType);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_1000CC938((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_1000C9564(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  Swift::UInt v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28[9];

  v9 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  swift_bridgeObjectRetain(v9);
  v10 = String.hashValue.getter(a2, a3);
  Hasher._combine(_:)(v10);
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v9 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = *(_QWORD *)(v9 + 48);
    v15 = (_QWORD *)(v14 + 24 * v13);
    v16 = v15[1];
    v17 = *v15 == a2 && v16 == a3;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v15, v16, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(a4);
      v18 = (uint64_t *)(*(_QWORD *)(*v4 + 48) + 24 * v13);
      v19 = v18[1];
      v20 = v18[2];
      *a1 = *v18;
      a1[1] = v19;
      a1[2] = v20;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      return 0;
    }
    v22 = ~v12;
    while (1)
    {
      v13 = (v13 + 1) & v22;
      if (((*(_QWORD *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        break;
      v23 = (_QWORD *)(v14 + 24 * v13);
      v24 = v23[1];
      v25 = *v23 == a2 && v24 == a3;
      if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v9);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  v28[0] = *v4;
  *v4 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a4);
  sub_1000CCB8C(a2, a3, a4, v13, isUniquelyReferenced_nonNull_native);
  v27 = *v4;
  *v4 = v28[0];
  swift_bridgeObjectRelease(v27);
  *a1 = a2;
  a1[1] = a3;
  result = 1;
  a1[2] = a4;
  return result;
}

uint64_t sub_1000C974C(Swift::Int *a1, void *a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  Swift::Int v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  Swift::Int v32;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      v31 = v9;
      v10 = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v32;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_10044461C(v7, result + 1);
    v32 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v29 = v24 + 1;
      v30 = v8;
      sub_10004A0D8(v29, &qword_1006419F0);
      v25 = v32;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_100444640(v8, v25);
    v28 = *v3;
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16, a2);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19, a2);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_10006A6D0((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native, &qword_1006419F0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    v28 = *v3;
    *v3 = v32;
  }
  swift_bridgeObjectRelease(v28);
  *a1 = (Swift::Int)v8;
  return 1;
}

void sub_1000C9A08(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C((uint64_t *)&unk_100641960);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v31 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v18 >= v11)
          goto LABEL_36;
        v19 = v8[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_36;
          v19 = v8[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_36;
            v19 = v8[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                v2 = v31;
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v11)
                    goto LABEL_36;
                  v19 = v8[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = *(_QWORD *)(v3 + 48) + 40 * v17;
      v32 = *(_OWORD *)v21;
      v33 = *(_OWORD *)(v21 + 16);
      v34 = *(_QWORD *)(v21 + 32);
      v22 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v25);
        }
        while (v29 == -1);
        v14 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = *(_QWORD *)(v6 + 48) + 40 * v14;
      *(_OWORD *)v15 = v32;
      *(_OWORD *)(v15 + 16) = v33;
      *(_QWORD *)(v15 + 32) = v34;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_1000C9CD0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD *v34;
  _QWORD v35[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C(&qword_1006419A0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v32 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v34 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v33 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    swift_retain();
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v11 << 6);
      }
      else
      {
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v15 >= v33)
          goto LABEL_36;
        v16 = v34[v15];
        ++v11;
        if (!v16)
        {
          v11 = v15 + 1;
          if (v15 + 1 >= v33)
            goto LABEL_36;
          v16 = v34[v11];
          if (!v16)
          {
            v11 = v15 + 2;
            if (v15 + 2 >= v33)
              goto LABEL_36;
            v16 = v34[v11];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v33)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v16 = v34[v17];
              if (!v16)
              {
                while (1)
                {
                  v11 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_42;
                  if (v11 >= v33)
                    goto LABEL_36;
                  v16 = v34[v11];
                  ++v17;
                  if (v16)
                    goto LABEL_26;
                }
              }
              v11 = v17;
            }
          }
        }
LABEL_26:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14);
      v19 = *(_QWORD *)(v6 + 40);
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v22 = v21;
      Hasher.init(_seed:)(v35, v19);
      String.hash(into:)(v35, v20, v22);
      v23 = Hasher._finalize()();
      swift_bridgeObjectRelease(v22);
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v10 + 8 * v26);
        }
        while (v30 == -1);
        v12 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

uint64_t sub_1000C9FE0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t *v34;
  _QWORD *v35;
  _QWORD v36[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C(&qword_100641990);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_54;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v34 = v2;
  v35 = (_QWORD *)(v3 + 56);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_55;
    if (v17 >= v10)
      break;
    v18 = v35[v17];
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v10)
        break;
      v18 = v35[v12];
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v10)
          break;
        v18 = v35[v12];
        if (!v18)
        {
          v19 = v17 + 3;
          if (v19 >= v10)
            break;
          v18 = v35[v19];
          if (!v18)
          {
            while (1)
            {
              v12 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_56;
              if (v12 >= v10)
                goto LABEL_50;
              v18 = v35[v12];
              ++v19;
              if (v18)
                goto LABEL_26;
            }
          }
          v12 = v19;
        }
      }
    }
LABEL_26:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v22 = *v20;
    v21 = v20[1];
    Hasher.init(_seed:)(v36, *(_QWORD *)(v6 + 40));
    switch(v21)
    {
      case 0:
        v23 = 0;
        goto LABEL_40;
      case 1:
        v23 = 1;
        goto LABEL_40;
      case 2:
        v23 = 2;
        goto LABEL_40;
      case 3:
        v23 = 3;
        goto LABEL_40;
      case 4:
        v23 = 4;
        goto LABEL_40;
      case 5:
        v23 = 5;
        goto LABEL_40;
      case 6:
        v23 = 6;
        goto LABEL_40;
      case 7:
        v23 = 7;
        goto LABEL_40;
      case 8:
        v23 = 8;
        goto LABEL_40;
      case 9:
        v23 = 9;
        goto LABEL_40;
      case 10:
        v23 = 11;
LABEL_40:
        Hasher._combine(_:)(v23);
        break;
      default:
        Hasher._combine(_:)(0xAuLL);
        String.hash(into:)(v36, v22, v21);
        break;
    }
    v24 = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v6 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_10;
    }
    v28 = 0;
    v29 = (unint64_t)(63 - v25) >> 6;
    do
    {
      if (++v27 == v29 && (v28 & 1) != 0)
      {
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        JUMPOUT(0x1000CA370);
      }
      v30 = v27 == v29;
      if (v27 == v29)
        v27 = 0;
      v28 |= v30;
      v31 = *(_QWORD *)(v11 + 8 * v27);
    }
    while (v31 == -1);
    v13 = __clz(__rbit64(~v31)) + (v27 << 6);
LABEL_10:
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v22;
    v14[1] = v21;
    ++*(_QWORD *)(v6 + 16);
  }
LABEL_50:
  swift_release(v3);
  v2 = v34;
  v32 = 1 << *(_BYTE *)(v3 + 32);
  if (v32 > 63)
    bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v35 = -1 << v32;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_54:
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

void sub_1000CA39C(uint64_t a1)
{
  sub_10004A0D8(a1, (uint64_t *)&unk_1006419C0);
}

void sub_1000CA3A8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD *v34;
  _QWORD v35[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C(&qword_100653180);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v32 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v34 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v33 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    swift_retain();
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v11 << 6);
      }
      else
      {
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v15 >= v33)
          goto LABEL_36;
        v16 = v34[v15];
        ++v11;
        if (!v16)
        {
          v11 = v15 + 1;
          if (v15 + 1 >= v33)
            goto LABEL_36;
          v16 = v34[v11];
          if (!v16)
          {
            v11 = v15 + 2;
            if (v15 + 2 >= v33)
              goto LABEL_36;
            v16 = v34[v11];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v33)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v16 = v34[v17];
              if (!v16)
              {
                while (1)
                {
                  v11 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_42;
                  if (v11 >= v33)
                    goto LABEL_36;
                  v16 = v34[v11];
                  ++v17;
                  if (v16)
                    goto LABEL_26;
                }
              }
              v11 = v17;
            }
          }
        }
LABEL_26:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14);
      v19 = *(_QWORD *)(v6 + 40);
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v22 = v21;
      Hasher.init(_seed:)(v35, v19);
      String.hash(into:)(v35, v20, v22);
      v23 = Hasher._finalize()();
      swift_bridgeObjectRelease(v22);
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v10 + 8 * v26);
        }
        while (v30 == -1);
        v12 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

Swift::Int sub_1000CA6B8(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C(&qword_1006419F8);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v29 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                v28 = 1 << *(_BYTE *)(v3 + 32);
                if (v28 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v16);
      Hasher.init(_seed:)(v30, *(_QWORD *)(v6 + 40));
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

void sub_1000CA960(uint64_t a1)
{
  sub_10004A0D8(a1, &qword_100655C30);
}

uint64_t sub_1000CA96C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18;
  uint64_t v19[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C((uint64_t *)&unk_100641A60);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v18 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = (_QWORD *)(v3 + 56);
  if (v6 < 64)
    v8 = ~(-1 << v6);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v11 = __clz(__rbit64(v9));
    goto LABEL_23;
  }
  if (v10 > 1)
  {
    v12 = *(_QWORD *)(v3 + 64);
    v13 = 1;
    if (v12)
      goto LABEL_22;
    v13 = 2;
    if (v10 > 2)
    {
      v12 = *(_QWORD *)(v3 + 72);
      if (v12)
        goto LABEL_22;
      v13 = 3;
      if (v10 > 3)
      {
        v12 = *(_QWORD *)(v3 + 80);
        if (!v12)
        {
          v14 = 4;
          if (v10 > 4)
          {
            v12 = *(_QWORD *)(v3 + 88);
            if (v12)
            {
              v13 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v13 = v14 + 1;
              if (__OFADD__(v14, 1))
              {
                __break(1u);
                JUMPOUT(0x1000CACC4);
              }
              if (v13 >= v10)
                break;
              v12 = v7[v13];
              ++v14;
              if (v12)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
        v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11);
        Hasher.init(_seed:)(v19, *(_QWORD *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release(v3);
  v2 = v18;
  v16 = 1 << *(_BYTE *)(v3 + 32);
  if (v16 > 63)
    bzero((void *)(v3 + 56), ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v7 = -1 << v16;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_28:
  result = swift_release(v3);
  *v2 = v5;
  return result;
}

void sub_1000CACDC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  _QWORD v41[9];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C(&qword_100641750);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v40 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v38 = v2;
    v39 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    swift_retain();
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v17 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v18 = v17 | (v11 << 6);
      }
      else
      {
        v19 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v19 >= v39)
          goto LABEL_36;
        v20 = v40[v19];
        ++v11;
        if (!v20)
        {
          v11 = v19 + 1;
          if (v19 + 1 >= v39)
            goto LABEL_36;
          v20 = v40[v11];
          if (!v20)
          {
            v11 = v19 + 2;
            if (v19 + 2 >= v39)
              goto LABEL_36;
            v20 = v40[v11];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v39)
              {
LABEL_36:
                swift_release(v3);
                v2 = v38;
                v37 = 1 << *(_BYTE *)(v3 + 32);
                if (v37 > 63)
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v40 = -1 << v37;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v20 = v40[v21];
              if (!v20)
              {
                while (1)
                {
                  v11 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_42;
                  if (v11 >= v39)
                    goto LABEL_36;
                  v20 = v40[v11];
                  ++v21;
                  if (v20)
                    goto LABEL_26;
                }
              }
              v11 = v21;
            }
          }
        }
LABEL_26:
        v9 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v11 << 6);
      }
      v22 = v3;
      v23 = *(_QWORD *)(v3 + 48) + 56 * v18;
      v24 = *(_OWORD *)v23;
      v25 = *(_QWORD *)(v23 + 48);
      v26 = *(_OWORD *)(v23 + 32);
      v43 = *(_OWORD *)(v23 + 16);
      v44 = v26;
      v45 = v25;
      v42 = v24;
      Hasher.init(_seed:)(v41, *(_QWORD *)(v6 + 40));
      v27 = v44;
      v28 = v45;
      sub_10007E7A0((_QWORD *)&v42 + 1, v44);
      dispatch thunk of Hashable.hash(into:)(v41, v27, v28);
      v29 = Hasher._finalize()();
      v30 = -1 << *(_BYTE *)(v6 + 32);
      v31 = v29 & ~v30;
      v32 = v31 >> 6;
      if (((-1 << v31) & ~*(_QWORD *)(v10 + 8 * (v31 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v10 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
        v3 = v22;
      }
      else
      {
        v33 = 0;
        v34 = (unint64_t)(63 - v30) >> 6;
        v3 = v22;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v35 = v32 == v34;
          if (v32 == v34)
            v32 = 0;
          v33 |= v35;
          v36 = *(_QWORD *)(v10 + 8 * v32);
        }
        while (v36 == -1);
        v12 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = *(_QWORD *)(v6 + 48) + 56 * v12;
      v14 = v42;
      v15 = v43;
      v16 = v44;
      *(_QWORD *)(v13 + 48) = v45;
      *(_OWORD *)(v13 + 16) = v15;
      *(_OWORD *)(v13 + 32) = v16;
      *(_OWORD *)v13 = v14;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

Swift::Int sub_1000CB02C(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int *v25;
  Swift::Int v26;
  uint64_t v27[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C((uint64_t *)&unk_1006418F0);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v25 = v2;
    v26 = v3;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (!v11)
      {
        v15 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v15 >= v12)
          goto LABEL_34;
        v11 = v8[v15];
        ++v7;
        if (!v11)
        {
          v7 = v15 + 1;
          if (v15 + 1 >= v12)
            goto LABEL_34;
          v11 = v8[v7];
          if (!v11)
          {
            v7 = v15 + 2;
            if (v15 + 2 >= v12)
              goto LABEL_34;
            v11 = v8[v7];
            if (!v11)
            {
              v16 = v15 + 3;
              if (v16 >= v12)
              {
LABEL_34:
                v3 = v26;
                v24 = 1 << *(_BYTE *)(v26 + 32);
                if (v24 > 63)
                  bzero(v8, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v24;
                v2 = v25;
                *(_QWORD *)(v26 + 16) = 0;
                break;
              }
              v11 = v8[v16];
              if (!v11)
              {
                while (1)
                {
                  v7 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_40;
                  if (v7 >= v12)
                    goto LABEL_34;
                  v11 = v8[v7];
                  ++v16;
                  if (v11)
                    goto LABEL_25;
                }
              }
              v7 = v16;
            }
          }
        }
      }
LABEL_25:
      Hasher.init(_seed:)(v27, *(_QWORD *)(v6 + 40));
      Hasher._combine(_:)(0);
      result = Hasher._finalize()();
      v17 = -1 << *(_BYTE *)(v6 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v13 + 8 * (v18 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v13 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v20 = 0;
        v21 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v21 && (v20 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v22 = v19 == v21;
          if (v19 == v21)
            v19 = 0;
          v20 |= v22;
          v23 = *(_QWORD *)(v13 + 8 * v19);
        }
        while (v23 == -1);
        v14 = __clz(__rbit64(~v23)) + (v19 << 6);
      }
      v11 &= v11 - 1;
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

void sub_1000CB2A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int v19;
  Swift::UInt v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int64_t v31;
  uint64_t v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C(&qword_1006419A8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v31 = (unint64_t)(v9 + 63) >> 6;
    v12 = v5 + 56;
    while (1)
    {
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v7 << 6);
      }
      else
      {
        v16 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
          return;
        }
        if (v16 >= v31)
          goto LABEL_44;
        v17 = v8[v16];
        ++v7;
        if (!v17)
        {
          v7 = v16 + 1;
          if (v16 + 1 >= v31)
            goto LABEL_44;
          v17 = v8[v7];
          if (!v17)
          {
            v7 = v16 + 2;
            if (v16 + 2 >= v31)
              goto LABEL_44;
            v17 = v8[v7];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v31)
              {
LABEL_44:
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                v2 = v30;
                *(_QWORD *)(v3 + 16) = 0;
                goto LABEL_48;
              }
              v17 = v8[v18];
              if (!v17)
              {
                while (1)
                {
                  v7 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_50;
                  if (v7 >= v31)
                    goto LABEL_44;
                  v17 = v8[v7];
                  ++v18;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v7 = v18;
            }
          }
        }
LABEL_26:
        v11 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v7 << 6);
      }
      v19 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v15);
      Hasher.init(_seed:)(v32, *(_QWORD *)(v6 + 40));
      if (v19 == 2)
        break;
      if (v19 == 3)
      {
        v20 = 2;
        goto LABEL_33;
      }
      if (v19 == 4)
      {
        v20 = 3;
LABEL_33:
        Hasher._combine(_:)(v20);
        goto LABEL_35;
      }
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v19 & 1);
LABEL_35:
      v21 = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = v21 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_49;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v13 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v13) = v19;
      ++*(_QWORD *)(v6 + 16);
    }
    v20 = 1;
    goto LABEL_33;
  }
LABEL_48:
  swift_release(v3);
  *v2 = v6;
}

void sub_1000CB5B0(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t, __n128);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  unint64_t *v49;
  uint64_t v50;

  v49 = a4;
  v50 = a5;
  v7 = v5;
  v48 = a2;
  v9 = a2(0);
  v47 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - v10;
  v12 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_10006922C(a3);
  v13 = static _SetStorage.resize(original:capacity:move:)(v12, a1, 1);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_39;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v46 = (_QWORD *)(v12 + 56);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v44 = v7;
  v45 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  v20 = swift_retain();
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_26;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }
    if (v25 >= v45)
      goto LABEL_35;
    v26 = v46[v25];
    ++v21;
    if (!v26)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v45)
        goto LABEL_35;
      v26 = v46[v21];
      if (!v26)
      {
        v21 = v25 + 2;
        if (v25 + 2 >= v45)
          goto LABEL_35;
        v26 = v46[v21];
        if (!v26)
          break;
      }
    }
LABEL_25:
    v18 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_26:
    v28 = v12;
    v29 = *(_QWORD *)(v12 + 48);
    v30 = *(_QWORD *)(v47 + 72);
    v31 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v47 + 32);
    v31(v11, v29 + v30 * v24, v9, v20);
    v32 = *(_QWORD *)(v14 + 40);
    v33 = sub_10005A360(v49, v48, v50);
    v34 = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    v35 = -1 << *(_BYTE *)(v14 + 32);
    v36 = v34 & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v19 + 8 * v37);
      }
      while (v41 == -1);
      v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    ((void (*)(unint64_t, char *, uint64_t))v31)(*(_QWORD *)(v14 + 48) + v22 * v30, v11, v9);
    ++*(_QWORD *)(v14 + 16);
    v12 = v28;
  }
  v27 = v25 + 3;
  if (v27 < v45)
  {
    v26 = v46[v27];
    if (!v26)
    {
      while (1)
      {
        v21 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_41;
        if (v21 >= v45)
          goto LABEL_35;
        v26 = v46[v21];
        ++v27;
        if (v26)
          goto LABEL_25;
      }
    }
    v21 = v27;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v12);
  v7 = v44;
  v42 = 1 << *(_BYTE *)(v12 + 32);
  if (v42 > 63)
    bzero(v46, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v46 = -1 << v42;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_39:
  swift_release(v12);
  *v7 = v14;
}

void sub_1000CB910(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  uint64_t v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C((uint64_t *)&unk_1006418D0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain();
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v32[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v32[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v32[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v32, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v32[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v32[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = *(_QWORD *)(v3 + 48) + 24 * v16;
      v21 = *(_QWORD *)v20;
      v33 = *(_OWORD *)(v20 + 8);
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      v22 = String.hashValue.getter(v21, v33);
      Hasher._combine(_:)(v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v6 + 48) + 24 * v13;
      *(_QWORD *)v14 = v21;
      *(_OWORD *)(v14 + 8) = v33;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_1000CBC08(uint64_t a1)
{
  sub_10004A0D8(a1, &qword_1006419F0);
}

uint64_t sub_1000CBC14(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _BYTE v20[40];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C9A08(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_1000CCD60();
      goto LABEL_12;
    }
    sub_1000CE1D4(v9);
  }
  v10 = *v3;
  result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v11 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = ~v11;
    do
    {
      sub_10006777C(*(_QWORD *)(v10 + 48) + 40 * a2, (uint64_t)v20);
      v13 = static AnyHashable.== infix(_:_:)(v20, v6);
      result = sub_100067748((uint64_t)v20);
      if ((v13 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v12;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v14 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v15 = *(_QWORD *)(v14 + 48) + 40 * a2;
  v16 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v6;
  *(_OWORD *)(v15 + 16) = v16;
  *(_QWORD *)(v15 + 32) = *(_QWORD *)(v6 + 32);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (!v18)
  {
    *(_QWORD *)(v14 + 16) = v19;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

id sub_1000CBD7C(id result, unint64_t a2, char a3)
{
  Swift::Int v3;
  uint64_t *v4;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[9];

  v4 = (uint64_t *)v3;
  v6 = result;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_22;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C9CD0(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = sub_1000CD298(&qword_1006419A0);
LABEL_22:
      v31 = *v4;
      *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(_QWORD *)(*(_QWORD *)(v31 + 48) + 8 * a2) = v6;
      v32 = *(_QWORD *)(v31 + 16);
      v33 = __OFADD__(v32, 1);
      v34 = v32 + 1;
      if (!v33)
      {
        *(_QWORD *)(v31 + 16) = v34;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_1000CE464(v9);
  }
  v10 = *(_QWORD *)v3;
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 40);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v14 = v13;
  Hasher.init(_seed:)(v36, v11);
  String.hash(into:)(v36, v12, v14);
  v3 = Hasher._finalize()();
  result = (id)swift_bridgeObjectRelease(v14);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v3 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_22;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2));
  v3 = v17;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  if (v16 == v18 && v3 == v19)
  {
LABEL_25:
    swift_bridgeObjectRelease_n(v3, 2);
    goto LABEL_26;
  }
  v21 = v19;
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v3, v18, v19, 0);
  swift_bridgeObjectRelease(v3);
  result = (id)swift_bridgeObjectRelease(v21);
  if ((v22 & 1) == 0)
  {
    v23 = ~v15;
    do
    {
      a2 = (a2 + 1) & v23;
      if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_22;
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2));
      v3 = v25;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      if (v24 == v26 && v3 == v27)
        goto LABEL_25;
      v29 = v27;
      v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v3, v26, v27, 0);
      swift_bridgeObjectRelease(v3);
      result = (id)swift_bridgeObjectRelease(v29);
    }
    while ((v30 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for FPAction(0);
  result = (id)ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v35);
  __break(1u);
  return result;
}

uint64_t sub_1000CBFB8(uint64_t result, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 <= v9 || (a4 & 1) == 0)
  {
    v11 = v9 + 1;
    if ((a4 & 1) != 0)
    {
      sub_1000C9FE0(v11);
    }
    else
    {
      if (v10 > v9)
      {
        result = (uint64_t)sub_1000CD0E8();
        goto LABEL_40;
      }
      sub_1000CE740(v11);
    }
    v12 = *v4;
    Hasher.init(_seed:)(v25, *(_QWORD *)(*v4 + 40));
    sub_1001469EC((uint64_t)v25, v8, a2);
    result = Hasher._finalize()();
    v13 = -1 << *(_BYTE *)(v12 + 32);
    a3 = result & ~v13;
    v14 = v12 + 56;
    if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v15 = ~v13;
      v16 = *(_QWORD *)(v12 + 48);
      while (1)
      {
        v17 = (_QWORD *)(v16 + 16 * a3);
        v18 = v17[1];
        switch(v18)
        {
          case 0:
            if (a2)
              goto LABEL_11;
            goto LABEL_39;
          case 1:
            if (a2 == 1)
              goto LABEL_39;
            goto LABEL_11;
          case 2:
            if (a2 == 2)
              goto LABEL_39;
            goto LABEL_11;
          case 3:
            if (a2 == 3)
              goto LABEL_39;
            goto LABEL_11;
          case 4:
            if (a2 != 4)
              goto LABEL_11;
            goto LABEL_39;
          case 5:
            if (a2 == 5)
              goto LABEL_39;
            goto LABEL_11;
          case 6:
            if (a2 == 6)
              goto LABEL_39;
            goto LABEL_11;
          case 7:
            if (a2 == 7)
              goto LABEL_39;
            goto LABEL_11;
          case 8:
            if (a2 == 8)
              goto LABEL_39;
            goto LABEL_11;
          case 9:
            if (a2 == 9)
              goto LABEL_39;
            goto LABEL_11;
          case 10:
            if (a2 == 10)
              goto LABEL_39;
            goto LABEL_11;
          default:
            if (a2 >= 0xB)
            {
              v19 = *v17 == v8 && v18 == a2;
              if (v19
                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, v8, a2, 0), (result & 1) != 0))
              {
LABEL_39:
                result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DOCItemFileTypeGroupCategory);
                __break(1u);
                goto LABEL_40;
              }
            }
LABEL_11:
            a3 = (a3 + 1) & v15;
            if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
              goto LABEL_40;
            break;
        }
      }
    }
  }
LABEL_40:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
  {
    __break(1u);
    JUMPOUT(0x1000CC1D4);
  }
  *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void sub_1000CC200(uint64_t a1, unint64_t a2, char a3)
{
  Swift::Int v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[9];

  v4 = (uint64_t *)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_22;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000CA3A8(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_1000CD298(&qword_100653180);
LABEL_22:
      v31 = *v4;
      *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(_QWORD *)(*(_QWORD *)(v31 + 48) + 8 * a2) = a1;
      v32 = *(_QWORD *)(v31 + 16);
      v33 = __OFADD__(v32, 1);
      v34 = v32 + 1;
      if (!v33)
      {
        *(_QWORD *)(v31 + 16) = v34;
        return;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_1000CEACC(v9);
  }
  v10 = *(_QWORD *)v3;
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 40);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v14 = v13;
  Hasher.init(_seed:)(v36, v11);
  String.hash(into:)(v36, v12, v14);
  v3 = Hasher._finalize()();
  swift_bridgeObjectRelease(v14);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v3 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_22;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2));
  v3 = v17;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v16 == v18 && v3 == v19)
  {
LABEL_25:
    swift_bridgeObjectRelease_n(v3, 2);
    goto LABEL_26;
  }
  v21 = v19;
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v3, v18, v19, 0);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v21);
  if ((v22 & 1) == 0)
  {
    v23 = ~v15;
    do
    {
      a2 = (a2 + 1) & v23;
      if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_22;
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2));
      v3 = v25;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      if (v24 == v26 && v3 == v27)
        goto LABEL_25;
      v29 = v27;
      v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v3, v26, v27, 0);
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v29);
    }
    while ((v30 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for DOCDocumentSourceIdentifier(0);
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v35);
  __break(1u);
}

uint64_t sub_1000CC43C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD v17[9];

  v5 = result & 1;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000CA6B8(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1000CD438();
      goto LABEL_14;
    }
    sub_1000CEDA8(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v17, *(_QWORD *)(*v3 + 40));
  Hasher._combine(_:)(v5);
  result = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (((((_DWORD)v5 == 0) ^ *(unsigned __int8 *)(v11 + a2)) & 1) != 0)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&_s30SuspendableUIChangeCoordinatorC21VisualChangeAssertionON);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (((((_DWORD)v5 == 0) ^ *(unsigned __int8 *)(v11 + a2)) & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v13 + 48) + a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

uint64_t sub_1000CC5A0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v31 = a1;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8.n128_f64[0] = __chkstk_darwin(v6);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v30 = v3;
  if (v12 <= v11 || (a3 & 1) == 0)
  {
    v13 = v11 + 1;
    if ((a3 & 1) != 0)
    {
      sub_1000CB5B0(v13, (uint64_t (*)(uint64_t))&type metadata accessor for URL, &qword_1006418E8, &qword_10064D980, (uint64_t)&protocol conformance descriptor for URL);
    }
    else
    {
      if (v12 > v11)
      {
        sub_1000CDDCC((uint64_t (*)(_QWORD))&type metadata accessor for URL, &qword_1006418E8);
        goto LABEL_12;
      }
      sub_1000CFB78(v13, (uint64_t (*)(uint64_t))&type metadata accessor for URL, &qword_1006418E8, &qword_10064D980, (uint64_t)&protocol conformance descriptor for URL);
    }
    v14 = *v3;
    v15 = *(_QWORD *)(*v3 + 40);
    v16 = sub_10005A360(&qword_10064D980, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v6, v16);
    v18 = -1 << *(_BYTE *)(v14 + 32);
    a2 = v17 & ~v18;
    if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v19 = ~v18;
      v20 = *(_QWORD *)(v7 + 72);
      v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
      while (1)
      {
        v21(v10, *(_QWORD *)(v14 + 48) + v20 * a2, v6);
        v22 = sub_10005A360(&qword_1006418E0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v31, v6, v22);
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        if ((v23 & 1) != 0)
          break;
        a2 = (a2 + 1) & v19;
        if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          goto LABEL_12;
      }
LABEL_15:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
      __break(1u);
      JUMPOUT(0x1000CC7F4);
    }
  }
LABEL_12:
  v24 = v31;
  v25 = *v30;
  *(_QWORD *)(*v30 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v25 + 48) + *(_QWORD *)(v7 + 72) * a2, v24, v6, v8);
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (v28)
  {
    __break(1u);
    goto LABEL_15;
  }
  *(_QWORD *)(v25 + 16) = v29;
  return result;
}

uint64_t sub_1000CC83C(uint64_t result, char a2)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD v12[9];

  v3 = result;
  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *(_QWORD *)(*v2 + 24);
  if (v5 <= v4 || (a2 & 1) == 0)
  {
    v6 = v4 + 1;
    if ((a2 & 1) != 0)
    {
      sub_1000CB02C(v6);
      goto LABEL_8;
    }
    if (v5 <= v4)
    {
      sub_1000CF658(v6);
LABEL_8:
      v7 = *v2;
      Hasher.init(_seed:)(v12, *(_QWORD *)(*v2 + 40));
      Hasher._combine(_:)(0);
      result = Hasher._finalize()();
      v3 = result & ~(-1 << *(_BYTE *)(v7 + 32));
      if (((*(_QWORD *)(v7 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v3) & 1) != 0)
        goto LABEL_12;
      goto LABEL_9;
    }
    result = (uint64_t)sub_1000CDAE0();
  }
LABEL_9:
  v8 = *v2;
  *(_QWORD *)(*v2 + 8 * (v3 >> 6) + 56) |= 1 << v3;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (!v10)
  {
    *(_QWORD *)(v8 + 16) = v11;
    return result;
  }
  __break(1u);
LABEL_12:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DOCUpdateGuardian.UpdatesDisabledReason);
  __break(1u);
  return result;
}

uint64_t sub_1000CC938(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for UTType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000CB5B0(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UTType, &qword_100641988, (unint64_t *)&unk_10064D9C0, (uint64_t)&protocol conformance descriptor for UTType);
  }
  else
  {
    if (v11 > v10)
    {
      sub_1000CDDCC((uint64_t (*)(_QWORD))&type metadata accessor for UTType, &qword_100641988);
      goto LABEL_12;
    }
    sub_1000CFB78(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UTType, &qword_100641988, (unint64_t *)&unk_10064D9C0, (uint64_t)&protocol conformance descriptor for UTType);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_10005A360((unint64_t *)&unk_10064D9C0, (uint64_t (*)(uint64_t))&type metadata accessor for UTType, (uint64_t)&protocol conformance descriptor for UTType);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_10005A360((unint64_t *)&qword_100641980, (uint64_t (*)(uint64_t))&type metadata accessor for UTType, (uint64_t)&protocol conformance descriptor for UTType);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_1000CCB8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t i, char a5)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD v32[9];

  v6 = v5;
  v11 = *(_QWORD *)(*v5 + 16);
  v12 = *(_QWORD *)(*v5 + 24);
  if (v12 > v11 && (a5 & 1) != 0)
    goto LABEL_21;
  v13 = v11 + 1;
  if ((a5 & 1) != 0)
  {
    sub_1000CB910(v13);
  }
  else
  {
    if (v12 > v11)
    {
      sub_1000CDFFC();
      goto LABEL_21;
    }
    sub_1000CFE94(v13);
  }
  v14 = *v5;
  Hasher.init(_seed:)(v32, *(_QWORD *)(*v5 + 40));
  v15 = String.hashValue.getter(a1, a2);
  Hasher._combine(_:)(v15);
  v16 = Hasher._finalize()();
  v17 = -1 << *(_BYTE *)(v14 + 32);
  i = v16 & ~v17;
  v18 = v14 + 56;
  if (((*(_QWORD *)(v14 + 56 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v19 = *(_QWORD *)(v14 + 48);
    v20 = (_QWORD *)(v19 + 24 * i);
    v21 = v20[1];
    v22 = *v20 == a1 && v21 == a2;
    if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, a1, a2, 0) & 1) != 0)
      goto LABEL_24;
    v23 = ~v17;
    for (i = (i + 1) & v23; ((*(_QWORD *)(v18 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v23)
    {
      v24 = (_QWORD *)(v19 + 24 * i);
      v25 = v24[1];
      v26 = *v24 == a1 && v25 == a2;
      if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v24, v25, a1, a2, 0) & 1) != 0)
        goto LABEL_24;
    }
  }
LABEL_21:
  v27 = *v6;
  *(_QWORD *)(*v6 + 8 * (i >> 6) + 56) |= 1 << i;
  v28 = (_QWORD *)(*(_QWORD *)(v27 + 48) + 24 * i);
  *v28 = a1;
  v28[1] = a2;
  v28[2] = a3;
  v29 = *(_QWORD *)(v27 + 16);
  v30 = __OFADD__(v29, 1);
  v31 = v29 + 1;
  if (!v30)
  {
    *(_QWORD *)(v27 + 16) = v31;
    return;
  }
  __break(1u);
LABEL_24:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DOCPersonSuggester.DOCPerson);
  __break(1u);
}

void *sub_1000CCD60()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  sub_10006922C((uint64_t *)&unk_100641960);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    result = (void *)sub_10006777C(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v17 = *(_QWORD *)(v4 + 48) + v16;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1000CCF2C()
{
  return sub_1000CD298(&qword_1006419A0);
}

void *sub_1000CCF38()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10006922C(&qword_1006533F0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000CD0E8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10006922C(&qword_100641990);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_1000D1378(v17, *((unint64_t *)&v17 + 1));
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1000CD298(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_10006922C(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000CD438()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_10006922C(&qword_1006419F8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1000CD5C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_10006922C(&qword_1006418C8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    swift_retain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

id sub_1000CD770()
{
  return sub_1000CD298(&qword_100655C30);
}

void *sub_1000CD77C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_10006922C((uint64_t *)&unk_100641A60);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1000CD90C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[3];
  uint64_t v25;

  v1 = v0;
  sub_10006922C(&qword_100641750);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_28;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
      {
        v9 = v21 + 2;
        if (v21 + 2 >= v13)
          goto LABEL_28;
        v22 = *(_QWORD *)(v6 + 8 * v9);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 56 * v15;
    sub_1000A0110(*(_QWORD *)(v2 + 48) + 56 * v15, (uint64_t)v24);
    v17 = *(_QWORD *)(v4 + 48) + v16;
    v18 = v25;
    v19 = v24[2];
    v20 = v24[1];
    *(_OWORD *)v17 = v24[0];
    *(_OWORD *)(v17 + 16) = v20;
    *(_OWORD *)(v17 + 32) = v19;
    *(_QWORD *)(v17 + 48) = v18;
  }
  v23 = v21 + 3;
  if (v23 >= v13)
    goto LABEL_28;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void *sub_1000CDAE0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;

  v1 = v0;
  sub_10006922C((uint64_t *)&unk_1006418F0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_27:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (!v12)
    {
      v14 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v14 >= v13)
        goto LABEL_27;
      v12 = *(_QWORD *)(v6 + 8 * v14);
      ++v9;
      if (!v12)
      {
        v9 = v14 + 1;
        if (v14 + 1 >= v13)
          goto LABEL_27;
        v12 = *(_QWORD *)(v6 + 8 * v9);
        if (!v12)
        {
          v9 = v14 + 2;
          if (v14 + 2 >= v13)
            goto LABEL_27;
          v12 = *(_QWORD *)(v6 + 8 * v9);
          if (!v12)
            break;
        }
      }
    }
LABEL_12:
    v12 &= v12 - 1;
  }
  v15 = v14 + 3;
  if (v15 >= v13)
    goto LABEL_27;
  v12 = *(_QWORD *)(v6 + 8 * v15);
  if (v12)
  {
    v9 = v15;
    goto LABEL_12;
  }
  while (1)
  {
    v9 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v9 >= v13)
      goto LABEL_27;
    v12 = *(_QWORD *)(v6 + 8 * v9);
    ++v15;
    if (v12)
      goto LABEL_12;
  }
LABEL_29:
  __break(1u);
  return result;
}

void sub_1000CDC3C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_10006922C(&qword_1006419A8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void *sub_1000CDDCC(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v4 = v2;
  v5 = a1(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - v7;
  sub_10006922C(a2);
  v9 = *v2;
  v10 = static _SetStorage.copy(original:)(*v2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release(v9);
LABEL_30:
    *v4 = v11;
    return result;
  }
  v28 = v4;
  result = (void *)(v10 + 56);
  v13 = v9 + 56;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v14)
    result = memmove(result, (const void *)(v9 + 56), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v17 = 1 << *(_BYTE *)(v9 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v9 + 56);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v24 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v20)
        goto LABEL_28;
      v25 = *(_QWORD *)(v13 + 8 * v16);
      if (!v25)
      {
        v16 = v24 + 2;
        if (v24 + 2 >= v20)
          goto LABEL_28;
        v25 = *(_QWORD *)(v13 + 8 * v16);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v19 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    v23 = *(_QWORD *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v23, v5);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v23, v8, v5);
  }
  v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    result = (void *)swift_release(v9);
    v4 = v28;
    goto LABEL_30;
  }
  v25 = *(_QWORD *)(v13 + 8 * v26);
  if (v25)
  {
    v16 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v16 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v16);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

id sub_1000CDFF0()
{
  return sub_1000CD298(&qword_100653160);
}

void sub_1000CDFFC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22;

  v1 = v0;
  sub_10006922C((uint64_t *)&unk_1006418D0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v13)
      goto LABEL_28;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_28;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
      {
        v9 = v19 + 2;
        if (v19 + 2 >= v13)
          goto LABEL_28;
        v20 = *(_QWORD *)(v6 + 8 * v9);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v22 = *(_OWORD *)(v17 + 8);
    *(_QWORD *)v18 = *(_QWORD *)v17;
    *(_OWORD *)(v18 + 8) = v22;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(*((_QWORD *)&v22 + 1));
  }
  v21 = v19 + 3;
  if (v21 >= v13)
    goto LABEL_28;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_1000CE1D4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  __n128 v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  _OWORD v32[2];
  uint64_t v33;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C((uint64_t *)&unk_100641960);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v31 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  v13 = swift_retain(v3);
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_27;
    }
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v20 >= v11)
      goto LABEL_36;
    v21 = *(_QWORD *)(v8 + 8 * v20);
    ++v14;
    if (!v21)
    {
      v14 = v20 + 1;
      if (v20 + 1 >= v11)
        goto LABEL_36;
      v21 = *(_QWORD *)(v8 + 8 * v14);
      if (!v21)
      {
        v14 = v20 + 2;
        if (v20 + 2 >= v11)
          goto LABEL_36;
        v21 = *(_QWORD *)(v8 + 8 * v14);
        if (!v21)
          break;
      }
    }
LABEL_26:
    v10 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_27:
    sub_10006777C(*(_QWORD *)(v3 + 48) + 40 * v19, (uint64_t)v32);
    v23 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v6 + 48) + 40 * v15;
    v13 = (__n128)v32[0];
    v17 = v32[1];
    *(_QWORD *)(v16 + 32) = v33;
    *(__n128 *)v16 = v13;
    *(_OWORD *)(v16 + 16) = v17;
    ++*(_QWORD *)(v6 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v11)
  {
LABEL_36:
    swift_release_n(v3, 2, v13);
    v2 = v31;
    goto LABEL_38;
  }
  v21 = *(_QWORD *)(v8 + 8 * v22);
  if (v21)
  {
    v14 = v22;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v14 >= v11)
      goto LABEL_36;
    v21 = *(_QWORD *)(v8 + 8 * v14);
    ++v22;
    if (v21)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_1000CE464(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __n128 v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  _QWORD v36[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C(&qword_1006419A0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v33 = v2;
  v34 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v35 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  v11 = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_27;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v35)
      goto LABEL_36;
    v17 = *(_QWORD *)(v34 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v35)
        goto LABEL_36;
      v17 = *(_QWORD *)(v34 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v35)
          goto LABEL_36;
        v17 = *(_QWORD *)(v34 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_26:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_27:
    v19 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v15);
    v20 = *(_QWORD *)(v6 + 40);
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v23 = v22;
    Hasher.init(_seed:)(v36, v20);
    v24 = v19;
    String.hash(into:)(v36, v21, v23);
    v25 = Hasher._finalize()();
    swift_bridgeObjectRelease(v23);
    v26 = -1 << *(_BYTE *)(v6 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v10 + 8 * v28);
      }
      while (v32 == -1);
      v13 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v24;
    ++*(_QWORD *)(v6 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v35)
  {
LABEL_36:
    swift_release_n(v3, 2, v11);
    v2 = v33;
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v35)
      goto LABEL_36;
    v17 = *(_QWORD *)(v34 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_1000CE740(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  uint64_t *v34;
  int64_t v35;
  _QWORD v36[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C(&qword_100641990);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
    goto LABEL_52;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v34 = v2;
  v35 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  v12 = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_53;
    if (v18 >= v35)
      break;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v35)
        break;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v35)
          break;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
        {
          v20 = v18 + 3;
          if (v20 >= v35)
            break;
          v19 = *(_QWORD *)(v8 + 8 * v20);
          if (!v19)
          {
            while (1)
            {
              v13 = v20 + 1;
              if (__OFADD__(v20, 1))
                goto LABEL_54;
              if (v13 >= v35)
                goto LABEL_50;
              v19 = *(_QWORD *)(v8 + 8 * v13);
              ++v20;
              if (v19)
                goto LABEL_26;
            }
          }
          v13 = v20;
        }
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v23 = *v21;
    v22 = v21[1];
    Hasher.init(_seed:)(v36, *(_QWORD *)(v6 + 40));
    switch(v22)
    {
      case 0:
        v24 = 0;
        goto LABEL_40;
      case 1:
        v24 = 1;
        goto LABEL_40;
      case 2:
        v24 = 2;
        goto LABEL_40;
      case 3:
        v24 = 3;
        goto LABEL_40;
      case 4:
        v24 = 4;
        goto LABEL_40;
      case 5:
        v24 = 5;
        goto LABEL_40;
      case 6:
        v24 = 6;
        goto LABEL_40;
      case 7:
        v24 = 7;
        goto LABEL_40;
      case 8:
        v24 = 8;
        goto LABEL_40;
      case 9:
        v24 = 9;
        goto LABEL_40;
      case 10:
        v24 = 11;
LABEL_40:
        Hasher._combine(_:)(v24);
        break;
      default:
        Hasher._combine(_:)(0xAuLL);
        swift_bridgeObjectRetain(v22);
        String.hash(into:)(v36, v23, v22);
        break;
    }
    v25 = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v6 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_10;
    }
    v29 = 0;
    v30 = (unint64_t)(63 - v26) >> 6;
    do
    {
      if (++v28 == v30 && (v29 & 1) != 0)
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
        JUMPOUT(0x1000CEAA0);
      }
      v31 = v28 == v30;
      if (v28 == v30)
        v28 = 0;
      v29 |= v31;
      v32 = *(_QWORD *)(v11 + 8 * v28);
    }
    while (v32 == -1);
    v14 = __clz(__rbit64(~v32)) + (v28 << 6);
LABEL_10:
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v23;
    v15[1] = v22;
    ++*(_QWORD *)(v6 + 16);
  }
LABEL_50:
  result = swift_release_n(v3, 2, v12);
  v2 = v34;
LABEL_52:
  *v2 = v6;
  return result;
}

void sub_1000CEACC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __n128 v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  _QWORD v36[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C(&qword_100653180);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v33 = v2;
  v34 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v35 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  v11 = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_27;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v35)
      goto LABEL_36;
    v17 = *(_QWORD *)(v34 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v35)
        goto LABEL_36;
      v17 = *(_QWORD *)(v34 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v35)
          goto LABEL_36;
        v17 = *(_QWORD *)(v34 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_26:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_27:
    v19 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v15);
    v20 = *(_QWORD *)(v6 + 40);
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v23 = v22;
    Hasher.init(_seed:)(v36, v20);
    v24 = v19;
    String.hash(into:)(v36, v21, v23);
    v25 = Hasher._finalize()();
    v11 = swift_bridgeObjectRelease(v23);
    v26 = -1 << *(_BYTE *)(v6 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v10 + 8 * v28);
      }
      while (v32 == -1);
      v13 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v24;
    ++*(_QWORD *)(v6 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v35)
  {
LABEL_36:
    swift_release_n(v3, 2, v11);
    v2 = v33;
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v35)
      goto LABEL_36;
    v17 = *(_QWORD *)(v34 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

Swift::Int sub_1000CEDA8(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::Int *v28;
  uint64_t v29[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C(&qword_1006419F8);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v16);
    Hasher.init(_seed:)(v29, *(_QWORD *)(v6 + 40));
    Hasher._combine(_:)(v20);
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1000CF020(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  __n128 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t *v17;
  uint64_t v18[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C((uint64_t *)&unk_100641A60);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
    goto LABEL_26;
  }
  v17 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = swift_retain();
  if (v8)
  {
    v11 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v9 > 1)
  {
    v12 = *(_QWORD *)(v3 + 64);
    v13 = 1;
    if (v12)
      goto LABEL_22;
    v13 = 2;
    if (v9 > 2)
    {
      v12 = *(_QWORD *)(v3 + 72);
      if (v12)
        goto LABEL_22;
      v13 = 3;
      if (v9 > 3)
      {
        v12 = *(_QWORD *)(v3 + 80);
        if (!v12)
        {
          v14 = 4;
          if (v9 > 4)
          {
            v12 = *(_QWORD *)(v3 + 88);
            if (v12)
            {
              v13 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v13 = v14 + 1;
              if (__OFADD__(v14, 1))
              {
                __break(1u);
                JUMPOUT(0x1000CF344);
              }
              if (v13 >= v9)
                break;
              v12 = *(_QWORD *)(v3 + 56 + 8 * v13);
              ++v14;
              if (v12)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
        v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11);
        Hasher.init(_seed:)(v18, *(_QWORD *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  result = swift_release_n(v3, 2, v10);
  v2 = v17;
LABEL_26:
  *v2 = v5;
  return result;
}

void sub_1000CF35C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __n128 v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD v34[9];
  _OWORD v35[2];
  __int128 v36;
  uint64_t v37;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C(&qword_100641750);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v32 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v33 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  v11 = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v17 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_27;
    }
    v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v19 >= v33)
      goto LABEL_36;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v12;
    if (!v20)
    {
      v12 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_36;
      v20 = *(_QWORD *)(v32 + 8 * v12);
      if (!v20)
      {
        v12 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_36;
        v20 = *(_QWORD *)(v32 + 8 * v12);
        if (!v20)
          break;
      }
    }
LABEL_26:
    v9 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_27:
    sub_1000A0110(*(_QWORD *)(v3 + 48) + 56 * v18, (uint64_t)v35);
    Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
    v22 = v36;
    v23 = v37;
    sub_10007E7A0((_QWORD *)v35 + 1, v36);
    dispatch thunk of Hashable.hash(into:)(v34, v22, v23);
    v24 = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v6 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v10 + 8 * v27);
      }
      while (v31 == -1);
      v13 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = *(_QWORD *)(v6 + 48) + 56 * v13;
    v11 = (__n128)v35[0];
    v15 = v35[1];
    v16 = v36;
    *(_QWORD *)(v14 + 48) = v37;
    *(_OWORD *)(v14 + 16) = v15;
    *(_OWORD *)(v14 + 32) = v16;
    *(__n128 *)v14 = v11;
    ++*(_QWORD *)(v6 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_36:
    swift_release_n(v3, 2, v11);
    goto LABEL_38;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v12 = v21;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v12 >= v33)
      goto LABEL_36;
    v20 = *(_QWORD *)(v32 + 8 * v12);
    ++v21;
    if (v20)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

Swift::Int sub_1000CF658(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int *v25;
  uint64_t v26[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C((uint64_t *)&unk_1006418F0);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_36:
    *v2 = v6;
    return result;
  }
  v24 = v3;
  v25 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (!v11)
    {
      v15 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      if (v15 >= v12)
        goto LABEL_34;
      v11 = *(_QWORD *)(v8 + 8 * v15);
      ++v7;
      if (!v11)
      {
        v7 = v15 + 1;
        if (v15 + 1 >= v12)
          goto LABEL_34;
        v11 = *(_QWORD *)(v8 + 8 * v7);
        if (!v11)
        {
          v7 = v15 + 2;
          if (v15 + 2 >= v12)
            goto LABEL_34;
          v11 = *(_QWORD *)(v8 + 8 * v7);
          if (!v11)
            break;
        }
      }
    }
LABEL_25:
    Hasher.init(_seed:)(v26, *(_QWORD *)(v6 + 40));
    Hasher._combine(_:)(0);
    result = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(v6 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v13 + 8 * (v18 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v13 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v20 = 0;
      v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        v22 = v19 == v21;
        if (v19 == v21)
          v19 = 0;
        v20 |= v22;
        v23 = *(_QWORD *)(v13 + 8 * v19);
      }
      while (v23 == -1);
      v14 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    v11 &= v11 - 1;
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    ++*(_QWORD *)(v6 + 16);
  }
  v16 = v15 + 3;
  if (v16 >= v12)
  {
LABEL_34:
    result = swift_release(v24);
    v2 = v25;
    goto LABEL_36;
  }
  v11 = *(_QWORD *)(v8 + 8 * v16);
  if (v11)
  {
    v7 = v16;
    goto LABEL_25;
  }
  while (1)
  {
    v7 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v7 >= v12)
      goto LABEL_34;
    v11 = *(_QWORD *)(v8 + 8 * v7);
    ++v16;
    if (v11)
      goto LABEL_25;
  }
LABEL_38:
  __break(1u);
  return result;
}

void sub_1000CF898(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int v19;
  Swift::UInt v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  int64_t v30;
  uint64_t v31[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C(&qword_1006419A8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_46:
    *v2 = v6;
    return;
  }
  v29 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v30 = (unint64_t)(v9 + 63) >> 6;
  v12 = v5 + 56;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v7 << 6);
      goto LABEL_27;
    }
    v16 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v16 >= v30)
      goto LABEL_44;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v7;
    if (!v17)
    {
      v7 = v16 + 1;
      if (v16 + 1 >= v30)
        goto LABEL_44;
      v17 = *(_QWORD *)(v8 + 8 * v7);
      if (!v17)
      {
        v7 = v16 + 2;
        if (v16 + 2 >= v30)
          goto LABEL_44;
        v17 = *(_QWORD *)(v8 + 8 * v7);
        if (!v17)
          break;
      }
    }
LABEL_26:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v7 << 6);
LABEL_27:
    v19 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v15);
    Hasher.init(_seed:)(v31, *(_QWORD *)(v6 + 40));
    switch(v19)
    {
      case 2:
        v20 = 1;
        goto LABEL_33;
      case 3:
        v20 = 2;
        goto LABEL_33;
      case 4:
        v20 = 3;
LABEL_33:
        Hasher._combine(_:)(v20);
        goto LABEL_35;
    }
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v19 & 1);
LABEL_35:
    v21 = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_47;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v28 == -1);
      v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v13) = v19;
    ++*(_QWORD *)(v6 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v30)
  {
LABEL_44:
    swift_release(v3);
    v2 = v29;
    goto LABEL_46;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v7 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v30)
      goto LABEL_44;
    v17 = *(_QWORD *)(v8 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_48:
  __break(1u);
}

void sub_1000CFB78(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __n128 v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int64_t v42;
  uint64_t (*v43)(uint64_t);
  unint64_t *v44;
  uint64_t v45;

  v44 = a4;
  v45 = a5;
  v7 = v5;
  v43 = a2;
  v9 = a2(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v40 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_10006922C(a3);
  v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 0);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
    swift_release(v13);
LABEL_37:
    *v7 = v15;
    return;
  }
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 56);
  v40 = v7;
  v41 = v13 + 56;
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v42 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 56;
  v21 = swift_retain();
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_26;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v26 >= v42)
      goto LABEL_35;
    v27 = *(_QWORD *)(v41 + 8 * v26);
    ++v22;
    if (!v27)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v42)
        goto LABEL_35;
      v27 = *(_QWORD *)(v41 + 8 * v22);
      if (!v27)
      {
        v22 = v26 + 2;
        if (v26 + 2 >= v42)
          goto LABEL_35;
        v27 = *(_QWORD *)(v41 + 8 * v22);
        if (!v27)
          break;
      }
    }
LABEL_25:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_26:
    v29 = *(_QWORD *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16))(v12, *(_QWORD *)(v13 + 48) + v29 * v25, v9, v21);
    v30 = *(_QWORD *)(v15 + 40);
    v31 = sub_10005A360(v44, v43, v45);
    v32 = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v9, v31);
    v33 = -1 << *(_BYTE *)(v15 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(_QWORD *)(v15 + 48) + v23 * v29, v12, v9);
    ++*(_QWORD *)(v15 + 16);
  }
  v28 = v26 + 3;
  if (v28 >= v42)
  {
LABEL_35:
    swift_release_n(v13, 2, v21);
    v7 = v40;
    goto LABEL_37;
  }
  v27 = *(_QWORD *)(v41 + 8 * v28);
  if (v27)
  {
    v22 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v22 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v22 >= v42)
      goto LABEL_35;
    v27 = *(_QWORD *)(v41 + 8 * v22);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
}

void sub_1000CFE94(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  int64_t v32;
  __n128 v33;
  uint64_t v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10006922C((uint64_t *)&unk_1006418D0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  v12 = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = *(_QWORD *)(v3 + 48) + 24 * v17;
    v22 = *(_QWORD *)v21;
    v33 = *(__n128 *)(v21 + 8);
    Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v33.n128_u64[0]);
    swift_bridgeObjectRetain(v33.n128_u64[1]);
    v23 = String.hashValue.getter(v22, v33.n128_u64[0]);
    Hasher._combine(_:)(v23);
    v24 = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v6 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v6 + 48) + 24 * v14;
    *(_QWORD *)v15 = v22;
    v12 = v33;
    *(__n128 *)(v15 + 8) = v33;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    swift_release_n(v3, 2, v12);
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_1000D016C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  type metadata accessor for DOCDocumentSourceIdentifier(0);
  v4 = v3;
  v5 = sub_10005A360(&qword_1006418A0, (uint64_t (*)(uint64_t))type metadata accessor for DOCDocumentSourceIdentifier, (uint64_t)&unk_1004D532C);
  result = Set.init(minimumCapacity:)(v2, v4, v5);
  v10 = result;
  if (v2)
  {
    v7 = (void **)(a1 + 32);
    do
    {
      v8 = *v7++;
      sub_1000C8C8C(&v9, v8);

      --v2;
    }
    while (v2);
    return v10;
  }
  return result;
}

uint64_t sub_1000D020C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8[2];
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_1000D138C();
  result = Set.init(minimumCapacity:)(v2, &type metadata for DOCItemFileTypeGroupCategory, v3);
  v9 = result;
  if (v2)
  {
    v5 = (unint64_t *)(a1 + 40);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      sub_1000D1378(v6, *v5);
      sub_1000C8790(v8, v6, v7);
      sub_1000D13D0(v8[0], v8[1]);
      v5 += 2;
      --v2;
    }
    while (v2);
    return v9;
  }
  return result;
}

void sub_1000D02A4(uint64_t a1)
{
  sub_1000D0478(a1, (unint64_t *)&unk_1006428D0, UICollectionViewCell_ptr, (unint64_t *)&unk_1006419D0, (void (*)(id *, uint64_t))sub_1000C89D0);
}

uint64_t sub_1000D02C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[40];
  _BYTE v6[40];
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for AnyHashable, &protocol witness table for AnyHashable);
  v7 = result;
  if (v2)
  {
    v4 = a1 + 32;
    do
    {
      sub_10006777C(v4, (uint64_t)v5);
      sub_1000C83F0((uint64_t)v6, (uint64_t)v5);
      sub_100067748((uint64_t)v6);
      v4 += 40;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1000D0350(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  char *v5;
  char v6;
  char v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_1000AE08C();
  result = Set.init(minimumCapacity:)(v2, &type metadata for DOCSidebarSectionKind, v3);
  v8 = result;
  if (v2)
  {
    v5 = (char *)(a1 + 32);
    do
    {
      v6 = *v5++;
      sub_100026E44((uint64_t)&v7, v6);
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1000D03C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10007AB00(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

void sub_1000D0454(uint64_t a1)
{
  sub_1000D0478(a1, (unint64_t *)&qword_1006419B0, FPItem_ptr, (unint64_t *)&qword_100657330, (void (*)(id *, uint64_t))sub_1000C974C);
}

void sub_1000D0478(uint64_t a1, unint64_t *a2, _QWORD *a3, unint64_t *a4, void (*a5)(id *, uint64_t))
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  void **v18;
  void *v19;
  uint64_t v20;
  id v21[2];

  v10 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = sub_10004F2F0(0, a2, a3);
  v13 = sub_1000835B4(a4, a2, a3);
  v21[1] = (id)Set.init(minimumCapacity:)(v11, v12, v13);
  if (!v10)
  {
    v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v14)
      return;
    goto LABEL_10;
  }
  if (a1 < 0)
    v15 = a1;
  else
    v15 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v14 = _CocoaArrayWrapper.endIndex.getter(v15);
  swift_bridgeObjectRelease(a1);
  if (v14)
  {
LABEL_10:
    if (v14 < 1)
    {
      __break(1u);
    }
    else if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v14; ++i)
      {
        v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        a5(v21, v17);

      }
    }
    else
    {
      v18 = (void **)(a1 + 32);
      do
      {
        v19 = *v18++;
        a5(v21, (uint64_t)v19);

        --v14;
      }
      while (v14);
    }
  }
}

void sub_1000D05F4(uint64_t a1)
{
  sub_1000D0478(a1, (unint64_t *)&unk_100641970, FINode_ptr, (unint64_t *)&qword_1006419E0, (void (*)(id *, uint64_t))sub_100069C20);
}

void sub_1000D0618(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v3 = a1;
    v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  if (v2 < 0)
    v14 = v2;
  else
    v14 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v5 = _CocoaArrayWrapper.endIndex.getter(v14);
  swift_bridgeObjectRelease(v2);
LABEL_4:
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  if (v5 < 0)
    v6 = v3;
  if (v3)
    v7 = v6;
  else
    v7 = 0;
  if (v4)
  {
    if (v2 < 0)
      v9 = v2;
    else
      v9 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v10 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v2);
    if (v10 < 0)
      goto LABEL_36;
    swift_bridgeObjectRetain(v2);
    v8 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    v8 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 < v7)
  {
    __break(1u);
LABEL_36:
    __break(1u);
    return;
  }
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    v11 = 0;
    do
    {
      v12 = v11 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v11);
      v11 = v12;
    }
    while (v7 != v12);
  }
  if (v4)
  {
    if (v2 < 0)
      v13 = v2;
    else
      v13 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    _CocoaArrayWrapper.subscript.getter(0, v7, v13);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    swift_bridgeObjectRetain(v2);
  }
}

double sub_1000D07C0(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 176) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

double sub_1000D07E4(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_1000D07FC(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void type metadata accessor for UIUserInterfaceSizeClass(uint64_t a1)
{
  sub_1000799BC(a1, &qword_1006414A8, (uint64_t)&unk_1005C1318);
}

void type metadata accessor for NSFileProviderDomainIdentifier(uint64_t a1)
{
  sub_1000799BC(a1, &qword_1006414B0, (uint64_t)&unk_1005C1338);
}

void type metadata accessor for NSFileProviderSearchQueryTrashedItemsMembership(uint64_t a1)
{
  sub_1000799BC(a1, &qword_1006414B8, (uint64_t)&unk_1005C1360);
}

void type metadata accessor for UIUserInterfaceLayoutDirection(uint64_t a1)
{
  sub_1000799BC(a1, &qword_1006414C0, (uint64_t)&unk_1005C1380);
}

void type metadata accessor for UIPopoverArrowDirection(uint64_t a1)
{
  sub_1000799BC(a1, &qword_1006414C8, (uint64_t)&unk_1005C13A0);
}

void type metadata accessor for Name(uint64_t a1)
{
  sub_1000799BC(a1, &qword_1006414D0, (uint64_t)&unk_1005C13C8);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1000799BC(a1, &qword_1006414D8, (uint64_t)&unk_1005C1448);
}

void type metadata accessor for DOCMetadataLevelOfDetail(uint64_t a1)
{
  sub_1000799BC(a1, &qword_1006414E0, (uint64_t)&unk_1005C1470);
}

void type metadata accessor for NodeNotificationOptions(uint64_t a1)
{
  sub_1000799BC(a1, &qword_1006414E8, (uint64_t)&unk_1005C1490);
}

void type metadata accessor for FINodeProperty(uint64_t a1)
{
  sub_1000799BC(a1, &qword_1006414F0, (uint64_t)&unk_1005C14B8);
}

void type metadata accessor for UIDropOperation(uint64_t a1)
{
  sub_1000799BC(a1, &qword_1006414F8, (uint64_t)&unk_1005C14D8);
}

void type metadata accessor for DOCThumbnailDrawingStyle(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641500, (uint64_t)&unk_1005C14F8);
}

void type metadata accessor for _UIVisualEffectBackdropViewRenderMode(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641508, (uint64_t)&unk_1005C1520);
}

void type metadata accessor for CGBlendMode(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641510, (uint64_t)&unk_1005C1540);
}

__n128 initializeWithTake for DOCItemCollectionLayoutTraits.GridTraits.GroupedLayoutTraits(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for NSDirectionalEdgeInsets(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641518, (uint64_t)&unk_1005C15B8);
}

void type metadata accessor for Operation(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641520, (uint64_t)&unk_1005C15E8);
}

uint64_t _s8SettingsVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t getEnumTagSinglePayload for DOCItemCollectionLayoutTraits.ItemStatusBadgeTraits(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DOCItemCollectionLayoutTraits.ItemStatusBadgeTraits(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for DOCSpotlightEnumeratedItemIdentifier(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641530, (uint64_t)&unk_1005C1690);
}

void type metadata accessor for ElementSize(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641538, (uint64_t)&unk_1005C16B8);
}

void type metadata accessor for UIDocumentBrowserActionMenuSortOrder(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641540, (uint64_t)&unk_1005C16D8);
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641548, (uint64_t)&unk_1005C1750);
}

void type metadata accessor for UIUserInterfaceIdiom(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641558, (uint64_t)&unk_1005C17A0);
}

void type metadata accessor for DOCItemCollectionRowStyle(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641560, (uint64_t)&unk_1005C17C0);
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641568, (uint64_t)&unk_1005C17E8);
}

void type metadata accessor for NSFileProviderSearchFilter(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641578, (uint64_t)&unk_1005C1838);
}

void type metadata accessor for DragState(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641580, (uint64_t)&unk_1005C1860);
}

void type metadata accessor for ProgressUserInfoKey(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641590, (uint64_t)&unk_1005C1900);
}

void type metadata accessor for DOCDocumentSourceIdentifier(uint64_t a1)
{
  sub_1000799BC(a1, &qword_1006415A0, (uint64_t)&unk_1005C1948);
}

uint64_t getEnumTagSinglePayload for DOCGridItemSpacing(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DOCGridItemSpacing(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

uint64_t sub_1000D0B0C()
{
  return sub_10005A360(&qword_1006415B8, (uint64_t (*)(uint64_t))type metadata accessor for FPAction, (uint64_t)&unk_1004D519C);
}

uint64_t sub_1000D0B38()
{
  return sub_10005A360(&qword_1006415C0, (uint64_t (*)(uint64_t))type metadata accessor for FPAction, (uint64_t)&unk_1004D5174);
}

uint64_t sub_1000D0B64()
{
  return sub_10005A360(&qword_1006415C8, (uint64_t (*)(uint64_t))type metadata accessor for DOCDocumentSourceIdentifier, (uint64_t)&unk_1004D529C);
}

uint64_t sub_1000D0B90()
{
  return sub_10005A360(&qword_1006415D0, (uint64_t (*)(uint64_t))type metadata accessor for DOCDocumentSourceIdentifier, (uint64_t)&unk_1004D5274);
}

uint64_t sub_1000D0BBC()
{
  return sub_10005A360(&qword_1006415D8, (uint64_t (*)(uint64_t))type metadata accessor for DOCDocumentSourceIdentifier, (uint64_t)&unk_1004D5304);
}

uint64_t sub_1000D0BE8()
{
  return sub_10005A360(&qword_1006415E0, (uint64_t (*)(uint64_t))type metadata accessor for DOCTab, (uint64_t)&unk_1004D53F4);
}

uint64_t sub_1000D0C14()
{
  return sub_10005A360(&qword_1006415E8, (uint64_t (*)(uint64_t))type metadata accessor for ProgressUserInfoKey, (uint64_t)&unk_1004D548C);
}

uint64_t sub_1000D0C40()
{
  return sub_10005A360(&qword_1006415F0, (uint64_t (*)(uint64_t))type metadata accessor for ProgressUserInfoKey, (uint64_t)&unk_1004D5460);
}

uint64_t sub_1000D0C6C()
{
  return sub_10005A360(&qword_1006415F8, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderSearchFilter, (uint64_t)&unk_1004D5610);
}

uint64_t sub_1000D0C98()
{
  return sub_10005A360(&qword_100641600, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderSearchFilter, (uint64_t)&unk_1004D55E8);
}

uint64_t sub_1000D0CC4()
{
  return sub_10005A360(&qword_100641608, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderSearchFilter, (uint64_t)&unk_1004D5678);
}

uint64_t sub_1000D0CF0()
{
  return sub_10005A360(&qword_100641610, (uint64_t (*)(uint64_t))type metadata accessor for FPProviderDomainID, (uint64_t)&unk_1004D5750);
}

uint64_t sub_1000D0D1C()
{
  return sub_10005A360(&qword_100641618, (uint64_t (*)(uint64_t))type metadata accessor for FPProviderDomainID, (uint64_t)&unk_1004D5728);
}

uint64_t sub_1000D0D48()
{
  return sub_10005A360(&qword_100641620, (uint64_t (*)(uint64_t))type metadata accessor for FPProviderDomainID, (uint64_t)&unk_1004D57B8);
}

uint64_t sub_1000D0D74()
{
  return sub_10005A360(&qword_100641628, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1004D5894);
}

uint64_t sub_1000D0DA0()
{
  return sub_10005A360(&qword_100641630, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1004D5868);
}

uint64_t sub_1000D0DCC()
{
  return sub_10005A360(&qword_100641638, (uint64_t (*)(uint64_t))type metadata accessor for DOCItemCollectionRowStyle, (uint64_t)&unk_1004D6920);
}

uint64_t sub_1000D0DF8()
{
  return sub_10005A360(&qword_100641640, (uint64_t (*)(uint64_t))type metadata accessor for DOCItemCollectionRowStyle, (uint64_t)&unk_1004D597C);
}

uint64_t sub_1000D0E24()
{
  return sub_10005A360(&qword_100641648, (uint64_t (*)(uint64_t))type metadata accessor for DOCItemCollectionRowStyle, (uint64_t)&unk_1004D59AC);
}

uint64_t sub_1000D0E50()
{
  return sub_10005A360(&qword_100641650, (uint64_t (*)(uint64_t))type metadata accessor for DOCItemCollectionRowStyle, (uint64_t)&unk_1004D59E4);
}

uint64_t sub_1000D0E7C()
{
  return sub_10005A360(&qword_100641658, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1004D5B78);
}

uint64_t sub_1000D0EA8()
{
  return sub_10005A360(&qword_100641660, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1004D5B4C);
}

uint64_t sub_1000D0ED4()
{
  return sub_10005A360(&qword_100641668, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1004D5BE8);
}

uint64_t sub_1000D0F00()
{
  return sub_10005A360(&qword_100641670, (uint64_t (*)(uint64_t))type metadata accessor for UIDocumentBrowserActionMenuSortOrder, (uint64_t)&unk_1004D5CE4);
}

uint64_t sub_1000D0F2C()
{
  return sub_10005A360(&qword_100641678, (uint64_t (*)(uint64_t))type metadata accessor for DOCSpotlightEnumeratedItemIdentifier, (uint64_t)&unk_1004D5D6C);
}

uint64_t sub_1000D0F58()
{
  return sub_10005A360(&qword_100641680, (uint64_t (*)(uint64_t))type metadata accessor for DOCSpotlightEnumeratedItemIdentifier, (uint64_t)&unk_1004D5D44);
}

uint64_t sub_1000D0F84()
{
  return sub_10005A360(&qword_100641688, (uint64_t (*)(uint64_t))type metadata accessor for DOCSpotlightEnumeratedItemIdentifier, (uint64_t)&unk_1004D5DD4);
}

uint64_t sub_1000D0FB0()
{
  return sub_10005A360(&qword_100641690, (uint64_t (*)(uint64_t))type metadata accessor for DOCThumbnailDrawingStyle, (uint64_t)&unk_1004D5F1C);
}

uint64_t sub_1000D0FDC()
{
  return sub_10005A360(&qword_100641698, (uint64_t (*)(uint64_t))type metadata accessor for DOCThumbnailDrawingStyle, (uint64_t)&unk_1004D5EEC);
}

uint64_t sub_1000D1008()
{
  return sub_10005A360(&qword_1006416A0, (uint64_t (*)(uint64_t))type metadata accessor for DOCThumbnailDrawingStyle, (uint64_t)&unk_1004D5F44);
}

uint64_t sub_1000D1034()
{
  return sub_10005A360(&qword_1006416A8, (uint64_t (*)(uint64_t))type metadata accessor for DOCThumbnailDrawingStyle, (uint64_t)&unk_1004D5F7C);
}

uint64_t sub_1000D1060()
{
  return sub_10005A360(&qword_1006416B0, (uint64_t (*)(uint64_t))type metadata accessor for FINodeProperty, (uint64_t)&unk_1004D6124);
}

uint64_t sub_1000D108C()
{
  return sub_10005A360(&qword_1006416B8, (uint64_t (*)(uint64_t))type metadata accessor for NodeNotificationOptions, (uint64_t)&unk_1004D61B4);
}

uint64_t sub_1000D10B8()
{
  return sub_10005A360(&qword_1006416C0, (uint64_t (*)(uint64_t))type metadata accessor for NodeNotificationOptions, (uint64_t)&unk_1004D6184);
}

uint64_t sub_1000D10E4()
{
  return sub_10005A360(&qword_1006416C8, (uint64_t (*)(uint64_t))type metadata accessor for NodeNotificationOptions, (uint64_t)&unk_1004D61DC);
}

uint64_t sub_1000D1110()
{
  return sub_10005A360(&qword_1006416D0, (uint64_t (*)(uint64_t))type metadata accessor for NodeNotificationOptions, (uint64_t)&unk_1004D6214);
}

uint64_t sub_1000D113C()
{
  return sub_10005A360(&qword_1006416D8, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1004D63A0);
}

uint64_t sub_1000D1168()
{
  return sub_10005A360(&qword_1006416E0, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1004D6374);
}

uint64_t sub_1000D1194()
{
  return sub_10005A360(&qword_1006416E8, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1004D6410);
}

uint64_t sub_1000D11C0()
{
  return sub_10005A360(&qword_1006416F0, (uint64_t (*)(uint64_t))type metadata accessor for UIPopoverArrowDirection, (uint64_t)&unk_1004D6500);
}

uint64_t sub_1000D11EC()
{
  return sub_10005A360(&qword_1006416F8, (uint64_t (*)(uint64_t))type metadata accessor for UIPopoverArrowDirection, (uint64_t)&unk_1004D64CC);
}

uint64_t sub_1000D1218()
{
  return sub_10005A360(&qword_100641700, (uint64_t (*)(uint64_t))type metadata accessor for UIPopoverArrowDirection, (uint64_t)&unk_1004D652C);
}

uint64_t sub_1000D1244()
{
  return sub_10005A360(&qword_100641708, (uint64_t (*)(uint64_t))type metadata accessor for UIPopoverArrowDirection, (uint64_t)&unk_1004D6568);
}

uint64_t sub_1000D1270()
{
  return sub_10005A360(&qword_100641710, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderDomainIdentifier, (uint64_t)&unk_1004D66E8);
}

uint64_t sub_1000D129C()
{
  return sub_10005A360(&qword_100641718, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderDomainIdentifier, (uint64_t)&unk_1004D66BC);
}

uint64_t sub_1000D12C8()
{
  return sub_10005A360(&qword_100641720, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderDomainIdentifier, (uint64_t)&unk_1004D6758);
}

uint64_t sub_1000D12F4()
{
  return sub_10005A360(&qword_100641728, (uint64_t (*)(uint64_t))type metadata accessor for UIUserInterfaceSizeClass, (uint64_t)&unk_1004D6858);
}

uint64_t sub_1000D1320()
{
  return sub_10005A360(&qword_100641730, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1004D5904);
}

uint64_t sub_1000D134C()
{
  return sub_10005A360(&qword_100641738, (uint64_t (*)(uint64_t))type metadata accessor for ProgressUserInfoKey, (uint64_t)&unk_1004D54FC);
}

uint64_t sub_1000D1378(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 0xB)
    return swift_bridgeObjectRetain(a2);
  return result;
}

unint64_t sub_1000D138C()
{
  unint64_t result;

  result = qword_100641998;
  if (!qword_100641998)
  {
    result = swift_getWitnessTable(&unk_1004DB438, &type metadata for DOCItemFileTypeGroupCategory);
    atomic_store(result, (unint64_t *)&qword_100641998);
  }
  return result;
}

uint64_t sub_1000D13D0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 0xB)
    return swift_bridgeObjectRelease(a2);
  return result;
}

void type metadata accessor for PDFDocumentWriteOption(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641A78, (uint64_t)&unk_1005C1A18);
}

void type metadata accessor for DisplayMode(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641A80, (uint64_t)&unk_1005C1A40);
}

void type metadata accessor for DOCTagRegistryChangeKey(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641A88, (uint64_t)&unk_1005C1A60);
}

void type metadata accessor for Availability(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641A90, (uint64_t)&unk_1005C1A88);
}

void type metadata accessor for UIDocumentBrowserError(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641A98, (uint64_t)&unk_1005C1AB0);
}

void type metadata accessor for CFError(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641AA0, (uint64_t)&unk_1005C1AD8);
}

void type metadata accessor for FileOperationKind(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641AA8, (uint64_t)&unk_1005C1B08);
}

void type metadata accessor for FPArchiveFormat(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641AB0, (uint64_t)&unk_1005C1B30);
}

void type metadata accessor for DOCIntentLocationType(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641AB8, (uint64_t)&unk_1005C1B50);
}

void type metadata accessor for DOCServicePopoverTrackerRegion(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641AC0, (uint64_t)&unk_1005C1B78);
}

void type metadata accessor for NSFileProviderItemIdentifier(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641AC8, (uint64_t)&unk_1005C1B98);
}

void type metadata accessor for DOCDocumentInteractionMode(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641AD0, (uint64_t)&unk_1005C1BC0);
}

void type metadata accessor for WFSystemContextualActionType(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641AD8, (uint64_t)&unk_1005C1BE0);
}

void type metadata accessor for FPLastUsageUpdatePolicy(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641AE0, (uint64_t)&unk_1005C1C00);
}

void type metadata accessor for DOCDataOwnerState(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641AE8, (uint64_t)&unk_1005C1C20);
}

void type metadata accessor for CMFormatDescription(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641AF0, (uint64_t)&unk_1005C1C40);
}

__n128 sub_1000D1524(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DOCUniformHorizontalEdgeInsets(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DOCUniformHorizontalEdgeInsets(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for CMTime(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641AF8, (uint64_t)&unk_1005C1CC8);
}

void type metadata accessor for DOCThumbnailStyle(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641B18, (uint64_t)&unk_1005C1D70);
}

void type metadata accessor for UIUserInterfaceStyle(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641B20, (uint64_t)&unk_1005C1D90);
}

void type metadata accessor for LaunchOptionsKey(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641B28, (uint64_t)&unk_1005C1DB0);
}

void type metadata accessor for DOCSymbolicLocation(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641B30, (uint64_t)&unk_1005C1DD8);
}

void type metadata accessor for DOCUIPBrowserContentMode(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641B38, (uint64_t)&unk_1005C1DF8);
}

void type metadata accessor for DOCUIPDocumentLandingMode(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641B40, (uint64_t)&unk_1005C1E18);
}

void type metadata accessor for AVFileType(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641B50, (uint64_t)&unk_1005C1E60);
}

void type metadata accessor for NSFileProviderServiceName(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641B58, (uint64_t)&unk_1005C1E88);
}

void type metadata accessor for ImportMode(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641B60, (uint64_t)&unk_1005C1EB0);
}

void type metadata accessor for DOCFolderIconType(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641B68, (uint64_t)&unk_1005C1ED0);
}

void type metadata accessor for DOCTabSwitcherStyle(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641B70, (uint64_t)&unk_1005C1EF0);
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641B78, (uint64_t)&unk_1005C1F10);
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641B80, (uint64_t)&unk_1005C1F38);
}

void type metadata accessor for CSSearchQueryError(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641B88, (uint64_t)&unk_1005C1F68);
}

void type metadata accessor for DOCBrowserViewContext(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641B90, (uint64_t)&unk_1005C1F90);
}

void type metadata accessor for ActivityType(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641BA0, (uint64_t)&unk_1005C1FD8);
}

void type metadata accessor for SymbolScale(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641BB0, (uint64_t)&unk_1005C2028);
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641BB8, (uint64_t)&unk_1005C2048);
}

void type metadata accessor for DOCBadgeViewSize(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641BC0, (uint64_t)&unk_1005C2070);
}

void type metadata accessor for ScrollDirection(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641BC8, (uint64_t)&unk_1005C2090);
}

void type metadata accessor for FPProviderID(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641BD0, (uint64_t)&unk_1005C20B0);
}

void type metadata accessor for CAGradientLayerType(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641BD8, (uint64_t)&unk_1005C20D8);
}

void type metadata accessor for CGContext(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641BE0, (uint64_t)&unk_1005C2100);
}

uint64_t sub_1000D1764()
{
  return sub_10005A360(&qword_100641BE8, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_1004D7144);
}

uint64_t sub_1000D1790()
{
  return sub_10005A360(&qword_100641BF0, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_1004D7118);
}

uint64_t sub_1000D17BC()
{
  return sub_10005A360(&qword_100641BF8, (uint64_t (*)(uint64_t))type metadata accessor for CAGradientLayerType, (uint64_t)&unk_1004D71B4);
}

uint64_t sub_1000D17E8()
{
  return sub_10005A360(&qword_100641C00, (uint64_t (*)(uint64_t))type metadata accessor for FPProviderID, (uint64_t)&unk_1004D7298);
}

uint64_t sub_1000D1814()
{
  return sub_10005A360(&qword_100641C08, (uint64_t (*)(uint64_t))type metadata accessor for FPProviderID, (uint64_t)&unk_1004D7270);
}

uint64_t sub_1000D1840()
{
  return sub_10005A360(&qword_100641C10, (uint64_t (*)(uint64_t))type metadata accessor for FPProviderID, (uint64_t)&unk_1004D7300);
}

uint64_t sub_1000D186C()
{
  return sub_10005A360(&qword_100641C18, (uint64_t (*)(uint64_t))type metadata accessor for ScrollDirection, (uint64_t)&unk_1004D73F4);
}

uint64_t sub_1000D1898()
{
  return sub_10005A360(&qword_100641C20, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1004D74C0);
}

uint64_t sub_1000D18C4()
{
  return sub_10005A360(&qword_100641C28, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1004D7494);
}

uint64_t sub_1000D18F0()
{
  return sub_10005A360(&qword_100641C30, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1004D7530);
}

uint64_t sub_1000D191C()
{
  return sub_10005A360(&qword_100641C38, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1004D7654);
}

uint64_t sub_1000D1948()
{
  return sub_10005A360(&qword_100641C40, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1004D7628);
}

uint64_t sub_1000D1974()
{
  return sub_10005A360(&qword_100641C48, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1004D7764);
}

uint64_t sub_1000D19A0()
{
  return sub_10005A360(&qword_100641C50, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1004D773C);
}

uint64_t sub_1000D19CC()
{
  return sub_10005A360(&qword_100641C58, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_1004D77CC);
}

uint64_t sub_1000D19F8()
{
  return sub_10005A360(&qword_100641C60, (uint64_t (*)(uint64_t))type metadata accessor for CSSearchQueryError, (uint64_t)&unk_1004D78EC);
}

uint64_t sub_1000D1A24()
{
  return sub_10005A360(&qword_100641C68, (uint64_t (*)(uint64_t))type metadata accessor for CSSearchQueryError, (uint64_t)&unk_1004D7918);
}

uint64_t sub_1000D1A50()
{
  return sub_10005A360(&qword_100641C70, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1004D7A44);
}

uint64_t sub_1000D1A7C()
{
  return sub_10005A360(&qword_100641C78, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1004D7A18);
}

uint64_t sub_1000D1AA8()
{
  return sub_10005A360(&qword_100641C80, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1004D7AB4);
}

uint64_t sub_1000D1AD4()
{
  return sub_10005A360(&qword_100641C88, (uint64_t (*)(uint64_t))type metadata accessor for DOCFolderIconType, (uint64_t)&unk_1004D7BB0);
}

uint64_t sub_1000D1B00()
{
  return sub_10005A360(&qword_100641C90, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderServiceName, (uint64_t)&unk_1004D7C9C);
}

uint64_t sub_1000D1B2C()
{
  return sub_10005A360(&qword_100641C98, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderServiceName, (uint64_t)&unk_1004D7C70);
}

uint64_t sub_1000D1B58()
{
  return sub_10005A360(&qword_100641CA0, (uint64_t (*)(uint64_t))type metadata accessor for AVFileType, (uint64_t)&unk_1004D7DAC);
}

uint64_t sub_1000D1B84()
{
  return sub_10005A360(&qword_100641CA8, (uint64_t (*)(uint64_t))type metadata accessor for AVFileType, (uint64_t)&unk_1004D7D84);
}

uint64_t sub_1000D1BB0()
{
  return sub_10005A360(&qword_100641CB0, (uint64_t (*)(uint64_t))type metadata accessor for AVFileType, (uint64_t)&unk_1004D7E14);
}

uint64_t sub_1000D1BDC()
{
  return sub_10005A360(&qword_100641CB8, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_1004D7EF0);
}

uint64_t sub_1000D1C08()
{
  return sub_10005A360(&qword_100641CC0, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_1004D7EC4);
}

uint64_t sub_1000D1C34()
{
  return sub_10005A360(&qword_100641CC8, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_1004D7F60);
}

uint64_t sub_1000D1C60()
{
  return sub_10005A360(&qword_100641CD0, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1004D80D0);
}

uint64_t sub_1000D1C8C()
{
  return sub_10005A360(&qword_100641CD8, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1004D80A4);
}

uint64_t sub_1000D1CB8()
{
  return sub_10005A360(&qword_100641CE0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1004D82AC);
}

uint64_t sub_1000D1CE4()
{
  return sub_10005A360(&qword_100641CE8, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1004D8280);
}

uint64_t sub_1000D1D10()
{
  return sub_10005A360(&qword_100641CF0, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1004D83C0);
}

uint64_t sub_1000D1D3C()
{
  return sub_10005A360(&qword_100641CF8, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_1004D8394);
}

uint64_t sub_1000D1D68()
{
  return sub_10005A360(&qword_100641D08, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1004D8518);
}

uint64_t sub_1000D1D94()
{
  return sub_10005A360(&qword_100641D10, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1004D84EC);
}

uint64_t sub_1000D1DC0()
{
  return sub_10005A360(&qword_100641D18, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_1004D8588);
}

uint64_t sub_1000D1DEC()
{
  return sub_10005A360(&qword_100641D20, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderItemIdentifier, (uint64_t)&unk_1004D8708);
}

uint64_t sub_1000D1E18()
{
  return sub_10005A360(&qword_100641D28, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderItemIdentifier, (uint64_t)&unk_1004D86DC);
}

uint64_t sub_1000D1E44()
{
  return sub_10005A360(&qword_100641D30, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderItemIdentifier, (uint64_t)&unk_1004D8778);
}

uint64_t sub_1000D1E70()
{
  return sub_10005A360(&qword_100641D38, (uint64_t (*)(uint64_t))type metadata accessor for DOCIntentLocationType, (uint64_t)&unk_1004D885C);
}

uint64_t sub_1000D1E9C()
{
  return sub_10005A360(&qword_100641D40, (uint64_t (*)(uint64_t))type metadata accessor for DOCIntentLocationType, (uint64_t)&unk_1004D8834);
}

uint64_t sub_1000D1EC8()
{
  return sub_10005A360(&qword_100641D48, (uint64_t (*)(uint64_t))type metadata accessor for DOCIntentLocationType, (uint64_t)&unk_1004D88C4);
}

uint64_t sub_1000D1EF4()
{
  return sub_10005A360(&qword_100641D50, (uint64_t (*)(uint64_t))type metadata accessor for FileOperationKind, (uint64_t)&unk_1004D89A0);
}

uint64_t sub_1000D1F20()
{
  return sub_10005A360(&qword_100641D58, (uint64_t (*)(uint64_t))type metadata accessor for FileOperationKind, (uint64_t)&unk_1004D8974);
}

uint64_t sub_1000D1F4C()
{
  return sub_10005A360(&qword_100641D60, (uint64_t (*)(uint64_t))type metadata accessor for FileOperationKind, (uint64_t)&unk_1004D8A10);
}

uint64_t sub_1000D1F78()
{
  return sub_10005A360(&qword_100641D68, (uint64_t (*)(uint64_t))type metadata accessor for UIDocumentBrowserError, (uint64_t)&unk_1004D8ACC);
}

uint64_t sub_1000D1FA4()
{
  return sub_10005A360(&qword_100641D70, (uint64_t (*)(uint64_t))type metadata accessor for UIDocumentBrowserError, (uint64_t)&unk_1004D8AF4);
}

uint64_t sub_1000D1FD0()
{
  return sub_10005A360(&qword_100641D78, (uint64_t (*)(uint64_t))type metadata accessor for Availability, (uint64_t)&unk_1004D8C14);
}

uint64_t sub_1000D1FFC()
{
  return sub_10005A360(&qword_100641D80, (uint64_t (*)(uint64_t))type metadata accessor for Availability, (uint64_t)&unk_1004D8BE4);
}

uint64_t sub_1000D2028()
{
  return sub_10005A360(&qword_100641D88, (uint64_t (*)(uint64_t))type metadata accessor for Availability, (uint64_t)&unk_1004D8C3C);
}

uint64_t sub_1000D2054()
{
  return sub_10005A360(&qword_100641D90, (uint64_t (*)(uint64_t))type metadata accessor for Availability, (uint64_t)&unk_1004D8C74);
}

uint64_t sub_1000D2080()
{
  return sub_10005A360(&qword_100641D98, (uint64_t (*)(uint64_t))type metadata accessor for DOCTagRegistryChangeKey, (uint64_t)&unk_1004D8D9C);
}

uint64_t sub_1000D20AC()
{
  return sub_10005A360(&qword_100641DA0, (uint64_t (*)(uint64_t))type metadata accessor for DOCTagRegistryChangeKey, (uint64_t)&unk_1004D8D74);
}

uint64_t sub_1000D20D8()
{
  return sub_10005A360(&qword_100641DA8, (uint64_t (*)(uint64_t))type metadata accessor for PDFDocumentWriteOption, (uint64_t)&unk_1004D8F04);
}

uint64_t sub_1000D2104()
{
  return sub_10005A360(&qword_100641DB0, (uint64_t (*)(uint64_t))type metadata accessor for PDFDocumentWriteOption, (uint64_t)&unk_1004D8EDC);
}

uint64_t sub_1000D2130()
{
  return sub_10005A360(&qword_100641DB8, (uint64_t (*)(uint64_t))type metadata accessor for PDFDocumentWriteOption, (uint64_t)&unk_1004D8F6C);
}

uint64_t sub_1000D215C()
{
  return sub_10005A360(&qword_100641DC0, (uint64_t (*)(uint64_t))type metadata accessor for DOCTagRegistryChangeKey, (uint64_t)&unk_1004D8E04);
}

uint64_t sub_1000D2188()
{
  return sub_10005A360(&qword_100641DC8, (uint64_t (*)(uint64_t))type metadata accessor for UIDocumentBrowserError, (uint64_t)&unk_1004D8BA4);
}

uint64_t sub_1000D21B4()
{
  return sub_10005A360(&qword_100641DD0, (uint64_t (*)(uint64_t))type metadata accessor for UIDocumentBrowserError, (uint64_t)&unk_1004D8B74);
}

uint64_t sub_1000D21E0()
{
  return sub_10005A360(&qword_100641DD8, (uint64_t (*)(uint64_t))type metadata accessor for UIDocumentBrowserError, (uint64_t)&unk_1004D8B34);
}

uint64_t sub_1000D220C()
{
  return sub_10005A360(&qword_100641DE0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1004D90FC);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641F90, (uint64_t)&unk_1005C2150);
}

uint64_t sub_1000D224C()
{
  return sub_10005A360(&qword_100641DE8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1004D90C4);
}

unint64_t sub_1000D227C()
{
  unint64_t result;

  result = qword_100641DF0;
  if (!qword_100641DF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100641DF0);
  }
  return result;
}

uint64_t sub_1000D22C0()
{
  return sub_10005A360(&qword_100641DF8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1004D9134);
}

uint64_t sub_1000D22EC()
{
  return sub_10005A360((unint64_t *)&qword_100641E00, (uint64_t (*)(uint64_t))type metadata accessor for UIDocumentBrowserError, (uint64_t)&unk_1004D905C);
}

uint64_t sub_1000D2318()
{
  return sub_10005A360(&qword_100641E10, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1004D8140);
}

uint64_t sub_1000D2344()
{
  return sub_10005A360(&qword_100641E18, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderServiceName, (uint64_t)&unk_1004D7D0C);
}

uint64_t sub_1000D2370()
{
  return sub_10005A360(&qword_100641E20, (uint64_t (*)(uint64_t))type metadata accessor for CSSearchQueryError, (uint64_t)&unk_1004D79D4);
}

uint64_t sub_1000D239C()
{
  return sub_10005A360(&qword_100641E28, (uint64_t (*)(uint64_t))type metadata accessor for CSSearchQueryError, (uint64_t)&unk_1004D79A0);
}

uint64_t sub_1000D23C8()
{
  return sub_10005A360(&qword_100641E30, (uint64_t (*)(uint64_t))type metadata accessor for CSSearchQueryError, (uint64_t)&unk_1004D795C);
}

uint64_t sub_1000D23F4()
{
  return sub_10005A360(&qword_100641E38, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1004D9340);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641F88, (uint64_t)&unk_1005C2130);
}

uint64_t sub_1000D2434()
{
  return sub_10005A360(&qword_100641E40, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1004D9304);
}

uint64_t sub_1000D2460()
{
  return sub_10005A360(&qword_100641E48, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1004D937C);
}

uint64_t sub_1000D248C()
{
  return sub_10005A360(&qword_100641E50, (uint64_t (*)(uint64_t))type metadata accessor for CSSearchQueryError, (uint64_t)&unk_1004D9298);
}

unint64_t sub_1000D24B8()
{
  unint64_t result;

  result = qword_100641EC0;
  if (!qword_100641EC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100641EC0);
  }
  return result;
}

void type metadata accessor for Attributes(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641F98, (uint64_t)&unk_1005C2170);
}

void type metadata accessor for State(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641FA0, (uint64_t)&unk_1005C2198);
}

void type metadata accessor for CMTimeFlags(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641FA8, (uint64_t)&unk_1005C21B8);
}

void type metadata accessor for CTLine(uint64_t a1)
{
  sub_1000799BC(a1, &qword_100641FB0, (uint64_t)&unk_1005C21E0);
}

uint64_t sub_1000D254C()
{
  return sub_10005A360(&qword_100641FB8, (uint64_t (*)(uint64_t))type metadata accessor for Attributes, (uint64_t)&unk_1004D94EC);
}

uint64_t sub_1000D2578()
{
  return sub_10005A360(&qword_100641FC0, (uint64_t (*)(uint64_t))type metadata accessor for Attributes, (uint64_t)&unk_1004D94B8);
}

uint64_t sub_1000D25A4()
{
  return sub_10005A360(&qword_100641FC8, (uint64_t (*)(uint64_t))type metadata accessor for Attributes, (uint64_t)&unk_1004D9518);
}

uint64_t sub_1000D25D0()
{
  return sub_10005A360((unint64_t *)&unk_100641FD0, (uint64_t (*)(uint64_t))type metadata accessor for Attributes, (uint64_t)&unk_1004D9554);
}

uint64_t sub_1000D25FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

void sub_1000D26D8()
{
  uint64_t v0;
  double v1;
  id v2;
  id v3;

  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
    __asm { BR              X10 }
  v1 = *(double *)(v0 + 16) * 100.0;
  v2 = objc_msgSend((id)objc_opt_self(NSProgress), "progressWithTotalUnitCount:", 100);
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v1 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
    JUMPOUT(0x1000D28F8);
  }
  v3 = v2;
  objc_msgSend(v2, "setCompletedUnitCount:", (uint64_t)v1);

  *(_QWORD *)(v0 + 80) = v3;
  *(_BYTE *)(v0 + 8) = 7;
}

_QWORD *sub_1000D2920()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *result;

  v1 = *v0;
  result = _swiftEmptyArrayStorage;
  if (*v0)
  {
    if (*(_QWORD *)(v1 + 16))
    {
      swift_bridgeObjectRetain(v1);
      __asm { BR              X8 }
    }
  }
  return result;
}

uint64_t sub_1000D2B10()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  _OWORD v4[5];
  char v5;
  char v6;

  v1 = v0[3];
  v4[2] = v0[2];
  v4[3] = v1;
  v4[4] = v0[4];
  v2 = v0[1];
  v4[0] = *v0;
  v4[1] = v2;
  sub_100070EDC((uint64_t)v4 + 8, (uint64_t)&v5, &qword_100642198);
  sub_100070EDC((uint64_t)&v5, (uint64_t)&v6, &qword_100642198);
  return byte_1004D9702[v6];
}

uint64_t sub_1000D2B84@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  double v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  __n128 v27;
  unint64_t v28;
  __n128 v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t, __n128);
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>));
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;

  v66 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario(0);
  v61 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v60 = (uint64_t)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_10006922C((uint64_t *)&unk_100655BB0);
  v5 = __chkstk_darwin(v63);
  v62 = (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v58 = (char *)&v57 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v57 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v57 - v12;
  v14 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v14);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = 0;
  v68 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  *(_QWORD *)&v21 = swift_bridgeObjectRelease(v68).n128_u64[0];
  v67 = 0xD00000000000001ELL;
  v68 = 0x800000010050D5B0;
  v59 = a1;
  v22 = objc_msgSend(a1, "displayName", v21);
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  v26._countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  v27 = swift_bridgeObjectRelease(v25);
  v28 = v68;
  URL.init(string:)(v67, v68, v27);
  v29 = swift_bridgeObjectRelease(v28);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v18 + 48);
  v65 = v17;
  result = v30(v16, 1, v17, v29);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v65);
    v33 = *(_QWORD *)(v64 + 16);
    __chkstk_darwin(v32);
    v34 = *(void (**)(uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>)))(*(_QWORD *)v33 + 160);
    v34(sub_1000D57CC);
    sub_1000271D4((uint64_t)v13, (uint64_t)v11, (uint64_t *)&unk_100655BB0);
    v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48);
    v36 = v35(v11, 1, v66);
    sub_10000CB4C((uint64_t)v11, (uint64_t *)&unk_100655BB0);
    if (v36 == 1)
    {
      v37 = sub_1000D3020(v59, (uint64_t)v20);
      __chkstk_darwin(v37);
      v38 = (uint64_t)v58;
      v34(sub_1000D57CC);
      sub_10000CB4C((uint64_t)v13, (uint64_t *)&unk_100655BB0);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v65);
      sub_100070EDC(v38, (uint64_t)v13, (uint64_t *)&unk_100655BB0);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v65);
    }
    v39 = v62;
    sub_100070EDC((uint64_t)v13, v62, (uint64_t *)&unk_100655BB0);
    v40 = v66;
    if (v35((char *)v39, 1, v66) == 1)
    {
      result = sub_10000CB4C(v39, (uint64_t *)&unk_100655BB0);
      v66 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      v50 = 1;
    }
    else
    {
      v51 = v60;
      sub_1000D4A90(v39, v60);
      v52 = (uint64_t *)(v51 + *(int *)(v40 + 20));
      v53 = *v52;
      v54 = v52[1];
      v42 = v52[3];
      v64 = v52[2];
      v65 = v53;
      v43 = v52[4];
      v44 = v52[5];
      v55 = v52[6];
      v46 = v52[7];
      v47 = v52[8];
      v49 = (void *)v52[10];
      v56 = v52[9];
      v66 = v54;
      sub_1000D4AD4(v53, v54, v64, v42, v43, v44, v55, v46, v47, v56, v49);
      result = sub_1000D4B30(v51);
      v48 = v56;
      v45 = v55;
      v41 = v64;
      v50 = v65;
    }
    *a2 = v50;
    a2[1] = v66;
    a2[2] = v41;
    a2[3] = v42;
    a2[4] = v43;
    a2[5] = v44;
    a2[6] = v45;
    a2[7] = v46;
    a2[8] = v47;
    a2[9] = v48;
    a2[10] = (uint64_t)v49;
  }
  return result;
}

uint64_t sub_1000D3020(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  id v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned __int16 v59;
  uint64_t v60;
  unsigned __int8 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  void *v65;

  v50 = a2;
  v55 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario(0);
  __chkstk_darwin(v49);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "stringForKey:", v10);

  v54 = v6;
  v52 = v8;
  if (v11)
  {
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v15 = objc_msgSend(a1, "displayName");
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  v53 = v2;
  if (!v14)
  {
    v19 = v4;
    swift_bridgeObjectRelease(v18);
    v20 = 0;
    v56 = 0;
    v21 = 0;
    goto LABEL_12;
  }
  if (v16 != v12 || v14 != v18)
  {
    v19 = v4;
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v12, v14, 0);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v14);
    if ((v22 & 1) != 0)
      goto LABEL_10;
    v20 = 0;
    v56 = 0;
    v21 = 0;
    v14 = 0;
LABEL_12:
    v24 = 0;
    v25 = 0;
    v57 = 0;
    v47 = 0;
    v46 = 0;
    v45 = 0;
    v23 = 1;
    goto LABEL_13;
  }
  v19 = v4;
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v14);
LABEL_10:
  v65 = 0;
  v58 = _swiftEmptyArrayStorage;
  v59 = 265;
  v60 = 0;
  v61 = 1;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  sub_1000D26D8();
  v23 = (uint64_t)v58;
  v21 = v61;
  v24 = *((_QWORD *)&v62 + 1);
  v14 = v62;
  v25 = v63;
  v56 = v60;
  v57 = *((_QWORD *)&v63 + 1);
  v46 = *((_QWORD *)&v64 + 1);
  v47 = v64;
  v45 = v65;
  v20 = v59;
LABEL_13:
  v26 = v49;
  v51 = v19;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v28 = (uint64_t)v52;
  v27(v52, v50, v55);
  v29 = (uint64_t *)(v28 + *(int *)(v26 + 20));
  *v29 = v23;
  v29[1] = v20;
  v30 = v20;
  v48 = v20;
  v49 = v25;
  v31 = v56;
  v29[2] = v56;
  v29[3] = v21;
  v32 = v31;
  v56 = v31;
  v33 = v21;
  v50 = v21;
  v29[4] = v14;
  v29[5] = v24;
  v34 = v25;
  v35 = v57;
  v29[6] = v25;
  v29[7] = v35;
  v57 = v35;
  v36 = v47;
  v37 = v46;
  v29[8] = v47;
  v29[9] = v37;
  v38 = v45;
  v29[10] = (uint64_t)v45;
  v39 = sub_1000D4AD4(v23, v30, v32, v33, v14, v24, v34, v35, v36, v37, v38);
  v40 = v54;
  v41 = URL.standardizedFileURL.getter(v39);
  v42 = *(_QWORD *)(v53 + 16);
  __chkstk_darwin(v41);
  (*(void (**)(uint64_t (*)(uint64_t)))(*(_QWORD *)v42 + 168))(sub_1000D57D0);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v40, v55);
  sub_1000D4CA0(v23, v48, v56, v50, v14, v24, v49, v57, v36, v37, v38);
  return sub_1000D4B30(v28);
}

uint64_t sub_1000D3418(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char v60[16];
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int16 v64;
  uint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;

  v59 = a3;
  v54 = a2;
  v58 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario(0);
  __chkstk_darwin(v58);
  v57 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for URL(0);
  v55 = *(_QWORD *)(v74 - 8);
  v5 = __chkstk_darwin(v74);
  v56 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v43 - v8;
  __chkstk_darwin(v7);
  v45 = (char *)&v43 - v10;
  v11 = *a1;
  v12 = a1[1];
  v13 = a1[2];
  v14 = *((_WORD *)a1 + 12);
  v15 = a1[4];
  LODWORD(v53) = *((unsigned __int8 *)a1 + 40);
  v16 = a1[7];
  v52 = a1[6];
  v17 = a1[9];
  v51 = a1[8];
  v18 = a1[10];
  v19 = a1[11];
  v50 = v18;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  URL.appendingPathComponent(_:)(v11, v12);
  v72 = v19;
  v73 = 0;
  v63 = v13;
  v64 = v14;
  v65 = v15;
  v66 = v53;
  v67 = v52;
  v68 = v16;
  v69 = v51;
  v70 = v17;
  v71 = v50;
  sub_1000D26D8();
  v20 = v63;
  v44 = v63;
  v53 = v65;
  v52 = v66;
  v21 = v68;
  v51 = v67;
  v22 = v70;
  v50 = v69;
  v43 = v70;
  v23 = v72;
  v49 = v71;
  v24 = v73;
  v47 = v73;
  v48 = v64;
  v25 = v55;
  v26 = v45;
  v27 = v74;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v9, v45, v74);
  v54 = v24;
  swift_bridgeObjectRetain(v20);
  v28 = v21;
  v46 = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  v29 = swift_bridgeObjectRetain(v23);
  v30 = v56;
  URL.standardizedFileURL.getter(v29);
  v31 = *(void (**)(char *, uint64_t))(v25 + 8);
  v31(v9, v27);
  v32 = *(uint64_t (**)(char *, char *, uint64_t))(v25 + 32);
  v33 = (uint64_t)v57;
  v34 = v32(v57, v30, v27);
  v35 = (_QWORD *)(v33 + *(int *)(v58 + 20));
  v36 = v44;
  v37 = v48;
  *v35 = v44;
  v35[1] = v37;
  v38 = v52;
  v35[2] = v53;
  v35[3] = v38;
  v35[4] = v51;
  v35[5] = v28;
  v39 = v43;
  v35[6] = v50;
  v35[7] = v39;
  v35[8] = v49;
  v35[9] = v23;
  v35[10] = v47;
  URL.standardizedFileURL.getter(v34);
  v40 = *(_QWORD *)(v59 + 16);
  v61 = v9;
  v62 = v33;
  (*(void (**)(uint64_t (*)(uint64_t), char *, char *))(*(_QWORD *)v40 + 168))(sub_1000D57D0, v60, &type metadata for ()[8]);
  v41 = v74;
  v31(v9, v74);

  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v39);
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(v36);
  sub_1000D4B30(v33);
  return ((uint64_t (*)(char *, uint64_t))v31)(v26, v41);
}

uint64_t sub_1000D37E8(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  _QWORD v28[3];
  __int16 v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v25 = a3 + 64;
  v4 = 1 << *(_BYTE *)(a3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a3 + 64);
  v26 = (unint64_t)(v4 + 63) >> 6;
  v36 = a3;
  result = swift_bridgeObjectRetain(a3);
  v8 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v36 + 48) + 16 * i);
    v15 = *v14;
    v16 = v14[1];
    v17 = *(_QWORD *)(v36 + 56) + 80 * i;
    v18 = *(_QWORD *)v17;
    LOWORD(v14) = *(_WORD *)(v17 + 8);
    v19 = *(_QWORD *)(v17 + 16);
    v20 = *(_BYTE *)(v17 + 24);
    v21 = *(_QWORD *)(v17 + 32);
    v22 = *(_QWORD *)(v17 + 72);
    v28[0] = v15;
    v28[1] = v16;
    v28[2] = v18;
    v29 = (__int16)v14;
    v30 = v19;
    v31 = v20;
    v32 = v21;
    v33 = *(_OWORD *)(v17 + 40);
    v34 = *(_OWORD *)(v17 + 56);
    v35 = v22;
    v23 = v33;
    v24 = v34;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    a1(v28);
    if (v3)
    {
      swift_release(v36);
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v18);
      return swift_bridgeObjectRelease(v16);
    }
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v18);
    result = swift_bridgeObjectRelease(v16);
    if (v6)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v8++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v8 >= v26)
      return swift_release(v36);
    v12 = *(_QWORD *)(v25 + 8 * v8);
    if (!v12)
      break;
LABEL_17:
    v6 = (v12 - 1) & v12;
  }
  v13 = v8 + 1;
  if (v8 + 1 >= v26)
    return swift_release(v36);
  v12 = *(_QWORD *)(v25 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v8 + 2;
  if (v8 + 2 >= v26)
    return swift_release(v36);
  v12 = *(_QWORD *)(v25 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v8 + 3;
  if (v8 + 3 >= v26)
    return swift_release(v36);
  v12 = *(_QWORD *)(v25 + 8 * v13);
  if (v12)
    goto LABEL_16;
  v13 = v8 + 4;
  if (v8 + 4 >= v26)
    return swift_release(v36);
  v12 = *(_QWORD *)(v25 + 8 * v13);
  if (v12)
  {
LABEL_16:
    v8 = v13;
    goto LABEL_17;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v26)
      return swift_release(v36);
    v12 = *(_QWORD *)(v25 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000D3A80@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  void (*v22)(char *, char *, uint64_t);
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10006922C(&qword_100643470);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v31 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v31 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v31 - v18;
  v20 = objc_msgSend(a1, "nodeURL");
  if (v20)
  {
    v21 = v20;
    v32 = a2;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v20);

    v22 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v22(v17, v7, v4);
    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v23(v17, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v17, 1, v4) != 1)
    {
      v22(v19, v17, v4);
      v23(v19, 0, 1, v4);
      a2 = v32;
      goto LABEL_13;
    }
    a2 = v32;
  }
  else
  {
    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v23(v17, 1, 1, v4);
  }
  v24 = objc_msgSend(a1, "fpfs_fpItem");
  if (v24)
  {
    v25 = v24;
    v26 = objc_msgSend(v24, "fileURL");

    if (v26)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v26);

      v27 = 0;
    }
    else
    {
      v27 = 1;
    }
    v23(v14, v27, 1, v4);
    sub_100070EDC((uint64_t)v14, (uint64_t)v19, &qword_100643470);
  }
  else
  {
    v23(v19, 1, 1, v4);
  }
  sub_10000CB4C((uint64_t)v17, &qword_100643470);
LABEL_13:
  sub_1000271D4((uint64_t)v19, (uint64_t)v11, &qword_100643470);
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4);
  if ((_DWORD)v28 == 1)
  {
    sub_10000CB4C((uint64_t)v19, &qword_100643470);
    sub_10000CB4C((uint64_t)v11, &qword_100643470);
    v29 = 1;
  }
  else
  {
    URL.standardizedFileURL.getter(v28);
    sub_10000CB4C((uint64_t)v19, &qword_100643470);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    v29 = 0;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v23)(a2, v29, 1, v4);
}

uint64_t sub_1000D3D8C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a1;
  if (*(_QWORD *)(*a1 + 16) && (v5 = sub_100140624(a2), (v6 & 1) != 0))
  {
    v7 = v5;
    v8 = *(_QWORD *)(v4 + 56);
    v9 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario(0);
    v10 = *(_QWORD *)(v9 - 8);
    sub_1000D4C5C(v8 + *(_QWORD *)(v10 + 72) * v7, a3);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v12 = a3;
    v13 = 0;
    v14 = v9;
  }
  else
  {
    v14 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario(0);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
    v12 = a3;
    v13 = 1;
  }
  return v11(v12, v13, 1, v14);
}

uint64_t sub_1000D3E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = sub_10006922C((uint64_t *)&unk_100655BB0);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v10, a2);
  sub_1000D4C5C(a3, (uint64_t)v7);
  v12 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v7, 0, 1, v12);
  return sub_10043B158((uint64_t)v7, (uint64_t)v10);
}

uint64_t sub_1000D3F24()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for DOCDebugUIScenarioManager()
{
  return objc_opt_self(_TtC5FilesP33_397C6FA2C3E7DDE8E64BE66F79CF8CC925DOCDebugUIScenarioManager);
}

ValueMetadata *type metadata accessor for DOCDebugUIScenarioManager.State()
{
  return &type metadata for DOCDebugUIScenarioManager.State;
}

uint64_t sub_1000D3F78@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>));
  uint64_t v60;
  void *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v62 = a3;
  v69 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario(0);
  v64 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v66 = (uint64_t)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_10006922C((uint64_t *)&unk_100655BB0);
  v8 = __chkstk_darwin(v68);
  v65 = (uint64_t)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v63 = (char *)&v58 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v58 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v58 - v15;
  v17 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v17);
  v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v58 - v25;
  v61 = a1;
  v67 = a2;
  sub_1000D3A80(a1, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    v27 = &qword_100643470;
    v28 = (uint64_t)v19;
  }
  else
  {
    v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(v26, v19, v20);
    v30 = URL.standardizedFileURL.getter(v29);
    v31 = *(_QWORD *)(v67 + 16);
    __chkstk_darwin(v30);
    v59 = *(void (**)(uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>)))(*(_QWORD *)v31 + 160);
    v60 = v31;
    v59(sub_1000D4418);
    v32 = *(void (**)(char *, uint64_t))(v21 + 8);
    v32(v24, v20);
    sub_1000271D4((uint64_t)v16, (uint64_t)v14, (uint64_t *)&unk_100655BB0);
    v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48);
    v34 = v33(v14, 1, v69);
    sub_10000CB4C((uint64_t)v14, (uint64_t *)&unk_100655BB0);
    if (v34 == 1)
    {
      v35 = sub_1000D4420(v61, v67);
      v36 = URL.standardizedFileURL.getter(v35);
      __chkstk_darwin(v36);
      v37 = v33;
      v38 = v63;
      v59(sub_1000D57CC);
      v32(v24, v20);
      sub_10000CB4C((uint64_t)v16, (uint64_t *)&unk_100655BB0);
      v32(v26, v20);
      v39 = (uint64_t)v38;
      v33 = v37;
      sub_100070EDC(v39, (uint64_t)v16, (uint64_t *)&unk_100655BB0);
    }
    else
    {
      v32(v26, v20);
    }
    v40 = v65;
    sub_100070EDC((uint64_t)v16, v65, (uint64_t *)&unk_100655BB0);
    v41 = v69;
    if (v33((char *)v40, 1, v69) != 1)
    {
      v54 = v40;
      v55 = v66;
      sub_1000D4A90(v54, v66);
      v56 = (uint64_t *)(v55 + *(int *)(v41 + 20));
      v53 = *v56;
      v57 = v56[1];
      v45 = v56[3];
      v68 = v56[2];
      v69 = v57;
      v46 = v56[4];
      v47 = v56[5];
      v48 = v56[6];
      v49 = v56[7];
      v50 = v56[8];
      v51 = v56[9];
      v52 = (void *)v56[10];
      sub_1000D4AD4(v53, v57, v68, v45, v46, v47, v48, v49, v50, v51, v52);
      result = sub_1000D4B30(v66);
      v44 = v68;
      v43 = v69;
      goto LABEL_10;
    }
    v27 = (uint64_t *)&unk_100655BB0;
    v28 = v40;
  }
  result = sub_10000CB4C(v28, v27);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 1;
LABEL_10:
  *a4 = v53;
  a4[1] = v43;
  a4[2] = v44;
  a4[3] = v45;
  a4[4] = v46;
  a4[5] = v47;
  a4[6] = v48;
  a4[7] = v49;
  a4[8] = v50;
  a4[9] = v51;
  a4[10] = (uint64_t)v52;
  return result;
}

uint64_t type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario(uint64_t a1)
{
  uint64_t result;

  result = qword_1006421F8;
  if (!qword_1006421F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DOCDebugUIScenarioManager.LoadedScenario);
  return result;
}

uint64_t sub_1000D4418@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000D3D8C(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1000D4420(void *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSString v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;

  v4 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v7);
  v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v65 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v65 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v65 - v21;
  __chkstk_darwin(v20);
  v72 = (char *)&v65 - v23;
  v24 = a1;
  v26 = v25;
  sub_1000D3A80(v24, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v9, 1, v10) == 1)
    return sub_10000CB4C((uint64_t)v9, &qword_100643470);
  v68 = v4;
  v69 = v13;
  v70 = a2;
  v28 = *(uint64_t (**)(char *, char *, uint64_t))(v26 + 32);
  v29 = v28(v72, v9, v10);
  URL.deletingLastPathComponent()(v29);
  URL.appendingPathComponent(_:)(0x6972616E6563732ELL, 0xEF6E6F736A2E736FLL);
  v30 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter(v30);
  v32 = v31;
  v33 = String._bridgeToObjectiveC()();
  v71 = (unint64_t)v22;
  v34 = v19;
  v35 = v33;
  LOBYTE(v32) = objc_msgSend(v30, "fileExistsAtPath:", v33, swift_bridgeObjectRelease(v32).n128_f64[0]);

  v36 = v10;
  if ((v32 & 1) != 0)
  {
    v37 = Data.init(contentsOf:options:)(v34, 1);
    v39 = v38;
    v40 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
    v41 = JSONDecoder.init()();
    v42 = sub_1000D4BBC();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v73, &type metadata for DOCDebugUIScenarioCollection, v37, v39, &type metadata for DOCDebugUIScenarioCollection, v42);
    swift_release(v41);
    v66 = v73;
    v67 = v37;
    v51 = v16;
    v52 = v72;
    v53 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 16))(v16, v72, v36);
    v54 = v69;
    URL.standardizedFileURL.getter(v53);
    v65 = v39;
    v55 = *(void (**)(char *, uint64_t))(v26 + 8);
    v55(v51, v36);
    v56 = (uint64_t)v6;
    v57 = v28(v6, v54, v36);
    v58 = &v6[*(int *)(v68 + 20)];
    *(_QWORD *)v58 = 1;
    *(_OWORD *)(v58 + 8) = 0u;
    *(_OWORD *)(v58 + 24) = 0u;
    *(_OWORD *)(v58 + 40) = 0u;
    *(_OWORD *)(v58 + 56) = 0u;
    *(_OWORD *)(v58 + 72) = 0u;
    v59 = (unint64_t)v51;
    v60 = URL.standardizedFileURL.getter(v57);
    v61 = v70;
    v62 = *(_QWORD *)(v70 + 16);
    __chkstk_darwin(v60);
    *(&v65 - 2) = v59;
    *(&v65 - 1) = v56;
    (*(void (**)(uint64_t (*)(uint64_t)))(*(_QWORD *)v62 + 168))(sub_1000D57D0);
    v55((char *)v59, v36);
    v63 = sub_1000D4B30(v56);
    __chkstk_darwin(v63);
    *(&v65 - 2) = v71;
    *(&v65 - 1) = v61;
    v64 = v66;
    sub_1000D37E8((void (*)(_QWORD *))sub_1000D4C44, (uint64_t)(&v65 - 4), v66);
    sub_1000D4C00(v67, v65);
    swift_bridgeObjectRelease(v64);
    v55(v34, v36);
    v55(v52, v36);
    return ((uint64_t (*)(unint64_t, uint64_t))v55)(v71, v36);
  }
  else
  {
    v43 = v72;
    v44 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 16))(v16, v72, v36);
    v45 = v69;
    URL.standardizedFileURL.getter(v44);
    v46 = *(void (**)(char *, uint64_t))(v26 + 8);
    v46(v16, v36);
    v47 = v28(v6, v45, v36);
    v48 = &v6[*(int *)(v68 + 20)];
    *(_QWORD *)v48 = 1;
    *(_OWORD *)(v48 + 8) = 0u;
    *(_OWORD *)(v48 + 24) = 0u;
    *(_OWORD *)(v48 + 40) = 0u;
    *(_OWORD *)(v48 + 56) = 0u;
    *(_OWORD *)(v48 + 72) = 0u;
    v49 = URL.standardizedFileURL.getter(v47);
    v50 = *(_QWORD *)(v70 + 16);
    __chkstk_darwin(v49);
    *(&v65 - 2) = (unint64_t)v16;
    *(&v65 - 1) = (unint64_t)v6;
    (*(void (**)(uint64_t (*)(uint64_t)))(*(_QWORD *)v50 + 168))(sub_1000D4B6C);
    v46(v16, v36);
    sub_1000D4B30((uint64_t)v6);
    v46(v34, v36);
    v46(v43, v36);
    return ((uint64_t (*)(unint64_t, uint64_t))v46)(v71, v36);
  }
}

uint64_t sub_1000D4A90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D4AD4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v13;
  id v14;

  if (result != 1)
  {
    v13 = result;
    v14 = a11;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    return swift_bridgeObjectRetain(a10);
  }
  return result;
}

uint64_t sub_1000D4B30(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D4B6C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000D3E30(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_1000D4B74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100646B20;
  if (!qword_100646B20)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_100646B20);
  }
  return result;
}

unint64_t sub_1000D4BBC()
{
  unint64_t result;

  result = qword_100642190;
  if (!qword_100642190)
  {
    result = swift_getWitnessTable(&unk_1004E7E68, &type metadata for DOCDebugUIScenarioCollection);
    atomic_store(result, (unint64_t *)&qword_100642190);
  }
  return result;
}

uint64_t sub_1000D4C00(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000D4C44(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000D3418(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000D4C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DOCDebugUIScenarioManager.LoadedScenario(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000D4CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a1 != 1)
  {
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a10);

  }
}

void destroy for DOCDebugUIScenario(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)a1);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));

}

uint64_t initializeWithCopy for DOCDebugUIScenario(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v4 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v4;
  v5 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v5;
  v6 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v6;
  v7 = (void *)a2[10];
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v8 = v7;
  return a1;
}

uint64_t *assignWithCopy for DOCDebugUIScenario(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  v6 = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  a1[2] = v6;
  a1[4] = a2[4];
  v7 = a2[5];
  v8 = a1[5];
  a1[5] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  a1[6] = a2[6];
  v9 = a2[7];
  v10 = a1[7];
  a1[7] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  a1[8] = a2[8];
  v11 = a2[9];
  v12 = a1[9];
  a1[9] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = (void *)a1[10];
  v14 = (void *)a2[10];
  a1[10] = (uint64_t)v14;
  v15 = v14;

  return a1;
}

__n128 initializeWithTake for DOCDebugUIScenario(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t *assignWithTake for DOCDebugUIScenario(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_WORD *)a1 + 4) = *((_WORD *)a2 + 4);
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  v5 = a2[5];
  v6 = a1[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRelease(v6);
  v7 = a2[7];
  v8 = a1[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease(v8);
  a1[8] = a2[8];
  swift_bridgeObjectRelease(a1[9]);
  v9 = (void *)a1[10];
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);

  return a1;
}

uint64_t getEnumTagSinglePayload for DOCDebugUIScenario(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 88))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCDebugUIScenario(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t *sub_1000D5024(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)v10;
    if (*(_QWORD *)v10 == 1)
    {
      v12 = *((_OWORD *)v10 + 3);
      *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
      *((_OWORD *)v9 + 3) = v12;
      *((_OWORD *)v9 + 4) = *((_OWORD *)v10 + 4);
      *((_QWORD *)v9 + 10) = *((_QWORD *)v10 + 10);
      v13 = *((_OWORD *)v10 + 1);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *((_OWORD *)v9 + 1) = v13;
    }
    else
    {
      *(_QWORD *)v9 = v11;
      *((_WORD *)v9 + 4) = *((_WORD *)v10 + 4);
      *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
      v9[24] = v10[24];
      v15 = *((_QWORD *)v10 + 5);
      *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
      *((_QWORD *)v9 + 5) = v15;
      v16 = *((_QWORD *)v10 + 7);
      *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
      *((_QWORD *)v9 + 7) = v16;
      v17 = *((_QWORD *)v10 + 9);
      *((_QWORD *)v9 + 8) = *((_QWORD *)v10 + 8);
      *((_QWORD *)v9 + 9) = v17;
      v18 = (void *)*((_QWORD *)v10 + 10);
      *((_QWORD *)v9 + 10) = v18;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      v19 = v18;
    }
  }
  return a1;
}

void sub_1000D5140(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  if (*(_QWORD *)v5 != 1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)v5);
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + 56));
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + 72));

  }
}

uint64_t sub_1000D51BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  if (*v9 == 1)
  {
    v11 = *((_OWORD *)v9 + 3);
    *(_OWORD *)(v8 + 32) = *((_OWORD *)v9 + 2);
    *(_OWORD *)(v8 + 48) = v11;
    *(_OWORD *)(v8 + 64) = *((_OWORD *)v9 + 4);
    *(_QWORD *)(v8 + 80) = v9[10];
    v12 = *((_OWORD *)v9 + 1);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v12;
  }
  else
  {
    *(_QWORD *)v8 = v10;
    *(_WORD *)(v8 + 8) = *((_WORD *)v9 + 4);
    *(_QWORD *)(v8 + 16) = v9[2];
    *(_BYTE *)(v8 + 24) = *((_BYTE *)v9 + 24);
    v13 = v9[5];
    *(_QWORD *)(v8 + 32) = v9[4];
    *(_QWORD *)(v8 + 40) = v13;
    v14 = v9[7];
    *(_QWORD *)(v8 + 48) = v9[6];
    *(_QWORD *)(v8 + 56) = v14;
    v15 = v9[9];
    *(_QWORD *)(v8 + 64) = v9[8];
    *(_QWORD *)(v8 + 72) = v15;
    v16 = (void *)v9[10];
    *(_QWORD *)(v8 + 80) = v16;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    v17 = v16;
  }
  return a1;
}

uint64_t sub_1000D52AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7);
  v11 = *v9;
  if (v10 == 1)
  {
    if (v11 == 1)
    {
      v12 = *((_OWORD *)v9 + 1);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v12;
      v13 = *((_OWORD *)v9 + 2);
      v14 = *((_OWORD *)v9 + 3);
      v15 = *((_OWORD *)v9 + 4);
      *(_QWORD *)(v8 + 80) = v9[10];
      *(_OWORD *)(v8 + 48) = v14;
      *(_OWORD *)(v8 + 64) = v15;
      *(_OWORD *)(v8 + 32) = v13;
    }
    else
    {
      *(_QWORD *)v8 = v11;
      *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
      *(_BYTE *)(v8 + 9) = *((_BYTE *)v9 + 9);
      v20 = v9[2];
      *(_BYTE *)(v8 + 24) = *((_BYTE *)v9 + 24);
      *(_QWORD *)(v8 + 16) = v20;
      *(_QWORD *)(v8 + 32) = v9[4];
      v21 = v9[5];
      *(_QWORD *)(v8 + 40) = v21;
      *(_QWORD *)(v8 + 48) = v9[6];
      v22 = v9[7];
      *(_QWORD *)(v8 + 56) = v22;
      *(_QWORD *)(v8 + 64) = v9[8];
      v23 = v9[9];
      *(_QWORD *)(v8 + 72) = v23;
      v24 = (void *)v9[10];
      *(_QWORD *)(v8 + 80) = v24;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v25 = v24;
    }
  }
  else if (v11 == 1)
  {
    sub_1000D54A4(a1 + v7);
    v16 = *((_OWORD *)v9 + 1);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v16;
    v18 = *((_OWORD *)v9 + 3);
    v17 = *((_OWORD *)v9 + 4);
    v19 = *((_OWORD *)v9 + 2);
    *(_QWORD *)(v8 + 80) = v9[10];
    *(_OWORD *)(v8 + 48) = v18;
    *(_OWORD *)(v8 + 64) = v17;
    *(_OWORD *)(v8 + 32) = v19;
  }
  else
  {
    *(_QWORD *)v8 = v11;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRelease(v10);
    *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
    *(_BYTE *)(v8 + 9) = *((_BYTE *)v9 + 9);
    v26 = v9[2];
    *(_BYTE *)(v8 + 24) = *((_BYTE *)v9 + 24);
    *(_QWORD *)(v8 + 16) = v26;
    *(_QWORD *)(v8 + 32) = v9[4];
    v27 = v9[5];
    v28 = *(_QWORD *)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v27;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease(v28);
    *(_QWORD *)(v8 + 48) = v9[6];
    v29 = v9[7];
    v30 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)(v8 + 56) = v29;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRelease(v30);
    *(_QWORD *)(v8 + 64) = v9[8];
    v31 = v9[9];
    v32 = *(_QWORD *)(v8 + 72);
    *(_QWORD *)(v8 + 72) = v31;
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRelease(v32);
    v33 = *(void **)(v8 + 80);
    v34 = (void *)v9[10];
    *(_QWORD *)(v8 + 80) = v34;
    v35 = v34;

  }
  return a1;
}

uint64_t sub_1000D54A4(uint64_t a1)
{
  destroy for DOCDebugUIScenario(a1);
  return a1;
}

uint64_t sub_1000D54D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v8 + 48) = v10;
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(v9 + 80);
  v11 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v11;
  return a1;
}

uint64_t sub_1000D554C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7);
  if (v10 != 1)
  {
    if (*(_QWORD *)v9 != 1)
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      swift_bridgeObjectRelease(v10);
      *(_WORD *)(v8 + 8) = *(_WORD *)(v9 + 8);
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
      *(_BYTE *)(v8 + 24) = *(_BYTE *)(v9 + 24);
      v13 = *(_QWORD *)(v9 + 40);
      v14 = *(_QWORD *)(v8 + 40);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
      *(_QWORD *)(v8 + 40) = v13;
      swift_bridgeObjectRelease(v14);
      v15 = *(_QWORD *)(v9 + 56);
      v16 = *(_QWORD *)(v8 + 56);
      *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
      *(_QWORD *)(v8 + 56) = v15;
      swift_bridgeObjectRelease(v16);
      v17 = *(_QWORD *)(v9 + 72);
      v18 = *(_QWORD *)(v8 + 72);
      *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
      *(_QWORD *)(v8 + 72) = v17;
      swift_bridgeObjectRelease(v18);
      v19 = *(void **)(v8 + 80);
      *(_QWORD *)(v8 + 80) = *(_QWORD *)(v9 + 80);

      return a1;
    }
    sub_1000D54A4(v8);
  }
  v11 = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(v9 + 80);
  v12 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v12;
  return a1;
}

uint64_t sub_1000D564C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D5658);
}

uint64_t sub_1000D5658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return ((_DWORD)v9 - 1) & ~(((int)v9 - 1) >> 31);
}

uint64_t sub_1000D56D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D56E4);
}

uint64_t sub_1000D56E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 + 1);
  return result;
}

uint64_t sub_1000D575C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "X";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

id sub_1000D57D4(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  id v9;
  void *v10;
  id v11;
  id v12;
  objc_super v14;

  v4[OBJC_IVAR____TtC5FilesP33_11F0A37C9C271DEFF6EB9FAAAADBC30117FilenameTextField_prefersInitallySelectedText] = 1;
  v4[OBJC_IVAR____TtC5FilesP33_11F0A37C9C271DEFF6EB9FAAAADBC30117FilenameTextField_hasEverBeenFirstResponder] = 0;
  v14.receiver = v4;
  v14.super_class = (Class)type metadata accessor for FilenameTextField();
  v9 = objc_msgSendSuper2(&v14, "initWithFrame:", a1, a2, a3, a4);
  v10 = (void *)objc_opt_self(UIFont);
  v11 = v9;
  v12 = objc_msgSend(v10, "preferredFontForTextStyle:", UIFontTextStyleBody);
  objc_msgSend(v11, "setFont:", v12);

  objc_msgSend(v11, "setAdjustsFontForContentSizeCategory:", 1);
  sub_1000D5A38();

  return v11;
}

void sub_1000D5A38()
{
  void *v0;
  id v1;
  id v2;
  NSString v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v1 = (id)DOCFrameworkBundle();
  v2 = objc_msgSend(v0, "traitCollection");
  v3 = String._bridgeToObjectiveC()();
  v4 = (void *)objc_opt_self(UIColor);
  v10 = objc_msgSend(v4, "colorNamed:inBundle:compatibleWithTraitCollection:", v3, v1, v2);

  if (objc_msgSend(v0, "isEnabled"))
  {
    v5 = objc_msgSend(v4, "labelColor");
    objc_msgSend(v0, "setTextColor:", v5);

    objc_msgSend(v0, "setBackgroundColor:", v10);
  }
  else
  {
    v6 = objc_msgSend(v4, "secondaryLabelColor");
    objc_msgSend(v0, "setTextColor:", v6);

    if (v10)
      v7 = objc_msgSend(v10, "colorWithAlphaComponent:", 0.5);
    else
      v7 = 0;
    objc_msgSend(v0, "setBackgroundColor:", v7);

  }
  v8 = objc_msgSend(v0, "layer");
  objc_msgSend(v8, "setCornerRadius:", 6.0);

  v9 = objc_msgSend(v0, "layer");
  objc_msgSend(v9, "setCornerCurve:", kCACornerCurveContinuous);

}

id sub_1000D5C3C()
{
  unsigned __int8 *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  objc_class *v10;
  id v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[5];
  uint64_t v27;
  objc_super v28;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (objc_class *)type metadata accessor for FilenameTextField();
  v28.receiver = v0;
  v28.super_class = v10;
  v11 = objc_msgSendSuper2(&v28, "becomeFirstResponder");
  if ((_DWORD)v11)
  {
    if ((v0[OBJC_IVAR____TtC5FilesP33_11F0A37C9C271DEFF6EB9FAAAADBC30117FilenameTextField_hasEverBeenFirstResponder] & 1) != 0)
    {
      v0[OBJC_IVAR____TtC5FilesP33_11F0A37C9C271DEFF6EB9FAAAADBC30117FilenameTextField_hasEverBeenFirstResponder] = 1;
    }
    else
    {
      v12 = v0[OBJC_IVAR____TtC5FilesP33_11F0A37C9C271DEFF6EB9FAAAADBC30117FilenameTextField_prefersInitallySelectedText];
      v0[OBJC_IVAR____TtC5FilesP33_11F0A37C9C271DEFF6EB9FAAAADBC30117FilenameTextField_hasEverBeenFirstResponder] = 1;
      if (v12 == 1)
      {
        v13 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
        v25 = static OS_dispatch_queue.main.getter(v13);
        v14 = swift_allocObject(&unk_1005C25C0, 24, 7);
        *(_QWORD *)(v14 + 16) = v0;
        aBlock[4] = sub_1000DA094;
        v27 = v14;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_10004A82C;
        aBlock[3] = &unk_1005C25D8;
        v15 = _Block_copy(aBlock);
        v16 = v27;
        v17 = v1;
        v18 = swift_release(v16);
        static DispatchQoS.unspecified.getter(v18);
        aBlock[0] = _swiftEmptyArrayStorage;
        v19 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v20 = sub_10006922C((uint64_t *)&unk_100647540);
        v21 = sub_1000791AC();
        dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v2, v19);
        v22 = (void *)v25;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v15);
        _Block_release(v15);

        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
    }
  }
  return v11;
}

void sub_1000D5ED4(void *a1, double a2, double a3, double a4, double a5, uint64_t a6, const char **a7)
{
  const char *v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  double v23;
  id v24;
  objc_super v25;

  v25.receiver = a1;
  v25.super_class = (Class)type metadata accessor for FilenameTextField();
  v12 = *a7;
  v13 = v25.receiver;
  objc_msgSendSuper2(&v25, v12, a2, a3, a4, a5);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = objc_msgSend(v13, "leftView", v25.receiver, v25.super_class);

  if (v22)
    v23 = 0.0;
  else
    v23 = 10.0;
  v24 = objc_msgSend(v13, "rightView");

  sub_10007EAFC(v15, v17, v19, v21, 10.0, v23);
}

id sub_1000D60FC()
{
  return sub_1000D8CEC((uint64_t (*)(_QWORD))type metadata accessor for FilenameTextField);
}

uint64_t type metadata accessor for FilenameTextField()
{
  return objc_opt_self(_TtC5FilesP33_11F0A37C9C271DEFF6EB9FAAAADBC30117FilenameTextField);
}

id sub_1000D62C4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackView);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(v4, "setAxis:", 0);
    objc_msgSend(v4, "setSpacing:", *(double *)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics));
    objc_msgSend(v4, "setAlignment:", 3);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1000D638C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  id v9;

  v1 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackedThumbnailView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackedThumbnailView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackedThumbnailView);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)DOCStackedThumbnailView), "initWithTopThumbnailSize:", *(double *)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics + 56), *(double *)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics + 64));
    LODWORD(v5) = 1148846080;
    objc_msgSend(v4, "setContentCompressionResistancePriority:forAxis:", 0, v5);
    LODWORD(v6) = 1148846080;
    objc_msgSend(v4, "setContentCompressionResistancePriority:forAxis:", 1, v6);
    LODWORD(v7) = 1148846080;
    objc_msgSend(v4, "setContentHuggingPriority:forAxis:", 0, v7);
    v8 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

char *sub_1000D6468()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  char *v8;
  char *v9;
  void *v10;
  id v11;

  v1 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameButton;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameButton);
  if (v2)
  {
    v3 = *(char **)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameButton);
  }
  else
  {
    v4 = v0;
    v5 = *(void **)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_textStyle);
    v6 = swift_allocObject(&unk_1005C2548, 24, 7);
    swift_unknownObjectWeakInit(v6 + 16);
    v7 = objc_allocWithZone((Class)type metadata accessor for DOCRenameButton());
    v8 = sub_1003CA3F0(v5, (uint64_t)sub_1000DA02C, v6);
    objc_msgSend(v8, "setContentHorizontalAlignment:", 4);
    v9 = &v8[OBJC_IVAR____TtC5Files15DOCRenameButton_delegate];
    *((_QWORD *)v9 + 1) = &off_1005C2518;
    swift_unknownObjectWeakAssign(v9, v4);
    v10 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v8;
    v3 = v8;

    v2 = 0;
  }
  v11 = v2;
  return v3;
}

void sub_1000D655C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char *v29;
  char *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v41[24];

  v2 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v2);
  v4 = &v41[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v41[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v7);
  v11 = &v41[-v10 - 8];
  a1 += 16;
  swift_beginAccess(a1, v41, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1, v12);
  if (!Strong)
    return;
  v15 = (char *)Strong;
  v16 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_presentingViewController, v14);
  if (!v16)
  {

    return;
  }
  v17 = (void *)v16;
  v18 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView_pickerContext;
  v19 = *(_QWORD *)(*(_QWORD *)&v15[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_pickerContext]
                  + OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave);
  if (!v19 || !*(_QWORD *)(v19 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_11;
  }
  v20 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  v20(v4, v19 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_11:
    v31 = sub_10000CB4C((uint64_t)v4, &qword_100643470);
    v32 = *(id *)DOCLog.UI.unsafeMutableAddressor(v31);
    v33 = static os_log_type_t.error.getter(v32);
    v34 = sub_10006922C((uint64_t *)&unk_100644560);
    v35 = swift_allocObject(v34, 72, 7);
    *(_OWORD *)(v35 + 16) = xmmword_1004D9670;
    *(_QWORD *)(v35 + 56) = &type metadata for String;
    *(_QWORD *)(v35 + 64) = sub_10006A638();
    strcpy((char *)(v35 + 32), "filenameButton");
    *(_BYTE *)(v35 + 47) = -18;
    os_log(_:dso:log:type:_:)("%@: Renaming an item that isn't a URL is not allowed", 52, 2, &_mh_execute_header, v32, v33, v35);

    swift_bridgeObjectRelease(v35);
    return;
  }
  v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
  v22 = *(_QWORD *)(*(_QWORD *)&v15[v18] + OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave);
  if (v22
    && *(_QWORD *)(v22 + 16) == 1
    && (v23 = sub_1000D6978(),
        v24 = objc_msgSend(v23, "text"),
        v23,
        v24))
  {
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    v20(v9, (unint64_t)v11, v5);
    v28 = objc_allocWithZone((Class)type metadata accessor for DOCRenameViewController());
    v29 = sub_100286C54((uint64_t)v9, v25, v27, 0);
    v30 = &v29[OBJC_IVAR____TtC5Files23DOCRenameViewController_delegate];
    *((_QWORD *)v30 + 1) = &off_1005C2528;
    swift_unknownObjectWeakAssign(v30, v15);
    sub_100285448(v17, 1);

  }
  else
  {
    v36 = *(id *)DOCLog.UI.unsafeMutableAddressor(v21);
    v37 = static os_log_type_t.error.getter(v36);
    v38 = sub_10006922C((uint64_t *)&unk_100644560);
    v39 = swift_allocObject(v38, 72, 7);
    *(_OWORD *)(v39 + 16) = xmmword_1004D9670;
    *(_QWORD *)(v39 + 56) = &type metadata for String;
    *(_QWORD *)(v39 + 64) = sub_10006A638();
    strcpy((char *)(v39 + 32), "filenameButton");
    *(_BYTE *)(v39 + 47) = -18;
    os_log(_:dso:log:type:_:)("%@: Renaming an item when there is no name is not allowed", 57, 2, &_mh_execute_header, v36, v37, v39);

    swift_bridgeObjectRelease(v39);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

id sub_1000D6978()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameTextField;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameTextField);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameTextField);
  }
  else
  {
    v4 = type metadata accessor for FilenameTextField();
    v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4)), "init");
    objc_msgSend(v5, "setRightViewMode:", 3);
    objc_msgSend(v5, "addTarget:action:forControlEvents:", v0, "textFieldDidEndEditing:", 0x80000);
    objc_msgSend(v5, "addTarget:action:forControlEvents:", v0, "textFieldDidChange:", 0x20000);
    objc_msgSend(v5, "setEnablesReturnKeyAutomatically:", 1);
    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v5;
    v3 = v5;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

uint64_t sub_1000D6A50(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;

  v4 = v2 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_delegate;
  result = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_delegate, a2);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)(v4 + 8);
    v8 = objc_msgSend(a1, "text");
    if (v8)
    {
      v10 = v8;
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v13 = v12;

    }
    else
    {
      v11 = 0;
      v13 = 0;
    }
    ObjectType = swift_getObjectType(v6, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(v2, v11, v13, ObjectType, v7);
    swift_unknownObjectRelease(v6);
    return swift_bridgeObjectRelease(v13);
  }
  return result;
}

double sub_1000D6B74(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;

  sub_1000D6C9C();
  v3 = v1 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_delegate);
  if (Strong)
  {
    v6 = Strong;
    v7 = *(_QWORD *)(v3 + 8);
    v8 = objc_msgSend(a1, "text");
    if (v8)
    {
      v9 = v8;
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v12 = v11;

    }
    else
    {
      v10 = 0;
      v12 = 0;
    }
    ObjectType = swift_getObjectType(v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8))(v1, v10, v12, ObjectType, v7);
    swift_unknownObjectRelease(v6);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v12).n128_u64[0];
  }
  return result;
}

void sub_1000D6C9C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  id v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  id v14;
  id v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  double v29;
  double v30;
  CGFloat v31;
  uint64_t v32;
  uint64_t inited;
  NSString *v34;
  id v35;
  unint64_t v36;
  Class isa;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  _BYTE v44[72];
  CGRect v45;
  CGRect v46;
  CGRect v47;

  v1 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tagButtonDisplaysTitle;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tagButtonDisplaysTitle) == 1)
  {
    v2 = sub_1000D6978();
    v43 = objc_msgSend(v2, "text");

    if (v43)
    {
      v3 = sub_1000D6978();
      v4 = objc_msgSend(v3, "font");

      if (v4)
      {
        v5 = sub_1000D6978();
        objc_msgSend(v5, "bounds");
        v7 = v6;
        v9 = v8;
        v11 = v10;
        v13 = v12;

        v47.origin.x = 0.0;
        v47.origin.y = 0.0;
        v47.size.width = 0.0;
        v47.size.height = 0.0;
        v45.origin.x = v7;
        v45.origin.y = v9;
        v45.size.width = v11;
        v45.size.height = v13;
        if (!CGRectEqualToRect(v45, v47))
        {
          v14 = sub_1000D6978();
          v15 = sub_1000D6978();
          objc_msgSend(v15, "bounds");
          v17 = v16;
          v19 = v18;
          v21 = v20;
          v23 = v22;

          objc_msgSend(v14, "editingRectForBounds:", v17, v19, v21, v23);
          v25 = v24;
          v27 = v26;
          v29 = v28;
          v31 = v30;

          if (v29 > 0.0)
          {
            v32 = sub_10006922C((uint64_t *)&unk_1006424D0);
            inited = swift_initStackObject(v32, v44);
            *(_OWORD *)(inited + 16) = xmmword_1004D9670;
            *(_QWORD *)(inited + 32) = NSFontAttributeName;
            *(_QWORD *)(inited + 64) = sub_10004F2F0(0, (unint64_t *)&unk_10064F630, UIFont_ptr);
            *(_QWORD *)(inited + 40) = v4;
            v34 = NSFontAttributeName;
            v35 = v4;
            v36 = sub_100076434(inited);
            type metadata accessor for Key(0);
            sub_10005A360((unint64_t *)&qword_1006424E0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1004D93A8);
            isa = Dictionary._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v43, "sizeWithAttributes:", isa, swift_bridgeObjectRelease(v36).n128_f64[0]);
            v39 = v38;

            v46.origin.x = v25;
            v46.origin.y = v27;
            v46.size.width = v29;
            v46.size.height = v31;
            if (CGRectGetWidth(v46) <= v39)
            {
              *(_BYTE *)(v0 + v1) = 0;
              v42 = sub_1000D6F84(v40, v41);
              objc_msgSend(v42, "setNeedsUpdateConfiguration");

            }
            else
            {

            }
            return;
          }
        }

      }
    }
  }
}

id sub_1000D6F84(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  double v23;
  void *v24;
  id v25;
  _QWORD aBlock[5];
  uint64_t v28;

  v3 = v2;
  v4 = type metadata accessor for UIButton.Configuration(0, a2);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)aBlock - v9;
  v11 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___tagButton;
  v12 = *(void **)&v2[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___tagButton];
  if (v12)
  {
    v13 = *(id *)&v2[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___tagButton];
  }
  else
  {
    sub_10004F2F0(0, (unint64_t *)&unk_100644310, UIButton_ptr);
    v14 = (void *)objc_opt_self(UIDevice);

    static UIButton.Configuration.borderless()(v15);
    v16 = swift_allocObject(&unk_1005C2548, 24, 7);
    swift_unknownObjectWeakInit(v16 + 16);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    sub_10004F2F0(0, (unint64_t *)&qword_1006424C0, UIAction_ptr);
    v17 = swift_allocObject(&unk_1005C2570, 32, 7);
    *(_QWORD *)(v17 + 16) = sub_1000D9F64;
    *(_QWORD *)(v17 + 24) = v16;
    swift_retain_n(v16, 2);
    v19 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, v18, 0, 0, 0, sub_1000D9F90, v17);
    v20 = (void *)UIButton.init(configuration:primaryAction:)(v8, v19);
    swift_release(v16);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    swift_release(v16);
    v21 = swift_allocObject(&unk_1005C2548, 24, 7);
    swift_unknownObjectWeakInit(v21 + 16);
    aBlock[4] = sub_1000D9F98;
    v28 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000602CC;
    aBlock[3] = &unk_1005C2588;
    v22 = _Block_copy(aBlock);
    swift_release(v28);
    objc_msgSend(v20, "setConfigurationUpdateHandler:", v22);
    _Block_release(v22);
    objc_msgSend(v20, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    LODWORD(v23) = 1148846080;
    objc_msgSend(v20, "setContentHuggingPriority:forAxis:", 0, v23);
    objc_msgSend(v3, "updateTagButtonAccessibility:", v20);
    v24 = *(void **)&v3[v11];
    *(_QWORD *)&v3[v11] = v20;
    v13 = v20;

    v12 = 0;
  }
  v25 = v12;
  return v13;
}

void sub_1000D72B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  void *v5;
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_1000D8A7C(Strong, v4);

  }
}

char *sub_1000D7300(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *result;
  char *v25;
  void *v26;
  id v27;
  uint64_t v28;
  double v29;
  id v30;
  double v31;
  double v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  Class isa;
  id v37;
  id v38;
  id v39;
  id v40;
  double v41;
  double v42;
  id v43;
  id v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  NSString v50;
  id v51;
  id v52;
  id v53;
  double v54;
  double v55;
  char *v56;
  Swift::String v57;
  Swift::String_optional v58;
  Swift::String v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77[24];
  char v78[24];
  Swift::String v79;

  v4 = sub_10006922C(&qword_100642378);
  __chkstk_darwin(v4);
  v74 = (uint64_t)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DOCPickerFilenameView.Metrics(0);
  __chkstk_darwin(v6);
  v73 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UIButton.Configuration.Size(0);
  v75 = *(_QWORD *)(v8 - 8);
  v76 = v8;
  v9 = __chkstk_darwin(v8);
  v72 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v71 = (char *)&v69 - v11;
  v12 = sub_10006922C((uint64_t *)&unk_10064A080);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v69 - v16;
  v19 = type metadata accessor for UIButton.Configuration(0, v18);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a2 + 16, v78, 0, 0);
  result = (char *)swift_unknownObjectWeakLoadStrong(a2 + 16, v23);
  if (!result)
    return result;
  v25 = result;
  UIButton.configuration.getter(result);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19) == 1)
  {

    return (char *)sub_10000CB4C((uint64_t)v17, (uint64_t *)&unk_10064A080);
  }
  v70 = a1;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v17, v19);
  v26 = (void *)objc_opt_self(UIFontMetrics);
  v27 = objc_msgSend(v26, "defaultMetrics");
  v28 = *(int *)(v6 + 44);
  v69 = &v25[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics];
  v29 = *(double *)&v25[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics + v28];
  v30 = objc_msgSend(v25, "traitCollection");
  objc_msgSend(v27, "scaledValueForValue:compatibleWithTraitCollection:", v30, v29);
  v32 = v31;

  v33 = (uint64_t *)&v25[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tags];
  swift_beginAccess(&v25[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tags], v77, 0, 0);
  v34 = *v33;
  if ((unint64_t)*v33 >> 62)
  {
    if (v34 < 0)
      v47 = *v33;
    else
      v47 = v34 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v33);
    v48 = _CocoaArrayWrapper.endIndex.getter(v47);
    swift_bridgeObjectRelease(v34);
    if (!v48)
    {
LABEL_13:
      v49 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithScale:", -1);
      v50 = String._bridgeToObjectiveC()();
      v51 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v50, v49);

      v52 = objc_msgSend(v26, "defaultMetrics", UIButton.Configuration.image.setter(v51).n128_f64[0]);
      v53 = objc_msgSend(v25, "traitCollection");
      objc_msgSend(v52, "scaledValueForValue:compatibleWithTraitCollection:", v53, 2.0);
      v55 = v54;

      UIButton.Configuration.imagePadding.setter(v55);
      v46 = 8.0;
      if ((v25[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tagButtonDisplaysTitle] & 1) == 0)
        goto LABEL_16;
LABEL_14:
      result = (char *)(id)_DocumentManagerBundle(v45);
      if (!result)
      {
        __break(1u);
        return result;
      }
      v56 = result;
      v79._countAndFlagsBits = 0xD000000000000028;
      v79._object = (void *)0x800000010050D950;
      v57._object = (void *)0x800000010050D930;
      v57._countAndFlagsBits = 0xD000000000000011;
      v58.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v58.value._object = (void *)0xEB00000000656C62;
      v59._countAndFlagsBits = 1936154964;
      v59._object = (void *)0xE400000000000000;
      v60 = NSLocalizedString(_:tableName:bundle:value:comment:)(v57, v58, (NSBundle)v56, v59, v79);

      UIButton.Configuration.title.setter(v60._countAndFlagsBits, v60._object);
      v46 = 8.0;
      goto LABEL_17;
    }
  }
  else if (!*(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_13;
  }
  v35 = *v33;
  sub_10004F2F0(0, (unint64_t *)&unk_1006565A0, DOCTag_ptr);
  swift_bridgeObjectRetain(v35);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v35);
  v37 = objc_msgSend((id)objc_opt_self(DOCTagRenderingRequest), "requestForChainedTags:tagDimension:", isa, v32);

  if (!v37)
    goto LABEL_13;
  v38 = v37;
  v39 = objc_msgSend(v26, "defaultMetrics");
  v40 = objc_msgSend(v25, "traitCollection");
  objc_msgSend(v39, "scaledValueForValue:compatibleWithTraitCollection:", v40, 4.0);
  v42 = v41;

  objc_msgSend(v38, "setSpacingType:", 1);
  v43 = objc_msgSend((id)objc_opt_self(DOCTagRenderer), "shared");
  v44 = objc_msgSend(v43, "renderImageWithRequest:", v38);

  UIButton.Configuration.image.setter(v44);
  UIButton.Configuration.imagePadding.setter(v42);

  if (v25[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tagButtonDisplaysTitle] == 1)
    goto LABEL_14;
  v46 = v42 + 8.0;
LABEL_16:
  UIButton.Configuration.title.setter(0, 0);
LABEL_17:
  objc_msgSend(v25, "updateTagButtonAccessibility:", v70);
  v61 = v73;
  sub_1000D9FA0((uint64_t)v69, v73);
  v62 = v61 + *(int *)(v6 + 40);
  v63 = v74;
  sub_1000D9FE4(v62, v74);
  v65 = v75;
  v64 = v76;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v63, 1, v76) == 1)
  {
    sub_10000CB4C(v63, &qword_100642378);
  }
  else
  {
    v66 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v71, v63, v64);
    v67 = v72;
    (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v72, v66, v64);
    UIButton.Configuration.buttonSize.setter(v67);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v64);
  }
  UIButton.Configuration.contentInsets.setter(v46, v46, v46, v46);
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v15, v22, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v15, 0, 1, v19);
  UIButton.configuration.setter(v15);
  v68 = sub_1000D6468();
  objc_msgSend(v68, "setNeedsUpdateConfiguration");

  return (char *)(*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
}

char *sub_1000D7AA8(void *a1, void *a2)
{
  char *v2;
  char *v5;
  char *v6;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  char *v17;
  id v18;
  id v19;
  uint64_t v20;
  NSString *v21;
  char *v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  Class isa;
  id v55;
  id v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  Class v72;
  id v74;
  uint64_t v75;
  id v76;
  objc_super v78;

  v5 = &v2[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_delegate];
  *((_QWORD *)v5 + 1) = 0;
  swift_unknownObjectWeakInit(v5);
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tags] = _swiftEmptyArrayStorage;
  v6 = &v2[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics];
  __asm { FMOV            V0.2D, #12.0 }
  *(_OWORD *)v6 = _Q0;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_QWORD *)v6 + 6) = 0;
  *(int64x2_t *)(v6 + 56) = vdupq_n_s64(0x4049000000000000uLL);
  v6[72] = 1;
  v12 = type metadata accessor for DOCPickerFilenameView.Metrics(0);
  v13 = &v6[*(int *)(v12 + 40)];
  v14 = type metadata accessor for UIButton.Configuration.Size(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *(_QWORD *)&v6[*(int *)(v12 + 44)] = 0x4028000000000000;
  v15 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView_containerView;
  v16 = objc_allocWithZone((Class)UIView);
  v17 = v2;
  v18 = objc_msgSend(v16, "init");
  v19 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  objc_msgSend(v18, "setBackgroundColor:", v19);

  objc_msgSend(v18, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v2[v15] = v18;
  *(_QWORD *)&v17[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackView] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackedThumbnailView] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameButton] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameLabel] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameTextField] = 0;
  v17[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tagButtonDisplaysTitle] = 1;
  *(_QWORD *)&v17[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___tagButton] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_activeConstraints] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v17[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_textStyle] = UIFontTextStyleBody;
  v20 = swift_unknownObjectWeakInit(&v17[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_presentingViewController]);
  *(_QWORD *)&v17[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_pickerContext] = a1;
  swift_unknownObjectWeakAssign(v20, a2);
  v21 = UIFontTextStyleBody;
  v76 = a1;

  v78.receiver = v17;
  v78.super_class = (Class)type metadata accessor for DOCPickerFilenameView(0);
  v22 = (char *)objc_msgSendSuper2(&v78, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v22, "setPreservesSuperviewLayoutMargins:", 1);
  sub_1000D8830();
  v23 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView_containerView;
  objc_msgSend(v22, "addSubview:", *(_QWORD *)&v22[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_containerView]);
  v24 = *(id *)&v22[v23];
  v25 = sub_1000D62C4();
  objc_msgSend(v24, "addSubview:", v25);

  v26 = sub_1000D62C4();
  v27 = sub_1000D638C();
  objc_msgSend(v26, "addArrangedSubview:", v27);

  v28 = *(double *)&v22[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics + 8];
  v29 = *(double *)&v22[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics + 16];
  v30 = *(double *)&v22[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics + 24];
  v31 = *(double *)&v22[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics + 32];
  v74 = (id)objc_opt_self(NSLayoutConstraint);
  v75 = sub_10006922C((uint64_t *)&unk_1006441A0);
  v32 = swift_allocObject(v75, 72, 7);
  *(_OWORD *)(v32 + 16) = xmmword_1004D9710;
  v33 = objc_msgSend(*(id *)&v22[v23], "leadingAnchor");
  v34 = objc_msgSend(v22, "layoutMarginsGuide");
  v35 = objc_msgSend(v34, "leadingAnchor");

  v36 = objc_msgSend(v33, "constraintEqualToAnchor:constant:", v35, v29);
  *(_QWORD *)(v32 + 32) = v36;
  v37 = objc_msgSend(*(id *)&v22[v23], "trailingAnchor");
  v38 = objc_msgSend(v22, "layoutMarginsGuide");
  v39 = objc_msgSend(v38, "trailingAnchor");

  v40 = objc_msgSend(v37, "constraintEqualToAnchor:constant:", v39, -v31);
  *(_QWORD *)(v32 + 40) = v40;
  v41 = objc_msgSend(*(id *)&v22[v23], "topAnchor");
  v42 = objc_msgSend(v22, "topAnchor");
  v43 = objc_msgSend(v41, "constraintEqualToAnchor:constant:", v42, v28);

  *(_QWORD *)(v32 + 48) = v43;
  v44 = sub_1000D62C4();
  v45 = objc_msgSend(v44, "leadingAnchor");

  v46 = objc_msgSend(*(id *)&v22[v23], "leadingAnchor");
  v47 = objc_msgSend(v45, "constraintEqualToAnchor:", v46);

  *(_QWORD *)(v32 + 56) = v47;
  v48 = sub_1000D62C4();
  v49 = objc_msgSend(v48, "trailingAnchor");

  v50 = objc_msgSend(*(id *)&v22[v23], "trailingAnchor");
  v51 = objc_msgSend(v49, "constraintEqualToAnchor:", v50);

  *(_QWORD *)(v32 + 64) = v51;
  specialized Array._endMutation()(v52);
  v53 = v32;
  sub_10004F2F0(0, (unint64_t *)&unk_100642440, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v74, "activateConstraints:", isa, swift_bridgeObjectRelease(v53).n128_f64[0]);

  v55 = sub_1000D62C4();
  v56 = sub_1000D6978();
  objc_msgSend(v55, "addArrangedSubview:", v56);

  v57 = swift_allocObject(v75, 56, 7);
  *(_OWORD *)(v57 + 16) = xmmword_1004D9720;
  v58 = objc_msgSend(v22, "keyboardLayoutGuide");
  v59 = objc_msgSend(v58, "topAnchor");

  v60 = objc_msgSend(*(id *)&v22[v23], "bottomAnchor");
  v61 = objc_msgSend(v59, "constraintEqualToAnchor:constant:", v60, 12.0);

  *(_QWORD *)(v57 + 32) = v61;
  v62 = objc_msgSend(*(id *)&v22[v23], "bottomAnchor");
  v63 = sub_1000D6978();
  v64 = objc_msgSend(v63, "bottomAnchor");

  v65 = objc_msgSend(v62, "constraintEqualToAnchor:constant:", v64, v30);
  *(_QWORD *)(v57 + 40) = v65;
  v66 = sub_1000D6978();
  v67 = objc_msgSend(v66, "topAnchor");

  v68 = objc_msgSend(*(id *)&v22[v23], "topAnchor");
  v69 = objc_msgSend(v67, "constraintEqualToAnchor:", v68);

  *(_QWORD *)(v57 + 48) = v69;
  specialized Array._endMutation()(v70);
  v71 = v57;
  v72 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v74, "activateConstraints:", v72, swift_bridgeObjectRelease(v71).n128_f64[0]);

  sub_1000D8284();
  return v22;
}

double sub_1000D8284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  id v21;
  NSString v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  double result;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  Class isa;
  id v50;

  v1 = v0;
  v2 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView_pickerContext;
  v3 = *(char **)(v0 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_pickerContext);
  v4 = *(_QWORD *)&v3[OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave];
  if (v4)
  {
    if (*(_QWORD *)(v4 + 16) != 1)
      goto LABEL_8;
LABEL_7:
    v6 = *(id *)(v1 + v2);
    DOCPickerContext.firstDisplayName.getter();
    v8 = v7;

    if (v8)
      goto LABEL_15;
    goto LABEL_8;
  }
  v5 = *(_QWORD *)&v3[OBJC_IVAR____TtC5Files16DOCPickerContext_itemsToMove];
  if (v5)
  {
    if ((unint64_t)v5 >> 62)
    {
      if (v5 >= 0)
        v43 = v5 & 0xFFFFFFFFFFFFFF8;
      else
        v43 = *(_QWORD *)&v3[OBJC_IVAR____TtC5Files16DOCPickerContext_itemsToMove];
      v44 = v3;
      swift_bridgeObjectRetain(v5);
      v45 = _CocoaArrayWrapper.endIndex.getter(v43);

      swift_bridgeObjectRelease(v5);
      if (v45 == 1)
        goto LABEL_7;
    }
    else if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) == 1)
    {
      goto LABEL_7;
    }
  }
LABEL_8:
  v9._countAndFlagsBits = 0x6D65744920756C25;
  v9._object = (void *)0xE900000000000073;
  v10._countAndFlagsBits = 0x6F207265626D754ELL;
  v10._object = (void *)0xEF736D6574692066;
  v11 = DOCLocalizedDictionaryString(_:comment:)(v9, v10);
  v12 = sub_10006922C((uint64_t *)&unk_100644560);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1004D9670;
  v14 = *(char **)(v1 + v2);
  v15 = *(_QWORD *)&v14[OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave];
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 16);
  }
  else
  {
    v17 = *(_QWORD *)&v14[OBJC_IVAR____TtC5Files16DOCPickerContext_itemsToMove];
    if (v17)
    {
      if ((unint64_t)v17 >> 62)
      {
        v50 = (id)v2;
        if (v17 >= 0)
          v46 = v17 & 0xFFFFFFFFFFFFFF8;
        else
          v46 = *(_QWORD *)&v14[OBJC_IVAR____TtC5Files16DOCPickerContext_itemsToMove];
        v47 = v14;
        swift_bridgeObjectRetain(v17);
        v48 = _CocoaArrayWrapper.endIndex.getter(v46);

        swift_bridgeObjectRelease(v17);
        v16 = v48;
        v2 = (uint64_t)v50;
      }
      else
      {
        v16 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
    }
    else
    {
      v16 = 0;
    }
  }
  *(_QWORD *)(v13 + 56) = &type metadata for Int;
  *(_QWORD *)(v13 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v13 + 32) = v16;
  static String.localizedStringWithFormat(_:_:)(v11._countAndFlagsBits, v11._object, v13);
  v8 = v18;
  swift_bridgeObjectRelease(v11._object);
  swift_bridgeObjectRelease(v13);
LABEL_15:
  v19 = *(_QWORD *)(*(_QWORD *)(v1 + v2) + OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave);
  if (v19)
    v20 = *(_QWORD *)(v19 + 16) == 1;
  else
    v20 = 0;
  v21 = sub_1000D6978();
  v22 = String._bridgeToObjectiveC()();
  objc_msgSend(v21, "setText:", v22, swift_bridgeObjectRelease(v8).n128_f64[0]);

  v23 = sub_1000D6978();
  objc_msgSend(v23, "setEnabled:", v20);

  v24 = sub_1000D62C4();
  objc_msgSend(v24, "setSpacing:", *(double *)(v1 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics));

  if (*(_QWORD *)(*(_QWORD *)(v1 + v2) + OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave))
  {
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics + 72) == 1)
    {
      v25 = sub_1000D6978();
      v27 = sub_1000D6F84((uint64_t)v25, v26);
      objc_msgSend(v25, "setRightView:", v27);
    }
    else
    {
      v25 = sub_1000D62C4();
      v27 = sub_1000D6F84((uint64_t)v25, v31);
      objc_msgSend(v25, "addArrangedSubview:", v27);
    }

  }
  else
  {
    v28 = sub_1000D62C4();
    v30 = sub_1000D6F84((uint64_t)v28, v29);
    objc_msgSend(v28, "removeArrangedSubview:", v30);

    v27 = sub_1000D6978();
    objc_msgSend(v27, "setRightView:", 0);
  }

  v33 = *(_QWORD *)(v1 + v2);
  v34 = *(_QWORD *)(v33 + OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave);
  if (v34 && *(_QWORD *)(v34 + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v33 + OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave));
    v35 = sub_1000D638C();
    type metadata accessor for URL(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v35, "setURLs:", isa, swift_bridgeObjectRelease(v34).n128_f64[0]);
LABEL_32:

    return result;
  }
  v36 = *(_QWORD *)(v33 + OBJC_IVAR____TtC5Files16DOCPickerContext_itemsToMove);
  if (v36)
  {
    v37 = v36 & 0xFFFFFFFFFFFFFF8;
    if ((unint64_t)v36 >> 62)
    {
      if (v36 < 0)
        v37 = *(_QWORD *)(v33 + OBJC_IVAR____TtC5Files16DOCPickerContext_itemsToMove);
      swift_bridgeObjectRetain_n(v36, 2);
      v41 = _CocoaArrayWrapper.endIndex.getter(v37);
      swift_bridgeObjectRelease(v36);
      if (v41 >= 1)
      {
        v35 = sub_1000D638C();
        swift_bridgeObjectRetain(v36);
        v42 = sub_10006922C((uint64_t *)&unk_1006424B0);
        v40 = _bridgeCocoaArray<A>(_:)(v37, v42);
        swift_bridgeObjectRelease(v36);
        goto LABEL_31;
      }
    }
    else
    {
      v38 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v36);
      if (v38)
      {
        v35 = sub_1000D638C();
        v39 = swift_bridgeObjectRetain(v36);
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v39);
        v40 = v36;
LABEL_31:
        swift_bridgeObjectRelease(v36);
        sub_10006922C((uint64_t *)&unk_1006424B0);
        isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v35, "setNodes:", isa, swift_bridgeObjectRelease(v40).n128_f64[0]);
        goto LABEL_32;
      }
    }
    *(_QWORD *)&result = swift_bridgeObjectRelease(v36).n128_u64[0];
  }
  return result;
}

void sub_1000D8830()
{
  char *v0;
  id v1;
  id v2;
  id v3;
  Class isa;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  double v9;
  double v10;
  Class v11;
  uint64_t v12;
  uint64_t v13;
  Class v14;
  Class v15;

  v1 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  objc_msgSend(v0, "setBackgroundColor:", v1);

  v2 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", 5);
  v3 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v2);

  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "addSubview:", v3);
  isa = (Class)(id)DOCConstraintsToResizeWithSuperview(v3, NSDirectionalEdgeInsetsZero.top, NSDirectionalEdgeInsetsZero.leading, NSDirectionalEdgeInsetsZero.bottom, NSDirectionalEdgeInsetsZero.trailing);
  if (!isa)
  {
    v5 = sub_10004F2F0(0, (unint64_t *)&unk_100642440, NSLayoutConstraint_ptr);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v5);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v6);
  }
  v7 = (void *)objc_opt_self(NSLayoutConstraint);
  objc_msgSend(v7, "activateConstraints:", isa);

  v8 = objc_msgSend(objc_allocWithZone((Class)DOCSeparatorView), "init");
  v9 = *(double *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics + 40];
  v10 = *(double *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics + 48];
  objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "addSubview:", v8);
  v11 = (Class)(id)DOCConstraintsToResizeWithSuperview(v8, 0.0, v9, DOCSkipConstraint, v10);
  if (!v11)
  {
    v12 = sub_10004F2F0(0, (unint64_t *)&unk_100642440, NSLayoutConstraint_ptr);
    v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v12);
    v14 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v13);
    v11 = v14;
  }
  v15 = v11;
  objc_msgSend(v7, "activateConstraints:");

}

void sub_1000D8A7C(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t Strong;
  void *v5;
  id v6;
  char *v7;
  uint64_t v8;
  Class isa;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  char v33[24];

  v3 = v2;
  Strong = swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_presentingViewController], a2);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = objc_msgSend(objc_allocWithZone((Class)DOCTagEditorViewController), "init");
    objc_msgSend(v6, "setDelegate:", v2);
    v7 = &v2[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tags];
    swift_beginAccess(&v3[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tags], v33, 0, 0);
    v8 = *(_QWORD *)v7;
    sub_10004F2F0(0, (unint64_t *)&unk_1006565A0, DOCTag_ptr);
    swift_bridgeObjectRetain(v8);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v6, "setSelectedTags:", isa, swift_bridgeObjectRelease(v8).n128_f64[0]);

    v10 = objc_msgSend(objc_allocWithZone((Class)UINavigationController), "initWithRootViewController:", v6);
    UIViewController.doc_configureForPresentingLargeContent(withPreferredStyle:)(UIModalPresentationPopover);
    v11 = objc_msgSend(v10, "popoverPresentationController");
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v11, "setSourceView:", v3);

    }
    v13 = objc_msgSend(v10, "popoverPresentationController");
    if (v13)
    {
      v14 = v13;
      v15 = (void *)sub_1000D6F84();
      objc_msgSend(v15, "bounds");
      v17 = v16;
      v19 = v18;
      v21 = v20;
      v23 = v22;

      v24 = (void *)sub_1000D6F84();
      objc_msgSend(v3, "convertRect:fromCoordinateSpace:", v24, v17, v19, v21, v23);
      v26 = v25;
      v28 = v27;
      v30 = v29;
      v32 = v31;

      objc_msgSend(v14, "setSourceRect:", v26, v28, v30, v32);
    }
    objc_msgSend(v5, "presentViewController:animated:completion:", v10, 1, 0);

  }
}

id sub_1000D8CE0()
{
  return sub_1000D8CEC(type metadata accessor for DOCPickerFilenameView);
}

id sub_1000D8CEC(uint64_t (*a1)(_QWORD))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1000D8E1C()
{
  return type metadata accessor for DOCPickerFilenameView(0);
}

uint64_t type metadata accessor for DOCPickerFilenameView(uint64_t a1)
{
  return sub_10006BDA4(a1, (uint64_t *)&unk_100642308, (uint64_t)&nominal type descriptor for DOCPickerFilenameView);
}

uint64_t sub_1000D8E38(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[15];

  v4[0] = &unk_1004D9798;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for DOCPickerFilenameView.Metrics(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = &unk_1004D97B0;
    v4[6] = &unk_1004D97B0;
    v4[7] = &unk_1004D97B0;
    v4[8] = &unk_1004D97B0;
    v4[9] = &unk_1004D97B0;
    v4[10] = &unk_1004D97C8;
    v4[11] = &unk_1004D97B0;
    v4[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[13] = &unk_1004D97E0;
    v4[14] = &unk_1004D97F8;
    return swift_updateClassMetadata2(a1, 256, 15, v4, a1 + 80);
  }
  return result;
}

uint64_t type metadata accessor for DOCPickerFilenameView.Metrics(uint64_t a1)
{
  return sub_10006BDA4(a1, (uint64_t *)&unk_1006423D8, (uint64_t)&nominal type descriptor for DOCPickerFilenameView.Metrics);
}

_QWORD *sub_1000D9128(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    v7 = *(_OWORD *)(a2 + 7);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    v8 = *(int *)(a3 + 40);
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    *(_OWORD *)(a1 + 56) = v7;
    v11 = type metadata accessor for UIButton.Configuration.Size(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_10006922C(&qword_100642378);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(_QWORD *)((char *)v4 + *(int *)(a3 + 44)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 44));
  }
  return v4;
}

uint64_t sub_1000D9254(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1 + *(int *)(a2 + 40);
  v3 = type metadata accessor for UIButton.Configuration.Size(0);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return result;
}

uint64_t sub_1000D92C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v7 = *(int *)(a3 + 40);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 56) = v6;
  v10 = type metadata accessor for UIButton.Configuration.Size(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_10006922C(&qword_100642378);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 44)) = *(_QWORD *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_1000D93C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v6 = *(int *)(a3 + 40);
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for UIButton.Configuration.Size(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = sub_10006922C(&qword_100642378);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(_QWORD *)(a1 + *(int *)(a3 + 44)) = *(_QWORD *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_1000D952C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v7 = *(int *)(a3 + 40);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 56) = v6;
  v10 = type metadata accessor for UIButton.Configuration.Size(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_10006922C(&qword_100642378);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 44)) = *(_QWORD *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_1000D962C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v9 = *(int *)(a3 + 40);
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  *(_QWORD *)(a1 + 64) = v8;
  v12 = type metadata accessor for UIButton.Configuration.Size(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = sub_10006922C(&qword_100642378);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  *(_QWORD *)(a1 + *(int *)(a3 + 44)) = *(_QWORD *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_1000D9768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D9774);
}

uint64_t sub_1000D9774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 72);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = sub_10006922C(&qword_100642378);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v10);
  }
}

uint64_t sub_1000D97F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D9800);
}

uint64_t sub_1000D9800(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 72) = a2 + 1;
  }
  else
  {
    v7 = sub_10006922C(&qword_100642378);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

void sub_1000D9874(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = " ";
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = &unk_1004D9830;
  v4[5] = &unk_1004D97C8;
  sub_1000D990C(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
  }
}

void sub_1000D990C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1006423E8)
  {
    v2 = type metadata accessor for UIButton.Configuration.Size(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1006423E8);
  }
}

void sub_1000D9960()
{
  _BYTE *v0;
  char *v1;
  char *v2;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  NSString *v14;

  v1 = &v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_delegate];
  *((_QWORD *)v1 + 1) = 0;
  swift_unknownObjectWeakInit(v1);
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tags] = _swiftEmptyArrayStorage;
  v2 = &v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_metrics];
  __asm { FMOV            V0.2D, #12.0 }
  *(_OWORD *)v2 = _Q0;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_QWORD *)v2 + 6) = 0;
  *(int64x2_t *)(v2 + 56) = vdupq_n_s64(0x4049000000000000uLL);
  v2[72] = 1;
  v8 = type metadata accessor for DOCPickerFilenameView.Metrics(0);
  v9 = &v2[*(int *)(v8 + 40)];
  v10 = type metadata accessor for UIButton.Configuration.Size(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_QWORD *)&v2[*(int *)(v8 + 44)] = 0x4028000000000000;
  v11 = OBJC_IVAR____TtC5Files21DOCPickerFilenameView_containerView;
  v12 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v13 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  objc_msgSend(v12, "setBackgroundColor:", v13);

  objc_msgSend(v12, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v0[v11] = v12;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___stackedThumbnailView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameButton] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameLabel] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___filenameTextField] = 0;
  v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_tagButtonDisplaysTitle] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView____lazy_storage___tagButton] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_activeConstraints] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_textStyle] = UIFontTextStyleBody;
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC5Files21DOCPickerFilenameView_presentingViewController]);
  v14 = UIFontTextStyleBody;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x800000010050DA60, "Files/DOCPickerFilenameView.swift", 33, 2, 377, 0);
  __break(1u);
}

uint64_t sub_1000D9B74(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t i;
  unint64_t v15;
  id v16;
  void *v17;
  char v18;
  uint64_t v19;
  id v20;
  id v21;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *a1;
  if ((unint64_t)*a1 >> 62)
    goto LABEL_65;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*a1);
  if (v5)
  {
LABEL_3:
    sub_10004F2F0(0, (unint64_t *)&qword_100642430, NSObject_ptr);
    v6 = 0;
    while (1)
    {
      v7 = (v4 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4)
         : *(id *)(v4 + 8 * v6 + 32);
      v8 = v7;
      v9 = static NSObject.== infix(_:_:)(v7, a2);

      if ((v9 & 1) != 0)
        break;
      v10 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        if ((v4 & 0x8000000000000000) != 0)
          v35 = v4;
        else
          v35 = v4 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v4);
        v5 = _CocoaArrayWrapper.endIndex.getter(v35);
        if (!v5)
          goto LABEL_10;
        goto LABEL_3;
      }
      ++v6;
      if (v10 == v5)
        goto LABEL_10;
    }
    swift_bridgeObjectRelease(v4);
    v13 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
    }
    else
    {
      v9 = *a1;
      if (!((unint64_t)*a1 >> 62))
      {
        if (v13 != *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_16:
          for (i = v6 + 5; ; ++i)
          {
            v4 = i - 4;
            v15 = *a1;
            if ((*a1 & 0xC000000000000001) != 0)
            {
              v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v15);
            }
            else
            {
              if ((v4 & 0x8000000000000000) != 0)
                goto LABEL_55;
              if (v4 >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_56;
              v16 = *(id *)(v15 + 8 * i);
            }
            v17 = v16;
            v18 = static NSObject.== infix(_:_:)(v16, a2);

            if ((v18 & 1) != 0)
              goto LABEL_42;
            if (v4 != v6)
              break;
LABEL_41:
            if (__OFADD__(v6++, 1))
              goto LABEL_58;
LABEL_42:
            v31 = i - 3;
            if (__OFADD__(v4, 1))
              goto LABEL_57;
            v32 = *a1;
            if ((unint64_t)*a1 >> 62)
            {
              if (v32 < 0)
                v34 = *a1;
              else
                v34 = v32 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(*a1);
              v33 = _CocoaArrayWrapper.endIndex.getter(v34);
              swift_bridgeObjectRelease(v32);
            }
            else
            {
              v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            if (v31 == v33)
              return v6;
          }
          v19 = *a1;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, *a1);
            v19 = *a1;
            if ((*a1 & 0xC000000000000001) == 0)
            {
LABEL_27:
              if ((v4 & 0x8000000000000000) != 0)
                goto LABEL_61;
              if (v4 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_62;
              v21 = *(id *)(v19 + 8 * i);
              goto LABEL_30;
            }
          }
          else
          {
            if ((v6 & 0x8000000000000000) != 0)
              goto LABEL_59;
            if (v6 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_60;
            v20 = *(id *)(v19 + 8 * v6 + 32);
            if ((v19 & 0xC000000000000001) == 0)
              goto LABEL_27;
          }
          v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v19);
          v19 = *a1;
LABEL_30:
          isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v19);
          *a1 = v19;
          if (!isUniquelyReferenced_nonNull_bridgeObject || v19 < 0 || (v19 & 0x4000000000000000) != 0)
          {
            v19 = sub_1000818A0(v19);
            *a1 = v19;
          }
          v23 = *(void **)((v19 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20);
          *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v21;

          specialized Array._endMutation()(v24);
          v25 = *a1;
          v26 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
          *a1 = v25;
          if (!v26 || v25 < 0 || (v25 & 0x4000000000000000) != 0)
          {
            v25 = sub_1000818A0(v25);
            *a1 = v25;
          }
          if ((v4 & 0x8000000000000000) != 0)
            goto LABEL_63;
          v27 = v25 & 0xFFFFFFFFFFFFFF8;
          if (v4 >= *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_64;
          v28 = *(void **)(v27 + 8 * i);
          *(_QWORD *)(v27 + 8 * i) = v20;

          specialized Array._endMutation()(v29);
          goto LABEL_41;
        }
        return v6;
      }
    }
    if (v9 < 0)
      v38 = v9;
    else
      v38 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v39 = _CocoaArrayWrapper.endIndex.getter(v38);
    swift_bridgeObjectRelease(v9);
    if (v13 != v39)
      goto LABEL_16;
    return v6;
  }
LABEL_10:
  swift_bridgeObjectRelease(v4);
  v11 = *a1;
  if (!((unint64_t)*a1 >> 62))
    return *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v11 < 0)
    v36 = *a1;
  else
    v36 = v11 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*a1);
  v37 = _CocoaArrayWrapper.endIndex.getter(v36);
  swift_bridgeObjectRelease(v11);
  return v37;
}

uint64_t sub_1000D9F40()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000D9F64()
{
  uint64_t v0;

  sub_1000D72B0(v0);
}

uint64_t sub_1000D9F6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D9F90(uint64_t a1)
{
  uint64_t v1;

  return sub_1001E9908(a1, *(uint64_t (**)(void))(v1 + 16));
}

char *sub_1000D9F98(uint64_t a1)
{
  uint64_t v1;

  return sub_1000D7300(a1, v1);
}

uint64_t sub_1000D9FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DOCPickerFilenameView.Metrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D9FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C(&qword_100642378);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000DA02C()
{
  uint64_t v0;

  sub_1000D655C(v0);
}

uint64_t sub_1000DA034(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DOCPickerFilenameView.Metrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000DA070()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000DA094()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "selectAll:", 0);
}

id sub_1000DA0B0()
{
  NSString v0;
  id v1;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v0);

  return v1;
}

BOOL sub_1000DA1DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000DA1F0()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000DA234()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000DA25C(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t sub_1000DA29C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000DB5E0(*a1);
  *a2 = result;
  return result;
}

void sub_1000DA2C4(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_1000DA2D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files13DOCSuggestion_title);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files13DOCSuggestion_title + 8));
  return v1;
}

uint64_t sub_1000DA308(uint64_t a1, uint64_t a2)
{
  return sub_1000DA330(a1, a2, &OBJC_IVAR____TtC5Files13DOCSuggestion_customImageGenerator, &OBJC_IVAR____TtC5Files13DOCSuggestion_customImage);
}

uint64_t sub_1000DA31C(uint64_t a1, uint64_t a2)
{
  return sub_1000DA330(a1, a2, &OBJC_IVAR____TtC5Files13DOCSuggestion_customAtomImageGenerator, &OBJC_IVAR____TtC5Files13DOCSuggestion_customAtomImage);
}

uint64_t sub_1000DA330(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  id *v9;
  id v10;
  uint64_t v11;
  _BYTE v13[24];

  v6 = v4 + *a3;
  v7 = *(uint64_t (**)(void))v6;
  v8 = *(_QWORD *)(v6 + 8);
  v9 = (id *)(v4 + *a4);
  swift_beginAccess(v9, v13, 33, 0);
  if (v7)
  {
    v10 = *v9;
    swift_retain_n(v8, 2);

    v11 = v7();
    sub_100087534((uint64_t)v7, v8);
    *v9 = (id)v11;
    sub_100087534((uint64_t)v7, v8);
  }
  else if (a1)
  {

    *v9 = 0;
  }
  return swift_endAccess(v13);
}

void *sub_1000DA3E8()
{
  return sub_1000DA400(&OBJC_IVAR____TtC5Files13DOCSuggestion_customImage);
}

void *sub_1000DA3F4()
{
  return sub_1000DA400(&OBJC_IVAR____TtC5Files13DOCSuggestion_customAtomImage);
}

void *sub_1000DA400(_QWORD *a1)
{
  uint64_t v1;
  void **v2;
  void *v3;
  id v4;
  _BYTE v6[24];

  v2 = (void **)(v1 + *a1);
  swift_beginAccess(v2, v6, 0, 0);
  v3 = *v2;
  v4 = v3;
  return v3;
}

id sub_1000DA448()
{
  char *v0;
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  objc_class *v8;
  objc_super v10;

  v1 = &v0[OBJC_IVAR____TtC5Files13DOCSuggestion_matchingInputRange];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v1[16] = 1;
  v2 = &v0[OBJC_IVAR____TtC5Files13DOCSuggestion_title];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0xE000000000000000;
  v3 = &v0[OBJC_IVAR____TtC5Files13DOCSuggestion_representedObject];
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  v4 = &v0[OBJC_IVAR____TtC5Files13DOCSuggestion_atomTitle];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0xE000000000000000;
  v5 = &v0[OBJC_IVAR____TtC5Files13DOCSuggestion_textReplacement];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files13DOCSuggestion_customImage] = 0;
  v6 = &v0[OBJC_IVAR____TtC5Files13DOCSuggestion_customImageGenerator];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files13DOCSuggestion_customAtomImage] = 0;
  v7 = &v0[OBJC_IVAR____TtC5Files13DOCSuggestion_customAtomImageGenerator];
  v8 = (objc_class *)type metadata accessor for DOCSuggestion();
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  v10.receiver = v0;
  v10.super_class = v8;
  return objc_msgSendSuper2(&v10, "init");
}

id sub_1000DA538()
{
  return sub_1000DB3A0(type metadata accessor for DOCSuggestion);
}

uint64_t type metadata accessor for DOCSuggestion()
{
  return objc_opt_self(_TtC5Files13DOCSuggestion);
}

id sub_1000DA610()
{
  _QWORD *v0;
  char *v1;
  int v2;
  void *v3;
  char **v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  unint64_t v9;
  id v10;
  NSString v11;
  Class isa;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSString *v18;
  id v19;
  unint64_t v20;
  Class v21;
  void *v22;
  id v23;
  NSString *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  _BYTE v29[72];
  _BYTE v30[80];

  v1 = (char *)v0 + OBJC_IVAR____TtC5Files13DOCSuggestion_matchingInputRange;
  v2 = *((unsigned __int8 *)v0 + OBJC_IVAR____TtC5Files13DOCSuggestion_matchingInputRange + 16);
  v3 = (void *)objc_opt_self(UIColor);
  v4 = &selRef_labelColor;
  if (!v2)
    v4 = &selRef_secondaryLabelColor;
  v5 = objc_msgSend(v3, *v4);
  (*(void (**)(void))((swift_isaMask & *v0) + 0xB0))();
  v7 = v6;
  v26 = sub_10006922C((uint64_t *)&unk_1006424D0);
  inited = swift_initStackObject(v26, v30);
  *(_OWORD *)(inited + 16) = xmmword_1004D9670;
  *(_QWORD *)(inited + 32) = NSForegroundColorAttributeName;
  v27 = sub_10004F2F0(0, (unint64_t *)&qword_100644600, UIColor_ptr);
  *(_QWORD *)(inited + 64) = v27;
  *(_QWORD *)(inited + 40) = v5;
  v25 = NSForegroundColorAttributeName;
  v28 = v5;
  v9 = sub_100076434(inited);
  v10 = objc_allocWithZone((Class)NSMutableAttributedString);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  type metadata accessor for Key(0);
  sub_100062658((unint64_t *)&qword_1006424E0, 255, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1004D93A8);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v13 = objc_msgSend(v10, "initWithString:attributes:", v11, isa, swift_bridgeObjectRelease(v9).n128_f64[0]);

  if ((v1[16] & 1) == 0)
  {
    v14 = *(_QWORD *)v1;
    v15 = *((_QWORD *)v1 + 1);
    v16 = swift_initStackObject(v26, v29);
    *(_OWORD *)(v16 + 16) = xmmword_1004D9670;
    *(_QWORD *)(v16 + 32) = v25;
    v17 = (void *)objc_opt_self(UIColor);
    v18 = v25;
    v19 = objc_msgSend(v17, "labelColor");
    *(_QWORD *)(v16 + 64) = v27;
    *(_QWORD *)(v16 + 40) = v19;
    v20 = sub_100076434(v16);
    v21 = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v13, "setAttributes:range:", v21, v14, v15, swift_bridgeObjectRelease(v20).n128_f64[0]);

  }
  v22 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x170))();
  v23 = objc_msgSend(objc_allocWithZone((Class)UISearchSuggestionItem), "initWithLocalizedAttributedSuggestion:localizedDescription:iconImage:", v13, 0, v22);
  objc_msgSend(v23, "setRepresentedObject:", v0);

  return v23;
}

void sub_1000DA8F8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = v0;
  v2 = sub_10008B9BC();
  StringProtocol.localizedLowercase.getter(&type metadata for String, v2);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files19DOCSearchSuggestion_inputString);
  v15 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files19DOCSearchSuggestion_inputString + 8);
  StringProtocol.localizedLowercase.getter(&type metadata for String, v2);
  v7 = v6;
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v5, "rangeOfString:options:", v8, 128, swift_bridgeObjectRelease(v7).n128_f64[0], v14, v15);
  v11 = v10;

  v12 = NSNotFound.getter();
  if (v9 != (id)v12)
  {
    v13 = v1 + OBJC_IVAR____TtC5Files13DOCSuggestion_matchingInputRange;
    *(_QWORD *)v13 = v9;
    *(_QWORD *)(v13 + 8) = v11;
    *(_BYTE *)(v13 + 16) = 0;
  }
}

id sub_1000DA9F8()
{
  return sub_1000DAA10(&OBJC_IVAR____TtC5Files13DOCSuggestion_customImage);
}

id sub_1000DAA04()
{
  return sub_1000DAA10(&OBJC_IVAR____TtC5Files13DOCSuggestion_customAtomImage);
}

id sub_1000DAA10(_QWORD *a1)
{
  uint64_t v1;
  void **v2;
  void *v3;
  id v4;
  id v5;
  _BYTE v7[24];

  v2 = (void **)(v1 + *a1);
  swift_beginAccess(v2, v7, 0, 0);
  v3 = *v2;
  v4 = v3;
  if (!v3)
    v4 = sub_1000DA0B0();
  v5 = v3;
  return v4;
}

void sub_1000DAA7C()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000021, 0x800000010050DD70, "Files/DOCSuggesterManager.swift", 31, 2, 201, 0);
  __break(1u);
}

uint64_t sub_1000DAB00()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files19DOCSearchSuggestion_inputString + 8));
}

id sub_1000DAB14()
{
  return sub_1000DB3A0(type metadata accessor for DOCSearchSuggestion);
}

uint64_t type metadata accessor for DOCSearchSuggestion()
{
  return objc_opt_self(_TtC5Files19DOCSearchSuggestion);
}

id sub_1000DAB80()
{
  return sub_1000DB3A0(type metadata accessor for DOCSuggester);
}

uint64_t type metadata accessor for DOCSuggester()
{
  return objc_opt_self(_TtC5Files12DOCSuggester);
}

id sub_1000DABE4()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)DOCDateParser), "init");
  qword_1006424F8 = (uint64_t)result;
  return result;
}

uint64_t sub_1000DAC14(void *a1)
{
  uint64_t v1;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  objc_class *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  id v31;
  char *v32;
  char *v33;
  id v34;
  char *v35;
  char *v36;
  id v37;
  id v38;
  id v40;
  id v41;
  objc_super v42;
  objc_super v43;
  objc_super v44;
  objc_super v45;
  objc_super v46;
  objc_super v47;
  objc_super v48;

  v3 = (char *)objc_allocWithZone((Class)type metadata accessor for DOCTagSuggester());
  v4 = &v3[OBJC_IVAR____TtC5Files15DOCTagSuggester_dataSource];
  *((_QWORD *)v4 + 1) = 0;
  v5 = swift_unknownObjectWeakInit(v4);
  *(_QWORD *)(v5 + 8) = &off_1005C26A0;
  swift_unknownObjectWeakAssign(v5, v1);
  v6 = &v3[OBJC_IVAR____TtC5Files12DOCSuggester_delegate];
  *((_QWORD *)v6 + 1) = 0;
  swift_unknownObjectWeakInit(v6);
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Files12DOCSuggester_configuration] = a1;
  v7 = (objc_class *)type metadata accessor for DOCSuggester();
  v48.receiver = v3;
  v48.super_class = v7;
  v8 = a1;
  v9 = objc_msgSendSuper2(&v48, "init");
  v10 = qword_100640CF0;
  v11 = v8;
  if (v10 != -1)
    swift_once(&qword_100640CF0, sub_1000DABE4);
  v12 = qword_1006424F8;
  v13 = (char *)objc_allocWithZone((Class)type metadata accessor for DOCDateSuggester());
  v14 = swift_unknownObjectWeakInit(&v13[OBJC_IVAR____TtC5Files16DOCDateSuggester_dateParser]);
  swift_unknownObjectWeakAssign(v14, v12);
  v15 = &v13[OBJC_IVAR____TtC5Files12DOCSuggester_delegate];
  *((_QWORD *)v15 + 1) = 0;
  swift_unknownObjectWeakInit(v15);
  *(_QWORD *)&v13[OBJC_IVAR____TtC5Files12DOCSuggester_configuration] = v11;
  v47.receiver = v13;
  v47.super_class = v7;
  v16 = objc_msgSendSuper2(&v47, "init");
  v17 = sub_10006922C((uint64_t *)&unk_1006441A0);
  v18 = swift_allocObject(v17, 88, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1004D9870;
  *(_QWORD *)(v18 + 32) = v9;
  *(_QWORD *)(v18 + 40) = v16;
  v19 = (char *)objc_allocWithZone((Class)type metadata accessor for DOCFileTypeSuggester());
  v20 = &v19[OBJC_IVAR____TtC5Files12DOCSuggester_delegate];
  *((_QWORD *)v20 + 1) = 0;
  swift_unknownObjectWeakInit(v20);
  *(_QWORD *)&v19[OBJC_IVAR____TtC5Files12DOCSuggester_configuration] = v11;
  v46.receiver = v19;
  v46.super_class = v7;
  v21 = v11;
  v41 = v9;
  v40 = v16;
  *(_QWORD *)(v18 + 48) = objc_msgSendSuper2(&v46, "init");
  v22 = objc_allocWithZone((Class)type metadata accessor for DOCNaturalLanguageFileTypeSuggester());
  v23 = OBJC_IVAR____TtC5Files35DOCNaturalLanguageFileTypeSuggester_naturalLanguageFileTypeDescriptors;
  v24 = qword_1006410B8;
  v25 = v21;
  v26 = (char *)v22;
  if (v24 != -1)
    swift_once(&qword_1006410B8, sub_10039BD64);
  v27 = qword_100651B90;
  *(_QWORD *)&v26[v23] = qword_100651B90;
  swift_bridgeObjectRetain(v27);

  v28 = &v26[OBJC_IVAR____TtC5Files12DOCSuggester_delegate];
  *((_QWORD *)v28 + 1) = 0;
  swift_unknownObjectWeakInit(v28);
  *(_QWORD *)&v26[OBJC_IVAR____TtC5Files12DOCSuggester_configuration] = v25;
  v45.receiver = v26;
  v45.super_class = v7;
  *(_QWORD *)(v18 + 56) = objc_msgSendSuper2(&v45, "init");
  v29 = (char *)objc_allocWithZone((Class)type metadata accessor for DOCPersonSuggester());
  *(_QWORD *)&v29[OBJC_IVAR____TtC5Files18DOCPersonSuggester_currentQuery] = 0;
  v30 = &v29[OBJC_IVAR____TtC5Files12DOCSuggester_delegate];
  *((_QWORD *)v30 + 1) = 0;
  swift_unknownObjectWeakInit(v30);
  *(_QWORD *)&v29[OBJC_IVAR____TtC5Files12DOCSuggester_configuration] = v25;
  v44.receiver = v29;
  v44.super_class = v7;
  v31 = v25;
  *(_QWORD *)(v18 + 64) = objc_msgSendSuper2(&v44, "init");
  v32 = (char *)objc_allocWithZone((Class)type metadata accessor for DOCIsSharedSuggester());
  v33 = &v32[OBJC_IVAR____TtC5Files12DOCSuggester_delegate];
  *((_QWORD *)v33 + 1) = 0;
  swift_unknownObjectWeakInit(v33);
  *(_QWORD *)&v32[OBJC_IVAR____TtC5Files12DOCSuggester_configuration] = v31;
  v43.receiver = v32;
  v43.super_class = v7;
  v34 = v31;
  *(_QWORD *)(v18 + 72) = objc_msgSendSuper2(&v43, "init");
  v35 = (char *)objc_allocWithZone((Class)type metadata accessor for DOCFilenameSuggester());
  v36 = &v35[OBJC_IVAR____TtC5Files12DOCSuggester_delegate];
  *((_QWORD *)v36 + 1) = 0;
  swift_unknownObjectWeakInit(v36);
  *(_QWORD *)&v35[OBJC_IVAR____TtC5Files12DOCSuggester_configuration] = v34;
  v42.receiver = v35;
  v42.super_class = v7;
  v37 = v34;
  v38 = objc_msgSendSuper2(&v42, "init");
  *(_QWORD *)(v18 + 80) = v38;
  specialized Array._endMutation()(v38);

  return v18;
}

void sub_1000DAFA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000DB5F0(a1, a2, a4);
}

void sub_1000DAFB0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  char *v21;
  _QWORD v22[5];
  _QWORD *v23;

  if (*(_QWORD *)&v5[OBJC_IVAR____TtC5Files19DOCSuggesterManager_searchId] == a3)
  {
    v11 = *(id *)DOCLog.UI.unsafeMutableAddressor(a1);
    v12 = static os_log_type_t.debug.getter(v11);
    v13 = sub_10006922C((uint64_t *)&unk_100644560);
    v14 = swift_allocObject(v13, 152, 7);
    *(_OWORD *)(v14 + 16) = xmmword_1004D9880;
    v15 = String.count.getter(a4, a5);
    *(_QWORD *)(v14 + 56) = &type metadata for Int;
    *(_QWORD *)(v14 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v14 + 32) = v15;
    *(_QWORD *)(v14 + 96) = &type metadata for Int;
    *(_QWORD *)(v14 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v14 + 72) = a3;
    *(_QWORD *)(v14 + 136) = type metadata accessor for DOCSuggester();
    *(_QWORD *)(v14 + 144) = sub_100062658((unint64_t *)&unk_100642630, v16, (uint64_t (*)(uint64_t))type metadata accessor for DOCSuggester, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v14 + 112) = a1;
    v17 = a1;
    os_log(_:dso:log:type:_:)("Suggester did deliver for input (input length: %ld, searchId: %ld): %{public}@", 78, 2, &_mh_execute_header, v11, v12, v14);

    swift_bridgeObjectRelease(v14);
    v18 = (_QWORD *)swift_allocObject(&unk_1005C26D8, 56, 7);
    v18[2] = v5;
    v18[3] = a2;
    v18[4] = a3;
    v18[5] = a4;
    v18[6] = a5;
    v22[4] = sub_1000DBC24;
    v23 = v18;
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 1107296256;
    v22[2] = sub_10004A82C;
    v22[3] = &unk_1005C26F0;
    v19 = _Block_copy(v22);
    v20 = v23;
    v21 = v5;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a5);
    swift_release(v20);
    DOCRunInMainThread(v19);
    _Block_release(v19);
  }
}

uint64_t sub_1000DB17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  _BYTE v34[24];

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t *)(a1 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_gatheredSuggestions);
  swift_beginAccess(a1 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_gatheredSuggestions, v34, 33, 0);
  v15 = swift_bridgeObjectRetain(a2);
  sub_10012FDB4(v15);
  result = swift_endAccess(v34);
  v17 = *(_QWORD *)(a1 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_numWaitedSuggesterResults);
  v18 = __OFSUB__(v17, 1);
  v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_numWaitedSuggesterResults) = v19;
    if (v19 <= 0)
    {
      v20 = a1 + OBJC_IVAR____TtC5Files12DOCSuggester_delegate;
      Strong = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC5Files12DOCSuggester_delegate);
      if (Strong)
      {
        v22 = Strong;
        v23 = *(_QWORD *)(v20 + 8);
        ObjectType = swift_getObjectType(Strong);
        v31 = a5;
        v25 = *v14;
        v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8);
        v33 = ObjectType;
        swift_bridgeObjectRetain(v25);
        v32(a1, v25, a3, a4, v31, v33, v23);
        swift_bridgeObjectRelease(v25);
        swift_unknownObjectRelease(v22);
      }
      v26 = Logger.UI.unsafeMutableAddressor(Strong);
      v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v26, v10);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.debug.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "All suggesters delivered.", v30, 2u);
        swift_slowDealloc(v30, -1, -1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
  }
  return result;
}

uint64_t sub_1000DB368()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_suggesters));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_gatheredSuggestions));
}

id sub_1000DB394()
{
  return sub_1000DB3A0(type metadata accessor for DOCSuggesterManager);
}

id sub_1000DB3A0(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for DOCSuggesterManager()
{
  return objc_opt_self(_TtC5Files19DOCSuggesterManager);
}

uint64_t getEnumTagSinglePayload for DOCSuggestionCategory(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCSuggestionCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1000DB504 + 4 * byte_1004D9895[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1000DB538 + 4 * byte_1004D9890[v4]))();
}

uint64_t sub_1000DB538(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DB540(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000DB548);
  return result;
}

uint64_t sub_1000DB554(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000DB55CLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1000DB560(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DB568(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DB574(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000DB57C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for DOCSuggestionCategory()
{
  return &type metadata for DOCSuggestionCategory;
}

unint64_t sub_1000DB598()
{
  unint64_t result;

  result = qword_100642628;
  if (!qword_100642628)
  {
    result = swift_getWitnessTable(&unk_1004D99B0, &type metadata for DOCSuggestionCategory);
    atomic_store(result, (unint64_t *)&qword_100642628);
  }
  return result;
}

unint64_t sub_1000DB5E0(unint64_t result)
{
  if (result >= 0xA)
    return 10;
  return result;
}

void sub_1000DB5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t Strong;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ObjectType;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t j;
  _QWORD *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _BYTE v82[24];

  v76 = a3;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  *v10 = static OS_dispatch_queue.main.getter(v11);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v13 = String.count.getter(a1, a2);
  if (v13 >= 1)
  {
    v15 = v79;
    v16 = *(_QWORD *)(v79 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_searchId);
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (!v17)
    {
      v3 = v13;
      v80 = OBJC_IVAR____TtC5Files19DOCSuggesterManager_searchId;
      *(_QWORD *)(v79 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_searchId) = v18;
      v19 = (uint64_t *)(v15 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_gatheredSuggestions);
      swift_beginAccess(v15 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_gatheredSuggestions, v82, 1, 0);
      v20 = *v19;
      *v19 = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v20);
      v4 = *(_QWORD *)(v15 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_suggesters);
      v81 = _swiftEmptyArrayStorage;
      if (!((unint64_t)v4 >> 62))
      {
        v21 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v4);
        if (v21)
        {
LABEL_6:
          if (v21 < 1)
          {
            __break(1u);
            goto LABEL_53;
          }
          v22 = a1;
          for (i = 0; i != v21; ++i)
          {
            if ((v4 & 0xC000000000000001) != 0)
              v26 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
            else
              v26 = *(id *)(v4 + 8 * i + 32);
            v27 = v26;
            v28 = (*(uint64_t (**)(void))((swift_isaMask & *v26) + 0x88))();
            if (v3 >= v28)
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v28);
              v24 = v81[2];
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
              v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v27);
              specialized ContiguousArray._endMutation()(v25);
            }
            else
            {

            }
          }
          swift_bridgeObjectRelease(v4);
          v29 = (uint64_t)v81;
          a1 = v22;
LABEL_25:
          v38 = v29 < 0 || (v29 & 0x4000000000000000) != 0;
          if (v38)
          {
            v74 = swift_bridgeObjectRetain(v29);
            v39 = _CocoaArrayWrapper.endIndex.getter(v74);
            swift_release(v29);
          }
          else
          {
            v39 = *(_QWORD *)(v29 + 16);
          }
          v40 = _swiftEmptyArrayStorage;
          v77 = a1;
          v78 = a2;
          HIDWORD(v75) = v38;
          if (!v39)
          {
LABEL_39:
            v81 = v40;
            v51 = sub_10006922C(&qword_10064F390);
            v52 = sub_1000DBBA4();
            v53 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v51, v52);
            v55 = v54;
            swift_bridgeObjectRelease(v40);
            v57 = *(id *)DOCLog.UI.unsafeMutableAddressor(v56);
            v58 = static os_log_type_t.debug.getter();
            v59 = sub_10006922C((uint64_t *)&unk_100644560);
            v60 = swift_allocObject(v59, 152, 7);
            *(_OWORD *)(v60 + 16) = xmmword_1004D9880;
            v61 = String.count.getter(v77, v78);
            *(_QWORD *)(v60 + 56) = &type metadata for Int;
            *(_QWORD *)(v60 + 64) = &protocol witness table for Int;
            *(_QWORD *)(v60 + 32) = v61;
            v62 = v79;
            v63 = *(_QWORD *)(v79 + v80);
            *(_QWORD *)(v60 + 96) = &type metadata for Int;
            *(_QWORD *)(v60 + 104) = &protocol witness table for Int;
            *(_QWORD *)(v60 + 72) = v63;
            *(_QWORD *)(v60 + 136) = &type metadata for String;
            *(_QWORD *)(v60 + 144) = sub_10006A638();
            *(_QWORD *)(v60 + 112) = v53;
            *(_QWORD *)(v60 + 120) = v55;
            v64 = v62;
            os_log(_:dso:log:type:_:)("Triggering suggesters to deliver for input (input length: %ld, search ID: %ld): %{public}@", 90, 2, &_mh_execute_header, v57, v58, v60);

            swift_bridgeObjectRelease(v60);
            *(_QWORD *)(v62 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_numWaitedSuggesterResults) = v39;
            if (HIDWORD(v75))
            {
              swift_retain();
              v66 = _CocoaArrayWrapper.endIndex.getter(v65);
            }
            else
            {
              v66 = *(_QWORD *)(v29 + 16);
              v67 = swift_retain();
            }
            v69 = v76;
            v68 = v77;
            v70 = v78;
            if (!v66)
            {
LABEL_49:
              swift_release_n(v29, 2, v67);
              return;
            }
            if (v66 >= 1)
            {
              for (j = 0; j != v66; ++j)
              {
                if ((v29 & 0xC000000000000001) != 0)
                  v72 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v29);
                else
                  v72 = *(id *)(v29 + 8 * j + 32);
                v73 = v72;
                (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))((swift_isaMask & *v72) + 0x90))(v68, v70, *(_QWORD *)(v64 + v80), v69);

              }
              goto LABEL_49;
            }
LABEL_54:
            __break(1u);
            return;
          }
          v81 = _swiftEmptyArrayStorage;
          sub_100081774(0, v39 & ~(v39 >> 63), 0);
          if ((v39 & 0x8000000000000000) == 0)
          {
            v41 = 0;
            v40 = v81;
            do
            {
              if ((v29 & 0xC000000000000001) != 0)
                v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v29);
              else
                v42 = *(id *)(v29 + 8 * v41 + 32);
              v43 = v42;
              v44 = objc_msgSend(v42, "description");
              v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
              v47 = v46;

              v81 = v40;
              v49 = v40[2];
              v48 = v40[3];
              if (v49 >= v48 >> 1)
              {
                sub_100081774(v48 > 1, v49 + 1, 1);
                v40 = v81;
              }
              ++v41;
              v40[2] = v49 + 1;
              v50 = &v40[2 * v49];
              v50[4] = v45;
              v50[5] = v47;
            }
            while (v39 != v41);
            goto LABEL_39;
          }
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
LABEL_24:
        swift_bridgeObjectRelease(v4);
        v29 = (uint64_t)_swiftEmptyArrayStorage;
        goto LABEL_25;
      }
LABEL_20:
      if (v4 < 0)
        v37 = v4;
      else
        v37 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v21 = _CocoaArrayWrapper.endIndex.getter(v37);
      if (v21)
        goto LABEL_6;
      goto LABEL_24;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v30 = v79;
  v31 = v79 + OBJC_IVAR____TtC5Files12DOCSuggester_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(v79 + OBJC_IVAR____TtC5Files12DOCSuggester_delegate, v14);
  if (Strong)
  {
    v34 = Strong;
    v35 = *(_QWORD *)(v31 + 8);
    ObjectType = swift_getObjectType(Strong, v33);
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 8))(v30, _swiftEmptyArrayStorage, *(_QWORD *)(v30 + OBJC_IVAR____TtC5Files19DOCSuggesterManager_searchId), a1, a2, ObjectType, v35);
    swift_unknownObjectRelease(v34);
  }
}

unint64_t sub_1000DBBA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064D530;
  if (!qword_10064D530)
  {
    v1 = sub_10007E830(&qword_10064F390);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10064D530);
  }
  return result;
}

uint64_t sub_1000DBBF0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000DBC24()
{
  uint64_t *v0;

  return sub_1000DB17C(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t *sub_1000DBD84@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *result;
  v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2)
    v2 = 0;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

void sub_1000DBDA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_1000A83AC();

  }
}

uint64_t sub_1000DBDF0(uint64_t result)
{
  char *v1;
  uint64_t v2;
  unsigned int v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id (*v8)();
  void *v9;
  uint64_t v10;
  char *v11;
  char isEscapingClosureAtFileLocation;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  char *v21;
  void **v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  objc_super v28;

  v2 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_state];
  if ((result == 1) == (v2 != 1))
  {
    v28.receiver = v1;
    v28.super_class = (Class)type metadata accessor for DOCContentDimmingOverlay();
    v3 = objc_msgSendSuper2(&v28, "isHidden");
    if (v2 != 1 || v3 == 0)
    {
      v8 = 0;
      v6 = 0;
    }
    else
    {
      v5 = (void *)objc_opt_self(UIView);
      v6 = swift_allocObject(&unk_1005C2848, 24, 7);
      *(_QWORD *)(v6 + 16) = v1;
      v7 = swift_allocObject(&unk_1005C2870, 32, 7);
      v8 = sub_1000DC3D8;
      *(_QWORD *)(v7 + 16) = sub_1000DC3D8;
      *(_QWORD *)(v7 + 24) = v6;
      v26 = sub_10006657C;
      v27 = v7;
      v22 = _NSConcreteStackBlock;
      v23 = 1107296256;
      v24 = sub_10006655C;
      v25 = &unk_1005C2888;
      v9 = _Block_copy(&v22);
      v10 = v27;
      v11 = v1;
      swift_retain();
      swift_release(v10);
      objc_msgSend(v5, "performWithoutAnimation:", v9);
      _Block_release(v9);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v7, "", 104, 168, 48, 1);
      result = swift_release(v7);
      if ((isEscapingClosureAtFileLocation & 1) != 0)
      {
        __break(1u);
        return result;
      }
    }
    v13 = (void *)objc_opt_self(UIView);
    v14 = swift_allocObject(&unk_1005C27A8, 24, 7);
    *(_QWORD *)(v14 + 16) = v1;
    v26 = sub_1000DC35C;
    v27 = v14;
    v22 = _NSConcreteStackBlock;
    v23 = 1107296256;
    v24 = sub_10004A82C;
    v25 = &unk_1005C27C0;
    v15 = _Block_copy(&v22);
    v16 = v27;
    v17 = v1;
    swift_release(v16);
    v18 = swift_allocObject(&unk_1005C27F8, 25, 7);
    *(_QWORD *)(v18 + 16) = v17;
    *(_BYTE *)(v18 + 24) = v2 != 1;
    v26 = sub_1000DC388;
    v27 = v18;
    v22 = _NSConcreteStackBlock;
    v23 = 1107296256;
    v24 = sub_10016C02C;
    v25 = &unk_1005C2810;
    v19 = _Block_copy(&v22);
    v20 = v27;
    v21 = v17;
    swift_release(v20);
    objc_msgSend(v13, "animateWithDuration:animations:completion:", v15, v19, 0.15);
    _Block_release(v19);
    _Block_release(v15);
    return sub_100087534((uint64_t)v8, v6);
  }
  return result;
}

void *sub_1000DC0A4(char *a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  void *result;
  void *v6;

  v2 = OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_state;
  v3 = 0.0;
  if (*(_QWORD *)&a1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_state] == 1)
    v3 = 1.0;
  objc_msgSend(a1, "setAlpha:", v3);
  result = (void *)swift_unknownObjectWeakLoadStrong(&a1[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dimmable], v4);
  if (result)
  {
    v6 = result;
    objc_msgSend(result, "dimmingOverlayStateDidChange:state:", a1, *(_QWORD *)&a1[v2]);
    return (void *)swift_unknownObjectRelease(v6);
  }
  return result;
}

id sub_1000DC268()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DOCContentDimmingOverlay();
  return objc_msgSendSuper2(&v2, "dealloc");
}

ValueMetadata *type metadata accessor for DOCContentDimmingOverlay.DOCDimmingState()
{
  return &type metadata for DOCContentDimmingOverlay.DOCDimmingState;
}

unint64_t sub_1000DC2F4()
{
  unint64_t result;

  result = qword_100642700;
  if (!qword_100642700)
  {
    result = swift_getWitnessTable(&unk_1004D9AC0, &type metadata for DOCContentDimmingOverlay.DOCDimmingState);
    atomic_store(result, (unint64_t *)&qword_100642700);
  }
  return result;
}

uint64_t sub_1000DC338()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void *sub_1000DC35C()
{
  uint64_t v0;

  return sub_1000DC0A4(*(char **)(v0 + 16));
}

uint64_t sub_1000DC364()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

id sub_1000DC388(id result)
{
  uint64_t v1;
  uint64_t v2;
  objc_super v3;

  if ((result & 1) != 0)
  {
    v2 = *(unsigned __int8 *)(v1 + 24);
    v3.receiver = *(id *)(v1 + 16);
    v3.super_class = (Class)type metadata accessor for DOCContentDimmingOverlay();
    return objc_msgSendSuper2(&v3, "setHidden:", v2);
  }
  return result;
}

id sub_1000DC3D8()
{
  uint64_t v0;
  void *v1;
  objc_super v3;

  v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, "setAlpha:", 0.0);
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for DOCContentDimmingOverlay();
  return objc_msgSendSuper2(&v3, "setHidden:", 0);
}

uint64_t sub_1000DC42C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1000DC43C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isItemCollectionDragActive");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000DC46C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setIsItemCollectionDragActive:", *a1);
}

uint64_t sub_1000DC480()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000DC4A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000DBDA0(a1, a2, v2);
}

void sub_1000DC4AC()
{
  _BYTE *v0;

  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dropInteraction] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dragMonitorKVO] = 0;
  v0[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_autohideWhenPossibleDropTarget] = 0;
  v0[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_active] = 0;
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_dimmable], 0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_state] = 0;
  v0[OBJC_IVAR____TtC5Files24DOCContentDimmingOverlay_hasDropTargetRequiringAutohide] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Files/DOCContentDimmingOverlay.swift", 36, 2, 108, 0);
  __break(1u);
}

_QWORD *sub_1000DC568(void *a1, uint64_t a2)
{
  char *v2;
  void *v3;
  void *v5;
  void *v6;
  uint64_t ObjectType;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *result;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  id v34;
  char isEscapingClosureAtFileLocation;
  id v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _QWORD v40[5];
  uint64_t v41;
  void *v42;

  v3 = v2;
  if ((v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_endingInlineRename] & 1) == 0
    && (*(_QWORD *)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_inlineRenameController]
     || (v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_preparingForInlineRename] & 1) != 0))
  {
    return _swiftEmptyArrayStorage;
  }
  v5 = sub_1000E1318(a2);
  if (!v5)
    return _swiftEmptyArrayStorage;
  v6 = v5;
  ObjectType = swift_getObjectType(v5);
  if ((DOCNode.doc_isAppContainerRoot.getter(ObjectType) & 1) != 0
    || (objc_msgSend(v6, "doc_isCollaborationInvitation") & 1) != 0)
  {
    goto LABEL_5;
  }
  v8 = objc_msgSend(a1, "items");
  v9 = sub_10004F2F0(0, (unint64_t *)&unk_100648460, UIDragItem_ptr);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

  swift_unknownObjectRetain(v6);
  LOBYTE(v8) = sub_1000E186C(v10, v6);
  swift_bridgeObjectRelease(v10);
  swift_unknownObjectRelease(v6);
  if ((v8 & 1) != 0)
  {
    v12 = *(id *)DOCLog.UI.unsafeMutableAddressor(v11);
    v13 = static os_log_type_t.debug.getter(v12);
    v14 = sub_10006922C((uint64_t *)&unk_100644560);
    v15 = swift_allocObject(v14, 112, 7);
    *(_OWORD *)(v15 + 16) = xmmword_1004D4CE0;
    *(_QWORD *)(v15 + 56) = &type metadata for String;
    v16 = sub_10006A638();
    *(_QWORD *)(v15 + 64) = v16;
    *(_QWORD *)(v15 + 32) = 0xD000000000000019;
    *(_QWORD *)(v15 + 40) = 0x800000010050E3E0;
    v17 = objc_msgSend(v6, "description");
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    *(_QWORD *)(v15 + 96) = &type metadata for String;
    *(_QWORD *)(v15 + 104) = v16;
    *(_QWORD *)(v15 + 72) = v18;
    *(_QWORD *)(v15 + 80) = v20;
    os_log(_:dso:log:type:_:)("%@: Node %@ cannot be added to the drag because it is already part of the drag", 78, 2, &_mh_execute_header, v12, v13, v15);
    swift_unknownObjectRelease(v6);

    swift_bridgeObjectRelease(v15);
    return _swiftEmptyArrayStorage;
  }
  v23 = DOCNode.fpfs_syncFetchFPItem()(ObjectType);
  if (!v23)
  {
LABEL_5:
    swift_unknownObjectRelease(v6);
    return _swiftEmptyArrayStorage;
  }
  v24 = (void *)v23;
  v42 = 0;
  v25 = objc_msgSend((id)objc_opt_self(DOCManagedPermission), "defaultPermission");
  v26 = objc_msgSend(v25, "dataOwnerStateForNode:", v6);

  if (v26 == (id)1)
    v27 = 2;
  else
    v27 = v26 == (id)2;
  v28 = (void *)objc_opt_self(UIPasteboard);
  v29 = (_QWORD *)swift_allocObject(&unk_1005C29B8, 40, 7);
  v29[2] = &v42;
  v29[3] = v24;
  v29[4] = v3;
  v30 = swift_allocObject(&unk_1005C29E0, 32, 7);
  *(_QWORD *)(v30 + 16) = sub_1000E2B24;
  *(_QWORD *)(v30 + 24) = v29;
  v40[4] = sub_10006657C;
  v41 = v30;
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 1107296256;
  v40[2] = sub_10006655C;
  v40[3] = &unk_1005C29F8;
  v31 = _Block_copy(v40);
  v32 = v41;
  v33 = v3;
  swift_retain();
  v34 = v24;
  swift_release(v32);
  objc_msgSend(v28, "_performAsDataOwner:block:", v27, v31);
  _Block_release(v31);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v30, "", 123, 73, 71, 1);
  result = (_QWORD *)swift_release(v30);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else if (v42)
  {
    v36 = objc_msgSend(objc_allocWithZone((Class)UIDragItem), "initWithItemProvider:", v42);
    objc_msgSend(v36, "setLocalObject:", v34);
    v37 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v38 = swift_allocObject(v37, 40, 7);
    *(_OWORD *)(v38 + 16) = xmmword_1004D9B40;
    *(_QWORD *)(v38 + 32) = v36;
    v40[0] = v38;
    specialized Array._endMutation()(v38);
    v21 = v40[0];
    swift_unknownObjectRelease(v6);

    v39 = v42;
    swift_release(v29);

    return (_QWORD *)v21;
  }
  __break(1u);
  return result;
}

void sub_1000DC9A4(id *a1, void *a2, uint64_t a3)
{
  id v6;
  id v7;
  void *v8;
  id v9;
  int v10;
  id v11;

  v6 = objc_msgSend(objc_allocWithZone((Class)NSItemProvider), "init");
  v7 = *a1;
  *a1 = v6;

  if (*a1)
  {
    v8 = *(void **)(*(_QWORD *)(a3 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration)
                  + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain);
    v11 = *a1;
    v9 = *a1;
    if (v8)
      v10 = objc_msgSend(v8, "supportsPickingFolders");
    else
      v10 = 2;
    NSItemProvider.registerFPItem(_:supportsPickingFolders:disableExternalFolders:disableRealUTI:)(a2, v10, 0, 0);

  }
}

void DOCItemCollectionViewController.collectionView(_:itemsForBeginning:at:)(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1000E1990(a2, a3);
}

char *DOCItemCollectionViewController.collectionView(_:itemsForAddingTo:at:point:)(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1000E1B88(a2, a3);
}

void DOCItemCollectionViewController.collectionView(_:dragSessionWillBegin:)(uint64_t a1, uint64_t a2)
{
  sub_1000E1EC8(a2);
}

id DOCItemCollectionViewController.collectionView(_:dragPreviewParametersForItemAt:)(uint64_t a1, uint64_t a2)
{
  return sub_1000E1FB8(a2);
}

void sub_1000DCD7C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  double v19;
  void *v20;
  _QWORD *v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t ObjectType;
  uint64_t v40;
  void *v41;
  Class isa;
  id v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  double v47;
  CGFloat v48;
  double v49;
  CGFloat v50;
  _QWORD *v51;
  double v52;
  uint64_t v53;
  void (*v57)(char *, uint64_t);
  unsigned int v58;
  void (*v59)(char *, uint64_t);
  void (*v60)(char *, uint64_t);
  id v61;
  double v62;
  CGFloat v63;
  double v64;
  CGFloat v65;
  double v66;
  CGFloat v67;
  double v68;
  CGFloat v69;
  _BOOL4 v70;
  void (*v71)(char *, uint64_t);
  id v72;
  char *v73;
  uint64_t v74;
  char v75[24];
  CGPoint v76;
  CGRect v77;

  v72 = a2;
  v6 = sub_10006922C((uint64_t *)&unk_100642710);
  __chkstk_darwin(v6);
  v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v72 - v10;
  v12 = type metadata accessor for IndexPath(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v73 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v72 - v16;
  swift_getObjectType(a3);
  v18 = objc_msgSend(a3, "localDragSession");
  *(_QWORD *)&v19 = swift_unknownObjectRelease(v18).n128_u64[0];
  if (v18
    && (objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration), "isPickerUI", v19) & 1) != 0)
  {
    return;
  }
  v74 = v3;
  v20 = sub_1003F4328();
  v21 = sub_10028F4DC((uint64_t)v20);
  swift_bridgeObjectRelease(v20);
  sub_1000E26E0(a1, (uint64_t)v11);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v22(v11, 1, v12) == 1)
  {
    sub_10000CB4C((uint64_t)v11, (uint64_t *)&unk_100642710);
    goto LABEL_5;
  }
  v24 = *(uint64_t (**)(char *, char *, uint64_t))(v13 + 32);
  v25 = v24(v17, v11, v12);
  v26 = IndexPath.count.getter(v25);
  v23 = v74;
  if (v26 != 2)
    goto LABEL_11;
  v27 = *(void **)(v74 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (!v27)
  {
LABEL_44:
    __break(1u);
    return;
  }
  if ((objc_msgSend(v27, "isGathering") & 1) == 0
    && (*(_BYTE *)(v23 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__showsCreateButton) & 1) != 0
    && (sub_100195148((uint64_t)v17) & 1) != 0)
  {
LABEL_11:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v8, 1, 1, v12);
LABEL_13:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
    sub_10000CB4C((uint64_t)v8, (uint64_t *)&unk_100642710);
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v8, v17, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
  if (v22(v8, 1, v12) == 1)
    goto LABEL_13;
  v36 = (uint64_t)v73;
  v24(v73, v8, v12);
  v37 = sub_10017A754(v36, 0);
  if (!v37)
  {
LABEL_33:
    swift_release(v21);
    v57 = *(void (**)(char *, uint64_t))(v13 + 8);
    v57(v73, v12);
    v57(v17, v12);
    return;
  }
  v38 = (void *)v37;
  ObjectType = swift_getObjectType(v37);
  v40 = DOCNode.fpfs_syncFetchFPItem()(ObjectType);
  if (!v40)
  {
    swift_unknownObjectRelease(v38);
    goto LABEL_33;
  }
  v41 = (void *)v40;
  if ((sub_1003F4740() & 1) != 0)
  {
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v43 = objc_msgSend(v72, "cellForItemAtIndexPath:", isa);

    if (v43)
    {
      v44 = type metadata accessor for DOCItemCollectionCell();
      v45 = swift_dynamicCastClass(v43, v44);
      if (v45)
      {
        v46 = (char *)v45;
        objc_msgSend(a3, "locationInView:", v45);
        v48 = v47;
        v50 = v49;
        v51 = (_QWORD *)(v74 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode);
        *(_QWORD *)&v52 = swift_beginAccess(v74 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode, v75, 0, 0).n128_u64[0];
        if (*v51)
        {
          objc_msgSend(v46, "bounds", v52);
        }
        else
        {
          v61 = *(id *)&v46[OBJC_IVAR____TtC5Files21DOCItemCollectionCell_thumbnailView];
          objc_msgSend(v61, "bounds");
          objc_msgSend(v61, "convertRect:toCoordinateSpace:", v46);
          v63 = v62;
          v65 = v64;
          v67 = v66;
          v69 = v68;

          v77.origin.x = v63;
          v77.origin.y = v65;
          v77.size.width = v67;
          v77.size.height = v69;
          *(CGRect *)&v53 = CGRectInset(v77, -10.0, -10.0);
        }
        v76.x = v48;
        v76.y = v50;
        v70 = CGRectContainsPoint(*(CGRect *)&v53, v76);

        v71 = *(void (**)(char *, uint64_t))(v13 + 8);
        v71(v73, v12);
        v71(v17, v12);
        if (v70)
        {
          swift_release(v21);
          return;
        }
        swift_unknownObjectRelease(v38);
        goto LABEL_5;
      }

    }
    swift_unknownObjectRelease(v38);

    v60 = *(void (**)(char *, uint64_t))(v13 + 8);
    v60(v73, v12);
    v60(v17, v12);
LABEL_5:
    v23 = v74;
    goto LABEL_14;
  }
  v58 = objc_msgSend(v38, "isFolder");
  swift_unknownObjectRelease(v38);

  v59 = *(void (**)(char *, uint64_t))(v13 + 8);
  v59(v73, v12);
  v59(v17, v12);
  v23 = v74;
  if (v58)
    goto LABEL_35;
LABEL_14:
  v28 = *(_QWORD *)(v23 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (!v28)
  {
    __break(1u);
    goto LABEL_44;
  }
  v29 = (_QWORD *)(v28 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type);
  if ((*(_BYTE *)(v28 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type + 16) & 1) != 0)
  {
    v30 = *(_QWORD *)(*v29 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode);
    swift_unknownObjectRetain(v30);
  }
  else
  {
    v30 = v29[1];
    swift_unknownObjectRetain(v30);
    if (!v30)
    {
LABEL_35:
      swift_release(v21);
      return;
    }
  }
  v31 = swift_getObjectType(v30);
  v32 = (void *)DOCNode.fpfs_syncFetchFPItem()(v31);
  swift_unknownObjectRelease(v30);
  if (!v32)
    goto LABEL_35;
  v33 = sub_1003F4740();
  swift_release(v21);
  if ((v33 & 1) != 0)
  {
    v34 = (_QWORD *)(v28 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type);
    if ((*(_BYTE *)(v28 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type + 16) & 1) != 0)
      v35 = *(_QWORD *)(*v34 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode);
    else
      v35 = v34[1];
    swift_unknownObjectRetain(v35);

  }
  else
  {

  }
}

void DOCItemCollectionViewController.collectionView(_:performDropWith:)(void *a1, void *a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  NSString v44;
  id v45;
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  void *v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t ObjectType;
  void *v70;
  char **v71;
  id v72;
  char v73;
  double v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  id v80;
  char *v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  void *v97;
  id *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;

  v3 = v2;
  v97 = a1;
  v5 = sub_10006922C((uint64_t *)&unk_100642710);
  __chkstk_darwin(v5);
  v96 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v95 - v8;
  v98 = (id *)DOCLog.UI.unsafeMutableAddressor(v10);
  v11 = *v98;
  v12 = static os_log_type_t.debug.getter(v11);
  v99 = sub_10006922C((uint64_t *)&unk_100644560);
  v13 = swift_allocObject(v99, 112, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1004D4CE0;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  v14 = sub_10006A638();
  *(_QWORD *)(v13 + 64) = v14;
  v100 = v14;
  v101 = (unint64_t)"8";
  *(_QWORD *)(v13 + 32) = 0xD000000000000022;
  *(_QWORD *)(v13 + 40) = 0x800000010050DFE0;
  v15 = objc_opt_self(NSObject);
  v16 = swift_dynamicCastObjCClassUnconditional(a2, v15, 0, 0, 0);
  *(_QWORD *)(v13 + 96) = sub_10004F2F0(0, (unint64_t *)&qword_100642430, NSObject_ptr);
  *(_QWORD *)(v13 + 104) = sub_100083450((unint64_t *)&unk_100642720, (unint64_t *)&qword_100642430, NSObject_ptr);
  *(_QWORD *)(v13 + 72) = v16;
  swift_unknownObjectRetain(a2);
  os_log(_:dso:log:type:_:)("%@: %@", 6, 2, &_mh_execute_header, v11, v12, v13);

  swift_bridgeObjectRelease(v13);
  v17 = type metadata accessor for IndexPath(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v102 = v3;
  sub_1000DDCCC((uint64_t)v9);
  sub_10000CB4C((uint64_t)v9, (uint64_t *)&unk_100642710);
  v19 = objc_msgSend(a2, "items");
  v20 = sub_10006922C(&qword_100645660);
  v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);

  if ((unint64_t)v21 >> 62)
  {
    if (v21 < 0)
      v94 = v21;
    else
      v94 = v21 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v21);
    v22 = _CocoaArrayWrapper.endIndex.getter(v94);
    swift_bridgeObjectRelease(v21);
  }
  else
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v23 = swift_bridgeObjectRelease(v21).n128_u64[0];
  if (!v22)
  {
    v32 = *v98;
    v33 = static os_log_type_t.debug.getter(v32);
    v34 = swift_allocObject(v99, 72, 7);
    *(_OWORD *)(v34 + 16) = xmmword_1004D9670;
    v35 = v100;
    *(_QWORD *)(v34 + 56) = &type metadata for String;
    *(_QWORD *)(v34 + 64) = v35;
    v36 = v101 | 0x8000000000000000;
    *(_QWORD *)(v34 + 32) = 0xD000000000000022;
    *(_QWORD *)(v34 + 40) = v36;
    os_log(_:dso:log:type:_:)("%@: dropSession contains no items", 33, 2, &_mh_execute_header, v32, v33, v34);
    goto LABEL_29;
  }
  v24 = *(_QWORD *)&v102[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_enumerationIdentifier];
  if (!v24)
  {
LABEL_21:
    v62 = objc_msgSend(a2, "destinationIndexPath", *(double *)&v23);
    if (v62)
    {
      v63 = v62;
      v64 = (uint64_t)v96;
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v62);

      v65 = 0;
    }
    else
    {
      v65 = 1;
      v64 = (uint64_t)v96;
    }
    v18((char *)v64, v65, 1, v17);
    v66 = objc_msgSend(a2, "session");
    sub_1000DCD7C(v64, v97, v66);
    v68 = v67;
    swift_unknownObjectRelease(v66);
    sub_10000CB4C(v64, (uint64_t *)&unk_100642710);
    if (v68)
    {
      ObjectType = swift_getObjectType(v68);
      v70 = (void *)DOCNode.fpfs_syncFetchFPItem()(ObjectType);
      swift_unknownObjectRelease(v68);
      if (v70)
      {
        v71 = (char **)sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
        v72 = objc_msgSend(a2, "session");
        swift_getObjectType(v72);
        v73 = sub_1003F7F94((uint64_t)v72, v71);
        *(_QWORD *)&v74 = swift_unknownObjectRelease(v72).n128_u64[0];
        if ((v73 & 1) != 0)
        {
          v75 = *v98;
          v76 = static os_log_type_t.debug.getter(v75);
          v77 = swift_allocObject(v99, 72, 7);
          *(_OWORD *)(v77 + 16) = xmmword_1004D9670;
          v78 = v100;
          *(_QWORD *)(v77 + 56) = &type metadata for String;
          *(_QWORD *)(v77 + 64) = v78;
          v79 = v101 | 0x8000000000000000;
          *(_QWORD *)(v77 + 32) = 0xD000000000000022;
          *(_QWORD *)(v77 + 40) = v79;
          os_log(_:dso:log:type:_:)("%@: session contains FPItems", 28, 2, &_mh_execute_header, v75, v76, v77);

          v80 = objc_msgSend(a2, "session", swift_bridgeObjectRelease(v77).n128_f64[0]);
          v81 = v102;
          v82 = v70;
          sub_1003FB198(v80, v81, (uint64_t)v71, v81, v82);
          swift_unknownObjectRelease(v80);

        }
        else
        {
          v86 = objc_msgSend(a2, "session", v74);
          v87 = objc_msgSend(v86, "items");
          swift_unknownObjectRelease(v86);
          v88 = sub_10004F2F0(0, (unint64_t *)&unk_100648460, UIDragItem_ptr);
          v89 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v87, v88);

          v90 = swift_allocObject(&unk_1005C2940, 24, 7);
          v91 = v102;
          swift_unknownObjectWeakInit(v90 + 16);
          v92 = swift_allocObject(&unk_1005C2968, 32, 7);
          *(_QWORD *)(v92 + 16) = v90;
          *(_QWORD *)(v92 + 24) = v70;
          v93 = v70;
          swift_retain();
          sub_1003FB784(v89, v93, v91, sub_1000E21C4, v92);

          swift_bridgeObjectRelease(v89);
          swift_release(v90);
          swift_release(v92);
        }
        return;
      }
    }
    v32 = *v98;
    v83 = static os_log_type_t.debug.getter(v32);
    v34 = swift_allocObject(v99, 72, 7);
    *(_OWORD *)(v34 + 16) = xmmword_1004D9670;
    v84 = v100;
    *(_QWORD *)(v34 + 56) = &type metadata for String;
    *(_QWORD *)(v34 + 64) = v84;
    v85 = v101 | 0x8000000000000000;
    *(_QWORD *)(v34 + 32) = 0xD000000000000022;
    *(_QWORD *)(v34 + 40) = v85;
    os_log(_:dso:log:type:_:)("%@: no drop target", 18, 2, &_mh_execute_header, v32, v83, v34);
LABEL_29:

    v56 = v34;
    goto LABEL_30;
  }
  v25 = DOCSpotlightEnumeratedItemIdentifierTaggedItems;
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)&v102[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_enumerationIdentifier]);
  v28 = v27;
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v31 = v29;
  if (v26 != v30 || v28 != v29)
  {
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v30, v29, 0);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v31);
    if ((v37 & 1) != 0)
      goto LABEL_10;
    v49 = DOCSpotlightEnumeratedItemIdentifierTrashedItems;
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v52 = v51;
    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    v55 = v53;
    if (v50 == v54 && v52 == v53)
    {
      swift_bridgeObjectRelease_n(v52, 2);
LABEL_20:
      v58 = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
      v59 = objc_msgSend(a2, "session");
      v60 = swift_allocObject(&unk_1005C2940, 24, 7);
      v61 = v102;
      swift_unknownObjectWeakInit(v60 + 16);
      sub_1003FA918(v59, v61, v58, v60);
      swift_unknownObjectRelease(v59);
      swift_release(v60);
      return;
    }
    v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v52, v54, v53, 0);
    swift_bridgeObjectRelease(v52);
    v23 = swift_bridgeObjectRelease(v55).n128_u64[0];
    if ((v57 & 1) != 0)
      goto LABEL_20;
    goto LABEL_21;
  }
  swift_bridgeObjectRelease_n(v28, 2);
LABEL_10:
  v38 = *(void **)&v102[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_enumerationProperties];
  if (v38)
  {
    v39 = objc_msgSend(v38, "tagIdentifiers");
    if (v39)
    {
      v40 = v39;
      v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v39, &type metadata for String);

      if (*(_QWORD *)(v41 + 16) == 1)
      {
        v42 = *(_QWORD *)(v41 + 40);
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRelease(v41);
        v43 = objc_msgSend((id)objc_opt_self(DOCTagRegistry), "sharedInstance");
        v44 = String._bridgeToObjectiveC()();
        v45 = objc_msgSend(v43, "tagForName:", v44, swift_bridgeObjectRelease(v42).n128_f64[0]);

        if (v45)
        {
          v46 = objc_msgSend(a2, "session");
          v47 = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
          v48 = v45;
          sub_1003FA52C(v46, v102, v47, v48);
          swift_unknownObjectRelease(v46);

        }
        return;
      }
      v56 = v41;
LABEL_30:
      swift_bridgeObjectRelease(v56);
    }
  }
}

void sub_1000DDCCC(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  Class isa;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  char v21;
  void *v22;
  uint64_t v23;

  v2 = v1;
  v4 = sub_10006922C((uint64_t *)&unk_100642710);
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E26E0(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10000CB4C((uint64_t)v6, (uint64_t *)&unk_100642710);
    goto LABEL_9;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  objc_msgSend(v2, "loadViewIfNeeded");
  v11 = *(void **)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
  if (v11)
  {
    v12 = v11;
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v14 = objc_msgSend(v12, "cellForItemAtIndexPath:", isa);

    if (v14)
    {
      v15 = type metadata accessor for DOCItemCollectionCell();
      v16 = (void *)swift_dynamicCastClass(v14, v15);
      if (v16 && (v17 = v14, (objc_msgSend(v16, "isHighlighted") & 1) == 0))
      {
        objc_msgSend(v16, "setHighlighted:", 1);

      }
      else
      {

      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_12:
      v18 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_dropTargetHighlightedCell;
      v19 = *(id *)&v2[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_dropTargetHighlightedCell];
      if (v19)
      {
        if (v16)
        {
          type metadata accessor for DOCItemCollectionCell();
          v20 = v16;
          v19 = v19;
          v21 = static NSObject.== infix(_:_:)(v19, v20);

          if ((v21 & 1) != 0)
            goto LABEL_20;
        }
        else
        {
          v19 = v19;
        }
        v19 = v19;
        if ((objc_msgSend(v19, "isHighlighted") & 1) != 0)
          objc_msgSend(v19, "setHighlighted:", 0);

      }
LABEL_20:
      v22 = *(void **)&v2[v18];
      *(_QWORD *)&v2[v18] = v16;

      return;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_9:
    v16 = 0;
    goto LABEL_12;
  }
  __break(1u);
}

void sub_1000DDF3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *Strong;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  Class isa;
  double v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  char v31;
  id v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  id v51;
  _QWORD *v52;
  unint64_t v53;
  _BYTE v54[24];

  v49 = type metadata accessor for DOCOperationItem(0);
  v6 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v8 = (uint64_t *)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  a3 += 16;
  swift_beginAccess(a3, v54, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a3);
  if (Strong)
  {

    v51 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
    v10 = _swiftEmptyArrayStorage;
    v53 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0)
        v43 = a1;
      else
        v43 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v11 = _CocoaArrayWrapper.endIndex.getter(v43);
      v48 = a2;
      if (v11)
      {
LABEL_4:
        if (v11 < 1)
        {
          __break(1u);
LABEL_41:
          __break(1u);
          return;
        }
        v47 = v6;
        v12 = 0;
        v13 = a1 & 0xC000000000000001;
        v14 = (void *)FPActionTrash;
        v50 = xmmword_1004D9B40;
        v15 = a1;
        do
        {
          if (v13)
            v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, a1);
          else
            v17 = *(id *)(a1 + 8 * v12 + 32);
          v18 = v17;
          v19 = sub_10006922C((uint64_t *)&unk_1006441A0);
          v20 = swift_allocObject(v19, 40, 7);
          *(_OWORD *)(v20 + 16) = v50;
          *(_QWORD *)(v20 + 32) = v18;
          v52 = (_QWORD *)v20;
          specialized Array._endMutation()(v20);
          v21 = v52;
          sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
          v22 = v18;
          isa = Array._bridgeToObjectiveC()().super.isa;
          *(_QWORD *)&v24 = swift_bridgeObjectRelease(v21).n128_u64[0];
          v25 = objc_msgSend(v51, "eligibleActionsForItems:", isa, v24);

          type metadata accessor for FPAction(0);
          v27 = v26;
          v28 = sub_10005A360((unint64_t *)&qword_1006418B0, (uint64_t (*)(uint64_t))type metadata accessor for FPAction, (uint64_t)&unk_1004D69D0);
          v29 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v25, v27, v28);

          v30 = v14;
          v31 = sub_100028BE0((uint64_t)v30, v29);

          swift_bridgeObjectRelease(v29);
          if ((v31 & 1) != 0)
          {
            v32 = v22;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v32);
            v34 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v33 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v34 >= v33 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
            v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v32);
            specialized Array._endMutation()(v16);
          }
          ++v12;

          a1 = v15;
        }
        while (v11 != v12);
        swift_bridgeObjectRelease(v15);
        v35 = v53;
        v10 = _swiftEmptyArrayStorage;
        v6 = v47;
        if (!(v53 >> 62))
        {
LABEL_15:
          v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v36)
          {
            swift_bridgeObjectRetain(v35);
LABEL_17:
            v52 = _swiftEmptyArrayStorage;
            sub_100155054(0, v36 & ~(v36 >> 63), 0);
            if ((v36 & 0x8000000000000000) == 0)
            {
              v37 = 0;
              v10 = v52;
              v38 = v49;
              do
              {
                if ((v35 & 0xC000000000000001) != 0)
                  v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v35);
                else
                  v39 = *(id *)(v35 + 8 * v37 + 32);
                *v8 = v39;
                swift_storeEnumTagMultiPayload(v8, v38, 1);
                v52 = v10;
                v41 = v10[2];
                v40 = v10[3];
                if (v41 >= v40 >> 1)
                {
                  sub_100155054(v40 > 1, v41 + 1, 1);
                  v38 = v49;
                  v10 = v52;
                }
                ++v37;
                v10[2] = v41 + 1;
                sub_1000E2AB4((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v41);
              }
              while (v36 != v37);
              swift_bridgeObjectRelease(v35);
              v35 = v53;
              goto LABEL_26;
            }
            goto LABEL_41;
          }
LABEL_38:

          swift_bridgeObjectRelease(v35);
          return;
        }
LABEL_32:
        if (v35 < 0)
          v44 = v35;
        else
          v44 = v35 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v35);
        v45 = _CocoaArrayWrapper.endIndex.getter(v44);
        swift_bridgeObjectRelease(v35);
        if (v45)
        {
          swift_bridgeObjectRetain(v35);
          v36 = _CocoaArrayWrapper.endIndex.getter(v44);
          if (!v36)
          {
            swift_bridgeObjectRelease(v35);
LABEL_26:
            swift_bridgeObjectRelease(v35);
            v42 = v51;
            sub_100477E1C(3, (uint64_t)v10, 0, 0, 0, 1, v48, 0, 0);
            swift_bridgeObjectRelease(v10);

            return;
          }
          goto LABEL_17;
        }
        goto LABEL_38;
      }
    }
    else
    {
      v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
      v48 = a2;
      if (v11)
        goto LABEL_4;
    }
    swift_bridgeObjectRelease(a1);
    v35 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
      goto LABEL_15;
    goto LABEL_32;
  }
}

double sub_1000DE3E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  NSString v18;
  Class isa;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  Class v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double result;
  uint64_t v31;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(*(id *)(a3 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration), "hostIdentifier", v10);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v15 = v14;

  v16 = a4;
  Date.init()(v16);
  v17 = objc_allocWithZone((Class)DOCHotFolderEvent);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v20 = objc_msgSend(v17, "initWithAppBundleIdentifier:folderItem:type:lastUsedDate:frecency:", v18, v16, 1, isa, 1.0);

  v21 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v22 = *(id *)DOCSmartFolderManager.sharedManager.unsafeMutableAddressor(v21);
  DOCSmartFolderManager.register(event:)(v20);

  v23 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
  sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
  v24 = Array._bridgeToObjectiveC()().super.isa;
  v25 = objc_msgSend(v23, "eligibleActionsForDroppingItems:underItem:", v24, v16);

  type metadata accessor for FPAction(0);
  v27 = v26;
  v28 = sub_10005A360((unint64_t *)&qword_1006418B0, (uint64_t (*)(uint64_t))type metadata accessor for FPAction, (uint64_t)&unk_1004D69D0);
  v29 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v25, v27, v28);

  sub_1003FACEC(a1, (uint64_t)v16, v29, a2, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v29).n128_u64[0];
  return result;
}

void sub_1000DE620(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Strong;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  NSString v17;
  Class isa;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  Class v29;
  void *v30;
  uint64_t v31;
  _QWORD aBlock[5];
  uint64_t v34;
  _BYTE v35[24];

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v35, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (!Strong)
    return;
  v11 = (void *)Strong;
  v12 = objc_msgSend(*(id *)(Strong + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration), "hostIdentifier");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v14 = v13;

  v15 = a3;
  Date.init()(v15);
  v16 = objc_allocWithZone((Class)DOCHotFolderEvent);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v19 = objc_msgSend(v16, "initWithAppBundleIdentifier:folderItem:type:lastUsedDate:frecency:", v17, v15, 1, isa, 1.0);

  v20 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v21 = *(id *)DOCSmartFolderManager.sharedManager.unsafeMutableAddressor(v20);
  DOCSmartFolderManager.register(event:)(v19);

  if (!a1)
  {

    return;
  }
  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0)
      v31 = a1 & 0xFFFFFFFFFFFFFF8;
    else
      v31 = a1;
    swift_bridgeObjectRetain(a1);
    if (_CocoaArrayWrapper.endIndex.getter(v31))
      goto LABEL_5;
LABEL_14:

    swift_bridgeObjectRelease(a1);
    return;
  }
  v22 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v22)
    goto LABEL_14;
LABEL_5:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_8;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v23 = *(id *)(a1 + 32);
LABEL_8:
    v24 = v23;
    swift_bridgeObjectRelease(a1);
    v25 = sub_10006922C((uint64_t *)&unk_1006441A0);
    v26 = swift_allocObject(v25, 40, 7);
    *(_OWORD *)(v26 + 16) = xmmword_1004D9B40;
    *(_QWORD *)(v26 + 32) = v24;
    aBlock[0] = v26;
    specialized Array._endMutation()(v26);
    v27 = aBlock[0];
    sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    v28 = v24;
    v29 = Array._bridgeToObjectiveC()().super.isa;
    aBlock[4] = DOCSplitBrowserViewController.didCommitPreview(of:);
    v34 = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10016C02C;
    aBlock[3] = &unk_1005C2980;
    v30 = _Block_copy(aBlock);
    swift_release(v34);
    objc_msgSend(v11, "revealWithItems:selectEvenIfVisible:completionBlock:", v29, 0, v30);
    _Block_release(v30);

    swift_bridgeObjectRelease(v27);
    return;
  }
  __break(1u);
}

void DOCItemCollectionViewController.collectionView(_:canHandle:)(uint64_t a1, void *a2)
{
  sub_1000E21CC(a2);
}

void DOCItemCollectionViewController.collectionView(_:dropSessionDidUpdate:withDestinationIndexPath:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t ObjectType;
  uint64_t v56;
  char *v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  id v76;
  char v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t Available;
  id v87;
  char v88;
  id v89;
  Class isa;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t inited;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  id v101;
  id v102;
  id v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  id v121;
  id v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  _QWORD v145[5];
  char v146[40];
  char v147[64];
  __int128 v148;
  __int128 v149;
  char v150[32];

  v4 = v3;
  v8 = type metadata accessor for UTType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v144 = (char *)&v139 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10006922C((uint64_t *)&unk_100642710);
  __chkstk_darwin(v11);
  v13 = (char *)&v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v139 - v15;
  sub_1000E26E0(a3, (uint64_t)&v139 - v15);
  v17 = v3 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_lastDropIndexPath;
  swift_beginAccess(v17, v150, 0, 0);
  sub_1000E26E0(v17, (uint64_t)v13);
  swift_beginAccess(v17, &v148, 33, 0);
  sub_1000E2728((uint64_t)v16, v17);
  swift_endAccess(&v148);
  sub_100175C20((uint64_t)v13);
  sub_10000CB4C((uint64_t)v16, (uint64_t *)&unk_100642710);
  sub_10000CB4C((uint64_t)v13, (uint64_t *)&unk_100642710);
  v18 = *(_QWORD *)(v4 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_enumerationIdentifier);
  if (!v18)
    goto LABEL_22;
  v143 = v9;
  v19 = v8;
  v20 = a3;
  v21 = DOCSpotlightEnumeratedItemIdentifierRecentDocuments;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v24 = v23;
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  if (v22 == v25 && v24 == v26)
  {
    swift_bridgeObjectRelease_n(v24, 2);
    goto LABEL_12;
  }
  v28 = v26;
  v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, v25, v26, 0);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v28);
  if ((v29 & 1) != 0)
  {
LABEL_12:
    v38 = type metadata accessor for IndexPath(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v16, 1, 1, v38);
    sub_1000DDCCC((uint64_t)v16);
    sub_10000CB4C((uint64_t)v16, (uint64_t *)&unk_100642710);
    objc_msgSend(objc_allocWithZone((Class)UICollectionViewDropProposal), "initWithDropOperation:intent:", objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC5Files33DOCBrowserContainedViewController_configuration), "isPopoverOrWidget") ^ 1, 0);
    return;
  }
  v30 = DOCSpotlightEnumeratedItemIdentifierTrashedItems;
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v33 = v32;
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v36 = v34;
  if (v31 == v35 && v33 == v34)
  {
    v37 = v33;
LABEL_10:
    swift_bridgeObjectRelease_n(v37, 2);
LABEL_14:
    v40 = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    swift_getObjectType(a2);
    LOBYTE(v40) = sub_1003F7F94((uint64_t)a2, (char **)v40);
    v41 = objc_allocWithZone((Class)UICollectionViewDropProposal);
    if ((v40 & 1) != 0)
      v42 = 3;
    else
      v42 = 1;
    objc_msgSend(v41, "initWithDropOperation:intent:", v42, 0);
    v43 = type metadata accessor for IndexPath(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v16, 1, 1, v43);
    sub_1000DDCCC((uint64_t)v16);
    sub_10000CB4C((uint64_t)v16, (uint64_t *)&unk_100642710);
    return;
  }
  v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v35, v34, 0);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v36);
  if ((v39 & 1) != 0)
    goto LABEL_14;
  v44 = DOCSpotlightEnumeratedItemIdentifierTaggedItems;
  v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v47 = v46;
  v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  v50 = v48;
  if (v45 == v49 && v47 == v48)
  {
    v37 = v47;
    goto LABEL_10;
  }
  v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v47, v49, v48, 0);
  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v50);
  a3 = v20;
  v8 = v19;
  v9 = v143;
  if ((v51 & 1) != 0)
    goto LABEL_14;
LABEL_22:
  sub_1000DCD7C(a3, a1, a2);
  if (!v52)
  {
LABEL_28:
    v61 = *(id *)DOCLog.UI.unsafeMutableAddressor(v52);
    v62 = static os_log_type_t.debug.getter(v61);
    v63 = sub_10006922C((uint64_t *)&unk_100644560);
    v64 = swift_allocObject(v63, 72, 7);
    *(_OWORD *)(v64 + 16) = xmmword_1004D9670;
    *(_QWORD *)(v64 + 56) = &type metadata for String;
    *(_QWORD *)(v64 + 64) = sub_10006A638();
    *(_QWORD *)(v64 + 32) = 0xD000000000000040;
    *(_QWORD *)(v64 + 40) = 0x800000010050E0A0;
    os_log(_:dso:log:type:_:)("%@: no eligible drop target", 27, 2, &_mh_execute_header, v61, v62, v64);

    swift_bridgeObjectRelease(v64);
    v65 = type metadata accessor for IndexPath(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v16, 1, 1, v65);
    sub_1000DDCCC((uint64_t)v16);
    sub_10000CB4C((uint64_t)v16, (uint64_t *)&unk_100642710);
    objc_msgSend(objc_allocWithZone((Class)UICollectionViewDropProposal), "initWithDropOperation:intent:", 1, 0);
    return;
  }
  v53 = v52;
  v54 = a3;
  v143 = v8;
  ObjectType = swift_getObjectType(v52);
  v56 = DOCNode.fpfs_syncFetchFPItem()(ObjectType);
  if (!v56)
  {
    swift_unknownObjectRelease(v53);
    goto LABEL_28;
  }
  v57 = (char *)v56;
  v141 = swift_getObjectType(a2);
  v58 = objc_msgSend(a2, "localDragSession");
  if (!v58)
  {
    v148 = 0u;
    v149 = 0u;
LABEL_36:
    sub_10000CB4C((uint64_t)&v148, &qword_100642730);
    goto LABEL_37;
  }
  v59 = v58;
  v60 = objc_msgSend(v58, "localContext");
  swift_unknownObjectRelease(v59);
  if (v60)
  {
    _bridgeAnyObjectToAny(_:)(v145, v60);
    swift_unknownObjectRelease(v60);
  }
  else
  {
    memset(v145, 0, 32);
  }
  sub_10007EBDC((uint64_t)v145, (uint64_t)&v148);
  if (!*((_QWORD *)&v149 + 1))
    goto LABEL_36;
  v66 = sub_10006922C((uint64_t *)&unk_1006424B0);
  if ((swift_dynamicCast(v145, &v148, (char *)&type metadata for Any + 8, v66, 6) & 1) != 0)
  {
    v67 = v145[0];
    v68 = objc_opt_self(FPItem);
    v142 = v67;
    v69 = swift_dynamicCastObjCClass(v67, v68);
    if (v69)
    {
      v70 = v69;
      sub_10004F2F0(0, (unint64_t *)&qword_100642430, NSObject_ptr);
      v71 = v142;
      swift_unknownObjectRetain(v142);
      LOBYTE(v70) = static NSObject.== infix(_:_:)(v70, v57);
      swift_unknownObjectRelease(v71);
      if ((v70 & 1) != 0)
      {
LABEL_35:
        v72 = type metadata accessor for IndexPath(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v16, 1, 1, v72);
        sub_1000DDCCC((uint64_t)v16);
        sub_10000CB4C((uint64_t)v16, (uint64_t *)&unk_100642710);
        objc_msgSend(objc_allocWithZone((Class)UICollectionViewDropProposal), "initWithDropOperation:intent:", 0, 0);
        swift_unknownObjectRelease(v53);

        swift_unknownObjectRelease(v142);
        return;
      }
    }
    else
    {
      v113 = objc_opt_self(FINode);
      v114 = swift_dynamicCastObjCClass(v142, v113);
      if (v114)
      {
        v115 = v114;
        v116 = objc_opt_self(FINode);
        v117 = swift_dynamicCastObjCClass(v53, v116);
        if (v117)
        {
          v118 = v117;
          v140 = sub_10004F2F0(0, (unint64_t *)&unk_100641970, FINode_ptr);
          v119 = v142;
          swift_unknownObjectRetain(v142);
          swift_unknownObjectRetain(v53);
          v120 = static NSObject.== infix(_:_:)(v115, v118);
          swift_unknownObjectRelease(v119);
          swift_unknownObjectRelease(v53);
          if ((v120 & 1) != 0)
            goto LABEL_35;
        }
      }
    }
    swift_unknownObjectRelease(v142);
  }
LABEL_37:
  v73 = *(_QWORD *)(v4 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (!v73)
  {
LABEL_91:
    __break(1u);
    return;
  }
  v142 = v54;
  v74 = v73 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type;
  if ((*(_BYTE *)(v74 + 16) & 1) != 0)
  {
    v75 = *(void **)(*(_QWORD *)v74 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode);
    swift_unknownObjectRetain(v75);
  }
  else
  {
    v75 = *(void **)(v74 + 8);
    swift_unknownObjectRetain(v75);
    if (!v75)
      goto LABEL_44;
  }
  v76 = objc_msgSend(v75, "fpfs_fpItem");
  swift_unknownObjectRelease(v75);
  if (v76)
  {
    sub_10004F2F0(0, (unint64_t *)&qword_100642430, NSObject_ptr);
    v77 = static NSObject.== infix(_:_:)(v57, v76);

    if ((v77 & 1) != 0)
    {
      LODWORD(v141) = 0;
      goto LABEL_45;
    }
  }
LABEL_44:
  LODWORD(v141) = 1;
LABEL_45:
  v78 = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
  v79 = v144;
  static UTType.item.getter(v78);
  v80 = (uint64_t)sub_1003F8940(a2, (uint64_t)v79);
  (*(void (**)(id, unint64_t))(v9 + 8))(v79, v143);
  v81 = v142;
  if (!((unint64_t)v80 >> 62))
  {
    if (*(_QWORD *)((v80 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_47;
LABEL_82:
    v144 = v57;
    swift_bridgeObjectRelease(v80);
    goto LABEL_83;
  }
  if (v80 < 0)
    v135 = v80;
  else
    v135 = v80 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v80);
  v136 = _CocoaArrayWrapper.endIndex.getter(v135);
  swift_bridgeObjectRelease(v80);
  if (!v136)
    goto LABEL_82;
LABEL_47:
  if ((sub_1000DFC48((uint64_t)v57, v80, (uint64_t)&qword_1006419B0, FPItem_ptr) & 1) != 0)
  {
    swift_bridgeObjectRelease(v80);
    v82 = type metadata accessor for IndexPath(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v16, 1, 1, v82);
    sub_1000DDCCC((uint64_t)v16);
    sub_10000CB4C((uint64_t)v16, (uint64_t *)&unk_100642710);
    objc_msgSend(objc_allocWithZone((Class)UICollectionViewDropProposal), "initWithDropOperation:intent:", 0, 0);
    swift_unknownObjectRelease(v53);

    return;
  }
  v83 = v57;
  v84 = *(_QWORD *)(v4 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8);
  swift_bridgeObjectRetain(v84);
  v85 = sub_10006922C((uint64_t *)&unk_1006424B0);
  Available = Array<A>.fpfs_syncFetchAvailableFPItems()(v84, v85);
  swift_bridgeObjectRelease(v84);
  if ((v80 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain(v80);
    v87 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v80);
    swift_bridgeObjectRelease(v80);
  }
  else
  {
    if (!*(_QWORD *)((v80 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
    v87 = *(id *)(v80 + 32);
  }
  v88 = sub_1000DFC48((uint64_t)v87, Available, (uint64_t)&qword_1006419B0, FPItem_ptr);
  swift_bridgeObjectRelease(Available);
  if (!(v141 & 1 | ((v88 & 1) == 0)))
  {
    swift_bridgeObjectRelease(v80);
    objc_msgSend(objc_allocWithZone((Class)UICollectionViewDropProposal), "initWithDropOperation:intent:", 1, 0);

    swift_unknownObjectRelease(v53);
    return;
  }

  v89 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
  isa = Array._bridgeToObjectiveC()().super.isa;
  v144 = v83;
  v91 = objc_msgSend(v89, "eligibleActionsForDroppingItems:underItem:", isa, v83);

  type metadata accessor for FPAction(0);
  v143 = v80 & 0xC000000000000001;
  v93 = v92;
  v94 = sub_10005A360((unint64_t *)&qword_1006418B0, (uint64_t (*)(uint64_t))type metadata accessor for FPAction, (uint64_t)&unk_1004D69D0);
  v140 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v91, v93, v94);

  v95 = sub_10006922C((uint64_t *)&unk_10064FE00);
  inited = swift_initStackObject(v95, v147);
  *(_OWORD *)(inited + 16) = xmmword_1004D9B50;
  v97 = (void *)FPActionTrash;
  *(_QWORD *)(inited + 32) = FPActionTrash;
  v98 = (void *)FPActionUntrash;
  v99 = (void *)FPActionReparent;
  *(_QWORD *)(inited + 40) = FPActionUntrash;
  *(_QWORD *)(inited + 48) = v99;
  v100 = (void *)FPActionTag;
  *(_QWORD *)(inited + 56) = FPActionTag;
  v101 = v97;
  v102 = v98;
  v103 = v99;
  v104 = v100;
  sub_1003FC7C0(inited);
  v106 = v105;
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 4, v93);
  v107 = swift_initStackObject(v95, v146);
  *(_OWORD *)(v107 + 16) = xmmword_1004D9670;
  v108 = (void *)FPActionCopy;
  *(_QWORD *)(v107 + 32) = FPActionCopy;
  v109 = v108;
  sub_1003FC7C0(v107);
  v111 = v110;
  swift_setDeallocating(v107);
  swift_arrayDestroy(v107 + 32, 1, v93);
  if (v143)
  {
    v112 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v80);
    v81 = v142;
    goto LABEL_62;
  }
  v81 = v142;
  if (!*(_QWORD *)((v80 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_90;
  v112 = *(id *)(v80 + 32);
LABEL_62:
  v121 = v144;
  swift_bridgeObjectRelease(v80);
  v122 = objc_msgSend((id)objc_opt_self(DOCManagedPermission), "defaultPermission");
  v123 = objc_msgSend(v122, "canItem:performAction:item:", v112, 1, v121);

  v124 = v140;
  swift_bridgeObjectRetain(v140);
  v125 = sub_1000E077C(v106, v124);
  swift_bridgeObjectRelease(v106);
  v126 = *(_QWORD *)(v125 + 16);
  swift_release(v125);
  if (!v126)
  {
    v130 = sub_1000E077C(v111, v124);
    swift_bridgeObjectRelease(v111);
    v131 = *(_QWORD *)(v130 + 16);
    swift_release(v130);
    if (v131)
    {
      v132 = v141;
      sub_1000DF914(v81, v141);
      if (v123)
        v133 = 2;
      else
        v133 = 1;
      if (v132)
        v134 = 2;
      else
        v134 = 0;
      objc_msgSend(objc_allocWithZone((Class)UICollectionViewDropProposal), "initWithDropOperation:intent:", v133, v134);
LABEL_87:
      swift_unknownObjectRelease(v53);

      return;
    }
LABEL_83:
    v137 = v141;
    sub_1000DF914(v81, v141);
    if (v137)
      v138 = 2;
    else
      v138 = 0;
    objc_msgSend(objc_allocWithZone((Class)UICollectionViewDropProposal), "initWithDropOperation:intent:", 2, v138);
    goto LABEL_87;
  }
  swift_bridgeObjectRelease(v111);
  swift_bridgeObjectRelease(v124);
  v127 = v141;
  sub_1000DF914(v81, v141);
  if (v123)
    v128 = 3;
  else
    v128 = 1;
  if (v127)
    v129 = 2;
  else
    v129 = 0;
  objc_msgSend(objc_allocWithZone((Class)UICollectionViewDropProposal), "initWithDropOperation:intent:", v128, v129);
  swift_unknownObjectRelease(v53);

}

uint64_t sub_1000DF914(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v4 = sub_10006922C((uint64_t *)&unk_100642710);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - v8;
  v10 = type metadata accessor for IndexPath(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E26E0(a1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10000CB4C((uint64_t)v9, (uint64_t *)&unk_100642710);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    if ((a2 & 1) != 0)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v6, v13, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
      sub_1000DDCCC((uint64_t)v6);
      sub_10000CB4C((uint64_t)v6, (uint64_t *)&unk_100642710);
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6, 1, 1, v10);
  sub_1000DDCCC((uint64_t)v6);
  return sub_10000CB4C((uint64_t)v6, (uint64_t *)&unk_100642710);
}

uint64_t sub_1000DFACC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(a2 + 32));
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v5 == v8 && v7 == v9)
  {
LABEL_20:
    swift_bridgeObjectRelease_n(v7, 2);
    return 1;
  }
  v11 = v9;
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v7);
  result = swift_bridgeObjectRelease(v11);
  if ((v12 & 1) != 0)
  {
LABEL_7:
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (v2 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  v14 = 5;
  while (1)
  {
    v15 = v14 - 3;
    if (__OFADD__(v14 - 4, 1))
      break;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(a2 + 8 * v14));
    v7 = v17;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v16 == v18 && v7 == v19)
    {
      swift_bridgeObjectRelease(a2);
      goto LABEL_20;
    }
    v21 = v19;
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v7, v18, v19, 0);
    swift_bridgeObjectRelease(v7);
    result = swift_bridgeObjectRelease(v21);
    if ((v22 & 1) != 0)
      goto LABEL_7;
    ++v14;
    if (v15 == v2)
      goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000DFC20(uint64_t a1, uint64_t a2)
{
  return sub_1000DFC48(a1, a2, (uint64_t)&unk_1006428D0, UICollectionViewCell_ptr);
}

uint64_t sub_1000DFC34(uint64_t a1, uint64_t a2)
{
  return sub_1000DFC48(a1, a2, (uint64_t)&qword_1006419B0, FPItem_ptr);
}

uint64_t sub_1000DFC48(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;

  if ((unint64_t)a2 >> 62)
    goto LABEL_20;
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    v9 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v10 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_5:
      v11 = v10;
      a4 = (_QWORD *)sub_10004F2F0(0, (unint64_t *)a3, a4);
      a3 = static NSObject.== infix(_:_:)(v11, a1);

      if ((a3 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (v8 == 1)
        goto LABEL_18;
      if (v9)
        break;
      v9 = 5;
      while (1)
      {
        v17 = v9 - 3;
        if (__OFADD__(v9 - 4, 1))
          break;
        a3 = (uint64_t)*(id *)(a2 + 8 * v9);
        v18 = static NSObject.== infix(_:_:)(a3, a1);

        if ((v18 & 1) != 0)
          goto LABEL_6;
        ++v9;
        if (v17 == v8)
          goto LABEL_18;
      }
      __break(1u);
    }
    a3 = 1;
    while (1)
    {
      v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(a3, a2);
      v14 = a3 + 1;
      if (__OFADD__(a3, 1))
        break;
      v15 = v13;
      v16 = static NSObject.== infix(_:_:)(v13, a1);
      swift_unknownObjectRelease(v15);
      if ((v16 & 1) != 0)
        goto LABEL_6;
      ++a3;
      if (v14 == v8)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    if (a2 < 0)
      v19 = a2;
    else
      v19 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
LABEL_18:
  swift_bridgeObjectRelease(a2);
  return 0;
}

uint64_t sub_1000DFDD0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000DFE94(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

void sub_1000DFEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  int64_t v5;
  char v6;
  uint64_t v7;
  void *v11;
  id v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  char v17;
  BOOL v18;
  id v19;
  char v20;

  v5 = a5 >> 1;
  if (a5 >> 1 != a4)
  {
    v6 = a5;
    v7 = a4;
    sub_10004F2F0(0, (unint64_t *)&unk_1006442E0, DOCConcreteLocation_ptr);
    if (v5 > v7)
    {
      v11 = *(void **)(a3 + 8 * v7);
      swift_unknownObjectRetain(a2);
      v12 = v11;
      v13 = static NSObject.== infix(_:_:)(v12, a1);

      if ((v13 & 1) != 0 || v7 + 1 == v5)
      {
LABEL_5:
        swift_unknownObjectRelease(a2);
        return;
      }
      v14 = v5 - 2;
      v15 = a3 + 8;
      if ((v6 & 1) != 0)
      {
        while (v7 + 1 < v5)
        {
          v19 = *(id *)(v15 + 8 * v7);
          v20 = static NSObject.== infix(_:_:)(v19, a1);

          if ((v20 & 1) == 0)
          {
            v18 = v14 == v7++;
            if (!v18)
              continue;
          }
          goto LABEL_5;
        }
      }
      else
      {
        while (v7 + 1 < v5)
        {
          v16 = *(id *)(v15 + 8 * v7);
          v17 = static NSObject.== infix(_:_:)(v16, a1);

          if ((v17 & 1) == 0)
          {
            v18 = v14 == v7++;
            if (!v18)
              continue;
          }
          goto LABEL_5;
        }
        __break(1u);
      }
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_1000E0058(uint64_t a1, uint64_t a2)
{
  return sub_1000DFC48(a1, a2, (uint64_t)&unk_1006428C0, FPItemID_ptr);
}

uint64_t sub_1000E006C(uint64_t a1, uint64_t a2)
{
  return sub_1000897D0(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for DOCBrowserContainerController);
}

uint64_t sub_1000E0078(uint64_t a1, uint64_t a2)
{
  return sub_1000897D0(a1, a2, type metadata accessor for DOCItemCollectionViewController);
}

double DOCItemCollectionViewController.collectionView(_:dropSessionDidEnter:)(uint64_t a1, void *a2)
{
  return sub_1000E2770(a2);
}

void sub_1000E01B0(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  id v8;
  id v9;

  v8 = a3;
  swift_unknownObjectRetain(a4);
  v9 = a1;
  a5(a4);

  swift_unknownObjectRelease(a4);
}

uint64_t DOCItemCollectionViewController.collectionView(_:dropSessionDidEnd:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDropSession);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDropSession) = 0;
  return swift_unknownObjectRelease(v1);
}

void sub_1000E0260(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  id v8;
  id v9;

  v8 = a3;
  swift_unknownObjectRetain(a4);
  v9 = a1;
  a5();

  swift_unknownObjectRelease(a4);
}

uint64_t DOCItemCollectionViewController._collectionView(_:dataOwnerFor:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_10006922C((uint64_t *)&unk_100642710);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E26E0(a3, (uint64_t)v6);
  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v10 = sub_1000E1318((uint64_t)v6);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    if (!v10)
      return 0;
    swift_getObjectType(v10);
    v11 = sub_1003F4BFC();
    swift_unknownObjectRelease(v10);
    return v11;
  }
  return result;
}

void *DOCItemCollectionViewController._collectionView(_:dataOwnerFor:withDestinationIndexPath:)(void *result, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result)
  {
    sub_1000DCD7C(a3, result, a2);
    if (v3)
    {
      v4 = v3;
      swift_getObjectType(v3);
      v5 = sub_1003F4BFC();
      swift_unknownObjectRelease(v4);
      return (void *)v5;
    }
    else
    {
      v6 = *(id *)DOCLog.UI.unsafeMutableAddressor(0);
      v7 = static os_log_type_t.debug.getter(v6);
      v8 = sub_10006922C((uint64_t *)&unk_100644560);
      v9 = swift_allocObject(v8, 72, 7);
      *(_OWORD *)(v9 + 16) = xmmword_1004D9670;
      *(_QWORD *)(v9 + 56) = &type metadata for String;
      *(_QWORD *)(v9 + 64) = sub_10006A638();
      *(_QWORD *)(v9 + 32) = 0xD000000000000039;
      *(_QWORD *)(v9 + 40) = 0x800000010050E0F0;
      os_log(_:dso:log:type:_:)("%@: no eligible drop target", 27, 2, &_mh_execute_header, v6, v7, v9);

      swift_bridgeObjectRelease(v9);
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E077C(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;

  v3 = isStackAllocationSafe;
  v4 = *(_BYTE *)(a2 + 32);
  v5 = v4 & 0x3F;
  v6 = (1 << v4) + 63;
  v7 = v6 >> 6;
  v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    sub_1000E08FC((unint64_t *)((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a2, v3);
    v10 = v9;
    swift_release(a2);
  }
  else
  {
    v11 = (void *)swift_slowAlloc(v8, -1);
    bzero(v11, v8);
    sub_1000E08FC((unint64_t *)v11, v7, a2, v3);
    v10 = v12;
    swift_release(a2);
    swift_slowDealloc(v11, -1, -1);
  }
  return v10;
}

void sub_1000E08FC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t i;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char v46;
  BOOL v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  Swift::Int v64;
  Swift::Int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  char v83;
  uint64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  int64_t v91;
  uint64_t v92;
  id v93;
  int64_t v94;
  int64_t v95;
  _QWORD v97[9];
  uint64_t v98;

  v4 = a4;
  v5 = a3;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a4 + 16);
  v98 = a4;
  if (v7 < v6)
  {
    v8 = 0;
    v86 = a4 + 56;
    v9 = 1 << *(_BYTE *)(a4 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(a4 + 56);
    v87 = (unint64_t)(v9 + 63) >> 6;
    v89 = 0;
    v12 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v11)
        {
          v92 = (v11 - 1) & v11;
          v94 = v8;
          v13 = __clz(__rbit64(v11)) | (v8 << 6);
        }
        else
        {
          v14 = v8 + 1;
          if (__OFADD__(v8, 1))
          {
            __break(1u);
            goto LABEL_85;
          }
          if (v14 >= v87)
            goto LABEL_83;
          v15 = *(_QWORD *)(v86 + 8 * v14);
          v16 = v8 + 1;
          if (!v15)
          {
            v16 = v8 + 2;
            if (v8 + 2 >= v87)
              goto LABEL_83;
            v15 = *(_QWORD *)(v86 + 8 * v16);
            if (!v15)
            {
              v16 = v8 + 3;
              if (v8 + 3 >= v87)
                goto LABEL_83;
              v15 = *(_QWORD *)(v86 + 8 * v16);
              if (!v15)
              {
                v17 = v8 + 4;
                if (v8 + 4 >= v87)
                  goto LABEL_83;
                v15 = *(_QWORD *)(v86 + 8 * v17);
                if (!v15)
                {
                  while (1)
                  {
                    v16 = v17 + 1;
                    if (__OFADD__(v17, 1))
                      goto LABEL_87;
                    if (v16 >= v87)
                      goto LABEL_83;
                    v15 = *(_QWORD *)(v86 + 8 * v16);
                    ++v17;
                    if (v15)
                      goto LABEL_22;
                  }
                }
                v16 = v8 + 4;
              }
            }
          }
LABEL_22:
          v92 = (v15 - 1) & v15;
          v94 = v16;
          v13 = __clz(__rbit64(v15)) + (v16 << 6);
        }
        v18 = *(void **)(*(_QWORD *)(v4 + 48) + 8 * v13);
        v19 = *(_QWORD *)(v5 + 40);
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        v22 = v21;
        Hasher.init(_seed:)(v97, v19);
        v90 = v18;
        String.hash(into:)(v97, v20, v22);
        v23 = Hasher._finalize()();
        swift_bridgeObjectRelease(v22);
        v24 = -1 << *(_BYTE *)(v5 + 32);
        v25 = v23 & ~v24;
        v26 = v25 >> 6;
        v27 = 1 << v25;
        if (((1 << v25) & *(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
          break;
LABEL_6:

        v8 = v94;
        v5 = a3;
        v4 = v98;
        v11 = v92;
      }
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v25));
      v30 = v29;
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      if (v28 == v31 && v30 == v32)
      {
        swift_bridgeObjectRelease_n(v30, 2);
      }
      else
      {
        v34 = v32;
        v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v31, v32, 0);
        swift_bridgeObjectRelease(v30);
        swift_bridgeObjectRelease(v34);
        if ((v35 & 1) == 0)
        {
          v36 = ~v24;
          for (i = v25 + 1; ; i = v38 + 1)
          {
            v38 = i & v36;
            if (((*(_QWORD *)(v12 + (((i & v36) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v36)) & 1) == 0)
              break;
            v5 = a3;
            v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v38));
            v41 = v40;
            v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
            if (v39 == v42 && v41 == v43)
            {
              swift_bridgeObjectRelease_n(v41, 2);
LABEL_38:

              v26 = v38 >> 6;
              v27 = 1 << v38;
              goto LABEL_39;
            }
            v45 = v43;
            v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v41, v42, v43, 0);
            swift_bridgeObjectRelease(v41);
            swift_bridgeObjectRelease(v45);
            if ((v46 & 1) != 0)
              goto LABEL_38;
          }
          goto LABEL_6;
        }
      }

      v5 = a3;
LABEL_39:
      a1[v26] |= v27;
      v47 = __OFADD__(v89++, 1);
      v4 = v98;
      v11 = v92;
      v8 = v94;
      if (v47)
        goto LABEL_86;
    }
  }
  v48 = 0;
  v88 = a3 + 56;
  v89 = 0;
  v49 = 1 << *(_BYTE *)(a3 + 32);
  if (v49 < 64)
    v50 = ~(-1 << v49);
  else
    v50 = -1;
  v51 = v50 & *(_QWORD *)(a3 + 56);
  v91 = (unint64_t)(v49 + 63) >> 6;
  v52 = a4 + 56;
  while (1)
  {
    if (v51)
    {
      v53 = __clz(__rbit64(v51));
      v51 &= v51 - 1;
      v95 = v48;
      v54 = v53 | (v48 << 6);
      goto LABEL_65;
    }
    v55 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    if (v55 >= v91)
      goto LABEL_83;
    v56 = *(_QWORD *)(v88 + 8 * v55);
    v57 = v48 + 1;
    if (!v56)
    {
      v57 = v48 + 2;
      if (v48 + 2 >= v91)
        goto LABEL_83;
      v56 = *(_QWORD *)(v88 + 8 * v57);
      if (!v56)
      {
        v57 = v48 + 3;
        if (v48 + 3 >= v91)
          goto LABEL_83;
        v56 = *(_QWORD *)(v88 + 8 * v57);
        if (!v56)
          break;
      }
    }
LABEL_64:
    v51 = (v56 - 1) & v56;
    v95 = v57;
    v54 = __clz(__rbit64(v56)) + (v57 << 6);
LABEL_65:
    v59 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v54);
    v60 = *(_QWORD *)(v4 + 40);
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    v63 = v62;
    Hasher.init(_seed:)(v97, v60);
    v93 = v59;
    String.hash(into:)(v97, v61, v63);
    v64 = Hasher._finalize()();
    v4 = v98;
    v65 = v64;
    swift_bridgeObjectRelease(v63);
    v66 = -1 << *(_BYTE *)(v4 + 32);
    v67 = v65 & ~v66;
    if (((*(_QWORD *)(v52 + ((v67 >> 3) & 0xFFFFFFFFFFFFF8)) >> v67) & 1) == 0)
      goto LABEL_48;
    v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v67));
    v70 = v69;
    v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    if (v68 == v71 && v70 == v72)
    {
LABEL_79:
      swift_bridgeObjectRelease_n(v70, 2);
      v4 = v98;
      goto LABEL_80;
    }
    v74 = v72;
    v75 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v70, v71, v72, 0);
    swift_bridgeObjectRelease(v70);
    swift_bridgeObjectRelease(v74);
    v4 = v98;
    if ((v75 & 1) != 0)
    {
LABEL_80:

      *(unint64_t *)((char *)a1 + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v54;
      v47 = __OFADD__(v89++, 1);
      v48 = v95;
      v5 = a3;
      if (v47)
      {
        __break(1u);
LABEL_83:
        swift_retain();
        sub_1004AC284(a1, a2, v89, v5);
        return;
      }
    }
    else
    {
      v76 = ~v66;
      while (1)
      {
        v67 = (v67 + 1) & v76;
        if (((*(_QWORD *)(v52 + ((v67 >> 3) & 0xFFFFFFFFFFFFF8)) >> v67) & 1) == 0)
          break;
        v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v67));
        v70 = v78;
        v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
        if (v77 == v79 && v70 == v80)
          goto LABEL_79;
        v82 = v80;
        v83 = _stringCompareWithSmolCheck(_:_:expecting:)(v77, v70, v79, v80, 0);
        swift_bridgeObjectRelease(v70);
        swift_bridgeObjectRelease(v82);
        v4 = v98;
        if ((v83 & 1) != 0)
          goto LABEL_80;
      }
LABEL_48:

      v48 = v95;
      v5 = a3;
    }
  }
  v58 = v48 + 4;
  if (v48 + 4 >= v91)
    goto LABEL_83;
  v56 = *(_QWORD *)(v88 + 8 * v58);
  if (v56)
  {
    v57 = v48 + 4;
    goto LABEL_64;
  }
  while (1)
  {
    v57 = v58 + 1;
    if (__OFADD__(v58, 1))
      break;
    if (v57 >= v91)
      goto LABEL_83;
    v56 = *(_QWORD *)(v88 + 8 * v57);
    ++v58;
    if (v56)
      goto LABEL_64;
  }
LABEL_88:
  __break(1u);
}

void (*sub_1000E0F80(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1000E1100(v6, a2, a3);
  return sub_1000E0FD4;
}

void (*sub_1000E0FD8(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_1000E116C(v6, a2, a3);
  return sub_1000E0FD4;
}

void (*sub_1000E102C(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_1000E11D8(v6, a2, a3);
  return sub_1000E0FD4;
}

void (*sub_1000E1080(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1000E1244(v6, a2, a3);
  return sub_1000E0FD4;
}

void sub_1000E10D4(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_1000E1100(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return j__s5Files39DOCFileProviderSyncStateHeaderViewModelC5StateOwxx;
  }
  __break(1u);
  return result;
}

uint64_t *sub_1000E116C(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_unknownObjectRetain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)j__s5Files20DOCNodeGoToCandidateVwxx;
  }
  __break(1u);
  return result;
}

uint64_t *sub_1000E11D8(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_unknownObjectRetain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)destroy for DOCNodeGoToCandidate;
  }
  __break(1u);
  return result;
}

void (*sub_1000E1244(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for DOCFileProviderSyncStateHeaderViewModel.State;
  }
  __break(1u);
  return result;
}

void destroy for DOCFileProviderSyncStateHeaderViewModel.State(id *a1)
{

}

uint64_t sub_1000E12B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  sub_10004F2F0(0, (unint64_t *)&unk_1006428D0, UICollectionViewCell_ptr);
  return static NSObject.== infix(_:_:)(v2, v3) & 1;
}

void *sub_1000E1318(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Class isa;
  void *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  _BYTE v42[12];
  unsigned int v43;

  v3 = sub_10006922C((uint64_t *)&unk_100642710);
  __chkstk_darwin(v3);
  v5 = &v42[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100195148(a1);
  if ((v10 & 1) != 0)
  {
    v11 = *(id *)DOCLog.UI.unsafeMutableAddressor(v10);
    v12 = static os_log_type_t.debug.getter(v11);
    v13 = sub_10006922C((uint64_t *)&unk_100644560);
    v14 = swift_allocObject(v13, 112, 7);
    *(_OWORD *)(v14 + 16) = xmmword_1004D4CE0;
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    *(_QWORD *)(v14 + 64) = sub_10006A638();
    *(_QWORD *)(v14 + 32) = 0xD000000000000018;
    *(_QWORD *)(v14 + 40) = 0x800000010050E1C0;
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v14 + 96) = sub_10004F2F0(0, &qword_1006428E0, NSIndexPath_ptr);
    *(_QWORD *)(v14 + 104) = sub_100083450((unint64_t *)&qword_1006428E8, &qword_1006428E0, NSIndexPath_ptr);
    *(_QWORD *)(v14 + 72) = isa;
    os_log(_:dso:log:type:_:)("%@: Can't drag the create button %@", 35, 2, &_mh_execute_header, v11, v12, v14);
LABEL_11:

    swift_bridgeObjectRelease(v14);
    return 0;
  }
  if (IndexPath.count.getter(v10) != 2)
    goto LABEL_8;
  result = *(void **)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (result)
  {
    if ((objc_msgSend(result, "isGathering") & 1) != 0
      || (*(_BYTE *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__showsCreateButton) & 1) == 0
      || (sub_100195148(a1) & 1) == 0)
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v9, v5, v6);
        v23 = (void *)sub_10017A754((uint64_t)v9, 0);
        if (v23)
        {
          v22 = v23;
          v24 = objc_msgSend(v23, "isReadable");
          if ((_DWORD)v24)
          {
            (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
            return v22;
          }
          v34 = *(id *)DOCLog.UI.unsafeMutableAddressor(v24);
          v43 = static os_log_type_t.debug.getter(v34);
          v35 = sub_10006922C((uint64_t *)&unk_100644560);
          v36 = swift_allocObject(v35, 112, 7);
          *(_OWORD *)(v36 + 16) = xmmword_1004D4CE0;
          *(_QWORD *)(v36 + 56) = &type metadata for String;
          v37 = sub_10006A638();
          *(_QWORD *)(v36 + 64) = v37;
          *(_QWORD *)(v36 + 32) = 0xD000000000000018;
          *(_QWORD *)(v36 + 40) = 0x800000010050E1C0;
          v38 = sub_10005A360(qword_100645550, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
          v39 = dispatch thunk of CustomStringConvertible.description.getter(v6, v38);
          *(_QWORD *)(v36 + 96) = &type metadata for String;
          *(_QWORD *)(v36 + 104) = v37;
          *(_QWORD *)(v36 + 72) = v39;
          *(_QWORD *)(v36 + 80) = v40;
          os_log(_:dso:log:type:_:)("%@: Item from index path %@ cannot be dragged because it is not readable", 72, 2, &_mh_execute_header, v34, v43, v36);
          swift_unknownObjectRelease(v22);

          v33 = v36;
        }
        else
        {
          v25 = *(id *)DOCLog.UI.unsafeMutableAddressor(0);
          v26 = static os_log_type_t.debug.getter(v25);
          v27 = sub_10006922C((uint64_t *)&unk_100644560);
          v28 = swift_allocObject(v27, 112, 7);
          *(_OWORD *)(v28 + 16) = xmmword_1004D4CE0;
          *(_QWORD *)(v28 + 56) = &type metadata for String;
          v29 = sub_10006A638();
          *(_QWORD *)(v28 + 64) = v29;
          *(_QWORD *)(v28 + 32) = 0xD000000000000018;
          *(_QWORD *)(v28 + 40) = 0x800000010050E1C0;
          v30 = sub_10005A360(qword_100645550, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
          v31 = dispatch thunk of CustomStringConvertible.description.getter(v6, v30);
          *(_QWORD *)(v28 + 96) = &type metadata for String;
          *(_QWORD *)(v28 + 104) = v29;
          *(_QWORD *)(v28 + 72) = v31;
          *(_QWORD *)(v28 + 80) = v32;
          os_log(_:dso:log:type:_:)("%@: Item cannot be resolved from index path %@", 46, 2, &_mh_execute_header, v25, v26, v28);

          v33 = v28;
        }
        v41 = swift_bridgeObjectRelease(v33);
        (*(void (**)(_BYTE *, uint64_t, __n128))(v7 + 8))(v9, v6, v41);
        return 0;
      }
      goto LABEL_10;
    }
LABEL_8:
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
LABEL_10:
    v17 = sub_10000CB4C((uint64_t)v5, (uint64_t *)&unk_100642710);
    v11 = *(id *)DOCLog.UI.unsafeMutableAddressor(v17);
    v18 = static os_log_type_t.debug.getter(v11);
    v19 = sub_10006922C((uint64_t *)&unk_100644560);
    v14 = swift_allocObject(v19, 112, 7);
    *(_OWORD *)(v14 + 16) = xmmword_1004D4CE0;
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    v20 = sub_10006A638();
    *(_QWORD *)(v14 + 64) = v20;
    *(_QWORD *)(v14 + 32) = 0xD000000000000018;
    *(_QWORD *)(v14 + 40) = 0x800000010050E1C0;
    v21 = IndexPath.item.getter(v20);
    *(_QWORD *)(v14 + 96) = &type metadata for Int;
    *(_QWORD *)(v14 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v14 + 72) = v21;
    os_log(_:dso:log:type:_:)("%@: no item to drag at %d", 25, 2, &_mh_execute_header, v11, v18, v14);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

id sub_1000E186C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_12;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v11))
  {
    v5 = 4;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v9 = objc_msgSend(v6, "localObject");
      v10 = objc_msgSend(a2, "isEqual:", v9);

      swift_unknownObjectRelease(v9);
      if ((v10 & 1) == 0)
      {
        ++v5;
        if (v8 != v4)
          continue;
      }
      goto LABEL_17;
    }
    __break(1u);
LABEL_12:
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  v10 = 0;
LABEL_17:
  swift_bridgeObjectRelease(a1);
  return v10;
}

void sub_1000E1990(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  v6 = *(id *)DOCLog.UI.unsafeMutableAddressor(a1);
  v7 = static os_log_type_t.debug.getter(v6);
  v8 = sub_10006922C((uint64_t *)&unk_100644560);
  v9 = swift_allocObject(v8, 112, 7);
  *(_OWORD *)(v9 + 16) = xmmword_1004D4CE0;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10006A638();
  *(_QWORD *)(v9 + 32) = 0xD000000000000027;
  *(_QWORD *)(v9 + 40) = 0x800000010050E400;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v9 + 96) = sub_10004F2F0(0, &qword_1006428E0, NSIndexPath_ptr);
  *(_QWORD *)(v9 + 104) = sub_100083450((unint64_t *)&qword_1006428E8, &qword_1006428E0, NSIndexPath_ptr);
  *(_QWORD *)(v9 + 72) = isa;
  os_log(_:dso:log:type:_:)("%@: %@", 6, 2, &_mh_execute_header, v6, v7, v9);

  swift_bridgeObjectRelease(v9);
  v11 = (uint64_t)sub_1000DC568(a1, a2);
  v12 = v11;
  if (!((unint64_t)v11 >> 62))
  {
    if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
      return;
    goto LABEL_3;
  }
  if (v11 < 0)
    v16 = v11;
  else
    v16 = v11 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v11);
  v17 = _CocoaArrayWrapper.endIndex.getter(v16);
  swift_bridgeObjectRelease(v12);
  if (v17)
  {
LABEL_3:
    v13 = *(_QWORD *)(v3 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
    if (v13)
    {
      v14 = v13 + OBJC_IVAR____TtC5Files17DOCNodeCollection_type;
      if ((*(_BYTE *)(v14 + 16) & 1) != 0)
        v15 = *(_QWORD *)(*(_QWORD *)v14 + OBJC_IVAR____TtC5Files23DOCFileSystemCollection_observedNode);
      else
        v15 = *(_QWORD *)(v14 + 8);
      swift_unknownObjectRetain(v15);
      objc_msgSend(a1, "setLocalContext:", v15);
      swift_unknownObjectRelease(v15);
    }
    else
    {
      __break(1u);
    }
  }
}

char *sub_1000E1B88(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  char **v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  char *result;
  char *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char **v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  _OWORD v35[2];
  _OWORD v36[2];
  _QWORD *v37;

  v4 = type metadata accessor for UTType(0);
  v32 = *(_QWORD *)(v4 - 8);
  v33 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(id *)DOCLog.UI.unsafeMutableAddressor(v7);
  v9 = static os_log_type_t.debug.getter(v8);
  v10 = sub_10006922C((uint64_t *)&unk_100644560);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1004D4CE0;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  *(_QWORD *)(v11 + 64) = sub_10006A638();
  *(_QWORD *)(v11 + 32) = 0xD00000000000002CLL;
  *(_QWORD *)(v11 + 40) = 0x800000010050E360;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v11 + 96) = sub_10004F2F0(0, &qword_1006428E0, NSIndexPath_ptr);
  *(_QWORD *)(v11 + 104) = sub_100083450((unint64_t *)&qword_1006428E8, &qword_1006428E0, NSIndexPath_ptr);
  *(_QWORD *)(v11 + 72) = isa;
  os_log(_:dso:log:type:_:)("%@: %@", 6, 2, &_mh_execute_header, v8, v9, v11);

  swift_bridgeObjectRelease(v11);
  v13 = (char **)sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
  swift_getObjectType(a1);
  v31 = v13;
  v14 = (char *)_swiftEmptyArrayStorage;
  if ((sub_1003F7F94((uint64_t)a1, v13) & 1) == 0)
    return v14;
  v15 = (uint64_t)sub_1000DC568(a1, a2);
  v37 = _swiftEmptyArrayStorage;
  if (!((unint64_t)v15 >> 62))
  {
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v16)
      goto LABEL_4;
    goto LABEL_20;
  }
LABEL_16:
  if (v15 < 0)
    v29 = v15;
  else
    v29 = v15 & 0xFFFFFFFFFFFFFF8;
  v16 = _CocoaArrayWrapper.endIndex.getter(v29);
  if (!v16)
  {
LABEL_20:
    swift_bridgeObjectRelease(v15);
    return v14;
  }
LABEL_4:
  v17 = 4;
  v14 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if ((v15 & 0xC000000000000001) != 0)
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 - 4, v15);
    else
      v20 = *(id *)(v15 + 8 * v17);
    v21 = v20;
    v22 = v17 - 3;
    if (__OFADD__(v17 - 4, 1))
    {
      __break(1u);
      goto LABEL_16;
    }
    result = (char *)objc_msgSend(v20, "localObject");
    if (!result)
      break;
    v24 = result;
    _bridgeAnyObjectToAny(_:)(v35, result);
    swift_unknownObjectRelease(v24);
    sub_100079B28(v35, v36);
    swift_dynamicCast(&v34, v36, (char *)&type metadata for Any + 8, v31, 7);
    v25 = v34;
    v26 = objc_msgSend(v34, "contentType");
    static UTType._unconditionallyBridgeFromObjectiveC(_:)(v26);

    LOBYTE(v26) = UTType.isFolderUTI.getter(v27);
    v28 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v6, v33);
    if ((v26 & 1) != 0)
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v28);
      v18 = v37[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
      v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v21);
      specialized ContiguousArray._endMutation()(v19);
    }
    ++v17;
    if (v22 == v16)
    {
      swift_bridgeObjectRelease(v15);
      return (char *)v37;
    }
  }
  __break(1u);
  return result;
}

void sub_1000E1EC8(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BYTE *v6;
  id v7;

  v3 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDragSession;
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDragSession];
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDragSession] = a1;
  swift_unknownObjectRetain_n(a1, 2);
  swift_unknownObjectRelease(v4);
  if (qword_100640E30 != -1)
    swift_once(&qword_100640E30, sub_1000B1788);
  objc_msgSend((id)qword_100672738, "setIsItemCollectionDragActive:", *(_QWORD *)&v1[v3] != 0);
  swift_unknownObjectRelease(a1);
  v5 = v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_isActiveDragSource];
  v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_isActiveDragSource] = 1;
  if (v5 != 1)
  {
    v7 = *(id *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_activeDragStrongReferenceToSelf];
    *(_QWORD *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_activeDragStrongReferenceToSelf] = v1;
    v6 = v1;

  }
}

id sub_1000E1FB8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  _BYTE v10[24];

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode);
  swift_beginAccess(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode, v10, 0, 0);
  v4 = 0;
  if (!*v3)
  {
    v5 = sub_100173CF8(a1);
    v6 = objc_msgSend(objc_allocWithZone((Class)UIDragPreviewParameters), "init");
    v7 = objc_msgSend(v5, "visiblePath");
    objc_msgSend(v6, "setVisiblePath:", v7);

    v4 = v6;
    v8 = objc_msgSend(v5, "backgroundColor");
    objc_msgSend(v4, "setBackgroundColor:", v8);

  }
  return v4;
}

void _s5Files31DOCItemCollectionViewControllerC010collectionD0_17dragSessionDidEndySo012UICollectionD0C_So06UIDragH0_ptF_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  void *v4;

  v1 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDragSession;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDragSession);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDragSession) = 0;
  swift_unknownObjectRelease(v2);
  if (qword_100640E30 != -1)
    swift_once(&qword_100640E30, sub_1000B1788);
  objc_msgSend((id)qword_100672738, "setIsItemCollectionDragActive:", *(_QWORD *)(v0 + v1) != 0);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_isSpringLoading) = 0;
  v3 = *(_BYTE *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_isActiveDragSource);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_isActiveDragSource) = 0;
  if ((v3 & 1) != 0)
  {
    v4 = *(void **)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_activeDragStrongReferenceToSelf);
    *(_QWORD *)(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_activeDragStrongReferenceToSelf) = 0;

  }
}

uint64_t sub_1000E2174()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E2198()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000E21C4(uint64_t a1)
{
  uint64_t v1;

  sub_1000DE620(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

void sub_1000E21CC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  __n128 v19;
  void *v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v2 = type metadata accessor for DOCDragPasteboardType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "items", v4);
  v8 = sub_10004F2F0(0, (unint64_t *)&unk_100648460, UIDragItem_ptr);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v47 = v9;
    else
      v47 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v10 = _CocoaArrayWrapper.endIndex.getter(v47);
    swift_bridgeObjectRelease(v9);
  }
  else
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)&v12 = swift_bridgeObjectRelease(v9).n128_u64[0];
  if (!v10)
  {
    v37 = *(id *)DOCLog.UI.unsafeMutableAddressor(v11);
    v38 = static os_log_type_t.debug.getter(v37);
    v39 = sub_10006922C((uint64_t *)&unk_100644560);
    v40 = swift_allocObject(v39, 72, 7);
    *(_OWORD *)(v40 + 16) = xmmword_1004D9670;
    *(_QWORD *)(v40 + 56) = &type metadata for String;
    *(_QWORD *)(v40 + 64) = sub_10006A638();
    *(_QWORD *)(v40 + 32) = 0xD00000000000001CLL;
    *(_QWORD *)(v40 + 40) = 0x800000010050E2E0;
    os_log(_:dso:log:type:_:)("%@: session contains no items", 29, 2, &_mh_execute_header, v37, v38, v40);

    swift_bridgeObjectRelease(v40);
    return;
  }
  v13 = objc_msgSend(a1, "items", v12);
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v8);

  if (!((unint64_t)v14 >> 62))
  {
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v15)
      goto LABEL_6;
LABEL_18:
    swift_bridgeObjectRelease(v14);
    v33 = *(id *)DOCLog.UI.unsafeMutableAddressor(v32);
    v34 = static os_log_type_t.debug.getter(v33);
    v35 = sub_10006922C((uint64_t *)&unk_100644560);
    v36 = swift_allocObject(v35, 72, 7);
    *(_OWORD *)(v36 + 16) = xmmword_1004D9670;
    *(_QWORD *)(v36 + 56) = &type metadata for String;
    *(_QWORD *)(v36 + 64) = sub_10006A638();
    *(_QWORD *)(v36 + 32) = 0xD00000000000001CLL;
    *(_QWORD *)(v36 + 40) = 0x800000010050E2E0;
    os_log(_:dso:log:type:_:)("%@: all dragging items have representations we can accept", 57, 2, &_mh_execute_header, v33, v34, v36);

    swift_bridgeObjectRelease(v36);
    return;
  }
LABEL_27:
  if (v14 < 0)
    v48 = v14;
  else
    v48 = v14 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v14);
  v15 = _CocoaArrayWrapper.endIndex.getter(v48);
  swift_bridgeObjectRelease(v14);
  if (!v15)
    goto LABEL_18;
LABEL_6:
  v16 = 0;
  v17 = v14 & 0xC000000000000001;
  v49 = v14 + 32;
  v50 = v14 & 0xFFFFFFFFFFFFFF8;
  v55 = v14;
  v56 = v8;
  v52 = v15;
  v53 = v3;
  v51 = v14 & 0xC000000000000001;
  while (1)
  {
    if (v17)
    {
      v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v14);
    }
    else
    {
      if (v16 >= *(_QWORD *)(v50 + 16))
      {
        __break(1u);
        return;
      }
      v18 = *(id *)(v49 + 8 * v16);
    }
    v20 = v18;
    v21 = __OFADD__(v16, 1);
    v22 = v16 + 1;
    if (v21)
    {
      __break(1u);
      goto LABEL_27;
    }
    v23 = DOCAcceptableDragPasteboardTypes.unsafeMutableAddressor(v19);
    v24 = *(_QWORD *)v23;
    v25 = *(_QWORD *)(*(_QWORD *)v23 + 16);
    if (!v25)
      break;
    v54 = v22;
    v26 = v24 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    swift_bridgeObjectRetain_n(v24, 2);
    v27 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      sub_1000E2A34(v26, (uint64_t)v6);
      v28 = objc_msgSend(v20, "itemProvider");
      DOCDragPasteboardType.typeIdentifier.getter(v28);
      v30 = v29;
      v31 = String._bridgeToObjectiveC()();
      LODWORD(v30) = objc_msgSend(v28, "hasRepresentationConformingToTypeIdentifier:fileOptions:", v31, 0, swift_bridgeObjectRelease(v30).n128_f64[0]);

      sub_1000E2A78((uint64_t)v6);
      if ((_DWORD)v30)
        break;
      v26 += v27;
      if (!--v25)
      {
        swift_bridgeObjectRelease(v55);
        swift_bridgeObjectRelease(v24);
        v8 = v56;
        goto LABEL_20;
      }
    }

    swift_bridgeObjectRelease_n(v24, 2);
    v3 = v53;
    v16 = v54;
    v14 = v55;
    v8 = v56;
    v17 = v51;
    if (v54 == v52)
      goto LABEL_18;
  }
  v24 = v14;
LABEL_20:
  swift_bridgeObjectRelease(v24);
  v42 = *(id *)DOCLog.UI.unsafeMutableAddressor(v41);
  v43 = static os_log_type_t.debug.getter(v42);
  v44 = sub_10006922C((uint64_t *)&unk_100644560);
  v45 = swift_allocObject(v44, 112, 7);
  *(_OWORD *)(v45 + 16) = xmmword_1004D4CE0;
  *(_QWORD *)(v45 + 56) = &type metadata for String;
  *(_QWORD *)(v45 + 64) = sub_10006A638();
  *(_QWORD *)(v45 + 32) = 0xD00000000000001CLL;
  *(_QWORD *)(v45 + 40) = 0x800000010050E2E0;
  *(_QWORD *)(v45 + 96) = v8;
  *(_QWORD *)(v45 + 104) = sub_100083450(&qword_100642950, (unint64_t *)&unk_100648460, UIDragItem_ptr);
  *(_QWORD *)(v45 + 72) = v20;
  v46 = v20;
  os_log(_:dso:log:type:_:)("%@: dragging item %@ does not have any representations we can accept", 68, 2, &_mh_execute_header, v42, v43, v45);

  swift_bridgeObjectRelease(v45);
}

uint64_t sub_1000E26E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C((uint64_t *)&unk_100642710);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E2728(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C((uint64_t *)&unk_100642710);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

double sub_1000E2770(void *a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  __objc2_prot *v9;

  v3 = objc_msgSend(a1, "localDragSession");
  v4 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDragSession;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDragSession);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDragSession) = v3;
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRelease(v5);
  if (qword_100640E30 != -1)
    swift_once(&qword_100640E30, sub_1000B1788);
  objc_msgSend((id)qword_100672738, "setIsItemCollectionDragActive:", *(_QWORD *)(v1 + v4) != 0);
  swift_unknownObjectRelease(v3);
  v9 = &OBJC_PROTOCOL____UIDropSessionPrivate;
  v6 = swift_dynamicCastObjCProtocolConditional(a1, 1, &v9);
  if (v6)
    swift_unknownObjectRetain(a1);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDropSession);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentDropSession) = v6;
  *(_QWORD *)&result = swift_unknownObjectRelease(v7).n128_u64[0];
  return result;
}

uint64_t _s5Files31DOCItemCollectionViewControllerC010collectionD0_18dropSessionDidExitySo012UICollectionD0C_So06UIDropH0_ptF_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  void (*v8)(_BYTE *, uint64_t, uint64_t, uint64_t);
  id v9;
  uint64_t v10;
  _BYTE v12[24];
  _BYTE v13[24];

  v1 = sub_10006922C((uint64_t *)&unk_100642710);
  __chkstk_darwin(v1);
  v3 = &v12[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v6 = &v12[-v5];
  v7 = type metadata accessor for IndexPath(0);
  v8 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v8(v6, 1, 1, v7);
  sub_1000DDCCC((uint64_t)v6);
  sub_10000CB4C((uint64_t)v6, (uint64_t *)&unk_100642710);
  v9 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100640DF0 != -1)
    swift_once(&qword_100640DF0, sub_100175334);
  objc_msgSend(v9, "postNotificationName:object:", qword_1006726F8, v0);

  v8(v6, 1, 1, v7);
  v10 = v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_lastDropIndexPath;
  swift_beginAccess(v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_lastDropIndexPath, v13, 0, 0);
  sub_1000E26E0(v10, (uint64_t)v3);
  swift_beginAccess(v10, v12, 33, 0);
  sub_1000E2728((uint64_t)v6, v10);
  swift_endAccess(v12);
  sub_100175C20((uint64_t)v3);
  sub_10000CB4C((uint64_t)v6, (uint64_t *)&unk_100642710);
  return sub_10000CB4C((uint64_t)v3, (uint64_t *)&unk_100642710);
}

uint64_t sub_1000E2A34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DOCDragPasteboardType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E2A78(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DOCDragPasteboardType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E2AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DOCOperationItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E2AF8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_1000E2B24()
{
  uint64_t v0;

  sub_1000DC9A4(*(id **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000E2B30()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1000E2B50()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DOCDisplayModeChangeHandler();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1000E2B80(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1000E2BC8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x796C746E65636572, 0xEC00000064657355);
  swift_bridgeObjectRelease(0xEC00000064657355);
  return Hasher._finalize()();
}

void sub_1000E2C68(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1000E2CC0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000011, 0x800000010050BA40);
  swift_bridgeObjectRelease(0x800000010050BA40);
  return Hasher._finalize()();
}

Swift::Int sub_1000E2D44(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if (a1)
  {
    if (a1 == 1)
      v2 = 0xD000000000000012;
    else
      v2 = 0xD00000000000001ALL;
    if (a1 == 1)
      v3 = 0x800000010050BB00;
    else
      v3 = 0x800000010050BB20;
  }
  else
  {
    v3 = 0xEF646574726F7070;
    v2 = 0x7553746F4E707061;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_1000E2DF4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000E2E3C(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000011, 0x800000010050BA40);
  return swift_bridgeObjectRelease(0x800000010050BA40);
}

void sub_1000E2EAC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000E2EE4(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 2037411651, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_1000E2F8C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000E2FCC(uint64_t a1)
{
  String.hash(into:)(a1, 2036429415, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

void sub_1000E3060(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000E30A8(uint64_t a1)
{
  String.hash(into:)(a1, 0x64616F6C6E776F64, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_1000E319C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1000E31F0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000011, 0x800000010050BA40);
  swift_bridgeObjectRelease(0x800000010050BA40);
  return Hasher._finalize()();
}

void sub_1000E3274(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1000E32B8()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 2037411651, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

void sub_1000E3374(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1000E33B8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x796C746E65636572, 0xEC00000064657355);
  swift_bridgeObjectRelease(0xEC00000064657355);
  return Hasher._finalize()();
}

void sub_1000E3458(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1000E34A4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 2036429415, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_1000E354C(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    if (a2 == 1)
      v3 = 0xD000000000000012;
    else
      v3 = 0xD00000000000001ALL;
    if (a2 == 1)
      v4 = 0x800000010050BB00;
    else
      v4 = 0x800000010050BB20;
  }
  else
  {
    v4 = 0xEF646574726F7070;
    v3 = 0x7553746F4E707061;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1000E35F8(char *a1)
{
  sub_10039DDC4(*a1);
}

void sub_1000E3604()
{
  char *v0;

  sub_1000E2B80(*v0);
}

void sub_1000E360C()
{
  __asm { BR              X10 }
}

uint64_t sub_1000E3640(uint64_t a1)
{
  String.hash(into:)(a1, 0x796C746E65636572, 0xEC00000064657355);
  return swift_bridgeObjectRelease(0xEC00000064657355);
}

void sub_1000E36CC(uint64_t a1)
{
  char *v1;

  sub_1000E3374(a1, *v1);
}

unint64_t sub_1000E36D4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000E3E50(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000E3700()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1000E3728 + 4 * byte_1004D9BF7[*v0]))();
}

void sub_1000E3728(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "recentlyUsed");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1000E374C(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6F697461636F6CLL;
  a1[1] = 0xE900000000000073;
}

void sub_1000E3780(_QWORD *a1@<X8>)
{
  *a1 = 0x73726576726573;
  a1[1] = 0xE700000000000000;
}

void sub_1000E379C(_QWORD *a1@<X8>)
{
  *a1 = 1936154996;
  a1[1] = 0xE400000000000000;
}

void sub_1000E37B0(_QWORD *a1@<X8>)
{
  *a1 = &off_1005BF318;
}

Swift::Int sub_1000E37C0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_1000E3800()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_1000E3824(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_1000E3860()
{
  return 0x6465646E61707865;
}

uint64_t sub_1000E3878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6465646E61707865 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6465646E61707865, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

void sub_1000E390C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000E3918(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E51BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E3940(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E51BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E3968@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;

  v5 = sub_10006922C(&qword_100642B98);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10007E7A0(a1, v9);
  v11 = sub_1000E51BC();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DOCMutableSidebarSection.PersistableState.CodingKeys, &type metadata for DOCMutableSidebarSection.PersistableState.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100068588(a1);
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = sub_100068588(a1);
  *a2 = v13 & 1;
  return result;
}

uint64_t sub_1000E3A7C(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v3 = sub_10006922C(&qword_100642BA8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_10007E7A0(a1, v8);
  v10 = sub_1000E51BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DOCMutableSidebarSection.PersistableState.CodingKeys, &type metadata for DOCMutableSidebarSection.PersistableState.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_1000E3B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  _QWORD v5[5];
  uint64_t v6;

  v5[4] = a2;
  v6 = a3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_10004A82C;
  v5[3] = &unk_1005C2B98;
  v3 = _Block_copy(v5);
  v4 = v6;
  swift_retain();
  swift_release(v4);
  DOCRunInMainThread(v3);
  _Block_release(v3);
}

uint64_t sub_1000E3BF0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t getEnumTagSinglePayload for DOCSidebarSectionKind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCSidebarSectionKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000E3D10 + 4 * byte_1004D9C02[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000E3D44 + 4 * byte_1004D9BFD[v4]))();
}

uint64_t sub_1000E3D44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E3D4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E3D54);
  return result;
}

uint64_t sub_1000E3D60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E3D68);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000E3D6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E3D74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DOCSidebarSectionKind()
{
  return &type metadata for DOCSidebarSectionKind;
}

unint64_t sub_1000E3D94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100642B70;
  if (!qword_100642B70)
  {
    v1 = sub_10007E830(&qword_100642B78);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100642B70);
  }
  return result;
}

double sub_1000E3DE0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  id v3;
  double result;
  id v5;

  v5 = *(id *)(v0 + 24);
  v1 = sub_10004F2F0(0, &qword_100642B88, NSUUID_ptr);
  v2 = sub_100066A10();
  v3 = v5;
  *(_QWORD *)&result = AnyHashable.init<A>(_:)(&v5, v1, v2).n128_u64[0];
  return result;
}

unint64_t sub_1000E3E50(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005BF268, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

void sub_1000E3E98(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  id *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char v38;
  int v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  int v55;
  char *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  int v75;
  uint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  void (*v90)(uint64_t);
  uint64_t v91;
  uint64_t v92;
  void *v93;
  id v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  unint64_t v101;
  unint64_t v102;
  id v103;
  Class isa;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  char v131[24];
  _QWORD aBlock[5];
  uint64_t v133;
  char v134[32];
  char v135[32];

  v12 = swift_allocObject(&unk_1005C2B30, 32, 7);
  *(_QWORD *)(v12 + 16) = a5;
  *(_QWORD *)(v12 + 24) = a6;
  v115 = v12;
  v121 = *(_QWORD *)(a1 + 16);
  v113 = a5;
  if (v121)
  {
    v116 = OBJC_IVAR____TtC5Files22DOCSourceOrderObserver_strategy;
    v114 = a3 + OBJC_IVAR____TtC5Files22DOCSourceOrderObserver_updateBlock;
    swift_bridgeObjectRetain_n(a1, 2);
    swift_retain();
    v13 = a6;
    v126 = (uint64_t *)(a4 + 88);
    swift_beginAccess(a4 + 88, v135, 0, 0);
    v14 = 0;
    v15 = (uint64_t *)(a1 + 40);
    v16 = (uint64_t *)(a1 + 48);
    v112 = a1;
    v17 = (char *)(a1 + 56);
    v18 = 1;
    v120 = a1 + 32;
    v19 = (id *)(a1 + 32);
    v117 = a3;
    v118 = a2;
    v122 = a4;
    while (1)
    {
      v123 = v18;
      v124 = v14;
      v22 = *v126;
      v127 = *v19;
      v128 = *v15;
      v129 = *v16;
      v130 = *v17;
      sub_1000E4F7C(*v19, *v15, *v16, *v17);
      if (a2 == 2)
      {
        swift_bridgeObjectRetain(v22);
        v23 = *(void **)(v22 + 16);
        if (!v23)
          goto LABEL_3;
      }
      else
      {
        swift_retain();
        v24 = swift_bridgeObjectRetain(v22);
        v25 = sub_10023B9F8(v24);
        swift_bridgeObjectRelease(v22);
        swift_release(a4);
        v22 = (uint64_t)v25;
        v23 = (void *)v25[2];
        if (!v23)
        {
LABEL_3:
          swift_bridgeObjectRelease(v22);
          goto LABEL_4;
        }
      }
      v119 = v23;
      v26 = *(void **)(v22 + 32);
      v27 = *(_QWORD *)(v22 + 40);
      v28 = *(_QWORD *)(v22 + 48);
      v29 = *(_BYTE *)(v22 + 56);
      sub_1000E4F7C(v26, v27, v28, v29);
      sub_100200624((uint64_t)v26, v27, v28, v29);
      v31 = v30;
      v33 = v32;
      sub_100200624((uint64_t)v127, v128, v129, v130);
      if (v31 == v34 && v33 == v35)
      {
        swift_bridgeObjectRelease_n(v33, 2);
        sub_1000E4FD0(v26, v27, v28, v29);
LABEL_18:
        v39 = a2;
        swift_bridgeObjectRelease(v22);
        v40 = 0;
        if (v39 != 2)
          goto LABEL_41;
        goto LABEL_19;
      }
      v37 = v35;
      v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v34, v35, 0);
      swift_bridgeObjectRelease(v33);
      swift_bridgeObjectRelease(v37);
      sub_1000E4FD0(v26, v27, v28, v29);
      if ((v38 & 1) != 0)
        goto LABEL_18;
      if (v119 == (id)1)
      {
        swift_bridgeObjectRelease(v22);
        a4 = v122;
        goto LABEL_4;
      }
      a4 = v122;
      if (*(_QWORD *)(v22 + 16) < 2uLL)
      {
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      v44 = *(void **)(v22 + 64);
      v43 = *(_QWORD *)(v22 + 72);
      v45 = *(_QWORD *)(v22 + 80);
      v46 = *(_BYTE *)(v22 + 88);
      sub_1000E4F7C(v44, v43, v45, v46);
      sub_100200624((uint64_t)v44, v43, v45, v46);
      v48 = v47;
      v50 = v49;
      sub_100200624((uint64_t)v127, v128, v129, v130);
      v53 = v52;
      if (v48 == v51 && v50 == v52)
        break;
      v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v50, v51, v52, 0);
      swift_bridgeObjectRelease(v50);
      swift_bridgeObjectRelease(v53);
      sub_1000E4FD0(v44, v43, v45, v46);
      if ((v54 & 1) != 0)
        goto LABEL_27;
      v56 = (char *)(v22 + 120);
      v57 = 2;
      while (1)
      {
        v40 = v57;
        if (v119 == (id)v57)
        {
          swift_bridgeObjectRelease(v22);
          a4 = v122;
          a2 = v118;
          goto LABEL_4;
        }
        if (v57 >= *(_QWORD *)(v22 + 16))
          goto LABEL_80;
        v58 = (void *)*((_QWORD *)v56 - 3);
        v59 = *((_QWORD *)v56 - 2);
        v60 = *((_QWORD *)v56 - 1);
        v61 = *v56;
        sub_1000E4F7C(v58, v59, v60, *v56);
        sub_100200624((uint64_t)v58, v59, v60, v61);
        v63 = v62;
        v65 = v64;
        sub_100200624((uint64_t)v127, v128, v129, v130);
        if (v63 == v66 && v65 == v67)
          break;
        v69 = v67;
        v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v65, v66, v67, 0);
        swift_bridgeObjectRelease(v65);
        swift_bridgeObjectRelease(v69);
        sub_1000E4FD0(v58, v59, v60, v61);
        v57 = v40 + 1;
        v56 += 32;
        if ((v70 & 1) != 0)
          goto LABEL_40;
      }
      swift_bridgeObjectRelease_n(v65, 2);
      sub_1000E4FD0(v58, v59, v60, v61);
LABEL_40:
      swift_bridgeObjectRelease(v22);
      if (v118 != 2)
      {
LABEL_41:
        a4 = v122;
        goto LABEL_42;
      }
LABEL_19:
      a4 = v122;
LABEL_20:
      v42 = v124;
      v41 = v126;
      if (v40 == v124)
        goto LABEL_45;
LABEL_46:
      if (v40 >= *(_QWORD *)(*v41 + 16))
        goto LABEL_76;
      v125 = v42;
      v71 = *v41 + 32 * v40;
      v73 = *(void **)(v71 + 32);
      v72 = *(_QWORD *)(v71 + 40);
      v74 = *(_QWORD *)(v71 + 48);
      v75 = *(unsigned __int8 *)(v71 + 56);
      v76 = v41;
      swift_beginAccess(v41, aBlock, 33, 0);
      v22 = *v76;
      sub_1000E4F7C(v73, v72, v74, v75);
      if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
        v22 = (uint64_t)sub_100452BF4((_QWORD *)v22);
      v77 = *(_QWORD *)(v22 + 16);
      if (v40 >= v77)
        goto LABEL_77;
      v78 = v77 - 1;
      v79 = v77 - 1 - v40;
      if (v79 < 0)
        goto LABEL_91;
      v80 = v22 + 32 * v40 + 32;
      v81 = *(void **)v80;
      v83 = *(_QWORD *)(v80 + 8);
      v82 = *(_QWORD *)(v80 + 16);
      v84 = *(_BYTE *)(v80 + 24);
      memmove((void *)v80, (const void *)(v80 + 32), 32 * v79);
      *(_QWORD *)(v22 + 16) = v78;
      *v126 = v22;
      swift_endAccess(aBlock);
      sub_1000E4FD0(v81, v83, v82, v84);
      swift_beginAccess(v126, aBlock, 33, 0);
      a2 = v118;
      if (*(_QWORD *)(*v126 + 16) < v125)
        goto LABEL_78;
      if (v125 < 0)
        goto LABEL_79;
      v22 = (uint64_t)v126;
      v85 = v74;
      v86 = v73;
      sub_1000E4F7C(v73, v72, v85, v75);
      sub_100459048(v125, v125, (uint64_t)v73, v72, v85, v75);
      swift_endAccess(aBlock);
      if (v75 == 2)
      {
        v93 = (void *)objc_opt_self(DOCTagRegistry);
        v22 = v73;
        v94 = objc_msgSend(v93, "sharedInstance");
        objc_msgSend(v94, "moveTag:toIndex:", v22, v125);
        sub_1000E4FD0(v73, v72, v85, 2);

        sub_1000E4FD0(v73, v72, v85, 2);
        sub_1000E4FD0(v127, v128, v129, v130);
        a4 = v122;
        v20 = v123;
        if (v123 == v121)
        {
LABEL_61:
          swift_bridgeObjectRelease_n(v112, 2);
          goto LABEL_63;
        }
        goto LABEL_5;
      }
      a4 = v122;
      if (v75 == 1)
      {
        v87 = *(_QWORD *)(v117 + v116);
        v22 = v87;
        sub_10038A2B8(v86, v125);
        if ((v88 & 1) != 0)
        {
          v90 = *(void (**)(uint64_t))v114;
          v89 = *(_QWORD *)(v114 + 8);
          swift_beginAccess(v87 + 16, v131, 0, 0);
          v91 = *(_QWORD *)(v87 + 16);
          swift_retain();
          v92 = swift_bridgeObjectRetain(v91);
          v90(v92);
          swift_release(v89);
          swift_bridgeObjectRelease(v91);
          v22 = v87;
          sub_10000E108();
        }
        sub_1000E4FD0(v86, v72, v85, 1);
        sub_1000E4FD0(v86, v72, v85, 1);
      }
      else
      {
        sub_1000E4FD0(v86, v72, v85, v75);
      }
LABEL_4:
      sub_1000E4FD0(v127, v128, v129, v130);
      v20 = v123;
      if (v123 == v121)
        goto LABEL_61;
LABEL_5:
      v19 = (id *)(v120 + 32 * v20);
      v15 = (uint64_t *)(v19 + 1);
      v16 = (uint64_t *)(v19 + 2);
      v17 = (char *)(v19 + 3);
      v14 = v20;
      v21 = __OFADD__(v20, 1);
      v18 = v20 + 1;
      if (v21)
      {
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
    }
    swift_bridgeObjectRelease_n(v50, 2);
    sub_1000E4FD0(v44, v43, v45, v46);
LABEL_27:
    v55 = a2;
    swift_bridgeObjectRelease(v22);
    v40 = 1;
    if (v55 == 2)
      goto LABEL_20;
LABEL_42:
    v42 = v124;
    v41 = v126;
    if (*(_QWORD *)(*v126 + 16))
      __asm { BR              X9 }
    if (v40 != v124)
      goto LABEL_46;
LABEL_45:
    a2 = v118;
    goto LABEL_4;
  }
  swift_retain();
  v95 = a6;
LABEL_63:
  swift_beginAccess(a4 + 88, v134, 0, 0);
  v96 = *(_QWORD *)(a4 + 88);
  aBlock[0] = _swiftEmptyArrayStorage;
  v97 = *(_QWORD *)(v96 + 16);
  if (v97)
  {
    v98 = v96 + 32;
    swift_bridgeObjectRetain_n(v96, 2);
    do
    {
      if (!*(_BYTE *)(v98 + 24))
      {
        v100 = *(id *)v98;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v100);
        v102 = *(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
        v101 = *(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v102 >= v101 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v101 > 1, v102 + 1, 1);
        v99 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v102, v100);
        specialized Array._endMutation()(v99);
      }
      v98 += 32;
      --v97;
    }
    while (v97);
    swift_bridgeObjectRelease(v96);
    v22 = aBlock[0];
  }
  else
  {
    swift_bridgeObjectRetain(v96);
    v22 = (uint64_t)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v96);
  if ((unint64_t)v22 >> 62)
  {
LABEL_82:
    if (v22 < 0)
      v108 = v22;
    else
      v108 = v22 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v22);
    v109 = _CocoaArrayWrapper.endIndex.getter(v108);
    swift_bridgeObjectRelease(v22);
    if (v109 >= 1)
      goto LABEL_74;
  }
  else if (*(uint64_t *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10) >= 1)
  {
LABEL_74:
    v103 = objc_msgSend((id)objc_opt_self(DOCFavoritesManager), "sharedManager");
    sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v22);
    v105 = swift_allocObject(&unk_1005C2B58, 32, 7);
    *(_QWORD *)(v105 + 16) = sub_1000E4F74;
    *(_QWORD *)(v105 + 24) = v115;
    aBlock[4] = sub_1000E5048;
    v133 = v105;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10016C02C;
    aBlock[3] = &unk_1005C2B70;
    v106 = _Block_copy(aBlock);
    v107 = v133;
    swift_retain();
    swift_release(v107);
    objc_msgSend(v103, "updateFavoritesRanksToMatchOrderedFavorites:completion:", isa, v106);
    _Block_release(v106);
    swift_release(v115);

    return;
  }
  swift_bridgeObjectRelease(v22);
  swift_beginAccess(v113 + 16, aBlock, 1, 0);
  v110 = *(_QWORD *)(v113 + 16);
  v21 = __OFSUB__(v110, 1);
  v111 = v110 - 1;
  if (v21)
  {
    __break(1u);
LABEL_91:
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    JUMPOUT(0x1000E4F18);
  }
  *(_QWORD *)(v113 + 16) = v111;
  if (!v111)
    sub_100233A38(0x655274696D6D6F63, 0xED0000726564726FLL, 0);
  swift_release(v115);
}

uint64_t sub_1000E4F48()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000E4F74()
{
  uint64_t v0;

  sub_1001697EC(*(_QWORD *)(v0 + 16));
}

id sub_1000E4F7C(id result, uint64_t a2, uint64_t a3, char a4)
{
  id v5;

  switch(a4)
  {
    case 0:
    case 1:
    case 2:
    case 4:
      result = result;
      break;
    case 3:
      v5 = result;
      result = (id)swift_bridgeObjectRetain(a3);
      break;
    default:
      return result;
  }
  return result;
}

void sub_1000E4FD0(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 0:
    case 1:
    case 2:
    case 4:

      break;
    case 3:

      swift_bridgeObjectRelease(a3);
      break;
    default:
      return;
  }
}

uint64_t sub_1000E5024()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000E5048(uint64_t a1)
{
  uint64_t v1;

  sub_1000E3B64(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t getEnumTagSinglePayload for DOCMutableSidebarSection.PersistableState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCMutableSidebarSection.PersistableState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000E513C + 4 * byte_1004D9C16[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000E5170 + 4 * byte_1004D9C11[v4]))();
}

uint64_t sub_1000E5170(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E5178(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E5180);
  return result;
}

uint64_t sub_1000E518C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E5194);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000E5198(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E51A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DOCMutableSidebarSection.PersistableState()
{
  return &type metadata for DOCMutableSidebarSection.PersistableState;
}

unint64_t sub_1000E51BC()
{
  unint64_t result;

  result = qword_100642BA0;
  if (!qword_100642BA0)
  {
    result = swift_getWitnessTable(&unk_1004D9EE8, &type metadata for DOCMutableSidebarSection.PersistableState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100642BA0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DOCMutableSidebarSection.PersistableState.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for DOCMutableSidebarSection.PersistableState.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000E5294 + 4 * byte_1004D9C1B[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000E52B4 + 4 * byte_1004D9C20[v4]))();
}

_BYTE *sub_1000E5294(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000E52B4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000E52BC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000E52C4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000E52CC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000E52D4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DOCMutableSidebarSection.PersistableState.CodingKeys()
{
  return &type metadata for DOCMutableSidebarSection.PersistableState.CodingKeys;
}

unint64_t sub_1000E52F4()
{
  unint64_t result;

  result = qword_100642BB0;
  if (!qword_100642BB0)
  {
    result = swift_getWitnessTable(&unk_1004D9EC0, &type metadata for DOCMutableSidebarSection.PersistableState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100642BB0);
  }
  return result;
}

unint64_t sub_1000E533C()
{
  unint64_t result;

  result = qword_100642BB8;
  if (!qword_100642BB8)
  {
    result = swift_getWitnessTable(&unk_1004D9E30, &type metadata for DOCMutableSidebarSection.PersistableState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100642BB8);
  }
  return result;
}

unint64_t sub_1000E5384()
{
  unint64_t result;

  result = qword_100642BC0;
  if (!qword_100642BC0)
  {
    result = swift_getWitnessTable(&unk_1004D9E58, &type metadata for DOCMutableSidebarSection.PersistableState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100642BC0);
  }
  return result;
}

uint64_t sub_1000E53D8()
{
  id *v0;

  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for DOCEmptyDataSource()
{
  return objc_opt_self(_TtC5Files18DOCEmptyDataSource);
}

id sub_1000E542C()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v2 = (void *)v0[2];
  v1 = (void *)v0[3];
  v3 = (void *)v0[4];
  v4 = objc_allocWithZone((Class)type metadata accessor for DOCBrowserContainedViewController());
  v5 = v2;
  v6 = v1;
  v7 = v3;
  return sub_10004F040(v5, v1, v3);
}

uint64_t DOCPresentationPreheatable<>.doc_preheatForPresenting(completion:)(uint64_t (*a1)(void), uint64_t a2)
{
  void *v2;
  void *v3;
  _QWORD *v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __objc2_prot *v21;
  uint64_t v22;

  v3 = v2;
  v6 = (_QWORD *)UIViewController.associatedObjectStorage.getter(a1);
  KeyPath = swift_getKeyPath(&unk_1004D9FA0);
  (*(void (**)(uint64_t *__return_ptr))((swift_isaMask & *v6) + 0x78))(&v22);
  swift_release(KeyPath);

  v8 = v22;
  v9 = swift_release(v22);
  if (!v8)
  {
    v21 = &OBJC_PROTOCOL____TtP5Files26DOCPresentationPreheatable__0;
    v9 = swift_dynamicCastObjCProtocolConditional(v3, 1, &v21);
    if (v9)
    {
      v10 = v9;
      v11 = v3;
      v12 = (_QWORD *)UIViewController.associatedObjectStorage.getter(v11);
      v13 = swift_getKeyPath(&unk_1004D9FA0);
      v14 = type metadata accessor for DOCPresentationPreheatController();
      v15 = swift_allocObject(v14, 41, 7);
      *(_QWORD *)(v15 + 16) = 0x3FE0000000000000;
      v16 = swift_unknownObjectWeakInit(v15 + 24);
      *(_QWORD *)(v15 + 32) = _swiftEmptyArrayStorage;
      *(_BYTE *)(v15 + 40) = 0;
      swift_unknownObjectWeakAssign(v16, v10);
      v22 = v15;
      (*(void (**)(uint64_t *, uint64_t))((swift_isaMask & *v12) + 0x80))(&v22, v13);

    }
  }
  v17 = (_QWORD *)UIViewController.associatedObjectStorage.getter(v9);
  v18 = swift_getKeyPath(&unk_1004D9FA0);
  (*(void (**)(uint64_t *__return_ptr))((swift_isaMask & *v17) + 0x78))(&v22);
  swift_release(v18);

  v19 = v22;
  if (!v22)
    return a1();
  sub_1000E5BA4(a1, a2);
  return swift_release(v19);
}

uint64_t sub_1000E5644(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v3 = (_QWORD *)UIViewController.associatedObjectStorage.getter(a1);
  KeyPath = swift_getKeyPath(&unk_1004D9FA0);
  (*(void (**)(uint64_t *__return_ptr))((swift_isaMask & *v3) + 0x78))(&v17);
  swift_release(KeyPath);

  v5 = v17;
  v6 = swift_release(v17);
  if (!v5)
  {
    v6 = swift_dynamicCastObjCProtocolConditional(v2, 1);
    if (v6)
    {
      v7 = v6;
      v8 = v2;
      v9 = (_QWORD *)UIViewController.associatedObjectStorage.getter(v8);
      v10 = swift_getKeyPath(&unk_1004D9FA0);
      v11 = type metadata accessor for DOCPresentationPreheatController();
      v12 = swift_allocObject(v11, 41, 7);
      *(_QWORD *)(v12 + 16) = 0x3FE0000000000000;
      v13 = swift_unknownObjectWeakInit(v12 + 24);
      *(_QWORD *)(v12 + 32) = _swiftEmptyArrayStorage;
      *(_BYTE *)(v12 + 40) = 0;
      swift_unknownObjectWeakAssign(v13, v7);
      v17 = v12;
      (*(void (**)(uint64_t *, uint64_t))((swift_isaMask & *v9) + 0x80))(&v17, v10);

    }
  }
  v14 = (_QWORD *)UIViewController.associatedObjectStorage.getter(v6);
  v15 = swift_getKeyPath(&unk_1004D9FA0);
  (*(void (**)(uint64_t *__return_ptr))((swift_isaMask & *v14) + 0x78))(&v17);
  swift_release(v15);

  return v17;
}

void DOCPresentationPreheatable<>.doc_preheatDidFinish()(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __objc2_prot *v17;
  uint64_t v18;

  v2 = v1;
  v3 = (_QWORD *)UIViewController.associatedObjectStorage.getter(a1);
  KeyPath = swift_getKeyPath(&unk_1004D9FA0);
  (*(void (**)(uint64_t *__return_ptr))((swift_isaMask & *v3) + 0x78))(&v18);
  swift_release(KeyPath);

  v5 = v18;
  v6 = swift_release(v18);
  if (!v5)
  {
    v17 = &OBJC_PROTOCOL____TtP5Files26DOCPresentationPreheatable__0;
    v6 = swift_dynamicCastObjCProtocolConditional(v2, 1, &v17);
    if (v6)
    {
      v7 = v6;
      v8 = v2;
      v9 = (_QWORD *)UIViewController.associatedObjectStorage.getter(v8);
      v10 = swift_getKeyPath(&unk_1004D9FA0);
      v11 = type metadata accessor for DOCPresentationPreheatController();
      v12 = swift_allocObject(v11, 41, 7);
      *(_QWORD *)(v12 + 16) = 0x3FE0000000000000;
      v13 = swift_unknownObjectWeakInit(v12 + 24);
      *(_QWORD *)(v12 + 32) = _swiftEmptyArrayStorage;
      *(_BYTE *)(v12 + 40) = 0;
      swift_unknownObjectWeakAssign(v13, v7);
      v18 = v12;
      (*(void (**)(uint64_t *, uint64_t))((swift_isaMask & *v9) + 0x80))(&v18, v10);

    }
  }
  v14 = (_QWORD *)UIViewController.associatedObjectStorage.getter(v6);
  v15 = swift_getKeyPath(&unk_1004D9FA0);
  (*(void (**)(uint64_t *__return_ptr))((swift_isaMask & *v14) + 0x78))(&v18);
  swift_release(v15);

  v16 = v18;
  if (v18)
  {
    sub_1000E600C(2);
    swift_release(v16);
  }
}

void UIViewController.objc_doc_preheatForPresenting(completion:)(uint64_t (*a1)(void), uint64_t a2)
{
  void *v2;
  void *v3;
  id v6;
  __objc2_prot *v7;

  v3 = v2;
  v7 = &OBJC_PROTOCOL____TtP5Files26DOCPresentationPreheatable__0;
  if (swift_dynamicCastObjCProtocolConditional(v3, 1, &v7))
  {
    v6 = v3;
    DOCPresentationPreheatable<>.doc_preheatForPresenting(completion:)(a1, a2);

  }
  else
  {
    a1();
  }
}

Swift::Void __swiftcall UIViewController.objc_doc_preheatDidFinish()()
{
  void *v0;
  id v1;

  if (swift_dynamicCastObjCProtocolConditional(v0, 1))
  {
    v1 = v0;
    DOCPresentationPreheatable<>.doc_preheatDidFinish()((uint64_t)v1);

  }
}

uint64_t sub_1000E5B54@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_1000E5644(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000E5B7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_1000E5644(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000E5BA4(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v2;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE v13[24];

  if (*(_BYTE *)(v2 + 40) == 2)
    return a1();
  v6 = swift_allocObject(&unk_1005C2EF0, 32, 7);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = (_QWORD *)(v2 + 32);
  swift_beginAccess(v2 + 32, v13, 33, 0);
  v8 = *(_QWORD **)(v2 + 32);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  *(_QWORD *)(v2 + 32) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = sub_10008190C(0, v8[2] + 1, 1, v8);
    *v7 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = sub_10008190C((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *v7 = v8;
  }
  v8[2] = v11 + 1;
  v12 = &v8[2 * v11];
  v12[4] = sub_10006657C;
  v12[5] = v6;
  swift_endAccess(v13);
  return sub_1000E5CDC();
}

uint64_t type metadata accessor for DOCPresentationPreheatController()
{
  return objc_opt_self(_TtC5FilesP33_49E8C5C88A63726C039CB5DCF6C5891732DOCPresentationPreheatController);
}

uint64_t sub_1000E5CDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *Strong;
  void *v20;
  unint64_t v21;
  void *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[5];
  uint64_t v36;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v12);
  v18 = (char *)&v31 - v17;
  if (!*(_BYTE *)(v1 + 40))
  {
    v31 = result;
    v32 = v7;
    v33 = v6;
    v34 = v3;
    *(_BYTE *)(v1 + 40) = 1;
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + 24, v16);
    if (Strong)
    {
      v20 = Strong;
      objc_msgSend(Strong, "doc_startPreheatIfNecessary");
      swift_unknownObjectRelease(v20);
    }
    v21 = sub_100086BF0();
    v22 = (void *)static OS_dispatch_queue.main.getter(v21);
    static DispatchTime.now()(v22);
    + infix(_:_:)(v14, *(double *)(v1 + 16));
    v23 = *(void (**)(char *, uint64_t))(v11 + 8);
    v24 = v31;
    v23(v14, v31);
    aBlock[4] = sub_1000E6294;
    v36 = v1;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004A82C;
    aBlock[3] = &unk_1005C2E90;
    v25 = _Block_copy(aBlock);
    v26 = v36;
    swift_retain();
    v27 = swift_release(v26);
    static DispatchQoS.unspecified.getter(v27);
    aBlock[0] = _swiftEmptyArrayStorage;
    v28 = sub_10008BAAC();
    v29 = sub_10006922C((uint64_t *)&unk_100647540);
    v30 = sub_1000791AC();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v29, v30, v2, v28);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v18, v9, v5, v25);
    _Block_release(v25);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v33);
    return ((uint64_t (*)(char *, uint64_t))v23)(v18, v24);
  }
  return result;
}

uint64_t sub_1000E5F58(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  _BYTE v8[24];

  if (*(_BYTE *)(result + 40) != 2)
  {
    v1 = result;
    *(_BYTE *)(result + 40) = 2;
    swift_beginAccess(result + 32, v8, 1, 0);
    v2 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = _swiftEmptyArrayStorage;
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      swift_bridgeObjectRetain(v2);
      v4 = (_QWORD *)(v2 + 40);
      do
      {
        v6 = (void (*)(uint64_t))*(v4 - 1);
        v5 = *v4;
        v7 = swift_retain(*v4);
        v6(v7);
        swift_release(v5);
        v4 += 2;
        --v3;
      }
      while (v3);
      swift_bridgeObjectRelease(v2);
    }
    return swift_bridgeObjectRelease(v2);
  }
  return result;
}

uint64_t sub_1000E600C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  _BYTE v8[24];

  if (*(_BYTE *)(v1 + 40) != 2)
  {
    *(_BYTE *)(v1 + 40) = result;
    if (result == 2)
    {
      swift_beginAccess(v1 + 32, v8, 1, 0);
      v2 = *(_QWORD *)(v1 + 32);
      *(_QWORD *)(v1 + 32) = _swiftEmptyArrayStorage;
      v3 = *(_QWORD *)(v2 + 16);
      if (v3)
      {
        swift_bridgeObjectRetain(v2);
        v4 = (_QWORD *)(v2 + 40);
        do
        {
          v6 = (void (*)(uint64_t))*(v4 - 1);
          v5 = *v4;
          v7 = swift_retain(*v4);
          v6(v7);
          swift_release(v5);
          v4 += 2;
          --v3;
        }
        while (v3);
        swift_bridgeObjectRelease(v2);
      }
      return swift_bridgeObjectRelease(v2);
    }
  }
  return result;
}

uint64_t sub_1000E60C4()
{
  uint64_t v0;

  sub_10008F5C0(v0 + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 41, 7);
}

uint64_t getEnumTagSinglePayload for DOCPresentationPreheatController.State(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCPresentationPreheatController.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000E61CC + 4 * byte_1004D9F95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000E6200 + 4 * byte_1004D9F90[v4]))();
}

uint64_t sub_1000E6200(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E6208(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E6210);
  return result;
}

uint64_t sub_1000E621C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E6224);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000E6228(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E6230(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DOCPresentationPreheatController.State()
{
  return &type metadata for DOCPresentationPreheatController.State;
}

unint64_t sub_1000E6250()
{
  unint64_t result;

  result = qword_100642DA8;
  if (!qword_100642DA8)
  {
    result = swift_getWitnessTable(&unk_1004DA068, &type metadata for DOCPresentationPreheatController.State);
    atomic_store(result, (unint64_t *)&qword_100642DA8);
  }
  return result;
}

uint64_t sub_1000E6294()
{
  uint64_t v0;

  return sub_1000E5F58(v0);
}

uint64_t sub_1000E629C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E62C0()
{
  uint64_t v0;

  return sub_1004B9BDC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000E62C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

id sub_1000E62EC(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id result;
  void *v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  objc_super v21;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___doneBarButtonButtonItem] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___dismissAction] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Files28DOCViewOptionsViewController_viewModel] = a1;
  v6 = type metadata accessor for DOCViewOptionsViewModel(0);
  v7 = sub_1000E6B7C();
  swift_retain_n(a1, 2);
  v8 = v3;
  v9 = ObservedObject.init(wrappedValue:)(a1, v6, v7);
  v11 = v10;
  v12 = sub_1000E6468(v9, v10, 375.0);
  swift_release(v11);
  v13 = OBJC_IVAR____TtC5Files28DOCViewOptionsViewController_viewOptionsHostingController;
  *(_QWORD *)&v8[OBJC_IVAR____TtC5Files28DOCViewOptionsViewController_viewOptionsHostingController] = v12;

  v14 = *(_QWORD *)&v8[v13];
  v21.receiver = v8;
  v21.super_class = ObjectType;
  v15 = objc_msgSendSuper2(&v21, "initWithRootViewController:", v14);
  result = objc_msgSend(v15, "view");
  if (result)
  {
    v17 = result;
    v18 = objc_msgSend((id)objc_opt_self(DOCAXIdentifier), "viewOptionsRoot");
    if (!v18)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v20 = v19;
      v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
    }
    objc_msgSend(v17, "setAccessibilityIdentifier:", v18);

    swift_release(a1);
    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000E6468(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  __n128 v10;
  void *v11;
  uint64_t v12;
  id v13;
  NSString v14;
  id result;
  void *v16;
  id v17;
  _QWORD v19[3];

  v6 = type metadata accessor for UIHostingControllerSizingOptions(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = a1;
  v19[1] = a2;
  *(double *)&v19[2] = a3;
  v9 = objc_allocWithZone((Class)sub_10006922C(&qword_100642E00));
  v10 = swift_retain();
  v11 = (void *)UIHostingController.init(rootView:)(v19, v10);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = v11;
  swift_bridgeObjectRetain(v12);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  objc_msgSend(v13, "setTitle:", v14);

  result = objc_msgSend(v13, "view");
  if (result)
  {
    v16 = result;
    v17 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v16, "setBackgroundColor:", v17);

    static UIHostingControllerSizingOptions.preferredContentSize.getter();
    dispatch thunk of UIHostingController.sizingOptions.setter(v8);
    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

objc_class *sub_1000E65C4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  uint64_t v4;
  UIBarButtonItem v5;
  void *v6;
  id v7;
  UIAction_optional v9;
  UIMenu_optional v10;

  v1 = OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___doneBarButtonButtonItem;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___doneBarButtonButtonItem);
  if (v2)
  {
    v3 = *(objc_class **)(v0
                        + OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___doneBarButtonButtonItem);
  }
  else
  {
    v4 = v0;
    sub_10004F2F0(0, (unint64_t *)&qword_1006475F0, UIBarButtonItem_ptr);
    v9.value.super.super.isa = (Class)sub_1000E6654();
    v9.is_nil = 0;
    v5.super.super.isa = UIBarButtonItem.init(systemItem:primaryAction:menu:)(UIBarButtonSystemItemDone, v9, v10).super.super.isa;
    v6 = *(void **)(v0 + v1);
    *(UIBarButtonItem *)(v4 + v1) = v5;
    v3 = v5.super.super.isa;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id sub_1000E6654()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  void *v7;
  void *v8;
  id v9;

  v1 = OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___dismissAction;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___dismissAction);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___dismissAction);
  }
  else
  {
    v4 = v0;
    sub_10004F2F0(0, (unint64_t *)&qword_1006424C0, UIAction_ptr);
    v5 = swift_allocObject(&unk_1005C2F50, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16);
    v7 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, v6, 0, 0, 0, sub_1000E6BE8, v5);
    v8 = *(void **)(v0 + v1);
    *(_QWORD *)(v4 + v1) = v7;
    v3 = v7;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

void sub_1000E6730(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *Strong;
  void *v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2, v3);
  if (Strong)
  {
    v5 = Strong;
    objc_msgSend(Strong, "dismissViewControllerAnimated:completion:", 1, 0);

  }
}

void sub_1000E6A84()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC5Files28DOCViewOptionsViewController_viewModel));

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC5Files28DOCViewOptionsViewController____lazy_storage___doneBarButtonButtonItem));

}

id _s5Files32DOCItemInfoContentViewControllerCfD_0(uint64_t a1, uint64_t a2)
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)swift_getObjectType(v2, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for DOCViewOptionsViewController()
{
  return objc_opt_self(_TtC5Files28DOCViewOptionsViewController);
}

unint64_t sub_1000E6B7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100642DF8;
  if (!qword_100642DF8)
  {
    v1 = type metadata accessor for DOCViewOptionsViewModel(255);
    result = swift_getWitnessTable(&unk_1004E1800, v1);
    atomic_store(result, (unint64_t *)&qword_100642DF8);
  }
  return result;
}

uint64_t sub_1000E6BC4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000E6BE8(uint64_t a1)
{
  uint64_t v1;

  sub_1000E6730(a1, v1);
}

uint64_t storeEnumTagSinglePayload for DOCCollectionViewEditMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000E6C3C + 4 * byte_1004DA0B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000E6C70 + 4 * asc_1004DA0B0[v4]))();
}

uint64_t sub_1000E6C70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E6C78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E6C80);
  return result;
}

uint64_t sub_1000E6C8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E6C94);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000E6C98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E6CA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DOCCollectionViewEditMode()
{
  return &type metadata for DOCCollectionViewEditMode;
}

unint64_t sub_1000E6CC0()
{
  unint64_t result;

  result = qword_100642E08;
  if (!qword_100642E08)
  {
    result = swift_getWitnessTable(&unk_1004DA11C, &type metadata for DOCCollectionViewEditMode);
    atomic_store(result, (unint64_t *)&qword_100642E08);
  }
  return result;
}

BOOL sub_1000E6D04(uint64_t a1, uint64_t a2)
{
  return sub_10008E974(*(void **)a1, *(_BYTE *)(a1 + 8), *(void **)a2, *(_BYTE *)(a2 + 8));
}

uint64_t sub_1000E6D1C(char a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;

  if (!a1)
  {
    v8 = 0xEC00000064657463;
    v9 = 0x656E6E6F63736964;
LABEL_6:
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v8, 0x657463656E6E6F63, 0xE900000000000064, 0);
    swift_bridgeObjectRelease(v8);
    v7 = v10 & 1;
    return a4(v7, 2, a2, a3);
  }
  if (a1 != 1)
  {
    v8 = 0xE700000000000000;
    v9 = 0x676E69646E6570;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease(0xE900000000000064);
  v7 = 1;
  return a4(v7, 2, a2, a3);
}

uint64_t sub_1000E6DF0()
{
  return sub_1000E6E28((SEL *)&selRef_pause, (uint64_t)sub_1000E85F8, (uint64_t)&unk_1005C3200);
}

uint64_t sub_1000E6E0C()
{
  return sub_1000E6E28((SEL *)&selRef_resume, (uint64_t)sub_1000E8618, (uint64_t)&unk_1005C31D8);
}

uint64_t sub_1000E6E28(SEL *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _QWORD aBlock[5];
  uint64_t v55;

  v48 = a3;
  v46 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v53 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v52 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v50 = *(_QWORD *)(v7 - 8);
  v51 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DOCFileProviderSyncStateFooterViewModel.Configuration(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchTime(0);
  v45 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v47 = (char *)&v42 - v17;
  v18 = type metadata accessor for DOCFileOperation(0);
  __chkstk_darwin(v18);
  v21 = (id *)((char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = v3;
  v22 = *(_QWORD *)(v3 + 152);
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 16);
    if (v23)
    {
      v42 = v13;
      v43 = v9;
      v44 = v5;
      v24 = v22 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
      v25 = *(_QWORD *)(v19 + 72);
      swift_bridgeObjectRetain(v22);
      do
      {
        sub_10007C6DC(v24, (uint64_t)v21, type metadata accessor for DOCFileOperation);
        objc_msgSend(v21[5], *a1);
        sub_10007C720((uint64_t)v21, type metadata accessor for DOCFileOperation);
        v24 += v25;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease(v22);
      v9 = v43;
      v5 = v44;
      v13 = v42;
    }
  }
  v26 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v27 = (void *)static OS_dispatch_queue.main.getter(v26);
  static DispatchTime.now()(v27);
  v28 = v49;
  sub_10007C6DC(v49 + OBJC_IVAR____TtC5Files39DOCFileProviderSyncStateFooterViewModel_configuration, (uint64_t)v12, type metadata accessor for DOCFileProviderSyncStateFooterViewModel.Configuration);
  v29 = v47;
  + infix(_:_:)(v16, v12);
  v30 = *(void (**)(char *, uint64_t))(v45 + 8);
  v30(v16, v13);
  v31 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v12, v31);
  aBlock[4] = v46;
  v55 = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = v48;
  v32 = v13;
  v33 = _Block_copy(aBlock);
  v34 = v55;
  swift_retain();
  v35 = swift_release(v34);
  static DispatchQoS.unspecified.getter(v35);
  aBlock[0] = _swiftEmptyArrayStorage;
  v36 = v9;
  v37 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v38 = sub_10006922C((uint64_t *)&unk_100647540);
  v39 = sub_1000791AC();
  v40 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v38, v39, v5, v37);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v29, v36, v40, v33);
  _Block_release(v33);

  (*(void (**)(char *, uint64_t))(v53 + 8))(v40, v5);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v36, v51);
  return ((uint64_t (*)(char *, uint64_t))v30)(v29, v32);
}

uint64_t sub_1000E71DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t Strong;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  _QWORD v30[4];
  uint64_t v31;
  _QWORD *v32;
  _BYTE v33[24];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;

  swift_beginAccess(v0 + 96, v33, 0, 0);
  sub_1000923F4(v0 + 96, (uint64_t)&v34);
  if (!v35)
  {
    sub_10009236C((uint64_t)&v34);
    return 0;
  }
  sub_1000E85C4(&v34, (uint64_t)v37);
  v1 = type metadata accessor for DOCFileOperationsManager(0);
  v2 = v38;
  v3 = v39;
  v4 = sub_10007E7A0(v37, v38);
  v35 = v2;
  v5 = *(_QWORD *)(v3 + 8);
  v36 = v5;
  v6 = sub_10006CBAC(&v34);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v6, v4, v2);
  v7 = sub_10037592C((uint64_t)v6, v1, v2, v5);
  sub_100068588(&v34);
  v8 = type metadata accessor for DOCFileOperationCollectionSource(0);
  *(_QWORD *)(swift_allocObject(v8, 56, 7) + 48) = v7;
  v9 = (char *)v7;
  v10 = sub_10008C000(0, 0);
  v11 = OBJC_IVAR____TtC5Files24DOCFileOperationsManager_observers;
  v12 = *(_QWORD *)&v9[OBJC_IVAR____TtC5Files24DOCFileOperationsManager_observers];
  swift_beginAccess(v12 + 16, &v34, 1, 0);
  v13 = *(_QWORD *)(v12 + 16);
  v32 = _swiftEmptyArrayStorage;
  if (!((unint64_t)v13 >> 62))
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    result = swift_bridgeObjectRetain(v13);
    if (v14)
      goto LABEL_4;
LABEL_19:
    swift_bridgeObjectRelease(v13);
    v23 = _swiftEmptyArrayStorage;
LABEL_20:
    v25 = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(v12 + 16) = v23;
    swift_bridgeObjectRelease(v25);
    v26 = *(_QWORD *)(v12 + 16);
    __chkstk_darwin(v27);
    v30[2] = v10;
    swift_bridgeObjectRetain(v26);
    v28 = sub_100089DB8(sub_1000E85DC, (uint64_t)v30, v26);
    swift_release(v12);
    swift_bridgeObjectRelease(v26);
    if ((v28 & 1) == 0)
    {
      v29 = *(_QWORD *)&v9[v11];
      swift_retain();
      sub_1000B1E54((uint64_t)v10, v29);
      swift_release(v29);
      sub_1000A786C();
      sub_10000CDB4();
    }
    swift_release(v10);

    sub_100068588(v37);
    return (uint64_t)v10;
  }
  if (v13 < 0)
    v24 = v13;
  else
    v24 = v13 & 0xFFFFFFFFFFFFFF8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(v13);
  result = _CocoaArrayWrapper.endIndex.getter(v24);
  v14 = result;
  if (!result)
    goto LABEL_19;
LABEL_4:
  if (v14 >= 1)
  {
    v31 = v11;
    for (i = 0; i != v14; ++i)
    {
      if ((v13 & 0xC000000000000001) != 0)
      {
        v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v13);
      }
      else
      {
        v18 = *(_QWORD *)(v13 + 8 * i + 32);
        swift_retain();
      }
      Strong = swift_unknownObjectWeakLoadStrong(v18 + 16, v17);
      if (Strong)
      {
        v20 = swift_unknownObjectRelease(Strong);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
        v21 = v32[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
        v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v18);
        specialized ContiguousArray._endMutation()(v22);
      }
      else
      {
        swift_release(v18);
      }
    }
    swift_bridgeObjectRelease(v13);
    v23 = v32;
    v11 = v31;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E7500()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 176);
  if (v1 != 255 && v1 == 2 && *(_QWORD *)(v0 + 168) == 0)
    return 1;
  result = *(_QWORD *)(v0 + 160);
  if (result)
  {
    if (objc_msgSend((id)result, "contentType") != (id)2)
      return 0;
    result = *(_QWORD *)(v0 + 160);
    if (result)
    {
      result = (uint64_t)objc_msgSend((id)result, "subTitle");
      if (result)
      {

        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_1000E757C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double (*v9)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, __n128);
  __n128 v10;
  __n128 v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE v16[24];
  uint64_t v17;
  _BYTE v18[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v18, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    v4 = result + 56;
    swift_beginAccess(result + 56, v15, 0, 0);
    sub_1000923F4(v4, (uint64_t)v16);
    if (v17)
    {
      sub_100092328((uint64_t)v16, (uint64_t)v12);
      sub_10009236C((uint64_t)v16);
      v5 = v13;
      v6 = v14;
      sub_10007E7A0(v12, v13);
      v7 = swift_allocObject(&unk_1005C30D0, 24, 7);
      swift_weakInit(v7 + 16, v3);
      v8 = *(_QWORD *)(v6 + 8);
      v9 = *(double (**)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, __n128))(v8 + 8);
      v10 = swift_retain();
      v11.n128_f64[0] = v9(sub_10008EAC4, v7, v5, v8, v10);
      swift_release_n(v7, 2, v11);
      sub_100068588(v12);
    }
    else
    {
      sub_10009236C((uint64_t)v16);
    }
    return swift_release(v3);
  }
  return result;
}

void sub_1000E769C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  char v7;
  _BYTE v8[24];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _BYTE v12[24];

  v1 = *(void **)(v0 + 136);
  *(_QWORD *)(v0 + 136) = 0;

  swift_beginAccess(v0 + 144, v12, 1, 0);
  v2 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 144) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v2);
  v4 = *(id *)DOCLog.UI.unsafeMutableAddressor(v3);
  v5 = static os_log_type_t.default.getter(v4);
  os_log(_:dso:log:type:_:)("Progress: [FOOTER] REMOVE fractionCompleted observer", 52, 2, &_mh_execute_header, v4, v5, _swiftEmptyArrayStorage);

  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  swift_beginAccess(v0 + 56, v8, 33, 0);
  sub_1000923AC((uint64_t)&v9, v0 + 56);
  swift_endAccess(v8);
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  swift_beginAccess(v0 + 96, v8, 33, 0);
  sub_1000923AC((uint64_t)&v9, v0 + 96);
  swift_endAccess(v8);
  v6 = *(void **)(v0 + 168);
  *(_QWORD *)(v0 + 168) = 0;
  v7 = *(_BYTE *)(v0 + 176);
  *(_BYTE *)(v0 + 176) = -1;
  sub_10008E960(v6, v7);
}

uint64_t sub_1000E77C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *Strong;
  unsigned __int8 v4;
  uint64_t v5;
  char v6;
  void *v7;
  void *v8;
  id v9;
  __n128 v10;
  char v11;
  __n128 v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __n128 v18;

  v1 = swift_allocObject(&unk_1005C30D0, 24, 7);
  swift_weakInit(v1 + 16, v0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 48, v2);
  swift_retain_n(v1, 2);
  if (Strong)
  {
    v4 = objc_msgSend(Strong, "isGathering");

    if ((v4 & 1) != 0)
    {
      v5 = 4;
      v6 = 2;
LABEL_14:
      sub_1000E8400((void *)v5, v6, v1);
      swift_release_n(v1, 2, v12);
      return swift_release(v1);
    }
  }
  v7 = *(void **)(v0 + 160);
  if (!v7 || objc_msgSend(v7, "contentType") != (id)2 || (v8 = *(void **)(v0 + 160)) == 0)
  {
    sub_10008E430();
    if ((v11 & 1) != 0)
    {
      if ((sub_1000E7C68() & 1) != 0)
      {
        v5 = 2;
        v6 = 2;
      }
      else
      {
        sub_1000E7C74();
        v6 = 0;
      }
    }
    else
    {
      if ((sub_10008E7F4() & 1) == 0)
      {
        v14 = *(_QWORD *)(v0 + 40);
        v15 = swift_allocObject(&unk_1005C3170, 32, 7);
        *(_QWORD *)(v15 + 16) = sub_1000E83D4;
        *(_QWORD *)(v15 + 24) = v1;
        sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
        swift_retain();
        swift_retain();
        v17 = (void *)static OS_dispatch_queue.main.getter(v16);
        sub_100450A68(v17, (uint64_t)sub_1000E860C, v15);
        swift_release_n(v1, 2, v18);
        swift_release(v14);
        swift_release(v15);

        return swift_release(v1);
      }
      v5 = 3;
      v6 = 2;
    }
    goto LABEL_14;
  }
  v9 = v8;
  sub_1000E8400(v8, 1, v1);
  swift_release_n(v1, 2, v10);

  return swift_release(v1);
}

uint64_t sub_1000E7984(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void *v12;
  int v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD aBlock[5];
  uint64_t v23;
  char v24[24];

  v9 = a5 + 16;
  swift_beginAccess(a5 + 16, v24, 0, 0);
  result = swift_weakLoadStrong(v9);
  if (result)
  {
    v11 = result;
    v12 = *(void **)(result + 168);
    v13 = *(unsigned __int8 *)(result + 176);
    if (v13 == 255)
      goto LABEL_12;
    if (a2)
    {
      if (a2 != 1)
        __asm { BR              X9 }
      if (v13 == 1)
      {
        sub_10004F2F0(0, (unint64_t *)&qword_100642430, NSObject_ptr);
        sub_10008E94C(v12, 1);
        sub_10008E924(a1, 1);
        v14 = static NSObject.== infix(_:_:)(a1, v12);
        sub_10008E960(v12, 1);
        sub_10008E938(a1, 1);
        if ((v14 & 1) == 0)
        {
          v12 = *(void **)(v11 + 168);
          LOBYTE(v13) = *(_BYTE *)(v11 + 176);
          goto LABEL_12;
        }
        return swift_release(v11);
      }
    }
    else
    {
      if (*(_BYTE *)(result + 176))
        v15 = 0;
      else
        v15 = v12 == a1;
      if (v15)
      {
        sub_10008E94C(a1, 0);
        return swift_release(v11);
      }
    }
LABEL_12:
    *(_QWORD *)(v11 + 168) = a1;
    *(_BYTE *)(v11 + 176) = a2;
    sub_10008E924(a1, a2);
    sub_10008E960(v12, v13);
    Strong = swift_unknownObjectWeakLoadStrong(v11 + 16, v16);
    if (Strong)
    {
      v18 = Strong;
      v19 = swift_allocObject(&unk_1005C3120, 56, 7);
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = a1;
      *(_BYTE *)(v19 + 32) = a2;
      *(_QWORD *)(v19 + 40) = a3;
      *(_QWORD *)(v19 + 48) = a4;
      aBlock[4] = sub_1000E83C4;
      v23 = v19;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10004A82C;
      aBlock[3] = &unk_1005C3138;
      v20 = _Block_copy(aBlock);
      v21 = v23;
      sub_10008E924(a1, a2);
      swift_bridgeObjectRetain(a4);
      swift_unknownObjectRetain(v18);
      swift_release(v21);
      DOCRunInMainThread(v20);
      _Block_release(v20);
      swift_release(v11);
      return swift_unknownObjectRelease(v18);
    }
    return swift_release(v11);
  }
  return result;
}

uint64_t sub_1000E7C10(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    a4();
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_1000E7C68()
{
  return sub_10008E248((SEL *)&selRef_isDownloadingOperation);
}

void sub_1000E7C74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v1 = type metadata accessor for DOCFileOperation(0);
  __chkstk_darwin(v1);
  v4 = (id *)((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(_QWORD *)(v0 + 152);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      v7 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      v8 = *(_QWORD *)(v2 + 72);
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 152));
      v9 = 0;
      while (1)
      {
        sub_10007C6DC(v7, (uint64_t)v4, type metadata accessor for DOCFileOperation);
        v10 = v4[5];
        v11 = sub_10007C720((uint64_t)v4, type metadata accessor for DOCFileOperation);
        v12 = NSProgress.fileTotalCount.getter(v11);
        v14 = v13;

        v15 = (v14 & 1) != 0 ? 0 : v12;
        v16 = __OFADD__(v9, v15);
        v9 += v15;
        if (v16)
          break;
        v7 += v8;
        if (!--v6)
        {
          swift_bridgeObjectRelease(v5);
          return;
        }
      }
      __break(1u);
    }
  }
}

uint64_t sub_1000E7D88()
{
  uint64_t v0;

  sub_10008F5C0(v0 + 16);

  swift_release(*(_QWORD *)(v0 + 40));
  swift_unknownObjectWeakDestroy(v0 + 48);
  sub_10009236C(v0 + 56);
  sub_10009236C(v0 + 96);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));

  sub_10008E960(*(id *)(v0 + 168), *(_BYTE *)(v0 + 176));
  sub_10007C720(v0 + OBJC_IVAR____TtC5Files39DOCFileProviderSyncStateFooterViewModel_configuration, type metadata accessor for DOCFileProviderSyncStateFooterViewModel.Configuration);
  return v0;
}

uint64_t sub_1000E7E10()
{
  uint64_t v0;

  sub_1000E7D88();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000E7E34()
{
  return type metadata accessor for DOCFileProviderSyncStateFooterViewModel(0);
}

uint64_t sub_1000E7E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DispatchTimeInterval(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1000E7E78(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1000E7EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000E7EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000E7F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000E7F78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000E7FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E7FC8);
}

uint64_t sub_1000E7FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000E8004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E8010);
}

uint64_t sub_1000E8010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for DOCFileProviderSyncStateFooterViewModel.Configuration(uint64_t a1)
{
  return sub_10006BDA4(a1, qword_100643158, (uint64_t)&nominal type descriptor for DOCFileProviderSyncStateFooterViewModel.Configuration);
}

uint64_t sub_1000E8064(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for DispatchTimeInterval(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DOCFileProviderSyncStateFooterViewModel.State(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10008E924(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for DOCFileProviderSyncStateFooterViewModel.State(uint64_t a1)
{
  sub_10008E938(*(id *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for DOCFileProviderSyncStateFooterViewModel.State(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10008E924(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_10008E938(v5, v6);
  return a1;
}

uint64_t initializeWithTake for DOCFileProviderSourceType(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for DOCFileProviderSyncStateFooterViewModel.State(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_10008E938(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for DOCFileProviderSyncStateFooterViewModel.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DOCFileProviderSyncStateFooterViewModel.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000E824C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1000E8264(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DOCFileProviderSyncStateFooterViewModel.State()
{
  return &type metadata for DOCFileProviderSyncStateFooterViewModel.State;
}

uint64_t sub_1000E828C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DOCFileOperation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

const char *sub_1000E82D0()
{
  return "fractionCompleted";
}

uint64_t sub_1000E82E0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E8304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000E7C10(a1, a2, v2, (void (*)(void))sub_1000E77C0);
}

unint64_t sub_1000E8324()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10064A920;
  if (!qword_10064A920)
  {
    v1 = sub_10004F2F0(255, (unint64_t *)&unk_100646BB0, NSProgress_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10064A920);
  }
  return result;
}

uint64_t sub_1000E837C(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1000E7984(a1, a2, a3, a4, v4);
}

uint64_t sub_1000E8384(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000E6D1C(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 16));
}

uint64_t sub_1000E838C()
{
  uint64_t v0;

  sub_10008E938(*(id *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000E83C4()
{
  uint64_t v0;

  return sub_10040F580(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1000E83D4(void *a1, char a2)
{
  uint64_t v2;

  return sub_1000E8400(a1, a2, v2);
}

uint64_t sub_1000E83DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E8400(void *a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD aBlock[5];
  uint64_t v15;
  char v16[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v16, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v8 = result;
    Strong = swift_unknownObjectWeakLoadStrong(result + 16, v7);
    if (Strong)
    {
      v10 = Strong;
      v11 = swift_allocObject(&unk_1005C3198, 33, 7);
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = a1;
      *(_BYTE *)(v11 + 32) = a2;
      aBlock[4] = sub_1000E854C;
      v15 = v11;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10004A82C;
      aBlock[3] = &unk_1005C31B0;
      v12 = _Block_copy(aBlock);
      v13 = v15;
      swift_unknownObjectRetain(v10);
      sub_10008E924(a1, a2);
      swift_release(v13);
      DOCRunInMainThread(v12);
      _Block_release(v12);
      swift_release(v8);
      return swift_unknownObjectRelease(v10);
    }
    else
    {
      return swift_release(v8);
    }
  }
  return result;
}

uint64_t sub_1000E851C()
{
  uint64_t v0;

  sub_10008E938(*(id *)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject(v0, 33, 7);
}

void sub_1000E854C()
{
  uint64_t v0;

  sub_10040F554(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
}

id sub_1000E8558@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isGathering");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E8588(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setIsGathering:", *a1);
}

uint64_t sub_1000E859C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000E7C10(a1, a2, v2, (void (*)(void))sub_10001ABD8);
}

uint64_t sub_1000E85BC()
{
  uint64_t v0;

  return sub_1000E757C(v0);
}

uint64_t sub_1000E85C4(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1000E85DC(_QWORD *a1)
{
  uint64_t v1;

  return sub_100294BD8(a1, *(_QWORD *)(v1 + 16)) & 1;
}

void sub_1000E861C()
{
  qword_1006431A8 = 0x4059000000000000;
}

char *sub_1000E8650()
{
  char *v0;
  char *v1;
  id v2;
  char *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  NSString v15;
  id v16;
  id v17;
  NSString v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  Class isa;
  double v58;
  id v60;
  objc_super v61;

  *(_QWORD *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_widthSameAsTargetViewConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_lineYPositionInTargetViewConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_constraintsForActiveDropTargetView] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_activeDropTargetView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_currentProposal] = 0;
  v1 = &v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_rawDebugText];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0xE000000000000000;
  v2 = objc_allocWithZone((Class)UIView);
  v3 = v0;
  v4 = objc_msgSend(v2, "init");
  *(_QWORD *)&v3[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_line] = v4;
  objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v5 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v6 = objc_msgSend(v5, "layer");
  v7 = (void *)objc_opt_self(UIColor);
  v8 = objc_msgSend(v7, "blackColor");
  v9 = objc_msgSend(v8, "CGColor");

  objc_msgSend(v6, "setBorderColor:", v9);
  v10 = objc_msgSend(v5, "layer");
  objc_msgSend(v10, "setBorderWidth:", 1.0);

  v11 = objc_msgSend(v7, "whiteColor");
  objc_msgSend(v5, "setBackgroundColor:", v11);

  v12 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v13 = OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_info;
  *(_QWORD *)&v3[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_info] = v12;
  objc_msgSend(v12, "setNumberOfLines:", 0);
  objc_msgSend(v12, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v14 = v12;
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithName:size:", v15, 16.0);

  objc_msgSend(v14, "setFont:", v16);
  v17 = *(id *)&v3[v13];
  v18 = String._bridgeToObjectiveC()();
  objc_msgSend(v17, "setText:", v18);

  v61.receiver = v3;
  v61.super_class = (Class)_s22DebugDropIndicatorViewCMa();
  v19 = (char *)objc_msgSendSuper2(&v61, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v19, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v19, "addSubview:", v5);
  v20 = OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_info;
  objc_msgSend(v5, "addSubview:", *(_QWORD *)&v19[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_info]);
  v21 = OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_line;
  objc_msgSend(v19, "addSubview:", *(_QWORD *)&v19[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_line]);
  v60 = (id)objc_opt_self(NSLayoutConstraint);
  v22 = sub_10006922C((uint64_t *)&unk_1006441A0);
  v23 = swift_allocObject(v22, 120, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1004DA340;
  v24 = objc_msgSend(v5, "topAnchor");
  v25 = objc_msgSend(v19, "topAnchor");
  v26 = objc_msgSend(v24, "constraintEqualToAnchor:", v25);

  *(_QWORD *)(v23 + 32) = v26;
  v27 = objc_msgSend(v5, "bottomAnchor");
  v28 = objc_msgSend(*(id *)&v19[v21], "topAnchor");
  v29 = objc_msgSend(v27, "constraintEqualToAnchor:constant:", v28, -40.0);

  *(_QWORD *)(v23 + 40) = v29;
  v30 = objc_msgSend(v5, "leadingAnchor");
  v31 = objc_msgSend(v19, "trailingAnchor");
  v32 = objc_msgSend(v30, "constraintEqualToAnchor:", v31);

  *(_QWORD *)(v23 + 48) = v32;
  v33 = objc_msgSend(v5, "topAnchor");
  v34 = objc_msgSend(*(id *)&v19[v20], "topAnchor");
  v35 = objc_msgSend(v33, "constraintEqualToAnchor:constant:", v34, -10.0);

  *(_QWORD *)(v23 + 56) = v35;
  v36 = objc_msgSend(v5, "leftAnchor");
  v37 = objc_msgSend(*(id *)&v19[v20], "leftAnchor");
  v38 = objc_msgSend(v36, "constraintEqualToAnchor:constant:", v37, -10.0);

  *(_QWORD *)(v23 + 64) = v38;
  v39 = objc_msgSend(v5, "rightAnchor");
  v40 = objc_msgSend(*(id *)&v19[v20], "rightAnchor");
  v41 = objc_msgSend(v39, "constraintEqualToAnchor:constant:", v40, 10.0);

  *(_QWORD *)(v23 + 72) = v41;
  v42 = objc_msgSend(v5, "bottomAnchor");
  v43 = objc_msgSend(*(id *)&v19[v20], "bottomAnchor");
  v44 = objc_msgSend(v42, "constraintEqualToAnchor:constant:", v43, 10.0);

  *(_QWORD *)(v23 + 80) = v44;
  v45 = objc_msgSend(*(id *)&v19[v21], "bottomAnchor");
  v46 = objc_msgSend(v19, "bottomAnchor");
  v47 = objc_msgSend(v45, "constraintEqualToAnchor:", v46);

  *(_QWORD *)(v23 + 88) = v47;
  v48 = objc_msgSend(*(id *)&v19[v21], "leadingAnchor");
  v49 = objc_msgSend(v19, "leadingAnchor");
  v50 = objc_msgSend(v48, "constraintEqualToAnchor:", v49);

  *(_QWORD *)(v23 + 96) = v50;
  v51 = objc_msgSend(*(id *)&v19[v21], "trailingAnchor");
  v52 = objc_msgSend(v19, "trailingAnchor");
  v53 = objc_msgSend(v51, "constraintEqualToAnchor:", v52);

  *(_QWORD *)(v23 + 104) = v53;
  v54 = objc_msgSend(*(id *)&v19[v21], "heightAnchor");
  v55 = objc_msgSend(v54, "constraintEqualToConstant:", 2.0);

  *(_QWORD *)(v23 + 112) = v55;
  specialized Array._endMutation()(v56);
  sub_10004F2F0(0, (unint64_t *)&unk_100642440, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v60, "activateConstraints:", isa, swift_bridgeObjectRelease(v23).n128_f64[0]);

  LODWORD(v58) = 1148846080;
  objc_msgSend(v19, "setContentCompressionResistancePriority:forAxis:", 1, v58);
  objc_msgSend(v19, "setUserInteractionEnabled:", 0);
  objc_msgSend(v19, "setClipsToBounds:", 0);

  return v19;
}

void sub_1000E8E94(void *a1, void *a2, uint64_t a3)
{
  char *v3;
  char *v4;
  id v8;
  id v9;
  void *v10;
  id v11;
  char v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  Class isa;
  void *v34;
  void *v35;
  id v36;
  double v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  NSString v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;

  v4 = v3;
  v8 = objc_msgSend(v3, "window");
  if (!v8)
  {
    v8 = objc_msgSend(a1, "window");
    if (!v8)
      goto LABEL_19;
  }
  v48 = v8;
  v9 = objc_msgSend(v3, "window");
  if (v9)
  {
    v10 = v9;
    sub_10004F2F0(0, (unint64_t *)&unk_100648D00, UIWindow_ptr);
    v11 = v48;
    v12 = static NSObject.== infix(_:_:)(v11, v10);

    if ((v12 & 1) != 0)
      goto LABEL_12;
  }
  else
  {

  }
  objc_msgSend(v48, "addSubview:", v4, sub_1000E92D4());
  v13 = objc_msgSend(v4, "widthAnchor");
  v14 = objc_msgSend(a1, "widthAnchor");
  if (qword_100640CF8 != -1)
    swift_once(&qword_100640CF8, sub_1000E861C);
  v15 = objc_msgSend(v13, "constraintEqualToAnchor:constant:", v14, -*(double *)&qword_1006431A8);

  v16 = OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_widthSameAsTargetViewConstraint;
  v17 = *(void **)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_widthSameAsTargetViewConstraint];
  *(_QWORD *)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_widthSameAsTargetViewConstraint] = v15;

  v18 = objc_msgSend(*(id *)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_line], "centerYAnchor");
  v19 = objc_msgSend(v48, "topAnchor");
  v20 = objc_msgSend(v18, "constraintEqualToAnchor:", v19);

  v21 = OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_lineYPositionInTargetViewConstraint;
  v22 = *(void **)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_lineYPositionInTargetViewConstraint];
  *(_QWORD *)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_lineYPositionInTargetViewConstraint] = v20;

  v23 = sub_10006922C((uint64_t *)&unk_1006441A0);
  v24 = swift_allocObject(v23, 48, 7);
  *(_OWORD *)(v24 + 16) = xmmword_1004DA350;
  v25 = *(void **)&v4[v16];
  if (!v25)
  {
    __break(1u);
    goto LABEL_18;
  }
  *(_QWORD *)(v24 + 32) = v25;
  v26 = *(void **)&v4[v21];
  if (!v26)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    return;
  }
  *(_QWORD *)(v24 + 40) = v26;
  v49 = v24;
  specialized Array._endMutation()(v24);
  v27 = OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_constraintsForActiveDropTargetView;
  v28 = *(_QWORD *)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_constraintsForActiveDropTargetView];
  *(_QWORD *)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_constraintsForActiveDropTargetView] = v49;
  v29 = v25;
  v30 = v26;
  swift_bridgeObjectRelease(v28);
  v31 = (void *)objc_opt_self(NSLayoutConstraint);
  v32 = *(_QWORD *)&v4[v27];
  sub_10004F2F0(0, (unint64_t *)&unk_100642440, NSLayoutConstraint_ptr);
  swift_bridgeObjectRetain(v32);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v31, "activateConstraints:", isa, swift_bridgeObjectRelease(v32).n128_f64[0]);

  objc_msgSend(v4, "setHidden:", 0);
LABEL_12:
  v34 = *(void **)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_lineYPositionInTargetViewConstraint];
  v35 = v48;
  if (v34)
  {
    v36 = v34;
    objc_msgSend(a2, "locationInView:", v48);
    objc_msgSend(v36, "setConstant:", v37);

    v35 = v48;
  }
  objc_msgSend(v35, "bringSubviewToFront:", v4);
  v38 = *(void **)(a3 + 24);
  v39 = *(void **)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_currentProposal];
  *(_QWORD *)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_currentProposal] = v38;
  v40 = v38;

  sub_1000E93B0();
  sub_1000E948C();

  v41 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v42 = String._bridgeToObjectiveC()();
  v43 = objc_msgSend(v41, "BOOLForKey:", v42);

  if (v43)
  {
    v44 = sub_1000E9C4C(a3);
    v45 = (uint64_t *)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_rawDebugText];
    v46 = *(_QWORD *)&v4[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_rawDebugText + 8];
    *v45 = v44;
    v45[1] = v47;
    swift_bridgeObjectRelease(v46);
    sub_1000E948C();
  }

}

double sub_1000E92D4()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  Class isa;
  void *v5;
  void *v6;
  uint64_t v7;
  double result;

  objc_msgSend(v0, "removeFromSuperview");
  v1 = (void *)objc_opt_self(NSLayoutConstraint);
  v2 = OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_constraintsForActiveDropTargetView;
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_constraintsForActiveDropTargetView];
  sub_10004F2F0(0, (unint64_t *)&unk_100642440, NSLayoutConstraint_ptr);
  swift_bridgeObjectRetain(v3);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "deactivateConstraints:", isa, swift_bridgeObjectRelease(v3).n128_f64[0]);

  v5 = *(void **)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_widthSameAsTargetViewConstraint];
  *(_QWORD *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_widthSameAsTargetViewConstraint] = 0;

  v6 = *(void **)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_lineYPositionInTargetViewConstraint];
  *(_QWORD *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_lineYPositionInTargetViewConstraint] = 0;

  v7 = *(_QWORD *)&v0[v2];
  *(_QWORD *)&v0[v2] = _swiftEmptyArrayStorage;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v7).n128_u64[0];
  return result;
}

void sub_1000E93B0()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;

  v1 = *(void **)(v0 + OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_currentProposal);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v2, "intent");
    v4 = (void *)objc_opt_self(UIColor);
    if (v3 == (id)1)
      v5 = objc_msgSend(v4, "orangeColor");
    else
      v5 = objc_msgSend(v4, "greenColor");
    v6 = v5;

    objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_line), "setBackgroundColor:", v6);
  }
  else
  {
    v6 = objc_msgSend((id)objc_opt_self(UIColor), "grayColor");
    objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_line), "setBackgroundColor:", v6);
  }

}

void sub_1000E948C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  Swift::String v10;
  void *object;
  Swift::String v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  void *v26;
  Swift::String v27;
  void *v28;
  id v29;
  unint64_t v30;
  unint64_t v31;

  v1 = v0;
  v2 = *(void **)(v0 + OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_currentProposal);
  v3 = 0x800000010050EAF0;
  if (v2)
  {
    v4 = type metadata accessor for DOCSidebarDropProposal(0);
    v5 = swift_dynamicCastClass(v2, v4);
    if (v5)
    {
      v6 = (void *)v5;
      v7 = v2;
      if (objc_msgSend(v6, "intent") == (id)1)
      {
        _StringGuts.grow(_:)(31);
        swift_bridgeObjectRelease(0xE000000000000000);
        v30 = 0x800000010050EB50;
        v8 = type metadata accessor for IndexPath(0);
        v9 = sub_1000E9B60();
        v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v8, v9);
        object = v10._object;
        String.append(_:)(v10);
        swift_bridgeObjectRelease(object);
        v12._countAndFlagsBits = 0x3A704F202020200ALL;
        v12._object = (void *)0xE900000000000020;
        String.append(_:)(v12);
        v13 = 0xE600000000000000;
        switch((unint64_t)objc_msgSend(v6, "operation"))
        {
          case 0uLL:
            break;
          case 1uLL:
            goto LABEL_6;
          case 2uLL:
            goto LABEL_8;
          case 3uLL:
            goto LABEL_9;
          default:
            goto LABEL_7;
        }
      }
      else
      {
        _StringGuts.grow(_:)(31);
        swift_bridgeObjectRelease(0xE000000000000000);
        v30 = 0x800000010050EB10;
        v14 = type metadata accessor for IndexPath(0);
        v15 = sub_1000E9B60();
        v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
        v17 = v16._object;
        String.append(_:)(v16);
        swift_bridgeObjectRelease(v17);
        v18._countAndFlagsBits = 0x3A704F202020200ALL;
        v18._object = (void *)0xE900000000000020;
        String.append(_:)(v18);
        v13 = 0xE600000000000000;
        switch((unint64_t)objc_msgSend(v6, "operation"))
        {
          case 0uLL:
            break;
          case 1uLL:
LABEL_6:
            v13 = 0xE90000000000006ELL;
            break;
          case 2uLL:
LABEL_8:
            v13 = 0xE400000000000000;
            break;
          case 3uLL:
LABEL_9:
            v13 = 0xE400000000000000;
            break;
          default:
LABEL_7:
            v13 = 0x800000010050EB30;
            break;
        }
      }
      v19 = String.lowercased()();
      swift_bridgeObjectRelease(v13);
      String.append(_:)(v19);

      swift_bridgeObjectRelease(v19._object);
      v3 = v30;
    }
  }
  v20 = (uint64_t *)(v1 + OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_rawDebugText);
  v21 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_rawDebugText);
  v22 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_rawDebugText + 8);
  swift_bridgeObjectRetain(v22);
  v23 = String.count.getter(v21, v22);
  swift_bridgeObjectRelease(v22);
  if (v23 >= 1)
  {
    v31 = v3;
    v24._countAndFlagsBits = 2570;
    v24._object = (void *)0xE200000000000000;
    String.append(_:)(v24);
    v25 = *v20;
    v26 = (void *)v20[1];
    swift_bridgeObjectRetain(v26);
    v27._countAndFlagsBits = v25;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease(v26);
    v3 = v31;
  }
  v28 = *(void **)(v1 + OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_info);
  v29 = String._bridgeToObjectiveC()();
  objc_msgSend(v28, "setText:", v29, swift_bridgeObjectRelease(v3).n128_f64[0]);

}

id sub_1000E982C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)_s22DebugDropIndicatorViewCMa();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t _s22DebugDropIndicatorViewCMa()
{
  return objc_opt_self(_TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView);
}

unint64_t sub_1000E9918()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;

  v0 = _s3dbgCMa();
  v1 = swift_allocObject(v0, 32, 7);
  *(_BYTE *)(v1 + 16) = 0;
  result = sub_1003F1978((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v1 + 24) = result;
  qword_1006431B0 = v1;
  return result;
}

double sub_1000E9960(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  double result;
  char v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];
  _BYTE v23[24];

  v5 = v4;
  v10 = (_QWORD *)(v4 + 24);
  swift_beginAccess(v4 + 24, v23, 0, 0);
  v11 = *(_QWORD *)(v4 + 24);
  if (*(_QWORD *)(v11 + 16))
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v11);
    v12 = sub_10007EF08(a1, a2);
    if ((v13 & 1) != 0)
    {
      v14 = (uint64_t *)(*(_QWORD *)(v11 + 56) + 16 * v12);
      v16 = *v14;
      v15 = v14[1];
      swift_bridgeObjectRetain(v15);
    }
    else
    {
      v16 = 0;
      v15 = 0xE000000000000000;
    }
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    v16 = 0;
    v15 = 0xE000000000000000;
  }
  if (*(_BYTE *)(v5 + 16) == 1)
  {
    swift_bridgeObjectRelease(v15);
LABEL_13:
    swift_beginAccess(v10, v22, 33, 0);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
    v21 = *v10;
    *v10 = 0x8000000000000000;
    sub_100356BC8(a3, (uint64_t)a4, a1, a2, isUniquelyReferenced_nonNull_native);
    v20 = *v10;
    *v10 = v21;
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v20);
    swift_endAccess(v22);
    return sub_1000E9F78(a3, a4);
  }
  if (v16 == a3 && (void *)v15 == a4)
  {
    *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
    return result;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v15, a3, a4, 0);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v15).n128_u64[0];
  if ((v18 & 1) == 0)
    goto LABEL_13;
  return result;
}

uint64_t sub_1000E9B1C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t _s3dbgCMa()
{
  return objc_opt_self(_TtCC5Files24DOCSidebarViewController3dbg);
}

unint64_t sub_1000E9B60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100645550[0];
  if (!qword_100645550[0])
  {
    v1 = type metadata accessor for IndexPath(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for IndexPath, v1);
    atomic_store(result, qword_100645550);
  }
  return result;
}

void sub_1000E9BA8()
{
  char *v0;
  char *v1;

  *(_QWORD *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_widthSameAsTargetViewConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_lineYPositionInTargetViewConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_constraintsForActiveDropTargetView] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_activeDropTargetView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_currentProposal] = 0;
  v1 = &v0[OBJC_IVAR____TtCC5Files24DOCSidebarViewController22DebugDropIndicatorView_rawDebugText];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0xE000000000000000;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Files/DOCSidebarViewController+Debug.swift", 42, 2, 34, 0);
  __break(1u);
}

uint64_t sub_1000E9C4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  id v15;
  __n128 v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  uint64_t v29;
  void *v30;
  Swift::String v31;
  uint64_t v32;
  _QWORD v35[2];
  _BYTE v36[24];

  v2 = 0x2A6C696E2ALL;
  v3 = sub_10006922C((uint64_t *)&unk_100642710);
  __chkstk_darwin(v3);
  v5 = (char *)&v35[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v35[-1] - v7;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = v9 + OBJC_IVAR____TtCC5Files21DOCSidebarDropContext9DebugInfo_lastReturnedTargetIndexPath;
  swift_beginAccess(v9 + OBJC_IVAR____TtCC5Files21DOCSidebarDropContext9DebugInfo_lastReturnedTargetIndexPath, v36, 0, 0);
  sub_1000E26E0(v10, (uint64_t)v8);
  v11 = *(void **)(v9 + OBJC_IVAR____TtCC5Files21DOCSidebarDropContext9DebugInfo_lastReturnedProposal);
  strcpy((char *)v35, "    target: ");
  BYTE5(v35[1]) = 0;
  HIWORD(v35[1]) = -5120;
  sub_1000E26E0((uint64_t)v8, (uint64_t)v5);
  v12 = type metadata accessor for IndexPath(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v5, 1, v12);
  v15 = v11;
  if (v14 == 1)
  {
    sub_1000E9F38((uint64_t)v5);
    v17 = (void *)0xE500000000000000;
    v18 = 0x2A6C696E2ALL;
  }
  else
  {
    v18 = IndexPath.description.getter(v16);
    v17 = v19;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v12);
  }
  v20._countAndFlagsBits = v18;
  v20._object = v17;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v17);
  v21._countAndFlagsBits = 10;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = v35[0];
  v23 = (void *)v35[1];
  v35[0] = 0xD00000000000002ELL;
  v35[1] = 0x800000010050EBB0;
  v22._object = v23;
  String.append(_:)(v22);
  *(_QWORD *)&v24 = swift_bridgeObjectRelease(v23).n128_u64[0];
  v26 = v35[0];
  v25 = v35[1];
  strcpy((char *)v35, "  proposal: ");
  BYTE5(v35[1]) = 0;
  HIWORD(v35[1]) = -5120;
  if (v11)
  {
    v27 = (void *)0xE600000000000000;
    v2 = 0x6C65636E6143;
    switch((unint64_t)objc_msgSend(v15, "operation", v24))
    {
      case 0uLL:
        break;
      case 1uLL:
        v27 = (void *)0xE90000000000006ELL;
        v2 = 0x6564646962726F46;
        break;
      case 2uLL:
        v27 = (void *)0xE400000000000000;
        v2 = 2037411651;
        break;
      case 3uLL:
        v27 = (void *)0xE400000000000000;
        v2 = 1702260557;
        break;
      default:
        v27 = (void *)0x800000010050EB30;
        v2 = 0xD000000000000014;
        break;
    }
  }
  else
  {
    v27 = (void *)0xE500000000000000;
  }
  v28._countAndFlagsBits = v2;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v27);
  v29 = v35[0];
  v30 = (void *)v35[1];
  v35[0] = v26;
  v35[1] = v25;
  swift_bridgeObjectRetain(v25);
  v31._countAndFlagsBits = v29;
  v31._object = v30;
  String.append(_:)(v31);

  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v30);
  v32 = v35[0];
  sub_1000E9F38((uint64_t)v8);
  return v32;
}

uint64_t sub_1000E9F38(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10006922C((uint64_t *)&unk_100642710);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_1000E9F78(uint64_t a1, void *a2)
{
  id v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  double result;

  v4 = *(id *)DOCLog.UI.unsafeMutableAddressor(a1);
  v6 = static os_log_type_t.info.getter(v5);
  v7 = sub_10006922C((uint64_t *)&unk_100644560);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1004D9670;
  v9._countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  *(_QWORD *)(v8 + 64) = sub_10006A638();
  *(_QWORD *)(v8 + 32) = 0x205D446E445BLL;
  *(_QWORD *)(v8 + 40) = 0xE600000000000000;
  os_log(_:dso:log:type:_:)("%@", 2, 2, &_mh_execute_header, v4, v6, v8);

  *(_QWORD *)&result = swift_bridgeObjectRelease(v8).n128_u64[0];
  return result;
}

unint64_t sub_1000EA064()
{
  unint64_t result;

  result = qword_100643310;
  if (!qword_100643310)
  {
    result = swift_getWitnessTable(&unk_1004DA3EC, &type metadata for DeleteFilesIntent);
    atomic_store(result, (unint64_t *)&qword_100643310);
  }
  return result;
}

uint64_t sub_1000EA0AC()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_1000EA0DC()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for IntentAuthenticationPolicy(0);
  sub_10007E874(v0, qword_100672608);
  v1 = sub_10007E788(v0, (uint64_t)qword_100672608);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for IntentAuthenticationPolicy.requiresAuthentication(_:), v0);
}

uint64_t sub_1000EA134(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[3] = a1;
  v2[4] = a2;
  v3 = type metadata accessor for DOCFileEntity(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000EA194, 0, 0);
}

uint64_t sub_1000EA194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, char, uint64_t);

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 40);
    v3 = *(_QWORD *)(v0 + 48);
    v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v6 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    do
    {
      v7 = *(_QWORD *)(v0 + 56);
      sub_1000EACB4(v5, v7);
      v8 = *(id *)(v7 + *(int *)(v4 + 28));
      v9 = sub_1000EACF8(v7);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
      v11 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v10 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v11 >= v10 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v8);
      specialized Array._endMutation()(v12);
      v5 += v6;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v1);
  }
  *(_QWORD *)(v0 + 64) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v1);
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    if ((uint64_t)_swiftEmptyArrayStorage < 0)
      v16 = _swiftEmptyArrayStorage;
    else
      v16 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    v17 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    if (v17)
      goto LABEL_9;
  }
  else if (*(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_9:
    v13 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
    *(_QWORD *)(v0 + 72) = v13;
    v20 = (uint64_t (*)(uint64_t, char, uint64_t))((char *)&dword_100657320 + dword_100657320);
    v14 = (_QWORD *)swift_task_alloc(unk_100657324);
    *(_QWORD *)(v0 + 80) = v14;
    *v14 = v0;
    v14[1] = sub_1000EA3C0;
    return v20((uint64_t)_swiftEmptyArrayStorage, 1, (uint64_t)v13);
  }
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  v18 = sub_1000EAD34();
  v19 = swift_allocError(&type metadata for DeleteFilesIntent.TrashError, v18, 0, 0);
  swift_willThrow(v19);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EA3C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  void *v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000EA470;
  }
  else
  {
    v5 = *(void **)(v2 + 72);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 64));

    v4 = sub_1000EA430;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000EA430()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  static IntentResult.result<>()();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EA470()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);

  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EA4B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for Logger(0);
  v0[2] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[3] = v2;
  v0[4] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000EA510, 0, 0);
}

uint64_t sub_1000EA510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = Logger.AppIntents.unsafeMutableAddressor();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Items are about to be deleted/trashed without usual confirmation because confirmation happened as part of the DeleteIntent flow ahead of the intent execution", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }
  v10 = *(_QWORD *)(v0 + 24);
  v9 = *(_QWORD *)(v0 + 32);
  v11 = *(_QWORD *)(v0 + 16);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EA5F0()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

unint64_t sub_1000EA624()
{
  unint64_t result;

  result = qword_100643318;
  if (!qword_100643318)
  {
    result = swift_getWitnessTable(&unk_1004DA414, &type metadata for DeleteFilesIntent);
    atomic_store(result, (unint64_t *)&qword_100643318);
  }
  return result;
}

unint64_t sub_1000EA66C()
{
  unint64_t result;

  result = qword_100643320;
  if (!qword_100643320)
  {
    result = swift_getWitnessTable(&unk_1004DA4A4, &type metadata for DeleteFilesIntent);
    atomic_store(result, (unint64_t *)&qword_100643320);
  }
  return result;
}

unint64_t sub_1000EA6B4()
{
  unint64_t result;

  result = qword_100643328;
  if (!qword_100643328)
  {
    result = swift_getWitnessTable(&unk_1004DA4CC, &type metadata for DeleteFilesIntent);
    atomic_store(result, (unint64_t *)&qword_100643328);
  }
  return result;
}

uint64_t sub_1000EA6F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100563930, 1);
}

uint64_t sub_1000EA708(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1000EA624();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_1000EA748(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EAD78();
  return static AssistantSchemaIntent.title.getter(a1, v2);
}

uint64_t sub_1000EA780@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100640D08 != -1)
    swift_once(&qword_100640D08, sub_1000EA0DC);
  v2 = type metadata accessor for IntentAuthenticationPolicy(0);
  v3 = sub_10007E788(v2, (uint64_t)qword_100672608);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1000EA7FC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_10064334C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000EA854;
  return sub_1000EA134(a1, v4);
}

uint64_t sub_1000EA854()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000EA89C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  v2 = type metadata accessor for InputConnectionBehavior(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10006922C(&qword_100643360);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v20 - v10;
  v12 = sub_10006922C(&qword_100647F10);
  __chkstk_darwin(v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006922C(&qword_100643368);
  v15 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v21 = 0;
  v16 = type metadata accessor for IntentDialog(0);
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v17(v11, 1, 1, v16);
  v17(v8, 1, 1, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for InputConnectionBehavior.default(_:), v2);
  v18 = sub_100063368();
  result = IntentParameter<>.init(description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v14, &v21, v11, v8, v5, v18);
  *a1 = result;
  return result;
}

uint64_t sub_1000EAA5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EA624();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_1000EAA88()
{
  unint64_t result;

  result = qword_100643338;
  if (!qword_100643338)
  {
    result = swift_getWitnessTable(&unk_1004DA518, &type metadata for DeleteFilesIntent);
    atomic_store(result, (unint64_t *)&qword_100643338);
  }
  return result;
}

uint64_t sub_1000EAACC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  __int16 v12;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x800000010050EC60);
  static Locale.current.getter(v10);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  v12 = 2;
  return LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)("DELETE_FILES_INTENT_ERROR_NOTHING_TO_TRASH", 42, 2, v9, 0x6E65746E49707041, 0xEA00000000007374, v6, v3, "Error when the Delete Files intent has no files to delete", 57, v12);
}

ValueMetadata *type metadata accessor for DeleteFilesIntent()
{
  return &type metadata for DeleteFilesIntent;
}

unint64_t sub_1000EAC68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100643340;
  if (!qword_100643340)
  {
    v1 = sub_10007E830((uint64_t *)&unk_10064EBC0);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentResultContainer<A, B, C, D>, v1);
    atomic_store(result, &qword_100643340);
  }
  return result;
}

uint64_t sub_1000EACB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DOCFileEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EACF8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DOCFileEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000EAD34()
{
  unint64_t result;

  result = qword_100643350;
  if (!qword_100643350)
  {
    result = swift_getWitnessTable(&unk_1004DA5F0, &type metadata for DeleteFilesIntent.TrashError);
    atomic_store(result, &qword_100643350);
  }
  return result;
}

unint64_t sub_1000EAD78()
{
  unint64_t result;

  result = qword_100643370;
  if (!qword_100643370)
  {
    result = swift_getWitnessTable(&unk_1004DA4E8, &type metadata for DeleteFilesIntent);
    atomic_store(result, (unint64_t *)&qword_100643370);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DeleteFilesIntent.TrashError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000EADFC + 4 * asc_1004DA3A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000EAE1C + 4 * byte_1004DA3A5[v4]))();
}

_BYTE *sub_1000EADFC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000EAE1C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000EAE24(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000EAE2C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000EAE34(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000EAE3C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DeleteFilesIntent.TrashError()
{
  return &type metadata for DeleteFilesIntent.TrashError;
}

unint64_t sub_1000EAE5C()
{
  unint64_t result;

  result = qword_100643378;
  if (!qword_100643378)
  {
    result = swift_getWitnessTable(&unk_1004DA5C8, &type metadata for DeleteFilesIntent.TrashError);
    atomic_store(result, (unint64_t *)&qword_100643378);
  }
  return result;
}

void sub_1000EAF74()
{
  char *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];
  uint64_t v11;

  v1 = *(void **)&v0[OBJC_IVAR____TtC5Files22DOCSearchAppMenuButton_attachedMenu];
  if (v1)
  {
    v2 = swift_allocObject(&unk_1005C3470, 24, 7);
    *(_QWORD *)(v2 + 16) = v1;
    v10[4] = sub_1000EB2FC;
    v11 = v2;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_1000EB114;
    v10[3] = &unk_1005C3488;
    v3 = _Block_copy(v10);
    v4 = v11;
    v5 = v1;
    swift_release(v4);
    objc_msgSend(v0, "_setMenuProvider:", v3);
    _Block_release(v3);
    v6 = objc_msgSend(v5, "image");
    objc_msgSend(v0, "setImage:forState:", v6, 0);

    v7 = objc_msgSend(v5, "title");
    if (!v7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v9 = v8;
      v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v9);
    }
    objc_msgSend(v0, "setTitle:forState:", v7, 0);

    objc_msgSend(v0, "setShowsMenuAsPrimaryAction:", 1);
    objc_msgSend(v0, "setNeedsUpdateConfiguration");

  }
  else
  {
    objc_msgSend(v0, "_setMenuProvider:", 0);
  }
}

id sub_1000EB114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(__int128 *, uint64_t);
  unint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;

  v3 = a3;
  v6 = *(uint64_t (**)(__int128 *, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (!a2)
  {
    v10 = 0u;
    v11 = 0u;
    if (!a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  *((_QWORD *)&v11 + 1) = swift_getObjectType(a2, a2);
  *(_QWORD *)&v10 = a2;
  if (v3)
  {
LABEL_3:
    v7 = sub_1000EB304();
    v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v7);
  }
LABEL_4:
  swift_retain();
  swift_unknownObjectRetain(a2);
  v8 = (void *)v6(&v10, v3);
  swift_release(v5);
  swift_bridgeObjectRelease(v3);
  sub_10007EB54((uint64_t)&v10);
  return v8;
}

id sub_1000EB278()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DOCSearchAppMenuButton();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DOCSearchAppMenuButton()
{
  return objc_opt_self(_TtC5Files22DOCSearchAppMenuButton);
}

uint64_t sub_1000EB2D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000EB2FC()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

unint64_t sub_1000EB304()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100644320;
  if (!qword_100644320)
  {
    v1 = objc_opt_self(UIMenuElement);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100644320);
  }
  return result;
}

uint64_t sub_1000EB340(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC5Files14DOCApplication_currentTestName);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5Files14DOCApplication_currentTestName + 8);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease(v4);
}

void sub_1000EB35C(char a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  NSString v32;
  uint8_t *v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[3];
  uint64_t v38;
  uint64_t v39;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    v11 = &a2[OBJC_IVAR____TtC5Files14DOCApplication_loadedTabs];
    swift_beginAccess(&a2[OBJC_IVAR____TtC5Files14DOCApplication_loadedTabs], v37, 33, 0);
    v12 = *(_QWORD **)v11;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v11);
    *(_QWORD *)v11 = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v12 = sub_100081A44(0, v12[2] + 1, 1, v12);
      *(_QWORD *)v11 = v12;
    }
    v15 = v12[2];
    v14 = v12[3];
    if (v15 >= v14 >> 1)
    {
      v12 = sub_100081A44((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
      *(_QWORD *)v11 = v12;
    }
    v12[2] = v15 + 1;
    v12[v15 + 4] = a3;
    swift_endAccess(v37);
  }
  v16 = OBJC_IVAR____TtC5Files14DOCApplication_finishedLaunchTest;
  if ((a2[OBJC_IVAR____TtC5Files14DOCApplication_finishedLaunchTest] & 1) == 0)
  {
    v19 = objc_msgSend(a2, "_launchTestName", v8);
    objc_msgSend(a2, "finishedTest:waitForCommit:extraResults:", v19, 0, 0);

    a2[v16] = 1;
    if ((a1 & 1) == 0)
      return;
    goto LABEL_13;
  }
  v17 = *(_QWORD *)&a2[OBJC_IVAR____TtC5Files14DOCApplication_currentTestName + 8];
  if (!v17)
    goto LABEL_28;
  v36 = *(_QWORD *)&a2[OBJC_IVAR____TtC5Files14DOCApplication_currentTestName];
  if (a3)
  {
    if (a3 == 1)
    {
      v18 = 0x646572616853;
    }
    else
    {
      if (a3 != 2)
      {
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x800000010050F330, "Files/DOCApplication.swift", 26, 2, 60, 0);
        __break(1u);
        return;
      }
      v18 = 0x6573776F7242;
    }
    v21 = v18 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
  }
  else
  {
    v21 = 0xEF73746E65636552;
  }
  v22 = v36 == 0x6F54686374697753 && v17 == v21;
  if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(v36, v17, 0x6F54686374697753, v21, 0) & 1) != 0)
  {
    v23 = swift_bridgeObjectRetain(v17);
    v24 = Logger.Tests.unsafeMutableAddressor(v23);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v24, v6);
    v25 = swift_bridgeObjectRetain(v21);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.debug.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v37[0] = v35;
      v34 = v28;
      *(_DWORD *)v28 = 136315138;
      v33 = v28 + 4;
      swift_bridgeObjectRetain(v21);
      v38 = sub_1000544FC(0x6F54686374697753, v21, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease_n(v21, 3);
      v29 = v27;
      v30 = v34;
      _os_log_impl((void *)&_mh_execute_header, v26, v29, "finishing test %s after commit", v34, 0xCu);
      v31 = v35;
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v21, 2);
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v32 = String._bridgeToObjectiveC()();
    objc_msgSend(a2, "finishedTest:waitForCommit:extraResults:", v32, 0, 0, swift_bridgeObjectRelease(v17).n128_f64[0]);

LABEL_28:
    if ((a1 & 1) == 0)
      return;
LABEL_13:
    NSLog(_:_:)(0xD000000000000018, 0x800000010050F310, _swiftEmptyArrayStorage);
    v20 = objc_msgSend((id)objc_opt_self(DOCPostLaunchBuffer), "shared");
    objc_msgSend(v20, "signal");

    return;
  }
  swift_bridgeObjectRelease(v21);
  if ((a1 & 1) != 0)
    goto LABEL_13;
}

void sub_1000EB84C(uint64_t a1, unint64_t a2, char *a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  char *v6;
  char *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  unint64_t v36;
  uint8_t *v37;
  void **v38;
  void **v39;
  NSObject *v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint8_t *v44;
  uint8_t *v45;
  uint64_t *v46;
  id v47;
  NSString v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  void *v52;
  unint64_t v53;
  id v54;
  double v55;
  void **v56;
  void *v57;
  double v58;
  void **v59;
  unsigned __int8 v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void **v64;
  NSObject *v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  id v74;
  id v75;
  NSString v76;
  id v77;
  id v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  char *v85;
  char *v86;
  NSObject *v87;
  os_log_type_t v88;
  uint64_t v89;
  double v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  void **v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  void (*v107)(char *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  unsigned int v111;
  void *v112;
  uint64_t v113;
  NSObject *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  unint64_t v126;
  id v127;
  void (*v128)(char *, uint64_t, uint64_t);
  unsigned int v129;
  void **v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  char *v148;
  void **v149;
  uint64_t v150;
  uint64_t v151;
  void **aBlock;
  _QWORD v153[4];
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;

  v7 = v6;
  v146 = a5;
  v148 = a3;
  v134 = type metadata accessor for DispatchWorkItemFlags(0);
  v145 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v133 = (char *)&v124 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v143 = *(_QWORD *)(v13 - 8);
  v144 = v13;
  __chkstk_darwin(v13);
  v142 = (char *)&v124 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for DispatchTimeInterval(0);
  v139 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v138 = (uint64_t *)((char *)&v124 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v141 = type metadata accessor for DispatchTime(0);
  v137 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v136 = (char *)&v124 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v140 = (char *)&v124 - v18;
  v19 = type metadata accessor for Logger(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v130 = (void **)((char *)&v124 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  v135 = (char *)&v124 - v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v124 - v25;
  __chkstk_darwin(v27);
  v29 = (char *)&v124 - v28;
  v31 = Logger.Tests.unsafeMutableAddressor(v30);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v147 = a6;
  if (a6 >= 31)
  {
    v148 = v7;
    v32(v29, v31, v19);
    v33 = swift_bridgeObjectRetain_n(a2, 2);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter(v34);
    v36 = a2;
    if (os_log_type_enabled(v34, v35))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = (void **)swift_slowAlloc(32, -1);
      v149 = (void **)a1;
      v39 = v38;
      aBlock = v38;
      *(_DWORD *)v37 = 136315138;
      swift_bridgeObjectRetain(v36);
      v150 = sub_1000544FC((uint64_t)v149, v36, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151);
      swift_bridgeObjectRelease_n(v36, 3);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Waited for more than 30 seconds for the collection view to populate. Failing test %s", v37, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v37, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v29, v19);
    v47 = v148;
    v48 = String._bridgeToObjectiveC()();
    objc_msgSend(v47, "failedTest:", v48);
    goto LABEL_8;
  }
  v129 = a4;
  v131 = v19;
  v128 = v32;
  v32(v26, v31, v19);
  v40 = v7;
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.debug.getter(v41);
  v43 = os_log_type_enabled(v41, v42);
  v149 = (void **)a1;
  v125 = v40;
  if (v43)
  {
    v44 = (uint8_t *)swift_slowAlloc(8, -1);
    v126 = a2;
    v45 = v44;
    *(_DWORD *)v44 = 67109120;
    v46 = (uint64_t *)((char *)v40 + OBJC_IVAR____TtC5Files14DOCApplication_loadedTabs);
    swift_beginAccess((char *)v40 + OBJC_IVAR____TtC5Files14DOCApplication_loadedTabs, &v150, 0, 0);
    LOBYTE(aBlock) = sub_1000DFDCC(0, *v46) & 1;
    LODWORD(aBlock) = aBlock;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4);

    _os_log_impl((void *)&_mh_execute_header, v41, v42, "recents loaded: %{BOOL}d", v45, 8u);
    a2 = v126;
    swift_slowDealloc(v45, -1, -1);
  }
  else
  {

    v41 = v40;
  }

  v49 = *(void (**)(char *, uint64_t))(v20 + 8);
  v50 = v131;
  v49(v26, v131);
  v51 = v148;
  objc_msgSend(v148, "loadViewIfNeeded");
  v52 = *(void **)&v51[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
  if (!v52)
  {
    __break(1u);
    goto LABEL_45;
  }
  v53 = a2;
  v54 = v52;
  objc_msgSend(v54, "contentSize");
  v57 = *(void **)&v51[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection];
  if (!v57)
  {
LABEL_45:
    __break(1u);
    return;
  }
  v58 = v55;
  v59 = v56;
  v60 = objc_msgSend(*(id *)&v51[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection], "isGathering");
  v127 = v54;
  if ((v60 & 1) != 0)
    goto LABEL_30;
  v61 = &v51[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController];
  v62 = *(_QWORD *)&v51[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8];
  if (!((unint64_t)v62 >> 62))
  {
    v63 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
    v51 = v148;
    if (v63)
      goto LABEL_15;
LABEL_30:
    v82 = v135;
    v128(v135, v31, v50);
    v83 = v51;
    v84 = v53;
    v85 = v82;
    swift_bridgeObjectRetain_n(v84, 2);
    v86 = v83;
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.debug.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      v148 = (char *)v49;
      v89 = swift_slowAlloc(48, -1);
      v130 = (void **)swift_slowAlloc(32, -1);
      aBlock = v130;
      *(_DWORD *)v89 = 136316162;
      swift_bridgeObjectRetain(v84);
      v155 = sub_1000544FC((uint64_t)v149, v84, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156);
      v126 = v84;
      swift_bridgeObjectRelease_n(v84, 3);
      *(_WORD *)(v89 + 12) = 2048;
      v155 = v147;
      *(_QWORD *)&v90 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156).n128_u64[0];
      *(_WORD *)(v89 + 22) = 1024;
      v91 = objc_msgSend(v57, "isGathering", v90);

      LODWORD(v155) = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, (char *)&v155 + 4);

      *(_WORD *)(v89 + 28) = 2048;
      v155 = (uint64_t)v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156);
      *(_WORD *)(v89 + 38) = 2048;
      v92 = *(_QWORD *)&v86[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8];
      if ((unint64_t)v92 >> 62)
      {
        if (v92 < 0)
          v122 = *(_QWORD *)&v86[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8];
        else
          v122 = v92 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*(_QWORD *)&v86[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController
                                               + 8]);
        v93 = _CocoaArrayWrapper.endIndex.getter(v122);

        swift_bridgeObjectRelease(v92);
      }
      else
      {
        v93 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFF8) + 0x10);

      }
      v94 = v131;
      v95 = v134;
      v96 = v133;
      v97 = v132;
      v155 = v93;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156);

      _os_log_impl((void *)&_mh_execute_header, v87, v88, "waiting before starting test %s (attempt %ld). collection view is gathering: %{BOOL}d, content size: %f, items count : %ld", (uint8_t *)v89, 0x30u);
      v98 = v130;
      swift_arrayDestroy(v130, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v98, -1, -1);
      swift_slowDealloc(v89, -1, -1);

      ((void (*)(char *, uint64_t))v148)(v85, v94);
      v99 = v126;
      v100 = (uint64_t)v149;
      v101 = v96;
    }
    else
    {

      swift_bridgeObjectRelease_n(v84, 2);
      v49(v85, v50);
      v100 = (uint64_t)v149;
      v95 = v134;
      v101 = v133;
      v97 = v132;
      v99 = v84;
    }
    v102 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
    v148 = (char *)static OS_dispatch_queue.main.getter(v102);
    v103 = v136;
    static DispatchTime.now()(v148);
    v104 = v138;
    *v138 = 1;
    v105 = v139;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v139 + 104))(v104, enum case for DispatchTimeInterval.seconds(_:), v97);
    v106 = v140;
    + infix(_:_:)(v103, v104);
    (*(void (**)(_QWORD *, uint64_t))(v105 + 8))(v104, v97);
    v107 = *(void (**)(char *, uint64_t))(v137 + 8);
    v108 = v141;
    v107(v103, v141);
    v109 = swift_allocObject(&unk_1005C4680, 64, 7);
    v110 = v125;
    *(_QWORD *)(v109 + 16) = v125;
    *(_QWORD *)(v109 + 24) = v100;
    *(_QWORD *)(v109 + 32) = v99;
    *(_QWORD *)(v109 + 40) = v86;
    v111 = v146;
    *(_DWORD *)(v109 + 48) = v129;
    *(_DWORD *)(v109 + 52) = v111;
    *(_QWORD *)(v109 + 56) = v147;
    v153[3] = sub_10010CD44;
    v154 = v109;
    aBlock = _NSConcreteStackBlock;
    v153[0] = 1107296256;
    v153[1] = sub_10004A82C;
    v153[2] = &unk_1005C4698;
    v112 = _Block_copy(&aBlock);
    v113 = v154;
    swift_bridgeObjectRetain(v99);
    v114 = v110;
    v115 = v86;
    v116 = swift_release(v113);
    v117 = v142;
    static DispatchQoS.unspecified.getter(v116);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v118 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v119 = sub_10006922C((uint64_t *)&unk_100647540);
    v120 = sub_1000791AC();
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v119, v120, v95, v118);
    v121 = v148;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v106, v117, v101, v112);
    _Block_release(v112);

    (*(void (**)(char *, uint64_t))(v145 + 8))(v101, v95);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v117, v144);
    v107(v106, v108);
    return;
  }
  if (v62 < 0)
    v80 = v62;
  else
    v80 = v62 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v62);
  v81 = _CocoaArrayWrapper.endIndex.getter(v80);
  swift_bridgeObjectRelease(v62);
  v51 = v148;
  if (!v81)
    goto LABEL_30;
LABEL_15:
  if (v58 == 0.0 || *(double *)&v59 == 0.0)
    goto LABEL_30;
  objc_msgSend(v54, "layoutIfNeeded");
  v64 = v130;
  v128((char *)v130, v31, v50);
  v65 = v51;
  v66 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.debug.getter(v66);
  if (os_log_type_enabled(v66, v67))
  {
    v68 = swift_slowAlloc(34, -1);
    *(_DWORD *)v68 = 67109888;
    LODWORD(aBlock) = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4);
    *(_WORD *)(v68 + 8) = 1024;
    LODWORD(aBlock) = v146;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4);
    *(_WORD *)(v68 + 14) = 2048;
    aBlock = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v153);
    *(_WORD *)(v68 + 24) = 2048;
    v69 = *((_QWORD *)v61 + 1);
    if ((unint64_t)v69 >> 62)
    {
      if (v69 < 0)
        v123 = *((_QWORD *)v61 + 1);
      else
        v123 = v69 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v69);
      v70 = (void **)_CocoaArrayWrapper.endIndex.getter(v123);
      swift_bridgeObjectRelease(v69);
    }
    else
    {
      v70 = *(void ***)((v69 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    aBlock = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v153);

    _os_log_impl((void *)&_mh_execute_header, v66, v67, "performing scroll test. %d iterations, %d delta, content size is %f, item count : %ld", (uint8_t *)v68, 0x22u);
    swift_slowDealloc(v68, -1, -1);
    v71 = v146;
    v50 = v131;
    v64 = v130;
  }
  else
  {

    v66 = v65;
    v71 = v146;
  }

  v49((char *)v64, v50);
  aBlock = v149;
  v153[0] = v53;
  v155 = 0x6C61727574614ELL;
  v156 = 0xE700000000000000;
  v72 = sub_10008B9BC();
  if ((StringProtocol.contains<A>(_:)(&v155, &type metadata for String, &type metadata for String, v72, v72) & 1) == 0
    || (v73 = (void *)objc_opt_self(RPTTestRunner), !objc_msgSend(v73, "isRecapAvailable")))
  {
    v78 = v127;
    objc_msgSend(v127, "_effectiveContentInset");
    objc_msgSend(v78, "setContentOffset:", 0.0, -v79);
    v48 = String._bridgeToObjectiveC()();
    objc_msgSend(v78, "_performScrollTest:iterations:delta:", v48, v129, v71);

LABEL_8:
    return;
  }
  v74 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
  swift_bridgeObjectRetain(v53);
  v75 = v127;
  v76 = String._bridgeToObjectiveC()();
  v77 = objc_msgSend(v74, "initWithTestName:scrollView:completionHandler:", v76, v75, 0, swift_bridgeObjectRelease(v53).n128_f64[0]);

  objc_msgSend(v73, "runTestWithParameters:", v77);
}

uint64_t sub_1000EC648(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD v24[2];
  char v25;

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease(a2);
    v19 = 0;
    LOBYTE(v18) = 1;
    return v19 | ((unint64_t)v18 << 32);
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v8 = sub_1002D2258(result, a2, 10);
    swift_bridgeObjectRelease(a2);
    v18 = HIDWORD(v8) & 1;
LABEL_36:
    v19 = v8;
    if ((_DWORD)v18)
      v19 = 0;
    return v19 | ((unint64_t)v18 << 32);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, a2);
    v7 = sub_1002D2244(v6, v4, 10);
    LODWORD(v8) = (_DWORD)v7;
    v25 = BYTE4(v7) & 1;
    v9 = BYTE4(v7) & 1;
    goto LABEL_35;
  }
  v24[0] = result;
  v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v3)
      goto LABEL_51;
    if (v3 == 1)
      goto LABEL_34;
    LODWORD(v8) = (BYTE1(result) - 48);
    if (v8 > 9)
      goto LABEL_34;
    v14 = v3 - 2;
    if (v14)
    {
      v15 = (unsigned __int8 *)v24 + 2;
      while (1)
      {
        v16 = *v15 - 48;
        if (v16 > 9)
          goto LABEL_34;
        v17 = 10 * (int)v8;
        if (v17 != (int)v17)
          goto LABEL_34;
        LODWORD(v8) = v17 + v16;
        if (__OFADD__((_DWORD)v17, v16))
          goto LABEL_34;
        v9 = 0;
        ++v15;
        if (!--v14)
          goto LABEL_35;
      }
    }
LABEL_40:
    v9 = 0;
    goto LABEL_35;
  }
  if (result != 45)
  {
    if (!v3)
      goto LABEL_34;
    LODWORD(v8) = (result - 48);
    if (v8 > 9)
      goto LABEL_34;
    v20 = v3 - 1;
    if (v20)
    {
      v21 = (unsigned __int8 *)v24 + 1;
      while (1)
      {
        v22 = *v21 - 48;
        if (v22 > 9)
          goto LABEL_34;
        v23 = 10 * (int)v8;
        if (v23 != (int)v23)
          goto LABEL_34;
        LODWORD(v8) = v23 + v22;
        if (__OFADD__((_DWORD)v23, v22))
          goto LABEL_34;
        v9 = 0;
        ++v21;
        if (!--v20)
          goto LABEL_35;
      }
    }
    goto LABEL_40;
  }
  if (v3)
  {
    if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      v9 = 0;
      LODWORD(v8) = -(BYTE1(result) - 48);
      v10 = v3 - 2;
      if (!v10)
      {
LABEL_35:
        swift_bridgeObjectRelease(a2);
        LODWORD(v18) = v9 & 1;
        goto LABEL_36;
      }
      v11 = (unsigned __int8 *)v24 + 2;
      while (1)
      {
        v12 = *v11 - 48;
        if (v12 > 9)
          break;
        v13 = 10 * (int)v8;
        if (v13 != (int)v13)
          break;
        LODWORD(v8) = v13 - v12;
        if (__OFSUB__((_DWORD)v13, v12))
          break;
        v9 = 0;
        ++v11;
        if (!--v10)
          goto LABEL_35;
      }
    }
LABEL_34:
    LODWORD(v8) = 0;
    v9 = 1;
    goto LABEL_35;
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

void sub_1000EC894(uint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  __n128 v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = v4;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = Logger.Tests.unsafeMutableAddressor(v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15, v10);
  v16 = swift_bridgeObjectRetain_n(a2, 2);
  v17 = Logger.logObject.getter(v16);
  v19 = static os_log_type_t.info.getter(v18);
  if (os_log_type_enabled(v17, v19))
  {
    v27 = a3;
    v20 = swift_slowAlloc(12, -1);
    v28 = a4;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc(32, -1);
    v29 = v5;
    v23 = v22;
    v31 = v22;
    v26 = v10;
    *(_DWORD *)v21 = 136315138;
    swift_bridgeObjectRetain(a2);
    v30 = sub_1000544FC(a1, a2, &v31);
    a3 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v17, v19, "performing scrolling test %s", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    v24 = v21;
    a4 = v28;
    swift_slowDealloc(v24, -1, -1);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v26);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  v25 = sub_10010804C(a3);
  sub_1000EB84C(a1, a2, a4, v25, HIDWORD(v25), 0);
}

void sub_1000ECABC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  _QWORD *v35;
  id v36;
  id v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  _QWORD aBlock[5];
  _QWORD *v60;

  v57 = a2;
  v48 = a3;
  v56 = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v54 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  __chkstk_darwin(v5);
  v53 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v7 - 8);
  v52 = v7;
  __chkstk_darwin(v7);
  v50 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTimeInterval(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = type metadata accessor for DispatchTime(0);
  v13 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v46 - v18;
  v47 = a4;
  v20 = objc_msgSend(a4, "effectiveFullBrowser", v17);
  v21 = (void *)objc_opt_self(DOCTabbedBrowserViewController);
  v22 = objc_msgSend(v20, "configuration");
  v23 = objc_msgSend(v22, "sceneIdentifier");

  v24 = objc_msgSend(v21, "globalTabbedBrowserControllerForIdentifier:", v23);
  if (v24)
  {
    objc_msgSend(v24, "switchToTab:", 2);
    v25 = objc_msgSend(v24, "splitBrowserViewController");
    objc_msgSend(v25, "showSidebar");

    v26 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
    v46 = static OS_dispatch_queue.main.getter(v26);
    static DispatchTime.now()(v46);
    *v12 = 1;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchTimeInterval.seconds(_:), v9);
    + infix(_:_:)(v15, v12);
    (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
    v27 = *(void (**)(char *, uint64_t))(v13 + 8);
    v28 = v49;
    v27(v15, v49);
    v29 = (_QWORD *)swift_allocObject(&unk_1005C4630, 56, 7);
    v31 = v47;
    v30 = v48;
    v33 = v57;
    v32 = v58;
    v29[2] = v47;
    v29[3] = v32;
    v29[4] = v56;
    v29[5] = v33;
    v29[6] = v30;
    aBlock[4] = sub_10010CD30;
    v60 = v29;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004A82C;
    aBlock[3] = &unk_1005C4648;
    v34 = _Block_copy(aBlock);
    v35 = v60;
    v36 = v31;
    v37 = v32;
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v30);
    v38 = swift_release(v35);
    v39 = v50;
    static DispatchQoS.unspecified.getter(v38);
    aBlock[0] = _swiftEmptyArrayStorage;
    v40 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v41 = sub_10006922C((uint64_t *)&unk_100647540);
    v42 = sub_1000791AC();
    v43 = v53;
    v44 = v55;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v41, v42, v55, v40);
    v45 = (void *)v46;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v19, v39, v43, v34);
    _Block_release(v34);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v43, v44);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v39, v52);
    v27(v19, v28);
  }
  else
  {
    v57 = String._bridgeToObjectiveC()();
    objc_msgSend(v58, "failedTest:", v57);

  }
}

void sub_1000ECF0C(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  id v11;

  v9 = objc_msgSend(a1, "effectiveFullBrowser");
  v11 = DOCFullDocumentManagerViewController.sidebarViewController.getter();

  if (v11)
  {
    v10 = sub_10010804C(a5);
    sub_1000ECFC8(a3, a4, v11, v10, HIDWORD(v10));
  }
  else
  {
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(a2, "failedTest:");
  }

}

void sub_1000ECFC8(uint64_t a1, void *a2, void *a3, unsigned int a4, unsigned int a5)
{
  void *v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  id v28;
  id v29;
  double v30;
  double v31;
  void **v32;
  void **v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  NSString v45;
  id v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  int v50;
  uint64_t v51;
  void **v52;
  id v53;
  double v54;
  NSString v55;
  uint64_t v56;
  void *v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  id v64;
  void *v65;
  void *v66;
  uint64_t v67;
  id v68;
  id v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  _QWORD v77[2];
  int v78;
  void **v79;
  void *v80;
  id v81;
  uint64_t v82;
  void *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  void **v94;
  id v95;
  void **aBlock;
  _QWORD v97[4];
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[2];

  v6 = v5;
  v92 = a4;
  v93 = a5;
  v94 = (void **)a1;
  v95 = a2;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v90 = *(_QWORD *)(v8 - 8);
  v91 = v8;
  __chkstk_darwin(v8);
  v89 = (char *)v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v87 = *(_QWORD *)(v10 - 8);
  v88 = v10;
  __chkstk_darwin(v10);
  v86 = (char *)v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchTimeInterval(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (_QWORD *)((char *)v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v85 = type metadata accessor for DispatchTime(0);
  v82 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v17 = (char *)v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v84 = (char *)v77 - v19;
  v20 = type metadata accessor for Logger(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)v77 - v26;
  v83 = a3;
  v28 = objc_msgSend(a3, "collectionView", v25);
  if (v28)
  {
    v80 = v6;
    v81 = v28;
    v29 = objc_msgSend(v28, "contentSize");
    v31 = v30;
    v33 = v32;
    v34 = Logger.Tests.unsafeMutableAddressor(v29);
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
    if (v31 == 0.0 || *(double *)&v33 == 0.0)
    {
      v35(v27, v34, v20);
      v47 = swift_bridgeObjectRetain_n(v95, 2);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.debug.getter(v48);
      v50 = v49;
      if (os_log_type_enabled(v48, v49))
      {
        v51 = swift_slowAlloc(32, -1);
        v79 = (void **)swift_slowAlloc(32, -1);
        aBlock = v79;
        *(_DWORD *)v51 = 136315650;
        v77[1] = v51 + 4;
        swift_bridgeObjectRetain(v95);
        v99 = sub_1000544FC((uint64_t)v94, (unint64_t)v95, (uint64_t *)&aBlock);
        v78 = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
        swift_bridgeObjectRelease_n(v95, 3);
        *(_WORD *)(v51 + 12) = 2048;
        v99 = *(_QWORD *)&v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
        *(_WORD *)(v51 + 22) = 2048;
        v99 = (uint64_t)v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
        _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v78, "waiting before starting test %s. content size: {%f, %f}", (uint8_t *)v51, 0x20u);
        v52 = v79;
        swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v51, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v95, 2);
      }
      (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v20);
      v56 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
      v57 = (void *)static OS_dispatch_queue.main.getter(v56);
      static DispatchTime.now()(v57);
      *v15 = 1;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchTimeInterval.seconds(_:), v12);
      v58 = v84;
      + infix(_:_:)(v17, v15);
      (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
      v59 = *(void (**)(char *, uint64_t))(v82 + 8);
      v60 = v85;
      v59(v17, v85);
      v61 = swift_allocObject(&unk_1005C45E0, 56, 7);
      v62 = v80;
      v63 = (uint64_t)v94;
      v64 = v95;
      *(_QWORD *)(v61 + 16) = v80;
      *(_QWORD *)(v61 + 24) = v63;
      v65 = v83;
      *(_QWORD *)(v61 + 32) = v64;
      *(_QWORD *)(v61 + 40) = v65;
      LODWORD(v63) = v93;
      *(_DWORD *)(v61 + 48) = v92;
      *(_DWORD *)(v61 + 52) = v63;
      v97[3] = sub_10010CCC4;
      v98 = v61;
      aBlock = _NSConcreteStackBlock;
      v97[0] = 1107296256;
      v97[1] = sub_10004A82C;
      v97[2] = &unk_1005C45F8;
      v66 = _Block_copy(&aBlock);
      v67 = v98;
      swift_bridgeObjectRetain(v64);
      v68 = v62;
      v69 = v65;
      v70 = swift_release(v67);
      v71 = v86;
      static DispatchQoS.unspecified.getter(v70);
      aBlock = (void **)_swiftEmptyArrayStorage;
      v72 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v73 = sub_10006922C((uint64_t *)&unk_100647540);
      v74 = sub_1000791AC();
      v75 = v89;
      v76 = v91;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v73, v74, v91, v72);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v58, v71, v75, v66);
      _Block_release(v66);

      (*(void (**)(char *, uint64_t))(v90 + 8))(v75, v76);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v71, v88);
      v59(v58, v60);
    }
    else
    {
      v36 = ((uint64_t (*)(char *, uint64_t, uint64_t))v35)(v23, v34, v20);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.debug.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        v39 = swift_slowAlloc(24, -1);
        *(_DWORD *)v39 = 67109632;
        LODWORD(aBlock) = v92;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4);
        *(_WORD *)(v39 + 8) = 1024;
        LODWORD(aBlock) = v93;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4);
        *(_WORD *)(v39 + 14) = 2048;
        aBlock = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v97);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "performing scroll test. %d iterations, %d delta, content size is %f", (uint8_t *)v39, 0x18u);
        swift_slowDealloc(v39, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
      aBlock = v94;
      v97[0] = v95;
      v99 = 0x6C61727574614ELL;
      v100[0] = 0xE700000000000000;
      v40 = sub_10008B9BC();
      if ((StringProtocol.contains<A>(_:)(&v99, &type metadata for String, &type metadata for String, v40, v40) & 1) != 0
        && (v41 = (void *)objc_opt_self(RPTTestRunner), objc_msgSend(v41, "isRecapAvailable")))
      {
        v42 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
        v43 = v95;
        swift_bridgeObjectRetain(v95);
        v44 = v81;
        v45 = String._bridgeToObjectiveC()();
        v46 = objc_msgSend(v42, "initWithTestName:scrollView:completionHandler:", v45, v44, 0, swift_bridgeObjectRelease(v43).n128_f64[0]);

        objc_msgSend(v41, "runTestWithParameters:", v46);
      }
      else
      {
        v53 = v81;
        objc_msgSend(v81, "_effectiveContentInset");
        objc_msgSend(v53, "setContentOffset:", 0.0, -v54);
        v55 = String._bridgeToObjectiveC()();
        objc_msgSend(v53, "_performScrollTest:iterations:delta:", v55, v92, v93);

      }
    }
  }
  else
  {
    v95 = String._bridgeToObjectiveC()();
    objc_msgSend(v6, "failedTest:", v95);

  }
}

uint64_t sub_1000ED818(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, char a6)
{
  void *v6;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;
  id v17;
  id v18;

  v13 = swift_allocObject(&unk_1005C4590, 64, 7);
  *(_QWORD *)(v13 + 16) = v6;
  *(_QWORD *)(v13 + 24) = a1;
  *(_QWORD *)(v13 + 32) = a2;
  *(_QWORD *)(v13 + 40) = a5;
  *(_BYTE *)(v13 + 48) = a6;
  *(_QWORD *)(v13 + 56) = a3;
  v14 = (_QWORD *)swift_allocObject(&unk_1005C45B8, 48, 7);
  v14[2] = sub_10010CC98;
  v14[3] = v13;
  v14[4] = v6;
  v14[5] = a5;
  v15 = v6;
  v16 = a5;
  v17 = v15;
  v18 = v16;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  swift_retain();
  sub_1000F10F4(a4, v18, (uint64_t)sub_10010DED0, (uint64_t)v14);
  swift_release(v13);
  return swift_release(v14);
}

void sub_1000ED90C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, void *a6, char a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void *v21;
  void **v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  double v44;
  char *v45;
  void *v46;
  void **v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  id v57;
  NSString v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  id v62;
  char v63[24];
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v62 = String._bridgeToObjectiveC()();
    objc_msgSend(a3, "failedTest:", v62);

    return;
  }
  v61 = a5;
  v62 = a3;
  v20 = (char *)objc_msgSend(a6, "effectiveBrowserViewController", v17);
  if (v20)
  {
    v21 = v20;
    v22 = (void **)&v20[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
    swift_beginAccess(&v20[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v63, 0, 0);
    v23 = *v22;
    if (v23)
    {
      v24 = type metadata accessor for DOCItemCollectionViewController(0);
      v25 = swift_dynamicCastClass(v23, v24);
      if (v25)
      {
        v26 = (char *)v25;
        v27 = v23;

        v28 = &v26[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode];
        swift_beginAccess(&v26[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode], &v64, 1, 0);
        v29 = *(_QWORD *)v28;
        *(_QWORD *)v28 = a7 & 1;
        v30 = v61;
        if (v29 != (a7 & 1))
        {
          v31 = *(_QWORD *)&v26[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController];
          v32 = *(_QWORD *)(v31 + 16);
          if (v32)
          {
            v33 = (uint64_t *)(v31 + 64);
            do
            {
              v34 = *v33;
              v33 += 5;
              *(_BYTE *)(v34 + 24) = *(_BYTE *)(v34 + 25);
              --v32;
            }
            while (v32);
          }
          sub_100026A34();
        }
        sub_1000EC894(a4, v30, a8, v26);

        return;
      }
    }

  }
  v35 = Logger.Tests.unsafeMutableAddressor(v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v35, v15);
  v36 = a6;
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.error.getter(v37);
  if (os_log_type_enabled(v37, (os_log_type_t)v38))
  {
    v60 = v38;
    v39 = swift_slowAlloc(22, -1);
    v59 = swift_slowAlloc(64, -1);
    v67 = v59;
    *(_DWORD *)v39 = 136315394;
    v64 = objc_msgSend(v36, "effectiveBrowserViewController");
    v40 = sub_10006922C((uint64_t *)&unk_1006434E0);
    v41 = String.init<A>(describing:)(&v64, v40);
    v43 = v42;
    v64 = (id)sub_1000544FC(v41, v42, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);

    *(_QWORD *)&v44 = swift_bridgeObjectRelease(v43).n128_u64[0];
    *(_WORD *)(v39 + 12) = 2080;
    v45 = (char *)objc_msgSend(v36, "effectiveBrowserViewController", v44);
    if (v45)
    {
      v46 = v45;
      v47 = (void **)&v45[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
      swift_beginAccess(&v45[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], &v64, 0, 0);
      v48 = *v47;
      if (v48)
      {
        v49 = type metadata accessor for DOCItemCollectionViewController(0);
        v50 = swift_dynamicCastClass(v48, v49);
        if (v50)
          v51 = v48;
      }
      else
      {
        v50 = 0;
      }

    }
    else
    {
      v50 = 0;
    }
    v66 = v50;
    v52 = sub_10006922C(&qword_100652EA0);
    v53 = String.init<A>(describing:)(&v66, v52);
    v55 = v54;
    v66 = sub_1000544FC(v53, v54, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);

    swift_bridgeObjectRelease(v55);
    _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v60, "%s's content VC is %s, not a DOCItemCollectionViewController", (uint8_t *)v39, 0x16u);
    v56 = v59;
    swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {

  }
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  v57 = v62;
  v58 = String._bridgeToObjectiveC()();
  objc_msgSend(v57, "failedTest:", v58);

}

double sub_1000EDD80(void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  NSObject *v20;
  __n128 v21;
  os_log_type_t v22;
  int v23;
  SEL *v24;
  SEL *v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  id v38;
  id v39;
  double result;
  uint64_t v41;
  int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  id v50;
  uint64_t v51;

  v49 = a5;
  v48 = a3;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend((id)objc_opt_self(DOCConcreteLocation), "recentDocumentsLocation");
  v15 = Logger.Tests.unsafeMutableAddressor(v14);
  v46 = v11;
  v47 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15, v10);
  v16 = v14;
  v17 = a1;
  v18 = v16;
  v19 = v17;
  v20 = Logger.logObject.getter(v19);
  v22 = static os_log_type_t.info.getter(v21);
  v23 = v22;
  v24 = (SEL *)&off_10061F000;
  v25 = (SEL *)&off_10061F000;
  if (os_log_type_enabled(v20, v22))
  {
    v26 = swift_slowAlloc(22, -1);
    v27 = (_QWORD *)swift_slowAlloc(16, -1);
    *(_DWORD *)v26 = 138412546;
    v44 = a4;
    v45 = a6;
    v50 = v18;
    v42 = v23;
    v28 = v18;
    v43 = a2;
    v29 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
    *v27 = v18;

    *(_WORD *)(v26 + 12) = 2112;
    v30 = objc_msgSend(v19, "fullRecentsViewController");
    v31 = objc_msgSend(v30, "hierarchyController");

    v50 = v31;
    a4 = v44;
    a6 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
    v27[1] = v31;
    a2 = v43;

    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v42, "resetting location %@ to %@", (uint8_t *)v26, 0x16u);
    v32 = sub_10006922C(&qword_100643AB0);
    swift_arrayDestroy(v27, 2, v32);
    v33 = v27;
    v24 = (SEL *)&off_10061F000;
    swift_slowDealloc(v33, -1, -1);
    v34 = v26;
    v25 = (SEL *)&off_10061F000;
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {

  }
  (*(void (**)(char *, uint64_t))(v46 + 8))(v13, v47);
  v35 = objc_msgSend(v19, v24[339]);
  v36 = objc_msgSend(v35, v25[355]);

  v37 = swift_allocObject(&unk_1005C7538, 64, 7);
  *(_QWORD *)(v37 + 16) = v19;
  *(_QWORD *)(v37 + 24) = a2;
  *(_QWORD *)(v37 + 32) = v48;
  *(_QWORD *)(v37 + 40) = a4;
  *(_BYTE *)(v37 + 48) = v49 & 1;
  *(_QWORD *)(v37 + 56) = a6;
  v38 = v19;
  v39 = a2;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a6);
  sub_1001D4F4C(v18, v18, 0, 1, 0, (void (*)(void))sub_10010D688, v37);

  *(_QWORD *)&result = swift_release(v37).n128_u64[0];
  return result;
}

void sub_1000EE0C0(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, void (*a6)(char *, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  NSObject *v18;
  __n128 v19;
  os_log_type_t v20;
  uint8_t *v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  void *v24;
  void **v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  NSString v30;
  id v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  char *v37;
  void *v38;
  void **v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  unint64_t v53;
  void *v54;
  char v55[24];
  char v56[24];
  uint64_t v57;
  uint64_t v58;

  v50 = a5;
  v51 = a6;
  v52 = a3;
  v53 = a4;
  v54 = a2;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v49 - v12;
  v15 = Logger.Tests.unsafeMutableAddressor(v14);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v17 = v16(v13, v15, v7);
  v18 = Logger.logObject.getter(v17);
  v20 = static os_log_type_t.info.getter(v19);
  if (os_log_type_enabled(v18, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v20, "location reset completion block", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = *(void (**)(char *, uint64_t))(v8 + 8);
  v22(v13, v7);
  v23 = (char *)objc_msgSend(a1, "effectiveBrowserViewController");
  if (v23)
  {
    v24 = v23;
    v25 = (void **)&v23[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
    swift_beginAccess(&v23[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v55, 0, 0);
    v26 = *v25;
    if (v26)
    {
      v27 = type metadata accessor for DOCItemCollectionViewController(0);
      v28 = swift_dynamicCastClass(v26, v27);
      if (v28)
      {
        v29 = (char *)v28;
        v30 = v26;

        v31 = objc_msgSend(a1, "fullRecentsViewController");
        DOCFullDocumentManagerViewController.updateDisplayMode(to:saveAsUserSelection:for:)((uint64_t *)(v50 & 1), 1, 0);

        sub_1000EC894(v52, v53, (uint64_t)v51, v29);
        goto LABEL_19;
      }
    }

  }
  v51 = v22;
  v16(v10, v15, v7);
  v32 = a1;
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.error.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    v58 = v36;
    *(_DWORD *)v35 = 136315138;
    v37 = (char *)objc_msgSend(v32, "effectiveBrowserViewController");
    if (v37)
    {
      v38 = v37;
      v39 = (void **)&v37[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
      swift_beginAccess(&v37[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v56, 0, 0);
      v40 = *v39;
      if (*v39)
      {
        v41 = type metadata accessor for DOCItemCollectionViewController(0);
        v42 = swift_dynamicCastClass(v40, v41);
        if (v42)
          v43 = v40;
      }
      else
      {
        v42 = 0;
      }

    }
    else
    {
      v42 = 0;
    }
    v57 = v42;
    v44 = sub_10006922C(&qword_100652EA0);
    v45 = String.init<A>(describing:)(&v57, v44);
    v47 = v46;
    v57 = sub_1000544FC(v45, v46, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);

    swift_bridgeObjectRelease(v47);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "itemCollectionVC %s is not a DOCItemCollectionViewController", v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);

  }
  else
  {

  }
  v51(v10, v7);
  v48 = v54;
  v30 = String._bridgeToObjectiveC()();
  objc_msgSend(v48, "failedTest:", v30);
LABEL_19:

}

uint64_t sub_1000EE4B0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  void *v6;
  _QWORD *v13;
  _QWORD *v14;
  id v15;
  id v16;
  id v17;
  id v18;

  v13 = (_QWORD *)swift_allocObject(&unk_1005C44F0, 64, 7);
  v13[2] = v6;
  v13[3] = a1;
  v13[4] = a2;
  v13[5] = a5;
  v13[6] = a6;
  v13[7] = a3;
  v14 = (_QWORD *)swift_allocObject(&unk_1005C4518, 48, 7);
  v14[2] = sub_10010CC28;
  v14[3] = v13;
  v14[4] = v6;
  v14[5] = a5;
  v15 = v6;
  v16 = a5;
  v17 = v15;
  v18 = v16;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  swift_retain();
  sub_1000F10F4(a4, v18, (uint64_t)sub_10010DED0, (uint64_t)v14);
  swift_release(v13);
  return swift_release(v14);
}

void sub_1000EE5A0(uint64_t a1, uint64_t a2, id a3, uint64_t a4, unint64_t a5, void *a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  NSString v23;
  char *v24;
  uint64_t v25;
  void *v26;
  void **v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  double v52;
  char *v53;
  void *v54;
  void **v55;
  void *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t *v61;
  id v62;
  void *v63;
  void *v64;
  id v65;
  uint64_t v66;
  Class isa;
  _QWORD *v68;
  uint64_t v69;
  void *v70;
  id v71;
  __CFString *v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  NSString v83;
  uint8_t *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  char *v90;
  id v91;
  uint64_t v92;
  unint64_t v93;
  _OWORD v94[3];
  char v95[24];
  uint64_t v96;
  char *v97;
  uint64_t v98;

  v88 = a8;
  v89 = a7;
  v13 = type metadata accessor for IndexPath(0);
  v86 = *(_QWORD *)(v13 - 8);
  v87 = v13;
  __chkstk_darwin(v13);
  v90 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v84 - v21;
  if (a2)
  {
    v23 = String._bridgeToObjectiveC()();
    objc_msgSend(a3, "failedTest:", v23);

  }
  v92 = a4;
  v24 = (char *)objc_msgSend(a6, "effectiveBrowserViewController", v20);
  v93 = a5;
  v25 = v15;
  if (v24)
  {
    v26 = v24;
    v27 = (void **)&v24[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
    swift_beginAccess(&v24[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v95, 0, 0);
    v28 = *v27;
    if (*v27)
    {
      v29 = type metadata accessor for DOCItemCollectionViewController(0);
      v30 = swift_dynamicCastClass(v28, v29);
      if (v30)
      {
        v31 = (char *)v30;
        v85 = v28;

        v33 = Logger.Tests.unsafeMutableAddressor(v32);
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v33, v25);
        v34 = v93;
        v35 = swift_bridgeObjectRetain_n(v93, 2);
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.debug.getter(v36);
        if (os_log_type_enabled(v36, v37))
        {
          v38 = swift_slowAlloc(12, -1);
          v91 = a3;
          v39 = (uint8_t *)v38;
          v40 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v94[0] = v40;
          *(_DWORD *)v39 = 136315138;
          v84 = v39 + 4;
          swift_bridgeObjectRetain(v93);
          v97 = (char *)sub_1000544FC(v92, v93, (uint64_t *)v94);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
          swift_bridgeObjectRelease_n(v93, 3);
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Navigating to 100item folder for test %s", v39, 0xCu);
          swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
          v41 = v40;
          v34 = v93;
          swift_slowDealloc(v41, -1, -1);
          v42 = v39;
          a3 = v91;
          swift_slowDealloc(v42, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v34, 2);
        }
        (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v25);
        v61 = v89;
        v62 = objc_msgSend(a6, "effectiveFullBrowser");
        DOCFullDocumentManagerViewController.updateDisplayMode(to:saveAsUserSelection:for:)(v61, 1, 0);

        objc_msgSend(v31, "loadViewIfNeeded");
        v63 = *(void **)&v31[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
        v64 = v90;
        if (v63)
        {
          v65 = v63;
          sub_1000EED50(v65, 2, v64);
          v66 = v92;
          isa = IndexPath._bridgeToObjectiveC()().super.isa;
          (*(void (**)(void *, uint64_t))(v86 + 8))(v64, v87);
          objc_msgSend(v31, "collectionView:performPrimaryActionForItemAtIndexPath:", v65, isa);

          v68 = (_QWORD *)swift_allocObject(&unk_1005C4540, 56, 7);
          v68[2] = a6;
          v68[3] = a3;
          v68[4] = v66;
          v68[5] = v34;
          v69 = v88;
          v68[6] = v88;
          v70 = (void *)objc_opt_self(NSNotificationCenter);
          v71 = a6;
          swift_bridgeObjectRetain(v34);
          v72 = CFSTR("DOCFullDocumentManagerViewControllerDidFinishLoadingNotificationName");
          v73 = a3;
          swift_bridgeObjectRetain(v69);
          v74 = objc_msgSend(v70, "defaultCenter");
          memset(v94, 0, 32);
          v75 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
          v76 = swift_allocObject(&unk_1005C4568, 32, 7);
          *(_QWORD *)(v76 + 16) = sub_10010CC4C;
          *(_QWORD *)(v76 + 24) = v68;
          v77 = swift_retain();
          NSNotificationCenter.doc_observeOnce(forName:object:queue:using:)(v72, v94, v75, sub_10010DF5C, v76, v77);

          swift_release(v76);
          sub_10000CB4C((uint64_t)v94, &qword_100642730);

          swift_release(v68);
        }
        else
        {
          __break(1u);
        }
        return;
      }
    }

  }
  v91 = a3;
  v43 = Logger.Tests.unsafeMutableAddressor(v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v22, v43, v15);
  v44 = a6;
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.error.getter(v45);
  if (os_log_type_enabled(v45, v46))
  {
    v89 = (uint64_t *)v15;
    v47 = swift_slowAlloc(22, -1);
    v90 = (char *)swift_slowAlloc(64, -1);
    v97 = v90;
    *(_DWORD *)v47 = 136315394;
    *(_QWORD *)&v94[0] = objc_msgSend(v44, "effectiveBrowserViewController");
    v48 = sub_10006922C((uint64_t *)&unk_1006434E0);
    v49 = String.init<A>(describing:)(v94, v48);
    v51 = v50;
    *(_QWORD *)&v94[0] = sub_1000544FC(v49, v50, (uint64_t *)&v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v94, (char *)v94 + 8);

    *(_QWORD *)&v52 = swift_bridgeObjectRelease(v51).n128_u64[0];
    *(_WORD *)(v47 + 12) = 2080;
    v53 = (char *)objc_msgSend(v44, "effectiveBrowserViewController", v52);
    if (v53)
    {
      v54 = v53;
      v55 = (void **)&v53[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
      swift_beginAccess(&v53[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v94, 0, 0);
      v56 = *v55;
      v57 = v89;
      if (v56)
      {
        v58 = type metadata accessor for DOCItemCollectionViewController(0);
        v59 = swift_dynamicCastClass(v56, v58);
        if (v59)
          v60 = v56;
      }
      else
      {
        v59 = 0;
      }

    }
    else
    {
      v59 = 0;
      v57 = v89;
    }
    v96 = v59;
    v78 = sub_10006922C(&qword_100652EA0);
    v79 = String.init<A>(describing:)(&v96, v78);
    v81 = v80;
    v96 = sub_1000544FC(v79, v80, (uint64_t *)&v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);

    swift_bridgeObjectRelease(v81);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "%s's content VC is %s), not a DOCItemCollectionViewController", (uint8_t *)v47, 0x16u);
    v82 = v90;
    swift_arrayDestroy(v90, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1, -1);
    swift_slowDealloc(v47, -1, -1);

    (*(void (**)(char *, uint64_t *))(v16 + 8))(v22, v57);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
  }
  v83 = String._bridgeToObjectiveC()();
  objc_msgSend(v91, "failedTest:", v83);

}

void sub_1000EED50(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _DWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  const char *v44;
  char *v45;
  uint64_t v46;
  void *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  void *v55;
  char v56[24];
  uint64_t v57;

  v4 = v3;
  v50 = a2;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for IndexPath(0);
  v46 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v45 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10006922C((uint64_t *)&unk_100642710);
  v14 = __chkstk_darwin(v13);
  v47 = a1;
  v48 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(a1, "preparedCells", v14);
  if (!v16)
  {
    __break(1u);
    JUMPOUT(0x1000EF5BCLL);
  }
  v17 = v16;
  v18 = sub_10004F2F0(0, (unint64_t *)&unk_1006428D0, UICollectionViewCell_ptr);
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

  if (!((unint64_t)v19 >> 62))
  {
    v53 = *(char **)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v53)
      goto LABEL_4;
LABEL_22:
    swift_bridgeObjectRelease(v19);
LABEL_23:
    v32 = Logger.Tests.unsafeMutableAddressor(v27);
    v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v32, v7);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.debug.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v49 = v10;
      v36 = (_DWORD *)swift_slowAlloc(12, -1);
      v57 = swift_slowAlloc(32, -1);
      *v36 = 136315138;
      __asm { BR              X10 }
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v37 = sub_10010C290();
    v38 = swift_allocError(&type metadata for DOCApplication.BrowseFolderTestInfo.BrowseFolderTestInfoError, v37, 0, 0);
    swift_willThrow(v38);
    return;
  }
LABEL_18:
  if (v19 < 0)
    v30 = v19;
  else
    v30 = v19 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v19);
  v31 = _CocoaArrayWrapper.endIndex.getter(v30);
  swift_bridgeObjectRelease(v19);
  v53 = (char *)v31;
  if (!v31)
    goto LABEL_22;
LABEL_4:
  v41 = v11;
  v42 = a3;
  v49 = v10;
  v39 = v8;
  v40 = v7;
  v54 = v19 & 0xC000000000000001;
  v11 = 4;
  v51 = v50;
  v52 = v19;
  v43 = v4;
  v44 = "v16@?0@\"NSError\"8";
  v10 = v53;
  while (1)
  {
    if (v54)
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v19);
    else
      v20 = *(id *)(v19 + 8 * v11);
    a3 = v20;
    v21 = (char *)(v11 - 3);
    if (__OFADD__(v11 - 4, 1))
    {
      __break(1u);
      goto LABEL_18;
    }
    v22 = type metadata accessor for DOCItemCollectionCell();
    v23 = (_QWORD *)swift_dynamicCastClass(a3, v22);
    if (v23)
      break;

    ++v11;
    if (v21 == v10)
    {
      swift_bridgeObjectRelease(v19);
      v8 = v39;
      v7 = v40;
      v10 = v49;
      goto LABEL_23;
    }
  }
  v24 = (*(uint64_t (**)(void))((swift_isaMask & *v23) + 0x1F8))();
  if (v24)
  {
    v25 = (void *)v24;
    v26 = (_QWORD *)(v24 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_node);
    swift_beginAccess(v24 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_node, v56, 0, 0);
    if (*v26)
    {
      v55 = a3;
      __asm { BR              X8 }
    }

  }
  swift_bridgeObjectRelease(v19);
  v28 = sub_10010C290();
  v29 = swift_allocError(&type metadata for DOCApplication.BrowseFolderTestInfo.BrowseFolderTestInfoError, v28, 0, 0);
  swift_willThrow(v29);

}

void sub_1000EF604(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  char *v9;
  void *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSString v16;
  _BYTE v17[24];

  v9 = (char *)objc_msgSend(a1, "effectiveBrowserViewController");
  if (!v9)
    goto LABEL_6;
  v10 = v9;
  v11 = (void **)&v9[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
  swift_beginAccess(&v9[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v17, 0, 0);
  v12 = *v11;
  if (!v12
    || (v13 = type metadata accessor for DOCItemCollectionViewController(0),
        (v14 = swift_dynamicCastClass(v12, v13)) == 0))
  {

LABEL_6:
    v16 = String._bridgeToObjectiveC()();
    objc_msgSend(a2, "failedTest:", v16);
    goto LABEL_7;
  }
  v15 = (char *)v14;
  v16 = v12;

  sub_1000EC894(a3, a4, a5, v15);
LABEL_7:

}

void sub_1000EF700(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  NSString v18;
  char *v19;
  void *v20;
  void **v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  _QWORD *v32;
  id v33;
  id v34;
  NSString v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  double v45;
  char *v46;
  void *v47;
  void **v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  id aBlock;
  _QWORD v64[4];
  _QWORD *v65;
  char v66[24];
  uint64_t v67;
  uint64_t v68;

  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v18 = String._bridgeToObjectiveC()();
    objc_msgSend(a3, "failedTest:", v18);

  }
  v62 = a4;
  v19 = (char *)objc_msgSend(a6, "effectiveBrowserViewController", v15);
  if (v19)
  {
    v20 = v19;
    v21 = (void **)&v19[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
    swift_beginAccess(&v19[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v66, 0, 0);
    v22 = *v21;
    if (v22)
    {
      v23 = type metadata accessor for DOCItemCollectionViewController(0);
      v24 = swift_dynamicCastClass(v22, v23);
      if (v24)
      {
        v25 = v24;
        v26 = v22;

        v27 = objc_msgSend(a6, "effectiveFullBrowser");
        v28 = (void *)objc_opt_self(DOCUISession);
        v29 = (_QWORD *)swift_allocObject(&unk_1005C7560, 64, 7);
        v29[2] = a3;
        v29[3] = v25;
        v29[4] = v62;
        v29[5] = a5;
        v29[6] = v27;
        v29[7] = a7;
        v64[3] = sub_10010D6FC;
        v65 = v29;
        aBlock = _NSConcreteStackBlock;
        v64[0] = 1107296256;
        v64[1] = sub_10004A82C;
        v64[2] = &unk_1005C7578;
        v30 = _Block_copy(&aBlock);
        v31 = a3;
        v32 = v65;
        v33 = v26;
        v34 = v31;
        swift_bridgeObjectRetain(a5);
        v35 = v27;
        objc_msgSend(v28, "performAfterCATransactionCommits:", v30, swift_release(v32).n128_f64[0]);
        _Block_release(v30);

        goto LABEL_19;
      }
    }

  }
  v61 = a5;
  v36 = Logger.Tests.unsafeMutableAddressor(v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v36, v13);
  v37 = a6;
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.error.getter(v38);
  if (os_log_type_enabled(v38, v39))
  {
    v60 = a3;
    v40 = swift_slowAlloc(22, -1);
    v59 = swift_slowAlloc(64, -1);
    v68 = v59;
    *(_DWORD *)v40 = 136315394;
    aBlock = objc_msgSend(v37, "effectiveBrowserViewController");
    v41 = sub_10006922C((uint64_t *)&unk_1006434E0);
    v42 = String.init<A>(describing:)(&aBlock, v41);
    v44 = v43;
    aBlock = (id)sub_1000544FC(v42, v43, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v64);

    *(_QWORD *)&v45 = swift_bridgeObjectRelease(v44).n128_u64[0];
    *(_WORD *)(v40 + 12) = 2080;
    v46 = (char *)objc_msgSend(v37, "effectiveBrowserViewController", v45);
    if (v46)
    {
      v47 = v46;
      v48 = (void **)&v46[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
      swift_beginAccess(&v46[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], &aBlock, 0, 0);
      v49 = *v48;
      if (*v48)
      {
        v50 = type metadata accessor for DOCItemCollectionViewController(0);
        v51 = swift_dynamicCastClass(v49, v50);
        if (v51)
          v52 = v49;
      }
      else
      {
        v51 = 0;
      }

    }
    else
    {
      v51 = 0;
    }
    v67 = v51;
    v53 = sub_10006922C(&qword_100652EA0);
    v54 = String.init<A>(describing:)(&v67, v53);
    v56 = v55;
    v67 = sub_1000544FC(v54, v55, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);

    swift_bridgeObjectRelease(v56);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s's content VC is %s, not a DOCItemCollectionViewController", (uint8_t *)v40, 0x16u);
    v57 = v59;
    swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v40, -1, -1);

    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    a3 = v60;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
  v35 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "failedTest:", v35);
LABEL_19:

}

double sub_1000EFBB8(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  _QWORD *v12;
  id v13;
  id v14;
  double result;

  v12 = (_QWORD *)swift_allocObject(&unk_1005C75B0, 64, 7);
  v12[2] = a1;
  v12[3] = a3;
  v12[4] = a4;
  v12[5] = a5;
  v12[6] = a6;
  v12[7] = a2;
  v13 = a1;
  swift_bridgeObjectRetain(a4);
  v14 = a5;
  sub_1000F194C(a2, (uint64_t)sub_10010D744, (uint64_t)v12);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

double sub_1000EFC54(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  NSString v9;
  uint64_t v10;
  id v11;
  double result;

  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "startedTest:", v9);

  DOCFullDocumentManagerViewController.updateDisplayMode(to:saveAsUserSelection:for:)(a5, 1, 0);
  v10 = swift_allocObject(&unk_1005C75D8, 24, 7);
  *(_QWORD *)(v10 + 16) = a1;
  v11 = a1;
  sub_1000F194C(a6, (uint64_t)sub_10010D750, v10);
  *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  return result;
}

void sub_1000EFD04(char *a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)&a1[OBJC_IVAR____TtC5Files14DOCApplication_currentTestName + 8];
  if (v2)
  {
    swift_bridgeObjectRetain(*(_QWORD *)&a1[OBJC_IVAR____TtC5Files14DOCApplication_currentTestName + 8]);
    v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    v3 = 0;
  }
  objc_msgSend(a1, "finishedTest:waitForCommit:extraResults:", v3, 1, 0);

}

void sub_1000EFD90(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  id v15;
  id v16;
  _QWORD v17[5];
  _QWORD *v18;

  v10 = swift_allocObject(&unk_1005C4400, 17, 7);
  *(_BYTE *)(v10 + 16) = 0;
  v11 = swift_allocObject(&unk_1005C4428, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16);
  v12 = (_QWORD *)swift_allocObject(&unk_1005C4450, 56, 7);
  v12[2] = v10;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = v11;
  v12[6] = a1;
  v17[4] = sub_10010CBB8;
  v18 = v12;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_10002E508;
  v17[3] = &unk_1005C4468;
  v13 = _Block_copy(v17);
  v14 = v18;
  swift_retain();
  swift_retain();
  v15 = a1;
  swift_release(v14);
  v16 = objc_msgSend(a2, "addSubscriberForConfiguration:usingBlock:", a3, v13);
  _Block_release(v13);
  swift_release(v10);

}

uint64_t sub_1000EFEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD aBlock[5];
  _QWORD *v39;

  v33 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v16 - 8);
  v36 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v34 = static OS_dispatch_queue.main.getter(v19);
  v20 = (_QWORD *)swift_allocObject(&unk_1005C44A0, 72, 7);
  v20[2] = a3;
  v20[3] = a2;
  v20[4] = a4;
  v20[5] = a5;
  v20[6] = a6;
  v20[7] = a7;
  v21 = a7;
  v20[8] = a1;
  aBlock[4] = sub_10010CC10;
  v39 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = &unk_1005C44B8;
  v22 = _Block_copy(aBlock);
  v23 = v39;
  swift_retain();
  swift_errorRetain(a2);
  swift_retain();
  swift_retain();
  v24 = v21;
  swift_bridgeObjectRetain(a1);
  v25 = swift_release(v23);
  static DispatchQoS.unspecified.getter(v25);
  aBlock[0] = _swiftEmptyArrayStorage;
  v26 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_10006922C((uint64_t *)&unk_100647540);
  v28 = sub_1000791AC();
  v29 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v27, v28, v33, v26);
  v30 = (void *)v34;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v15, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v18, v36);
}

void sub_1000F0128(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, uint64_t, __n128), uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  __n128 v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::Bool v27;
  Swift::Bool v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  void *object;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[3];
  uint64_t v64;
  uint64_t v65;
  char v66[24];
  char v67[24];

  v62 = a7;
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_BYTE *)(a1 + 16);
  v17 = swift_beginAccess(a1 + 16, v67, 0, 0);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    if (a2)
    {
      a3(0, a2, v17);
      return;
    }
    swift_beginAccess(a5 + 16, v66, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(a5 + 16);
    v60 = v13;
    v61 = v12;
    if (Strong)
    {
      v59 = (void *)Strong;
      static String._unconditionallyBridgeFromObjectiveC(_:)(a6);
      v20 = v19;
      v22 = (void *)static DOCDocumentSourceIdentifier.iCloudCurrent.getter(v21);
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v25 = v24;

      v26._countAndFlagsBits = v23;
      v26._object = v25;
      v27 = String.hasPrefix(_:)(v26);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(v25);
      if (v27)
      {
        v28 = 1;
      }
      else
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(a6);
        v30 = v29;
        v31._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(DOCDocumentSourceIdentifierICloudFPv2);
        object = v31._object;
        v28 = String.hasPrefix(_:)(v31);
        swift_bridgeObjectRelease(v30);
        swift_bridgeObjectRelease(object);
      }
      v33 = v62;
      v34 = v59;
      v35 = a6;
      v36 = sub_100108A08(v33, v35, v28);

      if (v36)
      {
        v37 = v36;
        v38 = objc_msgSend(v37, "identifier");
        v39 = objc_msgSend(objc_allocWithZone((Class)DOCConcreteLocation), "initWithSourceIdentifier:node:", v38, 0);

        v13 = v60;
        v12 = v61;
        if (v39)
        {
          swift_beginAccess(v16, v63, 1, 0);
          *v16 = 1;
          v40 = v39;
          ((void (*)(id, _QWORD))a3)(v39, 0);

          return;
        }
      }
      else
      {

        v13 = v60;
        v12 = v61;
      }
    }
    v41 = Logger.Tests.unsafeMutableAddressor(Strong);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v41, v12);
    v42 = v13;
    v43 = a6;
    v44 = v62;
    swift_bridgeObjectRetain_n(v62, 2);
    v45 = v43;
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.debug.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = swift_slowAlloc(22, -1);
      v49 = swift_slowAlloc(64, -1);
      v63[0] = v49;
      *(_DWORD *)v48 = 136315394;
      v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v52 = v51;
      v64 = sub_1000544FC(v50, v51, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);

      swift_bridgeObjectRelease(v52);
      *(_WORD *)(v48 + 12) = 2080;
      v53 = sub_10004F2F0(0, &qword_100643AC0, DOCDocumentSource_ptr);
      v54 = swift_bridgeObjectRetain(v44);
      v55 = Array.description.getter(v54, v53);
      v57 = v56;
      swift_bridgeObjectRelease(v44);
      v64 = sub_1000544FC(v55, v57, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease_n(v44, 2);
      swift_bridgeObjectRelease(v57);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Sources updated. Did not find: %s in list of sources: %s", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);

      (*(void (**)(char *, uint64_t))(v60 + 8))(v15, v61);
    }
    else
    {

      swift_bridgeObjectRelease_n(v44, 2);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v15, v12);
    }
  }
}

uint64_t sub_1000F0584(void **a1, void *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, __n128);
  id v20;
  id v21;
  uint8_t *v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  double v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  id v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  void *object;
  Swift::Bool v59;
  __n128 v60;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  _QWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  char *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t, __n128);
  char *v83;
  uint8_t *v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v4 = v3;
  LODWORD(v85) = a3;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v83 = (char *)v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)v74 - v11;
  __chkstk_darwin(v13);
  v15 = (char *)v74 - v14;
  v16 = *a1;
  v18 = Logger.Tests.unsafeMutableAddressor(v17);
  v19 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
  v81 = v18;
  v82 = v19;
  ((void (*)(char *))v19)(v15);
  v20 = a2;
  v21 = v16;
  v22 = (uint8_t *)v20;
  v23 = v21;
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.debug.getter(v24);
  v78 = v25;
  v26 = os_log_type_enabled(v24, v25);
  v84 = v22;
  if (v26)
  {
    v27 = swift_slowAlloc(22, -1);
    v77 = v12;
    v28 = v27;
    v75 = swift_slowAlloc(64, -1);
    v88 = v75;
    *(_DWORD *)v28 = 136315394;
    v76 = v8;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v80 = v3;
    v31 = v30;
    v86 = sub_1000544FC(v29, v30, &v88);
    v79 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87);

    *(_QWORD *)&v32 = swift_bridgeObjectRelease(v31).n128_u64[0];
    *(_WORD *)(v28 + 12) = 2080;
    v74[1] = v28 + 14;
    v33 = objc_msgSend(v23, "identifier", v32);
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v36 = v35;

    v4 = v80;
    v86 = sub_1000544FC(v34, v36, &v88);
    v7 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87);

    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v78, "Specified source: %s / Available source: %s", (uint8_t *)v28, 0x16u);
    v37 = v75;
    swift_arrayDestroy(v75, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    v38 = v28;
    v12 = v77;
    swift_slowDealloc(v38, -1, -1);

    v39 = *(void (**)(char *, uint64_t))(v76 + 8);
  }
  else
  {

    v39 = *(void (**)(char *, uint64_t))(v8 + 8);
  }
  v39(v15, v7);
  if ((v85 & 1) == 0 || !objc_msgSend(v23, "isiCloudBased"))
  {
    v54 = objc_msgSend(v23, "identifier");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
    v56 = v55;

    v57._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
    object = v57._object;
    v59 = String.hasPrefix(_:)(v57);
    swift_bridgeObjectRelease(v56);
    v60 = swift_bridgeObjectRelease(object);
    if (!v59)
      return 0;
    v85 = v39;
    v82(v83, v81, v7, v60);
    v61 = v23;
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.debug.getter(v62);
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(12, -1);
      v65 = swift_slowAlloc(32, -1);
      v80 = v4;
      v66 = v65;
      v88 = v65;
      *(_DWORD *)v64 = 136315138;
      v84 = v64 + 4;
      v67 = objc_msgSend(v61, "identifier");
      v79 = v7;
      v68 = v67;
      v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
      v71 = v70;

      v86 = sub_1000544FC(v69, v71, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87);

      swift_bridgeObjectRelease(v71);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Source %s is a match", v64, 0xCu);
      v53 = 1;
      swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v64, -1, -1);

      v85(v83, v79);
      return v53;
    }

    v72 = v83;
LABEL_14:
    v85(v72, v7);
    return 1;
  }
  v85 = v39;
  ((void (*)(char *, uint64_t, uint64_t))v82)(v12, v81, v7);
  v40 = v23;
  v41 = v12;
  v42 = Logger.logObject.getter(v40);
  v43 = static os_log_type_t.debug.getter(v42);
  if (!os_log_type_enabled(v42, v43))
  {

    v72 = v41;
    goto LABEL_14;
  }
  v44 = swift_slowAlloc(12, -1);
  v77 = v41;
  v45 = (uint8_t *)v44;
  v46 = swift_slowAlloc(32, -1);
  v80 = v4;
  v47 = v46;
  v88 = v46;
  *(_DWORD *)v45 = 136315138;
  v84 = v45 + 4;
  v48 = objc_msgSend(v40, "identifier");
  v79 = v7;
  v49 = v48;
  v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
  v52 = v51;

  v86 = sub_1000544FC(v50, v52, &v88);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87);

  swift_bridgeObjectRelease(v52);
  _os_log_impl((void *)&_mh_execute_header, v42, v43, "Source %s is a match", v45, 0xCu);
  v53 = 1;
  swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v47, -1, -1);
  swift_slowDealloc(v45, -1, -1);

  v85(v77, v79);
  return v53;
}

uint64_t sub_1000F0BE8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[5];
  _QWORD *v34;

  v5 = v4;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v13 - 8);
  v31 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  v18 = (_QWORD *)swift_allocObject(&unk_1005C4360, 56, 7);
  v18[2] = v4;
  v18[3] = a2;
  v18[4] = a1;
  v18[5] = a3;
  v18[6] = a4;
  aBlock[4] = sub_10010CB20;
  v34 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = &unk_1005C4378;
  v19 = _Block_copy(aBlock);
  v20 = v34;
  v21 = v5;
  v22 = a2;
  v23 = a1;
  swift_retain();
  swift_release(v20);
  static DispatchQoS.unspecified.getter(v24);
  aBlock[0] = _swiftEmptyArrayStorage;
  v25 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_10006922C((uint64_t *)&unk_100647540);
  v27 = sub_1000791AC();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v10, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v15, v31);
}

void sub_1000F0E08(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  void *v15;
  uint64_t v16;
  char v17;
  id v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  id v22;
  _QWORD aBlock[5];
  _QWORD *v24;

  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (_QWORD *)((char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = objc_msgSend(a2, "tabBarController", v11);
  if (v14)
  {
    v15 = v14;
    v16 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
    *v13 = static OS_dispatch_queue.main.getter(v16);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
    v17 = _dispatchPreconditionTest(_:)(v13);
    (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
    if ((v17 & 1) != 0)
    {
      objc_msgSend(v15, "setSelectedIndex:", 2);

      v18 = objc_msgSend(a2, "effectiveFullBrowser");
      v19 = (_QWORD *)swift_allocObject(&unk_1005C43B0, 40, 7);
      v19[2] = a2;
      v19[3] = a4;
      v19[4] = a5;
      aBlock[4] = sub_10010CB3C;
      v24 = v19;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10004A82C;
      aBlock[3] = &unk_1005C43C8;
      v20 = _Block_copy(aBlock);
      v21 = v24;
      v22 = a2;
      swift_retain();
      objc_msgSend(v18, "showLocation:animated:withCompletionBlock:", a3, 0, v20, swift_release(v21).n128_f64[0]);
      _Block_release(v20);

      return;
    }
    __break(1u);
  }
  __break(1u);
}

void sub_1000F0FEC(void *a1, void (*a2)(uint64_t, uint64_t))
{
  char *v3;
  void *v4;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE v15[24];

  v3 = (char *)objc_msgSend(a1, "effectiveBrowserViewController");
  if (v3)
  {
    v4 = v3;
    v5 = (void **)&v3[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
    swift_beginAccess(&v3[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v15, 0, 0);
    v6 = *v5;
    if (v6)
    {
      v7 = type metadata accessor for DOCItemCollectionViewController(0);
      v8 = swift_dynamicCastClass(v6, v7);
      if (v8)
      {
        v9 = v8;
        v10 = v6;

        v11 = v10;
        a2(v9, 0);

        return;
      }
    }

  }
  v12 = sub_10010C140();
  v13 = swift_allocError(&type metadata for DOCApplication.DOCApplicationTestError, v12, 0, 0);
  *v14 = 1;
  a2(0, v13);
  swift_errorRelease(v13);
}

uint64_t sub_1000F10F4(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD aBlock[5];
  _QWORD *v39;

  v5 = v4;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v13 - 8);
  v36 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchTime(0);
  v33 = *(_QWORD *)(v16 - 8);
  v34 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v32 = static OS_dispatch_queue.main.getter(v19);
  static DispatchTime.now()(v32);
  v20 = (_QWORD *)swift_allocObject(&unk_1005C42E8, 56, 7);
  v20[2] = a2;
  v20[3] = v4;
  v20[4] = a1;
  v20[5] = a3;
  v20[6] = a4;
  aBlock[4] = sub_10010CAF4;
  v39 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = &unk_1005C4300;
  v21 = _Block_copy(aBlock);
  v22 = v39;
  v23 = a2;
  v24 = v5;
  v25 = a1;
  swift_retain();
  v26 = swift_release(v22);
  static DispatchQoS.unspecified.getter(v26);
  aBlock[0] = _swiftEmptyArrayStorage;
  v27 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_10006922C((uint64_t *)&unk_100647540);
  v29 = sub_1000791AC();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v28, v29, v10, v27);
  v30 = (void *)v32;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v18, v15, v12, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v36);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v18, v34);
}

uint64_t sub_1000F1364(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  char *v10;
  id v11;
  id v12;
  _QWORD *v13;
  id v14;

  v9 = objc_msgSend(a1, "effectiveFullBrowser");
  v10 = (char *)objc_msgSend(v9, "hierarchyController");
  v11 = *(id *)&v10[OBJC_IVAR____TtC5Files22DOCHierarchyController_sourceObserver];

  v12 = objc_msgSend(a1, "configuration");
  v13 = (_QWORD *)swift_allocObject(&unk_1005C4338, 40, 7);
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  v14 = a3;
  swift_retain();
  sub_1000EFD90(v14, v11, (uint64_t)v12, (uint64_t)sub_10010CB10, (uint64_t)v13);

  return swift_release(v13);
}

void sub_1000F146C(void *a1, uint64_t a2, void *a3, id a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v14 = swift_errorRetain(a2);
    v15 = Logger.Tests.unsafeMutableAddressor(v14);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15, v10);
    swift_errorRetain(a2);
    v16 = a3;
    swift_errorRetain(a2);
    v17 = v16;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(22, -1);
      v34 = swift_slowAlloc(64, -1);
      v38 = v34;
      *(_DWORD *)v20 = 136315394;
      v35 = a5;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v36 = a4;
      v23 = v22;
      v37 = sub_1000544FC(v21, v22, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);

      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v20 + 12) = 2080;
      v37 = a2;
      swift_errorRetain(a2);
      v24 = sub_10006922C((uint64_t *)&unk_100643490);
      v25 = String.init<A>(describing:)(&v37, v24);
      v27 = v26;
      v37 = sub_1000544FC(v25, v26, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
      v28 = v27;
      a4 = v36;
      swift_bridgeObjectRelease(v28);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "error getting location for source identifier %s: %s", (uint8_t *)v20, 0x16u);
      v29 = v34;
      swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    swift_errorRetain(a2);
    ((void (*)(_QWORD, uint64_t))a4)(0, a2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }
  else if (a1)
  {
    v36 = a1;
    ((void (*)(void *, _QWORD))a4)(a1, 0);

  }
  else
  {
    v30 = sub_10010C140();
    v31 = swift_allocError(&type metadata for DOCApplication.DOCApplicationTestError, v30, 0, 0);
    *v32 = 2;
    ((void (*)(_QWORD, uint64_t))a4)(0, v31);
    swift_errorRelease(v31);
  }
}

double sub_1000F17A4(void *a1, void (*a2)(void), uint64_t a3)
{
  void *v3;
  double result;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  __n128 v18;
  _QWORD v19[4];

  if ((sub_1001088BC((uint64_t)a1) & 1) != 0)
  {
    a2();
  }
  else
  {
    if (qword_100640E08 != -1)
      swift_once(&qword_100640E08, sub_100086B74);
    v8 = static NSNotificationName.DOCItemCollectionViewDidLayoutSubviews;
    v9 = (_QWORD *)swift_allocObject(&unk_1005C4298, 48, 7);
    v9[2] = v3;
    v9[3] = a1;
    v9[4] = a2;
    v9[5] = a3;
    v10 = (void *)objc_opt_self(NSNotificationCenter);
    v11 = v3;
    v12 = a1;
    v13 = objc_msgSend(v10, "defaultCenter", swift_retain().n128_f64[0]);
    v19[3] = sub_10004F2F0(0, (unint64_t *)&qword_1006434D0, UIViewController_ptr);
    v14 = (void *)objc_opt_self(NSOperationQueue);
    v15 = v12;
    v16 = objc_msgSend(v14, "mainQueue", v12);
    v17 = swift_allocObject(&unk_1005C42C0, 32, 7);
    *(_QWORD *)(v17 + 16) = sub_10010C9C0;
    *(_QWORD *)(v17 + 24) = v9;
    v18 = swift_retain();
    NSNotificationCenter.doc_observeOnce(forName:object:queue:using:)(v8, v19, v16, sub_10010DF5C, v17, v18);

    swift_release(v17);
    sub_10000CB4C((uint64_t)v19, &qword_100642730);
    *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  }
  return result;
}

double sub_1000F194C(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  _QWORD *v7;
  id v8;
  id v9;
  double result;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  __n128 v21;
  _QWORD v22[4];

  v7 = (_QWORD *)swift_allocObject(&unk_1005C4108, 40, 7);
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v8 = a1;
  swift_retain_n(a3, 2);
  v9 = v8;
  if ((sub_1001088BC((uint64_t)v9) & 1) != 0)
  {
    sub_1000F1B84((uint64_t)v9, a2, a3);
    swift_release(a3);

    *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  }
  else
  {
    if (qword_100640E08 != -1)
      swift_once(&qword_100640E08, sub_100086B74);
    v11 = static NSNotificationName.DOCItemCollectionViewDidLayoutSubviews;
    v12 = (_QWORD *)swift_allocObject(&unk_1005C4130, 48, 7);
    v12[2] = v3;
    v12[3] = v9;
    v12[4] = sub_10010C9B0;
    v12[5] = v7;
    v13 = (void *)objc_opt_self(NSNotificationCenter);
    v14 = v9;
    v15 = v3;
    v16 = objc_msgSend(v13, "defaultCenter", swift_retain().n128_f64[0]);
    v22[3] = sub_10004F2F0(0, (unint64_t *)&qword_1006434D0, UIViewController_ptr);
    v22[0] = v14;
    v17 = (void *)objc_opt_self(NSOperationQueue);
    v18 = v14;
    v19 = objc_msgSend(v17, "mainQueue", v22[0]);
    v20 = swift_allocObject(&unk_1005C4158, 32, 7);
    *(_QWORD *)(v20 + 16) = sub_10010C9C0;
    *(_QWORD *)(v20 + 24) = v12;
    v21 = swift_retain();
    NSNotificationCenter.doc_observeOnce(forName:object:queue:using:)(v11, v22, v19, sub_10010DF5C, v20, v21);

    swift_release(v20);
    sub_10000CB4C((uint64_t)v22, &qword_100642730);
    swift_release(a3);

    swift_release(v7);
    *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  }
  return result;
}

void sub_1000F1B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  void (*v33)(_BYTE *);
  void *v34;
  int v35;
  id v36;
  uint64_t v37;
  _QWORD *v38;
  void (*v39)(_QWORD);
  uint64_t v40;
  void *v41;
  double v42;
  void **v43;
  void *v44;
  void **v45;
  void **v46;
  uint64_t v47;
  void *v48;
  id v49;
  double v50;
  double v51;
  double v52;
  id v53;
  __int128 v54;
  double v55;
  double v56;
  id v57;
  id v58;
  id v59;
  id v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void **v67;
  void **v68;
  void **v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(_BYTE *, uint64_t);
  char *__ptr32 *v80;
  unint64_t v81;
  int64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  void *v88;
  _BYTE *v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  void **v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  double v99;
  unsigned int v100;
  BOOL v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  dispatch_group_t v105;
  uint64_t v106;
  void *v107;
  unint64_t v108;
  NSObject *v109;
  _BYTE *v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint64_t v114;
  void **v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  void **v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  dispatch_group_t v135;
  uint64_t v136;
  _BYTE v137[12];
  int v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE *v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  unint64_t v148;
  dispatch_queue_t v149;
  uint64_t (**v150)(uint64_t);
  __int128 v151;
  _BYTE *v152;
  uint64_t v153;
  unint64_t v154;
  _BYTE *v155;
  _BYTE *v156;
  int64_t v157;
  dispatch_group_t v158;
  void (*v159)(_BYTE *);
  uint64_t v160;
  void **v161;
  uint64_t v162;
  uint64_t (*v163)(uint64_t);
  void *v164;
  void *v165;
  unint64_t v166;
  uint64_t v167;
  char v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  void **v181;
  _QWORD v182[23];
  _OWORD v183[3];
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  char v193[24];
  uint64_t v194;

  v139 = a2;
  v140 = a3;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v144 = &v137[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for DispatchQoS(0);
  v142 = *(_QWORD *)(v7 - 8);
  v143 = v7;
  __chkstk_darwin(v7);
  v141 = &v137[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Logger(0);
  v10 = *(void ***)(v9 - 8);
  __chkstk_darwin(v9);
  v152 = &v137[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v156 = &v137[-v13];
  __chkstk_darwin(v14);
  v16 = &v137[-v15];
  v158 = dispatch_group_create();
  v17 = *(void **)(a1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView);
  v153 = v9;
  v145 = v5;
  v146 = v4;
  v155 = v16;
  if (!v17)
  {
    v74 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_56:
    v76 = Logger.Tests.unsafeMutableAddressor(v17);
    v159 = (void (*)(_BYTE *))v10[2];
    v160 = v76;
    v159(v16);
    v77 = swift_bridgeObjectRetain_n(v74, 2);
    v78 = Logger.logObject.getter(v77);
    LOBYTE(v79) = static os_log_type_t.debug.getter(v78);
    v80 = &off_1004D4000;
    v81 = (unint64_t)v74 >> 62;
    if (!os_log_type_enabled((os_log_t)v78, (os_log_type_t)v79))
    {

      swift_bridgeObjectRelease_n(v74, 2);
      v79 = (void (*)(_BYTE *, uint64_t))v10[1];
      v79(v16, v9);
      goto LABEL_61;
    }
    v157 = v74;
    v154 = (unint64_t)v10;
    v80 = (char *__ptr32 *)swift_slowAlloc(22, -1);
    v10 = (void **)swift_slowAlloc(32, -1);
    v161 = v10;
    *v80 = (char *__ptr32)136315394;
    *(_QWORD *)&v183[0] = sub_1000544FC(0xD00000000000004DLL, 0x800000010050EF30, (uint64_t *)&v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v183, (char *)v183 + 8);
    *((_WORD *)v80 + 6) = 2048;
    *(_QWORD *)&v151 = (unint64_t)v74 >> 62;
    if (v81)
      goto LABEL_89;
    v82 = v157;
    v83 = *(_QWORD *)((v157 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease(v82);
      *(_QWORD *)&v183[0] = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v183, (char *)v183 + 8);
      swift_bridgeObjectRelease(v82);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v78, (os_log_type_t)v79, "%s START waiting for %ld to load before continuing", (uint8_t *)v80, 0x16u);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v80, -1, -1);

      v79 = *(void (**)(_BYTE *, uint64_t))(v154 + 8);
      v79(v155, v9);
      v74 = v82;
      v80 = &off_1004D4000;
      v81 = v151;
LABEL_61:
      if (v81)
      {
        if (v74 < 0)
          v121 = v74;
        else
          v121 = v74 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v74);
        v78 = _CocoaArrayWrapper.endIndex.getter(v121);
        if (!v78)
          goto LABEL_87;
      }
      else
      {
        v78 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v74);
        if (!v78)
          goto LABEL_87;
      }
      if (v78 >= 1)
        break;
      __break(1u);
LABEL_89:
      v82 = v157;
      if (v157 < 0)
        v136 = v157;
      else
        v136 = v157 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v157);
      v83 = _CocoaArrayWrapper.endIndex.getter(v136);
      swift_bridgeObjectRelease(v82);
    }
    v85 = 0;
    v154 = v74 & 0xC000000000000001;
    *(_QWORD *)&v84 = 136315650;
    v151 = v84;
    v148 = (unint64_t)"efinitions plist";
    v150 = (uint64_t (**)(uint64_t))0x800000010050EF30;
    v149 = (dispatch_queue_t)((char *)&type metadata for Any + 8);
    *(_QWORD *)&v84 = *((_QWORD *)v80 + 403);
    v147 = v84;
    v157 = v74;
    v155 = (_BYTE *)v78;
    do
    {
      if (v154)
      {
        v88 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v85, v74);
      }
      else
      {
        v88 = *(void **)(v74 + 8 * v85 + 32);
        swift_unknownObjectRetain(v88);
      }
      v89 = v156;
      ((void (*)(_BYTE *, uint64_t, uint64_t))v159)(v156, v160, v9);
      v90 = swift_unknownObjectRetain_n(v88, 4);
      v91 = Logger.logObject.getter(v90);
      v92 = static os_log_type_t.debug.getter(v91);
      if (os_log_type_enabled(v91, v92))
      {
        v93 = swift_slowAlloc(32, -1);
        v94 = (void **)swift_slowAlloc(96, -1);
        v161 = v94;
        *(_DWORD *)v93 = v151;
        *(_QWORD *)(v93 + 4) = sub_1000544FC(0xD00000000000004DLL, (unint64_t)v150, (uint64_t *)&v161);
        *(_WORD *)(v93 + 12) = 2080;
        *(_QWORD *)&v183[0] = v88;
        swift_unknownObjectRetain(v88);
        v95 = sub_10006922C(&qword_100658920);
        v96 = String.init<A>(describing:)(v183, v95);
        v98 = v97;
        *(_QWORD *)(v93 + 14) = sub_1000544FC(v96, v97, (uint64_t *)&v161);
        swift_unknownObjectRelease_n(v88, 2);
        *(_QWORD *)&v99 = swift_bridgeObjectRelease(v98).n128_u64[0];
        *(_WORD *)(v93 + 22) = 2080;
        v100 = objc_msgSend(v88, "hasFinishedTryingToFetchCorrectThumbnail", v99);
        v101 = v100 == 0;
        if (v100)
          v102 = 1702195828;
        else
          v102 = 0x65736C6166;
        if (v101)
          v103 = 0xE500000000000000;
        else
          v103 = 0xE400000000000000;
        *(_QWORD *)(v93 + 24) = sub_1000544FC(v102, v103, (uint64_t *)&v161);
        swift_unknownObjectRelease_n(v88, 2);
        v104 = v103;
        v9 = v153;
        swift_bridgeObjectRelease(v104);
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "%s Checking thumbnail: %s. hasFinishedTryingToFetchCorrectThumbnail: %s", (uint8_t *)v93, 0x20u);
        swift_arrayDestroy(v94, 3, v149);
        swift_slowDealloc(v94, -1, -1);
        swift_slowDealloc(v93, -1, -1);

      }
      else
      {

        swift_unknownObjectRelease_n(v88, 4);
      }
      v79(v89, v9);
      v105 = v158;
      dispatch_group_enter(v158);
      v106 = swift_allocObject(&unk_1005C4180, 32, 7);
      *(_QWORD *)(v106 + 16) = v88;
      *(_QWORD *)(v106 + 24) = v105;
      v165 = sub_10010C9F0;
      v166 = v106;
      v161 = _NSConcreteStackBlock;
      v162 = 1107296256;
      v163 = sub_10004A82C;
      v164 = &unk_1005C4198;
      v107 = _Block_copy(&v161);
      v108 = v166;
      swift_unknownObjectRetain(v88);
      v109 = v105;
      LOBYTE(v108) = objc_msgSend(v88, "registerGenerationCompletionHandler:", v107, swift_release(v108).n128_f64[0]);
      _Block_release(v107);
      if ((v108 & 1) == 0)
      {
        v110 = v152;
        ((void (*)(_BYTE *, uint64_t, uint64_t))v159)(v152, v160, v9);
        v111 = swift_unknownObjectRetain_n(v88, 2);
        v112 = Logger.logObject.getter(v111);
        v113 = static os_log_type_t.debug.getter(v112);
        if (os_log_type_enabled(v112, v113))
        {
          v114 = swift_slowAlloc(22, -1);
          v115 = (void **)swift_slowAlloc(64, -1);
          v161 = v115;
          *(_DWORD *)v114 = v147;
          *(_QWORD *)(v114 + 4) = sub_1000544FC(0xD00000000000004DLL, v148 | 0x8000000000000000, (uint64_t *)&v161);
          *(_WORD *)(v114 + 12) = 2080;
          *(_QWORD *)&v183[0] = v88;
          swift_unknownObjectRetain(v88);
          v116 = sub_10006922C(&qword_100658920);
          v117 = String.init<A>(describing:)(v183, v116);
          v119 = v118;
          *(_QWORD *)(v114 + 14) = sub_1000544FC(v117, v118, (uint64_t *)&v161);
          swift_unknownObjectRelease_n(v88, 2);
          swift_bridgeObjectRelease(v119);
          _os_log_impl((void *)&_mh_execute_header, v112, v113, "%s Thumbnail generation already completed for thumbnail: %s", (uint8_t *)v114, 0x16u);
          swift_arrayDestroy(v115, 2, (char *)&type metadata for Any + 8);
          v120 = v115;
          v9 = v153;
          swift_slowDealloc(v120, -1, -1);
          swift_slowDealloc(v114, -1, -1);

          v86 = v152;
        }
        else
        {

          swift_unknownObjectRelease_n(v88, 2);
          v86 = v110;
        }
        v79(v86, v9);
        dispatch_group_leave(v109);
      }
      v74 = v157;
      v87 = v155;
      ++v85;
      swift_unknownObjectRelease(v88);
    }
    while (v87 != (_BYTE *)v85);
LABEL_87:
    swift_bridgeObjectRelease(v74);
    v122 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
    v123 = (void *)static OS_dispatch_queue.main.getter(v122);
    v124 = (_QWORD *)swift_allocObject(&unk_1005C41D0, 40, 7);
    v125 = v139;
    v126 = v140;
    v124[2] = v74;
    v124[3] = v125;
    v124[4] = v126;
    v165 = sub_10010CA24;
    v166 = (unint64_t)v124;
    v161 = _NSConcreteStackBlock;
    v162 = 1107296256;
    v163 = sub_10004A82C;
    v164 = &unk_1005C41E8;
    v127 = _Block_copy(&v161);
    swift_retain();
    v128 = v141;
    static DispatchQoS.unspecified.getter(v129);
    *(_QWORD *)&v183[0] = _swiftEmptyArrayStorage;
    v130 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v131 = sub_10006922C((uint64_t *)&unk_100647540);
    v132 = sub_1000791AC();
    v133 = v144;
    v134 = v146;
    dispatch thunk of SetAlgebra.init<A>(_:)(v183, v131, v132, v146, v130);
    v135 = v158;
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v128, v133, v123, v127);
    _Block_release(v127);

    (*(void (**)(_BYTE *, uint64_t))(v145 + 8))(v133, v134);
    (*(void (**)(_BYTE *, uint64_t))(v142 + 8))(v128, v143);
    swift_release(v166);
    return;
  }
  v18 = objc_msgSend(v17, "visibleCells");
  v19 = sub_10004F2F0(0, (unint64_t *)&unk_1006428D0, UICollectionViewCell_ptr);
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);

  v194 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v20 >> 62)
  {
    if (v20 < 0)
      v75 = v20;
    else
      v75 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v20);
    v21 = _CocoaArrayWrapper.endIndex.getter(v75);
    if (v21)
      goto LABEL_4;
    goto LABEL_54;
  }
  v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v20);
  if (!v21)
  {
LABEL_54:
    swift_bridgeObjectRelease(v20);
    v74 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_55:
    swift_bridgeObjectRelease(v20);
    v16 = v155;
    goto LABEL_56;
  }
LABEL_4:
  if (v21 >= 1)
  {
    v154 = (unint64_t)v10;
    v22 = 0;
    v23 = v20 & 0xC000000000000001;
    v150 = &v163;
    v157 = v20 & 0xC000000000000001;
    while (1)
    {
      v24 = v23
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v20)
          : *(id *)(v20 + 8 * v22 + 32);
      v25 = v24;
      v26 = type metadata accessor for DOCItemCollectionCell();
      v27 = (_QWORD *)swift_dynamicCastClass(v25, v26);
      if (v27)
      {
        v28 = (*(uint64_t (**)(void))((swift_isaMask & *v27) + 0x1F8))();
        if (v28)
          break;
      }

LABEL_7:
      if (v21 == ++v22)
      {
        swift_bridgeObjectRelease(v20);
        v74 = v194;
        v9 = v153;
        v10 = (void **)v154;
        goto LABEL_55;
      }
    }
    v29 = (char *)v28;
    v30 = OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__thumbnail;
    v31 = *(_QWORD *)(v28 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__thumbnail);
    if (v31)
    {
LABEL_44:
      swift_unknownObjectRetain(v31);

      if (v31)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v70);
        v72 = *(_QWORD *)((v194 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v71 = *(_QWORD *)((v194 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v72 >= v71 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1, v72 + 1, 1);
        v73 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v72, v31);
        specialized Array._endMutation()(v73);
      }
      goto LABEL_7;
    }
    v160 = *(_QWORD *)(v28 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__thumbnailLoadingPool);
    if (!v160
      || (v32 = (void **)(v28 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_node),
          swift_beginAccess(v28 + OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_node, v193, 0, 0),
          (v33 = (void (*)(_BYTE *))*v32) == 0)
      || (v34 = *(void **)&v29[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__traitCollection]) == 0)
    {
LABEL_43:
      v31 = *(_QWORD *)&v29[v30];
      goto LABEL_44;
    }
    v159 = v33;
    sub_100070EDC((uint64_t)&v29[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_gridItemLayoutTraits], (uint64_t)v182, (uint64_t *)&unk_100641300);
    sub_100070EDC((uint64_t)v182, (uint64_t)v183, (uint64_t *)&unk_100641300);
    if (sub_1000A849C((uint64_t *)v183) == 1)
    {
      v23 = v157;
      goto LABEL_43;
    }
    v149 = (dispatch_queue_t)OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__isFolder;
    v35 = v29[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__isFolder];
    swift_retain();
    v36 = v159;
    swift_unknownObjectRetain(v159);
    *(_QWORD *)&v151 = v34;
    sub_1000716DC(v182, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100071748);
    if (v35 == 2)
    {
      v138 = objc_msgSend(v36, "isFolder");
      *((_BYTE *)&v149->isa + (_QWORD)v29) = v138;
    }
    else
    {
      v138 = v35 & 1;
    }
    v23 = v157;
    v181 = 0;
    v37 = v160;
    v149 = *(dispatch_queue_t *)(v160 + 32);
    v38 = (_QWORD *)swift_allocObject(&unk_1005C4220, 40, 7);
    v39 = (void (*)(_QWORD))v159;
    v38[2] = v37;
    v38[3] = v39;
    v38[4] = &v181;
    v40 = swift_allocObject(&unk_1005C4248, 32, 7);
    *(_QWORD *)(v40 + 16) = sub_1000665C4;
    *(_QWORD *)(v40 + 24) = v38;
    *(_QWORD *)&v147 = v38;
    v165 = sub_10006657C;
    v166 = v40;
    v161 = _NSConcreteStackBlock;
    v162 = 1107296256;
    v163 = sub_10006655C;
    v164 = &unk_1005C4260;
    v41 = _Block_copy(&v161);
    v148 = v166;
    swift_retain();
    swift_unknownObjectRetain(v159);
    swift_retain();
    swift_release(v148);
    dispatch_sync(v149, v41);
    _Block_release(v41);
    LOBYTE(v41) = swift_isEscapingClosureAtFileLocation(v40, "", 103, 234, 35, 1);
    *(_QWORD *)&v42 = swift_release(v40).n128_u64[0];
    if ((v41 & 1) != 0)
      goto LABEL_94;
    v43 = v181;
    if (v181)
    {
      swift_release(v147);
    }
    else
    {
      v44 = (void *)v151;
      v45 = (void **)objc_msgSend((id)v151, "userInterfaceStyle", v42);
      v46 = v45;
      if ((unint64_t)v45 >= 3)
      {
        type metadata accessor for UIUserInterfaceStyle(0);
        v164 = v48;
        v161 = v46;
        doc_warnUnrecognizedEnumValueEncountered(_:)(&v161);
        sub_100068588(&v161);
        v47 = 1;
      }
      else
      {
        v47 = qword_1004DA8B0[(_QWORD)v45];
      }
      v149 = (dispatch_queue_t)v47;
      v177 = v189;
      v178 = v190;
      v179 = v191;
      v180 = v192;
      v173 = v185;
      v174 = v186;
      v175 = v187;
      v176 = v188;
      v169 = v183[0];
      v170 = v183[1];
      v171 = v183[2];
      v172 = v184;
      if (v138)
      {
        v49 = v44;
        sub_1000716DC(v182, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100071748);
        v50 = 0.0;
      }
      else
      {
        v51 = *(double *)&v184;
        if (*(double *)&v186 < *(double *)&v184)
          v51 = *(double *)&v186;
        v52 = floor(v51);
        v53 = v44;
        sub_1000716DC(v182, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100071748);
        v50 = v52 / 1.41421356;
      }
      v54 = v184;
      objc_msgSend(v44, "displayScale");
      v56 = v55;
      v57 = objc_msgSend(v159, "isFolder");
      v58 = objc_allocWithZone((Class)DOCThumbnailDescriptor);
      v59 = objc_msgSend(v58, "initWithSize:minimumSize:scale:style:isFolded:isInteractive:isFolder:", v149, 1, 1, v57, v54, v50, v56);
      v148 = (unint64_t)v59;
      v60 = objc_msgSend((id)objc_opt_self(DOCThumbnailGenerator), "sharedGenerator");
      v43 = (void **)objc_msgSend(v60, "thumbnailForNode:descriptor:", v159, v59);

      v61 = (unint64_t)v150;
      v161 = v43;
      v162 = (uint64_t)v149;
      v62 = v178;
      *((_OWORD *)v150 + 8) = v177;
      *(_OWORD *)(v61 + 144) = v62;
      *(_OWORD *)(v61 + 160) = v179;
      *(_QWORD *)(v61 + 176) = v180;
      v63 = v174;
      *(_OWORD *)(v61 + 64) = v173;
      *(_OWORD *)(v61 + 80) = v63;
      v64 = v176;
      *(_OWORD *)(v61 + 96) = v175;
      *(_OWORD *)(v61 + 112) = v64;
      v65 = v170;
      *(_OWORD *)v61 = v169;
      *(_OWORD *)(v61 + 16) = v65;
      v66 = v172;
      *(_OWORD *)(v61 + 32) = v171;
      *(_OWORD *)(v61 + 48) = v66;
      v167 = v151;
      v168 = v138;
      swift_unknownObjectRetain(v43);
      sub_10010CA6C((uint64_t *)&v161);
      v67 = v181;
      swift_release(v147);
      swift_unknownObjectRelease(v67);
    }
    v68 = *(void ***)&v29[v30];
    *(_QWORD *)&v29[v30] = v43;
    swift_unknownObjectRetain(v43);
    if (v43)
    {
      if (v68 && v43 == v68)
        goto LABEL_42;
      if (!v68)
      {
        v69 = v43;
LABEL_41:
        objc_msgSend(v69, "addListener:", v29);
        goto LABEL_42;
      }
    }
    else if (!v68)
    {
      goto LABEL_42;
    }
    objc_msgSend(v68, "removeListener:", v29);
    v69 = *(void ***)&v29[v30];
    if (v69)
      goto LABEL_41;
LABEL_42:
    swift_unknownObjectRelease(v68);
    swift_unknownObjectRelease(v43);
    sub_1000716DC(v182, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100071784);
    swift_release(v160);
    swift_unknownObjectRelease(v159);

    goto LABEL_43;
  }
  __break(1u);
LABEL_94:
  __break(1u);
}

void sub_1000F2BFC(uint64_t a1, NSObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = Logger.Tests.unsafeMutableAddressor(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
  v10 = swift_unknownObjectRetain_n(a1, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v22 = a2;
    v14 = v13;
    v15 = swift_slowAlloc(64, -1);
    v24 = v15;
    *(_DWORD *)v14 = 136315394;
    v23 = sub_1000544FC(0xD00000000000004DLL, 0x800000010050EF30, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    *(_WORD *)(v14 + 12) = 2080;
    v23 = a1;
    swift_unknownObjectRetain(a1);
    v16 = sub_10006922C(&qword_100658920);
    v17 = String.init<A>(describing:)(&v23, v16);
    v19 = v18;
    v23 = sub_1000544FC(v17, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    swift_unknownObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s Thumbnail generation request completed for thumbnail: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    v20 = v14;
    a2 = v22;
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n(a1, 2);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  dispatch_group_leave(a2);
}

uint64_t sub_1000F2E30(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = Logger.Tests.unsafeMutableAddressor(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
  v10 = swift_bridgeObjectRetain_n(a1, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v21 = a2;
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(32, -1);
    v23 = v14;
    *(_DWORD *)v13 = 136315394;
    v22 = sub_1000544FC(0xD00000000000004DLL, 0x800000010050EF30, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
    *(_WORD *)(v13 + 12) = 2048;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0)
        v19 = a1;
      else
        v19 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v15 = _CocoaArrayWrapper.endIndex.getter(v19);
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(a1);
    v22 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
    swift_bridgeObjectRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s END waiting for %ld. All items loaded, continuing", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    v16 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v21(v16);
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    v18 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return a2(v18);
  }
}

uint64_t sub_1000F307C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v12 = (void *)static OS_dispatch_queue.main.getter(v11);
  v13 = swift_allocObject(&unk_1005C3730, 32, 7);
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a2;
  aBlock[4] = sub_10010C18C;
  v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = &unk_1005C3748;
  v14 = _Block_copy(aBlock);
  v15 = v24;
  swift_retain();
  swift_release(v15);
  static DispatchQoS.unspecified.getter(v16);
  aBlock[0] = _swiftEmptyArrayStorage;
  v17 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10006922C((uint64_t *)&unk_100647540);
  v19 = sub_1000791AC();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v4, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_1000F3280(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
    v10 = ((uint64_t (*)(uint64_t, double))a3)(a2, v11);
  if (a1
    && (v14 = type metadata accessor for DOCItemCollectionViewController(0),
        (v10 = swift_dynamicCastClass(a1, v14)) != 0))
  {
    v15 = (void *)v10;
    v16 = swift_allocObject(&unk_1005C3780, 32, 7);
    *(_QWORD *)(v16 + 16) = a3;
    *(_QWORD *)(v16 + 24) = a4;
    v17 = a1;
    swift_retain();
    sub_1000F194C(v15, (uint64_t)sub_10010DB60, v16);

    swift_release(v16);
  }
  else
  {
    v18 = Logger.Tests.unsafeMutableAddressor(v10);
    v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, v18, v8);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "content view controller is nil", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    v23 = sub_10010C140();
    v24 = swift_allocError(&type metadata for DOCApplication.DOCApplicationTestError, v23, 0, 0);
    *v25 = 1;
    a3();
    swift_errorRelease(v24);
  }
}

double sub_1000F3468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double result;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  v14 = swift_allocObject(&unk_1005C39D8, 32, 7);
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  aBlock[4] = sub_10010DF60;
  v24 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = &unk_1005C39F0;
  v15 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  v22 = _swiftEmptyArrayStorage;
  v17 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10006922C((uint64_t *)&unk_100647540);
  v19 = sub_1000791AC();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(_QWORD *)&result = swift_release(v24).n128_u64[0];
  return result;
}

void sub_1000F3668(void *a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, void *a5, void *a6)
{
  id v11;

  if (a2)
  {
    a3(0);
  }
  else if (a1)
  {
    swift_retain();
    v11 = a1;
    sub_100108D50(v11, a6, a5, (void (*)(_QWORD, uint64_t))a3, a4, a1);
    swift_release(a4);

  }
  else
  {
    __break(1u);
  }
}

void sub_1000F370C(void *a1, uint64_t a2, void *a3, NSObject **a4, unint64_t a5, void *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  NSString v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  NSObject **v33;
  uint64_t v34;
  uint64_t v35;

  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v17 = String._bridgeToObjectiveC()();
    objc_msgSend(a3, "failedTest:", v17);

  }
  v18 = Logger.Tests.unsafeMutableAddressor(v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v18, v12);
  v19 = swift_bridgeObjectRetain_n(a5, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.debug.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v31 = a1;
    v22 = swift_slowAlloc(12, -1);
    v32 = a6;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(32, -1);
    v33 = a4;
    v25 = v24;
    v35 = v24;
    v30 = v12;
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain(a5);
    v34 = sub_1000544FC((uint64_t)v33, a5, &v35);
    a1 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
    swift_bridgeObjectRelease_n(a5, 3);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Starting test %s", v23, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    v26 = v25;
    a4 = v33;
    swift_slowDealloc(v26, -1, -1);
    v27 = v23;
    a6 = v32;
    swift_slowDealloc(v27, -1, -1);

    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v30);
  }
  else
  {

    swift_bridgeObjectRelease_n(a5, 2);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  v28 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "startedTest:", v28);

  if (a1)
  {
    swift_bridgeObjectRetain(a5);
    v29 = a3;
    sub_10010950C(a1, a6, v29, v29, a4, a5);

    swift_bridgeObjectRelease(a5);
  }
  else
  {
    __break(1u);
  }
}

void sub_1000F39A4(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSString v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint8_t *v21;
  NSString v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v13 = String._bridgeToObjectiveC()();
    objc_msgSend(a2, "failedTest:", v13);

  }
  v14 = Logger.Tests.unsafeMutableAddressor(v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v14, v8);
  v15 = swift_bridgeObjectRetain_n(a4, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v23 = v8;
    v18 = swift_slowAlloc(12, -1);
    v24 = a2;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc(32, -1);
    v26 = v20;
    *(_DWORD *)v19 = 136315138;
    swift_bridgeObjectRetain(a4);
    v25 = sub_1000544FC(a3, a4, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Starting test %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    v21 = v19;
    a2 = v24;
    swift_slowDealloc(v21, -1, -1);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v23);
  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  v22 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "finishedTest:", v22);

}

void sub_1000F3BE4(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSString v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 16, v34, 0, 0);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    v15 = Logger.Tests.unsafeMutableAddressor(v14);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15, v10);
    swift_bridgeObjectRetain_n(a3, 2);
    v16 = a4;
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    v19 = v18;
    if (os_log_type_enabled(v17, v18))
    {
      v20 = swift_slowAlloc(22, -1);
      v29 = swift_slowAlloc(64, -1);
      v33 = v29;
      *(_DWORD *)v20 = 136315394;
      v28 = v19;
      swift_bridgeObjectRetain(a3);
      v21 = sub_1000544FC(a2, a3, &v33);
      v31 = a5;
      v32 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v20 + 12) = 2080;
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v30 = a2;
      v24 = v23;
      v32 = sub_1000544FC(v22, v23, &v33);
      a5 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);

      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v28, "Failed test %s. Timed-out waiting for source identifier: %s. Note that performHandlerAfterLocationForSourceIsLoaded doesn't error out if the source is not found", (uint8_t *)v20, 0x16u);
      v25 = v29;
      swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v26 = String._bridgeToObjectiveC()();
    objc_msgSend(a5, "failedTest:", v26);

  }
}

void sub_1000F3E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, id *a6, void (*a7)(char *, uint64_t), id a8, uint64_t *a9, unsigned __int8 a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  id *v30;
  uint64_t v31;
  id *v32;
  uint64_t v33;
  id *v34;
  void (*v35)(char *, uint64_t);
  id *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void (*v46)(char *, uint64_t);
  _QWORD *v47;
  uint64_t v48;
  os_log_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSString v53;
  id v54;
  uint64_t v55;
  uint64_t *v56;
  void (*v57)(char *);
  char *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  NSString v67;
  char *v68;
  void *v69;
  void **v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  id v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  id v82;
  uint64_t v83;
  __n128 v84;
  void *v85;
  id v86;
  char *v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  NSString v94;
  Class isa;
  void (**v96)(char *, uint64_t);
  os_log_t v97;
  uint64_t v98;
  id *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  _OWORD v113[2];
  uint64_t v114;
  _BYTE v115[16];
  uint64_t v116;
  _BYTE v117[32];

  v112 = a7;
  v108 = a9;
  v102 = type metadata accessor for IndexPath(0);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v104 = (char *)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Logger(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v103 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v110 = (char *)&v96 - v21;
  __chkstk_darwin(v22);
  v109 = (char *)&v96 - v23;
  __chkstk_darwin(v24);
  v26 = (char *)&v96 - v25;
  *(_QWORD *)&v28 = swift_beginAccess(a3 + 16, v117, 1, 0).n128_u64[0];
  *(_BYTE *)(a3 + 16) = 1;
  v29 = a4;
  v111 = a4;
  v30 = a6;
  if (a2)
  {
    v105 = a8;
    v31 = Logger.Tests.unsafeMutableAddressor(v27);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v26, v31, v17);
    swift_bridgeObjectRetain(a5);
    v32 = a6;
    v33 = v18;
    v34 = v32;
    v35 = v112;
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a5);
    v36 = v34;
    v37 = v35;
    v38 = swift_errorRetain(a2);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter(v39);
    v100 = v40;
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc(42, -1);
      v107 = v17;
      v42 = v41;
      v96 = (_QWORD *)swift_slowAlloc(16, -1);
      v98 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v113[0] = v98;
      *(_DWORD *)v42 = 136315906;
      v106 = v33;
      swift_bridgeObjectRetain(a5);
      v114 = sub_1000544FC(v29, a5, (uint64_t *)v113);
      v97 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);
      swift_bridgeObjectRelease_n(a5, 3);
      *(_WORD *)(v42 + 12) = 2080;
      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v99 = v30;
      v45 = v44;
      v114 = sub_1000544FC(v43, v44, (uint64_t *)v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);

      swift_bridgeObjectRelease(v45);
      *(_WORD *)(v42 + 22) = 2112;
      v114 = (uint64_t)v37;
      v46 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);
      v47 = v96;
      *v96 = v37;

      *(_WORD *)(v42 + 32) = 2112;
      swift_errorRetain(a2);
      v48 = _swift_stdlib_bridgeErrorToNSError(a2);
      v114 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);
      v47[1] = v48;
      v30 = v99;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      v49 = v97;
      _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v100, "Failed test %s. performHandlerAfterLocationForSourceIsLoaded: %s. mainViewController: %@ returned error: %@", (uint8_t *)v42, 0x2Au);
      v50 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v47, 2, v50);
      swift_slowDealloc(v47, -1, -1);
      v51 = v98;
      swift_arrayDestroy(v98, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      v52 = v42;
      v17 = v107;
      swift_slowDealloc(v52, -1, -1);

      v18 = v106;
      (*(void (**)(char *, uint64_t))(v106 + 8))(v26, v17);
    }
    else
    {

      swift_bridgeObjectRelease_n(a5, 2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

      (*(void (**)(char *, uint64_t))(v33 + 8))(v26, v17);
      v18 = v33;
    }
    v53 = String._bridgeToObjectiveC()();
    a8 = v105;
    objc_msgSend(v105, "failedTest:", v53);

  }
  v54 = objc_msgSend(v112, "effectiveFullBrowser", v28);
  DOCFullDocumentManagerViewController.updateDisplayMode(to:saveAsUserSelection:for:)(v108, 1, v30);

  v56 = (uint64_t *)Logger.Tests.unsafeMutableAddressor(v55);
  v57 = *(void (**)(char *))(v18 + 16);
  v58 = v109;
  v108 = v56;
  v57(v109);
  v59 = swift_bridgeObjectRetain_n(a5, 2);
  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.default.getter(v60);
  if (os_log_type_enabled(v60, v61))
  {
    v62 = swift_slowAlloc(12, -1);
    v106 = v18;
    v63 = (uint8_t *)v62;
    v64 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v113[0] = v64;
    v107 = v17;
    *(_DWORD *)v63 = 136315138;
    v65 = v111;
    swift_bridgeObjectRetain(a5);
    v114 = sub_1000544FC(v65, a5, (uint64_t *)v113);
    v17 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115);
    swift_bridgeObjectRelease_n(a5, 3);
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Starting test %s", v63, 0xCu);
    swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1, -1);
    swift_slowDealloc(v63, -1, -1);

    v66 = *(void (**)(char *, uint64_t))(v106 + 8);
    v66(v109, v17);
  }
  else
  {

    swift_bridgeObjectRelease_n(a5, 2);
    v66 = *(void (**)(char *, uint64_t))(v18 + 8);
    v66(v58, v17);
  }
  v67 = String._bridgeToObjectiveC()();
  objc_msgSend(a8, "startedTest:", v67);

  v68 = (char *)objc_msgSend(v112, "effectiveBrowserViewController");
  if (!v68)
    goto LABEL_17;
  v69 = v68;
  v70 = (void **)&v68[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
  swift_beginAccess(&v68[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], &v114, 0, 0);
  v71 = *v70;
  if (!v71
    || (v72 = type metadata accessor for DOCItemCollectionViewController(0),
        (v73 = swift_dynamicCastClass(v71, v72)) == 0))
  {

LABEL_17:
    ((void (*)(char *, uint64_t *, uint64_t))v57)(v110, v108, v17);
    v88 = swift_bridgeObjectRetain_n(a5, 2);
    v89 = Logger.logObject.getter(v88);
    v90 = static os_log_type_t.error.getter(v89);
    if (os_log_type_enabled(v89, v90))
    {
      v91 = (uint8_t *)swift_slowAlloc(12, -1);
      v92 = v66;
      v93 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v113[0] = v93;
      *(_DWORD *)v91 = 136315138;
      swift_bridgeObjectRetain(a5);
      v116 = sub_1000544FC(v111, a5, (uint64_t *)v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117);
      swift_bridgeObjectRelease_n(a5, 3);
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "Failed test %s. mainViewController.effectiveBrowserViewController?.containedItemCollectionViewController was nil", v91, 0xCu);
      swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v93, -1, -1);
      swift_slowDealloc(v91, -1, -1);

      v92(v110, v17);
    }
    else
    {

      swift_bridgeObjectRelease_n(a5, 2);
      v66(v110, v17);
    }
    v94 = String._bridgeToObjectiveC()();
    objc_msgSend(a8, "failedTest:", v94);

    return;
  }
  v74 = (char *)v73;
  v112 = v66;
  v75 = v71;

  v76 = qword_100640E28;
  v77 = v75;
  if (v76 != -1)
    swift_once(&qword_100640E28, sub_1001753DC);
  v78 = qword_100672730;
  v79 = swift_allocObject(&unk_1005C76A0, 24, 7);
  *(_QWORD *)(v79 + 16) = a8;
  v80 = (void *)objc_opt_self(NSNotificationCenter);
  v110 = (char *)a8;
  v81 = objc_msgSend(v80, "defaultCenter");
  memset(v113, 0, sizeof(v113));
  v82 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v83 = swift_allocObject(&unk_1005C76C8, 32, 7);
  *(_QWORD *)(v83 + 16) = sub_10010D884;
  *(_QWORD *)(v83 + 24) = v79;
  v84 = swift_retain();
  NSNotificationCenter.doc_observeOnce(forName:object:queue:using:)(v78, v113, v82, sub_10010DF5C, v83, v84);

  swift_release(v83);
  sub_10000CB4C((uint64_t)v113, &qword_100642730);
  objc_msgSend(v74, "loadViewIfNeeded", swift_release(v79).n128_f64[0]);
  v85 = *(void **)&v74[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
  if (v85)
  {
    v86 = v85;
    v87 = v104;
    sub_1000EED50(v86, a10, v104);
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v101 + 8))(v87, v102);
    objc_msgSend(v74, "collectionView:performPrimaryActionForItemAtIndexPath:", v86, isa);

  }
  else
  {
    __break(1u);
  }
}

void sub_1000F4A4C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  _UNKNOWN **v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8_t *v20;
  double v21;
  char *v22;
  uint64_t v23;
  NSString v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Logger.Tests.unsafeMutableAddressor(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
  v8 = a1;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = &off_100643000;
  if (os_log_type_enabled(v9, v10))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v28 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = *(_QWORD *)&v8[OBJC_IVAR____TtC5Files14DOCApplication_currentTestName];
    v14 = *(_QWORD *)&v8[OBJC_IVAR____TtC5Files14DOCApplication_currentTestName + 8];
    v25 = v12 + 4;
    v26 = v15;
    v27 = v14;
    swift_bridgeObjectRetain(v14);
    v16 = sub_10006922C(&qword_100648C80);
    v17 = String.init<A>(describing:)(&v26, v16);
    v19 = v18;
    v26 = sub_1000544FC(v17, v18, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);

    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Received finish gathering notification for %s (should be Browse*Folder). Finishing test", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    v20 = v12;
    v11 = &off_100643000;
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v22 = (char *)v11[118] + (_QWORD)v8;
  v23 = *((_QWORD *)v22 + 1);
  if (v23)
  {
    swift_bridgeObjectRetain(*((_QWORD *)v22 + 1));
    v24 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v21 = swift_bridgeObjectRelease(v23).n128_u64[0];
  }
  else
  {
    v24 = 0;
  }
  objc_msgSend(v8, "finishedTest:waitForCommit:extraResults:", v24, 1, 0, v21);

}

id sub_1000F4C98(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _QWORD *v14;
  id result;
  void *v16;
  uint64_t v17;
  char v18;
  id v19;
  id v20;
  id v21;
  _QWORD *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;

  v5 = v4;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (uint64_t *)((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = objc_msgSend(a4, "tabBarController", v12);
  if (result)
  {
    v16 = result;
    v17 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
    *v14 = static OS_dispatch_queue.main.getter(v17);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
    v18 = _dispatchPreconditionTest(_:)(v14);
    result = (id)(*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v14, v10);
    if ((v18 & 1) != 0)
    {
      objc_msgSend(v16, "setSelectedIndex:", 0);

      v19 = objc_msgSend((id)objc_opt_self(DOCConcreteLocation), "recentDocumentsLocation");
      v20 = objc_msgSend(a4, "fullRecentsViewController");
      v21 = objc_msgSend(v20, "hierarchyController");

      v22 = (_QWORD *)swift_allocObject(&unk_1005C4040, 64, 7);
      v22[2] = v19;
      v22[3] = a4;
      v22[4] = v5;
      v22[5] = a3;
      v22[6] = a1;
      v22[7] = a2;
      v23 = v19;
      v24 = a4;
      v25 = v5;
      swift_bridgeObjectRetain(a3);
      swift_bridgeObjectRetain(a2);
      sub_1001D4F4C(v23, v19, 0, 1, 0, (void (*)(void))sub_10010C8E8, (uint64_t)v22);

      return (id)swift_release(v22);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1000F4E98(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *);
  NSObject *v23;
  id v24;
  NSObject *v25;
  __n128 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  NSObject **v31;
  NSObject *v32;
  id v33;
  NSObject *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  char *v39;
  void *v40;
  id *v41;
  id v42;
  id v43;
  uint64_t v44;
  char *v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  char v57;
  __n128 v58;
  id v59;
  unint64_t v60;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void *v67;
  uint64_t v68;
  void **v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  NSString v76;
  char *v77;
  id v78;
  NSObject *v79;
  __n128 v80;
  os_log_type_t v81;
  uint8_t *v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  unint64_t v98;
  uint64_t v99;
  void (*v100)(char *);
  uint64_t v101;
  char *v102;
  id v103;
  uint8_t *v104;
  void *v105;
  uint64_t v106;
  _QWORD *v107;
  void (*v108)(char *, char *);
  char *v109;
  uint64_t v110;
  unint64_t v111;
  char v112[24];
  NSObject *v113;
  _BYTE v114[16];
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v110 = a5;
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD **)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v102 = (char *)&v99 - v16;
  __chkstk_darwin(v17);
  v19 = (char *)&v99 - v18;
  v21 = Logger.Tests.unsafeMutableAddressor(v20);
  v107 = v12;
  v108 = (void (*)(char *, char *))v21;
  v22 = (void (*)(char *))v12[2];
  v22(v19);
  v23 = a1;
  v24 = a2;
  v106 = (uint64_t)v19;
  v25 = Logger.logObject.getter(v24);
  v27 = static os_log_type_t.info.getter(v26);
  LODWORD(v104) = v27;
  v28 = os_log_type_enabled(v25, v27);
  v111 = a6;
  v109 = v14;
  v101 = a4;
  if (v28)
  {
    v29 = swift_slowAlloc(22, -1);
    v103 = v24;
    v30 = v29;
    v31 = (NSObject **)swift_slowAlloc(16, -1);
    *(_DWORD *)v30 = 138412546;
    v105 = a3;
    v113 = v23;
    v100 = v22;
    v32 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114);
    *v31 = v23;

    *(_WORD *)(v30 + 12) = 2112;
    v33 = v103;
    v34 = objc_msgSend(v103, "fullRecentsViewController");
    v113 = v34;
    v22 = v100;
    a3 = v105;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114);
    v31[1] = v34;
    v14 = v109;

    _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v104, "did show %@ on %@", (uint8_t *)v30, 0x16u);
    v35 = sub_10006922C(&qword_100643AB0);
    swift_arrayDestroy(v31, 2, v35);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {

    v25 = v23;
    v33 = v24;
  }
  v37 = v106;
  v36 = v107;

  v38 = (void (*)(uint64_t, uint64_t))v36[1];
  v38(v37, v11);
  v39 = (char *)objc_msgSend(v33, "effectiveBrowserViewController");
  if (!v39)
    goto LABEL_13;
  v40 = v39;
  v41 = (id *)&v39[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
  swift_beginAccess(&v39[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v112, 0, 0);
  v42 = *v41;
  v43 = *v41;

  if (!v42)
    goto LABEL_13;
  v105 = a3;
  v44 = type metadata accessor for DOCItemCollectionViewController(0);
  v45 = (char *)swift_dynamicCastClass(v43, v44);
  if (v45)
  {
    v103 = v33;
    v46 = v38;
    v47 = v11;
    v107 = v45;
    v48 = objc_msgSend(*(id *)&v45[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration], "identifier");
    v49 = DOCDocumentSourceIdentifierRecentDocuments;
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v52 = v51;
    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    if (v50 == v53 && v52 == v54)
    {

      swift_bridgeObjectRelease_n(v52, 2);
      v11 = v47;
      v38 = v46;
    }
    else
    {
      v56 = v54;
      v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v52, v53, v54, 0);

      swift_bridgeObjectRelease(v52);
      v58 = swift_bridgeObjectRelease(v56);
      v11 = v47;
      v14 = v109;
      v38 = v46;
      v33 = v103;
      if ((v57 & 1) == 0)
        goto LABEL_12;
    }
    v77 = v102;
    ((void (*)(char *, void (*)(char *, char *), uint64_t, __n128))v22)(v102, v108, v11, v58);
    v78 = v43;
    v79 = Logger.logObject.getter(v78);
    v81 = static os_log_type_t.info.getter(v80);
    if (os_log_type_enabled(v79, v81))
    {
      v109 = (char *)v11;
      v82 = (uint8_t *)swift_slowAlloc(12, -1);
      v106 = swift_slowAlloc(32, -1);
      v113 = v106;
      *(_DWORD *)v82 = 136315138;
      v103 = v82 + 4;
      v104 = v82;
      v83 = v78;
      v108 = (void (*)(char *, char *))v38;
      v84 = v83;
      v85 = v107;
      v86 = objc_msgSend(v107, "description");
      v87 = v78;
      v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
      v90 = v89;

      v91 = v111;
      v92 = v88;
      v78 = v87;
      v116 = sub_1000544FC(v92, v90, (uint64_t *)&v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117);

      swift_bridgeObjectRelease(v90);
      v93 = v81;
      v94 = v104;
      _os_log_impl((void *)&_mh_execute_header, v79, v93, "trying to run scroll test on %s", v104, 0xCu);
      v95 = v106;
      swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v95, -1, -1);
      swift_slowDealloc(v94, -1, -1);

      v108(v102, v109);
    }
    else
    {

      v38((uint64_t)v77, v11);
      v85 = v107;
      v91 = v111;
    }
    v96 = sub_10010804C(v101);
    v97 = v96;
    v98 = HIDWORD(v96);
    v76 = v78;
    sub_100106770(v110, v91, v85, v97, v98, v105);

    goto LABEL_20;
  }
LABEL_12:

  a3 = v105;
LABEL_13:
  ((void (*)(char *, void (*)(char *, char *), uint64_t))v22)(v14, v108, v11);
  v59 = v33;
  v60 = v111;
  swift_bridgeObjectRetain_n(v111, 2);
  v61 = v59;
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.error.getter(v62);
  if (os_log_type_enabled(v62, v63))
  {
    v108 = (void (*)(char *, char *))v38;
    v64 = swift_slowAlloc(22, -1);
    v65 = swift_slowAlloc(64, -1);
    v116 = v65;
    *(_DWORD *)v64 = 136315394;
    swift_bridgeObjectRetain(v60);
    v113 = sub_1000544FC(v110, v60, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114);
    swift_bridgeObjectRelease_n(v60, 3);
    *(_WORD *)(v64 + 12) = 2080;
    v66 = (char *)objc_msgSend(v61, "effectiveBrowserViewController");
    if (v66)
    {
      v67 = v66;
      v68 = v11;
      v69 = (void **)&v66[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
      swift_beginAccess(&v66[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], &v113, 0, 0);
      v70 = *v69;
      v71 = v70;

    }
    else
    {
      v68 = v11;
      v70 = 0;
    }
    v115 = (uint64_t)v70;
    v72 = sub_10006922C((uint64_t *)&unk_1006434C0);
    v73 = String.init<A>(describing:)(&v115, v72);
    v75 = v74;
    v115 = sub_1000544FC(v73, v74, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116);

    swift_bridgeObjectRelease(v75);
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Failed test %s: %s could not switch to Recents", (uint8_t *)v64, 0x16u);
    swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v64, -1, -1);

    v108(v109, (char *)v68);
  }
  else
  {

    swift_bridgeObjectRelease_n(v60, 2);
    v38((uint64_t)v14, v11);
  }
  v76 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "failedTest:", v76);
LABEL_20:

}

uint64_t sub_1000F5694(void *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  void (*v26)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  int v28;
  id v29;
  CGFloat v30;
  double v31;
  double v32;
  CGFloat v33;
  CGFloat v34;
  uint64_t v35;
  _BYTE *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  void (*v42)(_BYTE *, uint64_t);
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  void *v47;
  uint64_t v48;
  id v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE v62[40];
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  _QWORD aBlock[5];
  uint64_t v83;
  CGRect v84;
  CGRect v85;

  v81 = a3;
  v79 = a2;
  v6 = type metadata accessor for Logger(0);
  __chkstk_darwin(v6);
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v75 = *(_QWORD *)(v7 - 8);
  v76 = v7;
  __chkstk_darwin(v7);
  v74 = &v62[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v73 = type metadata accessor for DispatchQoS(0);
  v72 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v71 = &v62[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v68 = type metadata accessor for DispatchTimeInterval(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v66 = &v62[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v70 = type metadata accessor for DispatchTime(0);
  v65 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v64 = &v62[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v69 = &v62[-v13];
  v14 = sub_10006922C((uint64_t *)&unk_100642710);
  __chkstk_darwin(v14);
  v63 = &v62[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v18 = &v62[-v17];
  __chkstk_darwin(v19);
  v21 = &v62[-v20];
  __chkstk_darwin(v22);
  v24 = &v62[-v23];
  v25 = type metadata accessor for IndexPath(0);
  v80 = *(_QWORD *)(v25 - 8);
  v26 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v80 + 56);
  v26(v24, 1, 1, v25);
  v77 = a1;
  v78 = a4;
  sub_1000EED50(a1, a4, v21);
  v27 = v81;
  sub_10000CB4C((uint64_t)v24, (uint64_t *)&unk_100642710);
  v26(v21, 0, 1, v25);
  sub_100070EDC((uint64_t)v21, (uint64_t)v24, (uint64_t *)&unk_100642710);
  sub_1000271D4((uint64_t)v24, (uint64_t)v18, (uint64_t *)&unk_100642710);
  v28 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v80 + 48))(v18, 1, v25);
  sub_10000CB4C((uint64_t)v18, (uint64_t *)&unk_100642710);
  if (v28 == 1)
  {
    v29 = v77;
    objc_msgSend(v77, "bounds");
    v30 = CGRectGetHeight(v84) * 0.75;
    objc_msgSend(v29, "contentOffset");
    v32 = v31;
    v33 = v30 + v31;
    objc_msgSend(v29, "contentSize");
    if (v33 >= v34)
    {
      v58 = (uint64_t)v63;
      v26(v63, 1, 1, v25);
      v59 = sub_10010C290();
      v60 = swift_allocError(&type metadata for DOCApplication.BrowseFolderTestInfo.BrowseFolderTestInfoError, v59, 0, 0);
      v79(v58, v60);
      swift_errorRelease(v60);
      sub_10000CB4C(v58, (uint64_t *)&unk_100642710);
    }
    else
    {
      objc_msgSend(v29, "bounds");
      objc_msgSend(v29, "setContentOffset:", 0.0, v32 + CGRectGetHeight(v85) * 0.75);
      objc_msgSend(v29, "reloadData");
      v35 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
      v81 = static OS_dispatch_queue.main.getter(v35);
      v36 = v64;
      static DispatchTime.now()(v81);
      v37 = v66;
      *v66 = 1;
      v38 = v67;
      v39 = v68;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v67 + 104))(v37, enum case for DispatchTimeInterval.seconds(_:), v68);
      v40 = v69;
      + infix(_:_:)(v36, v37);
      (*(void (**)(_QWORD *, uint64_t))(v38 + 8))(v37, v39);
      v41 = v27;
      v42 = *(void (**)(_BYTE *, uint64_t))(v65 + 8);
      v43 = v36;
      v44 = v70;
      v42(v43, v70);
      v45 = swift_allocObject(&unk_1005C3988, 48, 7);
      *(_BYTE *)(v45 + 16) = v78;
      v46 = v79;
      *(_QWORD *)(v45 + 24) = v29;
      *(_QWORD *)(v45 + 32) = v46;
      *(_QWORD *)(v45 + 40) = v41;
      aBlock[4] = sub_10010C214;
      v83 = v45;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10004A82C;
      aBlock[3] = &unk_1005C39A0;
      v47 = _Block_copy(aBlock);
      v48 = v83;
      v49 = v29;
      swift_retain();
      swift_release(v48);
      v50 = v71;
      static DispatchQoS.unspecified.getter(v51);
      aBlock[0] = _swiftEmptyArrayStorage;
      v52 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v53 = sub_10006922C((uint64_t *)&unk_100647540);
      v54 = sub_1000791AC();
      v55 = v74;
      v56 = v76;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v53, v54, v76, v52);
      v57 = (void *)v81;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v40, v50, v55, v47);
      _Block_release(v47);

      (*(void (**)(_BYTE *, uint64_t))(v75 + 8))(v55, v56);
      (*(void (**)(_BYTE *, uint64_t))(v72 + 8))(v50, v73);
      v42(v40, v44);
    }
  }
  else
  {
    v79((uint64_t)v24, 0);
  }
  return sub_10000CB4C((uint64_t)v24, (uint64_t *)&unk_100642710);
}

uint64_t sub_1000F5FBC(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  void *v5;
  void *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  id v45;
  id v46;
  uint64_t result;
  uint64_t v48;
  _QWORD v49[2];
  os_log_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[4];

  v6 = v5;
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v16 = (char *)v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 != 2)
    {
      type metadata accessor for DOCTab(0);
      v60[3] = v48;
      v60[0] = a1;
      result = doc_fatalErrorUnrecognizedEnumValueEncountered(_:)(v60);
      __break(1u);
      return result;
    }
    v17 = 0;
  }
  else
  {
    v17 = 2;
  }
  v18 = Logger.Tests.unsafeMutableAddressor(v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v18, v12);
  swift_bridgeObjectRetain_n(a3, 2);
  v19 = a4;
  v20 = a5;
  v21 = v19;
  v22 = v20;
  v23 = v12;
  v24 = v22;
  v25 = Logger.logObject.getter(v22);
  v58 = v13;
  v26 = v25;
  v27 = static os_log_type_t.debug.getter(v25);
  v57 = v27;
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc(32, -1);
    v53 = v17;
    v29 = v28;
    v30 = swift_slowAlloc(8, -1);
    v50 = v26;
    v31 = (_QWORD *)v30;
    v51 = swift_slowAlloc(64, -1);
    v60[0] = v51;
    *(_DWORD *)v29 = 136315650;
    v52 = v23;
    swift_bridgeObjectRetain(a3);
    v59 = sub_1000544FC(a2, a3, v60);
    v55 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v29 + 12) = 2112;
    v54 = a2;
    v59 = (uint64_t)v21;
    v32 = v21;
    v56 = v6;
    v33 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60);
    *v31 = v21;

    *(_WORD *)(v29 + 22) = 2080;
    v49[1] = v29 + 24;
    v34 = v24;
    v35 = objc_msgSend(v34, "description");
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    v6 = v56;
    v39 = v36;
    a2 = v54;
    v59 = sub_1000544FC(v39, v38, v60);
    a1 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60);

    swift_bridgeObjectRelease(v38);
    v40 = v50;
    _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v57, "%s %@ %s", (uint8_t *)v29, 0x20u);
    v41 = sub_10006922C(&qword_100643AB0);
    swift_arrayDestroy(v31, 1, v41);
    swift_slowDealloc(v31, -1, -1);
    v42 = v51;
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    v43 = v29;
    v17 = v53;
    swift_slowDealloc(v43, -1, -1);

    (*(void (**)(char *, uint64_t))(v58 + 8))(v16, v52);
  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v16, v23);
  }
  v44 = (_QWORD *)swift_allocObject(&unk_1005C3FC8, 56, 7);
  v44[2] = v6;
  v44[3] = a2;
  v44[4] = a3;
  v44[5] = v24;
  v44[6] = a1;
  swift_bridgeObjectRetain(a3);
  v45 = v24;
  v46 = v6;
  sub_1000F680C(v17, 2, (uint64_t)sub_10010C884, (uint64_t)v44);
  return swift_release(v44);
}

uint64_t sub_1000F6388(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[5];
  _QWORD *v33;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v13 - 8);
  v30 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  v18 = (_QWORD *)swift_allocObject(&unk_1005C3FF0, 56, 7);
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = a3;
  v18[5] = a4;
  v18[6] = a5;
  aBlock[4] = sub_10010C898;
  v33 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = &unk_1005C4008;
  v19 = _Block_copy(aBlock);
  v20 = v33;
  v21 = a1;
  swift_bridgeObjectRetain(a3);
  v22 = a4;
  v23 = swift_release(v20);
  static DispatchQoS.unspecified.getter(v23);
  aBlock[0] = _swiftEmptyArrayStorage;
  v24 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_10006922C((uint64_t *)&unk_100647540);
  v26 = sub_1000791AC();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v10, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v15, v30);
}

void sub_1000F65A4(char *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  NSString v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  NSString v27;
  _QWORD v28[3];
  _BYTE v29[24];

  v28[0] = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v28[0] - 8);
  __chkstk_darwin(v28[0]);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (_QWORD *)((char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28[1] = a2;
  v28[2] = a3;
  v17 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "startedTest:", v17);

  v18 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  *v16 = static OS_dispatch_queue.main.getter(v18);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a5 < 0)
  {
LABEL_9:
    __break(1u);
    return;
  }
  objc_msgSend(a4, "setSelectedIndex:", a5);
  v19 = (uint64_t *)&a1[OBJC_IVAR____TtC5Files14DOCApplication_loadedTabs];
  swift_beginAccess(&a1[OBJC_IVAR____TtC5Files14DOCApplication_loadedTabs], v29, 0, 0);
  v20 = sub_1000DFDCC(a5, *v19);
  if ((v20 & 1) != 0)
  {
    v21 = Logger.Tests.unsafeMutableAddressor(v20);
    v22 = v28[0];
    v23 = (*(uint64_t (**)(char *, uint64_t, _QWORD))(v10 + 16))(v12, v21, v28[0]);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.debug.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "tab already in loadedTabs, finishing test after commit", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v22);
    v27 = String._bridgeToObjectiveC()();
    objc_msgSend(a1, "finishedTest:waitForCommit:extraResults:", v27, 1, 0);

  }
}

uint64_t sub_1000F680C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void **aBlock;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  void *v58;
  uint64_t (*v59)();
  _QWORD *v60;
  char v61[32];

  v48 = a4;
  v45 = a2;
  v46 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v53 = *(_QWORD *)(v6 - 8);
  v54 = v6;
  __chkstk_darwin(v6);
  v52 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v50 = *(_QWORD *)(v8 - 8);
  v51 = v8;
  __chkstk_darwin(v8);
  v49 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTimeInterval(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = type metadata accessor for DispatchTime(0);
  v14 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v43 - v18;
  v20 = v4;
  v21 = (uint64_t *)&v4[OBJC_IVAR____TtC5Files14DOCApplication_loadedTabs];
  swift_beginAccess(v21, v61, 0, 0);
  v22 = a1;
  LOBYTE(a1) = sub_1000DFDCC(a1, *v21);
  v23 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v47 = static OS_dispatch_queue.main.getter(v23);
  static DispatchTime.now()(v47);
  if ((a1 & 1) != 0)
  {
    *v13 = v45;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchTimeInterval.seconds(_:), v10);
    + infix(_:_:)(v16, v13);
    (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
    v24 = *(void (**)(char *, uint64_t))(v14 + 8);
    v25 = v44;
    v24(v16, v44);
    v26 = swift_allocObject(&unk_1005C3F78, 32, 7);
    v27 = v48;
    *(_QWORD *)(v26 + 16) = v46;
    *(_QWORD *)(v26 + 24) = v27;
    v59 = sub_10010DF60;
    v60 = (_QWORD *)v26;
    aBlock = _NSConcreteStackBlock;
    v56 = 1107296256;
    v57 = sub_10004A82C;
    v58 = &unk_1005C3F90;
    v28 = _Block_copy(&aBlock);
    v29 = v60;
    swift_retain();
  }
  else
  {
    + infix(_:_:)(v16, 1.0);
    v24 = *(void (**)(char *, uint64_t))(v14 + 8);
    v25 = v44;
    v24(v16, v44);
    v30 = (_QWORD *)swift_allocObject(&unk_1005C3F28, 56, 7);
    v31 = v20;
    v30[2] = v20;
    v30[3] = v22;
    v32 = v46;
    v30[4] = v45;
    v30[5] = v32;
    v30[6] = v48;
    v59 = sub_10010C850;
    v60 = v30;
    aBlock = _NSConcreteStackBlock;
    v56 = 1107296256;
    v57 = sub_10004A82C;
    v58 = &unk_1005C3F40;
    v28 = _Block_copy(&aBlock);
    v29 = v60;
    swift_retain();
    v33 = v31;
  }
  v34 = swift_release(v29);
  v35 = v49;
  static DispatchQoS.unspecified.getter(v34);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v36 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v37 = sub_10006922C((uint64_t *)&unk_100647540);
  v38 = sub_1000791AC();
  v39 = v52;
  v40 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v37, v38, v54, v36);
  v41 = (void *)v47;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v19, v35, v39, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v53 + 8))(v39, v40);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v35, v51);
  return ((uint64_t (*)(char *, uint64_t))v24)(v19, v25);
}

void sub_1000F6C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t i;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void (**v59)(char *, _QWORD);
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSString v69;
  uint64_t v70;
  unint64_t v71;
  void (**v72)(void);
  id v73;
  uint64_t v74;
  char v75;
  _QWORD *v76;
  id v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSString v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  uint8_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint8_t *v98;
  id v99;
  NSString v100;
  __n128 v101;
  void (*v102)(char *, uint64_t, uint64_t);
  char *v103;
  char *v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  id v111;
  _QWORD *v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  id v116;
  id v117;
  id v118;
  id v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  int v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  id v131;
  void (**v132)(char *, _QWORD);
  unint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  id v136;
  char v137[24];
  char v138[24];
  __int128 aBlock;
  __int128 v140;
  void (*v141)(void *, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145[8];

  v125 = a8;
  v124 = a7;
  v133 = a5;
  v13 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v13);
  v126 = (char *)&v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for URL(0);
  v127 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v123 = (char *)&v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v119 - v17;
  v130 = type metadata accessor for Logger(0);
  v132 = *(void (***)(char *, _QWORD))(v130 - 8);
  __chkstk_darwin(v130);
  v129 = (char *)&v119 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v119 - v21;
  v23 = a3 + 16;
  swift_beginAccess(v23, v145, 0, 0);
  sub_1000271D4(v23, (uint64_t)&aBlock, &qword_100642730);
  v24 = *((_QWORD *)&v140 + 1);
  v25 = sub_10000CB4C((uint64_t)&aBlock, &qword_100642730);
  v134 = a4;
  v131 = a6;
  if (v24)
  {
    v26 = a1;
    swift_beginAccess(v23, v138, 0, 0);
    sub_1000271D4(v23, (uint64_t)&aBlock, &qword_100642730);
    if (!*((_QWORD *)&v140 + 1))
    {
LABEL_55:
      __break(1u);
      return;
    }
    v27 = (void *)objc_opt_self(FPProviderDomain);
    v28 = *((_QWORD *)&v140 + 1);
    v29 = sub_10007E7A0(&aBlock, *((uint64_t *)&v140 + 1));
    v30 = *(_QWORD *)(v28 - 8);
    v31 = __chkstk_darwin(v29);
    v33 = (char *)&v119 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v30 + 16))(v33, v31);
    v34 = _bridgeAnythingToObjectiveC<A>(_:)(v33, v28);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v28);
    sub_100068588(&aBlock);
    objc_msgSend(v27, "endMonitoringProviderDomainChanges:", v34);
    swift_unknownObjectRelease(v34);
    aBlock = 0u;
    v140 = 0u;
    swift_beginAccess(v23, v137, 1, 0);
    v25 = sub_10007EB94((uint64_t)&aBlock, v23);
    a1 = v26;
  }
  if (!a1)
  {
    v58 = Logger.Tests.unsafeMutableAddressor(v25);
    v59 = v132;
    v60 = v130;
    ((void (*)(char *, uint64_t, uint64_t))v132[2])(v22, v58, v130);
    v61 = v133;
    v62 = swift_bridgeObjectRetain_n(v133, 2);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.error.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = swift_slowAlloc(32, -1);
      *(_QWORD *)&aBlock = v66;
      *(_DWORD *)v65 = 136315138;
      swift_bridgeObjectRetain(v61);
      v143 = sub_1000544FC(v134, v61, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144);
      swift_bridgeObjectRelease_n(v61, 3);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Failed test %s. domainDictionary was nil", v65, 0xCu);
      swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v61, 2);
    }
    v59[1](v22, v60);
    v88 = String._bridgeToObjectiveC()();
    objc_msgSend(v131, "failedTest:", v88);

    return;
  }
  v121 = v18;
  v120 = a9;
  v35 = *(_QWORD *)(a1 + 64);
  v135 = (_QWORD *)(a1 + 64);
  v36 = 1 << *(_BYTE *)(a1 + 32);
  v37 = -1;
  if (v36 < 64)
    v37 = ~(-1 << v36);
  v38 = v37 & v35;
  v136 = (id)((unint64_t)(v36 + 63) >> 6);
  swift_bridgeObjectRetain_n(a1, 2);
  v39 = 0;
  if (!v38)
    goto LABEL_9;
LABEL_8:
  v40 = __clz(__rbit64(v38));
  v38 &= v38 - 1;
  for (i = v40 | (v39 << 6); ; i = __clz(__rbit64(v43)) + (v39 << 6))
  {
    v45 = a1;
    v46 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * i);
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    v49 = v48;
    *(_QWORD *)&aBlock = v47;
    *((_QWORD *)&aBlock + 1) = v48;
    v50 = v46;
    v52 = static DOCDocumentSourceIdentifier.iCloudCurrent.getter(v51);
    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    v55 = v54;

    v143 = v53;
    v144 = v55;
    v56 = sub_10010BEE8();
    v57 = sub_10010BF2C();
    LOBYTE(v52) = BidirectionalCollection<>.starts<A>(with:)(&v143, &type metadata for String, &type metadata for String, v56, v57);
    swift_bridgeObjectRelease(v49);
    swift_bridgeObjectRelease(v55);
    if ((v52 & 1) != 0)
    {
      a1 = v45;
      goto LABEL_34;
    }

    a1 = v45;
    if (v38)
      goto LABEL_8;
LABEL_9:
    v42 = v39 + 1;
    if (__OFADD__(v39, 1))
    {
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    if (v42 >= (uint64_t)v136)
      goto LABEL_33;
    v43 = v135[v42];
    ++v39;
    if (!v43)
    {
      v39 = v42 + 1;
      if (v42 + 1 >= (uint64_t)v136)
        goto LABEL_33;
      v43 = v135[v39];
      if (!v43)
      {
        v39 = v42 + 2;
        if (v42 + 2 >= (uint64_t)v136)
          goto LABEL_33;
        v43 = v135[v39];
        if (!v43)
        {
          v39 = v42 + 3;
          if (v42 + 3 >= (uint64_t)v136)
            goto LABEL_33;
          v43 = v135[v39];
          if (!v43)
          {
            v39 = v42 + 4;
            if (v42 + 4 >= (uint64_t)v136)
              goto LABEL_33;
            v43 = v135[v39];
            if (!v43)
              break;
          }
        }
      }
    }
LABEL_26:
    v38 = (v43 - 1) & v43;
  }
  v44 = v42 + 5;
  if (v44 < (uint64_t)v136)
  {
    v43 = v135[v44];
    if (!v43)
    {
      while (1)
      {
        v39 = v44 + 1;
        if (__OFADD__(v44, 1))
          goto LABEL_54;
        if (v39 >= (uint64_t)v136)
          goto LABEL_33;
        v43 = v135[v39];
        ++v44;
        if (v43)
          goto LABEL_26;
      }
    }
    v39 = v44;
    goto LABEL_26;
  }
LABEL_33:
  v46 = 0;
LABEL_34:
  swift_release(a1);
  swift_bridgeObjectRelease(a1);
  static String._unconditionallyBridgeFromObjectiveC(_:)(DOCDocumentSourceIdentifierLocal);
  v68 = v67;
  v69 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v68);
  v71 = v133;
  v72 = (void (**)(void))v132;
  if (v46 && *(_QWORD *)(a1 + 16))
  {
    v73 = v46;
    v74 = sub_100079D38(v73);
    if ((v75 & 1) != 0 && *(_QWORD *)(a1 + 16))
    {
      v76 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v74);
      v77 = v69;
      v78 = sub_100079D38(v77);
      if ((v79 & 1) != 0)
      {
        v136 = v73;
        v80 = v71;
        v81 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v78);
        v119 = v77;

        v135 = v76;
        v82 = objc_msgSend(v76, "storageURLs");
        v83 = v128;
        v84 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v82, v128);

        if (*(_QWORD *)(v84 + 16))
        {
          v85 = v127;
          v86 = (uint64_t)v126;
          (*(void (**)(char *, unint64_t, uint64_t))(v127 + 16))(v126, v84 + ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80)), v83);
          v87 = 0;
        }
        else
        {
          v87 = 1;
          v85 = v127;
          v86 = (uint64_t)v126;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v86, v87, 1, v83);
        v101 = swift_bridgeObjectRelease(v84);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v85 + 48))(v86, 1, v83, v101) != 1)
        {
          v102 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 32);
          v103 = v121;
          v102(v121, v86, v83);
          v132 = (void (**)(char *, _QWORD))objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
          v104 = v123;
          (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v123, v103, v83);
          v105 = *(unsigned __int8 *)(v85 + 80);
          v106 = v81;
          v107 = (v105 + 41) & ~v105;
          v108 = v80;
          v109 = (v122 + v107 + 7) & 0xFFFFFFFFFFFFFFF8;
          v110 = swift_allocObject(&unk_1005C3578, v109 + 16, v105 | 7);
          *(_QWORD *)(v110 + 16) = v134;
          *(_QWORD *)(v110 + 24) = v80;
          v111 = v131;
          *(_QWORD *)(v110 + 32) = v131;
          *(_BYTE *)(v110 + 40) = v124;
          v102((char *)(v110 + v107), (uint64_t)v104, v83);
          v112 = (_QWORD *)(v110 + v109);
          v113 = v120;
          *v112 = v125;
          v112[1] = v113;
          v141 = sub_10010C00C;
          v142 = v110;
          *(_QWORD *)&aBlock = _NSConcreteStackBlock;
          *((_QWORD *)&aBlock + 1) = 1107296256;
          *(_QWORD *)&v140 = sub_100083540;
          *((_QWORD *)&v140 + 1) = &unk_1005C3590;
          v114 = _Block_copy(&aBlock);
          v115 = v142;
          swift_bridgeObjectRetain(v108);
          v116 = v111;
          swift_retain();
          swift_release(v115);
          v117 = v132;
          objc_msgSend(v132, "doc_fetchRootItemForProviderDomain:completionHandler:", v106, v114);

          _Block_release(v114);
          v118 = v136;

          (*(void (**)(char *, uint64_t))(v85 + 8))(v121, v83);
          return;
        }

        v70 = sub_10000CB4C(v86, &qword_100643470);
        v71 = v80;
      }
      else
      {

      }
    }
    else
    {

    }
  }
  Logger.Tests.unsafeMutableAddressor(v70);
  v89 = v129;
  v90 = v130;
  v72[2]();
  v91 = swift_bridgeObjectRetain_n(v71, 2);
  v92 = Logger.logObject.getter(v91);
  v93 = static os_log_type_t.error.getter(v92);
  if (os_log_type_enabled(v92, v93))
  {
    v94 = swift_slowAlloc(12, -1);
    v136 = v69;
    v95 = (uint8_t *)v94;
    v96 = swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v96;
    *(_DWORD *)v95 = 136315138;
    v97 = v133;
    swift_bridgeObjectRetain(v133);
    v143 = sub_1000544FC(v134, v97, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144);
    swift_bridgeObjectRelease_n(v97, 3);
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Failed test %s. could not get cloudURL", v95, 0xCu);
    swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v96, -1, -1);
    v98 = v95;
    v69 = v136;
    swift_slowDealloc(v98, -1, -1);

    v132[1](v129, v90);
  }
  else
  {

    swift_bridgeObjectRelease_n(v71, 2);
    ((void (*)(char *, uint64_t))v72[1])(v89, v90);
  }
  v99 = v131;
  v100 = String._bridgeToObjectiveC()();
  objc_msgSend(v99, "failedTest:", v100);

}

void sub_1000F77BC(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, char *a5, char a6, uint64_t a7, uint8_t *a8, void *a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  NSString v26;
  _QWORD v27[2];
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint8_t *v31;
  id v32;
  uint64_t aBlock;
  uint64_t v34;
  uint64_t v35;

  v30 = a7;
  v31 = a8;
  v32 = a9;
  v28 = type metadata accessor for URL(0);
  __chkstk_darwin(v28);
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v18 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v27[1] = a4;
    v19 = *(void **)&a5[OBJC_IVAR____TtC5Files14DOCApplication_localDomainRootForQLTests];
    *(_QWORD *)&a5[OBJC_IVAR____TtC5Files14DOCApplication_localDomainRootForQLTests] = a1;
    v29 = a1;

    __asm { BR              X10 }
  }
  v32 = a5;
  v20 = Logger.Tests.unsafeMutableAddressor(v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v20, v14);
  v21 = swift_bridgeObjectRetain_n(a4, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.error.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    aBlock = v25;
    *(_DWORD *)v24 = 136315138;
    v31 = v24 + 4;
    swift_bridgeObjectRetain(a4);
    v34 = sub_1000544FC(a3, a4, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed test %s. FPItem was nil", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v26 = String._bridgeToObjectiveC()();
  objc_msgSend(v32, "failedTest:", v26);

}

void sub_1000F7F18(void *a1, uint64_t a2, unint64_t a3, void *a4, void (*a5)(__n128))
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSString v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;

  v34 = a4;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11.n128_f64[0] = __chkstk_darwin(v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    goto LABEL_4;
  v36 = (uint64_t)a1;
  swift_errorRetain(a1);
  v14 = sub_10006922C((uint64_t *)&unk_100643490);
  v15 = sub_10004F2F0(0, (unint64_t *)&qword_100644570, NSError_ptr);
  v16 = swift_dynamicCast(&v35, &v36, v14, v15, 6);
  if (!(_DWORD)v16)
    goto LABEL_5;
  v17 = v35;
  v18 = objc_msgSend(v35, "code");

  if (v18 == (id)-1001)
  {
LABEL_4:
    a5(v11);
  }
  else
  {
LABEL_5:
    v19 = Logger.Tests.unsafeMutableAddressor(v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v19, v9);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a3);
    swift_errorRetain(a1);
    v20 = swift_bridgeObjectRetain(a3);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(22, -1);
      v32 = swift_slowAlloc(64, -1);
      v36 = v32;
      *(_DWORD *)v23 = 136315394;
      v33 = a2;
      swift_bridgeObjectRetain(a3);
      v35 = (id)sub_1000544FC(v33, a3, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v23 + 12) = 2080;
      v35 = a1;
      swift_errorRetain(a1);
      v24 = sub_10006922C((uint64_t *)&unk_1006434A0);
      v25 = String.init<A>(describing:)(&v35, v24);
      v26 = v9;
      v28 = v27;
      v35 = (id)sub_1000544FC(v25, v27, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
      swift_bridgeObjectRelease(v28);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed test %s. Copy operation error: %s", (uint8_t *)v23, 0x16u);
      v29 = v32;
      swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v26);
    }
    else
    {
      swift_bridgeObjectRelease_n(a3, 2);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    }
    v30 = String._bridgeToObjectiveC()();
    objc_msgSend(v34, "failedTest:", v30);

  }
}

double sub_1000F8240(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  double result;

  v4 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    type metadata accessor for FPProviderDomainID(0);
    v8 = v7;
    v9 = sub_10004F2F0(0, (unint64_t *)&unk_100643460, FPProviderDomain_ptr);
    v10 = sub_10005A360(&qword_100641870, (uint64_t (*)(uint64_t))type metadata accessor for FPProviderDomainID, (uint64_t)&unk_1004D57E0);
    v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4, v8, v9, v10);
  }
  swift_retain();
  v11 = a3;
  v6(v4, a3);
  swift_release(v5);

  *(_QWORD *)&result = swift_bridgeObjectRelease(v4).n128_u64[0];
  return result;
}

void sub_1000F830C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;

  v6 = type metadata accessor for URL(0);
  __chkstk_darwin(v6);
  __asm { BR              X10 }
}

void sub_1000F83B8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;

  v8 = (void *)objc_opt_self(DOCUndoManager);
  v9 = v1;
  v10 = objc_msgSend(v8, "shared");
  v11 = objc_allocWithZone((Class)((uint64_t (*)(_QWORD))type metadata accessor for DOCCreateFolderOperation)(0));
  v12 = (void *)((uint64_t (*)(id, uint64_t, unint64_t, id))DOCCreateFolderOperation.init(parentItem:folderName:undoManager:))(v9, 0x6D65744936312D31, 0xEE007265646C6F46, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 16))(v5, *(_QWORD *)(v7 - 160), v4);
  v13 = *(unsigned __int8 *)(v0 + 80);
  v14 = (v13 + 40) & ~v13;
  v15 = (v6 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (char *)swift_allocObject(&unk_1005C3E38, v15 + 16, v13 | 7);
  *((_QWORD *)v16 + 2) = *(_QWORD *)(v7 - 152);
  *((_QWORD *)v16 + 3) = v3;
  *((_QWORD *)v16 + 4) = v2;
  (*(void (**)(char *, uint64_t, uint64_t))(v0 + 32))(&v16[v14], v5, v4);
  v17 = &v16[v15];
  v18 = *(_QWORD *)(v7 - 136);
  *(_QWORD *)v17 = *(_QWORD *)(v7 - 144);
  *((_QWORD *)v17 + 1) = v18;
  *(_QWORD *)(v7 - 96) = sub_10010C64C;
  *(_QWORD *)(v7 - 88) = v16;
  *(_QWORD *)(v7 - 128) = _NSConcreteStackBlock;
  *(_QWORD *)(v7 - 120) = 1107296256;
  *(_QWORD *)(v7 - 112) = sub_100083540;
  *(_QWORD *)(v7 - 104) = &unk_1005C3E50;
  v19 = _Block_copy((const void *)(v7 - 128));
  v20 = *(_QWORD *)(v7 - 88);
  v21 = v12;
  swift_bridgeObjectRetain(v3);
  v22 = v2;
  swift_retain();
  swift_release(v20);
  objc_msgSend(v21, "setCreateFolderCompletionBlock:", v19);
  _Block_release(v19);

  v23 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
  objc_msgSend(v23, "scheduleAction:", v21);

}

void sub_1000F8690(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6, uint8_t *a7, uint8_t *a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  id v34;
  unint64_t v35;
  uint8_t **v36;
  uint8_t *v37;
  void *v38;
  char *v39;
  id v40;
  char *v41;
  id v42;
  NSString v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint8_t *v56;
  id v57;
  uint64_t v58;
  uint64_t aBlock[5];
  char *v60;
  uint64_t v61;
  uint64_t v62;

  v55 = a6;
  v56 = a7;
  v57 = a5;
  v58 = a3;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v20 = sub_10006922C((uint64_t *)&unk_100644550);
    v21 = *(_QWORD *)(v12 + 72);
    v54 = a8;
    v22 = *(unsigned __int8 *)(v12 + 80);
    v53 = v22 | 7;
    v23 = swift_allocObject(v20, ((v22 + 32) & ~v22) + v21, v22 | 7);
    *(_OWORD *)(v23 + 16) = xmmword_1004D9670;
    v52 = a4;
    v24 = a1;
    v25 = v55;
    URL.appendingPathComponent(_:)(0xD000000000000013, 0x800000010050EE80);
    URL.appendingPathComponent(_:)(0x6E6F736874696D53, 0xEF6664702E6E6169);
    (*(void (**)(char *, uint64_t))(v12 + 8))((char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
    v26 = (void *)objc_opt_self(DOCUndoManager);
    v27 = v24;
    v28 = objc_msgSend(v26, "shared");
    v29 = objc_allocWithZone((Class)type metadata accessor for DOCCopyOperation());
    v51 = DOCCopyOperation.init(urls:destinationFolder:undoManager:)(v23, v27, v28);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v25, v11);
    v30 = (v22 + 40) & ~v22;
    v31 = (v13 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF8;
    v33 = (char *)swift_allocObject(&unk_1005C3E88, v32 + 16, v53);
    v34 = v57;
    v35 = v52;
    *((_QWORD *)v33 + 2) = v58;
    *((_QWORD *)v33 + 3) = v35;
    *((_QWORD *)v33 + 4) = v34;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v33[v30], v14, v11);
    *(_QWORD *)&v33[v31] = v27;
    v36 = (uint8_t **)&v33[v32];
    v37 = v54;
    *v36 = v56;
    v36[1] = v37;
    aBlock[4] = (uint64_t)sub_10010C764;
    v60 = v33;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10015936C;
    aBlock[3] = (uint64_t)&unk_1005C3EA0;
    v38 = _Block_copy(aBlock);
    v39 = v60;
    swift_bridgeObjectRetain(v35);
    v40 = v27;
    v41 = v51;
    v42 = v34;
    swift_retain();
    swift_release(v39);
    objc_msgSend(v41, "setActionCompletionBlock:", v38);
    _Block_release(v38);

    v43 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
    objc_msgSend(v43, "scheduleAction:", v41);

  }
  else
  {
    v44 = Logger.Tests.unsafeMutableAddressor(v17);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v44, v15);
    v45 = swift_bridgeObjectRetain_n(a4, 2);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      aBlock[0] = v49;
      *(_DWORD *)v48 = 136315138;
      v56 = v48 + 4;
      swift_bridgeObjectRetain(a4);
      v61 = sub_1000544FC(v58, a4, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Failed setup %s. Folder item nil", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    v43 = String._bridgeToObjectiveC()();
    objc_msgSend(v57, "failedTest:", v43);
  }

}

void sub_1000F8B54(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  char *v44;
  id v45;
  NSString v46;
  void *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t aBlock[5];
  _QWORD *v55;

  v50 = a7;
  v51 = a8;
  v49 = a6;
  v52 = a4;
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v20 = a2;
    v21 = Logger.Tests.unsafeMutableAddressor(v17);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v21, v11);
    swift_bridgeObjectRetain(a3);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a3);
    v22 = swift_errorRetain(a1);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(22, -1);
      v51 = swift_slowAlloc(64, -1);
      aBlock[0] = v51;
      *(_DWORD *)v25 = 136315394;
      swift_bridgeObjectRetain(a3);
      v48 = v20;
      v53 = sub_1000544FC(v20, a3, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, aBlock);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v25 + 12) = 2080;
      v53 = a1;
      swift_errorRetain(a1);
      v26 = sub_10006922C((uint64_t *)&unk_1006434A0);
      v27 = String.init<A>(describing:)(&v53, v26);
      v29 = v28;
      v53 = sub_1000544FC(v27, v28, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, aBlock);
      swift_bridgeObjectRelease(v29);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed setup %s copyPDFOperation error: %s", (uint8_t *)v25, 0x16u);
      v30 = v51;
      swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a3, 2);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v47 = v52;
    v46 = String._bridgeToObjectiveC()();
    objc_msgSend(v47, "failedTest:", v46);
  }
  else
  {
    v31 = sub_10006922C((uint64_t *)&unk_100644550);
    v32 = swift_allocObject(v31, ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72), *(unsigned __int8 *)(v16 + 80) | 7);
    *(_OWORD *)(v32 + 16) = xmmword_1004D9670;
    URL.appendingPathComponent(_:)(0xD000000000000013, 0x800000010050EE80);
    URL.appendingPathComponent(_:)(0x462072656D6D7553, 0xEE0067706A2E6E75);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    v33 = (void *)objc_opt_self(DOCUndoManager);
    v34 = v49;
    v35 = objc_msgSend(v33, "shared");
    v36 = objc_allocWithZone((Class)type metadata accessor for DOCCopyOperation());
    v37 = DOCCopyOperation.init(urls:destinationFolder:undoManager:)(v32, v34, v35);
    v38 = (_QWORD *)swift_allocObject(&unk_1005C3ED8, 56, 7);
    v38[2] = a2;
    v38[3] = a3;
    v39 = v51;
    v40 = v52;
    v41 = v50;
    v38[4] = v52;
    v38[5] = v41;
    v38[6] = v39;
    aBlock[4] = (uint64_t)sub_10010C804;
    v55 = v38;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10015936C;
    aBlock[3] = (uint64_t)&unk_1005C3EF0;
    v42 = _Block_copy(aBlock);
    v43 = v55;
    v44 = v37;
    swift_bridgeObjectRetain(a3);
    v45 = v40;
    swift_retain();
    swift_release(v43);
    objc_msgSend(v44, "setActionCompletionBlock:", v42);
    _Block_release(v42);

    v46 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
    objc_msgSend(v46, "scheduleAction:", v44);

  }
}

void sub_1000F9018(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, void (*a5)(double))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSString v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v16 = Logger.Tests.unsafeMutableAddressor(v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, v16, v10);
    swift_bridgeObjectRetain(a3);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a3);
    v17 = swift_errorRetain(a1);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(22, -1);
      v30 = swift_slowAlloc(64, -1);
      v33 = v30;
      *(_DWORD *)v20 = 136315394;
      v31 = a2;
      swift_bridgeObjectRetain(a3);
      v32 = sub_1000544FC(v31, a3, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v20 + 12) = 2080;
      v29[1] = v20 + 14;
      v32 = a1;
      swift_errorRetain(a1);
      v21 = sub_10006922C((uint64_t *)&unk_1006434A0);
      v22 = String.init<A>(describing:)(&v32, v21);
      v23 = a4;
      v25 = v24;
      v32 = sub_1000544FC(v22, v24, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      v26 = v25;
      a4 = v23;
      swift_bridgeObjectRelease(v26);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed setup %s. copyImageOperation error: %s", (uint8_t *)v20, 0x16u);
      v27 = v30;
      swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a3, 2);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
    v28 = String._bridgeToObjectiveC()();
    objc_msgSend(a4, "failedTest:", v28);

  }
  else
  {
    a5(v13);
  }
}

uint64_t sub_1000F92C4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  id v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v40 = a1;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  v42 = v7;
  __chkstk_darwin(v6);
  v39[2] = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)v39 - v10;
  v12 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v12);
  v14 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)v39 - v16;
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)v39 - v22;
  v24 = *(void **)(v3 + OBJC_IVAR____TtC5Files14DOCApplication_localDomainRootForQLTests);
  if (v24)
  {
    v25 = objc_msgSend(v24, "fileURL", v21);
    if (v25)
    {
      v26 = v25;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v25);

      v27 = 0;
    }
    else
    {
      v27 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v14, v27, 1, v18);
    sub_100070EDC((uint64_t)v14, (uint64_t)v17, &qword_100643470);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v23, v17, v18);
      v38 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      __asm { BR              X10 }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v19 + 56))(v17, 1, 1, v18, v21);
  }
  v28 = sub_10000CB4C((uint64_t)v17, &qword_100643470);
  v29 = Logger.Tests.unsafeMutableAddressor(v28);
  v31 = v41;
  v30 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v11, v29, v41);
  v32 = swift_bridgeObjectRetain_n(a2, 2);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.debug.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    v44 = v36;
    *(_DWORD *)v35 = 136315138;
    swift_bridgeObjectRetain(a2);
    v43 = sub_1000544FC(v40, a2, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Failed teardown, QuickLook test files probably left in local files %s", v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v11, v31);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v11, v31);
  }
}

uint64_t sub_1000F99D8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, char a7)
{
  return sub_1000F9DD8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_1005C3D20, (uint64_t)sub_10010C44C);
}

uint64_t sub_1000F9A08(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, char a8)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;

  v15 = (_QWORD *)swift_allocObject(&unk_1005C3D48, 40, 7);
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = a1;
  v16 = swift_allocObject(&unk_1005C3D70, 41, 7);
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  *(_QWORD *)(v16 + 32) = a3;
  *(_BYTE *)(v16 + 40) = a8;
  v17 = swift_allocObject(&unk_1005C3D98, 97, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  *(_QWORD *)(v17 + 32) = a1;
  *(_QWORD *)(v17 + 40) = a6;
  *(_QWORD *)(v17 + 48) = a7;
  *(_QWORD *)(v17 + 56) = a5;
  *(_QWORD *)(v17 + 64) = sub_10010C480;
  *(_QWORD *)(v17 + 72) = v15;
  *(_QWORD *)(v17 + 80) = sub_10010C49C;
  *(_QWORD *)(v17 + 88) = v16;
  *(_BYTE *)(v17 + 96) = a8;
  v18 = (_QWORD *)swift_allocObject(&unk_1005C3DC0, 48, 7);
  v18[2] = sub_10010C0B4;
  v18[3] = v17;
  v18[4] = a1;
  v18[5] = a6;
  v19 = a1;
  swift_bridgeObjectRetain_n(a3, 3);
  v20 = v19;
  v21 = a6;
  v22 = v20;
  v23 = v21;
  v24 = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000F10F4(v24, v23, (uint64_t)sub_10010DED0, (uint64_t)v18);
  swift_release(v15);
  swift_release(v16);
  swift_release(v17);
  return swift_release(v18);
}

void sub_1000F9B98(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint8_t *v18;
  NSString v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = Logger.Tests.unsafeMutableAddressor(v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
  v12 = swift_bridgeObjectRetain_n(a2, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v20 = v6;
    v15 = swift_slowAlloc(12, -1);
    v21 = a3;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc(32, -1);
    v23 = v17;
    *(_DWORD *)v16 = 136315138;
    swift_bridgeObjectRetain(a2);
    v22 = sub_1000544FC(a1, a2, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Starting test %s", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    v18 = v16;
    a3 = v21;
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v20);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "startedTest:", v19);

}

uint64_t sub_1000F9DA8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, char a7)
{
  return sub_1000F9DD8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_1005C3B40, (uint64_t)sub_10010C374);
}

uint64_t sub_1000F9DD8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  uint64_t v17;
  id v18;
  id v19;
  id v20;

  v17 = swift_allocObject(a8, 73, 7);
  *(_QWORD *)(v17 + 16) = v9;
  *(_QWORD *)(v17 + 24) = a1;
  *(_QWORD *)(v17 + 32) = a2;
  *(_QWORD *)(v17 + 40) = a3;
  *(_QWORD *)(v17 + 48) = a4;
  *(_QWORD *)(v17 + 56) = a5;
  *(_QWORD *)(v17 + 64) = a6;
  *(_BYTE *)(v17 + 72) = a7;
  v18 = v9;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  v19 = a4;
  v20 = a5;
  sub_10010BBE0(a1, a2, a7, a9, v17);
  return swift_release(v17);
}

uint64_t sub_1000F9E94(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, char a8)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;

  v15 = swift_allocObject(&unk_1005C3B68, 49, 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  *(_QWORD *)(v15 + 32) = a1;
  *(_QWORD *)(v15 + 40) = a6;
  *(_BYTE *)(v15 + 48) = a8;
  v16 = swift_allocObject(&unk_1005C3B90, 97, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  *(_QWORD *)(v16 + 32) = a1;
  *(_QWORD *)(v16 + 40) = a6;
  *(_QWORD *)(v16 + 48) = a7;
  *(_QWORD *)(v16 + 56) = a5;
  *(_QWORD *)(v16 + 64) = DOCSplitBrowserViewController.didCommitPreview(of:);
  *(_QWORD *)(v16 + 72) = 0;
  *(_QWORD *)(v16 + 80) = sub_10010C390;
  *(_QWORD *)(v16 + 88) = v15;
  *(_BYTE *)(v16 + 96) = a8;
  v17 = (_QWORD *)swift_allocObject(&unk_1005C3BB8, 48, 7);
  v17[2] = sub_10010C0B4;
  v17[3] = v16;
  v17[4] = a1;
  v17[5] = a6;
  v18 = a1;
  v19 = a6;
  v20 = v18;
  v21 = v19;
  swift_bridgeObjectRetain_n(a3, 2);
  v22 = v20;
  v23 = v21;
  v24 = a5;
  swift_retain();
  swift_retain();
  sub_1000F10F4(v24, v23, (uint64_t)sub_10010DED0, (uint64_t)v17);
  swift_release(v15);
  swift_release(v16);
  return swift_release(v17);
}

uint64_t sub_1000F9FF8(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD aBlock[5];
  uint64_t v50;

  v44 = a5;
  v42 = a3;
  v43 = a4;
  v40 = a1;
  v41 = a2;
  v45 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTimeInterval(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for DispatchTime(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v39 - v19;
  v21 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v39 = static OS_dispatch_queue.main.getter(v21);
  static DispatchTime.now()(v39);
  *v13 = 1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchTimeInterval.seconds(_:), v10);
  + infix(_:_:)(v17, v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23 = v14;
  v22(v17, v14);
  v24 = swift_allocObject(&unk_1005C3BE0, 49, 7);
  v25 = v41;
  *(_QWORD *)(v24 + 16) = v40;
  *(_QWORD *)(v24 + 24) = v25;
  v27 = v42;
  v26 = v43;
  *(_QWORD *)(v24 + 32) = v42;
  *(_QWORD *)(v24 + 40) = v26;
  *(_BYTE *)(v24 + 48) = v44;
  aBlock[4] = sub_10010C3C0;
  v50 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = &unk_1005C3BF8;
  v28 = _Block_copy(aBlock);
  v29 = v50;
  swift_bridgeObjectRetain(v25);
  v30 = v27;
  v31 = v26;
  v32 = swift_release(v29);
  static DispatchQoS.unspecified.getter(v32);
  aBlock[0] = _swiftEmptyArrayStorage;
  v33 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v34 = sub_10006922C((uint64_t *)&unk_100647540);
  v35 = sub_1000791AC();
  v36 = v45;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v34, v35, v45, v33);
  v37 = (void *)v39;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v20, v9, v6, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v48 + 8))(v6, v36);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v9, v47);
  return ((uint64_t (*)(char *, uint64_t))v22)(v20, v23);
}

double sub_1000FA314(uint64_t a1, unint64_t a2, char *a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  void **v21;
  void **v22;
  void **v23;
  uint8_t *v24;
  NSString v25;
  uint64_t v26;
  NSString v27;
  char *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  double result;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void **aBlock;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  void *v45;
  void (*v46)();
  uint64_t v47;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = Logger.Tests.unsafeMutableAddressor(v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15, v10);
  v16 = swift_bridgeObjectRetain_n(a2, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v38 = a5;
    v19 = swift_slowAlloc(12, -1);
    v37 = a4;
    v20 = (uint8_t *)v19;
    v21 = (void **)swift_slowAlloc(32, -1);
    v40 = a1;
    v22 = v21;
    aBlock = v21;
    v39 = a3;
    *(_DWORD *)v20 = 136315138;
    swift_bridgeObjectRetain(a2);
    v41 = sub_1000544FC(v40, a2, (uint64_t *)&aBlock);
    LOBYTE(a5) = v38;
    a3 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &aBlock);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Starting test %s", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v23 = v22;
    a1 = v40;
    swift_slowDealloc(v23, -1, -1);
    v24 = v20;
    a4 = v37;
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v25 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "startedTest:", v25);

  v26 = swift_allocObject(&unk_1005C3C30, 41, 7);
  *(_QWORD *)(v26 + 16) = a3;
  *(_QWORD *)(v26 + 24) = a1;
  *(_QWORD *)(v26 + 32) = a2;
  *(_BYTE *)(v26 + 40) = a5;
  v27 = *(NSString *)(a4 + OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController);
  if (v27)
  {
    *(_QWORD *)(a4 + OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController) = 0;
    swift_bridgeObjectRetain_n(a2, 2);
    v28 = a3;
    v46 = sub_10010C3F0;
    v47 = v26;
    aBlock = _NSConcreteStackBlock;
    v43 = 1107296256;
    v44 = sub_10004A82C;
    v45 = &unk_1005C3C98;
    v29 = _Block_copy(&aBlock);
    v30 = v47;
    swift_retain();
    swift_release(v30);
    objc_msgSend(v27, "dismissViewControllerAnimated:completion:", 1, v29);
  }
  else
  {
    v31 = *(_QWORD *)&a3[OBJC_IVAR____TtC5Files14DOCApplication_currentTestName + 8];
    swift_bridgeObjectRetain_n(a2, 2);
    v32 = a3;
    if (v31)
    {
      swift_bridgeObjectRetain(v31);
      v27 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v31);
    }
    else
    {
      v27 = 0;
    }
    v33 = swift_allocObject(&unk_1005C3C58, 41, 7);
    *(_QWORD *)(v33 + 16) = a3;
    *(_QWORD *)(v33 + 24) = a1;
    *(_QWORD *)(v33 + 32) = a2;
    *(_BYTE *)(v33 + 40) = a5;
    v46 = (void (*)())sub_10010C324;
    v47 = v33;
    aBlock = _NSConcreteStackBlock;
    v43 = 1107296256;
    v44 = sub_10004A82C;
    v45 = &unk_1005C3C70;
    v29 = _Block_copy(&aBlock);
    v34 = v47;
    swift_bridgeObjectRetain(a2);
    v28 = a3;
    swift_release(v34);
    objc_msgSend(v28, "finishedTest:waitForCommit:extraResults:withTeardownBlock:", v27, 1, 0, v29);
  }
  _Block_release(v29);

  swift_release(v26);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a2).n128_u64[0];
  return result;
}

void sub_1000FA724(char *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  NSString v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  char *v19;
  _QWORD v20[5];
  uint64_t v21;

  v14 = *(_QWORD *)&a1[OBJC_IVAR____TtC5Files14DOCApplication_currentTestName + 8];
  if (v14)
  {
    swift_bridgeObjectRetain(*(_QWORD *)&a1[OBJC_IVAR____TtC5Files14DOCApplication_currentTestName + 8]);
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
  }
  else
  {
    v15 = 0;
  }
  v16 = swift_allocObject(a5, 41, 7);
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  *(_QWORD *)(v16 + 32) = a3;
  *(_BYTE *)(v16 + 40) = a4;
  v20[4] = a6;
  v21 = v16;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 1107296256;
  v20[2] = sub_10004A82C;
  v20[3] = a7;
  v17 = _Block_copy(v20);
  v18 = v21;
  v19 = a1;
  swift_bridgeObjectRetain(a3);
  swift_release(v18);
  objc_msgSend(v19, "finishedTest:waitForCommit:extraResults:withTeardownBlock:", v15, 1, 0, v17);
  _Block_release(v17);

}

uint64_t sub_1000FA858(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, char a7)
{
  return sub_1000F9DD8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_1005C3A50, (uint64_t)sub_10010C32C);
}

double sub_1000FA888(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, char a8)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  double result;

  v15 = swift_allocObject(&unk_1005C3A78, 49, 7);
  *(_QWORD *)(v15 + 16) = a6;
  *(_QWORD *)(v15 + 24) = a2;
  *(_QWORD *)(v15 + 32) = a3;
  *(_QWORD *)(v15 + 40) = a1;
  *(_BYTE *)(v15 + 48) = a8;
  v16 = swift_allocObject(&unk_1005C3AA0, 97, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  *(_QWORD *)(v16 + 32) = a1;
  *(_QWORD *)(v16 + 40) = a6;
  *(_QWORD *)(v16 + 48) = a7;
  *(_QWORD *)(v16 + 56) = a5;
  *(_QWORD *)(v16 + 64) = DOCSplitBrowserViewController.didCommitPreview(of:);
  *(_QWORD *)(v16 + 72) = 0;
  *(_QWORD *)(v16 + 80) = sub_10010C340;
  *(_QWORD *)(v16 + 88) = v15;
  *(_BYTE *)(v16 + 96) = a8;
  v17 = (_QWORD *)swift_allocObject(&unk_1005C3AC8, 48, 7);
  v17[2] = sub_10010C0B4;
  v17[3] = v16;
  v17[4] = a1;
  v17[5] = a6;
  v18 = a6;
  v19 = a1;
  v20 = v18;
  swift_bridgeObjectRetain_n(a3, 2);
  v21 = v19;
  v22 = v20;
  v23 = a5;
  swift_retain();
  swift_retain();
  sub_1000F10F4(v23, v22, (uint64_t)sub_10010DED0, (uint64_t)v17);
  swift_release(v15);
  swift_release(v16);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

void sub_1000FA9E8(char *a1, uint64_t a2, unint64_t a3, id a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  id v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  NSString v52;
  void *v53;
  NSString v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  uint64_t aBlock[5];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v77 - v15;
  __chkstk_darwin(v17);
  v20 = (char *)&v77 - v19;
  v21 = *(void **)&a1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController];
  if (!v21)
  {
    v63 = Logger.Tests.unsafeMutableAddressor(v18);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v63, v10);
    v64 = swift_bridgeObjectRetain_n(a3, 2);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.error.getter(v65);
    if (os_log_type_enabled(v65, v66))
    {
      v80 = a4;
      v67 = (uint8_t *)swift_slowAlloc(12, -1);
      v68 = swift_slowAlloc(32, -1);
      v79 = v10;
      v69 = v68;
      aBlock[0] = v68;
      *(_DWORD *)v67 = 136315138;
      swift_bridgeObjectRetain(a3);
      v84 = sub_1000544FC(a2, a3, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Failed to launch QuickLook for test %s", v67, 0xCu);
      swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v67, -1, -1);

      a4 = v80;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v79);
    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
    }
    v54 = String._bridgeToObjectiveC()();
    objc_msgSend(a4, "failedTest:", v54);
    goto LABEL_18;
  }
  v80 = a4;
  v22 = a2;
  v81 = v21;
  v23 = objc_msgSend(a1, "view");
  if (v23)
  {
    v24 = v23;
    v25 = objc_msgSend(v23, "window");

    if (!v25)
    {
      v70 = Logger.Tests.unsafeMutableAddressor(v26);
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v70, v10);
      v71 = swift_bridgeObjectRetain_n(a3, 2);
      v72 = Logger.logObject.getter(v71);
      v73 = static os_log_type_t.error.getter(v72);
      if (os_log_type_enabled(v72, (os_log_type_t)v73))
      {
        v74 = (uint8_t *)swift_slowAlloc(12, -1);
        v75 = swift_slowAlloc(32, -1);
        v79 = v10;
        v76 = v75;
        aBlock[0] = v75;
        *(_DWORD *)v74 = 136315138;
        swift_bridgeObjectRetain(a3);
        v84 = sub_1000544FC(v22, a3, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85);
        swift_bridgeObjectRelease_n(a3, 3);
        _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v73, "Failed to find QuickLook bounds for test %s", v74, 0xCu);
        swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v76, -1, -1);
        swift_slowDealloc(v74, -1, -1);

        (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v79);
      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      }
      v54 = String._bridgeToObjectiveC()();
      objc_msgSend(v80, "failedTest:", v54);
      goto LABEL_17;
    }
    v78 = v11;
    v27 = v81;
    v28 = objc_msgSend(v81, "view");
    if (v28)
    {
      v29 = v28;
      v30 = v22;
      objc_msgSend(v28, "bounds");
      v32 = v31;
      v34 = v33;
      v36 = v35;
      v38 = v37;

      v39 = objc_msgSend(v27, "view");
      objc_msgSend(v25, "convertRect:fromView:", v39, v32, v34, v36, v38);
      v41 = v40;
      v43 = v42;
      v45 = v44;
      v47 = v46;

      v48 = swift_allocObject(&unk_1005C3AF0, 41, 7);
      v49 = v80;
      *(_QWORD *)(v48 + 16) = v80;
      *(_QWORD *)(v48 + 24) = v30;
      *(_QWORD *)(v48 + 32) = a3;
      *(_BYTE *)(v48 + 40) = a5;
      v50 = objc_allocWithZone((Class)RPTDirectionalSwipeTestParameters);
      swift_bridgeObjectRetain(a3);
      v51 = v49;
      v52 = String._bridgeToObjectiveC()();
      aBlock[4] = (uint64_t)sub_10010C324;
      v83 = v48;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10004A82C;
      aBlock[3] = (uint64_t)&unk_1005C3B08;
      v53 = _Block_copy(aBlock);
      swift_release(v83);
      v54 = objc_msgSend(v50, "initWithTestName:scrollingBounds:swipeCount:direction:completionHandler:", v52, 1, 6, v53, v41, v43, v45, v47);
      _Block_release(v53);

      v55 = Logger.Tests.unsafeMutableAddressor(objc_msgSend(v54, "setShouldFlick:", 1));
      v56 = v78;
      (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v13, v55, v10);
      v57 = swift_bridgeObjectRetain_n(a3, 2);
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.debug.getter(v58);
      if (os_log_type_enabled(v58, v59))
      {
        v79 = v10;
        v60 = (uint8_t *)swift_slowAlloc(12, -1);
        v61 = v30;
        v62 = swift_slowAlloc(32, -1);
        aBlock[0] = v62;
        *(_DWORD *)v60 = 136315138;
        swift_bridgeObjectRetain(a3);
        v84 = sub_1000544FC(v61, a3, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85);
        swift_bridgeObjectRelease_n(a3, 3);
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Starting test %s", v60, 0xCu);
        swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v62, -1, -1);
        swift_slowDealloc(v60, -1, -1);

        (*(void (**)(char *, uint64_t))(v78 + 8))(v13, v79);
      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
        (*(void (**)(char *, uint64_t))(v56 + 8))(v13, v10);
      }
      objc_msgSend((id)objc_opt_self(RPTTestRunner), "runTestWithParameters:", v54);
LABEL_17:

LABEL_18:
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1000FB150(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, char a7)
{
  return sub_1000F9DD8(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&unk_1005C34D8, (uint64_t)sub_100106764);
}

double sub_1000FB180(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, char a8)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  double result;

  v15 = swift_allocObject(&unk_1005C3618, 49, 7);
  *(_QWORD *)(v15 + 16) = a6;
  *(_QWORD *)(v15 + 24) = a2;
  *(_QWORD *)(v15 + 32) = a3;
  *(_QWORD *)(v15 + 40) = a1;
  *(_BYTE *)(v15 + 48) = a8;
  v16 = swift_allocObject(&unk_1005C3640, 97, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  *(_QWORD *)(v16 + 32) = a1;
  *(_QWORD *)(v16 + 40) = a6;
  *(_QWORD *)(v16 + 48) = a7;
  *(_QWORD *)(v16 + 56) = a5;
  *(_QWORD *)(v16 + 64) = DOCSplitBrowserViewController.didCommitPreview(of:);
  *(_QWORD *)(v16 + 72) = 0;
  *(_QWORD *)(v16 + 80) = sub_10010C0A4;
  *(_QWORD *)(v16 + 88) = v15;
  *(_BYTE *)(v16 + 96) = a8;
  v17 = (_QWORD *)swift_allocObject(&unk_1005C3668, 48, 7);
  v17[2] = sub_10010C0B4;
  v17[3] = v16;
  v17[4] = a1;
  v17[5] = a6;
  v18 = a6;
  v19 = a1;
  v20 = v18;
  swift_bridgeObjectRetain_n(a3, 2);
  v21 = v19;
  v22 = v20;
  v23 = a5;
  swift_retain();
  swift_retain();
  sub_1000F10F4(v23, v22, (uint64_t)sub_10010C0C8, (uint64_t)v17);
  swift_release(v15);
  swift_release(v16);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

void sub_1000FB2E0(char *a1, uint64_t a2, unint64_t a3, id a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  objc_class *v47;
  char *v48;
  uint64_t *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  id v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  __n128 v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  id v88;
  objc_super v89;
  uint64_t v90;
  uint64_t v91;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v85 - v15;
  __chkstk_darwin(v17);
  v20 = (char *)&v85 - v19;
  v21 = *(void **)&a1[OBJC_IVAR____TtC5Files21DRIMainViewController_currentQuickLookPreviewController];
  if (!v21)
  {
    v71 = Logger.Tests.unsafeMutableAddressor(v18);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v71, v10);
    v72 = swift_bridgeObjectRetain_n(a3, 2);
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.error.getter(v73);
    if (os_log_type_enabled(v73, v74))
    {
      v87 = a4;
      v75 = (uint8_t *)swift_slowAlloc(12, -1);
      v76 = swift_slowAlloc(32, -1);
      v86 = v10;
      v77 = v76;
      v91 = v76;
      *(_DWORD *)v75 = 136315138;
      swift_bridgeObjectRetain(a3);
      v90 = sub_1000544FC(a2, a3, &v91);
      a4 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Failed to launch QuickLook for test %s", v75, 0xCu);
      swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1, -1);
      swift_slowDealloc(v75, -1, -1);

      (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v86);
    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
    }
    v55 = (char *)String._bridgeToObjectiveC()();
    objc_msgSend(a4, "failedTest:", v55);
    goto LABEL_18;
  }
  v87 = a4;
  v22 = a2;
  v88 = v21;
  v23 = objc_msgSend(a1, "view");
  if (v23)
  {
    v24 = v23;
    v25 = objc_msgSend(v23, "window");

    if (!v25)
    {
      v78 = Logger.Tests.unsafeMutableAddressor(v26);
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v78, v10);
      v79 = swift_bridgeObjectRetain_n(a3, 2);
      v80 = Logger.logObject.getter(v79);
      v81 = static os_log_type_t.error.getter(v80);
      if (os_log_type_enabled(v80, (os_log_type_t)v81))
      {
        v82 = (uint8_t *)swift_slowAlloc(12, -1);
        v83 = swift_slowAlloc(32, -1);
        v86 = v10;
        v84 = v83;
        v91 = v83;
        *(_DWORD *)v82 = 136315138;
        swift_bridgeObjectRetain(a3);
        v90 = sub_1000544FC(v22, a3, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
        swift_bridgeObjectRelease_n(a3, 3);
        _os_log_impl((void *)&_mh_execute_header, v80, (os_log_type_t)v81, "Failed to find QuickLook bounds for test %s", v82, 0xCu);
        swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v84, -1, -1);
        swift_slowDealloc(v82, -1, -1);

        (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v86);
      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      }
      v55 = (char *)String._bridgeToObjectiveC()();
      objc_msgSend(v87, "failedTest:", v55);
      goto LABEL_17;
    }
    v85 = v11;
    v27 = v88;
    v28 = objc_msgSend(v88, "view");
    if (v28)
    {
      v29 = v28;
      objc_msgSend(v28, "bounds");
      v31 = v30;
      v33 = v32;
      v35 = v34;
      v37 = v36;

      v38 = objc_msgSend(v27, "view");
      objc_msgSend(v25, "convertRect:fromView:", v38, v31, v33, v35, v37);
      v40 = v39;
      v42 = v41;
      v44 = v43;
      v46 = v45;

      v47 = (objc_class *)type metadata accessor for DOCPinchZoomTestParameters();
      v48 = (char *)objc_allocWithZone(v47);
      v49 = (uint64_t *)&v48[OBJC_IVAR____TtC5Files26DOCPinchZoomTestParameters_testName];
      *v49 = 0;
      v49[1] = 0;
      v50 = &v48[OBJC_IVAR____TtC5Files26DOCPinchZoomTestParameters_completionHandler];
      *(_QWORD *)v50 = 0;
      *((_QWORD *)v50 + 1) = 0;
      v51 = v49[1];
      v52 = v22;
      *v49 = v22;
      v49[1] = a3;
      swift_bridgeObjectRetain(a3);
      v53 = v48;
      swift_bridgeObjectRelease(v51);
      v54 = &v53[OBJC_IVAR____TtC5Files26DOCPinchZoomTestParameters_bounds];
      *(_QWORD *)v54 = v40;
      *((_QWORD *)v54 + 1) = v42;
      *((_QWORD *)v54 + 2) = v44;
      *((_QWORD *)v54 + 3) = v46;

      v89.receiver = v53;
      v89.super_class = v47;
      v55 = (char *)objc_msgSendSuper2(&v89, "init");
      v56 = swift_allocObject(&unk_1005C3A28, 41, 7);
      v57 = v87;
      *(_QWORD *)(v56 + 16) = v87;
      *(_QWORD *)(v56 + 24) = v52;
      *(_QWORD *)(v56 + 32) = a3;
      *(_BYTE *)(v56 + 40) = a5;
      v58 = &v55[OBJC_IVAR____TtC5Files26DOCPinchZoomTestParameters_completionHandler];
      v59 = *(_QWORD *)&v55[OBJC_IVAR____TtC5Files26DOCPinchZoomTestParameters_completionHandler];
      v60 = *(_QWORD *)&v55[OBJC_IVAR____TtC5Files26DOCPinchZoomTestParameters_completionHandler + 8];
      *(_QWORD *)v58 = sub_10010C324;
      *((_QWORD *)v58 + 1) = v56;
      swift_bridgeObjectRetain(a3);
      v61 = v57;
      v62 = sub_100087534(v59, v60);
      v63 = Logger.Tests.unsafeMutableAddressor(v62);
      v64 = v85;
      (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v13, v63, v10);
      v65 = swift_bridgeObjectRetain_n(a3, 2);
      v66 = Logger.logObject.getter(v65);
      v68 = static os_log_type_t.info.getter(v67);
      if (os_log_type_enabled(v66, v68))
      {
        v86 = v10;
        v69 = (uint8_t *)swift_slowAlloc(12, -1);
        v70 = swift_slowAlloc(32, -1);
        v91 = v70;
        *(_DWORD *)v69 = 136315138;
        swift_bridgeObjectRetain(a3);
        v90 = sub_1000544FC(v52, a3, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
        swift_bridgeObjectRelease_n(a3, 3);
        _os_log_impl((void *)&_mh_execute_header, v66, v68, "Starting test %s", v69, 0xCu);
        swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v70, -1, -1);
        swift_slowDealloc(v69, -1, -1);

        (*(void (**)(char *, uint64_t))(v85 + 8))(v13, v86);
      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
        (*(void (**)(char *, uint64_t))(v64 + 8))(v13, v10);
      }
      objc_msgSend((id)objc_opt_self(RPTTestRunner), "runTestWithParameters:", v55);
LABEL_17:

LABEL_18:
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1000FBA34(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, id a6, uint64_t *a7, id *a8, void (*a9)(void), uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  id v42;
  char *v43;
  void *v44;
  void **v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  id v50;
  uint64_t v51;
  void *v52;
  id v53;
  __CFString *v54;
  id v55;
  id v56;
  uint64_t v57;
  __n128 v58;
  void *v59;
  NSString v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  id v74;
  id *v75;
  void (*v76)(void);
  uint64_t *v77;
  id v78;
  uint64_t v79;
  _OWORD v80[2];
  uint64_t v81;
  _BYTE v82[16];
  uint64_t v83;
  uint64_t v84;

  v77 = a7;
  v78 = a5;
  v79 = a3;
  v17 = a9;
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v70 - v25;
  if (a2)
  {
    v75 = a8;
    v76 = a9;
    v27 = Logger.Tests.unsafeMutableAddressor(v23);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v26, v27, v18);
    swift_bridgeObjectRetain(a4);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a4);
    v28 = swift_errorRetain(a2);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc(22, -1);
      v74 = a6;
      v32 = v31;
      v71 = swift_slowAlloc(64, -1);
      v72 = v21;
      *(_QWORD *)&v80[0] = v71;
      *(_DWORD *)v32 = 136315394;
      v73 = v19;
      swift_bridgeObjectRetain(a4);
      v81 = sub_1000544FC(v79, a4, (uint64_t *)v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, v82);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v32 + 12) = 2080;
      v81 = a2;
      swift_errorRetain(a2);
      v33 = sub_10006922C((uint64_t *)&unk_1006434A0);
      v34 = String.init<A>(describing:)(&v81, v33);
      v35 = v18;
      v37 = v36;
      v81 = sub_1000544FC(v34, v36, (uint64_t *)v80);
      v19 = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, v82);
      v38 = v37;
      v18 = v35;
      swift_bridgeObjectRelease(v38);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed test %s. Error: %s", (uint8_t *)v32, 0x16u);
      v39 = v71;
      swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
      v21 = v72;
      swift_slowDealloc(v39, -1, -1);
      v40 = v32;
      a6 = v74;
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a4, 2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v26, v18);
    v41 = String._bridgeToObjectiveC()();
    objc_msgSend(v78, "failedTest:", v41);

    a8 = v75;
    v17 = v76;
  }
  v42 = objc_msgSend(a6, "effectiveFullBrowser", v24);
  DOCFullDocumentManagerViewController.updateDisplayMode(to:saveAsUserSelection:for:)(v77, 1, a8);

  v17();
  v43 = (char *)objc_msgSend(a6, "effectiveBrowserViewController");
  if (!v43)
    goto LABEL_12;
  v44 = v43;
  v45 = (void **)&v43[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
  swift_beginAccess(&v43[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], &v81, 0, 0);
  v46 = *v45;
  if (!v46
    || (v47 = type metadata accessor for DOCItemCollectionViewController(0),
        (v48 = swift_dynamicCastClass(v46, v47)) == 0))
  {

LABEL_12:
    v64 = Logger.Tests.unsafeMutableAddressor(v43);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v64, v18);
    v65 = swift_bridgeObjectRetain_n(a4, 2);
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.error.getter(v66);
    if (os_log_type_enabled(v66, v67))
    {
      v68 = (uint8_t *)swift_slowAlloc(12, -1);
      v69 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v80[0] = v69;
      *(_DWORD *)v68 = 136315138;
      swift_bridgeObjectRetain(a4);
      v83 = sub_1000544FC(v79, a4, (uint64_t *)v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Failed test %s. mainViewController.effectiveBrowserViewController?.containedItemCollectionViewController was nil", v68, 0xCu);
      swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v68, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    v60 = String._bridgeToObjectiveC()();
    objc_msgSend(v78, "failedTest:", v60);
    goto LABEL_16;
  }
  v49 = (char *)v48;
  v74 = a6;
  v50 = v46;

  v51 = swift_allocObject(&unk_1005C37A8, 32, 7);
  *(_QWORD *)(v51 + 16) = a11;
  *(_QWORD *)(v51 + 24) = a12;
  v52 = (void *)objc_opt_self(NSNotificationCenter);
  v53 = v50;
  v54 = CFSTR("DOCQLPreviewFinishLoadingNotificationName");
  v55 = objc_msgSend(v52, "defaultCenter", swift_retain().n128_f64[0]);
  memset(v80, 0, sizeof(v80));
  v56 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v57 = swift_allocObject(&unk_1005C37D0, 32, 7);
  *(_QWORD *)(v57 + 16) = sub_100066584;
  *(_QWORD *)(v57 + 24) = v51;
  v58 = swift_retain();
  NSNotificationCenter.doc_observeOnce(forName:object:queue:using:)(v54, v80, v56, sub_10010C1B0, v57, v58);

  swift_release(v57);
  sub_10000CB4C((uint64_t)v80, &qword_100642730);

  objc_msgSend(v49, "loadViewIfNeeded", swift_release(v51).n128_f64[0]);
  v59 = *(void **)&v49[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
  if (v59)
  {
    swift_bridgeObjectRetain(a4);
    v60 = v53;
    v61 = v78;
    v62 = v74;
    v63 = v59;
    sub_10010A4D4(v63, a13, a13, v61, v62, v79, a4, v63, (uint8_t *)v49);

    swift_bridgeObjectRelease(a4);
LABEL_16:

    return;
  }
  __break(1u);
}

uint64_t sub_1000FC0F0(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD aBlock[5];
  _QWORD *v54;

  v47 = a4;
  v48 = a5;
  v45 = a2;
  v46 = a3;
  v44 = a1;
  v49 = type metadata accessor for DispatchWorkItemFlags(0);
  v52 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v50 = *(_QWORD *)(v7 - 8);
  v51 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTimeInterval(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for DispatchTime(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v41 - v19;
  v21 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v43 = static OS_dispatch_queue.main.getter(v21);
  static DispatchTime.now()(v43);
  *v13 = 1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchTimeInterval.seconds(_:), v10);
  + infix(_:_:)(v17, v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  v42 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22 = v14;
  v42(v17, v14);
  v23 = (_QWORD *)swift_allocObject(&unk_1005C38C0, 56, 7);
  v25 = v44;
  v24 = v45;
  v23[2] = v44;
  v23[3] = v24;
  v27 = v46;
  v26 = v47;
  v23[4] = v46;
  v23[5] = v26;
  v28 = v48;
  v23[6] = v48;
  aBlock[4] = sub_10010C268;
  v54 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = &unk_1005C38D8;
  v29 = _Block_copy(aBlock);
  v30 = v54;
  v31 = v25;
  swift_bridgeObjectRetain(v27);
  v32 = v26;
  v33 = v28;
  swift_release(v30);
  static DispatchQoS.unspecified.getter(v34);
  aBlock[0] = _swiftEmptyArrayStorage;
  v35 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v36 = sub_10006922C((uint64_t *)&unk_100647540);
  v37 = sub_1000791AC();
  v38 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v36, v37, v49, v35);
  v39 = (void *)v43;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v20, v9, v6, v29);
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v52 + 8))(v6, v38);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v9, v51);
  return ((uint64_t (*)(char *, uint64_t))v42)(v20, v22);
}

void sub_1000FC418(void *a1, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  void **v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  NSString v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[24];
  uint64_t v38;
  uint64_t v39;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (char *)objc_msgSend(a1, "effectiveBrowserViewController", v12);
  if (!v15)
  {
LABEL_7:
    v28 = Logger.Tests.unsafeMutableAddressor(v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v28, v10);
    v29 = swift_bridgeObjectRetain_n(a3, 2);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v36 = a4;
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v39 = v33;
      v35 = v10;
      *(_DWORD *)v32 = 136315138;
      swift_bridgeObjectRetain(a3);
      v38 = sub_1000544FC(a2, a3, &v39);
      a4 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed test %s. Timed out waiting for mainViewController.effectiveBrowserViewController?.containedItemCollectionViewController", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v35);
    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }
    v26 = String._bridgeToObjectiveC()();
    objc_msgSend(a4, "failedTest:", v26);
    goto LABEL_11;
  }
  v16 = v15;
  v17 = (void **)&v15[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
  swift_beginAccess(&v15[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], v37, 0, 0);
  v18 = *v17;
  if (!*v17
    || (v19 = type metadata accessor for DOCItemCollectionViewController(0),
        (v20 = swift_dynamicCastClass(v18, v19)) == 0))
  {

    goto LABEL_7;
  }
  v21 = (char *)v20;
  v22 = v18;

  objc_msgSend(v21, "loadViewIfNeeded");
  v23 = *(void **)&v21[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
  if (v23)
  {
    swift_bridgeObjectRetain(a3);
    v24 = v22;
    v25 = a5;
    v26 = a4;
    v27 = v23;
    sub_10010B214(v27, 7, v21, v25, a2, a3, v26);

    swift_bridgeObjectRelease(a3);
LABEL_11:

    return;
  }
  __break(1u);
}

uint64_t sub_1000FC72C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  id v66;
  __n128 v67;
  uint64_t v68;
  NSString v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  os_log_type_t v82;
  NSObject *v83;
  uint8_t *v84;
  uint64_t v85;
  os_log_t v86;
  __n128 v87;
  uint64_t v88;
  NSObject *v89;
  NSObject *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  NSObject *v107;
  uint8_t *v108;
  NSObject *v109;
  uint8_t *v110;
  __n128 v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  NSObject *v115;
  uint64_t v116;
  _BYTE *v117;
  _BYTE *v118;
  NSObject *v119;
  NSObject *v120;
  char *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  uint64_t result;
  NSString v132;
  NSDictionary v133;
  _QWORD *v134;
  void *v135;
  uint64_t v136;
  void *v137;
  id v138;
  NSObject *v139;
  void *v140;
  _QWORD *v141;
  objc_class *v142;
  void *v143;
  _QWORD *v144;
  void *v145;
  uint64_t v146;
  void *v147;
  id v148;
  NSObject *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  NSObject *v164;
  uint8_t *v165;
  uint64_t v166;
  NSObject *v167;
  _BYTE *v168;
  uint8_t *v169;
  uint64_t v170;
  char *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  NSObject *v187;
  uint8_t *v188;
  uint64_t v189;
  NSObject *v190;
  uint8_t *v191;
  uint64_t v192;
  char *v193;
  __n128 v194;
  uint64_t v195;
  void (**v196)(_QWORD, _QWORD, _QWORD);
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint8_t *v208;
  uint64_t v209;
  uint64_t v210;
  NSObject *v211;
  __n128 v212;
  void *v213;
  uint64_t v214;
  void (**v215)(_QWORD, _QWORD, _QWORD);
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint8_t *v225;
  uint64_t v226;
  uint8_t *v227;
  uint64_t v228;
  __n128 v229;
  uint64_t v230;
  void (**v231)(_QWORD, _QWORD, _QWORD);
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  uint8_t *v243;
  uint64_t v244;
  uint64_t v245;
  NSObject *v246;
  __n128 v247;
  void *v248;
  uint64_t v249;
  void (**v250)(_QWORD, _QWORD, _QWORD);
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  uint8_t *v259;
  uint64_t v260;
  uint8_t *v261;
  uint64_t v262;
  __n128 v263;
  uint64_t v264;
  void (**v265)(_QWORD, _QWORD, _QWORD);
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint8_t *v278;
  uint64_t v279;
  uint8_t *v280;
  uint64_t v281;
  NSObject *v282;
  __n128 v283;
  uint64_t v284;
  void (**v285)(_QWORD, _QWORD, _QWORD);
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _QWORD *v296;
  uint8_t *v297;
  uint64_t v298;
  uint64_t v299;
  NSObject *v300;
  __n128 v301;
  uint64_t v302;
  void (**v303)(_QWORD, _QWORD, _QWORD);
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  _QWORD *v308;
  uint8_t *v309;
  uint64_t v310;
  uint64_t v311;
  NSObject *v312;
  __n128 v313;
  uint64_t v314;
  uint64_t v315;
  void *v316;
  void *v317;
  int v318;
  uint64_t v319;
  void (**v320)(_QWORD, _QWORD, _QWORD);
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  uint8_t *v326;
  uint64_t v327;
  uint64_t v328;
  NSObject *v329;
  __n128 v330;
  uint64_t v331;
  void (**v332)(_QWORD, _QWORD, _QWORD);
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  _QWORD *v337;
  uint8_t *v338;
  uint64_t v339;
  uint64_t v340;
  NSObject *v341;
  __n128 v342;
  uint64_t v343;
  void (**v344)(_QWORD, _QWORD, _QWORD);
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  uint8_t *v350;
  uint64_t v351;
  uint64_t v352;
  NSObject *v353;
  __n128 v354;
  uint64_t v355;
  void (**v356)(_QWORD, _QWORD, _QWORD);
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  _QWORD *v361;
  uint8_t *v362;
  uint64_t v363;
  uint64_t v364;
  NSObject *v365;
  __n128 v366;
  _QWORD *v367;
  void *v368;
  uint64_t v369;
  void *v370;
  void *v371;
  _QWORD *v372;
  id v373;
  NSObject *v374;
  id v375;
  NSObject *v376;
  void *v377;
  uint64_t v378;
  void (**v379)(_QWORD, _QWORD, _QWORD);
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  _QWORD *v390;
  uint8_t *v391;
  uint64_t v392;
  uint64_t v393;
  NSObject *v394;
  __n128 v395;
  _QWORD *v396;
  void *v397;
  uint64_t v398;
  void *v399;
  void *v400;
  _QWORD *v401;
  id v402;
  NSObject *v403;
  id v404;
  NSObject *v405;
  void *v406;
  uint64_t v407;
  void (**v408)(_QWORD, _QWORD, _QWORD);
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  _QWORD *v413;
  uint8_t *v414;
  uint64_t v415;
  uint64_t v416;
  NSObject *v417;
  __n128 v418;
  void *v419;
  uint64_t v420;
  void *v421;
  id v422;
  NSObject *v423;
  id v424;
  uint64_t v425;
  void (**v426)(_QWORD, _QWORD, _QWORD);
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  _QWORD *v432;
  uint8_t *v433;
  uint64_t v434;
  uint8_t *v435;
  uint64_t v436;
  NSObject *v437;
  __n128 v438;
  uint64_t v439;
  void (**v440)(_QWORD, _QWORD, _QWORD);
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  _QWORD *v446;
  uint8_t *v447;
  uint64_t v448;
  uint8_t *v449;
  uint64_t v450;
  NSObject *v451;
  __n128 v452;
  void **v453;
  void *v454;
  uint64_t v455;
  uint64_t v456;
  void *v457;
  int v458;
  uint64_t v459;
  void (**v460)(_QWORD, _QWORD, _QWORD);
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  _QWORD *v465;
  uint8_t *v466;
  uint64_t v467;
  uint64_t v468;
  NSObject *v469;
  __n128 v470;
  uint64_t v471;
  void (**v472)(_QWORD, _QWORD, _QWORD);
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  _QWORD *v477;
  uint8_t *v478;
  uint64_t v479;
  uint64_t v480;
  NSObject *v481;
  __n128 v482;
  __n128 v483;
  void *v484;
  void *v485;
  uint64_t v486;
  void *v487;
  void *v488;
  id v489;
  NSObject *v490;
  uint64_t v491;
  void (**v492)(_QWORD, _QWORD, _QWORD);
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  _QWORD *v497;
  uint8_t *v498;
  uint64_t v499;
  uint64_t v500;
  NSObject *v501;
  __n128 v502;
  uint64_t v503;
  void (**v504)(_QWORD, _QWORD, _QWORD);
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  _QWORD *v509;
  uint8_t *v510;
  uint64_t v511;
  uint64_t v512;
  NSObject *v513;
  __n128 v514;
  void *v515;
  void *v516;
  uint64_t v517;
  void *v518;
  void *v519;
  id v520;
  uint64_t v521;
  void (**v522)(_QWORD, _QWORD, _QWORD);
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  _QWORD *v527;
  uint8_t *v528;
  uint64_t v529;
  uint64_t v530;
  NSObject *v531;
  __n128 v532;
  void *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  void *v537;
  char v538;
  uint64_t v539;
  void (**v540)(_QWORD, _QWORD, _QWORD);
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  _QWORD *v545;
  uint8_t *v546;
  uint64_t v547;
  uint64_t v548;
  NSObject *v549;
  __n128 v550;
  uint64_t v551;
  void (**v552)(_QWORD, _QWORD, _QWORD);
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  _QWORD *v557;
  uint8_t *v558;
  uint64_t v559;
  uint64_t v560;
  NSObject *v561;
  __n128 v562;
  void *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  void *v567;
  char v568;
  uint64_t v569;
  void (**v570)(_QWORD, _QWORD, _QWORD);
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  _QWORD *v575;
  uint8_t *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  __n128 v580;
  uint64_t v581;
  void (**v582)(_QWORD, _QWORD, _QWORD);
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  _QWORD *v588;
  uint8_t *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  __n128 v593;
  uint64_t v594;
  void (**v595)(_QWORD, _QWORD, _QWORD);
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  _QWORD *v607;
  uint8_t *v608;
  uint64_t v609;
  uint64_t v610;
  NSObject *v611;
  uint64_t v612;
  __n128 v613;
  uint64_t v614;
  uint8_t *v615;
  char *v616;
  char *v617;
  char *v618;
  char *v619;
  char *v620;
  char *v621;
  char *v622;
  char *v623;
  char *v624;
  char *v625;
  char *v626;
  char *v627;
  char *v628;
  char *v629;
  char *v630;
  char *v631;
  char *v632;
  char *v633;
  char *v634;
  char *v635;
  char *v636;
  char *v637;
  char *v638;
  char *v639;
  char *v640;
  NSObject *v641;
  NSObject *v642;
  NSObject *v643;
  uint8_t *v644;
  NSObject *v645;
  uint64_t v646;
  char *v647;
  void (*v648)(NSObject *, uint64_t);
  id v649;
  id v650;
  NSObject *v651;
  _QWORD *v652;
  void *v653;
  NSObject *v654;
  char *v655;
  _BYTE *v656;
  uint64_t v657;
  _OWORD v658[2];
  NSObject *v659;
  uint64_t v660;
  objc_super v661;
  __int128 v662;
  __int128 v663;

  v646 = a3;
  v652 = (_QWORD *)a1;
  v653 = a2;
  v651 = 0;
  v3 = type metadata accessor for Logger(0);
  v656 = *(_BYTE **)(v3 - 8);
  v657 = v3;
  __chkstk_darwin(v3);
  v635 = (char *)&v614 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v634 = (char *)&v614 - v6;
  __chkstk_darwin(v7);
  v633 = (char *)&v614 - v8;
  __chkstk_darwin(v9);
  v632 = (char *)&v614 - v10;
  __chkstk_darwin(v11);
  v631 = (char *)&v614 - v12;
  __chkstk_darwin(v13);
  v630 = (char *)&v614 - v14;
  __chkstk_darwin(v15);
  v629 = (char *)&v614 - v16;
  __chkstk_darwin(v17);
  v628 = (char *)&v614 - v18;
  __chkstk_darwin(v19);
  v627 = (char *)&v614 - v20;
  __chkstk_darwin(v21);
  v626 = (char *)&v614 - v22;
  __chkstk_darwin(v23);
  v625 = (char *)&v614 - v24;
  __chkstk_darwin(v25);
  v624 = (char *)&v614 - v26;
  __chkstk_darwin(v27);
  v623 = (char *)&v614 - v28;
  __chkstk_darwin(v29);
  v622 = (char *)&v614 - v30;
  __chkstk_darwin(v31);
  v621 = (char *)&v614 - v32;
  __chkstk_darwin(v33);
  v620 = (char *)&v614 - v34;
  __chkstk_darwin(v35);
  v619 = (char *)&v614 - v36;
  __chkstk_darwin(v37);
  v618 = (char *)&v614 - v38;
  __chkstk_darwin(v39);
  v617 = (char *)&v614 - v40;
  __chkstk_darwin(v41);
  v616 = (char *)&v614 - v42;
  __chkstk_darwin(v43);
  v636 = (char *)&v614 - v44;
  __chkstk_darwin(v45);
  v637 = (char *)&v614 - v46;
  __chkstk_darwin(v47);
  v638 = (char *)&v614 - v48;
  __chkstk_darwin(v49);
  v639 = (char *)&v614 - v50;
  __chkstk_darwin(v51);
  v640 = (char *)&v614 - v52;
  __chkstk_darwin(v53);
  v641 = ((char *)&v614 - v54);
  __chkstk_darwin(v55);
  v645 = ((char *)&v614 - v56);
  __chkstk_darwin(v57);
  v655 = (char *)&v614 - v58;
  __chkstk_darwin(v59);
  v61 = (char *)&v614 - v60;
  sub_10004F2F0(0, &qword_1006434F0, NSUserDefaults_ptr);
  v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(DOCDefaultsSuiteName);
  v64 = sub_1003C675C(v62, v63);
  v650 = v64;
  if (!v64)
  {
    v662 = 0u;
    v663 = 0u;
LABEL_11:
    sub_10000CB4C((uint64_t)&v662, &qword_100642730);
    goto LABEL_12;
  }
  v65 = objc_msgSend(v64, "objectForKey:", DOCTestUserDefaultsKeyProviderForPPT);
  if (v65)
  {
    v66 = v65;
    _bridgeAnyObjectToAny(_:)(v658, v65);
    swift_unknownObjectRelease(v66);
  }
  else
  {
    memset(v658, 0, sizeof(v658));
  }
  sub_100070EDC((uint64_t)v658, (uint64_t)&v662, &qword_100642730);
  if (!*((_QWORD *)&v663 + 1))
    goto LABEL_11;
  if ((swift_dynamicCast(v658, &v662, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_12:
    v88 = static DOCDocumentSourceIdentifier.iCloudCurrent.getter(v67);
    v70 = (id)v88;
    goto LABEL_13;
  }
  v68 = *((_QWORD *)&v658[0] + 1);
  v69 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v68);
  v70 = v69;
  v71 = Logger.Tests.unsafeMutableAddressor(v70);
  (*((void (**)(char *, uint64_t, uint64_t))v656 + 2))(v61, v71, v657);
  v72 = swift_allocObject(&unk_1005C7420, 24, 7);
  *(_QWORD *)(v72 + 16) = v70;
  v73 = Logger.logObject.getter(v72);
  LODWORD(v68) = static os_log_type_t.debug.getter(v73);
  v74 = swift_allocObject(&unk_1005C7448, 17, 7);
  *(_BYTE *)(v74 + 16) = 32;
  v75 = swift_allocObject(&unk_1005C7470, 17, 7);
  *(_BYTE *)(v75 + 16) = 8;
  v76 = swift_allocObject(&unk_1005C7498, 32, 7);
  *(_QWORD *)(v76 + 16) = sub_10010DECC;
  *(_QWORD *)(v76 + 24) = v72;
  v77 = swift_allocObject(&unk_1005C74C0, 32, 7);
  *(_QWORD *)(v77 + 16) = sub_10010DB64;
  *(_QWORD *)(v77 + 24) = v76;
  v78 = sub_10006922C(&qword_1006434F8);
  v79 = swift_allocObject(v78, 80, 7);
  v80 = sub_1003FD974(v79, 3);
  *v81 = sub_10010DB74;
  v81[1] = v74;
  v81[2] = sub_10010DB74;
  v81[3] = v75;
  v81[4] = sub_10010DB68;
  v81[5] = v77;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease(v80);
  LODWORD(v654) = v68;
  v82 = v68;
  v83 = v73;
  if (os_log_type_enabled(v73, v82))
  {
    v84 = (uint8_t *)sub_100140610(12);
    v85 = swift_slowAlloc(32, -1);
    v659 = v85;
    v660 = 0;
    *(_WORD *)v84 = 258;
    *(_QWORD *)&v658[0] = v84 + 2;
    *(_QWORD *)&v662 = sub_10010DB74;
    *((_QWORD *)&v662 + 1) = v74;
    v86 = v651;
    sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
    if (v86)
      goto LABEL_343;
    swift_release(v74);
    *(_QWORD *)&v662 = sub_10010DB74;
    *((_QWORD *)&v662 + 1) = v75;
    sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
    swift_release(v75);
    *(_QWORD *)&v662 = sub_10010DB68;
    *((_QWORD *)&v662 + 1) = v77;
    sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
    v651 = 0;
    swift_release(v77);
    _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v654, "forcing provider to: %s", v84, 0xCu);
    swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v85, -1, -1);
    sub_100140618((uint64_t)v84);

  }
  else
  {

    swift_release(v77);
    swift_release(v75);
    v87 = swift_release(v74);
  }
  v88 = (*((uint64_t (**)(char *, uint64_t, __n128))v656 + 1))(v61, v657, v87);
LABEL_13:
  v89 = Logger.Tests.unsafeMutableAddressor(v88);
  v90 = *((_QWORD *)v656 + 2);
  v642 = v89;
  v643 = v90;
  ((void (*)(char *))v90)(v655);
  v91 = swift_allocObject(&unk_1005C46D0, 32, 7);
  v92 = v653;
  *(_QWORD *)(v91 + 16) = v652;
  *(_QWORD *)(v91 + 24) = v92;
  v93 = swift_allocObject(&unk_1005C46F8, 24, 7);
  *(_QWORD *)(v93 + 16) = v70;
  swift_bridgeObjectRetain(v92);
  v649 = v70;
  v654 = Logger.logObject.getter(v649);
  v94 = static os_log_type_t.debug.getter(v654);
  v95 = swift_allocObject(&unk_1005C4720, 17, 7);
  *(_BYTE *)(v95 + 16) = 32;
  v96 = swift_allocObject(&unk_1005C4748, 17, 7);
  *(_BYTE *)(v96 + 16) = 8;
  v97 = swift_allocObject(&unk_1005C4770, 32, 7);
  *(_QWORD *)(v97 + 16) = sub_10010CDA0;
  *(_QWORD *)(v97 + 24) = v91;
  v98 = swift_allocObject(&unk_1005C4798, 32, 7);
  *(_QWORD *)(v98 + 16) = sub_10006657C;
  *(_QWORD *)(v98 + 24) = v97;
  v99 = swift_allocObject(&unk_1005C47C0, 17, 7);
  *(_BYTE *)(v99 + 16) = 32;
  v100 = swift_allocObject(&unk_1005C47E8, 17, 7);
  *(_BYTE *)(v100 + 16) = 8;
  v101 = swift_allocObject(&unk_1005C4810, 32, 7);
  *(_QWORD *)(v101 + 16) = sub_10010CDD8;
  *(_QWORD *)(v101 + 24) = v93;
  v102 = swift_allocObject(&unk_1005C4838, 32, 7);
  *(_QWORD *)(v102 + 16) = sub_10010DB64;
  *(_QWORD *)(v102 + 24) = v101;
  v644 = (uint8_t *)sub_10006922C(&qword_1006434F8);
  v103 = swift_allocObject(v644, 128, 7);
  v104 = sub_1003FD974(v103, 6);
  *v105 = sub_10010CDF0;
  v105[1] = v95;
  v105[2] = sub_10010DB74;
  v105[3] = v96;
  v105[4] = sub_10010CE08;
  v105[5] = v98;
  v105[6] = sub_10010DB74;
  v105[7] = v99;
  v105[8] = sub_10010DB74;
  v105[9] = v100;
  v105[10] = sub_10010DB68;
  v105[11] = v102;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v106 = v104;
  v107 = v654;
  swift_bridgeObjectRelease(v106);
  LODWORD(v648) = v94;
  if (os_log_type_enabled(v107, (os_log_type_t)v94))
  {
    v108 = (uint8_t *)sub_100140610(22);
    v94 = swift_slowAlloc(64, -1);
    v659 = v94;
    v660 = 0;
    v615 = v108;
    *(_WORD *)v108 = 514;
    *(_QWORD *)&v658[0] = v108 + 2;
    *(_QWORD *)&v662 = sub_10010CDF0;
    *((_QWORD *)&v662 + 1) = v95;
    v86 = v651;
    sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
    if (v86)
      goto LABEL_343;
    swift_release(v95);
    *(_QWORD *)&v662 = sub_10010DB74;
    *((_QWORD *)&v662 + 1) = v96;
    sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
    swift_release(v96);
    *(_QWORD *)&v662 = sub_10010CE08;
    *((_QWORD *)&v662 + 1) = v98;
    sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
    swift_release(v98);
    *(_QWORD *)&v662 = sub_10010DB74;
    *((_QWORD *)&v662 + 1) = v99;
    sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
    swift_release(v99);
    *(_QWORD *)&v662 = sub_10010DB74;
    *((_QWORD *)&v662 + 1) = v100;
    sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
    swift_release(v100);
    *(_QWORD *)&v662 = sub_10010DB68;
    *((_QWORD *)&v662 + 1) = v102;
    sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
    v651 = 0;
    swift_release(v102);
    v109 = v654;
    v110 = v615;
    _os_log_impl((void *)&_mh_execute_header, v654, (os_log_type_t)v648, "runTest: %s with provider: %s", v615, 0x16u);
    swift_arrayDestroy(v94, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v94, -1, -1);
    sub_100140618((uint64_t)v110);

  }
  else
  {

    swift_release(v102);
    swift_release(v100);
    swift_release(v99);
    swift_release(v98);
    swift_release(v96);
    v111 = swift_release(v95);
  }
  v112 = *((_QWORD *)v656 + 1);
  ((void (*)(char *, uint64_t, __n128))v112)(v655, v657, v111);
  v113 = objc_msgSend((id)objc_opt_self(DOCUISession), "keyWindow");
  if (!v113)
    goto LABEL_36;
  v114 = v113;
  v115 = objc_msgSend(v113, "rootViewController");
  if (!v115)
  {
LABEL_32:

LABEL_37:
    v130 = 0;
    goto LABEL_38;
  }
  v86 = v115;
  v116 = type metadata accessor for DRIMainViewController(0);
  v117 = (_BYTE *)swift_dynamicCastClass(v86, v116);
  if (!v117)
  {

    goto LABEL_32;
  }
  v118 = v117;
  v119 = objc_msgSend(v117, "tabBarController");
  if (!v119)
  {

LABEL_36:
    goto LABEL_37;
  }
  v120 = v119;
  v121 = &v647[OBJC_IVAR____TtC5Files14DOCApplication_currentTestName];
  v122 = *(_QWORD *)&v647[OBJC_IVAR____TtC5Files14DOCApplication_currentTestName + 8];
  v124 = (uint64_t)v652;
  v123 = v653;
  *(_QWORD *)v121 = v652;
  *((_QWORD *)v121 + 1) = v123;
  swift_bridgeObjectRetain(v123);
  v125 = -[NSObject enclosingTabSwitcherStyle](v120, "enclosingTabSwitcherStyle", swift_bridgeObjectRelease(v122).n128_f64[0]);
  v126 = DOCTabSwitcherStyle.showsTabs.getter(v125);
  if (!v123)
  {
    v132 = 0;
LABEL_40:
    if (v646)
      v133.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    else
      v133.super.isa = 0;
    v142 = (objc_class *)type metadata accessor for DOCApplication();
    v661.receiver = v647;
    v661.super_class = v142;
    v130 = (uint64_t)objc_msgSendSuper2(&v661, "runTest:options:", v132, v133.super.isa);

    goto LABEL_38;
  }
  v127 = v126;
  v128 = 0x6F54686374697753;
  if ((v124 != 0x6F54686374697753 || v653 != (void *)0xEE006573776F7242)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0x6F54686374697753, 0xEE006573776F7242, v652, v653, 0) & 1) == 0)
  {
    if (v652 == (_QWORD *)0x6F54686374697753 && v653 == (void *)0xEF73746E65636552
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6F54686374697753, 0xEF73746E65636552, v652, v653, 0) & 1) != 0)
    {
      if ((v127 & 1) != 0)
      {
        sub_1000F5FBC(0, (uint64_t)v652, (unint64_t)v653, v118, v120);

        goto LABEL_28;
      }
      if (v646)
      {
        v143 = (void *)DOCDocumentSourceIdentifierRecentDocuments;
        v144 = (_QWORD *)swift_allocObject(&unk_1005C73D0, 48, 7);
        v145 = v647;
        v146 = (uint64_t)v652;
        v144[2] = v647;
        v144[3] = v146;
        v147 = v653;
        v144[4] = v653;
        v144[5] = v118;
        swift_bridgeObjectRetain(v147);
        v148 = v145;
        v149 = v86;
        sub_1000F10F4(v143, v118, (uint64_t)sub_10010DED4, (uint64_t)v144);

        v141 = v144;
        goto LABEL_44;
      }
      __break(1u);
      goto LABEL_142;
    }
    v648 = (void (*)(NSObject *, uint64_t))v112;
    v112 = 0xD000000000000014;
    v96 = 0xD000000000000010;
    v654 = v120;
    v655 = (char *)v114;
    v656 = v118;
    if (v652 == (_QWORD *)0xD000000000000010 && v653 == (void *)0x800000010050F2F0
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010050F2F0, v652, v653, 0) & 1) != 0)
    {
      ((void (*)(NSObject *, NSObject *, uint64_t))v643)(v645, v642, v657);
      v150 = swift_allocObject(&unk_1005C7240, 24, 7);
      *(_QWORD *)(v150 + 16) = v118;
      v151 = swift_allocObject(&unk_1005C7268, 24, 7);
      *(_QWORD *)(v151 + 16) = v118;
      v641 = v86;
      v643 = Logger.logObject.getter(v641);
      LODWORD(v642) = static os_log_type_t.debug.getter(v643);
      v152 = swift_allocObject(&unk_1005C7290, 17, 7);
      *(_BYTE *)(v152 + 16) = 64;
      v153 = swift_allocObject(&unk_1005C72B8, 17, 7);
      *(_BYTE *)(v153 + 16) = 8;
      v154 = swift_allocObject(&unk_1005C72E0, 32, 7);
      *(_QWORD *)(v154 + 16) = sub_10010DF40;
      *(_QWORD *)(v154 + 24) = v150;
      v155 = swift_allocObject(&unk_1005C7308, 32, 7);
      *(_QWORD *)(v155 + 16) = sub_10010DB64;
      *(_QWORD *)(v155 + 24) = v154;
      v156 = swift_allocObject(&unk_1005C7330, 17, 7);
      *(_BYTE *)(v156 + 16) = 32;
      v157 = swift_allocObject(&unk_1005C7358, 17, 7);
      *(_BYTE *)(v157 + 16) = 8;
      v158 = swift_allocObject(&unk_1005C7380, 32, 7);
      *(_QWORD *)(v158 + 16) = sub_10010DF44;
      *(_QWORD *)(v158 + 24) = v151;
      v159 = swift_allocObject(&unk_1005C73A8, 32, 7);
      *(_QWORD *)(v159 + 16) = sub_10010DB64;
      *(_QWORD *)(v159 + 24) = v158;
      v160 = swift_allocObject(v644, 128, 7);
      v161 = sub_1003FD974(v160, 6);
      v86 = (os_log_t)sub_10010DB74;
      *v162 = sub_10010DB74;
      v162[1] = v152;
      v162[2] = sub_10010DB74;
      v162[3] = v153;
      v162[4] = sub_10010DB6C;
      v162[5] = v155;
      v162[6] = sub_10010DB74;
      v162[7] = v156;
      v162[8] = sub_10010DB74;
      v162[9] = v157;
      v162[10] = sub_10010DB68;
      v162[11] = v159;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v163 = v161;
      v164 = v643;
      swift_bridgeObjectRelease(v163);
      if (os_log_type_enabled(v164, (os_log_type_t)v642))
      {
        v165 = (uint8_t *)sub_100140610(22);
        v166 = swift_slowAlloc(8, -1);
        v659 = swift_slowAlloc(32, -1);
        v660 = v166;
        v640 = (char *)v659;
        v644 = v165;
        *(_WORD *)v165 = 514;
        *(_QWORD *)&v658[0] = v165 + 2;
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v152;
        v86 = v651;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        if (v86)
          goto LABEL_343;
        swift_release(v152);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v153;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v153);
        *(_QWORD *)&v662 = sub_10010DB6C;
        *((_QWORD *)&v662 + 1) = v155;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v155);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v156;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v156);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v157;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v157);
        *(_QWORD *)&v662 = sub_10010DB68;
        *((_QWORD *)&v662 + 1) = v159;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        v167 = v654;
        v168 = v656;
        swift_release(v159);
        v86 = v643;
        v169 = v644;
        _os_log_impl((void *)&_mh_execute_header, v643, (os_log_type_t)v642, "ScrollAllRecents %@ %s", v644, 0x16u);
        v170 = sub_10006922C(&qword_100643AB0);
        swift_arrayDestroy(v166, 1, v170);
        swift_slowDealloc(v166, -1, -1);
        v171 = v640;
        swift_arrayDestroy(v640, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v171, -1, -1);
        sub_100140618((uint64_t)v169);

        v648(v645, v657);
      }
      else
      {

        swift_release(v159);
        swift_release(v157);
        swift_release(v156);
        swift_release(v155);
        swift_release(v153);
        v172 = swift_release(v152);
        ((void (*)(NSObject *, uint64_t, __n128))v648)(v645, v657, v172);
        v167 = v654;
        v168 = v656;
      }
      v127 = (uint64_t)v655;
      if (v646)
      {
        sub_1001084A0((uint64_t)v652, (uint64_t)v653, v646, v168, 0);

        v130 = 1;
        goto LABEL_38;
      }
      __break(1u);
      goto LABEL_149;
    }
    if (v652 == (_QWORD *)0xD000000000000014 && v653 == (void *)0x800000010050F2D0
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000010050F2D0, v652, v653, 0) & 1) != 0)
    {
      ((void (*)(NSObject *, NSObject *, uint64_t))v643)(v641, v642, v657);
      v173 = swift_allocObject(&unk_1005C70B0, 24, 7);
      *(_QWORD *)(v173 + 16) = v118;
      v174 = swift_allocObject(&unk_1005C70D8, 24, 7);
      *(_QWORD *)(v174 + 16) = v118;
      v642 = v86;
      v645 = Logger.logObject.getter(v642);
      LODWORD(v643) = static os_log_type_t.debug.getter(v645);
      v175 = swift_allocObject(&unk_1005C7100, 17, 7);
      *(_BYTE *)(v175 + 16) = 64;
      v176 = swift_allocObject(&unk_1005C7128, 17, 7);
      *(_BYTE *)(v176 + 16) = 8;
      v177 = swift_allocObject(&unk_1005C7150, 32, 7);
      *(_QWORD *)(v177 + 16) = sub_10010DF40;
      *(_QWORD *)(v177 + 24) = v173;
      v178 = swift_allocObject(&unk_1005C7178, 32, 7);
      *(_QWORD *)(v178 + 16) = sub_10010DB64;
      *(_QWORD *)(v178 + 24) = v177;
      v179 = swift_allocObject(&unk_1005C71A0, 17, 7);
      *(_BYTE *)(v179 + 16) = 32;
      v180 = swift_allocObject(&unk_1005C71C8, 17, 7);
      *(_BYTE *)(v180 + 16) = 8;
      v181 = swift_allocObject(&unk_1005C71F0, 32, 7);
      *(_QWORD *)(v181 + 16) = sub_10010DF44;
      *(_QWORD *)(v181 + 24) = v174;
      v182 = swift_allocObject(&unk_1005C7218, 32, 7);
      *(_QWORD *)(v182 + 16) = sub_10010DB64;
      *(_QWORD *)(v182 + 24) = v181;
      v183 = swift_allocObject(v644, 128, 7);
      v184 = sub_1003FD974(v183, 6);
      v86 = (os_log_t)sub_10010DB74;
      *v185 = sub_10010DB74;
      v185[1] = v175;
      v185[2] = sub_10010DB74;
      v185[3] = v176;
      v185[4] = sub_10010DB6C;
      v185[5] = v178;
      v185[6] = sub_10010DB74;
      v185[7] = v179;
      v185[8] = sub_10010DB74;
      v185[9] = v180;
      v185[10] = sub_10010DB68;
      v185[11] = v182;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v186 = v184;
      v187 = v645;
      swift_bridgeObjectRelease(v186);
      if (os_log_type_enabled(v187, (os_log_type_t)v643))
      {
        v188 = (uint8_t *)sub_100140610(22);
        v189 = swift_slowAlloc(8, -1);
        v659 = swift_slowAlloc(32, -1);
        v660 = v189;
        v640 = (char *)v659;
        v644 = v188;
        *(_WORD *)v188 = 514;
        *(_QWORD *)&v658[0] = v188 + 2;
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v175;
        v86 = v651;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        if (v86)
          goto LABEL_343;
        swift_release(v175);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v176;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v176);
        *(_QWORD *)&v662 = sub_10010DB6C;
        *((_QWORD *)&v662 + 1) = v178;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v178);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v179;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        v190 = v654;
        swift_release(v179);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v180;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v180);
        *(_QWORD *)&v662 = sub_10010DB68;
        *((_QWORD *)&v662 + 1) = v182;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v182);
        v86 = v645;
        v191 = v644;
        _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "ScrollAllRecentsList %@ %s", v644, 0x16u);
        v192 = sub_10006922C(&qword_100643AB0);
        swift_arrayDestroy(v189, 1, v192);
        swift_slowDealloc(v189, -1, -1);
        v193 = v640;
        swift_arrayDestroy(v640, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v193, -1, -1);
        sub_100140618((uint64_t)v191);

        v648(v641, v657);
      }
      else
      {

        swift_release(v182);
        swift_release(v180);
        swift_release(v179);
        swift_release(v178);
        swift_release(v176);
        v194 = swift_release(v175);
        ((void (*)(NSObject *, uint64_t, __n128))v648)(v641, v657, v194);
        v190 = v654;
      }
      v127 = (uint64_t)v655;
      if (v646)
      {
        v130 = 1;
        sub_1001084A0((uint64_t)v652, (uint64_t)v653, v646, v656, 1);

        goto LABEL_38;
      }
      __break(1u);
      goto LABEL_160;
    }
    if (v652 == (_QWORD *)0x65526C6C6F726353 && v653 == (void *)0xED000073746E6563
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x65526C6C6F726353, 0xED000073746E6563, v652, v653, 0) & 1) != 0)
    {
      if (v646)
      {
        sub_1000F4C98((uint64_t)v652, (uint64_t)v653, v646, v118);
        goto LABEL_27;
      }
      __break(1u);
      goto LABEL_170;
    }
    if (v652 == (_QWORD *)0xD000000000000014 && v653 == (void *)0x800000010050F2B0
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000010050F2B0, v652, v653, 0) & 1) != 0)
    {
      if (v646)
      {
        sub_1000F4C98((uint64_t)v652, (uint64_t)v653, v646, v656);

LABEL_82:
        goto LABEL_29;
      }
      __break(1u);
      goto LABEL_180;
    }
    if (v652 == (_QWORD *)0x72426C6C6F726353 && v653 == (void *)0xEC0000006573776FLL
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x72426C6C6F726353, 0xEC0000006573776FLL, v652, v653, 0) & 1) != 0)
    {
      ((void (*)(char *, NSObject *, uint64_t))v643)(v640, v642, v657);
      v195 = swift_allocObject(&unk_1005C6F20, 24, 7);
      v196 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
      *(_QWORD *)(v195 + 16) = v656;
      v197 = swift_allocObject(&unk_1005C6F48, 24, 7);
      *(_QWORD *)(v197 + 16) = v196;
      v642 = v86;
      v645 = Logger.logObject.getter(v642);
      LODWORD(v643) = static os_log_type_t.debug.getter(v645);
      v198 = swift_allocObject(&unk_1005C6F70, 17, 7);
      *(_BYTE *)(v198 + 16) = 64;
      v199 = swift_allocObject(&unk_1005C6F98, 17, 7);
      *(_BYTE *)(v199 + 16) = 8;
      v200 = swift_allocObject(&unk_1005C6FC0, 32, 7);
      *(_QWORD *)(v200 + 16) = sub_10010DF40;
      *(_QWORD *)(v200 + 24) = v195;
      v201 = swift_allocObject(&unk_1005C6FE8, 32, 7);
      *(_QWORD *)(v201 + 16) = sub_10010DB64;
      *(_QWORD *)(v201 + 24) = v200;
      v202 = swift_allocObject(&unk_1005C7010, 17, 7);
      *(_BYTE *)(v202 + 16) = 32;
      v203 = swift_allocObject(&unk_1005C7038, 17, 7);
      *(_BYTE *)(v203 + 16) = 8;
      v204 = swift_allocObject(&unk_1005C7060, 32, 7);
      *(_QWORD *)(v204 + 16) = sub_10010DF44;
      *(_QWORD *)(v204 + 24) = v197;
      v205 = swift_allocObject(&unk_1005C7088, 32, 7);
      *(_QWORD *)(v205 + 16) = sub_10010DB64;
      *(_QWORD *)(v205 + 24) = v204;
      v206 = swift_allocObject(v644, 128, 7);
      v127 = sub_1003FD974(v206, 6);
      v86 = (os_log_t)sub_10010DB74;
      *v207 = sub_10010DB74;
      v207[1] = v198;
      v207[2] = sub_10010DB74;
      v207[3] = v199;
      v207[4] = sub_10010DB6C;
      v207[5] = v201;
      v207[6] = sub_10010DB74;
      v207[7] = v202;
      v207[8] = sub_10010DB74;
      v207[9] = v203;
      v207[10] = sub_10010DB68;
      v207[11] = v205;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease(v127);
      if (os_log_type_enabled(v645, (os_log_type_t)v643))
      {
        v208 = (uint8_t *)sub_100140610(22);
        v209 = swift_slowAlloc(8, -1);
        v659 = swift_slowAlloc(32, -1);
        v660 = v209;
        v641 = v659;
        v644 = v208;
        *(_WORD *)v208 = 514;
        *(_QWORD *)&v658[0] = v208 + 2;
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v198;
        v86 = v651;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        if (v86)
          goto LABEL_343;
        swift_release(v198);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v199;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v199);
        *(_QWORD *)&v662 = sub_10010DB6C;
        *((_QWORD *)&v662 + 1) = v201;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v201);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v202;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v202);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v203;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v203);
        *(_QWORD *)&v662 = sub_10010DB68;
        *((_QWORD *)&v662 + 1) = v205;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v205);
        v86 = v645;
        v127 = (uint64_t)v644;
        _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "ScrollBrowse %@ %s", v644, 0x16u);
        v210 = sub_10006922C(&qword_100643AB0);
        swift_arrayDestroy(v209, 1, v210);
        swift_slowDealloc(v209, -1, -1);
        v211 = v641;
        swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v211, -1, -1);
        sub_100140618(v127);

      }
      else
      {

        swift_release(v205);
        swift_release(v203);
        swift_release(v202);
        swift_release(v201);
        swift_release(v199);
        v212 = swift_release(v198);
      }
      ((void (*)(char *, uint64_t, __n128))v648)(v640, v657, v212);
      if (!v646)
      {
        __break(1u);
        goto LABEL_190;
      }
LABEL_91:
      v213 = v649;
      sub_1000ED818((uint64_t)v652, (uint64_t)v653, v646, v649, v656, 0);
LABEL_92:

      v129 = v655;
      goto LABEL_30;
    }
    v128 = 0xD000000000000013;
    if (v652 == (_QWORD *)0xD000000000000013 && v653 == (void *)0x800000010050F290
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000010050F290, v652, v653, 0) & 1) != 0)
    {
      ((void (*)(char *, NSObject *, uint64_t))v643)(v639, v642, v657);
      v214 = swift_allocObject(&unk_1005C6D90, 24, 7);
      v215 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
      *(_QWORD *)(v214 + 16) = v656;
      v216 = swift_allocObject(&unk_1005C6DB8, 24, 7);
      *(_QWORD *)(v216 + 16) = v215;
      v642 = v86;
      v645 = Logger.logObject.getter(v642);
      LODWORD(v643) = static os_log_type_t.debug.getter(v645);
      v217 = swift_allocObject(&unk_1005C6DE0, 17, 7);
      *(_BYTE *)(v217 + 16) = 64;
      v218 = swift_allocObject(&unk_1005C6E08, 17, 7);
      *(_BYTE *)(v218 + 16) = 8;
      v219 = swift_allocObject(&unk_1005C6E30, 32, 7);
      *(_QWORD *)(v219 + 16) = sub_10010DF40;
      *(_QWORD *)(v219 + 24) = v214;
      v96 = swift_allocObject(&unk_1005C6E58, 32, 7);
      *(_QWORD *)(v96 + 16) = sub_10010DB64;
      *(_QWORD *)(v96 + 24) = v219;
      v220 = swift_allocObject(&unk_1005C6E80, 17, 7);
      *(_BYTE *)(v220 + 16) = 32;
      v221 = swift_allocObject(&unk_1005C6EA8, 17, 7);
      *(_BYTE *)(v221 + 16) = 8;
      v128 = swift_allocObject(&unk_1005C6ED0, 32, 7);
      *(_QWORD *)(v128 + 16) = sub_10010DF44;
      *(_QWORD *)(v128 + 24) = v216;
      v112 = swift_allocObject(&unk_1005C6EF8, 32, 7);
      *(_QWORD *)(v112 + 16) = sub_10010DB64;
      *(_QWORD *)(v112 + 24) = v128;
      v222 = swift_allocObject(v644, 128, 7);
      v223 = sub_1003FD974(v222, 6);
      v86 = (os_log_t)sub_10010DB74;
      *v224 = sub_10010DB74;
      v224[1] = v217;
      v224[2] = sub_10010DB74;
      v224[3] = v218;
      v224[4] = sub_10010DB6C;
      v224[5] = v96;
      v224[6] = sub_10010DB74;
      v224[7] = v220;
      v224[8] = sub_10010DB74;
      v224[9] = v221;
      v224[10] = sub_10010DB68;
      v224[11] = v112;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease(v223);
      if (os_log_type_enabled(v645, (os_log_type_t)v643))
      {
        v225 = (uint8_t *)sub_100140610(22);
        v226 = swift_slowAlloc(8, -1);
        v659 = swift_slowAlloc(32, -1);
        v660 = v226;
        v641 = v659;
        v644 = v225;
        *(_WORD *)v225 = 514;
        *(_QWORD *)&v658[0] = v225 + 2;
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v217;
        v86 = v651;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        if (v86)
          goto LABEL_343;
        swift_release(v217);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v218;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v218);
        *(_QWORD *)&v662 = sub_10010DB6C;
        *((_QWORD *)&v662 + 1) = v96;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v96);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v220;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v220);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v221;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v221);
        *(_QWORD *)&v662 = sub_10010DB68;
        *((_QWORD *)&v662 + 1) = v112;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v112);
        v86 = v645;
        v227 = v644;
        _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "ScrollBrowseNatural %@ %s", v644, 0x16u);
        v228 = sub_10006922C(&qword_100643AB0);
        swift_arrayDestroy(v226, 1, v228);
        swift_slowDealloc(v226, -1, -1);
        v128 = (uint64_t)v641;
        swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v128, -1, -1);
        sub_100140618((uint64_t)v227);

      }
      else
      {

        swift_release(v112);
        swift_release(v221);
        swift_release(v220);
        swift_release(v96);
        swift_release(v218);
        v229 = swift_release(v217);
      }
      ((void (*)(char *, uint64_t, __n128))v648)(v639, v657, v229);
      if (v646)
        goto LABEL_91;
      __break(1u);
    }
    if (v652 == (_QWORD *)v96 && v653 == (void *)0x800000010050F270
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v96, 0x800000010050F270, v652, v653, 0) & 1) != 0)
    {
      ((void (*)(char *, NSObject *, uint64_t))v643)(v638, v642, v657);
      v230 = swift_allocObject(&unk_1005C6C00, 24, 7);
      v231 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
      *(_QWORD *)(v230 + 16) = v656;
      v232 = swift_allocObject(&unk_1005C6C28, 24, 7);
      *(_QWORD *)(v232 + 16) = v231;
      v642 = v86;
      v645 = Logger.logObject.getter(v642);
      LODWORD(v643) = static os_log_type_t.debug.getter(v645);
      v233 = swift_allocObject(&unk_1005C6C50, 17, 7);
      *(_BYTE *)(v233 + 16) = 64;
      v234 = swift_allocObject(&unk_1005C6C78, 17, 7);
      *(_BYTE *)(v234 + 16) = 8;
      v235 = swift_allocObject(&unk_1005C6CA0, 32, 7);
      *(_QWORD *)(v235 + 16) = sub_1000EB2FC;
      *(_QWORD *)(v235 + 24) = v230;
      v236 = swift_allocObject(&unk_1005C6CC8, 32, 7);
      *(_QWORD *)(v236 + 16) = sub_10010DB64;
      *(_QWORD *)(v236 + 24) = v235;
      v237 = swift_allocObject(&unk_1005C6CF0, 17, 7);
      *(_BYTE *)(v237 + 16) = 32;
      v238 = swift_allocObject(&unk_1005C6D18, 17, 7);
      *(_BYTE *)(v238 + 16) = 8;
      v239 = swift_allocObject(&unk_1005C6D40, 32, 7);
      *(_QWORD *)(v239 + 16) = sub_10010D470;
      *(_QWORD *)(v239 + 24) = v232;
      v240 = swift_allocObject(&unk_1005C6D68, 32, 7);
      *(_QWORD *)(v240 + 16) = sub_10010DB64;
      *(_QWORD *)(v240 + 24) = v239;
      v241 = swift_allocObject(v644, 128, 7);
      v127 = sub_1003FD974(v241, 6);
      v86 = (os_log_t)sub_10010DB74;
      *v242 = sub_10010DB74;
      v242[1] = v233;
      v242[2] = sub_10010DB74;
      v242[3] = v234;
      v242[4] = sub_10010DB6C;
      v242[5] = v236;
      v242[6] = sub_10010DB74;
      v242[7] = v237;
      v242[8] = sub_10010DB74;
      v242[9] = v238;
      v242[10] = sub_10010DB68;
      v242[11] = v240;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease(v127);
      if (os_log_type_enabled(v645, (os_log_type_t)v643))
      {
        v243 = (uint8_t *)sub_100140610(22);
        v244 = swift_slowAlloc(8, -1);
        v659 = swift_slowAlloc(32, -1);
        v660 = v244;
        v641 = v659;
        v644 = v243;
        *(_WORD *)v243 = 514;
        *(_QWORD *)&v658[0] = v243 + 2;
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v233;
        v86 = v651;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        if (v86)
          goto LABEL_343;
        swift_release(v233);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v234;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v234);
        *(_QWORD *)&v662 = sub_10010DB6C;
        *((_QWORD *)&v662 + 1) = v236;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v236);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v237;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v237);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v238;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v238);
        *(_QWORD *)&v662 = sub_10010DB68;
        *((_QWORD *)&v662 + 1) = v240;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v240);
        v86 = v645;
        v127 = (uint64_t)v644;
        _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "ScrollBrowseList %@ %s", v644, 0x16u);
        v245 = sub_10006922C(&qword_100643AB0);
        swift_arrayDestroy(v244, 1, v245);
        swift_slowDealloc(v244, -1, -1);
        v246 = v641;
        swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v246, -1, -1);
        sub_100140618(v127);

      }
      else
      {

        swift_release(v240);
        swift_release(v238);
        swift_release(v237);
        swift_release(v236);
        swift_release(v234);
        v247 = swift_release(v233);
      }
      ((void (*)(char *, uint64_t, __n128))v648)(v638, v657, v247);
      if (!v646)
      {
        __break(1u);
        goto LABEL_211;
      }
LABEL_110:
      v130 = 1;
      v248 = v649;
      sub_1000ED818((uint64_t)v652, (uint64_t)v653, v646, v649, v656, 1);
LABEL_111:

      goto LABEL_38;
    }
    v114 = (_QWORD *)(v112 + 3);
    if (v652 == (_QWORD *)(v112 + 3) && v653 == (void *)0x800000010050F250
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v112 + 3, 0x800000010050F250, v652, v653, 0) & 1) != 0)
    {
      ((void (*)(char *, NSObject *, uint64_t))v643)(v637, v642, v657);
      v249 = swift_allocObject(&unk_1005C6A70, 24, 7);
      v250 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
      *(_QWORD *)(v249 + 16) = v656;
      v251 = swift_allocObject(&unk_1005C6A98, 24, 7);
      *(_QWORD *)(v251 + 16) = v250;
      v642 = v86;
      v645 = Logger.logObject.getter(v642);
      LODWORD(v643) = static os_log_type_t.debug.getter(v645);
      v252 = swift_allocObject(&unk_1005C6AC0, 17, 7);
      *(_BYTE *)(v252 + 16) = 64;
      v253 = swift_allocObject(&unk_1005C6AE8, 17, 7);
      *(_BYTE *)(v253 + 16) = 8;
      v254 = swift_allocObject(&unk_1005C6B10, 32, 7);
      *(_QWORD *)(v254 + 16) = sub_10010DF40;
      *(_QWORD *)(v254 + 24) = v249;
      v96 = swift_allocObject(&unk_1005C6B38, 32, 7);
      *(_QWORD *)(v96 + 16) = sub_10010DB64;
      *(_QWORD *)(v96 + 24) = v254;
      v255 = swift_allocObject(&unk_1005C6B60, 17, 7);
      *(_BYTE *)(v255 + 16) = 32;
      v112 = swift_allocObject(&unk_1005C6B88, 17, 7);
      *(_BYTE *)(v112 + 16) = 8;
      v128 = swift_allocObject(&unk_1005C6BB0, 32, 7);
      *(_QWORD *)(v128 + 16) = sub_10010DF44;
      *(_QWORD *)(v128 + 24) = v251;
      v114 = (_QWORD *)swift_allocObject(&unk_1005C6BD8, 32, 7);
      v114[2] = sub_10010DB64;
      v114[3] = v128;
      v256 = swift_allocObject(v644, 128, 7);
      v257 = sub_1003FD974(v256, 6);
      v86 = (os_log_t)sub_10010DB74;
      *v258 = sub_10010DB74;
      v258[1] = v252;
      v258[2] = sub_10010DB74;
      v258[3] = v253;
      v258[4] = sub_10010DB6C;
      v258[5] = v96;
      v258[6] = sub_10010DB74;
      v258[7] = v255;
      v258[8] = sub_10010DB74;
      v258[9] = v112;
      v258[10] = sub_10010DB68;
      v258[11] = v114;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease(v257);
      if (os_log_type_enabled(v645, (os_log_type_t)v643))
      {
        v259 = (uint8_t *)sub_100140610(22);
        v260 = swift_slowAlloc(8, -1);
        v659 = swift_slowAlloc(32, -1);
        v660 = v260;
        v641 = v659;
        v644 = v259;
        *(_WORD *)v259 = 514;
        *(_QWORD *)&v658[0] = v259 + 2;
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v252;
        v86 = v651;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        if (v86)
          goto LABEL_343;
        swift_release(v252);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v253;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v253);
        *(_QWORD *)&v662 = sub_10010DB6C;
        *((_QWORD *)&v662 + 1) = v96;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v96);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v255;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v255);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v112;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v112);
        *(_QWORD *)&v662 = sub_10010DB68;
        *((_QWORD *)&v662 + 1) = v114;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v114);
        v86 = v645;
        v261 = v644;
        _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "ScrollBrowseListNatural %@ %s", v644, 0x16u);
        v262 = sub_10006922C(&qword_100643AB0);
        swift_arrayDestroy(v260, 1, v262);
        swift_slowDealloc(v260, -1, -1);
        v128 = (uint64_t)v641;
        swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v128, -1, -1);
        sub_100140618((uint64_t)v261);

      }
      else
      {

        swift_release(v114);
        swift_release(v112);
        swift_release(v255);
        swift_release(v96);
        swift_release(v253);
        v263 = swift_release(v252);
      }
      ((void (*)(char *, uint64_t, __n128))v648)(v637, v657, v263);
      if (v646)
        goto LABEL_110;
      __break(1u);
    }
    if (v652 == (_QWORD *)v112 && v653 == (void *)0x800000010050F230
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000010050F230, v652, v653, 0) & 1) != 0)
    {
      ((void (*)(char *, NSObject *, uint64_t))v643)(v636, v642, v657);
      v264 = swift_allocObject(&unk_1005C68E0, 24, 7);
      v265 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
      *(_QWORD *)(v264 + 16) = v656;
      v266 = swift_allocObject(&unk_1005C6908, 24, 7);
      *(_QWORD *)(v266 + 16) = v265;
      v642 = v86;
      v645 = Logger.logObject.getter(v642);
      LODWORD(v643) = static os_log_type_t.debug.getter(v645);
      v267 = swift_allocObject(&unk_1005C6930, 17, 7);
      *(_BYTE *)(v267 + 16) = 64;
      v268 = swift_allocObject(&unk_1005C6958, 17, 7);
      *(_BYTE *)(v268 + 16) = 8;
      v269 = swift_allocObject(&unk_1005C6980, 32, 7);
      *(_QWORD *)(v269 + 16) = sub_10010DF40;
      *(_QWORD *)(v269 + 24) = v264;
      v270 = swift_allocObject(&unk_1005C69A8, 32, 7);
      *(_QWORD *)(v270 + 16) = sub_10010DB64;
      *(_QWORD *)(v270 + 24) = v269;
      v271 = swift_allocObject(&unk_1005C69D0, 17, 7);
      *(_BYTE *)(v271 + 16) = 32;
      v272 = swift_allocObject(&unk_1005C69F8, 17, 7);
      *(_BYTE *)(v272 + 16) = 8;
      v273 = swift_allocObject(&unk_1005C6A20, 32, 7);
      *(_QWORD *)(v273 + 16) = sub_10010DF44;
      *(_QWORD *)(v273 + 24) = v266;
      v274 = swift_allocObject(&unk_1005C6A48, 32, 7);
      *(_QWORD *)(v274 + 16) = sub_10010DB64;
      *(_QWORD *)(v274 + 24) = v273;
      v275 = swift_allocObject(v644, 128, 7);
      v276 = sub_1003FD974(v275, 6);
      v86 = (os_log_t)sub_10010DB74;
      *v277 = sub_10010DB74;
      v277[1] = v267;
      v277[2] = sub_10010DB74;
      v277[3] = v268;
      v277[4] = sub_10010DB6C;
      v277[5] = v270;
      v277[6] = sub_10010DB74;
      v277[7] = v271;
      v277[8] = sub_10010DB74;
      v277[9] = v272;
      v277[10] = sub_10010DB68;
      v277[11] = v274;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease(v276);
      if (os_log_type_enabled(v645, (os_log_type_t)v643))
      {
        v278 = (uint8_t *)sub_100140610(22);
        v279 = swift_slowAlloc(8, -1);
        v659 = swift_slowAlloc(32, -1);
        v660 = v279;
        v641 = v659;
        v644 = v278;
        *(_WORD *)v278 = 514;
        *(_QWORD *)&v658[0] = v278 + 2;
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v267;
        v86 = v651;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        if (v86)
          goto LABEL_343;
        swift_release(v267);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v268;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v268);
        *(_QWORD *)&v662 = sub_10010DB6C;
        *((_QWORD *)&v662 + 1) = v270;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v270);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v271;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v271);
        *(_QWORD *)&v662 = sub_10010DB74;
        *((_QWORD *)&v662 + 1) = v272;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v272);
        *(_QWORD *)&v662 = sub_10010DB68;
        *((_QWORD *)&v662 + 1) = v274;
        sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
        swift_release(v274);
        v86 = v645;
        v280 = v644;
        _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "ScrollSidebarNatural %@ %s", v644, 0x16u);
        v281 = sub_10006922C(&qword_100643AB0);
        swift_arrayDestroy(v279, 1, v281);
        swift_slowDealloc(v279, -1, -1);
        v282 = v641;
        swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v282, -1, -1);
        sub_100140618((uint64_t)v280);

      }
      else
      {

        swift_release(v274);
        swift_release(v272);
        swift_release(v271);
        swift_release(v270);
        swift_release(v268);
        v283 = swift_release(v267);
      }
      ((void (*)(char *, uint64_t, __n128))v648)(v636, v657, v283);
      if (v646)
      {
        sub_1000ECABC((uint64_t)v652, v653, v646, v656);
LABEL_130:

        goto LABEL_82;
      }
      __break(1u);
      goto LABEL_230;
    }
    goto LABEL_132;
  }
  if ((v127 & 1) != 0)
  {
    sub_1000F5FBC(2, (uint64_t)v652, (unint64_t)v653, v118, v120);
LABEL_27:

LABEL_28:
LABEL_29:
    v129 = v649;
LABEL_30:

    v130 = 1;
LABEL_38:

    return v130;
  }
  if (v646)
  {
    v134 = (_QWORD *)swift_allocObject(&unk_1005C73F8, 48, 7);
    v135 = v647;
    v136 = (uint64_t)v652;
    v134[2] = v647;
    v134[3] = v136;
    v137 = v653;
    v134[4] = v653;
    v134[5] = v118;
    swift_bridgeObjectRetain(v137);
    v138 = v135;
    v139 = v86;
    v140 = v649;
    sub_1000F10F4(v649, v118, (uint64_t)sub_10010DED4, (uint64_t)v134);

    v141 = v134;
LABEL_44:
    swift_release(v141);
    v130 = 1;
    goto LABEL_38;
  }
  __break(1u);
LABEL_132:
  if (v652 == (_QWORD *)0x6F466573776F7242 && v653 == (void *)0xEC0000007265646CLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6F466573776F7242, 0xEC0000007265646CLL, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v616, v642, v657);
    v284 = swift_allocObject(&unk_1005C6750, 24, 7);
    v285 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v284 + 16) = v656;
    v286 = swift_allocObject(&unk_1005C6778, 24, 7);
    *(_QWORD *)(v286 + 16) = v285;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v287 = swift_allocObject(&unk_1005C67A0, 17, 7);
    *(_BYTE *)(v287 + 16) = 64;
    v288 = swift_allocObject(&unk_1005C67C8, 17, 7);
    *(_BYTE *)(v288 + 16) = 8;
    v289 = swift_allocObject(&unk_1005C67F0, 32, 7);
    *(_QWORD *)(v289 + 16) = sub_10010DF40;
    *(_QWORD *)(v289 + 24) = v284;
    v290 = swift_allocObject(&unk_1005C6818, 32, 7);
    *(_QWORD *)(v290 + 16) = sub_10010DB64;
    *(_QWORD *)(v290 + 24) = v289;
    v291 = swift_allocObject(&unk_1005C6840, 17, 7);
    *(_BYTE *)(v291 + 16) = 32;
    v292 = swift_allocObject(&unk_1005C6868, 17, 7);
    *(_BYTE *)(v292 + 16) = 8;
    v293 = swift_allocObject(&unk_1005C6890, 32, 7);
    *(_QWORD *)(v293 + 16) = sub_10010DF44;
    *(_QWORD *)(v293 + 24) = v286;
    v294 = swift_allocObject(&unk_1005C68B8, 32, 7);
    *(_QWORD *)(v294 + 16) = sub_10010DB64;
    *(_QWORD *)(v294 + 24) = v293;
    v295 = swift_allocObject(v644, 128, 7);
    v127 = sub_1003FD974(v295, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v296 = sub_10010DB74;
    v296[1] = v287;
    v296[2] = sub_10010DB74;
    v296[3] = v288;
    v296[4] = sub_10010DB6C;
    v296[5] = v290;
    v296[6] = sub_10010DB74;
    v296[7] = v291;
    v296[8] = sub_10010DB74;
    v296[9] = v292;
    v296[10] = sub_10010DB68;
    v296[11] = v294;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v127);
    if (!os_log_type_enabled(v645, (os_log_type_t)v643))
    {

      swift_release(v294);
      swift_release(v292);
      swift_release(v291);
      swift_release(v290);
      swift_release(v288);
      v301 = swift_release(v287);
      goto LABEL_139;
    }
    v297 = (uint8_t *)sub_100140610(22);
    v298 = swift_slowAlloc(8, -1);
    v659 = swift_slowAlloc(32, -1);
    v660 = v298;
    v641 = v659;
    v644 = v297;
    *(_WORD *)v297 = 514;
    *(_QWORD *)&v658[0] = v297 + 2;
    *(_QWORD *)&v662 = sub_10010DB74;
    *((_QWORD *)&v662 + 1) = v287;
    v86 = v651;
    sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
    if (!v86)
    {
      swift_release(v287);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v288;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v288);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v290;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v290);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v291;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v291);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v292;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v292);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v294;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v294);
      v86 = v645;
      v127 = (uint64_t)v644;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "BrowseFolder %@ %s", v644, 0x16u);
      v299 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v298, 1, v299);
      swift_slowDealloc(v298, -1, -1);
      v300 = v641;
      swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v300, -1, -1);
      sub_100140618(v127);

LABEL_139:
      ((void (*)(char *, uint64_t, __n128))v648)(v616, v657, v301);
      if (v646)
      {
        v130 = 1;
        v248 = v649;
        sub_100109AB4((uint64_t)v652, (uint64_t)v653, v649, v656, 0, 1);
        goto LABEL_111;
      }
      __break(1u);
      goto LABEL_242;
    }
LABEL_343:
    swift_errorRelease(v86);
    __break(1u);
LABEL_344:
    __break(1u);
LABEL_345:
    v132 = String._bridgeToObjectiveC()();
    v120 = v654;
    v114 = v655;
    goto LABEL_40;
  }
LABEL_142:
  if (v652 == (_QWORD *)(v112 - 3) && v653 == (void *)0x800000010050F210
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v112 - 3, 0x800000010050F210, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v617, v642, v657);
    v302 = swift_allocObject(&unk_1005C65C0, 24, 7);
    v303 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v302 + 16) = v656;
    v304 = swift_allocObject(&unk_1005C65E8, 24, 7);
    *(_QWORD *)(v304 + 16) = v303;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v155 = swift_allocObject(&unk_1005C6610, 17, 7);
    *(_BYTE *)(v155 + 16) = 64;
    v156 = swift_allocObject(&unk_1005C6638, 17, 7);
    *(_BYTE *)(v156 + 16) = 8;
    v305 = swift_allocObject(&unk_1005C6660, 32, 7);
    *(_QWORD *)(v305 + 16) = sub_10010DF40;
    *(_QWORD *)(v305 + 24) = v302;
    v153 = swift_allocObject(&unk_1005C6688, 32, 7);
    *(_QWORD *)(v153 + 16) = sub_10010DB64;
    *(_QWORD *)(v153 + 24) = v305;
    v152 = swift_allocObject(&unk_1005C66B0, 17, 7);
    *(_BYTE *)(v152 + 16) = 32;
    v168 = (_BYTE *)swift_allocObject(&unk_1005C66D8, 17, 7);
    v168[16] = 8;
    v306 = swift_allocObject(&unk_1005C6700, 32, 7);
    *(_QWORD *)(v306 + 16) = sub_10010DF44;
    *(_QWORD *)(v306 + 24) = v304;
    v159 = swift_allocObject(&unk_1005C6728, 32, 7);
    *(_QWORD *)(v159 + 16) = sub_10010DB64;
    *(_QWORD *)(v159 + 24) = v306;
    v307 = swift_allocObject(v644, 128, 7);
    v127 = sub_1003FD974(v307, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v308 = sub_10010DB74;
    v308[1] = v155;
    v308[2] = sub_10010DB74;
    v308[3] = v156;
    v308[4] = sub_10010DB6C;
    v308[5] = v153;
    v308[6] = sub_10010DB74;
    v308[7] = v152;
    v308[8] = sub_10010DB74;
    v308[9] = v168;
    v308[10] = sub_10010DB68;
    v308[11] = v159;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v127);
    if (os_log_type_enabled(v645, (os_log_type_t)v643))
    {
      v309 = (uint8_t *)sub_100140610(22);
      v310 = swift_slowAlloc(8, -1);
      v659 = swift_slowAlloc(32, -1);
      v660 = v310;
      v641 = v659;
      v644 = v309;
      *(_WORD *)v309 = 514;
      *(_QWORD *)&v658[0] = v309 + 2;
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v155;
      v86 = v651;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      if (v86)
        goto LABEL_343;
      swift_release(v155);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v156;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v156);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v153;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v153);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v152;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v152);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v168;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v168);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v159;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v159);
      v86 = v645;
      v127 = (uint64_t)v644;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "BrowseEmptyFolder %@ %s", v644, 0x16u);
      v311 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v310, 1, v311);
      swift_slowDealloc(v310, -1, -1);
      v312 = v641;
      swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v312, -1, -1);
      sub_100140618(v127);

      goto LABEL_150;
    }
LABEL_149:

    swift_release(v159);
    swift_release(v168);
    swift_release(v152);
    swift_release(v153);
    swift_release(v156);
    v313 = swift_release(v155);
LABEL_150:
    ((void (*)(char *, uint64_t, __n128))v648)(v617, v657, v313);
    if (v646)
    {
      v314 = (uint64_t)v652;
      v315 = (uint64_t)v653;
      v213 = v649;
      v316 = v649;
      v317 = v656;
      v318 = 0;
LABEL_152:
      sub_100109AB4(v314, v315, v316, v317, 0, v318);
      goto LABEL_92;
    }
    __break(1u);
    goto LABEL_252;
  }
  if (v652 == (_QWORD *)v128 && v653 == (void *)0x800000010050F1F0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v128, 0x800000010050F1F0, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v618, v642, v657);
    v319 = swift_allocObject(&unk_1005C6430, 24, 7);
    v320 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v319 + 16) = v656;
    v321 = swift_allocObject(&unk_1005C6458, 24, 7);
    *(_QWORD *)(v321 + 16) = v320;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v175 = swift_allocObject(&unk_1005C6480, 17, 7);
    *(_BYTE *)(v175 + 16) = 64;
    v190 = swift_allocObject(&unk_1005C64A8, 17, 7);
    LOBYTE(v190[2].isa) = 8;
    v322 = swift_allocObject(&unk_1005C64D0, 32, 7);
    *(_QWORD *)(v322 + 16) = sub_10010DF40;
    *(_QWORD *)(v322 + 24) = v319;
    v178 = swift_allocObject(&unk_1005C64F8, 32, 7);
    *(_QWORD *)(v178 + 16) = sub_10010DB64;
    *(_QWORD *)(v178 + 24) = v322;
    v179 = swift_allocObject(&unk_1005C6520, 17, 7);
    *(_BYTE *)(v179 + 16) = 32;
    v180 = swift_allocObject(&unk_1005C6548, 17, 7);
    *(_BYTE *)(v180 + 16) = 8;
    v323 = swift_allocObject(&unk_1005C6570, 32, 7);
    *(_QWORD *)(v323 + 16) = sub_10010DF44;
    *(_QWORD *)(v323 + 24) = v321;
    v182 = swift_allocObject(&unk_1005C6598, 32, 7);
    *(_QWORD *)(v182 + 16) = sub_10010DB64;
    *(_QWORD *)(v182 + 24) = v323;
    v324 = swift_allocObject(v644, 128, 7);
    v127 = sub_1003FD974(v324, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v325 = sub_10010DB74;
    v325[1] = v175;
    v325[2] = sub_10010DB74;
    v325[3] = v190;
    v325[4] = sub_10010DB6C;
    v325[5] = v178;
    v325[6] = sub_10010DB74;
    v325[7] = v179;
    v325[8] = sub_10010DB74;
    v325[9] = v180;
    v325[10] = sub_10010DB68;
    v325[11] = v182;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v127);
    if (os_log_type_enabled(v645, (os_log_type_t)v643))
    {
      v326 = (uint8_t *)sub_100140610(22);
      v327 = swift_slowAlloc(8, -1);
      v659 = swift_slowAlloc(32, -1);
      v660 = v327;
      v641 = v659;
      v644 = v326;
      *(_WORD *)v326 = 514;
      *(_QWORD *)&v658[0] = v326 + 2;
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v175;
      v86 = v651;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      if (v86)
        goto LABEL_343;
      swift_release(v175);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v190;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v190);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v178;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v178);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v179;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v179);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v180;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v180);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v182;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v182);
      v86 = v645;
      v127 = (uint64_t)v644;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "Browse100ItemFolder %@ %s", v644, 0x16u);
      v328 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v327, 1, v328);
      swift_slowDealloc(v327, -1, -1);
      v329 = v641;
      swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v329, -1, -1);
      sub_100140618(v127);

      goto LABEL_161;
    }
LABEL_160:

    swift_release(v182);
    swift_release(v180);
    swift_release(v179);
    swift_release(v178);
    swift_release(v190);
    v330 = swift_release(v175);
LABEL_161:
    ((void (*)(char *, uint64_t, __n128))v648)(v618, v657, v330);
    if (v646)
    {
      v314 = (uint64_t)v652;
      v315 = (uint64_t)v653;
      v213 = v649;
      v316 = v649;
      v317 = v656;
      v318 = 2;
      goto LABEL_152;
    }
    __break(1u);
    goto LABEL_263;
  }
  if (v652 == (_QWORD *)v112 && v653 == (void *)0x800000010050F1D0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000010050F1D0, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v619, v642, v657);
    v331 = swift_allocObject(&unk_1005C62A0, 24, 7);
    v332 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v331 + 16) = v656;
    v333 = swift_allocObject(&unk_1005C62C8, 24, 7);
    *(_QWORD *)(v333 + 16) = v332;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v94 = swift_allocObject(&unk_1005C62F0, 17, 7);
    *(_BYTE *)(v94 + 16) = 64;
    v118 = (_BYTE *)swift_allocObject(&unk_1005C6318, 17, 7);
    v118[16] = 8;
    v334 = swift_allocObject(&unk_1005C6340, 32, 7);
    *(_QWORD *)(v334 + 16) = sub_10010DF40;
    *(_QWORD *)(v334 + 24) = v331;
    v96 = swift_allocObject(&unk_1005C6368, 32, 7);
    *(_QWORD *)(v96 + 16) = sub_10010DB64;
    *(_QWORD *)(v96 + 24) = v334;
    v120 = swift_allocObject(&unk_1005C6390, 17, 7);
    LOBYTE(v120[2].isa) = 32;
    v112 = swift_allocObject(&unk_1005C63B8, 17, 7);
    *(_BYTE *)(v112 + 16) = 8;
    v335 = swift_allocObject(&unk_1005C63E0, 32, 7);
    *(_QWORD *)(v335 + 16) = sub_10010DF44;
    *(_QWORD *)(v335 + 24) = v333;
    v114 = (_QWORD *)swift_allocObject(&unk_1005C6408, 32, 7);
    v114[2] = sub_10010DB64;
    v114[3] = v335;
    v336 = swift_allocObject(v644, 128, 7);
    v127 = sub_1003FD974(v336, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v337 = sub_10010DB74;
    v337[1] = v94;
    v337[2] = sub_10010DB74;
    v337[3] = v118;
    v337[4] = sub_10010DB6C;
    v337[5] = v96;
    v337[6] = sub_10010DB74;
    v337[7] = v120;
    v337[8] = sub_10010DB74;
    v337[9] = v112;
    v337[10] = sub_10010DB68;
    v337[11] = v114;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v127);
    if (os_log_type_enabled(v645, (os_log_type_t)v643))
    {
      v338 = (uint8_t *)sub_100140610(22);
      v339 = swift_slowAlloc(8, -1);
      v659 = swift_slowAlloc(32, -1);
      v660 = v339;
      v641 = v659;
      v644 = v338;
      *(_WORD *)v338 = 514;
      *(_QWORD *)&v658[0] = v338 + 2;
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v94;
      v86 = v651;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      if (v86)
        goto LABEL_343;
      swift_release(v94);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v118;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v118);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v96;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v96);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v120;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v120);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v112;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v112);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v114;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v114);
      v86 = v645;
      v127 = (uint64_t)v644;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "Browse1000ItemFolder %@ %s", v644, 0x16u);
      v340 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v339, 1, v340);
      swift_slowDealloc(v339, -1, -1);
      v341 = v641;
      swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v341, -1, -1);
      sub_100140618(v127);

      goto LABEL_171;
    }
LABEL_170:

    swift_release(v114);
    swift_release(v112);
    swift_release(v120);
    swift_release(v96);
    swift_release(v118);
    v342 = swift_release(v94);
LABEL_171:
    ((void (*)(char *, uint64_t, __n128))v648)(v619, v657, v342);
    if (v646)
    {
      v314 = (uint64_t)v652;
      v315 = (uint64_t)v653;
      v213 = v649;
      v316 = v649;
      v317 = v656;
      v318 = 4;
      goto LABEL_152;
    }
    __break(1u);
    goto LABEL_273;
  }
  if (v652 == (_QWORD *)v112 && v653 == (void *)0x800000010050F1B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000010050F1B0, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v620, v642, v657);
    v343 = swift_allocObject(&unk_1005C6110, 24, 7);
    v344 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v343 + 16) = v656;
    v345 = swift_allocObject(&unk_1005C6138, 24, 7);
    *(_QWORD *)(v345 + 16) = v344;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v94 = swift_allocObject(&unk_1005C6160, 17, 7);
    *(_BYTE *)(v94 + 16) = 64;
    v118 = (_BYTE *)swift_allocObject(&unk_1005C6188, 17, 7);
    v118[16] = 8;
    v346 = swift_allocObject(&unk_1005C61B0, 32, 7);
    *(_QWORD *)(v346 + 16) = sub_10010DF40;
    *(_QWORD *)(v346 + 24) = v343;
    v96 = swift_allocObject(&unk_1005C61D8, 32, 7);
    *(_QWORD *)(v96 + 16) = sub_10010DB64;
    *(_QWORD *)(v96 + 24) = v346;
    v120 = swift_allocObject(&unk_1005C6200, 17, 7);
    LOBYTE(v120[2].isa) = 32;
    v112 = swift_allocObject(&unk_1005C6228, 17, 7);
    *(_BYTE *)(v112 + 16) = 8;
    v347 = swift_allocObject(&unk_1005C6250, 32, 7);
    *(_QWORD *)(v347 + 16) = sub_10010DF44;
    *(_QWORD *)(v347 + 24) = v345;
    v114 = (_QWORD *)swift_allocObject(&unk_1005C6278, 32, 7);
    v114[2] = sub_10010DB64;
    v114[3] = v347;
    v348 = swift_allocObject(v644, 128, 7);
    v127 = sub_1003FD974(v348, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v349 = sub_10010DB74;
    v349[1] = v94;
    v349[2] = sub_10010DB74;
    v349[3] = v118;
    v349[4] = sub_10010DB6C;
    v349[5] = v96;
    v349[6] = sub_10010DB74;
    v349[7] = v120;
    v349[8] = sub_10010DB74;
    v349[9] = v112;
    v349[10] = sub_10010DB68;
    v349[11] = v114;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v127);
    if (os_log_type_enabled(v645, (os_log_type_t)v643))
    {
      v350 = (uint8_t *)sub_100140610(22);
      v351 = swift_slowAlloc(8, -1);
      v659 = swift_slowAlloc(32, -1);
      v660 = v351;
      v641 = v659;
      v644 = v350;
      *(_WORD *)v350 = 514;
      *(_QWORD *)&v658[0] = v350 + 2;
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v94;
      v86 = v651;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      if (v86)
        goto LABEL_343;
      swift_release(v94);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v118;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v118);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v96;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v96);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v120;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v120);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v112;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v112);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v114;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v114);
      v86 = v645;
      v127 = (uint64_t)v644;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "ScrollBrowse %@ %s", v644, 0x16u);
      v352 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v351, 1, v352);
      swift_slowDealloc(v351, -1, -1);
      v353 = v641;
      swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v353, -1, -1);
      sub_100140618(v127);

      goto LABEL_181;
    }
LABEL_180:

    swift_release(v114);
    swift_release(v112);
    swift_release(v120);
    swift_release(v96);
    swift_release(v118);
    v354 = swift_release(v94);
LABEL_181:
    ((void (*)(char *, uint64_t, __n128))v648)(v620, v657, v354);
    if (v646)
    {
      v213 = v649;
      sub_1000EE4B0((uint64_t)v652, (uint64_t)v653, v646, v649, v656, 0);
      goto LABEL_92;
    }
    __break(1u);
    goto LABEL_283;
  }
  if (v652 == (_QWORD *)(v112 + 14) && v653 == (void *)0x800000010050F180
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v112 + 14, 0x800000010050F180, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v621, v642, v657);
    v355 = swift_allocObject(&unk_1005C5F30, 24, 7);
    v356 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v355 + 16) = v656;
    v357 = swift_allocObject(&unk_1005C5F58, 24, 7);
    *(_QWORD *)(v357 + 16) = v356;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v198 = swift_allocObject(&unk_1005C5F80, 17, 7);
    *(_BYTE *)(v198 + 16) = 64;
    v202 = swift_allocObject(&unk_1005C5FA8, 17, 7);
    *(_BYTE *)(v202 + 16) = 8;
    v358 = swift_allocObject(&unk_1005C5FD0, 32, 7);
    *(_QWORD *)(v358 + 16) = sub_10010DF40;
    *(_QWORD *)(v358 + 24) = v355;
    v201 = swift_allocObject(&unk_1005C5FF8, 32, 7);
    *(_QWORD *)(v201 + 16) = sub_10010DB64;
    *(_QWORD *)(v201 + 24) = v358;
    v203 = swift_allocObject(&unk_1005C6020, 17, 7);
    *(_BYTE *)(v203 + 16) = 32;
    v205 = swift_allocObject(&unk_1005C6048, 17, 7);
    *(_BYTE *)(v205 + 16) = 8;
    v359 = swift_allocObject(&unk_1005C6070, 32, 7);
    *(_QWORD *)(v359 + 16) = sub_10010DF44;
    *(_QWORD *)(v359 + 24) = v357;
    v199 = swift_allocObject(&unk_1005C6098, 32, 7);
    *(_QWORD *)(v199 + 16) = sub_10010DB64;
    *(_QWORD *)(v199 + 24) = v359;
    v360 = swift_allocObject(v644, 128, 7);
    v127 = sub_1003FD974(v360, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v361 = sub_10010DB74;
    v361[1] = v198;
    v361[2] = sub_10010DB74;
    v361[3] = v202;
    v361[4] = sub_10010DB6C;
    v361[5] = v201;
    v361[6] = sub_10010DB74;
    v361[7] = v203;
    v361[8] = sub_10010DB74;
    v361[9] = v205;
    v361[10] = sub_10010DB68;
    v361[11] = v199;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v127);
    if (os_log_type_enabled(v645, (os_log_type_t)v643))
    {
      v362 = (uint8_t *)sub_100140610(22);
      v363 = swift_slowAlloc(8, -1);
      v659 = swift_slowAlloc(32, -1);
      v660 = v363;
      v641 = v659;
      v644 = v362;
      *(_WORD *)v362 = 514;
      *(_QWORD *)&v658[0] = v362 + 2;
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v198;
      v86 = v651;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      if (v86)
        goto LABEL_343;
      swift_release(v198);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v202;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v202);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v201;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v201);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v203;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v203);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v205;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v205);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v199;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v199);
      v86 = v645;
      v127 = (uint64_t)v644;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "SwitchBrowseViewModeFromGridToList %@ %s", v644, 0x16u);
      v364 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v363, 1, v364);
      swift_slowDealloc(v363, -1, -1);
      v365 = v641;
      swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v365, -1, -1);
      sub_100140618(v127);

      goto LABEL_191;
    }
LABEL_190:

    swift_release(v199);
    swift_release(v205);
    swift_release(v203);
    swift_release(v201);
    swift_release(v202);
    v366 = swift_release(v198);
LABEL_191:
    ((void (*)(char *, uint64_t, __n128))v648)(v621, v657, v366);
    if (v646)
    {
      v367 = (_QWORD *)swift_allocObject(&unk_1005C60C0, 56, 7);
      v368 = v647;
      v369 = (uint64_t)v652;
      v370 = v653;
      v367[2] = v647;
      v367[3] = v369;
      v371 = v656;
      v367[4] = v370;
      v367[5] = v371;
      v130 = 1;
      v367[6] = 1;
      v372 = (_QWORD *)swift_allocObject(&unk_1005C60E8, 48, 7);
      v372[2] = sub_10010DB78;
      v372[3] = v367;
      v372[4] = v368;
      v372[5] = v371;
      v373 = v368;
      v374 = v642;
      swift_bridgeObjectRetain(v370);
      v375 = v373;
      v376 = v374;
      swift_retain();
      v377 = v649;
      sub_1000F10F4(v649, v371, (uint64_t)sub_10010DED0, (uint64_t)v372);

      swift_release(v367);
      swift_release(v372);
      goto LABEL_38;
    }
    __break(1u);
    goto LABEL_294;
  }
  if (v652 == (_QWORD *)(v112 + 16) && v653 == (void *)0x800000010050F150
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v112 + 16, 0x800000010050F150, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v622, v642, v657);
    v378 = swift_allocObject(&unk_1005C5D50, 24, 7);
    v379 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v378 + 16) = v656;
    v380 = swift_allocObject(&unk_1005C5D78, 24, 7);
    *(_QWORD *)(v380 + 16) = v379;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v381 = swift_allocObject(&unk_1005C5DA0, 17, 7);
    *(_BYTE *)(v381 + 16) = 64;
    v382 = swift_allocObject(&unk_1005C5DC8, 17, 7);
    *(_BYTE *)(v382 + 16) = 8;
    v383 = swift_allocObject(&unk_1005C5DF0, 32, 7);
    *(_QWORD *)(v383 + 16) = sub_10010DF40;
    *(_QWORD *)(v383 + 24) = v378;
    v384 = swift_allocObject(&unk_1005C5E18, 32, 7);
    *(_QWORD *)(v384 + 16) = sub_10010DB64;
    *(_QWORD *)(v384 + 24) = v383;
    v385 = swift_allocObject(&unk_1005C5E40, 17, 7);
    *(_BYTE *)(v385 + 16) = 32;
    v386 = swift_allocObject(&unk_1005C5E68, 17, 7);
    *(_BYTE *)(v386 + 16) = 8;
    v387 = swift_allocObject(&unk_1005C5E90, 32, 7);
    *(_QWORD *)(v387 + 16) = sub_10010DF44;
    *(_QWORD *)(v387 + 24) = v380;
    v388 = swift_allocObject(&unk_1005C5EB8, 32, 7);
    *(_QWORD *)(v388 + 16) = sub_10010DB64;
    *(_QWORD *)(v388 + 24) = v387;
    v389 = swift_allocObject(v644, 128, 7);
    v127 = sub_1003FD974(v389, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v390 = sub_10010DB74;
    v390[1] = v381;
    v390[2] = sub_10010DB74;
    v390[3] = v382;
    v390[4] = sub_10010DB6C;
    v390[5] = v384;
    v390[6] = sub_10010DB74;
    v390[7] = v385;
    v390[8] = sub_10010DB74;
    v390[9] = v386;
    v390[10] = sub_10010DB68;
    v390[11] = v388;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v127);
    if (os_log_type_enabled(v645, (os_log_type_t)v643))
    {
      v391 = (uint8_t *)sub_100140610(22);
      v392 = swift_slowAlloc(8, -1);
      v659 = swift_slowAlloc(32, -1);
      v660 = v392;
      v641 = v659;
      v644 = v391;
      *(_WORD *)v391 = 514;
      *(_QWORD *)&v658[0] = v391 + 2;
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v381;
      v86 = v651;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      if (v86)
        goto LABEL_343;
      swift_release(v381);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v382;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v382);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v384;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v384);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v385;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v385);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v386;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v386);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v388;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v388);
      v86 = v645;
      v127 = (uint64_t)v644;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "SwitchBrowseViewModeFromGridToColumn %@ %s", v644, 0x16u);
      v393 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v392, 1, v393);
      swift_slowDealloc(v392, -1, -1);
      v394 = v641;
      swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v394, -1, -1);
      sub_100140618(v127);

    }
    else
    {

      swift_release(v388);
      swift_release(v386);
      swift_release(v385);
      swift_release(v384);
      swift_release(v382);
      v395 = swift_release(v381);
    }
    ((void (*)(char *, uint64_t, __n128))v648)(v622, v657, v395);
    if (v646)
    {
      v396 = (_QWORD *)swift_allocObject(&unk_1005C5EE0, 56, 7);
      v397 = v647;
      v398 = (uint64_t)v652;
      v399 = v653;
      v396[2] = v647;
      v396[3] = v398;
      v400 = v656;
      v396[4] = v399;
      v396[5] = v400;
      v396[6] = 2;
      v401 = (_QWORD *)swift_allocObject(&unk_1005C5F08, 48, 7);
      v401[2] = sub_10010DB78;
      v401[3] = v396;
      v401[4] = v397;
      v401[5] = v400;
      v402 = v397;
      v403 = v642;
      swift_bridgeObjectRetain(v399);
      v404 = v402;
      v405 = v403;
      swift_retain();
LABEL_202:
      v406 = v649;
      sub_1000F10F4(v649, v400, (uint64_t)sub_10010DED0, (uint64_t)v401);

      swift_release(v396);
LABEL_203:
      v141 = v401;
      goto LABEL_44;
    }
    __break(1u);
    goto LABEL_304;
  }
  if (v652 == (_QWORD *)(v112 + 14) && v653 == (void *)0x800000010050F120
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v112 + 14, 0x800000010050F120, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v623, v642, v657);
    v407 = swift_allocObject(&unk_1005C5B70, 24, 7);
    v408 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v407 + 16) = v656;
    v409 = swift_allocObject(&unk_1005C5B98, 24, 7);
    *(_QWORD *)(v409 + 16) = v408;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v233 = swift_allocObject(&unk_1005C5BC0, 17, 7);
    *(_BYTE *)(v233 + 16) = 64;
    v234 = swift_allocObject(&unk_1005C5BE8, 17, 7);
    *(_BYTE *)(v234 + 16) = 8;
    v410 = swift_allocObject(&unk_1005C5C10, 32, 7);
    *(_QWORD *)(v410 + 16) = sub_10010DF40;
    *(_QWORD *)(v410 + 24) = v407;
    v236 = swift_allocObject(&unk_1005C5C38, 32, 7);
    *(_QWORD *)(v236 + 16) = sub_10010DB64;
    *(_QWORD *)(v236 + 24) = v410;
    v237 = swift_allocObject(&unk_1005C5C60, 17, 7);
    *(_BYTE *)(v237 + 16) = 32;
    v238 = swift_allocObject(&unk_1005C5C88, 17, 7);
    *(_BYTE *)(v238 + 16) = 8;
    v411 = swift_allocObject(&unk_1005C5CB0, 32, 7);
    *(_QWORD *)(v411 + 16) = sub_10010DF44;
    *(_QWORD *)(v411 + 24) = v409;
    v240 = swift_allocObject(&unk_1005C5CD8, 32, 7);
    *(_QWORD *)(v240 + 16) = sub_10010DB64;
    *(_QWORD *)(v240 + 24) = v411;
    v412 = swift_allocObject(v644, 128, 7);
    v127 = sub_1003FD974(v412, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v413 = sub_10010DB74;
    v413[1] = v233;
    v413[2] = sub_10010DB74;
    v413[3] = v234;
    v413[4] = sub_10010DB6C;
    v413[5] = v236;
    v413[6] = sub_10010DB74;
    v413[7] = v237;
    v413[8] = sub_10010DB74;
    v413[9] = v238;
    v413[10] = sub_10010DB68;
    v413[11] = v240;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v127);
    if (os_log_type_enabled(v645, (os_log_type_t)v643))
    {
      v414 = (uint8_t *)sub_100140610(22);
      v415 = swift_slowAlloc(8, -1);
      v659 = swift_slowAlloc(32, -1);
      v660 = v415;
      v641 = v659;
      v644 = v414;
      *(_WORD *)v414 = 514;
      *(_QWORD *)&v658[0] = v414 + 2;
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v233;
      v86 = v651;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      if (v86)
        goto LABEL_343;
      swift_release(v233);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v234;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v234);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v236;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v236);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v237;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v237);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v238;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v238);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v240;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v240);
      v86 = v645;
      v127 = (uint64_t)v644;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "SwitchBrowseViewModeFromListToGrid %@ %s", v644, 0x16u);
      v416 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v415, 1, v416);
      swift_slowDealloc(v415, -1, -1);
      v417 = v641;
      swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v417, -1, -1);
      sub_100140618(v127);

      goto LABEL_212;
    }
LABEL_211:

    swift_release(v240);
    swift_release(v238);
    swift_release(v237);
    swift_release(v236);
    swift_release(v234);
    v418 = swift_release(v233);
LABEL_212:
    ((void (*)(char *, uint64_t, __n128))v648)(v623, v657, v418);
    if (v646)
    {
      v396 = (_QWORD *)swift_allocObject(&unk_1005C5D00, 56, 7);
      v419 = v647;
      v420 = (uint64_t)v652;
      v421 = v653;
      v396[2] = v647;
      v396[3] = v420;
      v400 = v656;
      v396[4] = v421;
      v396[5] = v400;
      v396[6] = 0;
      v401 = (_QWORD *)swift_allocObject(&unk_1005C5D28, 48, 7);
      v401[2] = sub_10010D19C;
      v401[3] = v396;
      v401[4] = v419;
      v401[5] = v400;
      v422 = v419;
      v423 = v642;
      swift_bridgeObjectRetain(v421);
      v424 = v422;
      v405 = v423;
      swift_retain();
      goto LABEL_202;
    }
    __break(1u);
    goto LABEL_315;
  }
  if (v652 == (_QWORD *)v128 && v653 == (void *)0x800000010050F100
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v128, 0x800000010050F100, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v624, v642, v657);
    v425 = swift_allocObject(&unk_1005C59E0, 24, 7);
    v426 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v425 + 16) = v656;
    v427 = swift_allocObject(&unk_1005C5A08, 24, 7);
    *(_QWORD *)(v427 + 16) = v426;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v267 = swift_allocObject(&unk_1005C5A30, 17, 7);
    *(_BYTE *)(v267 + 16) = 64;
    v268 = swift_allocObject(&unk_1005C5A58, 17, 7);
    *(_BYTE *)(v268 + 16) = 8;
    v428 = swift_allocObject(&unk_1005C5A80, 32, 7);
    *(_QWORD *)(v428 + 16) = sub_10010DF40;
    *(_QWORD *)(v428 + 24) = v425;
    v270 = swift_allocObject(&unk_1005C5AA8, 32, 7);
    *(_QWORD *)(v270 + 16) = sub_10010DB64;
    *(_QWORD *)(v270 + 24) = v428;
    v271 = swift_allocObject(&unk_1005C5AD0, 17, 7);
    *(_BYTE *)(v271 + 16) = 32;
    v272 = swift_allocObject(&unk_1005C5AF8, 17, 7);
    *(_BYTE *)(v272 + 16) = 8;
    v429 = swift_allocObject(&unk_1005C5B20, 32, 7);
    *(_QWORD *)(v429 + 16) = sub_10010DF44;
    *(_QWORD *)(v429 + 24) = v427;
    v274 = swift_allocObject(&unk_1005C5B48, 32, 7);
    *(_QWORD *)(v274 + 16) = sub_10010DB64;
    *(_QWORD *)(v274 + 24) = v429;
    v430 = swift_allocObject(v644, 128, 7);
    v431 = sub_1003FD974(v430, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v432 = sub_10010DB74;
    v432[1] = v267;
    v432[2] = sub_10010DB74;
    v432[3] = v268;
    v432[4] = sub_10010DB6C;
    v432[5] = v270;
    v432[6] = sub_10010DB74;
    v432[7] = v271;
    v432[8] = sub_10010DB74;
    v432[9] = v272;
    v432[10] = sub_10010DB68;
    v432[11] = v274;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v431);
    if (os_log_type_enabled(v645, (os_log_type_t)v643))
    {
      v433 = (uint8_t *)sub_100140610(22);
      v434 = swift_slowAlloc(8, -1);
      v659 = swift_slowAlloc(32, -1);
      v660 = v434;
      v641 = v659;
      v644 = v433;
      *(_WORD *)v433 = 514;
      *(_QWORD *)&v658[0] = v433 + 2;
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v267;
      v86 = v651;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      if (v86)
        goto LABEL_343;
      swift_release(v267);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v268;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v268);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v270;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v270);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v271;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v271);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v272;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v272);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v274;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v274);
      v86 = v645;
      v435 = v644;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "Browse300ItemFolder %@ %s", v644, 0x16u);
      v436 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v434, 1, v436);
      swift_slowDealloc(v434, -1, -1);
      v437 = v641;
      swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v437, -1, -1);
      sub_100140618((uint64_t)v435);

    }
    else
    {

      swift_release(v274);
      swift_release(v272);
      swift_release(v271);
      swift_release(v270);
      swift_release(v268);
      v438 = swift_release(v267);
    }
    ((void (*)(char *, uint64_t, __n128))v648)(v624, v657, v438);
    if (v646)
    {
      v314 = (uint64_t)v652;
      v315 = (uint64_t)v653;
      v213 = v649;
      v316 = v649;
      v317 = v656;
      v318 = 3;
      goto LABEL_152;
    }
    __break(1u);
    goto LABEL_325;
  }
  if (v652 == (_QWORD *)(v112 + 2) && v653 == (void *)0x800000010050F0E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v112 + 2, 0x800000010050F0E0, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v625, v642, v657);
    v439 = swift_allocObject(&unk_1005C5850, 24, 7);
    v440 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v439 + 16) = v656;
    v441 = swift_allocObject(&unk_1005C5878, 24, 7);
    *(_QWORD *)(v441 + 16) = v440;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v267 = swift_allocObject(&unk_1005C58A0, 17, 7);
    *(_BYTE *)(v267 + 16) = 64;
    v268 = swift_allocObject(&unk_1005C58C8, 17, 7);
    *(_BYTE *)(v268 + 16) = 8;
    v442 = swift_allocObject(&unk_1005C58F0, 32, 7);
    *(_QWORD *)(v442 + 16) = sub_10010DF40;
    *(_QWORD *)(v442 + 24) = v439;
    v270 = swift_allocObject(&unk_1005C5918, 32, 7);
    *(_QWORD *)(v270 + 16) = sub_10010DB64;
    *(_QWORD *)(v270 + 24) = v442;
    v271 = swift_allocObject(&unk_1005C5940, 17, 7);
    *(_BYTE *)(v271 + 16) = 32;
    v272 = swift_allocObject(&unk_1005C5968, 17, 7);
    *(_BYTE *)(v272 + 16) = 8;
    v443 = swift_allocObject(&unk_1005C5990, 32, 7);
    *(_QWORD *)(v443 + 16) = sub_10010DF44;
    *(_QWORD *)(v443 + 24) = v441;
    v274 = swift_allocObject(&unk_1005C59B8, 32, 7);
    *(_QWORD *)(v274 + 16) = sub_10010DB64;
    *(_QWORD *)(v274 + 24) = v443;
    v444 = swift_allocObject(v644, 128, 7);
    v445 = sub_1003FD974(v444, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v446 = sub_10010DB74;
    v446[1] = v267;
    v446[2] = sub_10010DB74;
    v446[3] = v268;
    v446[4] = sub_10010DB6C;
    v446[5] = v270;
    v446[6] = sub_10010DB74;
    v446[7] = v271;
    v446[8] = sub_10010DB74;
    v446[9] = v272;
    v446[10] = sub_10010DB68;
    v446[11] = v274;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v445);
    if (os_log_type_enabled(v645, (os_log_type_t)v643))
    {
      v447 = (uint8_t *)sub_100140610(22);
      v448 = swift_slowAlloc(8, -1);
      v659 = swift_slowAlloc(32, -1);
      v660 = v448;
      v641 = v659;
      v644 = v447;
      *(_WORD *)v447 = 514;
      *(_QWORD *)&v658[0] = v447 + 2;
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v267;
      v86 = v651;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      if (v86)
        goto LABEL_343;
      swift_release(v267);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v268;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v268);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v270;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v270);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v271;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v271);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v272;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v272);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v274;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v274);
      v86 = v645;
      v449 = v644;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "BrowseSMB300ItemFolder %@ %s", v644, 0x16u);
      v450 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v448, 1, v450);
      swift_slowDealloc(v448, -1, -1);
      v451 = v641;
      swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v451, -1, -1);
      sub_100140618((uint64_t)v449);

      goto LABEL_231;
    }
LABEL_230:

    swift_release(v274);
    swift_release(v272);
    swift_release(v271);
    swift_release(v270);
    swift_release(v268);
    v452 = swift_release(v267);
LABEL_231:
    ((void (*)(char *, uint64_t, __n128))v648)(v625, v657, v452);
    if (v646)
    {
      v453 = (void **)&DOCDocumentSourceIdentifierSMBFileProvider;
LABEL_233:
      v454 = *v453;
      v455 = (uint64_t)v652;
      v456 = (uint64_t)v653;
      v457 = v656;
      v458 = 3;
LABEL_234:
      sub_100109AB4(v455, v456, v454, v457, 0, v458);
      goto LABEL_130;
    }
LABEL_325:
    __break(1u);
    goto LABEL_326;
  }
  if (v652 == (_QWORD *)(v112 + 2) && v653 == (void *)0x800000010050F0C0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v112 + 2, 0x800000010050F0C0, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v626, v642, v657);
    v459 = swift_allocObject(&unk_1005C56C0, 24, 7);
    v460 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v459 + 16) = v656;
    v461 = swift_allocObject(&unk_1005C56E8, 24, 7);
    *(_QWORD *)(v461 + 16) = v460;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v287 = swift_allocObject(&unk_1005C5710, 17, 7);
    *(_BYTE *)(v287 + 16) = 64;
    v288 = swift_allocObject(&unk_1005C5738, 17, 7);
    *(_BYTE *)(v288 + 16) = 8;
    v462 = swift_allocObject(&unk_1005C5760, 32, 7);
    *(_QWORD *)(v462 + 16) = sub_10010DF40;
    *(_QWORD *)(v462 + 24) = v459;
    v290 = swift_allocObject(&unk_1005C5788, 32, 7);
    *(_QWORD *)(v290 + 16) = sub_10010DB64;
    *(_QWORD *)(v290 + 24) = v462;
    v291 = swift_allocObject(&unk_1005C57B0, 17, 7);
    *(_BYTE *)(v291 + 16) = 32;
    v292 = swift_allocObject(&unk_1005C57D8, 17, 7);
    *(_BYTE *)(v292 + 16) = 8;
    v463 = swift_allocObject(&unk_1005C5800, 32, 7);
    *(_QWORD *)(v463 + 16) = sub_10010DF44;
    *(_QWORD *)(v463 + 24) = v461;
    v294 = swift_allocObject(&unk_1005C5828, 32, 7);
    *(_QWORD *)(v294 + 16) = sub_10010DB64;
    *(_QWORD *)(v294 + 24) = v463;
    v464 = swift_allocObject(v644, 128, 7);
    v127 = sub_1003FD974(v464, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v465 = sub_10010DB74;
    v465[1] = v287;
    v465[2] = sub_10010DB74;
    v465[3] = v288;
    v465[4] = sub_10010DB6C;
    v465[5] = v290;
    v465[6] = sub_10010DB74;
    v465[7] = v291;
    v465[8] = sub_10010DB74;
    v465[9] = v292;
    v465[10] = sub_10010DB68;
    v465[11] = v294;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v127);
    if (!os_log_type_enabled(v645, (os_log_type_t)v643))
    {
LABEL_242:

      swift_release(v294);
      swift_release(v292);
      swift_release(v291);
      swift_release(v290);
      swift_release(v288);
      v470 = swift_release(v287);
      goto LABEL_243;
    }
    v466 = (uint8_t *)sub_100140610(22);
    v467 = swift_slowAlloc(8, -1);
    v659 = swift_slowAlloc(32, -1);
    v660 = v467;
    v641 = v659;
    v644 = v466;
    *(_WORD *)v466 = 514;
    *(_QWORD *)&v658[0] = v466 + 2;
    *(_QWORD *)&v662 = sub_10010DB74;
    *((_QWORD *)&v662 + 1) = v287;
    v86 = v651;
    sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
    if (!v86)
    {
      swift_release(v287);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v288;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v288);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v290;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v290);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v291;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v291);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v292;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v292);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v294;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v294);
      v86 = v645;
      v127 = (uint64_t)v644;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "BrowseUSB300ItemFolder %@ %s", v644, 0x16u);
      v468 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v467, 1, v468);
      swift_slowDealloc(v467, -1, -1);
      v469 = v641;
      swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v469, -1, -1);
      sub_100140618(v127);

LABEL_243:
      ((void (*)(char *, uint64_t, __n128))v648)(v626, v657, v470);
      if (v646)
      {
        v453 = (void **)&DOCDocumentSourceIdentifierExternalDeviceFileProvider;
        goto LABEL_233;
      }
      __break(1u);
      goto LABEL_330;
    }
    goto LABEL_343;
  }
  if (v652 == (_QWORD *)(v112 + 6) && v653 == (void *)0x800000010050F0A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v112 + 6, 0x800000010050F0A0, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v627, v642, v657);
    v471 = swift_allocObject(&unk_1005C5508, 24, 7);
    v472 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v471 + 16) = v656;
    v473 = swift_allocObject(&unk_1005C5530, 24, 7);
    *(_QWORD *)(v473 + 16) = v472;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v155 = swift_allocObject(&unk_1005C5558, 17, 7);
    *(_BYTE *)(v155 + 16) = 64;
    v156 = swift_allocObject(&unk_1005C5580, 17, 7);
    *(_BYTE *)(v156 + 16) = 8;
    v474 = swift_allocObject(&unk_1005C55A8, 32, 7);
    *(_QWORD *)(v474 + 16) = sub_10010DF40;
    *(_QWORD *)(v474 + 24) = v471;
    v153 = swift_allocObject(&unk_1005C55D0, 32, 7);
    *(_QWORD *)(v153 + 16) = sub_10010DB64;
    *(_QWORD *)(v153 + 24) = v474;
    v152 = swift_allocObject(&unk_1005C55F8, 17, 7);
    *(_BYTE *)(v152 + 16) = 32;
    v168 = (_BYTE *)swift_allocObject(&unk_1005C5620, 17, 7);
    v168[16] = 8;
    v475 = swift_allocObject(&unk_1005C5648, 32, 7);
    *(_QWORD *)(v475 + 16) = sub_10010DF44;
    *(_QWORD *)(v475 + 24) = v473;
    v159 = swift_allocObject(&unk_1005C5670, 32, 7);
    *(_QWORD *)(v159 + 16) = sub_10010DB64;
    *(_QWORD *)(v159 + 24) = v475;
    v476 = swift_allocObject(v644, 128, 7);
    v127 = sub_1003FD974(v476, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v477 = sub_10010DB74;
    v477[1] = v155;
    v477[2] = sub_10010DB74;
    v477[3] = v156;
    v477[4] = sub_10010DB6C;
    v477[5] = v153;
    v477[6] = sub_10010DB74;
    v477[7] = v152;
    v477[8] = sub_10010DB74;
    v477[9] = v168;
    v477[10] = sub_10010DB68;
    v477[11] = v159;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v127);
    if (os_log_type_enabled(v645, (os_log_type_t)v643))
    {
      v478 = (uint8_t *)sub_100140610(22);
      v479 = swift_slowAlloc(8, -1);
      v659 = swift_slowAlloc(32, -1);
      v660 = v479;
      v641 = v659;
      v644 = v478;
      *(_WORD *)v478 = 514;
      *(_QWORD *)&v658[0] = v478 + 2;
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v155;
      v86 = v651;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      if (v86)
        goto LABEL_343;
      swift_release(v155);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v156;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v156);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v153;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v153);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v152;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v152);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v168;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v168);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v159;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v159);
      v86 = v645;
      v127 = (uint64_t)v644;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "SwitchLocationToiCloudTest %@ %s", v644, 0x16u);
      v480 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v479, 1, v480);
      swift_slowDealloc(v479, -1, -1);
      v481 = v641;
      swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v481, -1, -1);
      sub_100140618(v127);

      goto LABEL_253;
    }
LABEL_252:

    swift_release(v159);
    swift_release(v168);
    swift_release(v152);
    swift_release(v153);
    swift_release(v156);
    v482 = swift_release(v155);
LABEL_253:
    ((void (*)(char *, uint64_t, __n128))v648)(v627, v657, v482);
    if (!v646)
    {
LABEL_330:
      __break(1u);
LABEL_331:
      __break(1u);
      goto LABEL_332;
    }
    v484 = (void *)static DOCDocumentSourceIdentifier.iCloudCurrent.getter(v483);
    v401 = (_QWORD *)swift_allocObject(&unk_1005C5698, 48, 7);
    v485 = v647;
    v486 = (uint64_t)v652;
    v401[2] = v647;
    v401[3] = v486;
    v487 = v653;
    v488 = v656;
    v401[4] = v653;
    v401[5] = v488;
    swift_bridgeObjectRetain(v487);
    v489 = v485;
    v490 = v642;
    sub_1000F10F4(v484, v488, (uint64_t)sub_10010DED4, (uint64_t)v401);

    goto LABEL_255;
  }
  if (v652 == v114 && v653 == (void *)0x800000010050F080
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v112 + 3, 0x800000010050F080, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v628, v642, v657);
    v491 = swift_allocObject(&unk_1005C5378, 24, 7);
    v492 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v491 + 16) = v656;
    v493 = swift_allocObject(&unk_1005C53A0, 24, 7);
    *(_QWORD *)(v493 + 16) = v492;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v175 = swift_allocObject(&unk_1005C53C8, 17, 7);
    *(_BYTE *)(v175 + 16) = 64;
    v190 = swift_allocObject(&unk_1005C53F0, 17, 7);
    LOBYTE(v190[2].isa) = 8;
    v494 = swift_allocObject(&unk_1005C5418, 32, 7);
    *(_QWORD *)(v494 + 16) = sub_10010DF40;
    *(_QWORD *)(v494 + 24) = v491;
    v178 = swift_allocObject(&unk_1005C5440, 32, 7);
    *(_QWORD *)(v178 + 16) = sub_10010DB64;
    *(_QWORD *)(v178 + 24) = v494;
    v179 = swift_allocObject(&unk_1005C5468, 17, 7);
    *(_BYTE *)(v179 + 16) = 32;
    v180 = swift_allocObject(&unk_1005C5490, 17, 7);
    *(_BYTE *)(v180 + 16) = 8;
    v495 = swift_allocObject(&unk_1005C54B8, 32, 7);
    *(_QWORD *)(v495 + 16) = sub_10010DF44;
    *(_QWORD *)(v495 + 24) = v493;
    v182 = swift_allocObject(&unk_1005C54E0, 32, 7);
    *(_QWORD *)(v182 + 16) = sub_10010DB64;
    *(_QWORD *)(v182 + 24) = v495;
    v496 = swift_allocObject(v644, 128, 7);
    v127 = sub_1003FD974(v496, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v497 = sub_10010DB74;
    v497[1] = v175;
    v497[2] = sub_10010DB74;
    v497[3] = v190;
    v497[4] = sub_10010DB6C;
    v497[5] = v178;
    v497[6] = sub_10010DB74;
    v497[7] = v179;
    v497[8] = sub_10010DB74;
    v497[9] = v180;
    v497[10] = sub_10010DB68;
    v497[11] = v182;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v127);
    if (os_log_type_enabled(v645, (os_log_type_t)v643))
    {
      v498 = (uint8_t *)sub_100140610(22);
      v499 = swift_slowAlloc(8, -1);
      v659 = swift_slowAlloc(32, -1);
      v660 = v499;
      v641 = v659;
      v644 = v498;
      *(_WORD *)v498 = 514;
      *(_QWORD *)&v658[0] = v498 + 2;
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v175;
      v86 = v651;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      if (v86)
        goto LABEL_343;
      swift_release(v175);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v190;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v190);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v178;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v178);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v179;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v179);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v180;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v180);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v182;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v182);
      v86 = v645;
      v127 = (uint64_t)v644;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "SwitchLocationToSMBTest %@ %s", v644, 0x16u);
      v500 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v499, 1, v500);
      swift_slowDealloc(v499, -1, -1);
      v501 = v641;
      swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v501, -1, -1);
      sub_100140618(v127);

LABEL_264:
      ((void (*)(char *, uint64_t, __n128))v648)(v628, v657, v502);
      if (v646)
      {
        v454 = (void *)DOCDocumentSourceIdentifierSMBFileProvider;
        v455 = (uint64_t)v652;
        v456 = (uint64_t)v653;
        v457 = v656;
        v458 = 5;
        goto LABEL_234;
      }
      goto LABEL_331;
    }
LABEL_263:

    swift_release(v182);
    swift_release(v180);
    swift_release(v179);
    swift_release(v178);
    swift_release(v190);
    v502 = swift_release(v175);
    goto LABEL_264;
  }
  if (v652 == v114 && v653 == (void *)0x800000010050F060
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v112 + 3, 0x800000010050F060, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v629, v642, v657);
    v503 = swift_allocObject(&unk_1005C51C0, 24, 7);
    v504 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v503 + 16) = v656;
    v505 = swift_allocObject(&unk_1005C51E8, 24, 7);
    *(_QWORD *)(v505 + 16) = v504;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v94 = swift_allocObject(&unk_1005C5210, 17, 7);
    *(_BYTE *)(v94 + 16) = 64;
    v118 = (_BYTE *)swift_allocObject(&unk_1005C5238, 17, 7);
    v118[16] = 8;
    v506 = swift_allocObject(&unk_1005C5260, 32, 7);
    *(_QWORD *)(v506 + 16) = sub_10010DF40;
    *(_QWORD *)(v506 + 24) = v503;
    v96 = swift_allocObject(&unk_1005C5288, 32, 7);
    *(_QWORD *)(v96 + 16) = sub_10010DB64;
    *(_QWORD *)(v96 + 24) = v506;
    v120 = swift_allocObject(&unk_1005C52B0, 17, 7);
    LOBYTE(v120[2].isa) = 32;
    v112 = swift_allocObject(&unk_1005C52D8, 17, 7);
    *(_BYTE *)(v112 + 16) = 8;
    v507 = swift_allocObject(&unk_1005C5300, 32, 7);
    *(_QWORD *)(v507 + 16) = sub_10010DF44;
    *(_QWORD *)(v507 + 24) = v505;
    v114 = (_QWORD *)swift_allocObject(&unk_1005C5328, 32, 7);
    v114[2] = sub_10010DB64;
    v114[3] = v507;
    v508 = swift_allocObject(v644, 128, 7);
    v127 = sub_1003FD974(v508, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v509 = sub_10010DB74;
    v509[1] = v94;
    v509[2] = sub_10010DB74;
    v509[3] = v118;
    v509[4] = sub_10010DB6C;
    v509[5] = v96;
    v509[6] = sub_10010DB74;
    v509[7] = v120;
    v509[8] = sub_10010DB74;
    v509[9] = v112;
    v509[10] = sub_10010DB68;
    v509[11] = v114;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v127);
    if (os_log_type_enabled(v645, (os_log_type_t)v643))
    {
      v510 = (uint8_t *)sub_100140610(22);
      v511 = swift_slowAlloc(8, -1);
      v659 = swift_slowAlloc(32, -1);
      v660 = v511;
      v641 = v659;
      v644 = v510;
      *(_WORD *)v510 = 514;
      *(_QWORD *)&v658[0] = v510 + 2;
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v94;
      v86 = v651;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      if (v86)
        goto LABEL_343;
      swift_release(v94);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v118;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v118);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v96;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v96);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v120;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v120);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v112;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v112);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v114;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v114);
      v86 = v645;
      v127 = (uint64_t)v644;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "SwitchLocationToUSBTest %@ %s", v644, 0x16u);
      v512 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v511, 1, v512);
      swift_slowDealloc(v511, -1, -1);
      v513 = v641;
      swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v513, -1, -1);
      sub_100140618(v127);

      goto LABEL_274;
    }
LABEL_273:

    swift_release(v114);
    swift_release(v112);
    swift_release(v120);
    swift_release(v96);
    swift_release(v118);
    v514 = swift_release(v94);
LABEL_274:
    ((void (*)(char *, uint64_t, __n128))v648)(v629, v657, v514);
    if (!v646)
    {
LABEL_332:
      __break(1u);
      goto LABEL_333;
    }
    v515 = (void *)DOCDocumentSourceIdentifierExternalDeviceFileProvider;
    v401 = (_QWORD *)swift_allocObject(&unk_1005C5350, 48, 7);
    v516 = v647;
    v517 = (uint64_t)v652;
    v401[2] = v647;
    v401[3] = v517;
    v518 = v653;
    v519 = v656;
    v401[4] = v653;
    v401[5] = v519;
    swift_bridgeObjectRetain(v518);
    v520 = v516;
    v490 = v642;
    sub_1000F10F4(v515, v519, (uint64_t)sub_10010D000, (uint64_t)v401);
LABEL_255:

    goto LABEL_203;
  }
  v127 = v112 - 2;
  if (v652 == (_QWORD *)(v112 - 2) && v653 == (void *)0x800000010050F040
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v112 - 2, 0x800000010050F040, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v630, v642, v657);
    v521 = swift_allocObject(&unk_1005C5030, 24, 7);
    v522 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v521 + 16) = v656;
    v523 = swift_allocObject(&unk_1005C5058, 24, 7);
    *(_QWORD *)(v523 + 16) = v522;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v94 = swift_allocObject(&unk_1005C5080, 17, 7);
    *(_BYTE *)(v94 + 16) = 64;
    v118 = (_BYTE *)swift_allocObject(&unk_1005C50A8, 17, 7);
    v118[16] = 8;
    v524 = swift_allocObject(&unk_1005C50D0, 32, 7);
    *(_QWORD *)(v524 + 16) = sub_10010DF40;
    *(_QWORD *)(v524 + 24) = v521;
    v96 = swift_allocObject(&unk_1005C50F8, 32, 7);
    *(_QWORD *)(v96 + 16) = sub_10010DB64;
    *(_QWORD *)(v96 + 24) = v524;
    v120 = swift_allocObject(&unk_1005C5120, 17, 7);
    LOBYTE(v120[2].isa) = 32;
    v112 = swift_allocObject(&unk_1005C5148, 17, 7);
    *(_BYTE *)(v112 + 16) = 8;
    v525 = swift_allocObject(&unk_1005C5170, 32, 7);
    *(_QWORD *)(v525 + 16) = sub_10010DF44;
    *(_QWORD *)(v525 + 24) = v523;
    v114 = (_QWORD *)swift_allocObject(&unk_1005C5198, 32, 7);
    v114[2] = sub_10010DB64;
    v114[3] = v525;
    v526 = swift_allocObject(v644, 128, 7);
    v127 = sub_1003FD974(v526, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v527 = sub_10010DB74;
    v527[1] = v94;
    v527[2] = sub_10010DB74;
    v527[3] = v118;
    v527[4] = sub_10010DB6C;
    v527[5] = v96;
    v527[6] = sub_10010DB74;
    v527[7] = v120;
    v527[8] = sub_10010DB74;
    v527[9] = v112;
    v527[10] = sub_10010DB68;
    v527[11] = v114;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v127);
    if (os_log_type_enabled(v645, (os_log_type_t)v643))
    {
      v528 = (uint8_t *)sub_100140610(22);
      v529 = swift_slowAlloc(8, -1);
      v659 = swift_slowAlloc(32, -1);
      v660 = v529;
      v641 = v659;
      v644 = v528;
      *(_WORD *)v528 = 514;
      *(_QWORD *)&v658[0] = v528 + 2;
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v94;
      v86 = v651;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      if (v86)
        goto LABEL_343;
      swift_release(v94);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v118;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v118);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v96;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v96);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v120;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v120);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v112;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v112);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v114;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v114);
      v86 = v645;
      v127 = (uint64_t)v644;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "OpenQuickLookImage %@ %s", v644, 0x16u);
      v530 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v529, 1, v530);
      swift_slowDealloc(v529, -1, -1);
      v531 = v641;
      swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v531, -1, -1);
      sub_100140618(v127);

      goto LABEL_284;
    }
LABEL_283:

    swift_release(v114);
    swift_release(v112);
    swift_release(v120);
    swift_release(v96);
    swift_release(v118);
    v532 = swift_release(v94);
LABEL_284:
    ((void (*)(char *, uint64_t, __n128))v648)(v630, v657, v532);
    if (!v646)
    {
LABEL_333:
      __break(1u);
      goto LABEL_334;
    }
    v533 = (void *)DOCDocumentSourceIdentifierLocal;
    v534 = (uint64_t)v652;
    v535 = (uint64_t)v653;
    v536 = v646;
    v537 = v656;
    v538 = 6;
LABEL_286:
    sub_1000F99D8(v534, v535, v536, v533, v537, 0, v538);
    goto LABEL_130;
  }
  if (v652 == (_QWORD *)v96 && v653 == (void *)0x800000010050F020
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v96, 0x800000010050F020, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v631, v642, v657);
    v539 = swift_allocObject(&unk_1005C4EA0, 24, 7);
    v540 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v539 + 16) = v656;
    v541 = swift_allocObject(&unk_1005C4EC8, 24, 7);
    *(_QWORD *)(v541 + 16) = v540;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v198 = swift_allocObject(&unk_1005C4EF0, 17, 7);
    *(_BYTE *)(v198 + 16) = 64;
    v202 = swift_allocObject(&unk_1005C4F18, 17, 7);
    *(_BYTE *)(v202 + 16) = 8;
    v542 = swift_allocObject(&unk_1005C4F40, 32, 7);
    *(_QWORD *)(v542 + 16) = sub_10010DF40;
    *(_QWORD *)(v542 + 24) = v539;
    v201 = swift_allocObject(&unk_1005C4F68, 32, 7);
    *(_QWORD *)(v201 + 16) = sub_10010DB64;
    *(_QWORD *)(v201 + 24) = v542;
    v203 = swift_allocObject(&unk_1005C4F90, 17, 7);
    *(_BYTE *)(v203 + 16) = 32;
    v205 = swift_allocObject(&unk_1005C4FB8, 17, 7);
    *(_BYTE *)(v205 + 16) = 8;
    v543 = swift_allocObject(&unk_1005C4FE0, 32, 7);
    *(_QWORD *)(v543 + 16) = sub_10010DF44;
    *(_QWORD *)(v543 + 24) = v541;
    v199 = swift_allocObject(&unk_1005C5008, 32, 7);
    *(_QWORD *)(v199 + 16) = sub_10010DB64;
    *(_QWORD *)(v199 + 24) = v543;
    v544 = swift_allocObject(v644, 128, 7);
    v127 = sub_1003FD974(v544, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v545 = sub_10010DB74;
    v545[1] = v198;
    v545[2] = sub_10010DB74;
    v545[3] = v202;
    v545[4] = sub_10010DB6C;
    v545[5] = v201;
    v545[6] = sub_10010DB74;
    v545[7] = v203;
    v545[8] = sub_10010DB74;
    v545[9] = v205;
    v545[10] = sub_10010DB68;
    v545[11] = v199;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v127);
    if (os_log_type_enabled(v645, (os_log_type_t)v643))
    {
      v546 = (uint8_t *)sub_100140610(22);
      v547 = swift_slowAlloc(8, -1);
      v659 = swift_slowAlloc(32, -1);
      v660 = v547;
      v641 = v659;
      v644 = v546;
      *(_WORD *)v546 = 514;
      *(_QWORD *)&v658[0] = v546 + 2;
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v198;
      v86 = v651;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      if (v86)
        goto LABEL_343;
      swift_release(v198);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v202;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v202);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v201;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v201);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v203;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v203);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v205;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v205);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v199;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v199);
      v86 = v645;
      v127 = (uint64_t)v644;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "OpenQuickLookPDF %@ %s", v644, 0x16u);
      v548 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v547, 1, v548);
      swift_slowDealloc(v547, -1, -1);
      v549 = v641;
      swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v549, -1, -1);
      sub_100140618(v127);

      goto LABEL_295;
    }
LABEL_294:

    swift_release(v199);
    swift_release(v205);
    swift_release(v203);
    swift_release(v201);
    swift_release(v202);
    v550 = swift_release(v198);
LABEL_295:
    ((void (*)(char *, uint64_t, __n128))v648)(v631, v657, v550);
    if (!v646)
    {
LABEL_334:
      __break(1u);
      goto LABEL_335;
    }
    v533 = (void *)DOCDocumentSourceIdentifierLocal;
    v534 = (uint64_t)v652;
    v535 = (uint64_t)v653;
    v536 = v646;
    v537 = v656;
    v538 = 7;
    goto LABEL_286;
  }
  if (v652 == (_QWORD *)v128 && v653 == (void *)0x800000010050F000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v128, 0x800000010050F000, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v632, v642, v657);
    v551 = swift_allocObject(&unk_1005C4D10, 24, 7);
    v552 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v551 + 16) = v656;
    v553 = swift_allocObject(&unk_1005C4D38, 24, 7);
    *(_QWORD *)(v553 + 16) = v552;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v381 = swift_allocObject(&unk_1005C4D60, 17, 7);
    *(_BYTE *)(v381 + 16) = 64;
    v382 = swift_allocObject(&unk_1005C4D88, 17, 7);
    *(_BYTE *)(v382 + 16) = 8;
    v554 = swift_allocObject(&unk_1005C4DB0, 32, 7);
    *(_QWORD *)(v554 + 16) = sub_10010DF40;
    *(_QWORD *)(v554 + 24) = v551;
    v384 = swift_allocObject(&unk_1005C4DD8, 32, 7);
    *(_QWORD *)(v384 + 16) = sub_10010DB64;
    *(_QWORD *)(v384 + 24) = v554;
    v385 = swift_allocObject(&unk_1005C4E00, 17, 7);
    *(_BYTE *)(v385 + 16) = 32;
    v386 = swift_allocObject(&unk_1005C4E28, 17, 7);
    *(_BYTE *)(v386 + 16) = 8;
    v555 = swift_allocObject(&unk_1005C4E50, 32, 7);
    *(_QWORD *)(v555 + 16) = sub_10010DF44;
    *(_QWORD *)(v555 + 24) = v553;
    v388 = swift_allocObject(&unk_1005C4E78, 32, 7);
    *(_QWORD *)(v388 + 16) = sub_10010DB64;
    *(_QWORD *)(v388 + 24) = v555;
    v556 = swift_allocObject(v644, 128, 7);
    v127 = sub_1003FD974(v556, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v557 = sub_10010DB74;
    v557[1] = v381;
    v557[2] = sub_10010DB74;
    v557[3] = v382;
    v557[4] = sub_10010DB6C;
    v557[5] = v384;
    v557[6] = sub_10010DB74;
    v557[7] = v385;
    v557[8] = sub_10010DB74;
    v557[9] = v386;
    v557[10] = sub_10010DB68;
    v557[11] = v388;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v127);
    if (os_log_type_enabled(v645, (os_log_type_t)v643))
    {
      v558 = (uint8_t *)sub_100140610(22);
      v559 = swift_slowAlloc(8, -1);
      v659 = swift_slowAlloc(32, -1);
      v660 = v559;
      v641 = v659;
      v644 = v558;
      *(_WORD *)v558 = 514;
      *(_QWORD *)&v658[0] = v558 + 2;
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v381;
      v86 = v651;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      if (v86)
        goto LABEL_343;
      swift_release(v381);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v382;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v382);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v384;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v384);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v385;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v385);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v386;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v386);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v388;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v388);
      v86 = v645;
      v127 = (uint64_t)v644;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "CloseQuickLookImage %@ %s", v644, 0x16u);
      v560 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v559, 1, v560);
      swift_slowDealloc(v559, -1, -1);
      v561 = v641;
      swift_arrayDestroy(v641, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v561, -1, -1);
      sub_100140618(v127);

      goto LABEL_305;
    }
LABEL_304:

    swift_release(v388);
    swift_release(v386);
    swift_release(v385);
    swift_release(v384);
    swift_release(v382);
    v562 = swift_release(v381);
LABEL_305:
    ((void (*)(char *, uint64_t, __n128))v648)(v632, v657, v562);
    if (!v646)
    {
LABEL_335:
      __break(1u);
      goto LABEL_336;
    }
    v563 = (void *)DOCDocumentSourceIdentifierLocal;
    v564 = (uint64_t)v652;
    v565 = (uint64_t)v653;
    v566 = v646;
    v567 = v656;
    v568 = 6;
LABEL_307:
    sub_1000F9DA8(v564, v565, v566, v563, v567, 0, v568);
    goto LABEL_130;
  }
  if (v652 == (_QWORD *)(v112 - 3) && v653 == (void *)0x800000010050EFE0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v112 - 3, 0x800000010050EFE0, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v633, v642, v657);
    v569 = swift_allocObject(&unk_1005C4B80, 24, 7);
    v570 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v569 + 16) = v656;
    v571 = swift_allocObject(&unk_1005C4BA8, 24, 7);
    *(_QWORD *)(v571 + 16) = v570;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v233 = swift_allocObject(&unk_1005C4BD0, 17, 7);
    *(_BYTE *)(v233 + 16) = 64;
    v234 = swift_allocObject(&unk_1005C4BF8, 17, 7);
    *(_BYTE *)(v234 + 16) = 8;
    v572 = swift_allocObject(&unk_1005C4C20, 32, 7);
    *(_QWORD *)(v572 + 16) = sub_10010DF40;
    *(_QWORD *)(v572 + 24) = v569;
    v236 = swift_allocObject(&unk_1005C4C48, 32, 7);
    *(_QWORD *)(v236 + 16) = sub_10010DB64;
    *(_QWORD *)(v236 + 24) = v572;
    v237 = swift_allocObject(&unk_1005C4C70, 17, 7);
    *(_BYTE *)(v237 + 16) = 32;
    v238 = swift_allocObject(&unk_1005C4C98, 17, 7);
    *(_BYTE *)(v238 + 16) = 8;
    v573 = swift_allocObject(&unk_1005C4CC0, 32, 7);
    *(_QWORD *)(v573 + 16) = sub_10010DF44;
    *(_QWORD *)(v573 + 24) = v571;
    v240 = swift_allocObject(&unk_1005C4CE8, 32, 7);
    *(_QWORD *)(v240 + 16) = sub_10010DB64;
    *(_QWORD *)(v240 + 24) = v573;
    v574 = swift_allocObject(v644, 128, 7);
    v127 = sub_1003FD974(v574, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v575 = sub_10010DB74;
    v575[1] = v233;
    v575[2] = sub_10010DB74;
    v575[3] = v234;
    v575[4] = sub_10010DB6C;
    v575[5] = v236;
    v575[6] = sub_10010DB74;
    v575[7] = v237;
    v575[8] = sub_10010DB74;
    v575[9] = v238;
    v575[10] = sub_10010DB68;
    v575[11] = v240;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v127);
    if (os_log_type_enabled(v645, (os_log_type_t)v643))
    {
      v576 = (uint8_t *)sub_100140610(22);
      v577 = swift_slowAlloc(8, -1);
      v578 = swift_slowAlloc(32, -1);
      v659 = v578;
      v660 = v577;
      v644 = v576;
      *(_WORD *)v576 = 514;
      *(_QWORD *)&v658[0] = v576 + 2;
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v233;
      v86 = v651;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      if (v86)
        goto LABEL_343;
      swift_release(v233);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v234;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v234);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v236;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v236);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v237;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v237);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v238;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v238);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v240;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v240);
      v86 = v645;
      v127 = (uint64_t)v644;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "CloseQuickLookPDF %@ %s", v644, 0x16u);
      v579 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v577, 1, v579);
      swift_slowDealloc(v577, -1, -1);
      swift_arrayDestroy(v578, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v578, -1, -1);
      sub_100140618(v127);

      goto LABEL_316;
    }
LABEL_315:

    swift_release(v240);
    swift_release(v238);
    swift_release(v237);
    swift_release(v236);
    swift_release(v234);
    v580 = swift_release(v233);
LABEL_316:
    ((void (*)(char *, uint64_t, __n128))v648)(v633, v657, v580);
    if (!v646)
    {
LABEL_336:
      __break(1u);
      goto LABEL_337;
    }
    v563 = (void *)DOCDocumentSourceIdentifierLocal;
    v564 = (uint64_t)v652;
    v565 = (uint64_t)v653;
    v566 = v646;
    v567 = v656;
    v568 = 7;
    goto LABEL_307;
  }
  if (v652 == (_QWORD *)(v112 + 5) && v653 == (void *)0x800000010050EFC0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v112 + 5, 0x800000010050EFC0, v652, v653, 0) & 1) != 0)
  {
    ((void (*)(char *, NSObject *, uint64_t))v643)(v634, v642, v657);
    v581 = swift_allocObject(&unk_1005C49F0, 24, 7);
    v582 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
    *(_QWORD *)(v581 + 16) = v656;
    v583 = swift_allocObject(&unk_1005C4A18, 24, 7);
    *(_QWORD *)(v583 + 16) = v582;
    v642 = v86;
    v645 = Logger.logObject.getter(v642);
    LODWORD(v643) = static os_log_type_t.debug.getter(v645);
    v267 = swift_allocObject(&unk_1005C4A40, 17, 7);
    *(_BYTE *)(v267 + 16) = 64;
    v268 = swift_allocObject(&unk_1005C4A68, 17, 7);
    *(_BYTE *)(v268 + 16) = 8;
    v584 = swift_allocObject(&unk_1005C4A90, 32, 7);
    *(_QWORD *)(v584 + 16) = sub_10010DF40;
    *(_QWORD *)(v584 + 24) = v581;
    v270 = swift_allocObject(&unk_1005C4AB8, 32, 7);
    *(_QWORD *)(v270 + 16) = sub_10010DB64;
    *(_QWORD *)(v270 + 24) = v584;
    v271 = swift_allocObject(&unk_1005C4AE0, 17, 7);
    *(_BYTE *)(v271 + 16) = 32;
    v272 = swift_allocObject(&unk_1005C4B08, 17, 7);
    *(_BYTE *)(v272 + 16) = 8;
    v585 = swift_allocObject(&unk_1005C4B30, 32, 7);
    *(_QWORD *)(v585 + 16) = sub_10010DF44;
    *(_QWORD *)(v585 + 24) = v583;
    v274 = swift_allocObject(&unk_1005C4B58, 32, 7);
    *(_QWORD *)(v274 + 16) = sub_10010DB64;
    *(_QWORD *)(v274 + 24) = v585;
    v586 = swift_allocObject(v644, 128, 7);
    v587 = sub_1003FD974(v586, 6);
    v86 = (os_log_t)sub_10010DB74;
    *v588 = sub_10010DB74;
    v588[1] = v267;
    v588[2] = sub_10010DB74;
    v588[3] = v268;
    v588[4] = sub_10010DB6C;
    v588[5] = v270;
    v588[6] = sub_10010DB74;
    v588[7] = v271;
    v588[8] = sub_10010DB74;
    v588[9] = v272;
    v588[10] = sub_10010DB68;
    v588[11] = v274;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease(v587);
    if (os_log_type_enabled(v645, (os_log_type_t)v643))
    {
      v589 = (uint8_t *)sub_100140610(22);
      v590 = swift_slowAlloc(8, -1);
      v591 = swift_slowAlloc(32, -1);
      v659 = v591;
      v660 = v590;
      *(_WORD *)v589 = 514;
      *(_QWORD *)&v658[0] = v589 + 2;
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v267;
      v86 = v651;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      if (v86)
        goto LABEL_343;
      swift_release(v267);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v268;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v268);
      *(_QWORD *)&v662 = sub_10010DB6C;
      *((_QWORD *)&v662 + 1) = v270;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v270);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v271;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v271);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v272;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v272);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v274;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v274);
      v86 = v645;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "SwipeQuickLookPDFAndImage %@ %s", v589, 0x16u);
      v592 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v590, 1, v592);
      swift_slowDealloc(v590, -1, -1);
      swift_arrayDestroy(v591, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v591, -1, -1);
      sub_100140618((uint64_t)v589);

LABEL_327:
      ((void (*)(char *, uint64_t, __n128))v648)(v634, v657, v593);
      if (v646)
      {
        sub_1000FA858((uint64_t)v652, (uint64_t)v653, v646, DOCDocumentSourceIdentifierLocal, v656, 0, 8);
        goto LABEL_130;
      }
      goto LABEL_344;
    }
LABEL_326:

    swift_release(v274);
    swift_release(v272);
    swift_release(v271);
    swift_release(v270);
    swift_release(v268);
    v593 = swift_release(v267);
    goto LABEL_327;
  }
LABEL_337:
  if ((v652 != (_QWORD *)v127 || v653 != (void *)0x800000010050EFA0)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v127, 0x800000010050EFA0, v652, v653, 0) & 1) == 0)
  {
    goto LABEL_345;
  }
  ((void (*)(char *, NSObject *, uint64_t))v643)(v635, v642, v657);
  v594 = swift_allocObject(&unk_1005C4860, 24, 7);
  v595 = (void (**)(_QWORD, _QWORD, _QWORD))v656;
  *(_QWORD *)(v594 + 16) = v656;
  v596 = swift_allocObject(&unk_1005C4888, 24, 7);
  *(_QWORD *)(v596 + 16) = v595;
  v642 = v86;
  v645 = Logger.logObject.getter(v642);
  LODWORD(v643) = static os_log_type_t.debug.getter(v645);
  v597 = swift_allocObject(&unk_1005C48B0, 17, 7);
  *(_BYTE *)(v597 + 16) = 64;
  v598 = swift_allocObject(&unk_1005C48D8, 17, 7);
  *(_BYTE *)(v598 + 16) = 8;
  v599 = swift_allocObject(&unk_1005C4900, 32, 7);
  *(_QWORD *)(v599 + 16) = sub_10010DF40;
  *(_QWORD *)(v599 + 24) = v594;
  v600 = swift_allocObject(&unk_1005C4928, 32, 7);
  *(_QWORD *)(v600 + 16) = sub_10006657C;
  *(_QWORD *)(v600 + 24) = v599;
  v601 = swift_allocObject(&unk_1005C4950, 17, 7);
  *(_BYTE *)(v601 + 16) = 32;
  v602 = swift_allocObject(&unk_1005C4978, 17, 7);
  *(_BYTE *)(v602 + 16) = 8;
  v603 = swift_allocObject(&unk_1005C49A0, 32, 7);
  *(_QWORD *)(v603 + 16) = sub_10010DF44;
  *(_QWORD *)(v603 + 24) = v596;
  v604 = swift_allocObject(&unk_1005C49C8, 32, 7);
  *(_QWORD *)(v604 + 16) = sub_10010DB64;
  *(_QWORD *)(v604 + 24) = v603;
  v605 = swift_allocObject(v644, 128, 7);
  v606 = sub_1003FD974(v605, 6);
  *v607 = sub_10010DB74;
  v607[1] = v597;
  v607[2] = sub_10010DB74;
  v607[3] = v598;
  v607[4] = sub_10010CE50;
  v607[5] = v600;
  v607[6] = sub_10010DB74;
  v607[7] = v601;
  v607[8] = sub_10010DB74;
  v607[9] = v602;
  v607[10] = sub_10010DB68;
  v607[11] = v604;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease(v606);
  if (os_log_type_enabled(v645, (os_log_type_t)v643))
  {
    v608 = (uint8_t *)sub_100140610(22);
    v609 = swift_slowAlloc(8, -1);
    v610 = swift_slowAlloc(32, -1);
    v659 = v610;
    v660 = v609;
    *(_WORD *)v608 = 514;
    *(_QWORD *)&v658[0] = v608 + 2;
    *(_QWORD *)&v662 = sub_10010DB74;
    *((_QWORD *)&v662 + 1) = v597;
    v86 = v651;
    sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
    if (!v86)
    {
      swift_release(v597);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v598;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v598);
      *(_QWORD *)&v662 = sub_10010CE50;
      *((_QWORD *)&v662 + 1) = v600;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v600);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v601;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v601);
      *(_QWORD *)&v662 = sub_10010DB74;
      *((_QWORD *)&v662 + 1) = v602;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v602);
      *(_QWORD *)&v662 = sub_10010DB68;
      *((_QWORD *)&v662 + 1) = v604;
      sub_100163C08((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v662, (uint64_t)v658, (uint64_t)&v660, (uint64_t)&v659);
      swift_release(v604);
      v611 = v645;
      _os_log_impl((void *)&_mh_execute_header, v645, (os_log_type_t)v643, "ZoomQuickLookImage %@ %s", v608, 0x16u);
      v612 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v609, 1, v612);
      swift_slowDealloc(v609, -1, -1);
      swift_arrayDestroy(v610, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v610, -1, -1);
      sub_100140618((uint64_t)v608);

      goto LABEL_347;
    }
    goto LABEL_343;
  }

  swift_release(v604);
  swift_release(v602);
  swift_release(v601);
  swift_release(v600);
  swift_release(v598);
  v613 = swift_release(v597);
LABEL_347:
  result = ((uint64_t (*)(char *, uint64_t, __n128))v648)(v635, v657, v613);
  if (v646)
  {
    sub_1000FB150((uint64_t)v652, (uint64_t)v653, v646, DOCDocumentSourceIdentifierLocal, v656, 0, 6);
    goto LABEL_130;
  }
  __break(1u);
  return result;
}

uint64_t sub_10010655C(void *a1)
{
  uint64_t v1;
  id v3;

  v3 = objc_msgSend(a1, "tabBarController");
  v1 = sub_10006922C((uint64_t *)&unk_100643500);
  return String.init<A>(describing:)(&v3, v1);
}

id sub_100106650()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DOCApplication();
  return objc_msgSendSuper2(&v2, "dealloc");
}

BOOL sub_1001066CC()
{
  _QWORD *v0;
  _BYTE *v1;
  _BYTE v3[24];

  v1 = (_BYTE *)(*v0 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_gatheringThumbnails);
  swift_beginAccess(v1, v3, 0, 0);
  return (*v1 & 1) == 0;
}

id sub_100106720()
{
  id *v0;
  char *v1;
  id result;

  v1 = (char *)*v0;
  objc_msgSend(*v0, "loadViewIfNeeded");
  result = *(id *)&v1[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
  if (result)
    return result;
  __break(1u);
  return result;
}

uint64_t sub_100106764()
{
  return sub_10010C458((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000FB180);
}

id sub_100106770(uint64_t a1, unint64_t a2, void *a3, int a4, int a5, void *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  id result;
  void *v27;
  char *v28;
  char v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  void **v39;
  id v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  void **v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  void **v50;
  uint64_t v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  void *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  NSObject *v78;
  NSObject *v79;
  os_log_type_t v80;
  uint64_t v81;
  double v82;
  void **v83;
  uint64_t v84;
  NSString v85;
  unint64_t v86;
  void *v87;
  id v88;
  NSObject *v89;
  NSString v90;
  id v91;
  double v92;
  uint64_t v93;
  id v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint8_t *v107;
  unint64_t v108;
  void **v109;
  uint64_t v110;
  void **aBlock;
  _QWORD v112[4];
  uint64_t v113;
  __int128 v114[2];
  char v115[24];
  _QWORD v116[5];

  v106 = a6;
  LODWORD(v108) = a5;
  LODWORD(v107) = a4;
  v109 = (void **)a1;
  v96 = type metadata accessor for DispatchWorkItemFlags(0);
  v105 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v95 = (char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for DispatchQoS(0);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v102 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for DispatchTimeInterval(0);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v11 = (uint64_t *)((char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v101 = type metadata accessor for DispatchTime(0);
  v97 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v13 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v100 = (char *)&v93 - v15;
  v110 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v18 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v93 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v93 - v23;
  v116[3] = type metadata accessor for DOCItemCollectionViewController(0);
  v116[4] = &off_1005C34B0;
  v116[0] = a3;
  v25 = a3;
  result = objc_msgSend(v25, "loadViewIfNeeded");
  v27 = *(void **)&v25[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView];
  if (v27)
  {
    v28 = &v25[OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_gatheringThumbnails];
    swift_beginAccess(v28, v115, 0, 0);
    v29 = *v28;
    v30 = v27;
    v31 = v30;
    if ((v29 & 1) != 0)
    {
      v94 = v30;
      v32 = Logger.Tests.unsafeMutableAddressor(v30);
      v33 = v16;
      v34 = v110;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v24, v32, v110);
      v35 = swift_bridgeObjectRetain_n(a2, 2);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.debug.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        v93 = v33;
        v38 = (uint8_t *)swift_slowAlloc(12, -1);
        v39 = (void **)swift_slowAlloc(32, -1);
        aBlock = v39;
        *(_DWORD *)v38 = 136315138;
        swift_bridgeObjectRetain(a2);
        *(_QWORD *)&v114[0] = sub_1000544FC((uint64_t)v109, a2, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v114, (char *)v114 + 8);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "waiting before starting test %s. items or thumbnails still gathering", v38, 0xCu);
        swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v38, -1, -1);

        (*(void (**)(char *, uint64_t))(v93 + 8))(v24, v110);
      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v24, v34);
      }
      v56 = v106;
      v57 = v96;
      v58 = v95;
      v59 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
      v110 = static OS_dispatch_queue.main.getter(v59);
      static DispatchTime.now()(v110);
      *v11 = 1;
      v60 = v98;
      v61 = v99;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v98 + 104))(v11, enum case for DispatchTimeInterval.seconds(_:), v99);
      v62 = v100;
      + infix(_:_:)(v13, v11);
      (*(void (**)(_QWORD *, uint64_t))(v60 + 8))(v11, v61);
      v63 = *(void (**)(char *, uint64_t))(v97 + 8);
      v64 = v101;
      v63(v13, v101);
      sub_100092328((uint64_t)v116, (uint64_t)v114);
      v65 = swift_allocObject(&unk_1005C4068, 88, 7);
      v66 = (uint64_t)v109;
      *(_QWORD *)(v65 + 16) = v56;
      *(_QWORD *)(v65 + 24) = v66;
      *(_QWORD *)(v65 + 32) = a2;
      sub_1000E85C4(v114, v65 + 40);
      v67 = v108;
      *(_DWORD *)(v65 + 80) = (_DWORD)v107;
      *(_DWORD *)(v65 + 84) = v67;
      v112[3] = sub_10010C8F8;
      v113 = v65;
      aBlock = _NSConcreteStackBlock;
      v112[0] = 1107296256;
      v112[1] = sub_10004A82C;
      v112[2] = &unk_1005C4080;
      v68 = _Block_copy(&aBlock);
      v69 = v113;
      swift_bridgeObjectRetain(a2);
      v70 = v56;
      v71 = swift_release(v69);
      v72 = v102;
      static DispatchQoS.unspecified.getter(v71);
      aBlock = (void **)_swiftEmptyArrayStorage;
      v73 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v74 = sub_10006922C((uint64_t *)&unk_100647540);
      v75 = sub_1000791AC();
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v74, v75, v57, v73);
      v76 = (void *)v110;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v62, v72, v58, v68);
      _Block_release(v68);

      (*(void (**)(char *, uint64_t))(v105 + 8))(v58, v57);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v72, v104);
      v63(v62, v64);
      return (id)sub_100068588(v116);
    }
    objc_msgSend(v30, "layoutIfNeeded");
    v40 = objc_msgSend(v31, "contentSize");
    v42 = v41;
    v43 = Logger.Tests.unsafeMutableAddressor(v40);
    v44 = v16;
    v45 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    if (v42 >= 20.0)
    {
      v77 = v110;
      v45(v18, v43, v110);
      v78 = v31;
      v79 = Logger.logObject.getter(v78);
      v80 = static os_log_type_t.debug.getter(v79);
      if (os_log_type_enabled(v79, v80))
      {
        v81 = swift_slowAlloc(24, -1);
        *(_DWORD *)v81 = 67109632;
        LODWORD(aBlock) = (_DWORD)v107;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4);
        *(_WORD *)(v81 + 8) = 1024;
        LODWORD(aBlock) = v108;
        *(_QWORD *)&v82 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4).n128_u64[0];
        *(_WORD *)(v81 + 14) = 2048;
        -[NSObject contentSize](v78, "contentSize", v82);
        aBlock = v83;
        v44 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v112);

        _os_log_impl((void *)&_mh_execute_header, v79, v80, "performing scroll test. %d iterations, %d delta, content size is %f", (uint8_t *)v81, 0x18u);
        v84 = v81;
        v77 = v110;
        swift_slowDealloc(v84, -1, -1);
      }
      else
      {

        v79 = v78;
      }

      (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v77);
      aBlock = v109;
      v112[0] = a2;
      *(_QWORD *)&v114[0] = 0x6C61727574614ELL;
      *((_QWORD *)&v114[0] + 1) = 0xE700000000000000;
      v86 = sub_10008B9BC();
      if ((StringProtocol.contains<A>(_:)(v114, &type metadata for String, &type metadata for String, v86, v86) & 1) != 0)
      {
        v87 = (void *)objc_opt_self(RPTTestRunner);
        if (objc_msgSend(v87, "isRecapAvailable"))
        {
          v88 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
          v89 = v78;
          swift_bridgeObjectRetain(a2);
          v90 = String._bridgeToObjectiveC()();
          v91 = objc_msgSend(v88, "initWithTestName:scrollView:completionHandler:", v90, v89, 0, swift_bridgeObjectRelease(a2).n128_f64[0]);

          objc_msgSend(v87, "runTestWithParameters:", v91);
          return (id)sub_100068588(v116);
        }
      }
      -[NSObject _effectiveContentInset](v78, "_effectiveContentInset");
      -[NSObject setContentOffset:](v78, "setContentOffset:", 0.0, -v92);
      v85 = String._bridgeToObjectiveC()();
      -[NSObject _performScrollTest:iterations:delta:](v78, "_performScrollTest:iterations:delta:", v85, v107, v108);

    }
    else
    {
      v45(v21, v43, v110);
      v46 = v31;
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.error.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v108 = a2;
        v49 = (uint8_t *)swift_slowAlloc(12, -1);
        v105 = swift_slowAlloc(8, -1);
        v107 = v49;
        *(_DWORD *)v49 = 138412290;
        aBlock = v46;
        v50 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v112);
        v51 = v105;
        *(_QWORD *)v105 = v27;

        v44 = v16;
        v52 = v48;
        v53 = v107;
        _os_log_impl((void *)&_mh_execute_header, v47, v52, "Cannot perform scroll test on empty collection view %@", v107, 0xCu);
        v54 = sub_10006922C(&qword_100643AB0);
        swift_arrayDestroy(v51, 1, v54);
        swift_slowDealloc(v51, -1, -1);
        swift_slowDealloc(v53, -1, -1);
      }
      else
      {

        v47 = v46;
      }
      v55 = v106;

      (*(void (**)(char *, uint64_t))(v44 + 8))(v21, v110);
      v85 = String._bridgeToObjectiveC()();
      objc_msgSend(v55, "failedTest:", v85);

    }
    return (id)sub_100068588(v116);
  }
  __break(1u);
  return result;
}

uint64_t sub_10010727C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (**v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  double v30;
  double v31;
  uint64_t v32;
  void (*v33)(void (**)(char *, uint64_t), uint64_t, uint64_t);
  void (**v34)(char *, uint64_t);
  uint64_t v35;
  void **v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  void ***v40;
  void **v41;
  uint64_t v42;
  void ***v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  void **v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  void **v60;
  void **v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  _QWORD *v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  id v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  void *v87;
  void *v88;
  NSString v89;
  unint64_t v90;
  void *v91;
  id v92;
  void **v93;
  NSString v94;
  id v95;
  double v96;
  uint64_t v98;
  char *v99;
  char *v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  _QWORD *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  void (**v113)(char *, uint64_t);
  unsigned int v114;
  unsigned int v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  void **v119;
  void **aBlock;
  _QWORD v121[4];
  uint64_t v122;
  __int128 v123[2];
  _QWORD v124[5];

  v116 = a6;
  v115 = a5;
  v114 = a4;
  v118 = a2;
  v119 = (void **)a1;
  v104 = type metadata accessor for DispatchWorkItemFlags(0);
  v113 = *(void (***)(char *, uint64_t))(v104 - 8);
  __chkstk_darwin(v104);
  v112 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for DispatchQoS(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v109 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for DispatchTimeInterval(0);
  v102 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v108 = (uint64_t *)((char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v105 = type metadata accessor for DispatchTime(0);
  v107 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v14 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v98 - v16;
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (void (**)(char *, uint64_t))((char *)&v98 - v23);
  __chkstk_darwin(v25);
  v106 = (char *)&v98 - v26;
  v124[3] = a7;
  v124[4] = a8;
  sub_10006CBAC(v124);
  (*(void (**)(void))(*(_QWORD *)(a7 - 8) + 16))();
  v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a8 + 16))(a7, a8);
  v28 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 8))(a7, a8);
  if ((v28 & 1) != 0)
  {
    v113 = v24;
    v117 = v18;
    objc_msgSend(v27, "layoutIfNeeded");
    v29 = objc_msgSend(v27, "contentSize");
    v31 = v30;
    v32 = Logger.Tests.unsafeMutableAddressor(v29);
    v33 = *(void (**)(void (**)(char *, uint64_t), uint64_t, uint64_t))(v19 + 16);
    if (v31 < 20.0)
    {
      v34 = v113;
      v35 = v117;
      v33(v113, v32, v117);
      v36 = v27;
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.error.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc(12, -1);
        v40 = (void ***)swift_slowAlloc(8, -1);
        *(_DWORD *)v39 = 138412290;
        aBlock = v36;
        v41 = v36;
        v35 = v117;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v121);
        *v40 = v36;

        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Cannot perform scroll test on empty collection view %@", v39, 0xCu);
        v42 = sub_10006922C(&qword_100643AB0);
        swift_arrayDestroy(v40, 1, v42);
        v43 = v40;
        v34 = v113;
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v39, -1, -1);
      }
      else
      {

        v37 = v36;
      }
      v88 = v116;

      (*(void (**)(_QWORD, uint64_t))(v19 + 8))(v34, v35);
      v89 = String._bridgeToObjectiveC()();
      objc_msgSend(v88, "failedTest:", v89);
      goto LABEL_18;
    }
    v53 = v19;
    v33((void (**)(char *, uint64_t))v21, v32, v117);
    v36 = v27;
    v54 = Logger.logObject.getter(v36);
    v55 = static os_log_type_t.debug.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = swift_slowAlloc(24, -1);
      *(_DWORD *)v56 = 67109632;
      v57 = v114;
      LODWORD(aBlock) = v114;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4);
      *(_WORD *)(v56 + 8) = 1024;
      v58 = v115;
      LODWORD(aBlock) = v115;
      *(_QWORD *)&v59 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4).n128_u64[0];
      *(_WORD *)(v56 + 14) = 2048;
      objc_msgSend(v36, "contentSize", v59);
      aBlock = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v121);

      _os_log_impl((void *)&_mh_execute_header, v54, v55, "performing scroll test. %d iterations, %d delta, content size is %f", (uint8_t *)v56, 0x18u);
      swift_slowDealloc(v56, -1, -1);
      v62 = v118;
      v61 = v119;
    }
    else
    {

      v54 = v36;
      v62 = v118;
      v61 = v119;
      v58 = v115;
      v57 = v114;
    }

    (*(void (**)(char *, uint64_t))(v53 + 8))(v21, v117);
    aBlock = v61;
    v121[0] = v62;
    *(_QWORD *)&v123[0] = 0x6C61727574614ELL;
    *((_QWORD *)&v123[0] + 1) = 0xE700000000000000;
    v90 = sub_10008B9BC();
    if ((StringProtocol.contains<A>(_:)(v123, &type metadata for String, &type metadata for String, v90, v90) & 1) == 0
      || (v91 = (void *)objc_opt_self(RPTTestRunner), !objc_msgSend(v91, "isRecapAvailable")))
    {
      objc_msgSend(v36, "_effectiveContentInset");
      objc_msgSend(v36, "setContentOffset:", 0.0, -v96);
      v89 = String._bridgeToObjectiveC()();
      objc_msgSend(v36, "_performScrollTest:iterations:delta:", v89, v57, v58);
LABEL_18:

      return sub_100068588(v124);
    }
    v92 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
    swift_bridgeObjectRetain(v62);
    v93 = v36;
    v94 = String._bridgeToObjectiveC()();
    v95 = objc_msgSend(v92, "initWithTestName:scrollView:completionHandler:", v94, v93, 0, swift_bridgeObjectRelease(v62).n128_f64[0]);

    objc_msgSend(v91, "runTestWithParameters:", v95);
  }
  else
  {
    v100 = v14;
    v101 = v27;
    v99 = v17;
    v44 = v105;
    v45 = Logger.Tests.unsafeMutableAddressor(v28);
    v46 = v106;
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v106, v45, v18);
    v47 = v118;
    v48 = swift_bridgeObjectRetain_n(v118, 2);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.debug.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      v117 = v18;
      v51 = (uint8_t *)swift_slowAlloc(12, -1);
      v52 = (void **)swift_slowAlloc(32, -1);
      aBlock = v52;
      *(_DWORD *)v51 = 136315138;
      swift_bridgeObjectRetain(v47);
      *(_QWORD *)&v123[0] = sub_1000544FC((uint64_t)v119, v47, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v123, (char *)v123 + 8);
      swift_bridgeObjectRelease_n(v47, 3);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "waiting before starting test %s. items or thumbnails still gathering", v51, 0xCu);
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v51, -1, -1);

      (*(void (**)(char *, uint64_t))(v19 + 8))(v46, v117);
    }
    else
    {

      swift_bridgeObjectRelease_n(v47, 2);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v46, v18);
    }
    v63 = v115;
    v64 = v114;
    v65 = v104;
    v66 = v44;
    v67 = v99;
    v68 = v103;
    v69 = v102;
    v70 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
    v118 = static OS_dispatch_queue.main.getter(v70);
    v71 = v100;
    static DispatchTime.now()(v118);
    v72 = v108;
    *v108 = 1;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v69 + 104))(v72, enum case for DispatchTimeInterval.seconds(_:), v68);
    + infix(_:_:)(v71, v72);
    (*(void (**)(_QWORD *, uint64_t))(v69 + 8))(v72, v68);
    v73 = *(void (**)(char *, uint64_t))(v107 + 8);
    v73(v71, v66);
    sub_100092328((uint64_t)v124, (uint64_t)v123);
    v74 = v66;
    v75 = swift_allocObject(&unk_1005C40B8, 88, 7);
    v76 = v116;
    v77 = (uint64_t)v119;
    *(_QWORD *)(v75 + 16) = v116;
    *(_QWORD *)(v75 + 24) = v77;
    *(_QWORD *)(v75 + 32) = v47;
    sub_1000E85C4(v123, v75 + 40);
    *(_DWORD *)(v75 + 80) = v64;
    *(_DWORD *)(v75 + 84) = v63;
    v121[3] = sub_10010C8F8;
    v122 = v75;
    aBlock = _NSConcreteStackBlock;
    v121[0] = 1107296256;
    v121[1] = sub_10004A82C;
    v121[2] = &unk_1005C40D0;
    v78 = _Block_copy(&aBlock);
    v79 = v122;
    swift_bridgeObjectRetain(v47);
    v80 = v76;
    swift_release(v79);
    v81 = v109;
    static DispatchQoS.unspecified.getter(v82);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v83 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v84 = sub_10006922C((uint64_t *)&unk_100647540);
    v85 = sub_1000791AC();
    v86 = v112;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v84, v85, v65, v83);
    v87 = (void *)v118;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v67, v81, v86, v78);
    _Block_release(v78);

    v113[1](v86, v65);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v81, v111);
    v73(v67, v74);
  }
  return sub_100068588(v124);
}

void sub_100107D38(char a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  __n128 v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t aBlock;
  _QWORD v36[4];
  uint64_t v37;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = Logger.Tests.unsafeMutableAddressor(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v10, v5);
  v11 = v2;
  v12 = Logger.logObject.getter(v11);
  v14 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v12, v14))
  {
    v15 = swift_slowAlloc(32, -1);
    v33 = swift_slowAlloc(32, -1);
    v34 = v33;
    *(_DWORD *)v15 = 134218498;
    aBlock = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v36);
    *(_WORD *)(v15 + 12) = 2080;
    v31 = v15 + 14;
    v16 = *(_QWORD *)&v11[OBJC_IVAR____TtC5Files14DOCApplication_currentTestName + 8];
    aBlock = *(_QWORD *)&v11[OBJC_IVAR____TtC5Files14DOCApplication_currentTestName];
    v36[0] = v16;
    swift_bridgeObjectRetain(v16);
    v17 = sub_10006922C(&qword_100648C80);
    v32 = v5;
    v18 = String.init<A>(describing:)(&aBlock, v17);
    v19 = a1;
    v20 = a2;
    v22 = v21;
    aBlock = sub_1000544FC(v18, v21, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v36);

    v23 = v22;
    a2 = v20;
    a1 = v19;
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v15 + 22) = 2048;
    v24 = v11[OBJC_IVAR____TtC5Files14DOCApplication_finishedLaunchTest];

    aBlock = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v36);

    _os_log_impl((void *)&_mh_execute_header, v12, v14, "tabbedBrowserViewControllerDidFinishLoading %lu ; currentTestName %s ; finishedLaunchTest %ld",
      (uint8_t *)v15,
      0x20u);
    v25 = v33;
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v32);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  v26 = (void *)objc_opt_self(DOCUISession);
  v27 = swift_allocObject(&unk_1005C7790, 40, 7);
  *(_BYTE *)(v27 + 16) = a1 & 1;
  *(_QWORD *)(v27 + 24) = v11;
  *(_QWORD *)(v27 + 32) = a2;
  v36[3] = sub_10010D95C;
  v37 = v27;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v36[0] = 1107296256;
  v36[1] = sub_10004A82C;
  v36[2] = &unk_1005C77A8;
  v28 = _Block_copy(&aBlock);
  v29 = v37;
  v30 = v11;
  swift_release(v29);
  objc_msgSend(v26, "performAfterCATransactionCommits:", v28);
  _Block_release(v28);
}

uint64_t sub_10010804C(uint64_t a1)
{
  unint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD v31[5];
  __int128 v32;
  __int128 v33;

  if (!a1)
    goto LABEL_71;
  v29 = 0x6F69746172657469;
  v30 = 0xEA0000000000736ELL;
  AnyHashable.init<A>(_:)(&v29, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v2 = sub_100067654((uint64_t)v31), (v3 & 1) != 0))
  {
    sub_100069BD8(*(_QWORD *)(a1 + 56) + 32 * v2, (uint64_t)&v32);
  }
  else
  {
    v32 = 0u;
    v33 = 0u;
  }
  sub_100067748((uint64_t)v31);
  if (!*((_QWORD *)&v33 + 1))
    goto LABEL_72;
  if ((swift_dynamicCast(&v29, &v32, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_74;
  v4 = v30;
  v5 = HIBYTE(v30) & 0xF;
  v6 = v29 & 0xFFFFFFFFFFFFLL;
  if ((v30 & 0x2000000000000000) != 0)
    v7 = HIBYTE(v30) & 0xF;
  else
    v7 = v29 & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    swift_bridgeObjectRelease(v30);
    goto LABEL_74;
  }
  if ((v30 & 0x1000000000000000) != 0)
  {
    v11 = sub_1002D2258(v29, v30, 10);
    swift_bridgeObjectRelease(v4);
    if ((v11 & 0x100000000) != 0)
      goto LABEL_74;
    goto LABEL_42;
  }
  if ((v30 & 0x2000000000000000) != 0)
  {
    v31[0] = v29;
    v31[1] = v30 & 0xFFFFFFFFFFFFFFLL;
    if (v29 == 43)
    {
      if (!v5)
      {
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        sub_10000CB4C((uint64_t)&v32, &qword_100642730);
        goto LABEL_74;
      }
      if (v5 != 1)
      {
        LODWORD(v11) = (BYTE1(v29) - 48);
        if (v11 <= 9)
        {
          if (v5 == 2)
            goto LABEL_40;
          if ((BYTE2(v29) - 48) <= 9u)
          {
            LODWORD(v11) = 10 * v11 + (BYTE2(v29) - 48);
            v13 = v5 - 3;
            if (v13)
            {
              v14 = (unsigned __int8 *)v31 + 3;
              while (1)
              {
                v15 = *v14 - 48;
                if (v15 > 9)
                  goto LABEL_38;
                v16 = 10 * (int)v11;
                if (v16 != (int)v16)
                  goto LABEL_38;
                LODWORD(v11) = v16 + v15;
                if (__OFADD__((_DWORD)v16, v15))
                  goto LABEL_38;
                v10 = 0;
                ++v14;
                if (!--v13)
                  goto LABEL_41;
              }
            }
            goto LABEL_40;
          }
        }
      }
    }
    else
    {
      if (v29 == 45)
      {
        if (v5)
        {
          if (v5 == 1)
            goto LABEL_38;
          v12 = (BYTE1(v29) - 48);
          if (v12 > 9)
            goto LABEL_38;
          if (v5 == 2)
          {
            v10 = 0;
            LODWORD(v11) = -v12;
            goto LABEL_41;
          }
          if ((BYTE2(v29) - 48) > 9u)
            goto LABEL_38;
          LODWORD(v11) = -10 * v12 - (BYTE2(v29) - 48);
          v25 = v5 - 3;
          if (v25)
          {
            v26 = (unsigned __int8 *)v31 + 3;
            while (1)
            {
              v27 = *v26 - 48;
              if (v27 > 9)
                goto LABEL_38;
              v28 = 10 * (int)v11;
              if (v28 != (int)v28)
                goto LABEL_38;
              LODWORD(v11) = v28 - v27;
              if (__OFSUB__((_DWORD)v28, v27))
                goto LABEL_38;
              v10 = 0;
              ++v26;
              if (!--v25)
                goto LABEL_41;
            }
          }
LABEL_40:
          v10 = 0;
          goto LABEL_41;
        }
        __break(1u);
        goto LABEL_70;
      }
      if (v5)
      {
        LODWORD(v11) = (v29 - 48);
        if (v11 <= 9)
        {
          if (v5 == 1)
            goto LABEL_40;
          if ((BYTE1(v29) - 48) <= 9u)
          {
            LODWORD(v11) = 10 * v11 + (BYTE1(v29) - 48);
            v21 = v5 - 2;
            if (v21)
            {
              v22 = (unsigned __int8 *)v31 + 2;
              while (1)
              {
                v23 = *v22 - 48;
                if (v23 > 9)
                  goto LABEL_38;
                v24 = 10 * (int)v11;
                if (v24 != (int)v24)
                  goto LABEL_38;
                LODWORD(v11) = v24 + v23;
                if (__OFADD__((_DWORD)v24, v23))
                  goto LABEL_38;
                v10 = 0;
                ++v22;
                if (!--v21)
                  goto LABEL_41;
              }
            }
            goto LABEL_40;
          }
        }
      }
    }
LABEL_38:
    LODWORD(v11) = 0;
    v10 = 1;
    goto LABEL_41;
  }
  if ((v29 & 0x1000000000000000) != 0)
    v8 = (unsigned __int8 *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 32);
  else
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v29, v30);
  v9 = sub_1002D2244(v8, v6, 10);
  LOBYTE(v32) = BYTE4(v9) & 1;
  v10 = BYTE4(v9) & 1;
  LODWORD(v11) = (_DWORD)v9;
LABEL_41:
  swift_bridgeObjectRelease(v4);
  if ((v10 & 1) != 0)
    goto LABEL_74;
LABEL_42:
  v29 = 0x74657366666FLL;
  v30 = 0xE600000000000000;
  AnyHashable.init<A>(_:)(&v29, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v17 = sub_100067654((uint64_t)v31), (v18 & 1) != 0))
  {
    sub_100069BD8(*(_QWORD *)(a1 + 56) + 32 * v17, (uint64_t)&v32);
  }
  else
  {
    v32 = 0u;
    v33 = 0u;
  }
  sub_100067748((uint64_t)v31);
  if (!*((_QWORD *)&v33 + 1))
    goto LABEL_72;
  if ((swift_dynamicCast(&v29, &v32, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v19 = sub_1000EC648(v29, v30);
    if ((v19 & 0x100000000) == 0)
      return v11 | (unint64_t)(v19 << 32);
  }
LABEL_74:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000020, 0x800000010050EF00, "Files/DOCApplication.swift", 26, 2, 172, 0);
  __break(1u);
  return result;
}

id sub_1001084A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  _QWORD *v22;
  id result;
  void *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD aBlock[5];
  uint64_t v66;

  v56 = a3;
  v52 = a5;
  v54 = a2;
  v51 = a1;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v63 = *(_QWORD *)(v6 - 8);
  v64 = v6;
  __chkstk_darwin(v6);
  v62 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v60 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  __chkstk_darwin(v8);
  v59 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTimeInterval(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = type metadata accessor for DispatchTime(0);
  v50 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v57 = (char *)&v48 - v17;
  v18 = type metadata accessor for DispatchPredicate(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (uint64_t *)((char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v53 = a4;
  result = objc_msgSend(a4, "tabBarController", v20);
  if (result)
  {
    v24 = result;
    v25 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
    *v22 = static OS_dispatch_queue.main.getter(v25);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v19 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v18);
    v26 = _dispatchPreconditionTest(_:)(v22);
    result = (id)(*(uint64_t (**)(_QWORD *, uint64_t))(v19 + 8))(v22, v18);
    if ((v26 & 1) != 0)
    {
      objc_msgSend(v24, "setSelectedIndex:", 0);

      v49 = static OS_dispatch_queue.main.getter(v27);
      static DispatchTime.now()(v49);
      *v13 = 2;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchTimeInterval.seconds(_:), v10);
      v28 = v57;
      + infix(_:_:)(v15, v13);
      (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
      v29 = *(void (**)(char *, uint64_t))(v50 + 8);
      v30 = v58;
      v29(v15, v58);
      v31 = swift_allocObject(&unk_1005C74E8, 64, 7);
      v33 = v53;
      v32 = v54;
      v35 = v55;
      v34 = v56;
      *(_QWORD *)(v31 + 16) = v53;
      *(_QWORD *)(v31 + 24) = v35;
      *(_QWORD *)(v31 + 32) = v51;
      *(_QWORD *)(v31 + 40) = v32;
      *(_BYTE *)(v31 + 48) = v52 & 1;
      *(_QWORD *)(v31 + 56) = v34;
      aBlock[4] = sub_10010D63C;
      v66 = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10004A82C;
      aBlock[3] = &unk_1005C7500;
      v36 = _Block_copy(aBlock);
      v37 = v66;
      v38 = v33;
      v39 = v35;
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v34);
      swift_release(v37);
      v40 = v59;
      static DispatchQoS.unspecified.getter(v41);
      aBlock[0] = _swiftEmptyArrayStorage;
      v42 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v43 = sub_10006922C((uint64_t *)&unk_100647540);
      v44 = sub_1000791AC();
      v45 = v62;
      v46 = v64;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v43, v44, v64, v42);
      v47 = (void *)v49;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v28, v40, v45, v36);
      _Block_release(v36);

      (*(void (**)(char *, uint64_t))(v63 + 8))(v45, v46);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v40, v61);
      return (id)((uint64_t (*)(char *, uint64_t))v29)(v28, v30);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1001088BC(uint64_t a1)
{
  void *result;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  result = *(void **)(a1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_nodeCollection);
  if (result)
  {
    v3 = objc_msgSend(result, "isGathering");
    v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8);
    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0)
        v11 = *(_QWORD *)(a1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController + 8);
      else
        v11 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(a1
                                         + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemsController
                                         + 8));
      v5 = _CocoaArrayWrapper.endIndex.getter(v11);
      swift_bridgeObjectRelease(v4);
    }
    else
    {
      v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    result = *(void **)(a1 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController__loadedCollectionView);
    if (result)
    {
      v6 = objc_msgSend(result, "visibleCells");
      v7 = sub_10004F2F0(0, (unint64_t *)&unk_1006428D0, UICollectionViewCell_ptr);
      v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

      if ((unint64_t)v8 >> 62)
      {
        if (v8 < 0)
          v12 = v8;
        else
          v12 = v8 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v8);
        v9 = _CocoaArrayWrapper.endIndex.getter(v12);
        swift_bridgeObjectRelease(v8);
      }
      else
      {
        v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v8);
      if (v5)
        v10 = v3;
      else
        v10 = 1;
      if ((v10 & 1) != 0)
        return 0;
      else
        return (void *)(v9 > 0);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_100108A08(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  void *v16;

  v4 = v3;
  LOBYTE(v5) = a3;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    v9 = 4;
    v5 &= 1u;
    while (1)
    {
      v10 = (a1 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, a1)
          : *(id *)(a1 + 8 * v9);
      v11 = v10;
      v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1))
        break;
      v16 = v10;
      v13 = sub_1000F0584(&v16, a2, v5);
      if (v4)
      {
        swift_bridgeObjectRelease(a1);

        return v11;
      }
      if ((v13 & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        return v11;
      }

      ++v9;
      if (v12 == v8)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_11:
  swift_bridgeObjectRelease(a1);
  return 0;
}

double sub_100108B34(void *a1, uint64_t a2, void (*a3)(_QWORD, uint64_t), uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  id v16;
  double result;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;

  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)swift_allocObject(&unk_1005C36E0, 40, 7);
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  if (a1)
  {
    v14 = swift_allocObject(&unk_1005C3708, 32, 7);
    *(_QWORD *)(v14 + 16) = sub_10010C0E0;
    *(_QWORD *)(v14 + 24) = v13;
    v15 = a5;
    v16 = a1;
    swift_retain();
    swift_retain();
    sub_1000F194C(v16, (uint64_t)sub_10010C184, v14);
    swift_release(v13);

    *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  }
  else
  {
    v18 = a5;
    swift_retain();
    v20 = Logger.Tests.unsafeMutableAddressor(v19);
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v20, v9);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "content view controller is nil", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v25 = sub_10010C140();
    v26 = swift_allocError(&type metadata for DOCApplication.DOCApplicationTestError, v25, 0, 0);
    *v27 = 1;
    a3(0, v26);
    swift_errorRelease(v26);
    *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  }
  return result;
}

void sub_100108D50(void *a1, void *a2, id a3, void (*a4)(_QWORD, uint64_t), uint64_t a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  id v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  double v34;
  uint64_t v35;
  NSObject *v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  NSObject *v44;
  NSObject *v45;
  NSObject *v46;
  uint64_t v47;
  _QWORD *v48;
  id v49;
  char *v50;
  void *v51;
  void **v52;
  void *v53;
  void (*v54)(_QWORD, uint64_t);
  void *v55;
  uint64_t v56;
  char *v57;
  id v58;
  char *v59;
  id v60;
  uint64_t v61;
  _QWORD *v62;
  id v63;
  void (*v64)(_QWORD, uint64_t);
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  NSObject *v70;
  _BYTE v71[16];
  char v72[24];

  v69 = a1;
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)swift_allocObject(&unk_1005C3690, 40, 7);
  v64 = a4;
  v15[2] = a4;
  v15[3] = a5;
  v15[4] = a6;
  v63 = a6;
  v16 = objc_msgSend(a2, "effectiveFullBrowser", swift_retain().n128_f64[0]);
  v17 = (char *)objc_msgSend(v16, "hierarchyController");

  v18 = (uint64_t *)&v17[OBJC_IVAR____TtC5Files22DOCHierarchyController_locations];
  swift_beginAccess(&v17[OBJC_IVAR____TtC5Files22DOCHierarchyController_locations], v72, 0, 0);
  v19 = *v18;
  swift_bridgeObjectRetain(v19);

  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v61 = v19;
    else
      v61 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    v20 = (char *)_CocoaArrayWrapper.endIndex.getter(v61);
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    v20 = *(char **)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v67 = v12;
  v68 = v11;
  v66 = v14;
  if (!v20)
  {
    swift_bridgeObjectRelease(v19);
    goto LABEL_17;
  }
  v21 = v20 - 1;
  if (__OFSUB__(v20, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if ((v19 & 0xC000000000000001) != 0)
  {
LABEL_36:
    v22 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v19);
LABEL_9:
    v20 = v22;
    v23 = objc_msgSend(v22, "isRoot", swift_bridgeObjectRelease(v19).n128_f64[0]);
    if ((_DWORD)v23)
    {
      v62 = v15;
      v65 = v20;
      v24 = objc_msgSend(v20, "sourceIdentifier");
      v25 = objc_msgSend(v69, "sourceIdentifier");
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v28 = v27;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      if (v26 == v29 && v28 == v30)
      {

        swift_bridgeObjectRelease_n(v28, 2);
        v15 = v62;
      }
      else
      {
        v32 = v30;
        v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v29, v30, 0);

        swift_bridgeObjectRelease(v28);
        *(_QWORD *)&v34 = swift_bridgeObjectRelease(v32).n128_u64[0];
        v15 = v62;
        if ((v33 & 1) == 0)
        {
          v20 = v65;
          v14 = v66;
          v12 = v67;
          v11 = v68;
          goto LABEL_17;
        }
      }
      v50 = (char *)objc_msgSend(a2, "effectiveBrowserViewController", v34);
      if (v50)
      {
        v51 = v50;
        v52 = (void **)&v50[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
        swift_beginAccess(&v50[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], &v70, 0, 0);
        v53 = *v52;
        v55 = v63;
        v54 = v64;
        if (*v52)
        {
          v56 = type metadata accessor for DOCItemCollectionViewController(0);
          v57 = (char *)swift_dynamicCastClass(v53, v56);
          if (v57)
            v58 = v53;
        }
        else
        {
          v57 = 0;
        }
        v59 = v65;

      }
      else
      {
        v57 = 0;
        v54 = v64;
        v59 = v65;
        v55 = v63;
      }
      swift_retain();
      v60 = v55;
      sub_100108B34(v57, (uint64_t)a3, v54, a5, a6);
      swift_release(v15);

      swift_release(a5);
      v20 = v57;
      goto LABEL_30;
    }
LABEL_17:
    v35 = Logger.Tests.unsafeMutableAddressor(v23);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v35, v11);
    v36 = v69;
    v37 = a2;
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    v40 = v39;
    if (os_log_type_enabled(v38, v39))
    {
      v41 = swift_slowAlloc(22, -1);
      v42 = swift_slowAlloc(16, -1);
      LODWORD(v64) = v40;
      v43 = (_QWORD *)v42;
      *(_DWORD *)v41 = 138412546;
      v65 = v20;
      v70 = v36;
      v44 = v36;
      v69 = a3;
      v45 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
      *v43 = v36;

      *(_WORD *)(v41 + 12) = 2112;
      v46 = objc_msgSend(v37, "effectiveFullBrowser");
      v70 = v46;
      a3 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
      v43[1] = v46;
      v20 = v65;

      _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v64, "showing %@ on %@", (uint8_t *)v41, 0x16u);
      v47 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v43, 2, v47);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {

      v38 = v36;
    }

    (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v68);
    v48 = (_QWORD *)swift_allocObject(&unk_1005C36B8, 40, 7);
    v48[2] = sub_10010C0E0;
    v48[3] = v15;
    v48[4] = a3;
    swift_retain();
    v49 = a3;
    sub_1000F0BE8(v36, v37, (uint64_t)sub_10010C0F0, (uint64_t)v48);
    swift_release(v15);
    swift_release(v48);
LABEL_30:

    return;
  }
  if (((unint64_t)v21 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if ((unint64_t)v21 < *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v22 = (char *)*(id *)(v19 + 8 * (_QWORD)v21 + 32);
    goto LABEL_9;
  }
  __break(1u);
}

double sub_1001092EC(void *a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  id v16;
  double result;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;

  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)swift_allocObject(&unk_1005C7740, 40, 7);
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  if (a1)
  {
    v14 = swift_allocObject(&unk_1005C7768, 32, 7);
    *(_QWORD *)(v14 + 16) = sub_10010DB70;
    *(_QWORD *)(v14 + 24) = v13;
    v15 = a3;
    swift_bridgeObjectRetain(a5);
    v16 = a1;
    swift_retain();
    sub_1000F194C(v16, (uint64_t)sub_10010DB60, v14);
    swift_release(v13);

    *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  }
  else
  {
    v18 = a3;
    v19 = swift_bridgeObjectRetain(a5);
    v20 = Logger.Tests.unsafeMutableAddressor(v19);
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v20, v9);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, (os_log_type_t)v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v23, "content view controller is nil", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v25 = sub_10010C140();
    v26 = swift_allocError(&type metadata for DOCApplication.DOCApplicationTestError, v25, 0, 0);
    *v27 = 1;
    sub_1000F39A4(v26, v18, a4, a5);
    swift_errorRelease(v26);
    *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  }
  return result;
}

void sub_10010950C(void *a1, void *a2, id a3, void *a4, NSObject **a5, unint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  id v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  double v34;
  uint64_t v35;
  char *v36;
  void *v37;
  _QWORD *v38;
  void **v39;
  void *v40;
  void *v41;
  uint64_t v42;
  char *v43;
  id v44;
  char *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  NSObject *v57;
  NSObject **v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  NSObject **v66;
  uint64_t v67;
  id v68;
  char *v69;
  char *v70;
  id v71;
  NSObject *v72;
  _BYTE v73[16];
  char v74[24];

  v71 = a1;
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)swift_allocObject(&unk_1005C76F0, 40, 7);
  v15[2] = a4;
  v15[3] = a5;
  v15[4] = a6;
  v68 = a4;
  swift_bridgeObjectRetain(a6);
  v16 = objc_msgSend(a2, "effectiveFullBrowser");
  v17 = (char *)objc_msgSend(v16, "hierarchyController");

  v18 = (uint64_t *)&v17[OBJC_IVAR____TtC5Files22DOCHierarchyController_locations];
  swift_beginAccess(&v17[OBJC_IVAR____TtC5Files22DOCHierarchyController_locations], v74, 0, 0);
  v19 = *v18;
  swift_bridgeObjectRetain(v19);

  if (!((unint64_t)v19 >> 62))
  {
    v20 = *(char **)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    v70 = v14;
    if (v20)
      goto LABEL_3;
LABEL_28:
    swift_bridgeObjectRelease(v19);
    goto LABEL_29;
  }
  if (v19 < 0)
    v47 = v19;
  else
    v47 = v19 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v19);
  v20 = (char *)_CocoaArrayWrapper.endIndex.getter(v47);
  swift_bridgeObjectRelease(v19);
  v70 = v14;
  if (!v20)
    goto LABEL_28;
LABEL_3:
  v21 = v20 - 1;
  if (__OFSUB__(v20, 1))
  {
    __break(1u);
    goto LABEL_35;
  }
  if ((v19 & 0xC000000000000001) != 0)
  {
LABEL_35:
    v22 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v19);
LABEL_8:
    v20 = v22;
    v23 = objc_msgSend(v22, "isRoot", swift_bridgeObjectRelease(v19).n128_f64[0]);
    if ((_DWORD)v23)
    {
      v66 = a5;
      v67 = v12;
      v65 = v11;
      v69 = v20;
      v24 = objc_msgSend(v20, "sourceIdentifier");
      v25 = objc_msgSend(v71, "sourceIdentifier");
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v28 = v27;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      if (v26 == v29 && v28 == v30)
      {

        swift_bridgeObjectRelease_n(v28, 2);
        v35 = (uint64_t)v66;
      }
      else
      {
        v32 = v30;
        v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v29, v30, 0);

        swift_bridgeObjectRelease(v28);
        *(_QWORD *)&v34 = swift_bridgeObjectRelease(v32).n128_u64[0];
        v35 = (uint64_t)v66;
        if ((v33 & 1) == 0)
        {
          v20 = v69;
          v14 = v70;
          v11 = v65;
          v12 = v67;
          goto LABEL_29;
        }
      }
      v36 = (char *)objc_msgSend(a2, "effectiveBrowserViewController", v34);
      if (v36)
      {
        v37 = v36;
        v38 = v15;
        v39 = (void **)&v36[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController];
        swift_beginAccess(&v36[OBJC_IVAR____TtC5Files29DOCBrowserContainerController_contentViewController], &v72, 0, 0);
        v40 = *v39;
        v41 = v68;
        if (*v39)
        {
          v42 = type metadata accessor for DOCItemCollectionViewController(0);
          v43 = (char *)swift_dynamicCastClass(v40, v42);
          if (v43)
            v44 = v40;
        }
        else
        {
          v43 = 0;
        }
        v15 = v38;

        v45 = v69;
      }
      else
      {
        v43 = 0;
        v41 = v68;
        v45 = v69;
      }
      v46 = v41;
      swift_bridgeObjectRetain(a6);
      sub_1001092EC(v43, (uint64_t)a3, v46, v35, a6);
      swift_release(v15);

      swift_bridgeObjectRelease(a6);
      v20 = v43;
      goto LABEL_33;
    }
LABEL_29:
    v48 = Logger.Tests.unsafeMutableAddressor(v23);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v48, v11);
    v49 = v71;
    v50 = a2;
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter(v51);
    v53 = v52;
    if (os_log_type_enabled(v51, v52))
    {
      v54 = swift_slowAlloc(22, -1);
      v67 = v12;
      v55 = v54;
      v66 = (NSObject **)swift_slowAlloc(16, -1);
      *(_DWORD *)v55 = 138412546;
      v69 = v20;
      LODWORD(v68) = v53;
      v72 = v49;
      v56 = v49;
      v71 = a3;
      v57 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73);
      v58 = v66;
      *v66 = v49;

      *(_WORD *)(v55 + 12) = 2112;
      v59 = objc_msgSend(v50, "effectiveFullBrowser");
      v72 = v59;
      a3 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73);
      v58[1] = v59;
      v20 = v69;

      _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v68, "showing %@ on %@", (uint8_t *)v55, 0x16u);
      v60 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v58, 2, v60);
      swift_slowDealloc(v58, -1, -1);
      v61 = v55;
      v12 = v67;
      swift_slowDealloc(v61, -1, -1);
    }
    else
    {

      v51 = v49;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v70, v11);
    v62 = (_QWORD *)swift_allocObject(&unk_1005C7718, 40, 7);
    v62[2] = sub_10010D89C;
    v62[3] = v15;
    v62[4] = a3;
    swift_retain();
    v63 = a3;
    sub_1000F0BE8(v49, v50, (uint64_t)sub_10010DF58, (uint64_t)v62);
    swift_release(v15);
    swift_release(v62);
LABEL_33:

    return;
  }
  if (((unint64_t)v21 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if ((unint64_t)v21 < *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v22 = (char *)*(id *)(v19 + 8 * (_QWORD)v21 + 32);
    goto LABEL_8;
  }
  __break(1u);
}

double sub_100109AB4(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  double result;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  _QWORD aBlock[5];
  _QWORD *v65;

  v53 = a3;
  v62 = a6;
  v60 = a4;
  v61 = a5;
  v63 = a2;
  v52 = a1;
  v56 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v55 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v57 = *(_QWORD *)(v7 - 8);
  v58 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTimeInterval(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (void (**)(char *, uint64_t))((char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for DispatchTime(0);
  v15 = *(_QWORD *)(v14 - 8);
  v50 = v14;
  __chkstk_darwin(v14);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v49 - v19;
  v21 = swift_allocObject(&unk_1005C4400, 17, 7);
  *(_BYTE *)(v21 + 16) = 0;
  v22 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
  v51 = static OS_dispatch_queue.main.getter(v22);
  static DispatchTime.now()(v51);
  *v13 = 10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchTimeInterval.seconds(_:), v10);
  + infix(_:_:)(v17, v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  v49 = *(void (**)(char *, uint64_t))(v15 + 8);
  v49(v17, v14);
  v23 = (_QWORD *)swift_allocObject(&unk_1005C7600, 56, 7);
  v24 = v52;
  v25 = v53;
  v23[2] = v21;
  v23[3] = v24;
  v26 = v63;
  v23[4] = v63;
  v23[5] = v25;
  v27 = v54;
  v23[6] = v54;
  aBlock[4] = sub_10010D794;
  v65 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = &unk_1005C7618;
  v28 = _Block_copy(aBlock);
  v29 = v65;
  swift_retain();
  swift_bridgeObjectRetain(v26);
  v53 = v25;
  v30 = v27;
  swift_release(v29);
  static DispatchQoS.unspecified.getter(v31);
  aBlock[0] = _swiftEmptyArrayStorage;
  v32 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v33 = sub_10006922C((uint64_t *)&unk_100647540);
  v34 = sub_1000791AC();
  v36 = v55;
  v35 = v56;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v33, v34, v56, v32);
  v37 = (void *)v51;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v20, v9, v36, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v59 + 8))(v36, v35);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v9, v58);
  v49(v20, v50);
  v38 = swift_allocObject(&unk_1005C7650, 73, 7);
  *(_QWORD *)(v38 + 16) = v21;
  *(_QWORD *)(v38 + 24) = v24;
  v39 = v63;
  v40 = v53;
  *(_QWORD *)(v38 + 32) = v63;
  *(_QWORD *)(v38 + 40) = v40;
  v42 = v60;
  v41 = v61;
  *(_QWORD *)(v38 + 48) = v60;
  *(_QWORD *)(v38 + 56) = v30;
  *(_QWORD *)(v38 + 64) = v41;
  *(_BYTE *)(v38 + 72) = v62;
  v43 = (_QWORD *)swift_allocObject(&unk_1005C7678, 48, 7);
  v43[2] = sub_10010D7F8;
  v43[3] = v38;
  v43[4] = v30;
  v43[5] = v42;
  v44 = v30;
  v45 = v42;
  swift_retain();
  swift_bridgeObjectRetain(v39);
  v46 = v40;
  v44;
  v47 = v45;
  swift_retain();
  sub_1000F10F4(v46, v47, (uint64_t)sub_10010DED0, (uint64_t)v43);
  swift_release(v21);
  swift_release(v38);
  *(_QWORD *)&result = swift_release(v43).n128_u64[0];
  return result;
}

void sub_100109EE4(uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint8_t *a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  NSString v31;
  _QWORD v32[3];
  uint8_t *v33;
  id v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v32[2] = a7;
  v33 = a8;
  v34 = a3;
  v35 = a5;
  v32[1] = a4;
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10006922C((uint64_t *)&unk_100642710);
  __chkstk_darwin(v15);
  v17 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for IndexPath(0);
  __chkstk_darwin(v18);
  v20 = (char *)v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1;
  v23 = v22;
  sub_1000271D4(v21, (uint64_t)v17, (uint64_t *)&unk_100642710);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v17, 1, v18) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v17, v18);
    __asm { BR              X10 }
  }
  v24 = sub_10000CB4C((uint64_t)v17, (uint64_t *)&unk_100642710);
  v25 = Logger.Tests.unsafeMutableAddressor(v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v25, v11);
  v26 = swift_bridgeObjectRetain_n(a6, 2);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.error.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v36 = v30;
    *(_DWORD *)v29 = 136315138;
    v33 = v29 + 4;
    swift_bridgeObjectRetain(a6);
    v37 = sub_1000544FC(v35, a6, (uint64_t *)&v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
    swift_bridgeObjectRelease_n(a6, 3);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed test %s. Could not find index path", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a6, 2);
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v31 = String._bridgeToObjectiveC()();
  objc_msgSend(v34, "failedTest:", v31);

}

void sub_10010A4D4(void *a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, unint64_t a7, void *a8, uint8_t *a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint8_t *v34;
  uint64_t v35;
  void (*v36)(_BYTE *, uint64_t, uint64_t, uint64_t);
  id v37;
  uint8_t *v38;
  void *v39;
  uint64_t v40;
  void (*v41)(_QWORD, _QWORD);
  unint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  CGFloat v45;
  double v46;
  double v47;
  CGFloat v48;
  CGFloat v49;
  uint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  id v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _BYTE v70[16];
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  id v88;
  int v89;
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  _BYTE *v93;
  unint64_t v94;
  void (*v95)(_QWORD, _QWORD);
  void *v96;
  uint64_t v97;
  _QWORD aBlock[5];
  uint64_t v99;
  CGRect v100;
  CGRect v101;

  v96 = a1;
  v97 = a2;
  v91 = a9;
  v84 = type metadata accessor for DispatchWorkItemFlags(0);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v82 = &v70[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v81 = type metadata accessor for DispatchQoS(0);
  v80 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v79 = &v70[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v76 = type metadata accessor for DispatchTimeInterval(0);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v74 = &v70[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v78 = type metadata accessor for DispatchTime(0);
  v73 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v72 = &v70[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  v77 = &v70[-v20];
  v86 = type metadata accessor for Logger(0);
  v85 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v21 = sub_10006922C((uint64_t *)&unk_100642710);
  __chkstk_darwin(v21);
  v71 = &v70[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v23);
  v93 = &v70[-v24];
  __chkstk_darwin(v25);
  v27 = &v70[-v26];
  __chkstk_darwin(v28);
  v30 = &v70[-v29];
  v31 = swift_allocObject(&unk_1005C37F8, 72, 7);
  v89 = a3;
  *(_BYTE *)(v31 + 16) = a3;
  *(_QWORD *)(v31 + 24) = a4;
  *(_QWORD *)(v31 + 32) = a5;
  v90 = a6;
  *(_QWORD *)(v31 + 40) = a6;
  *(_QWORD *)(v31 + 48) = a7;
  v32 = a7;
  v33 = a8;
  *(_QWORD *)(v31 + 56) = a8;
  v95 = (void (*)(_QWORD, _QWORD))v31;
  v34 = v91;
  *(_QWORD *)(v31 + 64) = v91;
  v35 = type metadata accessor for IndexPath(0);
  v92 = *(_QWORD *)(v35 - 8);
  v36 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v92 + 56);
  v36(v30, 1, 1, v35);
  v88 = a4;
  v37 = a5;
  v94 = v32;
  swift_bridgeObjectRetain(v32);
  v87 = v33;
  v38 = v34;
  v39 = v96;
  v91 = v38;
  sub_1000EED50(v96, v97, v27);
  v40 = (uint64_t)v37;
  sub_10000CB4C((uint64_t)v30, (uint64_t *)&unk_100642710);
  v36(v27, 0, 1, v35);
  sub_100070EDC((uint64_t)v27, (uint64_t)v30, (uint64_t *)&unk_100642710);
  v41 = v95;
  v42 = v94;
  v43 = v93;
  sub_1000271D4((uint64_t)v30, (uint64_t)v93, (uint64_t *)&unk_100642710);
  LODWORD(v32) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v92 + 48))(v43, 1, v35);
  sub_10000CB4C((uint64_t)v43, (uint64_t *)&unk_100642710);
  if ((_DWORD)v32 == 1)
  {
    v44 = v35;
    objc_msgSend(v39, "bounds");
    v45 = CGRectGetHeight(v100) * 0.75;
    objc_msgSend(v39, "contentOffset");
    v47 = v46;
    v48 = v45 + v46;
    objc_msgSend(v39, "contentSize");
    if (v48 >= v49)
    {
      v69 = (uint64_t)v71;
      v36(v71, 1, 1, v44);
      sub_100109EE4(v69, v89, v88, v40, v90, v42, (uint64_t)v87, v91);
      sub_10000CB4C(v69, (uint64_t *)&unk_100642710);
    }
    else
    {
      objc_msgSend(v39, "bounds");
      objc_msgSend(v39, "setContentOffset:", 0.0, v47 + CGRectGetHeight(v101) * 0.75);
      objc_msgSend(v39, "reloadData");
      v50 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
      v96 = (void *)static OS_dispatch_queue.main.getter(v50);
      v51 = v72;
      static DispatchTime.now()(v96);
      v52 = v74;
      *v74 = 1;
      v53 = v75;
      v54 = v76;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v75 + 104))(v52, enum case for DispatchTimeInterval.seconds(_:), v76);
      v55 = v77;
      + infix(_:_:)(v51, v52);
      (*(void (**)(_QWORD *, uint64_t))(v53 + 8))(v52, v54);
      v95 = *(void (**)(_QWORD, _QWORD))(v73 + 8);
      v56 = v78;
      v95(v51, v78);
      v57 = swift_allocObject(&unk_1005C3820, 48, 7);
      *(_BYTE *)(v57 + 16) = v97;
      *(_QWORD *)(v57 + 24) = v39;
      *(_QWORD *)(v57 + 32) = sub_10010C1FC;
      *(_QWORD *)(v57 + 40) = v41;
      aBlock[4] = sub_10010C214;
      v99 = v57;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10004A82C;
      aBlock[3] = &unk_1005C3838;
      v58 = _Block_copy(aBlock);
      v59 = v99;
      v60 = v39;
      swift_retain();
      swift_release(v59);
      v61 = v79;
      static DispatchQoS.unspecified.getter(v62);
      aBlock[0] = _swiftEmptyArrayStorage;
      v63 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v64 = sub_10006922C((uint64_t *)&unk_100647540);
      v65 = sub_1000791AC();
      v66 = v82;
      v67 = v84;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v64, v65, v84, v63);
      v68 = v96;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v55, v61, v66, v58);
      _Block_release(v58);

      (*(void (**)(_BYTE *, uint64_t))(v83 + 8))(v66, v67);
      (*(void (**)(_BYTE *, uint64_t))(v80 + 8))(v61, v81);
      v95(v55, v56);
    }
  }
  else
  {
    sub_100109EE4((uint64_t)v30, v89, v88, v40, v90, v42, (uint64_t)v87, v91);
  }
  sub_10000CB4C((uint64_t)v30, (uint64_t *)&unk_100642710);
  swift_release(v41);
}

void sub_10010AEF0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  BOOL v25;
  void *v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  Class isa;
  NSString v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v33 = a6;
  v34 = a5;
  v32 = a3;
  v35 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10006922C((uint64_t *)&unk_100642710);
  __chkstk_darwin(v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for IndexPath(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000271D4(a1, (uint64_t)v14, (uint64_t *)&unk_100642710);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    v32 = a4;
    v19 = sub_10000CB4C((uint64_t)v14, (uint64_t *)&unk_100642710);
    v20 = Logger.Tests.unsafeMutableAddressor(v19);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v20, v35);
    v21 = v34;
    v22 = swift_bridgeObjectRetain_n(v34, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    v25 = os_log_type_enabled(v23, v24);
    v26 = v33;
    if (v25)
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v37 = v28;
      *(_DWORD *)v27 = 136315138;
      v29 = v34;
      swift_bridgeObjectRetain(v34);
      v36 = sub_1000544FC(v32, v29, &v37);
      v26 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
      swift_bridgeObjectRelease_n(v29, 3);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed test %s. Could not find index path of PDF", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v21, 2);
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v35);
    v31 = String._bridgeToObjectiveC()();
    objc_msgSend(v26, "failedTest:", v31);

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a2, "collectionView:performPrimaryActionForItemAtIndexPath:", v32, isa);

    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
}

void sub_10010B214(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, unint64_t a6, void *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(_BYTE *, uint64_t, uint64_t, uint64_t);
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  int v36;
  void *v37;
  CGFloat v38;
  double v39;
  double v40;
  CGFloat v41;
  CGFloat v42;
  uint64_t v43;
  _BYTE *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  void (*v49)(_BYTE *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  id v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  void *v62;
  const void *v63;
  uint64_t v64;
  _BYTE v65[24];
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  _QWORD aBlock[5];
  uint64_t v91;
  CGRect v92;
  CGRect v93;

  v88 = a1;
  v89 = a2;
  v78 = type metadata accessor for DispatchWorkItemFlags(0);
  v77 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v76 = &v65[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v75 = type metadata accessor for DispatchQoS(0);
  v74 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v73 = &v65[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v71 = type metadata accessor for DispatchTimeInterval(0);
  v70 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v69 = &v65[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v79 = type metadata accessor for DispatchTime(0);
  v68 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v67 = &v65[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v72 = &v65[-v17];
  v80 = type metadata accessor for Logger(0);
  __chkstk_darwin(v80);
  v18 = sub_10006922C((uint64_t *)&unk_100642710);
  __chkstk_darwin(v18);
  v66 = &v65[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  v86 = &v65[-v21];
  __chkstk_darwin(v22);
  v24 = &v65[-v23];
  __chkstk_darwin(v25);
  v27 = &v65[-v26];
  v28 = (_QWORD *)swift_allocObject(&unk_1005C3910, 56, 7);
  v28[2] = a3;
  v28[3] = a4;
  v84 = a5;
  v28[4] = a5;
  v28[5] = a6;
  v29 = a6;
  v87 = (uint64_t)v28;
  v28[6] = a7;
  v30 = type metadata accessor for IndexPath(0);
  v85 = *(_QWORD *)(v30 - 8);
  v31 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v85 + 56);
  v31(v27, 1, 1, v30);
  v83 = a3;
  v82 = a4;
  v32 = v29;
  swift_bridgeObjectRetain(v29);
  v81 = a7;
  sub_1000EED50(v88, v89, v24);
  sub_10000CB4C((uint64_t)v27, (uint64_t *)&unk_100642710);
  v31(v24, 0, 1, v30);
  sub_100070EDC((uint64_t)v24, (uint64_t)v27, (uint64_t *)&unk_100642710);
  v33 = (uint64_t)v27;
  v34 = v87;
  v35 = v86;
  sub_1000271D4(v33, (uint64_t)v86, (uint64_t *)&unk_100642710);
  v36 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v85 + 48))(v35, 1, v30);
  sub_10000CB4C((uint64_t)v35, (uint64_t *)&unk_100642710);
  if (v36 == 1)
  {
    v37 = v88;
    objc_msgSend(v88, "bounds");
    v38 = CGRectGetHeight(v92) * 0.75;
    objc_msgSend(v37, "contentOffset");
    v40 = v39;
    v41 = v38 + v39;
    objc_msgSend(v37, "contentSize");
    if (v41 >= v42)
    {
      v64 = (uint64_t)v66;
      v31(v66, 1, 1, v30);
      sub_10010AEF0(v64, v83, (uint64_t)v82, v84, v32, v81);
      sub_10000CB4C(v64, (uint64_t *)&unk_100642710);
    }
    else
    {
      objc_msgSend(v37, "bounds");
      objc_msgSend(v37, "setContentOffset:", 0.0, v40 + CGRectGetHeight(v93) * 0.75);
      objc_msgSend(v37, "reloadData");
      v43 = sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
      v87 = static OS_dispatch_queue.main.getter(v43);
      v44 = v67;
      static DispatchTime.now()(v87);
      v45 = v69;
      *v69 = 1;
      v46 = v70;
      v47 = v71;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v70 + 104))(v45, enum case for DispatchTimeInterval.seconds(_:), v71);
      v48 = v72;
      + infix(_:_:)(v44, v45);
      (*(void (**)(_QWORD *, uint64_t))(v46 + 8))(v45, v47);
      v49 = *(void (**)(_BYTE *, uint64_t))(v68 + 8);
      v49(v44, v79);
      v50 = swift_allocObject(&unk_1005C3938, 48, 7);
      *(_BYTE *)(v50 + 16) = v89;
      *(_QWORD *)(v50 + 24) = v37;
      *(_QWORD *)(v50 + 32) = sub_10010C27C;
      *(_QWORD *)(v50 + 40) = v34;
      aBlock[4] = sub_10010C214;
      v91 = v50;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10004A82C;
      aBlock[3] = &unk_1005C3950;
      v51 = v33;
      v52 = _Block_copy(aBlock);
      v53 = v91;
      v54 = v37;
      swift_retain();
      swift_release(v53);
      v55 = v73;
      static DispatchQoS.unspecified.getter(v56);
      aBlock[0] = _swiftEmptyArrayStorage;
      v57 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v58 = sub_10006922C((uint64_t *)&unk_100647540);
      v59 = sub_1000791AC();
      v60 = v76;
      v61 = v78;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v58, v59, v78, v57);
      v62 = (void *)v87;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v48, v55, v60, v52);
      v63 = v52;
      v33 = v51;
      _Block_release(v63);

      (*(void (**)(_BYTE *, uint64_t))(v77 + 8))(v60, v61);
      (*(void (**)(_BYTE *, uint64_t))(v74 + 8))(v55, v75);
      v49(v48, v79);
    }
  }
  else
  {
    sub_10010AEF0(v33, v83, (uint64_t)v82, v84, v32, v81);
  }
  sub_10000CB4C(v33, (uint64_t *)&unk_100642710);
  swift_release(v34);
}

void sub_10010BBE0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v27[24];
  _QWORD aBlock[3];
  void *v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;

  v11 = swift_allocObject(&unk_1005C3500, 48, 7);
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  v12 = (void *)objc_opt_self(FPProviderDomain);
  v13 = swift_allocObject(&unk_1005C3528, 72, 7);
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = a1;
  *(_QWORD *)(v13 + 32) = a2;
  *(_QWORD *)(v13 + 40) = v5;
  *(_BYTE *)(v13 + 48) = a3;
  *(_QWORD *)(v13 + 56) = a4;
  *(_QWORD *)(v13 + 64) = a5;
  v30 = sub_10010BEB8;
  v31 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000F8240;
  v29 = &unk_1005C3540;
  v14 = _Block_copy(aBlock);
  v15 = v31;
  swift_retain();
  swift_bridgeObjectRetain(a2);
  v16 = v5;
  swift_retain();
  swift_release(v15);
  v17 = objc_msgSend(v12, "beginMonitoringProviderDomainChangesWithHandler:", v14);
  _Block_release(v14);
  _bridgeAnyObjectToAny(_:)(aBlock, v17);
  swift_unknownObjectRelease(v17);
  swift_beginAccess(v11 + 16, v27, 1, 0);
  sub_10007EB94((uint64_t)aBlock, v11 + 16);
  sub_1000271D4(v11 + 16, (uint64_t)aBlock, &qword_100642730);
  v18 = v29;
  sub_10000CB4C((uint64_t)aBlock, &qword_100642730);
  if (v18)
  {
    sub_1000271D4(v11 + 16, (uint64_t)aBlock, &qword_100642730);
    v19 = v29;
    if (v29)
    {
      v20 = sub_10007E7A0(aBlock, (uint64_t)v29);
      v21 = *(v19 - 1);
      v22 = __chkstk_darwin(v20);
      v24 = &v27[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
      (*(void (**)(char *, double))(v21 + 16))(v24, v22);
      v25 = _bridgeAnythingToObjectiveC<A>(_:)(v24, v19);
      (*(void (**)(char *, _QWORD *))(v21 + 8))(v24, v19);
      sub_100068588(aBlock);
      objc_msgSend(v12, "endMonitoringProviderDomainChanges:", v25);
      swift_release(v11);
      swift_unknownObjectRelease(v25);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_release(v11);
  }
}

uint64_t sub_10010BE50()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    sub_100068588((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10010BE7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

void sub_10010BEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000F6C08(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40), *(unsigned __int8 *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

unint64_t sub_10010BEE8()
{
  unint64_t result;

  result = qword_100643478;
  if (!qword_100643478)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100643478);
  }
  return result;
}

unint64_t sub_10010BF2C()
{
  unint64_t result;

  result = qword_100643480;
  if (!qword_100643480)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100643480);
  }
  return result;
}

uint64_t sub_10010BF70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 41) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_10010C00C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1000F77BC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(char **)(v2 + 32), *(_BYTE *)(v2 + 40), v2 + v6, *(uint8_t **)v7, *(void **)(v7 + 8));
}

uint64_t sub_10010C090(uint64_t a1)
{
  return sub_10010C810(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000F7F18);
}

uint64_t sub_10010C09C()
{
  return sub_10010D5D8(49);
}

uint64_t sub_10010C0A4()
{
  return sub_10010C3CC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000FB2E0);
}

uint64_t sub_10010C0B8()
{
  return sub_10010D840((void (*)(_QWORD))&_swift_release, 48);
}

void sub_10010C0C8(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000F3668(a1, a2, *(void (**)(_QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_10010C0D4()
{
  return sub_10010D8B4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10010C0E4()
{
  return sub_10010D8B4((void (*)(_QWORD))&_swift_release);
}

void sub_10010C0F0(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000F3280(a1, a2, *(void (**)(void))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_10010C0FC()
{
  return sub_10010D8B4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10010C108(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  if (a1)
    v3 = 0;
  else
    v3 = *(_QWORD *)(v1 + 32);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v3, a1);
}

unint64_t sub_10010C140()
{
  unint64_t result;

  result = qword_1006434B0;
  if (!qword_1006434B0)
  {
    result = swift_getWitnessTable(&unk_1004DA868, &type metadata for DOCApplication.DOCApplicationTestError);
    atomic_store(result, (unint64_t *)&qword_1006434B0);
  }
  return result;
}

uint64_t sub_10010C184()
{
  uint64_t v0;

  return sub_1000F307C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10010C18C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

double sub_10010C1B0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000F3468(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10010C1B8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 72, 7);
}

void sub_10010C1FC(uint64_t a1)
{
  uint64_t v1;

  sub_100109EE4(a1, *(_BYTE *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(uint8_t **)(v1 + 64));
}

uint64_t sub_10010C21C()
{
  return sub_10010D7A0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000FC0F0);
}

uint64_t sub_10010C22C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10010C268()
{
  return sub_10010D7A0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000FC418);
}

uint64_t sub_10010C274()
{
  return sub_10010D6B4(56);
}

void sub_10010C27C(uint64_t a1)
{
  uint64_t v1;

  sub_10010AEF0(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48));
}

unint64_t sub_10010C290()
{
  unint64_t result;

  result = qword_1006434B8;
  if (!qword_1006434B8)
  {
    result = swift_getWitnessTable(&unk_1004DA828, &type metadata for DOCApplication.BrowseFolderTestInfo.BrowseFolderTestInfoError);
    atomic_store(result, (unint64_t *)&qword_1006434B8);
  }
  return result;
}

uint64_t sub_10010C2D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10010C304()
{
  uint64_t v0;

  return sub_1000F5694(*(void **)(v0 + 24), *(void (**)(uint64_t, uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 16));
}

uint64_t sub_10010C314()
{
  return sub_10010D8F4((void (*)(_QWORD))&_swift_bridgeObjectRelease, 41);
}

uint64_t sub_10010C32C()
{
  return sub_10010C458((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000FA888);
}

uint64_t sub_10010C338()
{
  return sub_10010D5D8(49);
}

uint64_t sub_10010C340()
{
  return sub_10010C3CC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000FA9E8);
}

uint64_t sub_10010C350()
{
  return sub_10010D840((void (*)(_QWORD))&_swift_release, 48);
}

uint64_t sub_10010C360()
{
  return sub_10010D8F4((void (*)(_QWORD))&_swift_bridgeObjectRelease, 41);
}

uint64_t sub_10010C374()
{
  return sub_10010C458((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000F9E94);
}

uint64_t sub_10010C380()
{
  return sub_10010D840((void (*)(_QWORD))&_swift_bridgeObjectRelease, 49);
}

uint64_t sub_10010C390()
{
  return sub_10010C3CC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000F9FF8);
}

uint64_t sub_10010C3A0()
{
  return sub_10010D840((void (*)(_QWORD))&_swift_release, 48);
}

uint64_t sub_10010C3B0()
{
  return sub_10010D840((void (*)(_QWORD))&_swift_bridgeObjectRelease, 49);
}

uint64_t sub_10010C3C0()
{
  return sub_10010C3CC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000FA314);
}

uint64_t sub_10010C3CC(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned __int8 *)(v1 + 48));
}

uint64_t sub_10010C3E0()
{
  return sub_10010D8F4((void (*)(_QWORD))&_swift_bridgeObjectRelease, 41);
}

void sub_10010C3F0()
{
  uint64_t v0;

  sub_1000FA724(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), (uint64_t)&unk_1005C3CD0, (uint64_t)sub_10010C324, (uint64_t)&unk_1005C3CE8);
}

uint64_t sub_10010C428()
{
  return sub_10010D8F4((void (*)(_QWORD))&_swift_bridgeObjectRelease, 41);
}

uint64_t sub_10010C438()
{
  return sub_10010D8F4((void (*)(_QWORD))&_swift_bridgeObjectRelease, 41);
}

uint64_t sub_10010C44C()
{
  return sub_10010C458((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000F9A08);
}

uint64_t sub_10010C458(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(unsigned __int8 *)(v1 + 72));
}

uint64_t sub_10010C474()
{
  return sub_10010D8B4((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_10010C480()
{
  uint64_t v0;

  sub_1000F9B98(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10010C48C()
{
  return sub_10010D8F4((void (*)(_QWORD))&_swift_bridgeObjectRelease, 41);
}

void sub_10010C49C()
{
  uint64_t v0;

  sub_1000FA724(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), (uint64_t)&unk_1005C3DE8, (uint64_t)sub_10010C324, (uint64_t)&unk_1005C3E00);
}

uint64_t sub_10010C4D8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 97, 7);
}

void sub_10010C524(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000FBA34(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(id *)(v2 + 40), *(uint64_t **)(v2 + 48), *(id **)(v2 + 56), *(void (**)(void))(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), *(_BYTE *)(v2 + 96));
}

uint64_t sub_10010C564()
{
  return sub_10010D840((void (*)(_QWORD))&_swift_release, 48);
}

uint64_t sub_10010C574()
{
  return sub_10010D8F4((void (*)(_QWORD))&_swift_bridgeObjectRelease, 41);
}

uint64_t sub_10010C584()
{
  uint64_t v0;

  return sub_1000F92C4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t sub_10010C5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_10010C64C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint8_t **v7;

  v5 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (uint8_t **)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_1000F8690(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), v2 + v6, *v7, v7[1]);
}

uint64_t sub_10010C6B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

void sub_10010C764(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1000F8B54(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), v1 + v4, *(void **)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10010C7D0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10010C804(uint64_t a1)
{
  return sub_10010C810(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000F9018);
}

uint64_t sub_10010C810(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_10010C824()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10010C850()
{
  _QWORD *v0;

  return sub_1000F680C(v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_10010C87C()
{
  return sub_10010D5D8(56);
}

uint64_t sub_10010C884()
{
  return sub_10010D7A0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000F6388);
}

uint64_t sub_10010C890()
{
  return sub_10010D5D8(56);
}

uint64_t sub_10010C898()
{
  return sub_10010D7A0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000F65A4);
}

uint64_t sub_10010C8A4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10010C8E8()
{
  return sub_1000AC7CC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000F4E98);
}

uint64_t sub_10010C900()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  sub_100068588((_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10010C934()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(void **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = (_QWORD *)(v0 + 40);
  v5 = *(_DWORD *)(v0 + 80);
  v6 = *(_DWORD *)(v0 + 84);
  v8 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  v9 = sub_10007E7A0(v4, v8);
  return sub_10010727C(v2, v3, (uint64_t)v9, v5, v6, v1, v8, v7);
}

uint64_t sub_10010C9A0()
{
  return sub_10010D8F4((void (*)(_QWORD))&_swift_release, 40);
}

void sub_10010C9B0()
{
  uint64_t *v0;

  sub_1000F1B84(v0[2], v0[3], v0[4]);
}

uint64_t sub_10010C9C4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_10010C9F0()
{
  uint64_t v0;

  sub_1000F2BFC(*(_QWORD *)(v0 + 16), *(NSObject **)(v0 + 24));
}

uint64_t sub_10010C9F8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10010CA24()
{
  uint64_t v0;

  return sub_1000F2E30(*(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t sub_10010CA30()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10010CA5C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t *sub_10010CA6C(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *a1;
  v3 = (void *)a1[2];
  v4 = (void *)a1[4];
  v5 = (void *)a1[5];

  swift_unknownObjectRelease(v2);
  return a1;
}

double sub_10010CAC8()
{
  uint64_t v0;

  return sub_1000F17A4(*(void **)(v0 + 24), *(void (**)(void))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10010CAF4()
{
  return sub_10010D7A0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000F1364);
}

uint64_t sub_10010CB00()
{
  return sub_10010D8F4((void (*)(_QWORD))&_swift_release, 40);
}

void sub_10010CB10(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000F146C(a1, a2, *(void **)(v2 + 16), *(id *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_10010CB20()
{
  return sub_10010D7A0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000F0E08);
}

uint64_t sub_10010CB2C()
{
  return sub_10010D8F4((void (*)(_QWORD))&_swift_release, 40);
}

void sub_10010CB3C()
{
  uint64_t v0;

  sub_1000F0FEC(*(void **)(v0 + 16), *(void (**)(uint64_t, uint64_t))(v0 + 24));
}

uint64_t sub_10010CB48()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CB58()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10010CB7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10010CBB8(uint64_t a1, uint64_t a2)
{
  return sub_1000AD148(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000EFEDC);
}

uint64_t sub_10010CBC4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_errorRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

void sub_10010CC10()
{
  uint64_t v0;

  sub_1000F0128(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(_QWORD, uint64_t, __n128))(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56), *(_QWORD *)(v0 + 64));
}

void sub_10010CC28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000EE5A0(a1, a2, *(id *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40), *(uint64_t **)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_10010CC38()
{
  return sub_10010D840((void (*)(_QWORD))&_swift_release, 48);
}

uint64_t sub_10010CC4C()
{
  return sub_10010D7A0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000EF604);
}

uint64_t sub_10010CC5C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void sub_10010CC98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000ED90C(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40), *(_BYTE *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_10010CCAC()
{
  return sub_10010D840((void (*)(_QWORD))&_swift_release, 48);
}

uint64_t sub_10010CCBC()
{
  return sub_10010D5D8(56);
}

uint64_t sub_10010CCC4()
{
  uint64_t v0;

  return sub_1000ECFC8(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned int *)(v0 + 48), *(unsigned int *)(v0 + 52));
}

uint64_t sub_10010CCF4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10010CD30()
{
  return sub_10010D7A0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000ECF0C);
}

uint64_t sub_10010CD3C()
{
  return sub_10010D5D8(64);
}

uint64_t sub_10010CD44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 56);
  if (!__OFADD__(v1, 1))
    return sub_1000EB84C(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned int *)(v0 + 48), *(unsigned int *)(v0 + 52), v1 + 1);
  __break(1u);
  return result;
}

uint64_t sub_10010CD7C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010CDA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRetain(v1);
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10010CDD8()
{
  uint64_t v0;

  return static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10010CDE0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE **sub_10010CDF0(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100163DF8(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_10010CDF8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_10010CE08(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_100163C3C(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_10010CE10()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CE20()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CE30()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CE40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_10010CE50(uint64_t *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;

  sub_100163E08(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_10010CE58()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CE68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CE78()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CE88()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CE98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CEA8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CEB8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CEC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CED8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CEE8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CEF8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CF08()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CF18()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CF28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CF38()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CF48()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CF58()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CF68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CF78()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CF88()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CF98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CFA8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CFB8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CFC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CFD8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CFE8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010CFF8()
{
  return sub_10010D5D8(48);
}

void sub_10010D000(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000F370C(a1, a2, *(void **)(v2 + 16), *(NSObject ***)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_10010D00C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D01C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D02C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D03C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D04C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D05C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D06C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D07C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D08C()
{
  return sub_10010D5D8(48);
}

uint64_t sub_10010D094()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D0A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D0B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D0C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D0D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D0E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D0F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D104()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D114()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D124()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D134()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D144()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D154()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D164()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D174()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D184()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D194()
{
  return sub_10010D5D8(56);
}

uint64_t sub_10010D19C(uint64_t a1, uint64_t a2)
{
  return sub_1000AD148(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000EF700);
}

uint64_t sub_10010D1A8()
{
  return sub_10010D840((void (*)(_QWORD))&_swift_release, 48);
}

uint64_t sub_10010D1B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D1C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D1D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D1E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D1F8()
{
  return sub_10010D5D8(56);
}

uint64_t sub_10010D200()
{
  return sub_10010D840((void (*)(_QWORD))&_swift_release, 48);
}

uint64_t sub_10010D210()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D220()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D230()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D240()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D250()
{
  return sub_10010D5D8(56);
}

uint64_t sub_10010D258()
{
  return sub_10010D840((void (*)(_QWORD))&_swift_release, 48);
}

uint64_t sub_10010D268()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D278()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D288()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010D2AC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D2BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D2CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10010D2F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D300()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D310()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D320()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D330()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D340()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D350()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D360()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D370()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D380()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D390()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D3A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D3B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D3C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D3D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D3E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D3F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D400()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D410()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D420()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D430()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D440()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D450()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D460()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D470()
{
  uint64_t v0;

  return sub_10010655C(*(void **)(v0 + 16));
}

uint64_t sub_10010D488()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D498()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D4A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D4B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D4C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D4D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D4E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D4F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D508()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D518()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D528()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D538()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D548()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D558()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D568()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D578()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D588()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D598()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D5A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D5B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D5C8()
{
  return sub_10010D5D8(48);
}

uint64_t sub_10010D5D0()
{
  return sub_10010D5D8(48);
}

uint64_t sub_10010D5D8(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10010D618()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D628()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10010D63C()
{
  return sub_10010D694((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000EDD80);
}

uint64_t sub_10010D64C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10010D688()
{
  return sub_10010D694((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000EE0C0);
}

uint64_t sub_10010D694(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_10010D6AC()
{
  return sub_10010D6B4(64);
}

uint64_t sub_10010D6B4(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 40));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10010D6FC()
{
  return sub_1000AC7CC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000EFBB8);
}

uint64_t sub_10010D708()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10010D744()
{
  return sub_1000AC7CC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000EFC54);
}

void sub_10010D750()
{
  uint64_t v0;

  sub_1000EFD04(*(char **)(v0 + 16));
}

uint64_t sub_10010D758()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10010D794()
{
  return sub_10010D7A0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000F3BE4);
}

uint64_t sub_10010D7A0(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10010D7B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 73, 7);
}

void sub_10010D7F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000F3E64(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(id **)(v2 + 40), *(void (**)(char *, uint64_t))(v2 + 48), *(id *)(v2 + 56), *(uint64_t **)(v2 + 64), *(_BYTE *)(v2 + 72));
}

uint64_t sub_10010D830()
{
  return sub_10010D840((void (*)(_QWORD))&_swift_release, 48);
}

uint64_t sub_10010D840(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 24));

  return swift_deallocObject(v2, a2, 7);
}

void sub_10010D884()
{
  uint64_t v0;

  sub_1000F4A4C(*(void **)(v0 + 16));
}

uint64_t sub_10010D88C()
{
  return sub_10010D8F4((void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

void sub_10010D89C(uint64_t a1)
{
  uint64_t v1;

  sub_1000F39A4(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10010D8A8()
{
  return sub_10010D8B4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10010D8B4(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 24));

  return swift_deallocObject(v1, 40, 7);
}

uint64_t sub_10010D8E4()
{
  return sub_10010D8F4((void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_10010D8F4(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 32));
  return swift_deallocObject(v2, a2, 7);
}

uint64_t sub_10010D938()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_10010D95C()
{
  uint64_t v0;

  sub_1000EB35C(*(_BYTE *)(v0 + 16), *(char **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t storeEnumTagSinglePayload for DOCApplication.BrowseFolderTestInfo.BrowseFolderTestInfoError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10010D9A8 + 4 * byte_1004DA6A4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10010D9C8 + 4 * byte_1004DA6A9[v4]))();
}

_BYTE *sub_10010D9A8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10010D9C8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10010D9D0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10010D9D8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10010D9E0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10010D9E8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DOCApplication.BrowseFolderTestInfo.BrowseFolderTestInfoError()
{
  return &type metadata for DOCApplication.BrowseFolderTestInfo.BrowseFolderTestInfoError;
}

uint64_t storeEnumTagSinglePayload for DOCApplication.DOCApplicationTestError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10010DA50 + 4 * byte_1004DA6B3[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10010DA84 + 4 * byte_1004DA6AE[v4]))();
}

uint64_t sub_10010DA84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10010DA8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10010DA94);
  return result;
}

uint64_t sub_10010DAA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10010DAA8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10010DAAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10010DAB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DOCApplication.DOCApplicationTestError()
{
  return &type metadata for DOCApplication.DOCApplicationTestError;
}

unint64_t sub_10010DAD4()
{
  unint64_t result;

  result = qword_100643510;
  if (!qword_100643510)
  {
    result = swift_getWitnessTable(&unk_1004DA798, &type metadata for DOCApplication.DOCApplicationTestError);
    atomic_store(result, (unint64_t *)&qword_100643510);
  }
  return result;
}

unint64_t sub_10010DB1C()
{
  unint64_t result;

  result = qword_100643518;
  if (!qword_100643518)
  {
    result = swift_getWitnessTable(&unk_1004DA800, &type metadata for DOCApplication.BrowseFolderTestInfo.BrowseFolderTestInfoError);
    atomic_store(result, (unint64_t *)&qword_100643518);
  }
  return result;
}

uint64_t sub_10010DF64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t ObjectType;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[24];
  _QWORD v15[5];

  objc_msgSend(*(id *)(a1 + 24), "lock");
  ObjectType = swift_getObjectType(a2);
  DOCNode.identifierKey.getter(v15, ObjectType);
  swift_beginAccess(a1 + 32, v14, 0, 0);
  v7 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_6;
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 32));
  v8 = sub_100067654((uint64_t)v15);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease(v7);
LABEL_6:
    sub_100067748((uint64_t)v15);
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v7 + 56) + 24 * v8;
  v11 = *(void **)v10;
  v12 = *(_QWORD *)(v10 + 16);
  sub_10006A92C(*(void **)v10, *(_QWORD *)(v10 + 8), v12);
  swift_bridgeObjectRelease(v7);
  result = sub_100067748((uint64_t)v15);
  if ((v12 & 0x8000000000000000) == 0)
  {
    *a3 = v11;
    return result;
  }
  swift_release(v11);

LABEL_8:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x800000010050F430, "Files/DOCItemCollectionCellContentPool.swift", 44, 2, 57, 0);
  __break(1u);
  return result;
}

uint64_t sub_10010E0A4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

void destroy for DOCItemCollectionCellContentPool.CellContentPromise(uint64_t a1)
{
  sub_1000628C0(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

_QWORD *_s5Files32DOCItemCollectionCellContentPoolC18CellContentPromiseOwCP_0(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_10006A92C(*(void **)a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t assignWithCopy for DOCItemCollectionCellContentPool.CellContentPromise(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_10006A92C(*(void **)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  sub_1000628C0(v6, v7, v8);
  return a1;
}

__n128 _s12BrowsedStateVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for DOCItemCollectionCellContentPool.CellContentPromise(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  sub_1000628C0(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for DOCItemCollectionCellContentPool.CellContentPromise(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x3FFF);
  v3 = (((*(_QWORD *)(a1 + 16) >> 50) >> 13) | (2
                                                            * ((*(_QWORD *)(a1 + 16) >> 50) & 0x1C00 | ((*(_QWORD *)(a1 + 16) & 7) << 7) | (*(_QWORD *)a1 >> 57) & 0x78 | *(_QWORD *)a1 & 7))) ^ 0x3FFF;
  if (v3 >= 0x3FFE)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DOCItemCollectionCellContentPool.CellContentPromise(uint64_t result, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 > 0x3FFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x3FFF;
    if (a3 >= 0x3FFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x3FFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x1FFF | ((-a2 & 0x3FFF) << 13);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_10010E2C4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) >> 63;
}

uint64_t sub_10010E2D0(uint64_t result)
{
  *(_QWORD *)(result + 16) &= ~0x8000000000000000;
  return result;
}

_QWORD *sub_10010E2E0(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = result[2] & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  *result &= 0xFFFFFFFFFFFFFF8uLL;
  result[2] = v2;
  return result;
}

void *sub_10010E300(uint64_t a1, uint64_t a2, void *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t ObjectType;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[6];
  _BYTE v22[24];
  _QWORD v23[5];

  v6 = *(void **)(a2 + 24);
  objc_msgSend(v6, "lock");
  v9 = (void *)sub_10010E4B0(a1, 0, 0, a2, a3, (unint64_t)&unk_1005C7A90, (uint64_t)sub_10009393C, (uint64_t)&unk_1005C7AA8);
  if (v8 < 0)
  {
    v10 = v7;
    v11 = v8;
    v12 = objc_msgSend(v6, "unlock");
    if (qword_100640D10 != -1)
      v12 = (id)swift_once(&qword_100640D10, sub_100093588);
    __chkstk_darwin(v12);
    v21[2] = a2;
    v21[3] = a1;
    v13 = type metadata accessor for DOCItemCollectionCellContent();
    OS_dispatch_queue.sync<A>(execute:)(v23, sub_10010E8EC, v21, v13);
    sub_1000628C0(v9, v10, v11);
    v9 = (void *)v23[0];
  }
  ObjectType = swift_getObjectType(a1);
  DOCNode.identifierKey.getter(v23, ObjectType);
  swift_beginAccess(a2 + 32, v22, 33, 0);
  v15 = (void *)sub_100066F44((uint64_t)v23);
  v17 = v16;
  v19 = v18;
  sub_100067748((uint64_t)v23);
  swift_endAccess(v22);
  sub_10006702C(v15, v17, v19);
  objc_msgSend(v6, "unlock");
  return v9;
}

uint64_t sub_10010E4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t ObjectType;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  _QWORD aBlock[5];
  _QWORD *v47;
  uint64_t v48;
  _QWORD v49[3];
  _BYTE v50[24];
  _BYTE v51[32];

  v43 = a6;
  v44 = a7;
  v45 = a5;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectType = swift_getObjectType(a1);
  DOCNode.identifierKey.getter(aBlock, ObjectType);
  v17 = (_QWORD *)(a4 + 32);
  swift_beginAccess(a4 + 32, v51, 0, 0);
  v18 = *(_QWORD *)(a4 + 32);
  if (*(_QWORD *)(v18 + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)(a4 + 32));
    v19 = sub_100067654((uint64_t)aBlock);
    if ((v20 & 1) != 0)
    {
      v21 = *(_QWORD *)(v18 + 56) + 24 * v19;
      v23 = *(void **)v21;
      v22 = *(_QWORD *)(v21 + 8);
      v24 = *(_QWORD *)(v21 + 16);
      sub_10006A92C(*(void **)v21, v22, v24);
      swift_bridgeObjectRelease(v18);
      sub_100067748((uint64_t)aBlock);
      if ((v24 & 0x8000000000000000) == 0)
      {
        sub_10006A958((char *)v23);
        sub_1000628C0(v23, v22, v24);
      }
      return (uint64_t)v23;
    }
    swift_bridgeObjectRelease(v18);
  }
  v41 = a8;
  v42 = ObjectType;
  sub_100067748((uint64_t)aBlock);
  v25 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DOCItemCollectionCellContent()), "init");
  v26 = &v25[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_node];
  swift_beginAccess(&v25[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent_node], v50, 1, 0);
  v27 = *(_QWORD *)v26;
  *(_QWORD *)v26 = a1;
  swift_unknownObjectRetain_n(a1, 2);
  swift_unknownObjectRelease(v27);
  sub_10007804C();
  swift_unknownObjectRelease(a1);
  sub_10006A958(v25);
  if (!a2)
  {
    v36 = 0;
    v37 = 0;
    v23 = v25;
    goto LABEL_12;
  }
  v28 = *(_QWORD *)(a4 + 16);
  v29 = (_QWORD *)swift_allocObject(v43, 64, 7);
  v29[2] = a2;
  v29[3] = a3;
  v29[4] = v25;
  v29[5] = a4;
  v29[6] = a1;
  v29[7] = v28;
  aBlock[4] = v44;
  v47 = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = v41;
  v45 = _Block_copy(aBlock);
  v49[0] = _swiftEmptyArrayStorage;
  sub_10008BA00(a2, a3);
  swift_unknownObjectRetain(a1);
  sub_10008BA00(a2, a3);
  v30 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v43 = v25;
  swift_retain();
  v31 = sub_10006922C((uint64_t *)&unk_100647540);
  v44 = a2;
  v32 = v31;
  v33 = sub_10008825C((unint64_t *)&qword_100641270, (uint64_t *)&unk_100647540);
  dispatch thunk of SetAlgebra.init<A>(_:)(v49, v32, v33, v13, v30);
  v34 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  v23 = (void *)DispatchWorkItem.init(flags:block:)(v15, v45);
  swift_release(v47);
  if (qword_100640D10 != -1)
    swift_once(&qword_100640D10, sub_100093588);
  OS_dispatch_queue.async(execute:)(v23);
  result = sub_100087534(v44, a3);
  v36 = *(_QWORD *)(a4 + 16);
  if (v36 != -1)
  {
    v37 = v43 | 0x8000000000000000;
    *(_QWORD *)(a4 + 16) = v36 + 1;
LABEL_12:
    v38 = v25;
    DOCNode.identifierKey.getter(aBlock, v42);
    swift_beginAccess(v17, v49, 33, 0);
    sub_10006A92C(v23, v36, v37);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v17);
    v48 = *v17;
    *v17 = 0x8000000000000000;
    sub_100078950((uint64_t)v23, v36, v37, (uint64_t)aBlock, isUniquelyReferenced_nonNull_native);
    v40 = *v17;
    *v17 = v48;
    swift_bridgeObjectRelease(v40);
    sub_100067748((uint64_t)aBlock);
    swift_endAccess(v49);

    return (uint64_t)v23;
  }
  __break(1u);
  return result;
}

uint64_t sub_10010E8C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10010E8EC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10010DF64(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10010E918()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_10010E93C()
{
  uint64_t result;

  sub_10004F2F0(0, &qword_100643768, NSString_ptr);
  result = NSString.init(stringLiteral:)("com.apple.documentManager.defaultSceneKey", 41, 2);
  qword_100643728 = result;
  return result;
}

id DOCNodeContextMenuConfiguration.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void *DOCInteractionManager.lastOpenedItem.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem);
  swift_beginAccess(v0 + OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DOCInteractionManager.lastOpenedItem.setter(void *a1)
{
  sub_10010ED34(a1, &OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem, (void (*)(void *))sub_1000AE638);
}

void (*DOCInteractionManager.lastOpenedItem.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem;
  v3[4] = v1;
  v3[5] = v4;
  v5 = (void **)(v1 + v4);
  swift_beginAccess(v1 + v4, v3, 1, 0);
  v6 = *v5;
  v3[3] = *v5;
  v7 = v6;
  return sub_10010EBDC;
}

void sub_10010EBDC(uint64_t a1, char a2)
{
  sub_10010F258(a1, a2, (void (*)(void *))sub_1000AE638);
}

id sub_10010EBF4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id *v3;
  _BYTE v5[24];

  v3 = (id *)(a1 + *a3);
  swift_beginAccess(v3, v5, 0, 0);
  return *v3;
}

void *DOCInteractionManager.lastSelectedItem.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC5Files21DOCInteractionManager_lastSelectedItem);
  swift_beginAccess(v0 + OBJC_IVAR____TtC5Files21DOCInteractionManager_lastSelectedItem, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void sub_10010EC98(char *a1, uint64_t a2, void *a3, _QWORD *a4, void (*a5)(void *))
{
  void **v8;
  void *v9;
  id v10;
  char *v11;
  char v12[24];

  v8 = (void **)&a1[*a4];
  swift_beginAccess(v8, v12, 1, 0);
  v9 = *v8;
  *v8 = a3;
  v10 = a3;
  v11 = a1;
  a5(v9);

}

void DOCInteractionManager.lastSelectedItem.setter(void *a1)
{
  sub_10010ED34(a1, &OBJC_IVAR____TtC5Files21DOCInteractionManager_lastSelectedItem, sub_10010EDA8);
}

void sub_10010ED34(void *a1, _QWORD *a2, void (*a3)(void *))
{
  uint64_t v3;
  void **v6;
  void *v7;
  id v8;
  _BYTE v9[24];

  v6 = (void **)(v3 + *a2);
  swift_beginAccess(v6, v9, 1, 0);
  v7 = *v6;
  *v6 = a1;
  v8 = a1;
  a3(v7);

}

void sub_10010EDA8(void *a1)
{
  uint64_t v1;
  NSObject *v3;
  Class isa;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void **v10;
  void *v11;
  BOOL v12;
  id v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint8_t *v20;
  id v21;
  NSObject *v22;
  id v23;
  char *v24;
  objc_class *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  os_log_t v30;
  uint8_t *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint8_t *v47;
  uint8_t *v48;
  Class v49;
  uint64_t v50;
  os_log_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54[24];

  v3 = type metadata accessor for Logger(0);
  isa = v3[-1].isa;
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v47 - v8;
  v10 = (void **)(v1 + OBJC_IVAR____TtC5Files21DOCInteractionManager_lastSelectedItem);
  swift_beginAccess(v1 + OBJC_IVAR____TtC5Files21DOCInteractionManager_lastSelectedItem, v54, 0, 0);
  v11 = *v10;
  if (*v10)
    v12 = 1;
  else
    v12 = a1 == 0;
  if (!v12)
  {
    v13 = a1;
    v14 = Logger.UI.unsafeMutableAddressor(v13);
    (*((void (**)(char *, uint64_t, NSObject *))isa + 2))(v9, v14, v3);
    v15 = v13;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter();
    v18 = v17;
    if (os_log_type_enabled(v16, v17))
    {
      v51 = v16;
      v19 = swift_slowAlloc(12, -1);
      LODWORD(v49) = v18;
      v20 = (uint8_t *)v19;
      v50 = swift_slowAlloc(32, -1);
      v53 = v50;
      v48 = v20;
      *(_DWORD *)v20 = 136315138;
      v47 = v20 + 4;
      v21 = v15;
      v22 = v3;
      v23 = objc_msgSend(v21, "description");
      v24 = v7;
      v25 = isa;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v28 = v27;

      v3 = v22;
      v29 = v26;
      isa = v25;
      v7 = v24;
      v52 = sub_1000544FC(v29, v28, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);

      swift_bridgeObjectRelease(v28);
      v30 = v51;
      v31 = v48;
      _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v49, "[Interaction] Clearing last selected item. Previous item was: %s", v48, 0xCu);
      v32 = v50;
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      (*((void (**)(char *, NSObject *))isa + 1))(v9, v22);
    }
    else
    {

      (*((void (**)(char *, NSObject *))isa + 1))(v9, v3);
    }
    v11 = *v10;
  }
  if (v11)
  {
    v33 = v11;
    v34 = Logger.UI.unsafeMutableAddressor(v33);
    (*((void (**)(char *, uint64_t, NSObject *))isa + 2))(v7, v34, v3);
    v35 = v33;
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v51 = v3;
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v50 = (uint64_t)v7;
      v40 = v39;
      v53 = v39;
      *(_DWORD *)v38 = 136315138;
      v41 = v35;
      v42 = objc_msgSend(v41, "description");
      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v49 = isa;
      v44 = v43;
      v46 = v45;

      v52 = sub_1000544FC(v44, v46, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);

      swift_bridgeObjectRelease(v46);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "[Interaction] Setting the last selected item: %s", v38, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v38, -1, -1);

      (*((void (**)(uint64_t, os_log_t))v49 + 1))(v50, v51);
    }
    else
    {

      (*((void (**)(char *, NSObject *))isa + 1))(v7, v3);
    }
  }
}

void (*DOCInteractionManager.lastSelectedItem.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC5Files21DOCInteractionManager_lastSelectedItem;
  v3[4] = v1;
  v3[5] = v4;
  v5 = (void **)(v1 + v4);
  swift_beginAccess(v1 + v4, v3, 1, 0);
  v6 = *v5;
  v3[3] = *v5;
  v7 = v6;
  return sub_10010F24C;
}

void sub_10010F24C(uint64_t a1, char a2)
{
  sub_10010F258(a1, a2, sub_10010EDA8);
}

void sub_10010F258(uint64_t a1, char a2, void (*a3)(void *))
{
  void *v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;

  v4 = *(void **)a1;
  v6 = (void **)(*(_QWORD *)a1 + 24);
  v5 = *v6;
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v9 = *(void **)(v8 + v7);
  *(_QWORD *)(v8 + v7) = *v6;
  if ((a2 & 1) != 0)
  {
    v10 = v5;
    a3(v9);

    v9 = *v6;
  }
  else
  {
    v11 = v5;
    a3(v9);

  }
  free(v4);
}

id DOCInteractionManager.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files21DOCInteractionManager_lastOpenedItem] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Files21DOCInteractionManager_lastSelectedItem] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DOCInteractionManager();
  return objc_msgSendSuper2(&v2, "init");
}

id DOCInteractionManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DOCInteractionManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_10010F394(void *a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;

  v3 = qword_100640D20;
  v4 = a1;
  if (v3 != -1)
    swift_once(&qword_100640D20, sub_1000AE5F8);
  v5 = (void *)qword_100643720;
  v6 = objc_msgSend((id)qword_100643720, "objectForKey:", v4);
  if (!v6)
  {
    v6 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DOCInteractionManager()), "init");
    objc_msgSend(v5, "setObject:forKey:");
  }

  objc_msgSend((id)qword_100643720, "setObject:forKey:", v6, a2);
}

unint64_t sub_10010F470()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100653000;
  if (!qword_100653000)
  {
    v1 = sub_10004F2F0(255, (unint64_t *)&qword_1006419B0, FPItem_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100653000);
  }
  return result;
}

unint64_t sub_10010F4CC()
{
  unint64_t result;

  result = qword_100643770;
  if (!qword_100643770)
  {
    result = swift_getWitnessTable(&unk_1004DAA40, &type metadata for GetContentOfFolderIntent);
    atomic_store(result, (unint64_t *)&qword_100643770);
  }
  return result;
}

unint64_t sub_10010F514()
{
  unint64_t result;

  result = qword_100643778;
  if (!qword_100643778)
  {
    result = swift_getWitnessTable(&unk_1004DAA68, &type metadata for GetContentOfFolderIntent);
    atomic_store(result, (unint64_t *)&qword_100643778);
  }
  return result;
}

uint64_t sub_10010F558(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_100563E48, 1) + 8);
}

uint64_t sub_10010F57C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100563E20, 1);
}

uint64_t sub_10010F58C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v13;
  _BYTE v14[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v14[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10007E874(v10, qword_100672628);
  sub_10007E788(v10, (uint64_t)qword_100672628);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000016, 0x800000010050F8B0);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  v13 = 2;
  return LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)("GET_CONTENTS_OF_FOLDER_INTENT_TITLE", 35, 2, v9, 0x6E65746E49707041, 0xEA00000000007374, v6, v3, "Title for the Get Contents of Folder intent", 43, v13);
}

uint64_t sub_10010F730()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t KeyPath;
  uint64_t v9;
  Swift::String v10;
  uint64_t v12;

  v0 = sub_10006922C(&qword_100643938);
  __chkstk_darwin(v0);
  v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10006922C(&qword_100643940);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100111478();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(44, 1, &type metadata for GetContentOfFolderIntent, v6);
  v7._object = (void *)0x800000010050F850;
  v7._countAndFlagsBits = 0xD00000000000002CLL;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_1004DAAE0);
  v9 = sub_10006922C(&qword_100643948);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v9);
  swift_release(KeyPath);
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v10);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for GetContentOfFolderIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0x6E65746E49707041, 0xEA00000000007374, &type metadata for GetContentOfFolderIntent, v6);
}

uint64_t sub_10010F8A8()
{
  return IntentParameter.projectedValue.getter();
}

_QWORD *sub_10010F8C8@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

uint64_t sub_10010F8E8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for IntentAuthenticationPolicy(0);
  sub_10007E874(v0, qword_100672640);
  v1 = sub_10007E788(v0, (uint64_t)qword_100672640);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for IntentAuthenticationPolicy.requiresAuthentication(_:), v0);
}

uint64_t sub_10010F940(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[6] = a1;
  v2[7] = a2;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_10006922C((uint64_t *)&unk_100643900) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[8] = swift_task_alloc(v3);
  v2[9] = swift_task_alloc(v3);
  v2[10] = swift_task_alloc(v3);
  v4 = type metadata accessor for DOCFileEntity(0);
  v2[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[12] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v6);
  v2[14] = swift_task_alloc(v6);
  v2[15] = swift_task_alloc(v6);
  v7 = type metadata accessor for Logger(0);
  v2[16] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[17] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v9);
  v2[19] = swift_task_alloc(v9);
  return swift_task_switch(sub_10010FA34, 0, 0);
}

uint64_t sub_10010FA34(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v2 = v1[19];
  v3 = v1[16];
  v4 = v1[17];
  v5 = Logger.AppIntents.unsafeMutableAddressor(a1);
  v1[20] = v5;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v1[21] = v6;
  v7 = v6(v2, v5, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[GetContentOfFolderIntent] Performing Get Contents of Folder Intent", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }
  v11 = v1[19];
  v12 = v1[16];
  v13 = v1[17];
  v14 = (_QWORD *)v1[15];
  v15 = v1[11];

  v16 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v1[22] = v16;
  v16(v11, v12);
  IntentParameter.wrappedValue.getter(v14);
  v17 = *(void **)((char *)v14 + *(int *)(v15 + 28));
  v1[23] = v17;
  v18 = v17;
  sub_1000EACF8((uint64_t)v14);
  v19 = swift_task_alloc(32);
  v1[24] = v19;
  *(_QWORD *)(v19 + 16) = v18;
  v20 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v1[25] = v20;
  v21 = sub_10006922C((uint64_t *)&unk_100643CB0);
  *v20 = v1;
  v20[1] = sub_10010FBD0;
  return withCheckedContinuation<A>(isolation:function:_:)(v1 + 2, 0, 0, 0xD000000000000015, 0x800000010050F830, sub_1001114BC, v19, v21);
}

uint64_t sub_10010FBD0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10010FC2C, 0, 0);
}

uint64_t sub_10010FC2C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t *v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v6 = *(_QWORD *)(v1 + 16);
  v65 = (uint64_t)_swiftEmptyArrayStorage;
  v7 = (unint64_t)v6 >> 62;
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v0 = v6;
    else
      v0 = (v6 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(v6);
    v8 = _CocoaArrayWrapper.endIndex.getter(v0);
    v62 = (unint64_t)v6 >> 62;
    if (v8)
      goto LABEL_3;
  }
  else
  {
    v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v6);
    v62 = (unint64_t)v6 >> 62;
    if (v8)
    {
LABEL_3:
      if (v8 < 1)
      {
        __break(1u);
        goto LABEL_56;
      }
      v9 = 0;
      v4 = (_QWORD *)(v6 & 0xC000000000000001);
      do
      {
        if (v4)
        {
          v11 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v6);
        }
        else
        {
          v11 = *(void **)(v6 + 8 * v9 + 32);
          swift_unknownObjectRetain(v11);
        }
        v2 = (uint8_t *)objc_msgSend(v11, "fpfs_fpItem");
        swift_unknownObjectRelease(v11);
        if (v2)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
          v3 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v13 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v3 >= v13 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v3 + 1, 1);
          v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v3, v2);
          specialized Array._endMutation()(v10);
        }
        ++v9;
      }
      while (v8 != v9);
      v14 = swift_bridgeObjectRelease(v6);
      v5 = v65;
      goto LABEL_19;
    }
  }
  v14 = swift_bridgeObjectRelease(v6);
  v5 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_19:
  (*(void (**)(_QWORD, _QWORD, _QWORD, __n128))(v1 + 168))(*(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 128), v14);
  swift_bridgeObjectRetain_n(v5, 2);
  v15 = swift_bridgeObjectRetain(v6);
  v0 = Logger.logObject.getter(v15);
  LOBYTE(v7) = static os_log_type_t.default.getter(v0);
  v8 = (unint64_t)v5 >> 62;
  if (!os_log_type_enabled(v0, (os_log_type_t)v7))
  {
    swift_bridgeObjectRelease_n(v6, 2);
    swift_bridgeObjectRelease_n(v5, 2);
    goto LABEL_30;
  }
  v3 = v1 + 40;
  v4 = (_QWORD *)(v1 + 32);
  v2 = (uint8_t *)swift_slowAlloc(22, -1);
  *(_DWORD *)v2 = 134218240;
  if (v8)
    goto LABEL_57;
  v16 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease(v5);
    *v4 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v4, v3);
    swift_bridgeObjectRelease(v5);
    *((_WORD *)v2 + 6) = 2048;
    if (v62)
    {
      v17 = v6 < 0 ? v6 : v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v4 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v17);
      swift_bridgeObjectRelease(v6);
    }
    else
    {
      v4 = *(_QWORD **)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v1 + 40) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v1 + 48);
    swift_bridgeObjectRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v0, (os_log_type_t)v7, "[GetContentOfFolderIntent] %ld items out of %ld nodes found", v2, 0x16u);
    swift_slowDealloc(v2, -1, -1);
LABEL_30:

    (*(void (**)(_QWORD, _QWORD))(v1 + 176))(*(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 128));
    if (v8)
    {
      if (v5 < 0)
        v46 = v5;
      else
        v46 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v8 = _CocoaArrayWrapper.endIndex.getter(v46);
      swift_bridgeObjectRelease(v5);
      if (!v8)
      {
LABEL_53:
        swift_bridgeObjectRelease(v5);
        v42 = _swiftEmptyArrayStorage;
        goto LABEL_54;
      }
    }
    else
    {
      v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v8)
        goto LABEL_53;
    }
    v65 = (uint64_t)_swiftEmptyArrayStorage;
    v0 = &v65;
    sub_1001550AC(0, v8 & ~(v8 >> 63), 0);
    if ((v8 & 0x8000000000000000) == 0)
      break;
LABEL_56:
    __break(1u);
LABEL_57:
    if (v5 < 0)
      v55 = v5;
    else
      v55 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v16 = _CocoaArrayWrapper.endIndex.getter(v55);
    swift_bridgeObjectRelease(v5);
  }
  v57 = *(_QWORD *)(v1 + 88);
  v58 = *(_QWORD *)(v1 + 96);
  v56 = v5 & 0xC000000000000001;
  sub_10006922C((uint64_t *)&unk_100643910);
  v18 = 0;
  v60 = v8;
  v63 = v5;
  do
  {
    if (v56)
      v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v5);
    else
      v19 = *(id *)(v5 + 8 * v18 + 32);
    v20 = v19;
    v21 = *(_QWORD *)(v1 + 104);
    v22 = *(_QWORD *)(v1 + 88);
    v23 = *(int *)(v57 + 20);
    *(_QWORD *)(v21 + v23) = EntityProperty<>.init()();
    v24 = *(int *)(v57 + 24);
    *(_QWORD *)(v21 + v24) = EntityProperty<>.init()();
    FileEntityIdentifier.init(fileProviderItemID:)(objc_msgSend(v20, "itemID"));
    *(_QWORD *)(v21 + *(int *)(v22 + 28)) = v20;
    v25 = v20;
    v26 = objc_msgSend(v25, "creationDate");
    v27 = *(_QWORD *)(v1 + 80);
    if (v26)
    {
      v28 = v26;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

      v29 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v27, 0, 1, v29);
    }
    else
    {
      v30 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v27, 1, 1, v30);
    }
    v31 = *(_QWORD *)(v1 + 72);
    v32 = *(_QWORD *)(v1 + 80);
    sub_1001114C4(v32, v31);
    EntityProperty.wrappedValue.setter(v31);
    sub_10011150C(v32);
    v33 = objc_msgSend(v25, "contentModificationDate");
    v34 = *(_QWORD *)(v1 + 64);
    if (v33)
    {
      v35 = v33;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v33);

      v36 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v34, 0, 1, v36);
    }
    else
    {
      v37 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v34, 1, 1, v37);
    }
    v39 = *(_QWORD *)(v1 + 104);
    v38 = *(_QWORD *)(v1 + 112);
    v40 = *(_QWORD *)(v1 + 64);
    v41 = *(_QWORD *)(v1 + 72);
    sub_1001114C4(v40, v41);
    EntityProperty.wrappedValue.setter(v41);
    sub_10011150C(v40);

    sub_10011154C(v39, v38);
    v42 = (_QWORD *)v65;
    if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0)
    {
      sub_1001550AC(0, v42[2] + 1, 1);
      v42 = (_QWORD *)v65;
    }
    v5 = v63;
    v44 = v42[2];
    v43 = v42[3];
    if (v44 >= v43 >> 1)
    {
      sub_1001550AC(v43 > 1, v44 + 1, 1);
      v42 = (_QWORD *)v65;
    }
    v45 = *(_QWORD *)(v1 + 112);
    ++v18;
    v42[2] = v44 + 1;
    sub_10011154C(v45, (uint64_t)v42+ ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))+ *(_QWORD *)(v58 + 72) * v44);
  }
  while (v60 != v18);
  swift_bridgeObjectRelease(v63);
LABEL_54:
  v48 = *(_QWORD *)(v1 + 144);
  v47 = *(_QWORD *)(v1 + 152);
  v50 = *(_QWORD *)(v1 + 112);
  v49 = *(_QWORD *)(v1 + 120);
  v51 = *(_QWORD *)(v1 + 104);
  v59 = *(_QWORD *)(v1 + 80);
  v61 = *(_QWORD *)(v1 + 72);
  v64 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 24) = v42;
  v52 = sub_10006922C(&qword_10064C3B0);
  v53 = sub_100111590();
  static IntentResult.result<A>(value:)(v1 + 24, v52, v53);
  swift_bridgeObjectRelease(v42);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v59);
  swift_task_dealloc(v61);
  swift_task_dealloc(v64);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1001102FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100110348(&qword_100640D30, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_100672628, (uint64_t)sub_10010F58C, a1);
}

uint64_t sub_100110324@<X0>(uint64_t a1@<X8>)
{
  return sub_100110348(&qword_100640D38, (uint64_t (*)(_QWORD))&type metadata accessor for IntentAuthenticationPolicy, (uint64_t)qword_100672640, (uint64_t)sub_10010F8E8, a1);
}

uint64_t sub_100110348@<X0>(_QWORD *a1@<X2>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = a2(0);
  v9 = sub_10007E788(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v9, v8);
}

uint64_t sub_1001103BC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1006438FC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000EA854;
  return sub_10010F940(a1, v4);
}

uint64_t sub_100110414@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100110E2C();
  *a1 = result;
  return result;
}

uint64_t sub_100110438(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100111478();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

double sub_100110460(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v26 = a2;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v6 - 8);
  v28 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10006922C(&qword_100643930);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100086BF0();
  v14 = (void *)static OS_dispatch_queue.main.getter(v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  v15 = *(unsigned __int8 *)(v10 + 80);
  v16 = (v15 + 24) & ~v15;
  v17 = swift_allocObject(&unk_1005C7B80, v16 + v11, v15 | 7);
  v18 = v26;
  *(_QWORD *)(v17 + 16) = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v17 + v16, v12, v9);
  aBlock[4] = sub_100111684;
  v32 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004A82C;
  aBlock[3] = &unk_1005C7B98;
  v19 = _Block_copy(aBlock);
  v20 = swift_unknownObjectRetain(v18);
  static DispatchQoS.unspecified.getter(v20);
  v30 = _swiftEmptyArrayStorage;
  v21 = sub_10005A360((unint64_t *)&qword_100641260, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_10006922C((uint64_t *)&unk_100647540);
  v23 = sub_100062698((unint64_t *)&qword_100641270, (uint64_t *)&unk_100647540, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v22, v23, v3, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v28);
  *(_QWORD *)&result = swift_release(v32).n128_u64[0];
  return result;
}

double sub_1001106DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  uint64_t v14;

  v4 = sub_10006922C(&qword_100643930);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FolderNodeObserver();
  v9 = (_QWORD *)swift_allocObject(v8, 40, 7);
  v9[3] = 0;
  v9[4] = 0;
  v9[2] = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  v10 = *(unsigned __int8 *)(v5 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_1005C7BD0, v11 + v6, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v12 + v11, v7, v4);
  swift_unknownObjectRetain(a1);
  sub_10011082C((uint64_t)sub_10011171C, v12);
  swift_release(v12);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

uint64_t sub_1001107E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  swift_bridgeObjectRetain(a1);
  v1 = sub_10006922C(&qword_100643930);
  return CheckedContinuation.resume(returning:)(&v3, v1);
}

void sub_10011082C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  char *v7;
  uint64_t ObjectType;
  void *v9;
  char *v10;
  double (*v11)(uint64_t);
  objc_class *v12;
  id v13;
  char *v14;
  char *v15;
  double (**v16)(uint64_t);
  id v17;
  char *v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  _BYTE v25[24];
  objc_super v26;

  v3 = v2;
  v6 = v3[2];
  v7 = (char *)objc_allocWithZone((Class)type metadata accessor for DOCNodeObserver());
  ObjectType = swift_getObjectType(v6);
  v9 = (void *)swift_unknownObjectRetain(v6);
  v10 = sub_100452ED0(v9, 0, 0, v7, ObjectType);
  v11 = (double (*)(uint64_t))swift_allocObject(&unk_1005C7B08, 40, 7);
  *((_QWORD *)v11 + 2) = v3;
  *((_QWORD *)v11 + 3) = a1;
  *((_QWORD *)v11 + 4) = a2;
  v12 = (objc_class *)type metadata accessor for DOCNodeObserverSubscriber(0);
  v13 = objc_allocWithZone(v12);
  swift_retain();
  swift_retain();
  swift_retain();
  v14 = (char *)v13;
  UUID.init()(v14);
  v15 = &v14[OBJC_IVAR____TtC5Files25DOCNodeObserverSubscriber_updateBlock];
  *(_QWORD *)v15 = DOCSplitBrowserViewController.didCommitPreview(of:);
  *((_QWORD *)v15 + 1) = 0;
  v16 = (double (**)(uint64_t))&v14[OBJC_IVAR____TtC5Files25DOCNodeObserverSubscriber_didFinishGatheringBlock];
  *v16 = sub_10011133C;
  v16[1] = v11;
  swift_retain();

  v26.receiver = v14;
  v26.super_class = v12;
  v17 = objc_msgSendSuper2(&v26, "init");
  swift_release(v11);
  v18 = &v10[OBJC_IVAR____TtC5Files15DOCNodeObserver_subscribers];
  swift_beginAccess(&v10[OBJC_IVAR____TtC5Files15DOCNodeObserver_subscribers], v25, 33, 0);
  v19 = v17;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
  v21 = *(_QWORD *)((*(_QWORD *)v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v20 = *(_QWORD *)((*(_QWORD *)v18 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v21 >= v20 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
  v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
  specialized Array._endMutation()(v22);
  swift_endAccess(v25);
  swift_release(v11);
  v23 = (void *)v3[4];
  v3[4] = v19;

  sub_1000B0BAC();
  v24 = (void *)v3[3];
  v3[3] = v10;

}

double sub_100110A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  double result;
  uint64_t v18;

  v8 = sub_10006922C(&qword_1006438A0);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = swift_allocObject(&unk_1005C7B30, 24, 7);
  swift_weakInit(v12 + 16, a2);
  type metadata accessor for MainActor(0);
  swift_retain();
  swift_bridgeObjectRetain(a1);
  swift_retain();
  v14 = static MainActor.shared.getter(v13);
  v15 = (_QWORD *)swift_allocObject(&unk_1005C7B58, 64, 7);
  v15[2] = v14;
  v15[3] = &protocol witness table for MainActor;
  v15[4] = a3;
  v15[5] = a4;
  v15[6] = a1;
  v15[7] = v12;
  swift_release(v12);
  v16 = sub_100174E78((uint64_t)v10, (uint64_t)&unk_1006438B0, (uint64_t)v15);
  *(_QWORD *)&result = swift_release(v16).n128_u64[0];
  return result;
}

uint64_t sub_100110B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v8 = type metadata accessor for MainActor(0);
  v7[9] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  return swift_task_switch(sub_100110BCC, v9, v10);
}

uint64_t sub_100110BCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, __n128);
  __n128 v4;
  uint64_t Strong;
  __n128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(void (**)(uint64_t, __n128))(v0 + 40);
  v4 = swift_release(*(_QWORD *)(v0 + 72));
  v1 += 16;
  v3(v2, v4);
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v7 = Strong;
    sub_100110C54();
    v6 = swift_release(v7);
  }
  return (*(uint64_t (**)(__n128))(v0 + 8))(v6);
}

void sub_100110C54()
{
  uint64_t v0;
  void *v1;
  void *v2;
  char *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  void *v10;
  char *v11;
  _BYTE v12[32];
  char v13[24];

  v1 = *(void **)(v0 + 24);
  if (v1)
  {
    v11 = v1;
    sub_1001626AC();
    v2 = *(void **)(v0 + 32);
    if (v2)
    {
      v3 = &v11[OBJC_IVAR____TtC5Files15DOCNodeObserver_subscribers];
      swift_beginAccess(&v11[OBJC_IVAR____TtC5Files15DOCNodeObserver_subscribers], v13, 0, 0);
      v4 = *(_QWORD *)v3;
      v5 = v2;
      v6 = swift_bridgeObjectRetain(v4);
      v7 = sub_100453090(v6, (uint64_t)v5);
      v9 = v8;
      swift_bridgeObjectRelease(v4);
      if ((v9 & 1) != 0)
      {

      }
      else
      {
        swift_beginAccess(v3, v12, 33, 0);
        v10 = (void *)sub_100088620(v7);
        swift_endAccess(v12);

      }
    }
    else
    {

    }
  }
}

uint64_t sub_100110D70()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for FolderNodeObserver()
{
  return objc_opt_self(_TtC5Files18FolderNodeObserver);
}

ValueMetadata *type metadata accessor for GetContentOfFolderIntent()
{
  return &type metadata for GetContentOfFolderIntent;
}

uint64_t sub_100110DD4()
{
  return sub_100062698(&qword_100643880, &qword_100643888, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_100110E00()
{
  return sub_100062698((unint64_t *)&unk_100643890, (uint64_t *)&unk_100647F00, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_100110E2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  __int16 v43;
  int v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v50 = *(_QWORD *)(v0 - 8);
  v51 = v0;
  __chkstk_darwin(v0);
  v49 = (char *)&v45 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_10006922C(&qword_100643360);
  __chkstk_darwin(v2);
  v48 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v46 = (char *)&v45 - v5;
  v6 = sub_10006922C((uint64_t *)&unk_1006438C0);
  __chkstk_darwin(v6);
  v45 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10006922C(&qword_100647F10);
  __chkstk_darwin(v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_10006922C((uint64_t *)&unk_1006438D0);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x7265646C6F46, 0xE600000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  v43 = 2;
  LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)("GET_CONTENTS_OF_FOLDER_INTENT_FOLDER_PARAM_TITLE", 48, 2, v20, 0x6E65746E49707041, 0xEA00000000007374, v17, v14, "Title of the folder parameter of the Get Contents of Folder Intent", 66, v43);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000031, 0x800000010050F7A0);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LOWORD(v44) = 2;
  LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)("GET_CONTENTS_OF_FOLDER_INTENT_FOLDER_PARAM_DESCRIPTION", 54, 2, v20, 0x6E65746E49707041, 0xEA00000000007374, v17, v14, "Description of the folder parameter of the Get Contents of Folder Intent", 72, v44);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for DOCFileEntity(0);
  v30 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v45, 1, 1);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v46;
  v32(v46, 1, 1, v31);
  v34 = v48;
  v32(v48, 1, 1, v31);
  v35 = sub_10006922C((uint64_t *)&unk_10064B460);
  v36 = type metadata accessor for UTType(0);
  v37 = swift_allocObject(v35, ((*(unsigned __int8 *)(*(_QWORD *)(v36 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v36 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v36 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v36 - 8) + 80) | 7);
  *(_OWORD *)(v37 + 16) = xmmword_1004D9670;
  static UTType.folder.getter(v37);
  v38 = type metadata accessor for FileEntitySpotlight.Source();
  swift_allocObject(v38, 64, 7);
  v52[0] = sub_10029FBBC(v37, 1);
  v52[1] = 2;
  v39 = v49;
  (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v49, enum case for InputConnectionBehavior.default(_:), v51);
  v40 = sub_100111434();
  v41 = sub_10005A360((unint64_t *)&qword_100643D40, type metadata accessor for DOCFileEntity, (uint64_t)&unk_1004DAF80);
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:optionsProvider:)(v24, v10, v30, v33, v34, v39, v52, &type metadata for LocationOptionsProvider, v40, v41);
}

uint64_t sub_100111310()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

double sub_10011133C(uint64_t a1)
{
  uint64_t *v1;

  return sub_100110A20(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100111348()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10011136C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001113A8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_1006438AC);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1000EA854;
  return sub_100110B5C(a1, v4, v5, v6, v7, v9, v8);
}

unint64_t sub_100111434()
{
  unint64_t result;

  result = qword_1006438E0;
  if (!qword_1006438E0)
  {
    result = swift_getWitnessTable(&unk_1004E13B8, &type metadata for LocationOptionsProvider);
    atomic_store(result, (unint64_t *)&qword_1006438E0);
  }
  return result;
}

unint64_t sub_100111478()
{
  unint64_t result;

  result = qword_1006438F0;
  if (!qword_1006438F0)
  {
    result = swift_getWitnessTable(&unk_1004DA9B0, &type metadata for GetContentOfFolderIntent);
    atomic_store(result, &qword_1006438F0);
  }
  return result;
}

double sub_1001114BC(uint64_t a1)
{
  uint64_t v1;

  return sub_100110460(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1001114C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C((uint64_t *)&unk_100643900);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011150C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10006922C((uint64_t *)&unk_100643900);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10011154C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DOCFileEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100111590()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100643920;
  if (!qword_100643920)
  {
    v1 = sub_10007E830(&qword_10064C3B0);
    sub_10005A360((unint64_t *)&qword_100643928, type metadata accessor for DOCFileEntity, (uint64_t)&unk_1004DB0C8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100643920);
  }
  return result;
}

uint64_t sub_10011160C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = sub_10006922C(&qword_100643930);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  return swift_deallocObject(v0, v5, v6);
}

double sub_100111684()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_10006922C(&qword_100643930) - 8) + 80);
  return sub_1001106DC(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1001116B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10006922C(&qword_100643930);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10011171C(uint64_t a1)
{
  sub_10006922C(&qword_100643930);
  return sub_1001107E8(a1);
}

uint64_t sub_10011175C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

id sub_100111784()
{
  id *v0;

  return objc_msgSend(*v0, "configuration");
}

void sub_1001117AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2, v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_100116D58();

  }
}

id sub_1001117FC()
{
  char *v0;
  uint64_t v1;
  objc_super v3;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC5Files14DOCTipsManager_sourceObserver], "stopObservingSources");
  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Files14DOCTipsManager_sharingFlowTask];
  if (v1)
  {
    swift_retain();
    sub_10006922C((uint64_t *)&unk_100643490);
    Task.cancel()();
    swift_release(v1);
  }
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for DOCTipsManager(0);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1001119F8()
{
  return type metadata accessor for DOCTipsManager(0);
}

id sub_100111A00(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD, _QWORD);
  void (*v25)(_QWORD, _QWORD);
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  NSString v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(char *);
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  Class isa;
  id v68;
  id v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint8_t *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  _QWORD *v84;
  void *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  NSURL *v89;
  void *v90;
  void *v91;
  unsigned int v92;
  id v93;
  void (*v94)(char *, uint64_t);
  id v95;
  char *v96;
  void (*v97)(uint64_t, uint64_t);
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  _QWORD *v105;
  void *v106;
  uint64_t v107;
  _QWORD *v108;
  void (*v109)(uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  double v117;
  uint64_t (*v119)(char *);
  void (*v120)(_QWORD, _QWORD);
  void (*v121)(_QWORD, _QWORD);
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  id v131;
  _QWORD v132[3];

  v127 = a1;
  v3 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v3);
  v5 = (char *)&v119 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10006922C(&qword_1006438A0);
  v11 = __chkstk_darwin(v10);
  v130 = (char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for Tips.InvalidationReason(0, v11);
  v13 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v15 = (char *)&v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  __chkstk_darwin(v17);
  __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  v21 = (char *)&v119 - v20;
  __chkstk_darwin(v22);
  v28 = (char *)&v119 - v27;
  if (a2)
  {
    v29 = v129;
    if (a2 == 1)
    {
      v30 = Logger.DocumentManager.unsafeMutableAddressor(v23);
      v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(v28, v30, v128);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Files Family Tip, user sent folder invite", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v16 + 8))(v28, v128);
      v132[0] = *(_QWORD *)(v29 + OBJC_IVAR____TtC5Files14DOCTipsManager_familySharedFolderTip);
      v35 = v126;
      (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for Tips.InvalidationReason.actionPerformed(_:), v126);
      v36 = type metadata accessor for DOCTipsFamilyTip();
      v37 = sub_100118108();
      v38 = swift_retain();
      Tip.invalidate(reason:)(v15, v36, v37, v38);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v35);
      swift_release(v132[0]);
      static String._unconditionallyBridgeFromObjectiveC(_:)(DOCDefaultsSuiteName);
      v40 = v39;
      v41 = objc_allocWithZone((Class)NSUserDefaults);
      v42 = String._bridgeToObjectiveC()();
      v43 = objc_msgSend(v41, "initWithSuiteName:", v42, swift_bridgeObjectRelease(v40).n128_f64[0]);

      if (v43)
      {
        objc_msgSend(v43, "setBool:forKey:", 1, DOCUserDefaultsKeyIsSharingFolderWithAdultFamilyMember);

      }
      v44 = type metadata accessor for TaskPriority(0);
      v45 = (uint64_t)v130;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v130, 1, 1, v44);
      v46 = type metadata accessor for MainActor(0);
      v47 = static MainActor.shared.getter(v46);
      v48 = swift_allocObject(&unk_1005C7EF0, 32, 7);
      *(_QWORD *)(v48 + 16) = v47;
      *(_QWORD *)(v48 + 24) = &protocol witness table for MainActor;
      v49 = sub_100174E78(v45, (uint64_t)&unk_100643AE8, v48);
      swift_release(v49);
    }
  }
  else
  {
    v50 = (uint64_t)v5;
    v123 = v26;
    v124 = v9;
    v120 = v24;
    v121 = v25;
    v125 = v6;
    v126 = v7;
    v51 = Logger.DocumentManager.unsafeMutableAddressor(v23);
    v52 = *(uint64_t (**)(char *))(v16 + 16);
    v122 = v51;
    v53 = v128;
    v54 = v52(v21);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.default.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Files Family Tip, user cancelled invite", v57, 2u);
      swift_slowDealloc(v57, -1, -1);
    }

    v58 = *(void (**)(char *, uint64_t))(v16 + 8);
    v58(v21, v53);
    v59 = v129;
    v60 = v129 + OBJC_IVAR____TtC5Files14DOCTipsManager_familyFolderFilePath;
    swift_beginAccess(v129 + OBJC_IVAR____TtC5Files14DOCTipsManager_familyFolderFilePath, v132, 0, 0);
    v61 = v50;
    sub_1000271D4(v60, v50, &qword_100643470);
    v62 = v125;
    v63 = v126;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48))(v61, 1, v125) == 1)
    {
      sub_10000CB4C(v61, &qword_100643470);
    }
    else
    {
      v119 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v124, v61, v62);
      v64 = *(void **)(v59 + OBJC_IVAR____TtC5Files14DOCTipsManager_fileManager);
      URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtC5Files14DOCTipsManager_fileManager);
      v66 = v65;
      type metadata accessor for URLResourceKey(0);
      isa = Array._bridgeToObjectiveC()().super.isa;
      v131 = 0;
      v68 = objc_msgSend(v64, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v66, isa, 0, &v131);

      v69 = v131;
      if (v68)
      {
        v70 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v68, v62);
        v71 = v69;

        ((void (*)(char *, uint64_t, uint64_t))v119)(v123, v122, v53);
        v72 = swift_bridgeObjectRetain(v70);
        v73 = Logger.logObject.getter(v72);
        v74 = static os_log_type_t.default.getter(v73);
        if (os_log_type_enabled(v73, v74))
        {
          v75 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v75 = 134217984;
          v62 = v125;
          v131 = *(id *)(v70 + 16);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132);
          swift_bridgeObjectRelease(v70);
          _os_log_impl((void *)&_mh_execute_header, v73, v74, "Files Family Tip, items in Family folder  %ld", v75, 0xCu);
          v76 = v75;
          v63 = v126;
          swift_slowDealloc(v76, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease(v70);
        }
        v87 = v124;

        v58(v123, v53);
        v88 = *(_QWORD *)(v70 + 16);
        swift_bridgeObjectRelease(v70);
        if (!v88)
        {
          v123 = (char *)v58;
          URL._bridgeToObjectiveC()(v89);
          v91 = v90;
          v131 = 0;
          v92 = objc_msgSend(v64, "removeItemAtURL:error:", v90, &v131);

          v93 = v131;
          if (v92)
          {
            v94 = *(void (**)(char *, uint64_t))(v63 + 8);
            v95 = v131;
            v94(v87, v62);
            goto LABEL_28;
          }
          v98 = v131;
          v99 = _convertNSErrorToError(_:)(v93);

          swift_willThrow(v100);
          ((void (*)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))v119)(v120, v122, v53);
          swift_errorRetain(v99);
          v101 = swift_errorRetain(v99);
          v102 = Logger.logObject.getter(v101);
          v103 = static os_log_type_t.error.getter(v102);
          if (os_log_type_enabled(v102, v103))
          {
            v104 = (uint8_t *)swift_slowAlloc(12, -1);
            v105 = (_QWORD *)swift_slowAlloc(8, -1);
            *(_DWORD *)v104 = 138412290;
            v62 = v125;
            swift_errorRetain(v99);
            v106 = (void *)_swift_stdlib_bridgeErrorToNSError(v99);
            v131 = v106;
            v63 = v126;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132);
            *v105 = v106;
            v53 = v128;
            swift_errorRelease(v99);
            swift_errorRelease(v99);
            _os_log_impl((void *)&_mh_execute_header, v102, v103, "Files Family Tip, Failed to remove family folder with error: %@", v104, 0xCu);
            v107 = sub_10006922C(&qword_100643AB0);
            swift_arrayDestroy(v105, 1, v107);
            v108 = v105;
            v87 = v124;
            swift_slowDealloc(v108, -1, -1);
            swift_slowDealloc(v104, -1, -1);

          }
          else
          {

            swift_errorRelease(v99);
            swift_errorRelease(v99);
          }
          v109 = (void (*)(uint64_t, uint64_t))v123;
          swift_errorRelease(v99);
          v109((uint64_t)v120, v53);
        }
        (*(void (**)(char *, uint64_t))(v63 + 8))(v87, v62);
        goto LABEL_28;
      }
      v123 = (char *)v58;
      v77 = v131;
      v78 = _convertNSErrorToError(_:)(v69);

      swift_willThrow(v79);
      ((void (*)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))v119)(v121, v122, v53);
      swift_errorRetain(v78);
      v80 = swift_errorRetain(v78);
      v81 = Logger.logObject.getter(v80);
      v82 = static os_log_type_t.error.getter(v81);
      if (os_log_type_enabled(v81, v82))
      {
        v83 = (uint8_t *)swift_slowAlloc(12, -1);
        v84 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v83 = 138412290;
        v62 = v125;
        swift_errorRetain(v78);
        v85 = (void *)_swift_stdlib_bridgeErrorToNSError(v78);
        v131 = v85;
        v63 = v126;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132);
        *v84 = v85;
        swift_errorRelease(v78);
        swift_errorRelease(v78);
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "Files Family Tip, Failed to get folder contents with error: %@", v83, 0xCu);
        v86 = sub_10006922C(&qword_100643AB0);
        swift_arrayDestroy(v84, 1, v86);
        swift_slowDealloc(v84, -1, -1);
        swift_slowDealloc(v83, -1, -1);

      }
      else
      {

        swift_errorRelease(v78);
        swift_errorRelease(v78);
      }
      v97 = (void (*)(uint64_t, uint64_t))v123;
      v96 = v124;
      swift_errorRelease(v78);
      v97((uint64_t)v121, v53);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v96, v62);
    }
  }
LABEL_28:
  v110 = type metadata accessor for TaskPriority(0);
  v111 = (uint64_t)v130;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 56))(v130, 1, 1, v110);
  v112 = swift_allocObject(&unk_1005C7D08, 24, 7);
  swift_unknownObjectWeakInit(v112 + 16);
  type metadata accessor for MainActor(0);
  swift_retain();
  v114 = static MainActor.shared.getter(v113);
  v115 = (_QWORD *)swift_allocObject(&unk_1005C7EC8, 40, 7);
  v115[2] = v114;
  v115[3] = &protocol witness table for MainActor;
  v115[4] = v112;
  swift_release(v112);
  v116 = sub_100174FC4(v111, (uint64_t)&unk_100643AD0, (uint64_t)v115);
  *(_QWORD *)&v117 = swift_release(v116).n128_u64[0];
  return objc_msgSend(v127, "dismissViewControllerAnimated:completion:", 1, 0, v117);
}

uint64_t sub_100112518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 40) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100112580, v2, v3);
}

uint64_t sub_100112580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;

  swift_release(*(_QWORD *)(v0 + 40));
  if (qword_1006410F0 != -1)
    swift_once(&qword_1006410F0, sub_1000B10A4);
  v1 = sub_10006922C(&qword_100646A10);
  v2 = sub_10007E788(v1, (uint64_t)qword_100652718);
  *(_BYTE *)(v0 + 48) = 1;
  v3 = swift_beginAccess(v2, v0 + 16, 33, 0);
  Tips.Parameter.wrappedValue.setter(v0 + 48, v1, v3);
  swift_endAccess(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100112638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a1;
  v4[6] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[7] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1001126A4, v6, v7);
}

uint64_t sub_1001126A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  void *v5;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 56));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  v4 = (void *)Strong;
  if (Strong)
  {
    v5 = *(void **)(Strong + OBJC_IVAR____TtC5Files14DOCTipsManager_familySharedFolderTipView);
    if (v5)
      objc_msgSend(v5, "setUserInteractionEnabled:", 1);

  }
  **(_BYTE **)(v0 + 40) = v4 == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100112780()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[16] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[17] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[18] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[19] = swift_task_alloc(v4);
  v1[20] = swift_task_alloc(v4);
  return swift_task_switch(sub_1001127F0, 0, 0);
}

uint64_t sub_1001127F0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v1 = *(void **)(*(_QWORD *)(v0 + 128) + OBJC_IVAR____TtC5Files14DOCTipsManager_sourceObserver);
  *(_QWORD *)(v0 + 168) = v1;
  if (v1)
  {
    v2 = v0 + 16;
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1001128C0;
    v3 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v4 = (_QWORD *)(v0 + 80);
    v4[1] = 0x40000000;
    v4[2] = sub_100112C9C;
    v4[3] = &unk_1005C7EA0;
    v4[4] = v3;
    objc_msgSend(v1, "retrieveAllSourcesCompletionBlock:", v4);
    return swift_continuation_await(v2);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_1001128C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 176) = v1;
  if (v1)
    v2 = sub_100112B8C;
  else
    v2 = sub_100112920;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100112920()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  void *v21;
  uint8_t *v22;
  void *v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;

  v1 = v0[15];
  if ((unint64_t)v1 >> 62)
  {
LABEL_23:
    if (v1 < 0)
      v26 = v1;
    else
      v26 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v1);
    if (v2)
      goto LABEL_3;
LABEL_18:
    v23 = (void *)v0[21];
    swift_bridgeObjectRelease(v1);

    v9 = 0;
    goto LABEL_19;
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    goto LABEL_18;
LABEL_3:
  v3 = 0;
  while (1)
  {
    if ((v1 & 0xC000000000000001) != 0)
      v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v1);
    else
      v4 = *(id *)(v1 + 8 * v3 + 32);
    v5 = v4;
    v0 = (_QWORD *)(v3 + 1);
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    v6 = type metadata accessor for DOCFileProviderSource();
    v7 = swift_dynamicCastClass(v5, v6);
    if (v7)
    {
      v8 = (void *)v7;
      v9 = *(void **)(v7 + OBJC_IVAR____TtC5Files21DOCFileProviderSource_providerDomain);
      if (v9)
        break;
    }
LABEL_5:

    ++v3;
    if (v0 == (_QWORD *)v2)
    {
      v0 = v27;
      goto LABEL_18;
    }
  }
  v10 = v5;
  v11 = v9;
  if (((unint64_t)objc_msgSend(v8, "status") | 2) != 2
    || !objc_msgSend(v11, "isiCloudDriveProvider")
    || (objc_msgSend(v11, "isEnterpriseDomain") & 1) != 0)
  {

    goto LABEL_5;
  }
  v0 = v27;
  v12 = v27[20];
  v13 = v27[17];
  v14 = v27[18];
  swift_bridgeObjectRelease(v1);
  v16 = Logger.DocumentManager.unsafeMutableAddressor(v15);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v16, v13);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v21 = (void *)v27[21];
  if (v20)
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Files Family Tip, found main iCloud Drive Provider", v22, 2u);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    v10 = v21;
  }

  (*(void (**)(_QWORD, _QWORD))(v27[18] + 8))(v27[20], v27[17]);
LABEL_19:
  v24 = v0[19];
  swift_task_dealloc(v0[20]);
  swift_task_dealloc(v24);
  return ((uint64_t (*)(void *))v0[1])(v9);
}

uint64_t sub_100112B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 136);
  swift_willThrow();
  v5 = swift_errorRelease(v1);
  v6 = Logger.DocumentManager.unsafeMutableAddressor(v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Files Family Tip, failed to get sources", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }
  v11 = *(void **)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 136);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  v15 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100112C9C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_10006922C((uint64_t *)&unk_100643490);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v11 = sub_10004F2F0(0, &qword_100643AC0, DOCDocumentSource_ptr);
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v11);
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_100112D44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[22] = a3;
  v4[23] = v3;
  v4[20] = a1;
  v4[21] = a2;
  v5 = type metadata accessor for Logger(0);
  v4[24] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[25] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[26] = swift_task_alloc(v7);
  v4[27] = swift_task_alloc(v7);
  v4[28] = swift_task_alloc(v7);
  v8 = sub_10006922C(&qword_100643470);
  v4[29] = v8;
  v4[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v4[31] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[32] = v10;
  v4[33] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100112E14, 0, 0);
}

uint64_t sub_100112E14()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 272) = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
  v1 = (_QWORD *)swift_task_alloc(dword_100643A1C);
  *(_QWORD *)(v0 + 280) = v1;
  *v1 = v0;
  v1[1] = sub_100112E80;
  return sub_100112780();
}

uint64_t sub_100112E80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 288) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100112EDC, 0, 0);
}

uint64_t sub_100112EDC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;

  v2 = *(void **)(v1 + 288);
  if (!v2)
  {
    v27 = *(_QWORD *)(v1 + 216);
    v28 = *(_QWORD *)(v1 + 192);
    v29 = *(_QWORD *)(v1 + 200);
    v30 = Logger.DocumentManager.unsafeMutableAddressor(a1);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v27, v30, v28);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Files Family Tip, No iCloud Drive Domain found", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }
    v35 = *(void **)(v1 + 272);
    v36 = *(_QWORD *)(v1 + 248);
    v37 = *(_QWORD *)(v1 + 256);
    v38 = *(_QWORD *)(v1 + 216);
    v39 = *(_QWORD *)(v1 + 192);
    v40 = *(_QWORD *)(v1 + 200);
    v41 = *(_QWORD *)(v1 + 160);

    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v41, 1, 1, v36);
    goto LABEL_23;
  }
  v3 = objc_msgSend(*(id *)(v1 + 288), "isEnabled");
  if (!(_DWORD)v3 || (v3 = objc_msgSend(v2, "isHidden"), (v3 & 1) != 0))
  {
    v4 = *(_QWORD *)(v1 + 224);
    v5 = *(_QWORD *)(v1 + 192);
    v6 = *(_QWORD *)(v1 + 200);
    v7 = Logger.DocumentManager.unsafeMutableAddressor(v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v7, v5);
    v8 = v2;
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(void **)(v1 + 272);
    v13 = *(_QWORD *)(v1 + 224);
    v14 = *(_QWORD *)(v1 + 192);
    v15 = *(_QWORD *)(v1 + 200);
    if (v11)
    {
      v55 = *(_QWORD *)(v1 + 200);
      v16 = swift_slowAlloc(22, -1);
      v54 = v12;
      v17 = swift_slowAlloc(64, -1);
      v56 = v17;
      *(_DWORD *)v16 = 136315394;
      v18 = objc_msgSend(v8, "isEnabled");
      v19 = v18 == 0;
      if (v18)
        v20 = 1702195828;
      else
        v20 = 0x65736C6166;
      v53 = v13;
      if (v19)
        v21 = 0xE500000000000000;
      else
        v21 = 0xE400000000000000;
      *(_QWORD *)(v1 + 128) = sub_1000544FC(v20, v21, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136);

      *(_QWORD *)&v22 = swift_bridgeObjectRelease(v21).n128_u64[0];
      *(_WORD *)(v16 + 12) = 2080;
      v23 = objc_msgSend(v8, "isHidden", v22);
      v24 = v23 == 0;
      if (v23)
        v25 = 1702195828;
      else
        v25 = 0x65736C6166;
      if (v24)
        v26 = 0xE500000000000000;
      else
        v26 = 0xE400000000000000;
      *(_QWORD *)(v1 + 136) = sub_1000544FC(v25, v26, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144);

      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Files Family Tip, Did not attempt to create folder, iCloud Domain isEnabled: %s , isHidden: %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v14);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v1 + 256) + 56))(*(_QWORD *)(v1 + 160), 1, 1, *(_QWORD *)(v1 + 248));
LABEL_23:
    v42 = type metadata accessor for FamilyFolderDetails(0);
    v43 = *(_QWORD *)(v1 + 264);
    v44 = *(_QWORD *)(v1 + 240);
    v46 = *(_QWORD *)(v1 + 216);
    v45 = *(_QWORD *)(v1 + 224);
    v47 = *(_QWORD *)(v1 + 208);
    *(_BYTE *)(*(_QWORD *)(v1 + 160) + *(int *)(v42 + 20)) = 0;
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v49 = v1 + 16;
  v50 = *(void **)(v1 + 272);
  *(_QWORD *)(v1 + 56) = v1 + 120;
  *(_QWORD *)(v1 + 16) = v1;
  *(_QWORD *)(v1 + 24) = sub_100113350;
  v51 = swift_continuation_init(v1 + 16, 1);
  *(_QWORD *)(v1 + 80) = _NSConcreteStackBlock;
  v52 = (_QWORD *)(v1 + 80);
  v52[1] = 0x40000000;
  v52[2] = sub_1000874A8;
  v52[3] = &unk_1005C7E10;
  v52[4] = v51;
  objc_msgSend(v50, "doc_fetchRootItemForProviderDomain:completionHandler:", v2, v52);
  return swift_continuation_await(v49);
}

uint64_t sub_100113350()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 296) = v1;
  if (v1)
    v2 = sub_100113964;
  else
    v2 = sub_1001133B0;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001133B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = v0[22];
  v2 = v0[21];
  v3 = v0[15];
  v0[38] = v3;
  v4 = swift_allocObject(&unk_1005C7D08, 24, 7);
  v0[39] = v4;
  swift_unknownObjectWeakInit(v4 + 16);
  v5 = (_QWORD *)swift_task_alloc(48);
  v0[40] = v5;
  v5[2] = v4;
  v5[3] = v2;
  v5[4] = v1;
  v5[5] = v3;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[41] = v6;
  *v6 = v0;
  v6[1] = sub_10011348C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0[30], 0, 0, 0xD000000000000021, 0x800000010050FB00, sub_100117F1C, v5, v0[29]);
}

uint64_t sub_10011348C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 328);
  *(_QWORD *)(*v1 + 336) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100113638;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 320);
    swift_release(*(_QWORD *)(v2 + 312));
    swift_task_dealloc(v5);
    v4 = sub_100113500;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100113500()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void **)(v0 + 304);
  v2 = *(void **)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 240);

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
  {
    sub_10000CB4C(*(_QWORD *)(v0 + 240), &qword_100643470);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 256) + 56))(*(_QWORD *)(v0 + 160), 1, 1, *(_QWORD *)(v0 + 248));
    v6 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 256);
    v7 = *(_QWORD *)(v0 + 264);
    v9 = *(_QWORD *)(v0 + 248);
    v10 = *(_QWORD *)(v0 + 160);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    v11(v7, *(_QWORD *)(v0 + 240), v9);
    v11(v10, v7, v9);
    v6 = 1;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v9);
  }
  v12 = type metadata accessor for FamilyFolderDetails(0);
  v13 = *(_QWORD *)(v0 + 264);
  v14 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 216);
  v15 = *(_QWORD *)(v0 + 224);
  v17 = *(_QWORD *)(v0 + 208);
  *(_BYTE *)(*(_QWORD *)(v0 + 160) + *(int *)(v12 + 20)) = v6;
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100113638()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(void **)(v0 + 304);
  swift_release(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v1);

  v3 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 176);
  v9 = Logger.DocumentManager.unsafeMutableAddressor(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v9, v6);
  swift_bridgeObjectRetain(v7);
  swift_errorRetain(v3);
  swift_bridgeObjectRetain(v7);
  v10 = swift_errorRetain(v3);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v32 = *(void **)(v0 + 272);
    v33 = *(_QWORD *)(v0 + 200);
    v34 = *(void **)(v0 + 288);
    v35 = *(_QWORD *)(v0 + 192);
    v36 = *(_QWORD *)(v0 + 208);
    v13 = *(_QWORD *)(v0 + 168);
    v14 = *(_QWORD *)(v0 + 176);
    v15 = swift_slowAlloc(22, -1);
    v16 = (uint64_t *)swift_slowAlloc(8, -1);
    v31 = swift_slowAlloc(32, -1);
    v37 = v31;
    *(_DWORD *)v15 = 136315394;
    swift_bridgeObjectRetain(v14);
    *(_QWORD *)(v0 + 144) = sub_1000544FC(v13, v14, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152);
    swift_bridgeObjectRelease_n(v14, 3);
    *(_WORD *)(v15 + 12) = 2112;
    swift_errorRetain(v3);
    v17 = _swift_stdlib_bridgeErrorToNSError(v3);
    *(_QWORD *)(v0 + 152) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160);
    *v16 = v17;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Files Family Tip, Failed to create folder %s with error: %@", (uint8_t *)v15, 0x16u);
    v18 = sub_10006922C(&qword_100643AB0);
    swift_arrayDestroy(v16, 1, v18);
    swift_slowDealloc(v16, -1, -1);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v3);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v36, v35);
  }
  else
  {
    v19 = *(void **)(v0 + 288);
    v21 = *(_QWORD *)(v0 + 200);
    v20 = *(_QWORD *)(v0 + 208);
    v22 = *(_QWORD *)(v0 + 192);
    v23 = *(_QWORD *)(v0 + 176);

    swift_errorRelease(v3);
    swift_bridgeObjectRelease_n(v23, 2);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 256) + 56))(*(_QWORD *)(v0 + 160), 1, 1, *(_QWORD *)(v0 + 248));
  v24 = type metadata accessor for FamilyFolderDetails(0);
  v25 = *(_QWORD *)(v0 + 264);
  v26 = *(_QWORD *)(v0 + 240);
  v28 = *(_QWORD *)(v0 + 216);
  v27 = *(_QWORD *)(v0 + 224);
  v29 = *(_QWORD *)(v0 + 208);
  *(_BYTE *)(*(_QWORD *)(v0 + 160) + *(int *)(v24 + 20)) = 0;
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100113964(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = swift_willThrow(a1);
  v3 = *(_QWORD *)(v1 + 296);
  v5 = *(_QWORD *)(v1 + 200);
  v4 = *(_QWORD *)(v1 + 208);
  v6 = *(_QWORD *)(v1 + 192);
  v7 = *(_QWORD *)(v1 + 176);
  v8 = Logger.DocumentManager.unsafeMutableAddressor(v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v8, v6);
  swift_bridgeObjectRetain(v7);
  swift_errorRetain(v3);
  swift_bridgeObjectRetain(v7);
  v9 = swift_errorRetain(v3);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v31 = *(void **)(v1 + 272);
    v32 = *(_QWORD *)(v1 + 200);
    v33 = *(void **)(v1 + 288);
    v34 = *(_QWORD *)(v1 + 192);
    v35 = *(_QWORD *)(v1 + 208);
    v12 = *(_QWORD *)(v1 + 168);
    v13 = *(_QWORD *)(v1 + 176);
    v14 = swift_slowAlloc(22, -1);
    v15 = (uint64_t *)swift_slowAlloc(8, -1);
    v30 = swift_slowAlloc(32, -1);
    v36 = v30;
    *(_DWORD *)v14 = 136315394;
    swift_bridgeObjectRetain(v13);
    *(_QWORD *)(v1 + 144) = sub_1000544FC(v12, v13, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152);
    swift_bridgeObjectRelease_n(v13, 3);
    *(_WORD *)(v14 + 12) = 2112;
    swift_errorRetain(v3);
    v16 = _swift_stdlib_bridgeErrorToNSError(v3);
    *(_QWORD *)(v1 + 152) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 152, v1 + 160);
    *v15 = v16;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Files Family Tip, Failed to create folder %s with error: %@", (uint8_t *)v14, 0x16u);
    v17 = sub_10006922C(&qword_100643AB0);
    swift_arrayDestroy(v15, 1, v17);
    swift_slowDealloc(v15, -1, -1);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    swift_errorRelease(v3);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v35, v34);
  }
  else
  {
    v18 = *(void **)(v1 + 288);
    v20 = *(_QWORD *)(v1 + 200);
    v19 = *(_QWORD *)(v1 + 208);
    v21 = *(_QWORD *)(v1 + 192);
    v22 = *(_QWORD *)(v1 + 176);

    swift_errorRelease(v3);
    swift_bridgeObjectRelease_n(v22, 2);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v1 + 256) + 56))(*(_QWORD *)(v1 + 160), 1, 1, *(_QWORD *)(v1 + 248));
  v23 = type metadata accessor for FamilyFolderDetails(0);
  v24 = *(_QWORD *)(v1 + 264);
  v25 = *(_QWORD *)(v1 + 240);
  v27 = *(_QWORD *)(v1 + 216);
  v26 = *(_QWORD *)(v1 + 224);
  v28 = *(_QWORD *)(v1 + 208);
  *(_BYTE *)(*(_QWORD *)(v1 + 160) + *(int *)(v23 + 20)) = 0;
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100113C80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(char *, uint64_t), uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *Strong;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  id v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  void (*v53)(char *, _QWORD, uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  __n128 v68;
  void (*v69)(char *, uint64_t, __n128);
  uint64_t v70;
  char *v71;
  void (*v72)(uint64_t, char *, uint64_t);
  void (*v73)(uint64_t, _QWORD, uint64_t, uint64_t);
  void *v74;
  uint64_t v75;
  _QWORD v76[2];
  uint64_t (*v77)(char *, char *, uint64_t);
  void (*v78)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90[3];
  char v91[32];

  v85 = a7;
  v86 = a6;
  v83 = a4;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v87 = v11;
  v88 = v12;
  __chkstk_darwin(v11);
  v81 = (char *)v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)v76 - v15;
  __chkstk_darwin(v17);
  v82 = (char *)v76 - v18;
  v19 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v19);
  v21 = (char *)v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v84 = (char *)v76 - v23;
  v24 = type metadata accessor for Logger(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v30 = (char *)v76 - v29;
  a3 += 16;
  swift_beginAccess(a3, v91, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(a3);
  if (!Strong)
    return;
  v32 = Strong;
  if (a2)
  {
    v33 = swift_errorRetain(a2);
    v34 = Logger.DocumentManager.unsafeMutableAddressor(v33);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v30, v34, v24);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a5);
    swift_errorRetain(a2);
    v35 = swift_bridgeObjectRetain(a5);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(22, -1);
      v80 = v24;
      v39 = v38;
      v40 = swift_slowAlloc(8, -1);
      v79 = v32;
      v41 = (_QWORD *)v40;
      v82 = (char *)swift_slowAlloc(32, -1);
      v90[0] = (uint64_t)v82;
      *(_DWORD *)v39 = 136315394;
      swift_bridgeObjectRetain(a5);
      v89 = sub_1000544FC(v83, a5, v90);
      v83 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90);
      swift_bridgeObjectRelease_n(a5, 3);
      *(_WORD *)(v39 + 12) = 2112;
      swift_errorRetain(a2);
      v42 = _swift_stdlib_bridgeErrorToNSError(a2);
      v89 = v42;
      v43 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90);
      *v41 = v42;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Files Family Tip, Failed to create folder %s with error: %@", (uint8_t *)v39, 0x16u);
      v44 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v41, 1, v44);
      v45 = v41;
      v32 = v79;
      swift_slowDealloc(v45, -1, -1);
      v46 = v82;
      swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      (*(void (**)(char *, uint64_t))(v83 + 8))(v30, v80);
    }
    else
    {
      swift_bridgeObjectRelease_n(a5, 2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

      (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v24);
      v43 = v87;
    }
    v21 = v84;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v84, 1, 1, v43);
    swift_errorRetain(a2);
    v86(v21, a2);
    swift_errorRelease(a2);

    swift_errorRelease(a2);
    goto LABEL_15;
  }
  if (!a1)
  {

    return;
  }
  v47 = a1;
  v48 = objc_msgSend(v47, "fileURL");
  if (!v48)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v21, 1, 1, v87);
    goto LABEL_14;
  }
  v49 = v48;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v48);

  v51 = v87;
  v50 = v88;
  v52 = *(void (**)(char *, char *, uint64_t))(v88 + 32);
  v52(v21, v16, v87);
  v53 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56);
  v53(v21, 0, 1, v51);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v21, 1, v51) == 1)
  {
LABEL_14:

LABEL_15:
    sub_10000CB4C((uint64_t)v21, &qword_100643470);
    return;
  }
  v78 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v53;
  v79 = v32;
  v54 = v82;
  v55 = ((uint64_t (*)(char *, char *, uint64_t))v52)(v82, v21, v51);
  v56 = Logger.DocumentManager.unsafeMutableAddressor(v55);
  v83 = v25;
  v57 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v80 = v24;
  v57(v27, v56, v24);
  v58 = v81;
  v77 = *(uint64_t (**)(char *, char *, uint64_t))(v50 + 16);
  v59 = v77(v81, v54, v51);
  v60 = Logger.logObject.getter(v59);
  v61 = v51;
  v62 = static os_log_type_t.error.getter(v60);
  if (os_log_type_enabled(v60, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc(12, -1);
    v64 = swift_slowAlloc(32, -1);
    v90[0] = v64;
    *(_DWORD *)v63 = 136315138;
    v76[1] = v63 + 4;
    v65 = URL.absoluteString.getter(v64);
    v67 = v66;
    v89 = sub_1000544FC(v65, v66, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90);
    v68 = swift_bridgeObjectRelease(v67);
    v69 = *(void (**)(char *, uint64_t, __n128))(v88 + 8);
    v69(v58, v61, v68);
    _os_log_impl((void *)&_mh_execute_header, v60, v62, "Files Family Tip, got url for Family folder %s", v63, 0xCu);
    swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1, -1);
    swift_slowDealloc(v63, -1, -1);
  }
  else
  {
    v69 = *(void (**)(char *, uint64_t, __n128))(v50 + 8);
    ((void (*)(char *, uint64_t))v69)(v58, v61);
  }

  (*(void (**)(char *, uint64_t))(v83 + 8))(v27, v80);
  v70 = (uint64_t)v84;
  v71 = v82;
  v72 = (void (*)(uint64_t, char *, uint64_t))v77;
  v77(v84, v82, v61);
  v73 = v78;
  v78(v70, 0, 1, v61);
  v74 = v79;
  v75 = (uint64_t)&v79[OBJC_IVAR____TtC5Files14DOCTipsManager_familyFolderFilePath];
  swift_beginAccess(&v79[OBJC_IVAR____TtC5Files14DOCTipsManager_familyFolderFilePath], v90, 33, 0);
  sub_100118024(v70, v75);
  swift_endAccess(v90);
  v72(v70, v71, v61);
  v73(v70, 0, 1, v61);
  v86((char *)v70, 0);

  sub_10000CB4C(v70, &qword_100643470);
  ((void (*)(char *, uint64_t))v69)(v71, v61);
}

double sub_1001143B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Strong;
  double result;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  NSString v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  _QWORD *v29;
  char v30[24];

  v10 = sub_10006922C(&qword_100643AB8);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  a2 += 16;
  swift_beginAccess(a2, v30, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v15 = (char *)Strong;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
    v16 = *(unsigned __int8 *)(v11 + 80);
    v17 = (v16 + 16) & ~v16;
    v18 = swift_allocObject(&unk_1005C7E38, v17 + v12, v16 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v18 + v17, (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
    v19 = objc_allocWithZone((Class)FPCreateFolderOperation);
    v20 = a5;
    swift_bridgeObjectRetain(a4);
    v21 = String._bridgeToObjectiveC()();
    v22 = objc_msgSend(v19, "initWithParentItem:folderName:", v20, v21, swift_bridgeObjectRelease(a4).n128_f64[0]);

    objc_msgSend(v22, "setShouldBounceOnCollision:", 1);
    v23 = swift_allocObject(&unk_1005C7D08, 24, 7);
    swift_unknownObjectWeakInit(v23 + 16);
    v24 = (_QWORD *)swift_allocObject(&unk_1005C7E60, 56, 7);
    v24[2] = v23;
    v24[3] = a3;
    v24[4] = a4;
    v24[5] = sub_100117F90;
    v24[6] = v18;
    aBlock[4] = sub_100118014;
    v29 = v24;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100083540;
    aBlock[3] = &unk_1005C7E78;
    v25 = _Block_copy(aBlock);
    v26 = v29;
    swift_bridgeObjectRetain(a4);
    swift_retain();
    objc_msgSend(v22, "setCreateFolderCompletionBlock:", v25, swift_release(v26).n128_f64[0]);
    _Block_release(v25);
    objc_msgSend(*(id *)&v15[OBJC_IVAR____TtC5Files14DOCTipsManager_fpItemManager], "scheduleAction:", v22);

    *(_QWORD *)&result = swift_release(v18).n128_u64[0];
  }
  return result;
}

uint64_t sub_10011461C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_10006922C(&qword_100643470);
  __chkstk_darwin(v4);
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = (char *)&v11 - v6;
  if (a2)
  {
    v12 = a2;
    swift_errorRetain(a2);
    v8 = sub_10006922C(&qword_100643AB8);
    return CheckedContinuation.resume(throwing:)(&v12, v8);
  }
  else
  {
    sub_1000271D4(a1, (uint64_t)&v11 - v6, &qword_100643470);
    v10 = sub_10006922C(&qword_100643AB8);
    return CheckedContinuation.resume(returning:)(v7, v10);
  }
}

void sub_1001146E0(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __n128 v37;
  uint64_t v38;
  os_log_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  id v49;
  _BYTE v50[12];
  int v51;
  os_log_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(void *, uint64_t);
  uint64_t v58;
  uint64_t v59;

  v57 = a4;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v50[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v50[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __chkstk_darwin(v17);
  v21 = &v50[-v20];
  if (a2)
  {
    v22 = v18;
    v23 = swift_errorRetain(a2);
    v24 = Logger.DocumentManager.unsafeMutableAddressor(v23);
    v25 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16);
    v56 = v22;
    v25(v21, v24, v22);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
    swift_errorRetain(a2);
    v26 = swift_errorRetain(a2);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    v29 = v28;
    if (os_log_type_enabled(v27, v28))
    {
      v30 = swift_slowAlloc(22, -1);
      v54 = v14;
      v31 = v30;
      v32 = (uint64_t *)swift_slowAlloc(8, -1);
      v33 = swift_slowAlloc(32, -1);
      v53 = v33;
      v59 = v33;
      *(_DWORD *)v31 = 136315394;
      v52 = v27;
      v51 = v29;
      v34 = URL.absoluteString.getter(v33);
      v36 = v35;
      v58 = sub_1000544FC(v34, v35, &v59);
      v55 = a5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      v37 = swift_bridgeObjectRelease(v36);
      (*(void (**)(_BYTE *, uint64_t, __n128))(v10 + 8))(v12, v9, v37);
      *(_WORD *)(v31 + 12) = 2112;
      swift_errorRetain(a2);
      v38 = _swift_stdlib_bridgeErrorToNSError(a2);
      v58 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      *v32 = v38;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      v39 = v52;
      _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v51, "Files Family Tip, error getting metadata for file %s %@", (uint8_t *)v31, 0x16u);
      v40 = sub_10006922C(&qword_100643AB0);
      swift_arrayDestroy(v32, 1, v40);
      swift_slowDealloc(v32, -1, -1);
      v41 = v53;
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      (*(void (**)(_BYTE *, uint64_t))(v54 + 8))(v21, v56);
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

      (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v21, v56);
    }
    swift_errorRetain(a2);
    v57(0, a2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }
  else if (a1)
  {
    v42 = v18;
    v43 = a1;
    v44 = Logger.DocumentManager.unsafeMutableAddressor(v43);
    v45 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v16, v44, v42);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.default.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Files Family Tip, got metadata for file", v48, 2u);
      swift_slowDealloc(v48, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v16, v42);
    v49 = v43;
    v57(a1, 0);

  }
  else
  {
    ((void (*)(_QWORD, _QWORD, double))v57)(0, 0, v19);
  }
}

uint64_t sub_100114B0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch(sub_100114B24, 0, 0);
}

uint64_t sub_100114B24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = v0[3];
  v2 = swift_allocObject(&unk_1005C7D08, 24, 7);
  v0[5] = v2;
  swift_unknownObjectWeakInit(v2 + 16);
  v3 = swift_task_alloc(32);
  v0[6] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v4;
  v5 = sub_10006922C((uint64_t *)&unk_100643A78);
  *v4 = v0;
  v4[1] = sub_100114BFC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000020, 0x800000010050FAA0, sub_100117DDC, v3, v5);
}

uint64_t sub_100114BFC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100114C7C;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 48);
    swift_release(*(_QWORD *)(v2 + 40));
    swift_task_dealloc(v5);
    v4 = sub_100114C70;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100114C70()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100114C7C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 40));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100114CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *Strong;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSURL *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (**v25)(void *, void *);
  void *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  _QWORD aBlock[5];
  uint64_t v33;
  char v34[24];

  v31 = a3;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10006922C(&qword_100643AA8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  a2 += 16;
  swift_beginAccess(a2, v34, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v30 = Strong;
    v13((char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
    v14 = *(unsigned __int8 *)(v10 + 80);
    v15 = (v14 + 16) & ~v14;
    v16 = swift_allocObject(&unk_1005C7DA8, v15 + v11, v14 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v16 + v15, (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    v17 = v31;
    URL._bridgeToObjectiveC()(v18);
    v20 = v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v17, v5);
    v21 = *(unsigned __int8 *)(v6 + 80);
    v22 = (v21 + 16) & ~v21;
    v23 = (v7 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    v24 = swift_allocObject(&unk_1005C7DD0, v23 + 16, v21 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v24 + v22, v8, v5);
    v25 = (uint64_t (**)(void *, void *))(v24 + v23);
    *v25 = sub_100117DF0;
    v25[1] = (uint64_t (*)(void *, void *))v16;
    aBlock[4] = sub_100117EB8;
    v33 = v24;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100083540;
    aBlock[3] = &unk_1005C7DE8;
    v26 = _Block_copy(aBlock);
    v27 = v33;
    swift_retain();
    v28 = swift_release(v27);
    SWCollaborationMetadataForDocumentURL(v20, v26, v28);
    _Block_release(v26);
    swift_release(v16);

  }
}

uint64_t sub_100114EE0(void *a1, void *a2)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  void *v6;

  if (a2)
  {
    v6 = a2;
    swift_errorRetain(a2);
    v2 = sub_10006922C(&qword_100643AA8);
    return CheckedContinuation.resume(throwing:)(&v6, v2);
  }
  else
  {
    v6 = a1;
    v4 = a1;
    v5 = sub_10006922C(&qword_100643AA8);
    return CheckedContinuation.resume(returning:)(&v6, v5);
  }
}

uint64_t sub_100114F50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v1 = v0;
  v2 = sub_10006922C(&qword_1006438A0);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = Logger.DocumentManager.unsafeMutableAddressor(v7);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v10, v5);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Files Family Tip, Initiating tips share flow", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v4, 1, 1, v15);
  v16 = swift_allocObject(&unk_1005C7D08, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16);
  type metadata accessor for MainActor(0);
  swift_retain();
  v18 = static MainActor.shared.getter(v17);
  v19 = (_QWORD *)swift_allocObject(&unk_1005C7D30, 40, 7);
  v19[2] = v18;
  v19[3] = &protocol witness table for MainActor;
  v19[4] = v16;
  swift_release(v16);
  v20 = sub_100116348((uint64_t)v4, (uint64_t)&unk_100643A50, (uint64_t)v19);
  v21 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files14DOCTipsManager_sharingFlowTask);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC5Files14DOCTipsManager_sharingFlowTask) = v20;
  return swift_release(v21);
}

uint64_t sub_10011514C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4[6] = a4;
  v5 = type metadata accessor for Logger(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[9] = swift_task_alloc(v7);
  v4[10] = swift_task_alloc(v7);
  v4[11] = swift_task_alloc(v7);
  v8 = sub_10006922C(&qword_1006438A0);
  v4[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_10006922C(&qword_100643470) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[13] = swift_task_alloc(v9);
  v4[14] = swift_task_alloc(v9);
  v10 = type metadata accessor for URL(0);
  v4[15] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[16] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v4[17] = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[18] = swift_task_alloc(v13);
  v4[19] = swift_task_alloc(v13);
  v14 = type metadata accessor for FamilyFolderDetails(0);
  v4[20] = v14;
  v4[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for MainActor(0);
  v4[22] = static MainActor.shared.getter(v15);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(v15, &protocol witness table for MainActor);
  v4[23] = v16;
  v4[24] = v17;
  return swift_task_switch(sub_1001152B4, v16, v17);
}

id sub_1001152B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  id result;
  void *v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  Swift::String v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  *(_QWORD *)(v0 + 200) = Strong;
  if (Strong)
  {
    result = (id)_DocumentManagerBundle(Strong);
    if (result)
    {
      v4 = result;
      v18._object = (void *)0x800000010050F9C0;
      v5._countAndFlagsBits = 0x796C696D6146;
      v5._object = (void *)0xE600000000000000;
      v6.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v6.value._object = (void *)0xEB00000000656C62;
      v7._countAndFlagsBits = 0;
      v7._object = (void *)0xE000000000000000;
      v18._countAndFlagsBits = 0xD000000000000039;
      v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v18);

      *(_QWORD *)(v0 + 208) = v8._object;
      v9 = (_QWORD *)swift_task_alloc(dword_100643A24);
      *(_QWORD *)(v0 + 216) = v9;
      *v9 = v0;
      v9[1] = sub_100115460;
      return (id)sub_100112D44(*(_QWORD *)(v0 + 168), v8._countAndFlagsBits, (uint64_t)v8._object);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 176));
    v10 = *(_QWORD *)(v0 + 144);
    v11 = *(_QWORD *)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 88);
    v14 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 72);
    v16 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v11);
    swift_task_dealloc(v10);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_100115460()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 208);
  swift_task_dealloc(*(_QWORD *)(*v0 + 216));
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_1001154B4, *(_QWORD *)(v1 + 184), *(_QWORD *)(v1 + 192));
}

uint64_t sub_1001154B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  sub_1000271D4(*(_QWORD *)(v0 + 168), v3, &qword_100643470);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(_QWORD *)(v0 + 224) = v4;
  if (v4(v3, 1, v1) == 1)
  {
    v5 = *(_QWORD *)(v0 + 112);
    swift_release(*(_QWORD *)(v0 + 176));
    v6 = sub_10000CB4C(v5, &qword_100643470);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 168);
    v9 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 112);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 128) + 32);
    *(_QWORD *)(v0 + 232) = v12;
    v12(v9, v11, v10);
    if (*(_BYTE *)(v8 + *(int *)(v7 + 20)) == 1)
    {
      v13 = (_QWORD *)swift_task_alloc(dword_100643A64);
      *(_QWORD *)(v0 + 240) = v13;
      *v13 = v0;
      v13[1] = sub_10011570C;
      return sub_1001173A8();
    }
    v15 = *(_QWORD *)(v0 + 176);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
    swift_release(v15);
  }
  v17 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)(v0 + 72);
  v18 = *(_QWORD *)(v0 + 56);
  v19 = Logger.DocumentManager.unsafeMutableAddressor(v6);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v19, v18);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.error.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Files Family Tip, Family folder details not found", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }
  v24 = *(_QWORD *)(v0 + 200);
  v26 = *(_QWORD *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 72);
  v27 = *(_QWORD *)(v0 + 56);

  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  v28 = *(void **)(v24 + OBJC_IVAR____TtC5Files14DOCTipsManager_familySharedFolderTipView);
  v29 = *(void **)(v0 + 200);
  v30 = *(_QWORD *)(v0 + 168);
  if (v28)
    objc_msgSend(v28, "setUserInteractionEnabled:", 1);

  sub_10011736C(v30);
  v31 = *(_QWORD *)(v0 + 144);
  v32 = *(_QWORD *)(v0 + 152);
  v34 = *(_QWORD *)(v0 + 104);
  v33 = *(_QWORD *)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 96);
  v38 = *(_QWORD *)(v0 + 72);
  v37 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v32);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011570C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 240);
  *(_QWORD *)(*v1 + 248) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_100115764, *(_QWORD *)(v2 + 184), *(_QWORD *)(v2 + 192));
}

id sub_100115764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id result;
  void *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  NSURL *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String v83;

  v1 = *(_QWORD *)(v0 + 248);
  if (!*(_QWORD *)(v1 + 16))
  {
    v44 = *(_QWORD *)(v0 + 176);
    v45 = *(_QWORD *)(v0 + 80);
    v46 = *(_QWORD *)(v0 + 56);
    v47 = *(_QWORD *)(v0 + 64);
    swift_bridgeObjectRelease(v1);
    swift_release(v44);
    v49 = Logger.DocumentManager.unsafeMutableAddressor(v48);
    v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v45, v49, v46);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter(v51);
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Files Family Tip, No family members found to use as recipients", v53, 2u);
      swift_slowDealloc(v53, -1, -1);
    }
    v54 = *(_QWORD *)(v0 + 200);
    v55 = *(_QWORD *)(v0 + 80);
    goto LABEL_14;
  }
  if (!objc_msgSend((id)objc_opt_self(MFMessageComposeViewController), "canSendText"))
  {
    v56 = *(_QWORD *)(v0 + 176);
    v57 = *(_QWORD *)(v0 + 88);
    v58 = *(_QWORD *)(v0 + 56);
    v59 = *(_QWORD *)(v0 + 64);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 248));
    swift_release(v56);
    v61 = Logger.DocumentManager.unsafeMutableAddressor(v60);
    v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v57, v61, v58);
    v51 = Logger.logObject.getter(v62);
    v63 = static os_log_type_t.error.getter(v51);
    if (os_log_type_enabled(v51, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v63, "Files Family Tip, SMS services are not available", v64, 2u);
      swift_slowDealloc(v64, -1, -1);
    }
    v54 = *(_QWORD *)(v0 + 200);
    v55 = *(_QWORD *)(v0 + 88);
LABEL_14:
    v65 = *(_QWORD *)(v0 + 56);
    v66 = *(_QWORD *)(v0 + 64);

    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v55, v65);
    v67 = *(void **)(v54 + OBJC_IVAR____TtC5Files14DOCTipsManager_familySharedFolderTipView);
    v68 = *(void **)(v0 + 200);
    v69 = *(_QWORD *)(v0 + 168);
    v70 = *(_QWORD *)(v0 + 152);
    v71 = *(_QWORD *)(v0 + 120);
    v72 = *(_QWORD *)(v0 + 128);
    if (v67)
      objc_msgSend(v67, "setUserInteractionEnabled:", 1);

    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v70, v71);
LABEL_17:
    sub_10011736C(v69);
    v73 = *(_QWORD *)(v0 + 144);
    v74 = *(_QWORD *)(v0 + 152);
    v76 = *(_QWORD *)(v0 + 104);
    v75 = *(_QWORD *)(v0 + 112);
    v78 = *(_QWORD *)(v0 + 88);
    v77 = *(_QWORD *)(v0 + 96);
    v80 = *(_QWORD *)(v0 + 72);
    v79 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v74);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_QWORD *)(v0 + 200);
  v3 = objc_msgSend(objc_allocWithZone((Class)MFMessageComposeViewController), "init");
  *(_QWORD *)(v0 + 256) = v3;
  result = (id)_DocumentManagerBundle(objc_msgSend(v3, "setMessageComposeDelegate:", v2));
  if (result)
  {
    v5 = result;
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
    v7 = *(_QWORD *)(v0 + 152);
    v8 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(_QWORD *)(v0 + 104);
    v83._object = (void *)0x800000010050FA40;
    v11._object = (void *)0x800000010050FA00;
    v11._countAndFlagsBits = 0x1000000000000035;
    v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v12.value._object = (void *)0xEB00000000656C62;
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    v83._countAndFlagsBits = 0xD000000000000056;
    v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v5, v13, v83);

    static String.localizedStringWithFormat(_:_:)(v14._countAndFlagsBits, v14._object, _swiftEmptyArrayStorage);
    v16 = v15;
    swift_bridgeObjectRelease(v14._object);
    v17 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setBody:", v17, swift_bridgeObjectRelease(v16).n128_f64[0]);

    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    v18(v10, v7, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v10, 0, 1, v8);
    v19 = v6(v10, 1, v8);
    v21 = 0;
    if (v19 != 1)
    {
      v22 = *(_QWORD *)(v0 + 120);
      v23 = *(_QWORD *)(v0 + 128);
      v24 = *(_QWORD *)(v0 + 104);
      URL._bridgeToObjectiveC()(v20);
      v21 = v25;
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v22);
    }
    v26 = objc_msgSend(objc_allocWithZone((Class)NSItemProvider), "initWithContentsOfURL:", v21);
    *(_QWORD *)(v0 + 264) = v26;

    if (v26)
    {
      v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 232);
      v28 = *(void **)(v0 + 200);
      v30 = *(_QWORD *)(v0 + 144);
      v29 = *(_QWORD *)(v0 + 152);
      v31 = *(_QWORD *)(v0 + 128);
      v32 = *(_QWORD *)(v0 + 136);
      v33 = *(_QWORD *)(v0 + 120);
      v34 = *(_QWORD *)(v0 + 96);
      v35 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 1, 1, v35);
      v18(v30, v29, v33);
      v36 = *(unsigned __int8 *)(v31 + 80);
      v37 = (v36 + 24) & ~v36;
      v38 = swift_allocObject(&unk_1005C7D58, v37 + v32, v36 | 7);
      *(_QWORD *)(v38 + 16) = v28;
      v27(v38 + v37, v30, v33);
      v39 = v28;
      v40 = sub_100116178(v34, 3, (uint64_t)&unk_100643A70, v38, 1.0);
      *(_QWORD *)(v0 + 272) = v40;
      swift_release(v38);
      sub_10000CB4C(v34, &qword_1006438A0);
      v41 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
      *(_QWORD *)(v0 + 280) = v41;
      v42 = sub_10006922C((uint64_t *)&unk_100643A78);
      v43 = sub_10006922C((uint64_t *)&unk_100643490);
      *v41 = v0;
      v41[1] = sub_100115D14;
      return (id)Task.value.getter(v0 + 40, v40, v42, v43, &protocol self-conformance witness table for Error);
    }
    v81 = *(_QWORD *)(v0 + 248);
    v82 = *(_QWORD *)(v0 + 176);

    swift_bridgeObjectRelease(v81);
    swift_release(v82);
    v69 = *(_QWORD *)(v0 + 168);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_100115D14()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 288) = v0;
  swift_task_dealloc(v3);
  v4 = v2[34];
  if (v0)
  {
    v5 = v2[31];
    swift_release(v4);
    swift_bridgeObjectRelease(v5);
    v6 = v2[23];
    v7 = v2[24];
    v8 = sub_100115F78;
  }
  else
  {
    swift_release(v4);
    v6 = v2[23];
    v7 = v2[24];
    v8 = sub_100115D90;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100115D90()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  void *Strong;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  swift_release(*(_QWORD *)(v0 + 176));
  v1 = *(void **)(v0 + 40);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v2, "defaultShareOptions");
    if (v3)
    {
      v4 = v3;
      v5 = objc_opt_self(_SWCollaborationShareOptions);
      v6 = (void *)swift_dynamicCastObjCClass(v4, v5);
      if (!v6)

    }
    else
    {
      v6 = 0;
    }
    v9 = *(void **)(v0 + 256);
    v10 = *(_QWORD *)(v0 + 248);
    v11 = *(_QWORD *)(v0 + 200);
    objc_msgSend(v9, "insertCollaborationItemProvider:collaborationShareOptions:collaborationMetadata:isCollaboration:", *(_QWORD *)(v0 + 264), v6, v2, 1);

    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v9, "setRecipients:", isa, swift_bridgeObjectRelease(v10).n128_f64[0]);

    Strong = (void *)swift_unknownObjectWeakLoadStrong(v11 + OBJC_IVAR____TtC5Files14DOCTipsManager_controller);
    v14 = *(void **)(v0 + 256);
    v15 = *(void **)(v0 + 264);
    v8 = *(void **)(v0 + 200);
    if (Strong)
    {
      v16 = Strong;
      objc_msgSend(Strong, "presentViewController:animated:completion:", *(_QWORD *)(v0 + 256), 1, 0);

    }
    else
    {

    }
    v7 = v2;
  }
  else
  {
    v7 = *(void **)(v0 + 256);
    v2 = *(id *)(v0 + 264);
    v8 = *(void **)(v0 + 200);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 248));
  }

  v17 = *(_QWORD *)(v0 + 168);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
  sub_10011736C(v17);
  v18 = *(_QWORD *)(v0 + 144);
  v19 = *(_QWORD *)(v0 + 152);
  v21 = *(_QWORD *)(v0 + 104);
  v20 = *(_QWORD *)(v0 + 112);
  v23 = *(_QWORD *)(v0 + 88);
  v22 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 72);
  v24 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v19);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100115F78()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 200);
  *(_QWORD *)&v2 = swift_release(*(_QWORD *)(v0 + 176)).n128_u64[0];
  v3 = *(void **)(v1 + OBJC_IVAR____TtC5Files14DOCTipsManager_familySharedFolderTipView);
  v4 = *(_QWORD *)(v0 + 288);
  v5 = *(void **)(v0 + 256);
  v6 = *(void **)(v0 + 264);
  v7 = *(void **)(v0 + 200);
  if (v3)
    objc_msgSend(v3, "setUserInteractionEnabled:", 1, v2);

  swift_errorRelease(v4);
  v8 = *(_QWORD *)(v0 + 168);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
  sub_10011736C(v8);
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 112);
  v14 = *(_QWORD *)(v0 + 88);
  v13 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 72);
  v15 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011607C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  *(_QWORD *)(v3 + 16) = a1;
  v6 = (_QWORD *)swift_task_alloc(dword_100643A2C);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_1001160E4;
  v6[3] = a3;
  v6[4] = a2;
  return swift_task_switch(sub_100114B24, 0, 0);
}

uint64_t sub_1001160E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
    return (*(uint64_t (**)(void))(v6 + 8))();
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch(sub_100116160, 0, 0);
}

uint64_t sub_100116160()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100116178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD v29[4];

  v10 = sub_10006922C(&qword_1006438A0);
  __chkstk_darwin(v10);
  v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000271D4(a1, (uint64_t)v12, &qword_1006438A0);
  v13 = swift_allocObject(&unk_1005C7D80, 64, 7);
  *(_QWORD *)(v13 + 16) = 0;
  v14 = (_QWORD *)(v13 + 16);
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = a2;
  *(_QWORD *)(v13 + 40) = a3;
  *(_QWORD *)(v13 + 48) = a4;
  *(double *)(v13 + 56) = a5;
  v15 = type metadata accessor for TaskPriority(0);
  v16 = *(_QWORD *)(v15 - 8);
  LODWORD(a2) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15);
  v17 = swift_retain();
  if ((_DWORD)a2 == 1)
  {
    sub_10000CB4C((uint64_t)v12, &qword_1006438A0);
    v18 = 0;
    v19 = 0;
    v20 = 7168;
  }
  else
  {
    v21 = TaskPriority.rawValue.getter(v17);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v15);
    v20 = v21 | 0x1C00;
    v22 = *v14;
    if (*v14)
    {
      v23 = *(_QWORD *)(v13 + 24);
      ObjectType = swift_getObjectType(*v14);
      swift_unknownObjectRetain(v22);
      v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v23);
      v19 = v25;
      swift_unknownObjectRelease(v22);
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
  }
  v26 = sub_10006922C((uint64_t *)&unk_100643A78);
  if (v19 | v18)
  {
    v29[0] = 0;
    v29[1] = 0;
    v27 = v29;
    v29[2] = v18;
    v29[3] = v19;
  }
  else
  {
    v27 = 0;
  }
  return swift_task_create(v20, v27, v26, &unk_100643A90, v13);
}

uint64_t sub_100116348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10000CB4C(a1, &qword_1006438A0);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (!v10)
    {
LABEL_6:
      v16 = 0;
      return swift_task_create(v9, v16, &type metadata for ()[8], a2, a3);
    }
  }
  else
  {
    v17 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v17 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (!v10)
      goto LABEL_6;
  }
  v11 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v10, v8);
  swift_unknownObjectRetain(v10);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
  v15 = v14;
  swift_unknownObjectRelease(v10);
  if (!(v15 | v13))
    goto LABEL_6;
  v19[0] = 0;
  v19[1] = 0;
  v16 = v19;
  v19[2] = v13;
  v19[3] = v15;
  return swift_task_create(v9, v16, &type metadata for ()[8], a2, a3);
}

id sub_1001164B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  char *v31;
  id v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  Class isa;
  char *v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *);
  uint64_t v82;
  unsigned __int8 v83;
  uint64_t v84;
  _BYTE v85[16];
  uint64_t v86;
  uint64_t v87;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v78 - v5;
  __chkstk_darwin(v4);
  v9 = (char *)&v78 - v8;
  v10 = *(void **)(v0 + OBJC_IVAR____TtC5Files14DOCTipsManager_familySharedFolderTipView);
  if (!v10)
    return objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v79 = v7;
  v11 = v10;
  v12 = Logger.DocumentManager.unsafeMutableAddressor(v11);
  v81 = *(void (**)(char *))(v2 + 16);
  v82 = v12;
  v81(v9);
  v13 = v11;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  v16 = os_log_type_enabled(v14, v15);
  v80 = v1;
  if (v16)
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v78 = v6;
    v19 = v18;
    v84 = v18;
    *(_DWORD *)v17 = 136315138;
    v20 = objc_msgSend(v13, "isUserInteractionEnabled");
    v21 = v20 == 0;
    if (v20)
      v22 = 1702195828;
    else
      v22 = 0x65736C6166;
    if (v21)
      v23 = 0xE500000000000000;
    else
      v23 = 0xE400000000000000;
    v86 = sub_1000544FC(v22, v23, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87);

    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Files Family Tip, familySharedFolderTipView isUserInteractionEnabled value %s", v17, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v24 = v19;
    v6 = v78;
    swift_slowDealloc(v24, -1, -1);
    v25 = v17;
    v1 = v80;
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

  }
  v27 = *(void (**)(char *, uint64_t))(v2 + 8);
  v27(v9, v1);
  v28 = ((uint64_t (*)(char *, uint64_t, uint64_t))v81)(v6, v82, v1);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = v6;
    v32 = v13;
    v33 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = swift_slowAlloc(32, -1);
    v86 = v34;
    *(_DWORD *)v33 = 136315138;
    if (qword_1006410F8 != -1)
      swift_once(&qword_1006410F8, sub_1000B1080);
    v35 = sub_10006922C(&qword_100646A10);
    v36 = sub_10007E788(v35, (uint64_t)qword_100652730);
    v37 = swift_beginAccess(v36, &v84, 32, 0);
    Tips.Parameter.wrappedValue.getter(&v83, v35, v37);
    v38 = v83;
    swift_endAccess(&v84);
    if (v38)
      v39 = 1702195828;
    else
      v39 = 0x65736C6166;
    if (v38)
      v40 = 0xE400000000000000;
    else
      v40 = 0xE500000000000000;
    v84 = sub_1000544FC(v39, v40, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85);
    swift_bridgeObjectRelease(v40);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Files Family Tip, tip hasFamilyWithAdultMember parameter value %s", v33, 0xCu);
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v33, -1, -1);

    v1 = v80;
    v27(v31, v80);
    v13 = v32;
  }
  else
  {

    v27(v6, v1);
  }
  v41 = v79;
  v42 = ((uint64_t (*)(char *, uint64_t, uint64_t))v81)(v79, v82, v1);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.default.getter(v43);
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    v46 = swift_slowAlloc(32, -1);
    v86 = v46;
    *(_DWORD *)v45 = 136315138;
    if (qword_1006410F0 != -1)
      swift_once(&qword_1006410F0, sub_1000B10A4);
    v47 = sub_10006922C(&qword_100646A10);
    v48 = sub_10007E788(v47, (uint64_t)qword_100652718);
    v49 = swift_beginAccess(v48, &v84, 32, 0);
    Tips.Parameter.wrappedValue.getter(&v83, v47, v49);
    v50 = v83;
    swift_endAccess(&v84);
    if (v50)
      v51 = 1702195828;
    else
      v51 = 0x65736C6166;
    if (v50)
      v52 = 0xE400000000000000;
    else
      v52 = 0xE500000000000000;
    v84 = sub_1000544FC(v51, v52, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85);
    swift_bridgeObjectRelease(v52);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Files Family Tip, tip hasSharedFolderWithAdultFamilyMember parameter value %s", v45, 0xCu);
    swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);

    v53 = v41;
    v54 = v80;
  }
  else
  {

    v53 = v41;
    v54 = v1;
  }
  v27(v53, v54);
  objc_msgSend(v13, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v55 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  objc_msgSend(v55, "addSubview:", v13);
  v56 = (void *)objc_opt_self(NSLayoutConstraint);
  v57 = sub_10006922C((uint64_t *)&unk_1006441A0);
  v58 = swift_allocObject(v57, 64, 7);
  *(_OWORD *)(v58 + 16) = xmmword_1004DAC10;
  v59 = objc_msgSend(v13, "leadingAnchor");
  v60 = objc_msgSend(v55, "layoutMarginsGuide");
  v61 = objc_msgSend(v60, "leadingAnchor");

  v62 = objc_msgSend(v59, "constraintEqualToAnchor:", v61);
  *(_QWORD *)(v58 + 32) = v62;
  v63 = objc_msgSend(v13, "trailingAnchor");
  v64 = objc_msgSend(v55, "layoutMarginsGuide");
  v65 = objc_msgSend(v64, "trailingAnchor");

  v66 = objc_msgSend(v63, "constraintEqualToAnchor:", v65);
  *(_QWORD *)(v58 + 40) = v66;
  v67 = objc_msgSend(v13, "topAnchor");
  v68 = objc_msgSend(v55, "layoutMarginsGuide");
  v69 = objc_msgSend(v68, "topAnchor");

  v70 = objc_msgSend(v67, "constraintEqualToAnchor:", v69);
  *(_QWORD *)(v58 + 48) = v70;
  v71 = objc_msgSend(v13, "bottomAnchor");
  v72 = objc_msgSend(v55, "layoutMarginsGuide");
  v73 = objc_msgSend(v72, "bottomAnchor");

  v74 = objc_msgSend(v71, "constraintEqualToAnchor:", v73);
  *(_QWORD *)(v58 + 56) = v74;
  v84 = v58;
  specialized Array._endMutation()(v75);
  v76 = v84;
  sub_10004F2F0(0, (unint64_t *)&unk_100642440, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v56, "activateConstraints:", isa, swift_bridgeObjectRelease(v76).n128_f64[0]);

  return v55;
}

uint64_t sub_100116D58()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  void *v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v31 - v8;
  v10 = Logger.DocumentManager.unsafeMutableAddressor(v7);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v12 = v11(v9, v10, v2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Files Family Tip, Set up shared folder button tapped", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v9, v2);
  v17 = OBJC_IVAR____TtC5Files14DOCTipsManager_familySharedFolderTipView;
  v18 = *(void **)&v1[OBJC_IVAR____TtC5Files14DOCTipsManager_familySharedFolderTipView];
  if (v18)
    objc_msgSend(v18, "setUserInteractionEnabled:", 0);
  v11(v6, v10, v2);
  v19 = v1;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v32 = v16;
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v34 = v23;
    *(_DWORD *)v22 = 136315138;
    v24 = *(void **)&v1[v17];
    if (v24)
      v25 = objc_msgSend(v24, "isUserInteractionEnabled");
    else
      v25 = 2;
    LOBYTE(v33) = v25;
    v26 = sub_10006922C(&qword_100643A40);
    v27 = String.init<A>(describing:)(&v33, v26);
    v29 = v28;
    v33 = sub_1000544FC(v27, v28, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
    swift_bridgeObjectRelease(v29);

    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Files Family Tip, familySharedFolderTipView isUserInteractionEnabled value in action handler %s", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    v32(v6, v2);
  }
  else
  {

    v16(v6, v2);
  }
  return sub_100114F50();
}

uint64_t sub_100117050(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;

  *(_QWORD *)(v7 + 16) = a1;
  v12 = swift_task_alloc(dword_100643A9C);
  *(_QWORD *)(v7 + 24) = v12;
  *(_QWORD *)v12 = v7;
  *(_QWORD *)(v12 + 8) = sub_1001170D0;
  *(double *)(v12 + 48) = a2;
  *(_QWORD *)(v12 + 32) = a6;
  *(_QWORD *)(v12 + 40) = a7;
  *(_QWORD *)(v12 + 24) = a5;
  return swift_task_switch(sub_100117A08, 0, 0);
}

uint64_t sub_1001170D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

double sub_10011712C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  _QWORD v12[2];

  v12[0] = type metadata accessor for Tips.ConfigurationOption.DatastoreLocation(0);
  v0 = *(_QWORD *)(v12[0] - 8);
  __chkstk_darwin(v12[0]);
  v2 = (char *)v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Tips.ConfigurationOption.AnalyticsEngine(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10006922C(&qword_100643A38);
  v8 = *(_QWORD *)(type metadata accessor for Tips.ConfigurationOption(0) - 8);
  v9 = swift_allocObject(v7, ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ 2 * *(_QWORD *)(v8 + 72), *(unsigned __int8 *)(v8 + 80) | 7);
  *(_OWORD *)(v9 + 16) = xmmword_1004D4CE0;
  static Tips.ConfigurationOption.AnalyticsEngine.coreAnalytics.getter();
  static Tips.ConfigurationOption.analyticsEngine(_:)(v6);
  v10 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  static Tips.ConfigurationOption.DatastoreLocation.tipsGroupContainer.getter(v10);
  static Tips.ConfigurationOption.datastoreLocation(_:)(v2);
  (*(void (**)(char *, _QWORD))(v0 + 8))(v2, v12[0]);
  static Tips.configure(_:)(v9);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v9).n128_u64[0];
  return result;
}

uint64_t sub_1001172C4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001172EC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100643A4C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100118844;
  return sub_10011514C(a1, v4, v5, v6);
}

uint64_t type metadata accessor for FamilyFolderDetails(uint64_t a1)
{
  return sub_10006BDA4(a1, qword_100643B48, (uint64_t)&nominal type descriptor for FamilyFolderDetails);
}

uint64_t sub_10011736C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FamilyFolderDetails(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001173A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (__cdecl *v5)();

  v1 = type metadata accessor for Logger(0);
  v0[2] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[3] = v2;
  v0[4] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t (__cdecl *)())((char *)&dword_10064E558 + dword_10064E558);
  v3 = (_QWORD *)swift_task_alloc(unk_10064E55C);
  v0[5] = v3;
  *v3 = v0;
  v3[1] = sub_100117428;
  return v5();
}

uint64_t sub_100117428(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100117484, 0, 0);
}

void sub_100117484()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;

  v1 = *(void **)(v0 + 48);
  if (!v1)
  {
    v13 = *(_QWORD *)(v0 + 24);
    v12 = *(_QWORD *)(v0 + 32);
    v14 = *(_QWORD *)(v0 + 16);
    v15 = Logger.DocumentManager.unsafeMutableAddressor(0);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v15, v14);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Files Family Tip, No Family found", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }
    v21 = *(_QWORD *)(v0 + 24);
    v20 = *(_QWORD *)(v0 + 32);
    v22 = *(_QWORD *)(v0 + 16);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    v23 = _swiftEmptyArrayStorage;
    goto LABEL_42;
  }
  v39 = *(void **)(v0 + 48);
  v2 = objc_msgSend(v1, "members");
  v3 = sub_10004F2F0(0, &qword_100643AA0, FAFamilyMember_ptr);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_4;
LABEL_23:
    swift_bridgeObjectRelease(v4);
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_39;
    goto LABEL_24;
  }
  if (v4 < 0)
    v24 = v4;
  else
    v24 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v5 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v4);
  if (!v5)
    goto LABEL_23;
LABEL_4:
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_44;
  }
  for (i = 0; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0)
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v4);
    else
      v7 = *(id *)(v4 + 8 * i + 32);
    v8 = v7;
    if (objc_msgSend(v7, "memberType") || (v9 = objc_msgSend(v8, "isMe"), (v9 & 1) != 0))
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
      v10 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
      specialized ContiguousArray._endMutation()(v11);
    }
  }
  swift_bridgeObjectRelease(v4);
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
    goto LABEL_39;
LABEL_24:
  if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
  {
    v25 = _swiftEmptyArrayStorage[2];
    v26 = swift_retain();
    if (!v25)
    {
LABEL_40:
      v23 = _swiftEmptyArrayStorage;
LABEL_41:
      swift_release_n(_swiftEmptyArrayStorage, 2, v26);

      v0 = v40;
LABEL_42:
      swift_task_dealloc(*(_QWORD *)(v0 + 32));
      (*(void (**)(_QWORD *))(v0 + 8))(v23);
      return;
    }
    goto LABEL_26;
  }
LABEL_39:
  swift_retain();
  v25 = _CocoaArrayWrapper.endIndex.getter(v38);
  if (!v25)
    goto LABEL_40;
LABEL_26:
  if (v25 >= 1)
  {
    v27 = 0;
    v23 = _swiftEmptyArrayStorage;
    do
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
        v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, _swiftEmptyArrayStorage);
      else
        v28 = (id)_swiftEmptyArrayStorage[v27 + 4];
      v29 = v28;
      v30 = objc_msgSend(v28, "appleID");
      if (v30)
      {
        v31 = v30;
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v34 = v33;

        if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
          v23 = sub_100081A50(0, v23[2] + 1, 1, v23);
        v36 = v23[2];
        v35 = v23[3];
        if (v36 >= v35 >> 1)
          v23 = sub_100081A50((_QWORD *)(v35 > 1), v36 + 1, 1, v23);
        v23[2] = v36 + 1;
        v37 = &v23[2 * v36];
        v37[4] = v32;
        v37[5] = v34;
      }
      else
      {

      }
      ++v27;
    }
    while (v25 != v27);
    goto LABEL_41;
  }
LABEL_44:
  __break(1u);
}

uint64_t sub_10011782C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001178A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc(dword_100643A6C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000EA854;
  return sub_10011607C(a1, v5, v6);
}

uint64_t sub_100117920()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10011794C(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  _QWORD *v10;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = *((_QWORD *)v1 + 6);
  v9 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_100643A8C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100118844;
  return ((uint64_t (*)(uint64_t, double, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100643A88
                                                                                               + dword_100643A88))(a1, v9, v4, v5, v6, v7, v8);
}

uint64_t sub_1001179E8(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;

  *(double *)(v4 + 48) = a4;
  *(_QWORD *)(v4 + 32) = a2;
  *(_QWORD *)(v4 + 40) = a3;
  *(_QWORD *)(v4 + 24) = a1;
  return swift_task_switch(sub_100117A08, 0, 0);
}

uint64_t sub_100117A08(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t (*v5)();
  int *v6;
  uint64_t (*v7)(_QWORD);

  v2 = v1[3];
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v2)
    {
      v3 = (int *)v1[4];
      v1[7] = 0;
      v7 = (uint64_t (*)(_QWORD))((char *)v3 + *v3);
      v4 = (_QWORD *)swift_task_alloc(v3[1]);
      v1[8] = v4;
      v5 = sub_100117ADC;
    }
    else
    {
      static Task<>.checkCancellation()(result);
      v6 = (int *)v1[4];
      v7 = (uint64_t (*)(_QWORD))((char *)v6 + *v6);
      v4 = (_QWORD *)swift_task_alloc(v6[1]);
      v1[12] = v4;
      v5 = sub_100117D6C;
    }
    *v4 = v1;
    v4[1] = v5;
    return v7(v1 + 2);
  }
  return result;
}

uint64_t sub_100117ADC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100117B40;
  else
    v3 = sub_100114C70;
  return swift_task_switch(v3, 0, 0);
}

void sub_100117B40()
{
  uint64_t v0;
  double v1;
  _QWORD *v2;

  v1 = *(double *)(v0 + 48) * 1000000000.0;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 1.84467441e19)
  {
    v2 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
    *(_QWORD *)(v0 + 80) = v2;
    *v2 = v0;
    v2[1] = sub_100117BDC;
    static Task<>.sleep(nanoseconds:)((unint64_t)v1);
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_100117BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100117D38;
  else
    v3 = sub_100117C40;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100117C40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v8)();
  int *v9;
  uint64_t (*v10)(uint64_t);

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 56) + 1;
  result = swift_errorRelease(*(_QWORD *)(v0 + 72));
  if (v2 == v1)
  {
    v4 = *(_QWORD *)(v0 + 88);
    static Task<>.checkCancellation()(result);
    if (v4)
      return (*(uint64_t (**)(void))(v0 + 8))();
    v9 = *(int **)(v0 + 32);
    v10 = (uint64_t (*)(uint64_t))((char *)v9 + *v9);
    v7 = (_QWORD *)swift_task_alloc(v9[1]);
    *(_QWORD *)(v0 + 96) = v7;
    v8 = sub_100117D6C;
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(v0 + 56) + 1;
  *(_QWORD *)(v0 + 56) = v5;
  if (v5 != *(_QWORD *)(v0 + 24))
  {
    v6 = *(int **)(v0 + 32);
    v10 = (uint64_t (*)(uint64_t))((char *)v6 + *v6);
    v7 = (_QWORD *)swift_task_alloc(v6[1]);
    *(_QWORD *)(v0 + 64) = v7;
    v8 = sub_100117ADC;
LABEL_7:
    *v7 = v0;
    v7[1] = v8;
    return v10(v0 + 16);
  }
  __break(1u);
  return result;
}

uint64_t sub_100117D38()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100117D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100117DD0;
  else
    v3 = sub_100118848;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100117DD0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100117DDC(uint64_t a1)
{
  uint64_t v1;

  sub_100114CB8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100117DE4()
{
  return sub_100117F34(&qword_100643AA8);
}

uint64_t sub_100117DF0(void *a1, void *a2)
{
  sub_10006922C(&qword_100643AA8);
  return sub_100114EE0(a1, a2);
}

uint64_t sub_100117E40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_100117EB8(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1001146E0(a1, a2, v2 + v6, *(void (**)(void *, uint64_t))v7, *(_QWORD *)(v7 + 8));
}

double sub_100117F1C(uint64_t a1)
{
  uint64_t v1;

  return sub_1001143B4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100117F28()
{
  return sub_100117F34(&qword_100643AB8);
}

uint64_t sub_100117F34(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_10006922C(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_100117F90(uint64_t a1, uint64_t a2)
{
  sub_10006922C(&qword_100643AB8);
  return sub_10011461C(a1, a2);
}

uint64_t sub_100117FE0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_100118014(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100113C80(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void (**)(char *, uint64_t))(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_100118024(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10006922C(&qword_100643470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100118070()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10011809C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100643ACC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000EA854;
  return sub_100112638(a1, v4, v5, v6);
}

unint64_t sub_100118108()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100643AD8;
  if (!qword_100643AD8)
  {
    v1 = type metadata accessor for DOCTipsFamilyTip();
    result = swift_getWitnessTable(&unk_1004E63EC, v1);
    atomic_store(result, &qword_100643AD8);
  }
  return result;
}

uint64_t sub_100118150()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100118174()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100643AE4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100118844;
  return sub_100112518();
}

uint64_t *sub_1001181D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_10006922C(&qword_100643470);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_1001182C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *sub_100118328(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10006922C(&qword_100643470);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_1001183E4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_10006922C(&qword_100643470);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_1001184EC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10006922C(&qword_100643470);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_1001185A8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_10006922C(&qword_100643470);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1001186B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001186BC);
}

uint64_t sub_1001186BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_10006922C(&qword_100643470);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_10011874C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100118758);
}

uint64_t sub_100118758(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_10006922C(&qword_100643470);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

void sub_1001187D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_1000B352C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1004DAC98;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_10011884C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t All;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t i;
  unint64_t v20;
  unint64_t v21;
  void **v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  id *v30;
  void (*v31)(void);
  id v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  _QWORD v37[4];

  v4 = type metadata accessor for DOCOperationItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (void **)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v10 = (uint64_t *)((char *)&v33 - v9);
  sub_100069BD8(a2, (uint64_t)v37);
  v11 = type metadata accessor for DOCActionContext();
  if ((swift_dynamicCast(&v36, v37, (char *)&type metadata for Any + 8, v11, 6) & 1) != 0)
  {
    v12 = v36;
    v13 = sub_10006922C((uint64_t *)&unk_1006424B0);
    All = Array<A>.fpfs_syncFetchAllFPItems()(a1, v13);
    if (!All)
    {

      return;
    }
    v15 = All;
    if ((unint64_t)All >> 62)
    {
      if (All >= 0)
        All &= 0xFFFFFFFFFFFFFF8uLL;
      v16 = _CocoaArrayWrapper.endIndex.getter(All);
      if (v16)
        goto LABEL_5;
    }
    else
    {
      v16 = *(_QWORD *)((All & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v16)
      {
LABEL_5:
        v35 = v15;
        v37[0] = _swiftEmptyArrayStorage;
        sub_100155054(0, v16 & ~(v16 >> 63), 0);
        if (v16 < 0)
        {
          __break(1u);
          return;
        }
        v34 = v12;
        v17 = (_QWORD *)v37[0];
        v18 = v35;
        if ((v35 & 0xC000000000000001) != 0)
        {
          for (i = 0; i != v16; ++i)
          {
            *v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v18);
            swift_storeEnumTagMultiPayload(v10, v4, 1);
            v37[0] = v17;
            v21 = v17[2];
            v20 = v17[3];
            if (v21 >= v20 >> 1)
            {
              sub_100155054(v20 > 1, v21 + 1, 1);
              v18 = v35;
              v17 = (_QWORD *)v37[0];
            }
            v17[2] = v21 + 1;
            sub_1000E2AB4((uint64_t)v10, (uint64_t)v17+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v21);
          }
        }
        else
        {
          v22 = (void **)(v35 + 32);
          do
          {
            v23 = *v22;
            *v8 = *v22;
            swift_storeEnumTagMultiPayload(v8, v4, 1);
            v37[0] = v17;
            v25 = v17[2];
            v24 = v17[3];
            v26 = v23;
            if (v25 >= v24 >> 1)
            {
              sub_100155054(v24 > 1, v25 + 1, 1);
              v17 = (_QWORD *)v37[0];
            }
            v17[2] = v25 + 1;
            sub_1000E2AB4((uint64_t)v8, (uint64_t)v17+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v25);
            ++v22;
            --v16;
            v18 = v35;
          }
          while (v16);
        }
        swift_bridgeObjectRelease(v18);
        v12 = v34;
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease(v15);
    v17 = _swiftEmptyArrayStorage;
LABEL_22:
    v27 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
    v28 = *(id *)&v12[OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController];
    sub_100477E1C(3, (uint64_t)v17, 0, 0, 0, 1, (uint64_t)v28, 0, 0);

    v29 = swift_bridgeObjectRelease(v17);
    v30 = (id *)DOCSmartFolderManager.sharedManager.unsafeMutableAddressor(v29);
    v31 = *(void (**)(void))((swift_isaMask & *(_QWORD *)*v30) + 0xA0);
    v32 = *v30;
    v31();

  }
}

void sub_100118B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t All;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  unint64_t v20;
  void **v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  _QWORD v38[4];

  v36 = type metadata accessor for DOCOperationItem(0);
  v4 = *(_QWORD *)(v36 - 8);
  v5 = __chkstk_darwin(v36);
  v7 = (void **)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v34 - v8);
  sub_100069BD8(a2, (uint64_t)v38);
  v10 = type metadata accessor for DOCActionContext();
  if ((swift_dynamicCast(&v37, v38, (char *)&type metadata for Any + 8, v10, 6) & 1) == 0)
    return;
  v11 = v37;
  v12 = sub_10006922C((uint64_t *)&unk_1006424B0);
  All = Array<A>.fpfs_syncFetchAllFPItems()(a1, v12);
  if (!All)
  {

    return;
  }
  v14 = All;
  if ((unint64_t)All >> 62)
  {
    if (All >= 0)
      All &= 0xFFFFFFFFFFFFFF8uLL;
    v15 = _CocoaArrayWrapper.endIndex.getter(All);
    if (v15)
      goto LABEL_5;
  }
  else
  {
    v15 = *(_QWORD *)((All & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v15)
    {
LABEL_5:
      v38[0] = _swiftEmptyArrayStorage;
      sub_100155054(0, v15 & ~(v15 >> 63), 0);
      if (v15 < 0)
      {
        __break(1u);
        return;
      }
      v35 = v11;
      v16 = (_QWORD *)v38[0];
      v17 = v36;
      if ((v14 & 0xC000000000000001) != 0)
      {
        for (i = 0; i != v15; ++i)
        {
          *v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v14);
          swift_storeEnumTagMultiPayload(v9, v17, 1);
          v38[0] = v16;
          v20 = v16[2];
          v19 = v16[3];
          if (v20 >= v19 >> 1)
          {
            sub_100155054(v19 > 1, v20 + 1, 1);
            v17 = v36;
            v16 = (_QWORD *)v38[0];
          }
          v16[2] = v20 + 1;
          sub_1000E2AB4((uint64_t)v9, (uint64_t)v16+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v20);
        }
      }
      else
      {
        v21 = (void **)(v14 + 32);
        do
        {
          v22 = *v21;
          *v7 = *v21;
          swift_storeEnumTagMultiPayload(v7, v17, 1);
          v38[0] = v16;
          v24 = v16[2];
          v23 = v16[3];
          v25 = v22;
          if (v24 >= v23 >> 1)
          {
            sub_100155054(v23 > 1, v24 + 1, 1);
            v16 = (_QWORD *)v38[0];
          }
          v16[2] = v24 + 1;
          sub_1000E2AB4((uint64_t)v7, (uint64_t)v16+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v24);
          ++v21;
          --v15;
          v17 = v36;
        }
        while (v15);
      }
      swift_bridgeObjectRelease(v14);
      v11 = v35;
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease(v14);
  v16 = _swiftEmptyArrayStorage;
LABEL_22:
  v26 = OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController;
  v27 = *(void **)&v11[OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController];
  v28 = type metadata accessor for DOCItemCollectionViewController(0);
  v29 = swift_dynamicCastClass(v27, v28);
  if (!v29)
  {
LABEL_25:
    v32 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
    sub_100477E1C(4, (uint64_t)v16, 0, 0, 0, 1, *(_QWORD *)&v11[v26], 0, 0);

    swift_bridgeObjectRelease(v16);
    return;
  }
  v30 = (void *)v29;
  v31 = v27;
  if ((objc_msgSend(v30, "isEditing") & 1) != 0)
  {

    goto LABEL_25;
  }
  swift_bridgeObjectRetain(v16);
  v33 = v11;
  sub_10024A1B4((char *)v30, (uint64_t)v16, v33);

  swift_bridgeObjectRelease_n(v16, 2);
}

void sub_100118F24(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
  sub_100477E1C(4, a1, 0, 0, 0, 1, *(_QWORD *)(a2 + OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController), 0, 0);

}

void sub_100118FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t All;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t i;
  unint64_t v20;
  unint64_t v21;
  void **v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  _QWORD v33[4];

  v4 = type metadata accessor for DOCOperationItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (void **)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v10 = (uint64_t *)((char *)&v29 - v9);
  sub_100069BD8(a2, (uint64_t)v33);
  v11 = type metadata accessor for DOCActionContext();
  if ((swift_dynamicCast(&v32, v33, (char *)&type metadata for Any + 8, v11, 6) & 1) != 0)
  {
    v12 = v32;
    v13 = sub_10006922C((uint64_t *)&unk_1006424B0);
    All = Array<A>.fpfs_syncFetchAllFPItems()(a1, v13);
    if (!All)
    {

      return;
    }
    v15 = All;
    if ((unint64_t)All >> 62)
    {
      if (All >= 0)
        All &= 0xFFFFFFFFFFFFFF8uLL;
      v16 = _CocoaArrayWrapper.endIndex.getter(All);
      if (v16)
        goto LABEL_5;
    }
    else
    {
      v16 = *(_QWORD *)((All & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v16)
      {
LABEL_5:
        v31 = v15;
        v33[0] = _swiftEmptyArrayStorage;
        sub_100155054(0, v16 & ~(v16 >> 63), 0);
        if (v16 < 0)
        {
          __break(1u);
          return;
        }
        v30 = v12;
        v17 = (_QWORD *)v33[0];
        v18 = v31;
        if ((v31 & 0xC000000000000001) != 0)
        {
          for (i = 0; i != v16; ++i)
          {
            *v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v18);
            swift_storeEnumTagMultiPayload(v10, v4, 1);
            v33[0] = v17;
            v21 = v17[2];
            v20 = v17[3];
            if (v21 >= v20 >> 1)
            {
              sub_100155054(v20 > 1, v21 + 1, 1);
              v18 = v31;
              v17 = (_QWORD *)v33[0];
            }
            v17[2] = v21 + 1;
            sub_1000E2AB4((uint64_t)v10, (uint64_t)v17+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v21);
          }
        }
        else
        {
          v22 = (void **)(v31 + 32);
          do
          {
            v23 = *v22;
            *v8 = *v22;
            swift_storeEnumTagMultiPayload(v8, v4, 1);
            v33[0] = v17;
            v25 = v17[2];
            v24 = v17[3];
            v26 = v23;
            if (v25 >= v24 >> 1)
            {
              sub_100155054(v24 > 1, v25 + 1, 1);
              v17 = (_QWORD *)v33[0];
            }
            v17[2] = v25 + 1;
            sub_1000E2AB4((uint64_t)v8, (uint64_t)v17+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v25);
            ++v22;
            --v16;
            v18 = v31;
          }
          while (v16);
        }
        swift_bridgeObjectRelease(v18);
        v12 = v30;
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease(v15);
    v17 = _swiftEmptyArrayStorage;
LABEL_22:
    v27 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
    v28 = *(id *)&v12[OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController];
    sub_100477E1C(4, (uint64_t)v17, 0, 0, 0, 1, (uint64_t)v28, 0, 0);

    swift_bridgeObjectRelease(v17);
  }
}

void sub_1001192D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void **aBlock;
  uint64_t v48;
  void (*v49)(uint64_t, void *);
  void *v50;
  void *v51;
  uint64_t v52;
  char *v53;

  sub_100069BD8(a2, (uint64_t)&aBlock);
  v3 = type metadata accessor for DOCActionContext();
  if ((swift_dynamicCast(&v53, &aBlock, (char *)&type metadata for Any + 8, v3, 6) & 1) != 0)
  {
    v4 = v53;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0)
        v46 = a1;
      else
        v46 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      if (_CocoaArrayWrapper.endIndex.getter(v46))
        goto LABEL_4;
    }
    else
    {
      v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (v5)
      {
LABEL_4:
        if ((a1 & 0xC000000000000001) != 0)
        {
          v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
        }
        else
        {
          if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          v6 = *(_QWORD *)(a1 + 32);
          swift_unknownObjectRetain(v6);
        }
        swift_bridgeObjectRelease(a1);
        ObjectType = swift_getObjectType(v6, v7);
        v9 = (void *)DOCNode.fpfs_syncFetchFPItem()(ObjectType);
        v10 = swift_unknownObjectRelease(v6);
        if (!v9)
        {

          return;
        }
        v11 = *(void **)&v4[OBJC_IVAR____TtC5Files16DOCActionContext_actionReporting];
        if (v11)
        {
          v12 = *(_QWORD *)&v4[OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController];
          v13 = type metadata accessor for DOCItemCollectionViewController(0);
          v14 = swift_dynamicCastClass(v12, v13);
          if (v14)
          {
            v15 = *(void **)(v14 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration);
            swift_unknownObjectRetain(v11);
            v16 = objc_msgSend(v15, "identifier");
            v17 = (void *)DOCDocumentSourceIdentifierSearch;
            v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
            v20 = v19;
            v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
            if (v18 == v21 && v20 == v22)
            {
              v33 = v17;

              swift_bridgeObjectRelease_n(v20, 2);
              goto LABEL_22;
            }
            v24 = v22;
            v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v21, v22, 0);
            v26 = v17;

            swift_bridgeObjectRelease(v20);
            swift_bridgeObjectRelease(v24);
            if ((v25 & 1) != 0)
            {
LABEL_22:
              v34 = *(void **)&v4[OBJC_IVAR____TtC5Files16DOCActionContext_transitionProxy];
              if (v34)
              {
                v35 = swift_allocObject(&unk_1005C9168, 32, 7);
                *(_QWORD *)(v35 + 16) = v4;
                *(_QWORD *)(v35 + 24) = v9;
                v51 = sub_10012BA10;
                v52 = v35;
                aBlock = _NSConcreteStackBlock;
                v48 = 1107296256;
                v49 = sub_10015936C;
                v50 = &unk_1005C9180;
                v36 = _Block_copy(&aBlock);
                v37 = v52;
                v38 = v4;
                v39 = v9;
                swift_release(v37);
                objc_msgSend(v34, "getCellFor::", v39, v36);

                swift_unknownObjectRelease(v11);
                _Block_release(v36);
                return;
              }
              goto LABEL_24;
            }
          }
          else
          {
            swift_unknownObjectRetain(v11);
          }
          objc_msgSend(v11, "beginRenameOf:", v9);
LABEL_24:

          swift_unknownObjectRelease(v11);
          return;
        }
        v27 = *(void **)&v4[OBJC_IVAR____TtC5Files16DOCActionContext_transitionProxy];
        if (v27)
        {
          v28 = swift_allocObject(&unk_1005C9118, 32, 7);
          *(_QWORD *)(v28 + 16) = v9;
          *(_QWORD *)(v28 + 24) = v4;
          v51 = sub_10012BA08;
          v52 = v28;
          aBlock = _NSConcreteStackBlock;
          v48 = 1107296256;
          v49 = sub_10015936C;
          v50 = &unk_1005C9130;
          v29 = _Block_copy(&aBlock);
          v30 = v52;
          v31 = v4;
          v32 = v9;
          swift_unknownObjectRetain(v27);
          swift_release(v30);
          objc_msgSend(v27, "getCellFor::", v32, v29);

          _Block_release(v29);
          swift_unknownObjectRelease(v27);
          return;
        }
        v40 = *(id *)DOCLog.UI.unsafeMutableAddressor(v10);
        v41 = static os_log_type_t.debug.getter();
        v42 = sub_10006922C((uint64_t *)&unk_100644560);
        v43 = swift_allocObject(v42, 72, 7);
        *(_OWORD *)(v43 + 16) = xmmword_1004D9670;
        *(_QWORD *)(v43 + 56) = sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
        *(_QWORD *)(v43 + 64) = sub_10010F470();
        *(_QWORD *)(v43 + 32) = v9;
        v44 = v9;
        os_log(_:dso:log:type:_:)("Rename: Unable to get cell for item: %@", 39, 2, &_mh_execute_header, v40, v41, v43);

        v45 = v43;
        goto LABEL_31;
      }
    }

    v45 = a1;
LABEL_31:
    swift_bridgeObjectRelease(v45);
  }
}

void sub_100119764(void *a1, uint64_t a2, void *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  id v22;

  if (a1)
  {
    v5 = *(void **)(a2 + OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController);
    v6 = type metadata accessor for DOCItemCollectionViewController(0);
    v7 = swift_dynamicCastClass(v5, v6);
    if (v7)
    {
      v8 = v7;
      v9 = type metadata accessor for DOCInlineRenameController();
      v10 = swift_allocObject(v9, 160, 7);
      v22 = v5;
      v11 = a3;
      v12 = a1;
      v13 = sub_1001BDA68(v8, (uint64_t)v12, (uint64_t)v11, v10);

      v14 = OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_inlineRenameController;
      v15 = *(_QWORD *)(v8 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_inlineRenameController);
      *(_QWORD *)(v8 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_inlineRenameController) = v13;
      swift_retain();
      swift_release(v15);
      if (!*(_QWORD *)(v8 + v14))
        *(_BYTE *)(v8 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_preparingForInlineRename) = 0;
      if (*(_QWORD *)(v8 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_currentClickyOrbMenu))
      {
        v16 = (void (**)(uint64_t, uint64_t))(v8
                                                     + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_blockToRunWhenMenuInteractionFinishedDismissing);
        v17 = *(_QWORD *)(v8
                        + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_blockToRunWhenMenuInteractionFinishedDismissing);
        v18 = *(_QWORD *)(v8
                        + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_blockToRunWhenMenuInteractionFinishedDismissing
                        + 8);
        *v16 = sub_10012BA18;
        v16[1] = (void (*)(uint64_t, uint64_t))v13;
        sub_100087534(v17, v18);

      }
      else
      {
        v19 = swift_retain_n(v13, 2);
        sub_10038C8C0(v19, v20);

        swift_release_n(v13, 3, v21);
      }
    }
  }
}

void sub_1001198D0(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  id v13;
  char *v14;

  if (a1)
  {
    v6 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x1F8))();
    if (v6)
    {
      v7 = (char *)v6;
      v8 = a1;
      sub_10006DD34();
      v9 = *(void **)&v7[OBJC_IVAR____TtC5Files28DOCItemCollectionCellContent__thumbnail];
      swift_unknownObjectRetain(v9);

    }
    else
    {
      v10 = a1;
      v9 = 0;
    }
    v11 = *(_QWORD *)(a3 + OBJC_IVAR____TtC5Files16DOCActionContext_transitionProxy);
    v12 = objc_allocWithZone((Class)type metadata accessor for DOCRenameViewController());
    swift_unknownObjectRetain(v9);
    v13 = a2;
    swift_unknownObjectRetain(v11);
    v14 = sub_100286908(v13, v11, v9);
    sub_100285448(*(void **)(a3 + OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController), 1);

    swift_unknownObjectRelease(v9);
  }
}

void sub_1001199EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t All;
  uint64_t v12;
  id v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  objc_class *v20;
  char *v21;
  char *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  objc_super v27;
  char *v28;
  _QWORD v29[4];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100069BD8(a2, (uint64_t)v29);
  v8 = type metadata accessor for DOCActionContext();
  if ((swift_dynamicCast(&v28, v29, (char *)&type metadata for Any + 8, v8, 6) & 1) != 0)
  {
    v9 = v28;
    v10 = sub_10006922C((uint64_t *)&unk_1006424B0);
    All = Array<A>.fpfs_syncFetchAllFPItems()(a1, v10);
    if (All)
    {
      v12 = All;
      v13 = objc_msgSend(*(id *)&v9[OBJC_IVAR____TtC5Files16DOCActionContext_configuration], "copy");
      _bridgeAnyObjectToAny(_:)(v29, v13);
      swift_unknownObjectRelease(v13);
      v14 = sub_10004F2F0(0, (unint64_t *)&qword_100649C20, DOCConfiguration_ptr);
      swift_dynamicCast(&v28, v29, (char *)&type metadata for Any + 8, v14, 7);
      v15 = v28;
      objc_msgSend(v28, "setInteractionMode:", 3);
      v16 = UUID.init()(objc_msgSend(v15, "setForPickingDocuments:", 0));
      UUID.uuidString.getter(v16);
      v18 = v17;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v18);
      objc_msgSend(v15, "setSceneIdentifier:", v19);

      objc_msgSend(v15, "setForMovingDocuments:", 1);
      v20 = (objc_class *)type metadata accessor for DOCPickerContext();
      v21 = (char *)objc_allocWithZone(v20);
      *(_QWORD *)&v21[OBJC_IVAR____TtC5Files16DOCPickerContext_utisToSave] = _swiftEmptyArrayStorage;
      *(_QWORD *)&v21[OBJC_IVAR____TtC5Files16DOCPickerContext_urlsToSave] = 0;
      *(_QWORD *)&v21[OBJC_IVAR____TtC5Files16DOCPickerContext_itemsToMove] = v12;
      v27.receiver = v21;
      v27.super_class = v20;
      v22 = v15;
      v23 = objc_msgSendSuper2(&v27, "init");
      v24 = objc_allocWithZone((Class)type metadata accessor for DOCDocumentPickerViewController());
      v25 = DOCDocumentPickerViewController.init(configuration:context:)(v22, v23);
      objc_msgSend(*(id *)&v9[OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController], "presentViewController:animated:completion:", v25, 1, 0);

    }
    else
    {

    }
  }
}

uint64_t sub_100119C7C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;

  sub_1000271D4(a1, (uint64_t)&v16, &qword_100642730);
  if (!*((_QWORD *)&v17 + 1))
    goto LABEL_22;
  v1 = sub_10006922C((uint64_t *)&unk_1006444E0);
  if ((swift_dynamicCast(&v15, &v16, (char *)&type metadata for Any + 8, v1, 6) & 1) == 0)
    return 0;
  v2 = v15;
  if (*(_QWORD *)(v15 + 16) && (v3 = sub_10007EF08(0x7365646F4E636F64, 0xE800000000000000), (v4 & 1) != 0))
  {
    sub_100069BD8(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v16);
  }
  else
  {
    v16 = 0u;
    v17 = 0u;
  }
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v17 + 1))
  {
LABEL_22:
    sub_10000CB4C((uint64_t)&v16, &qword_100642730);
    return 0;
  }
  v5 = sub_10006922C((uint64_t *)&unk_100643CB0);
  if ((swift_dynamicCast(&v15, &v16, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
  {
    v6 = v15;
    if (v15 >> 62)
      goto LABEL_26;
    v7 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v15);
    while (v7)
    {
      v8 = 4;
      while (1)
      {
        v9 = v8 - 4;
        if ((v6 & 0xC000000000000001) == 0)
          break;
        v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v6);
        v11 = v8 - 3;
        if (__OFADD__(v9, 1))
          goto LABEL_25;
LABEL_19:
        if ((objc_msgSend(v10, "isTrashed") & 1) != 0)
        {
          swift_unknownObjectRelease(v10);
        }
        else
        {
          v12 = objc_msgSend(v10, "isAnyParentTrashed");
          swift_unknownObjectRelease(v10);
          if ((v12 & 1) == 0)
          {
            swift_bridgeObjectRelease_n(v6, 2);
            return 1;
          }
        }
        ++v8;
        if (v11 == v7)
          goto LABEL_30;
      }
      v10 = *(void **)(v6 + 8 * v8);
      swift_unknownObjectRetain(v10);
      v11 = v8 - 3;
      if (!__OFADD__(v9, 1))
        goto LABEL_19;
LABEL_25:
      __break(1u);
LABEL_26:
      if (v6 < 0)
        v14 = v6;
      else
        v14 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v7 = _CocoaArrayWrapper.endIndex.getter(v14);
    }
LABEL_30:
    swift_bridgeObjectRelease_n(v6, 2);
  }
  return 0;
}

void sub_100119E8C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  void *v19;
  unint64_t v20;
  id v21;
  id v22;
  id v23;
  char *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id *v37;
  void (*v38)(uint64_t *, id);
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  NSString v46;
  Class isa;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  id v54;
  unint64_t v55;
  uint64_t v56;
  id v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t All;
  char *v63;
  _QWORD v64[4];

  v6 = type metadata accessor for Date(0);
  v60 = *(_QWORD *)(v6 - 8);
  v61 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for DOCSmartFolderInputFile(0);
  __chkstk_darwin(v59);
  v10 = (uint64_t *)((char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100069BD8(a2, (uint64_t)v64);
  v11 = type metadata accessor for DOCActionContext();
  if ((swift_dynamicCast(&v63, v64, (char *)&type metadata for Any + 8, v11, 6) & 1) != 0)
  {
    v12 = v63;
    v13 = sub_10006922C((uint64_t *)&unk_1006424B0);
    All = Array<A>.fpfs_syncFetchAllFPItems()(a1, v13);
    if (!All)
    {

      return;
    }
    v14 = objc_msgSend(*(id *)&v12[OBJC_IVAR____TtC5Files16DOCActionContext_configuration], "copy");
    _bridgeAnyObjectToAny(_:)(v64, v14);
    swift_unknownObjectRelease(v14);
    v15 = sub_10004F2F0(0, (unint64_t *)&qword_100649C20, DOCConfiguration_ptr);
    swift_dynamicCast(&v63, v64, (char *)&type metadata for Any + 8, v15, 7);
    v16 = v63;
    v17 = objc_msgSend(a3, "fpfs_fpItem");
    if (!v17)
    {

      swift_bridgeObjectRelease(All);
      return;
    }
    v18 = v17;
    v58 = v16;
    v19 = (void *)objc_opt_self(DOCUndoManager);
    v20 = All;
    swift_bridgeObjectRetain(All);
    v21 = v18;
    v22 = objc_msgSend(v19, "shared");
    v23 = objc_allocWithZone((Class)type metadata accessor for DOCMoveOperation());
    v57 = v21;
    v24 = sub_10015C348(v20, v21, v22);
    v25 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
    v53 = v24;
    objc_msgSend(v25, "scheduleAction:", v24);

    v54 = v12;
    if (v20 >> 62)
    {
      v50 = All;
      if (All >= 0)
        v51 = v20 & 0xFFFFFFFFFFFFFF8;
      else
        v51 = All;
      swift_bridgeObjectRetain(All);
      v26 = _CocoaArrayWrapper.endIndex.getter(v51);
      swift_bridgeObjectRelease(v50);
      if (v26)
        goto LABEL_6;
    }
    else
    {
      v26 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v26)
      {
LABEL_6:
        if (v26 < 1)
        {
          __break(1u);
          return;
        }
        v27 = 0;
        v55 = All & 0xC000000000000001;
        v56 = v26;
        do
        {
          if (v55)
            v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, All);
          else
            v28 = *(id *)(All + 8 * v27 + 32);
          v29 = v28;
          ++v27;
          v30 = objc_msgSend(v28, "displayName");
          v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
          v33 = v32;

          v34 = objc_msgSend(v29, "contentType");
          static UTType._unconditionallyBridgeFromObjectiveC(_:)(v34);

          v36 = Date.init()(v35);
          *v10 = v31;
          v10[1] = v33;
          v37 = (id *)DOCSmartFolderManager.sharedManager.unsafeMutableAddressor(v36);
          v38 = *(void (**)(uint64_t *, id))((swift_isaMask & *(_QWORD *)*v37) + 0xA8);
          v39 = *v37;
          v40 = v57;
          v38(v10, v57);

          v41 = objc_msgSend(v58, "hostIdentifier");
          static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
          v43 = v42;

          v44 = v40;
          Date.init()(v44);
          v45 = objc_allocWithZone((Class)DOCHotFolderEvent);
          v46 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v43);
          isa = Date._bridgeToObjectiveC()().super.isa;
          v48 = objc_msgSend(v45, "initWithAppBundleIdentifier:folderItem:type:lastUsedDate:frecency:", v46, v44, 1, isa, 1.0);

          (*(void (**)(char *, uint64_t))(v60 + 8))(v8, v61);
          v49 = *v37;
          DOCSmartFolderManager.register(event:)(v48);

          sub_10012B5F0((uint64_t)v10);
        }
        while (v56 != v27);
      }
    }

    swift_bridgeObjectRelease(All);
  }
}

uint64_t sub_10011A338(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unsigned __int8 v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;

  sub_1000271D4(a1, (uint64_t)&v21, &qword_100642730);
  if (!*((_QWORD *)&v22 + 1))
    goto LABEL_21;
  v4 = sub_10006922C((uint64_t *)&unk_1006444E0);
  if ((swift_dynamicCast(&v20, &v21, (char *)&type metadata for Any + 8, v4, 6) & 1) == 0)
  {
LABEL_22:
    v16 = 0;
    return v16 & 1;
  }
  v5 = v20;
  if (*(_QWORD *)(v20 + 16) && (v6 = sub_10007EF08(0x7365646F4E636F64, 0xE800000000000000), (v7 & 1) != 0))
  {
    sub_100069BD8(*(_QWORD *)(v5 + 56) + 32 * v6, (uint64_t)&v21);
  }
  else
  {
    v21 = 0u;
    v22 = 0u;
  }
  swift_bridgeObjectRelease(v5);
  if (!*((_QWORD *)&v22 + 1))
  {
LABEL_21:
    sub_10000CB4C((uint64_t)&v21, &qword_100642730);
    goto LABEL_22;
  }
  v8 = sub_10006922C((uint64_t *)&unk_100643CB0);
  if ((swift_dynamicCast(&v20, &v21, (char *)&type metadata for Any + 8, v8, 6) & 1) == 0)
    goto LABEL_22;
  v9 = v20;
  if (v20 >> 62)
    goto LABEL_26;
  v10 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v10)
  {
LABEL_32:
    swift_bridgeObjectRelease(v9);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain(v20);
  do
  {
    v11 = 4;
    while (1)
    {
      v12 = v11 - 4;
      if ((v9 & 0xC000000000000001) == 0)
        break;
      v13 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v9);
      v14 = v11 - 3;
      if (__OFADD__(v12, 1))
        goto LABEL_25;
LABEL_18:
      v15 = objc_msgSend(v13, "isTrashed");
      swift_unknownObjectRelease(v13);
      if ((v15 & 1) != 0)
      {
        swift_bridgeObjectRelease_n(v9, 2);
        goto LABEL_22;
      }
      ++v11;
      if (v14 == v10)
        goto LABEL_20;
    }
    v13 = *(void **)(v9 + 8 * v11);
    swift_unknownObjectRetain(v13);
    v14 = v11 - 3;
    if (!__OFADD__(v12, 1))
      goto LABEL_18;
LABEL_25:
    __break(1u);
LABEL_26:
    if (v9 < 0)
      v18 = v9;
    else
      v18 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v9);
    if (v19 <= 0)
      goto LABEL_32;
    swift_bridgeObjectRetain(v9);
    v10 = _CocoaArrayWrapper.endIndex.getter(v18);
  }
  while (v10);
LABEL_20:
  swift_bridgeObjectRelease(v9);
  swift_unknownObjectRetain(a3);
  v16 = sub_1001249C8(v9, a3);
  swift_bridgeObjectRelease(v9);
  swift_unknownObjectRelease(a3);
  return v16 & 1;
}

void sub_10011A588(uint64_t a1, uint64_t a2)
{
  sub_10011A804(a1, a2, (SEL *)&selRef_addFavorite_completion_);
}

uint64_t sub_10011A594(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  unsigned __int8 v14;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;

  sub_1000271D4(a1, (uint64_t)&v18, &qword_100642730);
  if (!*((_QWORD *)&v19 + 1))
    goto LABEL_25;
  v1 = sub_10006922C((uint64_t *)&unk_1006444E0);
  if ((swift_dynamicCast(&v17, &v18, (char *)&type metadata for Any + 8, v1, 6) & 1) == 0)
    return 0;
  v2 = v17;
  if (*(_QWORD *)(v17 + 16) && (v3 = sub_10007EF08(0x7365646F4E636F64, 0xE800000000000000), (v4 & 1) != 0))
  {
    sub_100069BD8(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v18);
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
  }
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v19 + 1))
  {
LABEL_25:
    sub_10000CB4C((uint64_t)&v18, &qword_100642730);
    return 0;
  }
  v5 = sub_10006922C((uint64_t *)&unk_100643CB0);
  if ((swift_dynamicCast(&v17, &v18, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
  {
    v6 = v17;
    if (v17 >> 62)
      goto LABEL_29;
    v7 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v17);
    while (v7)
    {
      v8 = 4;
      while (1)
      {
        v9 = v8 - 4;
        if ((v6 & 0xC000000000000001) == 0)
          break;
        v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v6);
        v11 = v8 - 3;
        if (__OFADD__(v9, 1))
          goto LABEL_28;
LABEL_17:
        if ((objc_msgSend(v10, "isTrashed") & 1) != 0
          || (objc_msgSend(v10, "isAnyParentTrashed") & 1) != 0
          || (v12 = objc_msgSend(v10, "fpfs_fpItem"),
              v13 = objc_msgSend(v12, "favoriteRank"),
              v13,
              v12,
              v13))
        {
          swift_unknownObjectRelease(v10);
        }
        else
        {
          v14 = objc_msgSend(v10, "doc_isCollaborationInvitation");
          swift_unknownObjectRelease(v10);
          if ((v14 & 1) == 0)
          {
            swift_bridgeObjectRelease_n(v6, 2);
            return 1;
          }
        }
        ++v8;
        if (v11 == v7)
          goto LABEL_33;
      }
      v10 = *(void **)(v6 + 8 * v8);
      swift_unknownObjectRetain(v10);
      v11 = v8 - 3;
      if (!__OFADD__(v9, 1))
        goto LABEL_17;
LABEL_28:
      __break(1u);
LABEL_29:
      if (v6 < 0)
        v16 = v6;
      else
        v16 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    }
LABEL_33:
    swift_bridgeObjectRelease_n(v6, 2);
  }
  return 0;
}

void sub_10011A7F8(uint64_t a1, uint64_t a2)
{
  sub_10011A804(a1, a2, (SEL *)&selRef_removeFavorite_completion_);
}

void sub_10011A804(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  void *v9;
  uint64_t v10;
  id v11;

  if (!((unint64_t)a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v5)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease(a1);
    return;
  }
  if (a1 < 0)
    v10 = a1;
  else
    v10 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v10))
    goto LABEL_13;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v6 = *(_QWORD *)(a1 + 32);
    swift_unknownObjectRetain(v6);
  }
  swift_bridgeObjectRelease(a1);
  ObjectType = swift_getObjectType(v6, v7);
  v9 = (void *)DOCNode.fpfs_syncFetchFPItem()(ObjectType);
  swift_unknownObjectRelease(v6);
  if (v9)
  {
    v11 = objc_msgSend((id)objc_opt_self(DOCFavoritesManager), "sharedManager");
    objc_msgSend(v11, *a3, v9, 0);

  }
}

uint64_t sub_10011A93C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  unsigned __int8 v14;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;

  sub_1000271D4(a1, (uint64_t)&v18, &qword_100642730);
  if (!*((_QWORD *)&v19 + 1))
    goto LABEL_24;
  v1 = sub_10006922C((uint64_t *)&unk_1006444E0);
  if ((swift_dynamicCast(&v17, &v18, (char *)&type metadata for Any + 8, v1, 6) & 1) == 0)
    return 0;
  v2 = v17;
  if (*(_QWORD *)(v17 + 16) && (v3 = sub_10007EF08(0x7365646F4E636F64, 0xE800000000000000), (v4 & 1) != 0))
  {
    sub_100069BD8(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v18);
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
  }
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v19 + 1))
  {
LABEL_24:
    sub_10000CB4C((uint64_t)&v18, &qword_100642730);
    return 0;
  }
  v5 = sub_10006922C((uint64_t *)&unk_100643CB0);
  if ((swift_dynamicCast(&v17, &v18, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
  {
    v6 = v17;
    if (v17 >> 62)
      goto LABEL_28;
    v7 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v17);
    while (v7)
    {
      v8 = 4;
      while (1)
      {
        v9 = v8 - 4;
        if ((v6 & 0xC000000000000001) == 0)
          break;
        v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v6);
        v11 = v8 - 3;
        if (__OFADD__(v9, 1))
          goto LABEL_27;
LABEL_19:
        if ((objc_msgSend(v10, "isTrashed") & 1) != 0
          || (objc_msgSend(v10, "isAnyParentTrashed") & 1) != 0
          || (v12 = objc_msgSend(v10, "fpfs_fpItem"),
              v13 = objc_msgSend(v12, "favoriteRank"),
              v13,
              v12,
              !v13))
        {
          swift_unknownObjectRelease(v10);
        }
        else
        {
          v14 = objc_msgSend(v10, "doc_isCollaborationInvitation");
          swift_unknownObjectRelease(v10);
          if ((v14 & 1) == 0)
          {
            swift_bridgeObjectRelease_n(v6, 2);
            return 1;
          }
        }
        ++v8;
        if (v11 == v7)
          goto LABEL_32;
      }
      v10 = *(void **)(v6 + 8 * v8);
      swift_unknownObjectRetain(v10);
      v11 = v8 - 3;
      if (!__OFADD__(v9, 1))
        goto LABEL_19;
LABEL_27:
      __break(1u);
LABEL_28:
      if (v6 < 0)
        v16 = v6;
      else
        v16 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    }
LABEL_32:
    swift_bridgeObjectRelease_n(v6, 2);
  }
  return 0;
}

_QWORD *sub_10011ABA0(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  int v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  result = _swiftEmptyArrayStorage;
  if (v4)
  {
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v4);
    if (v4 < 0)
    {
      __break(1u);
    }
    else
    {
      v6 = 0;
      v7 = a2 & 1;
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
          v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
        else
          v8 = *(id *)(a1 + 8 * v6 + 32);
        v9 = v8;
        ++v6;
        v10 = objc_msgSend(objc_allocWithZone((Class)NSItemProvider), "init");
        NSItemProvider.registerFPItem(_:supportsPickingFolders:disableExternalFolders:disableRealUTI:)(v9, 2, 1, v7);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        v12 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
        v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
        specialized ContiguousArray._endMutation()(v13);
      }
      while (v4 != v6);
      return _swiftEmptyArrayStorage;
    }
  }
  return result;
}

uint64_t sub_10011ACF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t i;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  id v22;
  Class isa;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  char isEscapingClosureAtFileLocation;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _BYTE v59[32];
  void **aBlock;
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  void *v63;
  void *v64;
  _QWORD *v65;

  v51 = a2;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v53 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v52 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for DispatchQoS.QoSClass(0);
  v49 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock = (void **)_swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v47 = a1;
    else
      v47 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    result = _CocoaArrayWrapper.endIndex.getter(v47);
    v11 = result;
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(a1);
  }
  v56 = v4;
  v57 = v3;
  v54 = v7;
  v55 = v6;
  if (v11)
  {
    if (v11 < 1)
      goto LABEL_26;
    for (i = 0; i != v11; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      else
        v15 = *(id *)(a1 + 8 * i + 32);
      v16 = v15;
      v17 = objc_msgSend(v15, "fileProviderItem");

      if (v17)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
        v20 = *(_QWORD *)(((unint64_t)aBlock & 0xFFFFFFFFFFFFFF8) + 0x10);
        v19 = *(_QWORD *)(((unint64_t)aBlock & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v20 >= v19 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v17);
        specialized Array._endMutation()(v14);
      }
    }
    swift_bridgeObjectRelease(a1);
    v21 = aBlock;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v21 = _swiftEmptyArrayStorage;
  }
  v22 = objc_msgSend((id)objc_opt_self(DOCManagedPermission), "defaultPermission");
  sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v24 = objc_msgSend(v22, "dataOwnerStateForItems:", isa);

  v25 = swift_allocObject(&unk_1005C8E70, 24, 7);
  *(_QWORD *)(v25 + 16) = _swiftEmptyArrayStorage;
  if (v24 == (id)1)
    v26 = 2;
  else
    v26 = v24 == (id)2;
  v27 = (void *)objc_opt_self(UIPasteboard);
  v28 = swift_allocObject(&unk_1005C8E98, 32, 7);
  *(_QWORD *)(v28 + 16) = v25 + 16;
  *(_QWORD *)(v28 + 24) = v21;
  v29 = swift_allocObject(&unk_1005C8EC0, 32, 7);
  *(_QWORD *)(v29 + 16) = sub_10012B8E0;
  *(_QWORD *)(v29 + 24) = v28;
  v64 = sub_10006657C;
  v65 = (_QWORD *)v29;
  aBlock = _NSConcreteStackBlock;
  v61 = 1107296256;
  v62 = sub_10006655C;
  v63 = &unk_1005C8ED8;
  v30 = _Block_copy(&aBlock);
  v31 = v65;
  swift_bridgeObjectRetain(v21);
  swift_retain();
  swift_release(v31);
  objc_msgSend(v27, "_performAsDataOwner:block:", v26, v30);
  _Block_release(v30);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v29, "", 102, 325, 79, 1);
  result = swift_release(v29);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    sub_10004F2F0(0, (unint64_t *)&qword_1006456D0, OS_dispatch_queue_ptr);
    v33 = v49;
    v34 = v50;
    (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v50);
    v35 = (void *)static OS_dispatch_queue.global(qos:)(v10);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
    sub_1000271D4(v51, (uint64_t)v59, &qword_100642730);
    v36 = (_QWORD *)swift_allocObject(&unk_1005C8F10, 72, 7);
    v36[2] = v24;
    v36[3] = v25;
    v36[4] = v21;
    sub_10007EBDC((uint64_t)v59, (uint64_t)(v36 + 5));
    v64 = sub_10012B95C;
    v65 = v36;
    aBlock = _NSConcreteStackBlock;
    v61 = 1107296256;
    v62 = sub_10004A82C;
    v63 = &unk_1005C8F28;
    v37 = _Block_copy(&aBlock);
    swift_retain();
    v38 = v52;
    static DispatchQoS.unspecified.getter(v39);
    v58 = _swiftEmptyArrayStorage;
    v40 = sub_10008BAAC();
    v41 = sub_10006922C((uint64_t *)&unk_100647540);
    v42 = sub_100062698((unint64_t *)&qword_100641270, (uint64_t *)&unk_100647540, (uint64_t)&protocol conformance descriptor for [A]);
    v43 = v55;
    v44 = v41;
    v45 = v57;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v58, v44, v42, v57, v40);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v38, v43, v37);
    _Block_release(v37);

    (*(void (**)(char *, uint64_t))(v56 + 8))(v43, v45);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v38, v54);
    v46 = v65;
    swift_release(v28);
    swift_release(v25);
    return swift_release(v46);
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

void sub_10011B288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  char isEscapingClosureAtFileLocation;
  id v14;
  uint64_t v15;
  void **v16;
  uint64_t i;
  id v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  Class isa;
  id v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void ***v53;
  _QWORD *v54;
  id v55;
  uint64_t v56;
  _QWORD v58[3];
  void **aBlock;
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  void *v62;
  void *v63;
  _QWORD *v64;

  v6 = (id)(a2 + 16);
  if (a1 == 1)
    v7 = 2;
  else
    v7 = a1 == 2;
  v8 = (void *)objc_opt_self(UIPasteboard);
  v9 = swift_allocObject(&unk_1005C8F60, 24, 7);
  *(_QWORD *)(v9 + 16) = v6;
  v10 = swift_allocObject(&unk_1005C8F88, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_10012B97C;
  *(_QWORD *)(v10 + 24) = v9;
  v63 = sub_10010DB64;
  v64 = (_QWORD *)v10;
  aBlock = _NSConcreteStackBlock;
  v60 = 1107296256;
  v61 = sub_10006655C;
  v62 = &unk_1005C8FA0;
  v11 = _Block_copy(&aBlock);
  v12 = v64;
  swift_retain();
  swift_release(v12);
  objc_msgSend(v8, "_performAsDataOwner:block:", v7, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 102, 331, 83, 1);
  swift_release(v10);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v14 = objc_msgSend(v8, "generalPasteboard");
  if ((objc_msgSend(v14, "respondsToSelector:", "_changeCountIgnoringPinningActivity") & 1) != 0)
    v6 = objc_msgSend(v14, "_changeCountIgnoringPinningActivity");
  else
    v6 = 0;

  aBlock = (void **)_swiftEmptyArrayStorage;
  if ((unint64_t)a3 >> 62)
  {
LABEL_23:
    if (a3 < 0)
      v24 = a3;
    else
      v24 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v15 = _CocoaArrayWrapper.endIndex.getter(v24);
    if (v15)
      goto LABEL_10;
LABEL_27:
    swift_bridgeObjectRelease(a3);
    v23 = (void **)_swiftEmptyArrayStorage;
    goto LABEL_28;
  }
  v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  if (!v15)
    goto LABEL_27;
LABEL_10:
  if (v15 < 1)
  {
    __break(1u);
    goto LABEL_46;
  }
  for (i = 0; i != v15; ++i)
  {
    if ((a3 & 0xC000000000000001) != 0)
      v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a3);
    else
      v18 = *(id *)(a3 + 8 * i + 32);
    v19 = v18;
    if ((objc_msgSend(v18, "isFolder") & 1) != 0
      || (objc_msgSend(v19, "isCloudItem") & 1) == 0
      || (v20 = objc_msgSend(v19, "isDownloaded"), (v20 & 1) != 0))
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      v21 = aBlock[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
      v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
      specialized ContiguousArray._endMutation()(v22);
    }
  }
  swift_bridgeObjectRelease(a3);
  v23 = aBlock;
LABEL_28:
  v25 = swift_allocObject(&unk_1005C8FD8, 32, 7);
  *(_QWORD *)(v25 + 16) = a3;
  *(_QWORD *)(v25 + 24) = a1;
  if (((unint64_t)v23 & 0x8000000000000000) != 0 || ((unint64_t)v23 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(a3);
    swift_retain();
    v36 = _CocoaArrayWrapper.endIndex.getter(v35);
    swift_release(v23);
    if (v36 > 0)
      goto LABEL_31;
  }
  else
  {
    v26 = (uint64_t)v23[2];
    swift_bridgeObjectRetain(a3);
    if (v26 > 0)
    {
LABEL_31:
      v27 = objc_allocWithZone((Class)FPDownloadOperation);
      sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release(v23);
      v29 = objc_msgSend(v27, "initWithItems:", isa);

      v30 = (_QWORD *)swift_allocObject(&unk_1005C9000, 40, 7);
      v30[2] = v6;
      v30[3] = sub_10012B9B8;
      v30[4] = v25;
      v63 = sub_10012B9E4;
      v64 = v30;
      aBlock = _NSConcreteStackBlock;
      v60 = 1107296256;
      v61 = sub_10004A82C;
      v62 = &unk_1005C9018;
      v31 = _Block_copy(&aBlock);
      v32 = v64;
      v33 = v29;
      swift_retain();
      sub_10008BA00((uint64_t)sub_10012B9E4, (uint64_t)v30);
      swift_release(v32);
      objc_msgSend(v33, "setCompletionBlock:", v31);
      _Block_release(v31);

      swift_release(v30);
      v34 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
      objc_msgSend(v34, "scheduleAction:", v33);

      goto LABEL_34;
    }
  }
  swift_release(v23);
  sub_10011BA3C(a3, a1);
LABEL_34:
  sub_1000271D4(a4, (uint64_t)&aBlock, &qword_100642730);
  if (!v62)
  {
    swift_release(v25);
    sub_10000CB4C((uint64_t)&aBlock, &qword_100642730);
    swift_release(v9);
    return;
  }
  v37 = type metadata accessor for DOCActionContext();
  if ((swift_dynamicCast(v58, &aBlock, (char *)&type metadata for Any + 8, v37, 6) & 1) == 0)
  {
    swift_release(v9);
    swift_release(v25);
    return;
  }
  v38 = (char *)v58[0];
  v39 = *(void **)(v58[0] + OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController);
  v40 = type metadata accessor for DOCItemCollectionViewController(0);
  v41 = swift_dynamicCastClass(v39, v40);
  if (!v41)
  {
    swift_release(v9);
    swift_release(v25);

    return;
  }
  v42 = v41;
  v56 = v9;
  v43 = *(void **)&v38[OBJC_IVAR____TtC5Files16DOCActionContext_configuration];
  swift_bridgeObjectRetain(a3);
  v44 = v39;
  v45 = v43;
  v46 = DOCAnalyticsActionEvent.FileProvider.init(items:)(a3);
  v47 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v48 = objc_msgSend(v47, "bundleIdentifier");

  if (v48)
  {
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v51 = v50;

  }
  else
  {
    v49 = 0;
    v51 = 0;
  }
  v52 = DOCAnalyticsActionEvent.Source.init(sourceIdentifier:)(objc_msgSend(*(id *)(v42 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration), "identifier"));
  v53 = (void ***)(v42 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode);
  swift_beginAccess(v53, v58, 0, 0);
  v16 = *v53;
  if ((unint64_t)*v53 < 3)
  {
    v54 = DOCAnalyticsActionEvent.init(actionType:configuration:provider:bundleIdentifier:source:viewMode:)(&aBlock, 0, v45, v46, v49, v51, v52, ((_DWORD)v16 + 1));
    v55 = *(id *)DOCAnalyticsManager.shared.unsafeMutableAddressor(v54);
    DOCAnalyticsManager.sendActionEvent(_:)(&aBlock);

    sub_1000B3334((uint64_t)&aBlock);
    swift_release(v56);
    swift_release(v25);

    return;
  }
LABEL_46:
  aBlock = v16;
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DOCDisplayMode, &aBlock, &type metadata for DOCDisplayMode, &type metadata for Int);
  __break(1u);
}

void sub_10011B980(uint64_t *a1)
{
  id v2;
  uint64_t v3;
  Class isa;
  _BYTE v5[24];

  v2 = objc_msgSend((id)objc_opt_self(UIPasteboard), "generalPasteboard");
  swift_beginAccess(a1, v5, 0, 0);
  v3 = *a1;
  sub_10004F2F0(0, (unint64_t *)&unk_100643CD0, NSItemProvider_ptr);
  swift_bridgeObjectRetain(v3);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  objc_msgSend(v2, "setItemProviders:", isa);

}

uint64_t sub_10011BA3C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v12[5];
  uint64_t v13;

  v3 = sub_10011ABA0(a1, 0);
  if (a2 == 1)
    v4 = 2;
  else
    v4 = a2 == 2;
  v5 = (void *)objc_opt_self(UIPasteboard);
  v6 = swift_allocObject(&unk_1005C9050, 24, 7);
  *(_QWORD *)(v6 + 16) = v3;
  v7 = swift_allocObject(&unk_1005C9078, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_10012B9F0;
  *(_QWORD *)(v7 + 24) = v6;
  v12[4] = sub_10010DB64;
  v13 = v7;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_10006655C;
  v12[3] = &unk_1005C9090;
  v8 = _Block_copy(v12);
  v9 = v13;
  swift_retain();
  swift_release(v9);
  objc_msgSend(v5, "_performAsDataOwner:block:", v4, v8);
  _Block_release(v8);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v7, "", 102, 350, 87, 1);
  swift_release(v6);
  result = swift_release(v7);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

void sub_10011BB94()
{
  id v0;
  Class isa;

  v0 = objc_msgSend((id)objc_opt_self(UIPasteboard), "generalPasteboard");
  sub_10004F2F0(0, (unint64_t *)&unk_100643CD0, NSItemProvider_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v0, "setItemProviders:", isa);

}

void sub_10011BC20(id a1, void (*a2)(void))
{
  id v4;
  id v5;

  v4 = objc_msgSend((id)objc_opt_self(UIPasteboard), "generalPasteboard");
  if ((objc_msgSend(v4, "respondsToSelector:", "_changeCountIgnoringPinningActivity") & 1) != 0)
  {
    v5 = objc_msgSend(v4, "_changeCountIgnoringPinningActivity");

    if (v5 != a1)
      return;
    goto LABEL_3;
  }

  if (!a1)
LABEL_3:
    a2();
}

BOOL sub_10011BCBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  sub_1000271D4(a1, (uint64_t)&v11, &qword_100642730);
  if (!*((_QWORD *)&v12 + 1))
    goto LABEL_12;
  v1 = sub_10006922C((uint64_t *)&unk_1006444E0);
  if ((swift_dynamicCast(&v10, &v11, (char *)&type metadata for Any + 8, v1, 6) & 1) == 0)
    return 0;
  v2 = v10;
  if (*(_QWORD *)(v10 + 16) && (v3 = sub_10007EF08(0x7365646F4E636F64, 0xE800000000000000), (v4 & 1) != 0))
  {
    sub_100069BD8(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v11);
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
  }
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v12 + 1))
  {
LABEL_12:
    sub_10000CB4C((uint64_t)&v11, &qword_100642730);
    return 0;
  }
  v5 = sub_10006922C((uint64_t *)&unk_100643CB0);
  if ((swift_dynamicCast(&v10, &v11, (char *)&type metadata for Any + 8, v5, 6) & 1) == 0)
    return 0;
  v6 = v10;
  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0)
      v9 = v10;
    else
      v9 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v7 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v7 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v6);
  return (unint64_t)(v7 - 1) < 0x3E8;
}

void sub_10011BE0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t All;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  _BYTE v14[32];

  sub_100069BD8(a2, (uint64_t)v14);
  v5 = type metadata accessor for DOCActionContext();
  if ((swift_dynamicCast(&v13, v14, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
  {
    v6 = v13;
    v7 = sub_10006922C((uint64_t *)&unk_1006424B0);
    All = Array<A>.fpfs_syncFetchAllFPItems()(a1, v7);
    if (All)
    {
      v9 = All;
      v10 = swift_allocObject(&unk_1005C86C8, 32, 7);
      *(_QWORD *)(v10 + 16) = v9;
      *(_QWORD *)(v10 + 24) = v6;
      if (a3)
      {
        swift_unknownObjectRetain_n(a3, 2);
        v11 = v6;
        swift_bridgeObjectRetain(v9);
        sub_10011BF44(a3, v9, v11);
        swift_unknownObjectRelease_n(a3, 2);
        swift_bridgeObjectRelease(v9);
        swift_release(v10);

      }
      else
      {
        v12 = v6;
        sub_100125028(a1, (uint64_t)sub_10012B77C, v10);
        swift_release(v10);

      }
    }
    else
    {

    }
  }
}

void sub_10011BF44(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t ObjectType;
  void *v18;
  void *v19;
  Class isa;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  unint64_t v27;
  unint64_t v28;
  void **v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  uint64_t v38;
  id v39;
  char *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  char *v46;
  id v47;
  NSString v48;
  Class v49;
  id v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  _QWORD *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  char v75[24];
  _QWORD v76[5];

  v74 = type metadata accessor for DOCOperationItem(0);
  v6 = *(_QWORD *)(v74 - 8);
  v7 = __chkstk_darwin(v74);
  v9 = (void **)((char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)&v69 - v10);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    ObjectType = swift_getObjectType(a1, v14);
    v18 = (void *)DOCNode.fpfs_syncFetchFPItem()(ObjectType);
    if (v18)
    {
      v73 = v18;
      v19 = (void *)objc_opt_self(DOCItemBookmark);
      sub_10004F2F0(0, (unint64_t *)&qword_1006419B0, FPItem_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      LODWORD(v19) = objc_msgSend(v19, "isAnyFPItemAFault:", isa);

      if ((_DWORD)v19 && (DOCIsNetworkReachable(v21) & 1) == 0)
      {
        DOCAlertUserTheNetworkIsNotReachable(*(_QWORD *)&a3[OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController]);

        return;
      }
      v70 = a3;
      v71 = v16;
      v72 = v13;
      if ((unint64_t)a2 >> 62)
      {
        if (a2 < 0)
          v68 = a2;
        else
          v68 = a2 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a2);
        v22 = _CocoaArrayWrapper.endIndex.getter(v68);
        swift_bridgeObjectRelease(a2);
      }
      else
      {
        v22 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v23 = _swiftEmptyArrayStorage;
      if (v22)
      {
        v76[0] = _swiftEmptyArrayStorage;
        sub_100155054(0, v22 & ~(v22 >> 63), 0);
        if (v22 < 0)
        {
          __break(1u);
          goto LABEL_34;
        }
        v69 = v12;
        v23 = (_QWORD *)v76[0];
        v25 = v74;
        if ((a2 & 0xC000000000000001) != 0)
        {
          for (i = 0; i != v22; ++i)
          {
            *v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a2);
            swift_storeEnumTagMultiPayload(v11, v25, 1);
            v76[0] = v23;
            v28 = v23[2];
            v27 = v23[3];
            if (v28 >= v27 >> 1)
            {
              sub_100155054(v27 > 1, v28 + 1, 1);
              v25 = v74;
              v23 = (_QWORD *)v76[0];
            }
            v23[2] = v28 + 1;
            sub_1000E2AB4((uint64_t)v11, (uint64_t)v23+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v28);
          }
        }
        else
        {
          v29 = (void **)(a2 + 32);
          do
          {
            v30 = a2;
            v31 = *v29;
            *v9 = *v29;
            swift_storeEnumTagMultiPayload(v9, v25, 1);
            v76[0] = v23;
            v33 = v23[2];
            v32 = v23[3];
            v34 = v31;
            if (v33 >= v32 >> 1)
            {
              sub_100155054(v32 > 1, v33 + 1, 1);
              v23 = (_QWORD *)v76[0];
            }
            v23[2] = v33 + 1;
            sub_1000E2AB4((uint64_t)v9, (uint64_t)v23+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v33);
            ++v29;
            --v22;
            a2 = v30;
            v25 = v74;
          }
          while (v22);
        }
        v12 = v69;
      }
      v35 = objc_msgSend((id)objc_opt_self(FPItemManager), "defaultManager");
      v36 = v70;
      v37 = *(void **)&v70[OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController];
      v38 = swift_allocObject(&unk_1005C8808, 24, 7);
      *(_QWORD *)(v38 + 16) = v36;
      v39 = v73;
      v40 = v36;
      sub_100477E1C(2, (uint64_t)v23, (uint64_t)v73, 1, 2, 0, (uint64_t)v37, (uint64_t)sub_10012B7AC, v38);

      swift_release(v38);
      swift_bridgeObjectRelease(v23);
      v41 = *(void **)&v40[OBJC_IVAR____TtC5Files16DOCActionContext_configuration];
      v42 = objc_msgSend(v41, "hostIdentifier");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v44 = v43;

      v45 = v39;
      v46 = v71;
      Date.init()(v45);
      v47 = objc_allocWithZone((Class)DOCHotFolderEvent);
      v48 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v44);
      v49 = Date._bridgeToObjectiveC()().super.isa;
      v50 = objc_msgSend(v47, "initWithAppBundleIdentifier:folderItem:type:lastUsedDate:frecency:", v48, v45, 2, v49, 1.0);

      v51 = (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v46, v12);
      v52 = *(id *)DOCSmartFolderManager.sharedManager.unsafeMutableAddressor(v51);
      DOCSmartFolderManager.register(event:)(v50);

      v53 = type metadata accessor for DOCItemCollectionViewController(0);
      v54 = swift_dynamicCastClass(v37, v53);
      if (!v54)
      {

        return;
      }
      v55 = v54;
      swift_bridgeObjectRetain(a2);
      v56 = v37;
      v57 = v41;
      v58 = DOCAnalyticsActionEvent.FileProvider.init(items:)(a2);
      v59 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v60 = objc_msgSend(v59, "bundleIdentifier");

      if (v60)
      {
        v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
        v63 = v62;

      }
      else
      {
        v61 = 0;
        v63 = 0;
      }
      v64 = DOCAnalyticsActionEvent.Source.init(sourceIdentifier:)(objc_msgSend(*(id *)(v55 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_itemCollectionConfiguration), "identifier", v69));
      v65 = (uint64_t *)(v55 + OBJC_IVAR____TtC5Files31DOCItemCollectionViewController_displayMode);
      swift_beginAccess(v65, v75, 0, 0);
      v24 = *v65;
      if ((unint64_t)*v65 < 3)
      {
        v66 = DOCAnalyticsActionEvent.init(actionType:configuration:provider:bundleIdentifier:source:viewMode:)(v76, 3, v57, v58, v61, v63, v64, (v24 + 1));
        v67 = *(id *)DOCAnalyticsManager.shared.unsafeMutableAddressor(v66);
        DOCAnalyticsManager.sendActionEvent(_:)(v76);

        sub_1000B3334((uint64_t)v76);
        return;
      }
LABEL_34:
      v76[0] = v24;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for DOCDisplayMode, v76, &type metadata for DOCDisplayMode, &type metadata for Int);
      __break(1u);
    }
  }
}

uint64_t sub_10011C594(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;

  v4 = sub_10006922C(&qword_100643470);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return result;
  v8 = *(void **)(a2 + OBJC_IVAR____TtC5Files16DOCActionContext_presentingViewController);
  v9 = type metadata accessor for DOCItemCollectionViewController(0);
  result = swift_dynamicCastClass(v8, v9);
  if (!result)
    return result;
  v10 = (char *)result;
  if (!((unint64_t)a1 >> 62))
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v12 = v8;
    result = swift_bridgeObjectRetain(a1);
    if (v11)
      goto LABEL_5;
LABEL_17:

    return swift_bridgeObjectRelease(a1);
  }
  if (a1 >= 0)
    v19 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v19 = a1;
  v20 = v8;
  swift_bridgeObjectRetain(a1);
  result = _CocoaArrayWrapper.endIndex.getter(v19);
  v11 = result;
  if (!result)
    goto LABEL_17;
LABEL_5:
  if (v11 < 1)
  {
    __break(1u);
  }
  else
  {
    v13 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a1);
      else
        v14 = *(id *)(a1 + 8 * v13 + 32);
      v15 = v14;
      ++v13;
      v16 = type metadata accessor for URL(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v7, 1, 1, v16);
      v17 = v8;
      v18 = v15;
      sub_100125B6C(v18, (uint64_t)v7, v10, v10, v18);

      sub_10000CB4C((uint64_t)v7, &qword_100643470);
    }
    while (v11 != v13);

    return swift_bridgeObjectRelease(a1);
  }
  return result;
}

uint64_t sub_10011C768(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;

  sub_1000271D4(a1, (uint64_t)&v16, &qword_100642730);
  if (!*((_QWORD *)&v17 + 1))
    goto LABEL_23;
  v1 = sub_10006922C((uint64_t *)&unk_1006444E0);
  if ((swift_dynamicCast(&v15, &v16, (char *)&type metadata for Any + 8, v1, 6) & 1) == 0)
    return 0;
  v2 = v15;
  if (*(_QWORD *)(v15 + 16) && (v3 = sub_10007EF08(0x7365646F4E636F64, 0xE800000000000000), (v4 & 1) != 0))
  {
    sub_100069BD8(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v16);
  }
  else
  {
    v16 = 0u;
    v17 = 0u;
  }
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v17 + 1))
  {
LABEL_23:
    sub_10000CB4C((uint64_t)&v16, &qword_100642730);
    return 0;
  }
  v5 = sub_10006922C((uint64_t *)&unk_100643CB0);
  if ((swift_dynamicCast(&v15, &v16, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
  {
    v6 = v15;
    if (v15 >> 62)
      goto LABEL_27;
    v7 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v15);
    while (v7)
    {
      v8 = 4;
      while (1)
      {
        v9 = v8 - 4;
        if ((v6 & 0xC000000000000001) == 0)
          break;
        v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v6);
        v11 = v8 - 3;
        if (__OFADD__(v9, 1))
          goto LABEL_26;
LABEL_19:
        if ((objc_msgSend(v10, "isTrashed") & 1) != 0
          || (objc_msgSend(v10, "isAnyParentTrashed") & 1) != 0)
        {
          swift_unknownObjectRelease(v10);
        }
        else
        {
          v12 = objc_msgSend(v10, "isAppContainer");
          swift_unknownObjectRelease(v10);
          if ((v12 & 1) == 0)
          {
            swift_bridgeObjectRelease_n(v6, 2);
            return 1;
          }
        }
        ++v8;
        if (v11 == v7)
          goto LABEL_31;
      }
      v10 = *(void **)(v6 + 8 * v8);
      swift_unknownObjectRetain(v10);
      v11 = v8 - 3;
      if (!__OFADD__(v9, 1))
        goto LABEL_19;
LABEL_26:
      __break(1u);
LABEL_27:
      if (v6 < 0)
        v14 = v6;
      else
        v14 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v7 = _CocoaArrayWrapper.endIndex.getter(v14);
    }
LABEL_31:
    swift_bridgeObjectRelease_n(v6, 2);
  }
  return 0;
}

