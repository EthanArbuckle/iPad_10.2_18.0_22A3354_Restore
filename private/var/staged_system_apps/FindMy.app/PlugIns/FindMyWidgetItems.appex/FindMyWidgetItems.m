uint64_t sub_100003CB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t OpaqueTypeConformance2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;

  v2 = sub_100003EA4(&qword_100055378);
  v3 = sub_100003EE4(&qword_100055380);
  v4 = sub_100003EE4(&qword_100055388);
  v5 = sub_100003EE4(&qword_100055390);
  v6 = sub_100003EE4(&qword_100055398);
  v7 = sub_100003F28();
  v8 = sub_100003F74();
  v14 = v6;
  v15 = &type metadata for String;
  v16 = v7;
  v17 = v8;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v14 = v5;
  v15 = (void *)OpaqueTypeConformance2;
  v10 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v14 = v4;
  v15 = &type metadata for String;
  v16 = v10;
  v17 = v8;
  v11 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v14 = v3;
  v15 = (void *)v11;
  v12 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of WidgetConfiguration.visibilityConfigurableByInternalSettings(visibleByDefault:)>>, 1);
  return WidgetConfiguration._containerBackgroundRemovable(_:)(a1, v2, v12);
}

uint64_t sub_100003DE4(__int128 *a1)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  if (!sub_10003FAD0(2, 17, 0, 0))
    return v2;
  v3 = v2;
  return swift_getOpaqueTypeMetadata2(0, &v3, &opaque type descriptor for <<opaque return type of WidgetConfiguration._containerBackgroundRemovable(_:)>>, 0);
}

uint64_t sub_100003E48(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v2 = *a1;
  v1 = a1[1];
  if (sub_10003FAD0(2, 17, 0, 0))
  {
    v4[0] = v2;
    v4[1] = v1;
    return swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of WidgetConfiguration._containerBackgroundRemovable(_:)>>, 1);
  }
  return v1;
}

uint64_t sub_100003EA4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100003EE4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100003F28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000553A0;
  if (!qword_1000553A0)
  {
    v1 = sub_100003EE4(&qword_100055398);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentConfiguration<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000553A0);
  }
  return result;
}

unint64_t sub_100003F74()
{
  unint64_t result;

  result = qword_1000553A8;
  if (!qword_1000553A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000553A8);
  }
  return result;
}

uint64_t variable initialization expression of ItemSelectorIntentResponse.code()
{
  return 0;
}

void sub_100003FC0(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void sub_100003FCC(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_100003FD4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL sub_100003FE8(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_100004018(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_10000402C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

uint64_t sub_100004040(uint64_t a1, uint64_t a2)
{
  return sub_1000043E0(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10000404C(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_1000040C0(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_10000413C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

_QWORD *sub_10000417C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

__n128 sub_100004188(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100004198(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000041B8(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
  sub_100004230(a1, &qword_1000553B0, (uint64_t)&unk_1000518F8);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_100004230(a1, &qword_1000553B8, (uint64_t)&unk_100051978);
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_100004230(a1, &qword_1000553C0, (uint64_t)&unk_1000519F8);
}

void type metadata accessor for TextStyle(uint64_t a1)
{
  sub_100004230(a1, &qword_1000553C8, (uint64_t)&unk_100051A20);
}

void sub_100004230(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100004274@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_1000042B8@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000042E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100004394(&qword_1000553E8, (uint64_t)&unk_1000426C4);
  v3 = sub_100004394(&qword_1000553F0, (uint64_t)&unk_100042664);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000434C()
{
  return sub_100004394(&qword_1000553D0, (uint64_t)&unk_100042628);
}

uint64_t sub_100004370()
{
  return sub_100004394(&qword_1000553D8, (uint64_t)&unk_1000425FC);
}

uint64_t sub_100004394(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for TextStyle(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000043D4(uint64_t a1, uint64_t a2)
{
  return sub_1000043E0(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000043E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10000441C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10000445C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_1000044CC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100004554()
{
  return sub_100004394(&qword_1000553E0, (uint64_t)&unk_100042698);
}

double sub_100004584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v0 = type metadata accessor for Color.RGBColorSpace(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin();
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static Color.white.getter(v2);
  v6 = enum case for Color.RGBColorSpace.sRGB(_:);
  v7 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v7(v4, enum case for Color.RGBColorSpace.sRGB(_:), v0);
  v8 = Color.init(_:red:green:blue:opacity:)(v4, 1.0, 1.0, 1.0, 1.0);
  v7(v4, v6, v0);
  v9 = Color.init(_:red:green:blue:opacity:)(v4, 0.0, 0.0, 0.0, 0.15);
  v7(v4, v6, v0);
  v10 = Color.init(_:red:green:blue:opacity:)(v4, 0.56, 0.56, 0.58, 1.0);
  v7(v4, v6, v0);
  v11 = Color.init(_:red:green:blue:opacity:)(v4, 0.0, 0.0, 0.0, 0.4);
  xmmword_100058660 = xmmword_100042770;
  qword_100058670 = 0x4024000000000000;
  qword_100058678 = v5;
  qword_100058680 = v8;
  qword_100058688 = v9;
  result = 0.0;
  xmmword_100058690 = xmmword_100042780;
  qword_1000586A0 = 0x4000000000000000;
  qword_1000586A8 = v10;
  qword_1000586B0 = v11;
  unk_1000586B8 = xmmword_100042780;
  qword_1000586C8 = 0x4000000000000000;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for BadgeViewStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for BadgeViewStyle(_QWORD *a1)
{
  swift_release(a1[3]);
  swift_release(a1[4]);
  swift_release(a1[5]);
  swift_release(a1[9]);
  return swift_release(a1[10]);
}

uint64_t initializeWithCopy for BadgeViewStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

_QWORD *assignWithCopy for BadgeViewStyle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = a2[3];
  v5 = a1[3];
  a1[3] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_retain(v8);
  swift_release(v9);
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  v10 = a2[9];
  v11 = a1[9];
  a1[9] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[10];
  v13 = a1[10];
  a1[10] = v12;
  swift_retain(v12);
  swift_release(v13);
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  return a1;
}

__n128 initializeWithTake for BadgeViewStyle(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for BadgeViewStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(*(_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v5);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release(*(_QWORD *)(a1 + 72));
  v6 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release(v6);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for BadgeViewStyle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BadgeViewStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BadgeViewStyle()
{
  return &type metadata for BadgeViewStyle;
}

uint64_t sub_100004A64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v13 = a1;
  if (!((unint64_t)a2 >> 62))
  {
    v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
    return 0;
  }
LABEL_13:
  if (a2 < 0)
    v10 = a2;
  else
    v10 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v3 = _CocoaArrayWrapper.endIndex.getter(v10);
  swift_bridgeObjectRelease(a2);
  if (!v3)
    return 0;
LABEL_3:
  v4 = type metadata accessor for FMIPManager(0);
  for (i = 0; ; ++i)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a2);
    }
    else
    {
      v6 = *(_QWORD *)(a2 + 8 * i + 32);
      swift_retain(v6);
    }
    v12 = v6;
    v7 = sub_10000EB1C(&qword_100055618, (uint64_t (*)(uint64_t))&type metadata accessor for FMIPManager, (uint64_t)&protocol conformance descriptor for FMIPManager);
    v8 = dispatch thunk of static Equatable.== infix(_:_:)(&v12, &v13, v4, v7);
    swift_release(v6);
    if ((v8 & 1) != 0)
      break;
    v9 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    if (v9 == v3)
      return 0;
  }
  return i;
}

uint64_t sub_100004BAC(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  char v13;

  v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    v3 = sub_10000B344(v3);
    *v1 = v3;
  }
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 8 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      v11 = memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(_QWORD *)(v5 + 16) = v7;
      specialized Array._endMutation()(v11);
      return v10;
    }
  }
  v13 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v13, 1046, 0);
  __break(1u);
  return result;
}

Swift::String *itemsWidgetBundleId.unsafeMutableAddressor()
{
  return &itemsWidgetBundleId;
}

void sub_100004C98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 72);

  swift_bridgeObjectRelease(v1);
  v2 = *(_QWORD *)(v0 + 104);

  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));

}

uint64_t sub_100004CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v2 = type metadata accessor for Logger(0);
  sub_10000CF34(v2, (uint64_t)qword_1000586D0);
  v3 = swift_retain(v0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = *(_QWORD *)(v1 + 16);
    v9 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain(v9);
    v13 = sub_100011770(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v6 + 4, v6 + 12);
    swift_release(v1);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "🥑 ItemsDataService%s: deinit", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release(v1);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 48));
  v10 = *(_QWORD *)(v1 + 72);

  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(v1 + 104);

  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 136));

  return v1;
}

uint64_t sub_100004EF0()
{
  uint64_t v0;

  sub_100004CEC();
  return swift_deallocClassInstance(v0, 152, 7);
}

uint64_t type metadata accessor for ItemsDataService()
{
  return objc_opt_self(_TtC17FindMyWidgetItems16ItemsDataService);
}

uint64_t sub_100004F30()
{
  return 0x736D657449;
}

uint64_t sub_100004F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  NSString v22;
  id v23;
  Class isa;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  void *object;
  Swift::String v31;
  void *v32;
  void *v33;
  Swift::String v34;
  void *v35;
  uint64_t countAndFlagsBits;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  Swift::String v43;
  uint64_t v45;
  uint64_t v46;
  Swift::String v47;
  uint64_t v48;
  unint64_t v49;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003EA4(&qword_1000555F8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = 0;
  v49 = 0xE000000000000000;
  FMIPItem.location.getter(v6);
  v9 = type metadata accessor for FMIPLocation(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    v11 = sub_10000EB5C((uint64_t)v8, &qword_1000555F8);
  }
  else
  {
    v12 = FMIPLocation.location.getter();
    v46 = v0;
    v13 = (void *)v12;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v14 = sub_100003EA4(&qword_100055638);
    v15 = swift_allocObject(v14, 152, 7);
    *(_OWORD *)(v15 + 16) = xmmword_1000427E0;
    objc_msgSend(v13, "coordinate");
    *(_QWORD *)(v15 + 56) = &type metadata for Double;
    *(_QWORD *)(v15 + 64) = &protocol witness table for Double;
    *(_QWORD *)(v15 + 32) = v16;
    objc_msgSend(v13, "coordinate");
    *(_QWORD *)(v15 + 96) = &type metadata for Double;
    *(_QWORD *)(v15 + 104) = &protocol witness table for Double;
    *(_QWORD *)(v15 + 72) = v17;
    *(_QWORD *)(v15 + 136) = &type metadata for String;
    *(_QWORD *)(v15 + 144) = sub_10000EB9C();
    *(_QWORD *)(v15 + 112) = 0;
    *(_QWORD *)(v15 + 120) = 0xE000000000000000;
    v18 = String.init(format:_:)(0x1000000000000017, 0x8000000100041830, v15);
    v20 = v19;
    v21 = *(void **)(v46 + 144);
    v22 = String._bridgeToObjectiveC()();
    objc_msgSend(v21, "setDateFormat:", v22);

    v23 = objc_msgSend(v13, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v25 = objc_msgSend(v21, "stringFromDate:", isa);

    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

    v47._countAndFlagsBits = v18;
    v47._object = v20;
    swift_bridgeObjectRetain(v20);
    v29._countAndFlagsBits = v26;
    v29._object = v28;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v20);
    object = v47._object;
    String.append(_:)(v47);

    swift_bridgeObjectRelease(object);
  }
  v31._countAndFlagsBits = FMIPItem.name.getter(v11);
  v32 = v31._object;
  v47._countAndFlagsBits = 34;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v32);
  v33 = v47._object;
  swift_bridgeObjectRetain(v47._object);
  v34._countAndFlagsBits = 34;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(v33);
  countAndFlagsBits = v47._countAndFlagsBits;
  v35 = v47._object;
  v37 = v48;
  v38 = v49;
  v39 = HIBYTE(v49) & 0xF;
  if ((v49 & 0x2000000000000000) == 0)
    v39 = v48 & 0xFFFFFFFFFFFFLL;
  if (v39)
  {
    v47._countAndFlagsBits = 8236;
    v47._object = (void *)0xE200000000000000;
    v40 = v49;
    String.append(_:)(*(Swift::String *)&v37);
    swift_bridgeObjectRelease(v38);
    v42 = v47._countAndFlagsBits;
    v41 = v47._object;
  }
  else
  {
    swift_bridgeObjectRelease(v49);
    v42 = 0;
    v41 = (void *)0xE000000000000000;
  }
  v47._countAndFlagsBits = countAndFlagsBits;
  v47._object = v35;
  swift_bridgeObjectRetain(v35);
  v43._countAndFlagsBits = v42;
  v43._object = v41;
  String.append(_:)(v43);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v41);
  return v47._countAndFlagsBits;
}

uint64_t sub_1000052E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100005300(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t result;
  double v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  dispatch_queue_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  _QWORD *v86;
  uint64_t v87;
  void **v88;
  char *v89;
  uint64_t v90;
  dispatch_queue_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  void **aBlock;
  uint64_t v107;
  uint64_t (*v108)(uint64_t);
  void *v109;
  uint64_t (*v110)();
  _QWORD *v111;

  v5 = v4;
  v103 = a3;
  v104 = a1;
  v8 = type metadata accessor for Locale(0);
  __chkstk_darwin(v8);
  v100 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FMIPManagerSubsystem(0);
  __chkstk_darwin(v10);
  v99 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchTimeInterval(0);
  v96 = *(_QWORD *)(v12 - 8);
  v97 = v12;
  __chkstk_darwin(v12);
  v95 = (uint64_t *)((char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v98 = type metadata accessor for DispatchTime(0);
  v94 = *(_QWORD *)(v98 - 8);
  v14 = __chkstk_darwin(v98);
  v92 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v93 = (char *)&v87 - v16;
  v90 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v90);
  v91 = (dispatch_queue_t)((char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v22 = type metadata accessor for Logger(0);
  sub_10000CF34(v22, (uint64_t)qword_1000586D0);
  swift_bridgeObjectRetain_n(a2, 2);
  v23 = swift_retain_n(v4, 2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc(22, -1);
    v88 = (void **)swift_slowAlloc(64, -1);
    aBlock = v88;
    *(_DWORD *)v26 = 136315394;
    v101 = v19;
    v89 = v21;
    v28 = *(_QWORD *)(v5 + 16);
    v27 = *(_QWORD *)(v5 + 24);
    swift_bridgeObjectRetain(v27);
    v105 = (_QWORD *)sub_100011770(v28, v27, (uint64_t *)&aBlock);
    v102 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &aBlock, v26 + 4, v26 + 12);
    swift_release_n(v5, 2);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v26 + 12) = 2080;
    if (a2)
      v29 = v104;
    else
      v29 = 7104878;
    if (a2)
      v30 = a2;
    else
      v30 = 0xE300000000000000;
    swift_bridgeObjectRetain(a2);
    v105 = (_QWORD *)sub_100011770(v29, v30, (uint64_t *)&aBlock);
    v18 = v102;
    v21 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &aBlock, v26 + 14, v26 + 22);
    swift_bridgeObjectRelease_n(a2, 2);
    v31 = v30;
    v19 = v101;
    swift_bridgeObjectRelease(v31);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "🥑 ItemsDataService%s: fetching w/location item for %s…", (uint8_t *)v26, 0x16u);
    v32 = v88;
    swift_arrayDestroy(v88, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    swift_release_n(v5, 2);
  }
  v102 = swift_allocObject(&unk_100051E88, 17, 7);
  *(_BYTE *)(v102 + 16) = 1;
  v33 = swift_allocObject(&unk_100051E88, 17, 7);
  *(_BYTE *)(v33 + 16) = 0;
  v34 = Date.init()(v33);
  v35 = Date.timeIntervalSinceReferenceDate.getter(v34);
  result = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v37 = fmax(*(double *)(v5 + 32) - v35 + 28.0 + -1.0, 1.0);
  if ((~*(_QWORD *)&v37 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v37 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v37 >= 9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v38 = (uint64_t)v37;
  v39 = (_QWORD *)swift_allocObject(&unk_100051EB0, 72, 7);
  v39[2] = v33;
  v39[3] = v5;
  v40 = v104;
  v39[4] = v38;
  v39[5] = v40;
  v41 = v103;
  v39[6] = a2;
  v39[7] = v41;
  v42 = a4;
  v39[8] = a4;
  v110 = sub_10000E990;
  v111 = v39;
  v43 = v5;
  aBlock = _NSConcreteStackBlock;
  v107 = 1107296256;
  v108 = sub_1000125A8;
  v109 = &unk_100051EC8;
  v44 = a2;
  v45 = _Block_copy(&aBlock);
  v105 = _swiftEmptyArrayStorage;
  v46 = sub_10000EB1C((unint64_t *)&qword_1000555E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v47 = v33;
  v101 = v33;
  v48 = v46;
  swift_retain(v43);
  swift_bridgeObjectRetain(v44);
  swift_retain(v47);
  swift_retain(a4);
  v49 = sub_100003EA4(&qword_1000555E8);
  v50 = sub_10000DA08();
  v51 = v91;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v105, v49, v50, v90, v48);
  v52 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
  v53 = DispatchWorkItem.init(flags:block:)(v51, v45);
  v54 = swift_release(v111);
  v91 = *(dispatch_queue_t *)(v43 + 40);
  v55 = v92;
  static DispatchTime.now()(v54);
  v57 = v95;
  v56 = v96;
  *v95 = v38;
  v58 = v97;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v56 + 104))(v57, enum case for DispatchTimeInterval.seconds(_:), v97);
  v59 = v93;
  + infix(_:_:)(v55, v57);
  (*(void (**)(uint64_t *, uint64_t))(v56 + 8))(v57, v58);
  v60 = *(void (**)(char *, uint64_t))(v94 + 8);
  v61 = v98;
  v60(v55, v98);
  v62 = v53;
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v59, v53);
  v60(v59, v61);
  v63 = (_QWORD *)swift_allocObject(&unk_100051F00, 48, 7);
  v64 = v102;
  v63[2] = v102;
  v63[3] = v43;
  v65 = v104;
  v63[4] = v104;
  v63[5] = v44;
  v66 = (_QWORD *)swift_allocObject(&unk_100051F28, 80, 7);
  v66[2] = v43;
  v66[3] = v62;
  v67 = v43;
  v90 = v62;
  v68 = v101;
  v66[4] = v101;
  v66[5] = v65;
  v69 = v103;
  v66[6] = v44;
  v66[7] = v69;
  v66[8] = v42;
  v66[9] = v64;
  v70 = type metadata accessor for FMIPSnapshotHandlers(0);
  swift_allocObject(v70, *(unsigned int *)(v70 + 48), *(unsigned __int16 *)(v70 + 52));
  swift_retain_n(v43, 2);
  swift_bridgeObjectRetain_n(v44, 2);
  swift_retain_n(v64, 2);
  swift_retain(v68);
  swift_retain(v42);
  swift_retain(v62);
  swift_retain(v63);
  swift_retain(v66);
  v71 = FMIPSnapshotHandlers.init(devicesResponseFilter:devicesResponseHandler:itemsResponseFilter:itemsResponseHandler:)(0, 0, 0, 0, sub_10000E9D8, v63, sub_10000EA30, v66);
  type metadata accessor for FMIPManagerConfiguration(0);
  v72 = v99;
  static FMIPManagerSubsystem.items.getter();
  v73 = swift_retain(v71);
  v74 = static FMIPManagerConfiguration.default.getter(v73);
  v75 = v100;
  FMIPManagerConfiguration.preferredLocale.getter();
  v76 = swift_release(v74);
  v77 = static FMIPManagerConfiguration.default.getter(v76);
  FMIPManagerConfiguration.authenticationUIProvider.getter(&aBlock);
  swift_release(v77);
  v78 = FMIPManagerConfiguration.__allocating_init(enabledSubsystems:preferredLocale:authenticationUIProvider:snapshotHandlers:)(v72, v75, &aBlock, v71);
  v79 = objc_allocWithZone((Class)SPOwnerSession);
  swift_retain(v78);
  v80 = objc_msgSend(v79, "init");
  v81 = type metadata accessor for FMIPManager(0);
  swift_allocObject(v81, *(unsigned int *)(v81 + 48), *(unsigned __int16 *)(v81 + 52));
  v82 = FMIPManager.init(configuration:ownerSession:)(v78, v80);
  FMIPManager.initialize()();
  FMIPManager.startRefreshing()();
  v83 = swift_allocObject(&unk_100051F50, 32, 7);
  *(_QWORD *)(v83 + 16) = v43;
  *(_QWORD *)(v83 + 24) = v82;
  v84 = swift_allocObject(&unk_100051F78, 32, 7);
  *(_QWORD *)(v84 + 16) = sub_10000EA90;
  *(_QWORD *)(v84 + 24) = v83;
  v110 = sub_10000EAA8;
  v111 = (_QWORD *)v84;
  aBlock = _NSConcreteStackBlock;
  v107 = 1107296256;
  v108 = sub_1000052E0;
  v109 = &unk_100051F90;
  v85 = _Block_copy(&aBlock);
  v86 = v111;
  swift_retain(v67);
  swift_retain(v82);
  swift_retain(v84);
  swift_release(v86);
  dispatch_sync(v91, v85);
  swift_release(v82);
  swift_release(v78);
  swift_release(v71);
  swift_release(v66);
  swift_release(v63);
  swift_release(v90);
  _Block_release(v85);
  LOBYTE(v67) = swift_isEscapingClosureAtFileLocation(v84, "", 102, 157, 34, 1);
  swift_release(v83);
  swift_release(v102);
  swift_release(v101);
  result = swift_release(v84);
  if ((v67 & 1) != 0)
LABEL_20:
    __break(1u);
  return result;
}

uint64_t sub_100005CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(_QWORD, _QWORD, _QWORD), uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSString v31;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(_QWORD, _QWORD, _QWORD);
  uint64_t v41;
  uint64_t v42;
  char v43[24];

  v14 = sub_100003EA4(&qword_1000555D0);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 16, v43, 1, 0);
  *(_BYTE *)(a1 + 16) = 1;
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v17 = type metadata accessor for Logger(0);
  sub_10000CF34(v17, (uint64_t)qword_1000586D0);
  swift_bridgeObjectRetain_n(a5, 2);
  v18 = swift_retain_n(a2, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(32, -1);
    v38 = a3;
    v22 = v21;
    v23 = swift_slowAlloc(64, -1);
    v42 = v23;
    *(_DWORD *)v22 = 136315650;
    v37 = a4;
    v39 = a7;
    v40 = a6;
    v24 = *(_QWORD *)(a2 + 16);
    v25 = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain(v25);
    v41 = sub_100011770(v24, v25, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v22 + 4, v22 + 12);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v22 + 12) = 2048;
    v41 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v22 + 14, v22 + 22);
    *(_WORD *)(v22 + 22) = 2080;
    if (a5)
      v26 = v37;
    else
      v26 = 7104878;
    if (a5)
      v27 = a5;
    else
      v27 = 0xE300000000000000;
    swift_bridgeObjectRetain(a5);
    v41 = sub_100011770(v26, v27, &v42);
    a6 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v22 + 24, v22 + 32);
    swift_bridgeObjectRelease_n(a5, 2);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "🥑 ItemsDataService%s: timed out (%ld-s) fetching location for %s", (uint8_t *)v22, 0x20u);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a5, 2);
    swift_release_n(a2, 2);
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
  v29 = v28;
  v30 = objc_allocWithZone((Class)NSError);
  v31 = String._bridgeToObjectiveC()();
  v32 = objc_msgSend(v30, "initWithDomain:code:userInfo:", v31, 1001, 0, swift_bridgeObjectRelease(v29).n128_f64[0]);

  v33 = type metadata accessor for FMIPItem(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v16, 1, 1, v33);
  v34 = v32;
  a6(v16, 0, v32);

  return sub_10000EB5C((uint64_t)v16, &qword_1000555D0);
}

uint64_t sub_100006040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, unint64_t, uint64_t);
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __n128 v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t, __n128);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  int v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t result;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  char v75[24];

  v70 = a5;
  v66 = a4;
  v9 = type metadata accessor for FMIPItem(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v64 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v64 - v13;
  v15 = sub_100003EA4(&qword_1000555D0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v67 = (uint64_t)&v64 - v20;
  __chkstk_darwin(v19);
  v22 = (char *)&v64 - v21;
  v23 = *(_QWORD *)(a2 + 16) == 0;
  swift_beginAccess(a3 + 16, v75, 1, 0);
  *(_BYTE *)(a3 + 16) = v23;
  v74[0] = a2;
  swift_bridgeObjectRetain(a2);
  sub_10000B3AC(v74);
  v24 = v74[0];
  v25 = *(_QWORD *)(v74[0] + 16);
  v68 = v18;
  v69 = v22;
  if (!v25)
  {
    v38 = 1;
    goto LABEL_14;
  }
  v26 = v74[0] + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  v27 = *(_QWORD *)(v10 + 72);
  v28 = v10;
  v29 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v10 + 16);
  v65 = v74[0];
  swift_retain(v74[0]);
  while (1)
  {
    v31 = v9;
    v32 = v29(v14, v26, v9);
    v33 = FMIPItem.identifier.getter(v32);
    v35 = v34;
    if (!a6)
    {
      v30 = swift_bridgeObjectRelease(v34);
      goto LABEL_4;
    }
    if (v33 == v70 && v34 == a6)
      break;
    v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v70, a6, 0);
    v30 = swift_bridgeObjectRelease(v35);
    if ((v36 & 1) != 0)
    {
      v24 = v65;
      swift_release(v65);
      goto LABEL_13;
    }
LABEL_4:
    v9 = v31;
    (*(void (**)(char *, uint64_t, __n128))(v28 + 8))(v14, v31, v30);
    v26 += v27;
    if (!--v25)
    {
      v24 = v65;
      swift_release(v65);
      v38 = 1;
      v10 = v28;
      v18 = v68;
      v22 = v69;
      goto LABEL_14;
    }
  }
  v24 = v65;
  swift_release(v65);
  v37 = swift_bridgeObjectRelease(v35);
LABEL_13:
  v9 = v31;
  v10 = v28;
  v39 = *(void (**)(char *, char *, uint64_t, __n128))(v28 + 32);
  v22 = v69;
  v39(v69, v14, v31, v37);
  v38 = 0;
  v18 = v68;
LABEL_14:
  v40 = v66;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v22, v38, 1, v9);
  swift_release(v24);
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v41 = type metadata accessor for Logger(0);
  sub_10000CF34(v41, (uint64_t)qword_1000586D0);
  v42 = swift_retain(v40);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(64, -1);
    v74[0] = v24;
    *(_DWORD *)v45 = 136315394;
    v70 = v9;
    v46 = *(_QWORD *)(v40 + 16);
    v47 = *(_QWORD *)(v40 + 24);
    swift_bridgeObjectRetain(v47);
    v48 = v46;
    v49 = v69;
    v72 = sub_100011770(v48, v47, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v45 + 4, v45 + 12);
    swift_release(v40);
    v50 = v70;
    swift_bridgeObjectRelease(v47);
    *(_WORD *)(v45 + 12) = 2080;
    swift_beginAccess(v49, &v72, 0, 0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v49, 1, v50))
    {
      v51 = 0xE300000000000000;
      v52 = 7104878;
    }
    else
    {
      v53 = v64;
      v54 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 16))(v64, v49, v50);
      v52 = FMIPItem.identifier.getter(v54);
      v51 = v55;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v53, v50);
    }
    v71 = sub_100011770(v52, v51, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v45 + 14, v45 + 22);
    swift_bridgeObjectRelease(v51);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "🥑 ItemsDataService%s: selected item: %s", (uint8_t *)v45, 0x16u);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v45, -1, -1);

    v22 = v69;
    v9 = v70;
    v18 = v68;
  }
  else
  {

    swift_release(v40);
  }
  swift_beginAccess(v22, v74, 0, 0);
  v56 = v67;
  sub_10000D998((uint64_t)v22, v67);
  v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  v58 = v57(v56, 1, v9);
  sub_10000EB5C(v56, &qword_1000555D0);
  if (v58 == 1)
  {
    v59 = _swiftEmptyArrayStorage;
    goto LABEL_26;
  }
  v60 = sub_100003EA4(&qword_100055620);
  v61 = *(unsigned __int8 *)(v10 + 80);
  v62 = (v61 + 32) & ~v61;
  v59 = (_QWORD *)swift_allocObject(v60, v62 + *(_QWORD *)(v10 + 72), v61 | 7);
  *((_OWORD *)v59 + 1) = xmmword_1000427F0;
  sub_10000D998((uint64_t)v22, (uint64_t)v18);
  if (v57((uint64_t)v18, 1, v9) == 1)
  {
    __break(1u);
    result = swift_release(v24);
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v59 + v62, v18, v9);
LABEL_26:
    sub_10000EB5C((uint64_t)v22, &qword_1000555D0);
    return (uint64_t)v59;
  }
  return result;
}

uint64_t sub_1000065FC(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, void (*a10)(uint64_t, _QWORD, uint64_t), void *a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  NSObject *v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  void (*v29)(_BYTE *, unint64_t, uint64_t);
  unint64_t isEscapingClosureAtFileLocation;
  void (*v31)(uint64_t, _QWORD, uint64_t);
  unsigned __int8 *v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  __n128 v47;
  void (*v48)(_BYTE *, uint64_t, __n128);
  os_log_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  void (*v70)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  _BYTE v73[4];
  int v74;
  os_log_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  void (*v78)(uint64_t, _QWORD, uint64_t);
  void *v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t aBlock[5];
  void (*v89)(_BYTE *, unint64_t, uint64_t);
  char v90;

  v80 = a8;
  v84 = a4;
  v17 = sub_100003EA4(&qword_1000555D0);
  __chkstk_darwin(v17);
  v83 = &v73[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = type metadata accessor for FMIPItem(0);
  v85 = *(_QWORD *)(v19 - 8);
  v86 = v19;
  v20 = __chkstk_darwin(v19);
  v81 = &v73[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  v23 = &v73[-v22];
  v24 = a7 + 16;
  v90 = 0;
  v25 = a5[5];
  v26 = (_QWORD *)swift_allocObject(&unk_100051FC8, 56, 7);
  v26[2] = a5;
  v26[3] = a1;
  v26[4] = a6;
  v26[5] = &v90;
  v26[6] = v24;
  v27 = swift_allocObject(&unk_100051FF0, 32, 7);
  *(_QWORD *)(v27 + 16) = sub_10000EAFC;
  *(_QWORD *)(v27 + 24) = v26;
  aBlock[4] = (uint64_t)sub_10000EBE0;
  v89 = (void (*)(_BYTE *, unint64_t, uint64_t))v27;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000052E0;
  aBlock[3] = (uint64_t)&unk_100052008;
  v28 = _Block_copy(aBlock);
  v29 = v89;
  swift_retain(a5);
  v82 = a1;
  swift_retain(a1);
  swift_retain(a6);
  swift_retain(v27);
  swift_release(v29);
  dispatch_sync(v25, v28);
  _Block_release(v28);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v27, "", 102, 131, 38, 1);
  swift_release(v27);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if ((v90 & 1) != 0)
    return swift_release(v26);
  v31 = a10;
  v28 = a11;
  v32 = (unsigned __int8 *)(a12 + 16);
  if (*(_QWORD *)(a3 + 16))
  {
    v77 = (unsigned __int8 *)(a12 + 16);
    v78 = a10;
    a6 = v85;
    v27 = v86;
    v29 = *(void (**)(_BYTE *, unint64_t, uint64_t))(v85 + 16);
    a1 = v23;
    v29(v23, a3 + ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80)), v86);
    v80 = sub_100004F44();
    isEscapingClosureAtFileLocation = v33;
    if (qword_100055338 == -1)
    {
LABEL_5:
      v79 = v28;
      v34 = type metadata accessor for Logger(0);
      sub_10000CF34(v34, (uint64_t)qword_1000586D0);
      v35 = v81;
      v29(v81, (unint64_t)a1, v27);
      swift_retain_n(a5, 2);
      v36 = swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.default.getter();
      v39 = v38;
      if (os_log_type_enabled(v37, v38))
      {
        v40 = swift_slowAlloc(32, -1);
        v76 = swift_slowAlloc(96, -1);
        aBlock[0] = v76;
        *(_DWORD *)v40 = 136315650;
        v75 = v37;
        v74 = v39;
        v41 = a5[2];
        v42 = a5[3];
        swift_bridgeObjectRetain(v42);
        v87 = sub_100011770(v41, v42, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, aBlock, v40 + 4, v40 + 12);
        swift_release_n(a5, 2);
        swift_bridgeObjectRelease(v42);
        *(_WORD *)(v40 + 12) = 2080;
        v44 = FMIPItem.identifier.getter(v43);
        v46 = v45;
        v87 = sub_100011770(v44, v45, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, aBlock, v40 + 14, v40 + 22);
        v47 = swift_bridgeObjectRelease(v46);
        v48 = *(void (**)(_BYTE *, uint64_t, __n128))(v85 + 8);
        v48(v35, v86, v47);
        *(_WORD *)(v40 + 22) = 2080;
        swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
        v87 = sub_100011770(v80, isEscapingClosureAtFileLocation, aBlock);
        v27 = v86;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, aBlock, v40 + 24, v40 + 32);
        swift_bridgeObjectRelease_n(isEscapingClosureAtFileLocation, 3);
        v49 = v75;
        _os_log_impl((void *)&_mh_execute_header, v75, (os_log_type_t)v74, "🥑 ItemsDataService%s: provided %s: %s", (uint8_t *)v40, 0x20u);
        v50 = v76;
        swift_arrayDestroy(v76, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        v51 = v40;
        a6 = v85;
        swift_slowDealloc(v51, -1, -1);

      }
      else
      {
        swift_release_n(a5, 2);
        v48 = *(void (**)(_BYTE *, uint64_t, __n128))(a6 + 8);
        ((void (*)(_BYTE *, uint64_t))v48)(v35, v27);

        swift_bridgeObjectRelease_n(isEscapingClosureAtFileLocation, 2);
      }
      FMIPManager.stopRefreshing()();
      v68 = (uint64_t)v83;
      v29(v83, (unint64_t)a1, v27);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a6 + 56))(v68, 0, 1, v27);
      v69 = v77;
      swift_beginAccess(v77, aBlock, 0, 0);
      v78(v68, *v69, v84);
      sub_10000EB5C(v68, &qword_1000555D0);
      ((void (*)(_BYTE *, uint64_t))v48)(a1, v27);
      return swift_release(v26);
    }
LABEL_23:
    swift_once(&qword_100055338, sub_10000EF78);
    goto LABEL_5;
  }
  v52 = v85;
  v53 = v86;
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v54 = type metadata accessor for Logger(0);
  sub_10000CF34(v54, (uint64_t)qword_1000586D0);
  swift_bridgeObjectRetain_n(a9, 2);
  v55 = swift_retain_n(a5, 2);
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v56, v57))
  {
    v58 = swift_slowAlloc(22, -1);
    v78 = a10;
    v59 = v58;
    v60 = swift_slowAlloc(64, -1);
    v77 = (unsigned __int8 *)(a12 + 16);
    v61 = v60;
    aBlock[0] = v60;
    *(_DWORD *)v59 = 136315394;
    v79 = a11;
    v62 = a5[2];
    v63 = a5[3];
    swift_bridgeObjectRetain(v63);
    v87 = sub_100011770(v62, v63, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, aBlock, v59 + 4, v59 + 12);
    swift_release_n(a5, 2);
    swift_bridgeObjectRelease(v63);
    *(_WORD *)(v59 + 12) = 2080;
    if (a9)
      v64 = v80;
    else
      v64 = 7104878;
    if (a9)
      v65 = a9;
    else
      v65 = 0xE300000000000000;
    swift_bridgeObjectRetain(a9);
    v87 = sub_100011770(v64, v65, aBlock);
    v53 = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, aBlock, v59 + 14, v59 + 22);
    swift_bridgeObjectRelease_n(a9, 2);
    swift_bridgeObjectRelease(v65);
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "🥑 ItemsDataService%s: provided no model for %s", (uint8_t *)v59, 0x16u);
    swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
    v66 = v61;
    v32 = v77;
    swift_slowDealloc(v66, -1, -1);
    v67 = v59;
    v31 = v78;
    v52 = v85;
    swift_slowDealloc(v67, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a9, 2);
    swift_release_n(a5, 2);
  }
  v70 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v52 + 56);
  v71 = (uint64_t)v83;
  v70(v83, 1, 1, v53);
  swift_beginAccess(v32, aBlock, 0, 0);
  v31(v71, *v32, v84);
  sub_10000EB5C(v71, &qword_1000555D0);
  return swift_release(v26);
}

uint64_t sub_100006D98(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[24];
  _BYTE v18[24];

  v9 = a1 + 136;
  swift_beginAccess(a1 + 136, v18, 0, 0);
  v10 = *(_QWORD *)(a1 + 136);
  swift_bridgeObjectRetain(v10);
  v11 = sub_100004A64(a2, v10);
  v13 = v12;
  swift_bridgeObjectRelease(v10);
  if ((v13 & 1) == 0)
  {
    swift_beginAccess(v9, v17, 33, 0);
    v15 = sub_100004BAC(v11);
    swift_endAccess(v17);
    v14 = swift_release(v15);
  }
  dispatch thunk of DispatchWorkItem.cancel()(v14);
  result = swift_beginAccess(a5, v17, 0, 0);
  *a4 = *a5;
  return result;
}

uint64_t sub_100006E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(a1 + 136, v10, 33, 0);
  v4 = swift_retain(a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  v5 = *(_QWORD *)(a1 + 136) & 0xFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v5 + 0x10);
  v6 = *(_QWORD *)(v5 + 24);
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, a2);
  specialized Array._endMutation()(v8);
  return swift_endAccess(v10);
}

void sub_100006F14(void *a1, void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, unint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13, void (*a14)(unint64_t), void (*a15)(unint64_t))
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  BOOL v51;
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  id v94;
  id v95;
  id v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  void (*v107)(char *, char *, uint64_t);
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  double *v118;
  unint64_t v119;
  id v120;
  void *v121;
  unsigned __int8 v122;
  uint64_t v123;
  _QWORD *v124;
  unint64_t v125;
  void (**v126)(unint64_t);
  void (*v127)(unint64_t);
  void *v128;
  double *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  CLLocationDegrees v134;
  CLLocationDegrees v135;
  double *v136;
  uint64_t v137;
  uint64_t v138;
  NSObject *v139;
  os_log_type_t v140;
  uint8_t *v141;
  double v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  id v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  unint64_t v158;
  void (**v159)(unint64_t);
  void (*v160)(unint64_t);
  unint64_t v161;
  double *v162;
  __n128 v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  _QWORD *v168;
  unint64_t v169;
  void *v170;
  void *v171;
  uint64_t v172;
  id v173;
  uint64_t v174;
  void (*v175)(char *, char *, uint64_t);
  uint64_t v176;
  unint64_t v177;
  void (*v178)(uint64_t, uint64_t);
  unint64_t v179;
  double *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  unint64_t v184;
  double *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  char *v191;
  id v192;
  void *v193;
  void (*v194)(unint64_t);
  void (*v195)(unint64_t);
  double v196;
  uint64_t v197;
  id v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 aBlock;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;

  v198 = a7;
  v200 = a3;
  v193 = a2;
  v192 = a1;
  v195 = a15;
  v194 = a14;
  v199 = a13;
  v23 = type metadata accessor for ItemModel(0);
  __chkstk_darwin(v23);
  v190 = (unint64_t)&v174 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = type metadata accessor for FMIPItem(0);
  v197 = *(_QWORD *)(v201 - 8);
  v25 = __chkstk_darwin(v201);
  v186 = (char *)&v174 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v183 = (char *)&v174 - v28;
  v29 = __chkstk_darwin(v27);
  v191 = (char *)&v174 - v30;
  v189 = v31;
  __chkstk_darwin(v29);
  v187 = (char *)&v174 - v32;
  v33 = type metadata accessor for WidgetFamily(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v36 = (char *)&v174 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100003EA4(&qword_1000555F8);
  v38 = __chkstk_darwin(v37);
  v188 = (uint64_t)&v174 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v38);
  v42 = (char *)&v174 - v41;
  v196 = *(double *)&a4;
  FMIPItem.location.getter(v40);
  v43 = type metadata accessor for FMIPLocation(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
  if (v45(v42, 1, v43) == 1)
  {
    sub_10000EB5C((uint64_t)v42, &qword_1000555F8);
    if (qword_100055338 != -1)
      swift_once(&qword_100055338, sub_10000EF78);
    v46 = type metadata accessor for Logger(0);
    v47 = sub_10000CF34(v46, (uint64_t)qword_1000586D0);
    swift_retain_n(a5, 2);
    v48 = swift_bridgeObjectRetain_n(a8, 2);
    v191 = (char *)v47;
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.default.getter();
    v51 = os_log_type_enabled(v49, v50);
    v52 = v200;
    if (v51)
    {
      v53 = swift_slowAlloc(32, -1);
      v54 = swift_slowAlloc(96, -1);
      *(_QWORD *)&aBlock = v54;
      *(_DWORD *)v53 = 136315650;
      v55 = *(_QWORD *)(a5 + 16);
      v56 = *(_QWORD *)(a5 + 24);
      swift_bridgeObjectRetain(v56);
      v203 = sub_100011770(v55, v56, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, &aBlock, v53 + 4, v53 + 12);
      swift_release_n(a5, 2);
      swift_bridgeObjectRelease(v56);
      *(_WORD *)(v53 + 12) = 2080;
      swift_bridgeObjectRetain(a8);
      v203 = sub_100011770((uint64_t)v198, a8, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, &aBlock, v53 + 14, v53 + 22);
      swift_bridgeObjectRelease_n(a8, 3);
      *(_WORD *)(v53 + 22) = 2080;
      v57 = CGSize.debugDescription.getter(a9, a10);
      v59 = v58;
      v203 = sub_100011770(v57, v58, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, &aBlock, v53 + 24, v53 + 32);
      swift_bridgeObjectRelease(v59);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "🥑 ItemsDataService%s: parsing \"%s\" for %s (has no location)", (uint8_t *)v53, 0x20u);
      swift_arrayDestroy(v54, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      v52 = v200;
      swift_slowDealloc(v53, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a8, 2);
      swift_release_n(a5, 2);
    }
    v91 = v199;
    v92 = v193;
    v93 = (uint64_t)v186;
    (*(void (**)(char *, double, uint64_t))(v197 + 16))(v186, COERCE_DOUBLE(*(_QWORD *)&v196), v201);
    v94 = objc_msgSend(*(id *)(a5 + 56), "aa_primaryAppleAccount");
    v95 = v94;
    if (v94)

    aBlock = xmmword_100042800;
    v205 = 0u;
    v206 = 0u;
    v207 = 0u;
    v208 = 0u;
    v209 = 0u;
    v210 = 0u;
    v96 = v192;
    sub_10000DDCC(v192, v92, v52);
    swift_errorRetain(v91);
    sub_10001890C(v93, (uint64_t *)&aBlock, 2, v95 != 0, 0, 0, 255, 0.0, v190, 1, v96, v92, v52, v91);
    swift_retain_n(a5, 2);
    v97 = swift_bridgeObjectRetain_n(a8, 2);
    v98 = Logger.logObject.getter(v97);
    v99 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v98, v99))
    {
      v100 = swift_slowAlloc(22, -1);
      v101 = a8;
      v102 = swift_slowAlloc(64, -1);
      v203 = v102;
      *(_DWORD *)v100 = 136315394;
      v103 = *(_QWORD *)(a5 + 16);
      v104 = *(_QWORD *)(a5 + 24);
      swift_bridgeObjectRetain(v104);
      v202 = sub_100011770(v103, v104, &v203);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, &v203, v100 + 4, v100 + 12);
      swift_release_n(a5, 2);
      swift_bridgeObjectRelease(v104);
      *(_WORD *)(v100 + 12) = 2080;
      swift_bridgeObjectRetain(v101);
      v202 = sub_100011770((uint64_t)v198, v101, &v203);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, &v203, v100 + 14, v100 + 22);
      swift_bridgeObjectRelease_n(v101, 3);
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "🥑 ItemsDataService%s: generated no map for \"%s\"", (uint8_t *)v100, 0x16u);
      swift_arrayDestroy(v102, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v102, -1, -1);
      swift_slowDealloc(v100, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a8, 2);
      swift_release_n(a5, 2);
    }
    v165 = v190;
    v194(v190);
    sub_10000D7D0(v165);
  }
  else
  {
    v181 = (uint64_t)v45;
    v60 = v43;
    v61 = (char *)FMIPLocation.location.getter();
    v62 = *(char **)(v44 + 8);
    v182 = v60;
    v178 = (void (*)(uint64_t, uint64_t))v62;
    ((void (*)(char *, uint64_t))v62)(v42, v60);
    sub_10003978C(a6, v61);
    v64 = v63;
    objc_msgSend(v61, "horizontalAccuracy");
    v66 = v65 / v64;
    v186 = v61;
    objc_msgSend(v61, "coordinate");
    v68 = v67;
    v70 = v69;
    (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v36, enum case for WidgetFamily.systemSmall(_:), v33);
    v71 = sub_10000EB1C((unint64_t *)&qword_100055600, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    dispatch thunk of RawRepresentable.rawValue.getter(&aBlock, v33, v71);
    dispatch thunk of RawRepresentable.rawValue.getter(&v203, v33, v71);
    v72 = aBlock;
    v73 = v203;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
    if (qword_100055338 != -1)
      swift_once(&qword_100055338, sub_10000EF78);
    v74 = v66 * a10;
    v75 = type metadata accessor for Logger(0);
    v76 = sub_10000CF34(v75, (uint64_t)qword_1000586D0);
    swift_retain_n(a5, 2);
    v77 = swift_bridgeObjectRetain_n(a8, 2);
    v177 = v76;
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.default.getter();
    v80 = os_log_type_enabled(v78, v79);
    v184 = a8;
    v185 = (double *)a5;
    if (v80)
    {
      v81 = swift_slowAlloc(32, -1);
      *(_QWORD *)&aBlock = swift_slowAlloc(96, -1);
      v190 = v72;
      v82 = aBlock;
      *(_DWORD *)v81 = 136315650;
      v83 = v73;
      v85 = *(_QWORD *)(a5 + 16);
      v84 = *(_QWORD *)(a5 + 24);
      swift_bridgeObjectRetain(v84);
      v203 = sub_100011770(v85, v84, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, &aBlock, v81 + 4, v81 + 12);
      swift_release_n(a5, 2);
      swift_bridgeObjectRelease(v84);
      *(_WORD *)(v81 + 12) = 2080;
      swift_bridgeObjectRetain(a8);
      v203 = sub_100011770((uint64_t)v198, a8, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, &aBlock, v81 + 14, v81 + 22);
      swift_bridgeObjectRelease_n(a8, 3);
      *(_WORD *)(v81 + 22) = 2080;
      v86 = CGSize.debugDescription.getter(a9, a10);
      v88 = v87;
      v203 = sub_100011770(v86, v87, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, &aBlock, v81 + 24, v81 + 32);
      v89 = v88;
      v73 = v83;
      swift_bridgeObjectRelease(v89);
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "🥑 ItemsDataService%s: parsing \"%s\" for %s…", (uint8_t *)v81, 0x20u);
      swift_arrayDestroy(v82, 3, (char *)&type metadata for Any + 8);
      v90 = v82;
      v72 = v190;
      swift_slowDealloc(v90, -1, -1);
      swift_slowDealloc(v81, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a8, 2);
      swift_release_n(a5, 2);
    }
    v105 = v191;
    LODWORD(v190) = v72 == v73;
    v106 = v197;
    v107 = *(void (**)(char *, char *, uint64_t))(v197 + 16);
    v108 = v187;
    v109 = v201;
    v107(v187, *(char **)&v196, v201);
    v175 = v107;
    v107(v105, v108, v109);
    v110 = *(unsigned __int8 *)(v106 + 80);
    v111 = (v110 + 80) & ~v110;
    v112 = v111 + v189;
    v174 = v110;
    v113 = (v111 + v189) & 0xFFFFFFFFFFFFFFF8;
    v114 = (v113 + 47) & 0xFFFFFFFFFFFFFFF8;
    v115 = (v114 + 15) & 0xFFFFFFFFFFFFFFF8;
    v116 = (v115 + 23) & 0xFFFFFFFFFFFFFFF8;
    v176 = v110 | 7;
    v117 = swift_allocObject(&unk_100051CD0, v116 + 16, v110 | 7);
    v180 = (double *)(v113 + v117);
    v179 = (v113 + 23) & 0xFFFFFFFFFFFFFFF8;
    v118 = v185;
    *(_QWORD *)(v117 + 16) = v185;
    *(double *)(v117 + 24) = v68;
    *(double *)(v117 + 32) = v70;
    *(double *)(v117 + 40) = v64;
    *(double *)(v117 + 48) = a11;
    *(double *)(v117 + 56) = a12;
    *(double *)(v117 + 64) = a9;
    *(double *)(v117 + 72) = a10;
    v187 = *(char **)(v106 + 32);
    ((void (*)(uint64_t, char *, uint64_t))v187)(v117 + v111, v108, v109);
    *(_BYTE *)(v117 + v112) = v190;
    v180[1] = v74;
    v119 = v117 + v179;
    v120 = v192;
    v121 = v193;
    *(_QWORD *)v119 = v192;
    *(_QWORD *)(v119 + 8) = v121;
    v122 = v200;
    *(_BYTE *)(v119 + 16) = v200;
    v123 = v199;
    *(_QWORD *)(v117 + v114) = v199;
    v124 = (_QWORD *)(v117 + v115);
    v125 = v184;
    *v124 = v198;
    v124[1] = v125;
    v126 = (void (**)(unint64_t))(v117 + v116);
    v127 = v195;
    *v126 = v194;
    v126[1] = v127;
    v128 = (void *)*((_QWORD *)v118 + 16);
    swift_retain(v118);
    swift_bridgeObjectRetain(v125);
    sub_10000DDCC(v120, v121, v122);
    swift_errorRetain(v123);
    swift_retain(v127);
    v129 = v118;
    v130 = v123;
    swift_retain(v129);
    swift_bridgeObjectRetain(v125);
    sub_10000DDCC(v120, v121, v122);
    swift_errorRetain(v123);
    swift_retain(v127);
    v131 = v188;
    FMIPItem.location.getter(v132);
    v133 = v182;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v181)(v131, 1, v182) == 1)
    {
      v196 = a9;
      v134 = v70;
      v135 = v68;
      v136 = v185;
      v137 = v174;
      v138 = sub_10000EB5C(v131, &qword_1000555F8);
      v139 = Logger.logObject.getter(v138);
      v140 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v139, v140))
      {
        v141 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v141 = 0;
        _os_log_impl((void *)&_mh_execute_header, v139, v140, "🥑 CLGeocoder: reverse geo-coded nil location to nil", v141, 2u);
        swift_slowDealloc(v141, -1, -1);
      }

      aBlock = xmmword_100042800;
      v205 = 0u;
      v206 = 0u;
      v207 = 0u;
      v208 = 0u;
      v209 = 0u;
      v210 = 0u;
      v188 = *((_QWORD *)v136 + 8);
      v179 = *((_QWORD *)v136 + 9);
      v142 = v136[10];
      v180 = (double *)*((_QWORD *)v136 + 11);
      v182 = *(_QWORD *)&a11;
      v181 = *(_QWORD *)&a12;
      v143 = v183;
      v144 = v201;
      v175(v183, v191, v201);
      v145 = (v137 + 16) & ~v137;
      v177 = (v145 + v189 + 7) & 0xFFFFFFFFFFFFFFF8;
      v146 = (v145 + v189 + 127) & 0xFFFFFFFFFFFFFFF8;
      v147 = (v146 + 15) & 0xFFFFFFFFFFFFFFF8;
      v178 = (void (*)(uint64_t, uint64_t))((v147 + 15) & 0xFFFFFFFFFFFFFFF8);
      v148 = (v147 + 39) & 0xFFFFFFFFFFFFFFF8;
      v149 = (v148 + 15) & 0xFFFFFFFFFFFFFFF8;
      v189 = (v149 + 23) & 0xFFFFFFFFFFFFFFF8;
      v150 = swift_allocObject(&unk_100051CF8, v189 + 16, v176);
      ((void (*)(uint64_t, char *, uint64_t))v187)(v150 + v145, v143, v144);
      v151 = v150 + v177;
      sub_10000DFF0((uint64_t)&aBlock, v150 + v177);
      *(_BYTE *)(v151 + 112) = v190;
      *(_QWORD *)(v150 + v146) = v136;
      *(double *)(v150 + v147) = v74;
      v152 = (char *)v178 + v150;
      v153 = v192;
      v154 = v193;
      *(_QWORD *)v152 = v192;
      *((_QWORD *)v152 + 1) = v154;
      LOBYTE(v145) = v200;
      v152[16] = v200;
      v155 = v199;
      *(_QWORD *)(v150 + v148) = v199;
      v156 = v155;
      v157 = (_QWORD *)(v150 + v149);
      v158 = v184;
      *v157 = v198;
      v157[1] = v158;
      v159 = (void (**)(unint64_t))(v150 + v189);
      v160 = v195;
      *v159 = v194;
      v159[1] = v160;
      swift_retain(v136);
      swift_bridgeObjectRetain(v158);
      sub_10000DDCC(v153, v154, v145);
      swift_errorRetain(v156);
      swift_retain(v160);
      v161 = v179;
      swift_bridgeObjectRetain(v179);
      v162 = v180;
      sub_100039C54(v182, v181, 0, (uint64_t)sub_10000E038, v150, v188, v161, v162, v135, v134, v64, v196, a10, v142);
      swift_release(v136);
      swift_release(v117);

      swift_release(v150);
      v163 = swift_bridgeObjectRelease(v161);
      (*(void (**)(char *, uint64_t, __n128))(v197 + 8))(v191, v201, v163);
      sub_10000E03C(v153, v154, v145);
      swift_errorRelease(v199);
      swift_release(v160);
      v164 = v158;
    }
    else
    {
      v198 = v128;
      v166 = v133;
      v167 = (void *)FMIPLocation.location.getter();
      v178(v131, v166);
      v168 = (_QWORD *)swift_allocObject(&unk_100051D20, 40, 7);
      v168[2] = v167;
      v168[3] = sub_10000DF30;
      v168[4] = v117;
      *(_QWORD *)&v206 = sub_10000E080;
      *((_QWORD *)&v206 + 1) = v168;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v205 = sub_10000B2B8;
      *((_QWORD *)&v205 + 1) = &unk_100051D38;
      v169 = v125;
      v170 = v120;
      v171 = _Block_copy(&aBlock);
      v172 = *((_QWORD *)&v206 + 1);
      v173 = v167;
      swift_retain(v117);
      swift_release(v172);
      objc_msgSend(v198, "reverseGeocodeLocation:completionHandler:", v173, v171);
      _Block_release(v171);
      swift_release(v185);
      swift_release(v117);

      (*(void (**)(char *, uint64_t))(v197 + 8))(v191, v201);
      sub_10000E03C(v170, v121, v122);
      swift_errorRelease(v130);
      swift_release(v127);
      v164 = v169;
    }
    swift_bridgeObjectRelease(v164);
  }
}

void sub_100008130(uint64_t a1, double *a2, uint64_t a3, int a4, void *a5, void *a6, int a7, uint64_t a8, CLLocationDegrees a9, CLLocationDegrees a10, CLLocationDistance a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  id v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  id v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  void *v61;
  void *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  unint64_t v69;

  v64 = a8;
  v63 = a7;
  v61 = a5;
  v62 = a6;
  v60 = a4;
  v68 = a15;
  v55 = (uint64_t *)a1;
  v58 = a19;
  v59 = a20;
  v57 = a18;
  v56 = a17;
  v29 = type metadata accessor for FMIPItem(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(_QWORD *)(v30 + 64);
  __chkstk_darwin(v29);
  v67 = *((_QWORD *)a2 + 8);
  v69 = *((_QWORD *)a2 + 9);
  v32 = a2[10];
  v54 = (id)*((_QWORD *)a2 + 11);
  v65 = *(_QWORD *)&a13;
  v66 = *(_QWORD *)&a12;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))((char *)&v51 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v29);
  v33 = *(unsigned __int8 *)(v30 + 80);
  v34 = (v33 + 16) & ~v33;
  v35 = (v34 + v31 + 127) & 0xFFFFFFFFFFFFFFF8;
  v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8;
  v51 = (v36 + 15) & 0xFFFFFFFFFFFFFFF8;
  v53 = (v36 + 39) & 0xFFFFFFFFFFFFFFF8;
  v37 = (v53 + 15) & 0xFFFFFFFFFFFFFFF8;
  v52 = (v37 + 23) & 0xFFFFFFFFFFFFFFF8;
  v38 = swift_allocObject(&unk_100051D70, v52 + 16, v33 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v38 + v34, (char *)&v51 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), v29);
  v39 = v38 + ((v34 + v31 + 7) & 0xFFFFFFFFFFFFFFF8);
  v40 = v55;
  sub_10000DFF0((uint64_t)v55, v39);
  *(_BYTE *)(v39 + 112) = v60;
  *(_QWORD *)(v38 + v35) = a2;
  *(double *)(v38 + v36) = a16;
  v41 = v38 + v51;
  v43 = v61;
  v42 = v62;
  *(_QWORD *)v41 = v61;
  *(_QWORD *)(v41 + 8) = v42;
  LOBYTE(v30) = v63;
  *(_BYTE *)(v41 + 16) = v63;
  v44 = v64;
  *(_QWORD *)(v38 + v53) = v64;
  v45 = (_QWORD *)(v38 + v37);
  v46 = v57;
  *v45 = v56;
  v45[1] = v46;
  v47 = (_QWORD *)(v38 + v52);
  v48 = v59;
  *v47 = v58;
  v47[1] = v48;
  swift_bridgeObjectRetain(v69);
  v49 = v54;
  sub_10000E0C4(v40);
  swift_retain(a2);
  sub_10000DDCC(v43, v42, v30);
  swift_errorRetain(v44);
  swift_bridgeObjectRetain(v46);
  swift_retain(v48);
  v50 = v69;
  sub_100039C54(v66, v65, 0, (uint64_t)sub_10000E038, v38, v67, v69, v49, a9, a10, a11, a14, v68, v32);
  swift_release(v38);

  swift_bridgeObjectRelease(v50);
}

uint64_t sub_10000840C(void *a1, void *a2, int a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, void *a8, double a9, void *a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t *a15, uint64_t a16)
{
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  double v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  unsigned __int8 v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v63;
  id v64;
  void *v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  void *v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void *v74;

  v69 = a8;
  v70 = a5;
  v71 = a7;
  LODWORD(v63) = a6;
  v67 = a4;
  v20 = ~(_BYTE)a3;
  v68 = a11;
  v21 = type metadata accessor for FMIPItem(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for ItemModel(0);
  __chkstk_darwin(v25);
  v72 = (unint64_t)&v63 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for ColorScheme(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v63 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = 0.0;
  v64 = a1;
  v65 = a2;
  if (v20)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v30, enum case for ColorScheme.light(_:), v27);
    v32 = sub_100015430((uint64_t)v30, a1, a2, a3 & 1);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    v33 = 0.0;
    if (v32)
    {
      objc_msgSend(v32, "size", v63);
      v33 = v34;
      v31 = v35;

    }
  }
  else
  {
    v33 = 0.0;
  }
  v66 = a14;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v67, v21);
  v36 = *(void **)(v71 + 56);
  sub_10000E0C4(v70);
  v37 = objc_msgSend(v36, "aa_primaryAppleAccount");
  v38 = v37;
  if (v37)

  v67 = a16;
  v39 = v64;
  v40 = v65;
  sub_10000DDCC(v64, v65, a3);
  v41 = v69;
  v42 = v68;
  sub_10000DDCC(v69, a10, v68);
  swift_errorRetain(a12);
  sub_10001890C((uint64_t)v24, v70, v63 & 1, v38 != 0, v39, v40, a3, a9, v72, 0, v41, a10, v42, a12);
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v43 = a15;
  v44 = type metadata accessor for Logger(0);
  sub_10000CF34(v44, (uint64_t)qword_1000586D0);
  sub_10000DDCC(v41, a10, v42);
  v45 = v71;
  swift_retain(v71);
  v46 = v66;
  swift_bridgeObjectRetain(v66);
  sub_10000DDCC(v41, a10, v42);
  swift_retain(v45);
  v47 = swift_bridgeObjectRetain(v46);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.default.getter();
  v50 = v49;
  if (os_log_type_enabled(v48, v49))
  {
    v63 = a13;
    v51 = swift_slowAlloc(42, -1);
    LODWORD(v64) = v50;
    v52 = v51;
    v65 = (void *)swift_slowAlloc(128, -1);
    v74 = v65;
    *(_DWORD *)v52 = 136315906;
    v70 = a15;
    v54 = *(_QWORD *)(v45 + 16);
    v53 = *(_QWORD *)(v45 + 24);
    swift_bridgeObjectRetain(v53);
    v73 = sub_100011770(v54, v53, (uint64_t *)&v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v52 + 4, v52 + 12);
    swift_release_n(v45, 2);
    swift_bridgeObjectRelease(v53);
    *(_WORD *)(v52 + 12) = 2080;
    v55 = CGSize.debugDescription.getter(v33, v31);
    v57 = v56;
    v73 = sub_100011770(v55, v56, (uint64_t *)&v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v52 + 14, v52 + 22);
    swift_bridgeObjectRelease(v57);
    *(_WORD *)(v52 + 22) = 2080;
    swift_bridgeObjectRetain(v46);
    v73 = sub_100011770(v63, v46, (uint64_t *)&v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v52 + 24, v52 + 32);
    swift_bridgeObjectRelease_n(v46, 3);
    *(_WORD *)(v52 + 32) = 2080;
    v43 = v70;
    if (v42 == 0xFF)
      v58 = 0x6A6F6D65206F6E28;
    else
      v58 = 0x6A6F6D652F772820;
    v73 = sub_100011770(v58, 0xEA00000000002969, (uint64_t *)&v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v52 + 34, v52 + 42);
    swift_bridgeObjectRelease(0xEA00000000002969);
    v59 = v69;
    sub_10000E03C(v69, a10, v42);
    sub_10000E03C(v59, a10, v42);
    _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v64, "🥑 ItemsDataService%s: generated %s map for \"%s\" %s", (uint8_t *)v52, 0x2Au);
    v60 = v65;
    swift_arrayDestroy(v65, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v52, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v46, 2);
    swift_release_n(v45, 2);
    sub_10000E03C(v41, a10, v42);
    sub_10000E03C(v41, a10, v42);
  }

  v61 = v72;
  ((void (*)(unint64_t))v43)(v72);
  return sub_10000D7D0(v61);
}

void sub_1000089D0(void *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, double a6, double a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void (*v26)(char *, void *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  double *v35;
  void (*v36)(_QWORD);
  void *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void (*v66)(_QWORD);
  uint64_t v67;
  uint64_t v68;

  v64 = a5;
  v65 = (void *)a2;
  v66 = a4;
  v62 = *(_QWORD *)v7;
  v12 = sub_100003EA4(&qword_1000555C8);
  __chkstk_darwin(v12);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ItemModel(0);
  v60 = *(_QWORD *)(v15 - 8);
  v61 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for WidgetFamily(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  __chkstk_darwin(v18);
  v21 = objc_msgSend(a1, "source");
  v22 = v21;
  if (v21)
  {
    v23 = objc_msgSend(v21, "itemIdentifier");

    if (v23)
    {
      v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v22 = v24;

    }
    else
    {
      v63 = 0;
      v22 = 0;
    }
  }
  else
  {
    v63 = 0;
  }
  v25 = objc_msgSend(*(id *)(v7 + 56), "aa_primaryAppleAccount");
  if (v25)
  {

    v26 = *(void (**)(char *, void *, uint64_t))(v19 + 16);
    v58 = v18;
    v59 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    v26(v59, v65, v18);
    v27 = *(unsigned __int8 *)(v19 + 80);
    v28 = (v27 + 24) & ~v27;
    v29 = (v20 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    v30 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8;
    v57 = v7;
    v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF8;
    v65 = (void *)a3;
    v32 = (v31 + 23) & 0xFFFFFFFFFFFFFFF8;
    v33 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
    v34 = swift_allocObject(&unk_100051BB8, v33 + 8, v27 | 7);
    *(_QWORD *)(v34 + 16) = v7;
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v34 + v28, v59, v58);
    v35 = (double *)(v34 + v29);
    *v35 = a6;
    v35[1] = a7;
    v37 = v65;
    v36 = v66;
    *(_QWORD *)(v34 + v30) = v65;
    v38 = (uint64_t *)(v34 + v31);
    v39 = v63;
    v40 = v64;
    *v38 = v63;
    v38[1] = (uint64_t)v22;
    v41 = (_QWORD *)(v34 + v32);
    *v41 = v36;
    v41[1] = v40;
    *(_QWORD *)(v34 + v33) = v62;
    swift_bridgeObjectRetain(v22);
    swift_retain(v40);
    swift_retain(v57);
    v42 = v37;
    sub_100005300(v39, (unint64_t)v22, (uint64_t)sub_10000D8DC, v34);
    swift_release(v34);
    swift_bridgeObjectRelease(v22);
  }
  else
  {
    v43 = v7;
    sub_100019A88(0, 0, 0, 0, 0, 0, (unint64_t)v17);
    if (qword_100055338 != -1)
      swift_once(&qword_100055338, sub_10000EF78);
    v44 = type metadata accessor for Logger(0);
    sub_10000CF34(v44, (uint64_t)qword_1000586D0);
    swift_bridgeObjectRetain(v22);
    v45 = swift_retain_n(v7, 2);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = swift_slowAlloc(22, -1);
      v62 = swift_slowAlloc(64, -1);
      v68 = v62;
      *(_DWORD *)v48 = 136315394;
      v50 = *(_QWORD *)(v43 + 16);
      v49 = *(_QWORD *)(v43 + 24);
      swift_bridgeObjectRetain(v49);
      v67 = sub_100011770(v50, v49, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v48 + 4, v48 + 12);
      swift_release_n(v43, 2);
      swift_bridgeObjectRelease(v49);
      *(_WORD *)(v48 + 12) = 2080;
      if (v22)
        v51 = v63;
      else
        v51 = 7104878;
      v52 = v17;
      if (v22)
        v53 = (unint64_t)v22;
      else
        v53 = 0xE300000000000000;
      swift_bridgeObjectRetain(v22);
      v67 = sub_100011770(v51, v53, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v48 + 14, v48 + 22);
      swift_bridgeObjectRelease_n(v22, 2);
      v54 = v53;
      v17 = v52;
      swift_bridgeObjectRelease(v54);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "🥑 ItemsDataService%s: delivered partial model (user not logged in) for %s", (uint8_t *)v48, 0x16u);
      v55 = v62;
      swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v48, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v22, 2);
      swift_release_n(v43, 2);
    }
    sub_10000CF4C((uint64_t)v17, (uint64_t)v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v14, 0, 1, v61);
    v66(v14);
    sub_10000EB5C((uint64_t)v14, &qword_1000555C8);
    sub_1000398C4(0xD000000000000022, 0x8000000100041670, (uint64_t)v65, 0, 0);
    sub_10000D7D0((uint64_t)v17);
  }
}

uint64_t sub_100008F24(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  id v112;
  char *v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void **aBlock;
  uint64_t v132;
  uint64_t (*v133)(uint64_t);
  void *v134;
  uint64_t (*v135)();
  char *v136;

  v124 = a10;
  v125 = a4;
  v121 = a3;
  LODWORD(v122) = a2;
  v123 = a1;
  v129 = a13;
  v130 = a5;
  v127 = a9;
  v128 = a12;
  v126 = a11;
  v120 = type metadata accessor for DispatchWorkItemFlags(0);
  v118 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v117 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for DispatchQoS(0);
  v116 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v115 = (char *)&v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ItemModel(0);
  v18 = __chkstk_darwin(v17);
  v114 = (unint64_t)&v111 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v111 - v20;
  v22 = type metadata accessor for WidgetFamily(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_QWORD *)(v23 + 64);
  v25 = __chkstk_darwin(v22);
  v113 = (char *)&v111 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v111 - v27;
  __chkstk_darwin(v26);
  v30 = (char *)&v111 - v29;
  v31 = sub_100003EA4(&qword_1000555D0);
  __chkstk_darwin(v31);
  v33 = (char *)&v111 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for FMIPItem(0);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v37 = (char *)&v111 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D998(v123, (uint64_t)v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34) != 1)
  {
    v49 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    v112 = v37;
    v49(v37, v33, v34);
    v50 = v23;
    v51 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
    v111 = v22;
    v51(v30, v130, v22);
    v52 = *(unsigned __int8 *)(v23 + 80);
    v53 = (v52 + 56) & ~v52;
    v54 = (v24 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    v55 = (char *)swift_allocObject(&unk_100051C80, v54 + 8, v52 | 7);
    v57 = v124;
    v56 = v125;
    v58 = v127;
    v59 = v128;
    *((_QWORD *)v55 + 2) = v125;
    *((_QWORD *)v55 + 3) = v58;
    v60 = v126;
    *((_QWORD *)v55 + 4) = v57;
    *((_QWORD *)v55 + 5) = v60;
    *((_QWORD *)v55 + 6) = v59;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(&v55[v53], v30, v111);
    *(_QWORD *)&v55[v54] = v129;
    swift_bridgeObjectRetain(v57);
    swift_retain(v59);
    swift_retain(v56);
    v61 = v112;
    sub_10000D17C(v112, v130, 0, (uint64_t)sub_10000DB54, (uint64_t)v55, a6, a7);
    swift_release(v55);
    return (*(uint64_t (**)(id, uint64_t))(v35 + 8))(v61, v34);
  }
  v38 = v30;
  v39 = v130;
  v123 = v23;
  v40 = v22;
  v41 = v124;
  v42 = v125;
  sub_10000EB5C((uint64_t)v33, &qword_1000555D0);
  if ((v122 & 1) != 0)
  {
    v43 = v123;
    (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v28, v39, v22);
    v44 = *(void **)(v42 + 56);
    swift_bridgeObjectRetain(v41);
    v45 = v128;
    swift_retain(v128);
    v46 = objc_msgSend(v44, "aa_primaryAppleAccount", swift_retain(v42).n128_f64[0]);
    v47 = v46;
    if (v46)

    sub_100019A88(v47 != 0, 0, 0, 1, 0, 0, (unint64_t)v21);
    sub_100009F3C((uint64_t)v21, v42, v127, v41, v126, v45, (uint64_t)v28, v129);
    sub_10000D7D0((uint64_t)v21);
    swift_release(v45);
    swift_bridgeObjectRelease(v41);
    swift_release(v42);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v28, v22);
  }
  v62 = v41;
  v63 = v39;
  if (v121)
  {
    v64 = (void *)_convertErrorToNSError(_:)();
    v65 = objc_msgSend(v64, "code");

    if (v65 == (id)1001)
    {
      sub_10000E08C(0, (unint64_t *)&qword_1000555D8, OS_dispatch_queue_ptr);
      v122 = static OS_dispatch_queue.main.getter();
      v66 = v123;
      (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v38, v63, v22);
      v67 = *(unsigned __int8 *)(v66 + 80);
      v68 = (v67 + 56) & ~v67;
      v69 = (v24 + v68 + 7) & 0xFFFFFFFFFFFFFFF8;
      v70 = (char *)swift_allocObject(&unk_100051C30, v69 + 8, v67 | 7);
      v71 = v127;
      v72 = v128;
      *((_QWORD *)v70 + 2) = v42;
      *((_QWORD *)v70 + 3) = v71;
      v73 = v126;
      *((_QWORD *)v70 + 4) = v41;
      *((_QWORD *)v70 + 5) = v73;
      *((_QWORD *)v70 + 6) = v72;
      (*(void (**)(char *, char *, uint64_t))(v66 + 32))(&v70[v68], v38, v40);
      *(_QWORD *)&v70[v69] = v129;
      v135 = sub_10000DA58;
      v136 = v70;
      aBlock = _NSConcreteStackBlock;
      v132 = 1107296256;
      v133 = sub_1000125A8;
      v134 = &unk_100051C48;
      v74 = _Block_copy(&aBlock);
      v75 = v136;
      swift_bridgeObjectRetain(v41);
      swift_retain(v72);
      swift_retain(v42);
      v76 = swift_release(v75);
      v77 = v115;
      static DispatchQoS.unspecified.getter(v76);
      aBlock = (void **)_swiftEmptyArrayStorage;
      v78 = sub_10000EB1C((unint64_t *)&qword_1000555E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v79 = sub_100003EA4(&qword_1000555E8);
      v80 = sub_10000DA08();
      v81 = v117;
      v82 = v120;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v79, v80, v120, v78);
      v83 = v77;
      v84 = v81;
      v85 = v74;
      v86 = (void *)v122;
LABEL_15:
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v83, v84, v85);
      _Block_release(v74);

      (*(void (**)(char *, uint64_t))(v118 + 8))(v81, v82);
      return (*(uint64_t (**)(char *, uint64_t))(v116 + 8))(v77, v119);
    }
  }
  v87 = v129;
  if (!v62)
  {
    sub_10000E08C(0, (unint64_t *)&qword_1000555D8, OS_dispatch_queue_ptr);
    v124 = static OS_dispatch_queue.main.getter();
    v97 = v123;
    v98 = v22;
    (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v38, v63, v22);
    v99 = *(unsigned __int8 *)(v97 + 80);
    v100 = (v99 + 56) & ~v99;
    v101 = (v24 + v100 + 7) & 0xFFFFFFFFFFFFFFF8;
    v102 = (char *)swift_allocObject(&unk_100051BE0, v101 + 8, v99 | 7);
    v103 = v127;
    v104 = v128;
    *((_QWORD *)v102 + 2) = v42;
    *((_QWORD *)v102 + 3) = v103;
    v105 = v126;
    *((_QWORD *)v102 + 4) = 0;
    *((_QWORD *)v102 + 5) = v105;
    *((_QWORD *)v102 + 6) = v104;
    (*(void (**)(char *, char *, uint64_t))(v97 + 32))(&v102[v100], v38, v98);
    *(_QWORD *)&v102[v101] = v129;
    v135 = sub_10000D9E4;
    v136 = v102;
    aBlock = _NSConcreteStackBlock;
    v132 = 1107296256;
    v133 = sub_1000125A8;
    v134 = &unk_100051BF8;
    v74 = _Block_copy(&aBlock);
    v106 = v136;
    swift_retain(v42);
    swift_retain(v104);
    v107 = swift_release(v106);
    v77 = v115;
    static DispatchQoS.unspecified.getter(v107);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v108 = sub_10000EB1C((unint64_t *)&qword_1000555E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v109 = sub_100003EA4(&qword_1000555E8);
    v110 = sub_10000DA08();
    v81 = v117;
    v82 = v120;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v109, v110, v120, v108);
    v83 = v77;
    v84 = v81;
    v85 = v74;
    v86 = (void *)v124;
    goto LABEL_15;
  }
  v88 = (uint64_t)v113;
  (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v113, v63, v40);
  v89 = *(void **)(v42 + 56);
  swift_retain(v42);
  swift_bridgeObjectRetain(v62);
  v90 = v128;
  v91 = objc_msgSend(v89, "aa_primaryAppleAccount", swift_retain(v128).n128_f64[0]);
  v92 = v91;
  v94 = v126;
  v93 = v127;
  if (v91)

  v95 = v92 != 0;
  v96 = v114;
  sub_100019A88(v95, 0, 1, 0, 0, 0, v114);
  sub_10000A908(v96, v42, v93, v62, v94, v90, v88, v87);
  sub_10000D7D0(v96);
  swift_release(v90);
  swift_bridgeObjectRelease(v62);
  swift_release(v42);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v123 + 8))(v88, v40);
}

uint64_t sub_100009868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  void *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD aBlock[5];
  uint64_t v60;

  v53 = a8;
  v49 = a5;
  v50 = a6;
  v47 = a3;
  v48 = a4;
  v46 = a1;
  v55 = type metadata accessor for DispatchWorkItemFlags(0);
  v58 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v54 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v56 = *(_QWORD *)(v11 - 8);
  v57 = v11;
  __chkstk_darwin(v11);
  v52 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for WidgetFamily(0);
  v14 = *(_QWORD *)(v13 - 8);
  v45 = v13;
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ItemModel(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v17);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E08C(0, (unint64_t *)&qword_1000555D8, OS_dispatch_queue_ptr);
  v51 = static OS_dispatch_queue.main.getter();
  sub_10000CF4C(v46, (uint64_t)v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a7, v13);
  v21 = *(unsigned __int8 *)(v18 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = (v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(unsigned __int8 *)(v14 + 80);
  v26 = (v25 + v24 + 16) & ~v25;
  v27 = (v15 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_100051D98, v27 + 8, v21 | v25 | 7);
  *(_QWORD *)(v28 + 16) = a2;
  sub_10000E5B8((uint64_t)v20, v28 + v22);
  v29 = (_QWORD *)(v28 + v23);
  v30 = v48;
  *v29 = v47;
  v29[1] = v30;
  v31 = (_QWORD *)(v28 + v24);
  v32 = v50;
  *v31 = v49;
  v31[1] = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v28 + v26, v16, v45);
  *(_QWORD *)(v28 + v27) = v53;
  aBlock[4] = sub_10000E5FC;
  v60 = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000125A8;
  aBlock[3] = &unk_100051DB0;
  v33 = _Block_copy(aBlock);
  v34 = v60;
  swift_bridgeObjectRetain(v30);
  swift_retain(v32);
  swift_retain(a2);
  v35 = swift_release(v34);
  v36 = v52;
  static DispatchQoS.unspecified.getter(v35);
  aBlock[0] = _swiftEmptyArrayStorage;
  v37 = sub_10000EB1C((unint64_t *)&qword_1000555E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v38 = sub_100003EA4(&qword_1000555E8);
  v39 = sub_10000DA08();
  v41 = v54;
  v40 = v55;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v38, v39, v55, v37);
  v42 = (void *)v51;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v41, v33);
  _Block_release(v33);

  (*(void (**)(char *, uint64_t))(v58 + 8))(v41, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v36, v57);
}

void sub_100009BAC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(_QWORD), uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a6;
  v37 = a3;
  v12 = sub_100003EA4(&qword_1000555C8);
  __chkstk_darwin(v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ItemModel(0);
  v38 = *(_QWORD *)(v15 - 8);
  v39 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v18 = type metadata accessor for Logger(0);
  sub_10000CF34(v18, (uint64_t)qword_1000586D0);
  sub_10000CF4C(a2, (uint64_t)v17);
  swift_bridgeObjectRetain_n(a4, 2);
  v19 = swift_retain_n(a1, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(32, -1);
    v35 = a2;
    v23 = v22;
    v33 = swift_slowAlloc(96, -1);
    v42 = v33;
    *(_DWORD *)v23 = 136315650;
    v36 = a7;
    v34 = a5;
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain(v25);
    v41 = sub_100011770(v24, v25, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v23 + 4, v23 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v23 + 12) = 2080;
    v26 = sub_100019EA8();
    v28 = v27;
    v41 = sub_100011770(v26, v27, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease(v28);
    sub_10000D7D0((uint64_t)v17);
    *(_WORD *)(v23 + 22) = 2080;
    a5 = v34;
    if (a4)
      v29 = v37;
    else
      v29 = 7104878;
    if (a4)
      v30 = a4;
    else
      v30 = 0xE300000000000000;
    swift_bridgeObjectRetain(a4);
    v41 = sub_100011770(v29, v30, &v42);
    a7 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v23 + 24, v23 + 32);
    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "🥑 ItemsDataService%s: delivered %s for %s", (uint8_t *)v23, 0x20u);
    v31 = v33;
    swift_arrayDestroy(v33, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    v32 = v23;
    a2 = v35;
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {
    swift_release_n(a1, 2);
    sub_10000D7D0((uint64_t)v17);

    swift_bridgeObjectRelease_n(a4, 2);
  }
  sub_10000CF4C(a2, (uint64_t)v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v14, 0, 1, v39);
  a5(v14);
  sub_10000EB5C((uint64_t)v14, &qword_1000555C8);
  sub_1000398C4(0xD000000000000022, 0x8000000100041670, a7, *(_BYTE *)(a2 + 37), 0);
}

uint64_t sub_100009F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  void *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD aBlock[5];
  char *v56;

  v49 = a8;
  v43 = a7;
  v44 = a3;
  v45 = a5;
  v46 = a6;
  v42 = a1;
  v51 = type metadata accessor for DispatchWorkItemFlags(0);
  v54 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v50 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v52 = *(_QWORD *)(v11 - 8);
  v53 = v11;
  __chkstk_darwin(v11);
  v48 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for WidgetFamily(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ItemModel(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v17);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E08C(0, (unint64_t *)&qword_1000555D8, OS_dispatch_queue_ptr);
  v47 = static OS_dispatch_queue.main.getter();
  sub_10000CF4C(v42, (uint64_t)v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v43, v13);
  v21 = *(unsigned __int8 *)(v18 + 80);
  v22 = (v21 + 56) & ~v21;
  v23 = *(unsigned __int8 *)(v14 + 80);
  v24 = (v19 + v23 + v22) & ~v23;
  v25 = (v15 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (char *)swift_allocObject(&unk_100051DE8, v25 + 8, v21 | v23 | 7);
  v27 = v44;
  *((_QWORD *)v26 + 2) = a2;
  *((_QWORD *)v26 + 3) = v27;
  v28 = v45;
  *((_QWORD *)v26 + 4) = a4;
  *((_QWORD *)v26 + 5) = v28;
  v29 = (uint64_t)&v26[v22];
  v30 = v46;
  *((_QWORD *)v26 + 6) = v46;
  sub_10000E5B8((uint64_t)v20, v29);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v26[v24], v16, v13);
  *(_QWORD *)&v26[v25] = v49;
  aBlock[4] = sub_10000E69C;
  v56 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000125A8;
  aBlock[3] = &unk_100051E00;
  v31 = _Block_copy(aBlock);
  v32 = v56;
  swift_bridgeObjectRetain(a4);
  swift_retain(v30);
  swift_retain(a2);
  v33 = swift_release(v32);
  v34 = v48;
  static DispatchQoS.unspecified.getter(v33);
  aBlock[0] = _swiftEmptyArrayStorage;
  v35 = sub_10000EB1C((unint64_t *)&qword_1000555E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v36 = sub_100003EA4(&qword_1000555E8);
  v37 = sub_10000DA08();
  v39 = v50;
  v38 = v51;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v36, v37, v51, v35);
  v40 = (void *)v47;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v34, v39, v31);
  _Block_release(v31);

  (*(void (**)(char *, uint64_t))(v54 + 8))(v39, v38);
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v34, v53);
}

void sub_10000A264(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v14 = sub_100003EA4(&qword_1000555C8);
  __chkstk_darwin(v14);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v17 = type metadata accessor for Logger(0);
  sub_10000CF34(v17, (uint64_t)qword_1000586D0);
  swift_bridgeObjectRetain_n(a3, 2);
  v18 = swift_retain_n(a1, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v34 = a2;
    v22 = v21;
    v23 = swift_slowAlloc(64, -1);
    v37 = a6;
    v24 = v23;
    v40 = v23;
    *(_DWORD *)v22 = 136315394;
    v35 = a5;
    v36 = a4;
    v38 = a7;
    v26 = *(_QWORD *)(a1 + 16);
    v25 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain(v25);
    v39 = sub_100011770(v26, v25, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v22 + 4, v22 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v22 + 12) = 2080;
    if (a3)
      v27 = v34;
    else
      v27 = 7104878;
    if (a3)
      v28 = a3;
    else
      v28 = 0xE300000000000000;
    swift_bridgeObjectRetain(a3);
    v29 = v27;
    a7 = v38;
    v39 = sub_100011770(v29, v28, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease_n(a3, 2);
    v30 = v28;
    a4 = v36;
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "🥑 ItemsDataService%s: delivered empty list model for %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    v31 = v24;
    a6 = v37;
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    swift_release_n(a1, 2);
  }
  sub_10000CF4C(a6, (uint64_t)v16);
  v32 = type metadata accessor for ItemModel(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v16, 0, 1, v32);
  a4(v16);
  sub_10000EB5C((uint64_t)v16, &qword_1000555C8);
  sub_1000398C4(0xD000000000000022, 0x8000000100041670, a7, *(_BYTE *)(a6 + 37), 0);
}

uint64_t sub_10000A574(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD), uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v37 = a2;
  v11 = sub_100003EA4(&qword_1000555C8);
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ItemModel(0);
  v38 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019A88(2, 0, 0, 0, 0, 1, (unint64_t)v16);
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v17 = type metadata accessor for Logger(0);
  sub_10000CF34(v17, (uint64_t)qword_1000586D0);
  swift_bridgeObjectRetain_n(a3, 2);
  v18 = swift_retain_n(a1, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v36 = a6;
    v22 = v21;
    v32 = swift_slowAlloc(64, -1);
    v40 = v32;
    *(_DWORD *)v22 = 136315394;
    v33 = v14;
    v34 = a5;
    v35 = a4;
    v24 = *(_QWORD *)(a1 + 16);
    v23 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain(v23);
    v39 = sub_100011770(v24, v23, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v22 + 4, v22 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v22 + 12) = 2080;
    if (a3)
      v25 = v37;
    else
      v25 = 7104878;
    if (a3)
      v26 = a3;
    else
      v26 = 0xE300000000000000;
    swift_bridgeObjectRetain(a3);
    v27 = v25;
    a4 = v35;
    v39 = sub_100011770(v27, v26, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease_n(a3, 2);
    v28 = v26;
    v14 = v33;
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "🥑 ItemsDataService%s: delivered no model (internal timeout) for %s", (uint8_t *)v22, 0x16u);
    v29 = v32;
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    v30 = v22;
    a6 = v36;
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    swift_release_n(a1, 2);
  }
  sub_10000CF4C((uint64_t)v16, (uint64_t)v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v13, 0, 1, v14);
  a4(v13);
  sub_10000EB5C((uint64_t)v13, &qword_1000555C8);
  sub_1000398C4(0xD000000000000022, 0x8000000100041670, a6, 0, 1);
  return sub_10000D7D0((uint64_t)v16);
}

uint64_t sub_10000A908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  void *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD aBlock[5];
  char *v56;

  v49 = a8;
  v43 = a7;
  v44 = a3;
  v45 = a5;
  v46 = a6;
  v42 = a1;
  v51 = type metadata accessor for DispatchWorkItemFlags(0);
  v54 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v50 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v52 = *(_QWORD *)(v11 - 8);
  v53 = v11;
  __chkstk_darwin(v11);
  v48 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for WidgetFamily(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ItemModel(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v17);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E08C(0, (unint64_t *)&qword_1000555D8, OS_dispatch_queue_ptr);
  v47 = static OS_dispatch_queue.main.getter();
  sub_10000CF4C(v42, (uint64_t)v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v43, v13);
  v21 = *(unsigned __int8 *)(v18 + 80);
  v22 = (v21 + 56) & ~v21;
  v23 = *(unsigned __int8 *)(v14 + 80);
  v24 = (v19 + v23 + v22) & ~v23;
  v25 = (v15 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (char *)swift_allocObject(&unk_100051E38, v25 + 8, v21 | v23 | 7);
  v27 = v44;
  *((_QWORD *)v26 + 2) = a2;
  *((_QWORD *)v26 + 3) = v27;
  v28 = v45;
  *((_QWORD *)v26 + 4) = a4;
  *((_QWORD *)v26 + 5) = v28;
  v29 = (uint64_t)&v26[v22];
  v30 = v46;
  *((_QWORD *)v26 + 6) = v46;
  sub_10000E5B8((uint64_t)v20, v29);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v26[v24], v16, v13);
  *(_QWORD *)&v26[v25] = v49;
  aBlock[4] = sub_10000E8A8;
  v56 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000125A8;
  aBlock[3] = &unk_100051E50;
  v31 = _Block_copy(aBlock);
  v32 = v56;
  swift_retain(a2);
  swift_bridgeObjectRetain(a4);
  swift_retain(v30);
  v33 = swift_release(v32);
  v34 = v48;
  static DispatchQoS.unspecified.getter(v33);
  aBlock[0] = _swiftEmptyArrayStorage;
  v35 = sub_10000EB1C((unint64_t *)&qword_1000555E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v36 = sub_100003EA4(&qword_1000555E8);
  v37 = sub_10000DA08();
  v39 = v50;
  v38 = v51;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v36, v37, v51, v35);
  v40 = (void *)v47;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v34, v39, v31);
  _Block_release(v31);

  (*(void (**)(char *, uint64_t))(v54 + 8))(v39, v38);
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v34, v53);
}

void sub_10000AC30(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v14 = sub_100003EA4(&qword_1000555C8);
  __chkstk_darwin(v14);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v17 = type metadata accessor for Logger(0);
  sub_10000CF34(v17, (uint64_t)qword_1000586D0);
  swift_retain_n(a1, 2);
  v18 = swift_bridgeObjectRetain_n(a3, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v29 = a2;
    v22 = v21;
    v23 = swift_slowAlloc(64, -1);
    v32 = a6;
    v30 = v23;
    v35 = v23;
    *(_DWORD *)v22 = 136315394;
    v31 = a5;
    v33 = a7;
    v25 = *(_QWORD *)(a1 + 16);
    v24 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain(v24);
    v34 = sub_100011770(v25, v24, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v22 + 4, v22 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v24);
    *(_WORD *)(v22 + 12) = 2080;
    swift_bridgeObjectRetain(a3);
    v34 = sub_100011770(v29, a3, &v35);
    a7 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "🥑 ItemsDataService%s: delivered removed model for %s", (uint8_t *)v22, 0x16u);
    v26 = v30;
    swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
    a6 = v32;
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    swift_release_n(a1, 2);
  }
  sub_10000CF4C(a6, (uint64_t)v16);
  v27 = type metadata accessor for ItemModel(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v16, 0, 1, v27);
  a4(v16);
  sub_10000EB5C((uint64_t)v16, &qword_1000555C8);
  sub_1000398C4(0xD000000000000022, 0x8000000100041670, a7, *(_BYTE *)(a6 + 37), 0);
}

uint64_t sub_10000AF24(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD), uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v37 = a2;
  v11 = sub_100003EA4(&qword_1000555C8);
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ItemModel(0);
  v38 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019A88(2, 1, 0, 0, 0, 0, (unint64_t)v16);
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v17 = type metadata accessor for Logger(0);
  sub_10000CF34(v17, (uint64_t)qword_1000586D0);
  swift_bridgeObjectRetain_n(a3, 2);
  v18 = swift_retain_n(a1, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v36 = a6;
    v22 = v21;
    v32 = swift_slowAlloc(64, -1);
    v40 = v32;
    *(_DWORD *)v22 = 136315394;
    v33 = v14;
    v34 = a5;
    v35 = a4;
    v24 = *(_QWORD *)(a1 + 16);
    v23 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain(v23);
    v39 = sub_100011770(v24, v23, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v22 + 4, v22 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v22 + 12) = 2080;
    if (a3)
      v25 = v37;
    else
      v25 = 7104878;
    if (a3)
      v26 = a3;
    else
      v26 = 0xE300000000000000;
    swift_bridgeObjectRetain(a3);
    v27 = v25;
    a4 = v35;
    v39 = sub_100011770(v27, v26, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease_n(a3, 2);
    v28 = v26;
    v14 = v33;
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "🥑 ItemsDataService%s: delivered no model (not found or none or error) for %s", (uint8_t *)v22, 0x16u);
    v29 = v32;
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    v30 = v22;
    a6 = v36;
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    swift_release_n(a1, 2);
  }
  sub_10000CF4C((uint64_t)v16, (uint64_t)v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v13, 0, 1, v14);
  a4(v13);
  sub_10000EB5C((uint64_t)v13, &qword_1000555C8);
  sub_1000398C4(0xD000000000000022, 0x8000000100041670, a6, 0, 0);
  return sub_10000D7D0((uint64_t)v16);
}

double sub_10000B2B8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  uint64_t v7;
  id v8;
  double result;

  v4 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v7 = sub_10000E08C(0, &qword_100055610, CLPlacemark_ptr);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }
  swift_retain(v5);
  v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  *(_QWORD *)&result = swift_bridgeObjectRelease(v4).n128_u64[0];
  return result;
}

uint64_t sub_10000B344(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

void sub_10000B3AC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[2];

  v2 = *(_QWORD *)(type metadata accessor for FMIPItem(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_10000CE14(v3);
  v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_10000B42C(v5);
  *a1 = v3;
}

void sub_10000B42C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  Swift::Int v22;
  unint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD, _QWORD, _QWORD);
  char *v35;
  uint64_t v36;
  __n128 v37;
  void (*v38)(char *, uint64_t, __n128);
  char *v39;
  Swift::Int v40;
  uint64_t v41;
  Swift::Int v42;
  char *v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::Int v57;
  Swift::Int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t, void (*)(_QWORD, _QWORD, _QWORD));
  char *v66;
  Swift::Int v67;
  Swift::Int v68;
  uint64_t v69;
  Swift::Int v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  __n128 v84;
  void (*v85)(char *, uint64_t, __n128);
  uint64_t v86;
  char *v87;
  char *v88;
  void (*v89)(char *, char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  Swift::Int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  char v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  unint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  Swift::Int v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  void (*v160)(char *, uint64_t, uint64_t, void (*)(_QWORD, _QWORD, _QWORD));
  Swift::Int v161;
  unint64_t v162;
  uint64_t (*v163)(char *, uint64_t, uint64_t);
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  Swift::Int v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;

  v2 = v1;
  v4 = sub_100003EA4(&qword_100055628);
  __chkstk_darwin(v4);
  v168 = (char *)&v151 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FMIPItem(0);
  v178 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v155 = (char *)&v151 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v171 = (char *)&v151 - v10;
  v11 = __chkstk_darwin(v9);
  v167 = (char *)&v151 - v12;
  __chkstk_darwin(v11);
  v166 = (char *)&v151 - v13;
  v14 = a1[1];
  v15 = _minimumMergeRunLength(_:)(v14);
  if (v15 >= v14)
  {
    if (v14 < 0)
      goto LABEL_140;
    if (v14)
      sub_10000C0A0(0, v14, 1, a1);
    return;
  }
  if (v14 >= 0)
    v16 = v14;
  else
    v16 = v14 + 1;
  if (v14 < -1)
    goto LABEL_148;
  v152 = v15;
  if (v14 < 2)
  {
    v21 = (char *)_swiftEmptyArrayStorage;
    v162 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v178 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80));
    v151 = _swiftEmptyArrayStorage;
    if (v14 != 1)
    {
      v23 = _swiftEmptyArrayStorage[2];
LABEL_106:
      v143 = v162;
      if (v23 >= 2)
      {
        v144 = *a1;
        do
        {
          v145 = v23 - 2;
          if (v23 < 2)
            goto LABEL_135;
          if (!v144)
            goto LABEL_147;
          v146 = *(_QWORD *)&v21[16 * v145 + 32];
          v147 = *(_QWORD *)&v21[16 * v23 + 24];
          sub_10000C3C0(v144 + *(_QWORD *)(v178 + 72) * v146, v144 + *(_QWORD *)(v178 + 72) * *(_QWORD *)&v21[16 * v23 + 16], v144 + *(_QWORD *)(v178 + 72) * v147, v143);
          if (v2)
            break;
          if (v147 < v146)
            goto LABEL_136;
          if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
            v21 = sub_10000CC20((uint64_t)v21);
          if (v145 >= *((_QWORD *)v21 + 2))
            goto LABEL_137;
          v148 = &v21[16 * v145 + 32];
          *(_QWORD *)v148 = v146;
          *((_QWORD *)v148 + 1) = v147;
          v149 = *((_QWORD *)v21 + 2);
          if (v23 > v149)
            goto LABEL_138;
          memmove(&v21[16 * v23 + 16], &v21[16 * v23 + 32], 16 * (v149 - v23));
          *((_QWORD *)v21 + 2) = v149 - 1;
          v23 = v149 - 1;
        }
        while (v149 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease(v21);
      v150 = v151;
      v151[2] = 0;
      swift_bridgeObjectRelease(v150);
      return;
    }
    v20 = v162;
  }
  else
  {
    v17 = v16 >> 1;
    v18 = static Array._allocateBufferUninitialized(minimumCapacity:)(v16 >> 1, v6);
    *(_QWORD *)(v18 + 16) = v17;
    v19 = (*(unsigned __int8 *)(v178 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80);
    v151 = (_QWORD *)v18;
    v20 = v18 + v19;
  }
  v22 = 0;
  v21 = (char *)_swiftEmptyArrayStorage;
  v173 = a1;
  v162 = v20;
  v170 = v6;
  while (1)
  {
    v24 = v22 + 1;
    v161 = v22;
    if (v22 + 1 >= v14)
    {
      v40 = v22 + 1;
    }
    else
    {
      v156 = v2;
      v25 = *a1;
      v26 = *(_QWORD *)(v178 + 72);
      v154 = v25;
      v27 = *(void (**)(char *, uint64_t, uint64_t))(v178 + 16);
      v28 = v166;
      v27(v166, v25 + v26 * v24, v6);
      v169 = v14;
      v29 = v167;
      v164 = (char *)v27;
      v30 = ((uint64_t (*)(char *, uint64_t, uint64_t))v27)(v167, v25 + v26 * v22, v6);
      v176 = FMIPItem.name.getter(v30);
      v177 = v31;
      v174 = FMIPItem.name.getter(v176);
      v175 = v32;
      v33 = type metadata accessor for Locale(0);
      v34 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v33 - 8) + 56);
      v35 = v168;
      v163 = (uint64_t (*)(char *, uint64_t, uint64_t))v33;
      v160 = (void (*)(char *, uint64_t, uint64_t, void (*)(_QWORD, _QWORD, _QWORD)))v34;
      v34(v168, 1, 1);
      v159 = sub_100003F74();
      v165 = (char *)StringProtocol.compare<A>(_:options:range:locale:)(&v174, 1, 0, 0, 1, v35, &type metadata for String, &type metadata for String, v159, v159);
      v36 = (uint64_t)v35;
      v6 = v170;
      sub_10000EB5C(v36, &qword_100055628);
      swift_bridgeObjectRelease(v175);
      v37 = swift_bridgeObjectRelease(v177);
      v38 = *(void (**)(char *, uint64_t, __n128))(v178 + 8);
      v39 = v29;
      v14 = v169;
      v38(v39, v6, v37);
      ((void (*)(char *, uint64_t))v38)(v28, v6);
      v40 = v161 + 2;
      v172 = v26;
      if (v161 + 2 >= v14)
      {
        v2 = v156;
        v54 = v26;
      }
      else
      {
        v153 = v21;
        v41 = v154;
        v157 = v26 * v40;
        v158 = v26 * v24;
        while (1)
        {
          v42 = v40;
          v43 = v166;
          v44 = v165 == (char *)-1;
          v45 = v170;
          v46 = (uint64_t (*)(char *, uint64_t, uint64_t))v164;
          ((void (*)(char *, uint64_t, uint64_t))v164)(v166, v41 + v157, v170);
          v47 = v167;
          v48 = v46(v167, v41 + v158, v45);
          v176 = FMIPItem.name.getter(v48);
          v177 = v49;
          v174 = FMIPItem.name.getter(v176);
          v175 = v50;
          v51 = (uint64_t)v168;
          v160(v168, 1, 1, (void (*)(_QWORD, _QWORD, _QWORD))v163);
          v52 = StringProtocol.compare<A>(_:options:range:locale:)(&v174, 1, 0, 0, 1, v51, &type metadata for String, &type metadata for String, v159, v159);
          sub_10000EB5C(v51, &qword_100055628);
          swift_bridgeObjectRelease(v175);
          v53 = swift_bridgeObjectRelease(v177);
          v38(v47, v45, v53);
          ((void (*)(char *, uint64_t))v38)(v43, v45);
          if (v44 == (v52 != -1))
            break;
          v40 = v42 + 1;
          v54 = v172;
          v41 += v172;
          v14 = v169;
          if (v169 == v42 + 1)
          {
            v40 = v169;
            v2 = v156;
            v21 = v153;
            v6 = v170;
            goto LABEL_25;
          }
        }
        v2 = v156;
        v21 = v153;
        v14 = v169;
        v6 = v170;
        v40 = v42;
        v54 = v172;
      }
LABEL_25:
      a1 = v173;
      v22 = v161;
      if (v165 == (char *)-1)
      {
        if (v40 < v161)
          goto LABEL_143;
        if (v161 < v40)
        {
          v153 = v21;
          v55 = 0;
          v56 = v54 * (v40 - 1);
          v57 = v40 * v54;
          v58 = v161;
          v59 = v161 * v54;
          do
          {
            if (v58 != v40 + v55 - 1)
            {
              v156 = v2;
              v62 = v154;
              if (!v154)
                goto LABEL_146;
              v63 = v154 + v59;
              v64 = v154 + v56;
              v165 = *(char **)(v178 + 32);
              ((void (*)(char *, uint64_t, uint64_t))v165)(v155, v154 + v59, v170);
              if (v59 < v56 || v63 >= v62 + v57)
              {
                v60 = v62 + v59;
                v61 = v62 + v56;
                v6 = v170;
                swift_arrayInitWithTakeFrontToBack(v60, v61);
              }
              else
              {
                v6 = v170;
                if (v59 != v56)
                  swift_arrayInitWithTakeBackToFront(v63, v64);
              }
              ((void (*)(uint64_t, char *, uint64_t))v165)(v64, v155, v6);
              v54 = v172;
              a1 = v173;
              v2 = v156;
            }
            ++v58;
            --v55;
            v56 -= v54;
            v57 -= v54;
            v59 += v54;
          }
          while (v58 < v40 + v55);
          v21 = v153;
          v22 = v161;
          v14 = v169;
        }
      }
    }
    if (v40 < v14)
    {
      if (__OFSUB__(v40, v22))
        goto LABEL_139;
      if (v40 - v22 < v152)
        break;
    }
LABEL_57:
    if (v40 < v22)
      goto LABEL_134;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
    v169 = v40;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v21 = sub_10000CA1C(0, *((_QWORD *)v21 + 2) + 1, 1, v21);
    v92 = *((_QWORD *)v21 + 2);
    v91 = *((_QWORD *)v21 + 3);
    v23 = v92 + 1;
    if (v92 >= v91 >> 1)
      v21 = sub_10000CA1C((char *)(v91 > 1), v92 + 1, 1, v21);
    *((_QWORD *)v21 + 2) = v23;
    v93 = v21 + 32;
    v94 = &v21[16 * v92 + 32];
    v95 = v169;
    *(_QWORD *)v94 = v22;
    *((_QWORD *)v94 + 1) = v95;
    if (v92)
    {
      while (1)
      {
        v96 = v23 - 1;
        if (v23 >= 4)
        {
          v101 = &v93[16 * v23];
          v102 = *((_QWORD *)v101 - 8);
          v103 = *((_QWORD *)v101 - 7);
          v107 = __OFSUB__(v103, v102);
          v104 = v103 - v102;
          if (v107)
            goto LABEL_123;
          v106 = *((_QWORD *)v101 - 6);
          v105 = *((_QWORD *)v101 - 5);
          v107 = __OFSUB__(v105, v106);
          v99 = v105 - v106;
          v100 = v107;
          if (v107)
            goto LABEL_124;
          v108 = v23 - 2;
          v109 = &v93[16 * v23 - 32];
          v111 = *(_QWORD *)v109;
          v110 = *((_QWORD *)v109 + 1);
          v107 = __OFSUB__(v110, v111);
          v112 = v110 - v111;
          if (v107)
            goto LABEL_126;
          v107 = __OFADD__(v99, v112);
          v113 = v99 + v112;
          if (v107)
            goto LABEL_129;
          if (v113 >= v104)
          {
            v131 = &v93[16 * v96];
            v133 = *(_QWORD *)v131;
            v132 = *((_QWORD *)v131 + 1);
            v107 = __OFSUB__(v132, v133);
            v134 = v132 - v133;
            if (v107)
              goto LABEL_133;
            v124 = v99 < v134;
            goto LABEL_94;
          }
        }
        else
        {
          if (v23 != 3)
          {
            v125 = *((_QWORD *)v21 + 4);
            v126 = *((_QWORD *)v21 + 5);
            v107 = __OFSUB__(v126, v125);
            v118 = v126 - v125;
            v119 = v107;
            goto LABEL_88;
          }
          v98 = *((_QWORD *)v21 + 4);
          v97 = *((_QWORD *)v21 + 5);
          v107 = __OFSUB__(v97, v98);
          v99 = v97 - v98;
          v100 = v107;
        }
        if ((v100 & 1) != 0)
          goto LABEL_125;
        v108 = v23 - 2;
        v114 = &v93[16 * v23 - 32];
        v116 = *(_QWORD *)v114;
        v115 = *((_QWORD *)v114 + 1);
        v117 = __OFSUB__(v115, v116);
        v118 = v115 - v116;
        v119 = v117;
        if (v117)
          goto LABEL_128;
        v120 = &v93[16 * v96];
        v122 = *(_QWORD *)v120;
        v121 = *((_QWORD *)v120 + 1);
        v107 = __OFSUB__(v121, v122);
        v123 = v121 - v122;
        if (v107)
          goto LABEL_131;
        if (__OFADD__(v118, v123))
          goto LABEL_132;
        if (v118 + v123 >= v99)
        {
          v124 = v99 < v123;
LABEL_94:
          if (v124)
            v96 = v108;
          goto LABEL_96;
        }
LABEL_88:
        if ((v119 & 1) != 0)
          goto LABEL_127;
        v127 = &v93[16 * v96];
        v129 = *(_QWORD *)v127;
        v128 = *((_QWORD *)v127 + 1);
        v107 = __OFSUB__(v128, v129);
        v130 = v128 - v129;
        if (v107)
          goto LABEL_130;
        if (v130 < v118)
          goto LABEL_15;
LABEL_96:
        v135 = v96 - 1;
        if (v96 - 1 >= v23)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        v136 = *a1;
        if (!*a1)
          goto LABEL_145;
        v137 = v21;
        v138 = &v93[16 * v135];
        v139 = *(_QWORD *)v138;
        v140 = &v93[16 * v96];
        v141 = *((_QWORD *)v140 + 1);
        sub_10000C3C0(v136 + *(_QWORD *)(v178 + 72) * *(_QWORD *)v138, v136 + *(_QWORD *)(v178 + 72) * *(_QWORD *)v140, v136 + *(_QWORD *)(v178 + 72) * v141, v162);
        if (v2)
        {
          v21 = v137;
          goto LABEL_117;
        }
        if (v141 < v139)
          goto LABEL_120;
        if (v96 > *((_QWORD *)v137 + 2))
          goto LABEL_121;
        *(_QWORD *)v138 = v139;
        *(_QWORD *)&v93[16 * v135 + 8] = v141;
        v142 = *((_QWORD *)v137 + 2);
        if (v96 >= v142)
          goto LABEL_122;
        v21 = v137;
        v23 = v142 - 1;
        memmove(&v93[16 * v96], v140 + 16, 16 * (v142 - 1 - v96));
        *((_QWORD *)v137 + 2) = v142 - 1;
        a1 = v173;
        v6 = v170;
        if (v142 <= 2)
          goto LABEL_15;
      }
    }
    v23 = 1;
LABEL_15:
    v14 = a1[1];
    v22 = v169;
    if (v169 >= v14)
      goto LABEL_106;
  }
  if (__OFADD__(v22, v152))
    goto LABEL_141;
  if (v22 + v152 >= v14)
    v65 = (void (*)(char *, uint64_t, uint64_t, void (*)(_QWORD, _QWORD, _QWORD)))v14;
  else
    v65 = (void (*)(char *, uint64_t, uint64_t, void (*)(_QWORD, _QWORD, _QWORD)))(v22 + v152);
  if ((uint64_t)v65 >= v22)
  {
    if ((void (*)(char *, uint64_t, uint64_t, void (*)(_QWORD, _QWORD, _QWORD)))v40 != v65)
    {
      v153 = v21;
      v156 = v2;
      v66 = *(char **)(v178 + 72);
      v163 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v178 + 16);
      v164 = v66;
      v172 = (_QWORD)v66 * (v40 - 1);
      v67 = v40 * (_QWORD)v66;
      v160 = v65;
      do
      {
        v69 = 0;
        v70 = v22;
        v169 = v40;
        v165 = (char *)v67;
        while (1)
        {
          v71 = *a1;
          v72 = (char *)(v67 + v69 + *a1);
          v73 = v166;
          v74 = v163;
          v163(v166, (uint64_t)v72, v6);
          v75 = v6;
          v76 = v167;
          v77 = v74(v167, v172 + v69 + v71, v75);
          v176 = FMIPItem.name.getter(v77);
          v177 = v78;
          v174 = FMIPItem.name.getter(v176);
          v175 = v79;
          v80 = type metadata accessor for Locale(0);
          v81 = (uint64_t)v168;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v168, 1, 1, v80);
          v82 = sub_100003F74();
          v83 = StringProtocol.compare<A>(_:options:range:locale:)(&v174, 1, 0, 0, 1, v81, &type metadata for String, &type metadata for String, v82, v82);
          sub_10000EB5C(v81, &qword_100055628);
          swift_bridgeObjectRelease(v175);
          v84 = swift_bridgeObjectRelease(v177);
          v85 = *(void (**)(char *, uint64_t, __n128))(v178 + 8);
          v85(v76, v75, v84);
          ((void (*)(char *, uint64_t))v85)(v73, v75);
          if (v83 != -1)
            break;
          v86 = *v173;
          if (!*v173)
            goto LABEL_144;
          v67 = (Swift::Int)v165;
          v87 = &v165[v86 + v69];
          v88 = (char *)(v86 + v172 + v69);
          v89 = *(void (**)(char *, char *, uint64_t))(v178 + 32);
          v6 = v170;
          v89(v171, v87, v170);
          swift_arrayInitWithTakeFrontToBack(v87, v88);
          v89(v88, v171, v6);
          v69 -= (uint64_t)v164;
          ++v70;
          v68 = v169;
          a1 = v173;
          if (v169 == v70)
            goto LABEL_50;
        }
        v68 = v169;
        v6 = v170;
        a1 = v173;
        v67 = (Swift::Int)v165;
LABEL_50:
        v40 = v68 + 1;
        v172 += (uint64_t)v164;
        v67 += (Swift::Int)v164;
        v22 = v161;
      }
      while ((void (*)(char *, uint64_t, uint64_t, void (*)(_QWORD, _QWORD, _QWORD)))v40 != v160);
      v40 = (Swift::Int)v160;
      v2 = v156;
      v21 = v153;
    }
    goto LABEL_57;
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_10000C0A0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __n128 v30;
  void (*v31)(char *, uint64_t, __n128);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  _QWORD *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v39 = a1;
  v7 = sub_100003EA4(&qword_100055628);
  __chkstk_darwin(v7);
  v44 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FMIPItem(0);
  v48 = *(_QWORD **)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v47 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v43 = (char *)&v37 - v13;
  result = __chkstk_darwin(v12);
  v42 = (char *)&v37 - v15;
  v46 = a3;
  v38 = a2;
  if (a3 != a2)
  {
    v16 = v48[9];
    v40 = (uint64_t (*)(char *, uint64_t, uint64_t))v48[2];
    v41 = a4;
    v54 = v16 * (v46 - 1);
    v45 = v16;
    v49 = v16 * v46;
LABEL_5:
    v17 = 0;
    v18 = v39;
    while (1)
    {
      v19 = *a4;
      v20 = v42;
      v21 = v40;
      v40(v42, v49 + v17 + *a4, v9);
      v22 = v43;
      v23 = v21(v43, v54 + v17 + v19, v9);
      v52 = FMIPItem.name.getter(v23);
      v53 = v24;
      v50 = FMIPItem.name.getter(v52);
      v51 = v25;
      v26 = type metadata accessor for Locale(0);
      v27 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v44, 1, 1, v26);
      v28 = sub_100003F74();
      v29 = StringProtocol.compare<A>(_:options:range:locale:)(&v50, 1, 0, 0, 1, v27, &type metadata for String, &type metadata for String, v28, v28);
      sub_10000EB5C(v27, &qword_100055628);
      swift_bridgeObjectRelease(v51);
      v30 = swift_bridgeObjectRelease(v53);
      v31 = (void (*)(char *, uint64_t, __n128))v48[1];
      v32 = v22;
      a4 = v41;
      v31(v32, v9, v30);
      result = ((uint64_t (*)(char *, uint64_t))v31)(v20, v9);
      if (v29 != -1)
      {
LABEL_4:
        v54 += v45;
        v49 += v45;
        if (++v46 == v38)
          return result;
        goto LABEL_5;
      }
      v33 = *a4;
      if (!*a4)
        break;
      v34 = v33 + v49 + v17;
      v35 = v33 + v54 + v17;
      v36 = (void (*)(char *, uint64_t, uint64_t))v48[4];
      v36(v47, v34, v9);
      swift_arrayInitWithTakeFrontToBack(v34, v35);
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v36)(v35, v47, v9);
      v17 -= v45;
      if (v46 == ++v18)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10000C3C0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __n128 v34;
  void (*v35)(char *, uint64_t, __n128);
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, unint64_t, uint64_t);
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __n128 v55;
  void (*v56)(char *, uint64_t, __n128);
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t result;
  uint64_t v64;
  uint64_t (*v65)(char *, unint64_t, uint64_t);
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;

  v68 = a4;
  v69 = a3;
  v6 = sub_100003EA4(&qword_100055628);
  __chkstk_darwin(v6);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for FMIPItem(0);
  v9 = __chkstk_darwin(v72);
  v70 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v64 - v11;
  v71 = v13;
  v14 = *(_QWORD *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1)
    goto LABEL_62;
  v15 = v69 - a2;
  if (v69 - a2 == 0x8000000000000000 && v14 == -1)
    goto LABEL_63;
  v16 = (uint64_t)(a2 - a1) / v14;
  v79 = a1;
  v78 = v68;
  v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      v20 = v17 * v14;
      v21 = v68;
      if (v68 < a2 || a2 + v20 <= v68)
      {
        swift_arrayInitWithTakeFrontToBack(v68, a2);
      }
      else if (v68 != a2)
      {
        swift_arrayInitWithTakeBackToFront(v68, a2);
      }
      v39 = v21 + v20;
      v77 = v21 + v20;
      v79 = a2;
      v40 = v20 < 1 || a1 >= a2;
      v41 = v69;
      if (!v40)
      {
        v42 = -v14;
        v65 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v71 + 16);
        v66 = v8;
        v67 = a1;
        do
        {
          v69 = v41 + v42;
          v43 = v72;
          v44 = v65;
          v65(v12, v39 + v42, v72);
          v45 = a2 + v42;
          v46 = v12;
          v47 = v70;
          v48 = v44(v70, a2 + v42, v43);
          v49 = v42;
          v75 = FMIPItem.name.getter(v48);
          v76 = v50;
          v73 = FMIPItem.name.getter(v75);
          v74 = v51;
          v52 = type metadata accessor for Locale(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v8, 1, 1, v52);
          v53 = sub_100003F74();
          v54 = StringProtocol.compare<A>(_:options:range:locale:)(&v73, 1, 0, 0, 1, v8, &type metadata for String, &type metadata for String, v53, v53);
          sub_10000EB5C((uint64_t)v8, &qword_100055628);
          swift_bridgeObjectRelease(v74);
          v55 = swift_bridgeObjectRelease(v76);
          v56 = *(void (**)(char *, uint64_t, __n128))(v71 + 8);
          v57 = v47;
          v12 = v46;
          v56(v57, v43, v55);
          ((void (*)(char *, uint64_t))v56)(v46, v43);
          if (v54 == -1)
          {
            v42 = v49;
            v60 = v69;
            if (v41 < a2 || v69 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v69, v45);
              v8 = v66;
              v61 = v67;
              v62 = v68;
            }
            else
            {
              v8 = v66;
              v61 = v67;
              v62 = v68;
              if (v41 != a2)
                swift_arrayInitWithTakeBackToFront(v69, v45);
            }
            v79 += v42;
          }
          else
          {
            v58 = v77;
            v59 = v77 + v49;
            v77 += v49;
            v42 = v49;
            v60 = v69;
            if (v41 < v58 || v69 >= v58)
            {
              swift_arrayInitWithTakeFrontToBack(v69, v59);
              v45 = a2;
              v8 = v66;
              v61 = v67;
              v62 = v68;
            }
            else
            {
              v8 = v66;
              v61 = v67;
              v62 = v68;
              if (v41 != v58)
                swift_arrayInitWithTakeBackToFront(v69, v59);
              v45 = a2;
            }
          }
          v39 = v77;
          if (v77 <= v62)
            break;
          a2 = v45;
          v41 = v60;
        }
        while (v45 > v61);
      }
      goto LABEL_60;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    v18 = v16 * v14;
    v19 = v68;
    if (v68 < a1 || a1 + v18 <= v68)
    {
      swift_arrayInitWithTakeFrontToBack(v68, a1);
    }
    else if (v68 != a1)
    {
      swift_arrayInitWithTakeBackToFront(v68, a1);
    }
    v67 = v19 + v18;
    v77 = v19 + v18;
    if (v18 >= 1 && a2 < v69)
    {
      v23 = v19;
      v24 = v72;
      v25 = *(void (**)(char *, unint64_t, uint64_t))(v71 + 16);
      v26 = v70;
      do
      {
        v27 = v14;
        v25(v12, a2, v24);
        v28 = ((uint64_t (*)(char *, unint64_t, uint64_t))v25)(v26, v23, v24);
        v75 = FMIPItem.name.getter(v28);
        v76 = v29;
        v73 = FMIPItem.name.getter(v75);
        v74 = v30;
        v31 = type metadata accessor for Locale(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v8, 1, 1, v31);
        v32 = sub_100003F74();
        v33 = StringProtocol.compare<A>(_:options:range:locale:)(&v73, 1, 0, 0, 1, v8, &type metadata for String, &type metadata for String, v32, v32);
        sub_10000EB5C((uint64_t)v8, &qword_100055628);
        swift_bridgeObjectRelease(v74);
        v34 = swift_bridgeObjectRelease(v76);
        v35 = *(void (**)(char *, uint64_t, __n128))(v71 + 8);
        v35(v26, v24, v34);
        ((void (*)(char *, uint64_t))v35)(v12, v24);
        v36 = v79;
        if (v33 == -1)
        {
          v14 = v27;
          v38 = a2 + v27;
          if (v79 < a2 || v79 >= v38)
          {
            swift_arrayInitWithTakeFrontToBack(v79, a2);
          }
          else if (v79 == a2)
          {
            v36 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v79, a2);
          }
        }
        else
        {
          v14 = v27;
          v37 = v78 + v27;
          if (v79 < v78 || v79 >= v37)
          {
            swift_arrayInitWithTakeFrontToBack(v79, v78);
          }
          else if (v79 != v78)
          {
            swift_arrayInitWithTakeBackToFront(v79, v78);
          }
          v78 = v37;
          v38 = a2;
        }
        v79 = v36 + v14;
        v23 = v78;
        if (v78 >= v67)
          break;
        a2 = v38;
      }
      while (v38 < v69);
    }
LABEL_60:
    sub_10000CB14(&v79, &v78, (uint64_t *)&v77);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_10000CA1C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003EA4(&qword_100055630);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_10000CB14(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for FMIPItem(0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3, v4);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3, v4);
  return result;
}

char *sub_10000CC20(uint64_t a1)
{
  return sub_10000CA1C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10000CC34(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100003EA4(&qword_100055620);
  v11 = *(_QWORD *)(type metadata accessor for FMIPItem(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = *(_QWORD *)(type metadata accessor for FMIPItem(0) - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (char *)v15 + v19;
  v21 = (char *)a4 + v19;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(_QWORD *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v20, v21);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v22 = *(_QWORD *)(v18 + 72) * v8;
  v23 = &v20[v22];
  v24 = (unint64_t)&v21[v22];
  if (v21 >= v23 || (unint64_t)v20 >= v24)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10000CE14(_QWORD *a1)
{
  return sub_10000CC34(0, a1[2], 0, a1);
}

uint64_t sub_10000CE28(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, unint64_t a8, double a9, double a10, double a11)
{
  uint64_t v11;
  id v22;
  id v23;
  id v24;

  v22 = objc_allocWithZone((Class)CLGeocoder);
  swift_retain(v11);
  *(_QWORD *)(v11 + 128) = objc_msgSend(v22, "init");
  *(_QWORD *)(v11 + 136) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v11 + 144) = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  *(_QWORD *)(v11 + 64) = a1;
  *(_QWORD *)(v11 + 72) = a2;
  *(double *)(v11 + 80) = a9;
  *(_QWORD *)(v11 + 88) = a3;
  *(_QWORD *)(v11 + 96) = a4;
  *(_QWORD *)(v11 + 104) = a5;
  *(double *)(v11 + 112) = a10;
  *(_QWORD *)(v11 + 120) = a6;
  swift_bridgeObjectRetain(a2);
  v23 = a3;
  swift_bridgeObjectRetain(a5);
  v24 = a6;
  swift_release(v11);
  return sub_100038A5C(a7, a8, a11);
}

uint64_t sub_10000CF34(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_10000CF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ItemModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000CF90(uint64_t a1, char a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for WidgetFamily(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = __chkstk_darwin(v5);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100055360 != -1)
    result = swift_once(&qword_100055360, sub_10003D89C);
  if (qword_100055358 != -1)
    result = swift_once(&qword_100055358, sub_1000350C8);
  if ((a3 & 1) != 0 || (a2 & 1) != 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for WidgetFamily.systemSmall(_:), v5);
    v10 = sub_10000EB1C((unint64_t *)&qword_100055600, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    dispatch thunk of RawRepresentable.rawValue.getter(&v12, v5, v10);
    dispatch thunk of RawRepresentable.rawValue.getter(&v11, v5, v10);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

void sub_10000D17C(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  double *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91[2];

  v8 = v7;
  v83 = a3;
  v84 = a5;
  v82 = a4;
  v86 = type metadata accessor for WidgetFamily(0);
  v81 = *(_QWORD *)(v86 - 8);
  v13 = *(_QWORD *)(v81 + 64);
  __chkstk_darwin(v86);
  v89 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for FMIPItem(0);
  v80 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v78 = v14;
  v87 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for FMIPItemRole(0);
  v76 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v16 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003EA4(&qword_1000555F8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = FMIPItem.name.getter(v18);
  v22 = v21;
  FMIPItem.location.getter(v85);
  v23 = type metadata accessor for FMIPLocation(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v20, 1, v23) == 1)
  {
    sub_10000EB5C((uint64_t)v20, &qword_1000555F8);
  }
  else
  {
    v25 = (void *)FMIPLocation.location.getter();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v20, v23);

  }
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v26 = type metadata accessor for Logger(0);
  sub_10000CF34(v26, (uint64_t)qword_1000586D0);
  swift_retain_n(v8, 2);
  v27 = swift_bridgeObjectRetain_n(v22, 2);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter();
  v30 = os_log_type_enabled(v28, v29);
  v79 = v22;
  if (v30)
  {
    v31 = swift_slowAlloc(32, -1);
    v32 = swift_slowAlloc(96, -1);
    v75 = v13;
    v33 = v32;
    v91[0] = v32;
    *(_DWORD *)v31 = 136315650;
    v74 = a1;
    v73 = a2;
    v35 = v8[2];
    v34 = v8[3];
    swift_bridgeObjectRetain(v34);
    v90 = sub_100011770(v35, v34, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91, v31 + 4, v31 + 12);
    swift_release_n(v8, 2);
    swift_bridgeObjectRelease(v34);
    *(_WORD *)(v31 + 12) = 2080;
    swift_bridgeObjectRetain(v22);
    v90 = sub_100011770(v85, v22, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease_n(v22, 3);
    *(_WORD *)(v31 + 22) = 2080;
    v36 = CGSize.debugDescription.getter(a6, a7);
    v38 = v37;
    v90 = sub_100011770(v36, v37, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91, v31 + 24, v31 + 32);
    v39 = v38;
    a2 = v73;
    a1 = v74;
    swift_bridgeObjectRelease(v39);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "🥑 ItemsDataService%s: loading \"%s\" for %s…", (uint8_t *)v31, 0x20u);
    swift_arrayDestroy(v33, 3, (char *)&type metadata for Any + 8);
    v40 = v33;
    v13 = v75;
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v22, 2);
    swift_release_n(v8, 2);
  }
  sub_10000CF90(a2, 0, 1);
  v42 = v41;
  v44 = v43;
  if (qword_100055358 != -1)
    swift_once(&qword_100055358, sub_1000350C8);
  if (*((double *)&xmmword_100058730 + 1) >= *(double *)&xmmword_100058730 * a7)
    v45 = *(double *)&xmmword_100058730 * a7;
  else
    v45 = *((double *)&xmmword_100058730 + 1);
  v75 = v8[13];
  v46 = (void *)v8[15];
  swift_bridgeObjectRetain(v75);
  v74 = v46;
  v47 = FMIPItem.role.getter();
  v73 = FMIPItemRole.emoji.getter(v47);
  v72 = v48;
  (*(void (**)(char *, unint64_t))(v76 + 8))(v16, v77);
  v49 = v80;
  (*(void (**)(char *, id, uint64_t))(v80 + 16))(v87, a1, v88);
  v50 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v89, a2, v86);
  v51 = *(unsigned __int8 *)(v49 + 80);
  v52 = (v51 + 16) & ~v51;
  v53 = (v78 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
  v54 = *(unsigned __int8 *)(v50 + 80);
  v55 = (v54 + v53 + 8) & ~v54;
  v56 = (v13 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
  v57 = (v56 + 23) & 0xFFFFFFFFFFFFFFF8;
  v58 = (v57 + 23) & 0xFFFFFFFFFFFFFFF8;
  v78 = (v58 + 23) & 0xFFFFFFFFFFFFFFF8;
  v77 = (v78 + 15) & 0xFFFFFFFFFFFFFFF8;
  v59 = swift_allocObject(&unk_100051CA8, v77 + 16, v51 | v54 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v59 + v52, v87, v88);
  *(_QWORD *)(v59 + v53) = v8;
  v60 = v8;
  (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v59 + v55, v89, v86);
  v61 = (double *)(v59 + v56);
  *v61 = a6;
  v61[1] = a7;
  v62 = (_QWORD *)(v59 + v57);
  v63 = v84;
  v64 = v79;
  *v62 = v85;
  v62[1] = v64;
  v65 = (_QWORD *)(v59 + v58);
  *v65 = v42;
  v65[1] = v44;
  v66 = v82;
  v67 = v83;
  *(_QWORD *)(v59 + v78) = v83;
  v68 = (_QWORD *)(v59 + v77);
  *v68 = v66;
  v68[1] = v63;
  swift_retain(v60);
  swift_errorRetain(v67);
  swift_retain(v63);
  v69 = v72;
  v70 = v74;
  sub_100036A54(v73, v72, (uint64_t)sub_10000DCD4, v59, (uint64_t)v74, v45);
  swift_release(v59);

  swift_bridgeObjectRelease(v75);
  swift_bridgeObjectRelease(v69);
}

uint64_t sub_10000D7D0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ItemModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000D80C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 8));
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, ((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_10000D8DC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v7 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_100008F24(a1, a2, a3, *(_QWORD *)(v3 + 16), v3 + v8, *(double *)(v3 + v9), *(double *)(v3 + v9 + 8), *(_QWORD *)(v3 + v10), *(_QWORD *)(v3 + v11), *(_QWORD *)(v3 + v11 + 8), *(_QWORD *)(v3 + ((v11 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v3 + ((v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v3 + ((((v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10000D998(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003EA4(&qword_1000555D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000D9E4()
{
  return sub_10000DA64((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char *, _QWORD))sub_10000AF24);
}

uint64_t sub_10000D9F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000DA00(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10000DA08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000555F0;
  if (!qword_1000555F0)
  {
    v1 = sub_100003EE4(&qword_1000555E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000555F0);
  }
  return result;
}

uint64_t sub_10000DA58()
{
  return sub_10000DA64((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char *, _QWORD))sub_10000A574);
}

uint64_t sub_10000DA64(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char *, _QWORD))
{
  char *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return a1(*((_QWORD *)v1 + 2), *((_QWORD *)v1 + 3), *((_QWORD *)v1 + 4), *((_QWORD *)v1 + 5), *((_QWORD *)v1 + 6), &v1[v3], *(_QWORD *)&v1[(*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8]);
}

uint64_t sub_10000DAC4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*((_QWORD *)v0 + 2));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 6));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10000DB54(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100009868(a1, v1[2], v1[3], v1[4], v1[5], v1[6], (uint64_t)v1 + v4, *(uint64_t *)((char *)v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10000DBB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v13 = type metadata accessor for FMIPItem(0);
  v1 = *(_QWORD *)(v13 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = type metadata accessor for WidgetFamily(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + v7 + 8) & ~v7;
  v14 = v2 | v7 | 7;
  v9 = (((*(_QWORD *)(v6 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = (((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v13);
  swift_release(*(_QWORD *)(v0 + v4));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 8));
  swift_errorRelease(*(_QWORD *)(v0 + v10));
  swift_release(*(_QWORD *)(v0 + v11 + 8));
  return swift_deallocObject(v0, v11 + 16, v14);
}

void sub_10000DCD4(void *a1, void *a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v7 = *(_QWORD *)(type metadata accessor for FMIPItem(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  v11 = (v9 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = (*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_100006F14(a1, a2, a3, v3 + v8, *(_QWORD *)(v3 + v9), v3 + v11, *(void **)(v3 + v13), *(_QWORD *)(v3 + v13 + 8), *(double *)(v3 + v12), *(double *)(v3 + v12 + 8), *(double *)(v3 + v14), *(double *)(v3 + v14 + 8), *(_QWORD *)(v3 + ((v14 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(unint64_t))(v3 + ((((v14 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(unint64_t))(v3+ ((((v14 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8));
}

id sub_10000DDCC(id result, void *a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_10000DDE4(result, a2, a3 & 1);
  return result;
}

id sub_10000DDE4(void *a1, void *a2, char a3)
{
  id v3;
  id v5;

  if ((a3 & 1) != 0)
  {
    v5 = a1;
    v3 = a2;
    a1 = v5;
  }
  return a1;
}

uint64_t sub_10000DE0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1 = type metadata accessor for FMIPItem(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 80) & ~v3;
  v5 = (v4 + *(_QWORD *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v6 = v0 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = *(unsigned __int8 *)(v6 + 16);
  if (v7 != 255)
    sub_10000DEEC(*(void **)v6, *(void **)(v6 + 8), v7 & 1);
  v8 = (v5 + 47) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_errorRelease(*(_QWORD *)(v0 + v8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 8));
  swift_release(*(_QWORD *)(v0 + v10 + 8));
  return swift_deallocObject(v0, v10 + 16, v3 | 7);
}

void sub_10000DEEC(void *a1, void *a2, char a3)
{

  if ((a3 & 1) != 0)
}

void sub_10000DF30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(type metadata accessor for FMIPItem(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  v6 = ((v5 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_100008130(a1, *(double **)(v1 + 16), v1 + v4, *(unsigned __int8 *)(v1 + v5), *(void **)(v1 + (((v5 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v1 + (((v5 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned __int8 *)(v1 + (((v5 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(v1 + v6), *(CLLocationDegrees *)(v1 + 24), *(CLLocationDegrees *)(v1 + 32), *(CLLocationDistance *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56), *(double *)(v1 + 64), *(double *)(v1 + 72), *(double *)((v5 & 0xFFFFFFFFFFFFFFF8) + v1 + 8), *(_QWORD *)(v1 + v7), *(_QWORD *)(v1 + v7 + 8), *(_QWORD *)(v1 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)),
    *(_QWORD *)(v1 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10000DFF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003EA4(&qword_100055608);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10000E03C(void *a1, void *a2, unsigned __int8 a3)
{
  if (a3 != 255)
    sub_10000DEEC(a1, a2, a3 & 1);
}

uint64_t sub_10000E054()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10000E080(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10003C15C(a1, a2, *(void **)(v2 + 16), *(void (**)(_QWORD))(v2 + 24));
}

uint64_t sub_10000E08C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t *sub_10000E0C4(uint64_t *a1)
{
  sub_10000E114(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13]);
  return a1;
}

uint64_t sub_10000E114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain(a14);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a10);
    return swift_bridgeObjectRetain(a12);
  }
  return result;
}

uint64_t sub_10000E198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v1 = type metadata accessor for FMIPItem(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v5 + 127) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v10 = (_QWORD *)(v0 + v6);
  v11 = v10[1];
  if (v11 != 1)
  {
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v10[3]);
    swift_bridgeObjectRelease(v10[5]);
    swift_bridgeObjectRelease(v10[7]);
    swift_bridgeObjectRelease(v10[9]);
    swift_bridgeObjectRelease(v10[11]);
    swift_bridgeObjectRelease(v10[13]);
  }
  swift_release(*(_QWORD *)(v0 + v7));
  v12 = *(unsigned __int8 *)(v0 + v9 + 16);
  if (v12 != 255)
    sub_10000DEEC(*(void **)(v0 + v9), *(void **)(v0 + v9 + 8), v12 & 1);
  v13 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_errorRelease(*(_QWORD *)(v0 + v13));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v14 + 8));
  swift_release(*(_QWORD *)(v0 + v15 + 8));
  return swift_deallocObject(v0, v15 + 16, v3 | 7);
}

uint64_t sub_10000E2C4(void *a1, void *a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v7 = *(_QWORD *)(type metadata accessor for FMIPItem(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v8 + *(_QWORD *)(v7 + 64);
  v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v9 + 127) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 39) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_10000840C(a1, a2, a3, v3 + v8, (uint64_t *)(v3 + v10), *(unsigned __int8 *)(v3 + v10 + 112), *(_QWORD *)(v3 + v11), *(void **)(v3 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8)), *(double *)(v3 + v12), *(void **)(v3 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(v3 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(v3 + v13), *(_QWORD *)(v3 + v14), *(_QWORD *)(v3 + v14 + 8), *(uint64_t **)(v3 + ((v14 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v3 + ((v14 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10000E3A8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = (int *)type metadata accessor for ItemModel(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for WidgetFamily(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v23 = v7;
  v24 = v6;
  v22 = *(_QWORD *)(v7 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v9 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 24));
  v10 = v0 + v4 + v1[12];
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[15] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[16] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[20] + 8));
  v13 = *(_QWORD *)(v9 + v1[21] + 16);
  if (v13 != 1)
    swift_bridgeObjectRelease(v13);
  v14 = v9 + v1[22];
  v15 = *(unsigned __int8 *)(v14 + 16);
  if (v15 != 255)
    sub_10000DEEC(*(void **)v14, *(void **)(v14 + 8), v15 & 1);
  v16 = v9 + v1[26];
  v17 = *(unsigned __int8 *)(v16 + 16);
  if (v17 != 255)
    sub_10000DEEC(*(void **)v16, *(void **)(v16 + 8), v17 & 1);
  v18 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v8 + v19 + 16) & ~v8;
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[29] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[30] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v18 + 8));
  swift_release(*(_QWORD *)(v0 + v19 + 8));
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v0 + v20, v24);
  return swift_deallocObject(v0, ((v22 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | v8 | 7);
}

uint64_t sub_10000E5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ItemModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10000E5FC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for ItemModel(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = type metadata accessor for WidgetFamily(0);
  sub_100009BAC(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(void (**)(_QWORD))(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80) + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80)));
}

uint64_t sub_10000E69C()
{
  return sub_10000E8B4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char *, char *, _QWORD))sub_10000A264);
}

uint64_t sub_10000E6AC()
{
  char *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  char *v14;
  int v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (int *)type metadata accessor for ItemModel(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v20 = *(_QWORD *)(v2 + 64);
  v21 = type metadata accessor for WidgetFamily(0);
  v5 = *(_QWORD *)(v21 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v19 = *(_QWORD *)(v5 + 64);
  swift_release(*((_QWORD *)v0 + 2));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 6));
  v7 = &v0[v4];
  swift_bridgeObjectRelease(*(_QWORD *)&v0[v4 + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[v4 + 24]);
  v8 = &v0[v4 + v1[12]];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)&v7[v1[13] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v7[v1[15] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v7[v1[16] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v7[v1[17] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v7[v1[20] + 8]);
  v11 = *(_QWORD *)&v7[v1[21] + 16];
  if (v11 != 1)
    swift_bridgeObjectRelease(v11);
  v12 = &v7[v1[22]];
  v13 = v12[16];
  if (v13 != 255)
    sub_10000DEEC(*(void **)v12, *((void **)v12 + 1), v13 & 1);
  v14 = &v7[v1[26]];
  v15 = v14[16];
  if (v15 != 255)
    sub_10000DEEC(*(void **)v14, *((void **)v14 + 1), v15 & 1);
  v16 = (v4 + v20 + v6) & ~v6;
  swift_bridgeObjectRelease(*(_QWORD *)&v7[v1[29] + 8]);
  v17 = swift_bridgeObjectRelease(*(_QWORD *)&v7[v1[30] + 8]);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(&v0[v16], v21, v17);
  return swift_deallocObject(v0, ((v19 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | v6 | 7);
}

uint64_t sub_10000E8A8()
{
  return sub_10000E8B4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char *, char *, _QWORD))sub_10000AC30);
}

uint64_t sub_10000E8B4(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char *, char *, _QWORD))
{
  char *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(type metadata accessor for ItemModel(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return a1(*((_QWORD *)v1 + 2), *((_QWORD *)v1 + 3), *((_QWORD *)v1 + 4), *((_QWORD *)v1 + 5), *((_QWORD *)v1 + 6), &v1[v3], &v1[v6], *(_QWORD *)&v1[(*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8]);
}

uint64_t sub_10000E944()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10000E954()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10000E990()
{
  uint64_t v0;

  return sub_100005CB4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_10000E9A4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10000E9D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_100006040(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_10000E9E4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10000EA30(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1000065FC(a1, a2, a3, a4, *(_QWORD **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 56), *(void **)(v4 + 64), *(_QWORD *)(v4 + 72));
}

uint64_t sub_10000EA64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000EA90()
{
  uint64_t v0;

  return sub_100006E7C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10000EA98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000EAA8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10000EAC8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10000EAFC()
{
  uint64_t v0;

  return sub_100006D98(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE **)(v0 + 40), *(_BYTE **)(v0 + 48));
}

uint64_t sub_10000EB0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000EB1C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000EB5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100003EA4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10000EB9C()
{
  unint64_t result;

  result = qword_100055640;
  if (!qword_100055640)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100055640);
  }
  return result;
}

uint64_t sub_10000EC24@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  void (*v37)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  v3 = v2;
  v48 = a2;
  v5 = type metadata accessor for WidgetRenderingMode(0);
  v40 = *(_QWORD *)(v5 - 8);
  v41 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v39 - v9;
  v11 = type metadata accessor for ColorScheme(0);
  v42 = *(_QWORD *)(v11 - 8);
  v43 = v11;
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 16);
  v44 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v12);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003EE4(&qword_100055820);
  v45 = v15;
  v19 = type metadata accessor for ModifiedContent(0, v15, v18);
  v46 = *(_QWORD *)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v39 - v24;
  (*(void (**)(uint64_t))(v3 + *(int *)(a1 + 40)))(v23);
  v47 = a1;
  v39 = v3;
  v26 = sub_1000111B8(&qword_100055708, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x8000000100041AB0, (uint64_t)v10);
  static WidgetRenderingMode.accented.getter(v26);
  LOBYTE(v15) = static WidgetRenderingMode.== infix(_:_:)(v10, v8);
  v27 = *(void (**)(char *, uint64_t))(v40 + 8);
  v28 = v8;
  v29 = v41;
  v27(v28, v41);
  v27(v10, v29);
  if ((v15 & 1) != 0)
  {
    v31 = v42;
    v30 = v43;
    (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v14, enum case for ColorScheme.dark(_:), v43);
  }
  else
  {
    sub_1000111B8(&qword_100055700, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v14);
    v31 = v42;
    v30 = v43;
  }
  v32 = *(_QWORD *)(v47 + 24);
  v33 = v45;
  View.colorScheme(_:)(v14, v45, v32);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v30);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v17, v33);
  v34 = sub_100012354(&qword_100055828, &qword_100055820, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v49 = v32;
  v50 = v34;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  v35 = v46;
  v36 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v36(v25, v22, v19);
  v37 = *(void (**)(char *, uint64_t))(v35 + 8);
  v37(v22, v19);
  v36(v48, v25, v19);
  return ((uint64_t (*)(char *, uint64_t))v37)(v25, v19);
}

uint64_t sub_10000EF5C()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_10000EF78()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100012274(v0, qword_1000586D0);
  sub_10000CF34(v0, (uint64_t)qword_1000586D0);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x8000000100041A90, 0xD000000000000011, 0x8000000100042870);
}

uint64_t sub_10000EFF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  id v51;
  Swift::String v52;
  Swift::String_optional v53;
  Swift::String v54;
  Swift::String v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, _QWORD, uint64_t);
  uint64_t v68;
  uint64_t OpaqueTypeConformance2;
  char *v70;
  uint64_t v71;
  __n128 v72;
  NSBundle v73;
  Swift::String v74;
  Swift::String_optional v75;
  Swift::String v76;
  Swift::String v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  __n128 v81;
  void *v82;
  uint64_t v83;
  char *v84;
  void *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  Swift::String v124;
  uint64_t v125;
  unint64_t v126;
  Swift::String v127;
  Swift::String v128;

  v2 = v1;
  v118 = a1;
  v102 = sub_100003EA4(&qword_100055398);
  v100 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v99 = (char *)&v91 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_100003EA4(&qword_100055390);
  v104 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v103 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100003EA4(&qword_100055388);
  v107 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v106 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_100003EA4(&qword_100055380);
  v110 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v108 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_100003EA4(&qword_100055378);
  v113 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v111 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003EA4(&qword_1000557B0);
  v116 = *(_QWORD *)(v8 - 8);
  v117 = v8;
  __chkstk_darwin(v8);
  v114 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetFamily(0);
  v11 = *(unsigned __int8 **)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FMWidget(0);
  v96 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v96 + 64);
  v16 = __chkstk_darwin(v14);
  v97 = (uint64_t)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v91 - v18;
  v101 = v17;
  v20 = (uint64_t *)(v1 + *(int *)(v17 + 24));
  v21 = *v20;
  v22 = v20[1];
  v23 = type metadata accessor for ItemProvider();
  swift_allocObject(v23, 40, 7);
  swift_bridgeObjectRetain(v22);
  v121 = sub_1000125D4(v21, v22);
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v98 = v11;
  v119 = v10;
  v24 = type metadata accessor for Logger(0);
  sub_10000CF34(v24, (uint64_t)qword_1000586D0);
  v25 = sub_1000115A8(v2, (uint64_t)v19);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  v28 = os_log_type_enabled(v26, v27);
  v120 = v2;
  if (v28)
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v94 = v15;
    v93 = v30;
    v124._countAndFlagsBits = v30;
    *(_DWORD *)v29 = 136315138;
    v92 = v29 + 4;
    v95 = v23;
    sub_1000111B8(&qword_100055650, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, (uint64_t)v13);
    v31 = sub_10000EB1C(&qword_1000557D8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v32 = v13;
    v33 = v119;
    v34 = dispatch thunk of CustomStringConvertible.description.getter(v119, v31);
    v36 = v35;
    v37 = v98;
    (*((void (**)(char *, uint64_t))v98 + 1))(v32, v33);
    v122 = sub_100011770(v34, v36, &v124._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v92, v29 + 12);
    v38 = v36;
    v23 = v95;
    swift_bridgeObjectRelease(v38);
    sub_1000115EC((uint64_t)v19);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "🥑 Avocado called (w/intents) Widget.body(%s)", v29, 0xCu);
    v39 = v93;
    swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
    v15 = v94;
    swift_slowDealloc(v39, -1, -1);
    v40 = v29;
    v2 = v120;
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {
    sub_1000115EC((uint64_t)v19);

    v37 = v98;
  }
  v41 = type metadata accessor for ItemSelectorIntent();
  v42 = v121;
  v124._countAndFlagsBits = (uint64_t)v121;
  v43 = v97;
  sub_1000115A8(v2, v97);
  v44 = *(unsigned __int8 *)(v96 + 80);
  v45 = (v44 + 16) & ~v44;
  v46 = swift_allocObject(&unk_1000520B0, v45 + v15, v44 | 7);
  sub_1000116E0(v43, v46 + v45);
  swift_retain(v42);
  v47 = sub_100003EA4(&qword_1000557B8);
  v48 = sub_100012354(&qword_1000557C0, &qword_1000557B8, (uint64_t)&unk_100042908);
  v49 = sub_10000EB1C(&qword_1000557C8, (uint64_t (*)(uint64_t))type metadata accessor for ItemProvider, (uint64_t)&unk_100042A90);
  v50 = v99;
  IntentConfiguration.init<A>(kind:intent:provider:content:)(0xD000000000000022, 0x8000000100041670, v41, &v124, sub_100011724, v46, v41, v47, v23, v48, v49);
  v98 = (unsigned __int8 *)objc_opt_self(NSBundle);
  v51 = objc_msgSend(v98, "mainBundle");
  v127._object = (void *)0xED0000736D657449;
  v52._countAndFlagsBits = 0x20794D20646E6946;
  v52._object = (void *)0xED0000736D657449;
  v53.value._countAndFlagsBits = 0xD000000000000010;
  v53.value._object = (void *)0x8000000100041870;
  v54._countAndFlagsBits = 0;
  v54._object = (void *)0xE000000000000000;
  v127._countAndFlagsBits = 0x20794D20646E6946;
  v55 = NSLocalizedString(_:tableName:bundle:value:comment:)(v52, v53, (NSBundle)v51, v54, v127);

  v124 = v55;
  v56 = sub_100012354((unint64_t *)&qword_1000553A0, &qword_100055398, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  v57 = sub_100003F74();
  v58 = v103;
  v59 = v102;
  WidgetConfiguration.configurationDisplayName<A>(_:)(&v124, v102, &type metadata for String, v56, v57);
  v60 = swift_bridgeObjectRelease(v55._object);
  (*(void (**)(char *, uint64_t, __n128))(v100 + 8))(v50, v59, v60);
  v61 = sub_100003EA4(&qword_1000557D0);
  v62 = (char *)*((_QWORD *)v37 + 9);
  v63 = v37[80];
  v64 = (v63 + 32) & ~v63;
  v65 = swift_allocObject(v61, v64 + 2 * (_QWORD)v62, v63 | 7);
  *(_OWORD *)(v65 + 16) = xmmword_100042880;
  v66 = v65 + v64;
  v67 = (void (*)(uint64_t, _QWORD, uint64_t))*((_QWORD *)v37 + 13);
  v68 = v119;
  v67(v66, enum case for WidgetFamily.systemSmall(_:), v119);
  v67((uint64_t)&v62[v66], enum case for WidgetFamily.systemMedium(_:), v68);
  v124._countAndFlagsBits = v59;
  v124._object = &type metadata for String;
  v125 = v56;
  v126 = v57;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v124, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v70 = v106;
  v71 = v105;
  WidgetConfiguration.supportedFamilies(_:)(v65, v105, OpaqueTypeConformance2);
  v72 = swift_bridgeObjectRelease(v65);
  (*(void (**)(char *, uint64_t, __n128))(v104 + 8))(v58, v71, v72);
  v73.super.isa = (Class)objc_msgSend(v98, "mainBundle");
  v74._countAndFlagsBits = 0xD00000000000001CLL;
  v74._object = (void *)0x8000000100041890;
  v128._object = (void *)0x8000000100041890;
  v75.value._countAndFlagsBits = 0xD000000000000010;
  v75.value._object = (void *)0x8000000100041870;
  v76._countAndFlagsBits = 0;
  v76._object = (void *)0xE000000000000000;
  v128._countAndFlagsBits = 0xD00000000000001CLL;
  v77 = NSLocalizedString(_:tableName:bundle:value:comment:)(v74, v75, v73, v76, v128);

  v124 = v77;
  v122 = v71;
  v123 = OpaqueTypeConformance2;
  v78 = swift_getOpaqueTypeConformance2(&v122, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v80 = v108;
  v79 = v109;
  WidgetConfiguration.description<A>(_:)(&v124, v109, &type metadata for String, v78, v57);
  v81 = swift_bridgeObjectRelease(v77._object);
  (*(void (**)(char *, uint64_t, __n128))(v107 + 8))(v70, v79, v81);
  LOBYTE(v73.super.isa) = *(_BYTE *)(v120 + *(int *)(v101 + 20));
  v124._countAndFlagsBits = v79;
  v124._object = &type metadata for String;
  v125 = v78;
  v126 = v57;
  v82 = (void *)swift_getOpaqueTypeConformance2(&v124, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v84 = v111;
  v83 = v112;
  WidgetConfiguration.visibilityConfigurableByInternalSettings(visibleByDefault:)(((uint64_t)v73.super.isa & 1) == 0, v112, v82);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v80, v83);
  v124._countAndFlagsBits = v83;
  v124._object = v82;
  v85 = (void *)swift_getOpaqueTypeConformance2(&v124, &opaque type descriptor for <<opaque return type of WidgetConfiguration.visibilityConfigurableByInternalSettings(visibleByDefault:)>>, 1);
  v87 = v114;
  v86 = v115;
  WidgetConfiguration._containerBackgroundRemovable(_:)(0, v115, v85);
  (*(void (**)(char *, uint64_t))(v113 + 8))(v84, v86);
  v124._countAndFlagsBits = v86;
  v124._object = v85;
  v88 = swift_getOpaqueTypeConformance2(&v124, &unk_1000442B4, 1);
  v89 = v117;
  WidgetConfiguration.supportsAccentedContent()(v117, v88);
  swift_release(v121);
  return (*(uint64_t (**)(char *, uint64_t))(v116 + 8))(v87, v89);
}

uint64_t sub_10000F9F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t v16;

  v4 = sub_100003EA4(&qword_1000557E8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  sub_100012310(a1, (uint64_t)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1000557E8);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_1000520D8, v8 + v6, v7 | 7);
  sub_100012000((uint64_t)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8);
  *a2 = swift_getKeyPath(&unk_100042998);
  v10 = sub_100003EA4(&qword_100055700);
  swift_storeEnumTagMultiPayload(a2, v10, 0);
  v11 = sub_100003EA4(&qword_1000557B8);
  v12 = (_QWORD *)((char *)a2 + *(int *)(v11 + 36));
  *v12 = swift_getKeyPath(&unk_1000429C8);
  v13 = sub_100003EA4(&qword_100055708);
  result = swift_storeEnumTagMultiPayload(v12, v13, 0);
  v15 = (_QWORD *)((char *)a2 + *(int *)(v11 + 40));
  *v15 = sub_100012048;
  v15[1] = v9;
  return result;
}

void sub_10000FB2C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v4 = sub_100003EA4(&qword_1000557E8);
  __chkstk_darwin(v4);
  v6 = (char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012310(a1, (uint64_t)v6, &qword_1000557E8);
  sub_10000FBB0((uint64_t)v6, a2);
}

void sub_10000FBB0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  Swift::String v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _OWORD v49[14];
  uint64_t v50;

  *a2 = swift_getKeyPath(&unk_100042998);
  v4 = sub_100003EA4(&qword_100055700);
  swift_storeEnumTagMultiPayload(a2, v4, 0);
  v5 = (int *)sub_100003EA4(&qword_1000557F0);
  v6 = (_QWORD *)((char *)a2 + v5[9]);
  *v6 = swift_getKeyPath(&unk_1000429F8);
  v7 = sub_100003EA4(&qword_1000557F8);
  swift_storeEnumTagMultiPayload(v6, v7, 0);
  v8 = (_QWORD *)((char *)a2 + v5[10]);
  *v8 = swift_getKeyPath(&unk_1000429C8);
  v9 = sub_100003EA4(&qword_100055708);
  swift_storeEnumTagMultiPayload(v8, v9, 0);
  v10 = (_QWORD *)((char *)a2 + v5[12]);
  *v10 = 0;
  v10[1] = 0;
  v11 = v5[13];
  if (qword_100055360 != -1)
    swift_once(&qword_100055360, sub_10003D89C);
  v12 = (char *)a2 + v11;
  v13 = xmmword_1000588E0;
  v49[12] = xmmword_1000588F0;
  v49[13] = xmmword_100058900;
  v14 = xmmword_1000588A0;
  v15 = xmmword_1000588B0;
  v49[8] = xmmword_1000588B0;
  v49[9] = xmmword_1000588C0;
  v16 = xmmword_1000588C0;
  v17 = xmmword_1000588D0;
  v49[10] = xmmword_1000588D0;
  v49[11] = xmmword_1000588E0;
  v18 = xmmword_100058860;
  v19 = xmmword_100058870;
  v49[4] = xmmword_100058870;
  v49[5] = xmmword_100058880;
  v20 = xmmword_100058880;
  v21 = xmmword_100058890;
  v49[6] = xmmword_100058890;
  v49[7] = xmmword_1000588A0;
  v22 = xmmword_100058840;
  v23 = xmmword_100058850;
  v49[2] = xmmword_100058850;
  v49[3] = xmmword_100058860;
  v24 = xmmword_100058900;
  *((_OWORD *)v12 + 12) = xmmword_1000588F0;
  *((_OWORD *)v12 + 13) = v24;
  *((_OWORD *)v12 + 8) = v15;
  *((_OWORD *)v12 + 9) = v16;
  *((_OWORD *)v12 + 10) = v17;
  *((_OWORD *)v12 + 11) = v13;
  *((_OWORD *)v12 + 4) = v19;
  *((_OWORD *)v12 + 5) = v20;
  *((_OWORD *)v12 + 6) = v21;
  *((_OWORD *)v12 + 7) = v14;
  v25 = xmmword_100058840;
  *(_OWORD *)v12 = xmmword_100058830;
  *((_OWORD *)v12 + 1) = v22;
  v50 = qword_100058910;
  *((_OWORD *)v12 + 2) = v23;
  *((_OWORD *)v12 + 3) = v18;
  v26 = xmmword_100058830;
  *((_QWORD *)v12 + 28) = qword_100058910;
  v27 = (uint64_t)a2 + v5[11];
  v49[0] = v26;
  v49[1] = v25;
  sub_100012310(a1, v27, &qword_1000557E8);
  sub_100012154(v49);
  v28 = sub_100003EA4(&qword_100055800);
  v29 = sub_100012354(&qword_100055808, &qword_100055800, (uint64_t)&protocol conformance descriptor for UnsafePointer<A>);
  v30 = _Pointer.debugDescription.getter(v28, v29);
  v32 = v31;
  v33 = sub_100012188(9uLL, v30, v31);
  v35 = v34;
  v47 = 7876668;
  v48 = 0xE300000000000000;
  v43 = v33;
  v44 = v36;
  v45 = v37;
  v46 = v34;
  v38 = sub_100012230();
  String.append<A>(contentsOf:)(&v43, &type metadata for Substring, v38);
  swift_bridgeObjectRelease(v35);
  v39 = v48;
  v43 = v47;
  v44 = v48;
  swift_bridgeObjectRetain(v48);
  v40._countAndFlagsBits = 15987;
  v40._object = (void *)0xE200000000000000;
  String.append(_:)(v40);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v39);
  v41 = v43;
  v42 = v44;
  sub_10000EB5C(a1, &qword_1000557E8);
  swift_bridgeObjectRelease(v10[1]);
  *v10 = v41;
  v10[1] = v42;
}

void sub_10000FE64(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  unint64_t v17;
  Swift::String v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a1 = swift_getKeyPath(&unk_100042A28);
  v6 = sub_100003EA4(&qword_100055650);
  swift_storeEnumTagMultiPayload(a1, v6, 0);
  v7 = type metadata accessor for FMWidget(0);
  v8 = *(int *)(v7 + 20);
  sub_1000122D4();
  *((_BYTE *)a1 + v8) = static FMSystemInfo.isKoreaSKU()() & 1;
  v9 = (_QWORD *)((char *)a1 + *(int *)(v7 + 24));
  v10 = UUID.init()();
  v11 = UUID.uuidString.getter(v10);
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100012188(8uLL, v11, v13);
  v15 = v14;
  swift_bridgeObjectRelease(v13);
  v16 = Substring.lowercased()();
  swift_bridgeObjectRelease(v15);
  v20 = 60;
  v21 = 0xE100000000000000;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v16._object);
  v17 = v21;
  swift_bridgeObjectRetain(v21);
  v18._countAndFlagsBits = 62;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v17);
  v19 = v21;
  *v9 = v20;
  v9[1] = v19;
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for FMWidget(0);
  v4 = sub_10000EB1C(&qword_100055648, type metadata accessor for FMWidget, (uint64_t)&unk_100042958);
  static Widget.main()(v3, v4);
  return 0;
}

uint64_t type metadata accessor for FMWidget(uint64_t a1)
{
  uint64_t result;

  result = qword_1000556B8;
  if (!qword_1000556B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FMWidget);
  return result;
}

_QWORD *sub_10001008C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100003EA4(&qword_100055650);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain(v17);
  }
  return a1;
}

double sub_100010178(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  v4 = sub_100003EA4(&qword_100055650);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 24) + 8)).n128_u64[0];
  return result;
}

_QWORD *sub_1000101EC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = sub_100003EA4(&qword_100055650);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  return a1;
}

_QWORD *sub_1000102AC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_10000EB5C((uint64_t)a1, &qword_100055650);
    v6 = sub_100003EA4(&qword_100055650);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

char *sub_10001039C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100003EA4(&qword_100055650);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  return a1;
}

char *sub_10001044C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sub_10000EB5C((uint64_t)a1, &qword_100055650);
    v6 = sub_100003EA4(&qword_100055650);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v12 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v10 + 1);
  v13 = *((_QWORD *)v9 + 1);
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_100010524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100010530);
}

uint64_t sub_100010530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100003EA4(&qword_100055658);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000105B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000105C0);
}

uint64_t sub_1000105C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003EA4(&qword_100055658);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

void sub_100010640(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_100011064(319, (unint64_t *)&unk_1000556C8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1000428B0;
    v4[2] = &unk_1000428C8;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_1000106CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

void sub_1000106D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_100011064(319, (unint64_t *)&qword_1000557A0, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100011064(319, &qword_1000557A8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = (char *)&value witness table for () + 64;
      swift_initStructMetadata(a1, 0, 3, v6, a1 + 32);
    }
  }
}

uint64_t *sub_100010784(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100003EA4(&qword_100055700);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 36);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_100003EA4(&qword_100055708);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = *(int *)(a3 + 40);
    v24 = (uint64_t *)((char *)a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v12 = v25[1];
    *v24 = *v25;
    v24[1] = v12;
  }
  swift_retain(v12);
  return a1;
}

uint64_t sub_1000108E8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_100003EA4(&qword_100055700);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 36));
  v7 = sub_100003EA4(&qword_100055708);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 40) + 8));
}

uint64_t *sub_1000109B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v6 = sub_100003EA4(&qword_100055700);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 36);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_100003EA4(&qword_100055708);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = *(int *)(a3 + 40);
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  swift_retain(v24);
  return a1;
}

uint64_t *sub_100010AF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    sub_10000EB5C((uint64_t)a1, &qword_100055700);
    v6 = sub_100003EA4(&qword_100055700);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = *(int *)(a3 + 36);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_10000EB5C((uint64_t)a1 + v12, &qword_100055708);
    v15 = sub_100003EA4(&qword_100055708);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = *(int *)(a3 + 40);
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  v24 = v23[1];
  v25 = v22[1];
  *v22 = *v23;
  v22[1] = v24;
  swift_retain(v24);
  swift_release(v25);
  return a1;
}

char *sub_100010C60(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_100003EA4(&qword_100055700);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 36);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100003EA4(&qword_100055708);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  *(_OWORD *)&a1[*(int *)(a3 + 40)] = *(_OWORD *)&a2[*(int *)(a3 + 40)];
  return a1;
}

char *sub_100010D88(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_10000EB5C((uint64_t)a1, &qword_100055700);
    v6 = sub_100003EA4(&qword_100055700);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = *(int *)(a3 + 36);
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_10000EB5C((uint64_t)&a1[v8], &qword_100055708);
    v11 = sub_100003EA4(&qword_100055708);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = *(int *)(a3 + 40);
  v14 = *(_QWORD *)&a1[v13 + 8];
  *(_OWORD *)&a1[v13] = *(_OWORD *)&a2[v13];
  swift_release(v14);
  return a1;
}

uint64_t sub_100010EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100010EF0);
}

uint64_t sub_100010EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_100003EA4(&qword_100055710);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100003EA4(qword_100055718);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 36);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 40));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100010FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100010FAC);
}

uint64_t sub_100010FAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_100003EA4(&qword_100055710);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_100003EA4(qword_100055718);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 36);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ContentViewWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100012394(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContentViewWrapper);
}

void sub_100011064(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_1000110B0(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10004452C, 1);
}

uint64_t sub_1000110E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100044504, 1);
}

uint64_t sub_1000110F4()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_100011114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100011458(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_100011128()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_100011148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100011458(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_10001115C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000111B8(&qword_100055708, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x8000000100041AB0, a1);
}

uint64_t sub_100011188@<X0>(uint64_t a1@<X8>)
{
  return sub_1000111B8(&qword_100055700, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_1000111B8@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003EA4(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100012310(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = *v17;
    v21 = static os_log_type_t.fault.getter();
    v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      v27 = a4;
      v23 = swift_slowAlloc(12, -1);
      v28 = a5;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v31 = v25;
      *(_DWORD *)v24 = 136315138;
      v30 = sub_100011770(v29, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v24 + 4, v24 + 12);
      _os_log_impl((void *)&_mh_execute_header, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v14, v20);
    swift_release(v20);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_1000113F0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000111B8(&qword_1000557F8, (uint64_t (*)(_QWORD))&type metadata accessor for LayoutDirection, 0x694474756F79614CLL, 0xEF6E6F6974636572, a1);
}

uint64_t sub_100011424()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_100011444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100011458(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for LayoutDirection, (uint64_t (*)(char *))&EnvironmentValues.layoutDirection.setter);
}

uint64_t sub_100011458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  a5(0);
  __chkstk_darwin();
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_1000114D4(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1000114E4(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_100011518(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100011538(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a4();
  v8 = v7;
  v9 = sub_100011770(v6, v7, a3);
  v10 = *a1;
  v11 = *a1 + 8;
  v12 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v10, v11);
  swift_bridgeObjectRelease(v8);
  *a1 = v11;
}

uint64_t sub_1000115A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMWidget(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000115EC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FMWidget(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100011628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for FMWidget(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100003EA4(&qword_100055650);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + *(int *)(v1 + 24) + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000116E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMWidget(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100011724@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  type metadata accessor for FMWidget(0);
  return sub_10000F9F8(a1, a2);
}

uint64_t sub_100011770(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_100011840(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100011DE0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100011DE0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100011DC0(v12);
  return v7;
}

uint64_t sub_100011840(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1000119F8(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
}

uint64_t sub_1000119F8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_100011A8C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_100011C64(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100011C64(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_100011A8C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100011C00(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100011C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100003EA4(&qword_1000557E0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100011C64(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003EA4(&qword_1000557E0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_BYTE **sub_100011DB0(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t sub_100011DC0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100011DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100011E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  v1 = sub_100003EA4(&qword_1000557E8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v4, v6);
  v9 = v0 + v4 + *(int *)(v1 + 36);
  v10 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = type metadata accessor for ViewContext(0);
  swift_release(*(_QWORD *)(v9 + *(int *)(v11 + 24)));
  v12 = v0 + v4 + *(int *)(v1 + 40);
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + 24));
  v13 = (int *)type metadata accessor for ItemModel(0);
  v14 = v12 + v13[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v14, 1, v6))
    v8(v14, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v13[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v13[15] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v13[16] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v13[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v13[20] + 8));
  v15 = *(_QWORD *)(v12 + v13[21] + 16);
  if (v15 != 1)
    swift_bridgeObjectRelease(v15);
  v16 = v12 + v13[22];
  v17 = *(unsigned __int8 *)(v16 + 16);
  if (v17 != 255)
    sub_10000DEEC(*(void **)v16, *(void **)(v16 + 8), v17 & 1);
  v18 = v12 + v13[26];
  v19 = *(unsigned __int8 *)(v18 + 16);
  if (v19 != 255)
    sub_10000DEEC(*(void **)v18, *(void **)(v18 + 8), v19 & 1);
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v13[29] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v13[30] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100012000(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003EA4(&qword_1000557E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100012048(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_100003EA4(&qword_1000557E8) - 8) + 80);
  sub_10000FB2C(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_100012088()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000120A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100011458(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_1000120CC()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_1000120EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100011458(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_100012110()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_100012130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100011458(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for LayoutDirection, (uint64_t (*)(char *))&EnvironmentValues.layoutDirection.setter);
}

_QWORD *sub_100012154(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  swift_retain(*a1);
  swift_retain(v2);
  return a1;
}

unint64_t sub_100012188(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    result = String.index(_:offsetBy:limitedBy:)(v4 | (v3 << 16), -(uint64_t)result, 15, a2, a3);
    if ((v5 & 1) != 0)
      result = 15;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

unint64_t sub_100012230()
{
  unint64_t result;

  result = qword_100055810;
  if (!qword_100055810)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100055810);
  }
  return result;
}

uint64_t *sub_100012274(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_1000122B4()
{
  return EnvironmentValues.widgetFamily.getter();
}

unint64_t sub_1000122D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100055818;
  if (!qword_100055818)
  {
    v1 = objc_opt_self(FMSystemInfo);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100055818);
  }
  return result;
}

uint64_t sub_100012310(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003EA4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100012354(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100003EE4(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100012394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_1000123C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;

  v0 = sub_100003EE4(&qword_1000557B0);
  v1 = sub_100003EE4(&qword_100055378);
  v2 = sub_100003EE4(&qword_100055380);
  v3 = sub_100003EE4(&qword_100055388);
  v4 = sub_100003EE4(&qword_100055390);
  v5 = sub_100003EE4(&qword_100055398);
  v6 = sub_100012354((unint64_t *)&qword_1000553A0, &qword_100055398, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  v7 = sub_100003F74();
  v14 = v5;
  v15 = &type metadata for String;
  v16 = v6;
  v17 = v7;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v14 = v4;
  v15 = (void *)OpaqueTypeConformance2;
  v9 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v14 = v3;
  v15 = &type metadata for String;
  v16 = v9;
  v17 = v7;
  v10 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v14 = v2;
  v15 = (void *)v10;
  v11 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of WidgetConfiguration.visibilityConfigurableByInternalSettings(visibleByDefault:)>>, 1);
  v14 = v1;
  v15 = (void *)v11;
  v12 = swift_getOpaqueTypeConformance2(&v14, &unk_1000442B4, 1);
  v14 = v0;
  v15 = (void *)v12;
  return swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportsAccentedContent()>>, 1);
}

uint64_t sub_100012528(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = sub_100003EE4(&qword_100055820);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_100012354(&qword_100055828, &qword_100055820, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

uint64_t sub_1000125A8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

_QWORD *sub_1000125D4(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  v6 = sub_100003EA4(&qword_1000558F0);
  v7 = swift_allocObject(v6, 16, 7);
  v2[3] = a2;
  v2[4] = v7;
  v2[2] = a1;
  v8 = qword_100055338;
  swift_bridgeObjectRetain(a2);
  if (v8 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v9 = type metadata accessor for Logger(0);
  sub_10000CF34(v9, (uint64_t)qword_1000586D0);
  v10 = swift_bridgeObjectRetain(a2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v17 = v14;
    *(_DWORD *)v13 = 136315138;
    swift_bridgeObjectRetain(a2);
    v16 = sub_100011770(a1, a2, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "🥑 ItemProvider%s init", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  return v3;
}

_QWORD *sub_1000127A4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v2 = type metadata accessor for Logger(0);
  sub_10000CF34(v2, (uint64_t)qword_1000586D0);
  v3 = swift_retain(v0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v12 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = v1[2];
    v9 = v1[3];
    swift_bridgeObjectRetain(v9);
    v11 = sub_100011770(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v6 + 4, v6 + 12);
    swift_release(v1);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "🥑 ItemProvider%s: deinit", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release(v1);
  }
  swift_bridgeObjectRelease(v1[3]);
  swift_release(v1[4]);
  return v1;
}

uint64_t sub_100012958()
{
  uint64_t v0;

  sub_1000127A4();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for ItemProvider()
{
  return objc_opt_self(_TtC17FindMyWidgetItems12ItemProvider);
}

uint64_t sub_100012998()
{
  return sub_100012354(qword_1000558D8, &qword_1000557E8, (uint64_t)&unk_100042B80);
}

uint64_t sub_1000129C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[48];
  _OWORD v57[2];

  v3 = v2;
  v51 = a1;
  v54 = a2;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WidgetFamily(0);
  v53 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v52 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for ViewContext(0);
  __chkstk_darwin(v50);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ItemModel(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v15 = type metadata accessor for Logger(0);
  sub_10000CF34(v15, (uint64_t)qword_1000586D0);
  v16 = swift_retain(v2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(12, -1);
    v49 = v4;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v48 = v5;
    v22 = v21;
    *(_QWORD *)&v57[0] = v21;
    *(_DWORD *)v20 = 136315138;
    v46 = v11;
    v45 = v8;
    v47 = v7;
    v23 = *(_QWORD *)(v3 + 16);
    v24 = *(_QWORD *)(v3 + 24);
    swift_bridgeObjectRetain(v24);
    v55 = sub_100011770(v23, v24, (uint64_t *)v57);
    v8 = v45;
    v11 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v20 + 4, v20 + 12);
    swift_release(v3);
    v25 = v24;
    v7 = v47;
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "🥑 ItemProvider%s: asked and delivered placeholder", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v26 = v22;
    v5 = v48;
    swift_slowDealloc(v26, -1, -1);
    v27 = v20;
    v4 = v49;
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    v28 = swift_release(v3);
  }
  v29 = TimelineProviderContext.displaySize.getter(v28);
  v31 = v30;
  sub_100019A88(2, 1, 0, 0, 0, 0, (unint64_t)v14);
  memset(v57, 0, sizeof(v57));
  v32 = sub_100003EA4(qword_100055910);
  inited = swift_initStackObject(v32, v56);
  v34 = sub_1000150EC((uint64_t)v57, inited + 16);
  v35 = v52;
  TimelineProviderContext.family.getter(v34);
  v36 = v53;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v11, v35, v8);
  if (qword_100055340 != -1)
    swift_once(&qword_100055340, sub_1000167E8);
  v37 = qword_100055AB0;
  v38 = v50;
  v39 = (double *)&v11[*(int *)(v50 + 20)];
  *v39 = v29;
  *((_QWORD *)v39 + 1) = v31;
  *(_QWORD *)&v11[*(int *)(v38 + 24)] = v37;
  swift_retain(v37);
  swift_release(inited);
  v40 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v35, v8);
  Date.init()(v40);
  v41 = v54;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v54, v7, v4);
  v42 = sub_100003EA4(&qword_1000557E8);
  sub_100015134((uint64_t)v11, v41 + *(int *)(v42 + 36), type metadata accessor for ViewContext);
  sub_100015134((uint64_t)v14, v41 + *(int *)(v42 + 40), type metadata accessor for ItemModel);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_100015178((uint64_t)v11, type metadata accessor for ViewContext);
  return sub_100015178((uint64_t)v14, type metadata accessor for ItemModel);
}

uint64_t sub_100012E40(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  double v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v5 = v4;
  v10 = type metadata accessor for WidgetFamily(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = a2;
  v15 = TimelineProviderContext.displaySize.getter(v12);
  v17 = v16;
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v18 = type metadata accessor for Logger(0);
  sub_10000CF34(v18, (uint64_t)qword_1000586D0);
  v19 = a1;
  swift_retain(v5);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v41 = v11;
    v42 = v10;
    v43 = a3;
    v39 = a4;
    v23 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(64, -1);
    v46 = v24;
    *(_DWORD *)v23 = 136315394;
    v25 = *(_QWORD *)(v5 + 16);
    v26 = *(_QWORD *)(v5 + 24);
    swift_bridgeObjectRetain(v26);
    v45 = sub_100011770(v25, v26, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v23 + 4, v23 + 12);
    swift_release(v5);
    *(_QWORD *)&v27 = swift_bridgeObjectRelease(v26).n128_u64[0];
    *(_WORD *)(v23 + 12) = 2080;
    v28 = objc_msgSend(v19, "source", v27);
    v40 = v24;
    if (v28
      && (v29 = v28,
          v30 = objc_msgSend(v28, "itemIdentifier"),
          v29,
          v30))
    {
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      v33 = v32;

      v34 = v31;
      v35 = v33;
      a4 = v39;
    }
    else
    {
      a4 = v39;
      v35 = 0xA90000000000008FLL;
      v34 = 0xB8EF8981E26C696ELL;
    }
    v45 = sub_100011770(v34, v35, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v23 + 14, v23 + 22);

    swift_bridgeObjectRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "🥑 ItemProvider%s: asking snapshot for %s…", (uint8_t *)v23, 0x16u);
    v37 = v40;
    swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v10 = v42;
    a3 = v43;
    v11 = v41;
  }
  else
  {

    v36 = swift_release(v5);
  }
  TimelineProviderContext.family.getter(v36);
  sub_100013168(v19, (uint64_t)v14, a3, a4, v15, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

void sub_100013168(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  void (*v49)(char *, _QWORD *);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  double *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  _QWORD *v72;
  uint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  char *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  double *v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  _QWORD *v102;
  id v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(_QWORD, _QWORD, _QWORD);
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  _QWORD *v129;
  uint64_t aBlock[5];
  uint64_t v131;

  v7 = v6;
  v125 = a3;
  v126 = a4;
  v12 = type metadata accessor for DispatchTimeInterval(0);
  v119 = *(_QWORD *)(v12 - 8);
  v120 = v12;
  __chkstk_darwin(v12);
  v118 = (uint64_t *)((char *)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v121 = type metadata accessor for DispatchTime(0);
  v116 = *(_QWORD *)(v121 - 8);
  v14 = __chkstk_darwin(v121);
  v115 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v117 = (char *)&v105 - v16;
  v113 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v113);
  v114 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for WidgetFamily(0);
  v112 = *(_QWORD *)(v124 - 8);
  v18 = *(_QWORD *)(v112 + 64);
  __chkstk_darwin(v124);
  v128 = (char *)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (_QWORD *)type metadata accessor for Date(0);
  v20 = (void (*)(_QWORD, _QWORD, _QWORD))*(v19 - 1);
  __chkstk_darwin(v19);
  v22 = (char *)&v105 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v23 = type metadata accessor for Logger(0);
  sub_10000CF34(v23, (uint64_t)qword_1000586D0);
  v24 = a1;
  swift_retain(v6);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  v28 = os_log_type_enabled(v26, v27);
  v122 = v24;
  v127 = v6;
  if (v28)
  {
    v110 = v20;
    v111 = v19;
    v123 = v18;
    v29 = swift_slowAlloc(32, -1);
    v109 = swift_slowAlloc(96, -1);
    aBlock[0] = v109;
    *(_DWORD *)v29 = 136315650;
    v30 = v7;
    v31 = *(_QWORD *)(v7 + 16);
    v32 = *(_QWORD *)(v30 + 24);
    swift_bridgeObjectRetain(v32);
    v129 = (_QWORD *)sub_100011770(v31, v32, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, aBlock, v29 + 4, v29 + 12);
    swift_release(v30);
    swift_bridgeObjectRelease(v32);
    *(_WORD *)(v29 + 12) = 2080;
    v33 = CGSize.debugDescription.getter(a5, a6);
    v35 = v34;
    v129 = (_QWORD *)sub_100011770(v33, v34, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, aBlock, v29 + 14, v29 + 22);
    *(_QWORD *)&v36 = swift_bridgeObjectRelease(v35).n128_u64[0];
    *(_WORD *)(v29 + 22) = 2080;
    v37 = v122;
    v38 = objc_msgSend(v122, "source", v36);
    if (v38
      && (v39 = v38,
          v40 = objc_msgSend(v38, "itemIdentifier"),
          v39,
          v40))
    {
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v43 = v42;

      v44 = v41;
    }
    else
    {
      v43 = 0xE300000000000000;
      v44 = 7104878;
    }
    v129 = (_QWORD *)sub_100011770(v44, v43, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, aBlock, v29 + 24, v29 + 32);

    swift_bridgeObjectRelease(v43);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "🥑🥑 ItemProvider%s: asking current entry %s for %s…", (uint8_t *)v29, 0x20u);
    v46 = v109;
    swift_arrayDestroy(v109, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    v7 = v127;
    v18 = v123;
    v19 = v111;
    v20 = v110;
  }
  else
  {

    v45 = swift_release(v6);
  }
  v47 = Date.init()(v45);
  v48 = Date.timeIntervalSinceReferenceDate.getter(v47);
  v49 = (void (*)(char *, _QWORD *))*((_QWORD *)v20 + 1);
  v49(v22, v19);
  v50 = type metadata accessor for UserDefaultsManager();
  v51 = swift_allocObject(v50, 16, 7);
  v52 = *(_QWORD *)(v7 + 16);
  v53 = *(_QWORD *)(v7 + 24);
  objc_allocWithZone((Class)type metadata accessor for DataManager());
  swift_bridgeObjectRetain(v53);
  v54 = sub_1000327B0(v51, v52, v53, v48);
  v55 = swift_allocObject(&unk_1000521B0, 17, 7);
  *(_BYTE *)(v55 + 16) = 0;
  v56 = Date.init()(v55);
  v57 = Date.timeIntervalSinceReferenceDate.getter(v56);
  v49(v22, v19);
  v58 = fmax(v48 - v57 + 28.0, 1.0);
  if ((~*(_QWORD *)&v58 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v58 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v58 < 9.22337204e18)
  {
    v105 = (uint64_t)v58;
    v59 = v112;
    v110 = *(void (**)(_QWORD, _QWORD, _QWORD))(v112 + 16);
    v106 = v55;
    v60 = v124;
    v110(v128, a2, v124);
    v108 = *(unsigned __int8 *)(v59 + 80);
    v111 = v54;
    v61 = (v108 + 24) & ~v108;
    v107 = v108 | 7;
    v109 = v18 + 7;
    v62 = (v18 + 7 + v61) & 0xFFFFFFFFFFFFFFF8;
    v63 = (v62 + 23) & 0xFFFFFFFFFFFFFFF8;
    v123 = a2;
    v64 = (v63 + 15) & 0xFFFFFFFFFFFFFFF8;
    v65 = (v64 + 15) & 0xFFFFFFFFFFFFFFF8;
    v66 = (v65 + 15) & 0xFFFFFFFFFFFFFFF8;
    v67 = swift_allocObject(&unk_1000521D8, v66 + 16, v108 | 7);
    *(_QWORD *)(v67 + 16) = v55;
    v112 = *(_QWORD *)(v59 + 32);
    ((void (*)(uint64_t, char *, uint64_t))v112)(v67 + v61, v128, v60);
    v68 = (double *)(v67 + v62);
    *v68 = a5;
    v68[1] = a6;
    v69 = v127;
    *(_QWORD *)(v67 + v63) = v127;
    v70 = v105;
    *(_QWORD *)(v67 + v64) = v105;
    v71 = v122;
    *(_QWORD *)(v67 + v65) = v122;
    v72 = (_QWORD *)(v67 + v66);
    v73 = v126;
    *v72 = v125;
    v72[1] = v73;
    aBlock[4] = (uint64_t)sub_100014E88;
    v131 = v67;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000125A8;
    aBlock[3] = (uint64_t)&unk_1000521F0;
    v74 = _Block_copy(aBlock);
    v129 = _swiftEmptyArrayStorage;
    v75 = sub_100014F1C();
    v122 = v71;
    swift_retain(v69);
    v76 = v106;
    swift_retain(v106);
    swift_retain(v73);
    v77 = sub_100003EA4(&qword_1000555E8);
    v78 = sub_100012354((unint64_t *)&qword_1000555F0, &qword_1000555E8, (uint64_t)&protocol conformance descriptor for [A]);
    v79 = v114;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v129, v77, v78, v113, v75);
    v80 = type metadata accessor for DispatchWorkItem(0);
    swift_allocObject(v80, *(unsigned int *)(v80 + 48), *(unsigned __int16 *)(v80 + 52));
    v81 = DispatchWorkItem.init(flags:block:)(v79, v74);
    swift_release(v131);
    sub_100014F64();
    v82 = (void *)static OS_dispatch_queue.main.getter();
    v83 = v115;
    static DispatchTime.now()(v82);
    v84 = v118;
    *v118 = v70;
    v86 = v119;
    v85 = v120;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v119 + 104))(v84, enum case for DispatchTimeInterval.seconds(_:), v120);
    v87 = v117;
    + infix(_:_:)(v83, v84);
    (*(void (**)(uint64_t *, uint64_t))(v86 + 8))(v84, v85);
    v88 = *(void (**)(char *, uint64_t))(v116 + 8);
    v89 = v121;
    v88(v83, v121);
    OS_dispatch_queue.asyncAfter(deadline:execute:)(v87, v81);

    v88(v87, v89);
    v90 = v128;
    v91 = v124;
    v110(v128, v123, v124);
    v92 = (v108 + 32) & ~v108;
    v93 = (v109 + v92) & 0xFFFFFFFFFFFFFFF8;
    v94 = (v93 + 23) & 0xFFFFFFFFFFFFFFF8;
    v95 = (v94 + 15) & 0xFFFFFFFFFFFFFFF8;
    v96 = (v95 + 15) & 0xFFFFFFFFFFFFFFF8;
    v97 = swift_allocObject(&unk_100052228, v96 + 16, v107);
    *(_QWORD *)(v97 + 16) = v76;
    *(_QWORD *)(v97 + 24) = v81;
    ((void (*)(uint64_t, char *, uint64_t))v112)(v97 + v92, v90, v91);
    v98 = (double *)(v97 + v93);
    *v98 = a5;
    v98[1] = a6;
    v100 = v126;
    v99 = v127;
    *(_QWORD *)(v97 + v94) = v127;
    v101 = v122;
    *(_QWORD *)(v97 + v95) = v122;
    v102 = (_QWORD *)(v97 + v96);
    *v102 = v125;
    v102[1] = v100;
    v103 = v101;
    swift_retain(v99);
    swift_retain(v76);
    swift_retain(v100);
    swift_retain(v81);
    v104 = v111;
    sub_100032E1C(v104, v103, v123, (uint64_t)sub_10001506C, v97, a5, a6);
    swift_release(v76);
    swift_release(v97);
    swift_release(v81);

    return;
  }
LABEL_16:
  __break(1u);
}

uint64_t sub_100013AC0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v5 = v4;
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v10 = type metadata accessor for Logger(0);
  sub_10000CF34(v10, (uint64_t)qword_1000586D0);
  v11 = a1;
  swift_retain(v5);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v30 = a4;
    v31 = a2;
    v15 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(64, -1);
    v34 = v16;
    *(_DWORD *)v15 = 136315394;
    v17 = *(_QWORD *)(v5 + 16);
    v18 = *(_QWORD *)(v5 + 24);
    swift_bridgeObjectRetain(v18);
    v33 = sub_100011770(v17, v18, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v15 + 4, v15 + 12);
    swift_release(v5);
    *(_QWORD *)&v19 = swift_bridgeObjectRelease(v18).n128_u64[0];
    *(_WORD *)(v15 + 12) = 2080;
    v20 = objc_msgSend(v11, "source", v19);
    v32 = v16;
    if (v20
      && (v21 = v20,
          v22 = objc_msgSend(v20, "itemIdentifier"),
          v21,
          v22))
    {
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v25 = v24;

      v26 = v23;
      v27 = v25;
      a4 = v30;
      a2 = v31;
    }
    else
    {
      a4 = v30;
      a2 = v31;
      v27 = 0xA90000000000008FLL;
      v26 = 0xB8EF8981E26C696ELL;
    }
    v33 = sub_100011770(v26, v27, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v15 + 14, v15 + 22);

    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "🥑 ItemProvider%s: asking timeline for %s…", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_release(v5);
  }
  v28 = swift_allocObject(&unk_100052188, 32, 7);
  *(_QWORD *)(v28 + 16) = a3;
  *(_QWORD *)(v28 + 24) = a4;
  swift_retain(a4);
  sub_100012E40(v11, a2, (uint64_t)sub_100014DA4, v28);
  return swift_release(v28);
}

uint64_t sub_100013DA0(uint64_t a1, void (*a2)(char *))
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void (*v21)(char *);

  v21 = a2;
  v3 = type metadata accessor for TimelineReloadPolicy(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003EA4(&qword_100055900);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003EA4(&qword_100055908);
  v11 = sub_100003EA4(&qword_1000557E8);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(v10, v15 + v13, v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_1000427F0;
  v17 = sub_100012310(a1, v16 + v15, &qword_1000557E8);
  static TimelineReloadPolicy.atEnd.getter(v17);
  v18 = sub_100012354(qword_1000558D8, &qword_1000557E8, (uint64_t)&unk_100042B80);
  Timeline.init(entries:policy:)(v16, v5, v11, v18);
  v21(v9);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100013F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, void (*a6)(char *), uint64_t a7, double a8, double a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t inited;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  double v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *);
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[16];
  _BYTE v68[32];
  uint64_t v69[4];
  char v70[24];

  v63 = a7;
  v64 = a6;
  v61 = a5;
  v59 = a4;
  v62 = a3;
  v65 = a2;
  v12 = type metadata accessor for Date(0);
  v60 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v58 - v16;
  v18 = sub_100003EA4(&qword_1000557E8);
  __chkstk_darwin(v18);
  v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ViewContext(0);
  __chkstk_darwin(v21);
  v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for ItemModel(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v58 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 16, v70, 1, 0);
  *(_BYTE *)(a1 + 16) = 1;
  sub_100019A88(2, 0, 0, 0, 0, 1, (unint64_t)v26);
  v27 = type metadata accessor for UserDefaultsManager();
  inited = swift_initStackObject(v27, v67);
  v69[3] = v27;
  v69[0] = inited;
  sub_1000150EC((uint64_t)v69, (uint64_t)v68);
  v29 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v23, v65, v29);
  if (qword_100055340 != -1)
    swift_once(&qword_100055340, sub_1000167E8);
  v30 = qword_100055AB0;
  v31 = (double *)&v23[*(int *)(v21 + 20)];
  *v31 = a8;
  v31[1] = a9;
  *(_QWORD *)&v23[*(int *)(v21 + 24)] = v30;
  swift_retain(v30);
  v32 = sub_10000EB5C((uint64_t)v68, &qword_1000558F8);
  v33 = Date.init()(v32);
  Date.advanced(by:)(v33, 900.0);
  v34 = v60;
  v35 = *(void (**)(char *, uint64_t))(v60 + 8);
  v35(v15, v12);
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v20, v17, v12);
  sub_100015134((uint64_t)v23, (uint64_t)&v20[*(int *)(v18 + 36)], type metadata accessor for ViewContext);
  sub_100015134((uint64_t)v26, (uint64_t)&v20[*(int *)(v18 + 40)], type metadata accessor for ItemModel);
  v35(v17, v12);
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v36 = type metadata accessor for Logger(0);
  sub_10000CF34(v36, (uint64_t)qword_1000586D0);
  v37 = v61;
  v38 = v62;
  v39 = swift_retain(v62);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v61 = v26;
    v42 = swift_slowAlloc(42, -1);
    v60 = swift_slowAlloc(96, -1);
    v69[0] = v60;
    *(_DWORD *)v42 = 136315906;
    v43 = v38;
    v44 = *(_QWORD *)(v38 + 16);
    v45 = *(_QWORD *)(v43 + 24);
    swift_bridgeObjectRetain(v45);
    v66 = sub_100011770(v44, v45, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v42 + 4, v42 + 12);
    swift_release(v43);
    swift_bridgeObjectRelease(v45);
    *(_WORD *)(v42 + 12) = 2048;
    v66 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v42 + 14, v42 + 22);
    *(_WORD *)(v42 + 22) = 2080;
    v46 = CGSize.debugDescription.getter(a8, a9);
    v48 = v47;
    v66 = sub_100011770(v46, v47, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v42 + 24, v42 + 32);
    *(_QWORD *)&v49 = swift_bridgeObjectRelease(v48).n128_u64[0];
    *(_WORD *)(v42 + 32) = 2080;
    v50 = objc_msgSend(v37, "source", v49);
    v58 = v23;
    if (v50
      && (v51 = v50,
          v52 = objc_msgSend(v50, "itemIdentifier"),
          v51,
          v52))
    {
      v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      v55 = v54;

    }
    else
    {
      v55 = 0xE300000000000000;
      v53 = 7104878;
    }
    v66 = sub_100011770(v53, v55, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v42 + 34, v42 + 42);

    swift_bridgeObjectRelease(v55);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "🥑🥑 ItemProvider%s: item entry defaulted after timeout (%ld-s) %s for %s", (uint8_t *)v42, 0x2Au);
    v56 = v60;
    swift_arrayDestroy(v60, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v42, -1, -1);

    v26 = v61;
    v23 = v58;
  }
  else
  {

    swift_release(v38);
  }
  v64(v20);
  sub_1000398C4(0xD000000000000022, 0x8000000100041670, v65, 0, 1);
  sub_10000EB5C((uint64_t)v20, &qword_1000557E8);
  sub_100015178((uint64_t)v23, type metadata accessor for ViewContext);
  return sub_100015178((uint64_t)v26, type metadata accessor for ItemModel);
}

uint64_t sub_100014558(uint64_t a1, uint64_t a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void (*a9)(char *), uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  double v56;
  id v57;
  void *v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *);
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  _BYTE v75[16];
  _BYTE v76[32];
  uint64_t v77[4];
  char v78[24];

  v69 = a10;
  v70 = a9;
  v67 = a8;
  v68 = a7;
  v65 = a6;
  v64 = a1;
  v13 = type metadata accessor for Date(0);
  v66 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v64 - v17;
  v19 = sub_100003EA4(&qword_1000557E8);
  __chkstk_darwin(v19);
  v73 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ViewContext(0);
  __chkstk_darwin(v21);
  v72 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100003EA4(&qword_1000555C8);
  __chkstk_darwin(v23);
  v25 = (char *)&v64 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for ItemModel(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v71 = (unint64_t)&v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = swift_beginAccess(a2 + 16, v78, 0, 0);
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    dispatch thunk of DispatchWorkItem.cancel()(result);
    sub_100012310(v64, (uint64_t)v25, &qword_1000555C8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
    {
      v30 = v71;
      sub_100019A88(2, 1, 0, 0, 0, 0, v71);
      sub_10000EB5C((uint64_t)v25, &qword_1000555C8);
    }
    else
    {
      v30 = v71;
      sub_10000E5B8((uint64_t)v25, v71);
    }
    v31 = v68;
    v32 = type metadata accessor for UserDefaultsManager();
    inited = swift_initStackObject(v32, v75);
    v77[3] = v32;
    v77[0] = inited;
    sub_1000150EC((uint64_t)v77, (uint64_t)v76);
    v34 = type metadata accessor for WidgetFamily(0);
    v35 = (uint64_t)v72;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v72, v65, v34);
    if (qword_100055340 != -1)
      swift_once(&qword_100055340, sub_1000167E8);
    v36 = qword_100055AB0;
    v37 = (double *)(v35 + *(int *)(v21 + 20));
    *v37 = a3;
    v37[1] = a4;
    *(_QWORD *)(v35 + *(int *)(v21 + 24)) = v36;
    swift_retain(v36);
    v38 = sub_10000EB5C((uint64_t)v76, &qword_1000558F8);
    v39 = Date.init()(v38);
    Date.advanced(by:)(v39, 900.0);
    v40 = v66;
    v41 = *(void (**)(char *, uint64_t))(v66 + 8);
    v41(v16, v13);
    v42 = v73;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v73, v18, v13);
    sub_100015134(v35, (uint64_t)&v42[*(int *)(v19 + 36)], type metadata accessor for ViewContext);
    sub_100015134(v30, (uint64_t)&v42[*(int *)(v19 + 40)], type metadata accessor for ItemModel);
    v41(v18, v13);
    if (qword_100055338 != -1)
      swift_once(&qword_100055338, sub_10000EF78);
    v43 = type metadata accessor for Logger(0);
    sub_10000CF34(v43, (uint64_t)qword_1000586D0);
    v44 = v67;
    v45 = swift_retain(v31);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = swift_slowAlloc(32, -1);
      v49 = swift_slowAlloc(96, -1);
      v77[0] = v49;
      *(_DWORD *)v48 = 136315650;
      v50 = v31;
      v51 = *(_QWORD *)(v31 + 16);
      v52 = *(_QWORD *)(v31 + 24);
      swift_bridgeObjectRetain(v52);
      v74 = sub_100011770(v51, v52, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75, v48 + 4, v48 + 12);
      swift_release(v50);
      swift_bridgeObjectRelease(v52);
      *(_WORD *)(v48 + 12) = 2080;
      v53 = CGSize.debugDescription.getter(a3, a4);
      v55 = v54;
      v74 = sub_100011770(v53, v54, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75, v48 + 14, v48 + 22);
      *(_QWORD *)&v56 = swift_bridgeObjectRelease(v55).n128_u64[0];
      *(_WORD *)(v48 + 22) = 2080;
      v57 = objc_msgSend(v44, "source", v56);
      if (v57
        && (v58 = v57,
            v59 = objc_msgSend(v57, "itemIdentifier"),
            v58,
            v59))
      {
        v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
        v62 = v61;

      }
      else
      {
        v62 = 0xE300000000000000;
        v60 = 7104878;
      }
      v74 = sub_100011770(v60, v62, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75, v48 + 24, v48 + 32);

      swift_bridgeObjectRelease(v62);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "🥑🥑 ItemProvider%s: item entry provided %s for %s", (uint8_t *)v48, 0x20u);
      swift_arrayDestroy(v49, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);

      v35 = (uint64_t)v72;
      v30 = v71;
    }
    else
    {

      swift_release(v31);
    }
    v63 = (uint64_t)v73;
    v70(v73);
    sub_10000EB5C(v63, &qword_1000557E8);
    sub_100015178(v35, type metadata accessor for ViewContext);
    return sub_100015178(v30, type metadata accessor for ItemModel);
  }
  return result;
}

uint64_t sub_100014C00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000129C4(a1, a2);
}

uint64_t sub_100014C20(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100012E40(a1, a2, a3, a4);
}

uint64_t sub_100014C40(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100013AC0(a1, a2, a3, a4);
}

uint64_t sub_100014C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100014CCC;
  return IntentTimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_100014CCC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100014D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100015270;
  return IntentTimelineProvider.relevance()(a1, a2, a3);
}

uint64_t sub_100014D80()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100014DA4(uint64_t a1)
{
  uint64_t v1;

  return sub_100013DA0(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_100014DAC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100014DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = (((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));

  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v5);
}

uint64_t sub_100014E88()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_100013F18(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v5), *(char **)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(char *))(v0 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(double *)(v0 + v3), *(double *)(v0 + v3 + 8));
}

uint64_t sub_100014F04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014F14(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100014F1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000555E0;
  if (!qword_1000555E0)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1000555E0);
  }
  return result;
}

unint64_t sub_100014F64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000555D8;
  if (!qword_1000555D8)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000555D8);
  }
  return result;
}

uint64_t sub_100014FA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));

  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v5);
}

uint64_t sub_10001506C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  return sub_100014558(a1, *(_QWORD *)(v1 + 16), *(double *)(v1 + v5), *(double *)(v1 + v5 + 8), *(_QWORD *)(v1 + 24), v1 + v4, *(_QWORD *)(v1 + v6), *(void **)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(char *))(v1 + ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1000150EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003EA4(&qword_1000558F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100015134(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100015178(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_1000151B4(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawBufferPointer.copyMemory source has too many elements", 69, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 487, 0);
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t sub_100015248@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

void destroy for ColorSchemeImageSet(uint64_t a1)
{
  sub_10000DEEC(*(void **)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s17FindMyWidgetItems19ColorSchemeImageSetOwCP_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  char v5;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10000DDE4(*(void **)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ColorSchemeImageSet(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10000DDE4(*(void **)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_10000DEEC(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for ColorSchemeImageSet(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ColorSchemeImageSet(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_10000DEEC(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ColorSchemeImageSet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ColorSchemeImageSet(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100015408(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100015414(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ColorSchemeImageSet()
{
  return &type metadata for ColorSchemeImageSet;
}

void *sub_100015430(uint64_t a1, void *a2, void *a3, char a4)
{
  void *v4;
  id v5;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;

  v4 = a2;
  if ((a4 & 1) == 0)
    goto LABEL_2;
  if (!a2)
  {
    v12 = a3;
    return a3;
  }
  if (a3)
  {
    v7 = a2;
    v8 = a3;
    v9 = objc_msgSend(v7, "imageAsset");
    if (v9)
    {
      v10 = v9;
      v11 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithUserInterfaceStyle:", 2);
      objc_msgSend(v10, "registerImage:withTraitCollection:", v8, v11);

    }
  }
  else
  {
LABEL_2:
    v5 = a2;
  }
  return v4;
}

uint64_t sub_100015508(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for ViewContext(319);
    if (v4 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
      if (v5 <= 0x3F)
      {
        v6[2] = *(_QWORD *)(result - 8) + 64;
        swift_initStructMetadata(a1, 0, 3, v6, a1 + 32);
        return 0;
      }
    }
  }
  return result;
}

uint64_t *sub_1000155AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  void (*v30)(unint64_t, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for WidgetFamily(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 & 0xF8 | 7;
  v12 = v7 + v11;
  v13 = *(_QWORD *)(v9 + 64) + 7;
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = (((v13 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v16 + 8;
  v18 = v11 | *(_DWORD *)(v6 + 80) | v16;
  v19 = (*(_DWORD *)(v15 + 80) | v10 | *(_DWORD *)(v6 + 80)) & 0x100000;
  if ((_DWORD)v18 != 7 || v19 != 0 || ((v17 + (v12 & ~v11)) & ~v16) + *(_QWORD *)(v15 + 64) > 0x18)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v18 + 16) & ~v18));
    swift_retain(v22);
  }
  else
  {
    v23 = v8;
    v24 = ~v11;
    v32 = ~v16;
    v33 = v14;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v25 = ((unint64_t)a1 + v12) & v24;
    v26 = ((unint64_t)a2 + v12) & v24;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(v25, v26, v23);
    v27 = (_OWORD *)((v13 + v25) & 0xFFFFFFFFFFFFFFF8);
    v28 = (_OWORD *)((v13 + v26) & 0xFFFFFFFFFFFFFFF8);
    *v27 = *v28;
    v29 = *(_QWORD *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFF8);
    *(_QWORD *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFF8) = v29;
    v30 = *(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 16);
    swift_retain(v29);
    v30((v17 + v25) & v32, (v17 + v26) & v32, v33);
  }
  return a1;
}

uint64_t sub_100015758(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = *(_QWORD *)(v5 + 64) + a1;
  v7 = type metadata accessor for WidgetFamily(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = (v6 + v9) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  v11 = *(_QWORD *)(v8 + 64) + 7;
  swift_release(*(_QWORD *)((((v11 + v10) & 0xFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v10 + (((v11 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t sub_100015820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(unint64_t, unint64_t, uint64_t);

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = type metadata accessor for WidgetFamily(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  v12 = v8 + v11;
  v13 = (v8 + v11 + a1) & ~v11;
  v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13, v14, v9);
  v15 = *(_QWORD *)(v10 + 64) + 7;
  v16 = (_OWORD *)((v15 + v13) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_OWORD *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = *(_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFF8) = v18;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = (((v15 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v21 + 8;
  v23 = (v22 + v13) & ~v21;
  v24 = (v22 + v14) & ~v21;
  v25 = *(void (**)(unint64_t, unint64_t, uint64_t))(v20 + 16);
  swift_retain(v18);
  v25(v23, v24, v19);
  return a1;
}

uint64_t sub_100015934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = type metadata accessor for WidgetFamily(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  v12 = v8 + v11;
  v13 = (v8 + v11 + a1) & ~v11;
  v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v13, v14, v9);
  v15 = *(_QWORD *)(v10 + 64) + 7;
  v16 = (_QWORD *)((v15 + v13) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v16[1] = v17[1];
  v18 = (uint64_t *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = (uint64_t *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFF8);
  v20 = *v19;
  v21 = *v18;
  *v18 = *v19;
  swift_retain(v20);
  swift_release(v21);
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = (((v15 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v23 + 8;
  (*(void (**)(unint64_t, unint64_t))(v22 + 24))((v24 + v13) & ~v23, (v24 + v14) & ~v23);
  return a1;
}

uint64_t sub_100015A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = type metadata accessor for WidgetFamily(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  v12 = v8 + v11;
  v13 = (v8 + v11 + a1) & ~v11;
  v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v13, v14, v9);
  v15 = *(_QWORD *)(v10 + 64) + 7;
  v16 = (_OWORD *)((v15 + v13) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_OWORD *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  *(_QWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFF8);
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = (((v15 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v19 + 8;
  (*(void (**)(unint64_t, unint64_t))(v18 + 32))((v20 + v13) & ~v19, (v20 + v14) & ~v19);
  return a1;
}

uint64_t sub_100015B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = type metadata accessor for WidgetFamily(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  v12 = v8 + v11;
  v13 = (v8 + v11 + a1) & ~v11;
  v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v13, v14, v9);
  v15 = *(_QWORD *)(v10 + 64) + 7;
  v16 = (_QWORD *)((v15 + v13) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v16[1] = v17[1];
  v18 = (uint64_t *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = *v18;
  *v18 = *(_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFF8);
  swift_release(v19);
  v20 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = (((v15 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v21 + 8;
  (*(void (**)(unint64_t, unint64_t))(v20 + 40))((v22 + v13) & ~v21, (v22 + v14) & ~v21);
  return a1;
}

uint64_t sub_100015C78(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  int v24;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t (*v29)(unint64_t, uint64_t, uint64_t);
  unint64_t v30;
  unint64_t v31;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = type metadata accessor for WidgetFamily(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= v8)
    v13 = v8;
  else
    v13 = v12;
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v15 + 84) > v13)
    v13 = *(_DWORD *)(v15 + 84);
  if (!a2)
    return 0;
  v16 = v9;
  v17 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  v18 = *(_QWORD *)(v7 + 64) + v17;
  v19 = *(_QWORD *)(v10 + 64) + 7;
  v20 = (((v19 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v21 = *(unsigned __int8 *)(v15 + 80);
  if (a2 <= v13)
    goto LABEL_29;
  v22 = ((v20 + v21 + (v18 & ~v17)) & ~v21) + *(_QWORD *)(v15 + 64);
  v23 = 8 * v22;
  if (v22 > 3)
    goto LABEL_12;
  v26 = ((a2 - v13 + ~(-1 << v23)) >> v23) + 1;
  if (HIWORD(v26))
  {
    v24 = *(_DWORD *)(a1 + v22);
    if (v24)
      goto LABEL_20;
  }
  else
  {
    if (v26 <= 0xFF)
    {
      if (v26 < 2)
        goto LABEL_29;
LABEL_12:
      v24 = *(unsigned __int8 *)(a1 + v22);
      if (!*(_BYTE *)(a1 + v22))
        goto LABEL_29;
LABEL_20:
      v27 = (v24 - 1) << v23;
      if (v22 > 3)
        v27 = 0;
      if ((_DWORD)v22)
      {
        if (v22 <= 3)
          v28 = ((v20 + v21 + (v18 & ~(*(_DWORD *)(v10 + 80) & 0xF8 | 7))) & ~(_DWORD)v21) + *(_DWORD *)(v15 + 64);
        else
          v28 = 4;
        __asm { BR              X12 }
      }
      return v13 + v27 + 1;
    }
    v24 = *(unsigned __int16 *)(a1 + v22);
    if (*(_WORD *)(a1 + v22))
      goto LABEL_20;
  }
LABEL_29:
  if ((_DWORD)v8 == v13)
  {
    v29 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    v30 = a1;
    v11 = v8;
    v14 = v6;
    return v29(v30, v11, v14);
  }
  v30 = (v18 + a1) & ~v17;
  if (v12 != v13)
  {
    v30 = (v30 + v21 + v20) & ~v21;
    v29 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v15 + 48);
    v11 = *(unsigned int *)(v15 + 84);
    return v29(v30, v11, v14);
  }
  if (v11 >= 0x7FFFFFFF)
  {
    v29 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48);
    v14 = v16;
    return v29(v30, v11, v14);
  }
  v31 = *(_QWORD *)((((v19 + v30) & 0xFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8);
  if (v31 >= 0xFFFFFFFF)
    LODWORD(v31) = -1;
  return (v31 + 1);
}

void sub_100015EC4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  size_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;

  v8 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  if (*(_DWORD *)(v10 + 84) <= 0x7FFFFFFFu)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v9)
    v12 = v9;
  else
    v12 = v11;
  v13 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v13 + 84) > v12)
    v12 = *(_DWORD *)(v13 + 84);
  v14 = ((((((*(_QWORD *)(v10 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 8
        + *(unsigned __int8 *)(v13 + 80)
        + ((*(_QWORD *)(v8 + 64) + (*(_DWORD *)(v10 + 80) & 0xF8 | 7)) & ~(*(_DWORD *)(v10 + 80) & 0xF8 | 7))) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
      + *(_QWORD *)(v13 + 64);
  if (a3 <= v12)
  {
    v15 = 0;
  }
  else if (v14 <= 3)
  {
    v17 = ((a3 - v12 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v17))
    {
      v15 = &dword_100000004;
    }
    else if (v17 >= 0x100)
    {
      v15 = 2;
    }
    else
    {
      v15 = v17 > 1;
    }
  }
  else
  {
    v15 = &_mh_execute_header.magic + 1;
  }
  if (v12 < a2)
  {
    v16 = ~v12 + a2;
    if (v14 < 4)
    {
      if ((_DWORD)v14)
      {
        v18 = v16 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if ((_DWORD)v14 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if ((_DWORD)v14 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

uint64_t type metadata accessor for ModelEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100012394(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModelEntry);
}

uint64_t sub_1000161A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_1000161E4(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + 96);
}

uint64_t sub_100016218()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100016220()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for ModelEntryFactory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100012394(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModelEntryFactory);
}

uint64_t *sub_10001623C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
  }
  swift_retain(v9);
  return a1;
}

uint64_t sub_1000162CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_100016310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  return a1;
}

uint64_t sub_100016378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  v10 = *(int *)(a3 + 24);
  v11 = *(_QWORD *)(a2 + v10);
  v12 = *(_QWORD *)(a1 + v10);
  *(_QWORD *)(a1 + v10) = v11;
  swift_retain(v11);
  swift_release(v12);
  return a1;
}

uint64_t sub_100016400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_100016464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_1000164D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000164DC);
}

uint64_t sub_1000164DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for WidgetFamily(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100016558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100016564);
}

uint64_t sub_100016564(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for WidgetFamily(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ViewContext(uint64_t a1)
{
  uint64_t result;

  result = qword_100055A70;
  if (!qword_100055A70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ViewContext);
  return result;
}

uint64_t sub_100016618(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for WidgetFamily(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100042C40;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10001669C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double *v10;
  BOOL v11;
  char v12;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for WidgetFamily(0);
  v5 = sub_100016760();
  dispatch thunk of RawRepresentable.rawValue.getter(&v15, v4, v5);
  dispatch thunk of RawRepresentable.rawValue.getter(&v14, v4, v5);
  if (v15 == v14
    && ((v6 = type metadata accessor for ViewContext(0),
         v7 = *(int *)(v6 + 20),
         v8 = *(double *)(a1 + v7),
         v9 = *(double *)(a1 + v7 + 8),
         v10 = (double *)(a2 + v7),
         v8 == *v10)
      ? (v11 = v9 == v10[1])
      : (v11 = 0),
        v11))
  {
    v12 = static Color.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(v6 + 24)), *(_QWORD *)(a2 + *(int *)(v6 + 24)));
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

unint64_t sub_100016760()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100055600;
  if (!qword_100055600)
  {
    v1 = type metadata accessor for WidgetFamily(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for WidgetFamily, v1);
    atomic_store(result, (unint64_t *)&qword_100055600);
  }
  return result;
}

uint64_t sub_1000167A8(uint64_t a1)
{
  const char *v2;

  v2 = " ";
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 96);
}

uint64_t sub_1000167E8()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin();
  v1 = (char *)&v4 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v2 + 104))(v1, enum case for Color.RGBColorSpace.sRGB(_:));
  result = Color.init(_:red:green:blue:opacity:)(v1, 1.0, 0.670588235, 0.141176471, 1.0);
  qword_100055AB0 = result;
  return result;
}

uint64_t sub_10001687C()
{
  uint64_t v0;

  sub_1000168C8(v0 + 16);
  return v0;
}

uint64_t sub_100016898()
{
  uint64_t v0;

  sub_1000168C8(v0 + 16);
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for ViewContextFactory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100012394(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewContextFactory);
}

uint64_t sub_1000168C8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003EA4(&qword_1000558F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100016908()
{
  uint64_t *v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;

  _StringGuts.grow(_:)(103);
  v1._countAndFlagsBits = 0x73736572646441;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  v2 = v0[13];
  if (v2)
    v3 = v0[12];
  else
    v3 = 0;
  if (v2)
    v4 = (void *)v0[13];
  else
    v4 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v2);
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  v6._object = (void *)0xEC000000223D7974;
  v6._countAndFlagsBits = 0x696C61636F6C203ALL;
  String.append(_:)(v6);
  v7 = v0[1];
  if (v7)
    v8 = *v0;
  else
    v8 = 0;
  if (v7)
    v9 = (void *)v0[1];
  else
    v9 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v7);
  v10._countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 0x746E756F63202C22;
  v11._object = (void *)0xEB00000000223D79;
  String.append(_:)(v11);
  v12 = v0[3];
  if (v12)
    v13 = v0[2];
  else
    v13 = 0;
  if (v12)
    v14 = (void *)v0[3];
  else
    v14 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v12);
  v15._countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  v16._countAndFlagsBits = 0x746E756F63202C22;
  v16._object = (void *)0xEC000000223D7972;
  String.append(_:)(v16);
  v17 = v0[5];
  if (v17)
    v18 = v0[4];
  else
    v18 = 0;
  if (v17)
    v19 = (void *)v0[5];
  else
    v19 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v17);
  v20._countAndFlagsBits = v18;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v19);
  v21._countAndFlagsBits = 0x6D646E616C202C22;
  v21._object = (void *)0xED0000223D6B7261;
  String.append(_:)(v21);
  v22 = v0[7];
  if (v22)
    v23 = v0[6];
  else
    v23 = 0;
  if (v22)
    v24 = (void *)v0[7];
  else
    v24 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v22);
  v25._countAndFlagsBits = v23;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v24);
  v26._countAndFlagsBits = 0xD000000000000011;
  v26._object = (void *)0x8000000100041BB0;
  String.append(_:)(v26);
  v27 = v0[9];
  if (v27)
    v28 = v0[8];
  else
    v28 = 0;
  if (v27)
    v29 = (void *)v0[9];
  else
    v29 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v27);
  v30._countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v29);
  v31._object = (void *)0x8000000100041BD0;
  v31._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v31);
  v32 = v0[11];
  if (v32)
    v33 = v0[10];
  else
    v33 = 0;
  if (v32)
    v34 = (void *)v0[11];
  else
    v34 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v32);
  v35._countAndFlagsBits = v33;
  v35._object = v34;
  String.append(_:)(v35);
  swift_bridgeObjectRelease(v34);
  v36._countAndFlagsBits = 34;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  return 0;
}

double sub_100016B9C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  Swift::String v59;
  uint64_t v60;
  double result;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;

  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v74 = 0u;
  v4 = objc_msgSend(a1, "locality");
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  *(_QWORD *)&v72 = v6;
  *((_QWORD *)&v72 + 1) = v8;
  v9 = objc_msgSend(a1, "subAdministrativeArea", swift_bridgeObjectRelease(0).n128_f64[0]);
  if (v9)
  {
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v13 = v12;

  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  *(_QWORD *)&v73 = v11;
  *((_QWORD *)&v73 + 1) = v13;
  v14 = objc_msgSend(a1, "country", swift_bridgeObjectRelease(0).n128_f64[0]);
  if (v14)
  {
    v15 = v14;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v18 = v17;

  }
  else
  {
    v16 = 0;
    v18 = 0;
  }
  *(_QWORD *)&v74 = v16;
  *((_QWORD *)&v74 + 1) = v18;
  v19 = objc_msgSend(a1, "areasOfInterest", swift_bridgeObjectRelease(0).n128_f64[0]);
  v20 = v19;
  if (v19)
  {
    v21 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, &type metadata for String);

    if (v21[2])
    {
      v22 = v21[4];
      v20 = (void *)v21[5];
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRelease(v21);
    }
    else
    {
      swift_bridgeObjectRelease(v21);
      v22 = 0;
      v20 = 0;
    }
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)&v75 = v22;
  *((_QWORD *)&v75 + 1) = v20;
  v23 = objc_msgSend(a1, "thoroughfare", swift_bridgeObjectRelease(0).n128_f64[0]);
  if (v23)
  {
    v24 = v23;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v27 = v26;

  }
  else
  {
    v25 = 0;
    v27 = 0;
  }
  *(_QWORD *)&v76 = v25;
  *((_QWORD *)&v76 + 1) = v27;
  v28 = objc_msgSend(a1, "postalAddress", swift_bridgeObjectRelease(0).n128_f64[0]);
  if (v28)
  {
    v29 = v28;
    v30 = objc_msgSend((id)objc_opt_self(CNPostalAddressFormatter), "stringFromPostalAddress:style:", v28, 0);
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

    *(_QWORD *)&v68 = v31;
    *((_QWORD *)&v68 + 1) = v33;
    *(_QWORD *)&v71 = 10;
    *((_QWORD *)&v71 + 1) = 0xE100000000000000;
    v34 = sub_100003F74();
    v35 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v71, &type metadata for String, &type metadata for String, v34, v34);
    swift_bridgeObjectRelease(v33);
    if (v35[2])
    {
      v36 = v35[4];
      v37 = v35[5];
      swift_bridgeObjectRetain(v37);

      swift_bridgeObjectRelease(v35);
    }
    else
    {
      v43 = objc_msgSend(a1, "thoroughfare", swift_bridgeObjectRelease(v35).n128_f64[0], v68);
      if (v43)
      {
        v44 = v43;
        v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v37 = v45;

      }
      else
      {

        v36 = 0;
        v37 = 0;
      }
    }
    v46 = *((_QWORD *)&v77 + 1);
    *(_QWORD *)&v77 = v36;
    *((_QWORD *)&v77 + 1) = v37;
  }
  else
  {
    v38 = objc_msgSend(a1, "thoroughfare");
    if (v38)
    {
      v39 = v38;
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v42 = v41;

    }
    else
    {
      v40 = 0;
      v42 = 0;
    }
    *(_QWORD *)&v77 = v40;
    *((_QWORD *)&v77 + 1) = v42;
    v46 = 0;
  }
  swift_bridgeObjectRelease(v46);
  v47 = sub_100003EA4(&qword_100055B38);
  v48 = sub_100016FF8();
  v49 = _Pointer.debugDescription.getter(v47, v48);
  v51 = v50;
  v52 = sub_100012188(9uLL, v49, v50);
  v54 = v53;
  *(_QWORD *)&v71 = 7876668;
  *((_QWORD *)&v71 + 1) = 0xE300000000000000;
  *(_QWORD *)&v68 = v52;
  *((_QWORD *)&v68 + 1) = v55;
  v69 = v56;
  v70 = v53;
  v57 = sub_100012230();
  String.append<A>(contentsOf:)(&v68, &type metadata for Substring, v57);
  swift_bridgeObjectRelease(v54);
  v58 = *((_QWORD *)&v71 + 1);
  v68 = v71;
  swift_bridgeObjectRetain(*((_QWORD *)&v71 + 1));
  v59._countAndFlagsBits = 15987;
  v59._object = (void *)0xE200000000000000;
  String.append(_:)(v59);
  swift_bridgeObjectRelease(v51);

  swift_bridgeObjectRelease(v58);
  v60 = *((_QWORD *)&v78 + 1);
  v78 = v68;
  swift_bridgeObjectRelease(v60);
  result = *(double *)&v72;
  v62 = v73;
  v63 = v74;
  v64 = v75;
  v65 = v76;
  v66 = v77;
  v67 = v78;
  *a2 = v72;
  a2[1] = v62;
  a2[2] = v63;
  a2[3] = v64;
  a2[4] = v65;
  a2[5] = v66;
  a2[6] = v67;
  return result;
}

unint64_t sub_100016FF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100055B40;
  if (!qword_100055B40)
  {
    v1 = sub_100003EE4(&qword_100055B38);
    result = swift_getWitnessTable(&protocol conformance descriptor for UnsafePointer<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100055B40);
  }
  return result;
}

uint64_t destroy for Address(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  return swift_bridgeObjectRelease(a1[13]);
}

_QWORD *initializeWithCopy for Address(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

_QWORD *assignWithCopy for Address(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  v12 = a2[9];
  v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[10] = a2[10];
  v14 = a2[11];
  v15 = a1[11];
  a1[11] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[12] = a2[12];
  v16 = a2[13];
  v17 = a1[13];
  a1[13] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

_QWORD *assignWithTake for Address(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[7];
  v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a2[9];
  v13 = a1[9];
  a1[8] = a2[8];
  a1[9] = v12;
  swift_bridgeObjectRelease(v13);
  v14 = a2[11];
  v15 = a1[11];
  a1[10] = a2[10];
  a1[11] = v14;
  swift_bridgeObjectRelease(v15);
  v16 = a2[13];
  v17 = a1[13];
  a1[12] = a2[12];
  a1[13] = v16;
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for Address(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Address(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Address()
{
  return &type metadata for Address;
}

_QWORD *sub_1000173B4(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  int v51;
  char v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t *v58;
  int v59;
  char v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    *(_WORD *)(a1 + 36) = *((_WORD *)a2 + 18);
    v9 = a3[12];
    v10 = (void *)(a1 + v9);
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v14(v11, 1, v12))
    {
      v15 = sub_100003EA4(&qword_100055B48);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = a3[13];
    v18 = a3[14];
    v19 = (_QWORD *)((char *)v4 + v17);
    v20 = (uint64_t *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    *((_BYTE *)v4 + v18) = *((_BYTE *)a2 + v18);
    v22 = a3[15];
    v23 = a3[16];
    v24 = (_QWORD *)((char *)v4 + v22);
    v25 = (uint64_t *)((char *)a2 + v22);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = (_QWORD *)((char *)v4 + v23);
    v28 = (uint64_t *)((char *)a2 + v23);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    v30 = a3[17];
    v31 = a3[18];
    v32 = (_QWORD *)((char *)v4 + v30);
    v33 = (uint64_t *)((char *)a2 + v30);
    v34 = v33[1];
    *v32 = *v33;
    v32[1] = v34;
    v35 = (char *)v4 + v31;
    v36 = (uint64_t)a2 + v31;
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = *(_BYTE *)(v36 + 8);
    v37 = a3[19];
    v38 = a3[20];
    v39 = (char *)v4 + v37;
    v40 = (uint64_t)a2 + v37;
    *(_OWORD *)v39 = *(_OWORD *)v40;
    v39[16] = *(_BYTE *)(v40 + 16);
    v41 = (_QWORD *)((char *)v4 + v38);
    v42 = (uint64_t *)((char *)a2 + v38);
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    v44 = a3[21];
    v45 = (char *)v4 + v44;
    v46 = (uint64_t)a2 + v44;
    v47 = *(uint64_t *)((char *)a2 + v44 + 16);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v43);
    if (v47 == 1)
    {
      *(_OWORD *)v45 = *(_OWORD *)v46;
      *((_QWORD *)v45 + 2) = *(_QWORD *)(v46 + 16);
    }
    else
    {
      *(_DWORD *)v45 = *(_DWORD *)v46;
      v45[4] = *(_BYTE *)(v46 + 4);
      *(_WORD *)(v45 + 5) = *(_WORD *)(v46 + 5);
      *((_QWORD *)v45 + 1) = *(_QWORD *)(v46 + 8);
      *((_QWORD *)v45 + 2) = v47;
      swift_bridgeObjectRetain(v47);
    }
    v48 = a3[22];
    v49 = (char *)v4 + v48;
    v50 = (uint64_t *)((char *)a2 + v48);
    v51 = *((unsigned __int8 *)v50 + 16);
    if (v51 == 255)
    {
      *(_OWORD *)v49 = *(_OWORD *)v50;
      v49[16] = *((_BYTE *)v50 + 16);
    }
    else
    {
      v52 = v51 & 1;
      v53 = *v50;
      v54 = (void *)v50[1];
      sub_10000DDE4((void *)*v50, v54, v51 & 1);
      *(_QWORD *)v49 = v53;
      *((_QWORD *)v49 + 1) = v54;
      v49[16] = v52;
    }
    v55 = a3[24];
    *((_BYTE *)v4 + a3[23]) = *((_BYTE *)a2 + a3[23]);
    *((_BYTE *)v4 + v55) = *((_BYTE *)a2 + v55);
    v56 = a3[26];
    *(_QWORD *)((char *)v4 + a3[25]) = *(uint64_t *)((char *)a2 + a3[25]);
    v57 = (char *)v4 + v56;
    v58 = (uint64_t *)((char *)a2 + v56);
    v59 = *((unsigned __int8 *)a2 + v56 + 16);
    if (v59 == 255)
    {
      *(_OWORD *)v57 = *(_OWORD *)v58;
      v57[16] = *((_BYTE *)v58 + 16);
    }
    else
    {
      v60 = v59 & 1;
      v61 = *v58;
      v62 = (void *)v58[1];
      sub_10000DDE4((void *)*v58, v62, v59 & 1);
      *(_QWORD *)v57 = v61;
      *((_QWORD *)v57 + 1) = v62;
      v57[16] = v60;
    }
    v63 = a3[28];
    *((_BYTE *)v4 + a3[27]) = *((_BYTE *)a2 + a3[27]);
    *((_BYTE *)v4 + v63) = *((_BYTE *)a2 + v63);
    v64 = a3[29];
    v65 = a3[30];
    v66 = (_QWORD *)((char *)v4 + v64);
    v67 = (uint64_t *)((char *)a2 + v64);
    v68 = v67[1];
    *v66 = *v67;
    v66[1] = v68;
    v69 = (_QWORD *)((char *)v4 + v65);
    v70 = (uint64_t *)((char *)a2 + v65);
    v71 = v70[1];
    *v69 = *v70;
    v69[1] = v71;
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRetain(v71);
  }
  return v4;
}

double sub_1000176E4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + a2[12];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[15] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[16] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[20] + 8));
  v7 = *(_QWORD *)(a1 + a2[21] + 16);
  if (v7 != 1)
    swift_bridgeObjectRelease(v7);
  v8 = a1 + a2[22];
  v9 = *(unsigned __int8 *)(v8 + 16);
  if (v9 != 255)
    sub_10000DEEC(*(void **)v8, *(void **)(v8 + 8), v9 & 1);
  v10 = a1 + a2[26];
  v11 = *(unsigned __int8 *)(v10 + 16);
  if (v11 != 255)
    sub_10000DEEC(*(void **)v10, *(void **)(v10 + 8), v11 & 1);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[29] + 8));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[30] + 8)).n128_u64[0];
  return result;
}

uint64_t sub_100017828(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  char v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  int v57;
  char v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  v8 = a3[12];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v13(v10, 1, v11))
  {
    v14 = sub_100003EA4(&qword_100055B48);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = a3[13];
  v16 = a3[14];
  v17 = (_QWORD *)(a1 + v15);
  v18 = (_QWORD *)(a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v20 = a3[15];
  v21 = a3[16];
  v22 = (_QWORD *)(a1 + v20);
  v23 = (_QWORD *)(a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (_QWORD *)(a1 + v21);
  v26 = (_QWORD *)(a2 + v21);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = a3[17];
  v29 = a3[18];
  v30 = (_QWORD *)(a1 + v28);
  v31 = (_QWORD *)(a2 + v28);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  v33 = a1 + v29;
  v34 = a2 + v29;
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
  v35 = a3[19];
  v36 = a3[20];
  v37 = a1 + v35;
  v38 = a2 + v35;
  *(_OWORD *)v37 = *(_OWORD *)v38;
  *(_BYTE *)(v37 + 16) = *(_BYTE *)(v38 + 16);
  v39 = (_QWORD *)(a1 + v36);
  v40 = (_QWORD *)(a2 + v36);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = a3[21];
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = *(_QWORD *)(a2 + v42 + 16);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v41);
  if (v45 == 1)
  {
    *(_OWORD *)v43 = *(_OWORD *)v44;
    *(_QWORD *)(v43 + 16) = *(_QWORD *)(v44 + 16);
  }
  else
  {
    *(_DWORD *)v43 = *(_DWORD *)v44;
    *(_BYTE *)(v43 + 4) = *(_BYTE *)(v44 + 4);
    *(_WORD *)(v43 + 5) = *(_WORD *)(v44 + 5);
    *(_QWORD *)(v43 + 8) = *(_QWORD *)(v44 + 8);
    *(_QWORD *)(v43 + 16) = v45;
    swift_bridgeObjectRetain(v45);
  }
  v46 = a3[22];
  v47 = a1 + v46;
  v48 = (uint64_t *)(a2 + v46);
  v49 = *((unsigned __int8 *)v48 + 16);
  if (v49 == 255)
  {
    *(_OWORD *)v47 = *(_OWORD *)v48;
    *(_BYTE *)(v47 + 16) = *((_BYTE *)v48 + 16);
  }
  else
  {
    v50 = v49 & 1;
    v51 = *v48;
    v52 = (void *)v48[1];
    sub_10000DDE4((void *)*v48, v52, v49 & 1);
    *(_QWORD *)v47 = v51;
    *(_QWORD *)(v47 + 8) = v52;
    *(_BYTE *)(v47 + 16) = v50;
  }
  v53 = a3[24];
  *(_BYTE *)(a1 + a3[23]) = *(_BYTE *)(a2 + a3[23]);
  *(_BYTE *)(a1 + v53) = *(_BYTE *)(a2 + v53);
  v54 = a3[26];
  *(_QWORD *)(a1 + a3[25]) = *(_QWORD *)(a2 + a3[25]);
  v55 = a1 + v54;
  v56 = (uint64_t *)(a2 + v54);
  v57 = *(unsigned __int8 *)(a2 + v54 + 16);
  if (v57 == 255)
  {
    *(_OWORD *)v55 = *(_OWORD *)v56;
    *(_BYTE *)(v55 + 16) = *((_BYTE *)v56 + 16);
  }
  else
  {
    v58 = v57 & 1;
    v59 = *v56;
    v60 = (void *)v56[1];
    sub_10000DDE4((void *)*v56, v60, v57 & 1);
    *(_QWORD *)v55 = v59;
    *(_QWORD *)(v55 + 8) = v60;
    *(_BYTE *)(v55 + 16) = v58;
  }
  v61 = a3[28];
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  *(_BYTE *)(a1 + v61) = *(_BYTE *)(a2 + v61);
  v62 = a3[29];
  v63 = a3[30];
  v64 = (_QWORD *)(a1 + v62);
  v65 = (_QWORD *)(a2 + v62);
  v66 = v65[1];
  *v64 = *v65;
  v64[1] = v66;
  v67 = (_QWORD *)(a1 + v63);
  v68 = (_QWORD *)(a2 + v63);
  v69 = v68[1];
  *v67 = *v68;
  v67[1] = v69;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRetain(v69);
  return a1;
}

uint64_t sub_100017B2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 *v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  int v64;
  int v65;
  char v66;
  __int128 v67;
  char v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  char v73;
  char v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  int v80;
  int v81;
  char v82;
  __int128 v83;
  char v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  char v89;
  char v90;
  void *v91;
  void *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  v10 = a3[12];
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = sub_100003EA4(&qword_100055B48);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  v19 = a3[13];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v23 = v20[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  v24 = a3[15];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (_QWORD *)(a2 + v24);
  *v25 = *v26;
  v27 = v26[1];
  v28 = v25[1];
  v25[1] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = a3[16];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  *v30 = *v31;
  v32 = v31[1];
  v33 = v30[1];
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v34 = a3[17];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (_QWORD *)(a2 + v34);
  *v35 = *v36;
  v37 = v36[1];
  v38 = v35[1];
  v35[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  v39 = a3[18];
  v40 = a1 + v39;
  v41 = (uint64_t *)(a2 + v39);
  v42 = *v41;
  *(_BYTE *)(v40 + 8) = *((_BYTE *)v41 + 8);
  *(_QWORD *)v40 = v42;
  v43 = a3[19];
  v44 = a1 + v43;
  v45 = (__int128 *)(a2 + v43);
  v46 = *v45;
  *(_BYTE *)(v44 + 16) = *((_BYTE *)v45 + 16);
  *(_OWORD *)v44 = v46;
  v47 = a3[20];
  v48 = (_QWORD *)(a1 + v47);
  v49 = (_QWORD *)(a2 + v47);
  *v48 = *v49;
  v50 = v49[1];
  v51 = v48[1];
  v48[1] = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  v52 = a3[21];
  v53 = a1 + v52;
  v54 = (__int128 *)(a2 + v52);
  v55 = *(_QWORD *)(a1 + v52 + 16);
  v56 = *(_QWORD *)(a2 + v52 + 16);
  if (v55 == 1)
  {
    if (v56 == 1)
    {
      v57 = *v54;
      *(_QWORD *)(v53 + 16) = *((_QWORD *)v54 + 2);
      *(_OWORD *)v53 = v57;
    }
    else
    {
      *(_DWORD *)v53 = *(_DWORD *)v54;
      *(_BYTE *)(v53 + 4) = *((_BYTE *)v54 + 4);
      *(_BYTE *)(v53 + 5) = *((_BYTE *)v54 + 5);
      *(_BYTE *)(v53 + 6) = *((_BYTE *)v54 + 6);
      *(_QWORD *)(v53 + 8) = *((_QWORD *)v54 + 1);
      v59 = *((_QWORD *)v54 + 2);
      *(_QWORD *)(v53 + 16) = v59;
      swift_bridgeObjectRetain(v59);
    }
  }
  else if (v56 == 1)
  {
    sub_100018088(v53);
    v58 = *((_QWORD *)v54 + 2);
    *(_OWORD *)v53 = *v54;
    *(_QWORD *)(v53 + 16) = v58;
  }
  else
  {
    *(_DWORD *)v53 = *(_DWORD *)v54;
    *(_BYTE *)(v53 + 4) = *((_BYTE *)v54 + 4);
    *(_BYTE *)(v53 + 5) = *((_BYTE *)v54 + 5);
    *(_BYTE *)(v53 + 6) = *((_BYTE *)v54 + 6);
    *(_QWORD *)(v53 + 8) = *((_QWORD *)v54 + 1);
    v60 = *((_QWORD *)v54 + 2);
    *(_QWORD *)(v53 + 16) = v60;
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRelease(v55);
  }
  v61 = a3[22];
  v62 = a1 + v61;
  v63 = (__int128 *)(a2 + v61);
  v64 = *(unsigned __int8 *)(a1 + v61 + 16);
  v65 = *(unsigned __int8 *)(a2 + v61 + 16);
  if (v64 == 255)
  {
    if (v65 == 255)
    {
      v67 = *v63;
      *(_BYTE *)(v62 + 16) = *((_BYTE *)v63 + 16);
      *(_OWORD *)v62 = v67;
    }
    else
    {
      v74 = v65 & 1;
      v75 = *(void **)v63;
      v76 = (void *)*((_QWORD *)v63 + 1);
      sub_10000DDE4(v75, v76, v65 & 1);
      *(_QWORD *)v62 = v75;
      *(_QWORD *)(v62 + 8) = v76;
      *(_BYTE *)(v62 + 16) = v74;
    }
  }
  else if (v65 == 255)
  {
    sub_1000180BC(v62);
    v66 = *((_BYTE *)v63 + 16);
    *(_OWORD *)v62 = *v63;
    *(_BYTE *)(v62 + 16) = v66;
  }
  else
  {
    v68 = v65 & 1;
    v69 = *(void **)v63;
    v70 = (void *)*((_QWORD *)v63 + 1);
    sub_10000DDE4(v69, v70, v65 & 1);
    v71 = *(void **)v62;
    v72 = *(void **)(v62 + 8);
    v73 = *(_BYTE *)(v62 + 16);
    *(_QWORD *)v62 = v69;
    *(_QWORD *)(v62 + 8) = v70;
    *(_BYTE *)(v62 + 16) = v68;
    sub_10000DEEC(v71, v72, v73);
  }
  *(_BYTE *)(a1 + a3[23]) = *(_BYTE *)(a2 + a3[23]);
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  *(_QWORD *)(a1 + a3[25]) = *(_QWORD *)(a2 + a3[25]);
  v77 = a3[26];
  v78 = a1 + v77;
  v79 = (__int128 *)(a2 + v77);
  v80 = *(unsigned __int8 *)(a1 + v77 + 16);
  v81 = *(unsigned __int8 *)(a2 + v77 + 16);
  if (v80 == 255)
  {
    if (v81 == 255)
    {
      v83 = *v79;
      *(_BYTE *)(v78 + 16) = *((_BYTE *)v79 + 16);
      *(_OWORD *)v78 = v83;
    }
    else
    {
      v90 = v81 & 1;
      v91 = *(void **)v79;
      v92 = (void *)*((_QWORD *)v79 + 1);
      sub_10000DDE4(v91, v92, v81 & 1);
      *(_QWORD *)v78 = v91;
      *(_QWORD *)(v78 + 8) = v92;
      *(_BYTE *)(v78 + 16) = v90;
    }
  }
  else if (v81 == 255)
  {
    sub_1000180BC(v78);
    v82 = *((_BYTE *)v79 + 16);
    *(_OWORD *)v78 = *v79;
    *(_BYTE *)(v78 + 16) = v82;
  }
  else
  {
    v84 = v81 & 1;
    v85 = *(void **)v79;
    v86 = (void *)*((_QWORD *)v79 + 1);
    sub_10000DDE4(v85, v86, v81 & 1);
    v87 = *(void **)v78;
    v88 = *(void **)(v78 + 8);
    v89 = *(_BYTE *)(v78 + 16);
    *(_QWORD *)v78 = v85;
    *(_QWORD *)(v78 + 8) = v86;
    *(_BYTE *)(v78 + 16) = v84;
    sub_10000DEEC(v87, v88, v89);
  }
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  *(_BYTE *)(a1 + a3[28]) = *(_BYTE *)(a2 + a3[28]);
  v93 = a3[29];
  v94 = (_QWORD *)(a1 + v93);
  v95 = (_QWORD *)(a2 + v93);
  *v94 = *v95;
  v96 = v95[1];
  v97 = v94[1];
  v94[1] = v96;
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRelease(v97);
  v98 = a3[30];
  v99 = (_QWORD *)(a1 + v98);
  v100 = (_QWORD *)(a2 + v98);
  *v99 = *v100;
  v101 = v100[1];
  v102 = v99[1];
  v99[1] = v101;
  swift_bridgeObjectRetain(v101);
  swift_bridgeObjectRelease(v102);
  return a1;
}

uint64_t sub_100018088(uint64_t a1)
{
  destroy for BatteryInfo(a1);
  return a1;
}

uint64_t sub_1000180BC(uint64_t a1)
{
  destroy for ColorSchemeImageSet(a1);
  return a1;
}

uint64_t sub_1000180F0(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  v7 = a3[12];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100003EA4(&qword_100055B48);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  v15 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = a3[19];
  v19 = a3[20];
  v20 = a1 + v18;
  v21 = a2 + v18;
  *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  v22 = a3[21];
  v23 = a3[22];
  v24 = a1 + v22;
  v25 = a2 + v22;
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(v25 + 16);
  v26 = a1 + v23;
  v27 = a2 + v23;
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
  v28 = a3[24];
  *(_BYTE *)(a1 + a3[23]) = *(_BYTE *)(a2 + a3[23]);
  *(_BYTE *)(a1 + v28) = *(_BYTE *)(a2 + v28);
  v29 = a3[26];
  *(_QWORD *)(a1 + a3[25]) = *(_QWORD *)(a2 + a3[25]);
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *(_BYTE *)(v30 + 16) = *(_BYTE *)(v31 + 16);
  v32 = a3[28];
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  *(_BYTE *)(a1 + v32) = *(_BYTE *)(a2 + v32);
  v33 = a3[30];
  *(_OWORD *)(a1 + a3[29]) = *(_OWORD *)(a2 + a3[29]);
  *(_OWORD *)(a1 + v33) = *(_OWORD *)(a2 + v33);
  return a1;
}

uint64_t sub_1000182D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  v10 = a3[12];
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = sub_100003EA4(&qword_100055B48);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
LABEL_7:
  v19 = a3[13];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  v25 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  v26 = (_QWORD *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  v30 = v26[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30);
  v31 = a3[16];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v35 = *v33;
  v34 = v33[1];
  v36 = v32[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease(v36);
  v37 = a3[17];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v41 = *v39;
  v40 = v39[1];
  v42 = v38[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease(v42);
  v43 = a3[18];
  v44 = a3[19];
  v45 = a1 + v43;
  v46 = a2 + v43;
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  v47 = a1 + v44;
  v48 = a2 + v44;
  *(_OWORD *)v47 = *(_OWORD *)v48;
  *(_BYTE *)(v47 + 16) = *(_BYTE *)(v48 + 16);
  v49 = a3[20];
  v50 = (_QWORD *)(a1 + v49);
  v51 = (uint64_t *)(a2 + v49);
  v53 = *v51;
  v52 = v51[1];
  v54 = v50[1];
  *v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease(v54);
  v55 = a3[21];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = *(_QWORD *)(a1 + v55 + 16);
  if (v58 == 1)
  {
LABEL_10:
    *(_OWORD *)v56 = *(_OWORD *)v57;
    *(_QWORD *)(v56 + 16) = *(_QWORD *)(v57 + 16);
    goto LABEL_12;
  }
  v59 = *(_QWORD *)(v57 + 16);
  if (v59 == 1)
  {
    sub_100018088(v56);
    goto LABEL_10;
  }
  *(_DWORD *)v56 = *(_DWORD *)v57;
  *(_BYTE *)(v56 + 4) = *(_BYTE *)(v57 + 4);
  *(_BYTE *)(v56 + 5) = *(_BYTE *)(v57 + 5);
  *(_BYTE *)(v56 + 6) = *(_BYTE *)(v57 + 6);
  *(_QWORD *)(v56 + 8) = *(_QWORD *)(v57 + 8);
  *(_QWORD *)(v56 + 16) = v59;
  swift_bridgeObjectRelease(v58);
LABEL_12:
  v60 = a3[22];
  v61 = a1 + v60;
  v62 = a2 + v60;
  v63 = *(unsigned __int8 *)(a1 + v60 + 16);
  if (v63 == 255)
  {
LABEL_15:
    *(_OWORD *)v61 = *(_OWORD *)v62;
    *(_BYTE *)(v61 + 16) = *(_BYTE *)(v62 + 16);
    goto LABEL_17;
  }
  v64 = *(unsigned __int8 *)(v62 + 16);
  if (v64 == 255)
  {
    sub_1000180BC(v61);
    goto LABEL_15;
  }
  v65 = *(void **)v61;
  v66 = *(void **)(v61 + 8);
  *(_OWORD *)v61 = *(_OWORD *)v62;
  *(_BYTE *)(v61 + 16) = v64 & 1;
  sub_10000DEEC(v65, v66, v63 & 1);
LABEL_17:
  v67 = a3[24];
  *(_BYTE *)(a1 + a3[23]) = *(_BYTE *)(a2 + a3[23]);
  *(_BYTE *)(a1 + v67) = *(_BYTE *)(a2 + v67);
  v68 = a3[26];
  *(_QWORD *)(a1 + a3[25]) = *(_QWORD *)(a2 + a3[25]);
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = *(unsigned __int8 *)(a1 + v68 + 16);
  if (v71 != 255)
  {
    v72 = *(unsigned __int8 *)(v70 + 16);
    if (v72 != 255)
    {
      v73 = *(void **)v69;
      v74 = *(void **)(v69 + 8);
      *(_OWORD *)v69 = *(_OWORD *)v70;
      *(_BYTE *)(v69 + 16) = v72 & 1;
      sub_10000DEEC(v73, v74, v71 & 1);
      goto LABEL_22;
    }
    sub_1000180BC(v69);
  }
  *(_OWORD *)v69 = *(_OWORD *)v70;
  *(_BYTE *)(v69 + 16) = *(_BYTE *)(v70 + 16);
LABEL_22:
  v75 = a3[28];
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  *(_BYTE *)(a1 + v75) = *(_BYTE *)(a2 + v75);
  v76 = a3[29];
  v77 = (_QWORD *)(a1 + v76);
  v78 = (uint64_t *)(a2 + v76);
  v80 = *v78;
  v79 = v78[1];
  v81 = v77[1];
  *v77 = v80;
  v77[1] = v79;
  swift_bridgeObjectRelease(v81);
  v82 = a3[30];
  v83 = (_QWORD *)(a1 + v82);
  v84 = (uint64_t *)(a2 + v82);
  v86 = *v84;
  v85 = v84[1];
  v87 = v83[1];
  *v83 = v86;
  v83[1] = v85;
  swift_bridgeObjectRelease(v87);
  return a1;
}

uint64_t sub_100018684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100018690);
}

uint64_t sub_100018690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100003EA4(&qword_100055B48);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v8);
  }
}

uint64_t sub_100018710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001871C);
}

uint64_t sub_10001871C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100003EA4(&qword_100055B48);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ItemModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100055BA8;
  if (!qword_100055BA8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ItemModel);
  return result;
}

void sub_1000187D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[27];

  v4[0] = &unk_100042DF0;
  v4[1] = &unk_100042DF0;
  v4[2] = &unk_100042E08;
  v4[3] = &unk_100042E08;
  v4[4] = &unk_100042E08;
  v4[5] = &unk_100042E08;
  v4[6] = &unk_100042E08;
  v4[7] = &unk_100042E08;
  sub_1000188B8(319);
  if (v3 <= 0x3F)
  {
    v4[8] = *(_QWORD *)(v2 - 8) + 64;
    v4[9] = &unk_100042E20;
    v4[10] = &unk_100042E08;
    v4[11] = &unk_100042E20;
    v4[12] = &unk_100042E20;
    v4[13] = &unk_100042E20;
    v4[14] = &unk_100042E38;
    v4[15] = &unk_100042E50;
    v4[16] = &unk_100042DF0;
    v4[17] = &unk_100042E68;
    v4[18] = &unk_100042E80;
    v4[19] = &unk_100042E08;
    v4[20] = &unk_100042E08;
    v4[21] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[22] = &unk_100042E80;
    v4[23] = &unk_100042E08;
    v4[24] = &unk_100042E08;
    v4[25] = &unk_100042E20;
    v4[26] = &unk_100042E20;
    swift_initStructMetadata(a1, 256, 27, v4, a1 + 16);
  }
}

void sub_1000188B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100055BB8)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100055BB8);
  }
}

uint64_t sub_10001890C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, void *a5@<X4>, void *a6@<X5>, int a7@<W6>, double a8@<X7>, unint64_t a9@<X8>, char a10, void *a11, void *a12, unsigned __int8 a13, uint64_t a14)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  void (*v61)(char *, uint64_t);
  int v62;
  id v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v79;
  char *v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  id v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  void *v92;
  id v93;
  Swift::String v94;
  Swift::String v95;
  Swift::String v96;
  uint64_t *v97;
  _QWORD *v98;
  uint64_t v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int (*v106)(uint64_t, uint64_t, uint64_t);
  id v107;
  void *v108;
  uint64_t v109;
  uint64_t *v110;
  void *v111;
  char *v112;
  uint64_t v113;
  uint64_t (*v114)(char *, uint64_t, uint64_t);
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  void *v129;
  id v130;
  Swift::String v131;
  Swift::String v132;
  Swift::String v133;
  uint64_t *v134;
  void *v135;
  uint64_t v136;
  id v137;
  Swift::String v138;
  Swift::String v139;
  Swift::String v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  void *v145;
  uint64_t *v146;
  BOOL v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  char *v157;
  uint64_t v158;
  int v159;
  _QWORD *v160;
  void *v161;
  void *v162;
  char v163;
  double v164;
  unsigned __int8 v165;
  unint64_t v166;
  double v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  Swift::String v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  _QWORD *v187;
  uint64_t v188;
  unsigned int v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  _BOOL4 v197;
  unsigned int (*v198)(char *, uint64_t, uint64_t);
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  int v204;
  char *v205;
  _BOOL4 v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int *v212;
  uint64_t v213;
  double v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  unint64_t *v222;
  void *v223;
  uint64_t v224;
  uint64_t *v225;
  int v226;
  int v227;
  uint64_t v228;
  _BOOL4 v229;
  void *v230;
  unsigned int v231;
  id v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  _QWORD v241[14];
  _QWORD v242[5];
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  void *v251;
  Swift::String v252;
  Swift::String v253;
  Swift::String v254;
  Swift::String v255;
  Swift::String v256;

  v214 = a8;
  v226 = a7;
  v230 = a6;
  v223 = a5;
  v204 = a3;
  v225 = a2;
  sub_10001C888((uint64_t)a2, (uint64_t)v241, &qword_100055608);
  v193 = (void *)v241[11];
  v194 = v241[10];
  v211 = type metadata accessor for FMIPItemBatteryStatus(0);
  v221 = *(_QWORD *)(v211 - 8);
  __chkstk_darwin(v211);
  v220 = (char *)&v193 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for FMIPItemRole(0);
  v218 = *(_QWORD *)(v18 - 8);
  v219 = v18;
  __chkstk_darwin(v18);
  v217 = (char *)&v193 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003EA4(&qword_100055CF0);
  v21 = __chkstk_darwin(v20);
  v208 = (char *)&v193 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v203 = (char *)&v193 - v23;
  v224 = type metadata accessor for FMIPItem(0);
  v228 = *(_QWORD *)(v224 - 8);
  __chkstk_darwin(v224);
  v205 = (char *)&v193 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Date(0);
  v209 = *(_QWORD *)(v25 - 8);
  v210 = v25;
  v26 = __chkstk_darwin(v25);
  v201 = (char *)&v193 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v196 = (char *)&v193 - v28;
  v29 = sub_100003EA4(&qword_100055B48);
  v30 = __chkstk_darwin(v29);
  v202 = (char *)&v193 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v207 = (uint64_t)&v193 - v32;
  v33 = type metadata accessor for FMIPItemState(0);
  v213 = *(_QWORD *)(v33 - 8);
  v34 = __chkstk_darwin(v33);
  v36 = (char *)&v193 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v38 = (char *)&v193 - v37;
  v39 = sub_100003EA4(&qword_1000555F8);
  v40 = __chkstk_darwin(v39);
  v200 = (char *)&v193 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v43 = (char *)&v193 - v42;
  v44 = (int *)type metadata accessor for ItemModel(0);
  v45 = (_QWORD *)(a9 + v44[17]);
  *v45 = 0;
  v45[1] = 0;
  v46 = a9 + v44[18];
  *(_QWORD *)v46 = 0;
  *(_BYTE *)(v46 + 8) = 1;
  v47 = a9 + v44[19];
  *(_QWORD *)v47 = 0;
  *(_QWORD *)(v47 + 8) = 0;
  *(_BYTE *)(v47 + 16) = 1;
  *(_BYTE *)(a9 + v44[28]) = 0;
  *(_OWORD *)(a9 + v44[29]) = xmmword_100042D90;
  v212 = v44;
  v48 = (unint64_t *)(a9 + v44[30]);
  v229 = a4 != 2;
  v206 = a4 == 2;
  v231 = a4;
  if (a4 == 2)
    v49 = 0;
  else
    v49 = (a4 >> 8) & 1;
  v227 = v49;
  v233 = a14;
  v197 = a14 != 0;
  *v48 = 0;
  v48[1] = 0;
  v222 = v48;
  v50 = FMIPItem.name.getter();
  v215 = v51;
  v216 = v50;
  v234 = a1;
  FMIPItem.location.getter();
  v52 = type metadata accessor for FMIPLocation(0);
  v53 = *(_QWORD *)(v52 - 8);
  v198 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
  v54 = v198(v43, 1, v52);
  v199 = v52;
  v195 = v53;
  if (v54 == 1)
  {
    v55 = sub_10000EB5C((uint64_t)v43, &qword_1000555F8);
    v232 = 0;
  }
  else
  {
    v232 = (id)FMIPLocation.location.getter();
    v55 = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v43, v52);
  }
  v57 = v212;
  v56 = v213;
  v58 = FMIPItem.state.getter(v55);
  static FMIPItemState.isBTConnected.getter(v58);
  v59 = sub_10000EB1C(&qword_100055CF8, (uint64_t (*)(uint64_t))&type metadata accessor for FMIPItemState, (uint64_t)&protocol conformance descriptor for FMIPItemState);
  v60 = dispatch thunk of SetAlgebra.isSuperset(of:)(v36, v33, v59);
  v61 = *(void (**)(char *, uint64_t))(v56 + 8);
  v61(v36, v33);
  v61(v38, v33);
  if ((v231 & 1) != 0)
    v62 = (a4 >> 8) & 1;
  else
    v62 = 1;
  if ((v229 & v62 & 1) == 0 && !v233 && v232)
  {
    *(_BYTE *)(a9 + 37) = 1;
    if ((v60 & 1) != 0)
    {
      (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v209 + 56))(a9 + v57[12], 1, 1, v210);
      v63 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v252._object = (void *)0xE000000000000000;
      v64._countAndFlagsBits = 0x756F5968746957;
      v64._object = (void *)0xE700000000000000;
      v65._countAndFlagsBits = 0;
      v65._object = (void *)0xE000000000000000;
      v252._countAndFlagsBits = 0;
      v66 = NSLocalizedString(_:tableName:bundle:value:comment:)(v64, (Swift::String_optional)0, (NSBundle)v63, v65, v252);
      countAndFlagsBits = v66._countAndFlagsBits;
      object = v66._object;

      v69 = v234;
      v70 = v224;
    }
    else
    {
      v77 = v209;
      v76 = v210;
      v78 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v209 + 56);
      v78(v207, 1, 1, v210);
      v79 = objc_msgSend(v232, "timestamp");
      v80 = v201;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v81 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
      v82 = (uint64_t)v202;
      v81(v202, v80, v76);
      v78(v82, 0, 1, v76);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v82, 1, v76) == 1)
      {
        sub_10000EB5C(v82, &qword_100055B48);
      }
      else
      {
        v101 = v196;
        v102 = ((uint64_t (*)(char *, uint64_t, uint64_t))v81)(v196, v82, v76);
        if (fabs(Date.timeIntervalSinceNow.getter(v102)) >= 7200.0)
        {
          (*(void (**)(char *, uint64_t))(v77 + 8))(v101, v76);
        }
        else
        {
          v103 = v207;
          sub_10000EB5C(v207, &qword_100055B48);
          v81((char *)v103, v101, v76);
          v78(v103, 0, 1, v76);
        }
      }
      v69 = v234;
      v70 = v224;
      v105 = v199;
      v104 = (uint64_t)v200;
      v106 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v198;
      sub_10001C840(v207, a9 + v57[12]);
      v107 = v232;
      FMIPItem.location.getter();
      if (v106(v104, 1, v105) == 1)
      {
        sub_10000EB5C(v104, &qword_1000555F8);
      }
      else
      {
        FMIPLocation.isOld.getter();
        (*(void (**)(uint64_t, uint64_t))(v195 + 8))(v104, v105);
      }
      countAndFlagsBits = sub_100035C24(v107);
      object = v108;

      sub_10000EB5C(v207, &qword_100055B48);
    }
    v109 = (uint64_t)v208;
    v110 = (uint64_t *)(a9 + v57[13]);
    *v110 = countAndFlagsBits;
    v110[1] = (uint64_t)object;
    *(_BYTE *)(a9 + v57[14]) = 0;
    sub_10001C888((uint64_t)v225, (uint64_t)&v250, &qword_100055608);
    v111 = v251;
    if (v251 == (void *)1)
    {
      v112 = v205;
      v113 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v228 + 16))(v205, v69, v70);
      v88 = v223;
    }
    else
    {
      v213 = v250;
      v114 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v228 + 16);
      swift_bridgeObjectRetain(v251);
      v112 = v205;
      v113 = v114(v205, v69, v70);
      v87 = v230;
      v88 = v223;
      if (v111)
      {
        v115 = (*(uint64_t (**)(char *, uint64_t))(v228 + 8))(v112, v70);
        goto LABEL_46;
      }
    }
    v116 = v88;
    v117 = (uint64_t)v203;
    FMIPItem.address.getter(v113);
    v118 = type metadata accessor for FMIPAddress(0);
    v119 = v112;
    v120 = *(_QWORD *)(v118 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v117, 1, v118) == 1)
    {
      (*(void (**)(char *, uint64_t))(v228 + 8))(v119, v70);
      v115 = sub_10000EB5C(v117, &qword_100055CF0);
      v213 = 0;
      v111 = 0;
    }
    else
    {
      v121 = v117;
      v213 = FMIPAddress.locality.getter();
      v111 = v122;
      (*(void (**)(char *, uint64_t))(v228 + 8))(v119, v70);
      v115 = (*(uint64_t (**)(uint64_t, uint64_t))(v120 + 8))(v121, v118);
    }
    v109 = (uint64_t)v208;
    v88 = v116;
    v87 = v230;
LABEL_46:
    FMIPItem.address.getter(v115);
    v123 = type metadata accessor for FMIPAddress(0);
    v124 = *(_QWORD *)(v123 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48))(v109, 1, v123) == 1)
    {
      sub_10000EB5C(v109, &qword_100055CF0);
      v125 = v225;
    }
    else
    {
      v126 = FMIPAddress.label.getter();
      v127 = v109;
      v129 = v128;
      (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v127, v123);
      v125 = v225;
      if (v129)
        goto LABEL_56;
    }
    if ((v204 & 1) != 0)
    {
      swift_bridgeObjectRelease(0);
      sub_10001C888((uint64_t)v125, (uint64_t)&v244, &qword_100055608);
      if (v245 == 1)
        goto LABEL_62;
      v126 = v248;
      v129 = v249;
      if (!v249)
        goto LABEL_62;
    }
    else
    {
      sub_10001C888((uint64_t)v125, (uint64_t)&v244, &qword_100055608);
      if (v245 == 1)
      {
        swift_bridgeObjectRelease(0);
LABEL_62:
        v130 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v255._object = (void *)0xE000000000000000;
        v131._countAndFlagsBits = 0x7365726464416F4ELL;
        v131._object = (void *)0xEE00646E756F4673;
        v132._countAndFlagsBits = 0;
        v132._object = (void *)0xE000000000000000;
        v255._countAndFlagsBits = 0;
        v133 = NSLocalizedString(_:tableName:bundle:value:comment:)(v131, (Swift::String_optional)0, (NSBundle)v130, v132, v255);
        v126 = v133._countAndFlagsBits;
        v129 = v133._object;
        swift_bridgeObjectRelease(0);

        goto LABEL_63;
      }
      v126 = v246;
      v129 = v247;
      swift_bridgeObjectRetain(v247);
      swift_bridgeObjectRelease(0);
      if (v129)
      {
LABEL_56:
        if (v111
          && (v213 == v126 && v111 == v129
           || (_stringCompareWithSmolCheck(_:_:expecting:)(v213, v111, v126, v129, 0) & 1) != 0))
        {
          swift_bridgeObjectRelease(v129);
          v126 = 0;
          v129 = 0;
        }
LABEL_63:
        v134 = (uint64_t *)(a9 + v57[15]);
        *v134 = v126;
        v134[1] = (uint64_t)v129;
        sub_10001C888((uint64_t)v125, (uint64_t)v242, &qword_100055608);
        if (v242[1] == 1)
        {
          if (!v111)
          {
            v135 = 0;
            goto LABEL_73;
          }
        }
        else
        {
          v136 = v242[4];
          v135 = v243;
          swift_bridgeObjectRetain(v243);
          sub_10001C8CC(v125);
          if (!v111)
            goto LABEL_73;
          if (v135)
          {
            if ((v136 != v213 || v135 != v111)
              && (_stringCompareWithSmolCheck(_:_:expecting:)(v136, v135, v213, v111, 0) & 1) == 0
              && (v204 & 1) == 0)
            {
              v137 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
              v256._object = (void *)0xEE007972746E756FLL;
              v138._countAndFlagsBits = 0x43646E4179746943;
              v138._object = (void *)0xEE007972746E756FLL;
              v139._countAndFlagsBits = 0;
              v139._object = (void *)0xE000000000000000;
              v256._countAndFlagsBits = 0x43646E4179746943;
              v140 = NSLocalizedString(_:tableName:bundle:value:comment:)(v138, (Swift::String_optional)0, (NSBundle)v137, v139, v256);

              v141 = sub_100003EA4(&qword_100055638);
              v142 = swift_allocObject(v141, 112, 7);
              *(_OWORD *)(v142 + 16) = xmmword_100042880;
              *(_QWORD *)(v142 + 56) = &type metadata for String;
              v143 = sub_10000EB9C();
              *(_QWORD *)(v142 + 32) = v213;
              *(_QWORD *)(v142 + 40) = v111;
              *(_QWORD *)(v142 + 96) = &type metadata for String;
              *(_QWORD *)(v142 + 104) = v143;
              v88 = v223;
              *(_QWORD *)(v142 + 64) = v143;
              *(_QWORD *)(v142 + 72) = v136;
              *(_QWORD *)(v142 + 80) = v135;
              v213 = String.init(format:_:)(v140._countAndFlagsBits, v140._object, v142);
              v111 = v144;
              v145 = v140._object;
              v87 = v230;
LABEL_74:
              swift_bridgeObjectRelease(v145);
              goto LABEL_75;
            }
LABEL_73:
            v145 = v135;
            goto LABEL_74;
          }
        }
LABEL_75:
        v146 = (uint64_t *)(a9 + v57[16]);
        *v146 = v213;
        v146[1] = (uint64_t)v111;
        *(_BYTE *)(a9 + v57[23]) = 0;
        v100 = (_BYTE)v226 == 0xFF;
        v89 = v211;
        goto LABEL_76;
      }
      v129 = v193;
      v126 = v194;
      if (!v193)
        goto LABEL_62;
    }
    swift_bridgeObjectRetain(v129);
    goto LABEL_63;
  }
  v71 = v206 | v231;
  v72 = v233 != 0;
  sub_10001C8CC(v225);
  *(_BYTE *)(a9 + 37) = 0;
  (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v209 + 56))(a9 + v57[12], 1, 1, v210);
  v74 = sub_10001C1C8(v71 & 1, v227, v72, 0, 0, 0);
  if (v73)
  {
    v75 = v73;
  }
  else
  {
    v83 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v253._object = (void *)0xE000000000000000;
    v84._countAndFlagsBits = 0x697461636F4C6F4ELL;
    v84._object = (void *)0xEF646E756F466E6FLL;
    v85._countAndFlagsBits = 0;
    v85._object = (void *)0xE000000000000000;
    v253._countAndFlagsBits = 0;
    v86 = NSLocalizedString(_:tableName:bundle:value:comment:)(v84, (Swift::String_optional)(unint64_t)v74, (NSBundle)v83, v85, v253);
    v74 = v86._countAndFlagsBits;
    v75 = v86._object;

  }
  v87 = v230;
  v88 = v223;
  v89 = v211;
  v90 = (uint64_t *)(a9 + v57[15]);
  *v90 = v74;
  v90[1] = (uint64_t)v75;
  if ((v71 & 1) != 0)
  {
    v91 = 0;
    v92 = 0;
  }
  else
  {
    v93 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v254._object = (void *)0xE000000000000000;
    v94._object = (void *)0x8000000100041BF0;
    v94._countAndFlagsBits = 0xD000000000000013;
    v95._countAndFlagsBits = 0;
    v95._object = (void *)0xE000000000000000;
    v254._countAndFlagsBits = 0;
    v96 = NSLocalizedString(_:tableName:bundle:value:comment:)(v94, (Swift::String_optional)0, (NSBundle)v93, v95, v254);
    v91 = v96._countAndFlagsBits;
    v92 = v96._object;

  }
  v97 = (uint64_t *)(a9 + v57[16]);
  *v97 = v91;
  v97[1] = (uint64_t)v92;
  v98 = (_QWORD *)(a9 + v57[13]);
  *v98 = 0;
  v98[1] = 0;
  *(_BYTE *)(a9 + v57[14]) = 0;
  v99 = v57[23];
  if (v232)
  {
    if ((v71 & 1) != 0)
    {
      if (v227)
      {
        v100 = 0;
        *(_BYTE *)(a9 + v99) = 1;
      }
      else
      {
        *(_BYTE *)(a9 + v99) = 0;
        v100 = v197;
      }
    }
    else
    {
      *(_BYTE *)(a9 + v99) = 0;
      v100 = 1;
    }
  }
  else
  {
    *(_BYTE *)(a9 + v99) = 1;
    v100 = v71 ^ 1;
    if (((v71 ^ 1 | v227) & 1) == 0)
      v100 = v197;
  }
LABEL_76:
  v147 = v233 != 0;
  *(_BYTE *)(a9 + v57[24]) = v100 & 1;
  *(_QWORD *)a9 = FMIPItem.identifier.getter();
  *(_QWORD *)(a9 + 8) = v148;
  v149 = v217;
  v150 = v215;
  *(_QWORD *)(a9 + 16) = v216;
  *(_QWORD *)(a9 + 24) = v150;
  *(_BYTE *)(a9 + 32) = 0;
  *(_BYTE *)(a9 + 33) = v229 & v231;
  *(_BYTE *)(a9 + 34) = 0;
  *(_BYTE *)(a9 + 35) = v147;
  *(_BYTE *)(a9 + 36) = 0;
  v151 = FMIPItem.role.getter();
  v152 = FMIPItemRole.emoji.getter(v151);
  v154 = v153;
  v155 = (*(uint64_t (**)(char *, uint64_t))(v218 + 8))(v149, v219);
  v156 = (uint64_t *)(a9 + v57[20]);
  *v156 = v152;
  v156[1] = v154;
  v157 = v220;
  FMIPItem.batteryStatus.getter(v155);
  v158 = v221;
  v159 = (*(uint64_t (**)(char *, uint64_t))(v221 + 88))(v157, v89);
  if (v159 == enum case for FMIPItemBatteryStatus.unknown(_:)
    || v159 == enum case for FMIPItemBatteryStatus.highPower(_:)
    || v159 == enum case for FMIPItemBatteryStatus.fresh(_:)
    || v159 == enum case for FMIPItemBatteryStatus.earlyLife(_:)
    || v159 == enum case for FMIPItemBatteryStatus.lateLife(_:))
  {
    v160 = (_QWORD *)(a9 + v57[21]);
    *v160 = 0;
    v160[1] = 0;
    v160[2] = 1;
  }
  else if (v159 == enum case for FMIPItemBatteryStatus.replace(_:)
         || v159 == enum case for FMIPItemBatteryStatus.dead(_:))
  {
    v188 = sub_10003D070(0, 0, 1, 0.0);
    v190 = (unint64_t *)(a9 + v57[21]);
    *v190 = v189 | ((unint64_t)(v188 & 0x10101) << 32);
    v190[1] = v191;
    v190[2] = v192;
  }
  else
  {
    v187 = (_QWORD *)(a9 + v57[21]);
    *v187 = 0;
    v187[1] = 0;
    v187[2] = 1;
    (*(void (**)(char *, uint64_t))(v158 + 8))(v157, v89);
  }
  if ((v227 & 1) != 0)
  {
    v161 = 0;
    v162 = 0;
    v163 = -1;
    v164 = v214;
    v165 = v226;
  }
  else
  {
    v165 = v226;
    sub_10000DDCC(v88, v87, v226);
    v161 = v88;
    v162 = v87;
    v163 = v165;
    v164 = v214;
  }
  v166 = a9 + v57[22];
  *(_QWORD *)v166 = v161;
  *(_QWORD *)(v166 + 8) = v162;
  *(_BYTE *)(v166 + 16) = v163;
  v167 = v164;
  if ((a10 & 1) != 0)
    v167 = 0.0;
  *(double *)(a9 + v57[25]) = v167;
  v168 = a9 + v57[26];
  *(_QWORD *)v168 = a11;
  *(_QWORD *)(v168 + 8) = a12;
  *(_BYTE *)(v168 + 16) = a13;
  *(_BYTE *)(a9 + v57[27]) = 0;
  v235 = a9;
  sub_10000DDCC(a11, a12, a13);
  v169 = sub_100003EA4(&qword_100055C50);
  v170 = sub_10001C438();
  v171 = _Pointer.debugDescription.getter(v169, v170);
  v173 = v172;
  v174 = sub_100012188(9uLL, v171, v172);
  v176 = v175;
  v239 = 7876668;
  v240 = 0xE300000000000000;
  v235 = v174;
  v236 = v177;
  v237 = v178;
  v238 = v175;
  v179 = sub_100012230();
  String.append<A>(contentsOf:)(&v235, &type metadata for Substring, v179);
  swift_bridgeObjectRelease(v176);
  v180 = v240;
  v235 = v239;
  v236 = v240;
  swift_bridgeObjectRetain(v240);
  v181._countAndFlagsBits = 15987;
  v181._object = (void *)0xE200000000000000;
  String.append(_:)(v181);
  swift_bridgeObjectRelease(v173);
  swift_bridgeObjectRelease(v180);
  swift_errorRelease(v233);
  sub_10000E03C(a11, a12, a13);
  sub_10000E03C(v88, v230, v165);
  v182 = v235;
  v183 = v236;

  (*(void (**)(uint64_t, uint64_t))(v228 + 8))(v234, v224);
  v184 = v222;
  v185 = v222[1];
  *v222 = v182;
  v184[1] = v183;
  return swift_bridgeObjectRelease(v185);
}

double sub_100019A88@<D0>(__int16 a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, unint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  id v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  unint64_t *v41;
  uint64_t v42;
  BOOL v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  Swift::String v60;
  unint64_t v61;
  unint64_t v62;
  double result;
  uint64_t v64;
  unint64_t *v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  Swift::String v76;

  v69 = a5;
  v67 = a4;
  v68 = a3;
  v66 = a2;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for ItemModel(0);
  v15 = (_QWORD *)(a7 + v14[17]);
  *v15 = 0;
  v15[1] = 0;
  v16 = a7 + v14[18];
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  v17 = a7 + v14[19];
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_BYTE *)(v17 + 16) = 1;
  *(_BYTE *)(a7 + v14[28]) = 0;
  *(_OWORD *)(a7 + v14[29]) = xmmword_100042D90;
  v18 = (unint64_t *)(a7 + v14[30]);
  if (a1 == 2)
    v19 = 0;
  else
    v19 = HIBYTE(a1) & 1;
  v20 = (a1 == 2) | a1;
  *v18 = 0;
  v18[1] = 0;
  v65 = v18;
  v21 = UUID.init()();
  v22 = UUID.uuidString.getter(v21);
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *(_QWORD *)a7 = v22;
  *(_QWORD *)(a7 + 8) = v24;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)(a7 + 24) = 0xE000000000000000;
  v25 = v67;
  *(_BYTE *)(a7 + 32) = v66;
  *(_BYTE *)(a7 + 33) = v20 & 1;
  *(_BYTE *)(a7 + 34) = v25;
  v26 = v69 != 0;
  *(_BYTE *)(a7 + 35) = v69 != 0;
  *(_BYTE *)(a7 + 36) = a6;
  *(_BYTE *)(a7 + 37) = 0;
  v27 = a7 + v14[12];
  v28 = type metadata accessor for Date(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  v29 = (_QWORD *)(a7 + v14[13]);
  *v29 = 0;
  v29[1] = 0;
  *(_BYTE *)(a7 + v14[14]) = 0;
  v30 = v25;
  v31 = v68;
  v32 = sub_10001C1C8(v20 & 1, v19, v26, a6, v68, v30);
  v33 = (uint64_t *)(a7 + v14[15]);
  *v33 = v32;
  v33[1] = v34;
  if ((v20 & 1) == 0)
  {
    v37 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v76._object = (void *)0xE000000000000000;
    v38._object = (void *)0x8000000100041BF0;
    v38._countAndFlagsBits = 0xD000000000000013;
    v39._countAndFlagsBits = 0;
    v39._object = (void *)0xE000000000000000;
    v76._countAndFlagsBits = 0;
    v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(v38, (Swift::String_optional)0, (NSBundle)v37, v39, v76);

    *(Swift::String *)(a7 + v14[16]) = v40;
    *(_BYTE *)(a7 + v14[23]) = 0;
    v36 = 1;
    goto LABEL_8;
  }
  v35 = (_QWORD *)(a7 + v14[16]);
  *v35 = 0;
  v35[1] = 0;
  if ((v19 & 1) != 0)
  {
    v36 = 0;
    *(_BYTE *)(a7 + v14[23]) = 1;
LABEL_8:
    v41 = v65;
    goto LABEL_9;
  }
  v41 = v65;
  if (v69)
  {
    *(_BYTE *)(a7 + v14[23]) = 0;
    v36 = 1;
  }
  else
  {
    v64 = v14[23];
    if ((a6 & 1) != 0 || (v31 & 1) != 0)
    {
      *(_BYTE *)(a7 + v64) = a6 & 1;
    }
    else
    {
      *(_BYTE *)(a7 + v64) = 0;
      if ((v30 & 1) == 0)
      {
        *(_BYTE *)(a7 + v14[24]) = 0;
        goto LABEL_10;
      }
    }
    v36 = a6 ^ 1;
  }
LABEL_9:
  *(_BYTE *)(a7 + v14[24]) = v36 & 1;
LABEL_10:
  v42 = v69;
  v43 = v69 != 0;
  v44 = (_QWORD *)(a7 + v14[20]);
  *v44 = 0;
  v44[1] = 0xE000000000000000;
  v45 = (_QWORD *)(a7 + v14[21]);
  *v45 = 0;
  v45[1] = 0;
  v45[2] = 1;
  v46 = a7 + v14[22];
  *(_QWORD *)v46 = 0;
  *(_QWORD *)(v46 + 8) = 0;
  *(_BYTE *)(v46 + 16) = -1;
  *(_QWORD *)(a7 + v14[25]) = 0;
  v47 = a7 + v14[26];
  *(_QWORD *)v47 = 0;
  *(_QWORD *)(v47 + 8) = 0;
  *(_BYTE *)(v47 + 16) = -1;
  *(_BYTE *)(a7 + v14[27]) = (v43 | a6 | v31) & 1;
  v70 = a7;
  v48 = sub_100003EA4(&qword_100055C50);
  v49 = sub_10001C438();
  v50 = _Pointer.debugDescription.getter(v48, v49);
  v52 = v51;
  v53 = sub_100012188(9uLL, v50, v51);
  v55 = v54;
  v74 = 7876668;
  v75 = 0xE300000000000000;
  v70 = v53;
  v71 = v56;
  v72 = v57;
  v73 = v54;
  v58 = sub_100012230();
  String.append<A>(contentsOf:)(&v70, &type metadata for Substring, v58);
  swift_bridgeObjectRelease(v55);
  v59 = v75;
  v70 = v74;
  v71 = v75;
  swift_bridgeObjectRetain(v75);
  v60._countAndFlagsBits = 15987;
  v60._object = (void *)0xE200000000000000;
  String.append(_:)(v60);
  swift_bridgeObjectRelease(v59);
  swift_errorRelease(v42);
  swift_bridgeObjectRelease(v52);
  v61 = v71;
  v62 = v41[1];
  *v41 = v70;
  v41[1] = v61;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v62).n128_u64[0];
  return result;
}

uint64_t sub_100019EA8()
{
  uint64_t *v0;
  Swift::String v1;
  int *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;

  _StringGuts.grow(_:)(80);
  v1._countAndFlagsBits = 0x65646F4D6D657449;
  v1._object = (void *)0xE90000000000006CLL;
  String.append(_:)(v1);
  v2 = (int *)type metadata accessor for ItemModel(0);
  v3 = (uint64_t *)((char *)v0 + v2[30]);
  v4 = v3[1];
  if (v4)
    v5 = *v3;
  else
    v5 = 0;
  if (v4)
    v6 = (void *)v3[1];
  else
    v6 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v4);
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9 = *v0;
  v10 = (void *)v0[1];
  swift_bridgeObjectRetain(v10);
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 2236460;
  v12._object = (void *)0xE300000000000000;
  String.append(_:)(v12);
  v13 = v0[2];
  v14 = (void *)v0[3];
  swift_bridgeObjectRetain(v14);
  v15._countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  v16._object = (void *)0x8000000100041C50;
  v16._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v16);
  v17 = (uint64_t *)((char *)v0 + v2[13]);
  v18 = v17[1];
  if (v18)
    v19 = *v17;
  else
    v19 = 0;
  if (v18)
    v20 = (void *)v17[1];
  else
    v20 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v18);
  v21._countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v20);
  v22._object = (void *)0x8000000100041C70;
  v22._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v22);
  v23 = (uint64_t *)((char *)v0 + v2[15]);
  v24 = v23[1];
  if (v24)
    v25 = *v23;
  else
    v25 = 0;
  if (v24)
    v26 = (void *)v23[1];
  else
    v26 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v24);
  v27._countAndFlagsBits = v25;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v26);
  v28._countAndFlagsBits = 0xD000000000000013;
  v28._object = (void *)0x8000000100041C90;
  String.append(_:)(v28);
  v29 = (uint64_t *)((char *)v0 + v2[16]);
  v30 = v29[1];
  if (v30)
    v31 = *v29;
  else
    v31 = 0;
  if (v30)
    v32 = (void *)v29[1];
  else
    v32 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v30);
  v33._countAndFlagsBits = v31;
  v33._object = v32;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(v32);
  v34._countAndFlagsBits = 34;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  return 0;
}

uint64_t sub_10001A0E0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001A11C + 4 * byte_100042DA0[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_10001A11C()
{
  return 1701667182;
}

uint64_t sub_10001A12C()
{
  return 0x686563616C507369;
}

uint64_t sub_10001A150()
{
  return 0x64656E6769537369;
}

uint64_t sub_10001A16C()
{
  return 0x4C7974706D457369;
}

uint64_t sub_10001A18C()
{
  return 0x6576726553736168;
}

uint64_t sub_10001A1B0()
{
  return 0x64656D6954736168;
}

uint64_t sub_10001A1D4()
{
  return 0x7461636F4C736168;
}

unint64_t sub_10001A1F4()
{
  return 0xD000000000000010;
}

uint64_t sub_10001A36C()
{
  return 0x7963617275636361;
}

uint64_t sub_10001A390(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_10001A0E0(*a1);
  v5 = v4;
  v6 = sub_10001A0E0(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10001A418()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_10001A0E0(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double sub_10001A478(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = sub_10001A0E0(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int sub_10001A4B8(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_10001A0E0(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10001A514@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10001CBEC(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10001A540@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10001A0E0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10001A568()
{
  unsigned __int8 *v0;

  return sub_10001A0E0(*v0);
}

uint64_t sub_10001A570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10001CBEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10001A594()
{
  return 0;
}

void sub_10001A5A0(_BYTE *a1@<X8>)
{
  *a1 = 23;
}

uint64_t sub_10001A5AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001C4A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001A5D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001C4A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10001A5FC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  const mach_header_64 *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  id v60;
  Class isa;
  id v62;
  uint64_t v63;
  unint64_t v64;
  id v65;
  Class v66;
  id v67;
  char *v68;
  char v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  id v74;
  Class v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  id v79;
  Class v80;
  id v81;
  char *v82;
  id v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  Swift::String v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  id v103;
  id v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  _QWORD *v111;
  uint64_t *v112;
  int *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;

  v5 = sub_100003EA4(&qword_100055B48);
  __chkstk_darwin(v5);
  v7 = (char *)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003EA4(&qword_100055C60);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ItemModel(0);
  v13 = (int *)__chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = (char *)v15 + v13[17];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v108 = v16;
  v17 = (char *)v15 + v13[18];
  *(_QWORD *)v17 = 0;
  v17[8] = 1;
  v18 = (char *)v15 + v13[19];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  v18[16] = 1;
  *((_BYTE *)v15 + v13[28]) = 0;
  v19 = (char *)v15 + v13[29];
  *(_OWORD *)v19 = xmmword_100042D90;
  v112 = v15;
  v113 = v13;
  v20 = (char *)v15 + v13[30];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  v109 = v19;
  v110 = v20;
  v22 = a1[3];
  v21 = a1[4];
  v111 = a1;
  sub_10001C484(a1, v22);
  v23 = sub_10001C4A8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ItemModel.CodingKeys, &type metadata for ItemModel.CodingKeys, v23, v22, v21);
  if (v2)
  {
    sub_100011DC0(v111);
    v26 = v109;
    v27 = v110;
    swift_bridgeObjectRelease(*((_QWORD *)v108 + 1));
    swift_bridgeObjectRelease(*((_QWORD *)v26 + 1));
    swift_bridgeObjectRelease(*((_QWORD *)v27 + 1));
  }
  else
  {
    v105 = a2;
    v106 = v7;
    v107 = v9;
    LOBYTE(v116) = 0;
    v24 = KeyedDecodingContainer.decode(_:forKey:)(&v116, v8);
    v25 = v8;
    v28 = v112;
    *v112 = v24;
    v28[1] = v29;
    LOBYTE(v116) = 1;
    v30 = KeyedDecodingContainer.decode(_:forKey:)(&v116, v8);
    v31 = v113;
    v28[2] = v30;
    v28[3] = v32;
    LOBYTE(v116) = 2;
    *((_BYTE *)v28 + 32) = KeyedDecodingContainer.decode(_:forKey:)(&v116, v8) & 1;
    LOBYTE(v116) = 3;
    *((_BYTE *)v28 + 33) = KeyedDecodingContainer.decode(_:forKey:)(&v116, v8) & 1;
    LOBYTE(v116) = 4;
    *((_BYTE *)v28 + 34) = KeyedDecodingContainer.decode(_:forKey:)(&v116, v8) & 1;
    LOBYTE(v116) = 5;
    *((_BYTE *)v28 + 35) = KeyedDecodingContainer.decode(_:forKey:)(&v116, v8) & 1;
    LOBYTE(v116) = 6;
    *((_BYTE *)v28 + 36) = KeyedDecodingContainer.decode(_:forKey:)(&v116, v8) & 1;
    LOBYTE(v116) = 7;
    *((_BYTE *)v28 + 37) = KeyedDecodingContainer.decode(_:forKey:)(&v116, v8) & 1;
    v33 = type metadata accessor for Date(0);
    LOBYTE(v116) = 8;
    v34 = sub_10000EB1C(&qword_100055C70, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v35 = v106;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v33, &v116, v25, v33, v34);
    (*(void (**)(id, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v35, 0, 1, v33);
    sub_10001C888((uint64_t)v35, (uint64_t)v28 + v31[12], &qword_100055B48);
    LOBYTE(v116) = 9;
    v36 = v25;
    v37 = v11;
    v38 = KeyedDecodingContainer.decode(_:forKey:)(&v116, v25);
    v39 = (uint64_t *)((char *)v112 + v113[13]);
    *v39 = v38;
    v39[1] = v40;
    LOBYTE(v116) = 10;
    v41 = KeyedDecodingContainer.decode(_:forKey:)(&v116, v25);
    *((_BYTE *)v112 + v113[14]) = v41 & 1;
    LOBYTE(v116) = 11;
    v42 = KeyedDecodingContainer.decode(_:forKey:)(&v116, v25);
    v43 = (uint64_t *)((char *)v112 + v113[15]);
    *v43 = v42;
    v43[1] = v44;
    LOBYTE(v116) = 12;
    v45 = KeyedDecodingContainer.decode(_:forKey:)(&v116, v25);
    v46 = (uint64_t *)((char *)v112 + v113[16]);
    *v46 = v45;
    v46[1] = v47;
    LOBYTE(v116) = 13;
    v48 = KeyedDecodingContainer.decode(_:forKey:)(&v116, v25);
    v49 = (uint64_t *)((char *)v112 + v113[20]);
    *v49 = v48;
    v49[1] = v50;
    LOBYTE(v114) = 14;
    v51 = sub_10001C500();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for BatteryInfo, &v114, v25, &type metadata for BatteryInfo, v51);
    v52 = &_mh_execute_header;
    if (!BYTE4(v116))
      v52 = 0;
    v53 = (unint64_t)v52 | v116;
    v54 = 0x10000000000;
    if (!BYTE5(v116))
      v54 = 0;
    v55 = 0x1000000000000;
    if (!BYTE6(v116))
      v55 = 0;
    v56 = v53 | v54 | v55;
    v57 = (char *)v112 + v113[21];
    *(_QWORD *)v57 = v56;
    *(_OWORD *)(v57 + 8) = v117;
    LOBYTE(v114) = 15;
    v106 = (id)sub_10001C544();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v114, v25, &type metadata for Data, v106);
    v58 = v116;
    v59 = v117;
    v60 = objc_allocWithZone((Class)UIImage);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v62 = objc_msgSend(v60, "initWithData:", isa);
    sub_10001C5CC(v58, v59);

    LOBYTE(v114) = 16;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v114, v36, &type metadata for Data, v106);
    v63 = v116;
    v64 = v117;
    v65 = objc_allocWithZone((Class)UIImage);
    v66 = Data._bridgeToObjectiveC()().super.isa;
    v67 = objc_msgSend(v65, "initWithData:", v66);
    sub_10001C5CC(v63, v64);

    v68 = (char *)v112 + v113[22];
    *(_QWORD *)v68 = v62;
    *((_QWORD *)v68 + 1) = v67;
    v68[16] = 1;
    LOBYTE(v116) = 17;
    v104 = v67;
    v103 = v62;
    v69 = KeyedDecodingContainer.decode(_:forKey:)(&v116, v36);
    *((_BYTE *)v112 + v113[23]) = v69 & 1;
    LOBYTE(v116) = 18;
    v70 = KeyedDecodingContainer.decode(_:forKey:)(&v116, v36);
    *((_BYTE *)v112 + v113[24]) = v70 & 1;
    LOBYTE(v114) = 19;
    v71 = sub_10001C588();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for CGFloat, &v114, v36, &type metadata for CGFloat, v71);
    *(uint64_t *)((char *)v112 + v113[25]) = v116;
    LOBYTE(v114) = 20;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v114, v36, &type metadata for Data, v106);
    v72 = v116;
    v73 = v117;
    v74 = objc_allocWithZone((Class)UIImage);
    v75 = Data._bridgeToObjectiveC()().super.isa;
    v76 = objc_msgSend(v74, "initWithData:", v75);
    sub_10001C5CC(v72, v73);

    LOBYTE(v114) = 21;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v114, v36, &type metadata for Data, v106);
    v77 = v116;
    v78 = v117;
    v79 = objc_allocWithZone((Class)UIImage);
    v80 = Data._bridgeToObjectiveC()().super.isa;
    v81 = objc_msgSend(v79, "initWithData:", v80);
    sub_10001C5CC(v77, v78);

    v82 = (char *)v112 + v113[26];
    *(_QWORD *)v82 = v76;
    *((_QWORD *)v82 + 1) = v81;
    v82[16] = 1;
    LOBYTE(v116) = 22;
    v83 = v81;
    v106 = v76;
    v84 = KeyedDecodingContainer.decode(_:forKey:)(&v116, v36);
    v85 = (uint64_t)v112;
    *((_BYTE *)v112 + v113[27]) = v84 & 1;
    v116 = v85;
    v86 = sub_100003EA4(&qword_100055C50);
    v87 = sub_10001C438();
    v88 = _Pointer.debugDescription.getter(v86, v87);
    v90 = v89;
    v91 = sub_100012188(9uLL, v88, v89);
    v93 = v92;
    v114 = 7876668;
    v115 = 0xE300000000000000;
    v116 = v91;
    *(_QWORD *)&v117 = v94;
    *((_QWORD *)&v117 + 1) = v95;
    v118 = v92;
    v96 = sub_100012230();
    String.append<A>(contentsOf:)(&v116, &type metadata for Substring, v96);
    swift_bridgeObjectRelease(v93);
    v97 = v115;
    v116 = v114;
    *(_QWORD *)&v117 = v115;
    swift_bridgeObjectRetain(v115);
    v98._countAndFlagsBits = 15987;
    v98._object = (void *)0xE200000000000000;
    String.append(_:)(v98);

    swift_bridgeObjectRelease(v90);
    swift_bridgeObjectRelease(v97);
    v99 = v116;
    v100 = v117;

    (*(void (**)(char *, uint64_t))(v107 + 8))(v37, v36);
    v101 = v110;
    v102 = *((_QWORD *)v110 + 1);
    *(_QWORD *)v110 = v99;
    *((_QWORD *)v101 + 1) = v100;
    swift_bridgeObjectRelease(v102);
    sub_10000CF4C(v85, v105);
    sub_100011DC0(v111);
    sub_10000D7D0(v85);
  }
}

uint64_t sub_10001B330(_QWORD *a1)
{
  uint64_t v2;
  UIImage *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void *v46;
  UIImage *v47;
  UIImage *v48;
  void (*v49)(char *, uint64_t);
  NSData *v50;
  NSData *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  void *v57;
  UIImage *v58;
  NSData *v59;
  NSData *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  void *v69;
  UIImage *v70;
  UIImage *v71;
  void (*v72)(char *, uint64_t);
  NSData *v73;
  NSData *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  void *v80;
  UIImage *v81;
  char *v82;
  UIImage *v83;
  NSData *v84;
  NSData *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  Class isa;
  UIImage *v93;
  UIImage *v94;
  uint64_t v95;
  int *v96;
  UIImage *v97;
  uint64_t v98;
  uint64_t *v99;
  __int128 v100;
  uint64_t v101;
  char v102;

  v2 = type metadata accessor for ColorScheme(0);
  v3 = *(UIImage **)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&isa - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003EA4(&qword_100055C90);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&isa - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10001C484(a1, v10);
  v12 = sub_10001C4A8();
  v13 = v10;
  v14 = v6;
  v15 = v99;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ItemModel.CodingKeys, &type metadata for ItemModel.CodingKeys, v12, v13, v11);
  v16 = *v15;
  v17 = v15[1];
  LOBYTE(v100) = 0;
  v18 = v98;
  KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v100, v14);
  if (v18)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v14);
  v97 = v3;
  v98 = v7;
  v19 = v2;
  v20 = v15[2];
  v21 = v15[3];
  LOBYTE(v100) = 1;
  KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v100, v14);
  v22 = *((unsigned __int8 *)v15 + 32);
  LOBYTE(v100) = 2;
  KeyedEncodingContainer.encode(_:forKey:)(v22, &v100, v14);
  v23 = *((unsigned __int8 *)v15 + 33);
  LOBYTE(v100) = 3;
  KeyedEncodingContainer.encode(_:forKey:)(v23, &v100, v14);
  v24 = *((unsigned __int8 *)v15 + 34);
  LOBYTE(v100) = 4;
  KeyedEncodingContainer.encode(_:forKey:)(v24, &v100, v14);
  v25 = *((unsigned __int8 *)v15 + 35);
  LOBYTE(v100) = 5;
  KeyedEncodingContainer.encode(_:forKey:)(v25, &v100, v14);
  v26 = *((unsigned __int8 *)v15 + 36);
  LOBYTE(v100) = 6;
  KeyedEncodingContainer.encode(_:forKey:)(v26, &v100, v14);
  v27 = *((unsigned __int8 *)v15 + 37);
  LOBYTE(v100) = 7;
  KeyedEncodingContainer.encode(_:forKey:)(v27, &v100, v14);
  v96 = (int *)type metadata accessor for ItemModel(0);
  v29 = (uint64_t)v15 + v96[12];
  LOBYTE(v100) = 8;
  v30 = v14;
  v31 = sub_100003EA4(&qword_100055B48);
  v32 = sub_10001C610();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v29, &v100, v30, v31, v32);
  v100 = *(_OWORD *)((char *)v15 + v96[13]);
  v102 = 9;
  v33 = sub_100003EA4(&qword_100055CA8);
  v34 = sub_10001C68C();
  v95 = v33;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v100, &v102, v30, v33, v34);
  v35 = *((unsigned __int8 *)v15 + v96[14]);
  LOBYTE(v100) = 10;
  v36 = v30;
  v37 = v9;
  KeyedEncodingContainer.encode(_:forKey:)(v35, &v100, v30);
  v100 = *(_OWORD *)((char *)v99 + v96[15]);
  v102 = 11;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v100, &v102, v30, v95, v34);
  v100 = *(_OWORD *)((char *)v99 + v96[16]);
  v102 = 12;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v100, &v102, v30, v95, v34);
  v38 = (uint64_t *)((char *)v99 + v96[20]);
  v39 = *v38;
  v40 = v38[1];
  LOBYTE(v100) = 13;
  KeyedEncodingContainer.encode(_:forKey:)(v39, v40, &v100, v30);
  v41 = (__int128 *)((char *)v99 + v96[21]);
  v42 = *((_QWORD *)v41 + 2);
  v100 = *v41;
  v101 = v42;
  v102 = 14;
  v43 = sub_100003EA4(&qword_100055CB8);
  v44 = sub_10001C6E8(&qword_100055CC0, &qword_100055CB8, (void (*)(void))sub_10001C74C);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v100, &v102, v30, v43, v44);
  v95 = (uint64_t)v99 + v96[22];
  v45 = *(unsigned __int8 *)(v95 + 16);
  if (v45 != 255)
  {
    v46 = *(void **)(v95 + 8);
    v93 = *(UIImage **)v95;
    LODWORD(v94) = v45 & 1;
    v47 = v97;
    isa = v97[13].super.isa;
    ((void (*)(char *, _QWORD, uint64_t))isa)(v5, enum case for ColorScheme.light(_:), v19);
    v48 = (UIImage *)sub_100015430((uint64_t)v5, v93, v46, (char)v94);
    v49 = (void (*)(char *, uint64_t))v47[1].super.isa;
    v49(v5, v19);
    v94 = v48;
    if (v48)
    {
      v50 = UIImagePNGRepresentation(v94);
      if (v50)
      {
        v51 = v50;
        v93 = (UIImage *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v53 = v52;

      }
      else
      {
        v93 = 0;
        v53 = 0xF000000000000000;
      }
      *(_QWORD *)&v100 = v93;
      *((_QWORD *)&v100 + 1) = v53;
      v102 = 15;
      v54 = sub_100003EA4(&qword_100055CD8);
      v55 = sub_10001C6E8(&qword_100055CE0, &qword_100055CD8, (void (*)(void))sub_10001C7D4);
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v100, &v102, v36, v54, v55);
      sub_10001C818((uint64_t)v93, v53);

    }
    v56 = *(unsigned __int8 *)(v95 + 16);
    if (v56 != 255)
    {
      v57 = *(void **)(v95 + 8);
      v94 = *(UIImage **)v95;
      LODWORD(v95) = v56 & 1;
      ((void (*)(char *, _QWORD, uint64_t))isa)(v5, enum case for ColorScheme.dark(_:), v19);
      v58 = (UIImage *)sub_100015430((uint64_t)v5, v94, v57, v95);
      v49(v5, v19);
      if (v58)
      {
        v59 = UIImagePNGRepresentation(v58);
        if (v59)
        {
          v60 = v59;
          v95 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v62 = v61;

        }
        else
        {
          v95 = 0;
          v62 = 0xF000000000000000;
        }
        *(_QWORD *)&v100 = v95;
        *((_QWORD *)&v100 + 1) = v62;
        v102 = 16;
        v63 = sub_100003EA4(&qword_100055CD8);
        v64 = sub_10001C6E8(&qword_100055CE0, &qword_100055CD8, (void (*)(void))sub_10001C7D4);
        KeyedEncodingContainer.encode<A>(_:forKey:)(&v100, &v102, v36, v63, v64);
        sub_10001C818(v95, v62);

      }
    }
  }
  v65 = *((unsigned __int8 *)v99 + v96[23]);
  LOBYTE(v100) = 17;
  KeyedEncodingContainer.encode(_:forKey:)(v65, &v100, v36);
  v66 = *((unsigned __int8 *)v99 + v96[24]);
  LOBYTE(v100) = 18;
  KeyedEncodingContainer.encode(_:forKey:)(v66, &v100, v36);
  *(_QWORD *)&v100 = *(uint64_t *)((char *)v99 + v96[25]);
  v102 = 19;
  v67 = sub_10001C790();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v100, &v102, v36, &type metadata for CGFloat, v67);
  v95 = (uint64_t)v99 + v96[26];
  v68 = *(unsigned __int8 *)(v95 + 16);
  if (v68 != 255)
  {
    v69 = *(void **)(v95 + 8);
    v93 = *(UIImage **)v95;
    LODWORD(v94) = v68 & 1;
    v70 = v97;
    isa = v97[13].super.isa;
    ((void (*)(char *, _QWORD, uint64_t))isa)(v5, enum case for ColorScheme.light(_:), v19);
    v71 = (UIImage *)sub_100015430((uint64_t)v5, v93, v69, (char)v94);
    v72 = (void (*)(char *, uint64_t))v70[1].super.isa;
    v72(v5, v19);
    v97 = v71;
    if (v71)
    {
      v73 = UIImagePNGRepresentation(v97);
      if (v73)
      {
        v74 = v73;
        v94 = (UIImage *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v76 = v75;

      }
      else
      {
        v94 = 0;
        v76 = 0xF000000000000000;
      }
      *(_QWORD *)&v100 = v94;
      *((_QWORD *)&v100 + 1) = v76;
      v102 = 20;
      v77 = sub_100003EA4(&qword_100055CD8);
      v78 = sub_10001C6E8(&qword_100055CE0, &qword_100055CD8, (void (*)(void))sub_10001C7D4);
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v100, &v102, v36, v77, v78);
      sub_10001C818((uint64_t)v94, v76);

    }
    v79 = *(unsigned __int8 *)(v95 + 16);
    if (v79 != 255)
    {
      v81 = *(UIImage **)v95;
      v80 = *(void **)(v95 + 8);
      LODWORD(v97) = v79 & 1;
      v82 = v5;
      ((void (*)(char *, _QWORD, uint64_t))isa)(v5, enum case for ColorScheme.dark(_:), v19);
      v83 = (UIImage *)sub_100015430((uint64_t)v5, v81, v80, (char)v97);
      v72(v82, v19);
      if (v83)
      {
        v84 = UIImagePNGRepresentation(v83);
        if (v84)
        {
          v85 = v84;
          v86 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v88 = v87;

        }
        else
        {
          v86 = 0;
          v88 = 0xF000000000000000;
        }
        *(_QWORD *)&v100 = v86;
        *((_QWORD *)&v100 + 1) = v88;
        v102 = 21;
        v89 = sub_100003EA4(&qword_100055CD8);
        v90 = sub_10001C6E8(&qword_100055CE0, &qword_100055CD8, (void (*)(void))sub_10001C7D4);
        KeyedEncodingContainer.encode<A>(_:forKey:)(&v100, &v102, v36, v89, v90);
        sub_10001C818(v86, v88);

      }
    }
  }
  v91 = *((unsigned __int8 *)v99 + v96[27]);
  LOBYTE(v100) = 22;
  KeyedEncodingContainer.encode(_:forKey:)(v91, &v100, v36);
  return (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v37, v36);
}

uint64_t sub_10001BDB0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;

  if (*(_BYTE *)(v0 + 33) != 1)
    return URL.init(string:)(0xD000000000000018, 0x8000000100041C10);
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2 = *(_QWORD *)v0;
  v1 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain(v1);
  v3._countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v1);
  v4._countAndFlagsBits = 0x656C65733D706F26;
  v4._object = (void *)0xEE006D6574497463;
  String.append(_:)(v4);
  URL.init(string:)(0xD000000000000018, 0x8000000100041C30);
  return swift_bridgeObjectRelease(0x8000000100041C30);
}

uint64_t sub_10001BEB4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

void sub_10001BEE4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10001A5FC(a1, a2);
}

uint64_t sub_10001BEF8(_QWORD *a1)
{
  return sub_10001B330(a1);
}

uint64_t sub_10001BF0C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_10001BF38()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t sub_10001BF40()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t sub_10001BF48()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 34);
}

uint64_t sub_10001BF50()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 35);
}

uint64_t sub_10001BF58()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 36);
}

uint64_t sub_10001BF60()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 37);
}

uint64_t sub_10001BF68(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 52));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_10001BF9C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 56));
}

uint64_t sub_10001BFA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10001C840(v2 + *(int *)(a1 + 48), a2);
}

uint64_t sub_10001BFB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 60));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_10001BFEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 64));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_10001C020(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 68));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_10001C054(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 72));
}

uint64_t sub_10001C068(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 76));
}

id sub_10001C07C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v2 = v1 + *(int *)(a1 + 88);
  v3 = *(id *)v2;
  sub_10000DDCC(*(id *)v2, *(void **)(v2 + 8), *(_BYTE *)(v2 + 16));
  return v3;
}

uint64_t sub_10001C0C8(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 92));
}

uint64_t sub_10001C0D4(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 96));
}

double sub_10001C0E0(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 100));
}

id sub_10001C0EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v2 = v1 + *(int *)(a1 + 104);
  v3 = *(id *)v2;
  sub_10000DDCC(*(id *)v2, *(void **)(v2 + 8), *(_BYTE *)(v2 + 16));
  return v3;
}

uint64_t sub_10001C138(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 108));
}

uint64_t sub_10001C144(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 84));
  v3 = *v2;
  sub_10001C82C(*v2, v2[1], v2[2]);
  return v3;
}

uint64_t sub_10001C190(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 116));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_10001C1C8(char a1, char a2, char a3, char a4, char a5, char a6)
{
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t countAndFlagsBits;
  unint64_t v15;

  if ((a1 & 1) == 0)
  {
    v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v15 = 0xE000000000000000;
    v7 = 0x4C746F4E72657355;
    v8 = 0xEF6E49646567676FLL;
    goto LABEL_5;
  }
  if ((a2 & 1) != 0)
  {
    v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v15 = 0xE000000000000000;
    v7 = 0x656E616C70726941;
    v8 = 0xEE006E4F65646F4DLL;
LABEL_5:
    v9 = 0;
    v10 = 0;
    goto LABEL_6;
  }
  if ((a3 & 1) != 0)
  {
    v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v15 = 0xE000000000000000;
    v7 = 0x6576726553796E41;
    v8 = 0xEE00726F72724572;
    goto LABEL_5;
  }
  if ((a4 & 1) != 0)
  {
    v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v15 = 0xE000000000000000;
    v7 = 0x74754F64656D6954;
    v8 = 0xED0000726F727245;
    goto LABEL_5;
  }
  if ((a5 & 1) != 0)
  {
    v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v15 = 0xE000000000000000;
    v10 = 0x8000000100041870;
    v7 = 0x6F6D65526D657449;
    v8 = 0xEB00000000646576;
  }
  else
  {
    if ((a6 & 1) == 0)
      return 0;
    v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v15 = 0xE000000000000000;
    v10 = 0x8000000100041870;
    v7 = 0x736D6574496F4ELL;
    v8 = 0xE700000000000000;
  }
  v9 = 0xD000000000000010;
LABEL_6:
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v12 = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v7, *(Swift::String_optional *)&v9, (NSBundle)v6, v11, *(Swift::String *)(&v15 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

unint64_t sub_10001C438()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100055C58;
  if (!qword_100055C58)
  {
    v1 = sub_100003EE4(&qword_100055C50);
    result = swift_getWitnessTable(&protocol conformance descriptor for UnsafePointer<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100055C58);
  }
  return result;
}

_QWORD *sub_10001C484(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_10001C4A8()
{
  unint64_t result;

  result = qword_100055C68;
  if (!qword_100055C68)
  {
    result = swift_getWitnessTable(&unk_10004301C, &type metadata for ItemModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100055C68);
  }
  return result;
}

uint64_t sub_10001C4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
    return swift_bridgeObjectRelease(a3);
  return result;
}

unint64_t sub_10001C500()
{
  unint64_t result;

  result = qword_100055C78;
  if (!qword_100055C78)
  {
    result = swift_getWitnessTable(&unk_100043E68, &type metadata for BatteryInfo);
    atomic_store(result, (unint64_t *)&qword_100055C78);
  }
  return result;
}

unint64_t sub_10001C544()
{
  unint64_t result;

  result = qword_100055C80;
  if (!qword_100055C80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100055C80);
  }
  return result;
}

unint64_t sub_10001C588()
{
  unint64_t result;

  result = qword_100055C88;
  if (!qword_100055C88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100055C88);
  }
  return result;
}

uint64_t sub_10001C5CC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_10001C610()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100055C98;
  if (!qword_100055C98)
  {
    v1 = sub_100003EE4(&qword_100055B48);
    sub_10000EB1C(&qword_100055CA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100055C98);
  }
  return result;
}

unint64_t sub_10001C68C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100055CB0;
  if (!qword_100055CB0)
  {
    v1 = sub_100003EE4(&qword_100055CA8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100055CB0);
  }
  return result;
}

uint64_t sub_10001C6E8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100003EE4(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001C74C()
{
  unint64_t result;

  result = qword_100055CC8;
  if (!qword_100055CC8)
  {
    result = swift_getWitnessTable(&unk_100043E40, &type metadata for BatteryInfo);
    atomic_store(result, (unint64_t *)&qword_100055CC8);
  }
  return result;
}

unint64_t sub_10001C790()
{
  unint64_t result;

  result = qword_100055CD0;
  if (!qword_100055CD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100055CD0);
  }
  return result;
}

unint64_t sub_10001C7D4()
{
  unint64_t result;

  result = qword_100055CE8;
  if (!qword_100055CE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100055CE8);
  }
  return result;
}

uint64_t sub_10001C818(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10001C5CC(result, a2);
  return result;
}

uint64_t sub_10001C82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
    return swift_bridgeObjectRetain(a3);
  return result;
}

uint64_t sub_10001C840(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003EA4(&qword_100055B48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001C888(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003EA4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t *sub_10001C8CC(uint64_t *a1)
{
  sub_10001C91C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13]);
  return a1;
}

uint64_t sub_10001C91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a10);
    swift_bridgeObjectRelease(a12);
    return swift_bridgeObjectRelease(a14);
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for ItemModel.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ItemModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEA)
    goto LABEL_17;
  if (a2 + 22 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 22) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 22;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 22;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 22;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x17;
  v8 = v6 - 23;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ItemModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 22 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 22) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE9)
    return ((uint64_t (*)(void))((char *)&loc_10001CA84 + 4 * byte_100042DBC[v4]))();
  *a1 = a2 + 22;
  return ((uint64_t (*)(void))((char *)sub_10001CAB8 + 4 * byte_100042DB7[v4]))();
}

uint64_t sub_10001CAB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001CAC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001CAC8);
  return result;
}

uint64_t sub_10001CAD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001CADCLL);
  *(_BYTE *)result = a2 + 22;
  return result;
}

uint64_t sub_10001CAE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001CAE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001CAF4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10001CAFC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ItemModel.CodingKeys()
{
  return &type metadata for ItemModel.CodingKeys;
}

unint64_t sub_10001CB18()
{
  unint64_t result;

  result = qword_100055D00;
  if (!qword_100055D00)
  {
    result = swift_getWitnessTable(&unk_100042FF4, &type metadata for ItemModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100055D00);
  }
  return result;
}

unint64_t sub_10001CB60()
{
  unint64_t result;

  result = qword_100055D08;
  if (!qword_100055D08)
  {
    result = swift_getWitnessTable(&unk_100042F2C, &type metadata for ItemModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100055D08);
  }
  return result;
}

unint64_t sub_10001CBA8()
{
  unint64_t result;

  result = qword_100055D10;
  if (!qword_100055D10)
  {
    result = swift_getWitnessTable(&unk_100042F54, &type metadata for ItemModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100055D10);
  }
  return result;
}

uint64_t sub_10001CBEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100051550, a1, a2, &unk_100055368);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x17)
    return 23;
  else
    return v3;
}

_QWORD *sub_10001CC3C(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100003EA4(&qword_100055700);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *v4 = *a2;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = sub_100003EA4(&qword_100055708);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[7];
    *(_OWORD *)((char *)v4 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
    v24 = *(void **)((char *)a2 + v23);
    *(_QWORD *)((char *)v4 + v23) = v24;
    v25 = a3[9];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)v4 + v25) = *((_BYTE *)a2 + v25);
    v26 = a3[10];
    v27 = (char *)v4 + v26;
    v28 = (char *)a2 + v26;
    *(_OWORD *)v27 = *(_OWORD *)v28;
    v29 = *((_QWORD *)v28 + 3);
    *((_QWORD *)v27 + 2) = *((_QWORD *)v28 + 2);
    *((_QWORD *)v27 + 3) = v29;
    v30 = *((_QWORD *)v28 + 4);
    v31 = *((_QWORD *)v28 + 5);
    *((_QWORD *)v27 + 4) = v30;
    *((_QWORD *)v27 + 5) = v31;
    *((_OWORD *)v27 + 3) = *((_OWORD *)v28 + 3);
    v32 = *((_QWORD *)v28 + 9);
    *((_QWORD *)v27 + 8) = *((_QWORD *)v28 + 8);
    *((_QWORD *)v27 + 9) = v32;
    *((_OWORD *)v27 + 5) = *((_OWORD *)v28 + 5);
    v33 = *((_QWORD *)v28 + 13);
    *((_QWORD *)v27 + 12) = *((_QWORD *)v28 + 12);
    *((_QWORD *)v27 + 13) = v33;
    *((_OWORD *)v27 + 7) = *((_OWORD *)v28 + 7);
    v34 = *((_QWORD *)v28 + 17);
    *((_QWORD *)v27 + 16) = *((_QWORD *)v28 + 16);
    *((_QWORD *)v27 + 17) = v34;
    v35 = *((_QWORD *)v28 + 18);
    v36 = *((_QWORD *)v28 + 19);
    *((_QWORD *)v27 + 18) = v35;
    *((_QWORD *)v27 + 19) = v36;
    *((_OWORD *)v27 + 10) = *((_OWORD *)v28 + 10);
    v12 = *((_QWORD *)v28 + 23);
    *((_QWORD *)v27 + 22) = *((_QWORD *)v28 + 22);
    *((_QWORD *)v27 + 23) = v12;
    *((_OWORD *)v27 + 12) = *((_OWORD *)v28 + 12);
    *((_QWORD *)v27 + 26) = *((_QWORD *)v28 + 26);
    v37 = v24;
    swift_retain(v29);
    swift_retain(v30);
    swift_retain(v31);
    swift_retain(v32);
    swift_retain(v33);
    swift_retain(v34);
    swift_retain(v35);
    swift_retain(v36);
  }
  swift_retain(v12);
  return v4;
}

uint64_t sub_10001CE88(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = sub_100003EA4(&qword_100055700);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_100003EA4(&qword_100055708);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }

  v9 = (_QWORD *)((char *)a1 + a2[10]);
  swift_release(v9[3]);
  swift_release(v9[4]);
  swift_release(v9[5]);
  swift_release(v9[9]);
  swift_release(v9[13]);
  swift_release(v9[17]);
  swift_release(v9[18]);
  swift_release(v9[19]);
  return swift_release(v9[23]);
}

_QWORD *sub_10001CFA0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;

  v6 = sub_100003EA4(&qword_100055700);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = sub_100003EA4(&qword_100055708);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v22 = *(void **)((char *)a2 + v21);
  *(_QWORD *)((char *)a1 + v21) = v22;
  v23 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v23) = *((_BYTE *)a2 + v23);
  v24 = a3[10];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  *(_OWORD *)v25 = *(_OWORD *)v26;
  v27 = *((_QWORD *)v26 + 3);
  *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
  *((_QWORD *)v25 + 3) = v27;
  v28 = *((_QWORD *)v26 + 4);
  v29 = *((_QWORD *)v26 + 5);
  *((_QWORD *)v25 + 4) = v28;
  *((_QWORD *)v25 + 5) = v29;
  *((_OWORD *)v25 + 3) = *((_OWORD *)v26 + 3);
  v30 = *((_QWORD *)v26 + 9);
  *((_QWORD *)v25 + 8) = *((_QWORD *)v26 + 8);
  *((_QWORD *)v25 + 9) = v30;
  *((_OWORD *)v25 + 5) = *((_OWORD *)v26 + 5);
  v31 = *((_QWORD *)v26 + 13);
  *((_QWORD *)v25 + 12) = *((_QWORD *)v26 + 12);
  *((_QWORD *)v25 + 13) = v31;
  *((_OWORD *)v25 + 7) = *((_OWORD *)v26 + 7);
  v32 = *((_QWORD *)v26 + 17);
  *((_QWORD *)v25 + 16) = *((_QWORD *)v26 + 16);
  *((_QWORD *)v25 + 17) = v32;
  v33 = *((_QWORD *)v26 + 18);
  v34 = *((_QWORD *)v26 + 19);
  *((_QWORD *)v25 + 18) = v33;
  *((_QWORD *)v25 + 19) = v34;
  *((_OWORD *)v25 + 10) = *((_OWORD *)v26 + 10);
  v35 = *((_QWORD *)v26 + 23);
  *((_QWORD *)v25 + 22) = *((_QWORD *)v26 + 22);
  *((_QWORD *)v25 + 23) = v35;
  *((_OWORD *)v25 + 12) = *((_OWORD *)v26 + 12);
  *((_QWORD *)v25 + 26) = *((_QWORD *)v26 + 26);
  v36 = v22;
  swift_retain(v27);
  swift_retain(v28);
  swift_retain(v29);
  swift_retain(v30);
  swift_retain(v31);
  swift_retain(v32);
  swift_retain(v33);
  swift_retain(v34);
  swift_retain(v35);
  return a1;
}

_QWORD *sub_10001D1C4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (a1 != a2)
  {
    sub_10000EB5C((uint64_t)a1, &qword_100055700);
    v6 = sub_100003EA4(&qword_100055700);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    sub_10000EB5C((uint64_t)a1 + v12, &qword_100055708);
    v15 = sub_100003EA4(&qword_100055708);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  *v22 = *v23;
  v22[1] = v23[1];
  v24 = a3[7];
  v25 = *(void **)((char *)a1 + v24);
  v26 = *(void **)((char *)a2 + v24);
  *(_QWORD *)((char *)a1 + v24) = v26;
  v27 = v26;

  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v28 = a3[10];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *(_QWORD *)((char *)a2 + v28);
  v29[1] = *(_QWORD *)((char *)a2 + v28 + 8);
  v29[2] = *(_QWORD *)((char *)a2 + v28 + 16);
  v31 = *(_QWORD *)((char *)a2 + v28 + 24);
  v32 = *(_QWORD *)((char *)a1 + v28 + 24);
  v29[3] = v31;
  swift_retain(v31);
  swift_release(v32);
  v33 = v30[4];
  v34 = v29[4];
  v29[4] = v33;
  swift_retain(v33);
  swift_release(v34);
  v35 = v30[5];
  v36 = v29[5];
  v29[5] = v35;
  swift_retain(v35);
  swift_release(v36);
  v29[6] = v30[6];
  v29[7] = v30[7];
  v29[8] = v30[8];
  v37 = v30[9];
  v38 = v29[9];
  v29[9] = v37;
  swift_retain(v37);
  swift_release(v38);
  v29[10] = v30[10];
  v29[11] = v30[11];
  v29[12] = v30[12];
  v39 = v30[13];
  v40 = v29[13];
  v29[13] = v39;
  swift_retain(v39);
  swift_release(v40);
  v29[14] = v30[14];
  v29[15] = v30[15];
  v29[16] = v30[16];
  v41 = v30[17];
  v42 = v29[17];
  v29[17] = v41;
  swift_retain(v41);
  swift_release(v42);
  v43 = v30[18];
  v44 = v29[18];
  v29[18] = v43;
  swift_retain(v43);
  swift_release(v44);
  v45 = v30[19];
  v46 = v29[19];
  v29[19] = v45;
  swift_retain(v45);
  swift_release(v46);
  v29[20] = v30[20];
  v29[21] = v30[21];
  v29[22] = v30[22];
  v47 = v30[23];
  v48 = v29[23];
  v29[23] = v47;
  swift_retain(v47);
  swift_release(v48);
  v29[24] = v30[24];
  v29[25] = v30[25];
  v29[26] = v30[26];
  return a1;
}

char *sub_10001D4D0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v6 = sub_100003EA4(&qword_100055700);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100003EA4(&qword_100055708);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  v14 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v14] = a2[v14];
  v15 = a3[10];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *((_OWORD *)v17 + 11);
  *((_OWORD *)v16 + 10) = *((_OWORD *)v17 + 10);
  *((_OWORD *)v16 + 11) = v18;
  *((_OWORD *)v16 + 12) = *((_OWORD *)v17 + 12);
  *((_QWORD *)v16 + 26) = *((_QWORD *)v17 + 26);
  v19 = *((_OWORD *)v17 + 7);
  *((_OWORD *)v16 + 6) = *((_OWORD *)v17 + 6);
  *((_OWORD *)v16 + 7) = v19;
  v20 = *((_OWORD *)v17 + 9);
  *((_OWORD *)v16 + 8) = *((_OWORD *)v17 + 8);
  *((_OWORD *)v16 + 9) = v20;
  v21 = *((_OWORD *)v17 + 3);
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  *((_OWORD *)v16 + 3) = v21;
  v22 = *((_OWORD *)v17 + 5);
  *((_OWORD *)v16 + 4) = *((_OWORD *)v17 + 4);
  *((_OWORD *)v16 + 5) = v22;
  v23 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v23;
  return a1;
}

char *sub_10001D660(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 != a2)
  {
    sub_10000EB5C((uint64_t)a1, &qword_100055700);
    v6 = sub_100003EA4(&qword_100055700);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_10000EB5C((uint64_t)&a1[v8], &qword_100055708);
    v11 = sub_100003EA4(&qword_100055708);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  v14 = *(void **)&a1[v13];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];

  v15 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v15] = a2[v15];
  v16 = a3[10];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
  v19 = *(_QWORD *)&a1[v16 + 24];
  *((_QWORD *)v17 + 3) = *((_QWORD *)v18 + 3);
  swift_release(v19);
  v20 = *((_QWORD *)v17 + 4);
  *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
  swift_release(v20);
  v21 = *((_QWORD *)v17 + 5);
  *((_QWORD *)v17 + 5) = *((_QWORD *)v18 + 5);
  swift_release(v21);
  *((_OWORD *)v17 + 3) = *((_OWORD *)v18 + 3);
  *((_QWORD *)v17 + 8) = *((_QWORD *)v18 + 8);
  v22 = *((_QWORD *)v17 + 9);
  *((_QWORD *)v17 + 9) = *((_QWORD *)v18 + 9);
  swift_release(v22);
  *((_OWORD *)v17 + 5) = *((_OWORD *)v18 + 5);
  *((_QWORD *)v17 + 12) = *((_QWORD *)v18 + 12);
  v23 = *((_QWORD *)v17 + 13);
  *((_QWORD *)v17 + 13) = *((_QWORD *)v18 + 13);
  swift_release(v23);
  *((_OWORD *)v17 + 7) = *((_OWORD *)v18 + 7);
  *((_QWORD *)v17 + 16) = *((_QWORD *)v18 + 16);
  v24 = *((_QWORD *)v17 + 17);
  *((_QWORD *)v17 + 17) = *((_QWORD *)v18 + 17);
  swift_release(v24);
  v25 = *((_QWORD *)v17 + 18);
  *((_QWORD *)v17 + 18) = *((_QWORD *)v18 + 18);
  swift_release(v25);
  v26 = *((_QWORD *)v17 + 19);
  *((_QWORD *)v17 + 19) = *((_QWORD *)v18 + 19);
  swift_release(v26);
  *((_OWORD *)v17 + 10) = *((_OWORD *)v18 + 10);
  *((_QWORD *)v17 + 22) = *((_QWORD *)v18 + 22);
  v27 = *((_QWORD *)v17 + 23);
  *((_QWORD *)v17 + 23) = *((_QWORD *)v18 + 23);
  swift_release(v27);
  *((_OWORD *)v17 + 12) = *((_OWORD *)v18 + 12);
  *((_QWORD *)v17 + 26) = *((_QWORD *)v18 + 26);
  return a1;
}

uint64_t sub_10001D8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001D8DC);
}

uint64_t sub_10001D8DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_100003EA4(&qword_100055710);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100003EA4(qword_100055718);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 40) + 24);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_10001D990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001D99C);
}

uint64_t sub_10001D99C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_100003EA4(&qword_100055710);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_100003EA4(qword_100055718);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 40) + 24) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AvatarView(uint64_t a1)
{
  uint64_t result;

  result = qword_100055D70;
  if (!qword_100055D70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AvatarView);
  return result;
}

void sub_10001DA88(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  sub_100011064(319, (unint64_t *)&qword_1000557A0, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100011064(319, &qword_1000557A8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_1000430A0;
      v6[3] = &unk_1000430B8;
      v6[4] = &unk_1000430D0;
      v6[5] = &unk_1000430D0;
      v6[6] = &unk_1000430E8;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

uint64_t sub_10001DB54(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004485C, 1);
}

uint64_t sub_10001DB64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, _QWORD, uint64_t);
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  char *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD v85[3];

  v83 = a2;
  v5 = type metadata accessor for WidgetRenderingMode(0);
  v80 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v64 - v9;
  v11 = sub_100003EA4(&qword_100055EC0);
  __chkstk_darwin(v11);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for Image.ResizingMode(0);
  v14 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100003EA4(&qword_100055EC8);
  v71 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v70 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100003EA4(&qword_100055F68);
  __chkstk_darwin(v69);
  v75 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100003EA4(&qword_100055F70);
  __chkstk_darwin(v74);
  v20 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100003EA4(&qword_100055F78);
  __chkstk_darwin(v73);
  v81 = (uint64_t)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100003EA4(&qword_100055F80);
  __chkstk_darwin(v76);
  v82 = (uint64_t)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100003EA4(&qword_100055F88);
  v84 = *(_QWORD *)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v79 = (uint64_t)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v78 = (uint64_t)&v64 - v26;
  v27 = *(int *)(type metadata accessor for AvatarView(0) + 28);
  v77 = a1;
  v28 = *(void **)(a1 + v27);
  if (!v28)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(v83, 1, 1, v23);
  v66 = v28;
  v29 = Image.init(uiImage:)();
  v67 = v23;
  v30 = v5;
  v31 = v29;
  v65 = v20;
  v32 = v8;
  v33 = v14;
  v34 = *(void (**)(char *, _QWORD, uint64_t))(v14 + 104);
  v35 = v68;
  v34(v16, enum case for Image.ResizingMode.stretch(_:), v68);
  v36 = 0.0;
  v37 = Image.resizable(capInsets:resizingMode:)(v16, v31, 0.0, 0.0, 0.0, 0.0);
  swift_release(v31);
  v38 = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v16, v35);
  static WidgetAccentedRenderingMode.fullColor.getter(v38);
  v39 = type metadata accessor for WidgetAccentedRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v13, 0, 1, v39);
  v40 = v70;
  Image.widgetAccentedRenderingMode(_:)(v13, v37);
  swift_release(v37);
  sub_10000EB5C((uint64_t)v13, &qword_100055EC0);
  v41 = sub_10001115C((uint64_t)v10);
  static WidgetRenderingMode.accented.getter(v41);
  LOBYTE(v35) = static WidgetRenderingMode.== infix(_:_:)(v10, v32);
  v42 = *(void (**)(char *, uint64_t))(v80 + 8);
  v42(v32, v30);
  v42(v10, v30);
  if ((v35 & 1) != 0)
    v36 = 1.0;
  v43 = v71;
  v44 = (uint64_t)v75;
  v45 = v72;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v75, v40, v72);
  *(double *)(v44 + *(int *)(v69 + 36)) = v36;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v40, v45);
  v46 = sub_10001115C((uint64_t)v10);
  static WidgetRenderingMode.accented.getter(v46);
  v47 = static WidgetRenderingMode.== infix(_:_:)(v10, v32);
  v42(v32, v30);
  v42(v10, v30);
  if ((v47 & 1) != 0)
    v48 = 0.9;
  else
    v48 = 1.0;
  v49 = (uint64_t)v65;
  sub_100012310(v44, (uint64_t)v65, &qword_100055F68);
  *(double *)(v49 + *(int *)(v74 + 36)) = v48;
  sub_10000EB5C(v44, &qword_100055F68);
  v50 = v81;
  sub_100012310(v49, v81, &qword_100055F70);
  v51 = v50 + *(int *)(v73 + 36);
  *(_QWORD *)v51 = 0;
  *(_WORD *)(v51 + 8) = 257;
  v52 = sub_10000EB5C(v49, &qword_100055F70);
  v53 = static Alignment.center.getter(v52);
  _FrameLayout.init(width:height:alignment:)(v85, *(_QWORD *)&a3, 0, *(_QWORD *)&a3, 0, v53, v54);
  v55 = v82;
  sub_100012310(v50, v82, &qword_100055F78);
  v56 = (_OWORD *)(v55 + *(int *)(v76 + 36));
  v57 = v85[1];
  *v56 = v85[0];
  v56[1] = v57;
  v56[2] = v85[2];
  sub_10000EB5C(v50, &qword_100055F78);

  v58 = v79;
  sub_100012310(v55, v79, &qword_100055F80);
  v59 = v67;
  *(_WORD *)(v58 + *(int *)(v67 + 36)) = 256;
  sub_10000EB5C(v55, &qword_100055F80);
  v60 = v78;
  sub_10001C888(v58, v78, &qword_100055F88);
  v61 = v60;
  v62 = v83;
  sub_10001C888(v61, v83, &qword_100055F88);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v84 + 56))(v62, 0, 1, v59);
}

uint64_t sub_10001E1F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v53 = a1;
  v2 = sub_100003EA4(&qword_100055E50);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100003EA4(&qword_100055E40);
  __chkstk_darwin(v5);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003EA4(&qword_100055E30);
  __chkstk_darwin(v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003EA4(&qword_100055DD0);
  v52 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for AvatarView(0);
  v15 = v1 + v14[10];
  v16 = *(double *)(v1 + v14[6] + 8);
  if (*(double *)(v15 + 8) >= *(double *)v15 * v16)
    v17 = *(double *)v15 * v16;
  else
    v17 = *(double *)(v15 + 8);
  v18 = (v17 - (*(double *)(v15 + 16) + v17)) * 0.5;
  v19 = *(_QWORD *)(v15 + 24);
  v20 = *(unsigned __int8 *)(v1 + v14[9]);
  v21 = (v20 == 2) | v20;
  v22 = *(_QWORD *)(v15 + 56);
  v23 = v16 * *(double *)(v15 + 64);
  v24 = *(_QWORD *)(v15 + 48);
  v25 = v16 * *(double *)(v15 + 96);
  v26 = *(_QWORD *)(v15 + 88);
  v50 = *(_QWORD *)(v15 + 80);
  v51 = v26;
  v27 = *(_QWORD *)(v15 + 112);
  v47 = *(double *)(v15 + 128);
  v48 = v27;
  v49 = *(_QWORD *)(v15 + 120);
  *v4 = static Alignment.center.getter(v14);
  v4[1] = v28;
  v29 = sub_100003EA4(&qword_100055E78);
  sub_10001E84C(v21 & 1, v19, (uint64_t)v4 + *(int *)(v29 + 44), v17, v18, v17 - v18);
  sub_100012310((uint64_t)v4, (uint64_t)v7, &qword_100055E50);
  sub_10000EB5C((uint64_t)v4, &qword_100055E50);
  v30 = *(_QWORD *)(v15 + 40);
  sub_100012310((uint64_t)v7, (uint64_t)v10, &qword_100055E40);
  v31 = &v10[*(int *)(v8 + 36)];
  *(_QWORD *)v31 = v30;
  *((double *)v31 + 1) = v23;
  *((_QWORD *)v31 + 2) = v24;
  *((_QWORD *)v31 + 3) = v22;
  swift_retain(v30);
  sub_10000EB5C((uint64_t)v7, &qword_100055E40);
  v32 = *(_QWORD *)(v15 + 72);
  sub_100012310((uint64_t)v10, (uint64_t)v13, &qword_100055E30);
  v33 = &v13[*(int *)(v11 + 36)];
  *(_QWORD *)v33 = v32;
  v34 = v50;
  *((double *)v33 + 1) = v25;
  *((_QWORD *)v33 + 2) = v34;
  *((_QWORD *)v33 + 3) = v51;
  swift_retain(v32);
  sub_10000EB5C((uint64_t)v10, &qword_100055E30);
  if ((v21 & 1) != 0)
  {
    v35 = v16 * v47;
    v36 = v53;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v53, 1, 1, v11);
    v37 = v36 + *(int *)(sub_100003EA4(&qword_100055F58) + 48);
    v38 = *(_QWORD *)(v15 + 104);
    sub_100012310((uint64_t)v13, v37, &qword_100055DD0);
    v39 = sub_100003EA4(&qword_100055F60);
    v40 = v37 + *(int *)(v39 + 36);
    *(_QWORD *)v40 = v38;
    v41 = v48;
    *(double *)(v40 + 8) = v35;
    *(_QWORD *)(v40 + 16) = v41;
    *(_QWORD *)(v40 + 24) = v49;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v37, 0, 1, v39);
    swift_retain(v38);
  }
  else
  {
    v42 = v53;
    sub_100012310((uint64_t)v13, v53, &qword_100055DD0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v42, 0, 1, v11);
    v43 = v42 + *(int *)(sub_100003EA4(&qword_100055F58) + 48);
    v44 = sub_100003EA4(&qword_100055F60);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 1, 1, v44);
  }
  return sub_10000EB5C((uint64_t)v13, &qword_100055DD0);
}

uint64_t sub_10001E5E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  v3 = sub_100003EA4(&qword_100055E50);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100003EA4(&qword_100055E40);
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003EA4(&qword_100055E30);
  __chkstk_darwin(v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for AvatarView(0);
  v13 = v1 + v12[10];
  v14 = *(double *)(v1 + v12[6] + 8);
  if (*(double *)(v13 + 8) >= *(double *)v13 * v14)
    v15 = *(double *)v13 * v14;
  else
    v15 = *(double *)(v13 + 8);
  v16 = (v15 - (*(double *)(v13 + 16) + v15)) * 0.5;
  v17 = *(unsigned __int8 *)(v1 + v12[9]);
  v18 = *(_QWORD *)(v13 + 136);
  v19 = (v17 == 2) | v17;
  v20 = *(_QWORD *)(v13 + 168);
  v21 = v14 * *(double *)(v13 + 176);
  v22 = *(_QWORD *)(v13 + 160);
  v23 = v14 * *(double *)(v13 + 208);
  v24 = *(_QWORD *)(v13 + 192);
  v33 = *(_QWORD *)(v13 + 200);
  *v5 = static Alignment.center.getter(v12);
  v5[1] = v25;
  v26 = sub_100003EA4(&qword_100055E78);
  sub_10001E84C(v19 & 1, v18, (uint64_t)v5 + *(int *)(v26 + 44), v15, v16, v15 - v16);
  sub_100012310((uint64_t)v5, (uint64_t)v8, &qword_100055E50);
  sub_10000EB5C((uint64_t)v5, &qword_100055E50);
  v27 = *(_QWORD *)(v13 + 152);
  sub_100012310((uint64_t)v8, (uint64_t)v11, &qword_100055E40);
  v28 = &v11[*(int *)(v9 + 36)];
  *(_QWORD *)v28 = v27;
  *((double *)v28 + 1) = v21;
  *((_QWORD *)v28 + 2) = v22;
  *((_QWORD *)v28 + 3) = v20;
  swift_retain(v27);
  sub_10000EB5C((uint64_t)v8, &qword_100055E40);
  v29 = *(_QWORD *)(v13 + 184);
  sub_100012310((uint64_t)v11, a1, &qword_100055E30);
  v30 = a1 + *(int *)(sub_100003EA4(&qword_100055DD0) + 36);
  *(_QWORD *)v30 = v29;
  *(double *)(v30 + 8) = v23;
  *(_QWORD *)(v30 + 16) = v24;
  *(_QWORD *)(v30 + 24) = v33;
  swift_retain(v29);
  return sub_10000EB5C((uint64_t)v11, &qword_100055E30);
}

uint64_t sub_10001E84C@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  __n128 v41;
  void *v42;
  NSString v43;
  id v44;
  id v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t KeyPath;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t (*v64)(char *, uint64_t, __n128);
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  char v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  __int128 v97;
  __int128 v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _OWORD *v109;
  __int128 v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _OWORD *v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  __int16 v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD v171[5];
  _OWORD v172[3];
  _OWORD v173[3];

  v160 = a3;
  v161 = sub_100003EA4(&qword_100055E80);
  __chkstk_darwin(v161);
  v142 = (uint64_t)&v132 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_100003EA4(&qword_100055E88);
  v153 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v152 = (char *)&v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = sub_100003EA4(&qword_100055E90);
  v13 = __chkstk_darwin(v151);
  v155 = (char *)&v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v156 = (uint64_t)&v132 - v15;
  v150 = sub_100003EA4(&qword_100055E98);
  v149 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v146 = (char *)&v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_100003EA4(&qword_100055EA0);
  v17 = __chkstk_darwin(v147);
  v148 = (char *)&v132 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v163 = (uint64_t)&v132 - v19;
  v145 = sub_100003EA4(&qword_100055EA8);
  v144 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v21 = (char *)&v132 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100003EA4(&qword_100055EB0);
  v22 = __chkstk_darwin(v143);
  v24 = (char *)&v132 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v162 = (uint64_t)&v132 - v25;
  v158 = sub_100003EA4(&qword_100055EB8);
  __chkstk_darwin(v158);
  v159 = (uint64_t)&v132 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100003EA4(&qword_100055EC0);
  __chkstk_darwin(v27);
  v137 = (char *)&v132 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Image.ResizingMode(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (char *)&v132 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_100003EA4(&qword_100055EC8);
  v135 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v134 = (char *)&v132 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_100003EA4(&qword_100055ED0);
  __chkstk_darwin(v133);
  v140 = (char *)&v132 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_100003EA4(&qword_100055ED8);
  __chkstk_darwin(v136);
  v141 = (uint64_t)&v132 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = sub_100003EA4(&qword_100055EE0);
  v36 = __chkstk_darwin(v157);
  v139 = (uint64_t)&v132 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v39 = (char *)&v132 - v38;
  if ((a1 & 1) == 0)
    goto LABEL_6;
  v132 = v29;
  v40 = a1;
  sub_100020114();
  v41 = swift_retain(a2);
  v42 = (void *)UIColor.init(_:)(v41);
  v43 = String._bridgeToObjectiveC()();
  v44 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v43);

  if (!v44)
  {

    a1 = v40;
    goto LABEL_6;
  }
  v45 = objc_msgSend(v44, "imageWithTintColor:renderingMode:", v42, 2);

  a1 = v40;
  v46 = v132;
  if (!v45)
  {
LABEL_6:
    v80 = a1 & 1;
    v81 = sub_10003231C(a1 & 1);
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v171, 0, 0, _swiftEmptyArrayStorage, a5, 10.0, 0.0);
    v82 = v171[0];
    v83 = v171[2];
    v84 = v171[3];
    v85 = v171[4];
    swift_retain(a2);
    v87 = static Alignment.center.getter(v86);
    *(_QWORD *)&v164 = v81;
    *((_QWORD *)&v164 + 1) = v82;
    *(_QWORD *)&v165 = v171[1];
    *((_QWORD *)&v165 + 1) = v83;
    *(_QWORD *)&v166 = v84;
    *((_QWORD *)&v166 + 1) = v85;
    v167 = a2;
    v168 = 256;
    v169 = v87;
    v170 = v88;
    v89 = sub_100003EA4(&qword_100055EE8);
    v90 = sub_100012354(&qword_100055EF0, &qword_100055EE8, (uint64_t)&protocol conformance descriptor for StrokeShapeView<A, B, C>);
    View.widgetAccentable(_:)(1, v89, v90);
    swift_release(a2);
    swift_bridgeObjectRelease(v84);

    v92 = static Alignment.center.getter(v91);
    _FrameLayout.init(width:height:alignment:)(v172, *(_QWORD *)&a6, 0, *(_QWORD *)&a6, 0, v92, v93);
    v94 = v144;
    v95 = v145;
    (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v24, v21, v145);
    v96 = &v24[*(int *)(v143 + 36)];
    v97 = v172[1];
    v98 = v172[2];
    *(_OWORD *)v96 = v172[0];
    *((_OWORD *)v96 + 1) = v97;
    *((_OWORD *)v96 + 2) = v98;
    (*(void (**)(char *, uint64_t))(v94 + 8))(v21, v95);
    sub_10001C888((uint64_t)v24, v162, &qword_100055EB0);
    v99 = sub_10003231C(a1 & 1);
    *(_QWORD *)&v164 = v99;
    *((_QWORD *)&v164 + 1) = a2;
    LOWORD(v165) = 256;
    swift_retain(a2);
    v100 = sub_100003EA4(&qword_100055EF8);
    v101 = sub_100012354(&qword_100055F00, &qword_100055EF8, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    v102 = v146;
    View.widgetAccentable(_:)(1, v100, v101);
    swift_release(a2);

    v104 = static Alignment.center.getter(v103);
    _FrameLayout.init(width:height:alignment:)(v173, *(_QWORD *)&a6, 0, *(_QWORD *)&a6, 0, v104, v105);
    v106 = v149;
    v107 = (uint64_t)v148;
    v108 = v150;
    (*(void (**)(char *, char *, uint64_t))(v149 + 16))(v148, v102, v150);
    v109 = (_OWORD *)(v107 + *(int *)(v147 + 36));
    v110 = v173[1];
    *v109 = v173[0];
    v109[1] = v110;
    v109[2] = v173[2];
    (*(void (**)(char *, uint64_t))(v106 + 8))(v102, v108);
    v111 = v163;
    sub_10001C888(v107, v163, &qword_100055EA0);
    v112 = sub_1000323E4(v80);
    *(_QWORD *)&v164 = v112;
    *((_QWORD *)&v164 + 1) = a2;
    LOWORD(v165) = 256;
    swift_retain(a2);
    v113 = sub_100003EA4(&qword_100055F08);
    v114 = sub_100012354(&qword_100055F10, &qword_100055F08, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    v115 = v152;
    View.widgetAccentable(_:)(1, v113, v114);
    swift_release(a2);

    v117 = static Alignment.center.getter(v116);
    _FrameLayout.init(width:height:alignment:)(&v164, *(_QWORD *)&a6, 0, *(_QWORD *)&a6, 0, v117, v118);
    v119 = v153;
    v120 = (uint64_t)v155;
    v121 = v154;
    (*(void (**)(char *, char *, uint64_t))(v153 + 16))(v155, v115, v154);
    v122 = (_OWORD *)(v120 + *(int *)(v151 + 36));
    v123 = v165;
    *v122 = v164;
    v122[1] = v123;
    v122[2] = v166;
    (*(void (**)(char *, uint64_t))(v119 + 8))(v115, v121);
    v124 = v156;
    sub_10001C888(v120, v156, &qword_100055E90);
    v125 = v162;
    sub_100012310(v162, (uint64_t)v24, &qword_100055EB0);
    sub_100012310(v111, v107, &qword_100055EA0);
    sub_100012310(v124, v120, &qword_100055E90);
    v126 = v142;
    sub_100012310((uint64_t)v24, v142, &qword_100055EB0);
    v127 = sub_100003EA4(&qword_100055F18);
    sub_100012310(v107, v126 + *(int *)(v127 + 48), &qword_100055EA0);
    sub_100012310(v120, v126 + *(int *)(v127 + 64), &qword_100055E90);
    sub_10000EB5C(v120, &qword_100055E90);
    sub_10000EB5C(v107, &qword_100055EA0);
    sub_10000EB5C((uint64_t)v24, &qword_100055EB0);
    v128 = v159;
    sub_100012310(v126, v159, &qword_100055E80);
    swift_storeEnumTagMultiPayload(v128, v158, 1);
    v129 = sub_10002001C(&qword_100055F20, &qword_100055EE0, (void (*)(void))sub_10001FFF8);
    v130 = sub_100012354(&qword_100055F48, &qword_100055E80, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v128, v157, v161, v129, v130);
    sub_10000EB5C(v126, &qword_100055E80);
    sub_10000EB5C(v124, &qword_100055E90);
    sub_10000EB5C(v163, &qword_100055EA0);
    v78 = v125;
    v79 = &qword_100055EB0;
    return sub_10000EB5C(v78, v79);
  }
  objc_msgSend(v45, "size");
  v48 = v47;
  objc_msgSend(v45, "size");
  v50 = v48 / v49;
  v51 = v45;
  v52 = Image.init(uiImage:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v30 + 104))(v32, enum case for Image.ResizingMode.stretch(_:), v46);
  v53 = v46;
  v54 = Image.resizable(capInsets:resizingMode:)(v32, v52, 0.0, 0.0, 0.0, 0.0);
  swift_release(v52);
  v55 = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v32, v53);
  v56 = (uint64_t)v137;
  static WidgetAccentedRenderingMode.accented.getter(v55);
  v57 = type metadata accessor for WidgetAccentedRenderingMode(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 0, 1, v57);
  v58 = v134;
  Image.widgetAccentedRenderingMode(_:)(v56, v54);
  swift_release(v54);
  sub_10000EB5C(v56, &qword_100055EC0);
  KeyPath = swift_getKeyPath(&unk_100043150);
  v60 = v135;
  v61 = (uint64_t)v140;
  v62 = v138;
  (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v140, v58, v138);
  v63 = (uint64_t *)(v61 + *(int *)(v133 + 36));
  *v63 = KeyPath;
  v63[1] = a2;
  v64 = *(uint64_t (**)(char *, uint64_t, __n128))(v60 + 8);
  v65 = swift_retain(a2);
  v66 = v64(v58, v62, v65);
  v67 = static Alignment.center.getter(v66);
  ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v164, *(_QWORD *)&a4, 0, a4 / v50, 0, v67, v68);
  v69 = v141;
  sub_100012310(v61, v141, &qword_100055ED0);
  v70 = (_OWORD *)(v69 + *(int *)(v136 + 36));
  v71 = v165;
  *v70 = v164;
  v70[1] = v71;
  v70[2] = v166;
  sub_10000EB5C(v61, &qword_100055ED0);
  v72 = v139;
  sub_100012310(v69, v139, &qword_100055ED8);
  v73 = v157;
  v74 = v72 + *(int *)(v157 + 36);
  *(_QWORD *)v74 = 0;
  *(double *)(v74 + 8) = (1.0 / v50 + -1.0) * a4 * 0.5;
  sub_10000EB5C(v69, &qword_100055ED8);
  sub_10001C888(v72, (uint64_t)v39, &qword_100055EE0);
  v75 = v159;
  sub_100012310((uint64_t)v39, v159, &qword_100055EE0);
  swift_storeEnumTagMultiPayload(v75, v158, 0);
  v76 = sub_10002001C(&qword_100055F20, &qword_100055EE0, (void (*)(void))sub_10001FFF8);
  v77 = sub_100012354(&qword_100055F48, &qword_100055E80, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  _ConditionalContent<>.init(storage:)(v75, v73, v161, v76, v77);

  v78 = (uint64_t)v39;
  v79 = &qword_100055EE0;
  return sub_10000EB5C(v78, v79);
}

uint64_t sub_10001F670@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char v10;
  void (*v11)(char *, uint64_t);
  int *v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v3 = type metadata accessor for ColorScheme(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v25 - v8;
  sub_100011188((uint64_t)&v25 - v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for ColorScheme.dark(_:), v3);
  v10 = static ColorScheme.== infix(_:_:)(v9, v7);
  v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v7, v3);
  v11(v9, v3);
  v12 = (int *)type metadata accessor for AvatarView(0);
  v13 = (double *)(v1 + v12[10]);
  v14 = *(double *)(v1 + v12[6] + 8);
  v15 = *v13;
  v16 = v13[1];
  v17 = 4;
  if ((v10 & 1) != 0)
    v17 = 18;
  v18 = *(_QWORD *)&v13[v17];
  swift_retain(v18);
  if (v16 >= v15 * v14)
    v20 = v15 * v14;
  else
    v20 = v16;
  v21 = *(_QWORD *)(v1 + v12[7]) != 0;
  *a1 = static Alignment.center.getter(v19);
  a1[1] = v22;
  v23 = sub_100003EA4(&qword_100055DC0);
  sub_10001F7F4(v1, v18, v21, v10 & 1, (uint64_t)a1 + *(int *)(v23 + 44), v20);
  return swift_release(v18);
}

uint64_t sub_10001F7F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double *v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char *v76;
  uint64_t v77;
  int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  __int128 v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char v97;
  __int128 v98;

  v75 = a4;
  v78 = a3;
  v73 = a2;
  v85 = a5;
  v8 = sub_100003EA4(&qword_100055DC8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (uint64_t *)((char *)&v70 - v13);
  __chkstk_darwin(v12);
  v84 = (uint64_t)&v70 - v15;
  v16 = sub_100003EA4(&qword_100055DD0);
  __chkstk_darwin(v16);
  v72 = (uint64_t)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100003EA4(&qword_100055DD8);
  __chkstk_darwin(v74);
  v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003EA4(&qword_100055DE0);
  __chkstk_darwin(v20);
  v71 = (uint64_t)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100003EA4(&qword_100055DE8);
  v80 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v23 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100003EA4(&qword_100055DF0);
  v25 = __chkstk_darwin(v24);
  v83 = (uint64_t)&v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)&v70 - v27;
  v29 = sub_100003EA4(&qword_100055DF8);
  v30 = __chkstk_darwin(v29);
  v82 = (uint64_t)&v70 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v33 = (char *)&v70 - v32;
  v34 = (int *)type metadata accessor for AvatarView(0);
  v35 = *(_BYTE *)(a1 + v34[8]);
  v86 = v11;
  v77 = v20;
  v76 = v23;
  v79 = v28;
  if ((v35 & 1) != 0)
  {
    v37 = v73;
    swift_retain(v73);
    v39 = static Alignment.center.getter(v38);
    ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v94, a6 + -0.5, 0, a6 + -0.5, 0, v39, v40);
    v87 = v37;
    v88 = 256;
    v89 = v94;
    v90 = v95;
    v91 = v96;
    v92 = v97;
    v93 = v98;
    v41 = v16;
    v42 = sub_100003EA4(&qword_100055E58);
    v43 = sub_10001FF74();
    v44 = v42;
    v16 = v41;
    View.widgetAccentable(_:)(1, v44, v43);
    swift_release(v37);
    v45 = sub_100003EA4(&qword_100055E00);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v33, 0, 1, v45);
  }
  else
  {
    v36 = sub_100003EA4(&qword_100055E00);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v33, 1, 1, v36);
  }
  if ((v78 & 1) != 0)
  {
    v46 = (uint64_t)v33;
    v47 = v74;
    if ((v75 & 1) != 0)
    {
      v48 = v72;
      sub_10001E5E0(v72);
      v49 = &qword_100055DD0;
      sub_100012310(v48, (uint64_t)v19, &qword_100055DD0);
      swift_storeEnumTagMultiPayload(v19, v47, 1);
    }
    else
    {
      v48 = v71;
      sub_10001E1F8(v71);
      v49 = &qword_100055DE0;
      sub_100012310(v48, (uint64_t)v19, &qword_100055DE0);
      swift_storeEnumTagMultiPayload(v19, v47, 0);
    }
    v50 = sub_100012354(&qword_100055E18, &qword_100055DE0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v53 = sub_10002001C(&qword_100055E20, &qword_100055DD0, (void (*)(void))sub_10001FECC);
    v54 = (uint64_t)v76;
    _ConditionalContent<>.init(storage:)(v19, v77, v16, v50, v53);
    sub_10000EB5C(v48, v49);
    v52 = (uint64_t)v79;
    sub_10001C888(v54, (uint64_t)v79, &qword_100055DE8);
    v51 = 0;
  }
  else
  {
    v46 = (uint64_t)v33;
    v51 = 1;
    v52 = (uint64_t)v79;
  }
  v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v80 + 56))(v52, v51, 1, v81);
  v56 = (double *)(a1 + v34[10]);
  v57 = *v56 * *(double *)(a1 + v34[6] + 8);
  if (v56[1] < v57)
    v57 = v56[1];
  v58 = v56[2] + v57;
  *v14 = static Alignment.center.getter(v55);
  v14[1] = v59;
  v60 = sub_100003EA4(&qword_100055E08);
  sub_10001DB64(a1, (uint64_t)v14 + *(int *)(v60 + 44), v58);
  v61 = v84;
  sub_10001C888((uint64_t)v14, v84, &qword_100055DC8);
  v62 = v46;
  v63 = v82;
  sub_100012310(v46, v82, &qword_100055DF8);
  v64 = v83;
  sub_100012310(v52, v83, &qword_100055DF0);
  v65 = (uint64_t)v86;
  sub_100012310(v61, (uint64_t)v86, &qword_100055DC8);
  v66 = v85;
  sub_100012310(v63, v85, &qword_100055DF8);
  v67 = v52;
  v68 = sub_100003EA4(&qword_100055E10);
  sub_100012310(v64, v66 + *(int *)(v68 + 48), &qword_100055DF0);
  sub_100012310(v65, v66 + *(int *)(v68 + 64), &qword_100055DC8);
  sub_10000EB5C(v61, &qword_100055DC8);
  sub_10000EB5C(v67, &qword_100055DF0);
  sub_10000EB5C(v62, &qword_100055DF8);
  sub_10000EB5C(v65, &qword_100055DC8);
  sub_10000EB5C(v64, &qword_100055DF0);
  return sub_10000EB5C(v63, &qword_100055DF8);
}

uint64_t sub_10001FECC()
{
  return sub_10002001C(&qword_100055E28, &qword_100055E30, (void (*)(void))sub_10001FEF0);
}

unint64_t sub_10001FEF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100055E38;
  if (!qword_100055E38)
  {
    v1 = sub_100003EE4(&qword_100055E40);
    sub_100012354(&qword_100055E48, &qword_100055E50, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100055E38);
  }
  return result;
}

unint64_t sub_10001FF74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100055E60;
  if (!qword_100055E60)
  {
    v1 = sub_100003EE4(&qword_100055E58);
    sub_100012354(&qword_100055E68, &qword_100055E70, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100055E60);
  }
  return result;
}

uint64_t sub_10001FFF8()
{
  return sub_10002001C(&qword_100055F28, &qword_100055ED8, (void (*)(void))sub_100020084);
}

uint64_t sub_10002001C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100003EE4(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100020084()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100055F30;
  if (!qword_100055F30)
  {
    v1 = sub_100003EE4(&qword_100055ED0);
    swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of Image.widgetAccentedRenderingMode(_:)>>, 1);
    sub_100012354(&qword_100055F38, &qword_100055F40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100055F30);
  }
  return result;
}

unint64_t sub_100020114()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100055F50;
  if (!qword_100055F50)
  {
    v1 = objc_opt_self(UIColor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100055F50);
  }
  return result;
}

uint64_t sub_100020158()
{
  return sub_100012354(&qword_100055F90, qword_100055F98, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

uint64_t sub_100020184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

void sub_10002018C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[6];

  sub_100011064(319, (unint64_t *)&qword_1000557A0, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v3 <= 0x3F)
  {
    v11[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100011064(319, (unint64_t *)&qword_100056020, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection);
    if (v5 <= 0x3F)
    {
      v11[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100011064(319, &qword_1000557A8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
      if (v8 <= 0x3F)
      {
        v11[2] = *(_QWORD *)(v6 - 8) + 64;
        v9 = type metadata accessor for ModelEntry(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v7);
        if (v10 <= 0x3F)
        {
          v11[3] = *(_QWORD *)(v9 - 8) + 64;
          v11[4] = &unk_100043230;
          v11[5] = &unk_100043248;
          swift_initStructMetadata(a1, 0, 6, v11, a1 + 32);
        }
      }
    }
  }
}

uint64_t *sub_100020290(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void (*v35)(uint64_t *, uint64_t *, uint64_t);
  uint64_t *v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _OWORD *v59;
  _OWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void (*v64)(unint64_t, unint64_t, uint64_t);
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;

  v86 = type metadata accessor for ColorScheme(0);
  v5 = *(_QWORD *)(v86 - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v87 = type metadata accessor for LayoutDirection(0);
  v7 = *(_QWORD *)(v87 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v9 = 8;
  else
    v9 = *(_QWORD *)(v7 + 64);
  v10 = type metadata accessor for WidgetRenderingMode(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v88 = v11;
  v89 = v10;
  v13 = *(_QWORD *)(v11 + 64);
  if (v13 <= 8)
    v13 = 8;
  v92 = v13;
  v90 = type metadata accessor for Date(0);
  v91 = *(_QWORD *)(v90 - 8);
  v14 = *(_DWORD *)(v91 + 80);
  v15 = type metadata accessor for WidgetFamily(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_DWORD *)(v16 + 80);
  v18 = v17 & 0xF8 | 7;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_DWORD *)(v20 + 80);
  v22 = v18 | v14 | v21;
  v23 = *(_DWORD *)(v5 + 80);
  v24 = ((v12 | v8) | v23) & 0xF8 | v22;
  if ((_DWORD)v24 != 7
    || ((v12 | v8 | v14 | v17 | v23 | *(_DWORD *)(v20 + 80)) & 0x100000) != 0
    || (v25 = v8 & 0xF8 | 7,
        v26 = v6 + v25 + 1,
        v27 = v12 & 0xF8 | 7,
        v28 = *(_QWORD *)(v91 + 64) + v18,
        v29 = *(_QWORD *)(v16 + 64) + 7,
        (((((((((v29 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v21 + 8 + (v28 & ~v18)) & ~v21)
          + *(_QWORD *)(v20 + 64)
          + ((v92 + 1 + v22 + ((v9 + 1 + v27 + (v26 & ~v25)) & ~v27)) & ~v22)
          + 7) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 232 > 0x18))
  {
    v32 = *a2;
    *a1 = *a2;
    v33 = (uint64_t *)(v32 + ((v24 + 16) & ~v24));
  }
  else
  {
    v30 = *((unsigned __int8 *)a2 + v6);
    v84 = *(_QWORD *)(v19 - 8);
    if (v30 >= 2)
    {
      if (v6 <= 3)
        v31 = v6;
      else
        v31 = 4;
      __asm { BR              X13 }
    }
    v74 = v9 + 1;
    v75 = *(_DWORD *)(v20 + 80);
    v76 = v92 + 1;
    v77 = v18;
    v78 = *(_QWORD *)(v91 + 64) + v18;
    v79 = *(_QWORD *)(v16 + 64) + 7;
    v80 = (((v29 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v21 + 8;
    v81 = ((v80 + (v28 & ~v18)) & ~v21) + *(_QWORD *)(v20 + 64);
    v82 = *(_QWORD *)(v15 - 8);
    v83 = v15;
    v85 = v19;
    v34 = ~v25;
    if (v30 == 1)
    {
      v35 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
      v36 = a1;
      v35(a1, a2, v86);
      v37 = 1;
    }
    else
    {
      v38 = *a2;
      v36 = a1;
      *a1 = *a2;
      swift_retain(v38);
      v37 = 0;
    }
    *((_BYTE *)v36 + v6) = v37;
    v39 = (_QWORD *)(((unint64_t)v36 + v26) & v34);
    v40 = (uint64_t *)(((unint64_t)a2 + v26) & v34);
    v41 = *((unsigned __int8 *)v40 + v9);
    if (v41 >= 2)
    {
      if (v9 <= 3)
        v42 = v9;
      else
        v42 = 4;
      __asm { BR              X12 }
    }
    v43 = ~v27;
    if (v41 == 1)
    {
      (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v7 + 16))(v39, v40, v87);
      v44 = 1;
    }
    else
    {
      v45 = *v40;
      *v39 = *v40;
      swift_retain(v45);
      v44 = 0;
    }
    *((_BYTE *)v39 + v9) = v44;
    v46 = (_QWORD *)(((unint64_t)v39 + v74 + v27) & v43);
    v47 = (uint64_t *)(((unint64_t)v40 + v74 + v27) & v43);
    v48 = *((unsigned __int8 *)v47 + v92);
    if (v48 >= 2)
    {
      if (v92 <= 3)
        v49 = v92;
      else
        v49 = 4;
      __asm { BR              X12 }
    }
    v50 = ~v22;
    v51 = ~v77;
    v52 = ~v75;
    if (v48 == 1)
    {
      (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v88 + 16))(v46, v47, v89);
      v53 = 1;
    }
    else
    {
      v54 = *v47;
      *v46 = *v47;
      swift_retain(v54);
      v53 = 0;
    }
    *((_BYTE *)v46 + v92) = v53;
    v55 = ((unint64_t)v46 + v76 + v22) & v50;
    v56 = ((unint64_t)v47 + v76 + v22) & v50;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v91 + 16))(v55, v56, v90);
    v57 = (v78 + v55) & v51;
    v58 = (v78 + v56) & v51;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v82 + 16))(v57, v58, v83);
    v59 = (_OWORD *)((v79 + v57) & 0xFFFFFFFFFFFFFFF8);
    v60 = (_OWORD *)((v79 + v58) & 0xFFFFFFFFFFFFFFF8);
    *v59 = *v60;
    v61 = *(_QWORD *)(((unint64_t)v60 + 23) & 0xFFFFFFFFFFFFF8);
    *(_QWORD *)(((unint64_t)v59 + 23) & 0xFFFFFFFFFFFFF8) = v61;
    v62 = (v80 + v57) & v52;
    v63 = (v80 + v58) & v52;
    v64 = *(void (**)(unint64_t, unint64_t, uint64_t))(v84 + 16);
    swift_retain(v61);
    v64(v62, v63, v85);
    v65 = (_QWORD *)(((v55 | 7) + v81) & 0xFFFFFFFFFFFFFFF8);
    v66 = (_QWORD *)(((v56 | 7) + v81) & 0xFFFFFFFFFFFFFFF8);
    *v65 = *v66;
    v67 = v66[1];
    v65[1] = v67;
    v68 = ((unint64_t)v65 + 23) & 0xFFFFFFFFFFFFFFF8;
    v69 = ((unint64_t)v66 + 23) & 0xFFFFFFFFFFFFFFF8;
    v70 = *(_QWORD *)v69;
    *(_QWORD *)v68 = *(_QWORD *)v69;
    v32 = *(_QWORD *)(v69 + 8);
    *(_QWORD *)(v68 + 8) = v32;
    *(_QWORD *)(v68 + 16) = *(_QWORD *)(v69 + 16);
    *(_QWORD *)(v68 + 24) = *(_QWORD *)(v69 + 24);
    *(_QWORD *)(v68 + 32) = *(_QWORD *)(v69 + 32);
    *(_QWORD *)(v68 + 40) = *(_QWORD *)(v69 + 40);
    v71 = *(_OWORD *)(v69 + 64);
    *(_OWORD *)(v68 + 48) = *(_OWORD *)(v69 + 48);
    *(_OWORD *)(v68 + 64) = v71;
    *(_QWORD *)(v68 + 80) = *(_QWORD *)(v69 + 80);
    *(_QWORD *)(v68 + 88) = *(_QWORD *)(v69 + 88);
    *(_QWORD *)(v68 + 96) = *(_QWORD *)(v69 + 96);
    *(_QWORD *)(v68 + 104) = *(_QWORD *)(v69 + 104);
    *(_QWORD *)(v68 + 112) = *(_QWORD *)(v69 + 112);
    *(_QWORD *)(v68 + 120) = *(_QWORD *)(v69 + 120);
    *(_QWORD *)(v68 + 128) = *(_QWORD *)(v69 + 128);
    *(_QWORD *)(v68 + 136) = *(_QWORD *)(v69 + 136);
    v72 = *(_OWORD *)(v69 + 160);
    *(_OWORD *)(v68 + 144) = *(_OWORD *)(v69 + 144);
    *(_OWORD *)(v68 + 160) = v72;
    *(_QWORD *)(v68 + 176) = *(_QWORD *)(v69 + 176);
    *(_QWORD *)(v68 + 184) = *(_QWORD *)(v69 + 184);
    *(_QWORD *)(v68 + 192) = *(_QWORD *)(v69 + 192);
    *(_QWORD *)(v68 + 200) = *(_QWORD *)(v69 + 200);
    *(_OWORD *)(v68 + 208) = *(_OWORD *)(v69 + 208);
    *(_QWORD *)(v68 + 224) = *(_QWORD *)(v69 + 224);
    swift_bridgeObjectRetain(v67);
    swift_retain(v70);
    v33 = a1;
  }
  swift_retain(v32);
  return v33;
}

uint64_t sub_1000208E0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;

  v4 = type metadata accessor for ColorScheme(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a1 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
    (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, v4);
  else
    swift_release(*a1);
  v9 = type metadata accessor for LayoutDirection(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  v12 = (_QWORD *)(((unint64_t)a1 + v6 + v11 + 1) & ~v11);
  if (*(_QWORD *)(v10 + 64) <= 8uLL)
    v13 = 8;
  else
    v13 = *(_QWORD *)(v10 + 64);
  v14 = *((unsigned __int8 *)v12 + v13);
  if (v14 >= 2)
  {
    if (v13 <= 3)
      v15 = v13;
    else
      v15 = 4;
    __asm { BR              X13 }
  }
  if (v14 == 1)
    (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  else
    swift_release(*v12);
  v16 = type metadata accessor for WidgetRenderingMode(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_DWORD *)(v17 + 80) & 0xF8 | 7;
  v19 = (_QWORD *)(((unint64_t)v12 + v13 + v18 + 1) & ~v18);
  if (*(_QWORD *)(v17 + 64) <= 8uLL)
    v20 = 8;
  else
    v20 = *(_QWORD *)(v17 + 64);
  v21 = *((unsigned __int8 *)v19 + v20);
  if (v21 >= 2)
  {
    if (v20 <= 3)
      v22 = v20;
    else
      v22 = 4;
    __asm { BR              X13 }
  }
  if (v21 == 1)
    (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  else
    swift_release(*v19);
  v23 = (char *)v19 + v20;
  v24 = type metadata accessor for Date(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = type metadata accessor for WidgetFamily(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(_DWORD *)(v28 + 80) & 0xF8 | 7;
  v30 = *(_DWORD *)(v28 + 80) & 0xF8 | 7 | v26;
  v31 = *(_QWORD *)(a2 + 16);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(unsigned __int8 *)(v32 + 80);
  v34 = (unint64_t)&v23[(v30 | v33) + 1] & ~(unint64_t)(v30 | v33);
  (*(void (**)(unint64_t, uint64_t))(v25 + 8))(v34, v24);
  v35 = *(_QWORD *)(v25 + 64) + v29;
  v36 = (v35 + v34) & ~v29;
  (*(void (**)(unint64_t, uint64_t))(v28 + 8))(v36, v27);
  v37 = *(_QWORD *)(v28 + 64) + 7;
  swift_release(*(_QWORD *)((((v37 + v36) & 0xFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8));
  v38 = (((v37 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v33 + 8;
  (*(void (**)(unint64_t, uint64_t))(v32 + 8))((v38 + v36) & ~v33, v31);
  v39 = ((v34 | 7) + *(_QWORD *)(v32 + 64) + ((v38 + (v35 & ~v29)) & ~v33)) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v39 + 8));
  v40 = (_QWORD *)((v39 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v40);
  return swift_release(v40[1]);
}

uint64_t *sub_100020C8C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  _OWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void (*v59)(unint64_t, unint64_t, uint64_t);
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v71;
  uint64_t *v72;

  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    v12 = *a2;
    *a1 = *a2;
    swift_retain(v12);
    v11 = 0;
  }
  *((_BYTE *)a1 + v8) = v11;
  v13 = type metadata accessor for LayoutDirection(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  v16 = v8 + v15 + 1;
  v17 = (_QWORD *)(((unint64_t)a1 + v16) & ~v15);
  v18 = (uint64_t *)(((unint64_t)a2 + v16) & ~v15);
  if (*(_QWORD *)(v14 + 64) <= 8uLL)
    v19 = 8;
  else
    v19 = *(_QWORD *)(v14 + 64);
  v20 = *((unsigned __int8 *)v18 + v19);
  if (v20 >= 2)
  {
    if (v19 <= 3)
      v21 = v19;
    else
      v21 = 4;
    __asm { BR              X13 }
  }
  if (v20 == 1)
  {
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v14 + 16))(v17, v18, v13);
    v22 = 1;
  }
  else
  {
    v23 = *v18;
    *v17 = *v18;
    swift_retain(v23);
    v22 = 0;
  }
  *((_BYTE *)v17 + v19) = v22;
  v24 = v19 + 1;
  v25 = type metadata accessor for WidgetRenderingMode(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(_DWORD *)(v26 + 80) & 0xF8 | 7;
  v28 = v24 + v27;
  v29 = (_QWORD *)(((unint64_t)v17 + v24 + v27) & ~v27);
  v30 = (uint64_t *)(((unint64_t)v18 + v28) & ~v27);
  if (*(_QWORD *)(v26 + 64) <= 8uLL)
    v31 = 8;
  else
    v31 = *(_QWORD *)(v26 + 64);
  v32 = *((unsigned __int8 *)v30 + v31);
  if (v32 >= 2)
  {
    if (v31 <= 3)
      v33 = v31;
    else
      v33 = 4;
    __asm { BR              X13 }
  }
  v72 = a1;
  if (v32 == 1)
  {
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v26 + 16))(v29, v30, v25);
    v34 = 1;
  }
  else
  {
    v35 = *v30;
    *v29 = *v30;
    swift_retain(v35);
    v34 = 0;
  }
  *((_BYTE *)v29 + v31) = v34;
  v36 = v31 + 1;
  v37 = type metadata accessor for Date(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(unsigned __int8 *)(v38 + 80);
  v40 = type metadata accessor for WidgetFamily(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(_DWORD *)(v41 + 80) & 0xF8 | 7;
  v43 = *(_DWORD *)(v41 + 80) & 0xF8 | 7 | v39;
  v71 = *(_QWORD *)(a3 + 16);
  v44 = *(_QWORD *)(v71 - 8);
  v45 = *(unsigned __int8 *)(v44 + 80);
  v46 = v43 | v45;
  v47 = ((unint64_t)v29 + v36 + v46) & ~v46;
  v48 = ((unint64_t)v30 + v36 + v46) & ~v46;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v38 + 16))(v47, v48, v37);
  v49 = *(_QWORD *)(v38 + 64) + v42;
  v50 = (v49 + v47) & ~v42;
  v51 = (v49 + v48) & ~v42;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v50, v51, v40);
  v52 = *(_QWORD *)(v41 + 64) + 7;
  v53 = (_OWORD *)((v52 + v50) & 0xFFFFFFFFFFFFFFF8);
  v54 = (_OWORD *)((v52 + v51) & 0xFFFFFFFFFFFFFFF8);
  *v53 = *v54;
  v55 = (uint64_t *)(((unint64_t)v54 + 23) & 0xFFFFFFFFFFFFF8);
  v56 = *v55;
  *(_QWORD *)(((unint64_t)v53 + 23) & 0xFFFFFFFFFFFFF8) = *v55;
  v57 = (((v52 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v45 + 8;
  v58 = (v57 + v51) & ~v45;
  v59 = *(void (**)(unint64_t, unint64_t, uint64_t))(v44 + 16);
  swift_retain(v56);
  v59((v57 + v50) & ~v45, v58, v71);
  v60 = ((v57 + (v49 & ~v42)) & ~v45) + *(_QWORD *)(v44 + 64) + 7;
  v61 = (_QWORD *)((v60 + v47) & 0xFFFFFFFFFFFFFFF8);
  v62 = (_QWORD *)((v60 + v48) & 0xFFFFFFFFFFFFFFF8);
  *v61 = *v62;
  v63 = v62[1];
  v61[1] = v63;
  v64 = ((unint64_t)v61 + 23) & 0xFFFFFFFFFFFFFFF8;
  v65 = ((unint64_t)v62 + 23) & 0xFFFFFFFFFFFFFFF8;
  v66 = *(_QWORD *)v65;
  *(_QWORD *)v64 = *(_QWORD *)v65;
  v67 = *(_QWORD *)(v65 + 8);
  *(_QWORD *)(v64 + 8) = v67;
  *(_QWORD *)(v64 + 16) = *(_QWORD *)(v65 + 16);
  *(_QWORD *)(v64 + 24) = *(_QWORD *)(v65 + 24);
  *(_QWORD *)(v64 + 32) = *(_QWORD *)(v65 + 32);
  *(_QWORD *)(v64 + 40) = *(_QWORD *)(v65 + 40);
  v68 = *(_OWORD *)(v65 + 64);
  *(_OWORD *)(v64 + 48) = *(_OWORD *)(v65 + 48);
  *(_OWORD *)(v64 + 64) = v68;
  *(_QWORD *)(v64 + 80) = *(_QWORD *)(v65 + 80);
  *(_QWORD *)(v64 + 88) = *(_QWORD *)(v65 + 88);
  *(_QWORD *)(v64 + 96) = *(_QWORD *)(v65 + 96);
  *(_QWORD *)(v64 + 104) = *(_QWORD *)(v65 + 104);
  *(_QWORD *)(v64 + 112) = *(_QWORD *)(v65 + 112);
  *(_QWORD *)(v64 + 120) = *(_QWORD *)(v65 + 120);
  *(_QWORD *)(v64 + 128) = *(_QWORD *)(v65 + 128);
  *(_QWORD *)(v64 + 136) = *(_QWORD *)(v65 + 136);
  v69 = *(_OWORD *)(v65 + 160);
  *(_OWORD *)(v64 + 144) = *(_OWORD *)(v65 + 144);
  *(_OWORD *)(v64 + 160) = v69;
  *(_QWORD *)(v64 + 176) = *(_QWORD *)(v65 + 176);
  *(_QWORD *)(v64 + 184) = *(_QWORD *)(v65 + 184);
  *(_QWORD *)(v64 + 192) = *(_QWORD *)(v65 + 192);
  *(_QWORD *)(v64 + 200) = *(_QWORD *)(v65 + 200);
  *(_OWORD *)(v64 + 208) = *(_OWORD *)(v65 + 208);
  *(_QWORD *)(v64 + 224) = *(_QWORD *)(v65 + 224);
  swift_bridgeObjectRetain(v63);
  swift_retain(v66);
  swift_retain(v67);
  return v72;
}

uint64_t *sub_1000211DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t *v79;

  if (a1 != a2)
  {
    v6 = type metadata accessor for ColorScheme(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release(*a1);
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      *((_BYTE *)a1 + v8) = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      *((_BYTE *)a1 + v8) = 0;
      swift_retain(v13);
    }
  }
  v14 = type metadata accessor for ColorScheme(0);
  if (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) <= 8uLL)
    v15 = 8;
  else
    v15 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64);
  v16 = type metadata accessor for LayoutDirection(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_DWORD *)(v17 + 80) & 0xF8 | 7;
  v19 = v15 + v18 + 1;
  v20 = (uint64_t *)(((unint64_t)a1 + v19) & ~v18);
  v21 = (uint64_t *)(((unint64_t)a2 + v19) & ~v18);
  if (*(_QWORD *)(v17 + 64) <= 8uLL)
    v22 = 8;
  else
    v22 = *(_QWORD *)(v17 + 64);
  if (v20 != v21)
  {
    v23 = v16;
    v24 = *((unsigned __int8 *)v20 + v22);
    if (v24 >= 2)
    {
      if (v22 <= 3)
        v25 = v22;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)
      (*(void (**)(uint64_t *, uint64_t))(v17 + 8))(v20, v16);
    else
      swift_release(*v20);
    v26 = *((unsigned __int8 *)v21 + v22);
    if (v26 >= 2)
    {
      if (v22 <= 3)
        v27 = v22;
      else
        v27 = 4;
      __asm { BR              X12 }
    }
    if (v26 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v17 + 16))(v20, v21, v23);
      *((_BYTE *)v20 + v22) = 1;
    }
    else
    {
      v28 = *v21;
      *v20 = *v21;
      *((_BYTE *)v20 + v22) = 0;
      swift_retain(v28);
    }
  }
  v79 = a1;
  v29 = type metadata accessor for WidgetRenderingMode(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(_DWORD *)(v30 + 80) & 0xF8 | 7;
  v32 = v22 + v31 + 1;
  v33 = (uint64_t *)(((unint64_t)v20 + v32) & ~v31);
  v34 = (uint64_t *)(((unint64_t)v21 + v32) & ~v31);
  if (*(_QWORD *)(v30 + 64) <= 8uLL)
    v35 = 8;
  else
    v35 = *(_QWORD *)(v30 + 64);
  if (v33 != v34)
  {
    v36 = v29;
    v37 = *((unsigned __int8 *)v33 + v35);
    if (v37 >= 2)
    {
      if (v35 <= 3)
        v38 = v35;
      else
        v38 = 4;
      __asm { BR              X12 }
    }
    if (v37 == 1)
      (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v33, v29);
    else
      swift_release(*v33);
    v39 = *((unsigned __int8 *)v34 + v35);
    if (v39 >= 2)
    {
      if (v35 <= 3)
        v40 = v35;
      else
        v40 = 4;
      __asm { BR              X12 }
    }
    if (v39 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v30 + 16))(v33, v34, v36);
      *((_BYTE *)v33 + v35) = 1;
    }
    else
    {
      v41 = *v34;
      *v33 = *v34;
      *((_BYTE *)v33 + v35) = 0;
      swift_retain(v41);
    }
  }
  v42 = type metadata accessor for Date(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(unsigned __int8 *)(v43 + 80);
  v45 = type metadata accessor for WidgetFamily(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(_DWORD *)(v46 + 80) & 0xF8 | 7;
  v48 = *(_DWORD *)(v46 + 80) & 0xF8 | 7 | v44;
  v78 = *(_QWORD *)(a3 + 16);
  v49 = *(_QWORD *)(v78 - 8);
  v50 = *(unsigned __int8 *)(v49 + 80);
  v51 = v48 | v50;
  v52 = v35 + v51 + 1;
  v53 = ((unint64_t)v33 + v52) & ~v51;
  v54 = ((unint64_t)v34 + v52) & ~v51;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v43 + 24))(v53, v54, v42);
  v55 = *(_QWORD *)(v43 + 64) + v47;
  v56 = (v55 + v53) & ~v47;
  v57 = (v55 + v54) & ~v47;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 24))(v56, v57, v45);
  v58 = *(_QWORD *)(v46 + 64) + 7;
  v59 = (_QWORD *)((v58 + v56) & 0xFFFFFFFFFFFFFFF8);
  v60 = (_QWORD *)((v58 + v57) & 0xFFFFFFFFFFFFFFF8);
  *v59 = *v60;
  v59[1] = v60[1];
  v61 = (uint64_t *)(((unint64_t)v59 + 23) & 0xFFFFFFFFFFFFFFF8);
  v62 = (uint64_t *)(((unint64_t)v60 + 23) & 0xFFFFFFFFFFFFF8);
  v63 = *v62;
  v64 = *v61;
  *v61 = *v62;
  swift_retain(v63);
  swift_release(v64);
  v65 = (((v58 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v50 + 8;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v49 + 24))((v65 + v56) & ~v50, (v65 + v57) & ~v50, v78);
  v66 = *(_QWORD *)(v49 + 64) + ((v65 + (v55 & ~v47)) & ~v50) + 7;
  v67 = (_QWORD *)((v66 + v53) & 0xFFFFFFFFFFFFFFF8);
  v68 = (_QWORD *)((v66 + v54) & 0xFFFFFFFFFFFFFFF8);
  *v67 = *v68;
  v69 = v68[1];
  v70 = v67[1];
  v67[1] = v69;
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRelease(v70);
  v71 = (uint64_t *)(((unint64_t)v67 + 23) & 0xFFFFFFFFFFFFFFF8);
  v72 = (uint64_t *)(((unint64_t)v68 + 23) & 0xFFFFFFFFFFFFFFF8);
  v73 = *v72;
  v74 = *v71;
  *v71 = *v72;
  swift_retain(v73);
  swift_release(v74);
  v75 = v72[1];
  v76 = v71[1];
  v71[1] = v75;
  swift_retain(v75);
  swift_release(v76);
  v71[2] = v72[2];
  v71[3] = v72[3];
  v71[4] = v72[4];
  v71[5] = v72[5];
  v71[6] = v72[6];
  v71[7] = v72[7];
  v71[8] = v72[8];
  v71[9] = v72[9];
  v71[10] = v72[10];
  v71[11] = v72[11];
  v71[12] = v72[12];
  v71[13] = v72[13];
  v71[14] = v72[14];
  v71[15] = v72[15];
  v71[16] = v72[16];
  v71[17] = v72[17];
  v71[18] = v72[18];
  v71[19] = v72[19];
  v71[20] = v72[20];
  v71[21] = v72[21];
  v71[22] = v72[22];
  v71[23] = v72[23];
  v71[24] = v72[24];
  v71[25] = v72[25];
  v71[26] = v72[26];
  v71[27] = v72[27];
  v71[28] = v72[28];
  return v79;
}

_QWORD *sub_1000219E4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  _OWORD *v51;
  unint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  _OWORD *v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v70;
  _QWORD *v71;

  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X13 }
  }
  if (v9 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
    v11 = 1;
  }
  else
  {
    v11 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v8) = v11;
  v12 = type metadata accessor for LayoutDirection(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
  v15 = v8 + v14 + 1;
  v16 = (_QWORD *)(((unint64_t)a1 + v15) & ~v14);
  v17 = (_QWORD *)(((unint64_t)a2 + v15) & ~v14);
  if (*(_QWORD *)(v13 + 64) <= 8uLL)
    v18 = 8;
  else
    v18 = *(_QWORD *)(v13 + 64);
  v19 = *((unsigned __int8 *)v17 + v18);
  if (v19 >= 2)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X13 }
  }
  if (v19 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v13 + 32))(v16, v17, v12);
    v21 = 1;
  }
  else
  {
    v21 = 0;
    *v16 = *v17;
  }
  *((_BYTE *)v16 + v18) = v21;
  v22 = v18 + 1;
  v23 = type metadata accessor for WidgetRenderingMode(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(_DWORD *)(v24 + 80) & 0xF8 | 7;
  v26 = v22 + v25;
  v27 = (_QWORD *)(((unint64_t)v16 + v22 + v25) & ~v25);
  v28 = (_QWORD *)(((unint64_t)v17 + v26) & ~v25);
  if (*(_QWORD *)(v24 + 64) <= 8uLL)
    v29 = 8;
  else
    v29 = *(_QWORD *)(v24 + 64);
  v30 = *((unsigned __int8 *)v28 + v29);
  if (v30 >= 2)
  {
    if (v29 <= 3)
      v31 = v29;
    else
      v31 = 4;
    __asm { BR              X13 }
  }
  v71 = a1;
  if (v30 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v24 + 32))(v27, v28, v23);
    v32 = 1;
  }
  else
  {
    v32 = 0;
    *v27 = *v28;
  }
  *((_BYTE *)v27 + v29) = v32;
  v33 = v29 + 1;
  v34 = type metadata accessor for Date(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(unsigned __int8 *)(v35 + 80);
  v37 = type metadata accessor for WidgetFamily(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(_DWORD *)(v38 + 80) & 0xF8 | 7;
  v40 = *(_DWORD *)(v38 + 80) & 0xF8 | 7 | v36;
  v70 = *(_QWORD *)(a3 + 16);
  v41 = *(_QWORD *)(v70 - 8);
  v42 = *(unsigned __int8 *)(v41 + 80);
  v43 = v40 | v42;
  v44 = ((unint64_t)v27 + v33 + v43) & ~v43;
  v45 = ((unint64_t)v28 + v33 + v43) & ~v43;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v35 + 32))(v44, v45, v34);
  v46 = *(_QWORD *)(v35 + 64) + v39;
  v47 = (v46 + v44) & ~v39;
  v48 = (v46 + v45) & ~v39;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v47, v48, v37);
  v49 = *(_QWORD *)(v38 + 64) + 7;
  v50 = (_OWORD *)((v49 + v47) & 0xFFFFFFFFFFFFFFF8);
  v51 = (_OWORD *)((v49 + v48) & 0xFFFFFFFFFFFFFFF8);
  *v50 = *v51;
  *(_QWORD *)(((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v51 + 23) & 0xFFFFFFFFFFFFF8);
  v52 = (((v49 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v42 + 8;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v41 + 32))((v52 + v47) & ~v42, (v52 + v48) & ~v42, v70);
  v53 = ((v52 + (v46 & ~v39)) & ~v42) + *(_QWORD *)(v41 + 64) + 7;
  v54 = (_OWORD *)((v53 + v44) & 0xFFFFFFFFFFFFFFF8);
  v55 = (_OWORD *)((v53 + v45) & 0xFFFFFFFFFFFFFFF8);
  *v54 = *v55;
  v56 = ((unint64_t)v54 + 23) & 0xFFFFFFFFFFFFFFF8;
  v57 = ((unint64_t)v55 + 23) & 0xFFFFFFFFFFFFFFF8;
  v59 = *(_OWORD *)(v57 + 192);
  v58 = *(_OWORD *)(v57 + 208);
  v60 = *(_OWORD *)(v57 + 176);
  *(_QWORD *)(v56 + 224) = *(_QWORD *)(v57 + 224);
  *(_OWORD *)(v56 + 192) = v59;
  *(_OWORD *)(v56 + 208) = v58;
  *(_OWORD *)(v56 + 176) = v60;
  v62 = *(_OWORD *)(v57 + 112);
  v61 = *(_OWORD *)(v57 + 128);
  v63 = *(_OWORD *)(v57 + 160);
  *(_OWORD *)(v56 + 144) = *(_OWORD *)(v57 + 144);
  *(_OWORD *)(v56 + 160) = v63;
  *(_OWORD *)(v56 + 112) = v62;
  *(_OWORD *)(v56 + 128) = v61;
  v65 = *(_OWORD *)(v57 + 48);
  v64 = *(_OWORD *)(v57 + 64);
  v66 = *(_OWORD *)(v57 + 96);
  *(_OWORD *)(v56 + 80) = *(_OWORD *)(v57 + 80);
  *(_OWORD *)(v56 + 96) = v66;
  *(_OWORD *)(v56 + 48) = v65;
  *(_OWORD *)(v56 + 64) = v64;
  v67 = *(_OWORD *)v57;
  v68 = *(_OWORD *)(v57 + 32);
  *(_OWORD *)(v56 + 16) = *(_OWORD *)(v57 + 16);
  *(_OWORD *)(v56 + 32) = v68;
  *(_OWORD *)v56 = v67;
  return v71;
}

_QWORD *sub_100021E90(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  _QWORD *v74;

  if (a1 != a2)
  {
    v6 = type metadata accessor for ColorScheme(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v7 + 64) <= 8uLL)
      v8 = 8;
    else
      v8 = *(_QWORD *)(v7 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    else
      swift_release(*a1);
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
      v13 = 1;
    }
    else
    {
      v13 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v8) = v13;
  }
  v14 = type metadata accessor for ColorScheme(0);
  if (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) <= 8uLL)
    v15 = 8;
  else
    v15 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64);
  v16 = type metadata accessor for LayoutDirection(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_DWORD *)(v17 + 80) & 0xF8 | 7;
  v19 = v15 + v18 + 1;
  v20 = (_QWORD *)(((unint64_t)a1 + v19) & ~v18);
  v21 = (_QWORD *)(((unint64_t)a2 + v19) & ~v18);
  if (*(_QWORD *)(v17 + 64) <= 8uLL)
    v22 = 8;
  else
    v22 = *(_QWORD *)(v17 + 64);
  if (v20 != v21)
  {
    v23 = v16;
    v24 = *((unsigned __int8 *)v20 + v22);
    if (v24 >= 2)
    {
      if (v22 <= 3)
        v25 = v22;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v20, v16);
    else
      swift_release(*v20);
    v26 = *((unsigned __int8 *)v21 + v22);
    if (v26 >= 2)
    {
      if (v22 <= 3)
        v27 = v22;
      else
        v27 = 4;
      __asm { BR              X12 }
    }
    if (v26 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v17 + 32))(v20, v21, v23);
      v28 = 1;
    }
    else
    {
      v28 = 0;
      *v20 = *v21;
    }
    *((_BYTE *)v20 + v22) = v28;
  }
  v74 = a1;
  v29 = type metadata accessor for WidgetRenderingMode(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(_DWORD *)(v30 + 80) & 0xF8 | 7;
  v32 = v22 + v31 + 1;
  v33 = (_QWORD *)(((unint64_t)v20 + v32) & ~v31);
  v34 = (_QWORD *)(((unint64_t)v21 + v32) & ~v31);
  if (*(_QWORD *)(v30 + 64) <= 8uLL)
    v35 = 8;
  else
    v35 = *(_QWORD *)(v30 + 64);
  if (v33 != v34)
  {
    v36 = v29;
    v37 = *((unsigned __int8 *)v33 + v35);
    if (v37 >= 2)
    {
      if (v35 <= 3)
        v38 = v35;
      else
        v38 = 4;
      __asm { BR              X12 }
    }
    if (v37 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v30 + 8))(v33, v29);
    else
      swift_release(*v33);
    v39 = *((unsigned __int8 *)v34 + v35);
    if (v39 >= 2)
    {
      if (v35 <= 3)
        v40 = v35;
      else
        v40 = 4;
      __asm { BR              X12 }
    }
    if (v39 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v30 + 32))(v33, v34, v36);
      v41 = 1;
    }
    else
    {
      v41 = 0;
      *v33 = *v34;
    }
    *((_BYTE *)v33 + v35) = v41;
  }
  v42 = type metadata accessor for Date(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(unsigned __int8 *)(v43 + 80);
  v45 = type metadata accessor for WidgetFamily(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(_DWORD *)(v46 + 80) & 0xF8 | 7;
  v48 = *(_DWORD *)(v46 + 80) & 0xF8 | 7 | v44;
  v73 = *(_QWORD *)(a3 + 16);
  v49 = *(_QWORD *)(v73 - 8);
  v50 = *(unsigned __int8 *)(v49 + 80);
  v51 = v48 | v50;
  v52 = v35 + v51 + 1;
  v53 = ((unint64_t)v33 + v52) & ~v51;
  v54 = ((unint64_t)v34 + v52) & ~v51;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v43 + 40))(v53, v54, v42);
  v55 = *(_QWORD *)(v43 + 64) + v47;
  v56 = (v55 + v53) & ~v47;
  v57 = (v55 + v54) & ~v47;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 40))(v56, v57, v45);
  v58 = *(_QWORD *)(v46 + 64) + 7;
  v59 = (_QWORD *)((v58 + v56) & 0xFFFFFFFFFFFFFFF8);
  v60 = (_QWORD *)((v58 + v57) & 0xFFFFFFFFFFFFFFF8);
  *v59 = *v60;
  v59[1] = v60[1];
  v61 = (uint64_t *)(((unint64_t)v59 + 23) & 0xFFFFFFFFFFFFFFF8);
  v62 = *v61;
  *v61 = *(_QWORD *)(((unint64_t)v60 + 23) & 0xFFFFFFFFFFFFF8);
  swift_release(v62);
  v63 = (((v58 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v50 + 8;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v49 + 40))((v63 + v56) & ~v50, (v63 + v57) & ~v50, v73);
  v64 = *(_QWORD *)(v49 + 64) + ((v63 + (v55 & ~v47)) & ~v50) + 7;
  v65 = (_QWORD *)((v64 + v53) & 0xFFFFFFFFFFFFFFF8);
  v66 = (_QWORD *)((v64 + v54) & 0xFFFFFFFFFFFFFFF8);
  *v65 = *v66;
  v67 = v65[1];
  v65[1] = v66[1];
  swift_bridgeObjectRelease(v67);
  v68 = (uint64_t *)(((unint64_t)v65 + 23) & 0xFFFFFFFFFFFFFFF8);
  v69 = (uint64_t *)(((unint64_t)v66 + 23) & 0xFFFFFFFFFFFFFFF8);
  v70 = *v68;
  *v68 = *v69;
  swift_release(v70);
  v71 = v68[1];
  v68[1] = v69[1];
  swift_release(v71);
  v68[2] = v69[2];
  v68[3] = v69[3];
  v68[4] = v69[4];
  v68[5] = v69[5];
  v68[6] = v69[6];
  v68[7] = v69[7];
  v68[8] = v69[8];
  v68[9] = v69[9];
  v68[10] = v69[10];
  v68[11] = v69[11];
  v68[12] = v69[12];
  v68[13] = v69[13];
  v68[14] = v69[14];
  v68[15] = v69[15];
  v68[16] = v69[16];
  v68[17] = v69[17];
  v68[18] = v69[18];
  v68[19] = v69[19];
  v68[20] = v69[20];
  v68[21] = v69[21];
  v68[22] = v69[22];
  v68[23] = v69[23];
  v68[24] = v69[24];
  v68[25] = v69[25];
  v68[26] = v69[26];
  v68[27] = v69[27];
  v68[28] = v69[28];
  return v74;
}

uint64_t sub_10002266C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v37;
  uint64_t (*v38)(unint64_t, uint64_t, uint64_t);
  unint64_t v39;

  v5 = type metadata accessor for ColorScheme(0);
  if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v7 = *(_QWORD *)(type metadata accessor for LayoutDirection(0) - 8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v8 = 8;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(type metadata accessor for WidgetRenderingMode(0) - 8);
  if (*(_QWORD *)(v9 + 64) <= 8uLL)
    v10 = 8;
  else
    v10 = *(_QWORD *)(v9 + 64);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = type metadata accessor for WidgetFamily(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int *)(v15 + 84);
  if (v16 <= 0x7FFFFFFF)
    v17 = 0x7FFFFFFF;
  else
    v17 = *(_DWORD *)(v15 + 84);
  if (v17 <= v13)
    v18 = v13;
  else
    v18 = v17;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(v19 - 8);
  if (*(_DWORD *)(v20 + 84) > v18)
    v18 = *(_DWORD *)(v20 + 84);
  if (!a2)
    return 0;
  v21 = v14;
  v22 = *(_DWORD *)(v7 + 80) & 0xF8 | 7;
  v23 = v6 + v22 + 1;
  v24 = v8 + 1;
  v25 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v26 = v10 + 1;
  v27 = *(_DWORD *)(v15 + 80) & 0xF8 | 7;
  v28 = *(unsigned __int8 *)(v20 + 80);
  v29 = *(_DWORD *)(v15 + 80) & 0xF8 | 7 | *(unsigned __int8 *)(v12 + 80) | v28;
  v30 = *(_QWORD *)(v12 + 64) + v27;
  v31 = *(_QWORD *)(v15 + 64) + 7;
  v32 = (((v31 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v28 + 8;
  if (v18 < a2)
  {
    if (((((((*(_QWORD *)(v20 + 64)
             + ((v32 + (v30 & ~v27)) & ~v28)
             + ((v26 + v29 + ((v24 + v25 + (v23 & ~v22)) & ~v25)) & ~v29)
             + 7) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 232) & 0xFFFFFFF8) != 0)
      v33 = 2;
    else
      v33 = a2 - v18 + 1;
    if (v33 >= 0x10000)
      v34 = 4;
    else
      v34 = 2;
    if (v33 < 0x100)
      v34 = 1;
    if (v33 >= 2)
      v35 = v34;
    else
      v35 = 0;
    __asm { BR              X27 }
  }
  v37 = (((((v23 + a1) & ~v22) + v24 + v25) & ~v25) + v26 + v29) & ~v29;
  if ((_DWORD)v13 == v18)
  {
    v38 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48);
    v16 = v13;
    v19 = v11;
    return v38(v37, v16, v19);
  }
  v37 = (v30 + v37) & ~v27;
  if (v17 != v18)
  {
    v37 = (v32 + v37) & ~v28;
    v38 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v20 + 48);
    v16 = *(unsigned int *)(v20 + 84);
    return v38(v37, v16, v19);
  }
  if (v16 >= 0x7FFFFFFF)
  {
    v38 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v15 + 48);
    v19 = v21;
    return v38(v37, v16, v19);
  }
  v39 = *(_QWORD *)((((v31 + v37) & 0xFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8);
  if (v39 >= 0xFFFFFFFF)
    LODWORD(v39) = -1;
  return (v39 + 1);
}

void sub_100022974(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;

  v7 = type metadata accessor for ColorScheme(0);
  v8 = 8;
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) <= 8uLL)
    v9 = 8;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v10 = *(_QWORD *)(type metadata accessor for LayoutDirection(0) - 8);
  if (*(_QWORD *)(v10 + 64) <= 8uLL)
    v11 = 8;
  else
    v11 = *(_QWORD *)(v10 + 64);
  v12 = *(_QWORD *)(type metadata accessor for WidgetRenderingMode(0) - 8);
  if (*(_QWORD *)(v12 + 64) > 8uLL)
    v8 = *(_QWORD *)(v12 + 64);
  v13 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v14 = *(_DWORD *)(v13 + 84);
  v15 = *(_QWORD *)(type metadata accessor for WidgetFamily(0) - 8);
  if (*(_DWORD *)(v15 + 84) <= 0x7FFFFFFFu)
    v16 = 0x7FFFFFFF;
  else
    v16 = *(_DWORD *)(v15 + 84);
  if (v16 <= v14)
    v17 = v14;
  else
    v17 = v16;
  v18 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v18 + 84) > v17)
    v17 = *(_DWORD *)(v18 + 84);
  v19 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  v20 = v9 + v19 + 1;
  v21 = *(_DWORD *)(v12 + 80) & 0xF8 | 7;
  v22 = *(_DWORD *)(v15 + 80) & 0xF8 | 7;
  v23 = *(unsigned __int8 *)(v18 + 80);
  v24 = v22 | *(unsigned __int8 *)(v13 + 80) | v23;
  v25 = ((((*(_QWORD *)(v18 + 64)
          + ((((((*(_QWORD *)(v15 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
            + v23
            + 8
            + ((*(_QWORD *)(v13 + 64) + v22) & ~v22)) & ~v23)
          + ((v8 + 1 + v24 + ((v11 + 1 + v21 + (v20 & ~v19)) & ~v21)) & ~v24)
          + 7) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 232;
  if (v17 >= a3)
  {
    v28 = 0;
    if (a2 <= v17)
      goto LABEL_30;
  }
  else
  {
    if (((((*(_DWORD *)(v18 + 64)
           + ((((((*(_DWORD *)(v15 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
             + (_DWORD)v23
             + 8
             + ((*(_DWORD *)(v13 + 64) + (_DWORD)v22) & ~(_DWORD)v22)) & ~(_DWORD)v23)
           + (((_DWORD)v8
             + 1
             + (_DWORD)v24
             + (((_DWORD)v11 + 1 + (_DWORD)v21 + (v20 & ~(*(_DWORD *)(v10 + 80) & 0xF8 | 7))) & ~(_DWORD)v21)) & ~(_DWORD)v24)
           + 7) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFF18)
      v26 = a3 - v17 + 1;
    else
      v26 = 2;
    if (v26 >= 0x10000)
      v27 = 4;
    else
      v27 = 2;
    if (v26 < 0x100)
      v27 = 1;
    if (v26 >= 2)
      v28 = v27;
    else
      v28 = 0;
    if (a2 <= v17)
LABEL_30:
      __asm { BR              X21 }
  }
  if ((_DWORD)v25)
  {
    v29 = ~v17 + a2;
    bzero(a1, v25);
    *a1 = v29;
  }
  __asm { BR              X10 }
}

void sub_100022BB8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x100022CA4);
}

void sub_100022BC0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x100022BC8);
  JUMPOUT(0x100022CA4);
}

void sub_100022C30()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x100022CA4);
}

void sub_100022C38()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x100022CA4);
}

void sub_100022C40(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_WORD *)(v6 + v8) = 0;
  if (v5)
  {
    if (v7 != v3)
    {
      if (v4 != v3)
        JUMPOUT(0x100022C4CLL);
      if (a3 < 0x7FFFFFFF)
        JUMPOUT(0x100022C80);
    }
    JUMPOUT(0x100022C60);
  }
  JUMPOUT(0x100022CA4);
}

uint64_t type metadata accessor for ContentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100012394(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContentView);
}

uint64_t sub_100022CD4(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1000448C0, 1);
}

uint64_t sub_100022D0C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000113F0(a1);
}

uint64_t sub_100022D30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v4 = type metadata accessor for WidgetFamily(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = 0;
  v19 = 0xE000000000000000;
  type metadata accessor for ModelEntry(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for WidgetFamily.systemSmall(_:), v4);
  v9 = sub_10002D590((unint64_t *)&qword_100055600, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v17, v4, v9);
  dispatch thunk of RawRepresentable.rawValue.getter(&v16, v4, v9);
  v11 = v16;
  v10 = v17;
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v13 = 1;
  if (v10 != v11)
    v13 = 2;
  v14 = a1 * v13;
  if ((unsigned __int128)(a1 * (__int128)v13) >> 64 == (a1 * v13) >> 63)
  {
    if (v14 >= 1)
    {
      do
      {
        v15._countAndFlagsBits = 32;
        v15._object = (void *)0xE100000000000000;
        String.append(_:)(v15);
        --v14;
      }
      while (v14);
    }
    return v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100022E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v5 = v4 + *(int *)(a1 + 44);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = v5 + *(int *)(type metadata accessor for ModelEntry(0, v6, v7, a4) + 36);
  type metadata accessor for ViewContext(0);
  LOBYTE(v5) = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v7 + 64))(v6, v7);
  return sub_10002ED24(v8, v5 & 1, v9 & 1);
}

double sub_100022F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_100055360 != -1)
    swift_once(&qword_100055360, sub_10003D89C);
  if (qword_100055358 != -1)
    swift_once(&qword_100055358, sub_1000350C8);
  type metadata accessor for ModelEntry(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  type metadata accessor for ViewContext(0);
  return 0.0;
}

uint64_t sub_100023024(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t (**v17)(_QWORD, _QWORD);
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  char v23;
  char v24;
  char v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  char *v30;
  char v31;
  void (*v32)(char *, uint64_t);
  void (*v33)(char *, uint64_t);
  char *v34;
  _QWORD v36[2];
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;

  v2 = v1;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = __chkstk_darwin(a1);
  v40 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v36 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)v36 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)v36 - v14;
  v16 = *(_QWORD *)(v13 + 16);
  v17 = *(uint64_t (***)(_QWORD, _QWORD))(v13 + 24);
  v19 = type metadata accessor for ModelEntry(0, v16, (uint64_t)v17, v18);
  v20 = v17[3](v16, v17);
  v21 = v2;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v22(v15, v21, a1);
  if ((v20 & 1) != 0)
  {
    v23 = 0;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v15, a1);
  }
  else
  {
    v24 = v17[4](v16, v17);
    v22(v12, (uint64_t)v15, a1);
    if ((v24 & 1) != 0)
    {
      v38 = v15;
      v25 = v17[5](v16, v17);
      v26 = v22;
      v27 = v16;
      v39 = v12;
      v28 = (void (*)(char *, char *, uint64_t))v26;
      v26(v9, (uint64_t)v12, a1);
      v29 = v40;
      v30 = v9;
      v36[1] = v19;
      v37 = v27;
      if ((v25 & 1) != 0)
        v31 = v17[6](v27, v17) ^ 1;
      else
        v31 = 0;
      v33 = *(void (**)(char *, uint64_t))(v4 + 8);
      v33(v30, a1);
      v28(v29, v39, a1);
      v34 = v38;
      if ((v31 & 1) != 0)
        v23 = v17[7](v37, v17) ^ 1;
      else
        v23 = 0;
      v33(v29, a1);
      v33(v39, a1);
      v33(v34, a1);
    }
    else
    {
      v32 = *(void (**)(char *, uint64_t))(v4 + 8);
      v32(v12, a1);
      v23 = 1;
      v32(v15, a1);
    }
  }
  return v23 & 1;
}

uint64_t sub_1000232A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter();
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v4 = sub_100003EA4(&qword_100056530);
  return sub_1000232FC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2 + *(int *)(v4 + 44));
}

uint64_t sub_1000232FC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = sub_100003EA4(&qword_100056538);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v16 - v11;
  *(_QWORD *)v12 = static VerticalAlignment.top.getter(v10);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v13 = sub_100003EA4(&qword_100056540);
  sub_100023420(a1, a2, (uint64_t)&v12[*(int *)(v13 + 44)]);
  sub_100012310((uint64_t)v12, (uint64_t)v9, &qword_100056538);
  sub_100012310((uint64_t)v9, a3, &qword_100056538);
  v14 = a3 + *(int *)(sub_100003EA4(&qword_100056548) + 48);
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  sub_10000EB5C((uint64_t)v12, &qword_100056538);
  return sub_10000EB5C((uint64_t)v9, &qword_100056538);
}

uint64_t sub_100023420@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v6 = sub_100003EA4(&qword_100056550);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100003EA4(&qword_100056558);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v29 - v13;
  type metadata accessor for ContentView(0, a1, a2, v15);
  type metadata accessor for ModelEntry(0, a1, a2, v16);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 192))(a1, a2);
  if (v19 == 1)
  {
    v20 = type metadata accessor for BatteryView(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v14, 1, 1, v20);
  }
  else
  {
    v21 = HIDWORD(v17);
    v22 = v18;
    v23 = v19;
    v24 = *(float *)&v17;
    *v8 = swift_getKeyPath(&unk_100043470);
    v25 = sub_100003EA4(&qword_1000557F8);
    swift_storeEnumTagMultiPayload(v8, v25, 0);
    sub_1000305B0((uint64_t)v8, v21 & 0x10101, v22, v23, (uint64_t)v14, v24);
    v26 = type metadata accessor for BatteryView(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v14, 0, 1, v26);
  }
  sub_100012310((uint64_t)v14, (uint64_t)v12, &qword_100056558);
  sub_100012310((uint64_t)v12, a3, &qword_100056558);
  v27 = a3 + *(int *)(sub_100003EA4(&qword_100056560) + 48);
  *(_QWORD *)v27 = 0;
  *(_BYTE *)(v27 + 8) = 1;
  sub_10000EB5C((uint64_t)v14, &qword_100056558);
  return sub_10000EB5C((uint64_t)v12, &qword_100056558);
}

uint64_t sub_100023648@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  id v22;
  id v23;
  id v24;
  void *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  long double v46;
  long double v47;
  long double v48;
  CGFloat v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[23];
  __int128 v83;
  _BYTE v84[184];
  _OWORD v85[12];
  __int128 v86;
  uint64_t v87;
  char v88;

  v3 = v2;
  v67 = a1;
  v69 = a2;
  v4 = type metadata accessor for WidgetRenderingMode(0);
  v70 = *(_QWORD **)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v66 - v8;
  v10 = type metadata accessor for ColorScheme(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v66 - v15;
  sub_100011188((uint64_t)&v66 - v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for ColorScheme.dark(_:), v10);
  LODWORD(v68) = static ColorScheme.== infix(_:_:)(v16, v14);
  v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v14, v10);
  v18 = v16;
  v19 = v67;
  v17(v18, v10);
  v71 = v3;
  v20 = sub_10001115C((uint64_t)v9);
  static WidgetRenderingMode.accented.getter(v20);
  LOBYTE(v17) = static WidgetRenderingMode.== infix(_:_:)(v9, v7);
  v21 = (void (*)(char *, uint64_t))v70[1];
  v21(v7, v4);
  v21(v9, v4);
  v22 = objc_allocWithZone((Class)UIColor);
  if ((v17 & 1) != 0)
  {
    v23 = objc_msgSend(v22, "initWithRed:green:blue:alpha:", 0.254901961, 0.254901961, 0.254901961, 0.0);
    v24 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.254901961, 0.254901961, 0.254901961, 0.93);
  }
  else if ((v68 & 1) != 0)
  {
    v23 = objc_msgSend(v22, "initWithRed:green:blue:alpha:", 0.180392157, 0.243137255, 0.325490196, 0.0);
    v24 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.180392157, 0.243137255, 0.325490196, 0.93);
  }
  else
  {
    v23 = objc_msgSend(v22, "initWithRed:green:blue:alpha:", 0.97254902, 0.97254902, 0.960784314, 0.0);
    v24 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.97254902, 0.97254902, 0.960784314, 0.93);
  }
  v25 = v24;
  v26 = v69;
  v27 = sub_100003EA4(&qword_100056158);
  v28 = swift_allocObject(v27, 56, 7);
  *(_OWORD *)(v28 + 16) = xmmword_1000427E0;
  v70 = v23;
  *(_QWORD *)(v28 + 32) = Color.init(_:)(v70);
  v29 = v25;
  *(_QWORD *)(v28 + 40) = Color.init(_:)(v29);
  v69 = v29;
  v30 = Color.init(_:)(v69);
  *(_QWORD *)(v28 + 48) = v30;
  *(_QWORD *)&v85[0] = v28;
  specialized Array._endMutation()(v30);
  v68 = *(_QWORD *)&v85[0];
  v31 = v71 + *(int *)(v19 + 44);
  v33 = *(_QWORD *)(v19 + 16);
  v32 = *(_QWORD *)(v19 + 24);
  v35 = type metadata accessor for ModelEntry(0, v33, v32, v34);
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 72))(v33, v32);
  if (!v37)
  {
    v41 = *(int *)(v35 + 36);
    v42 = *(double *)(v31 + *(int *)(type metadata accessor for ViewContext(0) + 20) + v41 + 8);
    v43 = v42 * 0.54;
LABEL_13:
    v44 = 0.3;
    goto LABEL_14;
  }
  v38 = v36;
  v39 = v37;
  swift_bridgeObjectRelease(v37);
  if ((v39 & 0x2000000000000000) != 0)
    v40 = HIBYTE(v39) & 0xF;
  else
    v40 = v38 & 0xFFFFFFFFFFFFLL;
  v41 = *(int *)(v35 + 36);
  v42 = *(double *)(v31 + *(int *)(type metadata accessor for ViewContext(0) + 20) + v41 + 8);
  v43 = v42 * 0.54;
  if (!v40)
    goto LABEL_13;
  v44 = 0.38;
LABEL_14:
  v45 = v44 * v42;
  v46 = v43 - v44 * v42;
  v47 = *(double *)(v31 + v41 + *(int *)(type metadata accessor for ViewContext(0) + 20));
  v48 = atan2(v46, v47);
  v49 = (v45 * (v46 / v47) + v45 * (v46 / v47)) / cos(v48);
  v67 = static Alignment.center.getter(v50);
  v52 = v51;
  v53 = static HorizontalAlignment.center.getter(v67);
  v54 = v68;
  sub_10002423C(v68, v71, v33, v32, (uint64_t)&v83, v49, v43, v48);
  v88 = 0;
  *(_OWORD *)((char *)&v85[4] + 7) = *(_OWORD *)&v84[48];
  *(_OWORD *)((char *)&v85[3] + 7) = *(_OWORD *)&v84[32];
  *(_OWORD *)((char *)&v85[7] + 7) = *(_OWORD *)&v84[96];
  *(_OWORD *)((char *)&v85[8] + 7) = *(_OWORD *)&v84[112];
  *(_OWORD *)((char *)&v85[9] + 7) = *(_OWORD *)&v84[128];
  *(_OWORD *)((char *)&v85[10] + 7) = *(_OWORD *)&v84[144];
  *(_OWORD *)((char *)&v85[5] + 7) = *(_OWORD *)&v84[64];
  *(_OWORD *)((char *)&v85[6] + 7) = *(_OWORD *)&v84[80];
  *(_OWORD *)((char *)v85 + 7) = v83;
  *(_OWORD *)((char *)&v85[1] + 7) = *(_OWORD *)v84;
  *(_OWORD *)((char *)&v85[2] + 7) = *(_OWORD *)&v84[16];
  v80 = v85[8];
  v81 = v85[9];
  *(_OWORD *)v82 = v85[10];
  *(_QWORD *)&v82[15] = *(_QWORD *)&v84[152];
  v76 = v85[4];
  v77 = v85[5];
  v78 = v85[6];
  v79 = v85[7];
  v72 = v85[0];
  v73 = v85[1];
  v74 = v85[2];
  v75 = v85[3];
  swift_bridgeObjectRelease(v54);
  v83 = (unint64_t)v53;
  v84[0] = 0;
  *(_OWORD *)&v84[129] = v80;
  *(_OWORD *)&v84[145] = v81;
  *(_OWORD *)&v84[161] = *(_OWORD *)v82;
  *(_QWORD *)&v84[176] = *(_QWORD *)&v82[15];
  *(_OWORD *)&v84[65] = v76;
  *(_OWORD *)&v84[81] = v77;
  *(_OWORD *)&v84[97] = v78;
  *(_OWORD *)&v84[113] = v79;
  *(_OWORD *)&v84[1] = v72;
  *(_OWORD *)&v84[17] = v73;
  *(_OWORD *)&v84[33] = v74;
  *(_OWORD *)&v84[49] = v75;
  v85[11] = *(_OWORD *)&v84[144];
  v86 = *(_OWORD *)&v84[160];
  v87 = *(_QWORD *)&v82[15];
  v85[7] = *(_OWORD *)&v84[80];
  v85[8] = *(_OWORD *)&v84[96];
  v85[9] = *(_OWORD *)&v84[112];
  v85[10] = *(_OWORD *)&v84[128];
  v85[3] = *(_OWORD *)&v84[16];
  v85[4] = *(_OWORD *)&v84[32];
  v85[5] = *(_OWORD *)&v84[48];
  v85[6] = *(_OWORD *)&v84[64];
  v85[1] = (unint64_t)v53;
  v85[2] = *(_OWORD *)v84;
  *(_QWORD *)&v85[0] = v67;
  *((_QWORD *)&v85[0] + 1) = v52;
  v56 = static Alignment.center.getter(v55);
  _FrameLayout.init(width:height:alignment:)(&v72, *(_QWORD *)&v47, 0, *(_QWORD *)&v42, 0, v56, v57);
  v58 = v85[11];
  v26[10] = v85[10];
  v26[11] = v58;
  v26[12] = v86;
  v59 = v85[7];
  v26[6] = v85[6];
  v26[7] = v59;
  v60 = v85[9];
  v26[8] = v85[8];
  v26[9] = v60;
  v61 = v85[3];
  v26[2] = v85[2];
  v26[3] = v61;
  v62 = v85[5];
  v26[4] = v85[4];
  v26[5] = v62;
  v63 = v85[1];
  *v26 = v85[0];
  v26[1] = v63;
  v64 = v73;
  *(_OWORD *)((char *)v26 + 216) = v72;
  *((_QWORD *)v26 + 26) = v87;
  *(_OWORD *)((char *)v26 + 232) = v64;
  *(_OWORD *)((char *)v26 + 248) = v74;
  sub_10002D654((uint64_t)v85);

  return sub_10002D67C((uint64_t)&v83);
}

uint64_t sub_100023C98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  void (*v17)(_BYTE *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  id v20;
  void (*v21)(_BYTE *, id);
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  double v38;
  double v39;
  long double v40;
  CGFloat v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v59[12];
  int v60;
  _QWORD *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[23];
  __int128 v76;
  _BYTE v77[184];
  _OWORD v78[12];
  __int128 v79;
  uint64_t v80;
  char v81;

  v3 = v2;
  v63 = a2;
  v64 = a1;
  v4 = (_QWORD *)type metadata accessor for WidgetRenderingMode(0);
  v61 = (_QWORD *)*(v4 - 1);
  v62 = v4;
  v5 = __chkstk_darwin(v4);
  v7 = &v59[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v59[-v8];
  v10 = type metadata accessor for ColorScheme(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = &v59[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v16 = &v59[-v15];
  sub_100011188((uint64_t)&v59[-v15]);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for ColorScheme.dark(_:), v10);
  v60 = static ColorScheme.== infix(_:_:)(v16, v14);
  v17 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
  v17(v14, v10);
  v17(v16, v10);
  v18 = v3;
  v19 = sub_10001115C((uint64_t)v9);
  static WidgetRenderingMode.accented.getter(v19);
  LOBYTE(v17) = static WidgetRenderingMode.== infix(_:_:)(v9, v7);
  v20 = v62;
  v21 = (void (*)(_BYTE *, id))v61[1];
  v21(v7, v62);
  v21(v9, v20);
  v22 = objc_allocWithZone((Class)UIColor);
  if ((v17 & 1) != 0)
  {
    v23 = objc_msgSend(v22, "initWithRed:green:blue:alpha:", 0.254901961, 0.254901961, 0.254901961, 0.0);
    v24 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.254901961, 0.254901961, 0.254901961, 0.93);
  }
  else if ((v60 & 1) != 0)
  {
    v23 = objc_msgSend(v22, "initWithRed:green:blue:alpha:", 0.180392157, 0.243137255, 0.325490196, 0.0);
    v24 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.180392157, 0.243137255, 0.325490196, 0.93);
  }
  else
  {
    v23 = objc_msgSend(v22, "initWithRed:green:blue:alpha:", 0.97254902, 0.97254902, 0.960784314, 0.0);
    v24 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.97254902, 0.97254902, 0.960784314, 0.93);
  }
  v25 = v24;
  v26 = sub_100003EA4(&qword_100056158);
  v27 = swift_allocObject(v26, 56, 7);
  *(_OWORD *)(v27 + 16) = xmmword_1000427E0;
  v62 = v23;
  *(_QWORD *)(v27 + 32) = Color.init(_:)(v62);
  v28 = v25;
  *(_QWORD *)(v27 + 40) = Color.init(_:)(v28);
  v61 = v28;
  v29 = Color.init(_:)(v61);
  *(_QWORD *)(v27 + 48) = v29;
  *(_QWORD *)&v78[0] = v27;
  specialized Array._endMutation()(v29);
  v30 = *(_QWORD *)&v78[0];
  v31 = v18;
  v32 = v18 + *(int *)(v64 + 44);
  v34 = *(_QWORD *)(v64 + 16);
  v33 = *(_QWORD *)(v64 + 24);
  v36 = *(int *)(type metadata accessor for ModelEntry(0, v34, v33, v35) + 36);
  v37 = (double *)(v32 + *(int *)(type metadata accessor for ViewContext(0) + 20) + v36);
  v38 = *v37;
  v39 = v37[1];
  v40 = atan2(v39 * 0.51, *v37);
  v41 = (v39 * 0.51 / v38 * 0.0 + v39 * 0.51 / v38 * 0.0) / cos(v40);
  v43 = static Alignment.center.getter(v42);
  v45 = v44;
  v46 = static HorizontalAlignment.center.getter(v43);
  sub_10002423C(v30, v31, v34, v33, (uint64_t)&v76, v41, v39 * 0.51, v40);
  v81 = 0;
  *(_OWORD *)((char *)&v78[4] + 7) = *(_OWORD *)&v77[48];
  *(_OWORD *)((char *)&v78[3] + 7) = *(_OWORD *)&v77[32];
  *(_OWORD *)((char *)&v78[7] + 7) = *(_OWORD *)&v77[96];
  *(_OWORD *)((char *)&v78[8] + 7) = *(_OWORD *)&v77[112];
  *(_OWORD *)((char *)&v78[9] + 7) = *(_OWORD *)&v77[128];
  *(_OWORD *)((char *)&v78[10] + 7) = *(_OWORD *)&v77[144];
  *(_OWORD *)((char *)&v78[5] + 7) = *(_OWORD *)&v77[64];
  *(_OWORD *)((char *)&v78[6] + 7) = *(_OWORD *)&v77[80];
  *(_OWORD *)((char *)v78 + 7) = v76;
  *(_OWORD *)((char *)&v78[1] + 7) = *(_OWORD *)v77;
  *(_OWORD *)((char *)&v78[2] + 7) = *(_OWORD *)&v77[16];
  v73 = v78[8];
  v74 = v78[9];
  *(_OWORD *)v75 = v78[10];
  *(_QWORD *)&v75[15] = *(_QWORD *)&v77[152];
  v69 = v78[4];
  v70 = v78[5];
  v71 = v78[6];
  v72 = v78[7];
  v65 = v78[0];
  v66 = v78[1];
  v67 = v78[2];
  v68 = v78[3];
  swift_bridgeObjectRelease(v30);
  v76 = (unint64_t)v46;
  v77[0] = 0;
  *(_OWORD *)&v77[129] = v73;
  *(_OWORD *)&v77[145] = v74;
  *(_OWORD *)&v77[161] = *(_OWORD *)v75;
  *(_QWORD *)&v77[176] = *(_QWORD *)&v75[15];
  *(_OWORD *)&v77[65] = v69;
  *(_OWORD *)&v77[81] = v70;
  *(_OWORD *)&v77[97] = v71;
  *(_OWORD *)&v77[113] = v72;
  *(_OWORD *)&v77[1] = v65;
  *(_OWORD *)&v77[17] = v66;
  *(_OWORD *)&v77[33] = v67;
  *(_OWORD *)&v77[49] = v68;
  v78[11] = *(_OWORD *)&v77[144];
  v79 = *(_OWORD *)&v77[160];
  v80 = *(_QWORD *)&v75[15];
  v78[7] = *(_OWORD *)&v77[80];
  v78[8] = *(_OWORD *)&v77[96];
  v78[9] = *(_OWORD *)&v77[112];
  v78[10] = *(_OWORD *)&v77[128];
  v78[3] = *(_OWORD *)&v77[16];
  v78[4] = *(_OWORD *)&v77[32];
  v78[5] = *(_OWORD *)&v77[48];
  v78[6] = *(_OWORD *)&v77[64];
  v78[1] = (unint64_t)v46;
  v78[2] = *(_OWORD *)v77;
  *(_QWORD *)&v78[0] = v43;
  *((_QWORD *)&v78[0] + 1) = v45;
  v48 = static Alignment.center.getter(v47);
  _FrameLayout.init(width:height:alignment:)(&v65, *(_QWORD *)&v38, 0, *(_QWORD *)&v39, 0, v48, v49);
  v50 = v78[11];
  v51 = v63;
  *(_OWORD *)(v63 + 160) = v78[10];
  *(_OWORD *)(v51 + 176) = v50;
  *(_OWORD *)(v51 + 192) = v79;
  v52 = v78[7];
  *(_OWORD *)(v51 + 96) = v78[6];
  *(_OWORD *)(v51 + 112) = v52;
  v53 = v78[9];
  *(_OWORD *)(v51 + 128) = v78[8];
  *(_OWORD *)(v51 + 144) = v53;
  v54 = v78[3];
  *(_OWORD *)(v51 + 32) = v78[2];
  *(_OWORD *)(v51 + 48) = v54;
  v55 = v78[5];
  *(_OWORD *)(v51 + 64) = v78[4];
  *(_OWORD *)(v51 + 80) = v55;
  v56 = v78[1];
  *(_OWORD *)v51 = v78[0];
  *(_OWORD *)(v51 + 16) = v56;
  v57 = v66;
  *(_OWORD *)(v51 + 216) = v65;
  *(_QWORD *)(v51 + 208) = v80;
  *(_OWORD *)(v51 + 232) = v57;
  *(_OWORD *)(v51 + 248) = v67;
  sub_10002D654((uint64_t)v78);

  return sub_10002D67C((uint64_t)&v76);
}

_QWORD *sub_10002423C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, CGFloat a6@<D0>, double a7@<D1>, double a8@<D2>)
{
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CGFloat v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  CGAffineTransform *Translation;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  char v46;
  char v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v55;
  uint64_t v56;
  _QWORD v58[5];
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[167];
  char v78;
  _QWORD v79[6];
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  double v92;
  uint64_t v93;

  v14 = swift_bridgeObjectRetain(a1);
  v15 = Gradient.init(colors:)(v14);
  v16 = static UnitPoint.top.getter();
  v18 = v17;
  v19 = static UnitPoint.bottom.getter();
  LinearGradient.init(gradient:startPoint:endPoint:)(v58, v15, v16, v18, v19, v20);
  v21 = v58[0];
  v22 = v58[1];
  v23 = v58[2];
  v55 = v58[4];
  v56 = v58[3];
  v25 = a2 + *(int *)(type metadata accessor for ContentView(0, a3, a4, v24) + 44);
  v27 = v25 + *(int *)(type metadata accessor for ModelEntry(0, a3, a4, v26) + 36);
  v28 = type metadata accessor for ViewContext(0);
  v29 = a6 + a6 + *(double *)(v27 + *(int *)(v28 + 20));
  v30 = static Alignment.center.getter(v28);
  _FrameLayout.init(width:height:alignment:)(&v59, *(_QWORD *)&v29, 0, *(_QWORD *)&a7, 0, v30, v31);
  v32 = v59;
  v33 = v60;
  v34 = v61;
  v35 = v62;
  v36 = v63;
  v37 = v64;
  Translation = CGAffineTransformMakeTranslation((CGAffineTransform *)v77, a6, 0.0);
  v39 = *(_QWORD *)v77;
  v40 = *(_QWORD *)&v77[8];
  v42 = *(_QWORD *)&v77[16];
  v41 = *(_QWORD *)&v77[24];
  v43 = *(_QWORD *)&v77[32];
  v44 = *(_QWORD *)&v77[40];
  v66 = v33;
  v65 = v35;
  v45 = static UnitPoint.topLeading.getter(Translation);
  v46 = v66;
  v47 = v65;
  *(_QWORD *)&v67 = v21;
  *((_QWORD *)&v67 + 1) = v22;
  *(_QWORD *)&v68 = v23;
  *((_QWORD *)&v68 + 1) = v56;
  *(_QWORD *)&v69 = v55;
  *((_QWORD *)&v69 + 1) = v32;
  LOBYTE(v70) = v66;
  *((_QWORD *)&v70 + 1) = v34;
  LOBYTE(v71) = v65;
  *((_QWORD *)&v71 + 1) = v36;
  *(_QWORD *)&v72 = v37;
  *((_QWORD *)&v72 + 1) = v39;
  *(_QWORD *)&v73 = v40;
  *((_QWORD *)&v73 + 1) = v42;
  *(_QWORD *)&v74 = v41;
  *((_QWORD *)&v74 + 1) = v43;
  *(_QWORD *)&v75 = v44;
  *((double *)&v75 + 1) = a8;
  *(double *)&v76 = v45;
  *((_QWORD *)&v76 + 1) = v48;
  v78 = 1;
  *(_OWORD *)&v77[87] = v72;
  *(_OWORD *)&v77[71] = v71;
  *(_OWORD *)&v77[55] = v70;
  *(_OWORD *)&v77[39] = v69;
  *(_OWORD *)&v77[151] = v76;
  *(_OWORD *)&v77[135] = v75;
  *(_OWORD *)&v77[119] = v74;
  *(_OWORD *)&v77[103] = v73;
  *(_OWORD *)&v77[23] = v68;
  *(_OWORD *)&v77[7] = v67;
  *(_QWORD *)a5 = 0;
  *(_BYTE *)(a5 + 8) = 1;
  v49 = *(_OWORD *)&v77[96];
  *(_OWORD *)(a5 + 121) = *(_OWORD *)&v77[112];
  v50 = *(_OWORD *)&v77[144];
  *(_OWORD *)(a5 + 137) = *(_OWORD *)&v77[128];
  *(_OWORD *)(a5 + 153) = v50;
  *(_QWORD *)(a5 + 168) = *(_QWORD *)&v77[159];
  v51 = *(_OWORD *)&v77[32];
  *(_OWORD *)(a5 + 57) = *(_OWORD *)&v77[48];
  v52 = *(_OWORD *)&v77[80];
  *(_OWORD *)(a5 + 73) = *(_OWORD *)&v77[64];
  *(_OWORD *)(a5 + 89) = v52;
  *(_OWORD *)(a5 + 105) = v49;
  v53 = *(_OWORD *)&v77[16];
  *(_OWORD *)(a5 + 9) = *(_OWORD *)v77;
  *(_OWORD *)(a5 + 25) = v53;
  *(_OWORD *)(a5 + 41) = v51;
  v79[0] = v21;
  v79[1] = v22;
  v79[2] = v23;
  v79[3] = v56;
  v79[4] = v55;
  v79[5] = v32;
  v80 = v46;
  v81 = v34;
  v82 = v47;
  v83 = v36;
  v84 = v37;
  v85 = v39;
  v86 = v40;
  v87 = v42;
  v88 = v41;
  v89 = v43;
  v90 = v44;
  v91 = a8;
  v92 = v45;
  v93 = v48;
  sub_10002D6A4(&v67);
  return sub_10002D6CC(v79);
}

void sub_1000244F0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  void *v16;
  unsigned __int8 v17;
  void *v18;
  void *v19;
  unsigned __int8 v20;
  char v21;
  char *v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;

  v33 = a2;
  v4 = type metadata accessor for ColorScheme(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v31 - v9;
  v34 = v2;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  type metadata accessor for ModelEntry(0, v11, v12, v13);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 136);
  v32 = v11;
  v15 = v14(v11, v12);
  if (v17 == 0xFF)
  {
    v22 = 0;
  }
  else
  {
    v18 = (void *)v15;
    v19 = v16;
    v20 = v17;
    v21 = v17 & 1;
    sub_100011188((uint64_t)v10);
    v22 = (char *)sub_100015430((uint64_t)v10, v18, v19, v21);
    sub_10000E03C(v18, v19, v20);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  v23 = v34;
  sub_100011188((uint64_t)v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for ColorScheme.dark(_:), v4);
  v24 = static ColorScheme.== infix(_:_:)(v10, v8);
  v25 = *(void (**)(char *, uint64_t))(v5 + 8);
  v25(v8, v4);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v10, v4);
  v27 = static Alignment.center.getter(v26);
  v28 = v33;
  *v33 = v27;
  v28[1] = v29;
  v30 = sub_100003EA4(&qword_100056078);
  sub_1000246C4(v22, v23, v24 & 1, v32, v12, (uint64_t)v28 + *(int *)(v30 + 44));

}

uint64_t sub_1000246C4@<X0>(char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  void *v82;
  _BYTE *v83;
  _BYTE *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  void *v108;
  _BYTE *v109;
  _BYTE *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v130;
  char v131;
  uint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  char v135;
  void (*v136)(_BYTE *, _BYTE *);
  char v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE *v144;
  uint64_t v145;
  double v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE *v151;
  _BYTE *v152;
  uint64_t v153;
  _BYTE *v154;
  void (*v155)(_BYTE *, uint64_t);
  uint64_t v156;
  double v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  _BYTE *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _BYTE *v170;
  _OWORD *v171;
  __int128 v172;
  _BYTE *v173;
  uint64_t v174;
  _BYTE *v175;
  uint64_t *v176;
  _BYTE *v177;
  _BYTE *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _BYTE *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _BYTE *v196;
  uint64_t v197;
  _BYTE *v198;
  void (*v199)(_BYTE *, uint64_t);
  _BYTE *v200;
  uint64_t v201;
  unsigned int *v202;
  uint64_t v203;
  _BYTE *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  _BYTE *v210;
  _BYTE *v211;
  unint64_t v212;
  uint64_t v213;
  _BYTE v214[4];
  int v215;
  _BYTE *v216;
  _BYTE *v217;
  uint64_t v218;
  uint64_t v219;
  _BYTE *v220;
  _BYTE *v221;
  uint64_t v222;
  _BYTE *v223;
  uint64_t v224;
  _BYTE *v225;
  uint64_t v226;
  _BYTE *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _BYTE *v231;
  uint64_t v232;
  _BYTE *v233;
  _BYTE *v234;
  _BYTE *v235;
  uint64_t v236;
  _BYTE *v237;
  _BYTE *v238;
  uint64_t v239;
  _BYTE *v240;
  _BYTE *v241;
  _BYTE *v242;
  uint64_t v243;
  uint64_t v244;
  _BYTE *v245;
  _BYTE *v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  uint64_t (*v250)(uint64_t, uint64_t);
  _BYTE *v251;
  _BYTE *v252;
  uint64_t v253;
  uint64_t v254;
  _BYTE *v255;
  uint64_t v256;
  _BYTE *v257;
  _BYTE *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  _BYTE v268[264];
  _OWORD v269[17];

  v215 = a3;
  v266 = a2;
  v267 = a1;
  v263 = a6;
  v8 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v8);
  v220 = &v214[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for BlendMode(0);
  v218 = *(_QWORD *)(v10 - 8);
  v219 = v10;
  __chkstk_darwin(v10);
  v217 = &v214[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v262 = sub_100003EA4(&qword_100056080);
  v12 = __chkstk_darwin(v262);
  v216 = &v214[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v221 = &v214[-v14];
  v239 = type metadata accessor for WidgetRenderingMode(0);
  v236 = *(_QWORD *)(v239 - 8);
  v15 = __chkstk_darwin(v239);
  v237 = &v214[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  v238 = &v214[-v17];
  v18 = sub_100003EA4(&qword_100055EC0);
  __chkstk_darwin(v18);
  v225 = &v214[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v224 = type metadata accessor for Image.ResizingMode(0);
  v222 = *(_QWORD *)(v224 - 8);
  __chkstk_darwin(v224);
  v223 = &v214[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = sub_100003EA4(&qword_100055EC8);
  v228 = *(_QWORD *)(v21 - 8);
  v229 = v21;
  __chkstk_darwin(v21);
  v227 = &v214[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v226 = sub_100003EA4(&qword_100055F68);
  __chkstk_darwin(v226);
  v231 = &v214[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v230 = sub_100003EA4(&qword_100056088);
  __chkstk_darwin(v230);
  v235 = &v214[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v232 = sub_100003EA4(&qword_100056090);
  __chkstk_darwin(v232);
  v234 = &v214[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v256 = sub_100003EA4(&qword_100056098);
  v26 = __chkstk_darwin(v256);
  v233 = &v214[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v26);
  v29 = &v214[-v28];
  v260 = sub_100003EA4(&qword_1000560A0);
  __chkstk_darwin(v260);
  v258 = &v214[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v253 = sub_100003EA4(&qword_1000560A8);
  __chkstk_darwin(v253);
  v255 = &v214[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v254 = sub_100003EA4(&qword_1000560B0);
  __chkstk_darwin(v254);
  v252 = &v214[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v261 = sub_100003EA4(&qword_1000560B8);
  __chkstk_darwin(v261);
  v257 = &v214[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v248 = sub_100003EA4(&qword_1000560C0);
  __chkstk_darwin(v248);
  v249 = &v214[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v35 = type metadata accessor for _ForegroundLayerLevel(0);
  __chkstk_darwin(v35);
  v240 = &v214[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v37 = type metadata accessor for _ForegroundLayerLevelViewModifier(0);
  v243 = *(_QWORD *)(v37 - 8);
  v244 = v37;
  __chkstk_darwin(v37);
  v242 = &v214[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v247 = sub_100003EA4(&qword_1000560C8);
  v39 = __chkstk_darwin(v247);
  v241 = &v214[-((v40 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v39);
  v245 = &v214[-v41];
  v42 = (_BYTE *)type metadata accessor for WidgetFamily(0);
  v259 = *((_QWORD *)v42 - 1);
  v43 = __chkstk_darwin(v42);
  v45 = &v214[-((v44 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v43);
  v47 = &v214[-v46];
  v48 = sub_100003EA4(&qword_1000560D0);
  v49 = __chkstk_darwin(v48);
  v246 = &v214[-((v50 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v49);
  v250 = &v214[-v51];
  v52 = (int *)type metadata accessor for MapView(0);
  v53 = __chkstk_darwin(v52);
  v55 = &v214[-((v54 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v53);
  v251 = &v214[-v56];
  v265 = a4;
  v57 = a5;
  v59 = type metadata accessor for ContentView(0, a4, a5, v58);
  v60 = *(_QWORD *)(v59 - 8);
  v61 = __chkstk_darwin(v59);
  v64 = &v214[-v63];
  v264 = v61;
  if (!v267)
  {
    v251 = v42;
    v252 = v29;
    v248 = (uint64_t)v47;
    v96 = v265;
    v95 = v266;
    v97 = (char *)(v266 + *(int *)(v61 + 44));
    v98 = v61;
    v99 = type metadata accessor for ModelEntry(0, v265, v57, v62);
    v100 = *(int *)(v99 + 40);
    v267 = v97;
    v101 = &v97[v100];
    v102 = *(_BYTE **)(v57 + 144);
    v249 = v101;
    v250 = v102;
    LOBYTE(v101) = ((uint64_t (*)(uint64_t, uint64_t))v102)(v96, v57);
    v103 = v95;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v60 + 16))(v64, v95, v98);
    if ((v101 & 1) != 0)
    {
      (*(void (**)(_BYTE *, uint64_t))(v60 + 8))(v64, v264);
      v104 = v57;
      v105 = v259;
      v106 = v267;
      v107 = v99;
    }
    else
    {
      v130 = v264;
      v131 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 152))(v265, v57);
      (*(void (**)(_BYTE *, uint64_t))(v60 + 8))(v64, v130);
      v104 = v57;
      v105 = v259;
      v106 = v267;
      v107 = v99;
      if ((v131 & 1) == 0)
      {
        v186 = (_QWORD *)(v103 + *(int *)(v264 + 52));
        if ((v215 & 1) != 0)
          ++v186;
        v187 = *v186;
        swift_retain(*v186);
        v188 = *(int *)(v107 + 36);
        v189 = type metadata accessor for ViewContext(0);
        v190 = &v106[v188 + *(int *)(v189 + 20)];
        v191 = *(_QWORD *)v190;
        v192 = *((_QWORD *)v190 + 1);
        v193 = static Alignment.center.getter(v189);
        _FrameLayout.init(width:height:alignment:)(v269, v191, 0, v192, 0, v193, v194);
        v267 = *(char **)&v269[0];
        LODWORD(v265) = BYTE8(v269[0]);
        v259 = *(_QWORD *)&v269[1];
        LODWORD(v257) = BYTE8(v269[1]);
        v195 = *((_QWORD *)&v269[2] + 1);
        v256 = *(_QWORD *)&v269[2];
        swift_retain(v187);
        v196 = v238;
        v197 = sub_10001115C((uint64_t)v238);
        v198 = v237;
        static WidgetRenderingMode.accented.getter(v197);
        LOBYTE(v191) = static WidgetRenderingMode.== infix(_:_:)(v196, v198);
        v199 = *(void (**)(_QWORD, _QWORD))(v236 + 8);
        v200 = v198;
        v201 = v239;
        v199(v200, v239);
        v199(v196, v201);
        v202 = (unsigned int *)&enum case for BlendMode.destinationOut(_:);
        if ((v191 & 1) == 0)
          v202 = (unsigned int *)&enum case for BlendMode.normal(_:);
        v204 = v217;
        v203 = v218;
        v205 = v219;
        (*(void (**)(_BYTE *, _QWORD, uint64_t))(v218 + 104))(v217, *v202, v219);
        v206 = (uint64_t)v220;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v203 + 16))(v220, v204, v205);
        v207 = v262;
        v208 = (uint64_t)v216;
        sub_100015134(v206, (uint64_t)&v216[*(int *)(v262 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
        v209 = v267;
        *(_QWORD *)v208 = v187;
        *(_QWORD *)(v208 + 8) = v209;
        *(_BYTE *)(v208 + 16) = v265;
        *(_QWORD *)(v208 + 24) = v259;
        *(_BYTE *)(v208 + 32) = (_BYTE)v257;
        *(_QWORD *)(v208 + 40) = v256;
        *(_QWORD *)(v208 + 48) = v195;
        swift_retain(v187);
        sub_100015178(v206, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
        (*(void (**)(_BYTE *, uint64_t))(v203 + 8))(v204, v205);
        swift_release(v187);
        v176 = &qword_100056080;
        v210 = v221;
        sub_10001C888(v208, (uint64_t)v221, &qword_100056080);
        v211 = v258;
        sub_100012310((uint64_t)v210, (uint64_t)v258, &qword_100056080);
        swift_storeEnumTagMultiPayload(v211, v260, 1);
        v212 = sub_10002D374();
        v213 = sub_10002001C(&qword_100056108, &qword_100056080, (void (*)(void))sub_10002D4D8);
        _ConditionalContent<>.init(storage:)(v211, v261, v207, v212, v213);
        swift_release(v187);
        v185 = (uint64_t)v210;
        return sub_10000EB5C(v185, v176);
      }
    }
    v267 = &v106[*(int *)(v107 + 36)];
    v132 = v248;
    v133 = v251;
    (*(void (**)(uint64_t))(v105 + 16))(v248);
    (*(void (**)(_BYTE *, _QWORD, _BYTE *))(v105 + 104))(v45, enum case for WidgetFamily.systemMedium(_:), v133);
    v134 = sub_10002D590(&qword_100056120, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v135 = dispatch thunk of static Equatable.== infix(_:_:)(v132, v45, v133, v134);
    v136 = *(void (**)(_QWORD, _QWORD))(v105 + 8);
    v136(v45, v133);
    v136(v132, v133);
    v137 = ((uint64_t (*)(uint64_t, uint64_t))v250)(v265, v104);
    v138 = 0xEC00000032657261;
    if ((v137 & 1) != 0)
      v138 = 0xEC00000031657261;
    v139 = 0x8000000100041CD0;
    if ((v137 & 1) == 0)
      v139 = 0x8000000100041CB0;
    if ((v135 & 1) != 0)
      v140 = 0xD000000000000011;
    else
      v140 = 0x75715370614D6F4ELL;
    if ((v135 & 1) != 0)
      v141 = v139;
    else
      v141 = v138;
    v142 = Image.init(_:bundle:)(v140, v141, 0);
    v143 = v222;
    v144 = v223;
    v145 = v224;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v222 + 104))(v223, enum case for Image.ResizingMode.stretch(_:), v224);
    v146 = 0.0;
    v147 = Image.resizable(capInsets:resizingMode:)(v144, v142, 0.0, 0.0, 0.0, 0.0);
    swift_release(v142);
    v148 = (*(uint64_t (**)(_BYTE *, uint64_t))(v143 + 8))(v144, v145);
    v149 = (uint64_t)v225;
    static WidgetAccentedRenderingMode.fullColor.getter(v148);
    v150 = type metadata accessor for WidgetAccentedRenderingMode(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 56))(v149, 0, 1, v150);
    v151 = v227;
    Image.widgetAccentedRenderingMode(_:)(v149, v147);
    swift_release(v147);
    sub_10000EB5C(v149, &qword_100055EC0);
    v152 = v238;
    v153 = sub_10001115C((uint64_t)v238);
    v154 = v237;
    static WidgetRenderingMode.accented.getter(v153);
    LOBYTE(v147) = static WidgetRenderingMode.== infix(_:_:)(v152, v154);
    v155 = *(void (**)(_QWORD, _QWORD))(v236 + 8);
    v156 = v239;
    v155(v154, v239);
    v155(v152, v156);
    if ((v147 & 1) != 0)
      v157 = 1.0;
    else
      v157 = 0.0;
    v159 = v228;
    v158 = v229;
    v160 = (uint64_t)v231;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v228 + 16))(v231, v151, v229);
    *(double *)(v160 + *(int *)(v226 + 36)) = v157;
    (*(void (**)(_BYTE *, uint64_t))(v159 + 8))(v151, v158);
    v161 = sub_10001115C((uint64_t)v152);
    static WidgetRenderingMode.accented.getter(v161);
    v162 = static WidgetRenderingMode.== infix(_:_:)(v152, v154);
    v155(v154, v156);
    v155(v152, v156);
    if ((v162 & 1) != 0)
      v146 = -0.1;
    v163 = v235;
    sub_100012310(v160, (uint64_t)v235, &qword_100055F68);
    *(double *)&v163[*(int *)(v230 + 36)] = v146;
    sub_10000EB5C(v160, &qword_100055F68);
    v164 = type metadata accessor for ViewContext(0);
    v165 = &v267[*(int *)(v164 + 20)];
    v166 = *(_QWORD *)v165;
    v167 = *((_QWORD *)v165 + 1);
    v168 = static Alignment.center.getter(v164);
    _FrameLayout.init(width:height:alignment:)(v269, v166, 0, v167, 0, v168, v169);
    v170 = v234;
    sub_100012310((uint64_t)v163, (uint64_t)v234, &qword_100056088);
    v171 = &v170[*(int *)(v232 + 36)];
    v172 = v269[1];
    *v171 = v269[0];
    v171[1] = v172;
    v171[2] = v269[2];
    sub_10000EB5C((uint64_t)v163, &qword_100056088);
    v173 = v233;
    sub_100012310((uint64_t)v170, (uint64_t)v233, &qword_100056090);
    v174 = v256;
    v175 = &v173[*(int *)(v256 + 36)];
    *(_QWORD *)v175 = 0;
    *((_WORD *)v175 + 4) = 257;
    sub_10000EB5C((uint64_t)v170, &qword_100056090);
    v176 = &qword_100056098;
    v177 = v252;
    sub_10001C888((uint64_t)v173, (uint64_t)v252, &qword_100056098);
    v178 = v255;
    sub_100012310((uint64_t)v177, (uint64_t)v255, &qword_100056098);
    swift_storeEnumTagMultiPayload(v178, v253, 1);
    v179 = sub_100012354(&qword_1000560E0, &qword_1000560B0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v180 = sub_10002001C(&qword_1000560E8, &qword_100056098, (void (*)(void))sub_10002D418);
    v181 = (uint64_t)v257;
    _ConditionalContent<>.init(storage:)(v178, v254, v174, v179, v180);
    v182 = v258;
    sub_100012310(v181, (uint64_t)v258, &qword_1000560B8);
    swift_storeEnumTagMultiPayload(v182, v260, 0);
    v183 = sub_10002D374();
    v184 = sub_10002001C(&qword_100056108, &qword_100056080, (void (*)(void))sub_10002D4D8);
    _ConditionalContent<>.init(storage:)(v182, v261, v262, v183, v184);
    sub_10000EB5C(v181, &qword_1000560B8);
    v185 = (uint64_t)v177;
    return sub_10000EB5C(v185, v176);
  }
  v65 = v266 + *(int *)(v61 + 44);
  v66 = v65 + *(int *)(type metadata accessor for ModelEntry(0, v265, v57, v62) + 36);
  v67 = (uint64_t *)(v66 + *(int *)(type metadata accessor for ViewContext(0) + 20));
  v68 = *v67;
  v69 = v67[1];
  *v55 = swift_getKeyPath(&unk_1000432F0);
  v70 = sub_100003EA4(&qword_100055700);
  swift_storeEnumTagMultiPayload(v55, v70, 0);
  v71 = (_QWORD *)((char *)v55 + v52[5]);
  *v71 = swift_getKeyPath(&unk_100043320);
  v72 = sub_100003EA4(&qword_100055708);
  swift_storeEnumTagMultiPayload(v71, v72, 0);
  v73 = v267;
  *(_QWORD *)((char *)v55 + v52[6]) = v267;
  v74 = (char *)v55 + v52[7];
  *(_QWORD *)v74 = v68;
  *((_QWORD *)v74 + 1) = v69;
  v74[16] = 0;
  *(_QWORD *)((char *)v55 + v52[8]) = 0x3FF0000000000000;
  v75 = v251;
  sub_10002D54C((uint64_t)v55, (uint64_t)v251);
  v76 = v259;
  (*(void (**)(_BYTE *, _QWORD, _BYTE *))(v259 + 104))(v47, enum case for WidgetFamily.systemSmall(_:), v42);
  v77 = sub_10002D590((unint64_t *)&qword_100055600, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v78 = v73;
  dispatch thunk of RawRepresentable.rawValue.getter(v269, v42, v77);
  dispatch thunk of RawRepresentable.rawValue.getter(v268, v42, v77);
  v79 = *(_QWORD *)&v269[0];
  v80 = *(_QWORD *)v268;
  (*(void (**)(_BYTE *, _BYTE *))(v76 + 8))(v47, v42);
  v81 = v75;
  if (v79 == v80)
  {
    sub_100023648(v264, v268);
    v82 = memcpy(v269, v268, 0x108uLL);
    v83 = v240;
    static _ForegroundLayerLevel.secondary.getter(v82);
    v84 = v242;
    _ForegroundLayerLevelViewModifier.init(level:)(v83);
    v85 = v247;
    v86 = v241;
    v88 = v243;
    v87 = v244;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v243 + 16))(&v241[*(int *)(v247 + 36)], v84, v244);
    memcpy(v86, v269, 0x108uLL);
    (*(void (**)(_BYTE *, uint64_t))(v88 + 8))(v84, v87);
    v89 = (uint64_t)v86;
    v90 = v245;
    sub_10001C888(v89, (uint64_t)v245, &qword_1000560C8);
    v91 = v249;
    sub_100012310((uint64_t)v90, (uint64_t)v249, &qword_1000560C8);
    v92 = v91;
    v93 = v248;
    v94 = 0;
  }
  else
  {
    sub_100023C98(v264, (uint64_t)v268);
    v108 = memcpy(v269, v268, 0x108uLL);
    v109 = v240;
    static _ForegroundLayerLevel.secondary.getter(v108);
    v110 = v242;
    _ForegroundLayerLevelViewModifier.init(level:)(v109);
    v85 = v247;
    v111 = v241;
    v113 = v243;
    v112 = v244;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v243 + 16))(&v241[*(int *)(v247 + 36)], v110, v244);
    memcpy(v111, v269, 0x108uLL);
    (*(void (**)(_BYTE *, uint64_t))(v113 + 8))(v110, v112);
    v114 = (uint64_t)v111;
    v90 = v245;
    sub_10001C888(v114, (uint64_t)v245, &qword_1000560C8);
    v91 = v249;
    sub_100012310((uint64_t)v90, (uint64_t)v249, &qword_1000560C8);
    v92 = v91;
    v93 = v248;
    v94 = 1;
  }
  swift_storeEnumTagMultiPayload(v92, v93, v94);
  v115 = sub_10002001C(&qword_100056128, &qword_1000560C8, (void (*)(void))sub_10002D5D0);
  v116 = (uint64_t)v250;
  _ConditionalContent<>.init(storage:)(v91, v85, v85, v115, v115);
  sub_10000EB5C((uint64_t)v90, &qword_1000560C8);
  v117 = v258;
  v118 = v253;
  v119 = (uint64_t)v246;
  sub_100015134((uint64_t)v75, (uint64_t)v55, type metadata accessor for MapView);
  sub_100012310(v116, v119, &qword_1000560D0);
  v120 = v252;
  sub_100015134((uint64_t)v55, (uint64_t)v252, type metadata accessor for MapView);
  v121 = sub_100003EA4(&qword_100056150);
  sub_100012310(v119, (uint64_t)&v120[*(int *)(v121 + 48)], &qword_1000560D0);
  sub_10000EB5C(v119, &qword_1000560D0);
  sub_100015178((uint64_t)v55, type metadata accessor for MapView);
  v122 = (uint64_t)v81;
  v123 = v255;
  sub_100012310((uint64_t)v120, (uint64_t)v255, &qword_1000560B0);
  swift_storeEnumTagMultiPayload(v123, v118, 0);
  v124 = sub_100012354(&qword_1000560E0, &qword_1000560B0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v125 = sub_10002001C(&qword_1000560E8, &qword_100056098, (void (*)(void))sub_10002D418);
  v126 = (uint64_t)v257;
  _ConditionalContent<>.init(storage:)(v123, v254, v256, v124, v125);
  sub_10000EB5C((uint64_t)v120, &qword_1000560B0);
  sub_100012310(v126, (uint64_t)v117, &qword_1000560B8);
  swift_storeEnumTagMultiPayload(v117, v260, 0);
  v127 = sub_10002D374();
  v128 = sub_10002001C(&qword_100056108, &qword_100056080, (void (*)(void))sub_10002D4D8);
  _ConditionalContent<>.init(storage:)(v117, v261, v262, v127, v128);
  sub_10000EB5C(v126, &qword_1000560B8);
  sub_10000EB5C(v116, &qword_1000560D0);
  return sub_100015178(v122, type metadata accessor for MapView);
}

uint64_t sub_100025A6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  double *v46;
  uint64_t v48;
  uint64_t v49;

  v49 = a2;
  v4 = (int *)type metadata accessor for BadgeView(0);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100055358 != -1)
    swift_once(&qword_100055358, sub_1000350C8);
  v8 = *(double *)&xmmword_100058730;
  v9 = v2 + *(int *)(a1 + 44);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = type metadata accessor for ModelEntry(0, v10, v11, v5);
  v48 = v2;
  v13 = *(int *)(v12 + 36);
  v14 = *(double *)(v9 + *(int *)(type metadata accessor for ViewContext(0) + 20) + v13 + 8);
  v15 = *((double *)&xmmword_100058730 + 1);
  v16 = *(double *)&xmmword_100058740;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 112))(v10, v11);
  v19 = v18;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 120))(v10, v11);
  LOBYTE(v9) = v21;
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 128))(v10, v11);
  v24 = v23;
  LOBYTE(v11) = v25;
  *v7 = swift_getKeyPath(&unk_1000432F0);
  v26 = sub_100003EA4(&qword_100055700);
  swift_storeEnumTagMultiPayload(v7, v26, 0);
  v27 = (_QWORD *)((char *)v7 + v4[5]);
  *v27 = v17;
  v27[1] = v19;
  v28 = (char *)v7 + v4[6];
  *(_QWORD *)v28 = v20;
  v28[8] = v9 & 1;
  v29 = (char *)v7 + v4[7];
  *(_QWORD *)v29 = v22;
  *((_QWORD *)v29 + 1) = v24;
  v29[16] = v11 & 1;
  v30 = v4[8];
  if (qword_100055330 != -1)
    swift_once(&qword_100055330, sub_100004584);
  v31 = (char *)v7 + v30;
  v32 = v8 * v14;
  if (v15 < v8 * v14)
    v32 = v15;
  v33 = (v16 + v32) * 0.5;
  v34 = qword_100058670;
  v35 = qword_100058678;
  v36 = qword_100058680;
  v37 = qword_100058688;
  v38 = qword_1000586A0;
  v39 = qword_1000586A8;
  v40 = qword_1000586B0;
  v41 = qword_1000586C8;
  *(_OWORD *)v31 = xmmword_100058660;
  *((_QWORD *)v31 + 2) = v34;
  *((_QWORD *)v31 + 3) = v35;
  *((_QWORD *)v31 + 4) = v36;
  *((_QWORD *)v31 + 5) = v37;
  *((_OWORD *)v31 + 3) = xmmword_100058690;
  *((_QWORD *)v31 + 8) = v38;
  *((_QWORD *)v31 + 9) = v39;
  *((_QWORD *)v31 + 10) = v40;
  *(_OWORD *)(v31 + 88) = unk_1000586B8;
  *((_QWORD *)v31 + 13) = v41;
  v42 = v49;
  v43 = v48 + *(int *)(a1 + 52);
  v44 = v33 + *(double *)(v43 + 208);
  v45 = v33 + *(double *)(v43 + 216);
  sub_100015134((uint64_t)v7, v49, type metadata accessor for BadgeView);
  v46 = (double *)(v42 + *(int *)(sub_100003EA4(&qword_1000564F0) + 36));
  *v46 = v44;
  v46[1] = v45;
  swift_retain(v35);
  swift_retain(v36);
  swift_retain(v37);
  swift_retain(v39);
  swift_retain(v40);
  return sub_100015178((uint64_t)v7, type metadata accessor for BadgeView);
}

uint64_t sub_100025D3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t (**v15)(_QWORD, _QWORD);
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned __int8 v19;
  void *v20;
  void *v21;
  unsigned __int8 v22;
  char v23;
  char v24;
  char v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  char *v29;
  char v30;
  char v31;
  _QWORD *v32;
  void (*v33)(char *, uint64_t);
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void *v59;
  char *v60;
  uint64_t v61;
  char *v62;

  v58 = a2;
  v4 = sub_100003EA4(&qword_1000564C8);
  v5 = __chkstk_darwin(v4);
  v57 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 - 8);
  v8 = __chkstk_darwin(v5);
  v60 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v62 = (char *)&v53 - v10;
  v11 = type metadata accessor for ColorScheme(0);
  v54 = *(_QWORD *)(v11 - 8);
  v55 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = v2;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(uint64_t (***)(_QWORD, _QWORD))(a1 + 24);
  v56 = type metadata accessor for ModelEntry(0, v14, (uint64_t)v15, v16);
  v17 = v15[21](v14, v15);
  if (v19 == 0xFF)
  {
    v59 = 0;
  }
  else
  {
    v20 = (void *)v17;
    v21 = v18;
    v22 = v19;
    v53 = v7;
    v23 = v19 & 1;
    sub_100011188((uint64_t)v13);
    v24 = v23;
    v7 = v53;
    v59 = sub_100015430((uint64_t)v13, v20, v21, v24);
    sub_10000E03C(v20, v21, v22);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v13, v55);
  }
  v25 = v15[22](v14, v15);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v28 = v61;
  v27 = v62;
  v26(v62, v61, a1);
  v29 = v60;
  if ((v25 & 1) != 0)
  {
    v30 = 1;
  }
  else
  {
    v31 = v15[4](v14, v15);
    v27 = v62;
    v30 = v31 ^ 1;
  }
  v32 = v57;
  v33 = *(void (**)(char *, uint64_t))(v7 + 8);
  v33(v27, a1);
  v26(v29, v28, a1);
  if ((v30 & 1) != 0)
    v34 = 1;
  else
    v34 = v15[3](v14, v15);
  v35 = v58;
  v36 = ((uint64_t (*)(char *, uint64_t))v33)(v29, a1);
  *v32 = static Alignment.center.getter(v36);
  v32[1] = v37;
  v38 = sub_100003EA4(&qword_1000564D0);
  v39 = v34 & 1;
  v40 = v59;
  sub_10002606C(v28, v59, v39, v14, (uint64_t)v15, (uint64_t)v32 + *(int *)(v38 + 44));
  sub_100022E74(a1, v41, v42, v43);
  v45 = v44;
  sub_100022E74(a1, v46, v47, v48);
  v50 = v49;

  sub_100012310((uint64_t)v32, v35, &qword_1000564C8);
  v51 = (_QWORD *)(v35 + *(int *)(sub_100003EA4(&qword_100056178) + 36));
  *v51 = v45;
  v51[1] = v50;
  return sub_10000EB5C((uint64_t)v32, &qword_1000564C8);
}

uint64_t sub_10002606C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  void *v54;
  char *v55;
  uint64_t v56;
  id v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  void *v115;
  char *v116;
  uint64_t v117;
  id v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  double *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  _OWORD v195[3];

  v164 = a3;
  v166 = a2;
  v176 = a6;
  v177 = sub_100003EA4(&qword_1000564D8);
  __chkstk_darwin(v177);
  v162 = (uint64_t)&v161 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_100003EA4(&qword_1000564E0);
  __chkstk_darwin(v172);
  v175 = (uint64_t)&v161 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_100003EA4(&qword_1000564E8);
  __chkstk_darwin(v174);
  v163 = (uint64_t)&v161 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003EA4(&qword_1000564F0);
  __chkstk_darwin(v12);
  v169 = (uint64_t)&v161 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_100003EA4(&qword_1000564F8);
  v14 = __chkstk_darwin(v168);
  v171 = (uint64_t)&v161 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v173 = (uint64_t)&v161 - v16;
  v17 = (int *)type metadata accessor for AvatarView(0);
  __chkstk_darwin(v17);
  v19 = (uint64_t *)((char *)&v161 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v167 = sub_100003EA4(&qword_100056500);
  v20 = __chkstk_darwin(v167);
  v170 = (uint64_t)&v161 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v180 = (uint64_t)&v161 - v22;
  v23 = type metadata accessor for LocationCircle(0);
  __chkstk_darwin(v23);
  v25 = (uint64_t *)((char *)&v161 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = sub_100003EA4(&qword_100056508);
  v27 = __chkstk_darwin(v26);
  v165 = (uint64_t)&v161 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v161 = (uint64_t)&v161 - v29;
  v178 = type metadata accessor for ContentView(0, a4, a5, v30);
  v179 = a1;
  v31 = a1 + *(int *)(v178 + 44);
  v33 = type metadata accessor for ModelEntry(0, a4, a5, v32);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 64))(a4, a5) & 1) != 0)
  {
    v34 = *(double *)(v179 + *(int *)(v178 + 52) + 224);
    v35 = (*(double (**)(uint64_t, uint64_t))(a5 + 160))(a4, a5);
    v36 = v35 + v35;
    if (v34 > v36)
      v36 = v34;
    sub_1000370AC(v25, v36);
    v37 = *(int *)(v33 + 36);
    v38 = type metadata accessor for ViewContext(0);
    v39 = (uint64_t *)(v31 + v37 + *(int *)(v38 + 20));
    v40 = *v39;
    v41 = v39[1];
    v42 = static Alignment.center.getter(v38);
    _FrameLayout.init(width:height:alignment:)(v195, v40, 0, v41, 0, v42, v43);
    v44 = v165;
    sub_100015134((uint64_t)v25, v165, type metadata accessor for LocationCircle);
    v45 = (_OWORD *)(v44 + *(int *)(v26 + 36));
    v46 = v195[1];
    *v45 = v195[0];
    v45[1] = v46;
    v45[2] = v195[2];
    sub_100015178((uint64_t)v25, type metadata accessor for LocationCircle);
    v47 = v161;
    sub_10001C888(v44, v161, &qword_100056508);
    v48 = *v39;
    v49 = v39[1];
    LOBYTE(v44) = v164 & 1;
    *v19 = swift_getKeyPath(&unk_1000432F0);
    v50 = sub_100003EA4(&qword_100055700);
    swift_storeEnumTagMultiPayload(v19, v50, 0);
    v51 = (_QWORD *)((char *)v19 + v17[5]);
    *v51 = swift_getKeyPath(&unk_100043320);
    v52 = sub_100003EA4(&qword_100055708);
    swift_storeEnumTagMultiPayload(v51, v52, 0);
    v53 = (_QWORD *)((char *)v19 + v17[6]);
    *v53 = v48;
    v53[1] = v49;
    v54 = v166;
    *(_QWORD *)((char *)v19 + v17[7]) = v166;
    *((_BYTE *)v19 + v17[8]) = v44;
    *((_BYTE *)v19 + v17[9]) = 1;
    v55 = (char *)v19 + v17[10];
    v56 = qword_100055358;
    v57 = v54;
    if (v56 != -1)
      swift_once(&qword_100055358, sub_1000350C8);
    v58 = xmmword_1000587C0;
    v191 = xmmword_1000587D0;
    v192 = xmmword_1000587E0;
    v59 = xmmword_1000587E0;
    v193 = xmmword_1000587F0;
    v60 = xmmword_100058790;
    v61 = xmmword_100058780;
    v187 = xmmword_100058790;
    v188 = xmmword_1000587A0;
    v62 = xmmword_1000587A0;
    v63 = xmmword_1000587B0;
    v189 = xmmword_1000587B0;
    v190 = xmmword_1000587C0;
    v64 = xmmword_100058750;
    v65 = xmmword_100058740;
    v183 = xmmword_100058750;
    v184 = xmmword_100058760;
    v66 = xmmword_100058760;
    v67 = xmmword_100058770;
    v185 = xmmword_100058770;
    v186 = xmmword_100058780;
    v68 = xmmword_100058730;
    v181 = xmmword_100058730;
    v182 = xmmword_100058740;
    *((_OWORD *)v55 + 10) = xmmword_1000587D0;
    *((_OWORD *)v55 + 11) = v59;
    *((_OWORD *)v55 + 12) = xmmword_1000587F0;
    *((_OWORD *)v55 + 6) = v60;
    *((_OWORD *)v55 + 7) = v62;
    *((_OWORD *)v55 + 8) = v63;
    *((_OWORD *)v55 + 9) = v58;
    *((_OWORD *)v55 + 2) = v64;
    *((_OWORD *)v55 + 3) = v66;
    *((_OWORD *)v55 + 4) = v67;
    *((_OWORD *)v55 + 5) = v61;
    v194 = qword_100058800;
    *((_QWORD *)v55 + 26) = qword_100058800;
    *(_OWORD *)v55 = v68;
    *((_OWORD *)v55 + 1) = v65;
    sub_10002EF08(&v181);
    v69 = v178;
    v73 = sub_100022F3C(v178, v70, v71, v72);
    sub_100022F3C(v69, v74, v75, v76);
    v78 = v77;
    v79 = v170;
    sub_100015134((uint64_t)v19, v170, type metadata accessor for AvatarView);
    v80 = (double *)(v79 + *(int *)(v167 + 36));
    *v80 = v73;
    *((_QWORD *)v80 + 1) = v78;
    sub_100015178((uint64_t)v19, type metadata accessor for AvatarView);
    v81 = v180;
    sub_10001C888(v79, v180, &qword_100056500);
    v82 = v169;
    sub_100025A6C(v69, v169);
    v86 = sub_100022F3C(v69, v83, v84, v85);
    sub_100022F3C(v69, v87, v88, v89);
    v91 = v90;
    v92 = v171;
    sub_100012310(v82, v171, &qword_1000564F0);
    v93 = (double *)(v92 + *(int *)(v168 + 36));
    *v93 = v86;
    *((_QWORD *)v93 + 1) = v91;
    sub_10000EB5C(v82, &qword_1000564F0);
    v94 = v173;
    sub_10001C888(v92, v173, &qword_1000564F8);
    v95 = v165;
    sub_100012310(v47, v165, &qword_100056508);
    v96 = v81;
    v97 = v47;
    sub_100012310(v96, v79, &qword_100056500);
    sub_100012310(v94, v92, &qword_1000564F8);
    v98 = v163;
    sub_100012310(v95, v163, &qword_100056508);
    v99 = sub_100003EA4(&qword_100056528);
    sub_100012310(v79, v98 + *(int *)(v99 + 48), &qword_100056500);
    sub_100012310(v92, v98 + *(int *)(v99 + 64), &qword_1000564F8);
    sub_10000EB5C(v92, &qword_1000564F8);
    sub_10000EB5C(v79, &qword_100056500);
    sub_10000EB5C(v95, &qword_100056508);
    v100 = v175;
    sub_100012310(v98, v175, &qword_1000564E8);
    swift_storeEnumTagMultiPayload(v100, v172, 0);
    v101 = sub_100012354(&qword_100056518, &qword_1000564E8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v102 = sub_100012354(&qword_100056520, &qword_1000564D8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v100, v174, v177, v101, v102);
    sub_10000EB5C(v98, &qword_1000564E8);
    sub_10000EB5C(v94, &qword_1000564F8);
    sub_10000EB5C(v180, &qword_100056500);
    v103 = v97;
    v104 = &qword_100056508;
  }
  else
  {
    v105 = v178;
    v106 = *(int *)(v33 + 36);
    v107 = (uint64_t *)(v31 + v106 + *(int *)(type metadata accessor for ViewContext(0) + 20));
    v108 = *v107;
    v109 = v107[1];
    v110 = v164 & 1;
    *v19 = swift_getKeyPath(&unk_1000432F0);
    v111 = sub_100003EA4(&qword_100055700);
    swift_storeEnumTagMultiPayload(v19, v111, 0);
    v112 = (_QWORD *)((char *)v19 + v17[5]);
    *v112 = swift_getKeyPath(&unk_100043320);
    v113 = sub_100003EA4(&qword_100055708);
    swift_storeEnumTagMultiPayload(v112, v113, 0);
    v114 = (_QWORD *)((char *)v19 + v17[6]);
    *v114 = v108;
    v114[1] = v109;
    v115 = v166;
    *(_QWORD *)((char *)v19 + v17[7]) = v166;
    *((_BYTE *)v19 + v17[8]) = v110;
    *((_BYTE *)v19 + v17[9]) = 0;
    v116 = (char *)v19 + v17[10];
    v117 = qword_100055358;
    v118 = v115;
    if (v117 != -1)
      swift_once(&qword_100055358, sub_1000350C8);
    v119 = xmmword_1000587C0;
    v191 = xmmword_1000587D0;
    v192 = xmmword_1000587E0;
    v120 = xmmword_1000587E0;
    v193 = xmmword_1000587F0;
    v121 = xmmword_100058790;
    v122 = xmmword_100058780;
    v187 = xmmword_100058790;
    v188 = xmmword_1000587A0;
    v123 = xmmword_1000587A0;
    v124 = xmmword_1000587B0;
    v189 = xmmword_1000587B0;
    v190 = xmmword_1000587C0;
    v125 = xmmword_100058750;
    v126 = xmmword_100058740;
    v183 = xmmword_100058750;
    v184 = xmmword_100058760;
    v127 = xmmword_100058760;
    v128 = xmmword_100058770;
    v185 = xmmword_100058770;
    v186 = xmmword_100058780;
    v129 = xmmword_100058730;
    v181 = xmmword_100058730;
    v182 = xmmword_100058740;
    *((_OWORD *)v116 + 10) = xmmword_1000587D0;
    *((_OWORD *)v116 + 11) = v120;
    *((_OWORD *)v116 + 12) = xmmword_1000587F0;
    *((_OWORD *)v116 + 6) = v121;
    *((_OWORD *)v116 + 7) = v123;
    *((_OWORD *)v116 + 8) = v124;
    *((_OWORD *)v116 + 9) = v119;
    *((_OWORD *)v116 + 2) = v125;
    *((_OWORD *)v116 + 3) = v127;
    *((_OWORD *)v116 + 4) = v128;
    *((_OWORD *)v116 + 5) = v122;
    v194 = qword_100058800;
    *((_QWORD *)v116 + 26) = qword_100058800;
    *(_OWORD *)v116 = v129;
    *((_OWORD *)v116 + 1) = v126;
    sub_10002EF08(&v181);
    v133 = sub_100022F3C(v105, v130, v131, v132);
    sub_100022F3C(v105, v134, v135, v136);
    v138 = v137;
    v139 = v170;
    sub_100015134((uint64_t)v19, v170, type metadata accessor for AvatarView);
    v140 = (double *)(v139 + *(int *)(v167 + 36));
    *v140 = v133;
    *((_QWORD *)v140 + 1) = v138;
    sub_100015178((uint64_t)v19, type metadata accessor for AvatarView);
    v141 = v180;
    sub_10001C888(v139, v180, &qword_100056500);
    v142 = v169;
    sub_100025A6C(v105, v169);
    v146 = sub_100022F3C(v105, v143, v144, v145);
    sub_100022F3C(v105, v147, v148, v149);
    v151 = v150;
    v152 = v171;
    sub_100012310(v142, v171, &qword_1000564F0);
    v153 = (double *)(v152 + *(int *)(v168 + 36));
    *v153 = v146;
    *((_QWORD *)v153 + 1) = v151;
    sub_10000EB5C(v142, &qword_1000564F0);
    v154 = v173;
    sub_10001C888(v152, v173, &qword_1000564F8);
    sub_100012310(v141, v139, &qword_100056500);
    sub_100012310(v154, v152, &qword_1000564F8);
    v155 = v162;
    sub_100012310(v139, v162, &qword_100056500);
    v156 = sub_100003EA4(&qword_100056510);
    sub_100012310(v152, v155 + *(int *)(v156 + 48), &qword_1000564F8);
    sub_10000EB5C(v152, &qword_1000564F8);
    sub_10000EB5C(v139, &qword_100056500);
    v157 = v175;
    sub_100012310(v155, v175, &qword_1000564D8);
    swift_storeEnumTagMultiPayload(v157, v172, 1);
    v158 = sub_100012354(&qword_100056518, &qword_1000564E8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v159 = sub_100012354(&qword_100056520, &qword_1000564D8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v157, v174, v177, v158, v159);
    sub_10000EB5C(v155, &qword_1000564D8);
    sub_10000EB5C(v154, &qword_1000564F8);
    v103 = v141;
    v104 = &qword_100056500;
  }
  return sub_10000EB5C(v103, v104);
}

uint64_t sub_100026B9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  void *object;
  Swift::String v14;
  Swift::Bool v15;
  id v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[5];
  uint64_t v48;
  __int16 v49;
  _QWORD v50[3];
  Swift::String v51;
  Swift::String v52;

  v43 = a1;
  v3 = type metadata accessor for Text.DateStyle.UnitsConfiguration.Style(0);
  v41 = *(_QWORD *)(v3 - 8);
  v42 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Text.DateStyle.UnitsConfiguration(0);
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)objc_opt_self(NSBundle);
  v10 = objc_msgSend(v9, "mainBundle");
  v51._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = 0x6F6741656D6954;
  v11._object = (void *)0xE700000000000000;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v51._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v51)._object;

  v14._countAndFlagsBits = 1076113701;
  v14._object = (void *)0xE400000000000000;
  v15 = String.hasPrefix(_:)(v14);
  v16 = objc_msgSend(v9, "mainBundle", swift_bridgeObjectRelease(object).n128_f64[0]);
  v52._object = (void *)0xE000000000000000;
  v17._countAndFlagsBits = 0x6F6741656D6954;
  v17._object = (void *)0xE700000000000000;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v52._countAndFlagsBits = 0;
  v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v52);

  v47[0] = v19;
  v50[0] = 1076113701;
  v50[1] = 0xE400000000000000;
  v20 = sub_100003F74();
  v21 = StringProtocol.components<A>(separatedBy:)(v50, &type metadata for String, &type metadata for String, v20, v20);
  swift_bridgeObjectRelease(v19._object);
  v22 = *(_QWORD *)(v21 + 16);
  if (!v15)
  {
    if (v22)
    {
      v24 = (uint64_t *)(v21 + 32);
      v25 = (_QWORD *)(v21 + 40);
      goto LABEL_6;
    }
LABEL_7:
    v26 = 0;
    v27 = (void *)0xE000000000000000;
    goto LABEL_8;
  }
  if (!v22)
    goto LABEL_7;
  v23 = v21 + 16 * v22;
  v24 = (uint64_t *)(v23 + 16);
  v25 = (_QWORD *)(v23 + 24);
LABEL_6:
  v26 = *v24;
  v27 = (void *)*v25;
  swift_bridgeObjectRetain(*v25);
LABEL_8:
  v28 = swift_bridgeObjectRelease(v21);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v41 + 104))(v5, enum case for Text.DateStyle.UnitsConfiguration.Style.brief(_:), v42, v28);
  v29 = Text.DateStyle.UnitsConfiguration.init(units:style:)(96, v5);
  v30 = static Alignment.center.getter(v29);
  v32 = v31;
  sub_100026E70(v44, v15, (uint64_t)v8, v26, v27, *(_QWORD *)(v43 + 16), *(_QWORD *)(v43 + 24), v47);
  swift_bridgeObjectRelease(v27);
  v33 = v48;
  v34 = v49;
  v35 = v47[0];
  v36 = v47[1];
  v37 = v47[2];
  v38 = v47[3];
  v39 = v47[4];
  *(_QWORD *)a2 = v30;
  *(_QWORD *)(a2 + 8) = v32;
  *(_OWORD *)(a2 + 16) = v35;
  *(_OWORD *)(a2 + 32) = v36;
  *(_OWORD *)(a2 + 48) = v37;
  *(_OWORD *)(a2 + 64) = v38;
  *(_OWORD *)(a2 + 80) = v39;
  *(_QWORD *)(a2 + 96) = v33;
  *(_WORD *)(a2 + 104) = v34;
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v8, v46);
}

uint64_t sub_100026E70@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t (*v45)(char *, uint64_t);
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  uint64_t v71;
  void *v72;
  char **v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  Swift::String v77;
  char *v78;
  Swift::String v79;
  Swift::String v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  void (*v97)(char *, uint64_t);
  char *v98;
  uint64_t v99;
  void *v100;
  char **v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  __n128 v106;
  Swift::String v107;
  char *v108;
  Swift::String v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t KeyPath;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  void (*v131)(char *, uint64_t);
  char *v132;
  uint64_t v133;
  void *v134;
  char **v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  __int16 v142;
  _QWORD *v143;
  char *v144;
  void (*v145)(char *, uint64_t, __n128);
  uint64_t v146;
  int v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  Swift::String v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  unsigned __int8 v166;
  __int128 v167;
  __int128 v168;
  _OWORD v169[2];
  __int128 v170;
  uint64_t v171;
  __int16 v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned __int8 v183;
  char v184;

  v151._countAndFlagsBits = a4;
  v151._object = a5;
  v148 = a3;
  v147 = a2;
  v159 = a8;
  v152 = type metadata accessor for Text.DateStyle(0);
  v150 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v149 = (char *)&v144 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v144 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = type metadata accessor for WidgetRenderingMode(0);
  v156 = *(_QWORD *)(v158 - 8);
  v15 = __chkstk_darwin(v158);
  v155 = (char *)&v144 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v157 = (uint64_t)&v144 - v17;
  v18 = sub_100003EA4(&qword_100055B48);
  __chkstk_darwin(v18);
  v20 = (char *)&v144 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v144 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v144 - v26;
  v153 = type metadata accessor for ContentView(0, a6, a7, v28);
  v154 = a1;
  type metadata accessor for ModelEntry(0, a6, a7, v29);
  (*(void (**)(uint64_t, uint64_t))(a7 + 88))(a6, a7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_10000EB5C((uint64_t)v20, &qword_100055B48);
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    result = 0;
    v41 = -256;
    goto LABEL_19;
  }
  v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 32))(v27, v20, v21);
  v43 = Date.init()(v42);
  v44 = Date.timeIntervalSinceReferenceDate.getter(v43);
  v45 = *(uint64_t (**)(char *, uint64_t))(v22 + 8);
  v46 = v45(v25, v21);
  v47 = Date.timeIntervalSinceReferenceDate.getter(v46);
  v145 = (void (*)(char *, uint64_t, __n128))v45;
  v146 = v21;
  v144 = v27;
  if (v44 - v47 >= 60.0)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 2);
    v77._countAndFlagsBits = 0;
    v77._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v77);
    if ((v147 & 1) == 0)
    {
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v151);
      v107._countAndFlagsBits = 0;
      v107._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v107);
      v108 = v149;
      static Text.DateStyle.relative(unitConfiguration:)(v148);
      LocalizedStringKey.StringInterpolation.appendInterpolation(_:style:)(v27, v108);
      (*(void (**)(char *, uint64_t))(v150 + 8))(v108, v152);
      v109._countAndFlagsBits = 0;
      v109._object = (void *)0xE000000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v109);
      v110 = LocalizedStringKey.init(stringInterpolation:)(v14);
      v111 = Text.init(_:tableName:bundle:comment:)(v110);
      v113 = v112;
      v115 = v114;
      v117 = v116 & 1;
      v118 = static Font.caption2.getter();
      v152 = Text.font(_:)(v118, v111, v113, v117, v115);
      v120 = v119;
      v122 = v121;
      v124 = v123;
      swift_release(v118);
      v125 = v122 & 1;
      sub_10002D6F4(v111, v113, v117);
      swift_bridgeObjectRelease(v115);
      KeyPath = swift_getKeyPath(&unk_1000433E0);
      v127 = swift_getKeyPath(&unk_100043410);
      v128 = v157;
      v129 = sub_10001115C(v157);
      v130 = v155;
      static WidgetRenderingMode.accented.getter(v129);
      LOBYTE(v111) = static WidgetRenderingMode.== infix(_:_:)(v128, v130);
      v131 = *(void (**)(char *, uint64_t))(v156 + 8);
      v132 = v130;
      v133 = v158;
      v131(v132, v158);
      v131((char *)v128, v133);
      v134 = (void *)objc_opt_self(UIColor);
      v135 = &selRef_labelColor;
      if ((v111 & 1) == 0)
        v135 = &selRef_secondaryLabelColor;
      v136 = Color.init(_:)(objc_msgSend(v134, *v135, v144, v145, v146));
      v137 = swift_getKeyPath(&unk_1000433B0);
      *(_QWORD *)&v167 = v152;
      *((_QWORD *)&v167 + 1) = v120;
      *(_QWORD *)&v168 = v125;
      *((_QWORD *)&v168 + 1) = v124;
      *(_OWORD *)((char *)v169 + 8) = xmmword_1000434F0;
      *(_QWORD *)&v169[0] = KeyPath;
      *((_QWORD *)&v169[1] + 1) = v127;
      *(_QWORD *)&v170 = 0x3FE0000000000000;
      *((_QWORD *)&v170 + 1) = v137;
      v171 = v136;
      v172 = 256;
      v138 = sub_100003EA4(&qword_1000564B8);
      v139 = sub_100003EA4(&qword_100056450);
      v140 = sub_10002ECC0();
      v141 = sub_10002E2E4();
      _ConditionalContent<>.init(storage:)(&v167, v138, v139, v140, v141);
      goto LABEL_15;
    }
    v78 = v149;
    static Text.DateStyle.relative(unitConfiguration:)(v148);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:style:)(v27, v78);
    (*(void (**)(char *, uint64_t))(v150 + 8))(v78, v152);
    v79._countAndFlagsBits = 0;
    v79._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v79);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v151);
    v80._countAndFlagsBits = 0;
    v80._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v80);
    v81 = LocalizedStringKey.init(stringInterpolation:)(v14);
    v82 = Text.init(_:tableName:bundle:comment:)(v81);
    v84 = v83;
    v86 = v85;
    v88 = v87 & 1;
    v89 = static Font.caption2.getter();
    v57 = (void *)Text.font(_:)(v89, v82, v84, v88, v86);
    v152 = v90;
    v92 = v91;
    v62 = v93;
    swift_release(v89);
    v63 = v92 & 1;
    sub_10002D6F4(v82, v84, v88);
    swift_bridgeObjectRelease(v86);
    v64 = swift_getKeyPath(&unk_1000433E0);
    v65 = swift_getKeyPath(&unk_100043410);
    v94 = v157;
    v95 = sub_10001115C(v157);
    v96 = v155;
    static WidgetRenderingMode.accented.getter(v95);
    LOBYTE(v82) = static WidgetRenderingMode.== infix(_:_:)(v94, v96);
    v97 = *(void (**)(char *, uint64_t))(v156 + 8);
    v98 = v96;
    v99 = v158;
    v97(v98, v158);
    v97((char *)v94, v99);
    v100 = (void *)objc_opt_self(UIColor);
    v101 = &selRef_labelColor;
    if ((v82 & 1) == 0)
      v101 = &selRef_secondaryLabelColor;
    v74 = Color.init(_:)(objc_msgSend(v100, *v101, v144, v145, v146));
    v75 = swift_getKeyPath(&unk_1000433B0);
    v151._object = v57;
    v76 = v152;
    v173 = v57;
    v174 = v152;
    v175 = v63;
    v176 = v62;
    v178 = xmmword_1000434F0;
    v177 = v64;
    v179 = v65;
    v180 = 0x3FE0000000000000;
    v181 = v75;
    v182 = v74;
    v183 = 1;
  }
  else
  {
    v48 = LocalizedStringKey.init(stringLiteral:)(0x73656D6954776F4ELL, 0xEC000000706D6174);
    v49 = Text.init(_:tableName:bundle:comment:)(v48);
    v51 = v50;
    v53 = v52;
    v55 = v54 & 1;
    v56 = static Font.caption2.getter();
    v57 = (void *)Text.font(_:)(v56, v49, v51, v55, v53);
    v152 = v58;
    v60 = v59;
    v62 = v61;
    swift_release(v56);
    v63 = v60 & 1;
    sub_10002D6F4(v49, v51, v55);
    swift_bridgeObjectRelease(v53);
    v64 = swift_getKeyPath(&unk_1000433E0);
    v65 = swift_getKeyPath(&unk_100043410);
    v66 = v157;
    v67 = sub_10001115C(v157);
    v68 = v155;
    static WidgetRenderingMode.accented.getter(v67);
    LOBYTE(v49) = static WidgetRenderingMode.== infix(_:_:)(v66, v68);
    v69 = *(void (**)(char *, uint64_t))(v156 + 8);
    v70 = v68;
    v71 = v158;
    v69(v70, v158);
    v69((char *)v66, v71);
    v72 = (void *)objc_opt_self(UIColor);
    v73 = &selRef_labelColor;
    if ((v49 & 1) == 0)
      v73 = &selRef_secondaryLabelColor;
    v74 = Color.init(_:)(objc_msgSend(v72, *v73, v144, v145, v146));
    v75 = swift_getKeyPath(&unk_1000433B0);
    v151._object = v57;
    v76 = v152;
    v173 = v57;
    v174 = v152;
    v175 = v63;
    v176 = v62;
    v178 = xmmword_1000434F0;
    v177 = v64;
    v179 = v65;
    v180 = 0x3FE0000000000000;
    v181 = v75;
    v182 = v74;
    v183 = 0;
  }
  sub_10002E5B8((uint64_t)v57, v76, v63);
  swift_bridgeObjectRetain(v62);
  swift_retain(v64);
  swift_retain(v65);
  swift_retain(v75);
  swift_retain(v74);
  v102 = sub_100003EA4(&qword_100056450);
  v103 = sub_10002E2E4();
  _ConditionalContent<>.init(storage:)(&v173, v102, v102, v103, v103);
  v167 = v160;
  v168 = v161;
  v169[0] = v162;
  v169[1] = v163;
  v170 = v164;
  v171 = v165;
  v172 = v166;
  v104 = sub_100003EA4(&qword_1000564B8);
  v105 = sub_10002ECC0();
  _ConditionalContent<>.init(storage:)(&v167, v104, v102, v105, v103);
  sub_10002D6F4((uint64_t)v151._object, v152, v63);
  swift_release(v74);
  swift_release(v75);
  swift_release(v65);
  swift_release(v64);
  v106 = swift_bridgeObjectRelease(v62);
LABEL_15:
  v145(v144, v146, v106);
  v30 = v173;
  v31 = v174;
  v32 = v175;
  v33 = v176;
  v34 = v177;
  v36 = *((_QWORD *)&v178 + 1);
  v35 = v178;
  v37 = v179;
  v38 = v180;
  v39 = v181;
  result = v182;
  if (v184)
    v142 = 256;
  else
    v142 = 0;
  v41 = v142 | v183;
LABEL_19:
  v143 = v159;
  *v159 = v30;
  v143[1] = v31;
  v143[2] = v32;
  v143[3] = v33;
  v143[4] = v34;
  v143[5] = v35;
  v143[6] = v36;
  v143[7] = v37;
  v143[8] = v38;
  v143[9] = v39;
  v143[10] = result;
  *((_WORD *)v143 + 44) = v41;
  return result;
}

double sub_100027868@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double result;
  __int128 v24;
  _OWORD v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];

  v3 = v2;
  v6 = type metadata accessor for LayoutDirection(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v25 - v11;
  sub_1000113F0((uint64_t)v25 - v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for LayoutDirection.rightToLeft(_:), v6);
  v13 = static LayoutDirection.== infix(_:_:)(v12, v10);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v10, v6);
  v15 = ((uint64_t (*)(char *, uint64_t))v14)(v12, v6);
  v16 = static Alignment.center.getter(v15);
  v18 = v17;
  sub_1000279C4(v3, v13 & 1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v25);
  *(_QWORD *)a2 = v16;
  *(_QWORD *)(a2 + 8) = v18;
  v19 = v33;
  *(_OWORD *)(a2 + 144) = v32;
  *(_OWORD *)(a2 + 160) = v19;
  *(_OWORD *)(a2 + 176) = v34[0];
  *(_OWORD *)(a2 + 190) = *(_OWORD *)((char *)v34 + 14);
  v20 = v29;
  *(_OWORD *)(a2 + 80) = v28;
  *(_OWORD *)(a2 + 96) = v20;
  v21 = v31;
  *(_OWORD *)(a2 + 112) = v30;
  *(_OWORD *)(a2 + 128) = v21;
  v22 = v25[1];
  *(_OWORD *)(a2 + 16) = v25[0];
  *(_OWORD *)(a2 + 32) = v22;
  result = *(double *)&v26;
  v24 = v27;
  *(_OWORD *)(a2 + 48) = v26;
  *(_OWORD *)(a2 + 64) = v24;
  return result;
}

double sub_1000279C4@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  unsigned __int16 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  _BYTE *v82;
  void (*v83)(_BYTE *, uint64_t);
  _BYTE *v84;
  uint64_t v85;
  void *v86;
  char **v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  double result;
  __int128 v124;
  _BYTE v125[12];
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _OWORD v146[2];
  _OWORD v147[10];
  _OWORD v148[2];
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _OWORD v159[2];
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  _OWORD v170[2];
  _BYTE v171[190];
  __int128 v172;
  __int128 v173;
  _OWORD v174[2];
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  _OWORD v181[2];
  __int128 v182;
  _OWORD v183[12];

  LODWORD(v129) = a2;
  v135 = a5;
  v8 = type metadata accessor for WidgetRenderingMode(0);
  v132 = *(_QWORD *)(v8 - 8);
  v133 = v8;
  v9 = __chkstk_darwin(v8);
  v131 = &v125[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v130 = &v125[-v11];
  v12 = sub_100003EA4(&qword_100055B48);
  v13 = __chkstk_darwin(v12);
  v15 = &v125[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __chkstk_darwin(v13);
  v18 = &v125[-v17];
  __chkstk_darwin(v16);
  v20 = &v125[-v19];
  v22 = type metadata accessor for ContentView(0, a3, a4, v21);
  v134 = a1;
  type metadata accessor for ModelEntry(0, a3, a4, v23);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 72))(a3, a4);
  if (!v25)
  {
LABEL_9:
    (*(void (**)(uint64_t, uint64_t, __n128))(a4 + 88))(a3, a4, v26);
    v42 = type metadata accessor for Date(0);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 48))(v15, 1, v42) == 1)
    {
      sub_10000EB5C((uint64_t)v15, &qword_100055B48);
      v43 = LocalizedStringKey.init(stringLiteral:)(0, 0xE000000000000000);
      *(_QWORD *)&v172 = Text.init(_:tableName:bundle:comment:)(v43);
      *((_QWORD *)&v172 + 1) = v44;
      LOBYTE(v173) = v45 & 1;
      *((_QWORD *)&v173 + 1) = v46;
      sub_10002DF70((uint64_t)&v172);
      sub_10001C888((uint64_t)&v172, (uint64_t)v171, &qword_100056390);
      v47 = sub_100003EA4(&qword_100056398);
      v48 = sub_10002DF7C();
      _ConditionalContent<>.init(storage:)(v171, v47, &type metadata for Text, v48, &protocol witness table for Text);
    }
    else
    {
      sub_10000EB5C((uint64_t)v15, &qword_100055B48);
      sub_100026B9C(v22, (uint64_t)&v182);
      v133 = *((_QWORD *)&v183[0] + 1);
      v134 = *(_QWORD *)&v183[0];
      v49 = *((_QWORD *)&v183[1] + 1);
      v50 = v183[2];
      v51 = v183[3];
      v52 = v183[4];
      v53 = *(_QWORD *)&v183[5];
      v54 = WORD4(v183[5]);
      v160 = v182;
      v161 = v183[0];
      v162 = v183[1];
      v131 = (_BYTE *)*((_QWORD *)&v183[1] + 1);
      v132 = *(_QWORD *)&v183[1];
      v163 = v183[2];
      v129 = *(_QWORD *)&v183[4];
      v130 = *(_BYTE **)&v183[2];
      v164 = v183[3];
      v165 = v183[4];
      v127 = *(_QWORD *)&v183[5];
      v128 = *((_QWORD *)&v183[4] + 1);
      *(_QWORD *)&v166 = *(_QWORD *)&v183[5];
      WORD4(v166) = WORD4(v183[5]);
      v126 = WORD4(v183[5]);
      sub_10002E470((uint64_t)&v160);
      sub_10001C888((uint64_t)&v160, (uint64_t)&v182, &qword_100056498);
      sub_10002E47C(v134, v133, v132, v49, v50, *((uint64_t *)&v50 + 1), v51, *((uint64_t *)&v51 + 1), v52, *((uint64_t *)&v52 + 1), v53, v54);
      v55 = sub_100003EA4(&qword_1000563B0);
      v56 = sub_100003EA4(&qword_100056440);
      v57 = sub_10002E020(&qword_1000563A8, &qword_1000563B0, (void (*)(void))sub_10002E090, (void (*)(void))sub_10002E260);
      v58 = sub_100012354(&qword_100056438, &qword_100056440, (uint64_t)&protocol conformance descriptor for ZStack<A>);
      _ConditionalContent<>.init(storage:)(&v182, v55, v56, v57, v58);
      v179 = v157;
      v180 = v158;
      v181[0] = v159[0];
      *(_OWORD *)((char *)v181 + 13) = *(_OWORD *)((char *)v159 + 13);
      v175 = v153;
      v176 = v154;
      v177 = v155;
      v178 = v156;
      v172 = v149;
      v173 = v150;
      v174[0] = v151;
      v174[1] = v152;
      sub_10002E5C8((uint64_t)&v172);
      sub_10001C888((uint64_t)&v172, (uint64_t)&v182, &qword_100056390);
      v59 = sub_100003EA4(&qword_100056398);
      v60 = sub_10002DF7C();
      _ConditionalContent<>.init(storage:)(&v182, v59, &type metadata for Text, v60, &protocol witness table for Text);
      sub_10002DD7C(v134, v133, v132, (uint64_t)v131, (uint64_t)v130, *((uint64_t *)&v50 + 1), v51, *((uint64_t *)&v51 + 1), v129, v128, v127, v126);
      v183[7] = *(_OWORD *)&v171[128];
      v183[8] = *(_OWORD *)&v171[144];
      v183[9] = *(_OWORD *)&v171[160];
      *(_OWORD *)((char *)&v183[9] + 14) = *(_OWORD *)&v171[174];
      v183[3] = *(_OWORD *)&v171[64];
      v183[4] = *(_OWORD *)&v171[80];
      v183[5] = *(_OWORD *)&v171[96];
      v183[6] = *(_OWORD *)&v171[112];
      v182 = *(_OWORD *)v171;
      v183[0] = *(_OWORD *)&v171[16];
      v183[1] = *(_OWORD *)&v171[32];
      v183[2] = *(_OWORD *)&v171[48];
    }
    v41 = v135;
    goto LABEL_25;
  }
  v27 = v24;
  v28 = v25;
  v29 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000) == 0)
    v29 = v24 & 0xFFFFFFFFFFFFLL;
  if (!v29)
  {
    v26 = swift_bridgeObjectRelease(v25);
    goto LABEL_9;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 80))(a3, a4) & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 88))(a3, a4);
    v30 = type metadata accessor for Date(0);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v20, 1, v30) == 1)
    {
      sub_10000EB5C((uint64_t)v20, &qword_100055B48);
      v31 = Image.init(_internalSystemName:)(v27, v28);
      v32 = static Font.caption2.getter();
      KeyPath = swift_getKeyPath(&unk_100043440);
      v34 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
      v35 = Color.init(_:)(v34);
      v36 = swift_getKeyPath(&unk_1000433B0);
      *(_QWORD *)&v182 = v31;
      *((_QWORD *)&v182 + 1) = KeyPath;
      *(_QWORD *)&v183[0] = v32;
      *((_QWORD *)&v183[0] + 1) = v36;
      *(_QWORD *)&v183[1] = v35;
      sub_10002EC90((uint64_t)&v182);
      sub_10001C888((uint64_t)&v182, (uint64_t)&v172, &qword_1000564A8);
      v37 = sub_100003EA4(&qword_1000563D0);
      v38 = sub_100003EA4(&qword_100056400);
      v39 = sub_10002E0B4();
      v40 = sub_10002E1BC();
      _ConditionalContent<>.init(storage:)(&v172, v37, v38, v39, v40);
      v41 = v135;
    }
    else
    {
      sub_10000EB5C((uint64_t)v20, &qword_100055B48);
      v41 = v135;
      if ((v129 & 1) != 0)
      {
        v95 = static VerticalAlignment.center.getter(v94);
        sub_1000289C4(v27, v28, a3, a4, (uint64_t)&v149);
        swift_bridgeObjectRelease(v28);
        *(_OWORD *)&v171[71] = v153;
        *(_OWORD *)&v171[55] = v152;
        *(_OWORD *)&v171[119] = v156;
        *(_OWORD *)&v171[135] = v157;
        *(_OWORD *)&v171[151] = v158;
        v171[167] = v159[0];
        *(_OWORD *)&v171[87] = v154;
        *(_OWORD *)&v171[103] = v155;
        *(_OWORD *)&v171[7] = v149;
        *(_OWORD *)&v171[23] = v150;
        *(_OWORD *)&v171[39] = v151;
        *(_OWORD *)((char *)&v183[7] + 1) = *(_OWORD *)&v171[112];
        *(_OWORD *)((char *)&v183[8] + 1) = *(_OWORD *)&v171[128];
        *(_OWORD *)((char *)&v183[9] + 1) = *(_OWORD *)&v171[144];
        *(_OWORD *)((char *)&v183[3] + 1) = *(_OWORD *)&v171[48];
        *(_OWORD *)((char *)&v183[4] + 1) = *(_OWORD *)&v171[64];
        *(_OWORD *)((char *)&v183[5] + 1) = *(_OWORD *)&v171[80];
        *(_OWORD *)((char *)&v183[6] + 1) = *(_OWORD *)&v171[96];
        *(_OWORD *)((char *)v183 + 1) = *(_OWORD *)v171;
        *(_OWORD *)((char *)&v183[1] + 1) = *(_OWORD *)&v171[16];
        LOBYTE(v136) = 1;
        v182 = (unint64_t)v95;
        LOBYTE(v183[0]) = 1;
        *(_QWORD *)((char *)&v183[10] + 1) = *(_QWORD *)&v171[160];
        *(_OWORD *)((char *)&v183[2] + 1) = *(_OWORD *)&v171[32];
        sub_10002ECB8((uint64_t)&v182);
      }
      else
      {
        v100 = static VerticalAlignment.center.getter(v94);
        sub_100028BA4(v27, v28, a3, a4, (uint64_t)&v149);
        swift_bridgeObjectRelease(v28);
        *(_OWORD *)&v171[71] = v153;
        *(_OWORD *)&v171[55] = v152;
        *(_OWORD *)&v171[119] = v156;
        *(_OWORD *)&v171[135] = v157;
        *(_OWORD *)&v171[151] = v158;
        v171[167] = v159[0];
        *(_OWORD *)&v171[87] = v154;
        *(_OWORD *)&v171[103] = v155;
        *(_OWORD *)&v171[7] = v149;
        *(_OWORD *)&v171[23] = v150;
        *(_OWORD *)&v171[39] = v151;
        *(_OWORD *)((char *)&v183[7] + 1) = *(_OWORD *)&v171[112];
        *(_OWORD *)((char *)&v183[8] + 1) = *(_OWORD *)&v171[128];
        *(_OWORD *)((char *)&v183[9] + 1) = *(_OWORD *)&v171[144];
        *(_OWORD *)((char *)&v183[3] + 1) = *(_OWORD *)&v171[48];
        *(_OWORD *)((char *)&v183[4] + 1) = *(_OWORD *)&v171[64];
        *(_OWORD *)((char *)&v183[5] + 1) = *(_OWORD *)&v171[80];
        *(_OWORD *)((char *)&v183[6] + 1) = *(_OWORD *)&v171[96];
        *(_OWORD *)((char *)v183 + 1) = *(_OWORD *)v171;
        *(_OWORD *)((char *)&v183[1] + 1) = *(_OWORD *)&v171[16];
        LOBYTE(v136) = 1;
        v182 = (unint64_t)v100;
        LOBYTE(v183[0]) = 1;
        *(_QWORD *)((char *)&v183[10] + 1) = *(_QWORD *)&v171[160];
        *(_OWORD *)((char *)&v183[2] + 1) = *(_OWORD *)&v171[32];
        sub_10002ECA0((uint64_t)&v182);
      }
      sub_10001C888((uint64_t)&v182, (uint64_t)&v172, &qword_1000564B0);
      v101 = sub_100003EA4(&qword_100056410);
      v102 = sub_100003EA4(&qword_100056420);
      v103 = sub_100012354(&qword_100056408, &qword_100056410, (uint64_t)&protocol conformance descriptor for HStack<A>);
      v104 = sub_100012354(&qword_100056418, &qword_100056420, (uint64_t)&protocol conformance descriptor for HStack<A>);
      _ConditionalContent<>.init(storage:)(&v172, v101, v102, v103, v104);
      v183[7] = v168;
      v183[8] = v169;
      v183[9] = v170[0];
      *(_OWORD *)((char *)&v183[9] + 10) = *(_OWORD *)((char *)v170 + 10);
      v183[3] = v164;
      v183[4] = v165;
      v183[5] = v166;
      v183[6] = v167;
      v182 = v160;
      v183[0] = v161;
      v183[1] = v162;
      v183[2] = v163;
      sub_10002ECAC((uint64_t)&v182);
      sub_10001C888((uint64_t)&v182, (uint64_t)&v172, &qword_1000564A8);
      v105 = sub_100003EA4(&qword_1000563D0);
      v106 = sub_100003EA4(&qword_100056400);
      v107 = sub_10002E0B4();
      v108 = sub_10002E1BC();
      _ConditionalContent<>.init(storage:)(&v172, v105, v106, v107, v108);
    }
    v183[7] = *(_OWORD *)&v171[128];
    v183[8] = *(_OWORD *)&v171[144];
    v183[9] = *(_OWORD *)&v171[160];
    *(_OWORD *)((char *)&v183[9] + 11) = *(_OWORD *)&v171[171];
    v183[3] = *(_OWORD *)&v171[64];
    v183[4] = *(_OWORD *)&v171[80];
    v183[5] = *(_OWORD *)&v171[96];
    v183[6] = *(_OWORD *)&v171[112];
    v182 = *(_OWORD *)v171;
    v183[0] = *(_OWORD *)&v171[16];
    v183[1] = *(_OWORD *)&v171[32];
    v183[2] = *(_OWORD *)&v171[48];
    sub_10002EC98((uint64_t)&v182);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 88))(a3, a4);
    v61 = type metadata accessor for Date(0);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 48))(v18, 1, v61) == 1)
    {
      sub_10000EB5C((uint64_t)v18, &qword_100055B48);
      *(_QWORD *)&v182 = v27;
      *((_QWORD *)&v182 + 1) = v28;
      v62 = sub_100003F74();
      v63 = Text.init<A>(_:)(&v182, &type metadata for String, v62);
      v65 = v64;
      v67 = v66;
      v69 = v68 & 1;
      v70 = static Font.caption2.getter();
      v129 = Text.font(_:)(v70, v63, v65, v69, v67);
      v72 = v71;
      v74 = v73;
      v76 = v75;
      swift_release(v70);
      v77 = v74 & 1;
      sub_10002D6F4(v63, v65, v69);
      swift_bridgeObjectRelease(v67);
      v78 = swift_getKeyPath(&unk_1000433E0);
      v79 = swift_getKeyPath(&unk_100043410);
      v80 = v130;
      v81 = sub_10001115C((uint64_t)v130);
      v82 = v131;
      static WidgetRenderingMode.accented.getter(v81);
      LOBYTE(v63) = static WidgetRenderingMode.== infix(_:_:)(v80, v82);
      v83 = *(void (**)(_BYTE *, uint64_t))(v132 + 8);
      v84 = v82;
      v85 = v133;
      v83(v84, v133);
      v83(v80, v85);
      v86 = (void *)objc_opt_self(UIColor);
      v87 = &selRef_labelColor;
      if ((v63 & 1) == 0)
        v87 = &selRef_secondaryLabelColor;
      v88 = Color.init(_:)(objc_msgSend(v86, *v87));
      v89 = swift_getKeyPath(&unk_1000433B0);
      *(_QWORD *)&v172 = v129;
      *((_QWORD *)&v172 + 1) = v72;
      *(_QWORD *)&v173 = v77;
      *((_QWORD *)&v173 + 1) = v76;
      *(_OWORD *)((char *)v174 + 8) = xmmword_1000434F0;
      *(_QWORD *)&v174[0] = v78;
      *((_QWORD *)&v174[1] + 1) = v79;
      *(_QWORD *)&v175 = 0x3FE0000000000000;
      *((_QWORD *)&v175 + 1) = v89;
      *(_QWORD *)&v177 = 0;
      v176 = (unint64_t)v88;
      WORD4(v177) = 0;
      BYTE10(v177) = 1;
      v90 = sub_100003EA4(&qword_100056440);
      v91 = sub_100003EA4(&qword_100056450);
      v92 = sub_100012354(&qword_100056438, &qword_100056440, (uint64_t)&protocol conformance descriptor for ZStack<A>);
      v93 = sub_10002E2E4();
      _ConditionalContent<>.init(storage:)(&v172, v90, v91, v92, v93);
    }
    else
    {
      swift_bridgeObjectRelease(v28);
      sub_10000EB5C((uint64_t)v18, &qword_100055B48);
      sub_100026B9C(v22, (uint64_t)&v182);
      v172 = v182;
      v173 = v183[0];
      v174[0] = v183[1];
      v174[1] = v183[2];
      v175 = v183[3];
      v176 = v183[4];
      *(_QWORD *)&v177 = *(_QWORD *)&v183[5];
      WORD4(v177) = WORD4(v183[5]);
      BYTE10(v177) = 0;
      v96 = sub_100003EA4(&qword_100056440);
      v97 = sub_100003EA4(&qword_100056450);
      v98 = sub_100012354(&qword_100056438, &qword_100056440, (uint64_t)&protocol conformance descriptor for ZStack<A>);
      v99 = sub_10002E2E4();
      _ConditionalContent<>.init(storage:)(&v172, v96, v97, v98, v99);
    }
    v41 = v135;
    sub_10002E678((uint64_t)&v182);
  }
  sub_10001C888((uint64_t)&v182, (uint64_t)&v172, &qword_1000564A0);
  v109 = sub_100003EA4(&qword_1000563C0);
  v110 = sub_100003EA4(&qword_100056430);
  v111 = sub_10002E090();
  v112 = sub_10002E260();
  _ConditionalContent<>.init(storage:)(&v172, v109, v110, v111, v112);
  v157 = v147[8];
  v158 = v147[9];
  v159[0] = v148[0];
  *(_OWORD *)((char *)v159 + 12) = *(_OWORD *)((char *)v148 + 12);
  v153 = v147[4];
  v154 = v147[5];
  v155 = v147[6];
  v156 = v147[7];
  v149 = v147[0];
  v150 = v147[1];
  v151 = v147[2];
  v152 = v147[3];
  sub_10002E684((uint64_t)&v149);
  sub_10001C888((uint64_t)&v149, (uint64_t)&v182, &qword_100056498);
  sub_10002EB28((uint64_t)v147, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10002E72C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10002E97C);
  v113 = sub_100003EA4(&qword_1000563B0);
  v114 = sub_100003EA4(&qword_100056440);
  v115 = sub_10002E020(&qword_1000563A8, &qword_1000563B0, (void (*)(void))sub_10002E090, (void (*)(void))sub_10002E260);
  v116 = sub_100012354(&qword_100056438, &qword_100056440, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  _ConditionalContent<>.init(storage:)(&v182, v113, v114, v115, v116);
  v168 = v144;
  v169 = v145;
  v170[0] = v146[0];
  *(_OWORD *)((char *)v170 + 13) = *(_OWORD *)((char *)v146 + 13);
  v164 = v140;
  v165 = v141;
  v166 = v142;
  v167 = v143;
  v160 = v136;
  v161 = v137;
  v162 = v138;
  v163 = v139;
  v179 = v144;
  v180 = v145;
  v181[0] = v146[0];
  *(_OWORD *)((char *)v181 + 13) = *(_OWORD *)((char *)v146 + 13);
  v175 = v140;
  v176 = v141;
  v177 = v142;
  v178 = v143;
  v172 = v136;
  v173 = v137;
  v174[0] = v138;
  v174[1] = v139;
  sub_10002E5C8((uint64_t)&v172);
  sub_10001C888((uint64_t)&v172, (uint64_t)&v182, &qword_100056390);
  sub_10002EBB4((uint64_t)&v160, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10002E72C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10002E97C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10002E47C);
  v117 = sub_100003EA4(&qword_100056398);
  v118 = sub_10002DF7C();
  _ConditionalContent<>.init(storage:)(&v182, v117, &type metadata for Text, v118, &protocol witness table for Text);
  sub_10002EB28((uint64_t)v147, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10002DB30, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10002DEB8);
  sub_10002EBB4((uint64_t)&v160, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10002DB30, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10002DEB8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10002DD7C);
  v183[7] = *(_OWORD *)&v171[128];
  v183[8] = *(_OWORD *)&v171[144];
  v183[9] = *(_OWORD *)&v171[160];
  *(_OWORD *)((char *)&v183[9] + 14) = *(_OWORD *)&v171[174];
  v183[3] = *(_OWORD *)&v171[64];
  v183[4] = *(_OWORD *)&v171[80];
  v183[5] = *(_OWORD *)&v171[96];
  v183[6] = *(_OWORD *)&v171[112];
  v182 = *(_OWORD *)v171;
  v183[0] = *(_OWORD *)&v171[16];
  v183[1] = *(_OWORD *)&v171[32];
  v183[2] = *(_OWORD *)&v171[48];
LABEL_25:
  v119 = v183[8];
  v41[8] = v183[7];
  v41[9] = v119;
  v41[10] = v183[9];
  *(_OWORD *)((char *)v41 + 174) = *(_OWORD *)((char *)&v183[9] + 14);
  v120 = v183[4];
  v41[4] = v183[3];
  v41[5] = v120;
  v121 = v183[6];
  v41[6] = v183[5];
  v41[7] = v121;
  v122 = v183[0];
  *v41 = v182;
  v41[1] = v122;
  result = *(double *)&v183[1];
  v124 = v183[2];
  v41[2] = v183[1];
  v41[3] = v124;
  return result;
}

uint64_t sub_1000289C4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 v29;
  _QWORD v30[13];
  unsigned __int16 v31;
  char v32;

  v8 = type metadata accessor for ContentView(0, a3, a4, a3);
  sub_100026B9C(v8, (uint64_t)v30);
  v27 = v30[1];
  v28 = v30[0];
  v25 = v30[3];
  v26 = v30[2];
  v9 = v30[5];
  v10 = v30[6];
  v11 = v30[7];
  v12 = v30[8];
  v13 = v30[9];
  v14 = v30[11];
  v23 = v30[10];
  v24 = v30[4];
  v15 = v30[12];
  v29 = v31;
  swift_bridgeObjectRetain(a2);
  v22 = Image.init(_internalSystemName:)(a1, a2);
  v21 = static Font.caption2.getter();
  KeyPath = swift_getKeyPath(&unk_100043440);
  v17 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  v18 = Color.init(_:)(v17);
  v19 = swift_getKeyPath(&unk_1000433B0);
  v32 = 1;
  *(_DWORD *)(a5 + 106) = v30[0];
  *(_WORD *)(a5 + 110) = WORD2(v30[0]);
  *(_QWORD *)a5 = v28;
  *(_QWORD *)(a5 + 8) = v27;
  *(_QWORD *)(a5 + 16) = v26;
  *(_QWORD *)(a5 + 24) = v25;
  *(_QWORD *)(a5 + 32) = v24;
  *(_QWORD *)(a5 + 40) = v9;
  *(_QWORD *)(a5 + 48) = v10;
  *(_QWORD *)(a5 + 56) = v11;
  *(_QWORD *)(a5 + 64) = v12;
  *(_QWORD *)(a5 + 72) = v13;
  *(_QWORD *)(a5 + 80) = v23;
  *(_QWORD *)(a5 + 88) = v14;
  *(_QWORD *)(a5 + 96) = v15;
  *(_WORD *)(a5 + 104) = v29;
  *(_QWORD *)(a5 + 112) = v22;
  *(_QWORD *)(a5 + 120) = KeyPath;
  *(_QWORD *)(a5 + 128) = v21;
  *(_QWORD *)(a5 + 136) = v19;
  *(_QWORD *)(a5 + 144) = v18;
  *(_QWORD *)(a5 + 152) = 0;
  *(_BYTE *)(a5 + 160) = 1;
  sub_10002E47C(v26, v25, v24, v9, v10, v11, v12, v13, v23, v14, v15, v29);
  return sub_10002DD7C(v26, v25, v24, v9, v10, v11, v12, v13, v23, v14, v15, v29);
}

uint64_t sub_100028BA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t KeyPath;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 v53;
  char v54;

  swift_bridgeObjectRetain(a2);
  v10 = Image.init(_internalSystemName:)(a1, a2);
  v40 = static Font.caption2.getter();
  KeyPath = swift_getKeyPath(&unk_100043440);
  v12 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  v13 = Color.init(_:)(v12);
  v14 = swift_getKeyPath(&unk_1000433B0);
  v16 = type metadata accessor for ContentView(0, a3, a4, v15);
  sub_100026B9C(v16, (uint64_t)&v41);
  v17 = v42;
  v18 = v43;
  v37 = v43;
  v38 = v42;
  v19 = v44;
  v20 = v45;
  v39 = v44;
  v21 = v46;
  v22 = v47;
  v23 = v48;
  v24 = v49;
  v35 = v48;
  v36 = v46;
  v33 = v45;
  v34 = v49;
  v26 = v50;
  v25 = v51;
  v27 = v52;
  v28 = v53;
  v29 = v41;
  v54 = 1;
  *(_DWORD *)(a5 + 146) = v41;
  *(_WORD *)(a5 + 150) = WORD2(v41);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = KeyPath;
  *(_QWORD *)(a5 + 16) = v40;
  *(_QWORD *)(a5 + 24) = v14;
  *(_QWORD *)(a5 + 32) = v13;
  *(_OWORD *)(a5 + 40) = v29;
  *(_QWORD *)(a5 + 56) = v17;
  *(_QWORD *)(a5 + 64) = v18;
  *(_QWORD *)(a5 + 72) = v19;
  *(_QWORD *)(a5 + 80) = v20;
  *(_QWORD *)(a5 + 88) = v21;
  *(_QWORD *)(a5 + 96) = v22;
  *(_QWORD *)(a5 + 104) = v23;
  *(_QWORD *)(a5 + 112) = v24;
  *(_QWORD *)(a5 + 120) = v26;
  *(_QWORD *)(a5 + 128) = v25;
  v30 = v25;
  v32 = v25;
  *(_QWORD *)(a5 + 136) = v27;
  *(_WORD *)(a5 + 144) = v28;
  *(_QWORD *)(a5 + 152) = 0;
  *(_BYTE *)(a5 + 160) = 1;
  swift_retain(v10);
  swift_retain(KeyPath);
  swift_retain(v40);
  swift_retain(v14);
  swift_retain(v13);
  sub_10002E47C(v38, v37, v39, v33, v36, v22, v35, v34, v26, v30, v27, v28);
  sub_10002DD7C(v38, v37, v39, v33, v36, v22, v35, v34, v26, v32, v27, v28);
  swift_release(v13);
  swift_release(v14);
  swift_release(v40);
  swift_release(KeyPath);
  return swift_release(v10);
}

double sub_100028DE4@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double result;

  v5 = sub_100023024(a1);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  type metadata accessor for ModelEntry(0, v6, v7, v8);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 72))(v6, v7);
  if (!v10)
    goto LABEL_6;
  v12 = v9;
  v13 = v10;
  v11 = swift_bridgeObjectRelease(v10);
  v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0)
    v14 = v12 & 0xFFFFFFFFFFFFLL;
  if (v14)
    v15 = 1;
  else
LABEL_6:
    v15 = 3;
  if (((*(uint64_t (**)(uint64_t, uint64_t, __n128))(v7 + 24))(v6, v7, v11) & 1) != 0)
    v16 = sub_100022D30(*(_QWORD *)(v2 + *(int *)(a1 + 52) + 120), a1);
  else
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 96))(v6, v7);
  v18 = v16;
  v19 = v17;
  *a2 = static Alignment.center.getter(v16);
  a2[1] = v20;
  v21 = sub_100003EA4(&qword_100056288);
  sub_100028F14(v18, v19, v15, v5 & 1, (uint64_t)a2 + *(int *)(v21 + 44));
  *(_QWORD *)&result = swift_bridgeObjectRelease(v19).n128_u64[0];
  return result;
}

uint64_t sub_100028F14@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  NSString *v46;
  NSString *v47;
  uint64_t KeyPath;
  _BYTE *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  _BYTE v62[4];
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[2];

  v10 = sub_100003EA4(&qword_100056290);
  __chkstk_darwin(v10);
  v12 = &v62[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = (int *)type metadata accessor for SizeCategoryAwareMinimumScaleFactor(0);
  __chkstk_darwin(v13);
  v15 = &v62[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v74 = sub_100003EA4(&qword_100056248);
  __chkstk_darwin(v74);
  v17 = &v62[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v75 = sub_100003EA4(&qword_100056250);
  __chkstk_darwin(v75);
  v19 = &v62[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = sub_100003EA4(&qword_100056258);
  v21 = __chkstk_darwin(v20);
  v22 = __chkstk_darwin(v21);
  v23 = __chkstk_darwin(v22);
  if (!a2)
    goto LABEL_6;
  v27 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v27 = a1 & 0xFFFFFFFFFFFFLL;
  if (v27)
  {
    v76[0] = a1;
    v76[1] = a2;
    v71 = &v62[-v24];
    v72 = v25;
    v68 = v26;
    v69 = v23;
    v28 = sub_100003F74();
    swift_bridgeObjectRetain(a2);
    v29 = Text.init<A>(_:)(v76, &type metadata for String, v28);
    v31 = v30;
    v70 = v12;
    v33 = v32;
    v67 = a4;
    v35 = v34 & 1;
    v36 = static Font.footnote.getter();
    v73 = a5;
    v37 = v36;
    v38 = Font.bold()();
    v66 = a3;
    v39 = v38;
    swift_release(v37);
    v40 = Text.font(_:)(v39, v29, v31, v35, v33);
    v64 = v41;
    v65 = v42;
    v63 = v43;
    swift_release(v39);
    sub_10002D6F4(v29, v31, v35);
    swift_bridgeObjectRelease(v33);
    *v15 = swift_getKeyPath(&unk_100043350);
    v44 = sub_100003EA4(&qword_100056268);
    swift_storeEnumTagMultiPayload(v15, v44, 0);
    *(_QWORD *)((char *)v15 + v13[5]) = UIFontTextStyleFootnote;
    *(_QWORD *)((char *)v15 + v13[6]) = UIFontTextStyleSubheadline;
    *(_QWORD *)((char *)v15 + v13[7]) = v66;
    sub_100015134((uint64_t)v15, (uint64_t)&v17[*(int *)(v74 + 36)], type metadata accessor for SizeCategoryAwareMinimumScaleFactor);
    v45 = v64;
    *(_QWORD *)v17 = v40;
    *((_QWORD *)v17 + 1) = v45;
    v17[16] = v63 & 1;
    *((_QWORD *)v17 + 3) = v65;
    v46 = UIFontTextStyleFootnote;
    v47 = UIFontTextStyleSubheadline;
    sub_100015178((uint64_t)v15, type metadata accessor for SizeCategoryAwareMinimumScaleFactor);
    LOBYTE(v31) = v67;
    LOBYTE(v33) = v67 & 1;
    KeyPath = swift_getKeyPath(&unk_100043380);
    sub_100012310((uint64_t)v17, (uint64_t)v19, &qword_100056248);
    v49 = &v19[*(int *)(v75 + 36)];
    *(_QWORD *)v49 = KeyPath;
    v49[8] = v33;
    sub_10000EB5C((uint64_t)v17, &qword_100056248);
    v50 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
    v51 = Color.init(_:)(v50);
    v52 = swift_getKeyPath(&unk_1000433B0);
    v53 = v68;
    sub_100012310((uint64_t)v19, v68, &qword_100056250);
    v54 = (uint64_t *)(v53 + *(int *)(v69 + 36));
    *v54 = v52;
    v54[1] = v51;
    sub_10000EB5C((uint64_t)v19, &qword_100056250);
    v55 = v71;
    sub_10001C888(v53, (uint64_t)v71, &qword_100056258);
    v56 = v72;
    sub_100012310((uint64_t)v55, v72, &qword_100056258);
    v57 = (uint64_t)v70;
    sub_100012310(v56, (uint64_t)v70, &qword_100056258);
    v58 = v57 + *(int *)(sub_100003EA4(&qword_1000562A0) + 48);
    *(_QWORD *)v58 = 0;
    *(_BYTE *)(v58 + 8) = (v31 & 1) == 0;
    *(_BYTE *)(v58 + 9) = v33;
    sub_10000EB5C((uint64_t)v55, &qword_100056258);
    sub_10000EB5C(v56, &qword_100056258);
    v59 = sub_100003EA4(&qword_100056298);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v57, 0, 1, v59);
    return sub_10001C888(v57, v73, &qword_100056290);
  }
  else
  {
LABEL_6:
    v61 = sub_100003EA4(&qword_100056298);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(a5, 1, 1, v61);
  }
}

double sub_1000293F8@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;

  v5 = sub_100023024(a1);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  type metadata accessor for ModelEntry(0, v6, v7, v8);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7) & 1) != 0)
    v9 = sub_100022D30(*(_QWORD *)(v2 + *(int *)(a1 + 52) + 128), a1);
  else
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 104))(v6, v7);
  v11 = v9;
  v12 = v10;
  *a2 = static Alignment.center.getter(v9);
  a2[1] = v13;
  v14 = sub_100003EA4(&qword_100056238);
  sub_1000294D8(v11, v12, v5 & 1, (uint64_t)a2 + *(int *)(v14 + 44));
  *(_QWORD *)&result = swift_bridgeObjectRelease(v12).n128_u64[0];
  return result;
}

uint64_t sub_1000294D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  char v43;
  uint64_t v44;
  char **v45;
  uint64_t v46;
  NSString *v47;
  uint64_t KeyPath;
  char *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[2];

  v8 = sub_100003EA4(&qword_100056240);
  __chkstk_darwin(v8);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for SizeCategoryAwareMinimumScaleFactor(0);
  __chkstk_darwin(v11);
  v13 = (_QWORD *)((char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v71 = sub_100003EA4(&qword_100056248);
  __chkstk_darwin(v71);
  v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100003EA4(&qword_100056250);
  __chkstk_darwin(v72);
  v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003EA4(&qword_100056258);
  v19 = __chkstk_darwin(v18);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v61 - v21;
  v23 = __chkstk_darwin(v20);
  if (!a2)
    goto LABEL_12;
  v26 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v26 = a1 & 0xFFFFFFFFFFFFLL;
  if (v26)
  {
    v73[0] = a1;
    v73[1] = a2;
    v68 = (uint64_t)&v61 - v24;
    v69 = v25;
    v66 = v23;
    v27 = sub_100003F74();
    swift_bridgeObjectRetain(a2);
    v28 = Text.init<A>(_:)(v73, &type metadata for String, v27);
    v30 = v29;
    v67 = v10;
    v32 = v31;
    v61 = a3;
    v34 = v33 & 1;
    v35 = static Font.caption2.getter();
    v70 = a4;
    v36 = v35;
    v37 = Text.font(_:)(v35, v28, v30, v34, v32);
    v63 = v38;
    v64 = v37;
    v62 = v39;
    v65 = v40;
    swift_release(v36);
    sub_10002D6F4(v28, v30, v34);
    swift_bridgeObjectRelease(v32);
    *v13 = swift_getKeyPath(&unk_100043350);
    v41 = sub_100003EA4(&qword_100056268);
    swift_storeEnumTagMultiPayload(v13, v41, 0);
    v43 = v61 & 1;
    v42 = (v61 & 1) == 0;
    v44 = 4;
    *(_QWORD *)((char *)v13 + v11[5]) = UIFontTextStyleCaption2;
    *(_QWORD *)((char *)v13 + v11[6]) = UIFontTextStyleCaption2;
    if (v42)
      v44 = 1;
    *(_QWORD *)((char *)v13 + v11[7]) = v44;
    if (v42)
      v45 = &selRef_labelColor;
    else
      v45 = &selRef_secondaryLabelColor;
    sub_100015134((uint64_t)v13, (uint64_t)&v15[*(int *)(v71 + 36)], type metadata accessor for SizeCategoryAwareMinimumScaleFactor);
    v46 = v63;
    *(_QWORD *)v15 = v64;
    *((_QWORD *)v15 + 1) = v46;
    v15[16] = v62 & 1;
    *((_QWORD *)v15 + 3) = v65;
    v47 = UIFontTextStyleCaption2;
    sub_100015178((uint64_t)v13, type metadata accessor for SizeCategoryAwareMinimumScaleFactor);
    KeyPath = swift_getKeyPath(&unk_100043380);
    sub_100012310((uint64_t)v15, (uint64_t)v17, &qword_100056248);
    v49 = &v17[*(int *)(v72 + 36)];
    *(_QWORD *)v49 = KeyPath;
    v49[8] = v43;
    sub_10000EB5C((uint64_t)v15, &qword_100056248);
    v50 = objc_msgSend((id)objc_opt_self(UIColor), *v45);
    v51 = Color.init(_:)(v50);
    v52 = swift_getKeyPath(&unk_1000433B0);
    sub_100012310((uint64_t)v17, (uint64_t)v22, &qword_100056250);
    v53 = (uint64_t *)&v22[*(int *)(v66 + 36)];
    *v53 = v52;
    v53[1] = v51;
    sub_10000EB5C((uint64_t)v17, &qword_100056250);
    v54 = v68;
    sub_10001C888((uint64_t)v22, v68, &qword_100056258);
    v55 = v69;
    sub_100012310(v54, v69, &qword_100056258);
    v56 = (uint64_t)v67;
    sub_100012310(v55, (uint64_t)v67, &qword_100056258);
    v57 = v56 + *(int *)(sub_100003EA4(&qword_100056270) + 48);
    *(_QWORD *)v57 = 0;
    *(_BYTE *)(v57 + 8) = 1;
    sub_10000EB5C(v54, &qword_100056258);
    sub_10000EB5C(v55, &qword_100056258);
    v58 = sub_100003EA4(&qword_100056260);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v56, 0, 1, v58);
    return sub_10001C888(v56, v70, &qword_100056240);
  }
  else
  {
LABEL_12:
    v60 = sub_100003EA4(&qword_100056260);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(a4, 1, 1, v60);
  }
}

double sub_1000299A0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double result;

  v4 = v3;
  v7 = v3 + *(int *)(a1 + 44);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = type metadata accessor for ModelEntry(0, v8, v9, a2);
  v11 = 0;
  v12 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 40))(v8, v9) & 1) != 0)
  {
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 200))(v8, v9);
    v12 = v13;
  }
  v14 = *(double *)(v3 + *(int *)(a1 + 52) + 16);
  v15 = *(int *)(v10 + 36);
  v16 = v14 * *(double *)(v7 + *(int *)(type metadata accessor for ViewContext(0) + 20) + v15 + 8);
  *(_QWORD *)a3 = static VerticalAlignment.center.getter();
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  v17 = sub_100003EA4(&qword_1000562A8);
  sub_100029AB8(v11, v12, v4, v8, v9, (_QWORD *)(a3 + *(int *)(v17 + 44)), v16);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v12).n128_u64[0];
  return result;
}

uint64_t sub_100029AB8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>, double a7@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _OWORD v51[3];

  v47 = a4;
  v48 = a5;
  v45 = a1;
  v46 = a3;
  v50 = a6;
  v9 = sub_100003EA4(&qword_1000562B0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100003EA4(&qword_1000562B8);
  __chkstk_darwin(v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100003EA4(&qword_1000562C0);
  v15 = __chkstk_darwin(v49);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v45 - v18;
  v20 = sub_100003EA4(&qword_1000562C8);
  __chkstk_darwin(v20);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100003EA4(&qword_1000562D0);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v45 - v28;
  if (a2)
  {
    *v11 = static Alignment.center.getter(v27);
    v11[1] = v30;
    v31 = sub_100003EA4(&qword_1000562F8);
    sub_100029E98(v46, v45, a2, v47, v48, (uint64_t)v11 + *(int *)(v31 + 44));
    sub_100012310((uint64_t)v11, (uint64_t)v14, &qword_1000562B0);
    v32 = &v14[*(int *)(v12 + 36)];
    *(_QWORD *)v32 = 0;
    *((_WORD *)v32 + 4) = 1;
    v33 = sub_10000EB5C((uint64_t)v11, &qword_1000562B0);
    v34 = static Alignment.center.getter(v33);
    _FrameLayout.init(width:height:alignment:)(v51, 0, 1, *(_QWORD *)&a7, 0, v34, v35);
    sub_100012310((uint64_t)v14, (uint64_t)v17, &qword_1000562B8);
    v36 = v49;
    v37 = &v17[*(int *)(v49 + 36)];
    v38 = v51[1];
    *(_OWORD *)v37 = v51[0];
    *((_OWORD *)v37 + 1) = v38;
    *((_OWORD *)v37 + 2) = v51[2];
    sub_10000EB5C((uint64_t)v14, &qword_1000562B8);
    sub_10001C888((uint64_t)v17, (uint64_t)v19, &qword_1000562C0);
    sub_100012310((uint64_t)v19, (uint64_t)v22, &qword_1000562C0);
    swift_storeEnumTagMultiPayload(v22, v20, 0);
    v39 = sub_10002001C(&qword_1000562D8, &qword_1000562C0, (void (*)(void))sub_10002D92C);
    _ConditionalContent<>.init(storage:)(v22, v36, &type metadata for EmptyView, v39, &protocol witness table for EmptyView);
    sub_10000EB5C((uint64_t)v19, &qword_1000562C0);
  }
  else
  {
    swift_storeEnumTagMultiPayload(v22, v20, 1);
    v40 = sub_10002001C(&qword_1000562D8, &qword_1000562C0, (void (*)(void))sub_10002D92C);
    _ConditionalContent<>.init(storage:)(v22, v49, &type metadata for EmptyView, v40, &protocol witness table for EmptyView);
  }
  sub_100012310((uint64_t)v29, (uint64_t)v26, &qword_1000562D0);
  v41 = v50;
  *v50 = 0;
  *((_BYTE *)v41 + 8) = 1;
  v42 = sub_100003EA4(&qword_1000562F0);
  sub_100012310((uint64_t)v26, (uint64_t)v41 + *(int *)(v42 + 48), &qword_1000562D0);
  v43 = (char *)v41 + *(int *)(v42 + 64);
  *(_QWORD *)v43 = 0;
  v43[8] = 1;
  sub_10000EB5C((uint64_t)v29, &qword_1000562D0);
  return sub_10000EB5C((uint64_t)v26, &qword_1000562D0);
}

uint64_t sub_100029E98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD, _QWORD, _QWORD);
  char *v54;
  char v55;
  void (*v56)(_QWORD, _QWORD);
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t);
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  char *v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  void *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  Swift::String v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, char *, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  void (*v112)(char *, uint64_t);
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  Swift::String v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t (*v138)(char *, uint64_t);
  void (*v139)(char *);
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(char *, _QWORD, uint64_t, uint64_t);
  void (*v146)(_QWORD, _QWORD, _QWORD);
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t aBlock;
  unint64_t v151;
  id (*v152)(uint64_t, void *);
  void *v153;
  id (*v154)(void *);
  uint64_t v155;

  v120 = a5;
  v119 = a4;
  v122._object = a3;
  v122._countAndFlagsBits = a2;
  v142 = a1;
  v133 = a6;
  v130 = type metadata accessor for WidgetRenderingMode(0);
  v124 = *(_QWORD *)(v130 - 8);
  v6 = __chkstk_darwin(v130);
  v129 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v128 = (uint64_t)&v114 - v8;
  v123 = sub_100003EA4(&qword_100055F68);
  __chkstk_darwin(v123);
  v127 = (char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_100003EA4(&qword_100055F70);
  v10 = __chkstk_darwin(v126);
  v132 = (uint64_t)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v125 = (uint64_t)&v114 - v13;
  __chkstk_darwin(v12);
  v131 = (uint64_t)&v114 - v14;
  v15 = sub_100003EA4(&qword_100056300);
  __chkstk_darwin(v15);
  v117 = (char *)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100003EA4(&qword_100056308);
  v17 = __chkstk_darwin(v118);
  v144 = (uint64_t)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v143 = (uint64_t)&v114 - v19;
  v20 = type metadata accessor for ColorScheme(0);
  v21 = *(_QWORD *)(v20 - 8);
  v146 = (void (*)(_QWORD, _QWORD, _QWORD))v20;
  v147 = v21;
  v22 = __chkstk_darwin(v20);
  v114 = (char *)&v114 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v116 = (char *)&v114 - v24;
  v25 = sub_100003EA4(&qword_100055EC0);
  __chkstk_darwin(v25);
  v27 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Image.ResizingMode(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&v114 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100003EA4(&qword_100055EC8);
  v134 = *(_QWORD *)(v32 - 8);
  v33 = __chkstk_darwin(v32);
  v121 = (char *)&v114 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v136 = (char *)&v114 - v36;
  v37 = __chkstk_darwin(v35);
  v149 = (char *)&v114 - v38;
  __chkstk_darwin(v37);
  v40 = (char *)&v114 - v39;
  v115 = sub_100003EA4(&qword_100056310);
  v41 = __chkstk_darwin(v115);
  v141 = (uint64_t)&v114 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __chkstk_darwin(v41);
  v45 = (char *)&v114 - v44;
  __chkstk_darwin(v43);
  v148 = (uint64_t)&v114 - v46;
  v47 = Image.init(_:bundle:)(0xD00000000000001ALL, 0x8000000100041CF0, 0);
  v140 = enum case for Image.ResizingMode.stretch(_:);
  v139 = *(void (**)(char *))(v29 + 104);
  v137 = v28;
  v139(v31);
  v48 = 0.0;
  v49 = Image.resizable(capInsets:resizingMode:)(v31, v47, 0.0, 0.0, 0.0, 0.0);
  swift_release(v47);
  v138 = *(uint64_t (**)(char *, uint64_t))(v29 + 8);
  v50 = v138(v31, v28);
  static WidgetAccentedRenderingMode.fullColor.getter(v50);
  v135 = type metadata accessor for WidgetAccentedRenderingMode(0);
  v145 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 56);
  v145(v27, 0, 1, v135);
  Image.widgetAccentedRenderingMode(_:)(v27, v49);
  swift_release(v49);
  sub_10000EB5C((uint64_t)v27, &qword_100055EC0);
  v51 = (uint64_t)v116;
  sub_100011188((uint64_t)v116);
  v53 = v146;
  v52 = v147;
  v54 = v114;
  (*(void (**)(char *, _QWORD, _QWORD))(v147 + 104))(v114, enum case for ColorScheme.light(_:), v146);
  v55 = static ColorScheme.== infix(_:_:)(v51, v54);
  v56 = *(void (**)(_QWORD, _QWORD))(v52 + 8);
  v56(v54, v53);
  v56(v51, v53);
  if ((v55 & 1) != 0)
    v57 = 0.3;
  else
    v57 = 1.0;
  v58 = v134;
  v146 = *(void (**)(_QWORD, _QWORD, _QWORD))(v134 + 16);
  v146(v45, v40, v32);
  *(double *)&v45[*(int *)(v115 + 36)] = v57;
  v147 = *(_QWORD *)(v58 + 8);
  ((void (*)(char *, uint64_t))v147)(v40, v32);
  v59 = v137;
  sub_10001C888((uint64_t)v45, v148, &qword_100056310);
  v60 = Image.init(_:bundle:)(0xD000000000000023, 0x8000000100041D10, 0);
  v61 = v140;
  v62 = (void (*)(char *, uint64_t, uint64_t))v139;
  ((void (*)(char *, _QWORD, uint64_t))v139)(v31, v140, v59);
  v63 = Image.resizable(capInsets:resizingMode:)(v31, v60, 0.0, 0.0, 0.0, 0.0);
  swift_release(v60);
  v64 = (void (*)(char *, uint64_t))v138;
  v65 = v138(v31, v59);
  static WidgetAccentedRenderingMode.fullColor.getter(v65);
  v145(v27, 0, 1, v135);
  v66 = v136;
  Image.widgetAccentedRenderingMode(_:)(v27, v63);
  swift_release(v63);
  sub_10000EB5C((uint64_t)v27, &qword_100055EC0);
  v67 = *(void (**)(char *, char *, uint64_t))(v134 + 32);
  v134 = v32;
  v67(v149, v66, v32);
  v68 = Image.init(_:bundle:)(0xD00000000000001BLL, 0x8000000100041D40, 0);
  v62(v31, v61, v59);
  v69 = Image.resizable(capInsets:resizingMode:)(v31, v68, 0.0, 0.0, 0.0, 0.0);
  swift_release(v68);
  v116 = v31;
  v64(v31, v59);
  v70 = enum case for Image.TemplateRenderingMode.template(_:);
  v71 = type metadata accessor for Image.TemplateRenderingMode(0);
  v72 = *(_QWORD *)(v71 - 8);
  v73 = (uint64_t)v117;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 104))(v117, v70, v71);
  v74 = v136;
  v75 = v71;
  v76 = v135;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v72 + 56))(v73, 0, 1, v75);
  v77 = Image.renderingMode(_:)(v73, v69);
  swift_release(v69);
  v78 = sub_10000EB5C(v73, &qword_100056300);
  static WidgetAccentedRenderingMode.accented.getter(v78);
  v145(v27, 0, 1, v76);
  Image.widgetAccentedRenderingMode(_:)(v27, v77);
  swift_release(v77);
  sub_10000EB5C((uint64_t)v27, &qword_100055EC0);
  if (qword_100055358 != -1)
    swift_once(&qword_100055358, sub_1000350C8);
  type metadata accessor for ContentView(0, v119, v120, v79);
  v80 = objc_allocWithZone((Class)UIColor);
  v154 = sub_100035058;
  v155 = 0;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v151 = 1107296256;
  v152 = sub_10002CF38;
  v153 = &unk_1000528D0;
  v81 = _Block_copy(&aBlock);
  v82 = objc_msgSend(v80, "initWithDynamicProvider:", v81);
  _Block_release(v81);
  swift_release(v155);
  v83 = Color.init(uiColor:)(v82);
  v84 = v144;
  v85 = v134;
  v146(v144, v74, v134);
  *(_QWORD *)(v84 + *(int *)(v118 + 36)) = v83;
  ((void (*)(char *, uint64_t))v147)(v74, v85);
  sub_10001C888(v84, v143, &qword_100056308);
  aBlock = 0;
  v151 = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease(v151);
  aBlock = 0x6174537974706D45;
  v151 = 0xEB000000005F6574;
  String.append(_:)(v122);
  v86._countAndFlagsBits = 0x6F726765726F465FLL;
  v86._object = (void *)0xEB00000000646E75;
  String.append(_:)(v86);
  v87 = Image.init(_:bundle:)(aBlock, v151, 0);
  v88 = (uint64_t)v116;
  v89 = v137;
  ((void (*)(char *, _QWORD, uint64_t))v139)(v116, v140, v137);
  v90 = Image.resizable(capInsets:resizingMode:)(v88, v87, 0.0, 0.0, 0.0, 0.0);
  swift_release(v87);
  v91 = v138((char *)v88, v89);
  static WidgetAccentedRenderingMode.fullColor.getter(v91);
  v145(v27, 0, 1, v76);
  v92 = v121;
  Image.widgetAccentedRenderingMode(_:)(v27, v90);
  swift_release(v90);
  sub_10000EB5C((uint64_t)v27, &qword_100055EC0);
  v93 = v128;
  v94 = sub_10001115C(v128);
  v95 = v129;
  static WidgetRenderingMode.accented.getter(v94);
  v96 = static WidgetRenderingMode.== infix(_:_:)(v93, v95);
  v97 = *(void (**)(char *, uint64_t))(v124 + 8);
  v98 = v130;
  v97(v95, v130);
  v97((char *)v93, v98);
  if ((v96 & 1) != 0)
    v48 = 1.0;
  v99 = (uint64_t)v127;
  v146(v127, v92, v85);
  *(double *)(v99 + *(int *)(v123 + 36)) = v48;
  ((void (*)(char *, uint64_t))v147)(v92, v85);
  v100 = sub_10001115C(v93);
  static WidgetRenderingMode.accented.getter(v100);
  v101 = static WidgetRenderingMode.== infix(_:_:)(v93, v95);
  v97(v95, v98);
  v97((char *)v93, v98);
  if ((v101 & 1) != 0)
    v102 = 0.9;
  else
    v102 = 1.0;
  v103 = v125;
  sub_100012310(v99, v125, &qword_100055F68);
  *(double *)(v103 + *(int *)(v126 + 36)) = v102;
  sub_10000EB5C(v99, &qword_100055F68);
  v104 = v131;
  sub_10001C888(v103, v131, &qword_100055F70);
  v105 = v141;
  sub_100012310(v148, v141, &qword_100056310);
  v106 = (void (*)(uint64_t, char *, uint64_t))v146;
  v146(v74, v149, v85);
  v107 = v143;
  v108 = v144;
  sub_100012310(v143, v144, &qword_100056308);
  v109 = v132;
  sub_100012310(v104, v132, &qword_100055F70);
  v110 = v133;
  sub_100012310(v105, v133, &qword_100056310);
  v111 = (int *)sub_100003EA4(&qword_100056318);
  v106(v110 + v111[12], v74, v85);
  sub_100012310(v108, v110 + v111[16], &qword_100056308);
  sub_100012310(v109, v110 + v111[20], &qword_100055F70);
  sub_10000EB5C(v104, &qword_100055F70);
  sub_10000EB5C(v107, &qword_100056308);
  v112 = (void (*)(char *, uint64_t))v147;
  ((void (*)(char *, uint64_t))v147)(v149, v85);
  sub_10000EB5C(v148, &qword_100056310);
  sub_10000EB5C(v109, &qword_100055F70);
  sub_10000EB5C(v108, &qword_100056308);
  v112(v74, v85);
  return sub_10000EB5C(v141, &qword_100056310);
}

uint64_t sub_10002ABEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  NSObject *v35;
  int v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  void (*v50)(char *, uint64_t, __n128);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __n128 v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  __n128 v61;
  os_log_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  int v98;
  os_log_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t OpaqueTypeConformance2;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;

  v3 = v2;
  v120 = a2;
  OpaqueTypeConformance2 = type metadata accessor for ContainerBackgroundPlacement(0);
  v112 = *(_QWORD *)(OpaqueTypeConformance2 - 8);
  __chkstk_darwin(OpaqueTypeConformance2);
  v108 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100003EA4(&qword_100056028);
  __chkstk_darwin(v110);
  v106 = (uint64_t *)((char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v116 = sub_100003EA4(&qword_100056030);
  v111 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116);
  v107 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003EA4(&qword_100056038);
  v118 = *(_QWORD *)(v8 - 8);
  v119 = v8;
  v9 = __chkstk_darwin(v8);
  v117 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = *(_QWORD *)(a1 - 8);
  v11 = __chkstk_darwin(v9);
  v115 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v97 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v97 - v17;
  v109 = v19;
  __chkstk_darwin(v16);
  v21 = (char *)&v97 - v20;
  v22 = sub_100003EA4(&qword_100056040);
  v103 = *(_QWORD *)(v22 - 8);
  v23 = __chkstk_darwin(v22);
  v105 = (uint64_t)&v97 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v97 - v25;
  v27 = *(_QWORD *)(a1 + 16);
  v28 = *(_QWORD *)(a1 + 24);
  v100 = type metadata accessor for ModelEntry(0, v27, v28, v29);
  v30 = *(void (**)(uint64_t, uint64_t))(v28 + 208);
  v113 = v26;
  v123 = v28;
  v124 = v27;
  v30(v27, v28);
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v31 = type metadata accessor for Logger(0);
  sub_10000CF34(v31, (uint64_t)qword_1000586D0);
  v32 = v122;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  v33(v21, v2, a1);
  v33(v18, v2, a1);
  v34 = ((uint64_t (*)(char *, uint64_t, uint64_t))v33)(v15, v2, a1);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  v37 = os_log_type_enabled(v35, (os_log_type_t)v36);
  v38 = a1;
  v121 = v3;
  v102 = v33;
  v101 = a1;
  if (v37)
  {
    v39 = swift_slowAlloc(32, -1);
    v40 = swift_slowAlloc(96, -1);
    v126 = v40;
    *(_DWORD *)v39 = 136315650;
    v41 = (uint64_t *)&v21[*(int *)(a1 + 48)];
    v42 = v41[1];
    v99 = v35;
    v98 = v36;
    v97 = v40;
    if (v42)
    {
      v43 = *v41;
      v44 = v42;
    }
    else
    {
      v43 = 0;
      v44 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain(v42);
    v125 = sub_100011770(v43, v44, &v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v39 + 4, v39 + 12);
    v49 = swift_bridgeObjectRelease(v44);
    v50 = *(void (**)(char *, uint64_t, __n128))(v32 + 8);
    v50(v21, a1, v49);
    *(_WORD *)(v39 + 12) = 2080;
    v51 = v18;
    v52 = type metadata accessor for WidgetFamily(0);
    v53 = sub_10002D590(&qword_1000557D8, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v54 = dispatch thunk of CustomStringConvertible.description.getter(v52, v53);
    v56 = v55;
    v125 = sub_100011770(v54, v55, &v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v39 + 14, v39 + 22);
    v57 = swift_bridgeObjectRelease(v56);
    v50(v51, a1, v57);
    *(_WORD *)(v39 + 22) = 2080;
    v48 = v123;
    v47 = v124;
    v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v123 + 8))(v124, v123);
    v60 = v59;
    v125 = sub_100011770(v58, v59, &v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v39 + 24, v39 + 32);
    v61 = swift_bridgeObjectRelease(v60);
    v50(v15, v38, v61);
    v62 = v99;
    _os_log_impl((void *)&_mh_execute_header, v99, (os_log_type_t)v98, "🥑 ContentView%s: body(%s) for %s", (uint8_t *)v39, 0x20u);
    v63 = v97;
    swift_arrayDestroy(v97, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v39, -1, -1);

    v3 = v121;
  }
  else
  {
    v45 = *(void (**)(char *, uint64_t))(v32 + 8);
    v45(v21, a1);
    v45(v18, a1);
    v45(v15, a1);

    v48 = v123;
    v47 = v124;
  }
  v64 = static Alignment.center.getter(v46);
  v65 = (uint64_t)v106;
  *v106 = v64;
  *(_QWORD *)(v65 + 8) = v66;
  v67 = sub_100003EA4(&qword_100056048);
  v68 = sub_10002B440(v3, v47, v48, v65 + *(int *)(v67 + 44));
  v69 = v48;
  v70 = v108;
  v71 = static ContainerBackgroundPlacement.widget.getter(v68);
  v72 = __chkstk_darwin(v71);
  *(&v97 - 4) = v47;
  *(&v97 - 3) = v69;
  v73 = static Alignment.center.getter(v72);
  v75 = v74;
  v76 = sub_100003EA4(&qword_100056050);
  v77 = sub_100012354(&qword_100056058, &qword_100056028, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v78 = sub_10002CF94();
  v79 = v107;
  v80 = v110;
  View.containerBackground<A>(for:alignment:content:)(v70, v73, v75, sub_10002CF88, &v97 - 6, v110, v76, v77, v78);
  (*(void (**)(char *, uint64_t))(v112 + 8))(v70, OpaqueTypeConformance2);
  sub_10000EB5C(v65, &qword_100056028);
  v126 = v80;
  v127 = v76;
  v128 = v77;
  v129 = v78;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v126, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
  v82 = v116;
  v81 = v117;
  v83 = (uint64_t)v113;
  View.widgetURL(_:)(v113, v116, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v79, v82);
  v84 = v115;
  v85 = v101;
  v102(v115, v121, v101);
  v86 = v105;
  sub_100012310(v83, v105, &qword_100056040);
  v87 = v122;
  v88 = *(unsigned __int8 *)(v122 + 80);
  v89 = (v88 + 32) & ~v88;
  v90 = *(unsigned __int8 *)(v103 + 80);
  v91 = (v109 + v89 + v90) & ~v90;
  v92 = swift_allocObject(&unk_1000528B8, v91 + v104, v88 | v90 | 7);
  v93 = v123;
  *(_QWORD *)(v92 + 16) = v124;
  *(_QWORD *)(v92 + 24) = v93;
  (*(void (**)(uint64_t, char *, uint64_t))(v87 + 32))(v92 + v89, v84, v85);
  sub_10001C888(v86, v92 + v91, &qword_100056040);
  v126 = v82;
  v127 = OpaqueTypeConformance2;
  v94 = swift_getOpaqueTypeConformance2(&v126, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
  v95 = v119;
  View.onTapGesture(count:perform:)(1, sub_10002D2B0, v92, v119, v94);
  swift_release(v92);
  (*(void (**)(char *, uint64_t))(v118 + 8))(v81, v95);
  return sub_10000EB5C(v83, &qword_100056040);
}

uint64_t sub_10002B440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v106 = a4;
  v105 = sub_100003EA4(&qword_100056160);
  __chkstk_darwin(v105);
  v95 = (uint64_t)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003EA4(&qword_100056168);
  __chkstk_darwin(v8);
  v90 = (uint64_t *)((char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v88 = sub_100003EA4(&qword_100056170);
  v10 = __chkstk_darwin(v88);
  v92 = (uint64_t)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v94 = (uint64_t)&v85 - v12;
  v13 = sub_100003EA4(&qword_100056178);
  v14 = __chkstk_darwin(v13);
  v91 = (uint64_t)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v93 = (uint64_t)&v85 - v16;
  v100 = sub_100003EA4(&qword_100056180);
  __chkstk_darwin(v100);
  v102 = (uint64_t)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_100003EA4(&qword_100056188);
  __chkstk_darwin(v101);
  v89 = (uint64_t *)((char *)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v87 = type metadata accessor for WidgetFamily(0);
  v86 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v85 = (char *)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003EA4(&qword_100056190);
  v21 = __chkstk_darwin(v20);
  v104 = (uint64_t)&v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v103 = (char *)&v85 - v23;
  v24 = sub_100003EA4(&qword_100056198);
  __chkstk_darwin(v24);
  v26 = (char *)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100003EA4(&qword_1000561A0);
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v85 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v32 = (char *)&v85 - v31;
  v98 = a2;
  *(_QWORD *)&v99 = a3;
  v34 = type metadata accessor for ContentView(0, a2, a3, v33);
  v35 = sub_1000232A4(v34, (uint64_t)v26);
  v36 = a1 + *(int *)(v34 + 52);
  v97 = *(_OWORD *)(v36 + 48);
  v37 = *(_QWORD *)(v36 + 64);
  v38 = *(_QWORD *)(v36 + 72);
  v96 = v36;
  LOBYTE(a2) = static Edge.Set.all.getter(v35);
  sub_100012310((uint64_t)v26, (uint64_t)v30, &qword_100056198);
  v39 = &v30[*(int *)(v27 + 36)];
  *v39 = a2;
  *(_OWORD *)(v39 + 8) = v97;
  *((_QWORD *)v39 + 3) = v37;
  *((_QWORD *)v39 + 4) = v38;
  v39[40] = 0;
  sub_10000EB5C((uint64_t)v26, &qword_100056198);
  *(_QWORD *)&v97 = v32;
  sub_10001C888((uint64_t)v30, (uint64_t)v32, &qword_1000561A0);
  if ((sub_100023024(v34) & 1) != 0)
  {
    v42 = v98;
    v41 = v99;
    type metadata accessor for ModelEntry(0, v98, v99, v40);
    v43 = v86;
    v44 = v85;
    v45 = v87;
    (*(void (**)(char *, _QWORD, uint64_t))(v86 + 104))(v85, enum case for WidgetFamily.systemSmall(_:), v87);
    v46 = sub_10002D590((unint64_t *)&qword_100055600, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    dispatch thunk of RawRepresentable.rawValue.getter(&v108, v45, v46);
    dispatch thunk of RawRepresentable.rawValue.getter(&v107, v45, v46);
    v48 = v107;
    v47 = v108;
    v49 = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v44, v45);
    v50 = 40;
    if (v47 == v48)
      v50 = 32;
    v51 = *(double *)(v96 + v50);
    v52 = static HorizontalAlignment.center.getter(v49);
    v53 = (uint64_t)v89;
    *v89 = v52;
    *(_QWORD *)(v53 + 8) = 0;
    *(_BYTE *)(v53 + 16) = 0;
    v54 = sub_100003EA4(&qword_1000561D0);
    sub_10002BC60(a1, v42, v41, (_QWORD *)(v53 + *(int *)(v54 + 44)), v51);
    v55 = v102;
    sub_100012310(v53, v102, &qword_100056188);
    swift_storeEnumTagMultiPayload(v55, v100, 0);
    v56 = sub_100012354(&qword_1000561B8, &qword_100056188, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v57 = sub_100012354(&qword_1000561C0, &qword_100056160, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v58 = (uint64_t)v103;
    _ConditionalContent<>.init(storage:)(v55, v101, v105, v56, v57);
    v59 = v53;
    v60 = &qword_100056188;
  }
  else
  {
    v61 = v93;
    v62 = sub_100025D3C(v34, v93);
    v63 = static HorizontalAlignment.leading.getter(v62);
    v64 = v96;
    v65 = *(_QWORD *)(v96 + 112);
    v66 = (uint64_t)v90;
    *v90 = v63;
    *(_QWORD *)(v66 + 8) = v65;
    *(_BYTE *)(v66 + 16) = 0;
    v67 = sub_100003EA4(&qword_1000561A8);
    v68 = sub_10002C39C(a1, v98, v99, (_QWORD *)(v66 + *(int *)(v67 + 44)));
    v99 = *(_OWORD *)(v64 + 48);
    v69 = *(_QWORD *)(v64 + 64);
    v70 = *(_QWORD *)(v64 + 72);
    LOBYTE(v64) = static Edge.Set.all.getter(v68);
    v71 = v92;
    sub_100012310(v66, v92, &qword_100056168);
    v72 = v71 + *(int *)(v88 + 36);
    *(_BYTE *)v72 = v64;
    *(_OWORD *)(v72 + 8) = v99;
    *(_QWORD *)(v72 + 24) = v69;
    *(_QWORD *)(v72 + 32) = v70;
    *(_BYTE *)(v72 + 40) = 0;
    sub_10000EB5C(v66, &qword_100056168);
    v73 = v94;
    sub_10001C888(v71, v94, &qword_100056170);
    v74 = v91;
    sub_100012310(v61, v91, &qword_100056178);
    sub_100012310(v73, v71, &qword_100056170);
    v75 = v95;
    sub_100012310(v74, v95, &qword_100056178);
    v76 = sub_100003EA4(&qword_1000561B0);
    sub_100012310(v71, v75 + *(int *)(v76 + 48), &qword_100056170);
    sub_10000EB5C(v71, &qword_100056170);
    sub_10000EB5C(v74, &qword_100056178);
    v77 = v102;
    sub_100012310(v75, v102, &qword_100056160);
    swift_storeEnumTagMultiPayload(v77, v100, 1);
    v78 = sub_100012354(&qword_1000561B8, &qword_100056188, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v79 = sub_100012354(&qword_1000561C0, &qword_100056160, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v58 = (uint64_t)v103;
    _ConditionalContent<>.init(storage:)(v77, v101, v105, v78, v79);
    sub_10000EB5C(v75, &qword_100056160);
    sub_10000EB5C(v73, &qword_100056170);
    v59 = v61;
    v60 = &qword_100056178;
  }
  sub_10000EB5C(v59, v60);
  v80 = v97;
  sub_100012310(v97, (uint64_t)v30, &qword_1000561A0);
  v81 = v104;
  sub_100012310(v58, v104, &qword_100056190);
  v82 = v106;
  sub_100012310((uint64_t)v30, v106, &qword_1000561A0);
  v83 = sub_100003EA4(&qword_1000561C8);
  sub_100012310(v81, v82 + *(int *)(v83 + 48), &qword_100056190);
  sub_10000EB5C(v58, &qword_100056190);
  sub_10000EB5C(v80, &qword_1000561A0);
  sub_10000EB5C(v81, &qword_100056190);
  return sub_10000EB5C((uint64_t)v30, &qword_1000561A0);
}

uint64_t sub_10002BC60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  int *v49;
  char *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;

  v58 = a4;
  v9 = sub_100003EA4(&qword_1000561D8);
  __chkstk_darwin(v9);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100003EA4(&qword_1000561E0);
  v12 = __chkstk_darwin(v57);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v56 = (uint64_t)&v52 - v15;
  v16 = sub_100003EA4(&qword_1000561E8);
  __chkstk_darwin(v16);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100003EA4(&qword_1000561F0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v59 = (uint64_t)&v52 - v23;
  v24 = sub_100003EA4(&qword_1000561F8);
  v25 = __chkstk_darwin(v24);
  v55 = (uint64_t)&v52 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)&v52 - v27;
  v53 = a3;
  v54 = (uint64_t)&v52 - v27;
  v52 = a2;
  v29 = a3;
  v31 = type metadata accessor for ContentView(0, a2, a3, v30);
  v33 = sub_1000299A0(v31, v32, (uint64_t)v28);
  *(_QWORD *)v18 = static VerticalAlignment.center.getter(v33);
  *((_QWORD *)v18 + 1) = 0;
  v18[16] = 1;
  v34 = sub_100003EA4(&qword_100056200);
  v35 = sub_10002C0B8(a2, v29, (uint64_t)&v18[*(int *)(v34 + 44)]);
  v36 = a1 + *(int *)(v31 + 52);
  v37 = *(_QWORD *)(v36 + 24);
  LOBYTE(v31) = static Edge.Set.all.getter(v35);
  sub_100012310((uint64_t)v18, (uint64_t)v22, &qword_1000561E8);
  v38 = &v22[*(int *)(v19 + 36)];
  *v38 = v31;
  *((_QWORD *)v38 + 1) = v37;
  *((double *)v38 + 2) = a5;
  *((_QWORD *)v38 + 3) = 0;
  *((double *)v38 + 4) = a5;
  v38[40] = 0;
  sub_10000EB5C((uint64_t)v18, &qword_1000561E8);
  v39 = v59;
  sub_10001C888((uint64_t)v22, v59, &qword_1000561F0);
  *(_QWORD *)v11 = static VerticalAlignment.center.getter(v40);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  v41 = sub_100003EA4(&qword_100056208);
  v42 = sub_10002C1D8(v52, v53, (uint64_t)&v11[*(int *)(v41 + 44)]);
  v43 = *(_QWORD *)(v36 + 24);
  LOBYTE(v37) = static Edge.Set.all.getter(v42);
  sub_100012310((uint64_t)v11, (uint64_t)v14, &qword_1000561D8);
  v44 = &v14[*(int *)(v57 + 36)];
  *v44 = v37;
  *((_QWORD *)v44 + 1) = v43;
  *((double *)v44 + 2) = a5;
  *((_QWORD *)v44 + 3) = 0;
  *((double *)v44 + 4) = a5;
  v44[40] = 0;
  sub_10000EB5C((uint64_t)v11, &qword_1000561D8);
  v45 = v56;
  sub_10001C888((uint64_t)v14, v56, &qword_1000561E0);
  v46 = v54;
  v47 = v55;
  sub_100012310(v54, v55, &qword_1000561F8);
  sub_100012310(v39, (uint64_t)v22, &qword_1000561F0);
  sub_100012310(v45, (uint64_t)v14, &qword_1000561E0);
  v48 = v58;
  *v58 = 0;
  *((_BYTE *)v48 + 8) = 1;
  v49 = (int *)sub_100003EA4(&qword_100056210);
  sub_100012310(v47, (uint64_t)v48 + v49[12], &qword_1000561F8);
  sub_100012310((uint64_t)v22, (uint64_t)v48 + v49[16], &qword_1000561F0);
  sub_100012310((uint64_t)v14, (uint64_t)v48 + v49[20], &qword_1000561E0);
  v50 = (char *)v48 + v49[24];
  *(_QWORD *)v50 = 0;
  v50[8] = 1;
  sub_10000EB5C(v45, &qword_1000561E0);
  sub_10000EB5C(v59, &qword_1000561F0);
  sub_10000EB5C(v46, &qword_1000561F8);
  sub_10000EB5C((uint64_t)v14, &qword_1000561E0);
  sub_10000EB5C((uint64_t)v22, &qword_1000561F0);
  return sub_10000EB5C(v47, &qword_1000561F8);
}

uint64_t sub_10002C0B8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = sub_100003EA4(&qword_100056278);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)&v17 - v10);
  v13 = type metadata accessor for ContentView(0, a1, a2, v12);
  sub_100028DE4(v13, v11);
  sub_100012310((uint64_t)v11, (uint64_t)v9, &qword_100056278);
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 1;
  v14 = sub_100003EA4(&qword_100056280);
  sub_100012310((uint64_t)v9, a3 + *(int *)(v14 + 48), &qword_100056278);
  v15 = a3 + *(int *)(v14 + 64);
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  sub_10000EB5C((uint64_t)v11, &qword_100056278);
  return sub_10000EB5C((uint64_t)v9, &qword_100056278);
}

uint64_t sub_10002C1D8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v6 = sub_100003EA4(&qword_100056218);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100003EA4(&qword_100056220);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v24 - v14;
  v17 = type metadata accessor for ContentView(0, a1, a2, v16);
  sub_1000293F8(v17, v8);
  v18 = sub_100012354(&qword_100056228, &qword_100056218, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.widgetAccentable(_:)(1, v6, v18);
  sub_10000EB5C((uint64_t)v8, &qword_100056218);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v13, v9);
  v19 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v19(v13, v15, v9);
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 1;
  v20 = sub_100003EA4(&qword_100056230);
  v19((char *)(a3 + *(int *)(v20 + 48)), v13, v9);
  v21 = a3 + *(int *)(v20 + 64);
  *(_QWORD *)v21 = 0;
  *(_BYTE *)(v21 + 8) = 1;
  v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v15, v9);
  return ((uint64_t (*)(char *, uint64_t))v22)(v13, v9);
}

uint64_t sub_10002C39C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  _QWORD *v31;
  int *v32;
  char *v34;
  _QWORD *v35;

  v35 = a4;
  v7 = sub_100003EA4(&qword_100056320);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v34 - v11;
  v13 = sub_100003EA4(&qword_100056328);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v34 - v17;
  v19 = sub_100003EA4(&qword_100056330);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v34 - v23;
  *(_QWORD *)v24 = static VerticalAlignment.center.getter(v25);
  *((_QWORD *)v24 + 1) = 0;
  v24[16] = 1;
  v26 = sub_100003EA4(&qword_100056338);
  sub_10002C6A4(a1, a2, a3, (uint64_t)&v24[*(int *)(v26 + 44)]);
  *(_QWORD *)v18 = static VerticalAlignment.center.getter(v27);
  *((_QWORD *)v18 + 1) = 0;
  v18[16] = 1;
  v28 = sub_100003EA4(&qword_100056340);
  sub_10002C958(a2, a3, &qword_100056278, (void (*)(uint64_t))sub_100028DE4, &qword_100056360, (uint64_t)&v18[*(int *)(v28 + 44)]);
  *(_QWORD *)v12 = static VerticalAlignment.center.getter(v29);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v30 = sub_100003EA4(&qword_100056348);
  sub_10002C958(a2, a3, &qword_100056218, (void (*)(uint64_t))sub_1000293F8, &qword_100056358, (uint64_t)&v12[*(int *)(v30 + 44)]);
  v34 = v22;
  sub_100012310((uint64_t)v24, (uint64_t)v22, &qword_100056330);
  sub_100012310((uint64_t)v18, (uint64_t)v16, &qword_100056328);
  sub_100012310((uint64_t)v12, (uint64_t)v10, &qword_100056320);
  v31 = v35;
  *v35 = 0;
  *((_BYTE *)v31 + 8) = 1;
  v32 = (int *)sub_100003EA4(&qword_100056350);
  sub_100012310((uint64_t)v22, (uint64_t)v31 + v32[12], &qword_100056330);
  sub_100012310((uint64_t)v16, (uint64_t)v31 + v32[16], &qword_100056328);
  sub_100012310((uint64_t)v10, (uint64_t)v31 + v32[20], &qword_100056320);
  sub_10000EB5C((uint64_t)v12, &qword_100056320);
  sub_10000EB5C((uint64_t)v18, &qword_100056328);
  sub_10000EB5C((uint64_t)v24, &qword_100056330);
  sub_10000EB5C((uint64_t)v10, &qword_100056320);
  sub_10000EB5C((uint64_t)v16, &qword_100056328);
  return sub_10000EB5C((uint64_t)v34, &qword_100056330);
}

uint64_t sub_10002C6A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[2];
  _OWORD v59[11];
  _OWORD v60[3];

  v33 = a1;
  v34 = a4;
  v6 = sub_100003EA4(&qword_100056368);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003EA4(&qword_100056370);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v33 - v14;
  v17 = type metadata accessor for ContentView(0, a2, a3, v16);
  sub_100027868(v17, (uint64_t)&v47);
  v59[10] = v57;
  v60[0] = v58[0];
  *(_OWORD *)((char *)v60 + 14) = *(_OWORD *)((char *)v58 + 14);
  v59[6] = v53;
  v59[7] = v54;
  v59[8] = v55;
  v59[9] = v56;
  v59[2] = v49;
  v59[3] = v50;
  v59[4] = v51;
  v59[5] = v52;
  v59[0] = v47;
  v59[1] = v48;
  v45 = v57;
  v46[0] = v58[0];
  *(_OWORD *)((char *)v46 + 14) = *(_OWORD *)((char *)v58 + 14);
  v41 = v53;
  v42 = v54;
  v43 = v55;
  v44 = v56;
  v37 = v49;
  v38 = v50;
  v39 = v51;
  v40 = v52;
  v35 = v47;
  v36 = v48;
  v18 = sub_100003EA4(&qword_100056378);
  v19 = sub_100012354(&qword_100056380, &qword_100056378, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.widgetAccentable(_:)(1, v18, v19);
  v20 = sub_10002D9C8((uint64_t)v59);
  v21 = static Edge.Set.bottom.getter(v20);
  v22 = EdgeInsets.init(_all:)(*(double *)(v33 + *(int *)(v17 + 52) + 80));
  v24 = v23;
  v26 = v25;
  v28 = v27;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v9, v6);
  v29 = &v13[*(int *)(v10 + 36)];
  *v29 = v21;
  *((double *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  v29[40] = 0;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_10001C888((uint64_t)v13, (uint64_t)v15, &qword_100056370);
  sub_100012310((uint64_t)v15, (uint64_t)v13, &qword_100056370);
  v30 = v34;
  sub_100012310((uint64_t)v13, v34, &qword_100056370);
  v31 = v30 + *(int *)(sub_100003EA4(&qword_100056388) + 48);
  *(_QWORD *)v31 = 0;
  *(_BYTE *)(v31 + 8) = 1;
  sub_10000EB5C((uint64_t)v15, &qword_100056370);
  return sub_10000EB5C((uint64_t)v13, &qword_100056370);
}

uint64_t sub_10002C958@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, void (*a4)(uint64_t)@<X4>, uint64_t *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v12 = sub_100003EA4(a3);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v22 - v16;
  v19 = type metadata accessor for ContentView(0, a1, a2, v18);
  a4(v19);
  sub_100012310((uint64_t)v17, (uint64_t)v15, a3);
  sub_100012310((uint64_t)v15, a6, a3);
  v20 = a6 + *(int *)(sub_100003EA4(a5) + 48);
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  sub_10000EB5C((uint64_t)v17, a3);
  return sub_10000EB5C((uint64_t)v15, a3);
}

uint64_t sub_10002CA70@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;

  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003EA4(&qword_100056070);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for ContentView(0, a1, a2, v13);
  sub_1000244F0(v14, v12);
  sub_100011188((uint64_t)v9);
  KeyPath = swift_getKeyPath(&unk_1000432C0);
  v16 = (uint64_t *)(a3 + *(int *)(sub_100003EA4(&qword_100056050) + 36));
  v17 = sub_100003EA4(&qword_100055820);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)v16 + *(int *)(v17 + 28), v9, v6);
  *v16 = KeyPath;
  sub_100012310((uint64_t)v12, a3, &qword_100056070);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return sub_10000EB5C((uint64_t)v12, &qword_100056070);
}

void sub_10002CBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  v8 = sub_100003EA4(&qword_100056040);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v37 - v12;
  v15 = type metadata accessor for ContentView(0, a3, a4, v14);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v37 - v17;
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v19 = type metadata accessor for Logger(0);
  sub_10000CF34(v19, (uint64_t)qword_1000586D0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, v15);
  v20 = sub_100012310(a2, (uint64_t)v13, &qword_100056040);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, (os_log_type_t)v22))
  {
    v23 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(64, -1);
    v40 = v24;
    *(_DWORD *)v23 = 136315394;
    v25 = (uint64_t *)&v18[*(int *)(v15 + 48)];
    v26 = v25[1];
    v38 = v22;
    v37 = v24;
    if (v26)
    {
      v27 = *v25;
      v28 = v26;
    }
    else
    {
      v27 = 0;
      v28 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain(v26);
    v39 = sub_100011770(v27, v28, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v23 + 4, v23 + 12);
    v29 = swift_bridgeObjectRelease(v28);
    (*(void (**)(char *, uint64_t, __n128))(v16 + 8))(v18, v15, v29);
    *(_WORD *)(v23 + 12) = 2080;
    sub_100012310((uint64_t)v13, (uint64_t)v11, &qword_100056040);
    v30 = type metadata accessor for URL(0);
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v11, 1, v30) == 1)
    {
      sub_10000EB5C((uint64_t)v11, &qword_100056040);
      v32 = 0;
      v33 = 0xE000000000000000;
    }
    else
    {
      v32 = URL.description.getter();
      v33 = v34;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v30);
    }
    v35 = v38;
    v39 = sub_100011770(v32, v33, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease(v33);
    sub_10000EB5C((uint64_t)v13, &qword_100056040);
    _os_log_impl((void *)&_mh_execute_header, v21, v35, "🥑 ContentView%s: open '%s'", (uint8_t *)v23, 0x16u);
    v36 = v37;
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    sub_10000EB5C((uint64_t)v13, &qword_100056040);
  }

}

id sub_10002CF38(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t (*v4)(void);
  id v5;
  void *v6;

  v4 = *(uint64_t (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v6 = (void *)v4();
  swift_release(v3);

  return v6;
}

uint64_t sub_10002CF88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002CA70(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_10002CF94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056060;
  if (!qword_100056060)
  {
    v1 = sub_100003EE4(&qword_100056050);
    sub_100012354(&qword_100056068, &qword_100056070, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_100012354(&qword_100055828, &qword_100055820, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100056060);
  }
  return result;
}

uint64_t sub_10002D030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)type metadata accessor for ContentView(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = *(_QWORD *)(sub_100003EA4(&qword_100056040) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = *(_QWORD *)(v12 + 64);
  v16 = (_QWORD *)(v4 + v10);
  v17 = sub_100003EA4(&qword_100055700);
  if (swift_getEnumCaseMultiPayload(v4 + v10, v17) == 1)
  {
    v18 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v4 + v10, v18);
  }
  else
  {
    swift_release(*v16);
  }
  v19 = v10 + v14;
  v20 = (_QWORD *)((char *)v16 + v7[9]);
  v21 = sub_100003EA4(&qword_1000557F8);
  v38 = v15;
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v20, v22);
  }
  else
  {
    swift_release(*v20);
  }
  v23 = v19 & ~v13;
  v24 = (_QWORD *)((char *)v16 + v7[10]);
  v25 = sub_100003EA4(&qword_100055708);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v24, v26);
  }
  else
  {
    swift_release(*v24);
  }
  v27 = (char *)v16 + v7[11];
  v28 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  v30 = type metadata accessor for ModelEntry(0, v5, v6, v29);
  v31 = &v27[*(int *)(v30 + 36)];
  v32 = type metadata accessor for WidgetFamily(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
  v33 = type metadata accessor for ViewContext(0);
  swift_release(*(_QWORD *)&v31[*(int *)(v33 + 24)]);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(&v27[*(int *)(v30 + 40)], v5);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v16 + v7[12] + 8));
  v34 = (_QWORD *)((char *)v16 + v7[13]);
  swift_release(*v34);
  swift_release(v34[1]);
  v35 = type metadata accessor for URL(0);
  v36 = *(_QWORD *)(v35 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v4 + v23, 1, v35))
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v4 + v23, v35);
  return swift_deallocObject(v4, v23 + v38, v9 | v13 | 7);
}

void sub_10002D2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(type metadata accessor for ContentView(0, v5, v6, a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(sub_100003EA4(&qword_100056040) - 8) + 80);
  sub_10002CBC8(v4 + v8, v4 + ((v8 + v9 + v10) & ~v10), v5, v6);
}

uint64_t sub_10002D330()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10002D350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100011458(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

unint64_t sub_10002D374()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000560D8;
  if (!qword_1000560D8)
  {
    v1 = sub_100003EE4(&qword_1000560B8);
    sub_100012354(&qword_1000560E0, &qword_1000560B0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    sub_10002001C(&qword_1000560E8, &qword_100056098, (void (*)(void))sub_10002D418);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000560D8);
  }
  return result;
}

uint64_t sub_10002D418()
{
  return sub_10002001C(&qword_1000560F0, &qword_100056090, (void (*)(void))sub_10002D43C);
}

uint64_t sub_10002D43C()
{
  return sub_10002001C(&qword_1000560F8, &qword_100056088, (void (*)(void))sub_10002D460);
}

unint64_t sub_10002D460()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056100;
  if (!qword_100056100)
  {
    v1 = sub_100003EE4(&qword_100055F68);
    swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of Image.widgetAccentedRenderingMode(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100056100);
  }
  return result;
}

unint64_t sub_10002D4D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056110;
  if (!qword_100056110)
  {
    v1 = sub_100003EE4(&qword_100056118);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100056110);
  }
  return result;
}

uint64_t sub_10002D54C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MapView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002D590(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for WidgetFamily(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002D5D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056130;
  if (!qword_100056130)
  {
    v1 = sub_100003EE4(&qword_100056138);
    sub_100012354(&qword_100056140, &qword_100056148, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100056130);
  }
  return result;
}

uint64_t sub_10002D654(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 56));
  return a1;
}

uint64_t sub_10002D67C(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  return a1;
}

_QWORD *sub_10002D6A4(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

_QWORD *sub_10002D6CC(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_10002D6F4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_10002D704()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_10002D724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100011458(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(char *))&EnvironmentValues.sizeCategory.setter);
}

uint64_t sub_10002D748@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002D770(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_10002D798@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10002D7C8(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

void sub_10002D7F4(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_10002D81C(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_10002D840@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002D868(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10002D890@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002D8B8(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_10002D8DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002D904(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

unint64_t sub_10002D92C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000562E0;
  if (!qword_1000562E0)
  {
    v1 = sub_100003EE4(&qword_1000562B8);
    sub_100012354(&qword_1000562E8, &qword_1000562B0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000562E0);
  }
  return result;
}

uint64_t sub_10002D9B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002D9C0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10002D9C8(uint64_t a1)
{
  unint64_t v3;

  v3 = *(unsigned int *)(a1 + 200) | ((unint64_t)*(unsigned __int8 *)(a1 + 204) << 32);
  sub_10002DA44(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    v3,
    SBYTE4(v3),
    SHIWORD(v3),
    *(_BYTE *)(a1 + 205));
  return a1;
}

void sub_10002DA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,char a25,__int16 a26,char a27)
{
  if ((a27 & 1) != 0)
  {
    sub_10002D6F4(a1, a2, a3 & 1);
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    sub_10002EA34(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25 & 1,
      (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10002DB30,
      (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10002DEB8,
      (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10002DD7C);
  }
}

uint64_t sub_10002DB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,__int16 a24,char a25)
{
  if ((a25 & 1) != 0)
    return sub_10002DC10(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             (unsigned __int16)(a24 & 0x1FF) >> 8);
  swift_release(a1);
  swift_release(a2);
  swift_release(a4);
  swift_release(a3);
  return swift_release(a5);
}

uint64_t sub_10002DC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,char a25)
{
  if ((a25 & 1) != 0)
  {
    swift_release(a4);
    swift_release(a5);
    swift_release(a7);
    swift_release(a6);
    swift_release(a8);
    return sub_10002DD7C(a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
  }
  else
  {
    sub_10002DD7C(a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
    swift_release(a21);
    swift_release(a19);
    swift_release(a18);
    swift_release(a20);
    return swift_release(a22);
  }
}

uint64_t sub_10002DD7C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int16 a12)
{
  if (HIBYTE(a12) <= 0xFEu)
    return sub_10002DDB0(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (unsigned __int16)(a12 & 0x1FF) >> 8);
  return result;
}

uint64_t sub_10002DDB0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  if ((a13 & 1) == 0)
    return sub_10002DE54(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  sub_10002D6F4(a1, a2, a3 & 1);
  swift_release(a10);
  swift_release(a8);
  swift_release(a5);
  swift_bridgeObjectRelease(a4);
  return swift_release(a11);
}

uint64_t sub_10002DE54(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_10002D6F4(a1, a2, a3 & 1);
  swift_release(a10);
  swift_release(a8);
  swift_release(a5);
  swift_bridgeObjectRelease(a4);
  return swift_release(a11);
}

uint64_t sub_10002DEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int16 a14, char a15)
{
  if ((a15 & 1) == 0)
    return sub_10002DD7C(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  sub_10002D6F4(a1, a2, a3 & 1);
  swift_release(a10);
  swift_release(a8);
  swift_release(a5);
  swift_bridgeObjectRelease(a4);
  return swift_release(a11);
}

uint64_t sub_10002DF70(uint64_t result)
{
  *(_BYTE *)(result + 189) = 1;
  return result;
}

unint64_t sub_10002DF7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000563A0;
  if (!qword_1000563A0)
  {
    v1 = sub_100003EE4(&qword_100056398);
    sub_10002E020(&qword_1000563A8, &qword_1000563B0, (void (*)(void))sub_10002E090, (void (*)(void))sub_10002E260);
    sub_100012354(&qword_100056438, &qword_100056440, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000563A0);
  }
  return result;
}

uint64_t sub_10002E020(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100003EE4(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002E090()
{
  return sub_10002E020(&qword_1000563B8, &qword_1000563C0, (void (*)(void))sub_10002E0B4, (void (*)(void))sub_10002E1BC);
}

unint64_t sub_10002E0B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000563C8;
  if (!qword_1000563C8)
  {
    v1 = sub_100003EE4(&qword_1000563D0);
    sub_10002E138();
    sub_100012354(&qword_100055F38, &qword_100055F40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000563C8);
  }
  return result;
}

unint64_t sub_10002E138()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000563D8;
  if (!qword_1000563D8)
  {
    v1 = sub_100003EE4(&qword_1000563E0);
    sub_100012354(&qword_1000563E8, &qword_1000563F0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000563D8);
  }
  return result;
}

unint64_t sub_10002E1BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000563F8;
  if (!qword_1000563F8)
  {
    v1 = sub_100003EE4(&qword_100056400);
    sub_100012354(&qword_100056408, &qword_100056410, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100012354(&qword_100056418, &qword_100056420, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000563F8);
  }
  return result;
}

unint64_t sub_10002E260()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056428;
  if (!qword_100056428)
  {
    v1 = sub_100003EE4(&qword_100056430);
    sub_100012354(&qword_100056438, &qword_100056440, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_10002E2E4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100056428);
  }
  return result;
}

unint64_t sub_10002E2E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056448;
  if (!qword_100056448)
  {
    v1 = sub_100003EE4(&qword_100056450);
    sub_10002E368();
    sub_100012354(&qword_100055F38, &qword_100055F40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100056448);
  }
  return result;
}

unint64_t sub_10002E368()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056458;
  if (!qword_100056458)
  {
    v1 = sub_100003EE4(&qword_100056460);
    sub_10002E3EC();
    sub_100012354(&qword_100056488, &qword_100056490, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100056458);
  }
  return result;
}

unint64_t sub_10002E3EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056468;
  if (!qword_100056468)
  {
    v1 = sub_100003EE4(&qword_100056470);
    sub_100012354(&qword_100056478, &qword_100056480, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100056468);
  }
  return result;
}

uint64_t sub_10002E470(uint64_t result)
{
  *(_BYTE *)(result + 188) = 1;
  return result;
}

double sub_10002E47C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int16 a12)
{
  double result;

  if (HIBYTE(a12) <= 0xFEu)
    return sub_10002E4B0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (unsigned __int16)(a12 & 0x1FF) >> 8);
  return result;
}

double sub_10002E4B0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  double result;

  if ((a13 & 1) == 0)
    return sub_10002E554(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  sub_10002E5B8(a1, a2, a3 & 1);
  swift_retain(a11);
  swift_bridgeObjectRetain(a4);
  swift_retain(a5);
  swift_retain(a8);
  *(_QWORD *)&result = swift_retain(a10).n128_u64[0];
  return result;
}

double sub_10002E554(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double result;

  sub_10002E5B8(a1, a2, a3 & 1);
  swift_retain(a11);
  swift_bridgeObjectRetain(a4);
  swift_retain(a5);
  swift_retain(a8);
  *(_QWORD *)&result = swift_retain(a10).n128_u64[0];
  return result;
}

uint64_t sub_10002E5B8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10002E5C8(uint64_t result)
{
  *(_BYTE *)(result + 189) = 0;
  return result;
}

uint64_t sub_10002E5D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10002E600(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

void sub_10002E62C(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_10002E654(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_10002E678(uint64_t result)
{
  *(_BYTE *)(result + 187) = 1;
  return result;
}

uint64_t sub_10002E684(uint64_t result)
{
  *(_BYTE *)(result + 188) = 0;
  return result;
}

uint64_t sub_10002E68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,char a25,uint64_t (*a26)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t),uint64_t (*a27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if ((a25 & 1) != 0)
    BYTE2(a14) &= 1u;
  else
    a27 = a26;
  return a27(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

double sub_10002E72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,__int16 a24,char a25)
{
  double result;

  if ((a25 & 1) != 0)
    return sub_10002E810(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             (unsigned __int16)(a24 & 0x1FF) >> 8);
  swift_retain(a5);
  swift_retain(a1);
  swift_retain(a2);
  swift_retain(a3);
  *(_QWORD *)&result = swift_retain(a4).n128_u64[0];
  return result;
}

double sub_10002E810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,char a25)
{
  double result;

  if ((a25 & 1) != 0)
  {
    swift_retain(a8);
    swift_retain(a4);
    swift_retain(a5);
    swift_retain(a6);
    swift_retain(a7);
    return sub_10002E47C(a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
  }
  else
  {
    sub_10002E47C(a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
    swift_retain(a22);
    swift_retain(a18);
    swift_retain(a19);
    swift_retain(a20);
    *(_QWORD *)&result = swift_retain(a21).n128_u64[0];
  }
  return result;
}

double sub_10002E97C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int16 a14, char a15)
{
  double result;

  if ((a15 & 1) == 0)
    return sub_10002E47C(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  sub_10002E5B8(a1, a2, a3 & 1);
  swift_retain(a11);
  swift_bridgeObjectRetain(a4);
  swift_retain(a5);
  swift_retain(a8);
  *(_QWORD *)&result = swift_retain(a10).n128_u64[0];
  return result;
}

uint64_t sub_10002EA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,char a25,uint64_t (*a26)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t),uint64_t (*a27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t),uint64_t (*a28)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if ((a25 & 1) != 0)
    return a28(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  else
    return sub_10002E68C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             HIBYTE(a24) & 1,
             a26,
             a27);
}

uint64_t sub_10002EB28(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  sub_10002E68C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(unsigned __int16 *)(a1 + 184) | (*(unsigned __int8 *)(a1 + 186) << 16),
    *(_BYTE *)(a1 + 187),
    a2,
    a3);
  return a1;
}

uint64_t sub_10002EBB4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  sub_10002EA34(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_DWORD *)(a1 + 184),
    *(_BYTE *)(a1 + 188),
    a2,
    a3,
    a4);
  return a1;
}

uint64_t sub_10002EC40@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002EC68(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10002EC90(uint64_t result)
{
  *(_BYTE *)(result + 186) = 0;
  return result;
}

uint64_t sub_10002EC98(uint64_t result)
{
  *(_BYTE *)(result + 187) = 0;
  return result;
}

uint64_t sub_10002ECA0(uint64_t result)
{
  *(_BYTE *)(result + 185) = 1;
  return result;
}

uint64_t sub_10002ECAC(uint64_t result)
{
  *(_BYTE *)(result + 186) = 1;
  return result;
}

uint64_t sub_10002ECB8(uint64_t result)
{
  *(_BYTE *)(result + 185) = 0;
  return result;
}

unint64_t sub_10002ECC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000564C0;
  if (!qword_1000564C0)
  {
    v1 = sub_100003EE4(&qword_1000564B8);
    sub_10002E2E4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000564C0);
  }
  return result;
}

uint64_t sub_10002ED24(uint64_t a1, char a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for WidgetFamily(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = __chkstk_darwin(v5);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100055360 != -1)
    result = swift_once(&qword_100055360, sub_10003D89C);
  if (qword_100055358 != -1)
    result = swift_once(&qword_100055358, sub_1000350C8);
  if ((a3 & 1) != 0 || (a2 & 1) != 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for WidgetFamily.systemSmall(_:), v5);
    v10 = sub_10002D590((unint64_t *)&qword_100055600, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    dispatch thunk of RawRepresentable.rawValue.getter(&v12, v5, v10);
    dispatch thunk of RawRepresentable.rawValue.getter(&v11, v5, v10);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

_QWORD *sub_10002EF08(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[9];
  v5 = a1[13];
  v6 = a1[17];
  v7 = a1[18];
  v8 = a1[19];
  v9 = a1[23];
  swift_retain(a1[3]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  return a1;
}

uint64_t sub_10002EFB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v0 = sub_100003EE4(&qword_100056038);
  v1 = sub_100003EE4(&qword_100056030);
  v5 = sub_100003EE4(&qword_100056028);
  v6 = sub_100003EE4(&qword_100056050);
  v7 = sub_100012354(&qword_100056058, &qword_100056028, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v8 = sub_10002CF94();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
  v5 = v1;
  v6 = OpaqueTypeConformance2;
  v3 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
  v5 = v0;
  v6 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
}

uint64_t *sub_10002F090(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char *v26;
  char *v27;
  id v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100003EA4(&qword_100055700);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_100003EA4(&qword_100055708);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[6];
    v24 = a3[7];
    v25 = *(void **)((char *)a2 + v23);
    *(uint64_t *)((char *)a1 + v23) = (uint64_t)v25;
    v26 = (char *)a1 + v24;
    v27 = (char *)a2 + v24;
    *(_OWORD *)v26 = *(_OWORD *)v27;
    v26[16] = v27[16];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    v28 = v25;
  }
  return a1;
}

void sub_10002F214(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_100003EA4(&qword_100055700);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v7 = sub_100003EA4(&qword_100055708);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }

}

uint64_t *sub_10002F2DC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char *v24;
  char *v25;
  id v26;

  v6 = sub_100003EA4(&qword_100055700);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_100003EA4(&qword_100055708);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = a3[7];
  v23 = *(void **)((char *)a2 + v21);
  *(uint64_t *)((char *)a1 + v21) = (uint64_t)v23;
  v24 = (char *)a1 + v22;
  v25 = (char *)a2 + v22;
  *(_OWORD *)v24 = *(_OWORD *)v25;
  v24[16] = v25[16];
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  v26 = v23;
  return a1;
}

uint64_t *sub_10002F434(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;

  if (a1 != a2)
  {
    sub_10000EB5C((uint64_t)a1, &qword_100055700);
    v6 = sub_100003EA4(&qword_100055700);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_10000EB5C((uint64_t)a1 + v12, &qword_100055708);
    v15 = sub_100003EA4(&qword_100055708);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = *(void **)((char *)a2 + v21);
  v23 = *(void **)((char *)a1 + v21);
  *(uint64_t *)((char *)a1 + v21) = (uint64_t)v22;
  v24 = v22;

  v25 = a3[7];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = *(_OWORD *)v27;
  v26[16] = v27[16];
  *(_OWORD *)v26 = v28;
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  return a1;
}

char *sub_10002F5C0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = sub_100003EA4(&qword_100055700);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100003EA4(&qword_100055708);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_OWORD *)v14 = *(_OWORD *)v15;
  v14[16] = v15[16];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  return a1;
}

char *sub_10002F70C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  if (a1 != a2)
  {
    sub_10000EB5C((uint64_t)a1, &qword_100055700);
    v6 = sub_100003EA4(&qword_100055700);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_10000EB5C((uint64_t)&a1[v8], &qword_100055708);
    v11 = sub_100003EA4(&qword_100055708);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = *(void **)&a1[v13];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];

  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_OWORD *)v17 = *(_OWORD *)v18;
  v17[16] = v18[16];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];
  return a1;
}

uint64_t sub_10002F888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002F894);
}

uint64_t sub_10002F894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_100003EA4(&qword_100055710);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100003EA4(qword_100055718);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_10002F944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002F950);
}

uint64_t sub_10002F950(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_100003EA4(&qword_100055710);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_100003EA4(qword_100055718);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for MapView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000565C0;
  if (!qword_1000565C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MapView);
  return result;
}

void sub_10002FA38(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  sub_100011064(319, (unint64_t *)&qword_1000557A0, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100011064(319, &qword_1000557A8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[3] = &unk_100043520;
      v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

uint64_t sub_10002FB00(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100044940, 1);
}

uint64_t sub_10002FB10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;

  v103 = a1;
  v101 = sub_100003EA4(&qword_100056608);
  __chkstk_darwin(v101);
  v102 = (uint64_t *)((char *)&v81 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = sub_100003EA4(&qword_100055EC0);
  __chkstk_darwin(v3);
  v83 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Image.ResizingMode(0);
  v96 = *(_QWORD *)(v5 - 8);
  v97 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100003EA4(&qword_100055EC8);
  v85 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v84 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100003EA4(&qword_100055F68);
  __chkstk_darwin(v82);
  v91 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100003EA4(&qword_100056088);
  __chkstk_darwin(v88);
  v90 = (uint64_t)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100003EA4(&qword_100056610);
  __chkstk_darwin(v87);
  v89 = (uint64_t)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100003EA4(&qword_100056618);
  __chkstk_darwin(v92);
  v94 = (uint64_t)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100003EA4(&qword_100056620);
  v13 = __chkstk_darwin(v100);
  v93 = (uint64_t)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v95 = (uint64_t)&v81 - v15;
  v16 = type metadata accessor for WidgetRenderingMode(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v81 - v21;
  v23 = type metadata accessor for MapView(0);
  v24 = sub_10001115C((uint64_t)v22);
  static WidgetRenderingMode.accented.getter(v24);
  v25 = static WidgetRenderingMode.== infix(_:_:)(v22, v20);
  v26 = *(void (**)(char *, uint64_t))(v17 + 8);
  v26(v20, v16);
  v81 = v26;
  v26(v22, v16);
  v98 = v23;
  v99 = v1;
  v27 = Image.init(uiImage:)(*(id *)(v1 + *(int *)(v23 + 24)));
  v29 = v96;
  v28 = v97;
  (*(void (**)(char *, _QWORD, uint64_t))(v96 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v97);
  v30 = 0.0;
  v31 = Image.resizable(capInsets:resizingMode:)(v7, v27, 0.0, 0.0, 0.0, 0.0);
  swift_release(v27);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v7, v28);
  if ((v25 & 1) != 0)
  {
    v33 = (uint64_t)v83;
    static WidgetAccentedRenderingMode.fullColor.getter(v32);
    v34 = type metadata accessor for WidgetAccentedRenderingMode(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 0, 1, v34);
    v35 = v84;
    Image.widgetAccentedRenderingMode(_:)(v33, v31);
    swift_release(v31);
    sub_10000EB5C(v33, &qword_100055EC0);
    v36 = sub_10001115C((uint64_t)v22);
    static WidgetRenderingMode.accented.getter(v36);
    v37 = static WidgetRenderingMode.== infix(_:_:)(v22, v20);
    v38 = v81;
    v81(v20, v16);
    v38(v22, v16);
    if ((v37 & 1) != 0)
      v39 = 1.0;
    else
      v39 = 0.0;
    v40 = v85;
    v41 = (uint64_t)v91;
    v42 = v86;
    (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v91, v35, v86);
    *(double *)(v41 + *(int *)(v82 + 36)) = v39;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v35, v42);
    v43 = sub_10001115C((uint64_t)v22);
    static WidgetRenderingMode.accented.getter(v43);
    v44 = static WidgetRenderingMode.== infix(_:_:)(v22, v20);
    v38(v20, v16);
    v38(v22, v16);
    if ((v44 & 1) != 0)
      v30 = -0.1;
    v45 = v90;
    sub_100012310(v41, v90, &qword_100055F68);
    *(double *)(v45 + *(int *)(v88 + 36)) = v30;
    sub_10000EB5C(v41, &qword_100055F68);
    v46 = v89;
    sub_100012310(v45, v89, &qword_100056088);
    v47 = v46 + *(int *)(v87 + 36);
    *(_QWORD *)v47 = 0;
    *(_WORD *)(v47 + 8) = 257;
    v48 = sub_10000EB5C(v45, &qword_100056088);
    v49 = 0;
    v50 = 0;
    v51 = (uint64_t *)(v99 + *(int *)(v98 + 28));
    v52 = *((unsigned __int8 *)v51 + 16);
    if ((v52 & 1) == 0)
    {
      v50 = *v51;
      v49 = v51[1];
    }
    v53 = static Alignment.center.getter(v48);
    _FrameLayout.init(width:height:alignment:)(&v104, v50, v52, v49, v52, v53, v54);
    v55 = v94;
    sub_100012310(v46, v94, &qword_100056610);
    v56 = (_OWORD *)(v55 + *(int *)(v92 + 36));
    v57 = v105;
    *v56 = v104;
    v56[1] = v57;
    v56[2] = v106;
    sub_10000EB5C(v46, &qword_100056610);
    v58 = v93;
    sub_100012310(v55, v93, &qword_100056618);
    v59 = v100;
    *(_WORD *)(v58 + *(int *)(v100 + 36)) = 0;
    sub_10000EB5C(v55, &qword_100056618);
    v60 = v95;
    sub_1000304B8(v58, v95);
    v61 = v102;
    sub_100012310(v60, (uint64_t)v102, &qword_100056620);
    swift_storeEnumTagMultiPayload(v61, v101, 0);
    v62 = sub_100003EA4(&qword_100056628);
    v63 = sub_1000303C4(&qword_100056630, &qword_100056620, (void (*)(void))sub_100030330);
    v64 = sub_1000303C4(&qword_100056658, &qword_100056628, (void (*)(void))sub_100030430);
    _ConditionalContent<>.init(storage:)(v61, v59, v62, v63, v64);
    return sub_10000EB5C(v60, &qword_100056620);
  }
  else
  {
    v66 = (uint64_t *)(v99 + *(int *)(v98 + 28));
    v67 = *((unsigned __int8 *)v66 + 16);
    if ((v67 & 1) != 0)
    {
      v68 = 0;
      v69 = 0;
    }
    else
    {
      v69 = *v66;
      v68 = v66[1];
    }
    v70 = static Alignment.center.getter(v32);
    _FrameLayout.init(width:height:alignment:)(&v104, v69, v67, v68, v67, v70, v71);
    v72 = v104;
    v73 = BYTE8(v104);
    v74 = v105;
    v75 = BYTE8(v105);
    v76 = v101;
    v77 = v102;
    *v102 = v31;
    v77[1] = 0;
    *((_WORD *)v77 + 8) = 257;
    v77[3] = v72;
    *((_BYTE *)v77 + 32) = v73;
    v77[5] = v74;
    *((_BYTE *)v77 + 48) = v75;
    *(_OWORD *)(v77 + 7) = v106;
    *((_WORD *)v77 + 36) = 0;
    swift_storeEnumTagMultiPayload(v77, v76, 1);
    v78 = sub_100003EA4(&qword_100056628);
    v79 = sub_1000303C4(&qword_100056630, &qword_100056620, (void (*)(void))sub_100030330);
    v80 = sub_1000303C4(&qword_100056658, &qword_100056628, (void (*)(void))sub_100030430);
    return _ConditionalContent<>.init(storage:)(v77, v100, v78, v79, v80);
  }
}

uint64_t sub_100030330()
{
  return sub_10002001C(&qword_100056638, &qword_100056618, (void (*)(void))sub_100030354);
}

uint64_t sub_100030354()
{
  return sub_10002001C(&qword_100056640, &qword_100056610, (void (*)(void))sub_10002D43C);
}

unint64_t sub_100030378()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056648;
  if (!qword_100056648)
  {
    v1 = sub_100003EE4(&qword_100056650);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ClipEffect<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100056648);
  }
  return result;
}

uint64_t sub_1000303C4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100003EE4(a2);
    a3();
    sub_100030378();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100030430()
{
  return sub_10002001C(&qword_100056660, &qword_100056668, (void (*)(void))sub_100030454);
}

unint64_t sub_100030454()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056670;
  if (!qword_100056670)
  {
    v1 = sub_100003EE4(&qword_100056678);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100056670);
  }
  return result;
}

uint64_t sub_1000304B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003EA4(&qword_100056620);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for MapViewStyle()
{
  return &type metadata for MapViewStyle;
}

unint64_t sub_100030514()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056680;
  if (!qword_100056680)
  {
    v1 = sub_100003EE4(&qword_100056688);
    sub_1000303C4(&qword_100056630, &qword_100056620, (void (*)(void))sub_100030330);
    sub_1000303C4(&qword_100056658, &qword_100056628, (void (*)(void))sub_100030430);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100056680);
  }
  return result;
}

void sub_1000305B0(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  int *v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  NSString v15;
  void *v16;
  id v17;
  NSString v18;
  id v19;
  NSString v20;
  id v21;
  uint64_t v22;
  id v23;
  NSString v24;
  void *v25;
  id v26;
  NSString v27;
  id v28;
  NSString v29;
  id v30;

  sub_10001C888(a1, a5, &qword_100056550);
  v11 = (int *)type metadata accessor for BatteryView(0);
  v12 = a5 + v11[5];
  *(float *)v12 = a6;
  *(_BYTE *)(v12 + 4) = a2 & 1;
  *(_BYTE *)(v12 + 5) = BYTE1(a2) & 1;
  *(_BYTE *)(v12 + 6) = BYTE2(a2) & 1;
  *(_QWORD *)(v12 + 8) = a3;
  *(_QWORD *)(v12 + 16) = a4;
  v13 = (_OWORD *)(a5 + v11[6]);
  if (qword_100055348 != -1)
    swift_once(&qword_100055348, sub_1000308FC);
  v14 = unk_100058700;
  *v13 = xmmword_1000586F0;
  v13[1] = v14;
  v13[2] = xmmword_100058710;
  v15 = String._bridgeToObjectiveC()();
  v16 = (void *)objc_opt_self(UIImage);
  v17 = objc_msgSend(v16, "imageNamed:", v15);

  if (!v17)
  {
    __break(1u);
    goto LABEL_11;
  }
  *(_QWORD *)(a5 + v11[7]) = v17;
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v16, "imageNamed:", v18);

  if (!v19)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *(_QWORD *)(a5 + v11[8]) = v19;
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend(v16, "imageNamed:", v20);

  if (!v21)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v22 = v11[9];
  v23 = objc_msgSend(v21, "imageWithRenderingMode:", 2);

  *(_QWORD *)(a5 + v22) = v23;
  v24 = String._bridgeToObjectiveC()();
  v25 = (void *)objc_opt_self(UIColor);
  v26 = objc_msgSend(v25, "colorNamed:", v24);

  if (!v26)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  *(_QWORD *)(a5 + v11[10]) = v26;
  v27 = String._bridgeToObjectiveC()();
  v28 = objc_msgSend(v25, "colorNamed:", v27);

  if (!v28)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(_QWORD *)(a5 + v11[11]) = v28;
  v29 = String._bridgeToObjectiveC()();
  v30 = objc_msgSend(v25, "colorNamed:", v29);

  if (v30)
  {
    *(_QWORD *)(a5 + v11[12]) = v30;
    return;
  }
LABEL_15:
  __break(1u);
}

uint64_t type metadata accessor for BatteryView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000566E8;
  if (!qword_1000566E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BatteryView);
  return result;
}

double sub_1000308FC()
{
  double result;

  __asm { FMOV            V0.2D, #2.0 }
  xmmword_1000586F0 = _Q0;
  unk_100058700 = xmmword_1000435A0;
  result = 4.0;
  xmmword_100058710 = xmmword_1000435B0;
  return result;
}

uint64_t *sub_100030924(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100003EA4(&qword_1000557F8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_DWORD *)v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    *(_WORD *)(v16 + 5) = *(_WORD *)(v17 + 5);
    v18 = *((_QWORD *)v17 + 2);
    *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
    *((_QWORD *)v16 + 2) = v18;
    v19 = (_OWORD *)((char *)a1 + v15);
    v20 = (_OWORD *)((char *)a2 + v15);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v19[2] = v20[2];
    v22 = a3[7];
    v23 = a3[8];
    v24 = *(void **)((char *)a2 + v22);
    *(uint64_t *)((char *)a1 + v22) = (uint64_t)v24;
    v25 = *(void **)((char *)a2 + v23);
    *(uint64_t *)((char *)a1 + v23) = (uint64_t)v25;
    v26 = a3[9];
    v27 = a3[10];
    v28 = *(void **)((char *)a2 + v26);
    *(uint64_t *)((char *)a1 + v26) = (uint64_t)v28;
    v29 = *(void **)((char *)a2 + v27);
    *(uint64_t *)((char *)a1 + v27) = (uint64_t)v29;
    v30 = a3[11];
    v31 = a3[12];
    v32 = *(void **)((char *)a2 + v30);
    *(uint64_t *)((char *)a1 + v30) = (uint64_t)v32;
    v33 = *(void **)((char *)a2 + v31);
    *(uint64_t *)((char *)a1 + v31) = (uint64_t)v33;
    swift_bridgeObjectRetain(v18);
    v34 = v24;
    v35 = v25;
    v36 = v28;
    v37 = v29;
    v38 = v32;
    v39 = v33;
  }
  return a1;
}

void sub_100030A9C(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100003EA4(&qword_1000557F8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[5] + 16));

}

uint64_t *sub_100030B58(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;

  v6 = sub_100003EA4(&qword_1000557F8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  *(_WORD *)(v14 + 5) = *(_WORD *)(v15 + 5);
  v16 = *((_QWORD *)v15 + 2);
  *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
  *((_QWORD *)v14 + 2) = v16;
  v17 = (_OWORD *)((char *)a1 + v13);
  v18 = (_OWORD *)((char *)a2 + v13);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v17[2] = v18[2];
  v20 = a3[7];
  v21 = a3[8];
  v22 = *(void **)((char *)a2 + v20);
  *(uint64_t *)((char *)a1 + v20) = (uint64_t)v22;
  v23 = *(void **)((char *)a2 + v21);
  *(uint64_t *)((char *)a1 + v21) = (uint64_t)v23;
  v24 = a3[9];
  v25 = a3[10];
  v26 = *(void **)((char *)a2 + v24);
  *(uint64_t *)((char *)a1 + v24) = (uint64_t)v26;
  v27 = *(void **)((char *)a2 + v25);
  *(uint64_t *)((char *)a1 + v25) = (uint64_t)v27;
  v28 = a3[11];
  v29 = a3[12];
  v30 = *(void **)((char *)a2 + v28);
  *(uint64_t *)((char *)a1 + v28) = (uint64_t)v30;
  v31 = *(void **)((char *)a2 + v29);
  *(uint64_t *)((char *)a1 + v29) = (uint64_t)v31;
  swift_bridgeObjectRetain(v16);
  v32 = v22;
  v33 = v23;
  v34 = v26;
  v35 = v27;
  v36 = v30;
  v37 = v31;
  return a1;
}

uint64_t *sub_100030CA4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;

  if (a1 != a2)
  {
    sub_10000EB5C((uint64_t)a1, &qword_1000557F8);
    v6 = sub_100003EA4(&qword_1000557F8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_DWORD *)v13 = *(_DWORD *)v14;
  v13[4] = v14[4];
  v13[5] = v14[5];
  v13[6] = v14[6];
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  v15 = *((_QWORD *)v14 + 2);
  v16 = *((_QWORD *)v13 + 2);
  *((_QWORD *)v13 + 2) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[6];
  v18 = (uint64_t *)((char *)a1 + v17);
  v19 = (uint64_t *)((char *)a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  v18[2] = v19[2];
  v18[3] = v19[3];
  v18[4] = v19[4];
  v18[5] = v19[5];
  v20 = a3[7];
  v21 = *(void **)((char *)a2 + v20);
  v22 = *(void **)((char *)a1 + v20);
  *(uint64_t *)((char *)a1 + v20) = (uint64_t)v21;
  v23 = v21;

  v24 = a3[8];
  v25 = *(void **)((char *)a2 + v24);
  v26 = *(void **)((char *)a1 + v24);
  *(uint64_t *)((char *)a1 + v24) = (uint64_t)v25;
  v27 = v25;

  v28 = a3[9];
  v29 = *(void **)((char *)a2 + v28);
  v30 = *(void **)((char *)a1 + v28);
  *(uint64_t *)((char *)a1 + v28) = (uint64_t)v29;
  v31 = v29;

  v32 = a3[10];
  v33 = *(void **)((char *)a2 + v32);
  v34 = *(void **)((char *)a1 + v32);
  *(uint64_t *)((char *)a1 + v32) = (uint64_t)v33;
  v35 = v33;

  v36 = a3[11];
  v37 = *(void **)((char *)a2 + v36);
  v38 = *(void **)((char *)a1 + v36);
  *(uint64_t *)((char *)a1 + v36) = (uint64_t)v37;
  v39 = v37;

  v40 = a3[12];
  v41 = *(void **)((char *)a2 + v40);
  v42 = *(void **)((char *)a1 + v40);
  *(uint64_t *)((char *)a1 + v40) = (uint64_t)v41;
  v43 = v41;

  return a1;
}

char *sub_100030E74(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_100003EA4(&qword_1000557F8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
  v12 = &a1[v9];
  v13 = &a2[v9];
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
  v15 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v15] = *(_QWORD *)&a2[v15];
  v16 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];
  v17 = a3[12];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  return a1;
}

char *sub_100030F80(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;

  if (a1 != a2)
  {
    sub_10000EB5C((uint64_t)a1, &qword_1000557F8);
    v6 = sub_100003EA4(&qword_1000557F8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_DWORD *)v9 = *(_DWORD *)v10;
  v9[4] = v10[4];
  v9[5] = v10[5];
  v9[6] = v10[6];
  v12 = *((_QWORD *)v10 + 1);
  v11 = *((_QWORD *)v10 + 2);
  v13 = *((_QWORD *)v9 + 2);
  *((_QWORD *)v9 + 1) = v12;
  *((_QWORD *)v9 + 2) = v11;
  swift_bridgeObjectRelease(v13);
  v14 = a3[6];
  v15 = a3[7];
  v16 = &a1[v14];
  v17 = &a2[v14];
  v18 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v18;
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  v19 = *(void **)&a1[v15];
  *(_QWORD *)&a1[v15] = *(_QWORD *)&a2[v15];

  v20 = a3[8];
  v21 = *(void **)&a1[v20];
  *(_QWORD *)&a1[v20] = *(_QWORD *)&a2[v20];

  v22 = a3[9];
  v23 = *(void **)&a1[v22];
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];

  v24 = a3[10];
  v25 = *(void **)&a1[v24];
  *(_QWORD *)&a1[v24] = *(_QWORD *)&a2[v24];

  v26 = a3[11];
  v27 = *(void **)&a1[v26];
  *(_QWORD *)&a1[v26] = *(_QWORD *)&a2[v26];

  v28 = a3[12];
  v29 = *(void **)&a1[v28];
  *(_QWORD *)&a1[v28] = *(_QWORD *)&a2[v28];

  return a1;
}

uint64_t sub_100031100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003110C);
}

uint64_t sub_10003110C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100003EA4(&qword_100056550);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10003118C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100031198);
}

uint64_t sub_100031198(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003EA4(&qword_100056550);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

void sub_100031214(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  sub_1000312A8(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1000435E0;
    v4[2] = &unk_1000435F8;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
  }
}

void sub_1000312A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100056020)
  {
    v2 = type metadata accessor for LayoutDirection(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100056020);
  }
}

uint64_t sub_1000312FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000449AC, 1);
}

void sub_10003130C(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char v10;
  void (*v11)(char *, uint64_t);
  int *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  double *v16;
  double v17;
  double v18;
  void *v19;
  id v20;
  id v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = type metadata accessor for LayoutDirection(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v28 - v8;
  sub_1000113F0((uint64_t)&v28 - v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for LayoutDirection.leftToRight(_:), v3);
  v10 = static LayoutDirection.== infix(_:_:)(v9, v7);
  v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v7, v3);
  v11(v9, v3);
  v12 = (int *)type metadata accessor for BatteryView(0);
  v13 = v1 + v12[5];
  if ((*(_BYTE *)(v13 + 5) & 1) != 0)
  {
    v14 = 12;
  }
  else
  {
    v14 = 10;
    if (*(_BYTE *)(v13 + 6))
      v14 = 11;
  }
  v15 = *(void **)(v1 + v12[v14]);
  v16 = (double *)(v1 + v12[6]);
  v17 = v16[5];
  if (v17 * *(float *)v13 > v16[4])
    v18 = v17 * *(float *)v13;
  else
    v18 = v16[4];
  v19 = *(void **)(v1 + v12[7]);
  v20 = v15;
  v21 = objc_msgSend(v19, "size");
  v23 = v16[1];
  if ((v10 & 1) != 0)
  {
    v24 = v17 - v18 + v16[2];
  }
  else
  {
    v23 = v17 + v23 - v18;
    v24 = v16[2];
  }
  v25 = v22 - (*v16 + *v16);
  *(_QWORD *)a1 = static Alignment.center.getter(v21);
  *((_QWORD *)a1 + 1) = v26;
  v27 = sub_100003EA4(&qword_100056740);
  sub_1000314D4(v1, v20, &a1[*(int *)(v27 + 44)], v23, v18, v25, v24);

}

uint64_t sub_1000314D4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  double (*v39)(char *, char *, uint64_t);
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  void (*v64)(char *, _QWORD, uint64_t, uint64_t);
  char *v65;
  uint64_t v66;
  void *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;

  v66 = a1;
  v67 = a2;
  v73 = a3;
  v12 = sub_100003EA4(&qword_100056748);
  v69 = *(_QWORD *)(v12 - 8);
  v70 = v12;
  __chkstk_darwin(v12);
  v65 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003EA4(&qword_100056750);
  v15 = __chkstk_darwin(v14);
  v72 = (uint64_t)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v75 = (uint64_t)&v64 - v17;
  v18 = sub_100003EA4(&qword_100056758);
  v19 = __chkstk_darwin(v18);
  v71 = (uint64_t)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v64 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v64 - v24;
  v26 = sub_100003EA4(&qword_100055EC0);
  __chkstk_darwin(v26);
  v28 = (char *)&v64 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100003EA4(&qword_100055EC8);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v64 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v35 = (char *)&v64 - v34;
  v36 = (int *)type metadata accessor for BatteryView(0);
  v37 = Image.init(uiImage:)(*(id *)(a1 + v36[7]));
  static WidgetAccentedRenderingMode.desaturated.getter(v37);
  v38 = type metadata accessor for WidgetAccentedRenderingMode(0);
  v64 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56);
  v64(v28, 0, 1, v38);
  Image.widgetAccentedRenderingMode(_:)(v28, v37);
  swift_release(v37);
  sub_10000EB5C((uint64_t)v28, &qword_100055EC0);
  v74 = v30;
  v39 = *(double (**)(char *, char *, uint64_t))(v30 + 32);
  v68 = v35;
  v40 = v39(v35, v33, v29);
  *(_QWORD *)v23 = static VerticalAlignment.center.getter(v40);
  *((_QWORD *)v23 + 1) = 0;
  v23[16] = 1;
  v41 = sub_100003EA4(&qword_100056760);
  v42 = v66;
  sub_1000319E0(v66, v67, &v23[*(int *)(v41 + 44)], a4, a5, a6, a7);
  v43 = (uint64_t)v25;
  v44 = (uint64_t)v25;
  v45 = v42;
  sub_10001C888((uint64_t)v23, v44, &qword_100056758);
  if (*(_BYTE *)(v42 + v36[5] + 4) == 1)
  {
    v46 = Image.init(uiImage:)(*(id *)(v42 + v36[8]));
    static WidgetAccentedRenderingMode.desaturated.getter(v46);
    v64(v28, 0, 1, v38);
    Image.widgetAccentedRenderingMode(_:)(v28, v46);
    swift_release(v46);
    sub_10000EB5C((uint64_t)v28, &qword_100055EC0);
    v47 = *(_QWORD *)(v45 + v36[6] + 24);
    v48 = v74;
    v49 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v50 = (uint64_t)v65;
    v49(v65, v33, v29);
    v51 = v70;
    v52 = (_QWORD *)(v50 + *(int *)(v70 + 36));
    *v52 = v47;
    v52[1] = 0;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v33, v29);
    v53 = v75;
    sub_10001C888(v50, v75, &qword_100056748);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v53, 0, 1, v51);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 56))(v75, 1, 1, v70);
    v49 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
  }
  v54 = v33;
  v55 = v33;
  v56 = v68;
  v49(v54, v68, v29);
  v57 = v71;
  sub_100012310(v43, v71, &qword_100056758);
  v58 = v75;
  v59 = v72;
  sub_100012310(v75, v72, &qword_100056750);
  v60 = v73;
  v49(v73, v55, v29);
  v61 = sub_100003EA4(&qword_100056768);
  sub_100012310(v57, (uint64_t)&v60[*(int *)(v61 + 48)], &qword_100056758);
  sub_100012310(v59, (uint64_t)&v60[*(int *)(v61 + 64)], &qword_100056750);
  sub_10000EB5C(v58, &qword_100056750);
  sub_10000EB5C(v43, &qword_100056758);
  v62 = *(void (**)(char *, uint64_t))(v74 + 8);
  v62(v56, v29);
  sub_10000EB5C(v59, &qword_100056750);
  sub_10000EB5C(v57, &qword_100056758);
  return ((uint64_t (*)(char *, uint64_t))v62)(v55, v29);
}

uint64_t sub_1000319E0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  id v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned __int8 v73;
  uint64_t v74;
  unsigned __int8 v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD v78[3];
  void *v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;

  v70 = a2;
  v71 = a3;
  v12 = sub_100003EA4(&qword_100055EC0);
  __chkstk_darwin(v12);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Image.ResizingMode(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100003EA4(&qword_100055EC8);
  v19 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100003EA4(&qword_100055ED0);
  __chkstk_darwin(v60);
  v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100003EA4(&qword_100055ED8);
  v24 = __chkstk_darwin(v63);
  v26 = (char *)&v59 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v62 = (uint64_t)&v59 - v28;
  v29 = static Alignment.center.getter(v27);
  _FrameLayout.init(width:height:alignment:)(&v72, *(_QWORD *)&a4, 0, 0, 1, v29, v30);
  v69 = v72;
  v68 = v73;
  v67 = v74;
  v66 = v75;
  v65 = v76;
  v64 = v77;
  v31 = *(id *)(a1 + *(int *)(type metadata accessor for BatteryView(0) + 36));
  v32 = Image.init(uiImage:)(v31);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for Image.ResizingMode.stretch(_:), v15);
  v33 = Image.resizable(capInsets:resizingMode:)(v18, v32, 0.0, 0.0, 0.0, 0.0);
  swift_release(v32);
  v34 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  static WidgetAccentedRenderingMode.desaturated.getter(v34);
  v35 = type metadata accessor for WidgetAccentedRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v14, 0, 1, v35);
  Image.widgetAccentedRenderingMode(_:)(v14, v33);
  swift_release(v33);
  sub_10000EB5C((uint64_t)v14, &qword_100055EC0);
  v36 = Color.init(_:)(v70);
  KeyPath = swift_getKeyPath(&unk_100043660);
  v38 = v61;
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v23, v21, v61);
  v39 = (uint64_t *)&v23[*(int *)(v60 + 36)];
  *v39 = KeyPath;
  v39[1] = v36;
  v40 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v38);
  v41 = static Alignment.center.getter(v40);
  _FrameLayout.init(width:height:alignment:)(v78, *(_QWORD *)&a5, 0, *(_QWORD *)&a6, 0, v41, v42);
  v43 = (uint64_t)v26;
  sub_100012310((uint64_t)v23, (uint64_t)v26, &qword_100055ED0);
  v44 = &v26[*(int *)(v63 + 36)];
  v45 = v78[1];
  *(_OWORD *)v44 = v78[0];
  *((_OWORD *)v44 + 1) = v45;
  *((_OWORD *)v44 + 2) = v78[2];
  sub_10000EB5C((uint64_t)v23, &qword_100055ED0);
  v46 = (uint64_t)v26;
  v47 = v62;
  v48 = sub_10001C888(v46, v62, &qword_100055ED8);
  v49 = static Alignment.center.getter(v48);
  _FrameLayout.init(width:height:alignment:)(&v79, *(_QWORD *)&a7, 0, 0, 1, v49, v50);
  v70 = v79;
  LOBYTE(v21) = v80;
  v51 = v81;
  LOBYTE(v23) = v82;
  v52 = v83;
  v53 = v84;
  sub_100012310(v47, v43, &qword_100055ED8);
  v54 = v71;
  *v71 = 0;
  *((_BYTE *)v54 + 8) = 1;
  v54[2] = v69;
  *((_BYTE *)v54 + 24) = v68;
  v54[4] = v67;
  *((_BYTE *)v54 + 40) = v66;
  v55 = v64;
  v54[6] = v65;
  v54[7] = v55;
  v56 = sub_100003EA4(&qword_100056770);
  sub_100012310(v43, (uint64_t)v54 + *(int *)(v56 + 48), &qword_100055ED8);
  v57 = (char *)v54 + *(int *)(v56 + 64);
  *(_QWORD *)v57 = 0;
  v57[8] = 1;
  *((_QWORD *)v57 + 2) = v70;
  v57[24] = (char)v21;
  *((_QWORD *)v57 + 4) = v51;
  v57[40] = (char)v23;
  *((_QWORD *)v57 + 6) = v52;
  *((_QWORD *)v57 + 7) = v53;
  sub_10000EB5C(v47, &qword_100055ED8);
  return sub_10000EB5C(v43, &qword_100055ED8);
}

__n128 initializeWithCopy for BatteryViewStyle(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for BatteryViewStyle(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BatteryViewStyle(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BatteryViewStyle()
{
  return &type metadata for BatteryViewStyle;
}

unint64_t sub_100031F80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056778;
  if (!qword_100056778)
  {
    v1 = sub_100003EE4(&qword_100056780);
    result = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100056778);
  }
  return result;
}

uint64_t (*sub_100031FDC(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_100032038;
}

uint64_t sub_100032040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100032724();
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100032090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100032724();
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000320E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100032724();
  return Shape.body.getter(a1, v2);
}

double sub_100032118@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  id *v5;
  double Width;
  double Height;
  double result;
  __int128 v14;
  _QWORD v15[5];
  _OWORD v16[2];
  char v17;
  CGAffineTransform v18;
  CGRect v19;
  CGRect v20;

  Path.init(_:)(v15, objc_msgSend(*v5, "CGPath"));
  v19.origin.x = a2;
  v19.origin.y = a3;
  v19.size.width = a4;
  v19.size.height = a5;
  Width = CGRectGetWidth(v19);
  v20.origin.x = a2;
  v20.origin.y = a3;
  v20.size.width = a4;
  v20.size.height = a5;
  Height = CGRectGetHeight(v20);
  if (Height >= Width)
    Height = Width;
  CGAffineTransformMakeScale(&v18, Height, Height);
  Path.applying(_:)(v16, &v18);
  sub_100032694((uint64_t)v15);
  result = *(double *)v16;
  v14 = v16[1];
  *(_OWORD *)a1 = v16[0];
  *(_OWORD *)(a1 + 16) = v14;
  *(_BYTE *)(a1 + 32) = v17;
  return result;
}

uint64_t sub_100032200()
{
  return Shape.sizeThatFits(_:)();
}

void sub_100032218(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_100032244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000326E0();
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100032294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000326E0();
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000322E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000326E0();
  return Shape.body.getter(a1, v2);
}

void *sub_10003231C(char a1)
{
  id v2;
  void *v3;
  double v4;
  double v5;

  v2 = objc_msgSend(objc_allocWithZone((Class)UIBezierPath), "init");
  v3 = v2;
  v4 = 1.0;
  if ((a1 & 1) != 0)
  {
    v4 = 1.08333333;
    v5 = 0.148889948;
  }
  else
  {
    v5 = 0.0;
  }
  objc_msgSend(v2, "moveToPoint:", 0.5, v4);
  objc_msgSend(v3, "addArcWithCenter:radius:startAngle:endAngle:clockwise:", 1, 0.5, 0.5, 0.5, v5 + 1.57079633, 1.57079633 - v5 + -2.22044605e-16);
  objc_msgSend(v3, "closePath");
  return v3;
}

void *sub_1000323E4(char a1)
{
  id v2;
  void *v3;

  v2 = objc_msgSend(objc_allocWithZone((Class)UIBezierPath), "init");
  v3 = v2;
  if ((a1 & 1) != 0)
  {
    objc_msgSend(v2, "moveToPoint:", 0.5, 1.08333333);
    objc_msgSend(v3, "addArcWithCenter:radius:startAngle:endAngle:clockwise:", 0, 0.5, 0.5, 0.5, 1.71968627, 1.42190638);
    objc_msgSend(v3, "closePath");
  }
  return v3;
}

ValueMetadata *type metadata accessor for BubbleTipShape()
{
  return &type metadata for BubbleTipShape;
}

ValueMetadata *type metadata accessor for BubbleShape()
{
  return &type metadata for BubbleShape;
}

uint64_t sub_1000324A4()
{
  return sub_1000325C4(&qword_100056788, &qword_100056790);
}

unint64_t sub_1000324CC()
{
  unint64_t result;

  result = qword_100056798;
  if (!qword_100056798)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_100056798);
  }
  return result;
}

unint64_t sub_100032514()
{
  unint64_t result;

  result = qword_1000567A0;
  if (!qword_1000567A0)
  {
    result = swift_getWitnessTable(&unk_100043750, &type metadata for BubbleShape);
    atomic_store(result, (unint64_t *)&qword_1000567A0);
  }
  return result;
}

unint64_t sub_10003255C()
{
  unint64_t result;

  result = qword_1000567A8;
  if (!qword_1000567A8)
  {
    result = swift_getWitnessTable(&unk_100043700, &type metadata for BubbleShape);
    atomic_store(result, (unint64_t *)&qword_1000567A8);
  }
  return result;
}

uint64_t sub_1000325A0()
{
  return sub_1000325C4(&qword_1000567B0, &qword_1000567B8);
}

uint64_t sub_1000325C4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100003EE4(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ShapeView<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100032608()
{
  unint64_t result;

  result = qword_1000567C0;
  if (!qword_1000567C0)
  {
    result = swift_getWitnessTable(&unk_100043840, &type metadata for BubbleTipShape);
    atomic_store(result, (unint64_t *)&qword_1000567C0);
  }
  return result;
}

unint64_t sub_100032650()
{
  unint64_t result;

  result = qword_1000567C8;
  if (!qword_1000567C8)
  {
    result = swift_getWitnessTable(&unk_1000437F0, &type metadata for BubbleTipShape);
    atomic_store(result, (unint64_t *)&qword_1000567C8);
  }
  return result;
}

uint64_t sub_100032694(uint64_t a1)
{
  sub_1000326C8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t sub_1000326C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3)
    return swift_release(result);
  return result;
}

unint64_t sub_1000326E0()
{
  unint64_t result;

  result = qword_1000567D0;
  if (!qword_1000567D0)
  {
    result = swift_getWitnessTable(&unk_100043890, &type metadata for BubbleTipShape);
    atomic_store(result, (unint64_t *)&qword_1000567D0);
  }
  return result;
}

unint64_t sub_100032724()
{
  unint64_t result;

  result = qword_1000567D8;
  if (!qword_1000567D8)
  {
    result = swift_getWitnessTable(&unk_1000437A0, &type metadata for BubbleShape);
    atomic_store(result, (unint64_t *)&qword_1000567D8);
  }
  return result;
}

id sub_10003276C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.905882353, 0.905882353, 0.905882353, 1.0);
  qword_100058720 = (uint64_t)result;
  return result;
}

id sub_1000327B0(uint64_t a1, uint64_t a2, unint64_t a3, double a4)
{
  char *v4;
  uint64_t v9;
  void *v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  void *v22;
  void *v23;
  char *v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  void *v31;
  void *v32;
  char *v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  objc_super v51;

  v9 = OBJC_IVAR____TtC17FindMyWidgetItems11DataManager_geoTraits;
  v10 = (void *)objc_opt_self(GEOMapService);
  v11 = v4;
  v12 = objc_msgSend(v10, "sharedService");
  v13 = objc_msgSend(v12, "defaultTraits");

  *(_QWORD *)&v4[v9] = v13;
  v14 = OBJC_IVAR____TtC17FindMyWidgetItems11DataManager_geoService;
  *(_QWORD *)&v11[v14] = objc_msgSend(v10, "sharedService");
  *(_QWORD *)&v11[OBJC_IVAR____TtC17FindMyWidgetItems11DataManager_currentLocation] = 0;
  v11[OBJC_IVAR____TtC17FindMyWidgetItems11DataManager_deinited] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC17FindMyWidgetItems11DataManager_userDefaultsManager] = a1;
  v15 = (uint64_t *)&v11[OBJC_IVAR____TtC17FindMyWidgetItems11DataManager_instanceId];
  *v15 = a2;
  v15[1] = a3;
  swift_bridgeObjectRetain_n(a3, 2);
  v48 = a1;
  swift_retain(a1);
  v16 = sub_10003BC10(a2, a3, a4);
  v18 = v17;
  v20 = v19;
  v21 = v16;
  v23 = v22;
  v24 = &v11[OBJC_IVAR____TtC17FindMyWidgetItems11DataManager_mapGenerator];
  *(_QWORD *)v24 = v17;
  *((_QWORD *)v24 + 1) = v19;
  *((double *)v24 + 2) = v16;
  *((_QWORD *)v24 + 3) = v22;
  swift_bridgeObjectRetain(a3);
  v25 = sub_100036C64(a2, a3, a4);
  v27 = v26;
  v29 = v28;
  v30 = v25;
  v32 = v31;
  v33 = &v11[OBJC_IVAR____TtC17FindMyWidgetItems11DataManager_imageGenerator];
  *(_QWORD *)v33 = v26;
  *((_QWORD *)v33 + 1) = v28;
  *((double *)v33 + 2) = v25;
  *((_QWORD *)v33 + 3) = v31;
  v34 = type metadata accessor for ItemsDataService();
  swift_allocObject(v34, 152, 7);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(v20);
  v35 = v23;
  swift_bridgeObjectRetain(v29);
  v36 = v32;
  v37 = sub_10000CE28(v18, v20, v35, v27, v29, v36, a2, a3, v21, v30, a4);

  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v29);
  *(_QWORD *)&v11[OBJC_IVAR____TtC17FindMyWidgetItems11DataManager_itemsDataService] = v37;

  v51.receiver = v11;
  v51.super_class = (Class)type metadata accessor for DataManager();
  v38 = objc_msgSendSuper2(&v51, "init");
  v39 = qword_100055338;
  v40 = v38;
  if (v39 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v41 = type metadata accessor for Logger(0);
  sub_10000CF34(v41, (uint64_t)qword_1000586D0);
  v42 = swift_bridgeObjectRetain(a3);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    v46 = swift_slowAlloc(32, -1);
    v50 = v46;
    *(_DWORD *)v45 = 136315138;
    swift_bridgeObjectRetain(a3);
    v49 = sub_100011770(a2, a3, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v45 + 4, v45 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "🥑 DataManager%s: init", v45, 0xCu);
    swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);

    swift_release(v48);
  }
  else
  {

    swift_release(v48);
    swift_bridgeObjectRelease_n(a3, 2);
  }
  return v40;
}

id sub_100032B80()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  objc_class *v9;
  uint64_t v11;
  uint64_t v12;
  objc_super v13;

  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v1 = type metadata accessor for Logger(0);
  sub_10000CF34(v1, (uint64_t)qword_1000586D0);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = *(_QWORD *)&v2[OBJC_IVAR____TtC17FindMyWidgetItems11DataManager_instanceId];
    v8 = *(_QWORD *)&v2[OBJC_IVAR____TtC17FindMyWidgetItems11DataManager_instanceId + 8];
    swift_bridgeObjectRetain(v8);
    v11 = sub_100011770(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "🥑 DataManager%s: deinit", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v9 = (objc_class *)type metadata accessor for DataManager();
  v13.receiver = v2;
  v13.super_class = v9;
  return objc_msgSendSuper2(&v13, "dealloc");
}

uint64_t sub_100032E1C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64_t v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  char *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v14 = type metadata accessor for Logger(0);
  sub_10000CF34(v14, (uint64_t)qword_1000586D0);
  v15 = a1;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(22, -1);
    v34 = a3;
    v19 = swift_slowAlloc(64, -1);
    v36 = v19;
    *(_DWORD *)v18 = 136315394;
    v33 = a4;
    v20 = a2;
    v21 = *(_QWORD *)&v15[OBJC_IVAR____TtC17FindMyWidgetItems11DataManager_instanceId];
    v22 = *(_QWORD *)&v15[OBJC_IVAR____TtC17FindMyWidgetItems11DataManager_instanceId + 8];
    swift_bridgeObjectRetain(v22);
    v35 = sub_100011770(v21, v22, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v18 + 4, v18 + 12);

    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v18 + 12) = 2080;
    v23 = CGSize.debugDescription.getter(a6, a7);
    v25 = v24;
    v35 = sub_100011770(v23, v24, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v18 + 14, v18 + 22);
    v26 = v25;
    a2 = v20;
    a4 = v33;
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "🥑 DataManager%s: create data for %s…", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    v27 = v19;
    a3 = v34;
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

  }
  v28 = *(void **)&v15[OBJC_IVAR____TtC17FindMyWidgetItems11DataManager_currentLocation];
  v29 = swift_allocObject(&unk_100052BB8, 56, 7);
  *(_QWORD *)(v29 + 16) = v15;
  *(double *)(v29 + 24) = a6;
  *(double *)(v29 + 32) = a7;
  *(_QWORD *)(v29 + 40) = a4;
  *(_QWORD *)(v29 + 48) = a5;
  v30 = v28;
  swift_retain(a5);
  v31 = v15;
  sub_1000089D0(a2, a3, (uint64_t)v28, (void (*)(_QWORD))sub_10003335C, v29, a6, a7);

  return swift_release(v29);
}

uint64_t sub_1000330BC(uint64_t a1, void *a2, uint64_t (*a3)(_QWORD), double a4, double a5)
{
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD);
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;

  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v10 = type metadata accessor for Logger(0);
  sub_10000CF34(v10, (uint64_t)qword_1000586D0);
  v11 = a2;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v24 = v15;
    *(_DWORD *)v14 = 136315394;
    v16 = a3;
    v18 = *(_QWORD *)&v11[OBJC_IVAR____TtC17FindMyWidgetItems11DataManager_instanceId];
    v17 = *(_QWORD *)&v11[OBJC_IVAR____TtC17FindMyWidgetItems11DataManager_instanceId + 8];
    swift_bridgeObjectRetain(v17);
    v23 = sub_100011770(v18, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v14 + 4, v14 + 12);

    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v14 + 12) = 2080;
    v19 = CGSize.debugDescription.getter(a4, a5);
    v21 = v20;
    v23 = sub_100011770(v19, v20, &v24);
    a3 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "🥑 DataManager%s: created data for %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

  }
  return a3(a1);
}

uint64_t type metadata accessor for DataManager()
{
  return objc_opt_self(_TtC17FindMyWidgetItems11DataManager);
}

uint64_t sub_100033330()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10003335C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000330BC(a1, *(void **)(v1 + 16), *(uint64_t (**)(_QWORD))(v1 + 40), *(double *)(v1 + 24), *(double *)(v1 + 32));
}

uint64_t *sub_10003336C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  id v19;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100003EA4(&qword_100056268);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = (uint64_t)v16;
    v17 = *(void **)((char *)a2 + v15);
    *(uint64_t *)((char *)a1 + v15) = (uint64_t)v17;
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v18 = v16;
    v19 = v17;
  }
  return a1;
}

void sub_100033460(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100003EA4(&qword_100056268);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }

}

uint64_t *sub_1000334DC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;

  v6 = sub_100003EA4(&qword_100056268);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = *(void **)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = (uint64_t)v14;
  v15 = *(void **)((char *)a2 + v13);
  *(uint64_t *)((char *)a1 + v13) = (uint64_t)v15;
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  v16 = v14;
  v17 = v15;
  return a1;
}

uint64_t *sub_1000335A4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;

  if (a1 != a2)
  {
    sub_10000EB5C((uint64_t)a1, &qword_100056268);
    v6 = sub_100003EA4(&qword_100056268);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = *(void **)((char *)a2 + v12);
  v14 = *(void **)((char *)a1 + v12);
  *(uint64_t *)((char *)a1 + v12) = (uint64_t)v13;
  v15 = v13;

  v16 = a3[6];
  v17 = *(void **)((char *)a2 + v16);
  v18 = *(void **)((char *)a1 + v16);
  *(uint64_t *)((char *)a1 + v16) = (uint64_t)v17;
  v19 = v17;

  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  return a1;
}

char *sub_100033698(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100003EA4(&qword_100056268);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *sub_100033754(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  if (a1 != a2)
  {
    sub_10000EB5C((uint64_t)a1, &qword_100056268);
    v6 = sub_100003EA4(&qword_100056268);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = *(void **)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];

  v10 = a3[6];
  v11 = *(void **)&a1[v10];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];

  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

uint64_t sub_10003383C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100033848);
}

uint64_t sub_100033848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100003EA4(&qword_100056850);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000338C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000338D4);
}

uint64_t sub_1000338D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003EA4(&qword_100056850);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SizeCategoryAwareMinimumScaleFactor(uint64_t a1)
{
  uint64_t result;

  result = qword_1000568B0;
  if (!qword_1000568B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SizeCategoryAwareMinimumScaleFactor);
  return result;
}

void sub_10003398C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  sub_100033A0C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    v4[2] = "\b";
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_100033A0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000568C0)
  {
    v2 = type metadata accessor for ContentSizeCategory(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000568C0);
  }
}

uint64_t sub_100033A60(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100044AB0, 1);
}

uint64_t sub_100033A70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  double v15;
  double v16;
  id v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v5 = sub_100003EA4(&qword_1000568F8);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for SizeCategoryAwareMinimumScaleFactor(0);
  v9 = *(_QWORD *)(v2 + v8[7]);
  KeyPath = swift_getKeyPath(&unk_1000439C0);
  v11 = sub_100003EA4(&qword_100056900);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, a1, v11);
  v12 = &v7[*(int *)(v5 + 36)];
  *(_QWORD *)v12 = KeyPath;
  *((_QWORD *)v12 + 1) = v9;
  v12[16] = 0;
  v13 = (void *)objc_opt_self(UIFont);
  v14 = objc_msgSend(v13, "preferredFontForTextStyle:", *(_QWORD *)(v2 + v8[5]));
  objc_msgSend(v14, "pointSize");
  v16 = v15;

  v17 = objc_msgSend(v13, "preferredFontForTextStyle:", *(_QWORD *)(v2 + v8[6]));
  objc_msgSend(v17, "pointSize");
  v19 = v18;

  v20 = swift_getKeyPath(&unk_1000439F0);
  sub_100033C44((uint64_t)v7, a2);
  v21 = a2 + *(int *)(sub_100003EA4(&qword_100056908) + 36);
  *(_QWORD *)v21 = v20;
  *(double *)(v21 + 8) = v16 / v19;
  return sub_10000EB5C((uint64_t)v7, &qword_1000568F8);
}

uint64_t sub_100033C18()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_100033C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003EA4(&qword_1000568F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100033C90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056910;
  if (!qword_100056910)
  {
    v1 = sub_100003EE4(&qword_100056908);
    sub_100033D14();
    sub_100012354(&qword_100056488, &qword_100056490, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100056910);
  }
  return result;
}

unint64_t sub_100033D14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056918;
  if (!qword_100056918)
  {
    v1 = sub_100003EE4(&qword_1000568F8);
    sub_100012354(&qword_100056920, &qword_100056900, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_100012354(&qword_100056478, &qword_100056480, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100056918);
  }
  return result;
}

uint64_t *sub_100033DB0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100003EA4(&qword_100055700);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *v4 = *a2;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = (uint64_t *)((char *)v4 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = (char *)v4 + v15;
    v20 = (char *)a2 + v15;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = a3[7];
    v22 = a3[8];
    v23 = (char *)v4 + v21;
    v24 = (char *)a2 + v21;
    *(_OWORD *)v23 = *(_OWORD *)v24;
    v23[16] = v24[16];
    v25 = (char *)v4 + v22;
    v26 = (char *)a2 + v22;
    *(_OWORD *)v25 = *(_OWORD *)v26;
    v27 = *((_QWORD *)v26 + 3);
    *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
    *((_QWORD *)v25 + 3) = v27;
    v28 = *((_QWORD *)v26 + 4);
    v29 = *((_QWORD *)v26 + 5);
    *((_QWORD *)v25 + 4) = v28;
    *((_QWORD *)v25 + 5) = v29;
    *((_OWORD *)v25 + 3) = *((_OWORD *)v26 + 3);
    v30 = *((_QWORD *)v26 + 9);
    *((_QWORD *)v25 + 8) = *((_QWORD *)v26 + 8);
    *((_QWORD *)v25 + 9) = v30;
    v12 = *((_QWORD *)v26 + 10);
    *((_QWORD *)v25 + 10) = v12;
    *(_OWORD *)(v25 + 88) = *(_OWORD *)(v26 + 88);
    *((_QWORD *)v25 + 13) = *((_QWORD *)v26 + 13);
    swift_bridgeObjectRetain(v18);
    swift_retain(v27);
    swift_retain(v28);
    swift_retain(v29);
    swift_retain(v30);
  }
  swift_retain(v12);
  return v4;
}

uint64_t sub_100033F3C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = sub_100003EA4(&qword_100055700);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20) + 8));
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 32));
  swift_release(v6[3]);
  swift_release(v6[4]);
  swift_release(v6[5]);
  swift_release(v6[9]);
  return swift_release(v6[10]);
}

uint64_t *sub_100033FE0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = sub_100003EA4(&qword_100055700);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = (uint64_t *)((char *)a1 + v12);
  v15 = (uint64_t *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (char *)a1 + v13;
  v18 = (char *)a2 + v13;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = a3[7];
  v20 = a3[8];
  v21 = (char *)a1 + v19;
  v22 = (char *)a2 + v19;
  *(_OWORD *)v21 = *(_OWORD *)v22;
  v21[16] = v22[16];
  v23 = (char *)a1 + v20;
  v24 = (char *)a2 + v20;
  *(_OWORD *)v23 = *(_OWORD *)v24;
  v25 = *((_QWORD *)v24 + 3);
  *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
  *((_QWORD *)v23 + 3) = v25;
  v26 = *((_QWORD *)v24 + 4);
  v27 = *((_QWORD *)v24 + 5);
  *((_QWORD *)v23 + 4) = v26;
  *((_QWORD *)v23 + 5) = v27;
  *((_OWORD *)v23 + 3) = *((_OWORD *)v24 + 3);
  v28 = *((_QWORD *)v24 + 9);
  *((_QWORD *)v23 + 8) = *((_QWORD *)v24 + 8);
  *((_QWORD *)v23 + 9) = v28;
  v29 = *((_QWORD *)v24 + 10);
  *((_QWORD *)v23 + 10) = v29;
  *(_OWORD *)(v23 + 88) = *(_OWORD *)(v24 + 88);
  *((_QWORD *)v23 + 13) = *((_QWORD *)v24 + 13);
  swift_bridgeObjectRetain(v16);
  swift_retain(v25);
  swift_retain(v26);
  swift_retain(v27);
  swift_retain(v28);
  swift_retain(v29);
  return a1;
}

uint64_t *sub_100034144(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (a1 != a2)
  {
    sub_10000EB5C((uint64_t)a1, &qword_100055700);
    v6 = sub_100003EA4(&qword_100055700);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  v18[8] = v19[8];
  *(_QWORD *)v18 = v20;
  v21 = a3[7];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_OWORD *)v23;
  v22[16] = v23[16];
  *(_OWORD *)v22 = v24;
  v25 = a3[8];
  v26 = (uint64_t *)((char *)a1 + v25);
  v27 = (uint64_t *)((char *)a2 + v25);
  *v26 = *(uint64_t *)((char *)a2 + v25);
  v26[1] = *(uint64_t *)((char *)a2 + v25 + 8);
  v26[2] = *(uint64_t *)((char *)a2 + v25 + 16);
  v28 = *(uint64_t *)((char *)a2 + v25 + 24);
  v29 = *(uint64_t *)((char *)a1 + v25 + 24);
  v26[3] = v28;
  swift_retain(v28);
  swift_release(v29);
  v30 = v27[4];
  v31 = v26[4];
  v26[4] = v30;
  swift_retain(v30);
  swift_release(v31);
  v32 = v27[5];
  v33 = v26[5];
  v26[5] = v32;
  swift_retain(v32);
  swift_release(v33);
  v26[6] = v27[6];
  v26[7] = v27[7];
  v26[8] = v27[8];
  v34 = v27[9];
  v35 = v26[9];
  v26[9] = v34;
  swift_retain(v34);
  swift_release(v35);
  v36 = v27[10];
  v37 = v26[10];
  v26[10] = v36;
  swift_retain(v36);
  swift_release(v37);
  v26[11] = v27[11];
  v26[12] = v27[12];
  v26[13] = v27[13];
  return a1;
}

char *sub_10003432C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v6 = sub_100003EA4(&qword_100055700);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v9[8] = v10[8];
  *(_QWORD *)v9 = *(_QWORD *)v10;
  v11 = a3[7];
  v12 = a3[8];
  v13 = &a1[v11];
  v14 = &a2[v11];
  v13[16] = v14[16];
  *(_OWORD *)v13 = *(_OWORD *)v14;
  v15 = &a1[v12];
  v16 = &a2[v12];
  v17 = *((_OWORD *)v16 + 1);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v17;
  v18 = *((_OWORD *)v16 + 3);
  *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
  *((_OWORD *)v15 + 3) = v18;
  v19 = *((_OWORD *)v16 + 5);
  *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
  *((_OWORD *)v15 + 5) = v19;
  *((_OWORD *)v15 + 6) = *((_OWORD *)v16 + 6);
  return a1;
}

char *sub_100034430(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 != a2)
  {
    sub_10000EB5C((uint64_t)a1, &qword_100055700);
    v6 = sub_100003EA4(&qword_100055700);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v12 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v10 + 1);
  v13 = *((_QWORD *)v9 + 1);
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease(v13);
  v14 = a3[6];
  v15 = a3[7];
  v16 = &a1[v14];
  v17 = &a2[v14];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = &a1[v15];
  v19 = &a2[v15];
  *(_OWORD *)v18 = *(_OWORD *)v19;
  v18[16] = v19[16];
  v20 = a3[8];
  v21 = &a1[v20];
  v22 = &a2[v20];
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
  v23 = *(_QWORD *)&a1[v20 + 24];
  *((_QWORD *)v21 + 3) = *((_QWORD *)v22 + 3);
  swift_release(v23);
  v24 = *((_QWORD *)v21 + 4);
  *((_QWORD *)v21 + 4) = *((_QWORD *)v22 + 4);
  swift_release(v24);
  v25 = *((_QWORD *)v21 + 5);
  *((_QWORD *)v21 + 5) = *((_QWORD *)v22 + 5);
  swift_release(v25);
  *((_OWORD *)v21 + 3) = *((_OWORD *)v22 + 3);
  *((_QWORD *)v21 + 8) = *((_QWORD *)v22 + 8);
  v26 = *((_QWORD *)v21 + 9);
  *((_QWORD *)v21 + 9) = *((_QWORD *)v22 + 9);
  swift_release(v26);
  v27 = *((_QWORD *)v21 + 10);
  *((_QWORD *)v21 + 10) = *((_QWORD *)v22 + 10);
  swift_release(v27);
  *(_OWORD *)(v21 + 88) = *(_OWORD *)(v22 + 88);
  *((_QWORD *)v21 + 13) = *((_QWORD *)v22 + 13);
  return a1;
}

uint64_t sub_1000345C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000345CC);
}

uint64_t sub_1000345CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100003EA4(&qword_100055710);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100034650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003465C);
}

uint64_t sub_10003465C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003EA4(&qword_100055710);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 24) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for BadgeView(uint64_t a1)
{
  uint64_t result;

  result = qword_100056980;
  if (!qword_100056980)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BadgeView);
  return result;
}

void sub_100034718(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  sub_1000347A8(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_100043A40;
    v4[2] = &unk_100043A58;
    v4[3] = &unk_100043A70;
    v4[4] = &unk_100043A88;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

void sub_1000347A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000557A0)
  {
    v2 = type metadata accessor for ColorScheme(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000557A0);
  }
}

uint64_t sub_1000347FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100044B00, 1);
}

double sub_10003480C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char v10;
  void (*v11)(char *, uint64_t);
  _QWORD *v12;
  uint64_t *v13;
  double *v14;
  double *v15;
  double *v16;
  uint64_t *v17;
  double *v18;
  double *v19;
  double *v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  double result;
  __int128 v35;
  _OWORD v36[12];
  _OWORD v37[2];

  v3 = type metadata accessor for ColorScheme(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v36 - v8;
  sub_100011188((uint64_t)v36 - v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for ColorScheme.dark(_:), v3);
  v10 = static ColorScheme.== infix(_:_:)(v9, v7);
  v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v7, v3);
  v11(v9, v3);
  v12 = (_QWORD *)(v1 + *(int *)(type metadata accessor for BadgeView(0) + 32));
  v13 = v12 + 4;
  v14 = (double *)(v12 + 8);
  v15 = (double *)(v12 + 6);
  v16 = (double *)(v12 + 7);
  v17 = v12 + 9;
  v18 = (double *)(v12 + 13);
  v19 = (double *)(v12 + 11);
  v20 = (double *)(v12 + 12);
  if ((v10 & 1) != 0)
    v13 = v17;
  else
    v20 = v16;
  if ((v10 & 1) != 0)
  {
    v15 = v19;
    v14 = v18;
  }
  v21 = *v13;
  v22 = *v14;
  v23 = *v15;
  v24 = *v20;
  swift_retain(*v13);
  v26 = static Alignment.center.getter(v25);
  v28 = v27;
  sub_1000349E4(v1, v21, v36, v22, v23, v24);
  swift_release(v21);
  *(_QWORD *)a1 = v26;
  *(_QWORD *)(a1 + 8) = v28;
  v29 = v36[11];
  *(_OWORD *)(a1 + 176) = v36[10];
  *(_OWORD *)(a1 + 192) = v29;
  *(_OWORD *)(a1 + 208) = v37[0];
  *(_OWORD *)(a1 + 217) = *(_OWORD *)((char *)v37 + 9);
  v30 = v36[7];
  *(_OWORD *)(a1 + 112) = v36[6];
  *(_OWORD *)(a1 + 128) = v30;
  v31 = v36[9];
  *(_OWORD *)(a1 + 144) = v36[8];
  *(_OWORD *)(a1 + 160) = v31;
  v32 = v36[3];
  *(_OWORD *)(a1 + 48) = v36[2];
  *(_OWORD *)(a1 + 64) = v32;
  v33 = v36[5];
  *(_OWORD *)(a1 + 80) = v36[4];
  *(_OWORD *)(a1 + 96) = v33;
  result = *(double *)v36;
  v35 = v36[1];
  *(_OWORD *)(a1 + 16) = v36[0];
  *(_OWORD *)(a1 + 32) = v35;
  return result;
}

double sub_1000349E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double result;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t KeyPath;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  _BYTE v78[7];
  char v79;
  _BYTE v80[7];
  char v81;
  int v82;
  __int16 v83;
  _BYTE v84[7];
  char v85;
  _BYTE v86[7];
  char v87;
  int v88;
  __int16 v89;
  _OWORD v90[12];
  _OWORD v91[2];
  uint64_t v92;
  __int16 v93;
  int v94;
  __int16 v95;
  uint64_t v96;
  char v97;
  _BYTE v98[7];
  uint64_t v99;
  char v100;
  _BYTE v101[7];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  double v106;
  double v107;
  uint64_t v108;
  __int16 v109;
  int v110;
  __int16 v111;
  uint64_t v112;
  char v113;
  _BYTE v114[7];
  uint64_t v115;
  char v116;
  _BYTE v117[7];
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned __int8 v128;
  uint64_t v129;
  unsigned __int8 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int8 v134;
  uint64_t v135;
  unsigned __int8 v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  _OWORD v151[3];

  v12 = sub_100003EA4(&qword_1000569C8);
  __chkstk_darwin(v12);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for BadgeView(0);
  v16 = (uint64_t *)(a1 + v15[5]);
  v17 = v16[1];
  if (!v17
    || (v18 = (uint64_t *)(a1 + v15[6]), (v18[1] & 1) != 0)
    || (v19 = (uint64_t *)(a1 + v15[7]), (v19[2] & 1) != 0))
  {
    v92 = static Color.clear.getter();
    sub_100034FC0((uint64_t)&v92);
    sub_100034FCC((uint64_t)&v92, (uint64_t)v90);
    v20 = sub_100003EA4(&qword_1000569D8);
    v21 = sub_100012354(&qword_1000569E0, &qword_1000569D8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v90, v20, &type metadata for Color, v21, &protocol witness table for Color);
  }
  else
  {
    v73 = *v16;
    v29 = *v18;
    v31 = *v19;
    v30 = v19[1];
    v32 = (double *)(a1 + v15[8]);
    v33 = *((_QWORD *)v32 + 1);
    swift_bridgeObjectRetain(v17);
    swift_retain(a2);
    v35 = static Alignment.center.getter(v34);
    _FrameLayout.init(width:height:alignment:)(&v127, v33, 0, v33, 0, v35, v36);
    v67 = v127;
    v68 = v129;
    v76 = v128;
    v77 = v130;
    v69 = v132;
    v70 = v131;
    v74 = *((_QWORD *)v32 + 5);
    v37 = v74;
    v38 = objc_allocWithZone((Class)UIColor);
    v75 = a2;
    v39 = v38;
    swift_retain(v37);
    v72 = Color.init(_:)(objc_msgSend(v39, "initWithRed:green:blue:alpha:", (double)BYTE2(v29) / 255.0, (double)BYTE1(v29) / 255.0, (double)v29 / 255.0, 1.0));
    v40 = *v32;
    v41 = static Alignment.center.getter(v72);
    _FrameLayout.init(width:height:alignment:)(&v133, *(_QWORD *)&v40, 0, *(_QWORD *)&v40, 0, v41, v42);
    LOBYTE(v39) = v134;
    v63 = v133;
    v64 = v135;
    LOBYTE(v40) = v136;
    v60 = v134;
    v61 = v136;
    v65 = v138;
    v66 = v137;
    v43 = Image.init(_internalSystemName:)(v73, v17);
    v44 = *((_QWORD *)v32 + 3);
    KeyPath = swift_getKeyPath(&unk_100043AF0);
    v45 = v32[2];
    v46 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v14, 1, 1, v46);
    v62 = v44;
    swift_retain(v44);
    v73 = static Font.system(size:weight:design:)(0, 1, v14, v45);
    sub_10000EB5C((uint64_t)v14, &qword_1000569C8);
    v47 = swift_getKeyPath(&unk_100043B20);
    v87 = v76;
    v85 = v77;
    v81 = (char)v39;
    v79 = LOBYTE(v40);
    swift_retain(v44);
    v48 = v75;
    swift_retain_n(v75, 2);
    v49 = v74;
    swift_retain_n(v74, 2);
    v50 = v72;
    swift_retain(v72);
    v51 = v43;
    v59 = v43;
    swift_retain(v43);
    v52 = KeyPath;
    swift_retain(KeyPath);
    swift_retain(v47);
    swift_retain(v73);
    swift_release(v49);
    swift_release(v48);
    v92 = v48;
    v93 = 256;
    v94 = v88;
    v95 = v89;
    v96 = v67;
    v97 = v76;
    *(_DWORD *)v98 = *(_DWORD *)v86;
    *(_DWORD *)&v98[3] = *(_DWORD *)&v86[3];
    v99 = v68;
    v100 = v77;
    *(_DWORD *)v101 = *(_DWORD *)v84;
    *(_DWORD *)&v101[3] = *(_DWORD *)&v84[3];
    v102 = v70;
    v103 = v69;
    v104 = v49;
    v105 = a4;
    v106 = a5;
    v107 = a6;
    v108 = v50;
    v109 = 256;
    v111 = v83;
    v110 = v82;
    v112 = v63;
    v113 = v60;
    *(_DWORD *)v114 = *(_DWORD *)v80;
    *(_DWORD *)&v114[3] = *(_DWORD *)&v80[3];
    v115 = v64;
    v116 = v61;
    *(_DWORD *)&v117[3] = *(_DWORD *)&v78[3];
    *(_DWORD *)v117 = *(_DWORD *)v78;
    v118 = v66;
    v119 = v65;
    v120 = v51;
    v121 = v52;
    v53 = v62;
    v122 = v62;
    v123 = v47;
    v54 = v47;
    v55 = v73;
    v124 = v73;
    v125 = v31;
    v126 = v30;
    sub_100035024((uint64_t)&v92);
    sub_100034FCC((uint64_t)&v92, (uint64_t)&v139);
    v56 = sub_100003EA4(&qword_1000569D8);
    v57 = sub_100012354(&qword_1000569E0, &qword_1000569D8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(&v139, v56, &type metadata for Color, v57, &protocol witness table for Color);
    swift_release(v74);
    swift_release(v75);
    swift_release(v72);
    swift_release(v55);
    swift_release(v54);
    swift_release(v53);
    swift_release(KeyPath);
    swift_release(v59);
    v149 = v90[10];
    v150 = v90[11];
    v151[0] = v91[0];
    *(_OWORD *)((char *)v151 + 9) = *(_OWORD *)((char *)v91 + 9);
    v145 = v90[6];
    v146 = v90[7];
    v147 = v90[8];
    v148 = v90[9];
    v141 = v90[2];
    v142 = v90[3];
    v143 = v90[4];
    v144 = v90[5];
    v139 = v90[0];
    v140 = v90[1];
  }
  v22 = v150;
  a3[10] = v149;
  a3[11] = v22;
  a3[12] = v151[0];
  *(_OWORD *)((char *)a3 + 201) = *(_OWORD *)((char *)v151 + 9);
  v23 = v146;
  a3[6] = v145;
  a3[7] = v23;
  v24 = v148;
  a3[8] = v147;
  a3[9] = v24;
  v25 = v142;
  a3[2] = v141;
  a3[3] = v25;
  v26 = v144;
  a3[4] = v143;
  a3[5] = v26;
  result = *(double *)&v139;
  v28 = v140;
  *a3 = v139;
  a3[1] = v28;
  return result;
}

uint64_t sub_100034FC0(uint64_t result)
{
  *(_BYTE *)(result + 216) = 1;
  return result;
}

uint64_t sub_100034FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003EA4(&qword_1000569D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100035024(uint64_t result)
{
  *(_BYTE *)(result + 216) = 0;
  return result;
}

uint64_t sub_10003502C()
{
  return sub_100012354(&qword_1000569E8, &qword_1000569F0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

id sub_100035058(void *a1)
{
  id v1;
  id v2;
  double v3;
  double v4;
  double v5;
  double v6;

  v1 = objc_msgSend(a1, "userInterfaceStyle");
  v2 = objc_allocWithZone((Class)UIColor);
  if (v1 == (id)2)
  {
    v3 = 0.556862745;
    v4 = 0.576470588;
    v5 = 1.0;
    v6 = 0.556862745;
  }
  else
  {
    v3 = 1.0;
    v6 = 1.0;
    v4 = 1.0;
    v5 = 1.0;
  }
  return objc_msgSend(v2, "initWithRed:green:blue:alpha:", v3, v6, v4, v5);
}

double sub_1000350C8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(char *, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  uint64_t v14;
  uint64_t v15;

  v0 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin();
  v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = enum case for Color.RGBColorSpace.sRGB(_:);
  v5 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v5(v2, enum case for Color.RGBColorSpace.sRGB(_:), v0);
  v15 = Color.init(_:red:green:blue:opacity:)(v2, 1.0, 1.0, 1.0, 1.0);
  v5(v2, v3, v0);
  v14 = Color.init(_:red:green:blue:opacity:)(v2, 0.0, 0.0, 0.0, 0.06);
  v5(v2, v3, v0);
  v6 = Color.init(_:red:green:blue:opacity:)(v2, 0.0, 0.0, 0.0, 0.08);
  v5(v2, v3, v0);
  v7 = Color.init(_:red:green:blue:opacity:)(v2, 0.0, 0.0, 0.0, 0.1);
  v5(v2, v3, v0);
  v8 = Color.init(_:red:green:blue:opacity:)(v2, 0.0, 0.0, 0.0, 0.06);
  v5(v2, v3, v0);
  v9 = Color.init(_:red:green:blue:opacity:)(v2, 0.56, 0.56, 0.58, 1.0);
  v5(v2, v3, v0);
  v10 = Color.init(_:red:green:blue:opacity:)(v2, 1.0, 1.0, 1.0, 0.2);
  v5(v2, v3, v0);
  v11 = Color.init(_:red:green:blue:opacity:)(v2, 0.0, 0.0, 0.0, 0.45);
  v5(v2, v3, v0);
  v12 = Color.init(_:red:green:blue:opacity:)(v2, 0.0, 0.0, 0.0, 0.06);
  xmmword_100058730 = xmmword_100043B90;
  *(_QWORD *)&xmmword_100058740 = 0xC018000000000000;
  *((_QWORD *)&xmmword_100058740 + 1) = v15;
  *(_QWORD *)&xmmword_100058750 = v14;
  *((_QWORD *)&xmmword_100058750 + 1) = v6;
  result = 0.0;
  xmmword_100058760 = xmmword_100043BA0;
  *(_QWORD *)&xmmword_100058770 = 0x3FA0842108421084;
  *((_QWORD *)&xmmword_100058770 + 1) = v7;
  xmmword_100058780 = xmmword_100043BB0;
  *(_QWORD *)&xmmword_100058790 = 0x3FB71F6171F6171FLL;
  *((_QWORD *)&xmmword_100058790 + 1) = v8;
  xmmword_1000587A0 = xmmword_100043BC0;
  *(_QWORD *)&xmmword_1000587B0 = 0x3FA3D1C13D1C13D2;
  *((_QWORD *)&xmmword_1000587B0 + 1) = v9;
  *(_QWORD *)&xmmword_1000587C0 = v10;
  *((_QWORD *)&xmmword_1000587C0 + 1) = v11;
  xmmword_1000587D0 = xmmword_100043BD0;
  *(_QWORD *)&xmmword_1000587E0 = 0x3FC0842108421084;
  *((_QWORD *)&xmmword_1000587E0 + 1) = v12;
  xmmword_1000587F0 = xmmword_100043BA0;
  qword_100058800 = 0x3FA0842108421084;
  return result;
}

uint64_t destroy for AvatarViewStyle(_QWORD *a1)
{
  swift_release(a1[3]);
  swift_release(a1[4]);
  swift_release(a1[5]);
  swift_release(a1[9]);
  swift_release(a1[13]);
  swift_release(a1[17]);
  swift_release(a1[18]);
  swift_release(a1[19]);
  return swift_release(a1[23]);
}

uint64_t initializeWithCopy for AvatarViewStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v8 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *(_QWORD *)(a2 + 144);
  v10 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v9;
  *(_QWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  v11 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v11);
  return a1;
}

_QWORD *assignWithCopy for AvatarViewStyle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = a2[3];
  v5 = a1[3];
  a1[3] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_retain(v8);
  swift_release(v9);
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  v10 = a2[9];
  v11 = a1[9];
  a1[9] = v10;
  swift_retain(v10);
  swift_release(v11);
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  v12 = a2[13];
  v13 = a1[13];
  a1[13] = v12;
  swift_retain(v12);
  swift_release(v13);
  a1[14] = a2[14];
  a1[15] = a2[15];
  a1[16] = a2[16];
  v14 = a2[17];
  v15 = a1[17];
  a1[17] = v14;
  swift_retain(v14);
  swift_release(v15);
  v16 = a2[18];
  v17 = a1[18];
  a1[18] = v16;
  swift_retain(v16);
  swift_release(v17);
  v18 = a2[19];
  v19 = a1[19];
  a1[19] = v18;
  swift_retain(v18);
  swift_release(v19);
  a1[20] = a2[20];
  a1[21] = a2[21];
  a1[22] = a2[22];
  v20 = a2[23];
  v21 = a1[23];
  a1[23] = v20;
  swift_retain(v20);
  swift_release(v21);
  a1[24] = a2[24];
  a1[25] = a2[25];
  a1[26] = a2[26];
  return a1;
}

__n128 initializeWithTake for AvatarViewStyle(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for AvatarViewStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(*(_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v5);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release(v6);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release(v7);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release(*(_QWORD *)(a1 + 136));
  v8 = *(_QWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_release(v8);
  v9 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_release(v9);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v10 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_release(v10);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  return a1;
}

uint64_t getEnumTagSinglePayload for AvatarViewStyle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 216))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AvatarViewStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 216) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 216) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AvatarViewStyle()
{
  return &type metadata for AvatarViewStyle;
}

Swift::String __swiftcall String.deletingPrefix(_:)(Swift::String a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::Bool v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  Swift::String result;

  v3 = v2;
  v4 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v7 = String.hasPrefix(_:)(a1);
  swift_bridgeObjectRetain(v3);
  if (v7)
  {
    v8 = String.count.getter(countAndFlagsBits, object);
    v9 = sub_100036530(v8, v4, v3);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    v16 = swift_bridgeObjectRelease(v3);
    v4 = static String._fromSubstring(_:)(v9, v11, v13, v15, v16);
    v3 = v17;
    swift_bridgeObjectRelease(v15);
  }
  v18 = v4;
  v19 = (void *)v3;
  result._object = v19;
  result._countAndFlagsBits = v18;
  return result;
}

uint64_t String.nonBreaking.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD v4[2];
  _QWORD v5[4];

  v5[2] = a1;
  v5[3] = a2;
  v5[0] = 32;
  v5[1] = 0xE100000000000000;
  v4[0] = 41154;
  v4[1] = 0xA200000000000000;
  v2 = sub_100003F74();
  return ((uint64_t (*)(_QWORD *, _QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, void *, void *, void *, unint64_t, unint64_t, unint64_t))StringProtocol.replacingOccurrences<A, B>(of:with:options:range:))(v5, v4, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v2, v2, v2);
}

void *sub_1000359CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100003EA4(&qword_100056A00);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_1000365CC(&qword_100056A08, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_1000365CC(&qword_100056A10, (uint64_t)&protocol conformance descriptor for Calendar.Component);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_100035C24(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  uint64_t (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char v52;
  uint64_t v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  char *v58;
  id v59;
  char *v60;
  Class isa;
  id v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  void *v70;
  id v71;
  void *v72;
  id v73;
  NSString v74;
  void *v75;
  id v76;
  NSDate v77;
  id v78;
  id v79;
  NSString v80;
  void *v81;
  id v82;
  NSString v83;
  void *v84;
  id v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  id v91;
  id v92;
  void *v93;
  id v94;
  Class v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  Swift::String v101;
  Swift::String v102;
  Swift::String v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t (*v110)(char *, _QWORD, uint64_t);
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  Swift::String v124;

  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v111 = (char *)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DateComponents(0);
  v115 = *(_QWORD *)(v5 - 8);
  v116 = v5;
  __chkstk_darwin(v5);
  v123 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for Date(0);
  v117 = *(_QWORD *)(v121 - 8);
  v11 = __chkstk_darwin(v121);
  v113 = (char *)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v118 = (char *)&v108 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v108 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v108 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v108 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v108 - v25;
  Date.init()(v24);
  v27 = objc_msgSend(a1, "timestamp");
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  ((void (*)(void))static Calendar.current.getter)();
  Calendar.startOfDay(for:)(v23);
  v28 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  v29 = v28(v10, v7);
  static Calendar.current.getter(v29);
  v119 = v26;
  Calendar.startOfDay(for:)(v26);
  v30 = v28(v10, v7);
  static Calendar.current.getter(v30);
  v31 = sub_100003EA4(&qword_1000569F8);
  v32 = *(unsigned __int8 *)(v3 + 80);
  v33 = (v32 + 32) & ~v32;
  v34 = swift_allocObject(v31, v33 + *(_QWORD *)(v3 + 72), v32 | 7);
  *(_OWORD *)(v34 + 16) = xmmword_1000427F0;
  v35 = v34 + v33;
  v112 = v3;
  v110 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v3 + 104);
  v110((char *)v35, enum case for Calendar.Component.day(_:), v2);
  v36 = sub_1000359CC(v34);
  swift_setDeallocating(v34);
  v37 = v35;
  v38 = v2;
  v39 = v2;
  v40 = v117;
  swift_arrayDestroy(v37, 1, v39);
  swift_deallocClassInstance(v34, 32, 7);
  v120 = v20;
  v114 = v17;
  Calendar.dateComponents(_:from:to:)(v36, v20, v17);
  v41 = v36;
  v42 = v121;
  swift_bridgeObjectRelease(v41);
  v43 = v28(v10, v7);
  static Calendar.current.getter(v43);
  LOBYTE(v34) = Calendar.isDateInToday(_:)(v23);
  v28(v10, v7);
  v44 = *(uint64_t (**)(void))(v40 + 16);
  v45 = v118;
  v122 = v23;
  v46 = v44();
  if ((v34 & 1) != 0)
  {
    v47 = *(void (**)(char *, uint64_t))(v40 + 8);
    v47(v45, v42);
    v49 = v115;
    v48 = v116;
    v50 = v114;
LABEL_5:
    v54 = (void *)qword_100058808;
    if (qword_100058808)
    {
      v55 = (id)qword_100058808;
    }
    else
    {
      v56 = objc_msgSend(objc_allocWithZone((Class)FMRelativeDateFormatter), "init");
      objc_msgSend(v56, "setFormattingContext:", 2);
      v57 = (void *)qword_100058808;
      qword_100058808 = (uint64_t)v56;
      v55 = v56;

      v54 = 0;
    }
    v58 = v123;
    v59 = v54;
    v60 = v122;
    isa = Date._bridgeToObjectiveC()().super.isa;
    v62 = objc_msgSend(v55, "stringFromDate:", isa);

    v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    goto LABEL_27;
  }
  v51 = v113;
  v109 = v38;
  static Calendar.current.getter(v46);
  v52 = Calendar.isDateInYesterday(_:)(v45);
  v28(v10, v7);
  v118 = *(char **)(v40 + 8);
  v53 = ((uint64_t (*)(char *, uint64_t))v118)(v45, v42);
  if ((v52 & 1) != 0)
  {
    v49 = v115;
    v48 = v116;
    v50 = v114;
    v47 = (void (*)(char *, uint64_t))v118;
    goto LABEL_5;
  }
  v58 = v123;
  v64 = DateComponents.day.getter(v53);
  if ((v65 & 1) != 0 || v64 <= 7)
  {
    v72 = (void *)qword_100058810;
    if (qword_100058810)
    {
      v71 = (id)qword_100058810;
    }
    else
    {
      v73 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
      v74 = String._bridgeToObjectiveC()();
      objc_msgSend(v73, "setLocalizedDateFormatFromTemplate:", v74);

      v75 = (void *)qword_100058810;
      qword_100058810 = (uint64_t)v73;
      v71 = v73;

      v72 = 0;
    }
    v47 = (void (*)(char *, uint64_t))v118;
    v76 = v72;
    v77.super.isa = Date._bridgeToObjectiveC()().super.isa;
    v78 = objc_msgSend(v71, "stringFromDate:", v77.super.isa);
  }
  else
  {
    Date.init()(v64);
    v66 = v111;
    v67 = v109;
    v68 = v110(v111, enum case for Calendar.Component.year(_:), v109);
    static Calendar.current.getter(v68);
    v69 = Calendar.isDate(_:equalTo:toGranularity:)(v122, v51, v66);
    v28(v10, v7);
    (*(void (**)(char *, uint64_t))(v112 + 8))(v66, v67);
    v47 = (void (*)(char *, uint64_t))v118;
    ((void (*)(char *, uint64_t))v118)(v51, v42);
    if ((v69 & 1) != 0)
    {
      v70 = (void *)qword_100058820;
      if (qword_100058820)
      {
        v71 = (id)qword_100058820;
      }
      else
      {
        v79 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
        v80 = String._bridgeToObjectiveC()();
        objc_msgSend(v79, "setLocalizedDateFormatFromTemplate:", v80);

        v81 = (void *)qword_100058820;
        qword_100058820 = (uint64_t)v79;
        v71 = v79;

        v70 = 0;
      }
    }
    else
    {
      v70 = (void *)qword_100058828;
      if (qword_100058828)
      {
        v71 = (id)qword_100058828;
      }
      else
      {
        v82 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
        v83 = String._bridgeToObjectiveC()();
        objc_msgSend(v82, "setLocalizedDateFormatFromTemplate:", v83);

        v84 = (void *)qword_100058828;
        qword_100058828 = (uint64_t)v82;
        v71 = v82;

        v70 = 0;
      }
    }
    v58 = v123;
    v85 = v70;
    v77.super.isa = Date._bridgeToObjectiveC()().super.isa;
    v78 = objc_msgSend(v71, "stringFromDate:", v77.super.isa);
  }
  v86 = v78;

  v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
  v89 = v88;

  v90 = (void *)qword_100058818;
  if (qword_100058818)
  {
    v91 = (id)qword_100058818;
  }
  else
  {
    v92 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
    objc_msgSend(v92, "setTimeStyle:", 1);
    v93 = (void *)qword_100058818;
    qword_100058818 = (uint64_t)v92;
    v91 = v92;

    v90 = 0;
  }
  v94 = v90;
  v95 = Date._bridgeToObjectiveC()().super.isa;
  v96 = objc_msgSend(v91, "stringFromDate:", v95);

  v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
  v99 = v98;

  v100 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v101._object = (void *)0x8000000100041EA0;
  v124._object = (void *)0x8000000100041EA0;
  v101._countAndFlagsBits = 0xD000000000000011;
  v102._countAndFlagsBits = 0;
  v102._object = (void *)0xE000000000000000;
  v124._countAndFlagsBits = 0xD000000000000011;
  v103 = NSLocalizedString(_:tableName:bundle:value:comment:)(v101, (Swift::String_optional)0, (NSBundle)v100, v102, v124);

  v104 = sub_100003EA4(&qword_100055638);
  v105 = swift_allocObject(v104, 112, 7);
  *(_OWORD *)(v105 + 16) = xmmword_100042880;
  *(_QWORD *)(v105 + 56) = &type metadata for String;
  v106 = sub_10000EB9C();
  *(_QWORD *)(v105 + 32) = v87;
  *(_QWORD *)(v105 + 40) = v89;
  *(_QWORD *)(v105 + 96) = &type metadata for String;
  *(_QWORD *)(v105 + 104) = v106;
  *(_QWORD *)(v105 + 64) = v106;
  *(_QWORD *)(v105 + 72) = v97;
  *(_QWORD *)(v105 + 80) = v99;
  v63 = String.init(format:_:)(v103._countAndFlagsBits, v103._object, v105);
  swift_bridgeObjectRelease(v103._object);
  v49 = v115;
  v48 = v116;
  v42 = v121;
  v60 = v122;
  v50 = v114;
LABEL_27:
  (*(void (**)(char *, uint64_t))(v49 + 8))(v58, v48);
  v47(v50, v42);
  v47(v120, v42);
  v47(v60, v42);
  v47(v119, v42);
  return v63;
}

unint64_t sub_100036530(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)(15, result, v5, a2, a3);
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t sub_1000365CC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Calendar.Component(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void destroy for MapGenerator(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

}

_QWORD *initializeWithCopy for MapGenerator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  v5 = v4;
  return a1;
}

_QWORD *assignWithCopy for MapGenerator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = (void *)a2[3];
  v7 = (void *)a1[3];
  a1[3] = v6;
  v8 = v6;

  return a1;
}

__n128 initializeWithTake for MapGenerator(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for MapGenerator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = (void *)a1[3];
  a1[3] = a2[3];

  return a1;
}

uint64_t getEnumTagSinglePayload for MapGenerator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MapGenerator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageGenerator()
{
  return &type metadata for ImageGenerator;
}

uint64_t sub_1000367C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  unsigned __int8 v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[5];
  uint64_t v36;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v8 - 8);
  v34 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v11 - 8);
  v32 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (unint64_t)sub_10003DDC8(a1, a2);
  v15 = (unint64_t)sub_10003DDC8(a1, a2);
  v16 = (void *)v15;
  if (v14 | v15)
  {
    v30 = (id)v15;
    v29 = (id)v14;
    v17 = 1;
  }
  else
  {
    v17 = -1;
    v29 = (id)v14;
    v30 = (id)v15;
    v14 = 0;
    v16 = 0;
  }
  sub_100014F64();
  v18 = (void *)static OS_dispatch_queue.main.getter();
  v19 = swift_allocObject(&unk_100052E20, 49, 7);
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = a4;
  *(_QWORD *)(v19 + 32) = v14;
  *(_QWORD *)(v19 + 40) = v16;
  *(_BYTE *)(v19 + 48) = v17;
  aBlock[4] = sub_100037078;
  v36 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000125A8;
  aBlock[3] = &unk_100052E38;
  v20 = _Block_copy(aBlock);
  v21 = v36;
  swift_retain(a4);
  sub_10000DDCC((id)v14, v16, v17);
  v22 = swift_release(v21);
  static DispatchQoS.unspecified.getter(v22);
  aBlock[0] = _swiftEmptyArrayStorage;
  v23 = sub_10000EB1C((unint64_t *)&qword_1000555E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_100003EA4(&qword_1000555E8);
  v25 = sub_100036FFC((unint64_t *)&qword_1000555F0, &qword_1000555E8);
  v26 = v24;
  v27 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v25, v34, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v20);
  _Block_release(v20);

  sub_10000E03C((void *)v14, v16, v17);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v13, v32);
}

uint64_t sub_100036A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v27 = a5;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_allocObject(&unk_100052DD0, 56, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  *(double *)(v18 + 32) = a6;
  *(_QWORD *)(v18 + 40) = a3;
  *(_QWORD *)(v18 + 48) = a4;
  aBlock[4] = sub_100036FD4;
  v30 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000125A8;
  aBlock[3] = &unk_100052DE8;
  v19 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  swift_retain(a4);
  static DispatchQoS.unspecified.getter(v20);
  v28 = _swiftEmptyArrayStorage;
  v21 = sub_10000EB1C((unint64_t *)&qword_1000555E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_100003EA4(&qword_1000555E8);
  v23 = sub_100036FFC((unint64_t *)&qword_1000555F0, &qword_1000555E8);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v22, v23, v11, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v13, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return swift_release(v30);
}

double sub_100036C64(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void *v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  v27 = a2;
  v28 = a1;
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014F64();
  static DispatchQoS.userInitiated.getter();
  v30 = &_swiftEmptyArrayStorage;
  v14 = sub_10000EB1C(&qword_100056A18, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v15 = sub_100003EA4(&qword_100056A20);
  v16 = sub_100036FFC((unint64_t *)&qword_100056A28, &qword_100056A20);
  v17 = v14;
  v18 = v27;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v15, v16, v8, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v4);
  OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000015, 0x8000000100041EC0, v13, v10, v7, 0);
  v19 = qword_100055338;
  swift_bridgeObjectRetain(v18);
  if (v19 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v20 = type metadata accessor for Logger(0);
  sub_10000CF34(v20, (uint64_t)qword_1000586D0);
  v21 = swift_bridgeObjectRetain(v18);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = (void *)swift_slowAlloc(32, -1);
    v30 = v25;
    *(_DWORD *)v24 = 136315138;
    swift_bridgeObjectRetain(v18);
    v29 = sub_100011770(v28, v18, (uint64_t *)&v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease_n(v18, 3);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "🥑 ImageGenerator%s: init", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v18, 2);
  }
  return a3;
}

uint64_t sub_100036FA8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100036FD4()
{
  uint64_t *v0;

  return sub_1000367C4(v0[2], v0[3], v0[5], v0[6]);
}

uint64_t sub_100036FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100036FF4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100036FFC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100003EE4(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003703C()
{
  uint64_t v0;
  int v1;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 != 255)
    sub_10000DEEC(*(void **)(v0 + 32), *(void **)(v0 + 40), v1 & 1);
  return swift_deallocObject(v0, 49, 7);
}

uint64_t sub_100037078()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
}

uint64_t sub_1000370AC@<X0>(_QWORD *a1@<X8>, double a2@<D0>)
{
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __n128 v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  void *v18;
  id v19;
  uint64_t result;

  *a1 = swift_getKeyPath(&unk_100043C60);
  v4 = sub_100003EA4(&qword_100055700);
  swift_storeEnumTagMultiPayload(a1, v4, 0);
  v5 = (int *)type metadata accessor for LocationCircle(0);
  v6 = (_QWORD *)((char *)a1 + v5[5]);
  *v6 = swift_getKeyPath(&unk_100043C90);
  v7 = sub_100003EA4(&qword_100055708);
  swift_storeEnumTagMultiPayload(v6, v7, 0);
  *(double *)((char *)a1 + v5[6]) = a2;
  v8 = v5[7];
  *(_QWORD *)((char *)a1 + v8) = Color.init(_:)(objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.541176471, 1.0, 0.858823529, 0.45));
  v9 = v5[8];
  v10 = sub_100020114();
  static Color.white.getter(v10);
  v12 = (void *)UIColor.init(_:)(v11);
  v13 = objc_msgSend(v12, "colorWithAlphaComponent:", 0.5);

  *(_QWORD *)((char *)a1 + v9) = Color.init(_:)(v13);
  v14 = v5[9];
  v15 = Color.init(_:)(objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.541176471, 1.0, 0.858823529, 0.45));
  *(_QWORD *)((char *)a1 + v14) = v15;
  v16 = v5[10];
  static Color.white.getter(v15);
  v18 = (void *)UIColor.init(_:)(v17);
  v19 = objc_msgSend(v18, "colorWithAlphaComponent:", 0.35);

  result = Color.init(_:)(v19);
  *(_QWORD *)((char *)a1 + v16) = result;
  return result;
}

uint64_t type metadata accessor for LocationCircle(uint64_t a1)
{
  uint64_t result;

  result = qword_100056A88;
  if (!qword_100056A88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationCircle);
  return result;
}

uint64_t *sub_1000372BC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100003EA4(&qword_100055700);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *v4 = *a2;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_100003EA4(&qword_100055708);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v24 = *(uint64_t *)((char *)a2 + v23);
    *(uint64_t *)((char *)v4 + v23) = v24;
    v25 = a3[8];
    v26 = a3[9];
    v27 = *(uint64_t *)((char *)a2 + v25);
    *(uint64_t *)((char *)v4 + v25) = v27;
    v28 = *(uint64_t *)((char *)a2 + v26);
    *(uint64_t *)((char *)v4 + v26) = v28;
    v29 = a3[10];
    v12 = *(uint64_t *)((char *)a2 + v29);
    *(uint64_t *)((char *)v4 + v29) = v12;
    swift_retain(v24);
    swift_retain(v27);
    swift_retain(v28);
  }
  swift_retain(v12);
  return v4;
}

uint64_t sub_100037458(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_100003EA4(&qword_100055700);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_100003EA4(&qword_100055708);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  swift_release(*(_QWORD *)((char *)a1 + a2[7]));
  swift_release(*(_QWORD *)((char *)a1 + a2[8]));
  swift_release(*(_QWORD *)((char *)a1 + a2[9]));
  return swift_release(*(_QWORD *)((char *)a1 + a2[10]));
}

uint64_t *sub_100037544(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = sub_100003EA4(&qword_100055700);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_100003EA4(&qword_100055708);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[7];
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  v22 = *(uint64_t *)((char *)a2 + v21);
  *(uint64_t *)((char *)a1 + v21) = v22;
  v23 = a3[8];
  v24 = a3[9];
  v25 = *(uint64_t *)((char *)a2 + v23);
  *(uint64_t *)((char *)a1 + v23) = v25;
  v26 = *(uint64_t *)((char *)a2 + v24);
  *(uint64_t *)((char *)a1 + v24) = v26;
  v27 = a3[10];
  v28 = *(uint64_t *)((char *)a2 + v27);
  *(uint64_t *)((char *)a1 + v27) = v28;
  swift_retain(v22);
  swift_retain(v25);
  swift_retain(v26);
  swift_retain(v28);
  return a1;
}

uint64_t *sub_1000376B8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (a1 != a2)
  {
    sub_10000EB5C((uint64_t)a1, &qword_100055700);
    v6 = sub_100003EA4(&qword_100055700);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_10000EB5C((uint64_t)a1 + v12, &qword_100055708);
    v15 = sub_100003EA4(&qword_100055708);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  v21 = a3[7];
  v22 = *(uint64_t *)((char *)a2 + v21);
  v23 = *(uint64_t *)((char *)a1 + v21);
  *(uint64_t *)((char *)a1 + v21) = v22;
  swift_retain(v22);
  swift_release(v23);
  v24 = a3[8];
  v25 = *(uint64_t *)((char *)a2 + v24);
  v26 = *(uint64_t *)((char *)a1 + v24);
  *(uint64_t *)((char *)a1 + v24) = v25;
  swift_retain(v25);
  swift_release(v26);
  v27 = a3[9];
  v28 = *(uint64_t *)((char *)a2 + v27);
  v29 = *(uint64_t *)((char *)a1 + v27);
  *(uint64_t *)((char *)a1 + v27) = v28;
  swift_retain(v28);
  swift_release(v29);
  v30 = a3[10];
  v31 = *(uint64_t *)((char *)a2 + v30);
  v32 = *(uint64_t *)((char *)a1 + v30);
  *(uint64_t *)((char *)a1 + v30) = v31;
  swift_retain(v31);
  swift_release(v32);
  return a1;
}

char *sub_100037880(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_100003EA4(&qword_100055700);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100003EA4(&qword_100055708);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  v14 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  return a1;
}

char *sub_1000379D0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_10000EB5C((uint64_t)a1, &qword_100055700);
    v6 = sub_100003EA4(&qword_100055700);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_10000EB5C((uint64_t)&a1[v8], &qword_100055708);
    v11 = sub_100003EA4(&qword_100055708);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v14 = *(_QWORD *)&a1[v13];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  swift_release(v14);
  v15 = a3[8];
  v16 = *(_QWORD *)&a1[v15];
  *(_QWORD *)&a1[v15] = *(_QWORD *)&a2[v15];
  swift_release(v16);
  v17 = a3[9];
  v18 = *(_QWORD *)&a1[v17];
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  swift_release(v18);
  v19 = a3[10];
  v20 = *(_QWORD *)&a1[v19];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];
  swift_release(v20);
  return a1;
}

uint64_t sub_100037B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100037B78);
}

uint64_t sub_100037B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_100003EA4(&qword_100055710);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100003EA4(qword_100055718);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100037C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100037C34);
}

uint64_t sub_100037C34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_100003EA4(&qword_100055710);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_100003EA4(qword_100055718);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

void sub_100037CE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  sub_100011064(319, (unint64_t *)&qword_1000557A0, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100011064(319, &qword_1000557A8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[4] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[5] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[6] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

uint64_t sub_100037DA4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100044B88, 1);
}

uint64_t sub_100037DB4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void (*v41)(char *, uint64_t);
  unsigned int *v42;
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t);
  char v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  char *v103;
  void (*v104)(char *, uint64_t, uint64_t);
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  void (*v111)(char *, char *, uint64_t);
  void (*v112)(char *, _QWORD, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD v135[3];
  _QWORD v136[5];
  _OWORD v137[3];

  v127 = a2;
  v122 = sub_100003EA4(&qword_100056AE0);
  __chkstk_darwin(v122);
  v121 = (char *)&v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100003EA4(&qword_100056AE8);
  v4 = __chkstk_darwin(v125);
  v126 = (uint64_t)&v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v123 = (uint64_t)&v103 - v7;
  __chkstk_darwin(v6);
  v124 = (uint64_t)&v103 - v8;
  v118 = type metadata accessor for WidgetRenderingMode(0);
  v117 = *(_QWORD *)(v118 - 8);
  v9 = __chkstk_darwin(v118);
  v116 = (char *)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v115 = (uint64_t)&v103 - v11;
  v12 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v12);
  v131 = (char *)&v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for BlendMode(0);
  v114 = *(_QWORD *)(v130 - 8);
  v14 = __chkstk_darwin(v130);
  v120 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v103 = (char *)&v103 - v16;
  v17 = type metadata accessor for ColorScheme(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v103 - v22;
  v113 = sub_100003EA4(&qword_100056AF0);
  __chkstk_darwin(v113);
  v25 = (char *)&v103 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100003EA4(&qword_100056AF8);
  __chkstk_darwin(v107);
  v106 = (uint64_t)&v103 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100003EA4(&qword_100056B00);
  __chkstk_darwin(v110);
  v108 = (uint64_t)&v103 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_100003EA4(&qword_100056B08);
  v133 = *(_QWORD *)(v134 - 8);
  v28 = __chkstk_darwin(v134);
  v119 = (char *)&v103 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v109 = (char *)&v103 - v31;
  __chkstk_darwin(v30);
  v132 = (char *)&v103 - v32;
  v128 = a1;
  sub_100011188((uint64_t)v23);
  v33 = enum case for ColorScheme.dark(_:);
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 104);
  v105 = enum case for ColorScheme.dark(_:);
  v34(v21, enum case for ColorScheme.dark(_:), v17);
  v104 = v34;
  v35 = static ColorScheme.== infix(_:_:)(v23, v21);
  v36 = *(void (**)(char *, uint64_t))(v18 + 8);
  v36(v21, v17);
  v36(v23, v17);
  v37 = type metadata accessor for LocationCircle(0);
  v129 = v37;
  v38 = 28;
  if ((v35 & 1) != 0)
    v38 = 36;
  v39 = *(_QWORD *)(a1 + *(int *)(v37 + v38));
  swift_retain(v39);
  sub_100011188((uint64_t)v23);
  v34(v21, v33, v17);
  v40 = static ColorScheme.== infix(_:_:)(v23, v21);
  v36(v21, v17);
  v36(v23, v17);
  v41 = v36;
  v42 = (unsigned int *)&enum case for BlendMode.overlay(_:);
  v43 = v114;
  v44 = *(void (**)(char *, _QWORD, uint64_t))(v114 + 104);
  v112 = v44;
  if ((v40 & 1) == 0)
    v42 = (unsigned int *)&enum case for BlendMode.plusDarker(_:);
  v45 = v103;
  v46 = v130;
  v44(v103, *v42, v130);
  v111 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
  v47 = (uint64_t)v131;
  v111(v131, v45, v46);
  sub_1000388C0(v47, (uint64_t)&v25[*(int *)(v113 + 36)]);
  *(_QWORD *)v25 = v39;
  *((_WORD *)v25 + 4) = 256;
  swift_retain(v39);
  sub_100038904(v47);
  v113 = *(_QWORD *)(v43 + 8);
  ((void (*)(char *, uint64_t))v113)(v45, v46);
  v48 = swift_release(v39);
  v114 = *(int *)(v129 + 24);
  v49 = *(double *)(v128 + v114) + -0.8;
  v50 = static Alignment.center.getter(v48);
  _FrameLayout.init(width:height:alignment:)(v135, *(_QWORD *)&v49, 0, *(_QWORD *)&v49, 0, v50, v51);
  v52 = v106;
  sub_100012310((uint64_t)v25, v106, &qword_100056AF0);
  v53 = (_OWORD *)(v52 + *(int *)(v107 + 36));
  v54 = v135[1];
  *v53 = v135[0];
  v53[1] = v54;
  v53[2] = v135[2];
  sub_10000EB5C((uint64_t)v25, &qword_100056AF0);
  v55 = v115;
  v56 = sub_10001115C(v115);
  v57 = v116;
  static WidgetRenderingMode.accented.getter(v56);
  LOBYTE(v49) = static WidgetRenderingMode.== infix(_:_:)(v55, v57);
  v58 = *(void (**)(char *, uint64_t))(v117 + 8);
  v59 = v57;
  v60 = v118;
  v58(v59, v118);
  v58((char *)v55, v60);
  if ((LOBYTE(v49) & 1) != 0)
    v61 = 0.3;
  else
    v61 = 1.0;
  v62 = v108;
  sub_100012310(v52, v108, &qword_100056AF8);
  v63 = v110;
  *(double *)(v62 + *(int *)(v110 + 36)) = v61;
  sub_10000EB5C(v52, &qword_100056AF8);
  v64 = sub_10002001C(&qword_100056B10, &qword_100056B00, (void (*)(void))sub_100038940);
  v65 = v109;
  View.widgetAccentable(_:)(1, v63, v64);
  sub_10000EB5C(v62, &qword_100056B00);
  (*(void (**)(char *, char *, uint64_t))(v133 + 32))(v132, v65, v134);
  v66 = v128;
  sub_100011188((uint64_t)v23);
  v67 = v105;
  v68 = v104;
  v104(v21, v105, v17);
  v69 = static ColorScheme.== infix(_:_:)(v23, v21);
  v41(v21, v17);
  v41(v23, v17);
  v70 = 32;
  if ((v69 & 1) != 0)
    v70 = 40;
  v71 = *(_QWORD *)(v66 + *(int *)(v129 + v70));
  swift_retain(v71);
  v72 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v136, 0, 0, _swiftEmptyArrayStorage, 0.8, 10.0, 0.0);
  v73 = *(double *)v136;
  v74 = v136[2];
  v75 = v136[3];
  v76 = v136[4];
  v129 = static Alignment.center.getter(v72);
  v78 = v77;
  sub_100011188((uint64_t)v23);
  v79 = v136[1];
  v68(v21, v67, v17);
  static ColorScheme.== infix(_:_:)(v23, v21);
  v41(v21, v17);
  v41(v23, v17);
  v80 = v120;
  v81 = v130;
  v112(v120, enum case for BlendMode.plusLighter(_:), v130);
  v82 = (uint64_t)v131;
  v83 = v81;
  v111(v131, v80, v81);
  v84 = (uint64_t)v121;
  sub_1000388C0(v82, (uint64_t)&v121[*(int *)(v122 + 36)]);
  *(double *)v84 = v73 * 0.5;
  *(double *)(v84 + 8) = v73;
  *(_QWORD *)(v84 + 16) = v79;
  *(_QWORD *)(v84 + 24) = v74;
  *(_QWORD *)(v84 + 32) = v75;
  *(_QWORD *)(v84 + 40) = v76;
  *(_QWORD *)(v84 + 48) = v71;
  *(_WORD *)(v84 + 56) = 256;
  *(_QWORD *)(v84 + 64) = v129;
  *(_QWORD *)(v84 + 72) = v78;
  swift_bridgeObjectRetain(v75);
  swift_retain(v71);
  sub_100038904(v82);
  ((void (*)(char *, uint64_t))v113)(v80, v83);
  swift_release(v71);
  swift_bridgeObjectRelease(v75);
  v85 = *(_QWORD *)(v66 + v114);
  v87 = static Alignment.center.getter(v86);
  _FrameLayout.init(width:height:alignment:)(v137, v85, 0, v85, 0, v87, v88);
  v89 = v123;
  sub_100012310(v84, v123, &qword_100056AE0);
  v90 = (_OWORD *)(v89 + *(int *)(v125 + 36));
  v91 = v137[1];
  *v90 = v137[0];
  v90[1] = v91;
  v90[2] = v137[2];
  sub_10000EB5C(v84, &qword_100056AE0);
  v92 = v124;
  sub_1000389E8(v89, v124);
  v93 = v133;
  v94 = *(void (**)(char *, char *, uint64_t))(v133 + 16);
  v95 = v119;
  v96 = v132;
  v97 = v134;
  v94(v119, v132, v134);
  v98 = v126;
  sub_100012310(v92, v126, &qword_100056AE8);
  v99 = v127;
  v94(v127, v95, v97);
  v100 = sub_100003EA4(&qword_100056B28);
  sub_100012310(v98, (uint64_t)&v99[*(int *)(v100 + 48)], &qword_100056AE8);
  sub_10000EB5C(v92, &qword_100056AE8);
  v101 = *(void (**)(char *, uint64_t))(v93 + 8);
  v101(v96, v97);
  sub_10000EB5C(v98, &qword_100056AE8);
  return ((uint64_t (*)(char *, uint64_t))v101)(v95, v97);
}

uint64_t sub_100038880@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a2 = static Alignment.center.getter(a1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = sub_100003EA4(&qword_100056AD8);
  return sub_100037DB4(v2, &a2[*(int *)(v5 + 44)]);
}

uint64_t sub_1000388C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _BlendModeEffect(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100038904(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for _BlendModeEffect(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100038940()
{
  return sub_10002001C(&qword_100056B18, &qword_100056AF8, (void (*)(void))sub_100038964);
}

unint64_t sub_100038964()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056B20;
  if (!qword_100056B20)
  {
    v1 = sub_100003EE4(&qword_100056AF0);
    sub_100012354(&qword_100055E68, &qword_100055E70, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100056B20);
  }
  return result;
}

uint64_t sub_1000389E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003EA4(&qword_100056AE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100038A30()
{
  return sub_100012354(&qword_100056B30, &qword_100056B38, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

uint64_t sub_100038A5C(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(char *, _QWORD, uint64_t);
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;

  v4 = v3;
  v33 = a2;
  v34 = a1;
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E08C(0, (unint64_t *)&qword_1000555D8, OS_dispatch_queue_ptr);
  static DispatchQoS.userInitiated.getter();
  v36 = &_swiftEmptyArrayStorage;
  v16 = sub_10000EB1C(&qword_100056A18, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v17 = sub_100003EA4(&qword_100056A20);
  v18 = sub_100039BD8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v17, v18, v10, v16);
  v19 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
  v20 = v33;
  v19(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v6);
  v21 = v34;
  *(_QWORD *)(v4 + 40) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000015, 0x8000000100041FD0, v15, v12, v9, 0);
  *(_QWORD *)(v4 + 48) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v4 + 56) = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  *(_QWORD *)(v4 + 16) = v21;
  *(_QWORD *)(v4 + 24) = v20;
  *(double *)(v4 + 32) = a3;
  v22 = qword_100055338;
  swift_bridgeObjectRetain(v20);
  if (v22 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v23 = type metadata accessor for Logger(0);
  sub_10000CF34(v23, (uint64_t)qword_1000586D0);
  swift_retain_n(v4, 2);
  v24 = swift_bridgeObjectRetain(v20);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc(22, -1);
    v28 = (void *)swift_slowAlloc(64, -1);
    v36 = v28;
    *(_DWORD *)v27 = 136315394;
    v29 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 152))();
    v31 = v30;
    v35 = sub_100011770(v29, v30, (uint64_t *)&v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v27 + 4, v27 + 12);
    swift_release_n(v4, 2);
    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v27 + 12) = 2080;
    swift_bridgeObjectRetain(v20);
    v35 = sub_100011770(v21, v20, (uint64_t *)&v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v27 + 14, v27 + 22);
    swift_bridgeObjectRelease_n(v20, 3);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "🥑 %sDataService%s: init (v6)", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v20, 2);
    swift_release_n(v4, 2);
  }
  return v4;
}

uint64_t sub_100038E2C()
{
  return 0;
}

unint64_t sub_100038E38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003EA4(&qword_100056C48);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    v10 = v9;
    result = sub_100039030(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

Class sub_100038F50(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSDictionary v5;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_10000E08C(0, &qword_100056C40, NSObject_ptr);
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5.super.isa = 0;
  }
  return v5.super.isa;
}

uint64_t sub_100038FD4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for DataService()
{
  return objc_opt_self(_TtC17FindMyWidgetItems11DataService);
}

unint64_t sub_100039030(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_1000394FC(a1, a2, v5);
}

Swift::Int sub_100039094(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003EA4(&qword_100056C48);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_1000393A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100039030(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000395DC();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_100039094(v15, a4 & 1);
  v20 = sub_100039030(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

unint64_t sub_1000394FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

id sub_1000395DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100003EA4(&qword_100056C48);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10003978C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v3 = type metadata accessor for WidgetFamily(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(a2, "horizontalAccuracy");
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for WidgetFamily.systemLarge(_:), v3);
  v7 = sub_10000EB1C((unint64_t *)&qword_100055600, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v10, v3, v7);
  dispatch thunk of RawRepresentable.rawValue.getter(&v9, v3, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_1000398C4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  unint64_t v8;
  id v9;
  NSString v10;
  id v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  id v19;
  char v20;
  id v21;
  char v22;
  id v23;
  char v24;
  NSString v25;
  uint64_t v26;
  void *v27;
  _QWORD v28[5];
  uint64_t v29;

  v8 = sub_100038E38((uint64_t)&_swiftEmptyArrayStorage);
  v9 = objc_allocWithZone((Class)NSString);
  swift_bridgeObjectRetain(a2);
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "initWithString:", v10, swift_bridgeObjectRelease(a2).n128_f64[0]);

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  sub_1000393A0((uint64_t)v11, 0xD000000000000010, 0x8000000100041F60, isUniquelyReferenced_nonNull_native);
  v13 = v8;
  v14 = swift_bridgeObjectRelease(0x8000000000000000);
  WidgetFamily.description.getter(v14);
  v16 = v15;
  v17 = objc_allocWithZone((Class)NSString);
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v17, "initWithString:", v18, swift_bridgeObjectRelease(v16).n128_f64[0]);

  v20 = swift_isUniquelyReferenced_nonNull_native(v13);
  sub_1000393A0((uint64_t)v19, 0x796C696D6166, 0xE600000000000000, v20);
  swift_bridgeObjectRelease(0x8000000000000000);
  v21 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", a4 & 1);
  v22 = swift_isUniquelyReferenced_nonNull_native(v13);
  sub_1000393A0((uint64_t)v21, 0x7461636F4C736168, 0xEB000000006E6F69, v22);
  swift_bridgeObjectRelease(0x8000000000000000);
  v23 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", a5 & 1);
  v24 = swift_isUniquelyReferenced_nonNull_native(v13);
  sub_1000393A0((uint64_t)v23, 0x6F656D6954736168, 0xEA00000000007475, v24);
  swift_bridgeObjectRelease(0x8000000000000000);
  v25 = String._bridgeToObjectiveC()();
  v26 = swift_allocObject(&unk_100052EB8, 24, 7);
  *(_QWORD *)(v26 + 16) = v13;
  v28[4] = sub_100039BB8;
  v29 = v26;
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 1107296256;
  v28[2] = sub_100038F50;
  v28[3] = &unk_100052ED0;
  v27 = _Block_copy(v28);
  swift_release(v29);
  AnalyticsSendEventLazy(v25, v27);
  _Block_release(v27);

}

uint64_t sub_100039B94()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100039BB8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100039BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100039BD0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100039BD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056A28;
  if (!qword_100056A28)
  {
    v1 = sub_100003EE4(&qword_100056A20);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100056A28);
  }
  return result;
}

uint64_t type metadata accessor for UserDefaultsManager()
{
  return objc_opt_self(_TtC17FindMyWidgetItems19UserDefaultsManager);
}

ValueMetadata *type metadata accessor for MapGenerator()
{
  return &type metadata for MapGenerator;
}

uint64_t sub_100039C54(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, void *a8, CLLocationDegrees a9, CLLocationDegrees a10, CLLocationDistance a11, double a12, double a13, double a14)
{
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  NSObject *v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD aBlock[5];
  _QWORD *v66;

  v55 = a7;
  v58 = a5;
  v59 = a4;
  v24 = a3 & 1;
  v60 = type metadata accessor for DispatchWorkItemFlags(0);
  v63 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v57 = (char *)&v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  v61 = *(_QWORD *)(v26 - 8);
  v62 = v26;
  __chkstk_darwin(v26);
  v56 = (char *)&v54 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = swift_allocObject(&unk_100052F90, 24, 7);
  *(_QWORD *)(v28 + 16) = 0;
  v29 = swift_allocObject(&unk_100052F90, 24, 7);
  *(_QWORD *)(v29 + 16) = 0;
  v30 = dispatch_group_create();
  dispatch_group_enter(v30);
  v31 = swift_allocObject(&unk_100052FB8, 32, 7);
  *(_QWORD *)(v31 + 16) = v28;
  *(_QWORD *)(v31 + 24) = v30;
  swift_retain(v28);
  v32 = v30;
  v33 = a2;
  v34 = a2;
  v35 = a6;
  v36 = a6;
  v37 = v55;
  sub_10003A030(a1, v33, v24, 0, (uint64_t)sub_10003C158, v31, v36, v55, a9, a10, a11, a12, a13, a14, a8);
  swift_release(v31);
  dispatch_group_enter(v32);
  v38 = swift_allocObject(&unk_100052FE0, 32, 7);
  *(_QWORD *)(v38 + 16) = v29;
  *(_QWORD *)(v38 + 24) = v32;
  v39 = v32;
  swift_retain(v29);
  sub_10003A030(a1, v34, v24, 1, (uint64_t)sub_10003BFAC, v38, v35, v37, a9, a10, a11, a12, a13, a14, a8);
  swift_release(v38);
  sub_100014F64();
  v40 = (void *)static OS_dispatch_queue.main.getter();
  v41 = (_QWORD *)swift_allocObject(&unk_100053008, 48, 7);
  v41[2] = v28;
  v41[3] = v29;
  v42 = v58;
  v41[4] = v59;
  v41[5] = v42;
  aBlock[4] = sub_10003BFF8;
  v66 = v41;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000125A8;
  aBlock[3] = &unk_100053020;
  v43 = _Block_copy(aBlock);
  swift_retain(v28);
  swift_retain(v29);
  swift_retain(v42);
  v44 = v56;
  static DispatchQoS.unspecified.getter(v45);
  v64 = _swiftEmptyArrayStorage;
  v46 = sub_10000EB1C((unint64_t *)&qword_1000555E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v47 = sub_100003EA4(&qword_1000555E8);
  v48 = sub_100036FFC((unint64_t *)&qword_1000555F0, &qword_1000555E8);
  v49 = v57;
  v50 = v47;
  v51 = v60;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v64, v50, v48, v60, v46);
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v44, v49, v40, v43);
  _Block_release(v43);

  (*(void (**)(char *, uint64_t))(v63 + 8))(v49, v51);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v44, v62);
  v52 = v66;
  swift_release(v28);
  swift_release(v29);
  return swift_release(v52);
}

void sub_10003A030(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, CLLocationDegrees a9, CLLocationDegrees a10, CLLocationDistance a11, double a12, double a13, double a14, void *a15)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  double v38;
  double v39;
  double v40;
  CLLocationDistance v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  id v57;
  NSObject *v58;
  os_log_type_t v59;
  _BOOL4 v60;
  uint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  CLLocationDegrees v69;
  CLLocationDegrees v70;
  CLLocationDistance v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  void **v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  void *v92;
  uint64_t v93;
  id v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  void (*v107)(char *, uint64_t);
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  id v114;
  id v115;
  void **v116;
  unint64_t v117;
  double v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  CLLocationDegrees v131;
  CLLocationDegrees v132;
  CLLocationDistance v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void **aBlock;
  uint64_t v140;
  void *v141;
  void *v142;
  void *v143;
  uint64_t v144;
  CLLocationCoordinate2D v145;
  MKCoordinateRegion v146;
  MKMapRect v147;
  MKMapRect v148;

  v136 = a5;
  v137 = a7;
  v130 = a14;
  v126 = type metadata accessor for DispatchTimeInterval(0);
  v125 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v124 = (uint64_t *)((char *)&v116 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v127 = type metadata accessor for DispatchTime(0);
  v123 = *(_QWORD *)(v127 - 8);
  v27 = __chkstk_darwin(v127);
  v121 = (char *)&v116 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v122 = (char *)&v116 - v29;
  v119 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v119);
  v120 = (char *)&v116 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for Date(0);
  v128 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v32 = (char *)&v116 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = objc_msgSend(objc_allocWithZone((Class)MKMapSnapshotOptions), "init");
  v34 = v33;
  v135 = a4;
  v35 = a4 & 1;
  if ((a4 & 1) != 0)
    v36 = 2;
  else
    v36 = 1;
  objc_msgSend(v33, "_setShowsNightMode:", v35);
  v37 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithUserInterfaceStyle:", v36);
  objc_msgSend(v34, "setTraitCollection:", v37);

  objc_msgSend(v34, "setSize:", a12, a13);
  if ((a3 & 1) != 0)
    v38 = 0.0;
  else
    v38 = *(double *)&a2;
  if ((a3 & 1) != 0)
    v39 = 0.0;
  else
    v39 = *(double *)&a1;
  v118 = a12;
  v40 = a12 / a13;
  if (a13 <= 0.0)
    v40 = 1.0;
  v41 = v40 * a11;
  v131 = a9;
  v145.latitude = a9;
  v132 = a10;
  v133 = a11;
  v145.longitude = a10;
  v146 = MKCoordinateRegionMakeWithDistance(v145, a11, v41);
  v42 = MKMapRectForCoordinateRegion((__n128)v146.center, *(__n128 *)&v146.center.longitude, (__n128)v146.span, *(__n128 *)&v146.span.longitudeDelta);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  objc_msgSend(v34, "size");
  v50 = v49;
  objc_msgSend(v34, "size");
  v52 = v48 * (-v38 / v51);
  v147.origin.x = v42;
  v147.origin.y = v44;
  v147.size.width = v46;
  v147.size.height = v48;
  v148 = MKMapRectOffset(v147, v46 * (-v39 / v50), v52);
  objc_msgSend(v34, "setMapRect:", v148.origin.x, v148.origin.y, v148.size.width, v148.size.height);
  objc_msgSend(v34, "_setUseSnapshotService:", 1);
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v53 = type metadata accessor for Logger(0);
  sub_10000CF34(v53, (uint64_t)qword_1000586D0);
  v54 = v34;
  swift_bridgeObjectRetain_n(a8, 2);
  v55 = a15;
  v56 = v54;
  v57 = v55;
  v58 = Logger.logObject.getter(v57);
  v59 = static os_log_type_t.default.getter();
  v60 = os_log_type_enabled(v58, v59);
  v134 = a6;
  if (!v60)
  {

    swift_bridgeObjectRelease_n(a8, 2);
    v82 = v130;
    v70 = v132;
    v71 = v133;
    v69 = v131;
LABEL_35:
    v83 = swift_allocObject(&unk_100053058, 17, 7);
    *(_BYTE *)(v83 + 16) = 0;
    v84 = Date.init()(v83);
    v85 = Date.timeIntervalSinceReferenceDate.getter(v84);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v32, v129);
    v86 = fmax(v82 - v85 + 28.0 + -3.0, 1.0);
    if ((~*(_QWORD *)&v86 & 0x7FF0000000000000) != 0)
    {
      if (v86 > -9.22337204e18)
      {
        if (v86 < 9.22337204e18)
        {
          v87 = a8;
          v88 = (uint64_t)v86;
          v89 = swift_allocObject(&unk_100053080, 136, 7);
          v90 = v137;
          *(_QWORD *)(v89 + 16) = v83;
          *(_QWORD *)(v89 + 24) = v90;
          *(_QWORD *)(v89 + 32) = v87;
          *(double *)(v89 + 40) = v82;
          *(_QWORD *)(v89 + 48) = v57;
          *(_QWORD *)(v89 + 56) = v88;
          *(_QWORD *)(v89 + 64) = v56;
          v135 &= 1u;
          *(_BYTE *)(v89 + 72) = v135;
          *(CLLocationDegrees *)(v89 + 80) = v69;
          *(CLLocationDegrees *)(v89 + 88) = v70;
          v91 = v118;
          *(CLLocationDistance *)(v89 + 96) = v71;
          *(double *)(v89 + 104) = v91;
          *(double *)(v89 + 112) = a13;
          *(_QWORD *)(v89 + 120) = v136;
          *(_QWORD *)(v89 + 128) = a6;
          v143 = sub_10003C070;
          v144 = v89;
          aBlock = _NSConcreteStackBlock;
          v140 = 1107296256;
          v141 = sub_1000125A8;
          v142 = &unk_100053098;
          v92 = _Block_copy(&aBlock);
          v138 = (uint64_t)_swiftEmptyArrayStorage;
          v93 = sub_10000EB1C((unint64_t *)&qword_1000555E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v94 = v56;
          swift_bridgeObjectRetain(v87);
          v95 = v57;
          swift_retain(v83);
          swift_retain(a6);
          v96 = sub_100003EA4(&qword_1000555E8);
          v97 = sub_100036FFC((unint64_t *)&qword_1000555F0, &qword_1000555E8);
          v98 = v120;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v138, v96, v97, v119, v93);
          v99 = type metadata accessor for DispatchWorkItem(0);
          swift_allocObject(v99, *(unsigned int *)(v99 + 48), *(unsigned __int16 *)(v99 + 52));
          v100 = DispatchWorkItem.init(flags:block:)(v98, v92);
          v101 = swift_release(v144);
          v102 = v121;
          static DispatchTime.now()(v101);
          v103 = v124;
          *v124 = v88;
          v104 = v125;
          v105 = v126;
          (*(void (**)(uint64_t *, _QWORD, uint64_t))(v125 + 104))(v103, enum case for DispatchTimeInterval.seconds(_:), v126);
          v106 = v122;
          + infix(_:_:)(v102, v103);
          (*(void (**)(uint64_t *, uint64_t))(v104 + 8))(v103, v105);
          v107 = *(void (**)(char *, uint64_t))(v123 + 8);
          v108 = v127;
          v107(v102, v127);
          OS_dispatch_queue.asyncAfter(deadline:execute:)(v106, v100);
          v107(v106, v108);
          v109 = objc_msgSend(objc_allocWithZone((Class)MKMapSnapshotter), "initWithOptions:", v94);
          v110 = swift_allocObject(&unk_1000530D0, 120, 7);
          *(_QWORD *)(v110 + 16) = v100;
          *(_QWORD *)(v110 + 24) = v83;
          *(_QWORD *)(v110 + 32) = v137;
          *(_QWORD *)(v110 + 40) = v87;
          *(double *)(v110 + 48) = v82;
          *(_QWORD *)(v110 + 56) = v95;
          *(_QWORD *)(v110 + 64) = v94;
          *(_BYTE *)(v110 + 72) = v135;
          *(CLLocationDegrees *)(v110 + 80) = v69;
          *(CLLocationDegrees *)(v110 + 88) = v70;
          *(CLLocationDistance *)(v110 + 96) = v71;
          v111 = v134;
          *(_QWORD *)(v110 + 104) = v136;
          *(_QWORD *)(v110 + 112) = v111;
          v143 = sub_10003C104;
          v144 = v110;
          aBlock = _NSConcreteStackBlock;
          v140 = 1107296256;
          v141 = sub_10003BAA0;
          v142 = &unk_1000530E8;
          v112 = _Block_copy(&aBlock);
          v113 = v144;
          v114 = v94;
          swift_bridgeObjectRetain(v87);
          v115 = v95;
          swift_retain(v83);
          swift_retain(v111);
          swift_retain(v100);
          swift_release(v113);
          objc_msgSend(v109, "startWithQueue:completionHandler:", v115, v112);
          _Block_release(v112);

          swift_release(v83);
          swift_release(v100);

          return;
        }
        goto LABEL_41;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v61 = swift_slowAlloc(102, -1);
  v116 = (void **)swift_slowAlloc(96, -1);
  aBlock = v116;
  *(_DWORD *)v61 = 136317443;
  swift_bridgeObjectRetain(a8);
  v138 = sub_100011770(v137, a8, (uint64_t *)&aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &aBlock, v61 + 4, v61 + 12);

  v117 = a8;
  swift_bridgeObjectRelease_n(a8, 3);
  *(_WORD *)(v61 + 12) = 2080;
  objc_msgSend(v56, "size");
  v64 = CGSize.debugDescription.getter(v62, v63);
  v66 = v65;
  v138 = sub_100011770(v64, v65, (uint64_t *)&aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &aBlock, v61 + 14, v61 + 22);

  swift_bridgeObjectRelease(v66);
  *(_WORD *)(v61 + 22) = 2080;
  if ((v135 & 1) != 0)
    v67 = 1802658148;
  else
    v67 = 0x746867696CLL;
  if ((v135 & 1) != 0)
    v68 = 0xE400000000000000;
  else
    v68 = 0xE500000000000000;
  v138 = sub_100011770(v67, v68, (uint64_t *)&aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &aBlock, v61 + 24, v61 + 32);
  swift_bridgeObjectRelease(v68);
  *(_WORD *)(v61 + 32) = 2049;
  v69 = v131;
  v138 = *(_QWORD *)&v131;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &aBlock, v61 + 34, v61 + 42);
  *(_WORD *)(v61 + 42) = 2049;
  v70 = v132;
  v138 = *(_QWORD *)&v132;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &aBlock, v61 + 44, v61 + 52);
  *(_WORD *)(v61 + 52) = 2049;
  v71 = v133;
  v138 = *(_QWORD *)&v133;
  *(_QWORD *)&v72 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &aBlock, v61 + 54, v61 + 62).n128_u64[0];
  *(_WORD *)(v61 + 62) = 2048;
  objc_msgSend(v56, "mapRect", v72);
  v74 = v73;

  if ((~*(_QWORD *)&v74 & 0x7FF0000000000000) == 0)
    goto LABEL_42;
  if (v74 <= -9.22337204e18)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v74 >= 9.22337204e18)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v138 = (uint64_t)v74;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &aBlock, v61 + 64, v61 + 72);

  *(_WORD *)(v61 + 72) = 2049;
  objc_msgSend(v56, "mapRect");
  v76 = v75;

  if ((~*(_QWORD *)&v76 & 0x7FF0000000000000) == 0)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v76 <= -9.22337204e18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v76 >= 9.22337204e18)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v138 = (uint64_t)v76;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &aBlock, v61 + 74, v61 + 82);

  *(_WORD *)(v61 + 82) = 2049;
  objc_msgSend(v56, "mapRect");
  v78 = v77;

  if ((~*(_QWORD *)&v78 & 0x7FF0000000000000) == 0)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v78 <= -9.22337204e18)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v78 >= 9.22337204e18)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v138 = (uint64_t)v78;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &aBlock, v61 + 84, v61 + 92);

  *(_WORD *)(v61 + 92) = 2049;
  objc_msgSend(v56, "mapRect");
  v80 = v79;

  if ((~*(_QWORD *)&v80 & 0x7FF0000000000000) == 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v80 <= -9.22337204e18)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v80 < 9.22337204e18)
  {
    v138 = (uint64_t)v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &aBlock, v61 + 94, v61 + 102);

    _os_log_impl((void *)&_mh_execute_header, v58, v59, "🥑 MapGenerator%s: making %s %s map for {%{private}f°,%{private}f°}, span: %{private}fm, mapRect: {%ld, %{private}ld, %{private}ldx%{private}ld}", (uint8_t *)v61, 0x66u);
    v81 = v116;
    swift_arrayDestroy(v116, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v81, -1, -1);
    swift_slowDealloc(v61, -1, -1);

    a6 = v134;
    a8 = v117;
    v82 = v130;
    goto LABEL_35;
  }
LABEL_53:
  __break(1u);
}

void sub_10003AC80(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, void *a6, char a7, void (*a8)(_QWORD), double a9, double a10, double a11, double a12, double a13, double a14)
{
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  id v47;
  NSString v48;
  id v49;
  void (*v50)(_QWORD);
  double v52;
  uint64_t v53;
  _BYTE v54[24];

  swift_beginAccess(a1 + 16, v54, 1, 0);
  *(_BYTE *)(a1 + 16) = 1;
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v26 = type metadata accessor for Logger(0);
  sub_10000CF34(v26, (uint64_t)qword_1000586D0);
  swift_bridgeObjectRetain_n(a3, 2);
  v27 = a4;
  v28 = a6;
  v29 = v27;
  v30 = v28;
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = swift_slowAlloc(72, -1);
    v50 = a8;
    v34 = swift_slowAlloc(96, -1);
    v53 = v34;
    *(_DWORD *)v33 = 136316675;
    swift_bridgeObjectRetain(a3);
    v52 = COERCE_DOUBLE(sub_100011770(a2, a3, &v53));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v33 + 4, v33 + 12);

    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v33 + 12) = 2048;
    v52 = *(double *)&a5;
    *(_QWORD *)&v35 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v33 + 14, v33 + 22).n128_u64[0];
    *(_WORD *)(v33 + 22) = 2080;
    objc_msgSend(v30, "size", v35);
    v38 = CGSize.debugDescription.getter(v36, v37);
    v40 = v39;
    v52 = COERCE_DOUBLE(sub_100011770(v38, v39, &v53));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v33 + 24, v33 + 32);

    swift_bridgeObjectRelease(v40);
    *(_WORD *)(v33 + 32) = 2080;
    v41 = a7;
    if ((a7 & 1) != 0)
      v42 = 1802658148;
    else
      v42 = 0x746867696CLL;
    if ((a7 & 1) != 0)
      v43 = 0xE400000000000000;
    else
      v43 = 0xE500000000000000;
    v52 = COERCE_DOUBLE(sub_100011770(v42, v43, &v53));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v33 + 34, v33 + 42);
    swift_bridgeObjectRelease(v43);
    *(_WORD *)(v33 + 42) = 2049;
    v52 = a10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v33 + 44, v33 + 52);
    *(_WORD *)(v33 + 52) = 2049;
    v52 = a11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v33 + 54, v33 + 62);
    *(_WORD *)(v33 + 62) = 2049;
    v52 = a12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v33 + 64, v33 + 72);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "🥑 MapGenerator%s: timed out (%ld-s) making %s %s map for {%{private}f°,%{private}f°}, vspan: %{private}fm", (uint8_t *)v33, 0x48u);
    swift_arrayDestroy(v34, 3, (char *)&type metadata for Any + 8);
    v44 = v34;
    a8 = v50;
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    v41 = a7;
  }
  if (a13 == a14)
    v45 = 0xEC00000032657261;
  else
    v45 = 0x8000000100041CB0;
  if ((v41 & 1) != 0)
    v46 = 2;
  else
    v46 = 1;
  v47 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithUserInterfaceStyle:", v46);
  v48 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v45);
  v49 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:inBundle:compatibleWithTraitCollection:", v48, 0, v47);

  a8(v49);
}

void sub_10003B0D8(void *a1, uint64_t a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, void *a11, void *a12, char a13, void (*a14)(id), uint64_t a15)
{
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __n128 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  id v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  double v56;
  double v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  id v66;
  id v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  double v71;
  double v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  id v78;
  uint64_t v79;
  id v80;
  _QWORD v81[3];
  _BYTE v82[8];
  double v83;
  uint64_t v84;
  _BYTE v85[32];

  v25 = a8 + 16;
  dispatch thunk of DispatchWorkItem.cancel()(a1);
  swift_beginAccess(v25, v85, 0, 0);
  if ((*(_BYTE *)(a8 + 16) & 1) == 0)
  {
    v80 = a1;
    if (a2)
    {
      swift_errorRetain(a2);
      if (qword_100055338 != -1)
        swift_once(&qword_100055338, sub_10000EF78);
      v26 = type metadata accessor for Logger(0);
      sub_10000CF34(v26, (uint64_t)qword_1000586D0);
      swift_errorRetain(a2);
      swift_bridgeObjectRetain(a10);
      v27 = a11;
      v28 = a12;
      swift_errorRetain(a2);
      swift_bridgeObjectRetain(a10);
      v29 = v27;
      v30 = v28;
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = swift_slowAlloc(72, -1);
        v79 = a15;
        v34 = swift_slowAlloc(128, -1);
        v84 = v34;
        *(_DWORD *)v33 = 136316675;
        swift_bridgeObjectRetain(a10);
        v83 = COERCE_DOUBLE(sub_100011770(a9, a10, &v84));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v33 + 4, v33 + 12);

        swift_bridgeObjectRelease_n(a10, 3);
        *(_WORD *)(v33 + 12) = 2080;
        objc_msgSend(v30, "size");
        v37 = CGSize.debugDescription.getter(v35, v36);
        v39 = v38;
        v83 = COERCE_DOUBLE(sub_100011770(v37, v38, &v84));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v33 + 14, v33 + 22);

        swift_bridgeObjectRelease(v39);
        *(_WORD *)(v33 + 22) = 2080;
        if ((a13 & 1) != 0)
          v40 = 1802658148;
        else
          v40 = 0x746867696CLL;
        if ((a13 & 1) != 0)
          v41 = 0xE400000000000000;
        else
          v41 = 0xE500000000000000;
        v83 = COERCE_DOUBLE(sub_100011770(v40, v41, &v84));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v33 + 24, v33 + 32);
        swift_bridgeObjectRelease(v41);
        *(_WORD *)(v33 + 32) = 2049;
        v83 = a4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v33 + 34, v33 + 42);
        *(_WORD *)(v33 + 42) = 2049;
        v83 = a5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v33 + 44, v33 + 52);
        *(_WORD *)(v33 + 52) = 2049;
        v83 = a6;
        v42 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v33 + 54, v33 + 62);
        *(_WORD *)(v33 + 62) = 2080;
        swift_getErrorValue(a2, v82, v81, v42);
        v43 = Error.localizedDescription.getter(v81[1], v81[2]);
        v45 = v44;
        v83 = COERCE_DOUBLE(sub_100011770(v43, v44, &v84));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v33 + 64, v33 + 72);
        swift_bridgeObjectRelease(v45);
        swift_errorRelease(a2);
        swift_errorRelease(a2);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "🥑 MapGenerator%s: failed making %s %s map for {%{private}f°,%{private}f°}, vspan: %{private}fm (%s)", (uint8_t *)v33, 0x48u);
        swift_arrayDestroy(v34, 4, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v34, -1, -1);
        swift_slowDealloc(v33, -1, -1);

        swift_errorRelease(a2);
        v46 = v80;
        if (!v80)
          goto LABEL_40;
LABEL_43:
        v78 = objc_msgSend(v46, "image", v79);
        goto LABEL_44;
      }
      swift_errorRelease(a2);

      swift_bridgeObjectRelease_n(a10, 2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

      v46 = v80;
      if (v80)
        goto LABEL_43;
    }
    else
    {
      if (a1)
      {
        v47 = objc_msgSend(a1, "image");

        if (v47)
        {
          if (qword_100055338 != -1)
            swift_once(&qword_100055338, sub_10000EF78);
          v48 = type metadata accessor for Logger(0);
          sub_10000CF34(v48, (uint64_t)qword_1000586D0);
          v49 = a12;
          swift_bridgeObjectRetain_n(a10, 2);
          v50 = a11;
          v51 = v49;
          v52 = v50;
          v53 = Logger.logObject.getter(v52);
          v54 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v53, v54))
          {
            v55 = swift_slowAlloc(62, -1);
            v79 = swift_slowAlloc(96, -1);
            v84 = v79;
            *(_DWORD *)v55 = 136316419;
            swift_bridgeObjectRetain(a10);
            v83 = COERCE_DOUBLE(sub_100011770(a9, a10, &v84));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v55 + 4, v55 + 12);

            swift_bridgeObjectRelease_n(a10, 3);
            *(_WORD *)(v55 + 12) = 2080;
            objc_msgSend(v51, "size");
            v58 = CGSize.debugDescription.getter(v56, v57);
            v60 = v59;
            v83 = COERCE_DOUBLE(sub_100011770(v58, v59, &v84));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v55 + 14, v55 + 22);

            swift_bridgeObjectRelease(v60);
            *(_WORD *)(v55 + 22) = 2080;
            if ((a13 & 1) != 0)
              v61 = 1802658148;
            else
              v61 = 0x746867696CLL;
            if ((a13 & 1) != 0)
              v62 = 0xE400000000000000;
            else
              v62 = 0xE500000000000000;
            v83 = COERCE_DOUBLE(sub_100011770(v61, v62, &v84));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v55 + 24, v55 + 32);
            swift_bridgeObjectRelease(v62);
            *(_WORD *)(v55 + 32) = 2049;
            v83 = a4;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v55 + 34, v55 + 42);
            *(_WORD *)(v55 + 42) = 2049;
            v83 = a5;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v55 + 44, v55 + 52);
            *(_WORD *)(v55 + 52) = 2049;
            v83 = a6;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v55 + 54, v55 + 62);
            _os_log_impl((void *)&_mh_execute_header, v53, v54, "🥑 MapGenerator%s: made %s %s map for {%{private}f°,%{private}f°}, span: %{private}fm", (uint8_t *)v55, 0x3Eu);
            swift_arrayDestroy(v79, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v79, -1, -1);
            swift_slowDealloc(v55, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(a10, 2);
          }
          v46 = v80;
          goto LABEL_43;
        }
      }
      if (qword_100055338 != -1)
        swift_once(&qword_100055338, sub_10000EF78);
      v63 = type metadata accessor for Logger(0);
      sub_10000CF34(v63, (uint64_t)qword_1000586D0);
      v64 = a12;
      swift_bridgeObjectRetain_n(a10, 2);
      v65 = a11;
      v66 = v64;
      v67 = v65;
      v68 = Logger.logObject.getter(v67);
      v69 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v68, v69))
      {
        v70 = swift_slowAlloc(62, -1);
        v79 = swift_slowAlloc(96, -1);
        v84 = v79;
        *(_DWORD *)v70 = 136316419;
        swift_bridgeObjectRetain(a10);
        v83 = COERCE_DOUBLE(sub_100011770(a9, a10, &v84));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v70 + 4, v70 + 12);

        swift_bridgeObjectRelease_n(a10, 3);
        *(_WORD *)(v70 + 12) = 2080;
        objc_msgSend(v66, "size");
        v73 = CGSize.debugDescription.getter(v71, v72);
        v75 = v74;
        v83 = COERCE_DOUBLE(sub_100011770(v73, v74, &v84));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v70 + 14, v70 + 22);

        swift_bridgeObjectRelease(v75);
        *(_WORD *)(v70 + 22) = 2080;
        if ((a13 & 1) != 0)
          v76 = 1802658148;
        else
          v76 = 0x746867696CLL;
        if ((a13 & 1) != 0)
          v77 = 0xE400000000000000;
        else
          v77 = 0xE500000000000000;
        v83 = COERCE_DOUBLE(sub_100011770(v76, v77, &v84));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v70 + 24, v70 + 32);
        swift_bridgeObjectRelease(v77);
        *(_WORD *)(v70 + 32) = 2049;
        v83 = a4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v70 + 34, v70 + 42);
        *(_WORD *)(v70 + 42) = 2049;
        v83 = a5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v70 + 44, v70 + 52);
        *(_WORD *)(v70 + 52) = 2049;
        v83 = a6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v70 + 54, v70 + 62);
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "🥑 MapGenerator%s: could not make %s %s map for {%{private}f°,%{private}f°}, span: %{private}fm", (uint8_t *)v70, 0x3Eu);
        swift_arrayDestroy(v79, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v79, -1, -1);
        swift_slowDealloc(v70, -1, -1);

        v46 = v80;
        if (!v80)
          goto LABEL_40;
        goto LABEL_43;
      }

      swift_bridgeObjectRelease_n(a10, 2);
      v46 = v80;
      if (v80)
        goto LABEL_43;
    }
LABEL_40:
    v78 = 0;
LABEL_44:
    a14(v78);

  }
}

void sub_10003BAA0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_10003BB14(void *a1, uint64_t a2, NSObject *a3)
{
  void *v6;
  id v7;
  _BYTE v8[24];

  swift_beginAccess(a2 + 16, v8, 1, 0);
  v6 = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = a1;
  v7 = a1;

  dispatch_group_leave(a3);
}

void sub_10003BB74(uint64_t a1, uint64_t a2, void (*a3)(void *, void *, uint64_t))
{
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  _BYTE v12[24];

  v6 = a2 + 16;
  swift_beginAccess(a1 + 16, v12, 0, 0);
  v7 = *(void **)(a1 + 16);
  swift_beginAccess(v6, &v11, 0, 0);
  v8 = *(void **)(a2 + 16);
  v9 = v8;
  v10 = v7;
  a3(v7, v8, 1);

}

double sub_10003BC10(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void *v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  v27 = a2;
  v28 = a1;
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014F64();
  static DispatchQoS.userInitiated.getter();
  v30 = &_swiftEmptyArrayStorage;
  v14 = sub_10000EB1C(&qword_100056A18, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v15 = sub_100003EA4(&qword_100056A20);
  v16 = sub_100036FFC((unint64_t *)&qword_100056A28, &qword_100056A20);
  v17 = v14;
  v18 = v27;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v15, v16, v8, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v4);
  OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000013, 0x8000000100042020, v13, v10, v7, 0);
  v19 = qword_100055338;
  swift_bridgeObjectRetain(v18);
  if (v19 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v20 = type metadata accessor for Logger(0);
  sub_10000CF34(v20, (uint64_t)qword_1000586D0);
  v21 = swift_bridgeObjectRetain(v18);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = (void *)swift_slowAlloc(32, -1);
    v30 = v25;
    *(_DWORD *)v24 = 136315138;
    swift_bridgeObjectRetain(v18);
    v29 = sub_100011770(v28, v18, (uint64_t *)&v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease_n(v18, 3);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "🥑 MapGenerator%s: init", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v18, 2);
  }
  return a3;
}

uint64_t sub_10003BF54()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003BF80()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_10003BFAC(void *a1)
{
  uint64_t v1;

  sub_10003BB14(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_10003BFC4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_10003BFF8()
{
  uint64_t v0;

  sub_10003BB74(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(void *, void *, uint64_t))(v0 + 32));
}

uint64_t sub_10003C004(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003C014(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10003C01C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10003C02C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 128));
  return swift_deallocObject(v0, 136, 7);
}

void sub_10003C070()
{
  uint64_t v0;

  sub_10003AC80(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 48), *(_QWORD *)(v0 + 56), *(void **)(v0 + 64), *(_BYTE *)(v0 + 72), *(void (**)(_QWORD))(v0 + 120), *(double *)(v0 + 40), *(double *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96), *(double *)(v0 + 104), *(double *)(v0 + 112));
}

uint64_t sub_10003C0B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 112));
  return swift_deallocObject(v0, 120, 7);
}

void sub_10003C104(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10003B0D8(a1, a2, *(double *)(v2 + 48), *(double *)(v2 + 80), *(double *)(v2 + 88), *(double *)(v2 + 96), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(void **)(v2 + 56), *(void **)(v2 + 64), *(_BYTE *)(v2 + 72), *(void (**)(id))(v2 + 104), *(_QWORD *)(v2 + 112));
}

void sub_10003C15C(uint64_t a1, uint64_t a2, void *a3, void (*a4)(_QWORD))
{
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  _QWORD *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  _QWORD *v35;
  id v36;
  __n128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  void (*v50)(_QWORD);
  void (*v51)(_QWORD);
  uint64_t v52;
  _QWORD v53[3];
  _BYTE v54[8];
  _OWORD v55[7];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;

  if (!a2 && a1)
  {
    v8 = (id)(a1 & 0xFFFFFFFFFFFFFF8);
    if ((unint64_t)a1 >> 62)
    {
      if (a1 >= 0)
        v27 = a1 & 0xFFFFFFFFFFFFFF8;
      else
        v27 = a1;
      swift_bridgeObjectRetain(a1);
      if (_CocoaArrayWrapper.endIndex.getter(v27))
      {
LABEL_5:
        if ((a1 & 0xC000000000000001) != 0)
        {
          v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
        }
        else
        {
          if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_29;
          }
          v10 = *(id *)(a1 + 32);
        }
        v11 = v10;
        swift_bridgeObjectRelease(a1);
        v8 = v11;
        sub_100016B9C(v8, v55);
        v47 = v55[1];
        v48 = v55[0];
        v45 = v55[3];
        v46 = v55[2];
        v43 = v55[5];
        v44 = v55[4];
        v42 = v55[6];
        if (qword_100055338 == -1)
        {
LABEL_9:
          v12 = type metadata accessor for Logger(0);
          sub_10000CF34(v12, (uint64_t)qword_1000586D0);
          v13 = a3;
          sub_10003C750(v55);
          v14 = v13;
          v15 = sub_10003C750(v55);
          v16 = Logger.logObject.getter(v15);
          v17 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v16, v17))
          {
            v50 = a4;
            v18 = swift_slowAlloc(22, -1);
            v19 = (_QWORD *)swift_slowAlloc(8, -1);
            v20 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v56 = v20;
            *(_DWORD *)v18 = 138412546;
            v52 = (uint64_t)v14;
            v21 = v14;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v18 + 4, v18 + 12);
            *v19 = v14;

            *(_WORD *)(v18 + 12) = 2080;
            sub_10003C750(v55);
            v22 = sub_100016908();
            v24 = v23;
            sub_10003C7D8(v55);
            v52 = sub_100011770(v22, v24, (uint64_t *)&v56);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v18 + 14, v18 + 22);
            swift_bridgeObjectRelease(v24);
            sub_10003C7D8(v55);
            sub_10003C7D8(v55);
            _os_log_impl((void *)&_mh_execute_header, v16, v17, "🥑 CLGeocoder: reverse geo-coded %@ to %s", (uint8_t *)v18, 0x16u);
            v25 = sub_100003EA4(&qword_100056CE8);
            swift_arrayDestroy(v19, 1, v25);
            swift_slowDealloc(v19, -1, -1);
            swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v20, -1, -1);
            v26 = v18;
            a4 = v50;
            swift_slowDealloc(v26, -1, -1);
          }
          else
          {

            sub_10003C7D8(v55);
            sub_10003C7D8(v55);
          }

          v56 = v48;
          v57 = v47;
          v58 = v46;
          v59 = v45;
          v60 = v44;
          v61 = v43;
          v62 = v42;
          a4(&v56);
          sub_10003C7D8(v55);

          return;
        }
LABEL_29:
        swift_once(&qword_100055338, sub_10000EF78);
        goto LABEL_9;
      }
    }
    else
    {
      v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (v9)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease(a1);
  }
  if (qword_100055338 != -1)
    swift_once(&qword_100055338, sub_10000EF78);
  v28 = type metadata accessor for Logger(0);
  sub_10000CF34(v28, (uint64_t)qword_1000586D0);
  v29 = a3;
  swift_errorRetain(a2);
  v30 = v29;
  v31 = swift_errorRetain(a2);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v51 = a4;
    v34 = swift_slowAlloc(22, -1);
    v35 = (_QWORD *)swift_slowAlloc(8, -1);
    v49 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v56 = v49;
    *(_DWORD *)v34 = 138412546;
    *(_QWORD *)&v55[0] = v30;
    v36 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, (char *)v55 + 8, v34 + 4, v34 + 12);
    *v35 = v30;

    *(_WORD *)(v34 + 12) = 2080;
    if (a2)
    {
      swift_getErrorValue(a2, v54, v53, v37);
      v38 = Error.localizedDescription.getter(v53[1], v53[2]);
      v40 = v39;
    }
    else
    {
      v40 = 0xE300000000000000;
      v38 = 7104878;
    }
    *(_QWORD *)&v55[0] = sub_100011770(v38, v40, (uint64_t *)&v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, (char *)v55 + 8, v34 + 14, v34 + 22);
    swift_bridgeObjectRelease(v40);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "🥑 CLGeocoder: failed reverse geo-coding %@: %s", (uint8_t *)v34, 0x16u);
    v41 = sub_100003EA4(&qword_100056CE8);
    swift_arrayDestroy(v35, 1, v41);
    swift_slowDealloc(v35, -1, -1);
    swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v34, -1, -1);

    a4 = v51;
  }
  else
  {

    swift_errorRelease(a2);
    swift_errorRelease(a2);

  }
  v56 = xmmword_100042800;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  a4(&v56);
}

_QWORD *sub_10003C750(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[11];
  swift_bridgeObjectRetain(a1[13]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

_QWORD *sub_10003C7D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[7];
  v5 = a1[9];
  v6 = a1[11];
  v7 = a1[13];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t destroy for BatteryInfo(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t _s17FindMyWidgetItems11BatteryInfoVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for BatteryInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for BatteryInfo(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for BatteryInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for BatteryInfo(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BatteryInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BatteryInfo()
{
  return &type metadata for BatteryInfo;
}

uint64_t sub_10003CA34(int a1, uint64_t a2, void *a3, float a4)
{
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD v25[2];

  v8 = (void *)0xE000000000000000;
  v25[0] = 0;
  v25[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(90);
  v9._countAndFlagsBits = 0x4979726574746142;
  v9._object = (void *)0xEB000000006F666ELL;
  String.append(_:)(v9);
  if (a3)
    v8 = a3;
  else
    a2 = 0;
  swift_bridgeObjectRetain(a3);
  v10._countAndFlagsBits = a2;
  v10._object = v8;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v8);
  v11._countAndFlagsBits = 0x3D6C6576656C203ALL;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  Float.write<A>(to:)(v25, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a4);
  v12._countAndFlagsBits = 0x726168437369202CLL;
  v12._object = (void *)0xED00003D676E6967;
  String.append(_:)(v12);
  if ((a1 & 1) != 0)
    v13 = 1702195828;
  else
    v13 = 0x65736C6166;
  if ((a1 & 1) != 0)
    v14 = 0xE400000000000000;
  else
    v14 = 0xE500000000000000;
  v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease(v14);
  v16._object = (void *)0x8000000100042070;
  v16._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v16);
  if ((a1 & 0x100) != 0)
    v17 = 1702195828;
  else
    v17 = 0x65736C6166;
  if ((a1 & 0x100) != 0)
    v18 = 0xE400000000000000;
  else
    v18 = 0xE500000000000000;
  v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease(v18);
  v20._countAndFlagsBits = 0xD00000000000001CLL;
  v20._object = (void *)0x8000000100042090;
  String.append(_:)(v20);
  if ((a1 & 0x10000) != 0)
    v21 = 1702195828;
  else
    v21 = 0x65736C6166;
  if ((a1 & 0x10000) != 0)
    v22 = 0xE400000000000000;
  else
    v22 = 0xE500000000000000;
  v23 = v22;
  String.append(_:)(*(Swift::String *)&v21);
  swift_bridgeObjectRelease(v22);
  return v25[0];
}

uint64_t sub_10003CC14(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003CC44 + 4 * byte_100043E10[a1]))(0x6C6576656CLL, 0xE500000000000000);
}

uint64_t sub_10003CC44()
{
  return 0x6967726168437369;
}

unint64_t sub_10003CC60()
{
  return 0xD000000000000011;
}

unint64_t sub_10003CC7C()
{
  return 0xD000000000000019;
}

uint64_t sub_10003CCB4(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v19 = a4;
  v10 = sub_100003EA4(&qword_100056D00);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  sub_10001C484(a1, v14);
  v16 = sub_10003D5D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BatteryInfo.CodingKeys, &type metadata for BatteryInfo.CodingKeys, v16, v14, v15);
  v24 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v24, v10, a5);
  if (!v5)
  {
    v17 = v19;
    v23 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a2 & 1, &v23, v10);
    v22 = 2;
    KeyedEncodingContainer.encode(_:forKey:)((a2 >> 8) & 1, &v22, v10);
    v21 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(HIWORD(a2) & 1, &v21, v10);
    v20 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a3, v17, &v20, v10);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

BOOL sub_10003CE64(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10003CE78()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10003CEBC()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10003CEE4(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10003CF24()
{
  unsigned __int8 *v0;

  return sub_10003CC14(*v0);
}

uint64_t sub_10003CF2C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10003D1D0(a1, a2);
  *a3 = result;
  return result;
}

void sub_10003CF50(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10003CF5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003D5D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003CF84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003D5D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003CFAC()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;

  if (*(_BYTE *)(v0 + 5))
    v1 = 256;
  else
    v1 = 0;
  v2 = v1 | *(unsigned __int8 *)(v0 + 4);
  if (*(_BYTE *)(v0 + 6))
    v3 = 0x10000;
  else
    v3 = 0;
  return sub_10003CA34(v2 | v3, *(_QWORD *)(v0 + 8), *(void **)(v0 + 16), *(float *)v0);
}

void sub_10003CFE4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  float v7;

  v7 = sub_10003D3D8(a1);
  if (!v2)
  {
    *(float *)a2 = v7;
    *(_BYTE *)(a2 + 4) = v4 & 1;
    *(_BYTE *)(a2 + 5) = BYTE1(v4) & 1;
    *(_BYTE *)(a2 + 6) = BYTE2(v4) & 1;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
}

uint64_t sub_10003D028(_QWORD *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;

  if (*(_BYTE *)(v1 + 5))
    v2 = 256;
  else
    v2 = 0;
  v3 = v2 | *(unsigned __int8 *)(v1 + 4);
  if (*(_BYTE *)(v1 + 6))
    v4 = 0x10000;
  else
    v4 = 0;
  return sub_10003CCB4(a1, v3 | v4, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(float *)v1);
}

uint64_t sub_10003D070(unsigned __int8 a1, char a2, char a3, float a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  float v27;
  unsigned __int8 v28;
  char v29;
  char v30;
  unint64_t v31;
  unint64_t v32;

  v31 = 0;
  v32 = 0;
  v27 = a4;
  v28 = a1;
  v29 = a2;
  v30 = a3;
  v4 = sub_100003EA4(&qword_100056D08);
  v5 = sub_10003D61C();
  v6 = _Pointer.debugDescription.getter(v4, v5);
  v8 = v7;
  v9 = sub_100012188(9uLL, v6, v7);
  v11 = v10;
  v25 = 7876668;
  v26 = 0xE300000000000000;
  v21 = v9;
  v22 = v12;
  v23 = v13;
  v24 = v10;
  v14 = sub_100012230();
  String.append<A>(contentsOf:)(&v21, &type metadata for Substring, v14);
  swift_bridgeObjectRelease(v11);
  v15 = v26;
  v21 = v25;
  v22 = v26;
  swift_bridgeObjectRetain(v26);
  v16._countAndFlagsBits = 15987;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v15);
  v17 = v32;
  v31 = v21;
  v32 = v22;
  swift_bridgeObjectRelease(v17);
  if (v29)
    v18 = 256;
  else
    v18 = 0;
  if (v30)
    v19 = 0x10000;
  else
    v19 = 0;
  return v18 | v28 | v19;
}

uint64_t sub_10003D1D0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6C6576656CLL && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6576656CLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6967726168437369 && a2 == 0xEA0000000000676ELL)
  {
    v7 = 0xEA0000000000676ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6967726168437369, 0xEA0000000000676ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000011)
  {
    v8 = 0x80000001000420B0;
    if (a2 == 0x80000001000420B0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001000420B0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x80000001000420D0)
  {
    v9 = 0x80000001000420D0;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x80000001000420D0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000001000420F0)
  {
    swift_bridgeObjectRelease(0x80000001000420F0);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001000420F0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

float sub_10003D3D8(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  _DWORD v13[2];
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v4 = sub_100003EA4(&qword_100056CF0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001C484(a1, v8);
  v10 = sub_10003D5D8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BatteryInfo.CodingKeys, &type metadata for BatteryInfo.CodingKeys, v10, v8, v9);
  if (!v1)
  {
    v18 = 0;
    KeyedDecodingContainer.decode(_:forKey:)(&v18, v4);
    v2 = v11;
    v17 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v17, v4);
    v16 = 2;
    KeyedDecodingContainer.decode(_:forKey:)(&v16, v4);
    v15 = 3;
    v13[1] = KeyedDecodingContainer.decode(_:forKey:)(&v15, v4);
    v14 = 4;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v14, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  sub_100011DC0(a1);
  return v2;
}

unint64_t sub_10003D5D8()
{
  unint64_t result;

  result = qword_100056CF8;
  if (!qword_100056CF8)
  {
    result = swift_getWitnessTable(&unk_100043F7C, &type metadata for BatteryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100056CF8);
  }
  return result;
}

unint64_t sub_10003D61C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056D10;
  if (!qword_100056D10)
  {
    v1 = sub_100003EE4(&qword_100056D08);
    result = swift_getWitnessTable(&protocol conformance descriptor for UnsafePointer<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100056D10);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BatteryInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BatteryInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10003D744 + 4 * byte_100043E1A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10003D778 + 4 * byte_100043E15[v4]))();
}

uint64_t sub_10003D778(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003D780(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003D788);
  return result;
}

uint64_t sub_10003D794(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003D79CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10003D7A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003D7A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BatteryInfo.CodingKeys()
{
  return &type metadata for BatteryInfo.CodingKeys;
}

unint64_t sub_10003D7C8()
{
  unint64_t result;

  result = qword_100056D18;
  if (!qword_100056D18)
  {
    result = swift_getWitnessTable(&unk_100043F54, &type metadata for BatteryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100056D18);
  }
  return result;
}

unint64_t sub_10003D810()
{
  unint64_t result;

  result = qword_100056D20;
  if (!qword_100056D20)
  {
    result = swift_getWitnessTable(&unk_100043EC4, &type metadata for BatteryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100056D20);
  }
  return result;
}

unint64_t sub_10003D858()
{
  unint64_t result;

  result = qword_100056D28;
  if (!qword_100056D28)
  {
    result = swift_getWitnessTable(&unk_100043EEC, &type metadata for BatteryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100056D28);
  }
  return result;
}

double sub_10003D89C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = Color.init(_:)(objc_msgSend(v0, "systemBackgroundColor"));
  v2 = Color.init(_:)(objc_msgSend(v0, "tertiarySystemBackgroundColor"));
  *(_QWORD *)&xmmword_100058830 = v1;
  *((_QWORD *)&xmmword_100058830 + 1) = v2;
  xmmword_100058840 = xmmword_100043FD0;
  xmmword_100058850 = xmmword_100043FE0;
  __asm { FMOV            V0.2D, #16.0 }
  xmmword_100058860 = _Q0;
  xmmword_100058870 = _Q0;
  xmmword_100058880 = xmmword_100043FF0;
  xmmword_100058890 = xmmword_100044000;
  *(_QWORD *)&xmmword_1000588A0 = 0x4004000000000000;
  *(__int128 *)((char *)&xmmword_1000588A0 + 8) = xmmword_100044010;
  *(__int128 *)((char *)&xmmword_1000588B0 + 8) = xmmword_100044020;
  *(__int128 *)((char *)&xmmword_1000588C0 + 8) = xmmword_100042780;
  *(__int128 *)((char *)&xmmword_1000588D0 + 8) = xmmword_100044030;
  *(__int128 *)((char *)&xmmword_1000588E0 + 8) = _Q0;
  *(__int128 *)((char *)&xmmword_1000588F0 + 8) = xmmword_100044040;
  result = -4.0;
  *(__int128 *)((char *)&xmmword_100058900 + 8) = xmmword_100044050;
  return result;
}

uint64_t destroy for ContentViewStyle(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

uint64_t initializeWithCopy for ContentViewStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 64) = v6;
  v7 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 96) = v7;
  v8 = *((_OWORD *)a2 + 8);
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 128) = v8;
  v9 = *((_OWORD *)a2 + 10);
  *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
  *(_OWORD *)(a1 + 160) = v9;
  v10 = *((_OWORD *)a2 + 12);
  *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
  *(_OWORD *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
  *(_QWORD *)(a1 + 224) = a2[28];
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for ContentViewStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  a1[16] = a2[16];
  a1[17] = a2[17];
  a1[18] = a2[18];
  a1[19] = a2[19];
  a1[20] = a2[20];
  a1[21] = a2[21];
  a1[22] = a2[22];
  a1[23] = a2[23];
  a1[24] = a2[24];
  a1[25] = a2[25];
  a1[26] = a2[26];
  a1[27] = a2[27];
  a1[28] = a2[28];
  return a1;
}

__n128 initializeWithTake for ContentViewStyle(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[13];
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for ContentViewStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentViewStyle(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 232))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentViewStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 232) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 232) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentViewStyle()
{
  return &type metadata for ContentViewStyle;
}

void sub_10003DD0C(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  id v8;
  Class isa;
  id v10;
  void *v11;
  _BYTE v12[24];

  if ((a3 & 1) == 0)
  {
    v7 = a4 + 16;
    v8 = objc_allocWithZone((Class)UIImage);
    sub_10003E19C(a1, a2);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v10 = objc_msgSend(v8, "initWithData:", isa);
    sub_10003E1E0(a1, a2, 0);

    swift_beginAccess(v7, v12, 1, 0);
    v11 = *(void **)(a4 + 16);
    *(_QWORD *)(a4 + 16) = v10;

  }
}

void *sub_10003DDC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  double v15;
  double v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  __n128 v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  Class isa;
  void *v35;
  id v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[3];

  v38 = a1;
  v3 = type metadata accessor for FMIPItemImageSize(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FMIPItemImageCacheRequest(0);
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v38 - v11;
  if (qword_100055350 != -1)
    swift_once(&qword_100055350, sub_10003276C);
  v13 = (void *)qword_100058720;
  v14 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v14, "scale");
  v16 = v15;

  v17 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v18 = objc_msgSend(v17, "osBuildVersion");

  if (v18)
  {
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

  }
  else
  {
    v21 = 0xEE00746567646977;
    v19 = 0x5F6E776F6E6B6E75;
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for FMIPItemImageSize.infobox(_:), v3);
  swift_bridgeObjectRetain(a2);
  v22 = objc_msgSend(v13, "CGColor");
  FMIPItemImageCacheRequest.init(emoji:size:scale:backgroundColor:osVersion:)(v38, a2, v6, v22, v19, v21, v16);
  v23 = swift_allocObject(&unk_1000533C0, 24, 7);
  *(_QWORD *)(v23 + 16) = 0;
  v25 = v39;
  v24 = v40;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v10, v12, v40);
  v26 = objc_allocWithZone((Class)type metadata accessor for FMIPItemImageCacheOperation(0));
  v27 = swift_retain(v23);
  v28 = (void *)FMIPItemImageCacheOperation.init(request:completion:)(v10, sub_10003E154, v23, v27);
  v29 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  v30 = sub_100003EA4(&qword_100056D30);
  v31 = swift_allocObject(v30, 40, 7);
  *(_OWORD *)(v31 + 16) = xmmword_1000440A0;
  *(_QWORD *)(v31 + 32) = v28;
  v41[0] = v31;
  specialized Array._endMutation()(v31);
  v32 = v41[0];
  sub_10003E160();
  v33 = v28;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v29, "addOperations:waitUntilFinished:", isa, 1, swift_bridgeObjectRelease(v32).n128_f64[0]);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v24);
  swift_beginAccess(v23 + 16, v41, 0, 0);
  v35 = *(void **)(v23 + 16);
  v36 = v35;
  swift_release(v23);
  return v35;
}

uint64_t sub_10003E130()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10003E154(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;

  sub_10003DD0C(a1, a2, a3 & 1, v3);
}

unint64_t sub_10003E160()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056D38;
  if (!qword_100056D38)
  {
    v1 = objc_opt_self(NSOperation);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100056D38);
  }
  return result;
}

uint64_t sub_10003E19C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10003E1E0(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return sub_10001C5CC(a1, a2);
}

id ItemSelectorIntent.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id ItemSelectorIntent.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ItemSelectorIntent();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for ItemSelectorIntent()
{
  return objc_opt_self(ItemSelectorIntent);
}

id ItemSelectorIntent.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithCoder:", a1);

  return v3;
}

id ItemSelectorIntent.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ItemSelectorIntent();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id ItemSelectorIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  NSString v7;
  id v8;

  v4 = v3;
  if (a2)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(objc_allocWithZone(v4), "initWithIdentifier:backingStore:", v7, a3);

  return v8;
}

id ItemSelectorIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  NSString v6;
  id v7;
  objc_super v9;

  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v6 = 0;
  }
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for ItemSelectorIntent();
  v7 = objc_msgSendSuper2(&v9, "initWithIdentifier:backingStore:", v6, a3);

  return v7;
}

id ItemSelectorIntent.__allocating_init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  NSString v9;
  NSString v10;
  NSDictionary v11;
  id v12;

  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a5)
  {
    v11.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
  }
  else
  {
    v11.super.isa = 0;
  }
  v12 = objc_msgSend(objc_allocWithZone(v5), "initWithDomain:verb:parametersByName:", v9, v10, v11.super.isa);

  return v12;
}

id ItemSelectorIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  NSString v9;
  NSString v10;
  NSDictionary v11;
  id v12;
  objc_super v14;

  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a5)
  {
    v11.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
  }
  else
  {
    v11.super.isa = 0;
  }
  v14.receiver = v5;
  v14.super_class = (Class)type metadata accessor for ItemSelectorIntent();
  v12 = objc_msgSendSuper2(&v14, "initWithDomain:verb:parametersByName:", v9, v10, v11.super.isa);

  return v12;
}

id ItemSelectorIntent.__deallocating_deinit()
{
  return sub_10003EED0(type metadata accessor for ItemSelectorIntent);
}

unint64_t ItemSelectorIntentResponseCode.init(rawValue:)(unint64_t a1)
{
  return sub_10003EF00(a1);
}

BOOL sub_10003E7F0(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10003E804()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10003E848()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10003E870(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t sub_10003E8B0@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_10003EF00(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t ItemSelectorIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR___ItemSelectorIntentResponse_code;
  swift_beginAccess(v0 + OBJC_IVAR___ItemSelectorIntentResponse_code, v3, 0, 0);
  return *(_QWORD *)v1;
}

char *ItemSelectorIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  char *v7;
  char v9[24];

  v5 = (char *)objc_msgSend(objc_allocWithZone(v2), "init");
  v6 = &v5[OBJC_IVAR___ItemSelectorIntentResponse_code];
  swift_beginAccess(&v5[OBJC_IVAR___ItemSelectorIntentResponse_code], v9, 1, 0);
  *(_QWORD *)v6 = a1;
  v7 = v5;
  objc_msgSend(v7, "setUserActivity:", a2);

  return v7;
}

char *ItemSelectorIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  void *v2;
  char *v5;
  char *v6;
  char *v7;
  char v9[24];

  v5 = (char *)objc_msgSend(v2, "init");
  v6 = &v5[OBJC_IVAR___ItemSelectorIntentResponse_code];
  swift_beginAccess(&v5[OBJC_IVAR___ItemSelectorIntentResponse_code], v9, 1, 0);
  *(_QWORD *)v6 = a1;
  v7 = v5;
  objc_msgSend(v7, "setUserActivity:", a2);

  return v7;
}

id ItemSelectorIntentResponse.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR___ItemSelectorIntentResponse_code] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ItemSelectorIntentResponse();
  return objc_msgSendSuper2(&v2, "init");
}

id ItemSelectorIntentResponse.init(coder:)(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR___ItemSelectorIntentResponse_code] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ItemSelectorIntentResponse();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id ItemSelectorIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithBackingStore:", a1);

  return v3;
}

id ItemSelectorIntentResponse.init(backingStore:)(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR___ItemSelectorIntentResponse_code] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ItemSelectorIntentResponse();
  v3 = objc_msgSendSuper2(&v5, "initWithBackingStore:", a1);

  return v3;
}

id sub_10003ECF4(char *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  objc_super v7;

  *(_QWORD *)&a1[OBJC_IVAR___ItemSelectorIntentResponse_code] = 0;
  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for ItemSelectorIntentResponse();
  return objc_msgSendSuper2(&v7, *a4, a3);
}

id ItemSelectorIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  objc_class *v1;
  NSDictionary v3;
  id v4;

  if (a1)
  {
    v3.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3.super.isa = 0;
  }
  v4 = objc_msgSend(objc_allocWithZone(v1), "initWithPropertiesByName:", v3.super.isa);

  return v4;
}

id ItemSelectorIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  NSDictionary v3;
  id v4;
  objc_super v6;

  *(_QWORD *)&v1[OBJC_IVAR___ItemSelectorIntentResponse_code] = 0;
  if (a1)
  {
    v3.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3.super.isa = 0;
  }
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for ItemSelectorIntentResponse();
  v4 = objc_msgSendSuper2(&v6, "initWithPropertiesByName:", v3.super.isa);

  if (v4)
  return v4;
}

id ItemSelectorIntentResponse.__deallocating_deinit()
{
  return sub_10003EED0(type metadata accessor for ItemSelectorIntentResponse);
}

id sub_10003EED0(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

unint64_t sub_10003EF00(unint64_t result)
{
  if (result > 6)
    return 0;
  return result;
}

uint64_t type metadata accessor for ItemSelectorIntentResponse()
{
  return objc_opt_self(ItemSelectorIntentResponse);
}

unint64_t sub_10003EF34()
{
  unint64_t result;

  result = qword_100056D48;
  if (!qword_100056D48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ItemSelectorIntentResponseCode, &type metadata for ItemSelectorIntentResponseCode);
    atomic_store(result, (unint64_t *)&qword_100056D48);
  }
  return result;
}

uint64_t sub_10003EF78@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_QWORD *)(*a1 + OBJC_IVAR___ItemSelectorIntentResponse_code);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a2 = *v3;
  return result;
}

uint64_t sub_10003EFC8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR___ItemSelectorIntentResponse_code);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = v2;
  return result;
}

ValueMetadata *type metadata accessor for ItemSelectorIntentResponseCode()
{
  return &type metadata for ItemSelectorIntentResponseCode;
}

uint64_t static ItemSource.supportsSecureCoding.getter()
{
  return 1;
}

id ItemSource.__allocating_init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  NSString v10;
  NSString v11;
  NSString v12;
  id v13;

  if (a2)
  {
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v10 = 0;
  }
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a6)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
  }
  else
  {
    v12 = 0;
  }
  v13 = objc_msgSend(objc_allocWithZone(v6), "initWithIdentifier:displayString:pronunciationHint:", v10, v11, v12);

  return v13;
}

id ItemSource.init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  NSString v10;
  NSString v11;
  NSString v12;
  id v13;
  objc_super v15;

  if (a2)
  {
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v10 = 0;
  }
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a6)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
  }
  else
  {
    v12 = 0;
  }
  v15.receiver = v6;
  v15.super_class = (Class)type metadata accessor for ItemSource();
  v13 = objc_msgSendSuper2(&v15, "initWithIdentifier:displayString:pronunciationHint:", v10, v11, v12);

  return v13;
}

uint64_t type metadata accessor for ItemSource()
{
  return objc_opt_self(ItemSource);
}

id ItemSource.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ItemSource();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id ItemSource.__deallocating_deinit()
{
  return sub_10003EED0(type metadata accessor for ItemSource);
}

id static ItemSourceResolutionResult.success(with:)(uint64_t a1)
{
  uint64_t v1;
  objc_super v4;

  v4.receiver = (id)swift_getObjCClassFromMetadata(v1);
  v4.super_class = (Class)&OBJC_METACLASS___ItemSourceResolutionResult;
  return objc_msgSendSuper2(&v4, "successWithResolvedObject:", a1);
}

id static ItemSourceResolutionResult.disambiguation(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *ObjCClassFromMetadata;
  Class isa;
  double v7;
  id v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  objc_super v13;

  v2 = v1;
  v3 = a1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    v11 = sub_10003F4BC();
    swift_bridgeObjectRetain(v3);
    v12 = _bridgeCocoaArray<A>(_:)(v10, v11);
    swift_bridgeObjectRelease(v3);
    v3 = v12;
  }
  else
  {
    v4 = swift_bridgeObjectRetain(a1);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v4);
    sub_10003F4BC();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v2);
  sub_10003F4BC();
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v7 = swift_bridgeObjectRelease(v3).n128_u64[0];
  v13.receiver = ObjCClassFromMetadata;
  v13.super_class = (Class)&OBJC_METACLASS___ItemSourceResolutionResult;
  v8 = objc_msgSendSuper2(&v13, "disambiguationWithObjectsToDisambiguate:", isa, v7);

  return v8;
}

unint64_t sub_10003F4BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100056E28;
  if (!qword_100056E28)
  {
    v1 = objc_opt_self(INObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100056E28);
  }
  return result;
}

id static ItemSourceResolutionResult.confirmationRequired(with:)(uint64_t a1)
{
  uint64_t v1;
  objc_super v4;

  v4.receiver = (id)swift_getObjCClassFromMetadata(v1);
  v4.super_class = (Class)&OBJC_METACLASS___ItemSourceResolutionResult;
  return objc_msgSendSuper2(&v4, "confirmationRequiredWithObjectToConfirm:", a1);
}

void static ItemSourceResolutionResult.success(with:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "FindMyWidgetItems/ItemSource.swift", 34, 2, 47, 0);
  __break(1u);
}

void static ItemSourceResolutionResult.disambiguation(with:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "FindMyWidgetItems/ItemSource.swift", 34, 2, 52, 0);
  __break(1u);
}

void static ItemSourceResolutionResult.confirmationRequired(with:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "FindMyWidgetItems/ItemSource.swift", 34, 2, 57, 0);
  __break(1u);
}

id ItemSourceResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v5;
  Class isa;
  id v7;

  v5 = objc_allocWithZone(v2);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v7 = objc_msgSend(v5, "initWithJSONDictionary:forIntent:", isa, a2);

  return v7;
}

id ItemSourceResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  void *v2;
  Class isa;
  id v6;
  id v7;
  objc_super v9;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for ItemSourceResolutionResult();
  v6 = objc_msgSendSuper2(&v9, "initWithJSONDictionary:forIntent:", isa, a2);

  v7 = v6;
  if (v7)

  return v7;
}

uint64_t type metadata accessor for ItemSourceResolutionResult()
{
  return objc_opt_self(ItemSourceResolutionResult);
}

id ItemSourceResolutionResult.__deallocating_deinit()
{
  return sub_10003EED0(type metadata accessor for ItemSourceResolutionResult);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC17FindMyWidgetItemsP33_B8759C1AE0EBC0031F0E17C675ECC5C019ResourceBundleClass);
}

BOOL sub_10003F9E0(int a1, int a2, int a3)
{
  BOOL v6;

  if (qword_100058640 == -1)
  {
    v6 = dword_100058630 < a1;
    if (dword_100058630 > a1)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_100058640, 0, (dispatch_function_t)sub_10003FAC8);
    v6 = dword_100058630 < a1;
    if (dword_100058630 > a1)
      return 1;
  }
  if (v6)
    return 0;
  if (dword_100058634 > a2)
    return 1;
  return dword_100058634 >= a2 && dword_100058638 >= a3;
}

uint64_t sub_10003FAC8()
{
  return sub_10003FC60(1);
}

uint64_t sub_10003FAD0(int a1, int a2, int a3, int a4)
{
  BOOL v9;
  _DWORD v10[2];

  if (qword_100058648 == -1)
  {
    if (qword_100058650)
    {
LABEL_3:
      v10[0] = a1;
      v10[1] = (a2 << 16) | (a3 << 8) | a4;
      return _availability_version_check(1, v10);
    }
  }
  else
  {
    dispatch_once_f(&qword_100058648, 0, (dispatch_function_t)sub_10003FC58);
    if (qword_100058650)
      goto LABEL_3;
  }
  if (qword_100058640 == -1)
  {
    v9 = dword_100058630 < a2;
    if (dword_100058630 > a2)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_100058640, 0, (dispatch_function_t)sub_10003FAC8);
    v9 = dword_100058630 < a2;
    if (dword_100058630 > a2)
      return 1;
  }
  if (v9)
    return 0;
  if (dword_100058634 > a3)
    return 1;
  return dword_100058634 >= a3 && dword_100058638 >= a4;
}

uint64_t sub_10003FC58()
{
  return sub_10003FC60(0);
}

uint64_t sub_10003FC60(uint64_t result)
{
  void *v1;
  BOOL v2;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  unint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t (*v8)(_QWORD, const char *, uint64_t, unsigned __int8 *);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(void);
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  FILE *v27;
  unsigned int (*v28)(uint64_t, char *, uint64_t, uint64_t);
  char v29[32];

  v1 = (void *)qword_100058650;
  if (qword_100058650)
    v2 = (_DWORD)result == 0;
  else
    v2 = 0;
  if (!v2)
  {
    if (&__availability_version_check)
    {
      qword_100058650 = (uint64_t)&__availability_version_check;
      v1 = &__availability_version_check;
    }
    if (!v1 || (_DWORD)result != 0)
    {
      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        v4 = *(unsigned __int8 **)result;
        result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          v5 = (uint64_t (*)(_QWORD))result;
          v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            v7 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))result;
            result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              v8 = (uint64_t (*)(_QWORD, const char *, uint64_t, unsigned __int8 *))result;
              result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  v10 = (uint64_t (*)(uint64_t))result;
                  result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    v11 = (uint64_t (*)(void))result;
                    result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        v12 = (FILE *)result;
                        result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          v13 = (FILE *)result;
                          v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          v14 = ftell(v13);
                          if (v14 < 0)
                          {
                            v16 = 0;
                          }
                          else
                          {
                            v15 = v14;
                            rewind(v13);
                            v16 = malloc(v15);
                            if (v16)
                            {
                              v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                v17 = v5(0);
                                if (v17)
                                {
                                  v18 = v17;
                                  v19 = v13;
                                  if (v6)
                                    v20 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))v6)(0, v17, 0, 0, 0);
                                  else
                                    v20 = v7(0, v17, 0, 0);
                                  v21 = v20;
                                  if (v20)
                                  {
                                    v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      v23 = v22;
                                      v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984))
                                            sscanf(v29, "%d.%d.%d", &dword_100058630, &dword_100058634, &dword_100058638);
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  v19 = v13;
                                }
                                v16 = v26;
                              }
                              else
                              {
                                v16 = v26;
                                v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}
