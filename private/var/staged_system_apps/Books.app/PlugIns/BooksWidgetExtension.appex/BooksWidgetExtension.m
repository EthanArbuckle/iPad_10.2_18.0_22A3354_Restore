uint64_t sub_100003A34()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t variable initialization expression of WidgetBookInfo.coverURL()
{
  return 0;
}

uint64_t variable initialization expression of WidgetBookInfo.progress()
{
  return 0;
}

uint64_t variable initialization expression of WidgetBookInfo.cloudAssetType()
{
  return 0;
}

uint64_t type metadata accessor for BundleFinder()
{
  return objc_opt_self(_TtC20BooksWidgetExtensionP33_5D6CEEE7941C13AE164B73BA2B2A3F9C12BundleFinder);
}

void type metadata accessor for BDSLibraryContentAssetType(uint64_t a1)
{
  sub_1000040AC(a1, &qword_1000A08E8, (uint64_t)&unk_10009A080);
}

void type metadata accessor for BDSCloudAssetType(uint64_t a1)
{
  sub_1000040AC(a1, &qword_1000A08F0, (uint64_t)&unk_10009A0A8);
}

uint64_t sub_100003AAC(uint64_t a1, uint64_t a2)
{
  return sub_100003F54(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100003AC8(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100003B3C(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100003BB8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_100003BFC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100003C84@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100003CC8@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100003CF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100003DCC(&qword_1000A0938, (uint64_t (*)(uint64_t))type metadata accessor for BDSCloudAssetType, (uint64_t)&unk_10007EF6C);
  v3 = sub_100003DCC(&qword_1000A0940, (uint64_t (*)(uint64_t))type metadata accessor for BDSCloudAssetType, (uint64_t)&unk_10007EF0C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100003D74()
{
  return sub_100003DCC(&qword_1000A08F8, (uint64_t (*)(uint64_t))type metadata accessor for BDSCloudAssetType, (uint64_t)&unk_10007EED0);
}

uint64_t sub_100003DA0()
{
  return sub_100003DCC(&qword_1000A0900, (uint64_t (*)(uint64_t))type metadata accessor for BDSCloudAssetType, (uint64_t)&unk_10007EEA4);
}

uint64_t sub_100003DCC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100003E0C()
{
  return sub_100003DCC(&qword_1000A0908, (uint64_t (*)(uint64_t))type metadata accessor for BDSCloudAssetType, (uint64_t)&unk_10007EF40);
}

uint64_t sub_100003E38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100003DCC(&qword_1000A0928, (uint64_t (*)(uint64_t))type metadata accessor for BDSLibraryContentAssetType, (uint64_t)&unk_10007F0C4);
  v3 = sub_100003DCC(&qword_1000A0930, (uint64_t (*)(uint64_t))type metadata accessor for BDSLibraryContentAssetType, (uint64_t)&unk_10007F064);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100003EBC(uint64_t a1, uint64_t a2)
{
  return sub_100003F54(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100003ED0()
{
  return sub_100003DCC(&qword_1000A0910, (uint64_t (*)(uint64_t))type metadata accessor for BDSLibraryContentAssetType, (uint64_t)&unk_10007F028);
}

uint64_t sub_100003EFC()
{
  return sub_100003DCC(&qword_1000A0918, (uint64_t (*)(uint64_t))type metadata accessor for BDSLibraryContentAssetType, (uint64_t)&unk_10007EFFC);
}

uint64_t sub_100003F28()
{
  return sub_100003DCC(&qword_1000A0920, (uint64_t (*)(uint64_t))type metadata accessor for BDSLibraryContentAssetType, (uint64_t)&unk_10007F098);
}

uint64_t sub_100003F54(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100003F90(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100003FD0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

__n128 initializeWithTake for NowPlayingInfo(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100004050(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100004070(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1000040AC(a1, &qword_1000A0948, (uint64_t)&unk_10009A128);
}

void sub_1000040AC(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for WidgetBookInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for SmallWidgetView(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 104));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 128));
}

uint64_t initializeWithCopy for SmallWidgetView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  v6 = *(void **)(a2 + 80);
  v7 = *(void **)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  v9 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v9;
  ((void (*)(void))swift_bridgeObjectRetain)();
  swift_bridgeObjectRetain(v5);
  v10 = v6;
  v11 = v7;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for SmallWidgetView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(void **)(a1 + 80);
  v11 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v11;
  v12 = v11;

  v13 = *(void **)(a2 + 88);
  v14 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v13;
  v15 = v13;

  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  return a1;
}

__n128 initializeWithTake for SmallWidgetViewModel(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for SmallWidgetView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v5 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);

  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);

  v7 = *(_QWORD *)(a2 + 104);
  v8 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v7;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  v9 = *(_QWORD *)(a2 + 128);
  v10 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v9;
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for SmallWidgetView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SmallWidgetView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SmallWidgetView()
{
  return &type metadata for SmallWidgetView;
}

uint64_t sub_1000044D8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100083918, 1);
}

uint64_t sub_1000044E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE v23[16];
  uint64_t v24;

  v4 = type metadata accessor for ContainerBackgroundPlacement(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100005F78(&qword_1000A0950);
  v9 = __chkstk_darwin(v8);
  v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *v11 = static Alignment.center.getter(v9);
  v11[1] = v12;
  v13 = sub_100005F78(&qword_1000A0958);
  v14 = sub_100004674(a2, a1, (uint64_t)v11 + *(int *)(v13 + 44));
  v15 = static ContainerBackgroundPlacement.widget.getter(v14);
  v24 = a2;
  v16 = static Alignment.center.getter(v15);
  v18 = v17;
  v19 = sub_100005F78(&qword_1000A0960);
  v20 = sub_100007F64(&qword_1000A0968, &qword_1000A0950, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v21 = sub_100006004();
  View.containerBackground<A>(for:alignment:content:)(v7, v16, v18, sub_100005FB8, v23, v8, v19, v20, v21);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  return sub_100007A0C((uint64_t)v11, &qword_1000A0950);
}

uint64_t sub_100004674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __n128 v61;
  __int128 v62;
  BOOL v63;
  char v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t KeyPath;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t OpaqueTypeConformance2;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  _QWORD v231[2];
  ValueMetadata *v232;
  unint64_t v233;
  _OWORD v234[13];
  __int128 v235;
  __int128 v236;
  _OWORD v237[9];
  __int128 v238;
  __int128 v239;
  _OWORD v240[9];
  char v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  _OWORD v251[2];
  __int128 v252;
  __int128 v253;
  __int128 v254;
  char v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __n128 v263;
  uint64_t v264;

  v210 = a2;
  v228 = a3;
  v226 = type metadata accessor for LogoView(0);
  v4 = __chkstk_darwin(v226);
  v229 = (char *)&v183 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v227 = (uint64_t)&v183 - v6;
  v189 = sub_100005F78(&qword_1000A09A8);
  v187 = *(_QWORD *)(v189 - 8);
  __chkstk_darwin(v189);
  v188 = (char *)&v183 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = sub_100005F78(&qword_1000A09B0);
  v191 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193);
  v192 = (char *)&v183 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v225 = sub_100005F78(&qword_1000A09B8);
  v9 = __chkstk_darwin(v225);
  v190 = (char *)&v183 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v215 = (uint64_t)&v183 - v11;
  v12 = type metadata accessor for AccessibilityTraits(0);
  v204 = *(_QWORD *)(v12 - 8);
  v205 = v12;
  __chkstk_darwin(v12);
  v203 = (char *)&v183 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = type metadata accessor for AccessibilityChildBehavior(0);
  v14 = *(_QWORD *)(v213 - 8);
  __chkstk_darwin(v213);
  v212 = (char *)&v183 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = type metadata accessor for SmallEmptyStateView(0);
  __chkstk_darwin(v214);
  v17 = (char *)&v183 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005F78(&qword_1000A09C0);
  v195 = *(_QWORD *)(v18 - 8);
  v196 = v18;
  __chkstk_darwin(v18);
  v194 = (char *)&v183 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100005F78(&qword_1000A09C8);
  v199 = *(_QWORD *)(v20 - 8);
  v200 = v20;
  __chkstk_darwin(v20);
  v197 = (char *)&v183 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100005F78(&qword_1000A09D0);
  v23 = __chkstk_darwin(v22);
  v198 = (char *)&v183 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v202 = (char *)&v183 - v26;
  v27 = __chkstk_darwin(v25);
  v201 = (char *)&v183 - v28;
  __chkstk_darwin(v27);
  v206 = (uint64_t)&v183 - v29;
  v220 = sub_100005F78(&qword_1000A09D8);
  __chkstk_darwin(v220);
  v224 = (uint64_t)&v183 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = sub_100005F78(&qword_1000A09E0);
  __chkstk_darwin(v217);
  v218 = (uint64_t)&v183 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v222 = sub_100005F78(&qword_1000A09E8);
  __chkstk_darwin(v222);
  v219 = (char *)&v183 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100005F78(&qword_1000A09F0);
  v34 = __chkstk_darwin(v33);
  v186 = (uint64_t)&v183 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v34);
  v38 = (char *)&v183 - v37;
  __chkstk_darwin(v36);
  v208 = (uint64_t)&v183 - v39;
  v40 = type metadata accessor for GeometryProxy(0);
  v41 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v43 = (char *)&v183 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = type metadata accessor for SmallReadingGoalView(0);
  __chkstk_darwin(v230);
  v45 = (char *)&v183 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = sub_100005F78(&qword_1000A09F8);
  v211 = *(_QWORD *)(v216 - 8);
  v46 = __chkstk_darwin(v216);
  v207 = (char *)&v183 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v209 = (char *)&v183 - v48;
  v49 = sub_100005F78(&qword_1000A0A00);
  v50 = __chkstk_darwin(v49);
  v223 = (uint64_t)&v183 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  v221 = (char *)&v183 - v52;
  v53 = *(_OWORD *)(a1 + 80);
  v54 = *(_OWORD *)(a1 + 112);
  v248 = *(_OWORD *)(a1 + 96);
  v249 = v54;
  v55 = *(_OWORD *)(a1 + 16);
  v56 = *(_OWORD *)(a1 + 48);
  v244 = *(_OWORD *)(a1 + 32);
  v245 = v56;
  v58 = *(_OWORD *)(a1 + 48);
  v57 = *(_OWORD *)(a1 + 64);
  v59 = v57;
  v247 = *(_OWORD *)(a1 + 80);
  v246 = v57;
  v60 = *(_OWORD *)(a1 + 16);
  v242 = *(_OWORD *)a1;
  v243 = v60;
  v61 = *(__n128 *)(a1 + 112);
  v262 = v248;
  v263 = v61;
  v258 = v244;
  v259 = v58;
  v260 = v59;
  v261 = v53;
  v61.n128_u64[0] = v242;
  v250 = *(_QWORD *)(a1 + 128);
  v264 = *(_QWORD *)(a1 + 128);
  v256 = v242;
  v257 = v55;
  if (*(double *)&v242 > 0.0 || *((uint64_t *)&v243 + 1) >= 1)
  {
    v215 = v22;
    v184 = v41;
    v185 = v40;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v41 + 16))(v43, v210, v40, v61);
    KeyPath = swift_getKeyPath(&unk_10007F228);
    v85 = v246;
    *(_OWORD *)(v45 + 120) = v247;
    v86 = v249;
    *(_OWORD *)(v45 + 136) = v248;
    *(_OWORD *)(v45 + 152) = v86;
    v87 = v242;
    *(_OWORD *)(v45 + 56) = v243;
    v88 = v245;
    *(_OWORD *)(v45 + 72) = v244;
    *(_OWORD *)(v45 + 88) = v88;
    *(_OWORD *)(v45 + 104) = v85;
    v45[32] = 0;
    *(_QWORD *)v45 = KeyPath;
    *((_QWORD *)v45 + 1) = 0;
    *((_QWORD *)v45 + 2) = 0;
    *((_QWORD *)v45 + 3) = 0;
    *((_QWORD *)v45 + 21) = v250;
    *(_OWORD *)(v45 + 40) = v87;
    v89 = v230;
    v90 = &v45[*(int *)(v230 + 24)];
    v91 = enum case for BlendMode.plusLighter(_:);
    v92 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 104))(v90, v91, v92);
    v93 = (int *)type metadata accessor for SmallReadingGoalView.ViewConfiguration(0);
    *(_QWORD *)&v90[v93[5]] = 2;
    *(_QWORD *)&v90[v93[6]] = 0x4010000000000000;
    *(_QWORD *)&v90[v93[7]] = 0x4040000000000000;
    *(_QWORD *)&v90[v93[8]] = 0x4044000000000000;
    *(_QWORD *)&v90[v93[9]] = 0x4028000000000000;
    v94 = &v90[v93[10]];
    v95 = sub_100005F78(&qword_1000A0A50);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v94, 1, 1, v95);
    v96 = v93[11];
    v97 = sub_100007918((_QWORD *)a1);
    *(_QWORD *)&v90[v96] = static Font.caption2.getter(v97);
    v98 = v93[12];
    *(_QWORD *)&v90[v98] = static Color.white.getter();
    v99 = v93[13];
    v100 = static Color.white.getter();
    v101 = Color.opacity(_:)(0.2);
    swift_release(v100);
    *(_QWORD *)&v90[v99] = v101;
    *(_QWORD *)&v90[v93[14]] = 0x4008000000000000;
    *(_QWORD *)&v90[v93[15]] = 0x4028000000000000;
    *(_QWORD *)&v90[v93[16]] = 0x404E000000000000;
    *(_QWORD *)&v90[v93[17]] = 0x4036000000000000;
    (*(void (**)(char *, char *, uint64_t))(v184 + 32))(&v45[*(int *)(v89 + 28)], v43, v185);
    v237[0] = v246;
    v237[1] = v247;
    v237[2] = v248;
    LOBYTE(v237[3]) = v249;
    v235 = v244;
    v236 = v245;
    if (v246 == __PAIR128__(0x800000010007BBB0, 0xD000000000000023)
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v246, *((_QWORD *)&v246 + 1), 0xD000000000000023, 0x800000010007BBB0, 0) & 1) != 0)
    {
      sub_100007918(&v242);
      v102 = v208;
      sub_100006788(v208);
      sub_100007494(a1);
    }
    else
    {
      v102 = v208;
      sub_100006104((uint64_t)&v235, v208);
    }
    v107 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 56))(v102, 0, 1, v107);
    v108 = sub_100003DCC(&qword_1000A0A20, type metadata accessor for SmallReadingGoalView, (uint64_t)&unk_10007FFB8);
    v109 = v207;
    v110 = v230;
    View.widgetURL(_:)(v102, v230, v108);
    sub_100007A0C(v102, &qword_1000A09F0);
    sub_100007A48((uint64_t)v45, type metadata accessor for SmallReadingGoalView);
    v111 = v211;
    v112 = v209;
    v113 = v109;
    v114 = v107;
    v115 = v216;
    (*(void (**)(char *, char *, uint64_t))(v211 + 32))(v209, v113, v216);
    v116 = v218;
    (*(void (**)(uint64_t, char *, uint64_t))(v111 + 16))(v218, v112, v115);
    swift_storeEnumTagMultiPayload(v116, v217, 0);
    *(_QWORD *)&v234[0] = v110;
    *((_QWORD *)&v234[0] + 1) = v108;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v234, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v118 = sub_1000076D4();
    v119 = (uint64_t)v219;
    _ConditionalContent<>.init(storage:)(v116, v115, v215, OpaqueTypeConformance2, v118);
    v120 = v224;
    sub_1000079C8(v119, v224, &qword_1000A09E8);
    swift_storeEnumTagMultiPayload(v120, v220, 0);
    v121 = sub_10000762C();
    v122 = sub_1000077C4();
    v123 = (uint64_t)v221;
    _ConditionalContent<>.init(storage:)(v120, v222, v225, v121, v122);
    sub_100007A0C(v119, &qword_1000A09E8);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v112, v115);
  }
  else
  {
    v211 = v14;
    v252 = v246;
    v253 = v247;
    v254 = v248;
    v255 = v249;
    v251[0] = v244;
    v251[1] = v245;
    v62 = v246;
    v63 = (_QWORD)v246 == 0xD000000000000023 && *((_QWORD *)&v246 + 1) == 0x800000010007BBB0;
    v64 = v63;
    if (v63
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v252, *((_QWORD *)&v252 + 1), 0xD000000000000023, 0x800000010007BBB0, 0) & 1) != 0)
    {
      v208 = v62;
      v209 = "4B73BA2B2A3F9C12BundleFinder";
      v210 = *((_QWORD *)&v62 + 1);
      v215 = v22;
      v65 = swift_getKeyPath(&unk_10007F228);
      v66 = v246;
      *(_OWORD *)(v17 + 120) = v247;
      v67 = v249;
      *(_OWORD *)(v17 + 136) = v248;
      *(_OWORD *)(v17 + 152) = v67;
      v68 = v242;
      *(_OWORD *)(v17 + 56) = v243;
      v69 = v245;
      *(_OWORD *)(v17 + 72) = v244;
      *(_OWORD *)(v17 + 88) = v69;
      *(_OWORD *)(v17 + 104) = v66;
      v17[32] = 0;
      *(_QWORD *)v17 = v65;
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = 0;
      *((_QWORD *)v17 + 3) = 0;
      *((_QWORD *)v17 + 21) = v250;
      *(_OWORD *)(v17 + 40) = v68;
      v70 = &v17[*(int *)(v214 + 24)];
      v71 = enum case for ColorScheme.dark(_:);
      v72 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 104))(v70, v71, v72);
      v73 = (int *)type metadata accessor for SmallEmptyStateView.ViewConfiguration(0);
      v74 = &v70[v73[5]];
      v75 = enum case for BlendMode.plusLighter(_:);
      v76 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 104))(v74, v75, v76);
      *(_QWORD *)&v70[v73[6]] = 0x3FF0000000000000;
      v77 = v73[7];
      v78 = sub_100007918((_QWORD *)a1);
      *(_QWORD *)&v70[v77] = static Font.footnote.getter(v78);
      v79 = v73[8];
      *(double *)&v70[v79] = static Font.Weight.semibold.getter();
      v80 = v73[9];
      *(_DWORD *)&v70[v80] = static HierarchicalShapeStyle.tertiary.getter();
      v81 = v73[10];
      v82 = static Color.white.getter();
      v83 = Color.opacity(_:)(0.2);
      swift_release(v82);
      *(_QWORD *)&v70[v81] = v83;
      *(_QWORD *)&v70[v73[11]] = 0x4018000000000000;
      *(_QWORD *)&v70[v73[12]] = 0x4014000000000000;
      if ((v64 & 1) != 0
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v208, v210, 0xD000000000000023, (unint64_t)v209 | 0x8000000000000000, 0) & 1) != 0)
      {
        sub_100007918(&v242);
        sub_100006788((uint64_t)v38);
        sub_100007494(a1);
      }
      else
      {
        sub_100006104((uint64_t)v251, (uint64_t)v38);
      }
      v114 = type metadata accessor for URL(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 56))(v38, 0, 1, v114);
      v124 = sub_100003DCC(&qword_1000A0A30, type metadata accessor for SmallEmptyStateView, (uint64_t)&unk_10007FBC8);
      v125 = v194;
      v126 = v214;
      View.widgetURL(_:)(v38, v214, v124);
      sub_100007A0C((uint64_t)v38, &qword_1000A09F0);
      v127 = sub_100007A48((uint64_t)v17, type metadata accessor for SmallEmptyStateView);
      v128 = v212;
      static AccessibilityChildBehavior.combine.getter(v127);
      *(_QWORD *)&v235 = v126;
      *((_QWORD *)&v235 + 1) = v124;
      v129 = swift_getOpaqueTypeConformance2(&v235, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
      v130 = v196;
      v131 = v197;
      View.accessibilityElement(children:)(v128, v196, v129);
      (*(void (**)(char *, uint64_t))(v211 + 8))(v128, v213);
      (*(void (**)(char *, uint64_t))(v195 + 8))(v125, v130);
      v132 = sub_100007A84();
      v134 = v133;
      *(_QWORD *)&v235 = v132;
      *((_QWORD *)&v235 + 1) = v133;
      *(_QWORD *)&v234[0] = v130;
      *((_QWORD *)&v234[0] + 1) = v129;
      v135 = swift_getOpaqueTypeConformance2(v234, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
      v136 = sub_1000075E8();
      v137 = (uint64_t)v198;
      v138 = v200;
      View.accessibilityLabel<A>(_:)(&v235, v200, &type metadata for String, v135, v136);
      swift_bridgeObjectRelease(v134);
      v139 = (*(uint64_t (**)(char *, uint64_t))(v199 + 8))(v131, v138);
      v140 = v203;
      static AccessibilityTraits.isButton.getter(v139);
      v141 = (uint64_t)v202;
      v142 = v215;
      ModifiedContent<>.accessibilityAddTraits(_:)(v140, v215);
      (*(void (**)(char *, uint64_t))(v204 + 8))(v140, v205);
      sub_100007A0C(v137, &qword_1000A09D0);
      v143 = sub_100007C50();
      v144 = (uint64_t)v201;
      ModifiedContent<>.accessibilityInputLabels<A>(_:)(v143, v142, &type metadata for String, v136);
      swift_bridgeObjectRelease(v143);
      sub_100007A0C(v141, &qword_1000A09D0);
      v145 = v206;
      sub_100007984(v144, v206, &qword_1000A09D0);
      v146 = v218;
      sub_1000079C8(v145, v218, &qword_1000A09D0);
      swift_storeEnumTagMultiPayload(v146, v217, 1);
      v147 = sub_100003DCC(&qword_1000A0A20, type metadata accessor for SmallReadingGoalView, (uint64_t)&unk_10007FFB8);
      *(_QWORD *)&v235 = v230;
      *((_QWORD *)&v235 + 1) = v147;
      v148 = swift_getOpaqueTypeConformance2(&v235, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
      v149 = sub_1000076D4();
      v150 = (uint64_t)v219;
      _ConditionalContent<>.init(storage:)(v146, v216, v142, v148, v149);
      v151 = v224;
      sub_1000079C8(v150, v224, &qword_1000A09E8);
      swift_storeEnumTagMultiPayload(v151, v220, 0);
      v152 = sub_10000762C();
      v153 = sub_1000077C4();
      v123 = (uint64_t)v221;
      _ConditionalContent<>.init(storage:)(v151, v222, v225, v152, v153);
      sub_100007A0C(v150, &qword_1000A09E8);
      v154 = v145;
      v155 = &qword_1000A09D0;
    }
    else
    {
      v103 = swift_getKeyPath(&unk_10007F228);
      v104 = sub_100007918((_QWORD *)a1);
      v105 = static Font.caption2.getter(v104);
      *(_OWORD *)((char *)&v240[6] + 7) = v262;
      *(_OWORD *)((char *)&v240[5] + 7) = v261;
      *(_OWORD *)((char *)&v240[2] + 7) = v258;
      *(_OWORD *)((char *)&v240[1] + 7) = v257;
      *(__n128 *)((char *)&v240[7] + 7) = v263;
      *(_OWORD *)((char *)&v240[3] + 7) = v259;
      *(_OWORD *)((char *)&v240[4] + 7) = v260;
      *(_OWORD *)((char *)v240 + 7) = v256;
      *(_OWORD *)((char *)&v237[5] + 1) = v240[5];
      *(_OWORD *)((char *)&v237[6] + 1) = v240[6];
      *(_OWORD *)((char *)&v237[7] + 1) = v240[7];
      *(_OWORD *)((char *)&v237[1] + 1) = v240[1];
      *(_OWORD *)((char *)&v237[2] + 1) = v240[2];
      *(_OWORD *)((char *)&v237[3] + 1) = v240[3];
      v241 = 0;
      *(_QWORD *)((char *)&v240[8] + 7) = v264;
      v235 = (unint64_t)v103;
      v236 = 0uLL;
      LOBYTE(v237[0]) = 0;
      *(_OWORD *)((char *)&v237[4] + 1) = v240[4];
      *(_OWORD *)((char *)v237 + 1) = v240[0];
      v237[8] = *(_OWORD *)((char *)&v240[7] + 15);
      v238 = xmmword_10007F160;
      *(_QWORD *)&v239 = v105;
      *((_QWORD *)&v239 + 1) = 0x4036000000000000;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v62, *((_QWORD *)&v62 + 1), 0xD000000000000023, 0x800000010007BBB0, 0) & 1) != 0)
      {
        sub_100007918(&v242);
        v106 = v186;
        sub_100006788(v186);
        sub_100007494(a1);
      }
      else
      {
        v106 = v186;
        sub_100006104((uint64_t)v251, v186);
      }
      v123 = (uint64_t)v221;
      v114 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 56))(v106, 0, 1, v114);
      v156 = sub_100007504();
      v157 = v188;
      View.widgetURL(_:)(v106, &type metadata for SmallBookProgressView, v156);
      sub_100007A0C(v106, &qword_1000A09F0);
      v234[10] = v237[8];
      v234[11] = v238;
      v234[12] = v239;
      v234[6] = v237[4];
      v234[7] = v237[5];
      v234[8] = v237[6];
      v234[9] = v237[7];
      v234[2] = v237[0];
      v234[3] = v237[1];
      v234[4] = v237[2];
      v234[5] = v237[3];
      v234[0] = v235;
      v234[1] = v236;
      v158 = sub_100007548((uint64_t)v234);
      v159 = v212;
      static AccessibilityChildBehavior.combine.getter(v158);
      v232 = &type metadata for SmallBookProgressView;
      v233 = v156;
      v160 = swift_getOpaqueTypeConformance2(&v232, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
      v161 = v192;
      v162 = v189;
      View.accessibilityElement(children:)(v159, v189, v160);
      (*(void (**)(char *, uint64_t))(v211 + 8))(v159, v213);
      (*(void (**)(char *, uint64_t))(v187 + 8))(v157, v162);
      v163 = sub_100051294(0);
      v165 = v164;
      v232 = (ValueMetadata *)v163;
      v233 = v164;
      v231[0] = v162;
      v231[1] = v160;
      v166 = swift_getOpaqueTypeConformance2(v231, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
      v167 = sub_1000075E8();
      v168 = v190;
      v169 = v193;
      View.accessibilityLabel<A>(_:)(&v232, v193, &type metadata for String, v166, v167);
      swift_bridgeObjectRelease(v165);
      (*(void (**)(char *, uint64_t))(v191 + 8))(v161, v169);
      v170 = (uint64_t)v168;
      v171 = v215;
      sub_100007984(v170, v215, &qword_1000A09B8);
      v172 = v224;
      sub_1000079C8(v171, v224, &qword_1000A09B8);
      swift_storeEnumTagMultiPayload(v172, v220, 1);
      v173 = sub_10000762C();
      v174 = sub_1000077C4();
      _ConditionalContent<>.init(storage:)(v172, v222, v225, v173, v174);
      v154 = v171;
      v155 = &qword_1000A09B8;
    }
    sub_100007A0C(v154, v155);
  }
  v175 = swift_getKeyPath(&unk_10007F228);
  v176 = (uint64_t)v229;
  *((_QWORD *)v229 + 2) = 0;
  *(_QWORD *)(v176 + 24) = 0;
  *(_BYTE *)(v176 + 32) = 0;
  *(_QWORD *)v176 = v175;
  *(_QWORD *)(v176 + 8) = 0;
  v177 = v176 + *(int *)(v226 + 20);
  type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 56))(v177, 1, 1, v114);
  v178 = v227;
  sub_100007890(v176, v227);
  v179 = v223;
  sub_1000079C8(v123, v223, &qword_1000A0A00);
  sub_1000078D4(v178, v176, type metadata accessor for LogoView);
  v180 = v228;
  sub_1000079C8(v179, v228, &qword_1000A0A00);
  v181 = sub_100005F78(&qword_1000A0A48);
  sub_1000078D4(v176, v180 + *(int *)(v181 + 48), type metadata accessor for LogoView);
  sub_100007A48(v178, type metadata accessor for LogoView);
  sub_100007A0C(v123, &qword_1000A0A00);
  sub_100007A48(v176, type metadata accessor for LogoView);
  return sub_100007A0C(v179, &qword_1000A0A00);
}

uint64_t sub_1000059FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[2];
  _OWORD v43[3];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;

  v34 = a2;
  v32 = sub_100005F78(&qword_1000A0990);
  __chkstk_darwin(v32);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100005F78(&qword_1000A0998);
  __chkstk_darwin(v31);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100005F78(&qword_1000A0980);
  __chkstk_darwin(v33);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BackgroundView(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(_OWORD *)(a1 + 112);
  v41 = *(_OWORD *)(a1 + 96);
  v42[0] = v12;
  *(_QWORD *)&v42[1] = *(_QWORD *)(a1 + 128);
  v13 = *(_OWORD *)(a1 + 48);
  v37 = *(_OWORD *)(a1 + 32);
  v38 = v13;
  v14 = *(_OWORD *)(a1 + 80);
  v39 = *(_OWORD *)(a1 + 64);
  v40 = v14;
  v15 = *(_OWORD *)(a1 + 16);
  v35 = *(_OWORD *)a1;
  v36 = v15;
  v44 = v39;
  v45 = v14;
  v46 = v41;
  v43[1] = v37;
  v43[2] = v13;
  v47 = v12;
  if ((sub_100013C4C() & 1) != 0)
  {
    v43[0] = *(_OWORD *)((char *)v42 + 8);
    v16 = *(_QWORD *)&v42[1];
    if (*(_QWORD *)&v42[1])
    {
      v17 = *(_QWORD *)&v43[0];
      if (__PAIR128__(*(unint64_t *)&v42[1], *(unint64_t *)&v43[0]) == v44
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v44, *((_QWORD *)&v44 + 1), *(_QWORD *)&v43[0], *((_QWORD *)&v43[0] + 1), 0) & 1) != 0)
      {
        sub_100007918((_QWORD *)a1);
        sub_100007444((uint64_t)v43);
        if (qword_1000A0628 != -1)
          swift_once(&qword_1000A0628, sub_100013F18);
        sub_100006C68(qword_1000AA270, qword_1000AA288);
        v18 = sub_10003C8E4(v17, v16, 1);
        sub_10000746C((uint64_t)v43);
        sub_100007494(a1);
        *v11 = swift_getKeyPath(&unk_10007F1F8);
        v19 = sub_100005F78(&qword_1000A09A0);
        swift_storeEnumTagMultiPayload(v11, v19, 0);
        *(_QWORD *)((char *)v11 + *(int *)(v9 + 20)) = v18;
        sub_1000078D4((uint64_t)v11, (uint64_t)v6, type metadata accessor for BackgroundView);
        v20 = v6;
        v21 = v31;
        v22 = 0;
LABEL_13:
        swift_storeEnumTagMultiPayload(v20, v21, v22);
        v28 = sub_100003DCC(&qword_1000A0988, type metadata accessor for BackgroundView, (uint64_t)&unk_100082DF0);
        _ConditionalContent<>.init(storage:)(v6, v9, v9, v28, v28);
        sub_1000079C8((uint64_t)v8, (uint64_t)v4, &qword_1000A0980);
        swift_storeEnumTagMultiPayload(v4, v32, 0);
        v29 = sub_100006088();
        _ConditionalContent<>.init(storage:)(v4, v33, v9, v29, v28);
        sub_100007A0C((uint64_t)v8, &qword_1000A0980);
        return sub_100007A48((uint64_t)v11, type metadata accessor for BackgroundView);
      }
    }
  }
  if ((sub_100013C4C() & 1) == 0)
  {
    if (qword_1000A0628 != -1)
      swift_once(&qword_1000A0628, sub_100013F18);
    sub_100006C68(qword_1000AA270, qword_1000AA288);
    v26 = sub_10003C8E4(v44, *((unint64_t *)&v44 + 1), 1);
    *v11 = swift_getKeyPath(&unk_10007F1F8);
    v27 = sub_100005F78(&qword_1000A09A0);
    swift_storeEnumTagMultiPayload(v11, v27, 0);
    *(_QWORD *)((char *)v11 + *(int *)(v9 + 20)) = v26;
    sub_1000078D4((uint64_t)v11, (uint64_t)v6, type metadata accessor for BackgroundView);
    v20 = v6;
    v21 = v31;
    v22 = 1;
    goto LABEL_13;
  }
  *v11 = swift_getKeyPath(&unk_10007F1F8);
  v23 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v11, v23, 0);
  *(_QWORD *)((char *)v11 + *(int *)(v9 + 20)) = 0;
  sub_1000078D4((uint64_t)v11, (uint64_t)v4, type metadata accessor for BackgroundView);
  swift_storeEnumTagMultiPayload(v4, v32, 1);
  v24 = sub_100006088();
  v25 = sub_100003DCC(&qword_1000A0988, type metadata accessor for BackgroundView, (uint64_t)&unk_100082DF0);
  _ConditionalContent<>.init(storage:)(v4, v33, v9, v24, v25);
  return sub_100007A48((uint64_t)v11, type metadata accessor for BackgroundView);
}

uint64_t sub_100005E70()
{
  return static View._viewListCount(inputs:)();
}

_QWORD *sub_100005E88@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[8];
  uint64_t v14;

  v3 = *(_OWORD *)(v1 + 112);
  v13[6] = *(_OWORD *)(v1 + 96);
  v13[7] = v3;
  v14 = *(_QWORD *)(v1 + 128);
  v4 = *(_OWORD *)(v1 + 48);
  v13[2] = *(_OWORD *)(v1 + 32);
  v13[3] = v4;
  v5 = *(_OWORD *)(v1 + 80);
  v13[4] = *(_OWORD *)(v1 + 64);
  v13[5] = v5;
  v6 = *(_OWORD *)(v1 + 16);
  v13[0] = *(_OWORD *)v1;
  v13[1] = v6;
  v7 = swift_allocObject(&unk_10009A280, 152, 7);
  v8 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(v7 + 112) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v7 + 128) = v8;
  *(_QWORD *)(v7 + 144) = *(_QWORD *)(v1 + 128);
  v9 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v7 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v7 + 64) = v9;
  v10 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v7 + 96) = v10;
  v11 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v7 + 32) = v11;
  *a1 = sub_100005F70;
  a1[1] = (uint64_t (*)(uint64_t))v7;
  return sub_100007918(v13);
}

uint64_t sub_100005F24()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  return swift_deallocObject(v0, 152, 7);
}

uint64_t sub_100005F70(uint64_t a1)
{
  uint64_t v1;

  return sub_1000044E8(a1, v1 + 16);
}

uint64_t sub_100005F78(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100005FB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000059FC(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100005FC0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100006004()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A0970;
  if (!qword_1000A0970)
  {
    v1 = sub_100005FC0(&qword_1000A0960);
    sub_100006088();
    sub_100003DCC(&qword_1000A0988, type metadata accessor for BackgroundView, (uint64_t)&unk_100082DF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A0970);
  }
  return result;
}

unint64_t sub_100006088()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A0978;
  if (!qword_1000A0978)
  {
    v1 = sub_100005FC0(&qword_1000A0980);
    sub_100003DCC(&qword_1000A0988, type metadata accessor for BackgroundView, (uint64_t)&unk_100082DF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A0978);
  }
  return result;
}

uint64_t sub_100006104@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  void *object;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  unint64_t v21;
  unint64_t v22;

  v4 = sub_100005F78(&qword_1000A09F0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v21 - v8;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(a1 + 40);
  if (v10 == 0xD000000000000023 && v11 == (void *)0x800000010007BBB0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0xD000000000000023, 0x800000010007BBB0, 0) & 1) != 0)
  {
    return sub_100006788(a2);
  }
  v21 = 0;
  v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease(v22);
  v21 = 0xD000000000000020;
  v22 = 0x800000010007BD30;
  v13._countAndFlagsBits = v10;
  v13._object = v11;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 63;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = sub_100006C8C();
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17 = v22;
  URL.init(string:)(v21, v22);
  swift_bridgeObjectRelease(v17);
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v20(v9, 1, v18) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a2, v9, v18);
  URL.init(string:)(0xD000000000000023, 0x800000010007BCE0);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v20)(v7, 1, v18);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(a2, v7, v18);
    return sub_100007A0C((uint64_t)v9, &qword_1000A09F0);
  }
  return result;
}

uint64_t sub_100006330@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  void *object;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  unint64_t v21;
  unint64_t v22;

  v4 = sub_100005F78(&qword_1000A09F0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v21 - v8;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(a1 + 40);
  if (v10 == 0xD000000000000023 && v11 == (void *)0x800000010007BBB0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0xD000000000000023, 0x800000010007BBB0, 0) & 1) != 0)
  {
    return sub_100006928(a2);
  }
  v21 = 0;
  v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease(v22);
  v21 = 0xD000000000000020;
  v22 = 0x800000010007BD30;
  v13._countAndFlagsBits = v10;
  v13._object = v11;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 63;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = sub_100006EC4();
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17 = v22;
  URL.init(string:)(v21, v22);
  swift_bridgeObjectRelease(v17);
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v20(v9, 1, v18) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a2, v9, v18);
  URL.init(string:)(0xD000000000000023, 0x800000010007BCE0);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v20)(v7, 1, v18);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(a2, v7, v18);
    return sub_100007A0C((uint64_t)v9, &qword_1000A09F0);
  }
  return result;
}

uint64_t sub_10000655C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  void *object;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  unint64_t v21;
  unint64_t v22;

  v4 = sub_100005F78(&qword_1000A09F0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v21 - v8;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(a1 + 40);
  if (v10 == 0xD000000000000023 && v11 == (void *)0x800000010007BBB0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0xD000000000000023, 0x800000010007BBB0, 0) & 1) != 0)
  {
    return sub_100006AC8(a2);
  }
  v21 = 0;
  v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease(v22);
  v21 = 0xD000000000000020;
  v22 = 0x800000010007BD30;
  v13._countAndFlagsBits = v10;
  v13._object = v11;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 63;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = sub_10000710C();
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17 = v22;
  URL.init(string:)(v21, v22);
  swift_bridgeObjectRelease(v17);
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v20(v9, 1, v18) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a2, v9, v18);
  URL.init(string:)(0xD000000000000023, 0x800000010007BCE0);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v20)(v7, 1, v18);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(a2, v7, v18);
    return sub_100007A0C((uint64_t)v9, &qword_1000A09F0);
  }
  return result;
}

uint64_t sub_100006788@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  void *object;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t result;
  unint64_t v14;
  unint64_t v15;

  sub_100005F78(&qword_1000A09F0);
  v2 = ((uint64_t (*)(void))__chkstk_darwin)();
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v14 - v5;
  v14 = 0;
  v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease(v15);
  v14 = 0xD000000000000024;
  v15 = 0x800000010007BCB0;
  v7._countAndFlagsBits = sub_100006C8C();
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9 = v15;
  URL.init(string:)(v14, v15);
  swift_bridgeObjectRelease(v9);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v6, 1, v10) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v6, v10);
  URL.init(string:)(0xD000000000000023, 0x800000010007BCE0);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v12)(v4, 1, v10);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v4, v10);
    return sub_100007A0C((uint64_t)v6, &qword_1000A09F0);
  }
  return result;
}

uint64_t sub_100006928@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  void *object;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t result;
  unint64_t v15;
  unint64_t v16;

  v2 = sub_100005F78(&qword_1000A09F0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v15 - v6;
  v15 = 0;
  v16 = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease(v16);
  v15 = 0xD000000000000024;
  v16 = 0x800000010007BCB0;
  v8._countAndFlagsBits = sub_100006EC4();
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10 = v16;
  URL.init(string:)(v15, v16);
  swift_bridgeObjectRelease(v10);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v7, 1, v11) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a1, v7, v11);
  URL.init(string:)(0xD000000000000023, 0x800000010007BCE0);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v13)(v5, 1, v11);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a1, v5, v11);
    return sub_100007A0C((uint64_t)v7, &qword_1000A09F0);
  }
  return result;
}

uint64_t sub_100006AC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  void *object;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t result;
  unint64_t v15;
  unint64_t v16;

  v2 = sub_100005F78(&qword_1000A09F0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v15 - v6;
  v15 = 0;
  v16 = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease(v16);
  v15 = 0xD000000000000024;
  v16 = 0x800000010007BCB0;
  v8._countAndFlagsBits = sub_10000710C();
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10 = v16;
  URL.init(string:)(v15, v16);
  swift_bridgeObjectRelease(v10);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v7, 1, v11) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a1, v7, v11);
  URL.init(string:)(0xD000000000000023, 0x800000010007BCE0);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v13)(v5, 1, v11);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a1, v5, v11);
    return sub_100007A0C((uint64_t)v7, &qword_1000A09F0);
  }
  return result;
}

_QWORD *sub_100006C68(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100006C8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  _QWORD v24[2];

  v1 = v0;
  v2 = type metadata accessor for WidgetFamily(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for WidgetFamily.systemSmall(_:), v2);
  v6 = sub_100003DCC((unint64_t *)&qword_1000A0A60, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v7 = dispatch thunk of CustomStringConvertible.description.getter(v2, v6);
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (qword_1000A0620 != -1)
    swift_once(&qword_1000A0620, sub_100009680);
  v10 = qword_1000AA260;
  v11 = *(void **)algn_1000AA268;
  v12 = *(_QWORD *)(v1 + 64);
  v13 = *(_QWORD *)(v1 + 72);
  if (v12 == 0xD000000000000023 && v13 == 0x800000010007BBB0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, 0xD000000000000023, 0x800000010007BBB0, 0) & 1) != 0)
  {
    v14 = 48;
  }
  else
  {
    v14 = 49;
  }
  v24[0] = 0;
  v24[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(61);
  v15._countAndFlagsBits = 0x6146746567646977;
  v15._object = (void *)0xED00003D796C696DLL;
  String.append(_:)(v15);
  v16._countAndFlagsBits = v7;
  v16._object = v9;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v9);
  v17._countAndFlagsBits = 0x4B74656764697726;
  v17._object = (void *)0xEC0000003D646E69;
  String.append(_:)(v17);
  v18._countAndFlagsBits = v10;
  v18._object = v11;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x6573734173616826;
  v19._object = (void *)0xEB000000003D7374;
  String.append(_:)(v19);
  v20._countAndFlagsBits = v14;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(0xE100000000000000);
  v21._countAndFlagsBits = 0xD000000000000011;
  v21._object = (void *)0x800000010007BD10;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 48;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  return v24[0];
}

uint64_t sub_100006EC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  _QWORD v25[2];

  v1 = v0;
  v2 = type metadata accessor for WidgetFamily(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for WidgetFamily.systemLarge(_:), v2);
  v6 = sub_100003DCC((unint64_t *)&qword_1000A0A60, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v7 = dispatch thunk of CustomStringConvertible.description.getter(v2, v6);
  v9 = v8;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (qword_1000A0620 != -1)
    result = swift_once(&qword_1000A0620, sub_100009680);
  v11 = *(_QWORD **)(v1 + 48);
  if (v11[2])
  {
    v12 = qword_1000AA260;
    v13 = *(void **)algn_1000AA268;
    v14 = v11[8];
    v15 = v11[9];
    if (v14 == 0xD000000000000023 && v15 == 0x800000010007BBB0
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, 0xD000000000000023, 0x800000010007BBB0, 0) & 1) != 0)
    {
      v16 = 48;
    }
    else
    {
      v16 = 49;
    }
    v25[0] = 0;
    v25[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v17._countAndFlagsBits = 0x6146746567646977;
    v17._object = (void *)0xED00003D796C696DLL;
    String.append(_:)(v17);
    v18._countAndFlagsBits = v7;
    v18._object = v9;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(v9);
    v19._countAndFlagsBits = 0x4B74656764697726;
    v19._object = (void *)0xEC0000003D646E69;
    String.append(_:)(v19);
    v20._countAndFlagsBits = v12;
    v20._object = v13;
    String.append(_:)(v20);
    v21._countAndFlagsBits = 0x6573734173616826;
    v21._object = (void *)0xEB000000003D7374;
    String.append(_:)(v21);
    v22._countAndFlagsBits = v16;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(0xE100000000000000);
    v23._countAndFlagsBits = 0xD000000000000011;
    v23._object = (void *)0x800000010007BD10;
    String.append(_:)(v23);
    v24._countAndFlagsBits = 49;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    return v25[0];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000710C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  _QWORD v26[2];

  v1 = v0;
  v2 = type metadata accessor for WidgetFamily(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for WidgetFamily.systemMedium(_:), v2);
  v6 = sub_100003DCC((unint64_t *)&qword_1000A0A60, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  v7 = dispatch thunk of CustomStringConvertible.description.getter(v2, v6);
  v9 = v8;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (qword_1000A0620 != -1)
    result = swift_once(&qword_1000A0620, sub_100009680);
  v11 = *(_QWORD **)(v1 + 32);
  if (v11[2])
  {
    v12 = qword_1000AA260;
    v13 = *(void **)algn_1000AA268;
    v14 = v11[8];
    v15 = v11[9];
    if (v14 == 0xD000000000000023 && v15 == 0x800000010007BBB0
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, 0xD000000000000023, 0x800000010007BBB0, 0) & 1) != 0)
    {
      v16 = 48;
      if ((sub_10005CB78() & 1) == 0)
        goto LABEL_11;
    }
    else
    {
      v16 = 49;
      if ((sub_10005CB78() & 1) == 0)
        goto LABEL_11;
    }
    if (*(uint64_t *)(v1 + 24) > 1)
    {
      v17 = 49;
      goto LABEL_13;
    }
LABEL_11:
    v17 = 48;
LABEL_13:
    v26[0] = 0;
    v26[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v18._countAndFlagsBits = 0x6146746567646977;
    v18._object = (void *)0xED00003D796C696DLL;
    String.append(_:)(v18);
    v19._countAndFlagsBits = v7;
    v19._object = v9;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v9);
    v20._countAndFlagsBits = 0x4B74656764697726;
    v20._object = (void *)0xEC0000003D646E69;
    String.append(_:)(v20);
    v21._countAndFlagsBits = v12;
    v21._object = v13;
    String.append(_:)(v21);
    v22._countAndFlagsBits = 0x6573734173616826;
    v22._object = (void *)0xEB000000003D7374;
    String.append(_:)(v22);
    v23._countAndFlagsBits = v16;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(0xE100000000000000);
    v24._countAndFlagsBits = 0xD000000000000011;
    v24._object = (void *)0x800000010007BD10;
    String.append(_:)(v24);
    v25._countAndFlagsBits = v17;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(0xE100000000000000);
    return v26[0];
  }
  __break(1u);
  return result;
}

uint64_t sub_100007384()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_1000073A4()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_1000073C4(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for WidgetRenderingMode(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.widgetRenderingMode.setter(v3);
}

uint64_t sub_100007444(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10000746C(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100007494(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(void **)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 128);

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

unint64_t sub_100007504()
{
  unint64_t result;

  result = qword_1000A0A08;
  if (!qword_1000A0A08)
  {
    result = swift_getWitnessTable(&unk_100081938, &type metadata for SmallBookProgressView);
    atomic_store(result, (unint64_t *)&qword_1000A0A08);
  }
  return result;
}

uint64_t sub_100007548(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(void **)(a1 + 120);
  v5 = *(void **)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 144);
  v7 = *(_QWORD *)(a1 + 168);
  v8 = *(_QWORD *)(a1 + 192);
  sub_1000075DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_release(v8);

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t sub_1000075DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) == 0)
    return swift_release();
  return result;
}

unint64_t sub_1000075E8()
{
  unint64_t result;

  result = qword_1000A0A10;
  if (!qword_1000A0A10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000A0A10);
  }
  return result;
}

unint64_t sub_10000762C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000A0A18;
  if (!qword_1000A0A18)
  {
    v1 = sub_100005FC0(&qword_1000A09E8);
    v2[0] = type metadata accessor for SmallReadingGoalView(255);
    v2[1] = sub_100003DCC(&qword_1000A0A20, type metadata accessor for SmallReadingGoalView, (uint64_t)&unk_10007FFB8);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    sub_1000076D4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A0A18);
  }
  return result;
}

unint64_t sub_1000076D4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;

  result = qword_1000A0A28;
  if (!qword_1000A0A28)
  {
    v1 = sub_100005FC0(&qword_1000A09D0);
    v2 = sub_100005FC0(&qword_1000A09C0);
    v4 = type metadata accessor for SmallEmptyStateView(255);
    v5 = sub_100003DCC(&qword_1000A0A30, type metadata accessor for SmallEmptyStateView, (uint64_t)&unk_10007FBC8);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100003DCC((unint64_t *)&qword_1000A0A38, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A0A28);
  }
  return result;
}

unint64_t sub_1000077C4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  ValueMetadata *v4;
  unint64_t v5;

  result = qword_1000A0A40;
  if (!qword_1000A0A40)
  {
    v1 = sub_100005FC0(&qword_1000A09B8);
    v2 = sub_100005FC0(&qword_1000A09A8);
    v4 = &type metadata for SmallBookProgressView;
    v5 = sub_100007504();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v4 = (ValueMetadata *)v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100003DCC((unint64_t *)&qword_1000A0A38, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A0A40);
  }
  return result;
}

uint64_t sub_100007890(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LogoView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000078D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

_QWORD *sub_100007918(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;

  v2 = a1[5];
  v3 = a1[9];
  v4 = (void *)a1[10];
  v5 = (void *)a1[11];
  v6 = a1[13];
  swift_bridgeObjectRetain(a1[16]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  v7 = v4;
  v8 = v5;
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t sub_100007984(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100005F78(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000079C8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100005F78(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100007A0C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100005F78(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100007A48(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100007A84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  uint64_t v18;
  _BYTE v20[16];

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v20[-v5];
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v20[-v12];
  v14 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000035, 0x800000010007BC40);
  static Locale.current.getter(v14);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v15);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v1 + 16))(v4, v6, v0);
  v18 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v17, v4, "Empty state when there are zero books", 37, 2);
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v6, v0);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  return v18;
}

uint64_t sub_100007C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjCClassFromMetadata;
  id v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  id v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v38 - v5;
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v39 = v7;
  v9 = v8;
  v41 = v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v38 - v13;
  v15 = sub_100005F78(&qword_1000A0A58);
  v16 = swift_allocObject(v15, 64, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10007F170;
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x800000010007BBE0);
  static Locale.current.getter(v17);
  v44 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v44(v12, v14, v7);
  v18 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v18);
  v43 = ObjCClassFromMetadata;
  v42 = (id)objc_opt_self(NSBundle);
  v20 = objc_msgSend(v42, "bundleForClass:", ObjCClassFromMetadata);
  v21 = v1;
  v40 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
  v22 = v4;
  v23 = v0;
  v38 = v0;
  v40(v4, v6, v0);
  v24 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v20, v4, "Accessibility input label string for the empty widget state.", 60, 2);
  v26 = v25;
  v27 = *(void (**)(char *, uint64_t))(v21 + 8);
  v27(v6, v23);
  v28 = *(void (**)(char *, uint64_t))(v41 + 8);
  v29 = v39;
  v28(v14, v39);
  *(_QWORD *)(v16 + 32) = v24;
  *(_QWORD *)(v16 + 40) = v26;
  v30 = String.LocalizationValue.init(stringLiteral:)(0x736B6F6F62206F4ELL, 0xE800000000000000);
  static Locale.current.getter(v30);
  v31 = v29;
  v44(v12, v14, v29);
  v32 = objc_msgSend(v42, "bundleForClass:", v43);
  v33 = v38;
  v40(v22, v6, v38);
  v34 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v32, v22, "Accessibility input label string for the empty widget state.", 60, 2);
  v36 = v35;
  v27(v6, v33);
  v28(v14, v31);
  *(_QWORD *)(v16 + 48) = v34;
  *(_QWORD *)(v16 + 56) = v36;
  return v16;
}

uint64_t sub_100007F38()
{
  return sub_100007F64(&qword_1000A0A68, &qword_1000A0A70, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

uint64_t sub_100007F64(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005FC0(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100007FA4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000C090(v0, qword_1000A0A78);
  sub_10000BE14(v0, (uint64_t)qword_1000A0A78);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x800000010007BDF0, 0x646957736B6F6F42, 0xEB00000000746567);
}

id sub_100008020@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[136];
  _QWORD v33[2];
  char v34;
  __int128 v35;
  __int128 v36;
  char v37;
  __int128 v38;

  v2 = type metadata accessor for WidgetFamily(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  TimelineProviderContext.family.getter(v4);
  v7 = (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 88))(v6, v2);
  if ((_DWORD)v7 != enum case for WidgetFamily.systemSmall(_:))
  {
    if ((_DWORD)v7 == enum case for WidgetFamily.systemMedium(_:))
    {
      Date.init()(v7);
      v10 = sub_100005F78(&qword_1000A0CF0);
      v11 = swift_allocObject(v10, 120, 7);
      *(_OWORD *)(v11 + 16) = xmmword_10007F260;
      v8 = (void *)BDSCloudAssetTypeStoreEbook;
      v9 = (void *)BDSLibraryContentAssetTypeUnknown;
      *(_QWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      *(_BYTE *)(v11 + 56) = 1;
      *(_QWORD *)(v11 + 64) = 0xD000000000000023;
      *(_QWORD *)(v11 + 72) = 0x800000010007BBB0;
      *(_QWORD *)(v11 + 80) = v8;
      *(_QWORD *)(v11 + 88) = v9;
      *(_QWORD *)(v11 + 96) = 0;
      *(_QWORD *)(v11 + 104) = 0;
      *(_BYTE *)(v11 + 112) = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      *(_QWORD *)&v21 = 0;
      *((_QWORD *)&v21 + 1) = v11;
      LOBYTE(v22) = 0;
      *((_QWORD *)&v22 + 1) = 0;
      v23 = 0;
      sub_10000C288((uint64_t)&v18);
      goto LABEL_5;
    }
    if ((_DWORD)v7 == enum case for WidgetFamily.systemLarge(_:))
    {
      Date.init()(v7);
      sub_1000441FC(v33);
      v18 = v33[0];
      v19 = v33[1];
      v20 = v34;
      v21 = v35;
      v22 = v36;
      LOBYTE(v23) = v37;
      v24 = v38;
      sub_10000C264((uint64_t)&v18);
      sub_10000B9DC((uint64_t)&v18, (uint64_t)v32);
      WidgetReadingHistory.Day.readingTime.getter(v32);
      v15 = type metadata accessor for WidgetEntry(0);
      return (id)sub_100007984((uint64_t)v32, a1 + *(int *)(v15 + 20), &qword_1000A0C30);
    }
    if (!&enum case for WidgetFamily.accessoryCorner(_:)
      || (_DWORD)v7 != enum case for WidgetFamily.accessoryCorner(_:))
    {
      Date.init()(v7);
      sub_10000C234((uint64_t)v32);
      v16 = type metadata accessor for WidgetEntry(0);
      sub_100007984((uint64_t)v32, a1 + *(int *)(v16 + 20), &qword_1000A0C30);
      return (id)(*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
    }
  }
  Date.init()(v7);
  v8 = (void *)BDSCloudAssetTypeStoreEbook;
  v9 = (void *)BDSLibraryContentAssetTypeUnknown;
  LOBYTE(v33[0]) = 0;
  v17[8] = 1;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0u;
  v22 = 0u;
  LOBYTE(v23) = 1;
  *(_QWORD *)&v24 = 0xD000000000000023;
  *((_QWORD *)&v24 + 1) = 0x800000010007BBB0;
  v25 = BDSCloudAssetTypeStoreEbook;
  v26 = BDSLibraryContentAssetTypeUnknown;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  sub_10000C2AC((uint64_t)&v18);
LABEL_5:
  sub_10000B9DC((uint64_t)&v18, (uint64_t)v32);
  WidgetReadingHistory.Day.readingTime.getter(v32);
  v12 = type metadata accessor for WidgetEntry(0);
  sub_100007984((uint64_t)v32, a1 + *(int *)(v12 + 20), &qword_1000A0C30);
  v13 = v8;
  return v9;
}

uint64_t sub_100008328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[24] = a5;
  v6[25] = a6;
  v6[23] = a4;
  v7 = type metadata accessor for WidgetEntry(0);
  v6[26] = v7;
  v6[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WidgetFamily(0);
  v6[28] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[29] = v9;
  v6[30] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000083B0, 0, 0);
}

uint64_t sub_1000083B0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t **v4;

  v1 = type metadata accessor for WidgetDataController();
  inited = swift_initStackObject(v1, v0 + 19);
  v0[31] = inited;
  *(_QWORD *)(inited + 16) = sub_100056C84();
  *(_QWORD *)(inited + 24) = objc_msgSend(objc_allocWithZone((Class)BDSReadingHistoryServiceClient), "init");
  sub_10003E210();
  TimelineProviderContext.family.getter(v3);
  v4 = (uint64_t **)swift_task_alloc(dword_1000A2CBC);
  v0[32] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = (uint64_t *)sub_100008464;
  return sub_100056DCC((uint64_t)(v0 + 2), v0[30]);
}

uint64_t sub_100008464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 232);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 240);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 224);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1000084D8, 0, 0);
}

uint64_t sub_1000084D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);

  v3 = *(_QWORD *)(v1 + 240);
  v2 = *(_QWORD *)(v1 + 248);
  v5 = *(_QWORD *)(v1 + 208);
  v4 = *(_QWORD *)(v1 + 216);
  v7 = *(void (**)(uint64_t))(v1 + 192);
  v6 = *(_QWORD *)(v1 + 200);
  Date.init()(a1);
  sub_100007984(v1 + 16, v4 + *(int *)(v5 + 20), &qword_1000A0C30);
  sub_10000BFB0((_QWORD *)(v1 + 16), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000C00C);
  swift_retain(v6);
  v7(v4);
  swift_release(v2);
  swift_release(v6);
  sub_10000BFB0((_QWORD *)(v1 + 16), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BAA8);
  sub_10000C054(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000085A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10000BF00(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_10009A380, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1000A0CC8, v16);
}

uint64_t sub_1000086E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6[24] = a5;
  v6[25] = a6;
  v6[23] = a4;
  v7 = type metadata accessor for TimelineReloadPolicy(0);
  v6[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005F78(&qword_1000A0CD0);
  v6[27] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[28] = v9;
  v6[29] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetEntry(0);
  v6[30] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[31] = v11;
  v6[32] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for WidgetFamily(0);
  v6[33] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[34] = v13;
  v6[35] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000087BC, 0, 0);
}

uint64_t sub_1000087BC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t **v4;

  v1 = type metadata accessor for WidgetDataController();
  inited = swift_initStackObject(v1, v0 + 19);
  v0[36] = inited;
  *(_QWORD *)(inited + 16) = sub_100056C84();
  *(_QWORD *)(inited + 24) = objc_msgSend(objc_allocWithZone((Class)BDSReadingHistoryServiceClient), "init");
  sub_10003E210();
  TimelineProviderContext.family.getter(v3);
  v4 = (uint64_t **)swift_task_alloc(dword_1000A2CBC);
  v0[37] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = (uint64_t *)sub_100008870;
  return sub_100056DCC((uint64_t)(v0 + 2), v0[35]);
}

uint64_t sub_100008870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 272);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 280);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 264);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 296));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1000088E4, 0, 0);
}

uint64_t sub_1000088E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(v1 + 248);
  v2 = *(_QWORD *)(v1 + 256);
  v4 = *(_QWORD *)(v1 + 232);
  v5 = *(_QWORD *)(v1 + 240);
  v16 = *(_QWORD *)(v1 + 288);
  v17 = *(_QWORD *)(v1 + 224);
  v6 = *(_QWORD *)(v1 + 208);
  v18 = *(_QWORD *)(v1 + 216);
  v19 = *(_QWORD *)(v1 + 280);
  v8 = *(void (**)(uint64_t))(v1 + 192);
  v7 = *(_QWORD *)(v1 + 200);
  Date.init()(a1);
  sub_100007984(v1 + 16, v2 + *(int *)(v5 + 20), &qword_1000A0C30);
  v9 = sub_100005F78(&qword_1000A0CD8);
  v10 = *(unsigned __int8 *)(v3 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v9, v11 + *(_QWORD *)(v3 + 72), v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_10007F260;
  sub_10000A134(v2, v12 + v11);
  v13 = sub_10000BFB0((_QWORD *)(v1 + 16), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000C00C);
  static TimelineReloadPolicy.never.getter(v13);
  v14 = sub_100003DCC(qword_1000A0C18, type metadata accessor for WidgetEntry, (uint64_t)&unk_10007F348);
  Timeline.init(entries:policy:)(v12, v6, v5, v14);
  swift_retain(v7);
  v8(v4);
  swift_release(v16);
  swift_release(v7);
  sub_10000BFB0((_QWORD *)(v1 + 16), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BAA8);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v4, v18);
  sub_10000C054(v2);
  swift_task_dealloc(v19);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100008A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t (**v19)();
  uint64_t v20;
  uint64_t v22;

  v6 = type metadata accessor for TimelineProviderContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005F78(&qword_1000A0CA8);
  __chkstk_darwin(v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject(&unk_10009A3A8, 32, 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v12, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v15 = *(unsigned __int8 *)(v7 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = (v8 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_10009A3D0, v17 + 16, v15 | 7);
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v18 + v16, v9, v6);
  v19 = (uint64_t (**)())(v18 + v17);
  *v19 = sub_10000C0D0;
  v19[1] = (uint64_t (*)())v13;
  swift_retain(a3);
  v20 = sub_1000085A0((uint64_t)v12, (uint64_t)&unk_1000A0CE8, v18);
  return swift_release(v20);
}

uint64_t sub_100008BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100008C64;
  return TimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_100008C64()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100008CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10000C360;
  return TimelineProvider.relevance()(a1, a2, a3);
}

uint64_t _s20BooksWidgetExtension0B14ReadingHistoryO8DayEntryV4date10Foundation4DateVvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

__n128 sub_100008D54@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  _BYTE v11[136];
  __int128 v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];
  _BYTE v23[136];
  _BYTE v24[152];

  v3 = type metadata accessor for WidgetEntry(0);
  sub_100007984(v1 + *(int *)(v3 + 20), (uint64_t)v23, &qword_1000A0C30);
  sub_100007984((uint64_t)v23, (uint64_t)v24, &qword_1000A0C30);
  if (sub_10000B7F0((uint64_t)v24) != 1)
  {
    sub_10000B9DC((uint64_t)v24, (uint64_t)v11);
    v6 = (char *)&loc_100008E84 + 4 * word_10007F290[sub_10000BA18((uint64_t)v11)];
    __asm { BR              X10 }
  }
  v13 = 0;
  v14 = 1;
  sub_10000B808((uint64_t)&v13);
  sub_100007984((uint64_t)&v13, (uint64_t)&v12, &qword_1000A0C38);
  v4 = sub_100005F78(&qword_1000A0C40);
  v5 = sub_10000B8E4(&qword_1000A0C48, &qword_1000A0C40, (void (*)(void))sub_10000B814, (void (*)(void))sub_10000B8C0);
  _ConditionalContent<>.init(storage:)(&v12, v4, &type metadata for Spacer, v5, &protocol witness table for Spacer);
  v7 = v22[0];
  *(_OWORD *)(a1 + 96) = v21;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 123) = *(_OWORD *)((char *)v22 + 11);
  v8 = v18;
  *(_OWORD *)(a1 + 32) = v17;
  *(_OWORD *)(a1 + 48) = v8;
  v9 = v20;
  *(_OWORD *)(a1 + 64) = v19;
  *(_OWORD *)(a1 + 80) = v9;
  result = v16;
  *(_OWORD *)a1 = v15;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

void sub_100009680()
{
  qword_1000AA260 = 0x646957736B6F6F42;
  *(_QWORD *)algn_1000AA268 = 0xEB00000000746567;
}

uint64_t sub_1000096AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjCClassFromMetadata;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  void (*v81)(char *, uint64_t);
  void (*v82)(char *, char *, uint64_t);
  id v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  unint64_t v105;
  _QWORD v106[4];

  v96 = a1;
  v1 = type metadata accessor for Locale(0);
  v86 = *(_QWORD *)(v1 - 8);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v78 - v5;
  v97 = type metadata accessor for String.LocalizationValue(0);
  v7 = *(_QWORD *)(v97 - 8);
  v8 = __chkstk_darwin(v97);
  v89 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v88 = (char *)&v78 - v10;
  v90 = sub_100005F78(&qword_1000A0A98);
  v87 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v12 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100005F78(&qword_1000A0AA0);
  v92 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v91 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100005F78(&qword_1000A0AA8);
  v93 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v99 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005F78(&qword_1000A0AB0);
  v94 = *(_QWORD *)(v15 - 8);
  v95 = v15;
  __chkstk_darwin(v15);
  v101 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A0620 != -1)
    swift_once(&qword_1000A0620, sub_100009680);
  v17 = qword_1000AA260;
  v18 = *(_QWORD *)algn_1000AA268;
  type metadata accessor for BooksWidgetEntryView(0);
  sub_100003DCC(&qword_1000A0AB8, type metadata accessor for BooksWidgetEntryView, (uint64_t)&unk_10007F3D0);
  sub_10000A080();
  swift_bridgeObjectRetain(v18);
  StaticConfiguration.init<A>(kind:provider:content:)(v17, v18);
  v19 = v88;
  v20 = String.LocalizationValue.init(stringLiteral:)(0x65756E69746E6F43, 0xE800000000000000);
  static Locale.current.getter(v20);
  v80 = v12;
  v21 = v7;
  v85 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v22 = v89;
  v23 = v97;
  v85(v89, v19, v97);
  v24 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v24);
  v84 = ObjCClassFromMetadata;
  v83 = (id)objc_opt_self(NSBundle);
  v26 = objc_msgSend(v83, "bundleForClass:", ObjCClassFromMetadata);
  v27 = v86;
  v82 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
  v82(v4, v6, v1);
  v28 = String.init(localized:table:bundle:locale:comment:)(v22, 0, 0, v26, v4, "Add widget view title", 21, 2);
  v30 = v29;
  v86 = *(_QWORD *)(v27 + 8);
  ((void (*)(char *, uint64_t))v86)(v6, v1);
  v81 = *(void (**)(char *, uint64_t))(v21 + 8);
  v81(v19, v23);
  v102 = v28;
  v103 = v30;
  v31 = sub_100007F64(&qword_1000A0AC8, &qword_1000A0A98, (uint64_t)&protocol conformance descriptor for StaticConfiguration<A>);
  v79 = v31;
  v32 = sub_1000075E8();
  v33 = v90;
  v34 = v91;
  v35 = v31;
  v36 = v80;
  WidgetConfiguration.configurationDisplayName<A>(_:)(&v102, v90, &type metadata for String, v35, v32);
  swift_bridgeObjectRelease(v30);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v36, v33);
  v37 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000045, 0x800000010007BD80);
  static Locale.current.getter(v37);
  v38 = v97;
  v85(v22, v19, v97);
  v39 = objc_msgSend(v83, "bundleForClass:", v84);
  v82(v4, v6, v1);
  v40 = String.init(localized:table:bundle:locale:comment:)(v22, 0, 0, v39, v4, "Add widget view subtitle", 24, 2);
  v42 = v41;
  ((void (*)(char *, uint64_t))v86)(v6, v1);
  v81(v19, v38);
  v106[0] = v40;
  v106[1] = v42;
  v102 = v33;
  v103 = &type metadata for String;
  v104 = v79;
  v105 = v32;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v102, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v44 = v98;
  v97 = v32;
  WidgetConfiguration.description<A>(_:)(v106, v98, &type metadata for String, OpaqueTypeConformance2, v32);
  swift_bridgeObjectRelease(v42);
  (*(void (**)(char *, uint64_t))(v92 + 8))(v34, v44);
  v45 = sub_10000A0C4();
  v46 = sub_100007F64(&qword_1000A0AD8, &qword_1000A0AE0, (uint64_t)&protocol conformance descriptor for StaticFeatureFlagsKey<A>);
  LOBYTE(v42) = RawRepresentable<>.isEnabled.getter(&type metadata for FeatureFlags.BooksWidget, v45, v46);
  v47 = sub_100005F78(&qword_1000A0AE8);
  v48 = type metadata accessor for WidgetFamily(0);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(unsigned __int8 *)(v49 + 80);
  v51 = *(_QWORD *)(v49 + 72);
  v52 = (v50 + 32) & ~v50;
  v53 = v50 | 7;
  v54 = 2 * v51;
  v91 = (char *)(v50 | 7);
  v92 = 2 * v51;
  if ((v42 & 1) != 0)
  {
    v55 = swift_allocObject(v47, v52 + 4 * v51, v53);
    *(_OWORD *)(v55 + 16) = xmmword_10007F280;
    v56 = *(void (**)(_QWORD))(v49 + 104);
    ((void (*)(uint64_t, _QWORD, uint64_t))v56)(v55 + v52, enum case for WidgetFamily.accessoryCircular(_:), v48);
    LODWORD(v90) = enum case for WidgetFamily.systemSmall(_:);
    v56(v55 + v52 + v51);
    LODWORD(v89) = enum case for WidgetFamily.systemMedium(_:);
    v56(v55 + v52 + v54);
    v57 = v55 + v52 + 3 * v51;
  }
  else
  {
    v55 = swift_allocObject(v47, v52 + 3 * v51, v53);
    *(_OWORD *)(v55 + 16) = xmmword_10007F270;
    v56 = *(void (**)(_QWORD))(v49 + 104);
    LODWORD(v90) = enum case for WidgetFamily.systemSmall(_:);
    v56(v55 + v52);
    LODWORD(v89) = enum case for WidgetFamily.systemMedium(_:);
    v56(v55 + v52 + v51);
    v57 = v55 + v52 + v54;
  }
  v58 = enum case for WidgetFamily.systemLarge(_:);
  ((void (*)(uint64_t, _QWORD, uint64_t))v56)(v57, enum case for WidgetFamily.systemLarge(_:), v48);
  v102 = v98;
  v103 = &type metadata for String;
  v104 = OpaqueTypeConformance2;
  v105 = v97;
  v59 = swift_getOpaqueTypeConformance2(&v102, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v60 = v100;
  v61 = v99;
  WidgetConfiguration.supportedFamilies(_:)(v55, v100, v59);
  swift_bridgeObjectRelease(v55);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v61, v60);
  v62 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v63 = objc_msgSend(v62, "userInterfaceIdiom");

  v64 = sub_100005F78(&qword_1000A0AF0);
  v65 = *(_QWORD *)(type metadata accessor for WidgetLocation(0) - 8);
  v66 = *(_QWORD *)(v65 + 72);
  v67 = *(unsigned __int8 *)(v65 + 80);
  v68 = (v67 + 32) & ~v67;
  if (v63 == (id)1)
  {
    v69 = swift_allocObject(v64, v68 + 2 * v66, v67 | 7);
    *(_OWORD *)(v69 + 16) = xmmword_10007F170;
    v70 = static WidgetLocation.iPhoneWidgetsOnMac.getter();
    static WidgetLocation.standBy.getter(v70);
  }
  else
  {
    v69 = swift_allocObject(v64, v68 + v66, v67 | 7);
    *(_OWORD *)(v69 + 16) = xmmword_10007F260;
    static WidgetLocation.iPhoneWidgetsOnMac.getter();
  }
  v71 = sub_100005F78(&qword_1000A0AE8);
  v72 = swift_allocObject(v71, v52 + 3 * v51, v91);
  *(_OWORD *)(v72 + 16) = xmmword_10007F270;
  v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 104);
  v73(v72 + v52, v90, v48);
  v73(v72 + v52 + v51, v89, v48);
  v73(v72 + v52 + v92, v58, v48);
  v102 = v100;
  v103 = (void *)v59;
  v74 = swift_getOpaqueTypeConformance2(&v102, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v75 = v95;
  v76 = v101;
  WidgetConfiguration.disfavoredLocations(_:for:)(v69, v72, v95, v74);
  swift_bridgeObjectRelease(v69);
  swift_bridgeObjectRelease(v72);
  return (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v76, v75);
}

uint64_t sub_100009FC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000A134(a1, a2);
}

int main(int argc, const char **argv, const char **envp)
{
  sub_10000A008();
  static Widget.main()();
  return 0;
}

unint64_t sub_10000A008()
{
  unint64_t result;

  result = qword_1000A0A90;
  if (!qword_1000A0A90)
  {
    result = swift_getWitnessTable(&unk_10007F2B4, &type metadata for BooksWidget);
    atomic_store(result, (unint64_t *)&qword_1000A0A90);
  }
  return result;
}

ValueMetadata *type metadata accessor for BooksWidget()
{
  return &type metadata for BooksWidget;
}

uint64_t sub_10000A05C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000839C8, 1);
}

uint64_t type metadata accessor for BooksWidgetEntryView(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A0BE0, (uint64_t)&nominal type descriptor for BooksWidgetEntryView);
}

unint64_t sub_10000A080()
{
  unint64_t result;

  result = qword_1000A0AC0;
  if (!qword_1000A0AC0)
  {
    result = swift_getWitnessTable(&unk_10007F378, &type metadata for Provider);
    atomic_store(result, (unint64_t *)&qword_1000A0AC0);
  }
  return result;
}

unint64_t sub_10000A0C4()
{
  unint64_t result;

  result = qword_1000A0AD0;
  if (!qword_1000A0AD0)
  {
    result = swift_getWitnessTable(&unk_10007F8C0, &type metadata for FeatureFlags.BooksWidget);
    atomic_store(result, (unint64_t *)&qword_1000A0AD0);
  }
  return result;
}

void sub_10000A108(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = EnvironmentValues.widgetContentMargins.getter();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

uint64_t sub_10000A134(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for WidgetEntry(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A0B50, (uint64_t)&nominal type descriptor for WidgetEntry);
}

uint64_t sub_10000A18C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t *sub_10000A1C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[2];
    v12 = v10[14];
    if (v11 >> 1 == 0xFFFFFFFF && (v12 & 0xFFFFFFFFFFFFFCFELL) == 0)
    {
      v21 = *((_OWORD *)v10 + 7);
      *((_OWORD *)v9 + 6) = *((_OWORD *)v10 + 6);
      *((_OWORD *)v9 + 7) = v21;
      *((_QWORD *)v9 + 16) = v10[16];
      v22 = *((_OWORD *)v10 + 3);
      *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
      *((_OWORD *)v9 + 3) = v22;
      v23 = *((_OWORD *)v10 + 5);
      *((_OWORD *)v9 + 4) = *((_OWORD *)v10 + 4);
      *((_OWORD *)v9 + 5) = v23;
      v24 = *((_OWORD *)v10 + 1);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *((_OWORD *)v9 + 1) = v24;
    }
    else
    {
      v14 = *v10;
      v15 = v10[3];
      v16 = v10[4];
      v17 = v10[5];
      v18 = v10[6];
      v19 = v10[7];
      v26 = v10[1];
      v27 = v10[8];
      v28 = v10[9];
      v29 = v10[10];
      v30 = v10[11];
      v31 = v10[12];
      v32 = v10[13];
      v33 = v10[15];
      v34 = v10[16];
      sub_10000A364(*v10, v26, v11, v15, v16, v17, v18, v19, v27, v28, v29, v30, v31, v32, v12);
      *(_QWORD *)v9 = v14;
      *((_QWORD *)v9 + 1) = v26;
      *((_QWORD *)v9 + 2) = v11;
      *((_QWORD *)v9 + 3) = v15;
      *((_QWORD *)v9 + 4) = v16;
      *((_QWORD *)v9 + 5) = v17;
      *((_QWORD *)v9 + 6) = v18;
      *((_QWORD *)v9 + 7) = v19;
      *((_QWORD *)v9 + 8) = v27;
      *((_QWORD *)v9 + 9) = v28;
      *((_QWORD *)v9 + 10) = v29;
      *((_QWORD *)v9 + 11) = v30;
      *((_QWORD *)v9 + 12) = v31;
      *((_QWORD *)v9 + 13) = v32;
      *((_QWORD *)v9 + 14) = v12;
      *((_QWORD *)v9 + 15) = v33;
      *((_QWORD *)v9 + 16) = v34;
    }
  }
  return a1;
}

void sub_10000A364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  __asm { BR              X10 }
}

uint64_t sub_10000A3B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  v6 = v5;
  v7 = v4;
  return swift_bridgeObjectRetain(v1);
}

void sub_10000A414(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  v6 = v5[2];
  v7 = v5[14];
  if (v6 >> 1 != 0xFFFFFFFF || (v7 & 0xFFFFFFFFFFFFFCFELL) != 0)
    sub_10000A4B0(*v5, v5[1], v6, v5[3], v5[4], v5[5], v5[6], v5[7], v5[8], v5[9], v5[10], v5[11], v5[12], v5[13], v7);
}

void sub_10000A4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  __asm { BR              X10 }
}

uint64_t sub_10000A500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  swift_bridgeObjectRelease(v1);

  swift_bridgeObjectRelease(v0);
  swift_bridgeObjectRelease(v3);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10000A554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[2];
  v11 = v9[14];
  if (v10 >> 1 == 0xFFFFFFFF && (v11 & 0xFFFFFFFFFFFFFCFELL) == 0)
  {
    v19 = *((_OWORD *)v9 + 7);
    *(_OWORD *)(v8 + 96) = *((_OWORD *)v9 + 6);
    *(_OWORD *)(v8 + 112) = v19;
    *(_QWORD *)(v8 + 128) = v9[16];
    v20 = *((_OWORD *)v9 + 3);
    *(_OWORD *)(v8 + 32) = *((_OWORD *)v9 + 2);
    *(_OWORD *)(v8 + 48) = v20;
    v21 = *((_OWORD *)v9 + 5);
    *(_OWORD *)(v8 + 64) = *((_OWORD *)v9 + 4);
    *(_OWORD *)(v8 + 80) = v21;
    v22 = *((_OWORD *)v9 + 1);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v22;
  }
  else
  {
    v13 = *v9;
    v14 = v9[3];
    v15 = v9[4];
    v16 = v9[5];
    v17 = v9[6];
    v18 = v9[7];
    v24 = v9[1];
    v25 = v9[8];
    v26 = v9[9];
    v27 = v9[10];
    v28 = v9[11];
    v29 = v9[12];
    v30 = v9[13];
    v31 = v9[15];
    v32 = v9[16];
    sub_10000A364(*v9, v24, v10, v14, v15, v16, v17, v18, v25, v26, v27, v28, v29, v30, v11);
    *(_QWORD *)v8 = v13;
    *(_QWORD *)(v8 + 8) = v24;
    *(_QWORD *)(v8 + 16) = v10;
    *(_QWORD *)(v8 + 24) = v14;
    *(_QWORD *)(v8 + 32) = v15;
    *(_QWORD *)(v8 + 40) = v16;
    *(_QWORD *)(v8 + 48) = v17;
    *(_QWORD *)(v8 + 56) = v18;
    *(_QWORD *)(v8 + 64) = v25;
    *(_QWORD *)(v8 + 72) = v26;
    *(_QWORD *)(v8 + 80) = v27;
    *(_QWORD *)(v8 + 88) = v28;
    *(_QWORD *)(v8 + 96) = v29;
    *(_QWORD *)(v8 + 104) = v30;
    *(_QWORD *)(v8 + 112) = v11;
    *(_QWORD *)(v8 + 120) = v31;
    *(_QWORD *)(v8 + 128) = v32;
  }
  return a1;
}

uint64_t sub_10000A6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7 + 16);
  v11 = *(_QWORD *)(a1 + v7 + 112) & 0xFFFFFFFFFFFFFCFELL;
  v12 = *(_QWORD *)(a2 + v7 + 16);
  v13 = v9[14];
  v15 = (v13 & 0xFFFFFFFFFFFFFCFELL) == 0 && v12 >> 1 == 0xFFFFFFFF;
  if (v10 >> 1 == 0xFFFFFFFF && v11 == 0)
  {
    if (v15)
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v23 = *((_OWORD *)v9 + 1);
      v24 = *((_OWORD *)v9 + 2);
      v25 = *((_OWORD *)v9 + 4);
      *(_OWORD *)(v8 + 48) = *((_OWORD *)v9 + 3);
      *(_OWORD *)(v8 + 64) = v25;
      *(_OWORD *)(v8 + 16) = v23;
      *(_OWORD *)(v8 + 32) = v24;
      v26 = *((_OWORD *)v9 + 5);
      v27 = *((_OWORD *)v9 + 6);
      v28 = *((_OWORD *)v9 + 7);
      *(_QWORD *)(v8 + 128) = v9[16];
      *(_OWORD *)(v8 + 96) = v27;
      *(_OWORD *)(v8 + 112) = v28;
      *(_OWORD *)(v8 + 80) = v26;
    }
    else
    {
      v50 = *v9;
      v49 = v9[1];
      v51 = v9[4];
      v52 = v9[5];
      v53 = v9[6];
      v54 = v9[7];
      v59 = v49;
      v61 = v9[8];
      v63 = v9[9];
      v65 = v9[10];
      v67 = v9[11];
      v69 = v9[12];
      v71 = v9[13];
      v73 = v9[15];
      v75 = v9[16];
      v55 = *v9;
      v56 = v9[3];
      sub_10000A364(v55, v49, v12, v56, v51, v52, v53, v54, v61, v63, v65, v67, v69, v71, v13);
      *(_QWORD *)v8 = v50;
      *(_QWORD *)(v8 + 8) = v59;
      *(_QWORD *)(v8 + 16) = v12;
      *(_QWORD *)(v8 + 24) = v56;
      *(_QWORD *)(v8 + 32) = v51;
      *(_QWORD *)(v8 + 40) = v52;
      *(_QWORD *)(v8 + 48) = v53;
      *(_QWORD *)(v8 + 56) = v54;
      *(_QWORD *)(v8 + 64) = v61;
      *(_QWORD *)(v8 + 72) = v63;
      *(_QWORD *)(v8 + 80) = v65;
      *(_QWORD *)(v8 + 88) = v67;
      *(_QWORD *)(v8 + 96) = v69;
      *(_QWORD *)(v8 + 104) = v71;
      *(_QWORD *)(v8 + 112) = v13;
      *(_QWORD *)(v8 + 120) = v73;
      *(_QWORD *)(v8 + 128) = v75;
    }
  }
  else if (v15)
  {
    sub_10000A988((uint64_t *)v8);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    v17 = *((_OWORD *)v9 + 4);
    v19 = *((_OWORD *)v9 + 1);
    v18 = *((_OWORD *)v9 + 2);
    *(_OWORD *)(v8 + 48) = *((_OWORD *)v9 + 3);
    *(_OWORD *)(v8 + 64) = v17;
    *(_OWORD *)(v8 + 16) = v19;
    *(_OWORD *)(v8 + 32) = v18;
    v21 = *((_OWORD *)v9 + 6);
    v20 = *((_OWORD *)v9 + 7);
    v22 = *((_OWORD *)v9 + 5);
    *(_QWORD *)(v8 + 128) = v9[16];
    *(_OWORD *)(v8 + 96) = v21;
    *(_OWORD *)(v8 + 112) = v20;
    *(_OWORD *)(v8 + 80) = v22;
  }
  else
  {
    v30 = *v9;
    v29 = v9[1];
    v31 = v9[4];
    v32 = v9[5];
    v33 = v9[6];
    v34 = v9[7];
    v58 = v29;
    v60 = v9[8];
    v62 = v9[9];
    v64 = v9[10];
    v66 = v9[11];
    v68 = v9[12];
    v70 = v9[13];
    v72 = v9[15];
    v74 = v9[16];
    v35 = *v9;
    v36 = v9[3];
    sub_10000A364(v35, v29, v12, v36, v31, v32, v33, v34, v60, v62, v64, v66, v68, v70, v13);
    v37 = *(_QWORD *)v8;
    v38 = *(_QWORD *)(v8 + 8);
    v39 = *(_QWORD *)(v8 + 16);
    v40 = *(_QWORD *)(v8 + 24);
    v41 = *(_QWORD *)(v8 + 32);
    v42 = *(_QWORD *)(v8 + 40);
    v43 = *(_QWORD *)(v8 + 48);
    v44 = *(_QWORD *)(v8 + 56);
    v45 = *(_OWORD *)(v8 + 64);
    v46 = *(_OWORD *)(v8 + 80);
    v47 = *(_OWORD *)(v8 + 96);
    v48 = *(_OWORD *)(v8 + 112);
    *(_QWORD *)v8 = v30;
    *(_QWORD *)(v8 + 8) = v58;
    *(_QWORD *)(v8 + 16) = v12;
    *(_QWORD *)(v8 + 24) = v36;
    *(_QWORD *)(v8 + 32) = v31;
    *(_QWORD *)(v8 + 40) = v32;
    *(_QWORD *)(v8 + 48) = v33;
    *(_QWORD *)(v8 + 56) = v34;
    *(_QWORD *)(v8 + 64) = v60;
    *(_QWORD *)(v8 + 72) = v62;
    *(_QWORD *)(v8 + 80) = v64;
    *(_QWORD *)(v8 + 88) = v66;
    *(_QWORD *)(v8 + 96) = v68;
    *(_QWORD *)(v8 + 104) = v70;
    *(_QWORD *)(v8 + 112) = v13;
    *(_QWORD *)(v8 + 120) = v72;
    *(_QWORD *)(v8 + 128) = v74;
    sub_10000A4B0(v37, v38, v39, v40, v41, v42, v43, v44, v45, *((uint64_t *)&v45 + 1), v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v48);
  }
  return a1;
}

uint64_t *sub_10000A988(uint64_t *a1)
{
  destroy for ViewModel(a1);
  return a1;
}

uint64_t sub_10000A9BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(v9 + 112);
  *(_OWORD *)(v8 + 96) = *(_OWORD *)(v9 + 96);
  *(_OWORD *)(v8 + 112) = v10;
  *(_QWORD *)(v8 + 128) = *(_QWORD *)(v9 + 128);
  v11 = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v8 + 48) = v11;
  v12 = *(_OWORD *)(v9 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
  *(_OWORD *)(v8 + 80) = v12;
  v13 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v13;
  return a1;
}

uint64_t sub_10000AA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7 + 16);
  v11 = *(_QWORD *)(a1 + v7 + 112);
  if (v10 >> 1 == 0xFFFFFFFF && (v11 & 0xFFFFFFFFFFFFFCFELL) == 0)
    goto LABEL_11;
  v13 = *(_QWORD *)(v9 + 16);
  v14 = *(_QWORD *)(v9 + 112);
  if (v13 >> 1 == 0xFFFFFFFF && (v14 & 0xFFFFFFFFFFFFFCFELL) == 0)
  {
    sub_10000A988((uint64_t *)v8);
LABEL_11:
    v28 = *(_OWORD *)(v9 + 112);
    *(_OWORD *)(v8 + 96) = *(_OWORD *)(v9 + 96);
    *(_OWORD *)(v8 + 112) = v28;
    *(_QWORD *)(v8 + 128) = *(_QWORD *)(v9 + 128);
    v29 = *(_OWORD *)(v9 + 48);
    *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
    *(_OWORD *)(v8 + 48) = v29;
    v30 = *(_OWORD *)(v9 + 80);
    *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
    *(_OWORD *)(v8 + 80) = v30;
    v31 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v31;
    return a1;
  }
  v16 = *(_QWORD *)(v9 + 104);
  v17 = *(_QWORD *)v8;
  v18 = *(_QWORD *)(v8 + 8);
  v19 = *(_QWORD *)(v8 + 24);
  v20 = *(_QWORD *)(v8 + 32);
  v21 = *(_QWORD *)(v8 + 40);
  v22 = *(_QWORD *)(v8 + 48);
  v23 = *(_QWORD *)(v8 + 56);
  v24 = *(_OWORD *)(v8 + 64);
  v25 = *(_OWORD *)(v8 + 80);
  v26 = *(_QWORD *)(v8 + 96);
  v27 = *(_QWORD *)(v8 + 104);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_QWORD *)(v8 + 16) = v13;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(v9 + 72);
  *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
  *(_QWORD *)(v8 + 104) = v16;
  *(_QWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 120) = *(_OWORD *)(v9 + 120);
  sub_10000A4B0(v17, v18, v10, v19, v20, v21, v22, v23, v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26, v27, v11);
  return a1;
}

uint64_t sub_10000AB88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000AB94);
}

uint64_t sub_10000AB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 16) >> 1;
  v10 = -2 - v9;
  if (-2 - (int)v9 < 0)
    v10 = -1;
  if (v9 > 0x80000000)
    return (v10 + 1);
  else
    return 0;
}

uint64_t sub_10000AC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000AC30);
}

double sub_10000AC30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  }
  else
  {
    v11 = a1 + *(int *)(a4 + 20);
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = 2 * ~(_DWORD)a2;
    result = 0.0;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 120) = 0u;
  }
  return result;
}

uint64_t sub_10000ACD4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10007F300;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Provider()
{
  return &type metadata for Provider;
}

uint64_t *sub_10000AD54(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = type metadata accessor for WidgetEntry(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v6 = v4;
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(v6 + 20);
    v9 = (char *)a1 + v8;
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[2];
    v12 = v10[14];
    if (v11 >> 1 == 0xFFFFFFFF && (v12 & 0xFFFFFFFFFFFFFCFELL) == 0)
    {
      v21 = *((_OWORD *)v10 + 7);
      *((_OWORD *)v9 + 6) = *((_OWORD *)v10 + 6);
      *((_OWORD *)v9 + 7) = v21;
      *((_QWORD *)v9 + 16) = v10[16];
      v22 = *((_OWORD *)v10 + 3);
      *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
      *((_OWORD *)v9 + 3) = v22;
      v23 = *((_OWORD *)v10 + 5);
      *((_OWORD *)v9 + 4) = *((_OWORD *)v10 + 4);
      *((_OWORD *)v9 + 5) = v23;
      v24 = *((_OWORD *)v10 + 1);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *((_OWORD *)v9 + 1) = v24;
    }
    else
    {
      v14 = *v10;
      v15 = v10[3];
      v16 = v10[4];
      v17 = v10[5];
      v18 = v10[6];
      v19 = v10[7];
      v26 = v10[1];
      v27 = v10[8];
      v28 = v10[9];
      v29 = v10[10];
      v30 = v10[11];
      v31 = v10[12];
      v32 = v10[13];
      v33 = v10[15];
      v34 = v10[16];
      sub_10000A364(*v10, v26, v11, v15, v16, v17, v18, v19, v27, v28, v29, v30, v31, v32, v12);
      *(_QWORD *)v9 = v14;
      *((_QWORD *)v9 + 1) = v26;
      *((_QWORD *)v9 + 2) = v11;
      *((_QWORD *)v9 + 3) = v15;
      *((_QWORD *)v9 + 4) = v16;
      *((_QWORD *)v9 + 5) = v17;
      *((_QWORD *)v9 + 6) = v18;
      *((_QWORD *)v9 + 7) = v19;
      *((_QWORD *)v9 + 8) = v27;
      *((_QWORD *)v9 + 9) = v28;
      *((_QWORD *)v9 + 10) = v29;
      *((_QWORD *)v9 + 11) = v30;
      *((_QWORD *)v9 + 12) = v31;
      *((_QWORD *)v9 + 13) = v32;
      *((_QWORD *)v9 + 14) = v12;
      *((_QWORD *)v9 + 15) = v33;
      *((_QWORD *)v9 + 16) = v34;
    }
  }
  return a1;
}

void sub_10000AF00(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for WidgetEntry(0) + 20));
  v4 = v3[2];
  v5 = v3[14];
  if (v4 >> 1 != 0xFFFFFFFF || (v5 & 0xFFFFFFFFFFFFFCFELL) != 0)
    sub_10000A4B0(*v3, v3[1], v4, v3[3], v3[4], v3[5], v3[6], v3[7], v3[8], v3[9], v3[10], v3[11], v3[12], v3[13], v5);
}

uint64_t sub_10000AFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = *(int *)(type metadata accessor for WidgetEntry(0) + 20);
  v6 = a1 + v5;
  v7 = (_QWORD *)(a2 + v5);
  v8 = v7[2];
  v9 = v7[14];
  if (v8 >> 1 == 0xFFFFFFFF && (v9 & 0xFFFFFFFFFFFFFCFELL) == 0)
  {
    v17 = *((_OWORD *)v7 + 7);
    *(_OWORD *)(v6 + 96) = *((_OWORD *)v7 + 6);
    *(_OWORD *)(v6 + 112) = v17;
    *(_QWORD *)(v6 + 128) = v7[16];
    v18 = *((_OWORD *)v7 + 3);
    *(_OWORD *)(v6 + 32) = *((_OWORD *)v7 + 2);
    *(_OWORD *)(v6 + 48) = v18;
    v19 = *((_OWORD *)v7 + 5);
    *(_OWORD *)(v6 + 64) = *((_OWORD *)v7 + 4);
    *(_OWORD *)(v6 + 80) = v19;
    v20 = *((_OWORD *)v7 + 1);
    *(_OWORD *)v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v20;
  }
  else
  {
    v11 = *v7;
    v12 = v7[3];
    v13 = v7[4];
    v14 = v7[5];
    v15 = v7[6];
    v16 = v7[7];
    v22 = v7[1];
    v23 = v7[8];
    v24 = v7[9];
    v25 = v7[10];
    v26 = v7[11];
    v27 = v7[12];
    v28 = v7[13];
    v29 = v7[15];
    v30 = v7[16];
    sub_10000A364(*v7, v22, v8, v12, v13, v14, v15, v16, v23, v24, v25, v26, v27, v28, v9);
    *(_QWORD *)v6 = v11;
    *(_QWORD *)(v6 + 8) = v22;
    *(_QWORD *)(v6 + 16) = v8;
    *(_QWORD *)(v6 + 24) = v12;
    *(_QWORD *)(v6 + 32) = v13;
    *(_QWORD *)(v6 + 40) = v14;
    *(_QWORD *)(v6 + 48) = v15;
    *(_QWORD *)(v6 + 56) = v16;
    *(_QWORD *)(v6 + 64) = v23;
    *(_QWORD *)(v6 + 72) = v24;
    *(_QWORD *)(v6 + 80) = v25;
    *(_QWORD *)(v6 + 88) = v26;
    *(_QWORD *)(v6 + 96) = v27;
    *(_QWORD *)(v6 + 104) = v28;
    *(_QWORD *)(v6 + 112) = v9;
    *(_QWORD *)(v6 + 120) = v29;
    *(_QWORD *)(v6 + 128) = v30;
  }
  return a1;
}

uint64_t sub_10000B11C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = *(int *)(type metadata accessor for WidgetEntry(0) + 20);
  v6 = a1 + v5;
  v7 = (uint64_t *)(a2 + v5);
  v8 = *(_QWORD *)(a1 + v5 + 16);
  v9 = *(_QWORD *)(a1 + v5 + 112) & 0xFFFFFFFFFFFFFCFELL;
  v10 = *(_QWORD *)(a2 + v5 + 16);
  v11 = v7[14];
  v13 = (v11 & 0xFFFFFFFFFFFFFCFELL) == 0 && v10 >> 1 == 0xFFFFFFFF;
  if (v8 >> 1 == 0xFFFFFFFF && v9 == 0)
  {
    if (v13)
    {
      *(_OWORD *)v6 = *(_OWORD *)v7;
      v21 = *((_OWORD *)v7 + 1);
      v22 = *((_OWORD *)v7 + 2);
      v23 = *((_OWORD *)v7 + 4);
      *(_OWORD *)(v6 + 48) = *((_OWORD *)v7 + 3);
      *(_OWORD *)(v6 + 64) = v23;
      *(_OWORD *)(v6 + 16) = v21;
      *(_OWORD *)(v6 + 32) = v22;
      v24 = *((_OWORD *)v7 + 5);
      v25 = *((_OWORD *)v7 + 6);
      v26 = *((_OWORD *)v7 + 7);
      *(_QWORD *)(v6 + 128) = v7[16];
      *(_OWORD *)(v6 + 96) = v25;
      *(_OWORD *)(v6 + 112) = v26;
      *(_OWORD *)(v6 + 80) = v24;
    }
    else
    {
      v48 = *v7;
      v47 = v7[1];
      v49 = v7[4];
      v50 = v7[5];
      v51 = v7[6];
      v52 = v7[7];
      v57 = v47;
      v59 = v7[8];
      v61 = v7[9];
      v63 = v7[10];
      v65 = v7[11];
      v67 = v7[12];
      v69 = v7[13];
      v71 = v7[15];
      v73 = v7[16];
      v53 = *v7;
      v54 = v7[3];
      sub_10000A364(v53, v47, v10, v54, v49, v50, v51, v52, v59, v61, v63, v65, v67, v69, v11);
      *(_QWORD *)v6 = v48;
      *(_QWORD *)(v6 + 8) = v57;
      *(_QWORD *)(v6 + 16) = v10;
      *(_QWORD *)(v6 + 24) = v54;
      *(_QWORD *)(v6 + 32) = v49;
      *(_QWORD *)(v6 + 40) = v50;
      *(_QWORD *)(v6 + 48) = v51;
      *(_QWORD *)(v6 + 56) = v52;
      *(_QWORD *)(v6 + 64) = v59;
      *(_QWORD *)(v6 + 72) = v61;
      *(_QWORD *)(v6 + 80) = v63;
      *(_QWORD *)(v6 + 88) = v65;
      *(_QWORD *)(v6 + 96) = v67;
      *(_QWORD *)(v6 + 104) = v69;
      *(_QWORD *)(v6 + 112) = v11;
      *(_QWORD *)(v6 + 120) = v71;
      *(_QWORD *)(v6 + 128) = v73;
    }
  }
  else if (v13)
  {
    sub_10000A988((uint64_t *)v6);
    *(_OWORD *)v6 = *(_OWORD *)v7;
    v15 = *((_OWORD *)v7 + 4);
    v17 = *((_OWORD *)v7 + 1);
    v16 = *((_OWORD *)v7 + 2);
    *(_OWORD *)(v6 + 48) = *((_OWORD *)v7 + 3);
    *(_OWORD *)(v6 + 64) = v15;
    *(_OWORD *)(v6 + 16) = v17;
    *(_OWORD *)(v6 + 32) = v16;
    v19 = *((_OWORD *)v7 + 6);
    v18 = *((_OWORD *)v7 + 7);
    v20 = *((_OWORD *)v7 + 5);
    *(_QWORD *)(v6 + 128) = v7[16];
    *(_OWORD *)(v6 + 96) = v19;
    *(_OWORD *)(v6 + 112) = v18;
    *(_OWORD *)(v6 + 80) = v20;
  }
  else
  {
    v28 = *v7;
    v27 = v7[1];
    v29 = v7[4];
    v30 = v7[5];
    v31 = v7[6];
    v32 = v7[7];
    v56 = v27;
    v58 = v7[8];
    v60 = v7[9];
    v62 = v7[10];
    v64 = v7[11];
    v66 = v7[12];
    v68 = v7[13];
    v70 = v7[15];
    v72 = v7[16];
    v33 = *v7;
    v34 = v7[3];
    sub_10000A364(v33, v27, v10, v34, v29, v30, v31, v32, v58, v60, v62, v64, v66, v68, v11);
    v35 = *(_QWORD *)v6;
    v36 = *(_QWORD *)(v6 + 8);
    v37 = *(_QWORD *)(v6 + 16);
    v38 = *(_QWORD *)(v6 + 24);
    v39 = *(_QWORD *)(v6 + 32);
    v40 = *(_QWORD *)(v6 + 40);
    v41 = *(_QWORD *)(v6 + 48);
    v42 = *(_QWORD *)(v6 + 56);
    v43 = *(_OWORD *)(v6 + 64);
    v44 = *(_OWORD *)(v6 + 80);
    v45 = *(_OWORD *)(v6 + 96);
    v46 = *(_OWORD *)(v6 + 112);
    *(_QWORD *)v6 = v28;
    *(_QWORD *)(v6 + 8) = v56;
    *(_QWORD *)(v6 + 16) = v10;
    *(_QWORD *)(v6 + 24) = v34;
    *(_QWORD *)(v6 + 32) = v29;
    *(_QWORD *)(v6 + 40) = v30;
    *(_QWORD *)(v6 + 48) = v31;
    *(_QWORD *)(v6 + 56) = v32;
    *(_QWORD *)(v6 + 64) = v58;
    *(_QWORD *)(v6 + 72) = v60;
    *(_QWORD *)(v6 + 80) = v62;
    *(_QWORD *)(v6 + 88) = v64;
    *(_QWORD *)(v6 + 96) = v66;
    *(_QWORD *)(v6 + 104) = v68;
    *(_QWORD *)(v6 + 112) = v11;
    *(_QWORD *)(v6 + 120) = v70;
    *(_QWORD *)(v6 + 128) = v72;
    sub_10000A4B0(v35, v36, v37, v38, v39, v40, v41, v42, v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v45, *((uint64_t *)&v45 + 1), v46);
  }
  return a1;
}

uint64_t sub_10000B3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = *(int *)(type metadata accessor for WidgetEntry(0) + 20);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = *(_OWORD *)(v7 + 112);
  *(_OWORD *)(v6 + 96) = *(_OWORD *)(v7 + 96);
  *(_OWORD *)(v6 + 112) = v8;
  *(_QWORD *)(v6 + 128) = *(_QWORD *)(v7 + 128);
  v9 = *(_OWORD *)(v7 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(v7 + 32);
  *(_OWORD *)(v6 + 48) = v9;
  v10 = *(_OWORD *)(v7 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(v7 + 64);
  *(_OWORD *)(v6 + 80) = v10;
  v11 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v6 = *(_OWORD *)v7;
  *(_OWORD *)(v6 + 16) = v11;
  return a1;
}

uint64_t sub_10000B45C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = *(int *)(type metadata accessor for WidgetEntry(0) + 20);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = *(_QWORD *)(a1 + v5 + 16);
  v9 = *(_QWORD *)(a1 + v5 + 112);
  if (v8 >> 1 == 0xFFFFFFFF && (v9 & 0xFFFFFFFFFFFFFCFELL) == 0)
    goto LABEL_11;
  v11 = *(_QWORD *)(v7 + 16);
  v12 = *(_QWORD *)(v7 + 112);
  if (v11 >> 1 == 0xFFFFFFFF && (v12 & 0xFFFFFFFFFFFFFCFELL) == 0)
  {
    sub_10000A988((uint64_t *)v6);
LABEL_11:
    v26 = *(_OWORD *)(v7 + 112);
    *(_OWORD *)(v6 + 96) = *(_OWORD *)(v7 + 96);
    *(_OWORD *)(v6 + 112) = v26;
    *(_QWORD *)(v6 + 128) = *(_QWORD *)(v7 + 128);
    v27 = *(_OWORD *)(v7 + 48);
    *(_OWORD *)(v6 + 32) = *(_OWORD *)(v7 + 32);
    *(_OWORD *)(v6 + 48) = v27;
    v28 = *(_OWORD *)(v7 + 80);
    *(_OWORD *)(v6 + 64) = *(_OWORD *)(v7 + 64);
    *(_OWORD *)(v6 + 80) = v28;
    v29 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v29;
    return a1;
  }
  v14 = *(_QWORD *)(v7 + 104);
  v15 = *(_QWORD *)v6;
  v16 = *(_QWORD *)(v6 + 8);
  v17 = *(_QWORD *)(v6 + 24);
  v18 = *(_QWORD *)(v6 + 32);
  v19 = *(_QWORD *)(v6 + 40);
  v20 = *(_QWORD *)(v6 + 48);
  v21 = *(_QWORD *)(v6 + 56);
  v22 = *(_OWORD *)(v6 + 64);
  v23 = *(_OWORD *)(v6 + 80);
  v24 = *(_QWORD *)(v6 + 96);
  v25 = *(_QWORD *)(v6 + 104);
  *(_OWORD *)v6 = *(_OWORD *)v7;
  *(_QWORD *)(v6 + 16) = v11;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)(v7 + 24);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(v7 + 40);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(v7 + 56);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)(v7 + 72);
  *(_OWORD *)(v6 + 88) = *(_OWORD *)(v7 + 88);
  *(_QWORD *)(v6 + 104) = v14;
  *(_QWORD *)(v6 + 112) = v12;
  *(_OWORD *)(v6 + 120) = *(_OWORD *)(v7 + 120);
  sub_10000A4B0(v15, v16, v8, v17, v18, v19, v20, v21, v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, v25, v9);
  return a1;
}

uint64_t sub_10000B5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000B5B4);
}

uint64_t sub_10000B5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10000B5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000B5FC);
}

uint64_t sub_10000B5FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10000B63C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for WidgetEntry(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10000B6A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;

  v0 = sub_100005FC0(&qword_1000A0AB0);
  v1 = sub_100005FC0(&qword_1000A0AA8);
  v2 = sub_100005FC0(&qword_1000A0AA0);
  v3 = sub_100005FC0(&qword_1000A0A98);
  v4 = sub_100007F64(&qword_1000A0AC8, &qword_1000A0A98, (uint64_t)&protocol conformance descriptor for StaticConfiguration<A>);
  v5 = sub_1000075E8();
  v10 = v3;
  v11 = &type metadata for String;
  v12 = v4;
  v13 = v5;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v10 = v2;
  v11 = &type metadata for String;
  v12 = OpaqueTypeConformance2;
  v13 = v5;
  v7 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v10 = v1;
  v11 = (void *)v7;
  v8 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v10 = v0;
  v11 = (void *)v8;
  return swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disfavoredLocations(_:for:)>>, 1);
}

uint64_t sub_10000B7B4()
{
  return sub_100003DCC(qword_1000A0C18, type metadata accessor for WidgetEntry, (uint64_t)&unk_10007F348);
}

uint64_t sub_10000B7E0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000839F0, 1);
}

uint64_t sub_10000B7F0(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 16) >> 1) > 0x80000000)
    return -(*(_QWORD *)(a1 + 16) >> 1);
  else
    return 0;
}

uint64_t sub_10000B808(uint64_t result)
{
  *(_BYTE *)(result + 138) = 1;
  return result;
}

uint64_t sub_10000B814()
{
  return sub_10000B8E4(&qword_1000A0C50, &qword_1000A0C58, (void (*)(void))sub_10000B838, (void (*)(void))sub_10000B87C);
}

unint64_t sub_10000B838()
{
  unint64_t result;

  result = qword_1000A0C60;
  if (!qword_1000A0C60)
  {
    result = swift_getWitnessTable(&unk_100083688, &type metadata for AccessoryCircularView);
    atomic_store(result, (unint64_t *)&qword_1000A0C60);
  }
  return result;
}

unint64_t sub_10000B87C()
{
  unint64_t result;

  result = qword_1000A0C68;
  if (!qword_1000A0C68)
  {
    result = swift_getWitnessTable(&unk_10007F1A8, &type metadata for SmallWidgetView);
    atomic_store(result, (unint64_t *)&qword_1000A0C68);
  }
  return result;
}

uint64_t sub_10000B8C0()
{
  return sub_10000B8E4(&qword_1000A0C70, &qword_1000A0C78, (void (*)(void))sub_10000B954, (void (*)(void))sub_10000B998);
}

uint64_t sub_10000B8E4(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100005FC0(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000B954()
{
  unint64_t result;

  result = qword_1000A0C80;
  if (!qword_1000A0C80)
  {
    result = swift_getWitnessTable(&unk_10007FE74, &type metadata for MediumWidgetView);
    atomic_store(result, (unint64_t *)&qword_1000A0C80);
  }
  return result;
}

unint64_t sub_10000B998()
{
  unint64_t result;

  result = qword_1000A0C88;
  if (!qword_1000A0C88)
  {
    result = swift_getWitnessTable(&unk_100082808, &type metadata for LargeWidgetView);
    atomic_store(result, (unint64_t *)&qword_1000A0C88);
  }
  return result;
}

uint64_t sub_10000B9DC(uint64_t a1, uint64_t a2)
{
  initializeWithTake for SmallWidgetViewModel(a2, a1);
  return a2;
}

uint64_t sub_10000BA18(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112) >> 62;
}

uint64_t sub_10000BA24(uint64_t result)
{
  *(_BYTE *)(result + 120) = 1;
  return result;
}

uint64_t sub_10000BA30(uint64_t result)
{
  *(_BYTE *)(result + 137) = 1;
  return result;
}

uint64_t sub_10000BA3C(uint64_t result)
{
  *(_BYTE *)(result + 138) = 0;
  return result;
}

void sub_10000BA44(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = EnvironmentValues.widgetContentMargins.getter();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

uint64_t sub_10000BA70(uint64_t result)
{
  *(_BYTE *)(result + 120) = 0;
  return result;
}

uint64_t sub_10000BA78(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_10000BA84(uint64_t result)
{
  *(_QWORD *)(result + 112) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_10000BA94(uint64_t result)
{
  *(_BYTE *)(result + 136) = 1;
  return result;
}

uint64_t sub_10000BAA0(uint64_t result)
{
  *(_BYTE *)(result + 137) = 0;
  return result;
}

void sub_10000BAA8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a3 >> 1 != 0xFFFFFFFF || (a15 & 0xFFFFFFFFFFFFFCFELL) != 0)
    sub_10000A4B0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_10000BAF0(uint64_t result)
{
  *(_BYTE *)(result + 136) = 0;
  return result;
}

uint64_t sub_10000BAF8(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10000BB5C;
  return v6(a1);
}

uint64_t sub_10000BB5C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10000BBA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t (**v32)();
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for TimelineProviderContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005F78(&qword_1000A0CA8);
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A0618 != -1)
    swift_once(&qword_1000A0618, sub_100007FA4);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10000BE14(v13, (uint64_t)qword_1000A0A78);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    v36 = v8;
    v18 = v12;
    v19 = v9;
    v20 = v6;
    v21 = a3;
    v22 = a2;
    v23 = a1;
    v24 = v17;
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Widget was awoken to fetch view model data.", v17, 2u);
    v25 = v24;
    a1 = v23;
    a2 = v22;
    a3 = v21;
    v6 = v20;
    v9 = v19;
    v12 = v18;
    v8 = v36;
    swift_slowDealloc(v25, -1, -1);
  }

  v26 = swift_allocObject(&unk_10009A330, 32, 7);
  *(_QWORD *)(v26 + 16) = a2;
  *(_QWORD *)(v26 + 24) = a3;
  v27 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v12, 1, 1, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v28 = *(unsigned __int8 *)(v7 + 80);
  v29 = (v28 + 32) & ~v28;
  v30 = (v8 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = swift_allocObject(&unk_10009A358, v30 + 16, v28 | 7);
  *(_QWORD *)(v31 + 16) = 0;
  *(_QWORD *)(v31 + 24) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v31 + v29, v9, v6);
  v32 = (uint64_t (**)())(v31 + v30);
  *v32 = sub_10000C36C;
  v32[1] = (uint64_t (*)())v26;
  swift_retain(a3);
  v33 = sub_1000085A0((uint64_t)v12, (uint64_t)&unk_1000A0CB8, v31);
  return swift_release(v33);
}

uint64_t sub_10000BE14(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_10000BE2C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000BE54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)swift_task_alloc(dword_1000A0CB4);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_10000C360;
  return sub_1000086E4(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_10000BF00(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F78(&qword_1000A0CA8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000BF40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1000A0CC4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100008C64;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000A0CC0 + dword_1000A0CC0))(a1, v4);
}

_QWORD *sub_10000BFB0(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16]);
  return a1;
}

void sub_10000C00C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a3 >> 1 != 0xFFFFFFFF || (a15 & 0xFFFFFFFFFFFFFCFELL) != 0)
    sub_10000A364(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_10000C054(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WidgetEntry(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_10000C090(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_10000C0D0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10000C0F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for TimelineProviderContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10000C188(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)swift_task_alloc(dword_1000A0CE4);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_10000C360;
  return sub_100008328(a1, v6, v7, v8, v10, v11);
}

double sub_10000C234(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0x1FFFFFFFELL;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return result;
}

uint64_t sub_10000C264(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 112) & 0x301 | 0xC000000000000000;
  *(_QWORD *)(result + 16) &= 1uLL;
  *(_QWORD *)(result + 112) = v1;
  return result;
}

uint64_t sub_10000C288(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 112) & 0x301 | 0x8000000000000000;
  *(_QWORD *)(result + 16) &= 1uLL;
  *(_QWORD *)(result + 112) = v1;
  return result;
}

uint64_t sub_10000C2AC(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 112) & 0x301 | 0x4000000000000000;
  *(_QWORD *)(result + 16) &= 1uLL;
  *(_QWORD *)(result + 112) = v1;
  return result;
}

unint64_t sub_10000C2D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A0CF8;
  if (!qword_1000A0CF8)
  {
    v1 = sub_100005FC0(&qword_1000A0D00);
    sub_10000B8E4(&qword_1000A0C48, &qword_1000A0C40, (void (*)(void))sub_10000B814, (void (*)(void))sub_10000B8C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A0CF8);
  }
  return result;
}

uint64_t destroy for LargeTwoBookView(uint64_t a1)
{
  sub_1000075DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 112));
  return swift_release(*(_QWORD *)(a1 + 144));
}

uint64_t initializeWithCopy for LargeTwoBookView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v12 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v13 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v13;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_retain(v13);
  return a1;
}

uint64_t assignWithCopy for LargeTwoBookView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  sub_1000075DC(v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 72);
  v16 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v17 = *(_QWORD *)(a2 + 88);
  v18 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v19 = *(_QWORD *)(a2 + 112);
  v20 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v21 = *(_QWORD *)(a2 + 144);
  v22 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v21;
  swift_retain(v21);
  swift_release(v22);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return a1;
}

__n128 initializeWithTake for LargeTwoBookView(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for LargeTwoBookView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 32) = v4;
  sub_1000075DC(v5, v6, v7, v8, v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v13;
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 112);
  v16 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v15;
  swift_bridgeObjectRelease(v16);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v17 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release(v17);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for LargeTwoBookView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LargeTwoBookView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LargeTwoBookView()
{
  return &type metadata for LargeTwoBookView;
}

uint64_t sub_10000C784(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100083A50, 1);
}

uint64_t sub_10000C794@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v36[2];
  char v37;
  _BYTE v38[40];

  v3 = sub_100005F78(&qword_1000A0D08);
  __chkstk_darwin(v3);
  v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005F78(&qword_1000A0D10);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v5 = static HorizontalAlignment.leading.getter(v7);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 0;
  v10 = sub_100005F78(&qword_1000A0D18);
  v11 = sub_10000C9B8(v1, (uint64_t)&v5[*(int *)(v10 + 44)]);
  v12 = static Edge.Set.leading.getter(v11);
  v13 = *(_OWORD *)(v1 + 16);
  v36[0] = *(_OWORD *)v1;
  v36[1] = v13;
  v37 = *(_BYTE *)(v1 + 32);
  sub_100007984((uint64_t)v36, (uint64_t)v38, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v15 = v14;
  sub_10000DBE0((uint64_t)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v16 = EdgeInsets.init(_all:)(v15);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  sub_1000079C8((uint64_t)v5, (uint64_t)v9, &qword_1000A0D08);
  v23 = &v9[*(int *)(v6 + 36)];
  *v23 = v12;
  *((double *)v23 + 1) = v16;
  *((_QWORD *)v23 + 2) = v18;
  *((_QWORD *)v23 + 3) = v20;
  *((_QWORD *)v23 + 4) = v22;
  v23[40] = 0;
  v24 = sub_100007A0C((uint64_t)v5, &qword_1000A0D08);
  v25 = static Edge.Set.top.getter(v24);
  sub_10000DBE0((uint64_t)v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  v26 = sub_100024DBC();
  sub_10000DBE0((uint64_t)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v27 = EdgeInsets.init(_all:)(v26);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  sub_1000079C8((uint64_t)v9, a1, &qword_1000A0D10);
  v34 = a1 + *(int *)(sub_100005F78(&qword_1000A0D28) + 36);
  *(_BYTE *)v34 = v25;
  *(double *)(v34 + 8) = v27;
  *(_QWORD *)(v34 + 16) = v29;
  *(_QWORD *)(v34 + 24) = v31;
  *(_QWORD *)(v34 + 32) = v33;
  *(_BYTE *)(v34 + 40) = 0;
  return sub_100007A0C((uint64_t)v9, &qword_1000A0D10);
}

uint64_t sub_10000C9B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  double v22;
  __int128 v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v55[4];
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD v72[2];
  char v73;
  _BYTE v74[40];
  uint64_t v75;

  v4 = sub_100005F78(&qword_1000A0D30);
  __chkstk_darwin(v4);
  v6 = &v55[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100005F78(&qword_1000A0D38);
  v8 = __chkstk_darwin(v7);
  v10 = &v55[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __chkstk_darwin(v8);
  v13 = &v55[-v12];
  v14 = *(_QWORD *)(a1 + 88);
  v64 = sub_1000560D8(v11);
  v63 = v15;
  v16 = *(_QWORD *)(a1 + 128);
  v17 = *(double *)(a1 + 152);
  v18 = *(double *)(a1 + 160);
  v19 = static HorizontalAlignment.center.getter();
  v20 = static VerticalAlignment.firstTextBaseline.getter();
  v21 = _FrameLayout.init(width:height:alignment:)(&v66, 0, 1, v16, 0, v19, v20);
  v62 = v66;
  v61 = v67;
  v60 = v68;
  v59 = v69;
  v58 = v70;
  v57 = v71;
  v56 = static Edge.Set.trailing.getter(v21);
  v22 = v17 + v18;
  v23 = *(_OWORD *)(a1 + 16);
  v72[0] = *(_OWORD *)a1;
  v72[1] = v23;
  v73 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v72, (uint64_t)v74, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v25 = v24;
  sub_10000DBE0((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v26 = EdgeInsets.init(_all:)(v22 + v25);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_10000DBE0((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  v33 = sub_100024DBC();
  v34 = sub_10000DBE0((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v34);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  sub_100005F78(&qword_1000A0D40);
  v75 = v14;
  v65 = v14;
  KeyPath = swift_getKeyPath(&unk_10007F4B8);
  v36 = swift_allocObject(&unk_10009A548, 184, 7);
  v37 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v36 + 144) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v36 + 160) = v37;
  *(_QWORD *)(v36 + 176) = *(_QWORD *)(a1 + 160);
  v38 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v36 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v36 + 96) = v38;
  v39 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v36 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v36 + 128) = v39;
  v40 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v36 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v36 + 32) = v40;
  v41 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v36 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v36 + 64) = v41;
  sub_10000DC6C(&v75);
  sub_10000DC94(a1);
  v42 = sub_100005F78(&qword_1000A0D48);
  v43 = sub_100005F78(&qword_1000A0D50);
  v44 = sub_100007F64(&qword_1000A0D58, &qword_1000A0D48, (uint64_t)&protocol conformance descriptor for [A]);
  v45 = sub_10000DD08();
  v46 = ForEach<>.init(_:id:content:)(&v65, KeyPath, sub_10000DC64, v36, v42, v43, v44, &protocol witness table for String, v45);
  v47 = static Alignment.center.getter(v46);
  sub_100020E5C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v10, 0.0, 1, 0.0, 1, v47, v48);
  sub_100007A0C((uint64_t)v6, &qword_1000A0D30);
  sub_100007984((uint64_t)v10, (uint64_t)v13, &qword_1000A0D38);
  sub_10000DBE0((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  v49 = sub_100024DBC();
  sub_10000DBE0((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  sub_1000079C8((uint64_t)v13, (uint64_t)v10, &qword_1000A0D38);
  v50 = v63;
  *(_QWORD *)a2 = v64;
  *(_QWORD *)(a2 + 8) = v50;
  *(_QWORD *)(a2 + 16) = v62;
  *(_BYTE *)(a2 + 24) = v61;
  *(_QWORD *)(a2 + 32) = v60;
  *(_BYTE *)(a2 + 40) = v59;
  v51 = v57;
  *(_QWORD *)(a2 + 48) = v58;
  *(_QWORD *)(a2 + 56) = v51;
  *(_BYTE *)(a2 + 64) = v56;
  *(double *)(a2 + 72) = v26;
  *(_QWORD *)(a2 + 80) = v28;
  *(_QWORD *)(a2 + 88) = v30;
  *(_QWORD *)(a2 + 96) = v32;
  *(_BYTE *)(a2 + 104) = 0;
  *(double *)(a2 + 112) = v33;
  *(_BYTE *)(a2 + 120) = 0;
  v52 = sub_100005F78(&qword_1000A0D98);
  sub_1000079C8((uint64_t)v10, a2 + *(int *)(v52 + 64), &qword_1000A0D38);
  v53 = a2 + *(int *)(v52 + 80);
  *(double *)v53 = v49;
  *(_BYTE *)(v53 + 8) = 0;
  swift_bridgeObjectRetain(v50);
  sub_100007A0C((uint64_t)v13, &qword_1000A0D38);
  sub_100007A0C((uint64_t)v10, &qword_1000A0D38);
  return swift_bridgeObjectRelease(v50);
}

uint64_t sub_10000CE78@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t OpaqueTypeConformance2;
  unint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  _QWORD v58[2];
  _OWORD v59[2];
  char v60;
  _BYTE v61[40];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  char v73;

  v56 = a3;
  v5 = type metadata accessor for AccessibilityChildBehavior(0);
  v52 = *(_QWORD *)(v5 - 8);
  v53 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005F78(&qword_1000A0D90);
  __chkstk_darwin(v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005F78(&qword_1000A0D80);
  __chkstk_darwin(v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100005F78(&qword_1000A0D68);
  __chkstk_darwin(v51);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005F78(&qword_1000A0DA0);
  v54 = *(_QWORD *)(v16 - 8);
  v55 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100005F78(&qword_1000A0D50);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a1[3];
  v64 = a1[2];
  v65 = v23;
  v66 = a1[4];
  v67 = *((_BYTE *)a1 + 80);
  v24 = a1[1];
  v62 = *a1;
  v63 = v24;
  *(_QWORD *)v10 = static VerticalAlignment.center.getter(v20);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  v25 = sub_100005F78(&qword_1000A0DA8);
  v26 = sub_10000D2D0(a2, (uint64_t)&v62, (uint64_t)&v10[*(int *)(v25 + 44)]);
  LOBYTE(a1) = static Edge.Set.trailing.getter(v26);
  v27 = *(_OWORD *)(a2 + 16);
  v59[0] = *(_OWORD *)a2;
  v59[1] = v27;
  v60 = *(_BYTE *)(a2 + 32);
  sub_100007984((uint64_t)v59, (uint64_t)v61, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v29 = v28;
  sub_10000DBE0((uint64_t)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v30 = EdgeInsets.init(_all:)(v29);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  sub_1000079C8((uint64_t)v10, (uint64_t)v13, &qword_1000A0D90);
  v37 = &v13[*(int *)(v11 + 36)];
  *v37 = (char)a1;
  *((double *)v37 + 1) = v30;
  *((_QWORD *)v37 + 2) = v32;
  *((_QWORD *)v37 + 3) = v34;
  *((_QWORD *)v37 + 4) = v36;
  v37[40] = 0;
  v38 = sub_100007A0C((uint64_t)v10, &qword_1000A0D90);
  v39 = static Alignment.leading.getter(v38);
  sub_100020EC0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, 0.0, 1, v39, v40);
  sub_100007A0C((uint64_t)v13, &qword_1000A0D80);
  v70 = v64;
  v71 = v65;
  v72 = v66;
  v73 = v67;
  v68 = v62;
  v69 = v63;
  v41 = sub_100013C4C();
  if ((v41 & 1) != 0)
    static AccessibilityChildBehavior.contain.getter();
  else
    static AccessibilityChildBehavior.combine.getter(v41);
  v42 = sub_10000E208(&qword_1000A0D70, &qword_1000A0D68, (void (*)(void))sub_10000DDDC);
  v43 = v51;
  View.accessibilityElement(children:)(v7, v51, v42);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v7, v53);
  sub_100007A0C((uint64_t)v15, &qword_1000A0D68);
  if ((sub_100013C4C() & 1) != 0)
  {
    v44 = 0;
    v45 = 0xE000000000000000;
  }
  else
  {
    v44 = sub_100051294(1);
    v45 = v46;
  }
  v58[0] = v44;
  v58[1] = v45;
  v57[0] = v43;
  v57[1] = v42;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v57, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v48 = sub_1000075E8();
  v49 = v55;
  View.accessibilityLabel<A>(_:)(v58, v55, &type metadata for String, OpaqueTypeConformance2, v48);
  swift_bridgeObjectRelease(v45);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v18, v49);
  return sub_100007984((uint64_t)v22, v56, &qword_1000A0D50);
}

uint64_t sub_10000D2D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  char v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  _QWORD *v39;
  char v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t inited;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  _QWORD v107[2];
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  char v114;
  _OWORD v115[4];
  __int128 v116;

  v104 = a3;
  v5 = sub_100005F78(&qword_1000A0DB0);
  v100 = *(_QWORD *)(v5 - 8);
  v101 = v5;
  __chkstk_darwin(v5);
  v106 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005F78(&qword_1000A0DB8);
  v8 = __chkstk_darwin(v7);
  v103 = (uint64_t)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v99 = (char *)&v93 - v11;
  __chkstk_darwin(v10);
  v102 = (uint64_t)&v93 - v12;
  v96 = type metadata accessor for URL(0);
  v94 = *(_QWORD *)(v96 - 8);
  v13 = __chkstk_darwin(v96);
  v97 = (uint64_t)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v93 - v15;
  v17 = (int *)type metadata accessor for BookCoverView(0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v93 - v21;
  v95 = sub_100005F78(&qword_1000A0DC0);
  v23 = __chkstk_darwin(v95);
  v98 = (uint64_t)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v93 - v26;
  __chkstk_darwin(v25);
  v105 = (uint64_t)&v93 - v28;
  v29 = *(_OWORD *)(a1 + 56);
  v30 = *(_OWORD *)(a1 + 88);
  v115[2] = *(_OWORD *)(a1 + 72);
  v115[3] = v30;
  v116 = *(_OWORD *)(a1 + 104);
  v115[0] = *(_OWORD *)(a1 + 40);
  v115[1] = v29;
  sub_10000DE60(v115);
  sub_100006330(a2, (uint64_t)v16);
  sub_10000DEA8(v115);
  v31 = *(_OWORD *)(a2 + 48);
  v111 = *(_OWORD *)(a2 + 32);
  v112 = v31;
  v113 = *(_OWORD *)(a2 + 64);
  v114 = *(_BYTE *)(a2 + 80);
  v32 = *(_OWORD *)(a2 + 16);
  v109 = *(_OWORD *)a2;
  v110 = v32;
  v33 = sub_100013C4C();
  if (*((_QWORD *)&v116 + 1))
  {
    if (v116 == v111)
      v34 = 1;
    else
      v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v111, *((_QWORD *)&v111 + 1), v116, *((_QWORD *)&v116 + 1), 0);
  }
  else
  {
    v34 = 0;
  }
  *(_QWORD *)v20 = swift_getKeyPath(&unk_10007F4E0);
  v35 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v20, v35, 0);
  (*(void (**)(char *, char *, uint64_t))(v94 + 32))(&v20[v17[5]], v16, v96);
  v20[v17[6]] = v33 & 1;
  v36 = &v20[v17[7]];
  v37 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v36 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v36 + 3) = v37;
  *((_OWORD *)v36 + 4) = *(_OWORD *)(a2 + 64);
  v36[80] = *(_BYTE *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v36 = *(_OWORD *)a2;
  *((_OWORD *)v36 + 1) = v38;
  v20[v17[8]] = v34 & 1;
  v20[v17[9]] = 0;
  sub_10000DEF8((uint64_t)v20, (uint64_t)v22);
  v39 = sub_10000DF3C((_QWORD *)a2);
  v40 = static Edge.Set.trailing.getter(v39);
  v41 = EdgeInsets.init(_all:)(*(double *)(a1 + 136));
  v43 = v42;
  v45 = v44;
  v47 = v46;
  sub_10000DF98((uint64_t)v22, (uint64_t)v27);
  v48 = &v27[*(int *)(v95 + 36)];
  *v48 = v40;
  *((double *)v48 + 1) = v41;
  *((_QWORD *)v48 + 2) = v43;
  *((_QWORD *)v48 + 3) = v45;
  *((_QWORD *)v48 + 4) = v47;
  v48[40] = 0;
  sub_10000DFDC((uint64_t)v22);
  sub_100007984((uint64_t)v27, v105, &qword_1000A0DC0);
  sub_10000DE60(v115);
  v49 = v97;
  sub_100006330(a2, v97);
  v50 = sub_10000DEA8(v115);
  __chkstk_darwin(v50);
  *(&v93 - 2) = a2;
  *(&v93 - 1) = a1;
  v51 = type metadata accessor for LabelView(0);
  v52 = sub_100003DCC((unint64_t *)&qword_1000A0DC8, type metadata accessor for LabelView, (uint64_t)&unk_100082CF0);
  Link.init(destination:label:)(v49, sub_10000E018, &v93 - 4, v51, v52);
  v53 = sub_100005F78(&qword_1000A0DD0);
  inited = swift_initStackObject(v53, &v108);
  *(_OWORD *)(inited + 16) = xmmword_10007F170;
  v55 = v109;
  *(_OWORD *)(inited + 32) = v109;
  swift_bridgeObjectRetain(*((_QWORD *)&v55 + 1));
  v57 = sub_100051468(0);
  v58 = v56;
  *(_QWORD *)(inited + 48) = v57;
  *(_QWORD *)(inited + 56) = v56;
  if (!*((_QWORD *)&v55 + 1))
  {
    v59 = (char *)_swiftEmptyArrayStorage;
    if (!v56)
      goto LABEL_17;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain(*((_QWORD *)&v55 + 1));
  v59 = sub_1000408F8(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v61 = *((_QWORD *)v59 + 2);
  v60 = *((_QWORD *)v59 + 3);
  if (v61 >= v60 >> 1)
    v59 = sub_1000408F8((char *)(v60 > 1), v61 + 1, 1, v59);
  *((_QWORD *)v59 + 2) = v61 + 1;
  *(_OWORD *)&v59[16 * v61 + 32] = v55;
  if (v58)
  {
LABEL_12:
    swift_bridgeObjectRetain(v58);
    if ((swift_isUniquelyReferenced_nonNull_native(v59) & 1) == 0)
      v59 = sub_1000408F8(0, *((_QWORD *)v59 + 2) + 1, 1, v59);
    v63 = *((_QWORD *)v59 + 2);
    v62 = *((_QWORD *)v59 + 3);
    if (v63 >= v62 >> 1)
      v59 = sub_1000408F8((char *)(v62 > 1), v63 + 1, 1, v59);
    *((_QWORD *)v59 + 2) = v63 + 1;
    v64 = &v59[16 * v63];
    *((_QWORD *)v64 + 4) = v57;
    *((_QWORD *)v64 + 5) = v58;
  }
LABEL_17:
  swift_release(inited);
  v65 = *((_QWORD *)v59 + 2);
  if (v65)
  {
    v66 = v59 + 40;
    v67 = _swiftEmptyArrayStorage;
    do
    {
      v72 = *(v66 - 1);
      v71 = *v66;
      v73 = HIBYTE(*v66) & 0xFLL;
      if ((*v66 & 0x2000000000000000) == 0)
        v73 = v72 & 0xFFFFFFFFFFFFLL;
      if (v73)
      {
        swift_bridgeObjectRetain(*v66);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v67);
        v107[0] = v67;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10005C3B8(0, v67[2] + 1, 1);
          v67 = (_QWORD *)v107[0];
        }
        v69 = v67[2];
        v68 = v67[3];
        if (v69 >= v68 >> 1)
        {
          sub_10005C3B8(v68 > 1, v69 + 1, 1);
          v67 = (_QWORD *)v107[0];
        }
        v67[2] = v69 + 1;
        v70 = &v67[2 * v69];
        v70[4] = v72;
        v70[5] = v71;
      }
      v66 += 2;
      --v65;
    }
    while (v65);
  }
  else
  {
    v67 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v59);
  v107[0] = v67;
  v75 = sub_100005F78(&qword_1000A0DD8);
  v76 = sub_100007F64(&qword_1000A0DE0, &qword_1000A0DD8, (uint64_t)&protocol conformance descriptor for [A]);
  v77 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v75, v76);
  v79 = v78;
  swift_release(v67);
  v107[0] = v77;
  v107[1] = v79;
  v80 = sub_100007F64(&qword_1000A0DE8, &qword_1000A0DB0, (uint64_t)&protocol conformance descriptor for Link<A>);
  v81 = sub_1000075E8();
  v82 = (uint64_t)v99;
  v83 = v101;
  v84 = v80;
  v85 = v106;
  View.accessibilityLabel<A>(_:)(v107, v101, &type metadata for String, v84, v81);
  swift_bridgeObjectRelease(v79);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v85, v83);
  v86 = v102;
  sub_100007984(v82, v102, &qword_1000A0DB8);
  v87 = v105;
  v88 = v98;
  sub_1000079C8(v105, v98, &qword_1000A0DC0);
  v89 = v103;
  sub_1000079C8(v86, v103, &qword_1000A0DB8);
  v90 = v104;
  sub_1000079C8(v88, v104, &qword_1000A0DC0);
  v91 = sub_100005F78(&qword_1000A0DF0);
  sub_1000079C8(v89, v90 + *(int *)(v91 + 48), &qword_1000A0DB8);
  sub_100007A0C(v86, &qword_1000A0DB8);
  sub_100007A0C(v87, &qword_1000A0DC0);
  sub_100007A0C(v89, &qword_1000A0DB8);
  return sub_100007A0C(v88, &qword_1000A0DC0);
}

int *sub_10000DAD4@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *result;
  uint64_t *v13;
  char *v14;

  v4 = sub_100051468(1);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 120);
  v8 = *(_QWORD *)(a1 + 144);
  v9 = swift_retain(v8);
  v10 = static HierarchicalShapeStyle.primary.getter(v9);
  *a2 = swift_getKeyPath(&unk_10007F4E0);
  v11 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(a2, v11, 0);
  result = (int *)type metadata accessor for LabelView(0);
  v13 = (_QWORD *)((char *)a2 + result[5]);
  *v13 = v4;
  v13[1] = v6;
  *(_QWORD *)((char *)a2 + result[6]) = v8;
  v14 = (char *)a2 + result[7];
  *(_QWORD *)v14 = v10;
  *((_QWORD *)v14 + 1) = v7;
  *((_WORD *)v14 + 8) = 0;
  return result;
}

uint64_t sub_10000DB88@<X0>(uint64_t a1@<X8>)
{
  return sub_10000C794(a1);
}

uint64_t sub_10000DBE0(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t sub_10000DC18()
{
  uint64_t v0;

  sub_1000075DC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_release(*(_QWORD *)(v0 + 160));
  return swift_deallocObject(v0, 184, 7);
}

uint64_t sub_10000DC64@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10000CE78(a1, v2 + 16, a2);
}

_QWORD *sub_10000DC6C(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_10000DC94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 144);
  sub_10000BA78(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

unint64_t sub_10000DD08()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000A0D60;
  if (!qword_1000A0D60)
  {
    v1 = sub_100005FC0(&qword_1000A0D50);
    v2[0] = sub_100005FC0(&qword_1000A0D68);
    v2[1] = sub_10000E208(&qword_1000A0D70, &qword_1000A0D68, (void (*)(void))sub_10000DDDC);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100003DCC((unint64_t *)&qword_1000A0A38, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A0D60);
  }
  return result;
}

unint64_t sub_10000DDDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A0D78;
  if (!qword_1000A0D78)
  {
    v1 = sub_100005FC0(&qword_1000A0D80);
    sub_100007F64(&qword_1000A0D88, &qword_1000A0D90, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A0D78);
  }
  return result;
}

_QWORD *sub_10000DE60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[4];
  v3 = a1[6];
  swift_bridgeObjectRetain(a1[9]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *sub_10000DEA8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[4];
  v3 = a1[9];
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t sub_10000DEF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BookCoverView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10000DF3C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  v2 = a1[1];
  v3 = a1[5];
  v4 = (void *)a1[6];
  v5 = (void *)a1[7];
  swift_bridgeObjectRetain(a1[9]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  v6 = v4;
  v7 = v5;
  return a1;
}

uint64_t sub_10000DF98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BookCoverView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000DFDC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BookCoverView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

int *sub_10000E018@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10000DAD4(*(_QWORD *)(v1 + 24), a1);
}

uint64_t destroy for LargeTwoBookView.ViewConfiguration(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for LargeTwoBookView.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for LargeTwoBookView.ViewConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = a2[3];
  v5 = a1[3];
  a1[3] = v4;
  swift_retain(v4);
  swift_release(v5);
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

__n128 initializeWithTake for LargeTwoBookView.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LargeTwoBookView.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v4);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for LargeTwoBookView.ViewConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LargeTwoBookView.ViewConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LargeTwoBookView.ViewConfiguration()
{
  return &type metadata for LargeTwoBookView.ViewConfiguration;
}

uint64_t sub_10000E1D4()
{
  return sub_10000E208(&qword_1000A0DF8, &qword_1000A0D28, (void (*)(void))sub_10000E270);
}

uint64_t sub_10000E208(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005FC0(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000E270()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A0E00;
  if (!qword_1000A0E00)
  {
    v1 = sub_100005FC0(&qword_1000A0D10);
    sub_100007F64(&qword_1000A0E08, &qword_1000A0D08, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A0E00);
  }
  return result;
}

uint64_t *sub_10000E2F8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    *a1 = *a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = a3[8];
    v16 = a3[9];
    v17 = *(uint64_t *)((char *)a2 + v15);
    *(uint64_t *)((char *)v4 + v15) = v17;
    *(uint64_t *)((char *)v4 + v16) = *(uint64_t *)((char *)a2 + v16);
    v18 = a3[11];
    *(_DWORD *)((char *)v4 + a3[10]) = *(_DWORD *)((char *)a2 + a3[10]);
    v19 = (uint64_t *)((char *)v4 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    swift_retain(v17);
    swift_bridgeObjectRetain(v21);
  }
  return v4;
}

uint64_t sub_10000E400(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_release(*(_QWORD *)(a1 + a2[8]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
}

_QWORD *sub_10000E488(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  v14 = a3[8];
  v15 = a3[9];
  v16 = *(_QWORD *)((char *)a2 + v14);
  *(_QWORD *)((char *)a1 + v14) = v16;
  *(_QWORD *)((char *)a1 + v15) = *(_QWORD *)((char *)a2 + v15);
  v17 = a3[11];
  *(_DWORD *)((char *)a1 + a3[10]) = *(_DWORD *)((char *)a2 + a3[10]);
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  swift_retain(v16);
  swift_bridgeObjectRetain(v20);
  return a1;
}

_QWORD *sub_10000E564(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v10 = a3[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[8];
  v15 = *(_QWORD *)((char *)a2 + v14);
  v16 = *(_QWORD *)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = v15;
  swift_retain(v15);
  swift_release(v16);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_DWORD *)((char *)a1 + a3[10]) = *(_DWORD *)((char *)a2 + a3[10]);
  v17 = a3[11];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

_QWORD *sub_10000E668(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  v15 = a3[11];
  *(_DWORD *)((char *)a1 + a3[10]) = *(_DWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  return a1;
}

_QWORD *sub_10000E730(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[8];
  v15 = *(_QWORD *)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  swift_release(v15);
  v16 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_DWORD *)((char *)a1 + v16) = *(_DWORD *)((char *)a2 + v16);
  v17 = a3[11];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  v22 = v18[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease(v22);
  return a1;
}

uint64_t sub_10000E814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000E820);
}

uint64_t sub_10000E820(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for BlendMode(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[8]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_10000E8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000E8D0);
}

uint64_t sub_10000E8D0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for ColorScheme(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = type metadata accessor for BlendMode(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[8]) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for TodayReadingGoalView.ViewConfiguration(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A0E68, (uint64_t)&nominal type descriptor for TodayReadingGoalView.ViewConfiguration);
}

uint64_t sub_10000E984(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[8];

  v5[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for ColorScheme(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for BlendMode(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      v5[4] = (char *)&value witness table for Builtin.NativeObject + 64;
      v5[5] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[6] = (char *)&value witness table for Builtin.Int32 + 64;
      v5[7] = &unk_10007F548;
      swift_initStructMetadata(a1, 256, 8, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t sub_10000EA4C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v34 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v34 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v34);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_BYTE *)(a2 + 32);
    sub_10000BA78(*(_QWORD *)a2, v8, v9, v10, v11);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 32) = v11;
    v12 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v12;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v13 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v13;
    v14 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v14;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    v15 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v15;
    v16 = *(int *)(a3 + 24);
    v17 = a1 + v16;
    v18 = a2 + v16;
    *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
    v19 = (int *)type metadata accessor for TodayReadingGoalView.ViewConfiguration(0);
    v20 = v19[5];
    v36 = v17 + v20;
    v21 = v18 + v20;
    v22 = type metadata accessor for ColorScheme(0);
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    v23(v36, v21, v22);
    *(_QWORD *)(v17 + v19[6]) = *(_QWORD *)(v18 + v19[6]);
    v24 = v19[7];
    v25 = v17 + v24;
    v26 = v18 + v24;
    v27 = type metadata accessor for BlendMode(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = v19[8];
    v29 = *(_QWORD *)(v18 + v28);
    *(_QWORD *)(v17 + v28) = v29;
    *(_QWORD *)(v17 + v19[9]) = *(_QWORD *)(v18 + v19[9]);
    *(_DWORD *)(v17 + v19[10]) = *(_DWORD *)(v18 + v19[10]);
    v30 = v19[11];
    v31 = (_QWORD *)(v17 + v30);
    v32 = (_QWORD *)(v18 + v30);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    swift_retain(v29);
    swift_bridgeObjectRetain(v33);
  }
  return a1;
}

uint64_t sub_10000EC10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1000075DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 112));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = (int *)type metadata accessor for TodayReadingGoalView.ViewConfiguration(0);
  v6 = v4 + v5[5];
  v7 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = v4 + v5[7];
  v9 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release(*(_QWORD *)(v4 + v5[8]));
  return swift_bridgeObjectRelease(*(_QWORD *)(v4 + v5[11] + 8));
}

uint64_t sub_10000ECD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v7, v8, v9, v10);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  v13 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v13;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v14;
  v15 = *(int *)(a3 + 24);
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v18 = (int *)type metadata accessor for TodayReadingGoalView.ViewConfiguration(0);
  v19 = v18[5];
  v34 = v16 + v19;
  v20 = v17 + v19;
  v21 = type metadata accessor for ColorScheme(0);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  v22(v34, v20, v21);
  *(_QWORD *)(v16 + v18[6]) = *(_QWORD *)(v17 + v18[6]);
  v23 = v18[7];
  v24 = v16 + v23;
  v25 = v17 + v23;
  v26 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = v18[8];
  v28 = *(_QWORD *)(v17 + v27);
  *(_QWORD *)(v16 + v27) = v28;
  *(_QWORD *)(v16 + v18[9]) = *(_QWORD *)(v17 + v18[9]);
  *(_DWORD *)(v16 + v18[10]) = *(_DWORD *)(v17 + v18[10]);
  v29 = v18[11];
  v30 = (_QWORD *)(v16 + v29);
  v31 = (_QWORD *)(v17 + v29);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  swift_retain(v28);
  swift_bridgeObjectRetain(v32);
  return a1;
}

uint64_t sub_10000EE70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v7, v8, v9, v10);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  sub_1000075DC(v11, v12, v13, v14, v15);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v17 = *(_QWORD *)(a2 + 72);
  v18 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v19 = *(_QWORD *)(a2 + 88);
  v20 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v21 = *(_QWORD *)(a2 + 112);
  v22 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = *(int *)(a3 + 24);
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);
  v26 = (int *)type metadata accessor for TodayReadingGoalView.ViewConfiguration(0);
  v27 = v26[5];
  v28 = v24 + v27;
  v29 = v25 + v27;
  v30 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  *(_QWORD *)(v24 + v26[6]) = *(_QWORD *)(v25 + v26[6]);
  v31 = v26[7];
  v32 = v24 + v31;
  v33 = v25 + v31;
  v34 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = v26[8];
  v36 = *(_QWORD *)(v25 + v35);
  v37 = *(_QWORD *)(v24 + v35);
  *(_QWORD *)(v24 + v35) = v36;
  swift_retain(v36);
  swift_release(v37);
  *(_QWORD *)(v24 + v26[9]) = *(_QWORD *)(v25 + v26[9]);
  *(_DWORD *)(v24 + v26[10]) = *(_DWORD *)(v25 + v26[10]);
  v38 = v26[11];
  v39 = (_QWORD *)(v24 + v38);
  v40 = (_QWORD *)(v25 + v38);
  *v39 = *v40;
  v41 = v40[1];
  v42 = v39[1];
  v39[1] = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease(v42);
  return a1;
}

uint64_t sub_10000F054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_QWORD *)(a1 + v5) = *(_QWORD *)(a2 + v5);
  v8 = (int *)type metadata accessor for TodayReadingGoalView.ViewConfiguration(0);
  v9 = v8[5];
  v10 = v6 + v9;
  v11 = v7 + v9;
  v12 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  *(_QWORD *)(v6 + v8[6]) = *(_QWORD *)(v7 + v8[6]);
  v13 = v8[7];
  v14 = v6 + v13;
  v15 = v7 + v13;
  v16 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  *(_QWORD *)(v6 + v8[8]) = *(_QWORD *)(v7 + v8[8]);
  *(_QWORD *)(v6 + v8[9]) = *(_QWORD *)(v7 + v8[9]);
  *(_DWORD *)(v6 + v8[10]) = *(_DWORD *)(v7 + v8[10]);
  *(_OWORD *)(v6 + v8[11]) = *(_OWORD *)(v7 + v8[11]);
  return a1;
}

uint64_t sub_10000F170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 32) = v6;
  sub_1000075DC(v7, v8, v9, v10, v11);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v13;
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v15;
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v17;
  swift_bridgeObjectRelease(v18);
  v19 = *(int *)(a3 + 24);
  v20 = a1 + v19;
  v21 = a2 + v19;
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  v22 = (int *)type metadata accessor for TodayReadingGoalView.ViewConfiguration(0);
  v23 = v22[5];
  v24 = v20 + v23;
  v25 = v21 + v23;
  v26 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  *(_QWORD *)(v20 + v22[6]) = *(_QWORD *)(v21 + v22[6]);
  v27 = v22[7];
  v28 = v20 + v27;
  v29 = v21 + v27;
  v30 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  v31 = v22[8];
  v32 = *(_QWORD *)(v20 + v31);
  *(_QWORD *)(v20 + v31) = *(_QWORD *)(v21 + v31);
  swift_release(v32);
  *(_QWORD *)(v20 + v22[9]) = *(_QWORD *)(v21 + v22[9]);
  *(_DWORD *)(v20 + v22[10]) = *(_DWORD *)(v21 + v22[10]);
  v33 = v22[11];
  v34 = (_QWORD *)(v20 + v33);
  v35 = (uint64_t *)(v21 + v33);
  v37 = *v35;
  v36 = v35[1];
  v38 = v34[1];
  *v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease(v38);
  return a1;
}

uint64_t sub_10000F2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000F2F4);
}

uint64_t sub_10000F2F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 72);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for TodayReadingGoalView.ViewConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_10000F370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000F37C);
}

uint64_t sub_10000F37C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 72) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for TodayReadingGoalView.ViewConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TodayReadingGoalView(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A0F10, (uint64_t)&nominal type descriptor for TodayReadingGoalView);
}

uint64_t sub_10000F404(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "!";
  v4[1] = L"P";
  result = type metadata accessor for TodayReadingGoalView.ViewConfiguration(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10000F480(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100083AC8, 1);
}

uint64_t sub_10000F490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  *a3 = static Alignment.center.getter(a1);
  a3[1] = v6;
  v7 = sub_100005F78(&qword_1000A0F50);
  return sub_10000F4E4(a2, a1, (uint64_t)a3 + *(int *)(v7 + 44));
}

uint64_t sub_10000F4E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  double v65;
  double v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD v91[2];
  char v92;
  _OWORD v93[2];
  char v94;
  _OWORD v95[2];
  char v96;
  _OWORD v97[2];
  char v98;
  _BYTE v99[40];
  _BYTE v100[40];
  _BYTE v101[40];
  _BYTE v102[48];

  v90 = a3;
  v5 = sub_100005F78(&qword_1000A0F58);
  __chkstk_darwin(v5);
  v7 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100005F78(&qword_1000A0F60);
  __chkstk_darwin(v82);
  v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100005F78(&qword_1000A0F68);
  __chkstk_darwin(v85);
  v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100005F78(&qword_1000A0F70);
  __chkstk_darwin(v86);
  v83 = (uint64_t)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100005F78(&qword_1000A0F78);
  v13 = __chkstk_darwin(v89);
  v15 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v88 = (uint64_t)&v81 - v16;
  v17 = sub_100005F78(&qword_1000A0F80);
  v18 = __chkstk_darwin(v17);
  v87 = (uint64_t)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v81 - v21;
  v84 = (uint64_t)&v81 - v21;
  v23 = GeometryProxy.size.getter(v20);
  v25 = sub_10000FA98((uint64_t)v22, v23, v24);
  *(_QWORD *)v7 = static HorizontalAlignment.center.getter(v25);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 1;
  v26 = sub_100005F78(&qword_1000A0F88);
  v27 = sub_100010114(a1, a2, (uint64_t)&v7[*(int *)(v26 + 44)]);
  LOBYTE(a2) = static Edge.Set.leading.getter(v27);
  v28 = *(_OWORD *)(a1 + 16);
  v97[0] = *(_OWORD *)a1;
  v97[1] = v28;
  v98 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v97, (uint64_t)v99, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v30 = v29;
  sub_10000DBE0((uint64_t)v97, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v31 = EdgeInsets.init(_all:)(v30);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  sub_1000079C8((uint64_t)v7, (uint64_t)v9, &qword_1000A0F58);
  v38 = &v9[*(int *)(v82 + 36)];
  *v38 = a2;
  *((double *)v38 + 1) = v31;
  *((_QWORD *)v38 + 2) = v33;
  *((_QWORD *)v38 + 3) = v35;
  *((_QWORD *)v38 + 4) = v37;
  v38[40] = 0;
  v39 = sub_100007A0C((uint64_t)v7, &qword_1000A0F58);
  LOBYTE(a2) = static Edge.Set.trailing.getter(v39);
  v40 = *(_OWORD *)(a1 + 16);
  v95[0] = *(_OWORD *)a1;
  v95[1] = v40;
  v96 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v95, (uint64_t)v100, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v100, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v42 = v41;
  sub_10000DBE0((uint64_t)v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v43 = EdgeInsets.init(_all:)(v42);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  sub_1000079C8((uint64_t)v9, (uint64_t)v11, &qword_1000A0F60);
  v50 = &v11[*(int *)(v85 + 36)];
  *v50 = a2;
  *((double *)v50 + 1) = v43;
  *((_QWORD *)v50 + 2) = v45;
  *((_QWORD *)v50 + 3) = v47;
  *((_QWORD *)v50 + 4) = v49;
  v50[40] = 0;
  v51 = sub_100007A0C((uint64_t)v9, &qword_1000A0F60);
  LOBYTE(a2) = static Edge.Set.top.getter(v51);
  v52 = *(_OWORD *)(a1 + 16);
  v93[0] = *(_OWORD *)a1;
  v93[1] = v52;
  v94 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v93, (uint64_t)v101, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v101, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  v53 = sub_100024DBC();
  sub_10000DBE0((uint64_t)v93, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v54 = EdgeInsets.init(_all:)(v53);
  v56 = v55;
  v58 = v57;
  v60 = v59;
  v61 = v83;
  sub_1000079C8((uint64_t)v11, v83, &qword_1000A0F68);
  v62 = v61 + *(int *)(v86 + 36);
  *(_BYTE *)v62 = a2;
  *(double *)(v62 + 8) = v54;
  *(_QWORD *)(v62 + 16) = v56;
  *(_QWORD *)(v62 + 24) = v58;
  *(_QWORD *)(v62 + 32) = v60;
  *(_BYTE *)(v62 + 40) = 0;
  v63 = sub_100007A0C((uint64_t)v11, &qword_1000A0F68);
  LOBYTE(a2) = static Edge.Set.bottom.getter(v63);
  v64 = *(_OWORD *)(a1 + 16);
  v91[0] = *(_OWORD *)a1;
  v91[1] = v64;
  v92 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v91, (uint64_t)v102, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v102, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v66 = v65;
  sub_10000DBE0((uint64_t)v91, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v67 = EdgeInsets.init(_all:)(v66 + -4.0);
  v69 = v68;
  v71 = v70;
  v73 = v72;
  sub_1000079C8(v61, (uint64_t)v15, &qword_1000A0F70);
  v74 = &v15[*(int *)(v89 + 36)];
  *v74 = a2;
  *((double *)v74 + 1) = v67;
  *((_QWORD *)v74 + 2) = v69;
  *((_QWORD *)v74 + 3) = v71;
  *((_QWORD *)v74 + 4) = v73;
  v74[40] = 0;
  sub_100007A0C(v61, &qword_1000A0F70);
  v75 = v88;
  sub_100007984((uint64_t)v15, v88, &qword_1000A0F78);
  v76 = v84;
  v77 = v87;
  sub_1000079C8(v84, v87, &qword_1000A0F80);
  sub_1000079C8(v75, (uint64_t)v15, &qword_1000A0F78);
  v78 = v90;
  sub_1000079C8(v77, v90, &qword_1000A0F80);
  v79 = sub_100005F78(&qword_1000A0F90);
  sub_1000079C8((uint64_t)v15, v78 + *(int *)(v79 + 48), &qword_1000A0F78);
  sub_100007A0C(v75, &qword_1000A0F78);
  sub_100007A0C(v76, &qword_1000A0F80);
  sub_100007A0C((uint64_t)v15, &qword_1000A0F78);
  return sub_100007A0C(v77, &qword_1000A0F80);
}

uint64_t sub_10000FA98@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t inited;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  __int128 *v85;
  unint64_t v86;
  __int128 v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  _QWORD v95[4];
  uint64_t v96;
  uint64_t v97;
  _OWORD v98[5];
  _OWORD v99[5];
  _OWORD v100[6];

  v4 = v3;
  v92 = a1;
  v7 = type metadata accessor for URL(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100005F78(&qword_1000A1088);
  v90 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v11 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100005F78(&qword_1000A0F80);
  __chkstk_darwin(v91);
  v94 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_OWORD *)(v3 + 56);
  v14 = *(_OWORD *)(v3 + 88);
  v100[2] = *(_OWORD *)(v3 + 72);
  v100[3] = v14;
  v100[4] = *(_OWORD *)(v3 + 104);
  v100[0] = *(_OWORD *)(v3 + 40);
  v100[1] = v13;
  sub_10000DE60(v100);
  sub_1000219A4((uint64_t)v9);
  sub_10000DEA8(v100);
  *(double *)&v95[2] = a2;
  *(double *)&v95[3] = a3;
  v15 = sub_100005F78(&qword_1000A1090);
  v16 = sub_1000115D0();
  v89 = v11;
  Link.init(destination:label:)(v9, sub_1000115C8, v95, v15, v16);
  v88 = sub_100005F78(&qword_1000A0DD0);
  inited = swift_initStackObject(v88, &v97);
  v87 = xmmword_10007F270;
  *(_OWORD *)(inited + 16) = xmmword_10007F270;
  v18 = *(_OWORD *)(v4 + 104);
  v19 = *(_OWORD *)(v4 + 72);
  v99[3] = *(_OWORD *)(v4 + 88);
  v99[4] = v18;
  v20 = *(_OWORD *)(v4 + 40);
  v99[1] = *(_OWORD *)(v4 + 56);
  v99[2] = v19;
  v99[0] = v20;
  v21 = sub_10002545C();
  v23 = v22;
  *(_QWORD *)(inited + 32) = v21;
  *(_QWORD *)(inited + 40) = v22;
  sub_10000DE60(v99);
  v24 = sub_10002172C();
  v26 = v25;
  sub_10000DEA8(v99);
  v85 = (__int128 *)v24;
  *(_QWORD *)(inited + 48) = v24;
  *(_QWORD *)(inited + 56) = v26;
  if ((sub_10005CB78() & 1) != 0)
    v27 = sub_100051B08();
  else
    v27 = sub_10002548C();
  v29 = v28;
  v86 = v27;
  *(_QWORD *)(inited + 64) = v27;
  *(_QWORD *)(inited + 72) = v28;
  swift_bridgeObjectRetain(v23);
  v30 = sub_1000408F8(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v32 = *((_QWORD *)v30 + 2);
  v31 = *((_QWORD *)v30 + 3);
  v33 = v32 + 1;
  if (v32 >= v31 >> 1)
    v30 = sub_1000408F8((char *)(v31 > 1), v32 + 1, 1, v30);
  *((_QWORD *)v30 + 2) = v33;
  v34 = &v30[16 * v32];
  *((_QWORD *)v34 + 4) = v21;
  *((_QWORD *)v34 + 5) = v23;
  if (v26)
  {
    v35 = *((_QWORD *)v30 + 3);
    swift_bridgeObjectRetain(v26);
    if (v33 >= v35 >> 1)
      v30 = sub_1000408F8((char *)(v35 > 1), v32 + 2, 1, v30);
    *((_QWORD *)v30 + 2) = v32 + 2;
    v36 = &v30[16 * v33];
    *((_QWORD *)v36 + 4) = v85;
    *((_QWORD *)v36 + 5) = v26;
  }
  if (v29)
  {
    v37 = *((_QWORD *)v30 + 2);
    v38 = *((_QWORD *)v30 + 3);
    swift_bridgeObjectRetain(v29);
    if (v37 >= v38 >> 1)
      v30 = sub_1000408F8((char *)(v38 > 1), v37 + 1, 1, v30);
    *((_QWORD *)v30 + 2) = v37 + 1;
    v39 = &v30[16 * v37];
    *((_QWORD *)v39 + 4) = v86;
    *((_QWORD *)v39 + 5) = v29;
  }
  v85 = (__int128 *)(v4 + 40);
  swift_release(inited);
  v40 = *((_QWORD *)v30 + 2);
  if (v40)
  {
    v41 = v30 + 40;
    v42 = _swiftEmptyArrayStorage;
    do
    {
      v47 = *(v41 - 1);
      v46 = *v41;
      v48 = HIBYTE(*v41) & 0xFLL;
      if ((*v41 & 0x2000000000000000) == 0)
        v48 = v47 & 0xFFFFFFFFFFFFLL;
      if (v48)
      {
        swift_bridgeObjectRetain(*v41);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v42);
        *(_QWORD *)&v98[0] = v42;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10005C3B8(0, v42[2] + 1, 1);
          v42 = *(_QWORD **)&v98[0];
        }
        v44 = v42[2];
        v43 = v42[3];
        if (v44 >= v43 >> 1)
        {
          sub_10005C3B8(v43 > 1, v44 + 1, 1);
          v42 = *(_QWORD **)&v98[0];
        }
        v42[2] = v44 + 1;
        v45 = &v42[2 * v44];
        v45[4] = v47;
        v45[5] = v46;
      }
      v41 += 2;
      --v40;
    }
    while (v40);
  }
  else
  {
    v42 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v30);
  *(_QWORD *)&v98[0] = v42;
  v50 = sub_100005F78(&qword_1000A0DD8);
  v51 = sub_100007F64(&qword_1000A0DE0, &qword_1000A0DD8, (uint64_t)&protocol conformance descriptor for [A]);
  v52 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v50, v51);
  v54 = v53;
  swift_release(v42);
  *(_QWORD *)&v98[0] = v52;
  *((_QWORD *)&v98[0] + 1) = v54;
  v55 = sub_100007F64(&qword_1000A10A0, &qword_1000A1088, (uint64_t)&protocol conformance descriptor for Link<A>);
  v56 = sub_1000075E8();
  v57 = v93;
  v58 = v55;
  v86 = v56;
  v59 = v89;
  View.accessibilityLabel<A>(_:)(v98, v93, &type metadata for String, v58, v56);
  swift_bridgeObjectRelease(v54);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v59, v57);
  v60 = swift_initStackObject(v88, &v96);
  *(_OWORD *)(v60 + 16) = v87;
  v61 = v85[4];
  v62 = v85[2];
  v98[3] = v85[3];
  v98[4] = v61;
  v63 = *v85;
  v98[1] = v85[1];
  v98[2] = v62;
  v98[0] = v63;
  v64 = sub_10002545C();
  v66 = v65;
  *(_QWORD *)(v60 + 32) = v64;
  *(_QWORD *)(v60 + 40) = v65;
  sub_10000DE60(v98);
  v67 = sub_10002172C();
  v69 = v68;
  sub_10000DEA8(v98);
  *(_QWORD *)(v60 + 48) = v67;
  *(_QWORD *)(v60 + 56) = v69;
  if ((sub_10005CB78() & 1) != 0)
    v70 = sub_100051B08();
  else
    v70 = sub_10002548C();
  v93 = v70;
  v72 = v71;
  *(_QWORD *)(v60 + 64) = v70;
  *(_QWORD *)(v60 + 72) = v71;
  swift_bridgeObjectRetain(v66);
  v73 = sub_1000408F8(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v75 = *((_QWORD *)v73 + 2);
  v74 = *((_QWORD *)v73 + 3);
  v76 = v75 + 1;
  if (v75 >= v74 >> 1)
    v73 = sub_1000408F8((char *)(v74 > 1), v75 + 1, 1, v73);
  *((_QWORD *)v73 + 2) = v76;
  v77 = &v73[16 * v75];
  *((_QWORD *)v77 + 4) = v64;
  *((_QWORD *)v77 + 5) = v66;
  if (v69)
  {
    v78 = *((_QWORD *)v73 + 3);
    swift_bridgeObjectRetain(v69);
    if (v76 >= v78 >> 1)
      v73 = sub_1000408F8((char *)(v78 > 1), v75 + 2, 1, v73);
    *((_QWORD *)v73 + 2) = v75 + 2;
    v79 = &v73[16 * v76];
    *((_QWORD *)v79 + 4) = v67;
    *((_QWORD *)v79 + 5) = v69;
  }
  if (v72)
  {
    v80 = *((_QWORD *)v73 + 2);
    v81 = *((_QWORD *)v73 + 3);
    swift_bridgeObjectRetain(v72);
    if (v80 >= v81 >> 1)
      v73 = sub_1000408F8((char *)(v81 > 1), v80 + 1, 1, v73);
    *((_QWORD *)v73 + 2) = v80 + 1;
    v82 = &v73[16 * v80];
    *((_QWORD *)v82 + 4) = v93;
    *((_QWORD *)v82 + 5) = v72;
  }
  swift_release(v60);
  v83 = (uint64_t)v94;
  ModifiedContent<>.accessibilityInputLabels<A>(_:)(v73, v91, &type metadata for String, v86);
  swift_bridgeObjectRelease(v73);
  return sub_100007A0C(v83, &qword_1000A0F80);
}

uint64_t sub_100010114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;

  v85 = a2;
  v96 = a3;
  v91 = type metadata accessor for LabelView(0);
  __chkstk_darwin(v91);
  v86 = (uint64_t *)((char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v93 = sub_100005F78(&qword_1000A0F98);
  __chkstk_darwin(v93);
  v92 = (uint64_t)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005F78(&qword_1000A0FA0);
  v7 = __chkstk_darwin(v6);
  v95 = (uint64_t)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v89 = (char *)&v83 - v10;
  __chkstk_darwin(v9);
  v94 = (uint64_t)&v83 - v11;
  v12 = sub_100005F78(&qword_1000A0FA8);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for GeometryProxy(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)type metadata accessor for ReadingGoalView(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v84 = (uint64_t)&v83 - v23;
  v24 = sub_100005F78(&qword_1000A0FB0);
  v25 = __chkstk_darwin(v24);
  v90 = (uint64_t)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v83 - v28;
  v30 = __chkstk_darwin(v27);
  v32 = (char *)&v83 - v31;
  *(_QWORD *)v29 = static VerticalAlignment.center.getter(v30);
  *((_QWORD *)v29 + 1) = 0;
  v29[16] = 1;
  v33 = sub_100005F78(&qword_1000A0FB8);
  sub_1000107E0(a1, (uint64_t)&v29[*(int *)(v33 + 44)]);
  v88 = v32;
  sub_100007984((uint64_t)v29, (uint64_t)v32, &qword_1000A0FB0);
  v35 = *(_QWORD *)(a1 + 72);
  v34 = *(_QWORD *)(a1 + 80);
  v87 = a1;
  v36 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v85, v15);
  *v14 = swift_getKeyPath(&unk_10007F5F8);
  v85 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v14, v85, 0);
  KeyPath = swift_getKeyPath(&unk_10007F628);
  *((_QWORD *)v22 + 2) = 0;
  *((_QWORD *)v22 + 3) = 0;
  v22[32] = 0;
  *(_QWORD *)v22 = KeyPath;
  *((_QWORD *)v22 + 1) = 0;
  sub_100007984((uint64_t)v14, (uint64_t)&v22[v19[5]], &qword_1000A0FA8);
  v38 = &v22[v19[6]];
  *(_QWORD *)v38 = v35;
  *((_QWORD *)v38 + 1) = v34;
  v39 = &v22[v19[7]];
  v40 = enum case for Font.TextStyle.callout(_:);
  v41 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 104))(v39, v40, v41);
  v42 = (int *)type metadata accessor for ReadingGoalView.ViewConfiguration(0);
  v43 = &v39[v42[5]];
  v44 = enum case for Font.Design.rounded(_:);
  v45 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v43, v44, v45);
  v46 = v42[6];
  v47 = swift_bridgeObjectRetain(v35);
  *(double *)&v39[v46] = static Font.Weight.semibold.getter(v47);
  *(_QWORD *)&v39[v42[7]] = 0x4010000000000000;
  *(_QWORD *)&v39[v42[8]] = 0xC03A000000000000;
  *(_QWORD *)&v39[v42[9]] = 0;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v22[v19[8]], v18, v36);
  v48 = v84;
  sub_1000112F0((uint64_t)v22, v84, type metadata accessor for ReadingGoalView);
  if ((sub_10005CB78() & 1) != 0)
  {
    v49 = v87;
    v50 = *(_OWORD *)(v87 + 56);
    v51 = *(_OWORD *)(v87 + 88);
    v99 = *(_OWORD *)(v87 + 72);
    v100 = v51;
    v101 = *(_OWORD *)(v87 + 104);
    v97 = *(_OWORD *)(v87 + 40);
    v98 = v50;
    v52 = sub_100051B08();
    v54 = v53;
  }
  else
  {
    v52 = sub_10002548C();
    v54 = v55;
    v49 = v87;
  }
  v56 = (uint64_t *)(v49 + *(int *)(type metadata accessor for TodayReadingGoalView(0) + 24));
  v57 = *(uint64_t *)((char *)v56 + *(int *)(type metadata accessor for TodayReadingGoalView.ViewConfiguration(0) + 32));
  v58 = swift_retain(v57);
  v59 = static HierarchicalShapeStyle.primary.getter(v58);
  v60 = *v56;
  v61 = v59;
  v62 = swift_getKeyPath(&unk_10007F5F8);
  v63 = (uint64_t)v86;
  *v86 = v62;
  swift_storeEnumTagMultiPayload(v63, v85, 0);
  v64 = v91;
  v65 = (uint64_t *)(v63 + *(int *)(v91 + 20));
  *v65 = v52;
  v65[1] = v54;
  *(_QWORD *)(v63 + *(int *)(v64 + 24)) = v57;
  v66 = v63 + *(int *)(v64 + 28);
  *(_QWORD *)v66 = v61;
  *(_QWORD *)(v66 + 8) = v60;
  *(_WORD *)(v66 + 16) = 0;
  v67 = swift_getKeyPath(&unk_10007F658);
  v68 = v92;
  sub_1000078D4(v63, v92, type metadata accessor for LabelView);
  v69 = v93;
  v70 = v68 + *(int *)(v93 + 36);
  *(_QWORD *)v70 = v67;
  *(_BYTE *)(v70 + 8) = 1;
  sub_100007A48(v63, type metadata accessor for LabelView);
  v71 = sub_100011380();
  v72 = (uint64_t)v89;
  View.accessibilityHidden(_:)(1, v69, v71);
  sub_100007A0C(v68, &qword_1000A0F98);
  v73 = v94;
  sub_100007984(v72, v94, &qword_1000A0FA0);
  v74 = (uint64_t)v88;
  v75 = v90;
  sub_1000079C8((uint64_t)v88, v90, &qword_1000A0FB0);
  v76 = v48;
  sub_1000078D4(v48, (uint64_t)v22, type metadata accessor for ReadingGoalView);
  v77 = v95;
  sub_1000079C8(v73, v95, &qword_1000A0FA0);
  v78 = v96;
  sub_1000079C8(v75, v96, &qword_1000A0FB0);
  v79 = (int *)sub_100005F78(&qword_1000A0FD8);
  v80 = v78 + v79[12];
  *(_QWORD *)v80 = 0;
  *(_BYTE *)(v80 + 8) = 1;
  sub_1000078D4((uint64_t)v22, v78 + v79[16], type metadata accessor for ReadingGoalView);
  v81 = v78 + v79[20];
  *(_QWORD *)v81 = 0;
  *(_BYTE *)(v81 + 8) = 1;
  sub_1000079C8(v77, v78 + v79[24], &qword_1000A0FA0);
  sub_100007A0C(v73, &qword_1000A0FA0);
  sub_100007A48(v76, type metadata accessor for ReadingGoalView);
  sub_100007A0C(v74, &qword_1000A0FB0);
  sub_100007A0C(v77, &qword_1000A0FA0);
  sub_100007A48((uint64_t)v22, type metadata accessor for ReadingGoalView);
  return sub_100007A0C(v75, &qword_1000A0FB0);
}

uint64_t sub_1000107E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OpaqueTypeConformance2;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD v57[6];

  v54 = a2;
  v50 = type metadata accessor for AccessibilityChildBehavior(0);
  v48 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005F78(&qword_1000A0FE0);
  __chkstk_darwin(v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100005F78(&qword_1000A0FE8);
  v47 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005F78(&qword_1000A0FF0);
  v52 = *(_QWORD *)(v10 - 8);
  v53 = v10;
  __chkstk_darwin(v10);
  v46 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005F78(&qword_1000A0FF8);
  v13 = __chkstk_darwin(v12);
  v51 = (uint64_t)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v45 - v15;
  v17 = sub_100005F78(&qword_1000A1000);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v45 - v21;
  v23 = *(_OWORD *)(a1 + 56);
  v24 = *(_OWORD *)(a1 + 88);
  v57[2] = *(_OWORD *)(a1 + 72);
  v57[3] = v24;
  v57[4] = *(_OWORD *)(a1 + 104);
  v57[0] = *(_OWORD *)(a1 + 40);
  v57[1] = v23;
  v25 = sub_100052428();
  v27 = v26;
  v55 = v25;
  v56 = v26;
  v28 = sub_10001144C();
  View.accessibilityHidden(_:)(1, &type metadata for TitleView, v28);
  swift_bridgeObjectRelease(v27);
  sub_10000DE60(v57);
  v29 = sub_10002172C();
  v31 = v30;
  v32 = sub_10000DEA8(v57);
  if (v31)
  {
    *(_QWORD *)v7 = static VerticalAlignment.center.getter(v32);
    *((_QWORD *)v7 + 1) = 0;
    v7[16] = 0;
    v33 = sub_100005F78(&qword_1000A1018);
    sub_100010C1C(a1, v29, v31, (uint64_t)&v7[*(int *)(v33 + 44)]);
    v34 = swift_bridgeObjectRelease(v31);
    static AccessibilityChildBehavior.ignore.getter(v34);
    v35 = sub_100007F64(&qword_1000A1020, &qword_1000A0FE0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    View.accessibilityElement(children:)(v4, v5, v35);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v4, v50);
    sub_100007A0C((uint64_t)v7, &qword_1000A0FE0);
    v55 = v5;
    v56 = v35;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v55, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v37 = (uint64_t)v46;
    v38 = v49;
    View.accessibilityHidden(_:)(1, v49, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v9, v38);
    sub_100007984(v37, (uint64_t)v16, &qword_1000A0FF0);
    v39 = 0;
  }
  else
  {
    v39 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v16, v39, 1, v53);
  sub_1000079C8((uint64_t)v22, (uint64_t)v20, &qword_1000A1000);
  v40 = v51;
  sub_1000079C8((uint64_t)v16, v51, &qword_1000A0FF8);
  v41 = v54;
  sub_1000079C8((uint64_t)v20, v54, &qword_1000A1000);
  v42 = sub_100005F78(&qword_1000A1010);
  v43 = v41 + *(int *)(v42 + 48);
  *(_QWORD *)v43 = 0;
  *(_BYTE *)(v43 + 8) = 1;
  sub_1000079C8(v40, v41 + *(int *)(v42 + 64), &qword_1000A0FF8);
  sub_100007A0C((uint64_t)v16, &qword_1000A0FF8);
  sub_100007A0C((uint64_t)v22, &qword_1000A1000);
  sub_100007A0C(v40, &qword_1000A0FF8);
  return sub_100007A0C((uint64_t)v20, &qword_1000A1000);
}

uint64_t sub_100010C1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;

  v61 = a2;
  v62 = a3;
  v63 = a4;
  v59 = type metadata accessor for LabelView(0);
  v5 = __chkstk_darwin(v59);
  v60 = (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v57 - v7);
  v57 = sub_100005F78(&qword_1000A1028);
  __chkstk_darwin(v57);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100005F78(&qword_1000A1030);
  v11 = __chkstk_darwin(v58);
  v65 = (uint64_t)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v64 = (uint64_t)&v57 - v13;
  v14 = a1 + *(int *)(type metadata accessor for TodayReadingGoalView(0) + 24);
  v15 = (int *)type metadata accessor for TodayReadingGoalView.ViewConfiguration(0);
  v16 = (uint64_t *)(v14 + v15[11]);
  v17 = *v16;
  v18 = v16[1];
  swift_bridgeObjectRetain(v18);
  v19 = Image.init(systemName:)(v17, v18);
  v20 = v15[8];
  v21 = Font.weight(_:)(*(_QWORD *)(v14 + v20), *(double *)(v14 + v15[9]));
  KeyPath = swift_getKeyPath(&unk_10007F688);
  v23 = *(_DWORD *)(v14 + v15[10]);
  v66 = v19;
  v67 = KeyPath;
  v68 = v21;
  v69 = v23;
  v24 = sub_100005F78(&qword_1000A1038);
  v25 = sub_100011498();
  View.widgetAccentable(_:)(1, v24, v25);
  swift_release(v21);
  swift_release(KeyPath);
  swift_release(v19);
  v26 = v14 + v15[7];
  v27 = &v10[*(int *)(v57 + 36)];
  v28 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v27, v26, v28);
  v29 = v14 + v15[5];
  v30 = swift_getKeyPath(&unk_10007F6B8);
  v31 = v64;
  v32 = (uint64_t *)(v64 + *(int *)(v58 + 36));
  v33 = (char *)v32 + *(int *)(sub_100005F78(&qword_1000A1078) + 28);
  v34 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v33, v29, v34);
  *v32 = v30;
  v35 = v31;
  sub_100007984((uint64_t)v10, v31, &qword_1000A1028);
  v36 = *(_QWORD *)(v14 + v20);
  v37 = Text.font(_:)(v36, 32, 0xE100000000000000, 0, _swiftEmptyArrayStorage);
  v39 = v38;
  v58 = v40;
  LOBYTE(v10) = v41 & 1;
  *v8 = swift_getKeyPath(&unk_10007F5F8);
  v42 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v8, v42, 0);
  v43 = v59;
  v44 = (uint64_t)v8;
  v45 = (_QWORD *)((char *)v8 + *(int *)(v59 + 20));
  v46 = v62;
  *v45 = v61;
  v45[1] = v46;
  *(_QWORD *)((char *)v8 + *(int *)(v43 + 24)) = v36;
  v47 = (char *)v8 + *(int *)(v43 + 28);
  *(_QWORD *)v47 = 0;
  *((_QWORD *)v47 + 1) = 0;
  *((_WORD *)v47 + 8) = 256;
  v48 = v65;
  sub_1000079C8(v35, v65, &qword_1000A1030);
  v49 = v60;
  sub_1000078D4(v44, v60, type metadata accessor for LabelView);
  v50 = v48;
  v51 = v63;
  sub_1000079C8(v50, v63, &qword_1000A1030);
  v52 = sub_100005F78(&qword_1000A1080);
  v53 = v51;
  v54 = v51 + *(int *)(v52 + 48);
  *(_QWORD *)v54 = v37;
  *(_QWORD *)(v54 + 8) = v39;
  *(_BYTE *)(v54 + 16) = (_BYTE)v10;
  v55 = v58;
  *(_QWORD *)(v54 + 24) = v58;
  sub_1000078D4(v49, v53 + *(int *)(v52 + 64), type metadata accessor for LabelView);
  sub_1000115A8(v37, v39, (char)v10);
  swift_bridgeObjectRetain(v55);
  swift_retain(v36);
  swift_bridgeObjectRetain(v46);
  sub_100007A48(v44, type metadata accessor for LabelView);
  sub_100007A0C(v64, &qword_1000A1030);
  sub_100007A48(v49, type metadata accessor for LabelView);
  sub_1000115B8(v37, v39, (char)v10);
  swift_bridgeObjectRelease(v55);
  return sub_100007A0C(v65, &qword_1000A1030);
}

double sub_10001104C@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  double result;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  __int128 v18;

  v6 = static Color.clear.getter();
  v7 = static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)(&v14, *(_QWORD *)&a2, 0, *(_QWORD *)&a3, 0, v7, v8);
  v9 = v14;
  v10 = v15;
  v11 = v16;
  v12 = v17;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  *(_BYTE *)(a1 + 32) = v12;
  result = *(double *)&v18;
  *(_OWORD *)(a1 + 40) = v18;
  return result;
}

uint64_t sub_1000110E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  sub_1000078D4(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TodayReadingGoalView);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_10009A640, v7 + v5, v6 | 7);
  result = sub_1000112F0((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for TodayReadingGoalView);
  *a2 = sub_100011298;
  a2[1] = v8;
  return result;
}

uint64_t sub_100011198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  int *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v1 = type metadata accessor for TodayReadingGoalView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (_QWORD *)(v0 + v4);
  sub_1000075DC(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8), *(_QWORD *)(v0 + v4 + 16), *(_QWORD *)(v0 + v4 + 24), *(_BYTE *)(v0 + v4 + 32));
  swift_bridgeObjectRelease(v7[9]);
  swift_bridgeObjectRelease(v7[11]);
  swift_bridgeObjectRelease(v7[14]);
  v8 = (char *)v7 + *(int *)(v1 + 24);
  v9 = (int *)type metadata accessor for TodayReadingGoalView.ViewConfiguration(0);
  v10 = &v8[v9[5]];
  v11 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = &v8[v9[7]];
  v13 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_release(*(_QWORD *)&v8[v9[8]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v8[v9[11] + 8]);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100011298@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TodayReadingGoalView(0) - 8) + 80);
  return sub_10000F490(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_1000112F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100011334@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10001135C(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

unint64_t sub_100011380()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A0FC0;
  if (!qword_1000A0FC0)
  {
    v1 = sub_100005FC0(&qword_1000A0F98);
    sub_100011404();
    sub_100007F64(&qword_1000A0FC8, &qword_1000A0FD0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A0FC0);
  }
  return result;
}

unint64_t sub_100011404()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A0DC8;
  if (!qword_1000A0DC8)
  {
    v1 = type metadata accessor for LabelView(255);
    result = swift_getWitnessTable(&unk_100082CF0, v1);
    atomic_store(result, (unint64_t *)&qword_1000A0DC8);
  }
  return result;
}

unint64_t sub_10001144C()
{
  unint64_t result;

  result = qword_1000A1008;
  if (!qword_1000A1008)
  {
    result = swift_getWitnessTable(&unk_1000837D0, &type metadata for TitleView);
    atomic_store(result, (unint64_t *)&qword_1000A1008);
  }
  return result;
}

unint64_t sub_100011498()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1040;
  if (!qword_1000A1040)
  {
    v1 = sub_100005FC0(&qword_1000A1038);
    sub_10001151C();
    sub_100007F64(&qword_1000A1068, &qword_1000A1070, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1040);
  }
  return result;
}

unint64_t sub_10001151C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1048;
  if (!qword_1000A1048)
  {
    v1 = sub_100005FC0(&qword_1000A1050);
    sub_100007F64(&qword_1000A1058, &qword_1000A1060, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1048);
  }
  return result;
}

uint64_t sub_1000115A8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1000115B8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

double sub_1000115C8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10001104C(a1, *(double *)(v1 + 16), *(double *)(v1 + 24));
}

unint64_t sub_1000115D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1098;
  if (!qword_1000A1098)
  {
    v1 = sub_100005FC0(&qword_1000A1090);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1098);
  }
  return result;
}

uint64_t sub_100011634()
{
  return sub_100007F64(&qword_1000A10A8, &qword_1000A10B0, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

uint64_t destroy for LargeThreeBookView(uint64_t a1)
{
  sub_1000075DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 112));
  return swift_release(*(_QWORD *)(a1 + 136));
}

uint64_t initializeWithCopy for LargeThreeBookView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v12 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v13 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_retain(v13);
  return a1;
}

uint64_t assignWithCopy for LargeThreeBookView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  sub_1000075DC(v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 72);
  v16 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v17 = *(_QWORD *)(a2 + 88);
  v18 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v19 = *(_QWORD *)(a2 + 112);
  v20 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v21;
  swift_retain(v21);
  swift_release(v22);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return a1;
}

uint64_t assignWithTake for LargeThreeBookView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 32) = v4;
  sub_1000075DC(v5, v6, v7, v8, v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v13;
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 112);
  v16 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v15;
  swift_bridgeObjectRelease(v16);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_release(v17);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return a1;
}

ValueMetadata *type metadata accessor for LargeThreeBookView()
{
  return &type metadata for LargeThreeBookView;
}

uint64_t sub_100011990(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100083B28, 1);
}

uint64_t sub_1000119A0@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  _BYTE v72[4];
  int v73;
  int v74;
  int v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  int v85;
  int v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t v89;
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD v93[2];
  char v94;
  _BYTE v95[40];
  uint64_t v96;
  unsigned __int8 v97;
  char v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _OWORD v109[2];
  _QWORD v110[3];
  char v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  char v122;
  double v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;

  v4 = sub_100005F78(&qword_1000A10D0);
  __chkstk_darwin(v4);
  v6 = &v72[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100005F78(&qword_1000A10D8);
  v8 = __chkstk_darwin(v7);
  v79 = &v72[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v8);
  v84 = &v72[-v11];
  v12 = *(_QWORD *)(a1 + 88);
  v13 = sub_1000560D8(v10);
  v80 = v14;
  v81 = v13;
  v15 = *(_QWORD *)(a1 + 128);
  v16 = *(double *)(a1 + 152);
  v17 = *(double *)(a1 + 160);
  v18 = static HorizontalAlignment.center.getter(v13);
  v19 = static VerticalAlignment.firstTextBaseline.getter();
  v20 = _FrameLayout.init(width:height:alignment:)(&v87, 0, 1, v15, 0, v18, v19);
  v21 = v88;
  v82 = v89;
  v83 = v87;
  v22 = v90;
  v77 = v92;
  v78 = v91;
  v86 = static Edge.Set.trailing.getter(v20);
  v76 = EdgeInsets.init(_all:)(v16 + v17);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v85 = static Edge.Set.bottom.getter(v29);
  v30 = *(_OWORD *)(a1 + 16);
  v93[0] = *(_OWORD *)a1;
  v93[1] = v30;
  v94 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v93, (uint64_t)v95, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  v31 = sub_100024DBC();
  sub_10000DBE0((uint64_t)v93, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v32 = EdgeInsets.init(_all:)(v31);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v100 = v21;
  v99 = v22;
  v98 = 0;
  v97 = 0;
  v39 = static VerticalAlignment.lastTextBaseline.getter();
  sub_10000DBE0((uint64_t)v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v41 = v40;
  sub_10000DBE0((uint64_t)v93, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  *(_QWORD *)v6 = v39;
  *((_QWORD *)v6 + 1) = v41;
  v6[16] = 0;
  sub_100005F78(&qword_1000A10E0);
  v96 = v12;
  v110[0] = v12;
  KeyPath = swift_getKeyPath(&unk_10007F758);
  v43 = swift_allocObject(&unk_10009A750, 184, 7);
  v44 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v43 + 144) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v43 + 160) = v44;
  *(_QWORD *)(v43 + 176) = *(_QWORD *)(a1 + 160);
  v45 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v43 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v43 + 96) = v45;
  v46 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v43 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v43 + 128) = v46;
  v47 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v43 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v43 + 32) = v47;
  v48 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v43 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v43 + 64) = v48;
  sub_10000DC6C(&v96);
  sub_100012D2C(a1);
  v49 = sub_100005F78(&qword_1000A0D48);
  v50 = sub_100005F78(&qword_1000A10E8);
  v51 = sub_100007F64(&qword_1000A0D58, &qword_1000A0D48, (uint64_t)&protocol conformance descriptor for [A]);
  v52 = sub_100012DA0();
  v53 = ForEach<>.init(_:id:content:)(v110, KeyPath, sub_100012D24, v43, v49, v50, v51, &protocol witness table for String, v52);
  v54 = static Alignment.center.getter(v53);
  v55 = v79;
  sub_100021100(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v79, 0.0, 1, 0.0, 1, v54, v56);
  sub_100007A0C((uint64_t)v6, &qword_1000A10D0);
  v57 = v84;
  sub_100007984((uint64_t)v55, (uint64_t)v84, &qword_1000A10D8);
  LOBYTE(v50) = v100;
  LOBYTE(v51) = v99;
  v75 = v99;
  LOBYTE(v6) = v98;
  LOBYTE(v43) = v97;
  v73 = v100;
  v74 = v97;
  sub_1000079C8((uint64_t)v57, (uint64_t)v55, &qword_1000A10D8);
  v58 = v80;
  v59 = v81;
  *(_QWORD *)&v101 = v81;
  *((_QWORD *)&v101 + 1) = v80;
  *(_QWORD *)&v102 = v83;
  BYTE8(v102) = v50;
  *(_QWORD *)&v103 = v82;
  BYTE8(v103) = v51;
  v61 = v77;
  v60 = v78;
  *(_QWORD *)&v104 = v78;
  *((_QWORD *)&v104 + 1) = v77;
  LOBYTE(v105) = v86;
  v62 = v76;
  *((double *)&v105 + 1) = v76;
  *(_QWORD *)&v106 = v24;
  *((_QWORD *)&v106 + 1) = v26;
  *(_QWORD *)&v107 = v28;
  BYTE8(v107) = (_BYTE)v6;
  LOBYTE(v108) = v85;
  *((double *)&v108 + 1) = v32;
  *(_QWORD *)&v109[0] = v34;
  *((_QWORD *)&v109[0] + 1) = v36;
  *(_QWORD *)&v109[1] = v38;
  BYTE8(v109[1]) = v43;
  v63 = v109[0];
  v64 = v107;
  a2[7] = v108;
  a2[8] = v63;
  v65 = v102;
  *a2 = v101;
  a2[1] = v65;
  v66 = v103;
  v67 = v104;
  v68 = v105;
  a2[5] = v106;
  a2[6] = v64;
  a2[3] = v67;
  a2[4] = v68;
  a2[2] = v66;
  *(_OWORD *)((char *)a2 + 137) = *(_OWORD *)((char *)v109 + 9);
  v69 = sub_100005F78(&qword_1000A1108);
  sub_1000079C8((uint64_t)v55, (uint64_t)a2 + *(int *)(v69 + 48), &qword_1000A10D8);
  v70 = (char *)a2 + *(int *)(v69 + 64);
  *(_QWORD *)v70 = 0;
  v70[8] = 0;
  sub_100007444((uint64_t)&v101);
  sub_100007A0C((uint64_t)v84, &qword_1000A10D8);
  sub_100007A0C((uint64_t)v55, &qword_1000A10D8);
  v110[0] = v59;
  v110[1] = v58;
  v110[2] = v83;
  v111 = v73;
  v112 = v82;
  v113 = v75;
  v114 = v60;
  v115 = v61;
  v116 = v86;
  v117 = v62;
  v118 = v24;
  v119 = v26;
  v120 = v28;
  v121 = (char)v6;
  v122 = v85;
  v123 = v32;
  v124 = v34;
  v125 = v36;
  v126 = v38;
  v127 = v74;
  return sub_10000746C((uint64_t)v110);
}

uint64_t sub_100011F08@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t OpaqueTypeConformance2;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  _QWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;

  v32 = a3;
  v30 = type metadata accessor for AccessibilityChildBehavior(0);
  v5 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005F78(&qword_1000A10F8);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005F78(&qword_1000A1110);
  v31 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005F78(&qword_1000A10E8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v37 = a1[2];
  v38 = v18;
  v39 = a1[4];
  v40 = *((_BYTE *)a1 + 80);
  v19 = a1[1];
  v35 = *a1;
  v36 = v19;
  *(_QWORD *)v10 = static HorizontalAlignment.center.getter(v15);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  v20 = sub_100005F78(&qword_1000A1118);
  sub_100012200(a2, (uint64_t)&v35, (uint64_t)&v10[*(int *)(v20 + 44)]);
  v43 = v37;
  v44 = v38;
  v45 = v39;
  v46 = v40;
  v41 = v35;
  v42 = v36;
  v21 = sub_100013C4C();
  if ((v21 & 1) != 0)
    static AccessibilityChildBehavior.contain.getter();
  else
    static AccessibilityChildBehavior.combine.getter(v21);
  v22 = sub_100007F64(&qword_1000A1100, &qword_1000A10F8, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.accessibilityElement(children:)(v7, v8, v22);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v30);
  sub_100007A0C((uint64_t)v10, &qword_1000A10F8);
  if ((sub_100013C4C() & 1) != 0)
  {
    v23 = 0;
    v24 = 0xE000000000000000;
  }
  else
  {
    v23 = sub_100051294(1);
    v24 = v25;
  }
  v34[0] = v23;
  v34[1] = v24;
  v33[0] = v8;
  v33[1] = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v33, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v27 = sub_1000075E8();
  View.accessibilityLabel<A>(_:)(v34, v11, &type metadata for String, OpaqueTypeConformance2, v27);
  swift_bridgeObjectRelease(v24);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v11);
  return sub_100007984((uint64_t)v17, v32, &qword_1000A10E8);
}

uint64_t sub_100012200@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  char v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t inited;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v88[4];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  _QWORD v101[2];
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  char v108;
  _OWORD v109[4];
  __int128 v110;

  v98 = a3;
  v5 = sub_100005F78(&qword_1000A1120);
  v94 = *(_QWORD *)(v5 - 8);
  v95 = v5;
  __chkstk_darwin(v5);
  v100 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005F78(&qword_1000A1128);
  v8 = __chkstk_darwin(v7);
  v97 = (uint64_t)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v93 = (char *)&v89 - v11;
  __chkstk_darwin(v10);
  v96 = (uint64_t)&v89 - v12;
  v13 = type metadata accessor for URL(0);
  v89 = *(_QWORD *)(v13 - 8);
  v90 = v13;
  v14 = __chkstk_darwin(v13);
  v91 = (uint64_t)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v89 - v16;
  v18 = (int *)type metadata accessor for BookCoverView(0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v89 - v22;
  v24 = sub_100005F78(&qword_1000A1130);
  v25 = __chkstk_darwin(v24);
  v92 = (uint64_t)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v89 - v28;
  __chkstk_darwin(v27);
  v99 = (uint64_t)&v89 - v30;
  v31 = *(_OWORD *)(a1 + 56);
  v32 = *(_OWORD *)(a1 + 88);
  v109[2] = *(_OWORD *)(a1 + 72);
  v109[3] = v32;
  v110 = *(_OWORD *)(a1 + 104);
  v109[0] = *(_OWORD *)(a1 + 40);
  v109[1] = v31;
  sub_10000DE60(v109);
  sub_100006330(a2, (uint64_t)v17);
  sub_10000DEA8(v109);
  v33 = *(_OWORD *)(a2 + 48);
  v105 = *(_OWORD *)(a2 + 32);
  v106 = v33;
  v107 = *(_OWORD *)(a2 + 64);
  v108 = *(_BYTE *)(a2 + 80);
  v34 = *(_OWORD *)(a2 + 16);
  v103 = *(_OWORD *)a2;
  v104 = v34;
  v35 = sub_100013C4C();
  if (*((_QWORD *)&v110 + 1))
  {
    if (v110 == v105)
      v36 = 1;
    else
      v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v105, *((_QWORD *)&v105 + 1), v110, *((_QWORD *)&v110 + 1), 0);
  }
  else
  {
    v36 = 0;
  }
  *(_QWORD *)v21 = swift_getKeyPath(&unk_10007F780);
  v37 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v21, v37, 0);
  (*(void (**)(char *, char *, uint64_t))(v89 + 32))(&v21[v18[5]], v17, v90);
  v21[v18[6]] = v35 & 1;
  v38 = &v21[v18[7]];
  v39 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v38 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v38 + 3) = v39;
  *((_OWORD *)v38 + 4) = *(_OWORD *)(a2 + 64);
  v38[80] = *(_BYTE *)(a2 + 80);
  v40 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v38 = *(_OWORD *)a2;
  *((_OWORD *)v38 + 1) = v40;
  v21[v18[8]] = v36 & 1;
  v21[v18[9]] = 0;
  sub_10000DEF8((uint64_t)v21, (uint64_t)v23);
  v41 = sub_10000DF3C((_QWORD *)a2);
  v42 = static Alignment.center.getter(v41);
  sub_100021164(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v29, 0.0, 1, 0.0, 1, v42, v43);
  sub_100007A48((uint64_t)v23, type metadata accessor for BookCoverView);
  sub_100007984((uint64_t)v29, v99, &qword_1000A1130);
  sub_10000DE60(v109);
  v44 = v91;
  sub_100006330(a2, v91);
  v45 = sub_10000DEA8(v109);
  __chkstk_darwin(v45);
  v88[2] = a2;
  v88[3] = a1;
  v46 = sub_100005F78(&qword_1000A1138);
  v47 = sub_100012E7C();
  Link.init(destination:label:)(v44, sub_100012E74, v88, v46, v47);
  v48 = sub_100005F78(&qword_1000A0DD0);
  inited = swift_initStackObject(v48, &v102);
  *(_OWORD *)(inited + 16) = xmmword_10007F170;
  v50 = v103;
  *(_OWORD *)(inited + 32) = v103;
  swift_bridgeObjectRetain(*((_QWORD *)&v50 + 1));
  v52 = sub_100051468(0);
  v53 = v51;
  *(_QWORD *)(inited + 48) = v52;
  *(_QWORD *)(inited + 56) = v51;
  if (!*((_QWORD *)&v50 + 1))
  {
    v54 = (char *)_swiftEmptyArrayStorage;
    if (!v51)
      goto LABEL_17;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain(*((_QWORD *)&v50 + 1));
  v54 = sub_1000408F8(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v56 = *((_QWORD *)v54 + 2);
  v55 = *((_QWORD *)v54 + 3);
  if (v56 >= v55 >> 1)
    v54 = sub_1000408F8((char *)(v55 > 1), v56 + 1, 1, v54);
  *((_QWORD *)v54 + 2) = v56 + 1;
  *(_OWORD *)&v54[16 * v56 + 32] = v50;
  if (v53)
  {
LABEL_12:
    swift_bridgeObjectRetain(v53);
    if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
      v54 = sub_1000408F8(0, *((_QWORD *)v54 + 2) + 1, 1, v54);
    v58 = *((_QWORD *)v54 + 2);
    v57 = *((_QWORD *)v54 + 3);
    if (v58 >= v57 >> 1)
      v54 = sub_1000408F8((char *)(v57 > 1), v58 + 1, 1, v54);
    *((_QWORD *)v54 + 2) = v58 + 1;
    v59 = &v54[16 * v58];
    *((_QWORD *)v59 + 4) = v52;
    *((_QWORD *)v59 + 5) = v53;
  }
LABEL_17:
  swift_release(inited);
  v60 = *((_QWORD *)v54 + 2);
  if (v60)
  {
    v61 = v54 + 40;
    v62 = _swiftEmptyArrayStorage;
    do
    {
      v67 = *(v61 - 1);
      v66 = *v61;
      v68 = HIBYTE(*v61) & 0xFLL;
      if ((*v61 & 0x2000000000000000) == 0)
        v68 = v67 & 0xFFFFFFFFFFFFLL;
      if (v68)
      {
        swift_bridgeObjectRetain(*v61);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v62);
        v101[0] = v62;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10005C3B8(0, v62[2] + 1, 1);
          v62 = (_QWORD *)v101[0];
        }
        v64 = v62[2];
        v63 = v62[3];
        if (v64 >= v63 >> 1)
        {
          sub_10005C3B8(v63 > 1, v64 + 1, 1);
          v62 = (_QWORD *)v101[0];
        }
        v62[2] = v64 + 1;
        v65 = &v62[2 * v64];
        v65[4] = v67;
        v65[5] = v66;
      }
      v61 += 2;
      --v60;
    }
    while (v60);
  }
  else
  {
    v62 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v54);
  v101[0] = v62;
  v70 = sub_100005F78(&qword_1000A0DD8);
  v71 = sub_100007F64(&qword_1000A0DE0, &qword_1000A0DD8, (uint64_t)&protocol conformance descriptor for [A]);
  v72 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v70, v71);
  v74 = v73;
  swift_release(v62);
  v101[0] = v72;
  v101[1] = v74;
  v75 = sub_100007F64(&qword_1000A1148, &qword_1000A1120, (uint64_t)&protocol conformance descriptor for Link<A>);
  v76 = sub_1000075E8();
  v77 = (uint64_t)v93;
  v78 = v95;
  v79 = v75;
  v80 = v100;
  View.accessibilityLabel<A>(_:)(v101, v95, &type metadata for String, v79, v76);
  swift_bridgeObjectRelease(v74);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v80, v78);
  v81 = v96;
  sub_100007984(v77, v96, &qword_1000A1128);
  v82 = v99;
  v83 = v92;
  sub_1000079C8(v99, v92, &qword_1000A1130);
  v84 = v97;
  sub_1000079C8(v81, v97, &qword_1000A1128);
  v85 = v98;
  sub_1000079C8(v83, v98, &qword_1000A1130);
  v86 = sub_100005F78(&qword_1000A1150);
  sub_1000079C8(v84, v85 + *(int *)(v86 + 48), &qword_1000A1128);
  sub_100007A0C(v81, &qword_1000A1128);
  sub_100007A0C(v82, &qword_1000A1130);
  sub_100007A0C(v84, &qword_1000A1128);
  return sub_100007A0C(v83, &qword_1000A1130);
}

uint64_t sub_1000129E4@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  _OWORD v24[3];

  v4 = (int *)type metadata accessor for LabelView(0);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100051468(1);
  v9 = v8;
  v10 = a1[15];
  v12 = a1[17];
  v11 = a1[18];
  v13 = swift_retain(v12);
  v14 = static HierarchicalShapeStyle.primary.getter(v13);
  *v6 = swift_getKeyPath(&unk_10007F780);
  v15 = sub_100005F78(&qword_1000A09A0);
  v16 = swift_storeEnumTagMultiPayload(v6, v15, 0);
  v17 = (_QWORD *)((char *)v6 + v4[5]);
  *v17 = v7;
  v17[1] = v9;
  *(_QWORD *)((char *)v6 + v4[6]) = v12;
  v18 = (char *)v6 + v4[7];
  *(_QWORD *)v18 = v14;
  *((_QWORD *)v18 + 1) = v10;
  *((_WORD *)v18 + 8) = 0;
  v19 = static HorizontalAlignment.center.getter(v16);
  v20 = static VerticalAlignment.firstTextBaseline.getter();
  _FrameLayout.init(width:height:alignment:)(v24, 0, 1, v11, 0, v19, v20);
  sub_100012F00((uint64_t)v6, a2);
  v21 = (_OWORD *)(a2 + *(int *)(sub_100005F78(&qword_1000A1138) + 36));
  v22 = v24[1];
  *v21 = v24[0];
  v21[1] = v22;
  v21[2] = v24[2];
  return sub_100007A48((uint64_t)v6, type metadata accessor for LabelView);
}

uint64_t sub_100012B50@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _OWORD v24[2];
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  char v38;
  _BYTE v39[40];

  v3 = sub_100005F78(&qword_1000A10B8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[9];
  v34 = v1[8];
  v35 = v7;
  v36 = *((_QWORD *)v1 + 20);
  v8 = v1[5];
  v30 = v1[4];
  v31 = v8;
  v9 = v1[7];
  v32 = v1[6];
  v33 = v9;
  v10 = v1[1];
  v26 = *v1;
  v27 = v10;
  v11 = v1[3];
  v28 = v1[2];
  v29 = v11;
  *(_QWORD *)v6 = static HorizontalAlignment.leading.getter(v4);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v12 = sub_100005F78(&qword_1000A10C0);
  sub_1000119A0((uint64_t)&v26, &v6[*(int *)(v12 + 44)]);
  v37[0] = v26;
  v37[1] = v27;
  v38 = v28;
  v24[0] = v26;
  v24[1] = v27;
  v25 = v28;
  sub_100007984((uint64_t)v37, (uint64_t)v39, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  v13 = sub_100024DBC();
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v20 = sub_10000DBE0((uint64_t)v37, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v21 = static Edge.Set.all.getter(v20);
  sub_1000079C8((uint64_t)v6, a1, &qword_1000A10B8);
  v22 = a1 + *(int *)(sub_100005F78(&qword_1000A10C8) + 36);
  *(_BYTE *)v22 = v21;
  *(double *)(v22 + 8) = v13;
  *(_QWORD *)(v22 + 16) = v15;
  *(_QWORD *)(v22 + 24) = v17;
  *(_QWORD *)(v22 + 32) = v19;
  *(_BYTE *)(v22 + 40) = 0;
  return sub_100007A0C((uint64_t)v6, &qword_1000A10B8);
}

uint64_t sub_100012CD8()
{
  uint64_t v0;

  sub_1000075DC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_release(*(_QWORD *)(v0 + 152));
  return swift_deallocObject(v0, 184, 7);
}

uint64_t sub_100012D24@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100011F08(a1, v2 + 16, a2);
}

uint64_t sub_100012D2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 136);
  sub_10000BA78(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

unint64_t sub_100012DA0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000A10F0;
  if (!qword_1000A10F0)
  {
    v1 = sub_100005FC0(&qword_1000A10E8);
    v2[0] = sub_100005FC0(&qword_1000A10F8);
    v2[1] = sub_100007F64(&qword_1000A1100, &qword_1000A10F8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100003DCC((unint64_t *)&qword_1000A0A38, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A10F0);
  }
  return result;
}

uint64_t sub_100012E74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000129E4(*(_QWORD **)(v1 + 24), a1);
}

unint64_t sub_100012E7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1140;
  if (!qword_1000A1140)
  {
    v1 = sub_100005FC0(&qword_1000A1138);
    sub_100003DCC((unint64_t *)&qword_1000A0DC8, type metadata accessor for LabelView, (uint64_t)&unk_100082CF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1140);
  }
  return result;
}

uint64_t sub_100012F00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LabelView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t destroy for LargeThreeBookView.ViewConfiguration(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for LargeThreeBookView.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for LargeThreeBookView.ViewConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_retain(v4);
  swift_release(v5);
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for LargeThreeBookView.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v4);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for LargeThreeBookView.ViewConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LargeThreeBookView.ViewConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LargeThreeBookView.ViewConfiguration()
{
  return &type metadata for LargeThreeBookView.ViewConfiguration;
}

unint64_t sub_1000130F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1158;
  if (!qword_1000A1158)
  {
    v1 = sub_100005FC0(&qword_1000A10C8);
    sub_100007F64(&qword_1000A1160, &qword_1000A10B8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1158);
  }
  return result;
}

ValueMetadata *_s11BooksWidgetOMa()
{
  return &_s11BooksWidgetON;
}

uint64_t getEnumTagSinglePayload for FeatureFlags.BooksWidget(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for FeatureFlags.BooksWidget(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100013218 + 4 * asc_10007F7D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100013238 + 4 * byte_10007F7D5[v4]))();
}

_BYTE *sub_100013218(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100013238(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100013240(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100013248(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100013250(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100013258(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_100013264()
{
  return 0;
}

ValueMetadata *type metadata accessor for FeatureFlags.BooksWidget()
{
  return &type metadata for FeatureFlags.BooksWidget;
}

unint64_t sub_10001327C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v11;

  v0 = sub_100005F78(&qword_1000A0AE0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v11 - v5;
  v7 = sub_10001357C();
  StaticFeatureFlagsKey.init(stringLiteral:)("audiobooksComplication", 22, 2, &_s11BooksWidgetON, v7);
  StaticFeatureFlagsKey.init(stringLiteral:)("audiobooksComplication", 22, 2, &_s11BooksWidgetON, v7);
  v8 = sub_1000136E0(&qword_1000A1178, (uint64_t)&protocol conformance descriptor for StaticFeatureFlagsKey<A>);
  LOBYTE(v7) = dispatch thunk of static Equatable.== infix(_:_:)(v6, v4, v0, v8);
  v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v4, v0);
  v9(v6, v0);
  return v7 & 1;
}

Swift::Int sub_1000133A4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_1000133E4()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_100013408(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

BOOL sub_100013444@<W0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = sub_1000135C0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10001346C()
{
  unint64_t v0;

  v0 = sub_10001357C();
  return StaticFeatureFlagsKey.init(stringLiteral:)("audiobooksComplication", 22, 2, &_s11BooksWidgetON, v0);
}

uint64_t sub_1000134AC(uint64_t a1, uint64_t a2)
{
  return sub_1000134C4(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t))&RawRepresentable<>.domain.getter);
}

uint64_t sub_1000134B8(uint64_t a1, uint64_t a2)
{
  return sub_1000134C4(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t))&RawRepresentable<>.feature.getter);
}

uint64_t sub_1000134C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  v4 = sub_10000A0C4();
  v5 = sub_1000136E0(&qword_1000A0AD8, (uint64_t)&protocol conformance descriptor for StaticFeatureFlagsKey<A>);
  return a3(a1, v4, v5);
}

unint64_t sub_100013524()
{
  unint64_t result;

  result = qword_1000A1168;
  if (!qword_1000A1168)
  {
    result = swift_getWitnessTable(&unk_10007F870, &type metadata for FeatureFlags.BooksWidget);
    atomic_store(result, (unint64_t *)&qword_1000A1168);
  }
  return result;
}

const char *sub_100013568()
{
  return "BooksWidget";
}

unint64_t sub_10001357C()
{
  unint64_t result;

  result = qword_1000A1170;
  if (!qword_1000A1170)
  {
    result = swift_getWitnessTable(&unk_10007F898, &_s11BooksWidgetON);
    atomic_store(result, (unint64_t *)&qword_1000A1170);
  }
  return result;
}

BOOL sub_1000135C0(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v2 = sub_100005F78(&qword_1000A0AE0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v14 - v7;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))((char *)&v14 - v7, a1, v2);
  v9 = sub_10001357C();
  StaticFeatureFlagsKey.init(stringLiteral:)("audiobooksComplication", 22, 2, &_s11BooksWidgetON, v9);
  v10 = sub_1000136E0(&qword_1000A1178, (uint64_t)&protocol conformance descriptor for StaticFeatureFlagsKey<A>);
  v11 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v10);
  v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(a1, v2);
  v12(v6, v2);
  v12(v8, v2);
  return (v11 & 1) == 0;
}

uint64_t sub_1000136E0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_100005FC0(&qword_1000A0AE0);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t WidgetBookInfo.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t WidgetBookInfo.title.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*WidgetBookInfo.title.modify())()
{
  return WidgetReadingHistory.Day.readingTime.getter;
}

uint64_t WidgetBookInfo.progress.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t WidgetBookInfo.progress.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*WidgetBookInfo.progress.modify())()
{
  return WidgetReadingHistory.Day.readingTime.getter;
}

uint64_t WidgetBookInfo.assetID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t WidgetBookInfo.assetID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 40));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*WidgetBookInfo.assetID.modify())()
{
  return WidgetReadingHistory.Day.readingTime.getter;
}

void *WidgetBookInfo.cloudAssetType.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 48);
  v2 = v1;
  return v1;
}

void WidgetBookInfo.cloudAssetType.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = a1;
}

uint64_t (*WidgetBookInfo.cloudAssetType.modify())()
{
  return WidgetReadingHistory.Day.readingTime.getter;
}

id WidgetBookInfo.assetType.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 56);
}

void WidgetBookInfo.assetType.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = a1;
}

uint64_t (*WidgetBookInfo.assetType.modify())()
{
  return WidgetReadingHistory.Day.readingTime.getter;
}

uint64_t WidgetBookInfo.coverURL.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 72));
  return v1;
}

uint64_t WidgetBookInfo.coverURL.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 72));
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

uint64_t (*WidgetBookInfo.coverURL.modify())()
{
  return WidgetReadingHistory.Day.readingTime.getter;
}

uint64_t WidgetBookInfo.isRTL.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t WidgetBookInfo.isRTL.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = result;
  return result;
}

uint64_t (*WidgetBookInfo.isRTL.modify())()
{
  return WidgetReadingHistory.Day.readingTime.getter;
}

uint64_t destroy for WidgetBookInfo(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
}

uint64_t initializeWithCopy for WidgetBookInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(void **)(a2 + 48);
  v6 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v8 = v5;
  v9 = v6;
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for WidgetBookInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  v9 = *(void **)(a1 + 48);
  v10 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  v11 = v10;

  v12 = *(void **)(a2 + 56);
  v13 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  v14 = v12;

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 72);
  v16 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

__n128 initializeWithTake for WidgetBookInfo(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for WidgetBookInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v6 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  v7 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetBookInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetBookInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetBookInfo()
{
  return &type metadata for WidgetBookInfo;
}

uint64_t sub_100013C4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  id v21;

  v21 = *(id *)(v0 + 56);
  v1 = BDSLibraryContentAssetTypeAudiobook;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  if (v2 == v5 && v4 == v6)
  {
    sub_100013EC8(&v21);
    swift_bridgeObjectRelease_n(v4, 2);
    sub_100013EF0(&v21);
    goto LABEL_13;
  }
  v8 = v6;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
  sub_100013EC8(&v21);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  sub_100013EF0(&v21);
  if ((v9 & 1) != 0)
  {
LABEL_13:
    v19 = 1;
    return v19 & 1;
  }
  v10 = *(_QWORD *)(v0 + 48);
  if (v10)
  {
    v11 = BDSCloudAssetTypeStoreAudiobook;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v14 = v13;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v17 = v16;
    if (v12 == v15 && v14 == v16)
      v19 = 1;
    else
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, v16, 0);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

uint64_t sub_100013D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v21;

  v21 = *(id *)(v0 + 56);
  v1 = BDSLibraryContentAssetTypeAudiobook;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  if (v2 == v5 && v4 == v6)
  {
    sub_100013EC8(&v21);
    swift_bridgeObjectRelease_n(v4, 2);
    sub_100013EF0(&v21);
    v11 = *(_QWORD *)(v0 + 48);
    if (v11)
      goto LABEL_7;
LABEL_13:
    v10 = 0;
    return v10 & 1;
  }
  v8 = v6;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
  sub_100013EC8(&v21);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  sub_100013EF0(&v21);
  v10 = 0;
  if ((v9 & 1) == 0)
    return v10 & 1;
  v11 = *(_QWORD *)(v0 + 48);
  if (!v11)
    goto LABEL_13;
LABEL_7:
  v12 = BDSCloudAssetTypeStoreAudiobook;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v15 = v14;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v18 = v17;
  if (v13 == v16 && v15 == v17)
    v10 = 1;
  else
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v16, v17, 0);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v18);
  return v10 & 1;
}

id *sub_100013EC8(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

id *sub_100013EF0(id *a1)
{

  return a1;
}

uint64_t sub_100013F18()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for WidgetDataCacheManager();
  result = swift_allocObject(v0, 16, 7);
  qword_1000AA288 = v0;
  unk_1000AA290 = &off_10009B220;
  qword_1000AA270 = result;
  return result;
}

void sub_100013F60()
{
  id v0;
  uint64_t v1;
  uint64_t v2;

  v0 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v0, "scale");
  v2 = v1;

  qword_1000AA298 = v2;
}

BOOL sub_100013FC0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100013FD4()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100014018()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100014040(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100014090(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v6 = a2;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 40);
  v4 = a2;
  sub_100007984((uint64_t)&v6, v3, &qword_1000A1280);
  return swift_continuation_resume(v2);
}

void sub_1000140E0(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

uint64_t sub_100014114(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    v5 = sub_100005F78(&qword_1000A1278);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v9 = a2;
    return swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for WidgetImageManager()
{
  return objc_opt_self(_TtC20BooksWidgetExtension18WidgetImageManager);
}

uint64_t sub_1000141C0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000C090(v0, qword_1000A1180);
  sub_10000BE14(v0, (uint64_t)qword_1000A1180);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x800000010007BDF0, 0xD00000000000001ELL, 0x800000010007BF20);
}

uint64_t sub_10001423C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignposter(0);
  sub_10000C090(v4, qword_1000A1198);
  sub_10000BE14(v4, (uint64_t)qword_1000A1198);
  if (qword_1000A0638 != -1)
    swift_once(&qword_1000A0638, sub_1000141C0);
  v5 = sub_10000BE14(v0, (uint64_t)qword_1000A1180);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSSignposter.init(logger:)(v3);
}

uint64_t sub_100014324(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(double *)(v5 + 184) = a4;
  *(double *)(v5 + 192) = a5;
  *(_QWORD *)(v5 + 168) = a2;
  *(_QWORD *)(v5 + 176) = a3;
  *(_QWORD *)(v5 + 160) = a1;
  v6 = type metadata accessor for URL(0);
  *(_QWORD *)(v5 + 200) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 208) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 216) = swift_task_alloc(v8);
  *(_QWORD *)(v5 + 224) = swift_task_alloc(v8);
  return swift_task_switch(sub_10001439C, 0, 0);
}

uint64_t sub_10001439C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  _QWORD *v23;
  double v24;
  double v25;
  double v26;
  id v27;
  NSURL *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (qword_1000A0638 != -1)
    swift_once(&qword_1000A0638, sub_1000141C0);
  v1 = v0[20];
  v2 = v0[28];
  v3 = v0[25];
  v4 = v0[26];
  v5 = v0[22];
  v6 = type metadata accessor for Logger(0);
  v0[29] = sub_10000BE14(v6, (uint64_t)qword_1000A1180);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[30] = v7;
  v7(v2, v1, v3);
  v8 = swift_bridgeObjectRetain_n(v5, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = v0[28];
  v13 = v0[25];
  v14 = v0[26];
  v15 = v0[22];
  if (v11)
  {
    v16 = v0[21];
    v36 = v0[26];
    v17 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v38 = v37;
    *(_DWORD *)v17 = 136315394;
    swift_bridgeObjectRetain(v15);
    v0[18] = sub_10005BD08(v16, v15, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v17 + 4, v17 + 12);
    v18 = swift_bridgeObjectRelease_n(v15, 3);
    *(_WORD *)(v17 + 12) = 2080;
    v19 = URL.debugDescription.getter(v18);
    v21 = v20;
    v0[19] = sub_10005BD08(v19, v20, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v0 + 20, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v21);
    v22 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v22(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Generating a thumbnail from QuickLook for assetID: %s, url: %s.", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[22], 2);
    v22 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v22(v12, v13);
  }

  v0[31] = v22;
  if (qword_1000A0630 != -1)
    swift_once(&qword_1000A0630, sub_100013F60);
  v23 = v0 + 2;
  v25 = *((double *)v0 + 23);
  v24 = *((double *)v0 + 24);
  v26 = *(double *)&qword_1000AA298;
  v27 = objc_allocWithZone((Class)QLThumbnailGenerationRequest);
  URL._bridgeToObjectiveC()(v28);
  v30 = v29;
  v31 = objc_msgSend(v27, "initWithFileAtURL:size:scale:representationTypes:", v29, -1, v25, v24, v26);
  v0[32] = v31;

  v32 = objc_msgSend((id)objc_opt_self(QLThumbnailGenerator), "sharedGenerator");
  v0[33] = v32;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_10001470C;
  v33 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v34 = v0 + 10;
  v34[1] = 0x40000000;
  v34[2] = sub_100014114;
  v34[3] = &unk_10009AA18;
  v34[4] = v33;
  objc_msgSend(v32, "generateBestRepresentationForRequest:completionHandler:", v31, v34);
  return swift_continuation_await(v23);
}

uint64_t sub_10001470C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 272) = v1;
  if (v1)
    v2 = sub_100014810;
  else
    v2 = sub_10001476C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001476C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;

  v1 = *(void **)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(void **)(v0 + 120);

  v5 = objc_msgSend(v4, "UIImage");
  v6 = objc_msgSend(v4, "type");

  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(id, BOOL))(v0 + 8))(v5, v6 == 0);
}

uint64_t sub_100014810()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31[2];

  v1 = *(void **)(v0 + 264);
  v2 = *(void **)(v0 + 256);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 240);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 160);
  swift_willThrow();

  v3(v4, v7, v5);
  v8 = swift_bridgeObjectRetain_n(v6, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = *(_QWORD *)(v0 + 216);
    v29 = *(_QWORD *)(v0 + 200);
    v30 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    v13 = *(_QWORD *)(v0 + 168);
    v12 = *(_QWORD *)(v0 + 176);
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v31[0] = v15;
    *(_DWORD *)v14 = 136315394;
    swift_bridgeObjectRetain(v12);
    *(_QWORD *)(v0 + 128) = sub_10005BD08(v13, v12, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v14 + 4, v14 + 12);
    v16 = swift_bridgeObjectRelease_n(v12, 3);
    *(_WORD *)(v14 + 12) = 2080;
    v17 = URL.debugDescription.getter(v16);
    v19 = v18;
    *(_QWORD *)(v0 + 136) = sub_10005BD08(v17, v18, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v19);
    v30(v11, v29);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unable to download a thumbnail from QuickLook for assetID: %s, url: %s.", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    v21 = *(_QWORD *)(v0 + 216);
    v22 = *(_QWORD *)(v0 + 200);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 176), 2);
    v20(v21, v22);
  }

  v23 = *(_QWORD *)(v0 + 272);
  v25 = *(_QWORD *)(v0 + 216);
  v24 = *(_QWORD *)(v0 + 224);
  v26 = sub_10001A9D8();
  swift_allocError(&type metadata for WidgetImageManager.FetchError, v26, 0, 0);
  *v27 = 3;
  swift_willThrow();
  swift_errorRelease(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100014A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(double *)(v6 + 264) = a5;
  *(double *)(v6 + 272) = a6;
  *(_QWORD *)(v6 + 248) = a3;
  *(_QWORD *)(v6 + 256) = a4;
  *(_QWORD *)(v6 + 232) = a1;
  *(_QWORD *)(v6 + 240) = a2;
  v7 = sub_100005F78(&qword_1000A09F0);
  *(_QWORD *)(v6 + 280) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  *(_QWORD *)(v6 + 288) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 296) = v9;
  *(_QWORD *)(v6 + 304) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100014AF8, 0, 0);
}

uint64_t sub_100014AF8()
{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[2];

  if (qword_1000A0630 != -1)
    swift_once(&qword_1000A0630, sub_100013F60);
  v3 = *(_QWORD *)(v1 + 232);
  v4 = *(_QWORD *)(v1 + 240);
  v5 = CGSize.scaled(_:)(*(double *)&qword_1000AA298, *(double *)(v1 + 264), *(double *)(v1 + 272));
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v4;
  *(_QWORD *)(v1 + 32) = 8222587;
  *(_QWORD *)(v1 + 40) = 0xE300000000000000;
  if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v7 = v6;
  if (v5 <= -9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  *(_QWORD *)(v1 + 168) = (uint64_t)v5;
  v8 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v10 = v9;
  *(_QWORD *)(v1 + 64) = v8;
  *(_QWORD *)(v1 + 72) = v9;
  v2 = sub_1000075E8();
  v0 = &type metadata for String;
  v11 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v1 + 32, v1 + 64, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v2, v2, v2);
  v13 = v12;
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(v1 + 80) = v11;
  *(_QWORD *)(v1 + 88) = v13;
  *(_QWORD *)(v1 + 96) = 8218747;
  *(_QWORD *)(v1 + 104) = 0xE300000000000000;
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v46 = *(_QWORD *)(v1 + 296);
  v14 = *(_QWORD *)(v1 + 280);
  v47 = *(_QWORD *)(v1 + 288);
  *(_QWORD *)(v1 + 160) = (uint64_t)v7;
  v15 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v17 = v16;
  *(_QWORD *)(v1 + 128) = v15;
  *(_QWORD *)(v1 + 136) = v16;
  v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v1 + 96, v1 + 128, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v2, v2, v2);
  v20 = v19;
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(v1 + 144) = v18;
  *(_QWORD *)(v1 + 152) = v20;
  *(_QWORD *)(v1 + 112) = 8218235;
  *(_QWORD *)(v1 + 120) = 0xE300000000000000;
  *(_QWORD *)(v1 + 48) = 6778986;
  *(_QWORD *)(v1 + 56) = 0xE300000000000000;
  v2 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v1 + 112, v1 + 48, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v2, v2, v2);
  v0 = v21;
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)(v1 + 312) = v2;
  *(_QWORD *)(v1 + 320) = v0;
  URL.init(string:)(v2, v0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v14, 1, v47) == 1)
  {
    sub_100007A0C(*(_QWORD *)(v1 + 280), &qword_1000A09F0);
    if (qword_1000A0638 == -1)
    {
LABEL_11:
      v22 = *(_QWORD *)(v1 + 256);
      v23 = type metadata accessor for Logger(0);
      sub_10000BE14(v23, (uint64_t)qword_1000A1180);
      swift_bridgeObjectRetain_n(v22, 2);
      v24 = swift_bridgeObjectRetain(v0);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter();
      v27 = os_log_type_enabled(v25, v26);
      v28 = *(_QWORD *)(v1 + 256);
      if (v27)
      {
        v29 = *(_QWORD *)(v1 + 248);
        v30 = swift_slowAlloc(22, -1);
        v31 = swift_slowAlloc(64, -1);
        v49[0] = v31;
        *(_DWORD *)v30 = 136315394;
        swift_bridgeObjectRetain(v28);
        *(_QWORD *)(v1 + 176) = sub_10005BD08(v29, v28, v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 176, v1 + 184, v30 + 4, v30 + 12);
        swift_bridgeObjectRelease_n(v28, 3);
        *(_WORD *)(v30 + 12) = 2080;
        swift_bridgeObjectRetain(v0);
        *(_QWORD *)(v1 + 184) = sub_10005BD08(v2, (unint64_t)v0, v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 184, v1 + 192, v30 + 14, v30 + 22);
        swift_bridgeObjectRelease_n(v0, 3);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Invalid cover URL for assetID: %s, url: %s.", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 256), 2);
        swift_bridgeObjectRelease_n(v0, 2);
      }

      v41 = sub_10001A9D8();
      swift_allocError(&type metadata for WidgetImageManager.FetchError, v41, 0, 0);
      *v42 = 0;
      swift_willThrow();
      v43 = *(_QWORD *)(v1 + 280);
      swift_task_dealloc(*(_QWORD *)(v1 + 304));
      swift_task_dealloc(v43);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
LABEL_27:
    swift_once(&qword_1000A0638, sub_1000141C0);
    goto LABEL_11;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 296) + 32))(*(_QWORD *)(v1 + 304), *(_QWORD *)(v1 + 280), *(_QWORD *)(v1 + 288));
  if (qword_1000A0638 != -1)
    swift_once(&qword_1000A0638, sub_1000141C0);
  v32 = *(_QWORD *)(v1 + 256);
  v33 = type metadata accessor for Logger(0);
  *(_QWORD *)(v1 + 328) = sub_10000BE14(v33, (uint64_t)qword_1000A1180);
  swift_bridgeObjectRetain_n(v32, 2);
  v34 = swift_bridgeObjectRetain_n(v0, 2);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  v37 = os_log_type_enabled(v35, v36);
  v38 = *(_QWORD *)(v1 + 256);
  if (v37)
  {
    v39 = *(_QWORD *)(v1 + 248);
    v40 = swift_slowAlloc(22, -1);
    v48 = swift_slowAlloc(64, -1);
    v49[0] = v48;
    *(_DWORD *)v40 = 136315394;
    swift_bridgeObjectRetain(v38);
    *(_QWORD *)(v1 + 216) = sub_10005BD08(v39, v38, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 216, v1 + 224, v40 + 4, v40 + 12);
    swift_bridgeObjectRelease_n(v38, 3);
    *(_WORD *)(v40 + 12) = 2080;
    swift_bridgeObjectRetain(v0);
    *(_QWORD *)(v1 + 224) = sub_10005BD08(v2, (unint64_t)v0, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 224, v1 + 232, v40 + 14, v40 + 22);
    swift_bridgeObjectRelease_n(v0, 3);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Downloading cover image for asset '%s' from url %s.", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v40, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 256), 2);
    swift_bridgeObjectRelease_n(v0, 2);
  }

  *(_QWORD *)(v1 + 336) = objc_msgSend((id)objc_opt_self(NSURLSession), "sharedSession");
  v45 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.data(from:delegate:)[1]);
  *(_QWORD *)(v1 + 344) = v45;
  *v45 = v1;
  v45[1] = sub_100015258;
  return NSURLSession.data(from:delegate:)(*(_QWORD *)(v1 + 304), 0);
}

uint64_t sub_100015258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t (*v9)();

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 344);
  v5[44] = a1;
  v5[45] = a2;
  v5[46] = a3;
  v5[47] = v3;
  swift_task_dealloc(v6);
  v7 = (void *)v5[42];
  if (v3)
  {
    v8 = v5[40];

    swift_bridgeObjectRelease(v8);
    v9 = sub_1000157C4;
  }
  else
  {

    v9 = sub_1000152E0;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_1000152E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  id v9;
  Class isa;
  id v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  unint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48[2];

  v1 = *(_QWORD *)(v0 + 368);
  v2 = objc_opt_self(NSHTTPURLResponse);
  v3 = swift_dynamicCastObjCClass(v1, v2);
  if (!v3)
  {
LABEL_6:
    v18 = *(_QWORD *)(v0 + 320);
    swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 256), 2);
    v19 = swift_bridgeObjectRetain(v18);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v0 + 320);
    if (v22)
    {
      v47 = *(_QWORD *)(v0 + 312);
      v25 = *(_QWORD *)(v0 + 248);
      v24 = *(_QWORD *)(v0 + 256);
      v26 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(64, -1);
      v48[0] = v27;
      *(_DWORD *)v26 = 136315394;
      swift_bridgeObjectRetain(v24);
      *(_QWORD *)(v0 + 192) = sub_10005BD08(v25, v24, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease_n(v24, 3);
      *(_WORD *)(v26 + 12) = 2080;
      swift_bridgeObjectRetain(v23);
      *(_QWORD *)(v0 + 200) = sub_10005BD08(v47, v23, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease_n(v23, 3);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Cover httpResponse status code is not 200 for assetID: %s, url: %s.", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 256), 2);
      swift_bridgeObjectRelease_n(v23, 2);
    }

    v28 = *(_QWORD *)(v0 + 360);
    v29 = *(void **)(v0 + 368);
    v30 = *(_QWORD *)(v0 + 352);
    v32 = *(_QWORD *)(v0 + 296);
    v31 = *(_QWORD *)(v0 + 304);
    v33 = *(_QWORD *)(v0 + 288);
    v34 = sub_10001A9D8();
    swift_allocError(&type metadata for WidgetImageManager.FetchError, v34, 0, 0);
    *v35 = 2;
    swift_willThrow();
    goto LABEL_10;
  }
  v4 = (void *)v3;
  v5 = *(id *)(v0 + 368);
  if (objc_msgSend(v4, "statusCode") != (id)200)
  {

    goto LABEL_6;
  }
  v7 = *(_QWORD *)(v0 + 352);
  v6 = *(_QWORD *)(v0 + 360);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 320));
  v8 = *(double *)&qword_1000AA298;
  v9 = objc_allocWithZone((Class)UIImage);
  sub_10001AAC4(v7, v6);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v11 = objc_msgSend(v9, "initWithData:scale:", isa, v8);
  sub_10001AA80(v7, v6);

  if (v11)
  {
    v12 = *(_QWORD *)(v0 + 360);
    v13 = *(void **)(v0 + 368);
    v14 = *(_QWORD *)(v0 + 352);
    v15 = *(_QWORD *)(v0 + 304);
    v16 = *(_QWORD *)(v0 + 280);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 296) + 8))(v15, *(_QWORD *)(v0 + 288));

    sub_10001AA80(v14, v12);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(id))(v0 + 8))(v11);
  }
  v37 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 256), 2);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.error.getter();
  v40 = os_log_type_enabled(v38, v39);
  v41 = *(_QWORD *)(v0 + 256);
  if (v40)
  {
    v42 = *(_QWORD *)(v0 + 248);
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    v48[0] = v44;
    *(_DWORD *)v43 = 136315138;
    swift_bridgeObjectRetain(v41);
    *(_QWORD *)(v0 + 208) = sub_10005BD08(v42, v41, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v43 + 4, v43 + 12);
    swift_bridgeObjectRelease_n(v41, 3);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to create UIImage from downloaded image data for assetID %s.", v43, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 256), 2);
  }

  v28 = *(_QWORD *)(v0 + 360);
  v29 = *(void **)(v0 + 368);
  v30 = *(_QWORD *)(v0 + 352);
  v32 = *(_QWORD *)(v0 + 296);
  v31 = *(_QWORD *)(v0 + 304);
  v33 = *(_QWORD *)(v0 + 288);
  v45 = sub_10001A9D8();
  swift_allocError(&type metadata for WidgetImageManager.FetchError, v45, 0, 0);
  *v46 = 5;
  swift_willThrow();

LABEL_10:
  sub_10001AA80(v30, v28);

  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  v36 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000157C4()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 8))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 288));
  v1 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100015814(uint64_t a1, double a2, double a3)
{
  uint64_t v3;

  *(double *)(v3 + 112) = a2;
  *(double *)(v3 + 120) = a3;
  *(_QWORD *)(v3 + 104) = a1;
  return swift_task_switch(sub_100015830, 0, 0);
}

uint64_t sub_100015830()
{
  uint64_t v0;
  uint64_t *v1;
  double *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  NSString v9;
  NSString v10;
  uint64_t isEscapingClosureAtFileLocation;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  void *v28;
  id v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint8_t *v52;
  unint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  os_log_type_t type;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89[2];

  v1 = *(uint64_t **)(v0 + 104);
  v3 = v1[4];
  v2 = (double *)v1[5];
  v4 = v1[1];
  if (v4)
  {
    v5 = *v1;
    v6 = (void *)v1[1];
  }
  else
  {
    v5 = 0;
    v6 = (void *)0xE000000000000000;
  }
  v7 = (_QWORD *)(v88 + 16);
  v8 = (void *)objc_opt_self(MPMediaQuery);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  v9 = String._bridgeToObjectiveC()();
  v10 = String._bridgeToObjectiveC()();
  isEscapingClosureAtFileLocation = (uint64_t)objc_msgSend(v8, "bk_queryWithStoreID:albumTitle:isCloudItem:", v9, v10, 1);

  if (!isEscapingClosureAtFileLocation)
  {
    if (qword_1000A0638 != -1)
      swift_once(&qword_1000A0638, sub_1000141C0);
    v20 = type metadata accessor for Logger(0);
    sub_10000BE14(v20, (uint64_t)qword_1000A1180);
    swift_bridgeObjectRetain(v2);
    v21 = swift_bridgeObjectRetain(v6);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      v89[0] = v86;
      *(_DWORD *)v24 = 136315394;
      swift_bridgeObjectRetain(v2);
      *(_QWORD *)(v88 + 16) = sub_10005BD08(v3, (unint64_t)v2, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v7, v88 + 24, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease_n(v2, 3);
      *(_WORD *)(v24 + 12) = 2080;
      swift_bridgeObjectRetain(v6);
      *(_QWORD *)(v88 + 16) = sub_10005BD08(v5, (unint64_t)v6, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v7, v88 + 24, v24 + 14, v24 + 22);
      swift_bridgeObjectRelease_n(v6, 3);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Nil MPMediaQuery for audiobook with assetID: %s title: %s.", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v2, 2);
      swift_bridgeObjectRelease_n(v6, 2);
    }

    v25 = sub_10001A9D8();
    swift_allocError(&type metadata for WidgetImageManager.FetchError, v25, 0, 0);
    *v26 = 6;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v88 + 8))();
  }
  swift_bridgeObjectRelease(v6);
  v12 = objc_msgSend((id)isEscapingClosureAtFileLocation, "items");
  if (!v12)
    goto LABEL_46;
  v13 = v12;
  v14 = sub_10001AB08(0, &qword_1000A1288, MPMediaItem_ptr);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

  if (!((unint64_t)v15 >> 62))
  {
    if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_8;
    goto LABEL_45;
  }
  if (v15 < 0)
    v73 = v15;
  else
    v73 = v15 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v15);
  v74 = _CocoaArrayWrapper.endIndex.getter(v73);
  swift_bridgeObjectRelease(v15);
  if (!v74)
  {
LABEL_45:
    swift_bridgeObjectRelease(v15);
LABEL_46:
    if (qword_1000A0638 != -1)
      swift_once(&qword_1000A0638, sub_1000141C0);
    v75 = type metadata accessor for Logger(0);
    sub_10000BE14(v75, (uint64_t)qword_1000A1180);
    v76 = swift_bridgeObjectRetain(v2);
    v77 = Logger.logObject.getter(v76);
    v78 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v77, v78))
    {
      v79 = (uint8_t *)swift_slowAlloc(12, -1);
      v80 = swift_slowAlloc(32, -1);
      v89[0] = v80;
      *(_DWORD *)v79 = 136315138;
      swift_bridgeObjectRetain(v2);
      *(_QWORD *)(v88 + 16) = sub_10005BD08(v3, (unint64_t)v2, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v7, v88 + 24, v79 + 4, v79 + 12);
      swift_bridgeObjectRelease_n(v2, 3);
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "Nil MPMediaItem for audiobook with assetID: %s.", v79, 0xCu);
      swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1, -1);
      swift_slowDealloc(v79, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v2, 2);
    }

    v81 = sub_10001A9D8();
    swift_allocError(&type metadata for WidgetImageManager.FetchError, v81, 0, 0);
    *v82 = 7;
    swift_willThrow();
    goto LABEL_52;
  }
LABEL_8:
  if ((v15 & 0xC000000000000001) != 0)
  {
    v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v15);
  }
  else
  {
    if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_56;
    }
    v16 = *(id *)(v15 + 32);
  }
  v6 = v16;
  v17 = (id)(v88 + 64);
  swift_bridgeObjectRelease(v15);
  v18 = objc_msgSend(v6, "valueForProperty:", MPMediaItemPropertyArtwork);
  if (v18)
  {
    v19 = v18;
    _bridgeAnyObjectToAny(_:)(v7, v18);
    swift_unknownObjectRelease(v19);
  }
  else
  {
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v88 + 32) = 0u;
  }
  sub_100007984((uint64_t)v7, (uint64_t)v17, &qword_1000A1290);
  if (!*(_QWORD *)(v88 + 88))
    goto LABEL_27;
  v27 = sub_10001AB08(0, &qword_1000A1298, MPMediaItemArtwork_ptr);
  if ((swift_dynamicCast(v88 + 96, v17, (char *)&type metadata for Any + 8, v27, 6) & 1) == 0)
    goto LABEL_28;
  v28 = *(void **)(v88 + 96);
  v29 = objc_msgSend(v28, "imageWithSize:", *(double *)(v88 + 112), *(double *)(v88 + 120));
  if (!v29)
  {
    if (qword_1000A0638 != -1)
      swift_once(&qword_1000A0638, sub_1000141C0);
    v55 = type metadata accessor for Logger(0);
    sub_10000BE14(v55, (uint64_t)qword_1000A1180);
    v56 = swift_bridgeObjectRetain(v2);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v60 = *(double *)(v88 + 112);
      v59 = *(double *)(v88 + 120);
      v61 = swift_slowAlloc(32, -1);
      v84 = swift_slowAlloc(96, -1);
      v89[0] = v84;
      *(_DWORD *)v61 = 136315650;
      type = v58;
      swift_bridgeObjectRetain(v2);
      *(_QWORD *)(v88 + 16) = sub_10005BD08(v3, (unint64_t)v2, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v7, v88 + 24, v61 + 4, v61 + 12);
      v62 = swift_bridgeObjectRelease_n(v2, 3);
      *(_WORD *)(v61 + 12) = 2080;
      v63 = Double.description.getter(v62, v60);
      v65 = v64;
      *(_QWORD *)(v88 + 16) = sub_10005BD08(v63, v64, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v88 + 16, v88 + 24, v61 + 14, v61 + 22);
      v66 = swift_bridgeObjectRelease(v65);
      *(_WORD *)(v61 + 22) = 2080;
      v67 = Double.description.getter(v66, v59);
      v69 = v68;
      *(_QWORD *)(v88 + 16) = sub_10005BD08(v67, v68, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v88 + 16, v88 + 24, v61 + 24, v61 + 32);
      swift_bridgeObjectRelease(v69);
      _os_log_impl((void *)&_mh_execute_header, v57, type, "Nil image for store audiobook with assetID: %s width: %s height: %s.", (uint8_t *)v61, 0x20u);
      swift_arrayDestroy(v84, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v61, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v2, 2);
    }

    v70 = sub_10001A9D8();
    swift_allocError(&type metadata for WidgetImageManager.FetchError, v70, 0, 0);
    *v71 = 8;
    swift_willThrow();

    goto LABEL_52;
  }
  v17 = v29;
  v30 = *(double *)(v88 + 120);
  swift_bridgeObjectRelease(v2);
  objc_msgSend(v17, "size");
  if (v31 <= v30)
  {
    v32 = *(double *)(v88 + 112);
    objc_msgSend(v17, "size");
    if (v33 <= v32)
    {

      return (*(uint64_t (**)(id))(v88 + 8))(v17);
    }
  }
  v35 = *(double *)(v88 + 112);
  v34 = *(double *)(v88 + 120);
  objc_msgSend(v17, "size");
  v38 = CGSize.scaledToFit(in:times:horizontally:)(1, 1, v35, v34, v36, v37);
  v40 = v39;
  v41 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithSize:", v38, v39);
  v2 = (double *)swift_allocObject(&unk_10009AA40, 40, 7);
  *((_QWORD *)v2 + 2) = v17;
  v2[3] = v38;
  v2[4] = v40;
  v3 = swift_allocObject(&unk_10009AA68, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_10001AB64;
  *(_QWORD *)(v3 + 24) = v2;
  *(_QWORD *)(v88 + 48) = sub_10000C0D0;
  *(_QWORD *)(v88 + 56) = v3;
  *(_QWORD *)(v88 + 16) = _NSConcreteStackBlock;
  *(_QWORD *)(v88 + 24) = 1107296256;
  *(_QWORD *)(v88 + 32) = sub_1000140E0;
  *(_QWORD *)(v88 + 40) = &unk_10009AA80;
  v42 = _Block_copy(v7);
  v7 = *(_QWORD **)(v88 + 56);
  v43 = v17;
  swift_retain(v3);
  swift_release(v7);
  v17 = objc_msgSend(v41, "imageWithActions:", v42);

  _Block_release(v42);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 84, 121, 35, 1);
  swift_release(v3);
  swift_release(v2);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
    return (*(uint64_t (**)(id))(v88 + 8))(v17);
  __break(1u);
LABEL_27:
  sub_100007A0C((uint64_t)v17, &qword_1000A1290);
LABEL_28:
  if (qword_1000A0638 != -1)
LABEL_56:
    swift_once(&qword_1000A0638, sub_1000141C0);
  v44 = type metadata accessor for Logger(0);
  sub_10000BE14(v44, (uint64_t)qword_1000A1180);
  v45 = swift_bridgeObjectRetain(v2);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v87 = v6;
    v48 = (uint8_t *)swift_slowAlloc(12, -1);
    v85 = isEscapingClosureAtFileLocation;
    v49 = v7;
    v50 = swift_slowAlloc(32, -1);
    v89[0] = v50;
    *(_DWORD *)v48 = 136315138;
    swift_bridgeObjectRetain(v2);
    *(_QWORD *)(v88 + 16) = sub_10005BD08(v3, (unint64_t)v2, v89);
    v51 = v49;
    isEscapingClosureAtFileLocation = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v51, v88 + 24, v48 + 4, v48 + 12);
    swift_bridgeObjectRelease_n(v2, 3);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Nil media artwork for audiobook with assetID: %s.", v48, 0xCu);
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    v52 = v48;
    v6 = v87;
    swift_slowDealloc(v52, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v2, 2);
  }

  v53 = sub_10001A9D8();
  swift_allocError(&type metadata for WidgetImageManager.FetchError, v53, 0, 0);
  *v54 = 8;
  swift_willThrow();

LABEL_52:
  return (*(uint64_t (**)(void))(v88 + 8))();
}

uint64_t sub_10001643C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v1[55] = a1;
  v2 = type metadata accessor for OSSignpostError(0);
  v1[56] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[57] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[58] = swift_task_alloc(v4);
  v1[59] = swift_task_alloc(v4);
  v1[60] = swift_task_alloc(v4);
  v1[61] = swift_task_alloc(v4);
  v1[62] = swift_task_alloc(v4);
  v1[63] = swift_task_alloc(v4);
  v1[64] = swift_task_alloc(v4);
  v5 = sub_100005F78(&qword_1000A09F0);
  v1[65] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v1[66] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[67] = v7;
  v1[68] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID(0);
  v1[69] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[70] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[71] = swift_task_alloc(v10);
  v1[72] = swift_task_alloc(v10);
  v1[73] = swift_task_alloc(v10);
  v1[74] = swift_task_alloc(v10);
  v1[75] = swift_task_alloc(v10);
  v1[76] = swift_task_alloc(v10);
  v1[77] = swift_task_alloc(v10);
  v1[78] = swift_task_alloc(v10);
  v1[79] = swift_task_alloc(v10);
  return swift_task_switch(sub_1000165C0, 0, 0);
}

uint64_t sub_1000165C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_signpost_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint8_t *v9;
  os_signpost_id_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  os_signpost_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint8_t *v70;
  os_signpost_id_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(void);
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  int64x2_t *v95;
  uint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  NSObject *v100;
  uint64_t v101;
  os_signpost_type_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint8_t *v111;
  os_signpost_id_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150[2];

  if (qword_1000A0640 != -1)
    swift_once(&qword_1000A0640, sub_10001423C);
  v1 = type metadata accessor for OSSignposter(0);
  *(_QWORD *)(v0 + 640) = sub_10000BE14(v1, (uint64_t)qword_1000A1198);
  v2 = static OSSignpostID.exclusive.getter();
  v3 = OSSignposter.logHandle.getter(v2);
  v4 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 624);
    v6 = *(_QWORD *)(v0 + 560);
    v7 = *(_QWORD *)(v0 + 552);
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v8(v5, *(_QWORD *)(v0 + 632), v7);
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    v10 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, v4, v10, "Raw Cover Fetching", "", v9, 2u);
    swift_slowDealloc(v9, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 560);

    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  }
  v144 = v0 + 344;
  *(_QWORD *)(v0 + 648) = v8;
  v12 = *(_QWORD *)(v0 + 632);
  v13 = *(_QWORD *)(v0 + 624);
  v14 = *(_QWORD *)(v0 + 560);
  v15 = *(_QWORD *)(v0 + 552);
  v16 = *(_QWORD *)(v0 + 440);
  v8(v13, v12, v15);
  v17 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v138 = OSSignpostIntervalState.init(id:isOpen:)(v13, 1);
  *(_QWORD *)(v0 + 656) = v138;
  v18 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  *(_QWORD *)(v0 + 664) = v18;
  v132 = v18;
  v18(v12, v15);
  v148 = *(_QWORD *)(v16 + 32);
  *(_QWORD *)(v0 + 672) = v148;
  v19 = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v0 + 680) = v19;
  *(_BYTE *)(v0 + 792) = 0;
  v20 = qword_1000A0638;
  swift_bridgeObjectRetain(v19);
  if (v20 != -1)
    swift_once(&qword_1000A0638, sub_1000141C0);
  v21 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 688) = sub_10000BE14(v21, (uint64_t)qword_1000A1180);
  v22 = swift_bridgeObjectRetain_n(v19, 2);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  v135 = v8;
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v150[0] = v26;
    *(_DWORD *)v25 = 136315138;
    swift_bridgeObjectRetain(v19);
    *(_QWORD *)(v0 + 336) = sub_10005BD08(v148, v19, v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v144, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease_n(v19, 3);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Fetching raw cover for assetID: %s.", v25, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v19, 2);
  }

  v27 = (uint64_t *)(v0 + 624);
  if (qword_1000A0628 != -1)
    swift_once(&qword_1000A0628, sub_100013F18);
  sub_100006C68(qword_1000AA270, qword_1000AA288);
  if ((sub_10003C424(v148, v19, 0) & 1) != 0)
  {
    v28 = swift_bridgeObjectRetain(v19);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v150[0] = v32;
      *(_DWORD *)v31 = 136315138;
      swift_bridgeObjectRetain(v19);
      *(_QWORD *)(v0 + 344) = sub_10005BD08(v148, v19, v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v144, v0 + 352, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease_n(v19, 3);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Found cached raw cover for assetID: %s.", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v19, 2);
    }

    v43 = OSSignposter.logHandle.getter(v42);
    v44 = OSSignpostIntervalState.signpostID.getter();
    v45 = static os_signpost_type_t.end.getter(v44);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v46 = *(_QWORD *)(v0 + 488);
      v47 = *(_QWORD *)(v0 + 448);
      v48 = *(_QWORD *)(v0 + 456);
      v49 = swift_retain(v138);
      checkForErrorAndConsumeState(state:)(v49);
      swift_release(v138);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v48 + 88))(v46, v47) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v50 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 456) + 8))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 448));
        v50 = "";
      }
      v68 = *(_QWORD *)(v0 + 568);
      v69 = *(_QWORD *)(v0 + 552);
      v135(*(_QWORD *)(v0 + 624), v68, v69);
      v70 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v70 = 0;
      v71 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v43, v45, v71, "Raw Cover Fetching", v50, v70, 2u);
      swift_slowDealloc(v70, -1, -1);

      v132(v68, v69);
    }
    else
    {
      v27 = (uint64_t *)(v0 + 568);

    }
    v72 = *v27;
    v73 = *(_QWORD *)(v0 + 656);
    v74 = *(_QWORD *)(v0 + 632);
    v75 = *(_QWORD *)(v0 + 624);
    v76 = *(_QWORD *)(v0 + 616);
    v77 = *(_QWORD *)(v0 + 608);
    v78 = *(_QWORD *)(v0 + 600);
    v79 = *(_QWORD *)(v0 + 592);
    v80 = *(_QWORD *)(v0 + 584);
    v81 = *(_QWORD *)(v0 + 576);
    v124 = *(_QWORD *)(v0 + 568);
    v126 = *(_QWORD *)(v0 + 544);
    v128 = *(_QWORD *)(v0 + 520);
    v130 = *(_QWORD *)(v0 + 512);
    v133 = *(_QWORD *)(v0 + 504);
    v136 = *(_QWORD *)(v0 + 496);
    v139 = *(_QWORD *)(v0 + 488);
    v142 = *(_QWORD *)(v0 + 480);
    v146 = *(_QWORD *)(v0 + 472);
    v149 = *(_QWORD *)(v0 + 464);
    (*(void (**)(uint64_t, _QWORD))(v0 + 664))(v72, *(_QWORD *)(v0 + 552));
    swift_release(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v124);
    swift_task_dealloc(v126);
    swift_task_dealloc(v128);
    swift_task_dealloc(v130);
    swift_task_dealloc(v133);
    swift_task_dealloc(v136);
    swift_task_dealloc(v139);
    swift_task_dealloc(v142);
    swift_task_dealloc(v146);
    swift_task_dealloc(v149);
    v82 = *(uint64_t (**)(void))(v0 + 8);
    return v82();
  }
  v33 = *(_QWORD *)(v0 + 440);
  v34 = *(_QWORD *)(v33 + 72);
  if (v34)
  {
    v35 = v0 + 432;
    v141 = (uint64_t *)(v0 + 408);
    v145 = *(_QWORD *)(v33 + 64);
    swift_bridgeObjectRetain_n(v19, 2);
    v36 = swift_bridgeObjectRetain_n(v34, 2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc(22, -1);
      v40 = swift_slowAlloc(64, -1);
      v150[0] = v40;
      *(_DWORD *)v39 = 136315394;
      swift_bridgeObjectRetain(v34);
      *(_QWORD *)(v0 + 432) = sub_10005BD08(v145, v34, v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 432, v0 + 440, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease_n(v34, 3);
      *(_WORD *)(v39 + 12) = 2080;
      swift_bridgeObjectRetain(v19);
      *(_QWORD *)(v0 + 368) = sub_10005BD08(v148, v19, v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 368, v0 + 376, v39 + 14, v39 + 22);
      swift_bridgeObjectRelease_n(v19, 3);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Fetching a raw cover for url string: %s, assetID: %s.", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      v41 = v39;
      v35 = v0 + 432;
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v34, 2);
      swift_bridgeObjectRelease_n(v19, 2);
    }

    v58 = *(_QWORD *)(v0 + 536);
    v59 = *(_QWORD *)(v0 + 528);
    v60 = *(_QWORD *)(v0 + 520);
    URL.init(string:)(v145, v34);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v60, 1, v59) == 1)
    {
      sub_100007A0C(*(_QWORD *)(v0 + 520), &qword_1000A09F0);
      v61 = v148;
LABEL_40:
      swift_bridgeObjectRetain_n(v19, 2);
      v88 = swift_bridgeObjectRetain_n(v34, 2);
      v89 = Logger.logObject.getter(v88);
      v90 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v89, v90))
      {
        v91 = swift_slowAlloc(22, -1);
        v92 = swift_slowAlloc(64, -1);
        v150[0] = v92;
        *(_DWORD *)v91 = 136315394;
        swift_bridgeObjectRetain(v19);
        *v141 = sub_10005BD08(v148, v19, v150);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v141, v0 + 416, v91 + 4, v91 + 12);
        swift_bridgeObjectRelease_n(v19, 3);
        *(_WORD *)(v91 + 12) = 2080;
        swift_bridgeObjectRetain(v34);
        *(_QWORD *)(v0 + 416) = sub_10005BD08(v145, v34, v150);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v91 + 14, v91 + 22);
        swift_bridgeObjectRelease_n(v34, 3);
        _os_log_impl((void *)&_mh_execute_header, v89, v90, "Not a file URL for assetID: %s, url: %s. Now using URLSession to download the book cover.", (uint8_t *)v91, 0x16u);
        swift_arrayDestroy(v92, 2, (char *)&type metadata for Any + 8);
        v93 = v92;
        v61 = v148;
        swift_slowDealloc(v93, -1, -1);
        swift_slowDealloc(v91, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(v19, 2);
        swift_bridgeObjectRelease_n(v34, 2);
      }

      v94 = (uint64_t *)swift_task_alloc(dword_1000A126C);
      *(_QWORD *)(v0 + 720) = v94;
      *v94 = v0;
      v94[1] = (uint64_t)sub_100018410;
      return sub_100014A6C(v145, v34, v61, v19, 160.0, 160.0);
    }
    v62 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 536) + 32))(*(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 528));
    v61 = v148;
    if ((URL.isFileURL.getter(v62) & 1) == 0)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 536) + 8))(*(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 528));
      goto LABEL_40;
    }
    v63 = swift_bridgeObjectRetain_n(v19, 2);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(12, -1);
      v67 = swift_slowAlloc(32, -1);
      v150[0] = v67;
      *(_DWORD *)v66 = 136315138;
      swift_bridgeObjectRetain(v19);
      *(_QWORD *)(v0 + 424) = sub_10005BD08(v148, v19, v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v35, v66 + 4, v66 + 12);
      swift_bridgeObjectRelease_n(v19, 3);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Using QuickLook to generate a thumbnail with assetID: %s.", v66, 0xCu);
      swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v66, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v19, 2);
    }

    v108 = (uint64_t *)swift_task_alloc(dword_1000A1274);
    *(_QWORD *)(v0 + 696) = v108;
    *v108 = v0;
    v108[1] = (uint64_t)sub_100017778;
    return sub_100014324(*(_QWORD *)(v0 + 544), v148, v19, 160.0, 160.0);
  }
  else
  {
    v51 = sub_100013D88();
    v52 = swift_bridgeObjectRetain(v19);
    if ((v51 & 1) == 0)
    {
      v84 = Logger.logObject.getter(v52);
      v85 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v84, v85))
      {
        v86 = (uint8_t *)swift_slowAlloc(12, -1);
        v87 = swift_slowAlloc(32, -1);
        v150[0] = v87;
        *(_DWORD *)v86 = 136315138;
        swift_bridgeObjectRetain(v19);
        *(_QWORD *)(v0 + 312) = sub_10005BD08(v148, v19, v150);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v86 + 4, v86 + 12);
        swift_bridgeObjectRelease_n(v19, 3);
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "nil cover URL for assetID: %s.", v86, 0xCu);
        swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v87, -1, -1);
        swift_slowDealloc(v86, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(v19, 2);
      }

      v97 = sub_10001A9D8();
      swift_allocError(&type metadata for WidgetImageManager.FetchError, v97, 0, 0);
      *v98 = 0;
      v99 = swift_willThrow();
      v100 = OSSignposter.logHandle.getter(v99);
      v101 = OSSignpostIntervalState.signpostID.getter();
      v102 = static os_signpost_type_t.end.getter(v101);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v103 = *(_QWORD *)(v0 + 512);
        v105 = *(_QWORD *)(v0 + 448);
        v104 = *(_QWORD *)(v0 + 456);
        v106 = swift_retain(v138);
        checkForErrorAndConsumeState(state:)(v106);
        swift_release(v138);
        if ((*(unsigned int (**)(uint64_t, uint64_t))(v104 + 88))(v103, v105) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v107 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 456) + 8))(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 448));
          v107 = "";
        }
        v109 = *(_QWORD *)(v0 + 592);
        v110 = *(_QWORD *)(v0 + 552);
        v135(*(_QWORD *)(v0 + 624), v109, v110);
        v111 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v111 = 0;
        v112 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v100, v102, v112, "Raw Cover Fetching", v107, v111, 2u);
        swift_slowDealloc(v111, -1, -1);

        v132(v109, v110);
      }
      else
      {
        v27 = (uint64_t *)(v0 + 592);

      }
      v113 = *v27;
      v114 = *(_QWORD *)(v0 + 656);
      v115 = *(_QWORD *)(v0 + 632);
      v116 = *(_QWORD *)(v0 + 624);
      v117 = *(_QWORD *)(v0 + 616);
      v118 = *(_QWORD *)(v0 + 608);
      v119 = *(_QWORD *)(v0 + 600);
      v120 = *(_QWORD *)(v0 + 592);
      v121 = *(_QWORD *)(v0 + 584);
      v122 = *(_QWORD *)(v0 + 576);
      v123 = *(_QWORD *)(v0 + 568);
      v125 = *(_QWORD *)(v0 + 544);
      v127 = *(_QWORD *)(v0 + 520);
      v129 = *(_QWORD *)(v0 + 512);
      v131 = *(_QWORD *)(v0 + 504);
      v134 = *(_QWORD *)(v0 + 496);
      v137 = *(_QWORD *)(v0 + 488);
      v140 = *(_QWORD *)(v0 + 480);
      v143 = *(_QWORD *)(v0 + 472);
      v147 = *(_QWORD *)(v0 + 464);
      (*(void (**)(uint64_t, _QWORD))(v0 + 664))(v113, *(_QWORD *)(v0 + 552));
      swift_release(v114);
      swift_task_dealloc(v115);
      swift_task_dealloc(v116);
      swift_task_dealloc(v117);
      swift_task_dealloc(v118);
      swift_task_dealloc(v119);
      swift_task_dealloc(v120);
      swift_task_dealloc(v121);
      swift_task_dealloc(v122);
      swift_task_dealloc(v123);
      swift_task_dealloc(v125);
      swift_task_dealloc(v127);
      swift_task_dealloc(v129);
      swift_task_dealloc(v131);
      swift_task_dealloc(v134);
      swift_task_dealloc(v137);
      swift_task_dealloc(v140);
      swift_task_dealloc(v143);
      swift_task_dealloc(v147);
      v82 = *(uint64_t (**)(void))(v0 + 8);
      return v82();
    }
    v53 = swift_bridgeObjectRetain(v19);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v57 = swift_slowAlloc(32, -1);
      v150[0] = v57;
      *(_DWORD *)v56 = 136315138;
      swift_bridgeObjectRetain(v19);
      *(_QWORD *)(v0 + 400) = sub_10005BD08(v148, v19, v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408, v56 + 4, v56 + 12);
      swift_bridgeObjectRelease_n(v19, 3);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Attempting to fetch raw store audiobook cover from MediaLibrary for assetID: %s.", v56, 0xCu);
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v19, 2);
    }

    v95 = (int64x2_t *)swift_task_alloc(dword_1000A125C);
    *(_QWORD *)(v0 + 744) = v95;
    v95->i64[0] = v0;
    v95->i64[1] = (uint64_t)sub_100019068;
    v96 = *(_QWORD *)(v0 + 440);
    v95[7] = vdupq_n_s64(0x4064000000000000uLL);
    v95[6].i64[1] = v96;
    return swift_task_switch(sub_100015830, 0, 0);
  }
}

uint64_t sub_100017778(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 696);
  *(_QWORD *)(*v3 + 704) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + 680));
    v8 = sub_100018168;
  }
  else
  {
    *(_BYTE *)(v6 + 793) = a2 & 1;
    *(_QWORD *)(v6 + 712) = a1;
    v8 = sub_100017800;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100017800()
{
  uint64_t v0;
  unsigned __int8 *v1;
  void **v2;
  uint64_t v3;
  char v4;
  void *v5;
  double v6;
  double v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  unint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t **v34;
  void *v35;
  int v36;
  uint64_t *v37;
  CGImage *v38;
  void *v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  os_signpost_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t *v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint8_t *v69;
  os_signpost_id_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95[2];

  v1 = (unsigned __int8 *)(v0 + 792);
  v2 = (void **)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 712);
  v4 = *(_BYTE *)(v0 + 793);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 536) + 8))(*(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 528));
  *(_QWORD *)(v0 + 384) = v3;
  *(_BYTE *)(v0 + 792) = v4;
  v5 = *(void **)(v0 + 712);
  *(_QWORD *)(v0 + 768) = *(_QWORD *)(v0 + 704);
  objc_msgSend(v5, "size");
  if (v6 > 160.0 || (objc_msgSend(v5, "size"), v7 > 160.0))
  {
    v8 = *v1;
    v9 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 680), 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(_QWORD *)(v0 + 680);
    if (v12)
    {
      v89 = *(_QWORD *)(v0 + 672);
      v14 = swift_slowAlloc(28, -1);
      v15 = swift_slowAlloc(64, -1);
      v95[0] = v15;
      *(_DWORD *)v14 = 136315650;
      swift_beginAccess(v0 + 384, v0 + 232, 0, 0);
      v5 = *(void **)(v0 + 384);
      v16 = CGSize.description.getter(objc_msgSend(v5, "size"));
      v18 = v17;
      *(_QWORD *)(v0 + 352) = sub_10005BD08(v16, v17, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease(v18);
      *(_WORD *)(v14 + 12) = 2080;
      swift_bridgeObjectRetain(v13);
      *(_QWORD *)(v0 + 360) = sub_10005BD08(v89, v13, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v0 + 368, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease_n(v13, 3);
      *(_WORD *)(v14 + 22) = 1024;
      *(_DWORD *)(v0 + 784) = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 784, v0 + 788, v14 + 24, v14 + 28);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "About to resize the untreated cover because its current size: %s is larger than the specified size for asset: %s isAppIconCover: %{BOOL}d.", (uint8_t *)v14, 0x1Cu);
      swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 680), 2);
    }

    v19 = v0 + 16;
    *(_QWORD *)(v0 + 776) = v5;
    *(_QWORD *)(v0 + 56) = v0 + 288;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_100019E60;
    v20 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v21 = (_QWORD *)(v0 + 80);
    v21[1] = 0x40000000;
    v21[2] = sub_100014090;
    v21[3] = &unk_10009AA00;
    v21[4] = v20;
    objc_msgSend(v5, "prepareThumbnailOfSize:completionHandler:", v21, 160.0, 160.0);
    return swift_continuation_await(v19);
  }
  v23 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 680), 2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  v26 = os_log_type_enabled(v24, v25);
  v27 = *(_QWORD *)(v0 + 680);
  if (v26)
  {
    v85 = *(_QWORD *)(v0 + 672);
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v95[0] = v29;
    *(_DWORD *)v28 = 136315138;
    swift_bridgeObjectRetain(v27);
    *(_QWORD *)(v0 + 280) = sub_10005BD08(v85, v27, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease_n(v27, 3);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Caching untreated cover for asset: %s.", v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    v30 = v28;
    v2 = (void **)(v0 + 384);
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v27, 2);
  }

  v90 = (_QWORD *)(v0 + 120);
  v31 = *(_QWORD *)(v0 + 768);
  v32 = *(_QWORD *)(v0 + 680);
  v33 = *(_QWORD *)(v0 + 672);
  sub_10001AA1C((uint64_t)qword_1000AA270, v0 + 120);
  v34 = (uint64_t **)sub_100006C68((_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 144));
  swift_beginAccess(v2, v0 + 256, 0, 0);
  v35 = *(void **)(v0 + 384);
  swift_beginAccess(v0 + 792, v0 + 208, 0, 0);
  v36 = *v1;
  v37 = *v34;
  v38 = v35;
  v39 = objc_autoreleasePoolPush();
  if (v36)
    v40 = 2;
  else
    v40 = 0;
  sub_10003D3E8(v33, v32, (void (*)(char *, uint64_t))v40, v38, v37);
  if (v31)
  {
    v41 = v2;
    v42 = *(_QWORD *)(v0 + 680);
    objc_autoreleasePoolPop(v39);

    sub_10001AA60(v90);
    swift_errorRetain(v31);
    swift_bridgeObjectRetain(v42);
    v43 = swift_errorRetain(v31);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.default.getter();
    v46 = os_log_type_enabled(v44, v45);
    v47 = *(_QWORD *)(v0 + 680);
    if (!v46)
    {
      swift_errorRelease(v31);
      swift_bridgeObjectRelease_n(v47, 2);
      swift_errorRelease(v31);
      swift_errorRelease(v31);

      v54 = *v41;
      goto LABEL_19;
    }
    v48 = *(_QWORD *)(v0 + 672);
    v49 = swift_slowAlloc(22, -1);
    v50 = (uint64_t *)swift_slowAlloc(8, -1);
    v92 = swift_slowAlloc(32, -1);
    v95[0] = v92;
    *(_DWORD *)v49 = 136315394;
    swift_bridgeObjectRetain(v47);
    *(_QWORD *)(v0 + 304) = sub_10005BD08(v48, v47, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v49 + 4, v49 + 12);
    swift_bridgeObjectRelease_n(v47, 3);
    *(_WORD *)(v49 + 12) = 2112;
    swift_errorRetain(v31);
    v51 = _swift_stdlib_bridgeErrorToNSError(v31);
    *(_QWORD *)(v0 + 296) = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v49 + 14, v49 + 22);
    *v50 = v51;
    swift_errorRelease(v31);
    swift_errorRelease(v31);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Failed to cache untreated cover for asset: %s, error: %@", (uint8_t *)v49, 0x16u);
    v52 = sub_100005F78(&qword_1000A1260);
    swift_arrayDestroy(v50, 1, v52);
    swift_slowDealloc(v50, -1, -1);
    swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v92, -1, -1);
    swift_slowDealloc(v49, -1, -1);

    swift_errorRelease(v31);
  }
  else
  {
    v53 = *(_QWORD *)(v0 + 680);
    objc_autoreleasePoolPop(v39);
    swift_bridgeObjectRelease(v53);

    sub_10001AA60(v90);
  }
  v54 = *(void **)(v0 + 384);
LABEL_19:

  v56 = OSSignposter.logHandle.getter(v55);
  v57 = OSSignpostIntervalState.signpostID.getter();
  v58 = static os_signpost_type_t.end.getter(v57);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v59 = *(_QWORD *)(v0 + 656);
    v60 = *(_QWORD *)(v0 + 496);
    v61 = *(_QWORD *)(v0 + 448);
    v62 = *(_QWORD *)(v0 + 456);
    v63 = swift_retain(v59);
    checkForErrorAndConsumeState(state:)(v63);
    swift_release(v59);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v62 + 88))(v60, v61) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v64 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 456) + 8))(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 448));
      v64 = "";
    }
    v66 = *(void (**)(uint64_t, uint64_t))(v0 + 664);
    v65 = (uint64_t *)(v0 + 624);
    v67 = *(_QWORD *)(v0 + 576);
    v68 = *(_QWORD *)(v0 + 552);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 648))(*(_QWORD *)(v0 + 624), v67, v68);
    v69 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v69 = 0;
    v70 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v56, v58, v70, "Raw Cover Fetching", v64, v69, 2u);
    swift_slowDealloc(v69, -1, -1);

    v66(v67, v68);
  }
  else
  {
    v65 = (uint64_t *)(v0 + 576);

  }
  v71 = *v65;
  v72 = *(_QWORD *)(v0 + 656);
  v73 = *(_QWORD *)(v0 + 632);
  v74 = *(_QWORD *)(v0 + 624);
  v75 = *(_QWORD *)(v0 + 616);
  v76 = *(_QWORD *)(v0 + 608);
  v77 = *(_QWORD *)(v0 + 600);
  v78 = *(_QWORD *)(v0 + 592);
  v79 = *(_QWORD *)(v0 + 584);
  v80 = *(_QWORD *)(v0 + 576);
  v81 = *(_QWORD *)(v0 + 568);
  v82 = *(_QWORD *)(v0 + 544);
  v83 = *(_QWORD *)(v0 + 520);
  v84 = *(_QWORD *)(v0 + 512);
  v86 = *(_QWORD *)(v0 + 504);
  v87 = *(_QWORD *)(v0 + 496);
  v88 = *(_QWORD *)(v0 + 488);
  v91 = *(_QWORD *)(v0 + 480);
  v93 = *(_QWORD *)(v0 + 472);
  v94 = *(_QWORD *)(v0 + 464);
  (*(void (**)(uint64_t, _QWORD))(v0 + 664))(v71, *(_QWORD *)(v0 + 552));
  swift_release(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v91);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018168()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  os_signpost_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t *v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  os_signpost_id_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 536) + 8))(*(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 528));
  v2 = OSSignposter.logHandle.getter(v1);
  v3 = OSSignpostIntervalState.signpostID.getter();
  v4 = static os_signpost_type_t.end.getter(v3);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 656);
    v6 = *(_QWORD *)(v0 + 480);
    v7 = *(_QWORD *)(v0 + 448);
    v8 = *(_QWORD *)(v0 + 456);
    v9 = swift_retain(v5);
    checkForErrorAndConsumeState(state:)(v9);
    swift_release(v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v8 + 88))(v6, v7) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v10 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 456) + 8))(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 448));
      v10 = "";
    }
    v12 = *(void (**)(uint64_t, uint64_t))(v0 + 664);
    v11 = (uint64_t *)(v0 + 624);
    v13 = *(_QWORD *)(v0 + 616);
    v14 = *(_QWORD *)(v0 + 552);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 648))(*(_QWORD *)(v0 + 624), v13, v14);
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    v16 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, v4, v16, "Raw Cover Fetching", v10, v15, 2u);
    swift_slowDealloc(v15, -1, -1);

    v12(v13, v14);
  }
  else
  {
    v11 = (uint64_t *)(v0 + 616);

  }
  v17 = *v11;
  v18 = *(_QWORD *)(v0 + 656);
  v19 = *(_QWORD *)(v0 + 632);
  v20 = *(_QWORD *)(v0 + 624);
  v21 = *(_QWORD *)(v0 + 616);
  v22 = *(_QWORD *)(v0 + 608);
  v23 = *(_QWORD *)(v0 + 600);
  v24 = *(_QWORD *)(v0 + 592);
  v25 = *(_QWORD *)(v0 + 584);
  v26 = *(_QWORD *)(v0 + 576);
  v28 = *(_QWORD *)(v0 + 568);
  v29 = *(_QWORD *)(v0 + 544);
  v30 = *(_QWORD *)(v0 + 520);
  v31 = *(_QWORD *)(v0 + 512);
  v32 = *(_QWORD *)(v0 + 504);
  v33 = *(_QWORD *)(v0 + 496);
  v34 = *(_QWORD *)(v0 + 488);
  v35 = *(_QWORD *)(v0 + 480);
  v36 = *(_QWORD *)(v0 + 472);
  v37 = *(_QWORD *)(v0 + 464);
  (*(void (**)(uint64_t, _QWORD))(v0 + 664))(v17, *(_QWORD *)(v0 + 552));
  swift_release(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018410(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 720);
  *(_QWORD *)(*v2 + 728) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 680));
    v6 = sub_100018DD4;
  }
  else
  {
    *(_QWORD *)(v4 + 736) = a1;
    v6 = sub_10001848C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10001848C()
{
  uint64_t v0;
  void **v1;
  unsigned __int8 *v2;
  void *v3;
  double v4;
  double v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  unint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t **v32;
  void *v33;
  int v34;
  uint64_t *v35;
  CGImage *v36;
  void *v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  os_signpost_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t *v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint8_t *v67;
  os_signpost_id_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[2];

  v1 = (void **)(v0 + 384);
  v2 = (unsigned __int8 *)(v0 + 792);
  v3 = *(void **)(v0 + 736);
  *(_QWORD *)(v0 + 384) = v3;
  *(_QWORD *)(v0 + 768) = *(_QWORD *)(v0 + 728);
  objc_msgSend(v3, "size");
  if (v4 > 160.0 || (objc_msgSend(v3, "size"), v5 > 160.0))
  {
    v6 = *v2;
    v7 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 680), 2);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 680);
    if (v10)
    {
      v87 = *(_QWORD *)(v0 + 672);
      v12 = swift_slowAlloc(28, -1);
      v13 = swift_slowAlloc(64, -1);
      v93[0] = v13;
      *(_DWORD *)v12 = 136315650;
      swift_beginAccess(v0 + 384, v0 + 232, 0, 0);
      v3 = *(void **)(v0 + 384);
      v14 = CGSize.description.getter(objc_msgSend(v3, "size"));
      v16 = v15;
      *(_QWORD *)(v0 + 352) = sub_10005BD08(v14, v15, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease(v16);
      *(_WORD *)(v12 + 12) = 2080;
      swift_bridgeObjectRetain(v11);
      *(_QWORD *)(v0 + 360) = sub_10005BD08(v87, v11, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v0 + 368, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease_n(v11, 3);
      *(_WORD *)(v12 + 22) = 1024;
      *(_DWORD *)(v0 + 784) = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 784, v0 + 788, v12 + 24, v12 + 28);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "About to resize the untreated cover because its current size: %s is larger than the specified size for asset: %s isAppIconCover: %{BOOL}d.", (uint8_t *)v12, 0x1Cu);
      swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 680), 2);
    }

    v17 = v0 + 16;
    *(_QWORD *)(v0 + 776) = v3;
    *(_QWORD *)(v0 + 56) = v0 + 288;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_100019E60;
    v18 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v19 = (_QWORD *)(v0 + 80);
    v19[1] = 0x40000000;
    v19[2] = sub_100014090;
    v19[3] = &unk_10009AA00;
    v19[4] = v18;
    objc_msgSend(v3, "prepareThumbnailOfSize:completionHandler:", v19, 160.0, 160.0);
    return swift_continuation_await(v17);
  }
  v21 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 680), 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter();
  v24 = os_log_type_enabled(v22, v23);
  v25 = *(_QWORD *)(v0 + 680);
  if (v24)
  {
    v83 = *(_QWORD *)(v0 + 672);
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v93[0] = v27;
    *(_DWORD *)v26 = 136315138;
    swift_bridgeObjectRetain(v25);
    *(_QWORD *)(v0 + 280) = sub_10005BD08(v83, v25, v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease_n(v25, 3);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Caching untreated cover for asset: %s.", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    v28 = v26;
    v1 = (void **)(v0 + 384);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v25, 2);
  }

  v88 = (_QWORD *)(v0 + 120);
  v29 = *(_QWORD *)(v0 + 768);
  v30 = *(_QWORD *)(v0 + 680);
  v31 = *(_QWORD *)(v0 + 672);
  sub_10001AA1C((uint64_t)qword_1000AA270, v0 + 120);
  v32 = (uint64_t **)sub_100006C68((_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 144));
  swift_beginAccess(v1, v0 + 256, 0, 0);
  v33 = *(void **)(v0 + 384);
  swift_beginAccess(v0 + 792, v0 + 208, 0, 0);
  v34 = *v2;
  v35 = *v32;
  v36 = v33;
  v37 = objc_autoreleasePoolPush();
  if (v34)
    v38 = 2;
  else
    v38 = 0;
  sub_10003D3E8(v31, v30, (void (*)(char *, uint64_t))v38, v36, v35);
  if (v29)
  {
    v39 = v1;
    v40 = *(_QWORD *)(v0 + 680);
    objc_autoreleasePoolPop(v37);

    sub_10001AA60(v88);
    swift_errorRetain(v29);
    swift_bridgeObjectRetain(v40);
    v41 = swift_errorRetain(v29);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter();
    v44 = os_log_type_enabled(v42, v43);
    v45 = *(_QWORD *)(v0 + 680);
    if (!v44)
    {
      swift_errorRelease(v29);
      swift_bridgeObjectRelease_n(v45, 2);
      swift_errorRelease(v29);
      swift_errorRelease(v29);

      v52 = *v39;
      goto LABEL_19;
    }
    v46 = *(_QWORD *)(v0 + 672);
    v47 = swift_slowAlloc(22, -1);
    v48 = (uint64_t *)swift_slowAlloc(8, -1);
    v90 = swift_slowAlloc(32, -1);
    v93[0] = v90;
    *(_DWORD *)v47 = 136315394;
    swift_bridgeObjectRetain(v45);
    *(_QWORD *)(v0 + 304) = sub_10005BD08(v46, v45, v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v47 + 4, v47 + 12);
    swift_bridgeObjectRelease_n(v45, 3);
    *(_WORD *)(v47 + 12) = 2112;
    swift_errorRetain(v29);
    v49 = _swift_stdlib_bridgeErrorToNSError(v29);
    *(_QWORD *)(v0 + 296) = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v47 + 14, v47 + 22);
    *v48 = v49;
    swift_errorRelease(v29);
    swift_errorRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Failed to cache untreated cover for asset: %s, error: %@", (uint8_t *)v47, 0x16u);
    v50 = sub_100005F78(&qword_1000A1260);
    swift_arrayDestroy(v48, 1, v50);
    swift_slowDealloc(v48, -1, -1);
    swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v90, -1, -1);
    swift_slowDealloc(v47, -1, -1);

    swift_errorRelease(v29);
  }
  else
  {
    v51 = *(_QWORD *)(v0 + 680);
    objc_autoreleasePoolPop(v37);
    swift_bridgeObjectRelease(v51);

    sub_10001AA60(v88);
  }
  v52 = *(void **)(v0 + 384);
LABEL_19:

  v54 = OSSignposter.logHandle.getter(v53);
  v55 = OSSignpostIntervalState.signpostID.getter();
  v56 = static os_signpost_type_t.end.getter(v55);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v57 = *(_QWORD *)(v0 + 656);
    v58 = *(_QWORD *)(v0 + 496);
    v59 = *(_QWORD *)(v0 + 448);
    v60 = *(_QWORD *)(v0 + 456);
    v61 = swift_retain(v57);
    checkForErrorAndConsumeState(state:)(v61);
    swift_release(v57);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v60 + 88))(v58, v59) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v62 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 456) + 8))(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 448));
      v62 = "";
    }
    v64 = *(void (**)(uint64_t, uint64_t))(v0 + 664);
    v63 = (uint64_t *)(v0 + 624);
    v65 = *(_QWORD *)(v0 + 576);
    v66 = *(_QWORD *)(v0 + 552);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 648))(*(_QWORD *)(v0 + 624), v65, v66);
    v67 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v67 = 0;
    v68 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v54, v56, v68, "Raw Cover Fetching", v62, v67, 2u);
    swift_slowDealloc(v67, -1, -1);

    v64(v65, v66);
  }
  else
  {
    v63 = (uint64_t *)(v0 + 576);

  }
  v69 = *v63;
  v70 = *(_QWORD *)(v0 + 656);
  v71 = *(_QWORD *)(v0 + 632);
  v72 = *(_QWORD *)(v0 + 624);
  v73 = *(_QWORD *)(v0 + 616);
  v74 = *(_QWORD *)(v0 + 608);
  v75 = *(_QWORD *)(v0 + 600);
  v76 = *(_QWORD *)(v0 + 592);
  v77 = *(_QWORD *)(v0 + 584);
  v78 = *(_QWORD *)(v0 + 576);
  v79 = *(_QWORD *)(v0 + 568);
  v80 = *(_QWORD *)(v0 + 544);
  v81 = *(_QWORD *)(v0 + 520);
  v82 = *(_QWORD *)(v0 + 512);
  v84 = *(_QWORD *)(v0 + 504);
  v85 = *(_QWORD *)(v0 + 496);
  v86 = *(_QWORD *)(v0 + 488);
  v89 = *(_QWORD *)(v0 + 480);
  v91 = *(_QWORD *)(v0 + 472);
  v92 = *(_QWORD *)(v0 + 464);
  (*(void (**)(uint64_t, _QWORD))(v0 + 664))(v69, *(_QWORD *)(v0 + 552));
  swift_release(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v89);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018DD4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  os_signpost_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t *v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  os_signpost_id_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = OSSignposter.logHandle.getter(a1);
  v3 = OSSignpostIntervalState.signpostID.getter();
  v4 = static os_signpost_type_t.end.getter(v3);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v5 = *(_QWORD *)(v1 + 656);
    v6 = *(_QWORD *)(v1 + 472);
    v7 = *(_QWORD *)(v1 + 448);
    v8 = *(_QWORD *)(v1 + 456);
    v9 = swift_retain(v5);
    checkForErrorAndConsumeState(state:)(v9);
    swift_release(v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v8 + 88))(v6, v7) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v10 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 456) + 8))(*(_QWORD *)(v1 + 472), *(_QWORD *)(v1 + 448));
      v10 = "";
    }
    v12 = *(void (**)(uint64_t, uint64_t))(v1 + 664);
    v11 = (uint64_t *)(v1 + 624);
    v13 = *(_QWORD *)(v1 + 608);
    v14 = *(_QWORD *)(v1 + 552);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v1 + 648))(*(_QWORD *)(v1 + 624), v13, v14);
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    v16 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, v4, v16, "Raw Cover Fetching", v10, v15, 2u);
    swift_slowDealloc(v15, -1, -1);

    v12(v13, v14);
  }
  else
  {
    v11 = (uint64_t *)(v1 + 608);

  }
  v17 = *v11;
  v18 = *(_QWORD *)(v1 + 656);
  v19 = *(_QWORD *)(v1 + 632);
  v20 = *(_QWORD *)(v1 + 624);
  v21 = *(_QWORD *)(v1 + 616);
  v22 = *(_QWORD *)(v1 + 608);
  v23 = *(_QWORD *)(v1 + 600);
  v24 = *(_QWORD *)(v1 + 592);
  v25 = *(_QWORD *)(v1 + 584);
  v26 = *(_QWORD *)(v1 + 576);
  v28 = *(_QWORD *)(v1 + 568);
  v29 = *(_QWORD *)(v1 + 544);
  v30 = *(_QWORD *)(v1 + 520);
  v31 = *(_QWORD *)(v1 + 512);
  v32 = *(_QWORD *)(v1 + 504);
  v33 = *(_QWORD *)(v1 + 496);
  v34 = *(_QWORD *)(v1 + 488);
  v35 = *(_QWORD *)(v1 + 480);
  v36 = *(_QWORD *)(v1 + 472);
  v37 = *(_QWORD *)(v1 + 464);
  (*(void (**)(uint64_t, _QWORD))(v1 + 664))(v17, *(_QWORD *)(v1 + 552));
  swift_release(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100019068(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 744);
  v3[94] = a1;
  v3[95] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease(v3[85]);
    v5 = sub_100019BCC;
  }
  else
  {
    v5 = sub_1000190E0;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000190E0()
{
  uint64_t v0;
  void **v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  double v16;
  double v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  unint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  unint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t **v45;
  void *v46;
  int v47;
  uint64_t *v48;
  CGImage *v49;
  void *v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  BOOL v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  os_signpost_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t *v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint8_t *v80;
  os_signpost_id_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void **v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107[2];

  v1 = (void **)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 680);
  *(_QWORD *)(v0 + 384) = *(_QWORD *)(v0 + 752);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 680);
    v7 = *(_QWORD *)(v0 + 672);
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v107[0] = v9;
    *(_DWORD *)v8 = 136315394;
    swift_bridgeObjectRetain(v6);
    v10 = v7;
    v1 = (void **)(v0 + 384);
    *(_QWORD *)(v0 + 376) = sub_10005BD08(v10, v6, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v6, 3);
    *(_WORD *)(v8 + 12) = 2080;
    swift_beginAccess(v0 + 384, v0 + 184, 0, 0);
    v11 = *(void **)(v0 + 384);
    v12 = CGSize.description.getter(objc_msgSend(v11, "size"));
    v14 = v13;
    *(_QWORD *)(v0 + 392) = sub_10005BD08(v12, v13, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Received raw store audiobook cover for %s of size %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 680), 2);

    v11 = *(void **)(v0 + 752);
  }
  v15 = (unsigned __int8 *)(v0 + 792);
  *(_QWORD *)(v0 + 768) = *(_QWORD *)(v0 + 760);
  objc_msgSend(v11, "size");
  if (v16 > 160.0 || (objc_msgSend(v11, "size"), v17 > 160.0))
  {
    v18 = *v15;
    v19 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 680), 2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v0 + 680);
    if (v22)
    {
      v24 = v1;
      v101 = *(_QWORD *)(v0 + 672);
      v25 = swift_slowAlloc(28, -1);
      v26 = swift_slowAlloc(64, -1);
      v107[0] = v26;
      *(_DWORD *)v25 = 136315650;
      swift_beginAccess(v24, v0 + 232, 0, 0);
      v11 = *(void **)(v0 + 384);
      v27 = CGSize.description.getter(objc_msgSend(v11, "size"));
      v29 = v28;
      *(_QWORD *)(v0 + 352) = sub_10005BD08(v27, v28, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease(v29);
      *(_WORD *)(v25 + 12) = 2080;
      swift_bridgeObjectRetain(v23);
      *(_QWORD *)(v0 + 360) = sub_10005BD08(v101, v23, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v0 + 368, v25 + 14, v25 + 22);
      swift_bridgeObjectRelease_n(v23, 3);
      *(_WORD *)(v25 + 22) = 1024;
      *(_DWORD *)(v0 + 784) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 784, v0 + 788, v25 + 24, v25 + 28);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "About to resize the untreated cover because its current size: %s is larger than the specified size for asset: %s isAppIconCover: %{BOOL}d.", (uint8_t *)v25, 0x1Cu);
      swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 680), 2);
    }

    v30 = v0 + 16;
    *(_QWORD *)(v0 + 776) = v11;
    *(_QWORD *)(v0 + 56) = v0 + 288;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_100019E60;
    v31 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v32 = (_QWORD *)(v0 + 80);
    v32[1] = 0x40000000;
    v32[2] = sub_100014090;
    v32[3] = &unk_10009AA00;
    v32[4] = v31;
    objc_msgSend(v11, "prepareThumbnailOfSize:completionHandler:", v32, 160.0, 160.0);
    return swift_continuation_await(v30);
  }
  v34 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 680), 2);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  v37 = os_log_type_enabled(v35, v36);
  v38 = *(_QWORD *)(v0 + 680);
  if (v37)
  {
    v96 = *(_QWORD *)(v0 + 672);
    v99 = v1;
    v39 = (uint8_t *)swift_slowAlloc(12, -1);
    v40 = swift_slowAlloc(32, -1);
    v107[0] = v40;
    *(_DWORD *)v39 = 136315138;
    swift_bridgeObjectRetain(v38);
    *(_QWORD *)(v0 + 280) = sub_10005BD08(v96, v38, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease_n(v38, 3);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Caching untreated cover for asset: %s.", v39, 0xCu);
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    v41 = v39;
    v1 = v99;
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v38, 2);
  }

  v102 = (_QWORD *)(v0 + 120);
  v42 = *(_QWORD *)(v0 + 768);
  v43 = *(_QWORD *)(v0 + 680);
  v44 = *(_QWORD *)(v0 + 672);
  sub_10001AA1C((uint64_t)qword_1000AA270, v0 + 120);
  v45 = (uint64_t **)sub_100006C68((_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 144));
  swift_beginAccess(v1, v0 + 256, 0, 0);
  v46 = *(void **)(v0 + 384);
  swift_beginAccess(v0 + 792, v0 + 208, 0, 0);
  v47 = *v15;
  v48 = *v45;
  v49 = v46;
  v50 = objc_autoreleasePoolPush();
  if (v47)
    v51 = 2;
  else
    v51 = 0;
  sub_10003D3E8(v44, v43, (void (*)(char *, uint64_t))v51, v49, v48);
  if (v42)
  {
    v52 = v1;
    v53 = *(_QWORD *)(v0 + 680);
    objc_autoreleasePoolPop(v50);

    sub_10001AA60(v102);
    swift_errorRetain(v42);
    swift_bridgeObjectRetain(v53);
    v54 = swift_errorRetain(v42);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.default.getter();
    v57 = os_log_type_enabled(v55, v56);
    v58 = *(_QWORD *)(v0 + 680);
    if (!v57)
    {
      swift_errorRelease(v42);
      swift_bridgeObjectRelease_n(v58, 2);
      swift_errorRelease(v42);
      swift_errorRelease(v42);

      v65 = *v52;
      goto LABEL_22;
    }
    v59 = *(_QWORD *)(v0 + 672);
    v60 = swift_slowAlloc(22, -1);
    v61 = (uint64_t *)swift_slowAlloc(8, -1);
    v104 = swift_slowAlloc(32, -1);
    v107[0] = v104;
    *(_DWORD *)v60 = 136315394;
    swift_bridgeObjectRetain(v58);
    *(_QWORD *)(v0 + 304) = sub_10005BD08(v59, v58, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v60 + 4, v60 + 12);
    swift_bridgeObjectRelease_n(v58, 3);
    *(_WORD *)(v60 + 12) = 2112;
    swift_errorRetain(v42);
    v62 = _swift_stdlib_bridgeErrorToNSError(v42);
    *(_QWORD *)(v0 + 296) = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v60 + 14, v60 + 22);
    *v61 = v62;
    swift_errorRelease(v42);
    swift_errorRelease(v42);
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Failed to cache untreated cover for asset: %s, error: %@", (uint8_t *)v60, 0x16u);
    v63 = sub_100005F78(&qword_1000A1260);
    swift_arrayDestroy(v61, 1, v63);
    swift_slowDealloc(v61, -1, -1);
    swift_arrayDestroy(v104, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v104, -1, -1);
    swift_slowDealloc(v60, -1, -1);

    swift_errorRelease(v42);
  }
  else
  {
    v64 = *(_QWORD *)(v0 + 680);
    objc_autoreleasePoolPop(v50);
    swift_bridgeObjectRelease(v64);

    sub_10001AA60(v102);
  }
  v65 = *(void **)(v0 + 384);
LABEL_22:

  v67 = OSSignposter.logHandle.getter(v66);
  v68 = OSSignpostIntervalState.signpostID.getter();
  v69 = static os_signpost_type_t.end.getter(v68);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v70 = *(_QWORD *)(v0 + 656);
    v71 = *(_QWORD *)(v0 + 496);
    v72 = *(_QWORD *)(v0 + 448);
    v73 = *(_QWORD *)(v0 + 456);
    v74 = swift_retain(v70);
    checkForErrorAndConsumeState(state:)(v74);
    swift_release(v70);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v73 + 88))(v71, v72) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v75 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 456) + 8))(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 448));
      v75 = "";
    }
    v77 = *(void (**)(uint64_t, uint64_t))(v0 + 664);
    v76 = (uint64_t *)(v0 + 624);
    v78 = *(_QWORD *)(v0 + 576);
    v79 = *(_QWORD *)(v0 + 552);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 648))(*(_QWORD *)(v0 + 624), v78, v79);
    v80 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v80 = 0;
    v81 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v67, v69, v81, "Raw Cover Fetching", v75, v80, 2u);
    swift_slowDealloc(v80, -1, -1);

    v77(v78, v79);
  }
  else
  {
    v76 = (uint64_t *)(v0 + 576);

  }
  v82 = *v76;
  v83 = *(_QWORD *)(v0 + 656);
  v84 = *(_QWORD *)(v0 + 632);
  v85 = *(_QWORD *)(v0 + 624);
  v86 = *(_QWORD *)(v0 + 616);
  v87 = *(_QWORD *)(v0 + 608);
  v88 = *(_QWORD *)(v0 + 600);
  v89 = *(_QWORD *)(v0 + 592);
  v90 = *(_QWORD *)(v0 + 584);
  v91 = *(_QWORD *)(v0 + 576);
  v92 = *(_QWORD *)(v0 + 568);
  v93 = *(_QWORD *)(v0 + 544);
  v94 = *(_QWORD *)(v0 + 520);
  v95 = *(_QWORD *)(v0 + 512);
  v97 = *(_QWORD *)(v0 + 504);
  v98 = *(_QWORD *)(v0 + 496);
  v100 = *(_QWORD *)(v0 + 488);
  v103 = *(_QWORD *)(v0 + 480);
  v105 = *(_QWORD *)(v0 + 472);
  v106 = *(_QWORD *)(v0 + 464);
  (*(void (**)(uint64_t, _QWORD))(v0 + 664))(v82, *(_QWORD *)(v0 + 552));
  swift_release(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v100);
  swift_task_dealloc(v103);
  swift_task_dealloc(v105);
  swift_task_dealloc(v106);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100019BCC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  os_signpost_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t *v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  os_signpost_id_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = OSSignposter.logHandle.getter(a1);
  v3 = OSSignpostIntervalState.signpostID.getter();
  v4 = static os_signpost_type_t.end.getter(v3);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v5 = *(_QWORD *)(v1 + 656);
    v7 = *(_QWORD *)(v1 + 456);
    v6 = *(_QWORD *)(v1 + 464);
    v8 = *(_QWORD *)(v1 + 448);
    v9 = swift_retain(v5);
    checkForErrorAndConsumeState(state:)(v9);
    swift_release(v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v7 + 88))(v6, v8) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v10 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 456) + 8))(*(_QWORD *)(v1 + 464), *(_QWORD *)(v1 + 448));
      v10 = "";
    }
    v12 = *(void (**)(uint64_t, uint64_t))(v1 + 664);
    v11 = (uint64_t *)(v1 + 624);
    v13 = *(_QWORD *)(v1 + 600);
    v14 = *(_QWORD *)(v1 + 552);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v1 + 648))(*(_QWORD *)(v1 + 624), v13, v14);
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    v16 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, v4, v16, "Raw Cover Fetching", v10, v15, 2u);
    swift_slowDealloc(v15, -1, -1);

    v12(v13, v14);
  }
  else
  {
    v11 = (uint64_t *)(v1 + 600);

  }
  v17 = *v11;
  v18 = *(_QWORD *)(v1 + 656);
  v19 = *(_QWORD *)(v1 + 632);
  v20 = *(_QWORD *)(v1 + 624);
  v21 = *(_QWORD *)(v1 + 616);
  v22 = *(_QWORD *)(v1 + 608);
  v23 = *(_QWORD *)(v1 + 600);
  v24 = *(_QWORD *)(v1 + 592);
  v25 = *(_QWORD *)(v1 + 584);
  v26 = *(_QWORD *)(v1 + 576);
  v28 = *(_QWORD *)(v1 + 568);
  v29 = *(_QWORD *)(v1 + 544);
  v30 = *(_QWORD *)(v1 + 520);
  v31 = *(_QWORD *)(v1 + 512);
  v32 = *(_QWORD *)(v1 + 504);
  v33 = *(_QWORD *)(v1 + 496);
  v34 = *(_QWORD *)(v1 + 488);
  v35 = *(_QWORD *)(v1 + 480);
  v36 = *(_QWORD *)(v1 + 472);
  v37 = *(_QWORD *)(v1 + 464);
  (*(void (**)(uint64_t, _QWORD))(v1 + 664))(v17, *(_QWORD *)(v1 + 552));
  swift_release(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100019E60()
{
  return swift_task_switch(sub_100019EAC, 0, 0);
}

uint64_t sub_100019EAC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  os_signpost_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  void *v43;
  int v44;
  uint64_t *v45;
  CGImage *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  BOOL v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  os_signpost_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t *v72;
  uint64_t *v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint8_t *v77;
  os_signpost_id_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(void);
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint8_t *v93;
  os_signpost_id_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void **v129;
  uint64_t v130;
  uint64_t v131[2];

  v1 = *(void **)(v0 + 288);

  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 680);
    v129 = (void **)(v0 + 384);
    ((void (*)(void))swift_beginAccess)();
    v3 = *(void **)(v0 + 384);
    *(_QWORD *)(v0 + 384) = v1;
    v4 = v1;

    v5 = *(unsigned __int8 *)(v0 + 792);
    v6 = swift_bridgeObjectRetain_n(v2, 2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 680);
    v125 = (_QWORD *)(v0 + 120);
    if (v9)
    {
      v109 = *(_QWORD *)(v0 + 672);
      v11 = swift_slowAlloc(28, -1);
      v118 = v4;
      v12 = swift_slowAlloc(64, -1);
      v131[0] = v12;
      *(_DWORD *)v11 = 136315650;
      v13 = CGSize.description.getter(objc_msgSend(*(id *)(v0 + 384), "size"));
      v15 = v14;
      *(_QWORD *)(v0 + 320) = sub_10005BD08(v13, v14, v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease(v15);
      *(_WORD *)(v11 + 12) = 2080;
      swift_bridgeObjectRetain(v10);
      *(_QWORD *)(v0 + 328) = sub_10005BD08(v109, v10, v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease_n(v10, 3);
      *(_WORD *)(v11 + 22) = 1024;
      *(_DWORD *)(v0 + 788) = v5;
      v16 = (unsigned __int8 *)(v0 + 792);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 788, v0 + 792, v11 + 24, v11 + 28);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Done resizing the untreated cover. Its current size is %s for asset: %s isAppIconCover: %{BOOL}d.", (uint8_t *)v11, 0x1Cu);
      swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v10, 2);
      v16 = (unsigned __int8 *)(v0 + 792);
    }
    v29 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 680), 2);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter();
    v32 = os_log_type_enabled(v30, v31);
    v33 = *(_QWORD *)(v0 + 680);
    if (v32)
    {
      v34 = v16;
      v35 = *(_QWORD *)(v0 + 672);
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      v131[0] = v37;
      *(_DWORD *)v36 = 136315138;
      swift_bridgeObjectRetain(v33);
      v38 = v35;
      v16 = v34;
      *(_QWORD *)(v0 + 280) = sub_10005BD08(v38, v33, v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease_n(v33, 3);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Caching untreated cover for asset: %s.", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 680), 2);
    }

    v39 = *(_QWORD *)(v0 + 768);
    v40 = *(_QWORD *)(v0 + 680);
    v41 = *(_QWORD *)(v0 + 672);
    sub_10001AA1C((uint64_t)qword_1000AA270, (uint64_t)v125);
    v42 = (uint64_t **)sub_100006C68(v125, *(_QWORD *)(v0 + 144));
    swift_beginAccess(v129, v0 + 256, 0, 0);
    v43 = *(void **)(v0 + 384);
    swift_beginAccess(v16, v0 + 208, 0, 0);
    v44 = *v16;
    v45 = *v42;
    v46 = v43;
    v47 = objc_autoreleasePoolPush();
    if (v44)
      v48 = 2;
    else
      v48 = 0;
    sub_10003D3E8(v41, v40, (void (*)(char *, uint64_t))v48, v46, v45);
    if (v39)
    {
      v49 = *(_QWORD *)(v0 + 680);
      objc_autoreleasePoolPop(v47);

      sub_10001AA60(v125);
      swift_errorRetain(v39);
      swift_bridgeObjectRetain(v49);
      v50 = swift_errorRetain(v39);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.default.getter();
      v53 = os_log_type_enabled(v51, v52);
      v54 = *(_QWORD *)(v0 + 680);
      if (!v53)
      {
        swift_errorRelease(v39);
        swift_bridgeObjectRelease_n(v54, 2);
        swift_errorRelease(v39);
        swift_errorRelease(v39);

        v61 = *v129;
        goto LABEL_20;
      }
      v55 = *(_QWORD *)(v0 + 672);
      v56 = swift_slowAlloc(22, -1);
      v57 = (uint64_t *)swift_slowAlloc(8, -1);
      v126 = swift_slowAlloc(32, -1);
      v131[0] = v126;
      *(_DWORD *)v56 = 136315394;
      swift_bridgeObjectRetain(v54);
      *(_QWORD *)(v0 + 304) = sub_10005BD08(v55, v54, v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v56 + 4, v56 + 12);
      swift_bridgeObjectRelease_n(v54, 3);
      *(_WORD *)(v56 + 12) = 2112;
      swift_errorRetain(v39);
      v58 = _swift_stdlib_bridgeErrorToNSError(v39);
      *(_QWORD *)(v0 + 296) = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v56 + 14, v56 + 22);
      *v57 = v58;
      swift_errorRelease(v39);
      swift_errorRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Failed to cache untreated cover for asset: %s, error: %@", (uint8_t *)v56, 0x16u);
      v59 = sub_100005F78(&qword_1000A1260);
      swift_arrayDestroy(v57, 1, v59);
      swift_slowDealloc(v57, -1, -1);
      swift_arrayDestroy(v126, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v126, -1, -1);
      swift_slowDealloc(v56, -1, -1);

      swift_errorRelease(v39);
    }
    else
    {
      v60 = *(_QWORD *)(v0 + 680);
      objc_autoreleasePoolPop(v47);
      swift_bridgeObjectRelease(v60);

      sub_10001AA60(v125);
    }
    v61 = *(void **)(v0 + 384);
LABEL_20:

    v63 = OSSignposter.logHandle.getter(v62);
    v64 = OSSignpostIntervalState.signpostID.getter();
    v65 = static os_signpost_type_t.end.getter(v64);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v66 = *(_QWORD *)(v0 + 656);
      v67 = *(_QWORD *)(v0 + 496);
      v68 = *(_QWORD *)(v0 + 448);
      v69 = *(_QWORD *)(v0 + 456);
      v70 = swift_retain(v66);
      checkForErrorAndConsumeState(state:)(v70);
      swift_release(v66);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v69 + 88))(v67, v68) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v71 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 456) + 8))(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 448));
        v71 = "";
      }
      v74 = *(void (**)(uint64_t, uint64_t))(v0 + 664);
      v72 = (uint64_t *)(v0 + 624);
      v75 = *(_QWORD *)(v0 + 576);
      v76 = *(_QWORD *)(v0 + 552);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 648))(*(_QWORD *)(v0 + 624), v75, v76);
      v77 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v77 = 0;
      v78 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v63, v65, v78, "Raw Cover Fetching", v71, v77, 2u);
      swift_slowDealloc(v77, -1, -1);

      v74(v75, v76);
    }
    else
    {
      v72 = (uint64_t *)(v0 + 576);

    }
    v79 = *v72;
    v80 = *(_QWORD *)(v0 + 656);
    v81 = *(_QWORD *)(v0 + 632);
    v82 = *(_QWORD *)(v0 + 624);
    v83 = *(_QWORD *)(v0 + 616);
    v84 = *(_QWORD *)(v0 + 608);
    v85 = *(_QWORD *)(v0 + 600);
    v86 = *(_QWORD *)(v0 + 592);
    v87 = *(_QWORD *)(v0 + 584);
    v88 = *(_QWORD *)(v0 + 576);
    v107 = *(_QWORD *)(v0 + 568);
    v110 = *(_QWORD *)(v0 + 544);
    v112 = *(_QWORD *)(v0 + 520);
    v114 = *(_QWORD *)(v0 + 512);
    v116 = *(_QWORD *)(v0 + 504);
    v119 = *(_QWORD *)(v0 + 496);
    v121 = *(_QWORD *)(v0 + 488);
    v123 = *(_QWORD *)(v0 + 480);
    v127 = *(_QWORD *)(v0 + 472);
    v130 = *(_QWORD *)(v0 + 464);
    (*(void (**)(uint64_t, _QWORD))(v0 + 664))(v79, *(_QWORD *)(v0 + 552));
    swift_release(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v107);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    swift_task_dealloc(v114);
    swift_task_dealloc(v116);
    swift_task_dealloc(v119);
    swift_task_dealloc(v121);
    swift_task_dealloc(v123);
    swift_task_dealloc(v127);
    swift_task_dealloc(v130);
    v89 = *(uint64_t (**)(void))(v0 + 8);
    return v89();
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 680));
  v17 = sub_10001A9D8();
  swift_allocError(&type metadata for WidgetImageManager.FetchError, v17, 0, 0);
  *v18 = 1;
  swift_willThrow();

  v20 = OSSignposter.logHandle.getter(v19);
  v21 = OSSignpostIntervalState.signpostID.getter();
  v22 = static os_signpost_type_t.end.getter(v21);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v23 = *(_QWORD *)(v0 + 656);
    v24 = *(_QWORD *)(v0 + 504);
    v26 = *(_QWORD *)(v0 + 448);
    v25 = *(_QWORD *)(v0 + 456);
    v27 = swift_retain(v23);
    checkForErrorAndConsumeState(state:)(v27);
    swift_release(v23);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v25 + 88))(v24, v26) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v28 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 456) + 8))(*(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 448));
      v28 = "";
    }
    v90 = *(void (**)(uint64_t, uint64_t))(v0 + 664);
    v73 = (uint64_t *)(v0 + 624);
    v91 = *(_QWORD *)(v0 + 584);
    v92 = *(_QWORD *)(v0 + 552);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 648))(*(_QWORD *)(v0 + 624), v91, v92);
    v93 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v93 = 0;
    v94 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, v22, v94, "Raw Cover Fetching", v28, v93, 2u);
    swift_slowDealloc(v93, -1, -1);

    v90(v91, v92);
  }
  else
  {
    v73 = (uint64_t *)(v0 + 584);

  }
  v95 = *v73;
  v96 = *(_QWORD *)(v0 + 656);
  v97 = *(_QWORD *)(v0 + 632);
  v98 = *(_QWORD *)(v0 + 624);
  v99 = *(_QWORD *)(v0 + 616);
  v100 = *(_QWORD *)(v0 + 608);
  v101 = *(_QWORD *)(v0 + 600);
  v102 = *(_QWORD *)(v0 + 592);
  v103 = *(_QWORD *)(v0 + 584);
  v104 = *(_QWORD *)(v0 + 576);
  v106 = *(_QWORD *)(v0 + 568);
  v108 = *(_QWORD *)(v0 + 544);
  v111 = *(_QWORD *)(v0 + 520);
  v113 = *(_QWORD *)(v0 + 512);
  v115 = *(_QWORD *)(v0 + 504);
  v117 = *(_QWORD *)(v0 + 496);
  v120 = *(_QWORD *)(v0 + 488);
  v122 = *(_QWORD *)(v0 + 480);
  v124 = *(_QWORD *)(v0 + 472);
  v128 = *(_QWORD *)(v0 + 464);
  (*(void (**)(uint64_t, _QWORD))(v0 + 664))(v95, *(_QWORD *)(v0 + 552));
  swift_release(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v106);
  swift_task_dealloc(v108);
  swift_task_dealloc(v111);
  swift_task_dealloc(v113);
  swift_task_dealloc(v115);
  swift_task_dealloc(v117);
  swift_task_dealloc(v120);
  swift_task_dealloc(v122);
  swift_task_dealloc(v124);
  swift_task_dealloc(v128);
  v89 = *(uint64_t (**)(void))(v0 + 8);
  return v89();
}

unint64_t sub_10001A9D8()
{
  unint64_t result;

  result = qword_1000A1250;
  if (!qword_1000A1250)
  {
    result = swift_getWitnessTable(&unk_10007F9E8, &type metadata for WidgetImageManager.FetchError);
    atomic_store(result, &qword_1000A1250);
  }
  return result;
}

uint64_t sub_10001AA1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10001AA60(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10001AA80(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001AAC4(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001AB08(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10001AB40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

id sub_10001AB64()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "drawInRect:", 0.0, 0.0, *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t sub_10001AB80()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001AB90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001ABA0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_BYTE *initializeBufferWithCopyOfBuffer for WidgetRelevance(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for WidgetImageManager.FetchError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetImageManager.FetchError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_10001AC90 + 4 * byte_10007F955[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10001ACC4 + 4 * byte_10007F950[v4]))();
}

uint64_t sub_10001ACC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001ACCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001ACD4);
  return result;
}

uint64_t sub_10001ACE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001ACE8);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_10001ACEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001ACF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001AD00(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10001AD08(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for WidgetImageManager.FetchError()
{
  return &type metadata for WidgetImageManager.FetchError;
}

unint64_t sub_10001AD24()
{
  unint64_t result;

  result = qword_1000A12A0;
  if (!qword_1000A12A0)
  {
    result = swift_getWitnessTable(&unk_10007F9C0, &type metadata for WidgetImageManager.FetchError);
    atomic_store(result, (unint64_t *)&qword_1000A12A0);
  }
  return result;
}

uint64_t destroy for AudioPlayButton(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for AudioPlayButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for AudioPlayButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for AudioPlayButton(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AudioPlayButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioPlayButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioPlayButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioPlayButton()
{
  return &type metadata for AudioPlayButton;
}

uint64_t sub_10001AF60(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100083C5C, 1);
}

BOOL sub_10001AF70(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_10001AF88@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  void (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t OpaqueTypeConformance2;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t KeyPath;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int8 v140;
  uint64_t v141;
  unsigned __int8 v142;
  uint64_t v143;
  uint64_t v144;

  v101 = a2;
  v3 = type metadata accessor for AccessibilityTraits(0);
  v133 = *(_QWORD *)(v3 - 8);
  v134 = v3;
  __chkstk_darwin(v3);
  v132 = (char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AccessibilityChildBehavior(0);
  v129 = *(_QWORD *)(v5 - 8);
  v130 = v5;
  __chkstk_darwin(v5);
  v128 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for PlaybackButton.State(0);
  v107 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v115 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005F78(&qword_1000A12B0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v95 - v12;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD **)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v95 - v19;
  v100 = sub_100005F78(&qword_1000A12B8);
  v21 = __chkstk_darwin(v100);
  v23 = (char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v102 = (uint64_t)&v95 - v24;
  v105 = type metadata accessor for PlaybackButton(0);
  v104 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v103 = (char *)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100005F78(&qword_1000A12C0);
  v108 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v106 = (char *)&v95 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100005F78(&qword_1000A12C8);
  v112 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v111 = (char *)&v95 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_100005F78(&qword_1000A12D0);
  v28 = __chkstk_darwin(v124);
  v131 = (uint64_t)&v95 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v114 = (char *)&v95 - v31;
  v32 = __chkstk_darwin(v30);
  v123 = (char *)&v95 - v33;
  v34 = __chkstk_darwin(v32);
  v122 = (char *)&v95 - v35;
  v36 = __chkstk_darwin(v34);
  v127 = (uint64_t)&v95 - v37;
  v38 = static Color.black.getter(v36);
  v126 = Color.opacity(_:)(0.5);
  swift_release(v38);
  KeyPath = swift_getKeyPath(&unk_10007FAA8);
  v39 = static Alignment.center.getter(KeyPath);
  _FrameLayout.init(width:height:alignment:)(&v139, 0x403C000000000000, 0, 0x403C000000000000, 0, v39, v40);
  v121 = v139;
  v120 = v140;
  v119 = v141;
  v118 = v142;
  v117 = v143;
  v116 = v144;
  sub_10001B958(&v135);
  v98 = v138;
  v99 = v137;
  v97 = sub_100006C68(&v135, v137);
  Date.init(timeIntervalSinceNow:)(0.0);
  Date.init(timeIntervalSinceNow:)(INFINITY);
  v41 = sub_100003DCC(&qword_1000A12D8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v20, v18, v14, v41);
  if ((result & 1) != 0)
  {
    v43 = &v13[*(int *)(v8 + 48)];
    v96 = a1;
    v44 = (void (*)(char *, char *, uint64_t))v15[4];
    v44(v13, v20, v14);
    v44(v43, v18, v14);
    v45 = &v11[*(int *)(v8 + 48)];
    v46 = (void (*)(char *, char *, uint64_t))v15[2];
    v46(v11, v13, v14);
    v46(v45, v43, v14);
    v44(v23, v11, v14);
    v47 = (void (*)(char *, uint64_t))v15[1];
    v47(v45, v14);
    v48 = &v11[*(int *)(v8 + 48)];
    v44(v11, v13, v14);
    v44(v48, v43, v14);
    v44(&v23[*(int *)(v100 + 36)], v48, v14);
    v47(v11, v14);
    v49 = v102;
    sub_100007984((uint64_t)v23, v102, &qword_1000A12B8);
    v50 = v96;
    v51 = *(_BYTE *)(v96 + 16) & 1;
    if (v51)
      v52 = (unsigned int *)&enum case for PlaybackButton.State.playing(_:);
    else
      v52 = (unsigned int *)&enum case for PlaybackButton.State.unplayed(_:);
    v53 = v115;
    v54 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v107 + 104))(v115, *v52, v109);
    v55 = v99;
    __chkstk_darwin(v54);
    v57 = (char *)&v95 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, _QWORD *, uint64_t))(v58 + 16))(v57, v97, v55);
    v59 = v103;
    PlaybackButton.init<A>(interval:state:intent:playSystemImage:pauseSystemImage:)(v49, v53, v57, 0, 0, 0, 0, v55, v98);
    v60 = sub_100003DCC(&qword_1000A12E0, (uint64_t (*)(uint64_t))&type metadata accessor for PlaybackButton, (uint64_t)&protocol conformance descriptor for PlaybackButton);
    v61 = v106;
    v62 = v105;
    View.widgetAccentable(_:)(1, v105, v60);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v59, v62);
    v63 = sub_10001AA60(&v135);
    v64 = v128;
    static AccessibilityChildBehavior.ignore.getter(v63);
    v135 = v62;
    v136 = v60;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v135, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v66 = v111;
    v67 = v110;
    View.accessibilityElement(children:)(v64, v110, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v64, v130);
    v68 = (*(uint64_t (**)(char *, uint64_t))(v108 + 8))(v61, v67);
    v69 = v132;
    static AccessibilityTraits.isButton.getter(v68);
    v135 = v67;
    v136 = OpaqueTypeConformance2;
    v70 = swift_getOpaqueTypeConformance2(&v135, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v71 = (uint64_t)v114;
    v72 = v113;
    View.accessibilityAddTraits(_:)(v69, v113, v70);
    (*(void (**)(char *, uint64_t))(v133 + 8))(v69, v134);
    (*(void (**)(char *, uint64_t))(v112 + 8))(v66, v72);
    v73 = *(_QWORD *)(v50 + 24);
    v74 = *(_QWORD *)(v50 + 32);
    v75 = v51;
    v76 = sub_10001BDC0(v51, v73, v74);
    v78 = v77;
    v135 = v76;
    v136 = v77;
    v79 = sub_1000075E8();
    v80 = (uint64_t)v123;
    v81 = v124;
    ModifiedContent<>.accessibilityLabel<A>(_:)(&v135, v124, &type metadata for String, v79);
    swift_bridgeObjectRelease(v78);
    sub_10001C0D4(v71);
    v82 = sub_100005F78(&qword_1000A0A58);
    v83 = swift_allocObject(v82, 64, 7);
    *(_OWORD *)(v83 + 16) = xmmword_10007F170;
    *(_QWORD *)(v83 + 32) = sub_10001BB5C(v75);
    *(_QWORD *)(v83 + 40) = v84;
    *(_QWORD *)(v83 + 48) = sub_10001BDC0(v75, v73, v74);
    *(_QWORD *)(v83 + 56) = v85;
    v86 = (uint64_t)v122;
    ModifiedContent<>.accessibilityInputLabels<A>(_:)(v83, v81, &type metadata for String, v79);
    swift_bridgeObjectRelease(v83);
    sub_10001C0D4(v80);
    v87 = v127;
    sub_100007984(v86, v127, &qword_1000A12D0);
    v88 = v131;
    sub_10001C114(v87, v131);
    v90 = KeyPath;
    v89 = v126;
    v91 = v101;
    *v101 = KeyPath;
    v91[1] = v89;
    v91[2] = v121;
    *((_BYTE *)v91 + 24) = v120;
    v91[4] = v119;
    *((_BYTE *)v91 + 40) = v118;
    v92 = v116;
    v91[6] = v117;
    v91[7] = v92;
    v93 = v91;
    v94 = sub_100005F78(&qword_1000A12E8);
    sub_10001C114(v88, (uint64_t)v93 + *(int *)(v94 + 48));
    swift_retain(v90);
    swift_retain(v89);
    sub_10001C0D4(v87);
    sub_10001C0D4(v88);
    swift_release(v89);
    return swift_release(v90);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_10001B958@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  _OWORD v24[5];

  if ((*(_BYTE *)(v1 + 16) & 1) != 0)
  {
    sub_100005F78(&qword_1000A1308);
    v13 = type metadata accessor for AppDependencyManager(0);
    memset(v24, 0, 40);
    v14 = static AppDependencyManager.shared.getter(v13);
    v15 = AppDependency.__allocating_init(key:manager:)(v24, v14);
    a1[3] = (uint64_t)&type metadata for PauseCurrentAudiobookIntent;
    result = sub_10001C2DC();
    a1[4] = result;
    *a1 = v15;
  }
  else
  {
    if (*(_BYTE *)(v1 + 17) == 1)
    {
      v3 = *(_QWORD *)v1;
      v4 = *(_QWORD *)(v1 + 8);
      v6 = *(_QWORD *)(v1 + 24);
      v5 = *(_QWORD *)(v1 + 32);
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v4);
      sub_100048214(v3, v4, v6, v5, 0, 0, 0, 0, &v18, 1u);
      *(_QWORD *)&v24[0] = v18;
      *(_OWORD *)((char *)v24 + 8) = v19;
      *(_OWORD *)((char *)&v24[1] + 8) = v20;
      *(_OWORD *)((char *)&v24[2] + 8) = v21;
      *(_OWORD *)((char *)&v24[3] + 8) = v22;
      BYTE8(v24[4]) = v23;
      sub_10001C1E4(&v18);
      v7 = sub_1000487E0(1, (uint64_t)v24);
      v9 = v8;
      v11 = v10;
      a1[3] = (uint64_t)&type metadata for PlayAudiobookIntent;
      a1[4] = sub_10001C1A0();
      result = (unint64_t)sub_10001C260(&v18);
    }
    else
    {
      memset(v24, 0, 73);
      v7 = sub_1000487E0(0, (uint64_t)v24);
      v9 = v16;
      v11 = v17;
      a1[3] = (uint64_t)&type metadata for PlayAudiobookIntent;
      result = sub_10001C1A0();
      a1[4] = result;
    }
    *a1 = v7;
    a1[1] = v9;
    a1[2] = v11;
  }
  return result;
}

uint64_t sub_10001BAFC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;

  v4 = *(_OWORD *)(v2 + 16);
  v8[0] = *(_OWORD *)v2;
  v8[1] = v4;
  v9 = *(_QWORD *)(v2 + 32);
  *a2 = static Alignment.center.getter(a1);
  a2[1] = v5;
  v6 = sub_100005F78(&qword_1000A12A8);
  return sub_10001AF88((uint64_t)v8, (_QWORD *)((char *)a2 + *(int *)(v6 + 44)));
}

uint64_t sub_10001BB5C(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjCClassFromMetadata;
  id v19;
  const char *v20;
  _BYTE *v21;
  id v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  _BYTE v31[16];

  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v31[-v7];
  v9 = type metadata accessor for String.LocalizationValue(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v31[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v15 = &v31[-v14];
  if ((a1 & 1) != 0)
  {
    v16 = String.LocalizationValue.init(stringLiteral:)(0x6573756150, 0xE500000000000000);
    static Locale.current.getter(v16);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v13, v15, v9);
    v17 = type metadata accessor for BundleFinder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v17);
    v19 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16))(v6, v8, v2);
    v20 = "Accessibility label for a pause button";
    v21 = v13;
    v22 = v19;
    v23 = v6;
    v24 = 38;
  }
  else
  {
    v25 = String.LocalizationValue.init(stringLiteral:)(2036427856, 0xE400000000000000);
    static Locale.current.getter(v25);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v13, v15, v9);
    v26 = type metadata accessor for BundleFinder();
    v27 = swift_getObjCClassFromMetadata(v26);
    v28 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", v27);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16))(v6, v8, v2);
    v20 = "Accessibility label for a play button";
    v21 = v13;
    v22 = v28;
    v23 = v6;
    v24 = 37;
  }
  v29 = String.init(localized:table:bundle:locale:comment:)(v21, 0, 0, v22, v23, v20, v24, 2);
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v8, v2);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v9);
  return v29;
}

uint64_t sub_10001BDC0(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjCClassFromMetadata;
  id v22;
  const char *v23;
  char *v24;
  id v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];

  v39[0] = a2;
  v5 = type metadata accessor for Locale(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v39 - v10;
  v12 = type metadata accessor for String.LocalizationValue(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)v39 - v17;
  if (!a3)
    return sub_10001BB5C(a1 & 1);
  swift_bridgeObjectRetain(a3);
  if ((a1 & 1) != 0)
  {
    v19 = String.LocalizationValue.init(stringLiteral:)(0x4025206573756150, 0xE800000000000000);
    static Locale.current.getter(v19);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
    v20 = type metadata accessor for BundleFinder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v20);
    v22 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    v23 = "Accessibility label for a pause button for a named audiobook";
    v24 = v16;
    v25 = v22;
    v26 = v9;
    v27 = 60;
  }
  else
  {
    v29 = String.LocalizationValue.init(stringLiteral:)(0x40252079616C50, 0xE700000000000000);
    static Locale.current.getter(v29);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
    v30 = type metadata accessor for BundleFinder();
    v31 = swift_getObjCClassFromMetadata(v30);
    v32 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", v31);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    v23 = "Accessibility label for a play button for a named audiobook";
    v24 = v16;
    v25 = v32;
    v26 = v9;
    v27 = 59;
  }
  v33 = String.init(localized:table:bundle:locale:comment:)(v24, 0, 0, v25, v26, v23, v27, 2);
  v35 = v34;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  v36 = sub_100005F78(&qword_1000A12F0);
  v37 = swift_allocObject(v36, 72, 7);
  *(_OWORD *)(v37 + 16) = xmmword_10007F260;
  *(_QWORD *)(v37 + 56) = &type metadata for String;
  *(_QWORD *)(v37 + 64) = sub_10001C15C();
  *(_QWORD *)(v37 + 32) = v39[0];
  *(_QWORD *)(v37 + 40) = a3;
  v38 = static String.localizedStringWithFormat(_:_:)(v33, v35, v37);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v37);
  return v38;
}

uint64_t sub_10001C0D4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F78(&qword_1000A12D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001C114(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F78(&qword_1000A12D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10001C15C()
{
  unint64_t result;

  result = qword_1000A12F8;
  if (!qword_1000A12F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000A12F8);
  }
  return result;
}

unint64_t sub_10001C1A0()
{
  unint64_t result;

  result = qword_1000A1300;
  if (!qword_1000A1300)
  {
    result = swift_getWitnessTable(&unk_10008097C, &type metadata for PlayAudiobookIntent);
    atomic_store(result, (unint64_t *)&qword_1000A1300);
  }
  return result;
}

_QWORD *sub_10001C1E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  swift_bridgeObjectRetain(a1[8]);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

_QWORD *sub_10001C260(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[8];
  swift_release(a1[6]);
  swift_release(v6);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v7);
  return a1;
}

unint64_t sub_10001C2DC()
{
  unint64_t result;

  result = qword_1000A1310;
  if (!qword_1000A1310)
  {
    result = swift_getWitnessTable(&unk_100081550, &type metadata for PauseCurrentAudiobookIntent);
    atomic_store(result, (unint64_t *)&qword_1000A1310);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PlaybackMode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaybackMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10001C3FC + 4 * byte_10007FA35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10001C430 + 4 * byte_10007FA30[v4]))();
}

uint64_t sub_10001C430(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001C438(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001C440);
  return result;
}

uint64_t sub_10001C44C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001C454);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10001C458(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001C460(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10001C46C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PlaybackMode()
{
  return &type metadata for PlaybackMode;
}

unint64_t sub_10001C48C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1318;
  if (!qword_1000A1318)
  {
    v1 = sub_100005FC0(&qword_1000A1320);
    result = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1318);
  }
  return result;
}

unint64_t sub_10001C4DC()
{
  unint64_t result;

  result = qword_1000A1328;
  if (!qword_1000A1328)
  {
    result = swift_getWitnessTable(&unk_10007FB28, &type metadata for PlaybackMode);
    atomic_store(result, (unint64_t *)&qword_1000A1328);
  }
  return result;
}

uint64_t *sub_10001C520(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = a3[5];
    v9 = (char *)v4 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v13 = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)v4 + v12) = v13;
    v14 = a3[9];
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(_DWORD *)((char *)v4 + v14) = *(_DWORD *)((char *)a2 + v14);
    v15 = a3[10];
    v16 = a3[11];
    v17 = *(uint64_t *)((char *)a2 + v15);
    *(uint64_t *)((char *)v4 + v15) = v17;
    *(uint64_t *)((char *)v4 + v16) = *(uint64_t *)((char *)a2 + v16);
    *(uint64_t *)((char *)v4 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    swift_retain(v13);
  }
  swift_retain(v17);
  return v4;
}

uint64_t sub_10001C620(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_release(*(_QWORD *)(a1 + a2[7]));
  return swift_release(*(_QWORD *)(a1 + a2[10]));
}

uint64_t sub_10001C69C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v12 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  v13 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_DWORD *)(a1 + v13) = *(_DWORD *)(a2 + v13);
  v14 = a3[10];
  v15 = a3[11];
  v16 = *(_QWORD *)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v16;
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_retain(v12);
  swift_retain(v16);
  return a1;
}

uint64_t sub_10001C774(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v11 = a3[7];
  v12 = *(_QWORD *)(a2 + v11);
  v13 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_retain(v12);
  swift_release(v13);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  v14 = a3[10];
  v15 = *(_QWORD *)(a2 + v14);
  v16 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  swift_retain(v15);
  swift_release(v16);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_10001C86C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_DWORD *)(a1 + v12) = *(_DWORD *)(a2 + v12);
  v13 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_10001C938(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v12 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_release(v12);
  v13 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_DWORD *)(a1 + v13) = *(_DWORD *)(a2 + v13);
  v14 = a3[10];
  v15 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_release(v15);
  v16 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  return a1;
}

uint64_t sub_10001CA14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001CA20);
}

uint64_t sub_10001CA20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for BlendMode(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_10001CAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001CAD4);
}

uint64_t sub_10001CAD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for ColorScheme(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for BlendMode(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SmallEmptyStateView.ViewConfiguration(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A1388, (uint64_t)&nominal type descriptor for SmallEmptyStateView.ViewConfiguration);
}

uint64_t sub_10001CB8C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[9];

  result = type metadata accessor for ColorScheme(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for BlendMode(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[3] = (char *)&value witness table for Builtin.NativeObject + 64;
      v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[5] = (char *)&value witness table for Builtin.Int32 + 64;
      v5[6] = (char *)&value witness table for Builtin.NativeObject + 64;
      v5[7] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[8] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 9, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_10001CC40(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  id v26;
  int *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v37)(char *, uint64_t, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v35 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v4 = (uint64_t *)(v35 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_BYTE *)(a2 + 32);
    sub_10000BA78(*(_QWORD *)a2, v8, v9, v10, v11);
    *v4 = v7;
    v4[1] = v8;
    v4[2] = v9;
    v4[3] = v10;
    *((_BYTE *)v4 + 32) = v11;
    v12 = *(_QWORD *)(a2 + 48);
    v4[5] = *(_QWORD *)(a2 + 40);
    v4[6] = v12;
    *((_BYTE *)v4 + 56) = *(_BYTE *)(a2 + 56);
    *((_OWORD *)v4 + 4) = *(_OWORD *)(a2 + 64);
    *((_BYTE *)v4 + 96) = *(_BYTE *)(a2 + 96);
    v14 = *(_QWORD *)(a2 + 80);
    v13 = *(_QWORD *)(a2 + 88);
    v4[10] = v14;
    v4[11] = v13;
    v15 = *(_QWORD *)(a2 + 112);
    v4[13] = *(_QWORD *)(a2 + 104);
    v4[14] = v15;
    v16 = *(void **)(a2 + 120);
    v17 = *(void **)(a2 + 128);
    v4[15] = (uint64_t)v16;
    v4[16] = (uint64_t)v17;
    v18 = *(_QWORD *)(a2 + 144);
    v4[17] = *(_QWORD *)(a2 + 136);
    v4[18] = v18;
    *((_WORD *)v4 + 76) = *(_WORD *)(a2 + 152);
    v19 = *(_QWORD *)(a2 + 160);
    v20 = *(_QWORD *)(a2 + 168);
    v21 = *(int *)(a3 + 24);
    v22 = a2 + v21;
    v23 = (char *)v4 + v21;
    v4[20] = v19;
    v4[21] = v20;
    v24 = type metadata accessor for ColorScheme(0);
    v37 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    v25 = v16;
    v26 = v17;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
    v37(v23, v22, v24);
    v27 = (int *)type metadata accessor for SmallEmptyStateView.ViewConfiguration(0);
    v28 = v27[5];
    v29 = &v23[v28];
    v30 = v22 + v28;
    v31 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    *(_QWORD *)&v23[v27[6]] = *(_QWORD *)(v22 + v27[6]);
    v32 = v27[7];
    v33 = *(_QWORD *)(v22 + v32);
    *(_QWORD *)&v23[v32] = v33;
    *(_QWORD *)&v23[v27[8]] = *(_QWORD *)(v22 + v27[8]);
    *(_DWORD *)&v23[v27[9]] = *(_DWORD *)(v22 + v27[9]);
    v34 = v27[10];
    v35 = *(_QWORD *)(v22 + v34);
    *(_QWORD *)&v23[v34] = v35;
    *(_QWORD *)&v23[v27[11]] = *(_QWORD *)(v22 + v27[11]);
    *(_QWORD *)&v23[v27[12]] = *(_QWORD *)(v22 + v27[12]);
    swift_retain(v33);
  }
  swift_retain(v35);
  return v4;
}

uint64_t sub_10001CE30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000075DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 112));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 144));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 168));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (int *)type metadata accessor for SmallEmptyStateView.ViewConfiguration(0);
  v7 = v4 + v6[5];
  v8 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v4 + v6[7]));
  return swift_release(*(_QWORD *)(v4 + v6[10]));
}

uint64_t sub_10001CF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v36)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v7, v8, v9, v10);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = v12;
  v14 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v14;
  v15 = *(void **)(a2 + 120);
  v16 = *(void **)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v15;
  *(_QWORD *)(a1 + 128) = v16;
  v17 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v17;
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  v18 = *(_QWORD *)(a2 + 160);
  v19 = *(_QWORD *)(a2 + 168);
  v20 = *(int *)(a3 + 24);
  v21 = a2 + v20;
  v22 = a1 + v20;
  *(_QWORD *)(a1 + 160) = v18;
  *(_QWORD *)(a1 + 168) = v19;
  v23 = type metadata accessor for ColorScheme(0);
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  v24 = v15;
  v25 = v16;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  v36(v22, v21, v23);
  v26 = (int *)type metadata accessor for SmallEmptyStateView.ViewConfiguration(0);
  v27 = v26[5];
  v28 = v22 + v27;
  v29 = v21 + v27;
  v30 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  *(_QWORD *)(v22 + v26[6]) = *(_QWORD *)(v21 + v26[6]);
  v31 = v26[7];
  v32 = *(_QWORD *)(v21 + v31);
  *(_QWORD *)(v22 + v31) = v32;
  *(_QWORD *)(v22 + v26[8]) = *(_QWORD *)(v21 + v26[8]);
  *(_DWORD *)(v22 + v26[9]) = *(_DWORD *)(v21 + v26[9]);
  v33 = v26[10];
  v34 = *(_QWORD *)(v21 + v33);
  *(_QWORD *)(v22 + v33) = v34;
  *(_QWORD *)(v22 + v26[11]) = *(_QWORD *)(v21 + v26[11]);
  *(_QWORD *)(v22 + v26[12]) = *(_QWORD *)(v21 + v26[12]);
  swift_retain(v32);
  swift_retain(v34);
  return a1;
}

uint64_t sub_10001D0CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v7, v8, v9, v10);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  sub_1000075DC(v11, v12, v13, v14, v15);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v17 = *(_QWORD *)(a2 + 80);
  v18 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v19;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v20 = *(_QWORD *)(a2 + 112);
  v21 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = *(void **)(a1 + 120);
  v23 = *(void **)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v23;
  v24 = v23;

  v25 = *(void **)(a2 + 128);
  v26 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v25;
  v27 = v25;

  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v28 = *(_QWORD *)(a2 + 144);
  v29 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v30 = *(_QWORD *)(a2 + 168);
  v31 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = *(int *)(a3 + 24);
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v33, v34, v35);
  v36 = (int *)type metadata accessor for SmallEmptyStateView.ViewConfiguration(0);
  v37 = v36[5];
  v38 = v33 + v37;
  v39 = v34 + v37;
  v40 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 24))(v38, v39, v40);
  *(_QWORD *)(v33 + v36[6]) = *(_QWORD *)(v34 + v36[6]);
  v41 = v36[7];
  v42 = *(_QWORD *)(v34 + v41);
  v43 = *(_QWORD *)(v33 + v41);
  *(_QWORD *)(v33 + v41) = v42;
  swift_retain(v42);
  swift_release(v43);
  *(_QWORD *)(v33 + v36[8]) = *(_QWORD *)(v34 + v36[8]);
  *(_DWORD *)(v33 + v36[9]) = *(_DWORD *)(v34 + v36[9]);
  v44 = v36[10];
  v45 = *(_QWORD *)(v34 + v44);
  v46 = *(_QWORD *)(v33 + v44);
  *(_QWORD *)(v33 + v44) = v45;
  swift_retain(v45);
  swift_release(v46);
  *(_QWORD *)(v33 + v36[11]) = *(_QWORD *)(v34 + v36[11]);
  *(_QWORD *)(v33 + v36[12]) = *(_QWORD *)(v34 + v36[12]);
  return a1;
}

uint64_t sub_10001D30C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v8 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  v9 = (int *)type metadata accessor for SmallEmptyStateView.ViewConfiguration(0);
  v10 = v9[5];
  v11 = v6 + v10;
  v12 = v7 + v10;
  v13 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  *(_QWORD *)(v6 + v9[6]) = *(_QWORD *)(v7 + v9[6]);
  *(_QWORD *)(v6 + v9[7]) = *(_QWORD *)(v7 + v9[7]);
  *(_QWORD *)(v6 + v9[8]) = *(_QWORD *)(v7 + v9[8]);
  *(_DWORD *)(v6 + v9[9]) = *(_DWORD *)(v7 + v9[9]);
  *(_QWORD *)(v6 + v9[10]) = *(_QWORD *)(v7 + v9[10]);
  *(_QWORD *)(v6 + v9[11]) = *(_QWORD *)(v7 + v9[11]);
  *(_QWORD *)(v6 + v9[12]) = *(_QWORD *)(v7 + v9[12]);
  return a1;
}

uint64_t sub_10001D44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 32) = v6;
  sub_1000075DC(v7, v8, v9, v10, v11);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);

  v17 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);

  v18 = *(_QWORD *)(a2 + 144);
  v19 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v18;
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  v20 = *(_QWORD *)(a2 + 168);
  v21 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v20;
  swift_bridgeObjectRelease(v21);
  v22 = *(int *)(a3 + 24);
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  v26 = (int *)type metadata accessor for SmallEmptyStateView.ViewConfiguration(0);
  v27 = v26[5];
  v28 = v23 + v27;
  v29 = v24 + v27;
  v30 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  *(_QWORD *)(v23 + v26[6]) = *(_QWORD *)(v24 + v26[6]);
  v31 = v26[7];
  v32 = *(_QWORD *)(v23 + v31);
  *(_QWORD *)(v23 + v31) = *(_QWORD *)(v24 + v31);
  swift_release(v32);
  *(_QWORD *)(v23 + v26[8]) = *(_QWORD *)(v24 + v26[8]);
  *(_DWORD *)(v23 + v26[9]) = *(_DWORD *)(v24 + v26[9]);
  v33 = v26[10];
  v34 = *(_QWORD *)(v23 + v33);
  *(_QWORD *)(v23 + v33) = *(_QWORD *)(v24 + v33);
  swift_release(v34);
  *(_QWORD *)(v23 + v26[11]) = *(_QWORD *)(v24 + v26[11]);
  *(_QWORD *)(v23 + v26[12]) = *(_QWORD *)(v24 + v26[12]);
  return a1;
}

uint64_t sub_10001D610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001D61C);
}

uint64_t sub_10001D61C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 112);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SmallEmptyStateView.ViewConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_10001D698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001D6A4);
}

uint64_t sub_10001D6A4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 112) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for SmallEmptyStateView.ViewConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SmallEmptyStateView(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A1438, (uint64_t)&nominal type descriptor for SmallEmptyStateView);
}

uint64_t sub_10001D72C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "!";
  v4[1] = &unk_10007FBB0;
  result = type metadata accessor for SmallEmptyStateView.ViewConfiguration(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10001D7A8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100083CD4, 1);
}

uint64_t sub_10001D7B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  _OWORD v32[2];
  char v33;
  _BYTE v34[40];

  v3 = sub_100005F78(&qword_1000A1478);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)v32 - v7;
  v9 = sub_100005F78(&qword_1000A1480);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v12 = static VerticalAlignment.center.getter(v10);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v13 = sub_100005F78(&qword_1000A1488);
  v14 = (uint64_t)&v12[*(int *)(v13 + 44)];
  v15 = static HorizontalAlignment.leading.getter(v13);
  v16 = v1 + *(int *)(type metadata accessor for SmallEmptyStateView(0) + 24);
  v17 = *(_QWORD *)(v16 + *(int *)(type metadata accessor for SmallEmptyStateView.ViewConfiguration(0) + 48));
  *(_QWORD *)v8 = v15;
  *((_QWORD *)v8 + 1) = v17;
  v8[16] = 0;
  v18 = sub_100005F78(&qword_1000A1490);
  sub_10001DA0C(v1, (uint64_t)&v8[*(int *)(v18 + 44)]);
  sub_1000079C8((uint64_t)v8, (uint64_t)v6, &qword_1000A1478);
  sub_1000079C8((uint64_t)v6, v14, &qword_1000A1478);
  v19 = v14 + *(int *)(sub_100005F78(&qword_1000A1498) + 48);
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  sub_100007A0C((uint64_t)v8, &qword_1000A1478);
  sub_100007A0C((uint64_t)v6, &qword_1000A1478);
  v20 = *(_OWORD *)(v1 + 16);
  v32[0] = *(_OWORD *)v1;
  v32[1] = v20;
  v33 = *(_BYTE *)(v1 + 32);
  sub_100007984((uint64_t)v32, (uint64_t)v34, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  v21 = sub_100024DBC();
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v28 = sub_10000DBE0((uint64_t)v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v29 = static Edge.Set.all.getter(v28);
  sub_1000079C8((uint64_t)v12, a1, &qword_1000A1480);
  v30 = a1 + *(int *)(sub_100005F78(&qword_1000A14A0) + 36);
  *(_BYTE *)v30 = v29;
  *(double *)(v30 + 8) = v21;
  *(_QWORD *)(v30 + 16) = v23;
  *(_QWORD *)(v30 + 24) = v25;
  *(_QWORD *)(v30 + 32) = v27;
  *(_BYTE *)(v30 + 40) = 0;
  return sub_100007A0C((uint64_t)v12, &qword_1000A1480);
}

uint64_t sub_10001DA0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  _BYTE v91[7];
  char v92;
  int v93;
  __int16 v94;
  _BYTE v95[7];
  char v96;
  int v97;
  __int16 v98;
  _BYTE v99[7];
  char v100;
  _BYTE v101[7];
  _DWORD v102[2];
  int v103;
  __int16 v104;
  _DWORD v105[2];
  int v106;
  __int16 v107;
  _DWORD v108[2];
  _DWORD v109[2];

  v67 = a1;
  v77 = a2;
  v3 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v3);
  v71 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100005F78(&qword_1000A14A8);
  __chkstk_darwin(v70);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100005F78(&qword_1000A14B0);
  __chkstk_darwin(v73);
  v72 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100005F78(&qword_1000A14B8);
  v8 = __chkstk_darwin(v76);
  v74 = (uint64_t)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v75 = (uint64_t)&v53 - v10;
  v68 = sub_100005F78(&qword_1000A14C0);
  __chkstk_darwin(v68);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v66 = sub_100005F78(&qword_1000A14C8);
  v16 = __chkstk_darwin(v66);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v78 = (uint64_t)&v53 - v19;
  v20 = a1 + *(int *)(type metadata accessor for SmallEmptyStateView(0) + 24);
  v21 = (int *)type metadata accessor for SmallEmptyStateView.ViewConfiguration(0);
  v65 = *(_QWORD *)(v20 + v21[6]);
  v22 = *(_QWORD *)(v20 + v21[10]);
  KeyPath = swift_getKeyPath(&unk_10007FC18);
  v24 = *(_QWORD *)(v20 + v21[11]);
  v25 = (char *)v15 + *(int *)(v13 + 20);
  v26 = enum case for RoundedCornerStyle.continuous(_:);
  v27 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v25, v26, v27);
  *v15 = v24;
  v15[1] = v24;
  sub_1000078D4((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v12[*(int *)(v68 + 36)] = 256;
  sub_1000079C8((uint64_t)v12, (uint64_t)&v18[*(int *)(v66 + 36)], &qword_1000A14C0);
  *(_QWORD *)v18 = v65;
  *((_WORD *)v18 + 4) = 0;
  *((_QWORD *)v18 + 2) = KeyPath;
  *((_QWORD *)v18 + 3) = v22;
  v69 = v18;
  swift_retain_n(v22, 2);
  swift_retain(KeyPath);
  sub_100007A0C((uint64_t)v12, &qword_1000A14C0);
  sub_100007A48((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  swift_release(v22);
  swift_release(KeyPath);
  v28 = sub_100007984((uint64_t)v18, v78, &qword_1000A14C8);
  v55 = static Axis.Set.vertical.getter(v28);
  sub_10001E278((uint64_t)&v79);
  v29 = v79;
  LOBYTE(v25) = v80;
  v58 = *((_QWORD *)&v80 + 1);
  v57 = v81;
  v56 = BYTE1(v81);
  v61 = *((_QWORD *)&v81 + 1);
  v60 = v82;
  LOBYTE(v26) = v83;
  v65 = v84;
  v64 = v85;
  v63 = v86;
  v67 = v87;
  v66 = v88;
  LOBYTE(v18) = v89;
  v68 = v90;
  v62 = Font.weight(_:)(*(_QWORD *)(v20 + v21[7]), *(double *)(v20 + v21[8]));
  v59 = swift_getKeyPath(&unk_10007FC48);
  v100 = (char)v25;
  v96 = v26;
  v92 = (char)v18;
  v54 = *(_DWORD *)(v20 + v21[9]);
  v109[0] = *(_DWORD *)v101;
  *(_DWORD *)((char *)v109 + 3) = *(_DWORD *)&v101[3];
  v108[0] = *(_DWORD *)v99;
  *(_DWORD *)((char *)v108 + 3) = *(_DWORD *)&v99[3];
  v106 = v97;
  v107 = v98;
  v105[0] = *(_DWORD *)v95;
  *(_DWORD *)((char *)v105 + 3) = *(_DWORD *)&v95[3];
  v103 = v93;
  v104 = v94;
  LOBYTE(KeyPath) = (_BYTE)v18;
  v102[0] = *(_DWORD *)v91;
  v30 = v20 + v21[5];
  *(_DWORD *)((char *)v102 + 3) = *(_DWORD *)&v91[3];
  v31 = type metadata accessor for BlendMode(0);
  v32 = (uint64_t)v71;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v71, v30, v31);
  sub_1000078D4(v32, (uint64_t)&v6[*(int *)(v70 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *v6 = v55;
  *(_DWORD *)(v6 + 1) = v109[0];
  *((_DWORD *)v6 + 1) = *(_DWORD *)((char *)v109 + 3);
  *(_OWORD *)(v6 + 8) = v29;
  v6[24] = (char)v25;
  *(_DWORD *)(v6 + 25) = v108[0];
  *((_DWORD *)v6 + 7) = *(_DWORD *)((char *)v108 + 3);
  *((_QWORD *)v6 + 4) = v58;
  v6[40] = v57;
  v6[41] = v56;
  *(_DWORD *)(v6 + 42) = v106;
  *((_WORD *)v6 + 23) = v107;
  v33 = v60;
  *((_QWORD *)v6 + 6) = v61;
  *((_QWORD *)v6 + 7) = v33;
  v6[64] = v26;
  *((_DWORD *)v6 + 17) = *(_DWORD *)((char *)v105 + 3);
  *(_DWORD *)(v6 + 65) = v105[0];
  *((_QWORD *)v6 + 9) = v65;
  v6[80] = v64;
  v6[81] = v63;
  *(_DWORD *)(v6 + 82) = v103;
  *((_WORD *)v6 + 43) = v104;
  v34 = v66;
  *((_QWORD *)v6 + 11) = v67;
  *((_QWORD *)v6 + 12) = v34;
  v6[104] = KeyPath;
  LODWORD(v34) = v102[0];
  *((_DWORD *)v6 + 27) = *(_DWORD *)((char *)v102 + 3);
  *(_DWORD *)(v6 + 105) = v34;
  v35 = v59;
  *((_QWORD *)v6 + 14) = v68;
  *((_QWORD *)v6 + 15) = v35;
  *((_QWORD *)v6 + 16) = v62;
  *((_DWORD *)v6 + 34) = v54;
  sub_100007A48(v32, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  v36 = swift_getKeyPath(&unk_10007FC78);
  v37 = (uint64_t)v72;
  v38 = (uint64_t *)&v72[*(int *)(v73 + 36)];
  v39 = (char *)v38 + *(int *)(sub_100005F78(&qword_1000A1078) + 28);
  v40 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v39, v20, v40);
  *v38 = v36;
  v41 = sub_100007984((uint64_t)v6, v37, &qword_1000A14A8);
  v42 = static HorizontalAlignment.center.getter(v41);
  v43 = static VerticalAlignment.lastTextBaseline.getter();
  _FrameLayout.init(width:height:alignment:)(&v79, 0, 1, 0, 1, v42, v43);
  v44 = v74;
  sub_1000079C8(v37, v74, &qword_1000A14B0);
  v45 = (_OWORD *)(v44 + *(int *)(v76 + 36));
  v46 = v80;
  *v45 = v79;
  v45[1] = v46;
  v45[2] = v81;
  sub_100007A0C(v37, &qword_1000A14B0);
  v47 = v75;
  sub_100007984(v44, v75, &qword_1000A14B8);
  v48 = v78;
  v49 = (uint64_t)v69;
  sub_1000079C8(v78, (uint64_t)v69, &qword_1000A14C8);
  sub_1000079C8(v47, v44, &qword_1000A14B8);
  v50 = v77;
  sub_1000079C8(v49, v77, &qword_1000A14C8);
  v51 = sub_100005F78(&qword_1000A14D0);
  sub_1000079C8(v44, v50 + *(int *)(v51 + 48), &qword_1000A14B8);
  sub_100007A0C(v47, &qword_1000A14B8);
  sub_100007A0C(v48, &qword_1000A14C8);
  sub_100007A0C(v44, &qword_1000A14B8);
  return sub_100007A0C(v49, &qword_1000A14C8);
}

uint64_t sub_10001E278@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = sub_100007980();
  v30 = v2;
  v3 = sub_1000075E8();
  v4 = Text.init<A>(_:)(&v29, &type metadata for String, v3);
  v27 = v5;
  v28 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v29 = sub_1000525F0();
  v30 = v10;
  v25 = Text.init<A>(_:)(&v29, &type metadata for String, v3);
  v26 = v11;
  v13 = v12;
  v15 = v14 & 1;
  v29 = sub_100052618();
  v30 = v16;
  v17 = Text.init<A>(_:)(&v29, &type metadata for String, v3);
  v19 = v18;
  v21 = v20;
  LOBYTE(v29) = v9;
  v23 = v22 & 1;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v27;
  *(_BYTE *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v7;
  *(_WORD *)(a1 + 32) = 256;
  *(_QWORD *)(a1 + 40) = v25;
  *(_QWORD *)(a1 + 48) = v26;
  *(_BYTE *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v13;
  *(_WORD *)(a1 + 72) = 256;
  *(_QWORD *)(a1 + 80) = v17;
  *(_QWORD *)(a1 + 88) = v18;
  *(_BYTE *)(a1 + 96) = v22 & 1;
  *(_QWORD *)(a1 + 104) = v20;
  sub_1000115A8(v28, v27, v9);
  swift_bridgeObjectRetain(v7);
  sub_1000115A8(v25, v26, v15);
  swift_bridgeObjectRetain(v13);
  sub_1000115A8(v17, v19, v23);
  swift_bridgeObjectRetain(v21);
  sub_1000115B8(v17, v19, v23);
  swift_bridgeObjectRelease(v21);
  sub_1000115B8(v25, v26, v15);
  swift_bridgeObjectRelease(v13);
  sub_1000115B8(v28, v27, v29);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_10001E410@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10001E438(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10001E460()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10001E480(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for ColorScheme(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.colorScheme.setter(v3);
}

uint64_t sub_10001E4FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10001E524@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10001E54C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_10001E574(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_10001E59C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10001E5C4(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10001E5EC()
{
  return EnvironmentValues.colorScheme.getter();
}

unint64_t sub_10001E614()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A14D8;
  if (!qword_1000A14D8)
  {
    v1 = sub_100005FC0(&qword_1000A14A0);
    sub_10001E680();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A14D8);
  }
  return result;
}

unint64_t sub_10001E680()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A14E0;
  if (!qword_1000A14E0)
  {
    v1 = sub_100005FC0(&qword_1000A1480);
    result = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A14E0);
  }
  return result;
}

unint64_t sub_10001E6CC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v18);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_BYTE *)(a2 + 32);
    sub_10000BA78(*(_QWORD *)a2, v8, v9, v10, v11);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 32) = v11;
    v12 = *(int *)(a3 + 20);
    v13 = (void *)(a1 + v12);
    v14 = (const void *)(a2 + v12);
    v15 = type metadata accessor for URL(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_100005F78(&qword_1000A09F0);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t sub_10001E7EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  sub_1000075DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t sub_10001E874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v7, v8, v9, v10);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  v11 = *(int *)(a3 + 20);
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_100005F78(&qword_1000A09F0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_10001E968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v7, v8, v9, v10);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  sub_1000075DC(v11, v12, v13, v14, v15);
  v16 = *(int *)(a3 + 20);
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v7) = v21(v17, 1, v19);
  v22 = v21(v18, 1, v19);
  if (!(_DWORD)v7)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v23 = sub_100005F78(&qword_1000A09F0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t sub_10001EAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(int *)(a3 + 20);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = sub_100005F78(&qword_1000A09F0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_10001EB74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;

  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 32) = v6;
  sub_1000075DC(v7, v8, v9, v10, v11);
  v13 = *(int *)(a3 + 20);
  v14 = (void *)(a1 + v13);
  v15 = (void *)(a2 + v13);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v14, v15, v16);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = sub_100005F78(&qword_1000A09F0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v14, v15, v16);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_10001ECA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001ECAC);
}

uint64_t sub_10001ECAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 32);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_100005F78(&qword_1000A09F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10001ED24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001ED30);
}

uint64_t sub_10001ED30(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 32) = -(char)a2;
  }
  else
  {
    v7 = sub_100005F78(&qword_1000A09F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for LogoView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000A1550;
  if (!qword_1000A1550)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LogoView);
  return result;
}

void sub_10001EDE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "!";
  sub_10001EE54(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_10001EE54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000A1560)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000A1560);
  }
}

uint64_t sub_10001EEA8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100083D24, 1);
}

uint64_t sub_10001EEB8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = sub_100005F78(&qword_1000A1590);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v17 - v5;
  v7 = sub_100005F78(&qword_1000A1598);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static HorizontalAlignment.center.getter(v8);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  v11 = sub_100005F78(&qword_1000A15A0);
  v12 = (uint64_t)&v10[*(int *)(v11 + 44)];
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v11);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v13 = sub_100005F78(&qword_1000A15A8);
  sub_10001F070(v0, &v6[*(int *)(v13 + 44)]);
  sub_1000079C8((uint64_t)v6, (uint64_t)v4, &qword_1000A1590);
  sub_1000079C8((uint64_t)v4, v12, &qword_1000A1590);
  v14 = v12 + *(int *)(sub_100005F78(&qword_1000A15B0) + 48);
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  sub_100007A0C((uint64_t)v6, &qword_1000A1590);
  sub_100007A0C((uint64_t)v4, &qword_1000A1590);
  v15 = sub_100007F64(&qword_1000A15B8, &qword_1000A1598, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.accessibility(hidden:)(1, v7, v15);
  return sub_100007A0C((uint64_t)v10, &qword_1000A1598);
}

uint64_t sub_10001F070@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (**v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  char *v40;
  __int128 v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t OpaqueTypeConformance2;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  void (**v82)(char *, char *, uint64_t);
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  void (**v94)(char *, char *, uint64_t);
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD v109[2];
  uint64_t v110;
  unint64_t v111;
  char v112;
  uint64_t v113;
  char v114;
  __int128 v115;
  unint64_t v116;
  char v117;
  uint64_t v118;
  char v119;
  __int128 v120;
  _OWORD v121[2];
  char v122;
  _OWORD v123[2];
  char v124;
  char v125[8];

  v108 = a2;
  v105 = sub_100005F78(&qword_1000A15C0);
  v94 = *(void (***)(char *, char *, uint64_t))(v105 - 8);
  __chkstk_darwin(v105);
  v93 = (char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_100005F78(&qword_1000A15C8);
  __chkstk_darwin(v103);
  v104 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100005F78(&qword_1000A15D0);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v96 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100005F78(&qword_1000A15D8);
  __chkstk_darwin(v95);
  v92 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005F78(&qword_1000A15E0);
  __chkstk_darwin(v7);
  v100 = (uint64_t)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100005F78(&qword_1000A15E8);
  v102 = *(_QWORD *)(v107 - 8);
  v9 = __chkstk_darwin(v107);
  v99 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v101 = (char *)&v90 - v11;
  v12 = sub_100005F78(&qword_1000A09F0);
  __chkstk_darwin(v12);
  v14 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v90 - v20;
  v22 = sub_100005F78(&qword_1000A15F0);
  v23 = __chkstk_darwin(v22);
  v106 = (uint64_t)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v26 = (void (**)(char *, char *, uint64_t))((char *)&v90 - v25);
  v27 = type metadata accessor for LogoView(0);
  sub_1000079C8((uint64_t)&a1[*(int *)(v27 + 20)], (uint64_t)v14, &qword_1000A09F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    v93 = a1;
    v91 = v7;
    v94 = v26;
    v28 = v104;
    sub_100007A0C((uint64_t)v14, &qword_1000A09F0);
    v29 = Image.init(_:bundle:)(0x2D73746567646957, 0xEF6E6F6349707041, 0);
    v30 = v29;
    if (qword_1000A0648 != -1)
      v29 = swift_once(&qword_1000A0648, sub_10001FD68);
    v31 = qword_1000A14E8;
    if (qword_1000A0650 != -1)
      v29 = swift_once(&qword_1000A0650, sub_10001FD78);
    v32 = qword_1000A14F0;
    v33 = static Alignment.center.getter(v29);
    _FrameLayout.init(width:height:alignment:)(&v116, v31, 0, v32, 0, v33, v34);
    v110 = v30;
    v111 = v116;
    v112 = v117;
    v113 = v118;
    v114 = v119;
    v115 = v120;
    v35 = sub_100005F78(&qword_1000A15F8);
    v36 = sub_10001FD8C();
    v37 = v96;
    View.widgetAccentable(_:)(1, v35, v36);
    v38 = swift_release(v30);
    v39 = static Edge.Set.top.getter(v38);
    v40 = v93;
    v41 = *((_OWORD *)v93 + 1);
    v123[0] = *(_OWORD *)v93;
    v123[1] = v41;
    v124 = v93[32];
    sub_10001FDF0((uint64_t)v123, (uint64_t)v125);
    sub_10000DBE0((uint64_t)v125, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
    v42 = sub_100024DBC();
    sub_10000DBE0((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
    v43 = EdgeInsets.init(_all:)(v42);
    v45 = v44;
    v47 = v46;
    v49 = v48;
    v50 = v97;
    v51 = (uint64_t)v92;
    v52 = v98;
    (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v92, v37, v98);
    v53 = v51 + *(int *)(v95 + 36);
    *(_BYTE *)v53 = v39;
    *(double *)(v53 + 8) = v43;
    *(_QWORD *)(v53 + 16) = v45;
    *(_QWORD *)(v53 + 24) = v47;
    *(_QWORD *)(v53 + 32) = v49;
    *(_BYTE *)(v53 + 40) = 0;
    v54 = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v37, v52);
    v55 = static Edge.Set.trailing.getter(v54);
    v56 = *((_OWORD *)v40 + 1);
    v121[0] = *(_OWORD *)v40;
    v121[1] = v56;
    v122 = v40[32];
    sub_10001FDF0((uint64_t)v121, (uint64_t)&v110);
    sub_10000DBE0((uint64_t)&v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
    sub_100024DBC();
    v58 = v57;
    sub_10000DBE0((uint64_t)v121, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
    v59 = EdgeInsets.init(_all:)(v58);
    v61 = v60;
    v63 = v62;
    v65 = v64;
    v66 = v100;
    sub_1000079C8(v51, v100, &qword_1000A15D8);
    v67 = v91;
    v68 = v66 + *(int *)(v91 + 36);
    *(_BYTE *)v68 = v55;
    *(double *)(v68 + 8) = v59;
    *(_QWORD *)(v68 + 16) = v61;
    *(_QWORD *)(v68 + 24) = v63;
    *(_QWORD *)(v68 + 32) = v65;
    *(_BYTE *)(v68 + 40) = 0;
    sub_100007A0C(v51, &qword_1000A15D8);
    v69 = sub_10001FE38();
    v70 = v99;
    View.unredacted()(v67, v69);
    sub_100007A0C(v66, &qword_1000A15E0);
    v71 = v102;
    v72 = v101;
    v73 = v70;
    v74 = v107;
    (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v101, v73, v107);
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v28, v72, v74);
    swift_storeEnumTagMultiPayload(v28, v103, 1);
    v75 = sub_100007F64(&qword_1000A1618, &qword_1000A15C0, (uint64_t)&protocol conformance descriptor for Link<A>);
    v109[0] = v67;
    v109[1] = v69;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v109, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    v26 = v94;
    _ConditionalContent<>.init(storage:)(v28, v105, v74, v75, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v74);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v14, v15);
    v77 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v15);
    __chkstk_darwin(v77);
    *(&v90 - 2) = (uint64_t)a1;
    v78 = sub_10001FE38();
    v110 = v7;
    v111 = v78;
    v79 = swift_getOpaqueTypeConformance2(&v110, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    v80 = v93;
    v81 = v107;
    Link.init(destination:label:)(v19, sub_10001FF38, &v90 - 4, v107, v79);
    v82 = v94;
    v83 = v104;
    v84 = v105;
    v94[2](v104, v80, v105);
    swift_storeEnumTagMultiPayload(v83, v103, 0);
    v85 = sub_100007F64(&qword_1000A1618, &qword_1000A15C0, (uint64_t)&protocol conformance descriptor for Link<A>);
    _ConditionalContent<>.init(storage:)(v83, v84, v81, v85, v79);
    ((void (*)(char *, uint64_t))v82[1])(v80, v84);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  }
  v86 = v106;
  sub_1000079C8((uint64_t)v26, v106, &qword_1000A15F0);
  v87 = v108;
  *v108 = 0;
  *((_BYTE *)v87 + 8) = 1;
  v88 = sub_100005F78(&qword_1000A1620);
  sub_1000079C8(v86, (uint64_t)v87 + *(int *)(v88 + 48), &qword_1000A15F0);
  sub_100007A0C((uint64_t)v26, &qword_1000A15F0);
  return sub_100007A0C(v86, &qword_1000A15F0);
}

uint64_t sub_10001F98C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  char v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  _OWORD v60[2];
  char v61;
  _OWORD v62[2];
  char v63;
  _BYTE v64[40];

  v49 = a2;
  v3 = sub_100005F78(&qword_1000A15D0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100005F78(&qword_1000A15D8);
  __chkstk_darwin(v47);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100005F78(&qword_1000A15E0);
  __chkstk_darwin(v48);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = Image.init(_:bundle:)(0x2D73746567646957, 0xEF6E6F6349707041, 0);
  v12 = v11;
  if (qword_1000A0648 != -1)
    v11 = swift_once(&qword_1000A0648, sub_10001FD68);
  v13 = qword_1000A14E8;
  if (qword_1000A0650 != -1)
    v11 = swift_once(&qword_1000A0650, sub_10001FD78);
  v14 = qword_1000A14F0;
  v15 = static Alignment.center.getter(v11);
  _FrameLayout.init(width:height:alignment:)(&v55, v13, 0, v14, 0, v15, v16);
  v50[0] = v12;
  v50[1] = v55;
  v51 = v56;
  v52 = v57;
  v53 = v58;
  v54 = v59;
  v17 = sub_100005F78(&qword_1000A15F8);
  v18 = sub_10001FD8C();
  View.widgetAccentable(_:)(1, v17, v18);
  v19 = swift_release(v12);
  v20 = static Edge.Set.top.getter(v19);
  v21 = *(_OWORD *)(a1 + 16);
  v62[0] = *(_OWORD *)a1;
  v62[1] = v21;
  v63 = *(_BYTE *)(a1 + 32);
  sub_10001FDF0((uint64_t)v62, (uint64_t)v64);
  sub_10000DBE0((uint64_t)v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  v22 = sub_100024DBC();
  sub_10000DBE0((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v23 = EdgeInsets.init(_all:)(v22);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v6, v3);
  v30 = &v8[*(int *)(v47 + 36)];
  *v30 = v20;
  *((double *)v30 + 1) = v23;
  *((_QWORD *)v30 + 2) = v25;
  *((_QWORD *)v30 + 3) = v27;
  *((_QWORD *)v30 + 4) = v29;
  v30[40] = 0;
  v31 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v32 = static Edge.Set.trailing.getter(v31);
  v33 = *(_OWORD *)(a1 + 16);
  v60[0] = *(_OWORD *)a1;
  v60[1] = v33;
  v61 = *(_BYTE *)(a1 + 32);
  sub_10001FDF0((uint64_t)v60, (uint64_t)v50);
  sub_10000DBE0((uint64_t)v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v35 = v34;
  sub_10000DBE0((uint64_t)v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v36 = EdgeInsets.init(_all:)(v35);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  sub_1000079C8((uint64_t)v8, (uint64_t)v10, &qword_1000A15D8);
  v43 = v48;
  v44 = &v10[*(int *)(v48 + 36)];
  *v44 = v32;
  *((double *)v44 + 1) = v36;
  *((_QWORD *)v44 + 2) = v38;
  *((_QWORD *)v44 + 3) = v40;
  *((_QWORD *)v44 + 4) = v42;
  v44[40] = 0;
  sub_100007A0C((uint64_t)v8, &qword_1000A15D8);
  v45 = sub_10001FE38();
  View.unredacted()(v43, v45);
  return sub_100007A0C((uint64_t)v10, &qword_1000A15E0);
}

void sub_10001FD68()
{
  qword_1000A14E8 = 0x4036000000000000;
}

void sub_10001FD78()
{
  qword_1000A14F0 = 0x4031000000000000;
}

unint64_t sub_10001FD8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1600;
  if (!qword_1000A1600)
  {
    v1 = sub_100005FC0(&qword_1000A15F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1600);
  }
  return result;
}

uint64_t sub_10001FDF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F78(&qword_1000A0D20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10001FE38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1608;
  if (!qword_1000A1608)
  {
    v1 = sub_100005FC0(&qword_1000A15E0);
    sub_10001FEA4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1608);
  }
  return result;
}

unint64_t sub_10001FEA4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000A1610;
  if (!qword_1000A1610)
  {
    v1 = sub_100005FC0(&qword_1000A15D8);
    v2[0] = sub_100005FC0(&qword_1000A15F8);
    v2[1] = sub_10001FD8C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1610);
  }
  return result;
}

uint64_t sub_10001FF38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10001F98C(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10001FF44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1628;
  if (!qword_1000A1628)
  {
    v1 = sub_100005FC0(&qword_1000A1630);
    sub_100007F64(&qword_1000A15B8, &qword_1000A1598, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_10001FFC8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1628);
  }
  return result;
}

unint64_t sub_10001FFC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A0A38;
  if (!qword_1000A0A38)
  {
    v1 = type metadata accessor for AccessibilityAttachmentModifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessibilityAttachmentModifier, v1);
    atomic_store(result, (unint64_t *)&qword_1000A0A38);
  }
  return result;
}

uint64_t *sub_100020010(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    v3 = (uint64_t *)(v20 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for ColorScheme(0);
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
    v12 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
    v13 = v12[5];
    v14 = &v8[v13];
    v15 = &v9[v13];
    v16 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = v12[6];
    v18 = *(_QWORD *)&v9[v17];
    *(_QWORD *)&v8[v17] = v18;
    *(_QWORD *)&v8[v12[7]] = *(_QWORD *)&v9[v12[7]];
    *(_DWORD *)&v8[v12[8]] = *(_DWORD *)&v9[v12[8]];
    v19 = v12[9];
    v20 = *(_QWORD *)&v9[v19];
    *(_QWORD *)&v8[v19] = v20;
    *(_QWORD *)&v8[v12[10]] = *(_QWORD *)&v9[v12[10]];
    *(_QWORD *)&v8[v12[11]] = *(_QWORD *)&v9[v12[11]];
    *(_QWORD *)&v8[v12[12]] = *(_QWORD *)&v9[v12[12]];
    swift_retain(v18);
  }
  swift_retain(v20);
  return v3;
}

uint64_t sub_100020158(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
  v7 = v4 + v6[5];
  v8 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v4 + v6[6]));
  return swift_release(*(_QWORD *)(v4 + v6[9]));
}

_QWORD *sub_1000201F8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ColorScheme(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  v11 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
  v12 = v11[5];
  v13 = &v7[v12];
  v14 = &v8[v12];
  v15 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = v11[6];
  v17 = *(_QWORD *)&v8[v16];
  *(_QWORD *)&v7[v16] = v17;
  *(_QWORD *)&v7[v11[7]] = *(_QWORD *)&v8[v11[7]];
  *(_DWORD *)&v7[v11[8]] = *(_DWORD *)&v8[v11[8]];
  v18 = v11[9];
  v19 = *(_QWORD *)&v8[v18];
  *(_QWORD *)&v7[v18] = v19;
  *(_QWORD *)&v7[v11[10]] = *(_QWORD *)&v8[v11[10]];
  *(_QWORD *)&v7[v11[11]] = *(_QWORD *)&v8[v11[11]];
  *(_QWORD *)&v7[v11[12]] = *(_QWORD *)&v8[v11[12]];
  swift_retain(v17);
  swift_retain(v19);
  return a1;
}

_QWORD *sub_100020318(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
  v15 = v14[5];
  v16 = &v11[v15];
  v17 = &v12[v15];
  v18 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = v14[6];
  v20 = *(_QWORD *)&v12[v19];
  v21 = *(_QWORD *)&v11[v19];
  *(_QWORD *)&v11[v19] = v20;
  swift_retain(v20);
  swift_release(v21);
  *(_QWORD *)&v11[v14[7]] = *(_QWORD *)&v12[v14[7]];
  *(_DWORD *)&v11[v14[8]] = *(_DWORD *)&v12[v14[8]];
  v22 = v14[9];
  v23 = *(_QWORD *)&v12[v22];
  v24 = *(_QWORD *)&v11[v22];
  *(_QWORD *)&v11[v22] = v23;
  swift_retain(v23);
  swift_release(v24);
  *(_QWORD *)&v11[v14[10]] = *(_QWORD *)&v12[v14[10]];
  *(_QWORD *)&v11[v14[11]] = *(_QWORD *)&v12[v14[11]];
  *(_QWORD *)&v11[v14[12]] = *(_QWORD *)&v12[v14[12]];
  return a1;
}

_OWORD *sub_100020468(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  v9 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
  v10 = v9[5];
  v11 = &v6[v10];
  v12 = &v7[v10];
  v13 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  *(_QWORD *)&v6[v9[6]] = *(_QWORD *)&v7[v9[6]];
  *(_QWORD *)&v6[v9[7]] = *(_QWORD *)&v7[v9[7]];
  *(_DWORD *)&v6[v9[8]] = *(_DWORD *)&v7[v9[8]];
  *(_QWORD *)&v6[v9[9]] = *(_QWORD *)&v7[v9[9]];
  *(_QWORD *)&v6[v9[10]] = *(_QWORD *)&v7[v9[10]];
  *(_QWORD *)&v6[v9[11]] = *(_QWORD *)&v7[v9[11]];
  *(_QWORD *)&v6[v9[12]] = *(_QWORD *)&v7[v9[12]];
  return a1;
}

_QWORD *sub_100020558(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
  v15 = v14[5];
  v16 = &v11[v15];
  v17 = &v12[v15];
  v18 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = v14[6];
  v20 = *(_QWORD *)&v11[v19];
  *(_QWORD *)&v11[v19] = *(_QWORD *)&v12[v19];
  swift_release(v20);
  *(_QWORD *)&v11[v14[7]] = *(_QWORD *)&v12[v14[7]];
  *(_DWORD *)&v11[v14[8]] = *(_DWORD *)&v12[v14[8]];
  v21 = v14[9];
  v22 = *(_QWORD *)&v11[v21];
  *(_QWORD *)&v11[v21] = *(_QWORD *)&v12[v21];
  swift_release(v22);
  *(_QWORD *)&v11[v14[10]] = *(_QWORD *)&v12[v14[10]];
  *(_QWORD *)&v11[v14[11]] = *(_QWORD *)&v12[v14[11]];
  *(_QWORD *)&v11[v14[12]] = *(_QWORD *)&v12[v14[12]];
  return a1;
}

uint64_t sub_100020678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100020684);
}

uint64_t sub_100020684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EmptyStateView.ViewConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_100020700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002070C);
}

uint64_t sub_10002070C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EmptyStateView.ViewConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for LargeEmptyStateView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000A1690;
  if (!qword_1000A1690)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LargeEmptyStateView);
  return result;
}

uint64_t sub_1000207BC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10007FD48;
  v4[1] = &unk_10007FD48;
  result = type metadata accessor for EmptyStateView.ViewConfiguration(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100020830(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100083D74, 1);
}

uint64_t sub_100020840@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  char *v19;
  char *v20;
  uint64_t v22;

  v3 = sub_100005F78(&qword_1000A0FA8);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for EmptyStateView.ViewConfiguration(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for EmptyStateView(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v1;
  v12 = v1[1];
  v14 = v1[2];
  v15 = v1[3];
  v16 = type metadata accessor for LargeEmptyStateView(0);
  sub_1000209F8((uint64_t)v1 + *(int *)(v16 + 24), (uint64_t)v8);
  *v5 = swift_getKeyPath(&unk_10007FDB0);
  v17 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v5, v17, 0);
  KeyPath = swift_getKeyPath(&unk_10007FDE0);
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  v11[32] = 0;
  *(_QWORD *)v11 = KeyPath;
  *((_QWORD *)v11 + 1) = 0;
  sub_100020A48((uint64_t)v5, (uint64_t)&v11[v9[5]]);
  v19 = &v11[v9[6]];
  *(_QWORD *)v19 = v13;
  *((_QWORD *)v19 + 1) = v12;
  v20 = &v11[v9[7]];
  *(_QWORD *)v20 = v14;
  *((_QWORD *)v20 + 1) = v15;
  *((_QWORD *)v20 + 2) = 0x401C000000000000;
  sub_1000112F0((uint64_t)v8, (uint64_t)&v11[v9[8]], type metadata accessor for EmptyStateView.ViewConfiguration);
  sub_1000112F0((uint64_t)v11, a1, type metadata accessor for EmptyStateView);
  swift_bridgeObjectRetain(v12);
  return swift_bridgeObjectRetain(v15);
}

uint64_t sub_1000209F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EmptyStateView.ViewConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100020A48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F78(&qword_1000A0FA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100020A94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A16D0;
  if (!qword_1000A16D0)
  {
    v1 = type metadata accessor for EmptyStateView(255);
    result = swift_getWitnessTable(&unk_100082950, v1);
    atomic_store(result, (unint64_t *)&qword_1000A16D0);
  }
  return result;
}

uint64_t destroy for MediumWidgetView(uint64_t a1)
{
  sub_1000075DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  return swift_release(*(_QWORD *)(a1 + 104));
}

uint64_t initializeWithCopy for MediumWidgetView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  v13 = *(_QWORD *)(a2 + 104);
  v12 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v12;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_retain(v13);
  return a1;
}

uint64_t assignWithCopy for MediumWidgetView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  sub_1000075DC(v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 72);
  v16 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a2 + 96);
  v18 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a2 + 104);
  v20 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v19;
  swift_retain(v19);
  swift_release(v20);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

__n128 initializeWithTake for MediumWidgetView(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for MediumWidgetView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 32) = v4;
  sub_1000075DC(v5, v6, v7, v8, v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  v13 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release(v13);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for MediumWidgetView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MediumWidgetView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MediumWidgetView()
{
  return &type metadata for MediumWidgetView;
}

uint64_t sub_100020E4C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100083DD4, 1);
}

double sub_100020E5C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100020F24(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_1000A0D30, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000079C8, &qword_1000A0D38).n128_u64[0];
  return result;
}

double sub_100020EC0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100020F24(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&qword_1000A0D80, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000079C8, &qword_1000A0D68).n128_u64[0];
  return result;
}

__n128 sub_100020F24@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void (*a17)(uint64_t, uint64_t, uint64_t), uint64_t *a18)
{
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v34;
  double v35;
  double v36;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __n128 result;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  double v49;
  double v50;
  double v51;
  double v52;
  _OWORD v53[7];

  v19 = a9;
  v20 = a17;
  v21 = a18;
  v22 = a15;
  v23 = a14;
  v24 = a12;
  v25 = a10;
  v26 = a2 & 1;
  v27 = a1;
  if ((_DWORD)v26)
    v27 = -INFINITY;
  v28 = a4 & 1;
  v29 = a3;
  if ((_DWORD)v28)
    v29 = v27;
  v30 = a6 & 1;
  v31 = a8 & 1;
  v32 = a5;
  if ((a6 & 1) != 0)
    v32 = v29;
  if (v27 > v29 || v29 > v32)
    goto LABEL_22;
  v34 = a7;
  if ((_DWORD)v31)
    v34 = -INFINITY;
  v35 = a10;
  if ((a11 & 1) != 0)
    v35 = v34;
  v36 = a12;
  if ((a13 & 1) != 0)
    v36 = v35;
  if (v34 > v35 || v35 > v36)
  {
LABEL_22:
    v51 = a5;
    v52 = a7;
    v49 = a1;
    v50 = a3;
    v47 = v28;
    v48 = v26;
    v46 = v31;
    v39 = static os_log_type_t.fault.getter();
    v40 = (void *)static Log.runtimeIssuesLog.getter();
    v41 = v39;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v40, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v31 = v46;
    v28 = v47;
    v26 = v48;
    v23 = a14;
    v22 = a15;
    v24 = a12;
    v25 = a10;
    a1 = v49;
    a3 = v50;
    a5 = v51;
    a7 = v52;
    v21 = a18;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v53, *(_QWORD *)&a1, v26, *(_QWORD *)&a3, v28, *(_QWORD *)&a5, v30, *(_QWORD *)&a7, v31, *(_QWORD *)&v25, a11 & 1, *(_QWORD *)&v24, a13 & 1, v23, v22);
  v20(v18, v19, a16);
  v42 = v19 + *(int *)(sub_100005F78(v21) + 36);
  v43 = v53[5];
  *(_OWORD *)(v42 + 64) = v53[4];
  *(_OWORD *)(v42 + 80) = v43;
  *(_OWORD *)(v42 + 96) = v53[6];
  v44 = v53[1];
  *(_OWORD *)v42 = v53[0];
  *(_OWORD *)(v42 + 16) = v44;
  result = (__n128)v53[3];
  *(_OWORD *)(v42 + 32) = v53[2];
  *(__n128 *)(v42 + 48) = result;
  return result;
}

double sub_100021100@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100020F24(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_1000A10D0, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000079C8, &qword_1000A10D8).n128_u64[0];
  return result;
}

double sub_100021164@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100020F24(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)type metadata accessor for BookCoverView, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000078D4, &qword_1000A1130).n128_u64[0];
  return result;
}

__n128 sub_1000211C8@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __n128 result;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v16 = v15;
  v18 = a15;
  v19 = a12;
  v20 = a10;
  v21 = a2 & 1;
  v22 = a1;
  if ((_DWORD)v21)
    v22 = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = v22;
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (v22 > v24 || v24 > v27)
    goto LABEL_22;
  v29 = a7;
  if ((a8 & 1) != 0)
    v29 = -INFINITY;
  v30 = a10;
  if ((a11 & 1) != 0)
    v30 = v29;
  v31 = a12;
  if ((a13 & 1) != 0)
    v31 = v30;
  if (v29 > v30 || v30 > v31)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v42 = a3;
    v41 = a1;
    v40 = v21;
    v33 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a15;
    v21 = v40;
    a1 = v41;
    v20 = a10;
    a3 = v42;
    v19 = a12;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v21, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, *(_QWORD *)&a7, v26, *(_QWORD *)&v20, a11 & 1, *(_QWORD *)&v19, a13 & 1, a14, v18);
  v35 = sub_100005F78(&qword_1000A1750);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(a9, v16, v35);
  v36 = a9 + *(int *)(sub_100005F78(&qword_1000A1758) + 36);
  v37 = v45[5];
  *(_OWORD *)(v36 + 64) = v45[4];
  *(_OWORD *)(v36 + 80) = v37;
  *(_OWORD *)(v36 + 96) = v45[6];
  v38 = v45[1];
  *(_OWORD *)v36 = v45[0];
  *(_OWORD *)(v36 + 16) = v38;
  result = (__n128)v45[3];
  *(_OWORD *)(v36 + 32) = v45[2];
  *(__n128 *)(v36 + 48) = result;
  return result;
}

double sub_100021394@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100020F24(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_1000A1878, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000079C8, &qword_1000A1880).n128_u64[0];
  return result;
}

double sub_1000213F8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100020F24(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_1000A1888, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000079C8, &qword_1000A1890).n128_u64[0];
  return result;
}

double sub_10002145C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100020F24(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_1000A1898, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000079C8, &qword_1000A18A0).n128_u64[0];
  return result;
}

double sub_1000214C0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100020F24(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_1000A18A8, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000079C8, &qword_1000A18B0).n128_u64[0];
  return result;
}

double sub_100021524@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100020F24(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)type metadata accessor for TodayReadingGoalView, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000078D4, &qword_1000A1870).n128_u64[0];
  return result;
}

double sub_100021588@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, int a16)
{
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  double result;
  __int128 v37;
  unsigned int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  _OWORD v43[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v41 = a5;
    v42 = a7;
    v40 = a3;
    v39 = a1;
    v38 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v38;
    v19 = a10;
    a1 = v39;
    a3 = v40;
    v18 = a12;
    a5 = v41;
    a7 = v42;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v43, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v43[2];
  *(_OWORD *)(a9 + 56) = v43[3];
  v35 = v43[5];
  *(_OWORD *)(a9 + 72) = v43[4];
  *(_OWORD *)(a9 + 88) = v35;
  *(_OWORD *)(a9 + 104) = v43[6];
  result = *(double *)v43;
  v37 = v43[1];
  *(_OWORD *)(a9 + 8) = v43[0];
  *(_OWORD *)(a9 + 24) = v37;
  *(_DWORD *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v34;
  return result;
}

uint64_t sub_10002172C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjCClassFromMetadata;
  id v25;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v28 = *(_QWORD *)(v2 - 8);
  v29 = v2;
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v28 - v6;
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v28 - v13;
  v15 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = 0;
  v19 = *(_QWORD *)(v1 + 24);
  if (v19 >= 2)
  {
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(11, 1);
    v20._countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v20);
    v30 = v19;
    String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v30, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
    v21._countAndFlagsBits = 0x727473207961642DLL;
    v21._object = (void *)0xEB000000006B6165;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v21);
    v22 = String.LocalizationValue.init(stringInterpolation:)(v17);
    static Locale.current.getter(v22);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v23 = type metadata accessor for BundleFinder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v23);
    v25 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    static Locale.current.getter(v25);
    v27 = 2;
    v18 = String.init(localized:defaultValue:table:bundle:locale:comment:)("day streak", 10, 2, v12, 0, 0, v25, v5, "Current streak in days", 22, v27);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v29);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  return v18;
}

uint64_t sub_1000219A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;

  v2 = sub_100005F78(&qword_1000A09F0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v12 - v6;
  if ((sub_10005CB78() & 1) != 0)
    return sub_1000248DC(a1);
  URL.init(string:)(0xD000000000000024, 0x800000010007C170);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v7, 1, v9) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v7, v9);
  URL.init(string:)(0xD000000000000023, 0x800000010007BCE0);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v11)(v5, 1, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v5, v9);
    return sub_100007A0C((uint64_t)v7, &qword_1000A09F0);
  }
  return result;
}

uint64_t sub_100021B14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;

  v2 = sub_100005F78(&qword_1000A09F0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v12 - v6;
  if ((sub_10005CB78() & 1) != 0)
    return sub_100024A7C(a1);
  URL.init(string:)(0xD000000000000024, 0x800000010007C170);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v7, 1, v9) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v7, v9);
  URL.init(string:)(0xD000000000000023, 0x800000010007BCE0);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v11)(v5, 1, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v5, v9);
    return sub_100007A0C((uint64_t)v7, &qword_1000A09F0);
  }
  return result;
}

uint64_t sub_100021C84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;

  v2 = sub_100005F78(&qword_1000A09F0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v12 - v6;
  if ((sub_10005CB78() & 1) != 0)
    return sub_100024C1C(a1);
  URL.init(string:)(0xD000000000000024, 0x800000010007C170);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v7, 1, v9) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v7, v9);
  URL.init(string:)(0xD000000000000023, 0x800000010007BCE0);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v11)(v5, 1, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v5, v9);
    return sub_100007A0C((uint64_t)v7, &qword_1000A09F0);
  }
  return result;
}

uint64_t sub_100021DF4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void (*v26)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _OWORD v43[4];

  v42 = a2;
  v40 = type metadata accessor for LogoView(0);
  v3 = __chkstk_darwin(v40);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v41 = (uint64_t)&v37 - v6;
  v7 = sub_100005F78(&qword_1000A09F0);
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100005F78(&qword_1000A16F0);
  __chkstk_darwin(v37);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005F78(&qword_1000A16F8);
  v38 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v39 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v37 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v37 - v18;
  v20 = sub_10005CB78();
  if ((v20 & 1) != 0)
    v21 = static HorizontalAlignment.leading.getter(v20);
  else
    v21 = static HorizontalAlignment.center.getter(v20);
  *(_QWORD *)v11 = v21;
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 0;
  v22 = sub_100005F78(&qword_1000A1700);
  sub_100022194(a1, (uint64_t)&v11[*(int *)(v22 + 44)]);
  v23 = *(_OWORD *)(a1 + 56);
  v43[0] = *(_OWORD *)(a1 + 40);
  v43[1] = v23;
  v24 = *(_OWORD *)(a1 + 88);
  v43[2] = *(_OWORD *)(a1 + 72);
  v43[3] = v24;
  sub_100025260((uint64_t)v43);
  sub_100006AC8((uint64_t)v9);
  sub_100025294((uint64_t)v43);
  v25 = type metadata accessor for URL(0);
  v26 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v26(v9, 0, 1, v25);
  v27 = sub_100007F64(&qword_1000A1708, &qword_1000A16F0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.widgetURL(_:)(v9, v37, v27);
  sub_100007A0C((uint64_t)v9, &qword_1000A09F0);
  sub_100007A0C((uint64_t)v11, &qword_1000A16F0);
  v28 = v38;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v19, v17, v12);
  sub_100025260((uint64_t)v43);
  sub_100006AC8((uint64_t)v9);
  sub_100025294((uint64_t)v43);
  v26(v9, 0, 1, v25);
  KeyPath = swift_getKeyPath(&unk_10007FEF8);
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = 0;
  v5[32] = 0;
  *(_QWORD *)v5 = KeyPath;
  *((_QWORD *)v5 + 1) = 0;
  sub_100007984((uint64_t)v9, (uint64_t)&v5[*(int *)(v40 + 20)], &qword_1000A09F0);
  v30 = v41;
  sub_1000112F0((uint64_t)v5, v41, type metadata accessor for LogoView);
  v31 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  v32 = v39;
  v31(v39, v19, v12);
  sub_1000078D4(v30, (uint64_t)v5, type metadata accessor for LogoView);
  v33 = v42;
  v31(v42, v32, v12);
  v34 = sub_100005F78(&qword_1000A1710);
  sub_1000078D4((uint64_t)v5, (uint64_t)&v33[*(int *)(v34 + 48)], type metadata accessor for LogoView);
  sub_100007A48(v30, type metadata accessor for LogoView);
  v35 = *(void (**)(char *, uint64_t))(v28 + 8);
  v35(v19, v12);
  sub_100007A48((uint64_t)v5, type metadata accessor for LogoView);
  return ((uint64_t (*)(char *, uint64_t))v35)(v32, v12);
}

uint64_t sub_100022194@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  Swift::String v103;
  unint64_t v104;
  Swift::String v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t OpaqueTypeConformance2;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  Swift::String v121;
  unint64_t v122;
  Swift::String v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  _QWORD v164[4];
  _QWORD v165[2];
  uint64_t v166;
  unint64_t v167;
  _OWORD v168[3];
  _OWORD v169[2];
  char v170;
  _BYTE v171[40];
  _OWORD v172[5];

  v139 = a2;
  v140 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v155 = *(_QWORD *)(v3 - 8);
  v156 = v3;
  __chkstk_darwin(v3);
  v154 = (char *)&v136 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  __chkstk_darwin(v5);
  v144 = (uint64_t)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005F78(&qword_1000A1718);
  v148 = *(_QWORD *)(v7 - 8);
  v149 = v7;
  __chkstk_darwin(v7);
  v145 = (char *)&v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_100005F78(&qword_1000A1720);
  __chkstk_darwin(v147);
  v146 = (char *)&v136 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = sub_100005F78(&qword_1000A1728);
  __chkstk_darwin(v151);
  v150 = (uint64_t)&v136 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = sub_100005F78(&qword_1000A1730);
  __chkstk_darwin(v153);
  v152 = (uint64_t)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005F78(&qword_1000A1738);
  v136 = *(_QWORD *)(v12 - 8);
  v137 = v12;
  __chkstk_darwin(v12);
  v143 = (char *)&v136 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_100005F78(&qword_1000A1740);
  v14 = __chkstk_darwin(v161);
  v138 = (char *)&v136 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v163 = (char *)&v136 - v17;
  v18 = __chkstk_darwin(v16);
  v160 = (char *)&v136 - v19;
  v20 = __chkstk_darwin(v18);
  v159 = (char *)&v136 - v21;
  __chkstk_darwin(v20);
  v162 = (uint64_t)&v136 - v22;
  v157 = (char *)type metadata accessor for ContainerBackgroundPlacement(0);
  v141 = *((_QWORD *)v157 - 1);
  __chkstk_darwin(v157);
  v24 = (char *)&v136 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100005F78(&qword_1000A1748);
  __chkstk_darwin(v25);
  v27 = (char *)&v136 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = (char *)sub_100005F78(&qword_1000A1750);
  v142 = *((_QWORD *)v158 - 1);
  __chkstk_darwin(v158);
  v29 = (char *)&v136 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100005F78(&qword_1000A1758);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v136 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v136 - v35;
  *(_QWORD *)v27 = static VerticalAlignment.center.getter(v34);
  *((_QWORD *)v27 + 1) = 0;
  v27[16] = 1;
  v37 = sub_100005F78(&qword_1000A1760);
  v38 = sub_100022C50(a1, (uint64_t)&v27[*(int *)(v37 + 44)]);
  v39 = static ContainerBackgroundPlacement.widget.getter(v38);
  v40 = static Alignment.center.getter(v39);
  v42 = v41;
  v43 = sub_100007F64(&qword_1000A1768, &qword_1000A1748, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v44 = sub_1000252CC();
  View.containerBackground<A>(for:alignment:content:)(v24, v40, v42, WidgetReadingHistory.Day.readingTime.getter, 0, v25, &type metadata for GradientOverlayView, v43, v44);
  (*(void (**)(char *, char *))(v141 + 8))(v24, v157);
  v45 = sub_100007A0C((uint64_t)v27, &qword_1000A1748);
  v46 = static Alignment.center.getter(v45);
  v48 = sub_1000211C8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v33, 0.0, 1, INFINITY, 0, v46, v47);
  (*(void (**)(char *, char *, __n128))(v142 + 8))(v29, v158, v48);
  v157 = v36;
  v158 = v33;
  sub_100007984((uint64_t)v33, (uint64_t)v36, &qword_1000A1758);
  v49 = v140;
  v50 = *(_OWORD *)(v140 + 56);
  v172[0] = *(_OWORD *)(v140 + 40);
  v172[1] = v50;
  v51 = *(_OWORD *)(v140 + 88);
  v172[2] = *(_OWORD *)(v140 + 72);
  v172[3] = v51;
  sub_100025260((uint64_t)v172);
  v52 = v144;
  sub_100021B14(v144);
  sub_100025294((uint64_t)v172);
  v164[2] = v49;
  v53 = sub_100005F78(&qword_1000A1778);
  v54 = sub_100025318();
  v55 = v145;
  v56 = Link.init(destination:label:)(v52, sub_100025310, v164, v53, v54);
  LOBYTE(v52) = static Edge.Set.leading.getter(v56);
  v57 = *(_OWORD *)(v49 + 16);
  v169[0] = *(_OWORD *)v49;
  v169[1] = v57;
  v170 = *(_BYTE *)(v49 + 32);
  sub_100007984((uint64_t)v169, (uint64_t)v171, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v171, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v59 = v58;
  sub_10000DBE0((uint64_t)v169, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v60 = EdgeInsets.init(_all:)(v59);
  v62 = v61;
  v64 = v63;
  v66 = v65;
  v68 = v148;
  v67 = v149;
  v69 = (uint64_t)v146;
  (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v146, v55, v149);
  v70 = v69 + *(int *)(v147 + 36);
  *(_BYTE *)v70 = v52;
  *(double *)(v70 + 8) = v60;
  *(_QWORD *)(v70 + 16) = v62;
  *(_QWORD *)(v70 + 24) = v64;
  *(_QWORD *)(v70 + 32) = v66;
  *(_BYTE *)(v70 + 40) = 0;
  v71 = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v55, v67);
  LOBYTE(v52) = static Edge.Set.trailing.getter(v71);
  sub_10000DBE0((uint64_t)v171, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v73 = v72;
  sub_10000DBE0((uint64_t)v169, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v74 = EdgeInsets.init(_all:)(v73);
  v76 = v75;
  v78 = v77;
  v80 = v79;
  v81 = v150;
  sub_1000079C8(v69, v150, &qword_1000A1720);
  v82 = v81 + *(int *)(v151 + 36);
  *(_BYTE *)v82 = v52;
  *(double *)(v82 + 8) = v74;
  *(_QWORD *)(v82 + 16) = v76;
  *(_QWORD *)(v82 + 24) = v78;
  *(_QWORD *)(v82 + 32) = v80;
  *(_BYTE *)(v82 + 40) = 0;
  v83 = sub_100007A0C(v69, &qword_1000A1720);
  v84 = *(_QWORD *)(v49 + 112);
  v85 = static Alignment.center.getter(v83);
  _FrameLayout.init(width:height:alignment:)(v168, 0, 1, v84, 0, v85, v86);
  v87 = v152;
  sub_1000079C8(v81, v152, &qword_1000A1728);
  v88 = v153;
  v89 = (_OWORD *)(v87 + *(int *)(v153 + 36));
  v90 = v168[1];
  *v89 = v168[0];
  v89[1] = v90;
  v89[2] = v168[2];
  v91 = sub_100007A0C(v81, &qword_1000A1728);
  v92 = v154;
  static AccessibilityChildBehavior.combine.getter(v91);
  v93 = sub_10000E208(&qword_1000A17A0, &qword_1000A1730, (void (*)(void))sub_1000253B4);
  v94 = v143;
  v95 = v88;
  View.accessibilityElement(children:)(v92, v88, v93);
  (*(void (**)(char *, uint64_t))(v155 + 8))(v92, v156);
  sub_100007A0C(v87, &qword_1000A1730);
  v96 = sub_100052044();
  if (v97)
  {
    v98 = v96;
    v99 = v97;
    sub_100025260((uint64_t)v172);
    v100 = sub_10002172C();
    v102 = v101;
    sub_100025294((uint64_t)v172);
    if (v102)
    {
      v166 = v98;
      v167 = v99;
      swift_bridgeObjectRetain(v99);
      v103._countAndFlagsBits = 8236;
      v103._object = (void *)0xE200000000000000;
      String.append(_:)(v103);
      swift_bridgeObjectRelease(v99);
      v104 = v167;
      swift_bridgeObjectRetain(v167);
      v105._countAndFlagsBits = v100;
      v105._object = v102;
      String.append(_:)(v105);
      swift_bridgeObjectRelease(v102);
      swift_bridgeObjectRelease(v104);
      v98 = v166;
      v99 = v167;
    }
  }
  else
  {
    v98 = 0;
    v99 = 0xE000000000000000;
  }
  v106 = v137;
  v107 = (uint64_t)v138;
  v108 = v136;
  v166 = v98;
  v167 = v99;
  v165[0] = v95;
  v165[1] = v93;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v165, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v110 = sub_1000075E8();
  View.accessibilityLabel<A>(_:)(&v166, v106, &type metadata for String, OpaqueTypeConformance2, v110);
  swift_bridgeObjectRelease(v99);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v94, v106);
  v111 = sub_100005F78(&qword_1000A0A58);
  v112 = swift_allocObject(v111, 64, 7);
  *(_OWORD *)(v112 + 16) = xmmword_10007F170;
  *(_QWORD *)(v112 + 32) = sub_1000254B4(0x2073277961646F54, 0xEF676E6964616552, (uint64_t)"Today's Reading section title accessibility string (apostrophe is vertical)", 75);
  *(_QWORD *)(v112 + 40) = v113;
  v114 = sub_100052044();
  if (v115)
  {
    v116 = v114;
    v117 = v115;
    sub_100025260((uint64_t)v172);
    v118 = sub_10002172C();
    v120 = v119;
    sub_100025294((uint64_t)v172);
    if (v120)
    {
      v166 = v116;
      v167 = v117;
      swift_bridgeObjectRetain(v117);
      v121._countAndFlagsBits = 8236;
      v121._object = (void *)0xE200000000000000;
      String.append(_:)(v121);
      swift_bridgeObjectRelease(v117);
      v122 = v167;
      swift_bridgeObjectRetain(v167);
      v123._countAndFlagsBits = v118;
      v123._object = v120;
      String.append(_:)(v123);
      swift_bridgeObjectRelease(v120);
      swift_bridgeObjectRelease(v122);
      v116 = v166;
      v117 = v167;
    }
  }
  else
  {
    v116 = 0;
    v117 = 0xE000000000000000;
  }
  v124 = v139;
  *(_QWORD *)(v112 + 48) = v116;
  *(_QWORD *)(v112 + 56) = v117;
  v126 = (uint64_t)v160;
  v125 = v161;
  v127 = (uint64_t)v163;
  ModifiedContent<>.accessibilityInputLabels<A>(_:)(v112, v161, &type metadata for String, v110);
  swift_bridgeObjectRelease(v112);
  v128 = sub_100007A0C(v127, &qword_1000A1740);
  static UnitPoint.center.getter(v128);
  v129 = v159;
  ModifiedContent<>.accessibilityActivationPoint(_:)(v125);
  sub_100007A0C(v126, &qword_1000A1740);
  v130 = (uint64_t)v129;
  v131 = v162;
  sub_100007984(v130, v162, &qword_1000A1740);
  v133 = (uint64_t)v157;
  v132 = (uint64_t)v158;
  sub_1000079C8((uint64_t)v157, (uint64_t)v158, &qword_1000A1758);
  sub_1000079C8(v131, v107, &qword_1000A1740);
  sub_1000079C8(v132, v124, &qword_1000A1758);
  v134 = sub_100005F78(&qword_1000A17C0);
  sub_1000079C8(v107, v124 + *(int *)(v134 + 48), &qword_1000A1740);
  sub_100007A0C(v131, &qword_1000A1740);
  sub_100007A0C(v133, &qword_1000A1758);
  sub_100007A0C(v107, &qword_1000A1740);
  return sub_100007A0C(v132, &qword_1000A1758);
}

uint64_t sub_100022C50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t KeyPath;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  double v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t OpaqueTypeConformance2;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  void *v110;
  void *v111;
  uint64_t v112;
  char *v113;
  char v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  _OWORD v185[3];
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  _QWORD v191[2];
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  uint64_t v200;
  char *v201;
  char v202;

  v4 = type metadata accessor for AccessibilityTraits(0);
  v171 = *(_QWORD *)(v4 - 8);
  v172 = v4;
  __chkstk_darwin(v4);
  v170 = (char *)&v146 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessibilityChildBehavior(0);
  v161 = *(_QWORD *)(v6 - 8);
  v162 = v6;
  __chkstk_darwin(v6);
  v160 = (char *)&v146 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = type metadata accessor for MediumEmptyStateView(0);
  __chkstk_darwin(v159);
  v9 = (uint64_t *)((char *)&v146 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100005F78(&qword_1000A17E8);
  v165 = *(_QWORD *)(v10 - 8);
  v166 = v10;
  __chkstk_darwin(v10);
  v163 = (char *)&v146 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005F78(&qword_1000A17F0);
  v13 = __chkstk_darwin(v12);
  v164 = (char *)&v146 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v168 = (char *)&v146 - v16;
  v17 = __chkstk_darwin(v15);
  v167 = (char *)&v146 - v18;
  __chkstk_darwin(v17);
  v169 = (char *)&v146 - v19;
  v20 = type metadata accessor for URL(0);
  __chkstk_darwin(v20);
  v148 = (uint64_t)&v146 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100005F78(&qword_1000A17F8);
  v151 = *(_QWORD *)(v22 - 8);
  v152 = v22;
  __chkstk_darwin(v22);
  v150 = (char *)&v146 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = sub_100005F78(&qword_1000A1800);
  v24 = __chkstk_darwin(v157);
  v149 = (char *)&v146 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v153 = (uint64_t)&v146 - v26;
  v154 = sub_100005F78(&qword_1000A1808);
  __chkstk_darwin(v154);
  v156 = (uint64_t)&v146 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = type metadata accessor for MediumOneBookView(0);
  __chkstk_darwin(v155);
  v29 = (char *)&v146 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_100005F78(&qword_1000A1810);
  __chkstk_darwin(v173);
  v158 = (char *)&v146 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_100005F78(&qword_1000A1818);
  __chkstk_darwin(v175);
  v32 = (char *)&v146 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100005F78(&qword_1000A1820);
  __chkstk_darwin(v33);
  v35 = (char *)&v146 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100005F78(&qword_1000A1828);
  result = __chkstk_darwin(v36);
  v39 = (char *)&v146 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(_QWORD *)(a1 + 72);
  v41 = *(_QWORD *)(v40 + 16);
  v177 = v12;
  v178 = a2;
  v176 = result;
  v174 = v39;
  if (v41 < 2)
  {
    v146 = v33;
    v147 = v32;
    if (v41)
    {
      v68 = *(_QWORD *)(v40 + 64);
      v67 = *(_QWORD *)(v40 + 72);
      if (v68 == 0xD000000000000023 && v67 == 0x800000010007BBB0
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v40 + 64), *(_QWORD *)(v40 + 72), 0xD000000000000023, 0x800000010007BBB0, 0) & 1) != 0)
      {
        *v9 = sub_100007980();
        v9[1] = v69;
        v70 = v159;
        v71 = (char *)v9 + *(int *)(v159 + 20);
        v72 = static Font.subheadline.getter();
        v73 = static Font.Weight.bold.getter();
        v74 = static HierarchicalShapeStyle.tertiary.getter();
        v75 = ((uint64_t (*)(void))static Color.white.getter)();
        v76 = Color.opacity(_:)(0.2);
        swift_release(v75);
        v77 = enum case for ColorScheme.dark(_:);
        v78 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 104))(v71, v77, v78);
        v79 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
        v80 = &v71[v79[5]];
        v81 = enum case for BlendMode.plusLighter(_:);
        v82 = type metadata accessor for BlendMode(0);
        v83 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 104))(v80, v81, v82);
        *(_QWORD *)&v71[v79[6]] = v72;
        *(double *)&v71[v79[7]] = v73;
        *(_DWORD *)&v71[v79[8]] = v74;
        *(_QWORD *)&v71[v79[9]] = v76;
        *(_QWORD *)&v71[v79[10]] = 0x3FE570A3D70A3D71;
        *(_QWORD *)&v71[v79[11]] = 0x4018000000000000;
        *(_QWORD *)&v71[v79[12]] = 0x4030000000000000;
        v84 = v160;
        static AccessibilityChildBehavior.combine.getter(v83);
        v85 = sub_100003DCC(&qword_1000A1868, type metadata accessor for MediumEmptyStateView, (uint64_t)&unk_100083710);
        v86 = v163;
        View.accessibilityElement(children:)(v84, v70, v85);
        (*(void (**)(char *, uint64_t))(v161 + 8))(v84, v162);
        sub_100007A48((uint64_t)v9, type metadata accessor for MediumEmptyStateView);
        v87 = sub_100007980();
        v89 = v88;
        *(_QWORD *)&v179 = v87;
        *((_QWORD *)&v179 + 1) = v88;
        v192 = v70;
        v193 = v85;
        OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v192, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
        v91 = sub_1000075E8();
        v92 = (uint64_t)v164;
        v93 = v166;
        View.accessibilityLabel<A>(_:)(&v179, v166, &type metadata for String, OpaqueTypeConformance2, v91);
        swift_bridgeObjectRelease(v89);
        v94 = (*(uint64_t (**)(char *, uint64_t))(v165 + 8))(v86, v93);
        v95 = v170;
        static AccessibilityTraits.isButton.getter(v94);
        v96 = (uint64_t)v168;
        v97 = v177;
        ModifiedContent<>.accessibilityAddTraits(_:)(v95, v177);
        (*(void (**)(char *, uint64_t))(v171 + 8))(v95, v172);
        v98 = sub_100007A0C(v92, &qword_1000A17F0);
        v99 = sub_100007C4C(v98);
        v100 = (uint64_t)v167;
        ModifiedContent<>.accessibilityInputLabels<A>(_:)(v99, v97, &type metadata for String, v91);
        swift_bridgeObjectRelease(v99);
        sub_100007A0C(v96, &qword_1000A17F0);
        v101 = (uint64_t)v169;
        sub_100007984(v100, (uint64_t)v169, &qword_1000A17F0);
        v102 = (uint64_t)v147;
        sub_1000079C8(v101, (uint64_t)v147, &qword_1000A17F0);
        swift_storeEnumTagMultiPayload(v102, v175, 1);
        v103 = sub_1000257F4();
        v104 = sub_100025860();
        _ConditionalContent<>.init(storage:)(v102, v176, v97, v103, v104);
        v105 = v101;
        v106 = &qword_1000A17F0;
      }
      else
      {
        v107 = *(_QWORD *)(v40 + 40);
        v108 = *(_QWORD *)(v40 + 48);
        v109 = *(_BYTE *)(v40 + 56);
        v110 = *(void **)(v40 + 80);
        v111 = *(void **)(v40 + 88);
        v112 = *(_QWORD *)(v40 + 96);
        v113 = *(char **)(v40 + 104);
        v114 = *(_BYTE *)(v40 + 112);
        v192 = *(_QWORD *)(v40 + 32);
        v193 = v107;
        v194 = v108;
        v195 = v109;
        v196 = v68;
        v197 = v67;
        v198 = v110;
        v199 = v111;
        v200 = v112;
        v201 = v113;
        v202 = v114;
        *(_QWORD *)&v179 = v192;
        *((_QWORD *)&v179 + 1) = v107;
        *(_QWORD *)&v180 = v108;
        BYTE8(v180) = v109;
        *(_QWORD *)&v181 = v68;
        *((_QWORD *)&v181 + 1) = v67;
        *(_QWORD *)&v182 = v110;
        *((_QWORD *)&v182 + 1) = v111;
        *(_QWORD *)&v183 = v112;
        *((_QWORD *)&v183 + 1) = v113;
        LOBYTE(v184) = v114;
        v171 = v107;
        swift_bridgeObjectRetain(v107);
        v172 = v67;
        swift_bridgeObjectRetain(v67);
        v115 = v110;
        v169 = v111;
        v170 = v113;
        swift_bridgeObjectRetain(v113);
        if ((sub_100013C4C() & 1) != 0)
        {
          sub_10002394C((uint64_t)v29);
          v116 = v156;
          sub_1000078D4((uint64_t)v29, v156, type metadata accessor for MediumOneBookView);
          swift_storeEnumTagMultiPayload(v116, v154, 0);
          v117 = sub_100003DCC(&qword_1000A1830, type metadata accessor for MediumOneBookView, (uint64_t)&unk_100082ED0);
          v118 = sub_100025690();
          v119 = (uint64_t)v158;
          _ConditionalContent<>.init(storage:)(v116, v155, v157, v117, v118);
          sub_100007A48((uint64_t)v29, type metadata accessor for MediumOneBookView);
        }
        else
        {
          v120 = v115;
          v121 = v148;
          v122 = sub_100023AC4(v148);
          __chkstk_darwin(v122);
          *(&v146 - 2) = a1;
          v123 = sub_100003DCC(&qword_1000A1830, type metadata accessor for MediumOneBookView, (uint64_t)&unk_100082ED0);
          v124 = v150;
          v125 = v155;
          Link.init(destination:label:)(v121, sub_100025670, &v146 - 4, v155, v123);
          v126 = sub_100051294(0);
          v128 = v127;
          v191[0] = v126;
          v191[1] = v127;
          v129 = sub_100007F64(&qword_1000A1838, &qword_1000A17F8, (uint64_t)&protocol conformance descriptor for Link<A>);
          v130 = sub_1000075E8();
          v131 = v149;
          v132 = v152;
          View.accessibilityLabel<A>(_:)(v191, v152, &type metadata for String, v129, v130);
          swift_bridgeObjectRelease(v128);
          (*(void (**)(char *, uint64_t))(v151 + 8))(v124, v132);
          v133 = (uint64_t)v131;
          v115 = v120;
          v134 = v153;
          sub_100007984(v133, v153, &qword_1000A1800);
          v135 = v156;
          sub_1000079C8(v134, v156, &qword_1000A1800);
          swift_storeEnumTagMultiPayload(v135, v154, 1);
          v136 = sub_100025690();
          v119 = (uint64_t)v158;
          _ConditionalContent<>.init(storage:)(v135, v125, v157, v123, v136);
          sub_100007A0C(v134, &qword_1000A1800);
        }
        v137 = v175;
        v138 = v146;
        sub_1000079C8(v119, (uint64_t)v35, &qword_1000A1810);
        swift_storeEnumTagMultiPayload(v35, v138, 1);
        v139 = sub_10002572C();
        v140 = sub_100025770();
        v141 = (uint64_t)v174;
        _ConditionalContent<>.init(storage:)(v35, &type metadata for MediumTwoThreeBookView, v173, v139, v140);
        v142 = v119;
        v143 = (uint64_t)v147;
        sub_1000079C8(v141, (uint64_t)v147, &qword_1000A1828);
        swift_storeEnumTagMultiPayload(v143, v137, 0);
        v144 = sub_1000257F4();
        v145 = sub_100025860();
        _ConditionalContent<>.init(storage:)(v143, v176, v177, v144, v145);
        swift_bridgeObjectRelease(v170);

        swift_bridgeObjectRelease(v172);
        swift_bridgeObjectRelease(v171);
        sub_100007A0C(v141, &qword_1000A1828);
        v105 = v142;
        v106 = &qword_1000A1810;
      }
      return sub_100007A0C(v105, v106);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v42 = *(_QWORD *)(a1 + 96);
    v172 = *(_QWORD *)(a1 + 88);
    LODWORD(v171) = *(unsigned __int8 *)(a1 + 80);
    v170 = *(char **)(a1 + 64);
    v43 = *(_BYTE *)(a1 + 56);
    v44 = *(_QWORD *)(a1 + 48);
    v45 = *(_QWORD *)(a1 + 40);
    KeyPath = swift_getKeyPath(&unk_10007FEF8);
    swift_bridgeObjectRetain(v42);
    v47 = swift_bridgeObjectRetain(v40);
    v48 = static Color.white.getter(v47);
    v49 = static Font.Weight.semibold.getter(v48);
    v51 = static Font.caption2.getter(v50);
    v179 = (unint64_t)KeyPath;
    v180 = 0uLL;
    LOBYTE(v181) = 0;
    *((_QWORD *)&v181 + 1) = v45;
    *(_QWORD *)&v182 = v44;
    BYTE8(v182) = v43;
    *(_QWORD *)&v183 = v170;
    *((_QWORD *)&v183 + 1) = v40;
    LOBYTE(v184) = v171;
    *((_QWORD *)&v184 + 1) = v172;
    *(_QWORD *)&v185[0] = v42;
    *(_OWORD *)((char *)v185 + 8) = xmmword_10007FE10;
    *(_OWORD *)((char *)&v185[1] + 8) = xmmword_10007FE20;
    *((_QWORD *)&v185[2] + 1) = v48;
    *(double *)&v186 = v49;
    *((_QWORD *)&v186 + 1) = 3;
    v187 = xmmword_10007FE30;
    v188 = xmmword_10007FE40;
    v189 = xmmword_10007FE50;
    v190 = v51;
    v52 = v181;
    v53 = v182;
    v54 = v184;
    *((_OWORD *)v35 + 4) = v183;
    *((_OWORD *)v35 + 5) = v54;
    *((_OWORD *)v35 + 2) = v52;
    *((_OWORD *)v35 + 3) = v53;
    v55 = v185[0];
    v56 = v185[1];
    v57 = v186;
    *((_OWORD *)v35 + 8) = v185[2];
    *((_OWORD *)v35 + 9) = v57;
    *((_OWORD *)v35 + 6) = v55;
    *((_OWORD *)v35 + 7) = v56;
    v58 = v187;
    v59 = v188;
    v60 = v189;
    *((_QWORD *)v35 + 26) = v51;
    *((_OWORD *)v35 + 11) = v59;
    *((_OWORD *)v35 + 12) = v60;
    *((_OWORD *)v35 + 10) = v58;
    v61 = v180;
    *(_OWORD *)v35 = v179;
    *((_OWORD *)v35 + 1) = v61;
    swift_storeEnumTagMultiPayload(v35, v33, 0);
    sub_100025920((uint64_t)&v179);
    v62 = sub_10002572C();
    v63 = sub_100025770();
    v64 = (uint64_t)v174;
    _ConditionalContent<>.init(storage:)(v35, &type metadata for MediumTwoThreeBookView, v173, v62, v63);
    sub_1000079C8(v64, (uint64_t)v32, &qword_1000A1828);
    swift_storeEnumTagMultiPayload(v32, v175, 0);
    v65 = sub_1000257F4();
    v66 = sub_100025860();
    _ConditionalContent<>.init(storage:)(v32, v176, v177, v65, v66);
    sub_100007A0C(v64, &qword_1000A1828);
    return sub_100025994((uint64_t)&v179);
  }
  return result;
}

uint64_t sub_10002394C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  char v13;
  id v14;
  id v15;
  uint64_t KeyPath;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  __int128 v25;
  __int128 v26;

  v3 = (_OWORD *)(v1 + 40);
  v4 = *(_OWORD *)(v1 + 88);
  v25 = *(_OWORD *)(v1 + 72);
  v26 = v4;
  v5 = *(_OWORD *)(v1 + 56);
  v24[0] = *(_OWORD *)(v1 + 40);
  v24[1] = v5;
  if (*(_QWORD *)(v25 + 16))
  {
    v6 = *(_QWORD *)(v25 + 40);
    v22 = *(_QWORD *)(v25 + 48);
    v23 = *(_QWORD *)(v25 + 32);
    v7 = *(_BYTE *)(v25 + 56);
    v9 = *(_QWORD *)(v25 + 64);
    v8 = *(_QWORD *)(v25 + 72);
    v11 = *(void **)(v25 + 80);
    v10 = *(void **)(v25 + 88);
    v12 = *(_QWORD *)(v25 + 104);
    v21 = *(_QWORD *)(v25 + 96);
    v13 = *(_BYTE *)(v25 + 112);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v8);
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v6 = 0;
    v21 = 0;
    v12 = 0;
    v13 = 0;
    v11 = (void *)BDSCloudAssetTypeStoreEbook;
    v10 = (void *)BDSLibraryContentAssetTypeUnknown;
    v8 = 0x800000010007BBB0;
    v9 = 0xD000000000000023;
    v7 = 1;
  }
  v14 = v11;
  v15 = v10;
  KeyPath = swift_getKeyPath(&unk_10007FEF8);
  v17 = v3[1];
  *(_OWORD *)(a1 + 40) = *v3;
  *(_OWORD *)(a1 + 56) = v17;
  v18 = v3[3];
  *(_OWORD *)(a1 + 72) = v3[2];
  *(_QWORD *)a1 = KeyPath;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 88) = v18;
  *(_QWORD *)(a1 + 104) = v23;
  *(_QWORD *)(a1 + 112) = v6;
  *(_QWORD *)(a1 + 120) = v22;
  *(_BYTE *)(a1 + 128) = v7;
  *(_QWORD *)(a1 + 136) = v9;
  *(_QWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 152) = v11;
  *(_QWORD *)(a1 + 160) = v15;
  *(_QWORD *)(a1 + 168) = v21;
  *(_QWORD *)(a1 + 176) = v12;
  *(_BYTE *)(a1 + 184) = v13;
  v19 = (_OWORD *)(a1 + *(int *)(type metadata accessor for MediumOneBookView(0) + 28));
  sub_100025260((uint64_t)v24);
  return sub_10006DBF0(v19);
}

uint64_t sub_100023AC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  __int128 v20;
  _OWORD v21[2];
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v2 = *(_OWORD *)(v1 + 88);
  v22 = *(_OWORD *)(v1 + 72);
  v23 = v2;
  v3 = *(_OWORD *)(v1 + 56);
  v21[0] = *(_OWORD *)(v1 + 40);
  v21[1] = v3;
  if (*(_QWORD *)(v22 + 16))
  {
    v4 = *(_QWORD *)(v22 + 32);
    v5 = *(_BYTE *)(v22 + 56);
    v6 = *(_QWORD *)(v22 + 64);
    v7 = *(_QWORD *)(v22 + 72);
    v9 = *(void **)(v22 + 80);
    v8 = *(void **)(v22 + 88);
    v11 = *(_QWORD *)(v22 + 96);
    v10 = *(_QWORD *)(v22 + 104);
    v12 = *(_BYTE *)(v22 + 112);
    v20 = *(_OWORD *)(v22 + 40);
    v13 = *(_QWORD *)(v22 + 40);
    swift_bridgeObjectRetain(v10);
    v14 = v13;
    v15 = v4;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v15 = 0;
    v11 = 0;
    v10 = 0;
    v12 = 0;
    v9 = (void *)BDSCloudAssetTypeStoreEbook;
    v8 = (void *)BDSLibraryContentAssetTypeUnknown;
    v7 = 0x800000010007BBB0;
    v20 = 0u;
    v6 = 0xD000000000000023;
    v5 = 1;
  }
  v16 = v9;
  v17 = v8;
  v24 = v15;
  v25 = v20;
  v26 = v5;
  v27 = v6;
  v28 = v7;
  v29 = v9;
  v30 = v17;
  v31 = v11;
  v32 = v10;
  v33 = v12;
  sub_100025260((uint64_t)v21);
  sub_10000655C((uint64_t)&v24, a1);

  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v10);
  return sub_100025294((uint64_t)v21);
}

uint64_t sub_100023C30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;

  v4 = sub_100005F78(&qword_1000A1798);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v32 - v8;
  v10 = sub_100005F78(&qword_1000A17C8);
  __chkstk_darwin(v10);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MediumReadingGoalView(0);
  __chkstk_darwin(v13);
  v15 = (_OWORD *)((char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((sub_10005CB78() & 1) != 0)
  {
    v16 = *(_OWORD *)(a1 + 56);
    v17 = *(_OWORD *)(a1 + 88);
    v34 = *(_OWORD *)(a1 + 72);
    v35 = v17;
    v33[0] = *(_OWORD *)(a1 + 40);
    v18 = v33[0];
    v33[1] = v16;
    v15[2] = v34;
    v15[3] = v17;
    *v15 = v18;
    v15[1] = v16;
    v19 = (uint64_t)v15 + *(int *)(v13 + 20);
    sub_100025260((uint64_t)v33);
    sub_10002C27C(v19);
    sub_1000078D4((uint64_t)v15, (uint64_t)v12, type metadata accessor for MediumReadingGoalView);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v20 = sub_100003DCC(&qword_1000A1788, type metadata accessor for MediumReadingGoalView, (uint64_t)&unk_1000800E0);
    v21 = sub_100007F64(&qword_1000A1790, &qword_1000A1798, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    _ConditionalContent<>.init(storage:)(v12, v13, v4, v20, v21);
    return sub_100007A48((uint64_t)v15, type metadata accessor for MediumReadingGoalView);
  }
  else
  {
    v32[1] = a2;
    v23 = static Axis.Set.horizontal.getter();
    v24 = v23;
    v25 = static Axis.Set.vertical.getter(v23);
    v26 = Axis.Set.init(rawValue:)(0);
    v27 = Axis.Set.init(rawValue:)(v26);
    if (Axis.Set.init(rawValue:)(v27 & v24) != v24)
      v26 = Axis.Set.init(rawValue:)(v26 | v24);
    v28 = Axis.Set.init(rawValue:)(v26);
    if (Axis.Set.init(rawValue:)(v28 & v25) != v25)
      LOBYTE(v26) = Axis.Set.init(rawValue:)(v26 | v25);
    *v7 = v26;
    v29 = sub_100005F78(&qword_1000A17D0);
    sub_100023F34(a1, (uint64_t)&v7[*(int *)(v29 + 44)]);
    sub_100007984((uint64_t)v7, (uint64_t)v9, &qword_1000A1798);
    sub_1000079C8((uint64_t)v9, (uint64_t)v12, &qword_1000A1798);
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    v30 = sub_100003DCC(&qword_1000A1788, type metadata accessor for MediumReadingGoalView, (uint64_t)&unk_1000800E0);
    v31 = sub_100007F64(&qword_1000A1790, &qword_1000A1798, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    _ConditionalContent<>.init(storage:)(v12, v13, v4, v30, v31);
    return sub_100007A0C((uint64_t)v9, &qword_1000A1798);
  }
}

uint64_t sub_100023F34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v31 = a2;
  v3 = (int *)type metadata accessor for LabelView(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v30 - v7);
  v9 = sub_100005F78(&qword_1000A17D8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v30 - v13;
  v15 = sub_1000254B4(0xD000000000000029, 0x800000010007C110, (uint64_t)"Turn on Reading Goals instruction", 33);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 104);
  *v8 = swift_getKeyPath(&unk_10007FEC8);
  v19 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v8, v19, 0);
  v20 = (_QWORD *)((char *)v8 + v3[5]);
  *v20 = v15;
  v20[1] = v17;
  *(_QWORD *)((char *)v8 + v3[6]) = v18;
  v21 = (char *)v8 + v3[7];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  *((_WORD *)v21 + 8) = 256;
  sub_1000078D4((uint64_t)v8, (uint64_t)v12, type metadata accessor for LabelView);
  *(_WORD *)&v12[*(int *)(v9 + 36)] = 257;
  swift_retain(v18);
  sub_100007A48((uint64_t)v8, type metadata accessor for LabelView);
  sub_100007984((uint64_t)v12, (uint64_t)v14, &qword_1000A17D8);
  v22 = sub_1000254B4(0xD000000000000021, 0x800000010007C0A0, (uint64_t)"Turn on Reading Goals instruction - shorter version", 51);
  v24 = v23;
  *v8 = swift_getKeyPath(&unk_10007FEC8);
  swift_storeEnumTagMultiPayload(v8, v19, 0);
  v25 = (_QWORD *)((char *)v8 + v3[5]);
  *v25 = v22;
  v25[1] = v24;
  *(_QWORD *)((char *)v8 + v3[6]) = v18;
  v26 = (char *)v8 + v3[7];
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  *((_WORD *)v26 + 8) = 256;
  sub_1000079C8((uint64_t)v14, (uint64_t)v12, &qword_1000A17D8);
  sub_1000078D4((uint64_t)v8, (uint64_t)v6, type metadata accessor for LabelView);
  v27 = v31;
  sub_1000079C8((uint64_t)v12, v31, &qword_1000A17D8);
  v28 = sub_100005F78(&qword_1000A17E0);
  sub_1000078D4((uint64_t)v6, v27 + *(int *)(v28 + 48), type metadata accessor for LabelView);
  swift_retain(v18);
  sub_100007A48((uint64_t)v8, type metadata accessor for LabelView);
  sub_100007A0C((uint64_t)v14, &qword_1000A17D8);
  sub_100007A48((uint64_t)v6, type metadata accessor for LabelView);
  return sub_100007A0C((uint64_t)v12, &qword_1000A17D8);
}

uint64_t sub_100024214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  uint64_t *v16;
  unint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  void *v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  _OWORD v66[2];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _QWORD v70[2];

  v4 = sub_100005F78(&qword_1000A0998);
  __chkstk_darwin(v4);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BackgroundView(0);
  v8 = __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  v11 = (uint64_t **)((char *)&v54 - v9);
  v12 = *(_OWORD *)(a1 + 88);
  v67 = *(_OWORD *)(a1 + 72);
  v68 = v12;
  v13 = *(_OWORD *)(a1 + 56);
  v66[0] = *(_OWORD *)(a1 + 40);
  v66[1] = v13;
  v70[0] = v67;
  v14 = *(_QWORD *)(v67 + 16);
  if (!v14)
  {
LABEL_22:
    *v11 = swift_getKeyPath(&unk_10007FEC8);
    v42 = sub_100005F78(&qword_1000A09A0);
    swift_storeEnumTagMultiPayload(v11, v42, 0);
    *(_QWORD *)((char *)v11 + *(int *)(v7 + 20)) = 0;
    sub_1000078D4((uint64_t)v11, (uint64_t)v6, type metadata accessor for BackgroundView);
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    v43 = sub_100003DCC(&qword_1000A0988, type metadata accessor for BackgroundView, (uint64_t)&unk_100082DF0);
    v44 = v6;
    v45 = v7;
    v46 = v7;
    goto LABEL_27;
  }
  v54 = v10;
  v55 = v4;
  v56 = (char *)&v54 - v9;
  v57 = v7;
  v58 = v6;
  v59 = a2;
  v15 = (void *)BDSLibraryContentAssetTypeAudiobook;
  v60 = BDSCloudAssetTypeStoreAudiobook;
  v61 = &v68;
  v16 = (uint64_t *)(swift_bridgeObjectRetain(v67) + 64);
  v62 = v15;
  while (1)
  {
    v65 = *(v16 - 3);
    v17 = v16[1];
    v63 = *v16;
    v19 = (void *)v16[2];
    v18 = (void *)v16[3];
    v20 = v16[5];
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v23 = v22;
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v26 = v25;
    if (v21 == v24 && v23 == v25)
      v28 = 1;
    else
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v24, v25, 0);
    swift_bridgeObjectRetain(v20);
    v64 = v18;
    v29 = v15;
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v17);
    v30 = v19;

    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v26);
    if ((v28 & 1) == 0)
    {
      if (!v19)
        goto LABEL_3;
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v33 = v32;
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
      v36 = v34;
      if (v31 == v35 && v33 == v34)
      {
        swift_bridgeObjectRelease_n(v33, 2);
      }
      else
      {
        v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v35, v34, 0);
        swift_bridgeObjectRelease(v33);
        swift_bridgeObjectRelease(v36);
        if ((v37 & 1) == 0)
          goto LABEL_3;
      }
    }
    v69 = *v61;
    v38 = *((_QWORD *)&v69 + 1);
    if (!*((_QWORD *)&v69 + 1))
    {
LABEL_3:
      swift_bridgeObjectRelease(v20);

      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v65);
      goto LABEL_4;
    }
    v39 = v69;
    v40 = v63;
    if (v69 == __PAIR128__(v17, v63))
      break;
    v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v17, v69, *((_QWORD *)&v69 + 1), 0);
    swift_bridgeObjectRelease(v20);

    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v65);
    if ((v41 & 1) != 0)
      goto LABEL_24;
LABEL_4:
    v16 += 11;
    --v14;
    v15 = v62;
    if (!v14)
    {
      sub_100025230(v70);
      v6 = v58;
      v11 = v56;
      v7 = v57;
      v4 = v55;
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease(v20);

  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v65);
  v39 = v40;
LABEL_24:
  sub_100025230(v70);
  sub_100025260((uint64_t)v66);
  sub_100007444((uint64_t)&v69);
  if (qword_1000A0628 != -1)
    swift_once(&qword_1000A0628, sub_100013F18);
  sub_100006C68(qword_1000AA270, qword_1000AA288);
  v47 = sub_10003C8E4(v39, v38, 1);
  sub_10000746C((uint64_t)&v69);
  sub_100025294((uint64_t)v66);
  KeyPath = swift_getKeyPath(&unk_10007FEC8);
  v49 = (uint64_t)v54;
  *v54 = KeyPath;
  v50 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v49, v50, 0);
  v11 = v56;
  v51 = v57;
  *(_QWORD *)(v49 + *(int *)(v57 + 20)) = v47;
  sub_1000112F0(v49, (uint64_t)v11, type metadata accessor for BackgroundView);
  v52 = (uint64_t)v58;
  sub_1000078D4((uint64_t)v11, (uint64_t)v58, type metadata accessor for BackgroundView);
  swift_storeEnumTagMultiPayload(v52, v55, 0);
  v43 = sub_100003DCC(&qword_1000A0988, type metadata accessor for BackgroundView, (uint64_t)&unk_100082DF0);
  v44 = (char *)v52;
  v45 = v51;
  v46 = v51;
LABEL_27:
  _ConditionalContent<>.init(storage:)(v44, v45, v46, v43, v43);
  return sub_100007A48((uint64_t)v11, type metadata accessor for BackgroundView);
}

uint64_t sub_10002472C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v24[2];
  _BYTE v25[16];
  _OWORD *v26;
  _OWORD v27[7];
  uint64_t v28;

  v24[1] = a1;
  v2 = type metadata accessor for ContainerBackgroundPlacement(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005F78(&qword_1000A16D8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_OWORD *)(v1 + 80);
  v27[4] = *(_OWORD *)(v1 + 64);
  v27[5] = v10;
  v27[6] = *(_OWORD *)(v1 + 96);
  v28 = *(_QWORD *)(v1 + 112);
  v11 = *(_OWORD *)(v1 + 16);
  v27[0] = *(_OWORD *)v1;
  v27[1] = v11;
  v12 = *(_OWORD *)(v1 + 48);
  v27[2] = *(_OWORD *)(v1 + 32);
  v27[3] = v12;
  *(_QWORD *)v9 = static Alignment.center.getter(v7);
  *((_QWORD *)v9 + 1) = v13;
  v14 = sub_100005F78(&qword_1000A16E0);
  v15 = sub_100021DF4((uint64_t)v27, &v9[*(int *)(v14 + 44)]);
  v16 = static ContainerBackgroundPlacement.widget.getter(v15);
  v26 = v27;
  v17 = static Alignment.center.getter(v16);
  v19 = v18;
  v20 = sub_100005F78(&qword_1000A0980);
  v21 = sub_100007F64(&qword_1000A16E8, &qword_1000A16D8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v22 = sub_100006088();
  View.containerBackground<A>(for:alignment:content:)(v5, v17, v19, sub_1000248D4, v25, v6, v20, v21, v22);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return sub_100007A0C((uint64_t)v9, &qword_1000A16D8);
}

uint64_t sub_1000248D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100024214(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000248DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  void *object;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t result;
  unint64_t v15;
  unint64_t v16;

  v2 = sub_100005F78(&qword_1000A09F0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v15 - v6;
  v15 = 0;
  v16 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease(v16);
  v15 = 0xD000000000000026;
  v16 = 0x800000010007C1A0;
  v8._countAndFlagsBits = sub_100006EC4();
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10 = v16;
  URL.init(string:)(v15, v16);
  swift_bridgeObjectRelease(v10);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v7, 1, v11) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a1, v7, v11);
  URL.init(string:)(0xD000000000000023, 0x800000010007BCE0);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v13)(v5, 1, v11);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a1, v5, v11);
    return sub_100007A0C((uint64_t)v7, &qword_1000A09F0);
  }
  return result;
}

uint64_t sub_100024A7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  void *object;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t result;
  unint64_t v15;
  unint64_t v16;

  v2 = sub_100005F78(&qword_1000A09F0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v15 - v6;
  v15 = 0;
  v16 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease(v16);
  v15 = 0xD000000000000026;
  v16 = 0x800000010007C1A0;
  v8._countAndFlagsBits = sub_10000710C();
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10 = v16;
  URL.init(string:)(v15, v16);
  swift_bridgeObjectRelease(v10);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v7, 1, v11) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a1, v7, v11);
  URL.init(string:)(0xD000000000000023, 0x800000010007BCE0);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v13)(v5, 1, v11);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a1, v5, v11);
    return sub_100007A0C((uint64_t)v7, &qword_1000A09F0);
  }
  return result;
}

uint64_t sub_100024C1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  void *object;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t result;
  unint64_t v15;
  unint64_t v16;

  v2 = sub_100005F78(&qword_1000A09F0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v15 - v6;
  v15 = 0;
  v16 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease(v16);
  v15 = 0xD000000000000026;
  v16 = 0x800000010007C1A0;
  v8._countAndFlagsBits = sub_100006C8C();
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10 = v16;
  URL.init(string:)(v15, v16);
  swift_bridgeObjectRelease(v10);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v7, 1, v11) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a1, v7, v11);
  URL.init(string:)(0xD000000000000023, 0x800000010007BCE0);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v13)(v5, 1, v11);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a1, v5, v11);
    return sub_100007A0C((uint64_t)v7, &qword_1000A09F0);
  }
  return result;
}

double sub_100024DBC()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  double v15;

  v1 = type metadata accessor for EnvironmentValues(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)v0;
  if (v0[32] == 1)
    return *(double *)v0;
  v7 = swift_retain(*(_QWORD *)v0);
  v8 = static os_log_type_t.fault.getter(v7);
  v9 = static Log.runtimeIssuesLog.getter();
  v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v15 = *(double *)&v12;
    *(_DWORD *)v11 = 136315138;
    v13 = v11 + 4;
    v14 = sub_10005BD08(0x65736E4965676445, 0xEA00000000007374, (uint64_t *)&v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v13, v11 + 12);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v15, v4, v5);
  sub_10000DBE0((uint64_t)v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v15;
}

uint64_t sub_100024F98@<X0>(_QWORD *a1@<X8>)
{
  return sub_100024FF8(&qword_1000A18B8, (uint64_t (*)(_QWORD))&type metadata accessor for LayoutDirection, 0x694474756F79614CLL, 0xEF6E6F6974636572, a1);
}

uint64_t sub_100024FCC@<X0>(_QWORD *a1@<X8>)
{
  return sub_100024FF8(&qword_1000A09A0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010007C200, a1);
}

uint64_t sub_100024FF8@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v21;
  os_log_type_t v22;
  NSObject *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v31 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005F78(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000079C8(v9, (uint64_t)v17, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v15);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v19 = a2(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a5, v17, v19);
  }
  else
  {
    v21 = *v17;
    v22 = static os_log_type_t.fault.getter(EnumCaseMultiPayload);
    v23 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v23, v22))
    {
      v29 = a4;
      v24 = swift_slowAlloc(12, -1);
      v30 = a5;
      v25 = (uint8_t *)v24;
      v26 = swift_slowAlloc(32, -1);
      v33 = v26;
      *(_DWORD *)v25 = 136315138;
      v32 = sub_10005BD08(v31, v29, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v25 + 4, v25 + 12);
      _os_log_impl((void *)&_mh_execute_header, v23, v22, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      v27 = v25;
      a5 = v30;
      swift_slowDealloc(v27, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(a5, v14, v21);
    swift_release(v21);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

_QWORD *sub_100025230(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_100025260(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 56));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_100025294(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_1000252CC()
{
  unint64_t result;

  result = qword_1000A1770;
  if (!qword_1000A1770)
  {
    result = swift_getWitnessTable(&unk_100082A34, &type metadata for GradientOverlayView);
    atomic_store(result, (unint64_t *)&qword_1000A1770);
  }
  return result;
}

uint64_t sub_100025310@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100023C30(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100025318()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1780;
  if (!qword_1000A1780)
  {
    v1 = sub_100005FC0(&qword_1000A1778);
    sub_100003DCC(&qword_1000A1788, type metadata accessor for MediumReadingGoalView, (uint64_t)&unk_1000800E0);
    sub_100007F64(&qword_1000A1790, &qword_1000A1798, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1780);
  }
  return result;
}

uint64_t sub_1000253B4()
{
  return sub_10000E208(&qword_1000A17A8, &qword_1000A1728, (void (*)(void))sub_1000253D8);
}

unint64_t sub_1000253D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A17B0;
  if (!qword_1000A17B0)
  {
    v1 = sub_100005FC0(&qword_1000A1720);
    sub_100007F64(&qword_1000A17B8, &qword_1000A1718, (uint64_t)&protocol conformance descriptor for Link<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A17B0);
  }
  return result;
}

uint64_t sub_10002545C()
{
  return sub_1000254B4(0x2073277961646F54, 0xEF676E6964616552, (uint64_t)"Today's Reading section title accessibility string (apostrophe is vertical)", 75);
}

uint64_t sub_10002548C()
{
  return sub_1000254B4(0xD000000000000029, 0x800000010007C110, (uint64_t)"Turn on Reading Goals instruction", 33);
}

uint64_t sub_1000254B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjCClassFromMetadata;
  id v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a3;
  v28 = a4;
  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v26 - v11;
  v13 = type metadata accessor for String.LocalizationValue(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v26 - v18;
  v20 = String.LocalizationValue.init(stringLiteral:)(a1, a2);
  static Locale.current.getter(v20);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
  v21 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v21);
  v23 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  v24 = String.init(localized:table:bundle:locale:comment:)(v17, 0, 0, v23, v10, v27, v28, 2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  return v24;
}

uint64_t sub_100025670@<X0>(uint64_t a1@<X8>)
{
  return sub_10002394C(a1);
}

unint64_t sub_100025690()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1840;
  if (!qword_1000A1840)
  {
    v1 = sub_100005FC0(&qword_1000A1800);
    sub_100007F64(&qword_1000A1838, &qword_1000A17F8, (uint64_t)&protocol conformance descriptor for Link<A>);
    sub_100003DCC((unint64_t *)&qword_1000A0A38, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1840);
  }
  return result;
}

unint64_t sub_10002572C()
{
  unint64_t result;

  result = qword_1000A1848;
  if (!qword_1000A1848)
  {
    result = swift_getWitnessTable(&unk_100081A28, &type metadata for MediumTwoThreeBookView);
    atomic_store(result, (unint64_t *)&qword_1000A1848);
  }
  return result;
}

unint64_t sub_100025770()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1850;
  if (!qword_1000A1850)
  {
    v1 = sub_100005FC0(&qword_1000A1810);
    sub_100003DCC(&qword_1000A1830, type metadata accessor for MediumOneBookView, (uint64_t)&unk_100082ED0);
    sub_100025690();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1850);
  }
  return result;
}

unint64_t sub_1000257F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1858;
  if (!qword_1000A1858)
  {
    v1 = sub_100005FC0(&qword_1000A1828);
    sub_10002572C();
    sub_100025770();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1858);
  }
  return result;
}

unint64_t sub_100025860()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000A1860;
  if (!qword_1000A1860)
  {
    v1 = sub_100005FC0(&qword_1000A17F0);
    v2[0] = type metadata accessor for MediumEmptyStateView(255);
    v2[1] = sub_100003DCC(&qword_1000A1868, type metadata accessor for MediumEmptyStateView, (uint64_t)&unk_100083710);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100003DCC((unint64_t *)&qword_1000A0A38, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1860);
  }
  return result;
}

uint64_t sub_100025920(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 208);
  sub_10000BA78(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_100025994(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 208);
  sub_1000075DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_release(v5);
  swift_release(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for MediumWidgetView.ViewConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for MediumWidgetView.ViewConfiguration(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t *assignWithCopy for MediumWidgetView.ViewConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  return a1;
}

uint64_t *assignWithTake for MediumWidgetView.ViewConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for DailyReadingGoalsViewModel(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DailyReadingGoalsViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MediumWidgetView.ViewConfiguration()
{
  return &type metadata for MediumWidgetView.ViewConfiguration;
}

uint64_t sub_100025B58()
{
  _QWORD v1[4];

  v1[0] = sub_100005FC0(&qword_1000A16D8);
  v1[1] = sub_100005FC0(&qword_1000A0980);
  v1[2] = sub_100007F64(&qword_1000A16E8, &qword_1000A16D8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v1[3] = sub_100006088();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
}

uint64_t *sub_100025BE4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  void (*v48)(uint64_t *, uint64_t *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for BlendMode(0);
    v48 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v48(v4, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)v4 + v8) = *(uint64_t *)((char *)a2 + v8);
    v9 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v9) = *(uint64_t *)((char *)a2 + v9);
    v10 = a3[10];
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    v11 = (uint64_t *)((char *)v4 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    v13 = (int *)sub_100005F78(&qword_1000A0A50);
    v14 = *((_QWORD *)v13 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
    {
      v15 = type metadata accessor for CircularProgressView.Content(0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v46 = v14;
      v17 = v12[1];
      *v11 = *v12;
      v11[1] = v17;
      v18 = v13[12];
      v47 = (_QWORD *)((char *)v11 + v18);
      v19 = (_QWORD *)((char *)v12 + v18);
      v20 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v17);
      v45 = v20;
      if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
      {
        v21 = *v19;
        v22 = v47;
        *v47 = *v19;
        swift_retain(v21);
        v23 = 1;
      }
      else
      {
        v22 = v47;
        *(_DWORD *)v47 = *(_DWORD *)v19;
        v24 = sub_100005F78(&qword_1000A18C0);
        v48((uint64_t *)((char *)v47 + *(int *)(v24 + 48)), (uint64_t *)((char *)v19 + *(int *)(v24 + 48)), v7);
        v25 = *(int *)(v24 + 64);
        v26 = (char *)v47 + v25;
        v27 = (char *)v19 + v25;
        v28 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
        v23 = 0;
      }
      swift_storeEnumTagMultiPayload(v22, v45, v23);
      v29 = v13[16];
      v30 = (char *)v11 + v29;
      v31 = (char *)v12 + v29;
      v32 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
      v33 = v13[20];
      v34 = (char *)v11 + v33;
      v35 = (char *)v12 + v33;
      v36 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
      *(_QWORD *)((char *)v11 + v13[24]) = *(_QWORD *)((char *)v12 + v13[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v46 + 56))(v11, 0, 1, v13);
    }
    v37 = a3[11];
    v38 = a3[12];
    v39 = *(uint64_t *)((char *)a2 + v37);
    *(uint64_t *)((char *)v4 + v37) = v39;
    v40 = *(uint64_t *)((char *)a2 + v38);
    *(uint64_t *)((char *)v4 + v38) = v40;
    v41 = a3[13];
    v42 = a3[14];
    v16 = *(uint64_t *)((char *)a2 + v41);
    *(uint64_t *)((char *)v4 + v41) = v16;
    *(uint64_t *)((char *)v4 + v42) = *(uint64_t *)((char *)a2 + v42);
    v43 = a3[16];
    *(uint64_t *)((char *)v4 + a3[15]) = *(uint64_t *)((char *)a2 + a3[15]);
    *(uint64_t *)((char *)v4 + v43) = *(uint64_t *)((char *)a2 + v43);
    *(uint64_t *)((char *)v4 + a3[17]) = *(uint64_t *)((char *)a2 + a3[17]);
    swift_retain(v39);
    swift_retain(v40);
  }
  swift_retain(v16);
  return v4;
}

uint64_t sub_100025EB8(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for BlendMode(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + a2[10];
  v7 = (int *)sub_100005F78(&qword_1000A0A50);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
    v8 = (_QWORD *)(v6 + v7[12]);
    v9 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
    {
      swift_release(*v8);
    }
    else
    {
      v10 = sub_100005F78(&qword_1000A18C0);
      v5((uint64_t)v8 + *(int *)(v10 + 48), v4);
      v11 = (char *)v8 + *(int *)(v10 + 64);
      v12 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    }
    v13 = v6 + v7[16];
    v14 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    v15 = v6 + v7[20];
    v16 = type metadata accessor for Font.Design(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  }
  swift_release(*(_QWORD *)(a1 + a2[11]));
  swift_release(*(_QWORD *)(a1 + a2[12]));
  return swift_release(*(_QWORD *)(a1 + a2[13]));
}

uint64_t sub_100026028(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for BlendMode(0);
  v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v47(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  v12 = (int *)sub_100005F78(&qword_1000A0A50);
  v13 = *((_QWORD *)v12 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
  {
    v14 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v45 = v13;
    v15 = v11[1];
    *v10 = *v11;
    v10[1] = v15;
    v16 = v12[12];
    v46 = (_QWORD *)((char *)v10 + v16);
    v17 = (_QWORD *)((char *)v11 + v16);
    v18 = type metadata accessor for CircularProgressView.ColorStyle(0);
    swift_bridgeObjectRetain(v15);
    v44 = v18;
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = *v17;
      v20 = v46;
      *v46 = *v17;
      swift_retain(v19);
      v21 = 1;
    }
    else
    {
      v20 = v46;
      *(_DWORD *)v46 = *(_DWORD *)v17;
      v22 = sub_100005F78(&qword_1000A18C0);
      v47((uint64_t)v46 + *(int *)(v22 + 48), (uint64_t)v17 + *(int *)(v22 + 48), v6);
      v23 = *(int *)(v22 + 64);
      v24 = (char *)v46 + v23;
      v25 = (char *)v17 + v23;
      v26 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v44, v21);
    v27 = v12[16];
    v28 = (char *)v10 + v27;
    v29 = (char *)v11 + v27;
    v30 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
    v31 = v12[20];
    v32 = (char *)v10 + v31;
    v33 = (char *)v11 + v31;
    v34 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
    *(_QWORD *)((char *)v10 + v12[24]) = *(_QWORD *)((char *)v11 + v12[24]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v45 + 56))(v10, 0, 1, v12);
  }
  v35 = a3[11];
  v36 = a3[12];
  v37 = *(_QWORD *)(a2 + v35);
  *(_QWORD *)(a1 + v35) = v37;
  v38 = *(_QWORD *)(a2 + v36);
  *(_QWORD *)(a1 + v36) = v38;
  v39 = a3[13];
  v40 = a3[14];
  v41 = *(_QWORD *)(a2 + v39);
  *(_QWORD *)(a1 + v39) = v41;
  *(_QWORD *)(a1 + v40) = *(_QWORD *)(a2 + v40);
  v42 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  *(_QWORD *)(a1 + v42) = *(_QWORD *)(a2 + v42);
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  swift_retain(v37);
  swift_retain(v38);
  swift_retain(v41);
  return a1;
}

uint64_t sub_1000262D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  uint64_t (*v12)(_QWORD *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v6 = type metadata accessor for BlendMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v8 = a3[10];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = (int *)sub_100005F78(&qword_1000A0A50);
  v72 = *((_QWORD *)v11 - 1);
  v12 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v72 + 48);
  v13 = v12(v9, 1, v11);
  v14 = v12(v10, 1, v11);
  if (v13)
  {
    if (!v14)
    {
      v70 = v7;
      *v9 = *v10;
      v15 = v10[1];
      v9[1] = v15;
      v16 = v11[12];
      v68 = (_QWORD *)((char *)v9 + v16);
      v17 = (char *)v10 + v16;
      v18 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v15);
      v69 = v18;
      if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
      {
        v19 = *(_QWORD *)v17;
        v20 = v68;
        *v68 = *(_QWORD *)v17;
        swift_retain(v19);
        v21 = 1;
      }
      else
      {
        v20 = v68;
        *(_DWORD *)v68 = *(_DWORD *)v17;
        v31 = sub_100005F78(&qword_1000A18C0);
        (*(void (**)(char *, char *, uint64_t))(v70 + 16))((char *)v68 + *(int *)(v31 + 48), &v17[*(int *)(v31 + 48)], v6);
        v32 = *(int *)(v31 + 64);
        v33 = (char *)v68 + v32;
        v34 = &v17[v32];
        v35 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
        v21 = 0;
      }
      swift_storeEnumTagMultiPayload(v20, v69, v21);
      v36 = v11[16];
      v37 = (char *)v9 + v36;
      v38 = (char *)v10 + v36;
      v39 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
      v40 = v11[20];
      v41 = (char *)v9 + v40;
      v42 = (char *)v10 + v40;
      v43 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
      *(_QWORD *)((char *)v9 + v11[24]) = *(_QWORD *)((char *)v10 + v11[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v72 + 56))(v9, 0, 1, v11);
      goto LABEL_16;
    }
LABEL_7:
    v22 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_16;
  }
  if (v14)
  {
    sub_100007A0C((uint64_t)v9, &qword_1000A0A50);
    goto LABEL_7;
  }
  *v9 = *v10;
  v23 = v10[1];
  v24 = v9[1];
  v9[1] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  if (a1 != a2)
  {
    v71 = v7;
    v25 = v11[12];
    v26 = (char *)v9 + v25;
    v27 = (char *)v10 + v25;
    sub_100007A48((uint64_t)v9 + v25, type metadata accessor for CircularProgressView.ColorStyle);
    v28 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = *(_QWORD *)v27;
      *(_QWORD *)v26 = *(_QWORD *)v27;
      swift_retain(v29);
      v30 = 1;
    }
    else
    {
      *(_DWORD *)v26 = *(_DWORD *)v27;
      v73 = v28;
      v44 = sub_100005F78(&qword_1000A18C0);
      (*(void (**)(char *, char *, uint64_t))(v71 + 16))(&v26[*(int *)(v44 + 48)], &v27[*(int *)(v44 + 48)], v6);
      v45 = *(int *)(v44 + 64);
      v46 = &v26[v45];
      v47 = &v27[v45];
      v48 = type metadata accessor for ColorScheme(0);
      v49 = v47;
      v28 = v73;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v49, v48);
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v28, v30);
  }
  v50 = v11[16];
  v51 = (char *)v9 + v50;
  v52 = (char *)v10 + v50;
  v53 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 24))(v51, v52, v53);
  v54 = v11[20];
  v55 = (char *)v9 + v54;
  v56 = (char *)v10 + v54;
  v57 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 24))(v55, v56, v57);
  *(_QWORD *)((char *)v9 + v11[24]) = *(_QWORD *)((char *)v10 + v11[24]);
LABEL_16:
  v58 = a3[11];
  v59 = *(_QWORD *)(a2 + v58);
  v60 = *(_QWORD *)(a1 + v58);
  *(_QWORD *)(a1 + v58) = v59;
  swift_retain(v59);
  swift_release(v60);
  v61 = a3[12];
  v62 = *(_QWORD *)(a2 + v61);
  v63 = *(_QWORD *)(a1 + v61);
  *(_QWORD *)(a1 + v61) = v62;
  swift_retain(v62);
  swift_release(v63);
  v64 = a3[13];
  v65 = *(_QWORD *)(a2 + v64);
  v66 = *(_QWORD *)(a1 + v64);
  *(_QWORD *)(a1 + v64) = v65;
  swift_retain(v65);
  swift_release(v66);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_100026748(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;

  v6 = type metadata accessor for BlendMode(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v10 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v11 = (_OWORD *)(a1 + v10);
  v12 = (_OWORD *)(a2 + v10);
  v13 = (int *)sub_100005F78(&qword_1000A0A50);
  v14 = *((_QWORD *)v13 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    v15 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    *v11 = *v12;
    v16 = v13[12];
    v36 = (_DWORD *)((char *)v11 + v16);
    v17 = (_DWORD *)((char *)v12 + v16);
    v35 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v17, v35))
    {
      memcpy(v36, v17, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      *v36 = *v17;
      v34 = sub_100005F78(&qword_1000A18C0);
      v7((uint64_t)v36 + *(int *)(v34 + 48), (uint64_t)v17 + *(int *)(v34 + 48), v6);
      v18 = *(int *)(v34 + 64);
      v19 = (char *)v36 + v18;
      v20 = (char *)v17 + v18;
      v21 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      swift_storeEnumTagMultiPayload(v36, v35, 0);
    }
    v22 = v13[16];
    v23 = (char *)v11 + v22;
    v24 = (char *)v12 + v22;
    v25 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
    v26 = v13[20];
    v27 = (char *)v11 + v26;
    v28 = (char *)v12 + v26;
    v29 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
    *(_QWORD *)((char *)v11 + v13[24]) = *(_QWORD *)((char *)v12 + v13[24]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
  }
  v30 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v30) = *(_QWORD *)(a2 + v30);
  v31 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v31) = *(_QWORD *)(a2 + v31);
  v32 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  *(_QWORD *)(a1 + v32) = *(_QWORD *)(a2 + v32);
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_1000269CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v6 = type metadata accessor for BlendMode(0);
  v63 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  v12 = (int *)sub_100005F78(&qword_1000A0A50);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      *(_OWORD *)v10 = *(_OWORD *)v11;
      v17 = v12[12];
      v18 = (_DWORD *)((char *)v10 + v17);
      v19 = (_DWORD *)((char *)v11 + v17);
      v61 = type metadata accessor for CircularProgressView.ColorStyle(0);
      if (swift_getEnumCaseMultiPayload(v19, v61))
      {
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      }
      else
      {
        *v18 = *v19;
        v60 = sub_100005F78(&qword_1000A18C0);
        (*(void (**)(char *, char *, uint64_t))(v63 + 32))((char *)v18 + *(int *)(v60 + 48), (char *)v19 + *(int *)(v60 + 48), v6);
        v27 = *(int *)(v60 + 64);
        v28 = (char *)v18 + v27;
        v29 = (char *)v19 + v27;
        v30 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
        swift_storeEnumTagMultiPayload(v18, v61, 0);
      }
      v31 = v12[16];
      v32 = (char *)v10 + v31;
      v33 = (char *)v11 + v31;
      v34 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
      v35 = v12[20];
      v36 = (char *)v10 + v35;
      v37 = (char *)v11 + v35;
      v38 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
      *(_QWORD *)((char *)v10 + v12[24]) = *(_QWORD *)((char *)v11 + v12[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_15;
    }
LABEL_7:
    v20 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_15;
  }
  if (v16)
  {
    sub_100007A0C((uint64_t)v10, &qword_1000A0A50);
    goto LABEL_7;
  }
  v21 = v11[1];
  v22 = v10[1];
  *v10 = *v11;
  v10[1] = v21;
  swift_bridgeObjectRelease(v22);
  if (a1 != a2)
  {
    v23 = v12[12];
    v24 = (_DWORD *)((char *)v10 + v23);
    v25 = (_DWORD *)((char *)v11 + v23);
    sub_100007A48((uint64_t)v10 + v23, type metadata accessor for CircularProgressView.ColorStyle);
    v26 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v25, v26))
    {
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      *v24 = *v25;
      v62 = sub_100005F78(&qword_1000A18C0);
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))((char *)v24 + *(int *)(v62 + 48), (char *)v25 + *(int *)(v62 + 48), v6);
      v39 = *(int *)(v62 + 64);
      v40 = (char *)v24 + v39;
      v41 = (char *)v25 + v39;
      v42 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
      swift_storeEnumTagMultiPayload(v24, v26, 0);
    }
  }
  v43 = v12[16];
  v44 = (char *)v10 + v43;
  v45 = (char *)v11 + v43;
  v46 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  v47 = v12[20];
  v48 = (char *)v10 + v47;
  v49 = (char *)v11 + v47;
  v50 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 40))(v48, v49, v50);
  *(_QWORD *)((char *)v10 + v12[24]) = *(_QWORD *)((char *)v11 + v12[24]);
LABEL_15:
  v51 = a3[11];
  v52 = *(_QWORD *)(a1 + v51);
  *(_QWORD *)(a1 + v51) = *(_QWORD *)(a2 + v51);
  swift_release(v52);
  v53 = a3[12];
  v54 = *(_QWORD *)(a1 + v53);
  *(_QWORD *)(a1 + v53) = *(_QWORD *)(a2 + v53);
  swift_release(v54);
  v55 = a3[13];
  v56 = *(_QWORD *)(a1 + v55);
  *(_QWORD *)(a1 + v55) = *(_QWORD *)(a2 + v55);
  swift_release(v56);
  v57 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v57) = *(_QWORD *)(a2 + v57);
  v58 = a3[17];
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  *(_QWORD *)(a1 + v58) = *(_QWORD *)(a2 + v58);
  return a1;
}

uint64_t sub_100026DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100026DE8);
}

uint64_t sub_100026DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for BlendMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for CircularProgressView.Content(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 40);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 44));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100026E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100026E9C);
}

uint64_t sub_100026E9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for BlendMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for CircularProgressView.Content(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 40);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 44)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SmallReadingGoalView.ViewConfiguration(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A1920, (uint64_t)&nominal type descriptor for SmallReadingGoalView.ViewConfiguration);
}

uint64_t sub_100026F54(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[14];

  result = type metadata accessor for BlendMode(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[5] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for CircularProgressView.Content(319);
    if (v4 <= 0x3F)
    {
      v5[6] = *(_QWORD *)(result - 8) + 64;
      v5[7] = (char *)&value witness table for Builtin.NativeObject + 64;
      v5[8] = (char *)&value witness table for Builtin.NativeObject + 64;
      v5[9] = (char *)&value witness table for Builtin.NativeObject + 64;
      v5[10] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[11] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[12] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[13] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 14, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t sub_100027004(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  id v23;
  id v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void *v72;
  uint64_t v73;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v34 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v34 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v34);
  }
  else
  {
    v6 = *(_QWORD *)a2;
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_BYTE *)(a2 + 32);
    sub_10000BA78(*(_QWORD *)a2, v7, v8, v9, v10);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v9;
    *(_BYTE *)(a1 + 32) = v10;
    v12 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v12;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    v14 = *(_QWORD *)(a2 + 80);
    v13 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 88) = v13;
    v15 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v15;
    v16 = *(void **)(a2 + 120);
    v72 = *(void **)(a2 + 128);
    *(_QWORD *)(a1 + 120) = v16;
    *(_QWORD *)(a1 + 128) = v72;
    v69 = a3;
    v70 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v70;
    *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
    v17 = *(_QWORD *)(a2 + 168);
    v18 = *(int *)(a3 + 24);
    v19 = (char *)(a1 + v18);
    v20 = (char *)(a2 + v18);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = v17;
    v21 = type metadata accessor for BlendMode(0);
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    v23 = v16;
    v24 = v72;
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v17);
    v73 = v21;
    v25 = v21;
    v26 = v22;
    v22(v19, v20, v25);
    v27 = (int *)type metadata accessor for SmallReadingGoalView.ViewConfiguration(0);
    *(_QWORD *)&v19[v27[5]] = *(_QWORD *)&v20[v27[5]];
    *(_QWORD *)&v19[v27[6]] = *(_QWORD *)&v20[v27[6]];
    *(_QWORD *)&v19[v27[7]] = *(_QWORD *)&v20[v27[7]];
    *(_QWORD *)&v19[v27[8]] = *(_QWORD *)&v20[v27[8]];
    *(_QWORD *)&v19[v27[9]] = *(_QWORD *)&v20[v27[9]];
    v28 = v27[10];
    v29 = &v19[v28];
    v30 = &v20[v28];
    v31 = (int *)sub_100005F78(&qword_1000A0A50);
    v32 = *((_QWORD *)v31 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v32 + 48))(v30, 1, v31))
    {
      v33 = type metadata accessor for CircularProgressView.Content(0);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v68 = v32;
      v35 = *((_QWORD *)v30 + 1);
      *(_QWORD *)v29 = *(_QWORD *)v30;
      *((_QWORD *)v29 + 1) = v35;
      v36 = v31[12];
      v71 = &v29[v36];
      v65 = v26;
      v66 = (uint64_t *)&v30[v36];
      v37 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v35);
      v67 = v37;
      if (swift_getEnumCaseMultiPayload(v66, v37) == 1)
      {
        v38 = *v66;
        *(_QWORD *)v71 = *v66;
        swift_retain(v38);
        v39 = 1;
      }
      else
      {
        *(_DWORD *)v71 = *(_DWORD *)v66;
        v64 = sub_100005F78(&qword_1000A18C0);
        v65(&v71[*(int *)(v64 + 48)], (char *)v66 + *(int *)(v64 + 48), v73);
        v40 = *(int *)(v64 + 64);
        v41 = &v71[v40];
        v42 = (char *)v66 + v40;
        v43 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
        v39 = 0;
      }
      swift_storeEnumTagMultiPayload(v71, v67, v39);
      v44 = v31[16];
      v45 = &v29[v44];
      v46 = &v30[v44];
      v47 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
      v48 = v31[20];
      v49 = &v29[v48];
      v50 = &v30[v48];
      v51 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
      *(_QWORD *)&v29[v31[24]] = *(_QWORD *)&v30[v31[24]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v68 + 56))(v29, 0, 1, v31);
    }
    v52 = v27[11];
    v53 = *(_QWORD *)&v20[v52];
    *(_QWORD *)&v19[v52] = v53;
    v54 = v27[12];
    v55 = *(_QWORD *)&v20[v54];
    *(_QWORD *)&v19[v54] = v55;
    v56 = v27[13];
    v57 = *(_QWORD *)&v20[v56];
    *(_QWORD *)&v19[v56] = v57;
    *(_QWORD *)&v19[v27[14]] = *(_QWORD *)&v20[v27[14]];
    *(_QWORD *)&v19[v27[15]] = *(_QWORD *)&v20[v27[15]];
    *(_QWORD *)&v19[v27[16]] = *(_QWORD *)&v20[v27[16]];
    *(_QWORD *)&v19[v27[17]] = *(_QWORD *)&v20[v27[17]];
    v58 = *(int *)(v69 + 28);
    v59 = a1 + v58;
    v60 = a2 + v58;
    v61 = type metadata accessor for GeometryProxy(0);
    v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 16);
    swift_retain(v53);
    swift_retain(v55);
    swift_retain(v57);
    v62(v59, v60, v61);
  }
  return a1;
}

uint64_t sub_10002740C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_1000075DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 112));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 144));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 168));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for BlendMode(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = (int *)type metadata accessor for SmallReadingGoalView.ViewConfiguration(0);
  v8 = v4 + v7[10];
  v9 = (int *)sub_100005F78(&qword_1000A0A50);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v8, 1, v9))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
    v10 = (_QWORD *)(v8 + v9[12]);
    v11 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      swift_release(*v10);
    }
    else
    {
      v12 = sub_100005F78(&qword_1000A18C0);
      v6((uint64_t)v10 + *(int *)(v12 + 48), v5);
      v13 = (char *)v10 + *(int *)(v12 + 64);
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    }
    v15 = v8 + v9[16];
    v16 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
    v17 = v8 + v9[20];
    v18 = type metadata accessor for Font.Design(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  }
  swift_release(*(_QWORD *)(v4 + v7[11]));
  swift_release(*(_QWORD *)(v4 + v7[12]));
  swift_release(*(_QWORD *)(v4 + v7[13]));
  v19 = a1 + *(int *)(a2 + 28);
  v20 = type metadata accessor for GeometryProxy(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
}

uint64_t sub_100027600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  id v22;
  id v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void *v70;
  uint64_t v71;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v7, v8, v9, v10);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = v12;
  v14 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v14;
  v15 = *(void **)(a2 + 120);
  v70 = *(void **)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v15;
  *(_QWORD *)(a1 + 128) = v70;
  v67 = a3;
  v68 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v68;
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  v16 = *(_QWORD *)(a2 + 168);
  v17 = *(int *)(a3 + 24);
  v18 = (char *)(a1 + v17);
  v19 = (char *)(a2 + v17);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v16;
  v20 = type metadata accessor for BlendMode(0);
  v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  v22 = v15;
  v23 = v70;
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v16);
  v71 = v20;
  v24 = v20;
  v25 = v21;
  v21(v18, v19, v24);
  v26 = (int *)type metadata accessor for SmallReadingGoalView.ViewConfiguration(0);
  *(_QWORD *)&v18[v26[5]] = *(_QWORD *)&v19[v26[5]];
  *(_QWORD *)&v18[v26[6]] = *(_QWORD *)&v19[v26[6]];
  *(_QWORD *)&v18[v26[7]] = *(_QWORD *)&v19[v26[7]];
  *(_QWORD *)&v18[v26[8]] = *(_QWORD *)&v19[v26[8]];
  *(_QWORD *)&v18[v26[9]] = *(_QWORD *)&v19[v26[9]];
  v27 = v26[10];
  v28 = &v18[v27];
  v29 = &v19[v27];
  v30 = (int *)sub_100005F78(&qword_1000A0A50);
  v31 = *((_QWORD *)v30 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
  {
    v32 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v66 = v31;
    v33 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_QWORD *)v28 + 1) = v33;
    v34 = v30[12];
    v69 = &v28[v34];
    v63 = v25;
    v64 = (uint64_t *)&v29[v34];
    v35 = type metadata accessor for CircularProgressView.ColorStyle(0);
    swift_bridgeObjectRetain(v33);
    v65 = v35;
    if (swift_getEnumCaseMultiPayload(v64, v35) == 1)
    {
      v36 = *v64;
      *(_QWORD *)v69 = *v64;
      swift_retain(v36);
      v37 = 1;
    }
    else
    {
      *(_DWORD *)v69 = *(_DWORD *)v64;
      v62 = sub_100005F78(&qword_1000A18C0);
      v63(&v69[*(int *)(v62 + 48)], (char *)v64 + *(int *)(v62 + 48), v71);
      v38 = *(int *)(v62 + 64);
      v39 = &v69[v38];
      v40 = (char *)v64 + v38;
      v41 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
      v37 = 0;
    }
    swift_storeEnumTagMultiPayload(v69, v65, v37);
    v42 = v30[16];
    v43 = &v28[v42];
    v44 = &v29[v42];
    v45 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
    v46 = v30[20];
    v47 = &v28[v46];
    v48 = &v29[v46];
    v49 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
    *(_QWORD *)&v28[v30[24]] = *(_QWORD *)&v29[v30[24]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v66 + 56))(v28, 0, 1, v30);
  }
  v50 = v26[11];
  v51 = *(_QWORD *)&v19[v50];
  *(_QWORD *)&v18[v50] = v51;
  v52 = v26[12];
  v53 = *(_QWORD *)&v19[v52];
  *(_QWORD *)&v18[v52] = v53;
  v54 = v26[13];
  v55 = *(_QWORD *)&v19[v54];
  *(_QWORD *)&v18[v54] = v55;
  *(_QWORD *)&v18[v26[14]] = *(_QWORD *)&v19[v26[14]];
  *(_QWORD *)&v18[v26[15]] = *(_QWORD *)&v19[v26[15]];
  *(_QWORD *)&v18[v26[16]] = *(_QWORD *)&v19[v26[16]];
  *(_QWORD *)&v18[v26[17]] = *(_QWORD *)&v19[v26[17]];
  v56 = *(int *)(v67 + 28);
  v57 = a1 + v56;
  v58 = a2 + v56;
  v59 = type metadata accessor for GeometryProxy(0);
  v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 16);
  swift_retain(v51);
  swift_retain(v53);
  swift_retain(v55);
  v60(v57, v58, v59);
  return a1;
}

uint64_t sub_1000279DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  _QWORD *v42;
  int v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int *v108;
  uint64_t v109;
  char *__src;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v7, v8, v9, v10);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  sub_1000075DC(v11, v12, v13, v14, v15);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v17 = *(_QWORD *)(a2 + 80);
  v18 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v19;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v20 = *(_QWORD *)(a2 + 112);
  v21 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = *(void **)(a1 + 120);
  v23 = *(void **)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v23;
  v24 = v23;

  v25 = *(void **)(a2 + 128);
  v26 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v25;
  v27 = v25;

  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v28 = *(_QWORD *)(a2 + 144);
  v29 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v30 = *(_QWORD *)(a2 + 168);
  v31 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v109 = a3;
  v32 = *(int *)(a3 + 24);
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = type metadata accessor for BlendMode(0);
  v102 = *(_QWORD *)(v35 - 8);
  v103 = v35;
  (*(void (**)(uint64_t, uint64_t))(v102 + 24))(v33, v34);
  v36 = (int *)type metadata accessor for SmallReadingGoalView.ViewConfiguration(0);
  *(_QWORD *)(v33 + v36[5]) = *(_QWORD *)(v34 + v36[5]);
  *(_QWORD *)(v33 + v36[6]) = *(_QWORD *)(v34 + v36[6]);
  *(_QWORD *)(v33 + v36[7]) = *(_QWORD *)(v34 + v36[7]);
  *(_QWORD *)(v33 + v36[8]) = *(_QWORD *)(v34 + v36[8]);
  *(_QWORD *)(v33 + v36[9]) = *(_QWORD *)(v34 + v36[9]);
  v37 = v36[10];
  v38 = (_QWORD *)(v33 + v37);
  v39 = (char *)(v34 + v37);
  v40 = sub_100005F78(&qword_1000A0A50);
  v105 = *(_QWORD *)(v40 - 8);
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v105 + 48);
  v42 = v38;
  LODWORD(v38) = v41((char *)v38, 1, v40);
  __src = v39;
  v108 = (int *)v40;
  v43 = v41(v39, 1, v40);
  if ((_DWORD)v38)
  {
    if (!v43)
    {
      v44 = v42;
      *v42 = *(_QWORD *)v39;
      v45 = *((_QWORD *)v39 + 1);
      v42[1] = v45;
      v46 = *(int *)(v40 + 48);
      v47 = (char *)v42 + v46;
      v48 = &v39[v46];
      v49 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v45);
      if (swift_getEnumCaseMultiPayload(v48, v49) == 1)
      {
        v50 = *(_QWORD *)v48;
        *(_QWORD *)v47 = *(_QWORD *)v48;
        swift_retain(v50);
        v51 = 1;
      }
      else
      {
        *(_DWORD *)v47 = *(_DWORD *)v48;
        v61 = sub_100005F78(&qword_1000A18C0);
        (*(void (**)(char *, char *, uint64_t))(v102 + 16))(&v47[*(int *)(v61 + 48)], &v48[*(int *)(v61 + 48)], v103);
        v62 = *(int *)(v61 + 64);
        v63 = &v47[v62];
        v104 = v47;
        v64 = &v48[v62];
        v65 = type metadata accessor for ColorScheme(0);
        v66 = v64;
        v47 = v104;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v63, v66, v65);
        v51 = 0;
      }
      swift_storeEnumTagMultiPayload(v47, v49, v51);
      v67 = v108[16];
      v68 = (char *)v44 + v67;
      v69 = &__src[v67];
      v70 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v68, v69, v70);
      v71 = v108[20];
      v72 = (char *)v44 + v71;
      v73 = &__src[v71];
      v74 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v72, v73, v74);
      *(_QWORD *)((char *)v44 + v108[24]) = *(_QWORD *)&__src[v108[24]];
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v105 + 56))(v44, 0, 1, v108);
      goto LABEL_16;
    }
LABEL_7:
    v52 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v42, v39, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_16;
  }
  if (v43)
  {
    sub_100007A0C((uint64_t)v42, &qword_1000A0A50);
    goto LABEL_7;
  }
  *v42 = *(_QWORD *)v39;
  v53 = *((_QWORD *)v39 + 1);
  v54 = v42[1];
  v42[1] = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
  if (a1 != a2)
  {
    v55 = *(int *)(v40 + 48);
    v56 = (char *)v42 + v55;
    v57 = &v39[v55];
    sub_100007A48((uint64_t)v42 + v55, type metadata accessor for CircularProgressView.ColorStyle);
    v58 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v57, v58) == 1)
    {
      v59 = *(_QWORD *)v57;
      *(_QWORD *)v56 = *(_QWORD *)v57;
      swift_retain(v59);
      v60 = 1;
    }
    else
    {
      *(_DWORD *)v56 = *(_DWORD *)v57;
      v106 = sub_100005F78(&qword_1000A18C0);
      (*(void (**)(char *, char *, uint64_t))(v102 + 16))(&v56[*(int *)(v106 + 48)], &v57[*(int *)(v106 + 48)], v103);
      v75 = *(int *)(v106 + 64);
      v107 = v58;
      v76 = &v56[v75];
      v77 = &v57[v75];
      v78 = type metadata accessor for ColorScheme(0);
      v79 = v76;
      v58 = v107;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(v79, v77, v78);
      v60 = 0;
    }
    swift_storeEnumTagMultiPayload(v56, v58, v60);
  }
  v80 = v108[16];
  v81 = (char *)v42 + v80;
  v82 = &v39[v80];
  v83 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 24))(v81, v82, v83);
  v84 = v108[20];
  v85 = (char *)v42 + v84;
  v86 = &v39[v84];
  v87 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 24))(v85, v86, v87);
  *(_QWORD *)((char *)v42 + v108[24]) = *(_QWORD *)&v39[v108[24]];
LABEL_16:
  v88 = v36[11];
  v89 = *(_QWORD *)(v34 + v88);
  v90 = *(_QWORD *)(v33 + v88);
  *(_QWORD *)(v33 + v88) = v89;
  swift_retain(v89);
  swift_release(v90);
  v91 = v36[12];
  v92 = *(_QWORD *)(v34 + v91);
  v93 = *(_QWORD *)(v33 + v91);
  *(_QWORD *)(v33 + v91) = v92;
  swift_retain(v92);
  swift_release(v93);
  v94 = v36[13];
  v95 = *(_QWORD *)(v34 + v94);
  v96 = *(_QWORD *)(v33 + v94);
  *(_QWORD *)(v33 + v94) = v95;
  swift_retain(v95);
  swift_release(v96);
  *(_QWORD *)(v33 + v36[14]) = *(_QWORD *)(v34 + v36[14]);
  *(_QWORD *)(v33 + v36[15]) = *(_QWORD *)(v34 + v36[15]);
  *(_QWORD *)(v33 + v36[16]) = *(_QWORD *)(v34 + v36[16]);
  *(_QWORD *)(v33 + v36[17]) = *(_QWORD *)(v34 + v36[17]);
  v97 = *(int *)(v109 + 28);
  v98 = a1 + v97;
  v99 = a2 + v97;
  v100 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 24))(v98, v99, v100);
  return a1;
}

uint64_t sub_100027FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _OWORD *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  int *v43;
  _OWORD *v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  _OWORD *v47;

  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v9 = type metadata accessor for BlendMode(0);
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v46(v7, v8, v9);
  v10 = (int *)type metadata accessor for SmallReadingGoalView.ViewConfiguration(0);
  *(_QWORD *)(v7 + v10[5]) = *(_QWORD *)(v8 + v10[5]);
  *(_QWORD *)(v7 + v10[6]) = *(_QWORD *)(v8 + v10[6]);
  *(_QWORD *)(v7 + v10[7]) = *(_QWORD *)(v8 + v10[7]);
  *(_QWORD *)(v7 + v10[8]) = *(_QWORD *)(v8 + v10[8]);
  *(_QWORD *)(v7 + v10[9]) = *(_QWORD *)(v8 + v10[9]);
  v11 = v10[10];
  v12 = (_OWORD *)(v7 + v11);
  v13 = (_OWORD *)(v8 + v11);
  v14 = sub_100005F78(&qword_1000A0A50);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v42 = v9;
    v43 = (int *)v14;
    v44 = v13;
    v45 = v15;
    *v12 = *v13;
    v17 = *(int *)(v14 + 48);
    v18 = (_DWORD *)((char *)v12 + v17);
    v19 = (_DWORD *)((char *)v13 + v17);
    v20 = type metadata accessor for CircularProgressView.ColorStyle(0);
    v21 = v12;
    if (swift_getEnumCaseMultiPayload(v19, v20))
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      *v18 = *v19;
      v22 = sub_100005F78(&qword_1000A18C0);
      v46((uint64_t)v18 + *(int *)(v22 + 48), (uint64_t)v19 + *(int *)(v22 + 48), v42);
      v23 = *(int *)(v22 + 64);
      v24 = (char *)v18 + v23;
      v47 = v21;
      v25 = (char *)v19 + v23;
      v26 = type metadata accessor for ColorScheme(0);
      v27 = v25;
      v21 = v47;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v27, v26);
      swift_storeEnumTagMultiPayload(v18, v20, 0);
    }
    v28 = v43[16];
    v29 = v21;
    v30 = (char *)v21 + v28;
    v31 = (char *)v44 + v28;
    v32 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
    v33 = v43[20];
    v34 = (uint64_t)v29 + v33;
    v35 = (char *)v44 + v33;
    v36 = type metadata accessor for Font.Design(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
    *(_QWORD *)((char *)v29 + v43[24]) = *(_QWORD *)((char *)v44 + v43[24]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v45 + 56))(v29, 0, 1, v43);
  }
  *(_QWORD *)(v7 + v10[11]) = *(_QWORD *)(v8 + v10[11]);
  *(_QWORD *)(v7 + v10[12]) = *(_QWORD *)(v8 + v10[12]);
  *(_QWORD *)(v7 + v10[13]) = *(_QWORD *)(v8 + v10[13]);
  *(_QWORD *)(v7 + v10[14]) = *(_QWORD *)(v8 + v10[14]);
  *(_QWORD *)(v7 + v10[15]) = *(_QWORD *)(v8 + v10[15]);
  *(_QWORD *)(v7 + v10[16]) = *(_QWORD *)(v8 + v10[16]);
  *(_QWORD *)(v7 + v10[17]) = *(_QWORD *)(v8 + v10[17]);
  v37 = *(int *)(a3 + 28);
  v38 = a1 + v37;
  v39 = a2 + v37;
  v40 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v38, v39, v40);
  return a1;
}

uint64_t sub_100028330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v32;
  _QWORD *v33;
  int *v34;
  int v35;
  _QWORD *v36;
  int *v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *__src;
  uint64_t v90;

  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 32) = v6;
  sub_1000075DC(v7, v8, v9, v10, v11);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);

  v17 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);

  v18 = *(_QWORD *)(a2 + 144);
  v19 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v18;
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  v20 = *(_QWORD *)(a2 + 168);
  v21 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v20;
  swift_bridgeObjectRelease(v21);
  v90 = a3;
  v22 = *(int *)(a3 + 24);
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = type metadata accessor for BlendMode(0);
  v83 = *(_QWORD *)(v25 - 8);
  v84 = v25;
  (*(void (**)(uint64_t, uint64_t))(v83 + 40))(v23, v24);
  v26 = (int *)type metadata accessor for SmallReadingGoalView.ViewConfiguration(0);
  *(_QWORD *)(v23 + v26[5]) = *(_QWORD *)(v24 + v26[5]);
  *(_QWORD *)(v23 + v26[6]) = *(_QWORD *)(v24 + v26[6]);
  *(_QWORD *)(v23 + v26[7]) = *(_QWORD *)(v24 + v26[7]);
  *(_QWORD *)(v23 + v26[8]) = *(_QWORD *)(v24 + v26[8]);
  *(_QWORD *)(v23 + v26[9]) = *(_QWORD *)(v24 + v26[9]);
  v27 = v26[10];
  v28 = (_QWORD *)(v23 + v27);
  v29 = (_QWORD *)(v24 + v27);
  v30 = sub_100005F78(&qword_1000A0A50);
  v87 = *(_QWORD *)(v30 - 8);
  v31 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v87 + 48);
  v32 = v28;
  LODWORD(v28) = v31(v28, 1, v30);
  __src = v29;
  v33 = v29;
  v34 = (int *)v30;
  v35 = v31(v33, 1, v30);
  if ((_DWORD)v28)
  {
    if (!v35)
    {
      v36 = v32;
      *(_OWORD *)v32 = *(_OWORD *)__src;
      v37 = (int *)v30;
      v38 = *(int *)(v30 + 48);
      v39 = (_DWORD *)((char *)v36 + v38);
      v40 = (_DWORD *)((char *)__src + v38);
      v81 = type metadata accessor for CircularProgressView.ColorStyle(0);
      if (swift_getEnumCaseMultiPayload(v40, v81))
      {
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
      }
      else
      {
        *v39 = *v40;
        v80 = sub_100005F78(&qword_1000A18C0);
        (*(void (**)(char *, char *, uint64_t))(v83 + 32))((char *)v39 + *(int *)(v80 + 48), (char *)v40 + *(int *)(v80 + 48), v84);
        v47 = *(int *)(v80 + 64);
        v85 = (char *)v39 + v47;
        v48 = (char *)v40 + v47;
        v49 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v85, v48, v49);
        swift_storeEnumTagMultiPayload(v39, v81, 0);
      }
      v50 = v37[16];
      v51 = (char *)v36 + v50;
      v52 = (char *)__src + v50;
      v53 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
      v54 = v37[20];
      v55 = (char *)v36 + v54;
      v56 = (char *)__src + v54;
      v57 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
      *(_QWORD *)((char *)v36 + v37[24]) = *(_QWORD *)((char *)__src + v37[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v87 + 56))(v36, 0, 1, v37);
      goto LABEL_15;
    }
LABEL_7:
    v41 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v32, __src, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_15;
  }
  if (v35)
  {
    sub_100007A0C((uint64_t)v32, &qword_1000A0A50);
    goto LABEL_7;
  }
  v42 = __src[1];
  v43 = v32[1];
  *v32 = *__src;
  v32[1] = v42;
  swift_bridgeObjectRelease(v43);
  if (a1 != a2)
  {
    v44 = *(int *)(v30 + 48);
    v45 = (_DWORD *)((char *)v32 + v44);
    v46 = (_DWORD *)((char *)__src + v44);
    sub_100007A48((uint64_t)v32 + v44, type metadata accessor for CircularProgressView.ColorStyle);
    v88 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v46, v88))
    {
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    }
    else
    {
      *v45 = *v46;
      v82 = sub_100005F78(&qword_1000A18C0);
      (*(void (**)(char *, char *, uint64_t))(v83 + 32))((char *)v45 + *(int *)(v82 + 48), (char *)v46 + *(int *)(v82 + 48), v84);
      v58 = *(int *)(v82 + 64);
      v86 = (char *)v45 + v58;
      v59 = (char *)v46 + v58;
      v60 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v86, v59, v60);
      swift_storeEnumTagMultiPayload(v45, v88, 0);
    }
  }
  v61 = v34[16];
  v62 = (char *)v32 + v61;
  v63 = (char *)__src + v61;
  v64 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 40))(v62, v63, v64);
  v65 = v34[20];
  v66 = (char *)v32 + v65;
  v67 = (char *)__src + v65;
  v68 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 40))(v66, v67, v68);
  *(_QWORD *)((char *)v32 + v34[24]) = *(_QWORD *)((char *)__src + v34[24]);
LABEL_15:
  v69 = v26[11];
  v70 = *(_QWORD *)(v23 + v69);
  *(_QWORD *)(v23 + v69) = *(_QWORD *)(v24 + v69);
  swift_release(v70);
  v71 = v26[12];
  v72 = *(_QWORD *)(v23 + v71);
  *(_QWORD *)(v23 + v71) = *(_QWORD *)(v24 + v71);
  swift_release(v72);
  v73 = v26[13];
  v74 = *(_QWORD *)(v23 + v73);
  *(_QWORD *)(v23 + v73) = *(_QWORD *)(v24 + v73);
  swift_release(v74);
  *(_QWORD *)(v23 + v26[14]) = *(_QWORD *)(v24 + v26[14]);
  *(_QWORD *)(v23 + v26[15]) = *(_QWORD *)(v24 + v26[15]);
  *(_QWORD *)(v23 + v26[16]) = *(_QWORD *)(v24 + v26[16]);
  *(_QWORD *)(v23 + v26[17]) = *(_QWORD *)(v24 + v26[17]);
  v75 = *(int *)(v90 + 28);
  v76 = a1 + v75;
  v77 = a2 + v75;
  v78 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 40))(v76, v77, v78);
  return a1;
}

uint64_t sub_10002888C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100028898);
}

uint64_t sub_100028898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 112);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SmallReadingGoalView.ViewConfiguration(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = type metadata accessor for GeometryProxy(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_100028938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100028944);
}

uint64_t sub_100028944(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 112) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for SmallReadingGoalView.ViewConfiguration(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = type metadata accessor for GeometryProxy(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for SmallReadingGoalView(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A19E0, (uint64_t)&nominal type descriptor for SmallReadingGoalView);
}

uint64_t sub_1000289F4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  v5[0] = "!";
  v5[1] = &unk_10007FFA0;
  result = type metadata accessor for SmallReadingGoalView.ViewConfiguration(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for GeometryProxy(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100028A8C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100083E4C, 1);
}

uint64_t sub_100028A9C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _QWORD v86[4];
  _QWORD v87[2];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  _OWORD v97[8];
  uint64_t v98;

  v85 = a2;
  v3 = type metadata accessor for URL(0);
  __chkstk_darwin(v3);
  v78 = (uint64_t)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100005F78(&qword_1000A1A28);
  v84 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v79 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005F78(&qword_1000A1A30);
  v7 = __chkstk_darwin(v6);
  v83 = (uint64_t)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v80 = (char *)&v72 - v10;
  __chkstk_darwin(v9);
  v81 = (uint64_t)&v72 - v11;
  v12 = type metadata accessor for ContainerBackgroundPlacement(0);
  v75 = *(_QWORD *)(v12 - 8);
  v76 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005F78(&qword_1000A1878);
  __chkstk_darwin(v15);
  v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005F78(&qword_1000A1880);
  __chkstk_darwin(v18);
  v20 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100005F78(&qword_1000A1A38);
  v74 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v77 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v72 - v25;
  v27 = __chkstk_darwin(v24);
  v73 = (char *)&v72 - v28;
  *(_QWORD *)v17 = static VerticalAlignment.center.getter(v27);
  *((_QWORD *)v17 + 1) = 0;
  v17[16] = 1;
  v29 = sub_100005F78(&qword_1000A1A40);
  v30 = sub_100029054(a1, (uint64_t)&v17[*(int *)(v29 + 44)]);
  v31 = static Alignment.center.getter(v30);
  sub_100021394(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v20, 0.0, 1, INFINITY, 0, v31, v32);
  v33 = sub_100007A0C((uint64_t)v17, &qword_1000A1878);
  v34 = static ContainerBackgroundPlacement.widget.getter(v33);
  v35 = static Alignment.center.getter(v34);
  v37 = v36;
  v38 = sub_10002C038();
  v39 = sub_1000252CC();
  View.containerBackground<A>(for:alignment:content:)(v14, v35, v37, WidgetReadingHistory.Day.readingTime.getter, 0, v18, &type metadata for GradientOverlayView, v38, v39);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v14, v76);
  sub_100007A0C((uint64_t)v20, &qword_1000A1880);
  v41 = v73;
  v40 = v74;
  (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v73, v26, v21);
  v42 = *(_OWORD *)(a1 + 120);
  v43 = *(_OWORD *)(a1 + 152);
  v97[6] = *(_OWORD *)(a1 + 136);
  v97[7] = v43;
  v98 = *(_QWORD *)(a1 + 168);
  v44 = *(_OWORD *)(a1 + 56);
  v45 = *(_OWORD *)(a1 + 88);
  v97[2] = *(_OWORD *)(a1 + 72);
  v97[3] = v45;
  v97[4] = *(_OWORD *)(a1 + 104);
  v97[5] = v42;
  v97[0] = *(_OWORD *)(a1 + 40);
  v97[1] = v44;
  sub_100007918(v97);
  v46 = v78;
  sub_100021C84(v78);
  sub_100007494((uint64_t)v97);
  v86[2] = a1;
  v47 = sub_100005F78(&qword_1000A1A58);
  v48 = sub_10000E208(&qword_1000A1A60, &qword_1000A1A58, (void (*)(void))sub_10002C0C4);
  v49 = v79;
  Link.init(destination:label:)(v46, sub_10002C0BC, v86, v47, v48);
  v50 = *(_OWORD *)(a1 + 120);
  v51 = *(_OWORD *)(a1 + 152);
  v94 = *(_OWORD *)(a1 + 136);
  v95 = v51;
  v96 = *(_QWORD *)(a1 + 168);
  v52 = *(_OWORD *)(a1 + 56);
  v53 = *(_OWORD *)(a1 + 88);
  v90 = *(_OWORD *)(a1 + 72);
  v91 = v53;
  v92 = *(_OWORD *)(a1 + 104);
  v93 = v50;
  v88 = *(_OWORD *)(a1 + 40);
  v89 = v52;
  v54 = sub_100051DA4();
  if (v55)
    v56 = v54;
  else
    v56 = 0;
  if (v55)
    v57 = v55;
  else
    v57 = 0xE000000000000000;
  v87[0] = v56;
  v87[1] = v57;
  v58 = sub_100007F64(&qword_1000A1AA8, &qword_1000A1A28, (uint64_t)&protocol conformance descriptor for Link<A>);
  v59 = sub_1000075E8();
  v60 = v80;
  v61 = v82;
  View.accessibilityLabel<A>(_:)(v87, v82, &type metadata for String, v58, v59);
  swift_bridgeObjectRelease(v57);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v49, v61);
  v62 = (uint64_t)v60;
  v63 = v81;
  sub_100007984(v62, v81, &qword_1000A1A30);
  v64 = v40;
  v65 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
  v66 = v77;
  v65(v77, v41, v21);
  v67 = v83;
  sub_1000079C8(v63, v83, &qword_1000A1A30);
  v68 = v85;
  v65(v85, v66, v21);
  v69 = sub_100005F78(&qword_1000A1AB0);
  sub_1000079C8(v67, (uint64_t)&v68[*(int *)(v69 + 48)], &qword_1000A1A30);
  sub_100007A0C(v63, &qword_1000A1A30);
  v70 = *(void (**)(char *, uint64_t))(v64 + 8);
  v70(v41, v21);
  sub_100007A0C(v67, &qword_1000A1A30);
  return ((uint64_t (*)(char *, uint64_t))v70)(v66, v21);
}

uint64_t sub_100029054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD v63[2];
  char v64;
  _OWORD v65[2];
  char v66;
  _OWORD v67[2];
  char v68;
  _BYTE v69[40];
  _BYTE v70[40];
  _BYTE v71[48];

  v62 = a2;
  v3 = sub_100005F78(&qword_1000A1B08);
  __chkstk_darwin(v3);
  v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005F78(&qword_1000A1B10);
  __chkstk_darwin(v6);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100005F78(&qword_1000A1B18);
  __chkstk_darwin(v60);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100005F78(&qword_1000A1B20);
  v11 = __chkstk_darwin(v61);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v59 - v15;
  *(_QWORD *)v5 = static HorizontalAlignment.center.getter(v14);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v17 = sub_100005F78(&qword_1000A1B28);
  v18 = sub_100029464(a1, (uint64_t)&v5[*(int *)(v17 + 44)]);
  v19 = static Edge.Set.leading.getter(v18);
  v20 = *(_OWORD *)(a1 + 16);
  v67[0] = *(_OWORD *)a1;
  v67[1] = v20;
  v68 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v67, (uint64_t)v69, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v22 = v21;
  sub_10000DBE0((uint64_t)v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v23 = EdgeInsets.init(_all:)(v22);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  sub_1000079C8((uint64_t)v5, (uint64_t)v8, &qword_1000A1B08);
  v30 = &v8[*(int *)(v6 + 36)];
  *v30 = v19;
  *((double *)v30 + 1) = v23;
  *((_QWORD *)v30 + 2) = v25;
  *((_QWORD *)v30 + 3) = v27;
  *((_QWORD *)v30 + 4) = v29;
  v30[40] = 0;
  v31 = sub_100007A0C((uint64_t)v5, &qword_1000A1B08);
  v32 = static Edge.Set.trailing.getter(v31);
  v33 = *(_OWORD *)(a1 + 16);
  v65[0] = *(_OWORD *)a1;
  v65[1] = v33;
  v66 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v65, (uint64_t)v70, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v70, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v35 = v34;
  sub_10000DBE0((uint64_t)v65, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v36 = EdgeInsets.init(_all:)(v35);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  sub_1000079C8((uint64_t)v8, (uint64_t)v10, &qword_1000A1B10);
  v43 = &v10[*(int *)(v60 + 36)];
  *v43 = v32;
  *((double *)v43 + 1) = v36;
  *((_QWORD *)v43 + 2) = v38;
  *((_QWORD *)v43 + 3) = v40;
  *((_QWORD *)v43 + 4) = v42;
  v43[40] = 0;
  v44 = sub_100007A0C((uint64_t)v8, &qword_1000A1B10);
  v45 = static Edge.Set.top.getter(v44);
  v46 = *(_OWORD *)(a1 + 16);
  v63[0] = *(_OWORD *)a1;
  v63[1] = v46;
  v64 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v63, (uint64_t)v71, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v71, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  v47 = sub_100024DBC();
  sub_10000DBE0((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v48 = EdgeInsets.init(_all:)(v47);
  v50 = v49;
  v52 = v51;
  v54 = v53;
  sub_1000079C8((uint64_t)v10, (uint64_t)v13, &qword_1000A1B18);
  v55 = &v13[*(int *)(v61 + 36)];
  *v55 = v45;
  *((double *)v55 + 1) = v48;
  *((_QWORD *)v55 + 2) = v50;
  *((_QWORD *)v55 + 3) = v52;
  *((_QWORD *)v55 + 4) = v54;
  v55[40] = 0;
  sub_100007A0C((uint64_t)v10, &qword_1000A1B18);
  sub_100007984((uint64_t)v13, (uint64_t)v16, &qword_1000A1B20);
  sub_1000079C8((uint64_t)v16, (uint64_t)v13, &qword_1000A1B20);
  v56 = v62;
  sub_1000079C8((uint64_t)v13, v62, &qword_1000A1B20);
  v57 = v56 + *(int *)(sub_100005F78(&qword_1000A1B30) + 48);
  *(_QWORD *)v57 = 0;
  *(_BYTE *)(v57 + 8) = 1;
  sub_100007A0C((uint64_t)v16, &qword_1000A1B20);
  return sub_100007A0C((uint64_t)v13, &qword_1000A1B20);
}

uint64_t sub_100029464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  char v24;
  char v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  __int128 v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD v75[2];
  char v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  char v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  char v88;
  _OWORD v89[2];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  unint64_t v96;
  _OWORD v97[5];
  char v98;
  _BYTE v99[48];

  v74 = a2;
  v3 = type metadata accessor for URL(0);
  v66 = *(_QWORD *)(v3 - 8);
  v67 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for BookCoverView(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v71 = (uint64_t)&v63 - v10;
  v68 = sub_100005F78(&qword_1000A0DC0);
  __chkstk_darwin(v68);
  v64 = (uint64_t)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100005F78(&qword_1000A1B38);
  v12 = __chkstk_darwin(v70);
  v73 = (uint64_t)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v69 = (uint64_t)&v63 - v15;
  __chkstk_darwin(v14);
  v72 = (uint64_t)&v63 - v16;
  v17 = *(_OWORD *)(a1 + 152);
  v94 = *(_OWORD *)(a1 + 136);
  v95 = v17;
  v18 = *(_OWORD *)(a1 + 120);
  v96 = *(_QWORD *)(a1 + 168);
  v19 = *(_OWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 88);
  v90 = *(_OWORD *)(a1 + 72);
  v91 = v20;
  v92 = *(_OWORD *)(a1 + 104);
  v93 = v18;
  v89[0] = *(_OWORD *)(a1 + 40);
  v89[1] = v19;
  v97[2] = v92;
  v97[3] = v18;
  v97[4] = v94;
  v97[0] = v90;
  v97[1] = v20;
  v98 = v95;
  v85 = v92;
  v86 = v18;
  v87 = v94;
  v83 = v90;
  v84 = v20;
  v88 = v95;
  v21 = *((_QWORD *)&v95 + 1);
  v22 = v96;
  v77 = v90;
  v78 = v20;
  v23 = v92;
  v82 = v95;
  v80 = v18;
  v81 = v94;
  v79 = v92;
  sub_100007918(v89);
  v65 = v5;
  sub_100006104((uint64_t)&v83, (uint64_t)v5);
  sub_100007494((uint64_t)v89);
  v24 = sub_100013C4C();
  if (v22)
  {
    if (__PAIR128__(v22, v21) == v23)
      v25 = 1;
    else
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, *((_QWORD *)&v23 + 1), v21, v22, 0);
  }
  else
  {
    v25 = 0;
  }
  *(_QWORD *)v9 = swift_getKeyPath(&unk_100080008);
  v26 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v9, v26, 0);
  (*(void (**)(char *, char *, uint64_t))(v66 + 32))(&v9[v6[5]], v65, v67);
  v9[v6[6]] = v24 & 1;
  v27 = &v9[v6[7]];
  v28 = v86;
  *((_OWORD *)v27 + 2) = v85;
  *((_OWORD *)v27 + 3) = v28;
  *((_OWORD *)v27 + 4) = v87;
  v27[80] = v88;
  v29 = v84;
  *(_OWORD *)v27 = v83;
  *((_OWORD *)v27 + 1) = v29;
  v9[v6[8]] = v25 & 1;
  v9[v6[9]] = 1;
  v30 = v71;
  sub_10000DEF8((uint64_t)v9, v71);
  v31 = sub_10000DF3C(v97);
  v32 = static Edge.Set.trailing.getter(v31);
  v33 = *(_OWORD *)(a1 + 16);
  v75[0] = *(_OWORD *)a1;
  v75[1] = v33;
  v76 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v75, (uint64_t)v99, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v35 = v34;
  sub_10000DBE0((uint64_t)v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v36 = a1 + *(int *)(type metadata accessor for SmallReadingGoalView(0) + 24);
  v37 = type metadata accessor for SmallReadingGoalView.ViewConfiguration(0);
  v38 = EdgeInsets.init(_all:)(v35 + *(double *)(v36 + *(int *)(v37 + 68)));
  v40 = v39;
  v42 = v41;
  v44 = v43;
  v45 = v64;
  sub_1000078D4(v30, v64, type metadata accessor for BookCoverView);
  v46 = v45 + *(int *)(v68 + 36);
  *(_BYTE *)v46 = v32;
  *(double *)(v46 + 8) = v38;
  *(_QWORD *)(v46 + 16) = v40;
  *(_QWORD *)(v46 + 24) = v42;
  *(_QWORD *)(v46 + 32) = v44;
  *(_BYTE *)(v46 + 40) = 0;
  v47 = sub_100007A48(v30, type metadata accessor for BookCoverView);
  v48 = static Edge.Set.bottom.getter(v47);
  v49 = EdgeInsets.init(_all:)(*(double *)(v36 + *(int *)(v37 + 36)));
  v51 = v50;
  v53 = v52;
  v55 = v54;
  v56 = v69;
  sub_1000079C8(v45, v69, &qword_1000A0DC0);
  v57 = v56 + *(int *)(v70 + 36);
  *(_BYTE *)v57 = v48;
  *(double *)(v57 + 8) = v49;
  *(_QWORD *)(v57 + 16) = v51;
  *(_QWORD *)(v57 + 24) = v53;
  *(_QWORD *)(v57 + 32) = v55;
  *(_BYTE *)(v57 + 40) = 0;
  sub_100007A0C(v45, &qword_1000A0DC0);
  v58 = v72;
  sub_100007984(v56, v72, &qword_1000A1B38);
  v59 = v73;
  sub_1000079C8(v58, v73, &qword_1000A1B38);
  v60 = v74;
  sub_1000079C8(v59, v74, &qword_1000A1B38);
  v61 = v60 + *(int *)(sub_100005F78(&qword_1000A1B40) + 48);
  *(_QWORD *)v61 = 0;
  *(_BYTE *)(v61 + 8) = 0;
  sub_100007A0C(v58, &qword_1000A1B38);
  return sub_100007A0C(v59, &qword_1000A1B38);
}

uint64_t sub_100029960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int *v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD v69[3];
  _OWORD v70[7];

  v68 = a2;
  v3 = sub_100005F78(&qword_1000A1AA0);
  __chkstk_darwin(v3);
  v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100005F78(&qword_1000A1A90);
  __chkstk_darwin(v63);
  v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100005F78(&qword_1000A1A80);
  __chkstk_darwin(v64);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100005F78(&qword_1000A1A70);
  __chkstk_darwin(v65);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100005F78(&qword_1000A1A58);
  v12 = __chkstk_darwin(v66);
  v67 = (uint64_t)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = static Axis.Set.horizontal.getter(v12);
  v15 = v14;
  v16 = static Axis.Set.vertical.getter(v14);
  v17 = Axis.Set.init(rawValue:)(0);
  v18 = Axis.Set.init(rawValue:)(v17);
  if (Axis.Set.init(rawValue:)(v18 & v15) != v15)
    v17 = Axis.Set.init(rawValue:)(v17 | v15);
  v19 = Axis.Set.init(rawValue:)(v17);
  if (Axis.Set.init(rawValue:)(v19 & v16) != v16)
    LOBYTE(v17) = Axis.Set.init(rawValue:)(v17 | v16);
  *v5 = v17;
  v20 = sub_100005F78(&qword_1000A1AB8);
  v21 = sub_100029E58(a1, (uint64_t)&v5[*(int *)(v20 + 44)]);
  v22 = static Edge.Set.top.getter(v21);
  v23 = v22;
  v24 = static Edge.Set.bottom.getter(v22);
  v25 = Edge.Set.init(rawValue:)(0);
  v26 = Edge.Set.init(rawValue:)(v25);
  if (Edge.Set.init(rawValue:)(v26 & v23) != v23)
    v25 = Edge.Set.init(rawValue:)(v25 | v23);
  v27 = Edge.Set.init(rawValue:)(v25);
  if (Edge.Set.init(rawValue:)(v27 & v24) != v24)
    LOBYTE(v25) = Edge.Set.init(rawValue:)(v25 | v24);
  v28 = a1 + *(int *)(type metadata accessor for SmallReadingGoalView(0) + 24);
  v29 = (int *)type metadata accessor for SmallReadingGoalView.ViewConfiguration(0);
  v30 = EdgeInsets.init(_all:)(*(double *)(v28 + v29[6]));
  v32 = v31;
  v34 = v33;
  v36 = v35;
  sub_1000079C8((uint64_t)v5, (uint64_t)v7, &qword_1000A1AA0);
  v37 = &v7[*(int *)(v63 + 36)];
  *v37 = v25;
  *((double *)v37 + 1) = v30;
  *((_QWORD *)v37 + 2) = v32;
  *((_QWORD *)v37 + 3) = v34;
  *((_QWORD *)v37 + 4) = v36;
  v37[40] = 0;
  v38 = sub_100007A0C((uint64_t)v5, &qword_1000A1AA0);
  v39 = GeometryProxy.size.getter(v38);
  v41 = static Alignment.leading.getter(v40);
  _FrameLayout.init(width:height:alignment:)(v69, *(_QWORD *)&v39, 0, 0, 1, v41, v42);
  sub_1000079C8((uint64_t)v7, (uint64_t)v9, &qword_1000A1A90);
  v43 = &v9[*(int *)(v64 + 36)];
  v44 = v69[1];
  *(_OWORD *)v43 = v69[0];
  *((_OWORD *)v43 + 1) = v44;
  *((_OWORD *)v43 + 2) = v69[2];
  v45 = sub_100007A0C((uint64_t)v7, &qword_1000A1A90);
  v46 = *(double *)(v28 + v29[7]);
  v47 = *(double *)(v28 + v29[8]);
  v48 = static Alignment.center.getter(v45);
  v49 = v48;
  v51 = v50;
  if (v46 > v47)
  {
    v52 = static os_log_type_t.fault.getter(v48);
    v53 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v52, &_mh_execute_header, v53, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

  }
  v61 = 0;
  v60 = 1;
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v70, 0, 1, 0, 1, 0, 1, *(_QWORD *)&v46, 0, 0, v60, *(_QWORD *)&v47, v61, v49, v51);
  sub_1000079C8((uint64_t)v9, (uint64_t)v11, &qword_1000A1A80);
  v54 = &v11[*(int *)(v65 + 36)];
  v55 = v70[5];
  *((_OWORD *)v54 + 4) = v70[4];
  *((_OWORD *)v54 + 5) = v55;
  *((_OWORD *)v54 + 6) = v70[6];
  v56 = v70[1];
  *(_OWORD *)v54 = v70[0];
  *((_OWORD *)v54 + 1) = v56;
  v57 = v70[3];
  *((_OWORD *)v54 + 2) = v70[2];
  *((_OWORD *)v54 + 3) = v57;
  sub_100007A0C((uint64_t)v9, &qword_1000A1A80);
  v58 = v67;
  sub_1000079C8((uint64_t)v11, v67, &qword_1000A1A70);
  *(_WORD *)(v58 + *(int *)(v66 + 36)) = 256;
  sub_100007A0C((uint64_t)v11, &qword_1000A1A70);
  return sub_100007984(v58, v68, &qword_1000A1A58);
}

uint64_t sub_100029E58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char v77;
  __int128 v78;
  double v79;
  double v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  __int128 v93;
  double v94;
  double v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char v105;
  __int128 v106;
  double v107;
  double v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  __int128 v121;
  double v122;
  double v123;
  double v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char v133;
  __int128 v134;
  double v135;
  double v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  __int128 v149;
  double v150;
  double v151;
  double v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char v161;
  __int128 v162;
  double v163;
  double v164;
  double v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  __int128 v177;
  double v178;
  double v179;
  double v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char v189;
  __int128 v190;
  double v191;
  double v192;
  double v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int *v210;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _OWORD v230[2];
  char v231;
  _OWORD v232[2];
  char v233;
  _OWORD v234[2];
  char v235;
  _OWORD v236[2];
  char v237;
  _OWORD v238[2];
  char v239;
  _OWORD v240[2];
  char v241;
  _OWORD v242[2];
  char v243;
  _OWORD v244[2];
  char v245;
  _OWORD v246[2];
  char v247;
  _OWORD v248[2];
  char v249;
  _OWORD v250[2];
  char v251;
  _OWORD v252[2];
  char v253;
  _BYTE v254[40];
  _BYTE v255[40];
  _BYTE v256[40];
  _BYTE v257[40];
  _BYTE v258[40];
  _BYTE v259[40];
  _BYTE v260[40];
  _BYTE v261[40];
  _BYTE v262[40];
  _BYTE v263[40];
  _BYTE v264[40];
  _BYTE v265[48];

  v218 = a2;
  v3 = sub_100005F78(&qword_1000A1AC0);
  __chkstk_darwin(v3);
  v5 = (char *)&v212 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v228 = sub_100005F78(&qword_1000A1AC8);
  __chkstk_darwin(v228);
  v7 = (char *)&v212 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v229 = sub_100005F78(&qword_1000A1AD0);
  __chkstk_darwin(v229);
  v9 = (char *)&v212 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v227 = sub_100005F78(&qword_1000A1AD8);
  v10 = __chkstk_darwin(v227);
  v217 = (uint64_t)&v212 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v216 = (uint64_t)&v212 - v13;
  v14 = __chkstk_darwin(v12);
  v215 = (uint64_t)&v212 - v15;
  v16 = __chkstk_darwin(v14);
  v214 = (uint64_t)&v212 - v17;
  v18 = __chkstk_darwin(v16);
  v213 = (uint64_t)&v212 - v19;
  v20 = __chkstk_darwin(v18);
  v219 = (uint64_t)&v212 - v21;
  v22 = __chkstk_darwin(v20);
  v222 = (uint64_t)&v212 - v23;
  v24 = __chkstk_darwin(v22);
  v220 = (uint64_t)&v212 - v25;
  v26 = __chkstk_darwin(v24);
  v223 = (uint64_t)&v212 - v27;
  v28 = __chkstk_darwin(v26);
  v224 = (uint64_t)&v212 - v29;
  v30 = __chkstk_darwin(v28);
  v225 = (uint64_t)&v212 - v31;
  v32 = __chkstk_darwin(v30);
  v221 = (uint64_t)&v212 - v33;
  *(_QWORD *)v5 = static VerticalAlignment.center.getter(v32);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 0;
  v226 = sub_100005F78(&qword_1000A1AE0);
  v34 = sub_10002AD5C(a1, (uint64_t)&v5[*(int *)(v226 + 44)]);
  v35 = static Edge.Set.leading.getter(v34);
  v36 = *(_OWORD *)(a1 + 16);
  v252[0] = *(_OWORD *)a1;
  v252[1] = v36;
  v253 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v252, (uint64_t)v254, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v254, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v38 = v37;
  sub_10000DBE0((uint64_t)v252, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v39 = EdgeInsets.init(_all:)(v38);
  v41 = v40;
  v43 = v42;
  v45 = v44;
  sub_1000079C8((uint64_t)v5, (uint64_t)v7, &qword_1000A1AC0);
  v46 = &v7[*(int *)(v228 + 36)];
  *v46 = v35;
  *((double *)v46 + 1) = v39;
  *((_QWORD *)v46 + 2) = v41;
  *((_QWORD *)v46 + 3) = v43;
  *((_QWORD *)v46 + 4) = v45;
  v46[40] = 0;
  v47 = sub_100007A0C((uint64_t)v5, &qword_1000A1AC0);
  v48 = static Edge.Set.trailing.getter(v47);
  v49 = *(_OWORD *)(a1 + 16);
  v250[0] = *(_OWORD *)a1;
  v250[1] = v49;
  v251 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v250, (uint64_t)v255, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v255, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v51 = v50;
  sub_10000DBE0((uint64_t)v250, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v52 = EdgeInsets.init(_all:)(v51);
  v54 = v53;
  v56 = v55;
  v58 = v57;
  sub_1000079C8((uint64_t)v7, (uint64_t)v9, &qword_1000A1AC8);
  v59 = &v9[*(int *)(v229 + 36)];
  *v59 = v48;
  *((double *)v59 + 1) = v52;
  *((_QWORD *)v59 + 2) = v54;
  *((_QWORD *)v59 + 3) = v56;
  *((_QWORD *)v59 + 4) = v58;
  v59[40] = 0;
  sub_100007A0C((uint64_t)v7, &qword_1000A1AC8);
  v60 = v225;
  sub_1000079C8((uint64_t)v9, v225, &qword_1000A1AD0);
  v61 = v227;
  *(_WORD *)(v60 + *(int *)(v227 + 36)) = 257;
  sub_100007A0C((uint64_t)v9, &qword_1000A1AD0);
  v62 = sub_100007984(v60, v221, &qword_1000A1AD8);
  *(_QWORD *)v5 = static VerticalAlignment.center.getter(v62);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 0;
  v63 = sub_10002B1FC(a1, (uint64_t)&v5[*(int *)(v226 + 44)]);
  v64 = static Edge.Set.leading.getter(v63);
  v65 = *(_OWORD *)(a1 + 16);
  v248[0] = *(_OWORD *)a1;
  v248[1] = v65;
  v249 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v248, (uint64_t)v256, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v256, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v67 = v66;
  sub_10000DBE0((uint64_t)v248, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v68 = EdgeInsets.init(_all:)(v67);
  v70 = v69;
  v72 = v71;
  v74 = v73;
  sub_1000079C8((uint64_t)v5, (uint64_t)v7, &qword_1000A1AC0);
  v75 = &v7[*(int *)(v228 + 36)];
  *v75 = v64;
  *((double *)v75 + 1) = v68;
  *((_QWORD *)v75 + 2) = v70;
  *((_QWORD *)v75 + 3) = v72;
  *((_QWORD *)v75 + 4) = v74;
  v75[40] = 0;
  v76 = sub_100007A0C((uint64_t)v5, &qword_1000A1AC0);
  v77 = static Edge.Set.trailing.getter(v76);
  v78 = *(_OWORD *)(a1 + 16);
  v246[0] = *(_OWORD *)a1;
  v246[1] = v78;
  v247 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v246, (uint64_t)v257, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v257, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v80 = v79;
  sub_10000DBE0((uint64_t)v246, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v81 = EdgeInsets.init(_all:)(v80);
  v83 = v82;
  v85 = v84;
  v87 = v86;
  sub_1000079C8((uint64_t)v7, (uint64_t)v9, &qword_1000A1AC8);
  v88 = &v9[*(int *)(v229 + 36)];
  *v88 = v77;
  *((double *)v88 + 1) = v81;
  *((_QWORD *)v88 + 2) = v83;
  *((_QWORD *)v88 + 3) = v85;
  *((_QWORD *)v88 + 4) = v87;
  v88[40] = 0;
  sub_100007A0C((uint64_t)v7, &qword_1000A1AC8);
  v89 = v224;
  sub_1000079C8((uint64_t)v9, v224, &qword_1000A1AD0);
  *(_WORD *)(v89 + *(int *)(v61 + 36)) = 257;
  sub_100007A0C((uint64_t)v9, &qword_1000A1AD0);
  v90 = sub_100007984(v89, v225, &qword_1000A1AD8);
  *(_QWORD *)v5 = static VerticalAlignment.center.getter(v90);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 0;
  v91 = sub_10002B6A4(a1, (uint64_t)&v5[*(int *)(v226 + 44)]);
  v92 = static Edge.Set.leading.getter(v91);
  v93 = *(_OWORD *)(a1 + 16);
  v244[0] = *(_OWORD *)a1;
  v244[1] = v93;
  v245 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v244, (uint64_t)v258, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v258, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v95 = v94;
  sub_10000DBE0((uint64_t)v244, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v96 = EdgeInsets.init(_all:)(v95);
  v98 = v97;
  v100 = v99;
  v102 = v101;
  sub_1000079C8((uint64_t)v5, (uint64_t)v7, &qword_1000A1AC0);
  v103 = &v7[*(int *)(v228 + 36)];
  *v103 = v92;
  *((double *)v103 + 1) = v96;
  *((_QWORD *)v103 + 2) = v98;
  *((_QWORD *)v103 + 3) = v100;
  *((_QWORD *)v103 + 4) = v102;
  v103[40] = 0;
  v104 = sub_100007A0C((uint64_t)v5, &qword_1000A1AC0);
  v105 = static Edge.Set.trailing.getter(v104);
  v106 = *(_OWORD *)(a1 + 16);
  v242[0] = *(_OWORD *)a1;
  v242[1] = v106;
  v243 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v242, (uint64_t)v259, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v259, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v108 = v107;
  sub_10000DBE0((uint64_t)v242, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v109 = EdgeInsets.init(_all:)(v108);
  v111 = v110;
  v113 = v112;
  v115 = v114;
  sub_1000079C8((uint64_t)v7, (uint64_t)v9, &qword_1000A1AC8);
  v116 = &v9[*(int *)(v229 + 36)];
  *v116 = v105;
  *((double *)v116 + 1) = v109;
  *((_QWORD *)v116 + 2) = v111;
  *((_QWORD *)v116 + 3) = v113;
  *((_QWORD *)v116 + 4) = v115;
  v116[40] = 0;
  sub_100007A0C((uint64_t)v7, &qword_1000A1AC8);
  v117 = v223;
  sub_1000079C8((uint64_t)v9, v223, &qword_1000A1AD0);
  *(_WORD *)(v117 + *(int *)(v227 + 36)) = 257;
  sub_100007A0C((uint64_t)v9, &qword_1000A1AD0);
  v118 = sub_100007984(v117, v224, &qword_1000A1AD8);
  *(_QWORD *)v5 = static VerticalAlignment.center.getter(v118);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 0;
  v119 = sub_10002BB48(a1, (uint64_t)&v5[*(int *)(v226 + 44)]);
  v120 = static Edge.Set.leading.getter(v119);
  v121 = *(_OWORD *)(a1 + 16);
  v240[0] = *(_OWORD *)a1;
  v240[1] = v121;
  v241 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v240, (uint64_t)v260, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v260, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v123 = v122;
  sub_10000DBE0((uint64_t)v240, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v124 = EdgeInsets.init(_all:)(v123);
  v126 = v125;
  v128 = v127;
  v130 = v129;
  sub_1000079C8((uint64_t)v5, (uint64_t)v7, &qword_1000A1AC0);
  v131 = &v7[*(int *)(v228 + 36)];
  *v131 = v120;
  *((double *)v131 + 1) = v124;
  *((_QWORD *)v131 + 2) = v126;
  *((_QWORD *)v131 + 3) = v128;
  *((_QWORD *)v131 + 4) = v130;
  v131[40] = 0;
  v132 = sub_100007A0C((uint64_t)v5, &qword_1000A1AC0);
  v133 = static Edge.Set.trailing.getter(v132);
  v134 = *(_OWORD *)(a1 + 16);
  v238[0] = *(_OWORD *)a1;
  v238[1] = v134;
  v239 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v238, (uint64_t)v261, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v261, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v136 = v135;
  sub_10000DBE0((uint64_t)v238, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v137 = EdgeInsets.init(_all:)(v136);
  v139 = v138;
  v141 = v140;
  v143 = v142;
  sub_1000079C8((uint64_t)v7, (uint64_t)v9, &qword_1000A1AC8);
  v144 = &v9[*(int *)(v229 + 36)];
  *v144 = v133;
  *((double *)v144 + 1) = v137;
  *((_QWORD *)v144 + 2) = v139;
  *((_QWORD *)v144 + 3) = v141;
  *((_QWORD *)v144 + 4) = v143;
  v144[40] = 0;
  sub_100007A0C((uint64_t)v7, &qword_1000A1AC8);
  v145 = v220;
  sub_1000079C8((uint64_t)v9, v220, &qword_1000A1AD0);
  *(_WORD *)(v145 + *(int *)(v227 + 36)) = 257;
  sub_100007A0C((uint64_t)v9, &qword_1000A1AD0);
  v146 = sub_100007984(v145, v223, &qword_1000A1AD8);
  *(_QWORD *)v5 = static VerticalAlignment.center.getter(v146);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 0;
  v147 = sub_10002B6A4(a1, (uint64_t)&v5[*(int *)(v226 + 44)]);
  v148 = static Edge.Set.leading.getter(v147);
  v149 = *(_OWORD *)(a1 + 16);
  v236[0] = *(_OWORD *)a1;
  v236[1] = v149;
  v237 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v236, (uint64_t)v262, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v262, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v151 = v150;
  sub_10000DBE0((uint64_t)v236, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v152 = EdgeInsets.init(_all:)(v151 + -4.0);
  v154 = v153;
  v156 = v155;
  v158 = v157;
  sub_1000079C8((uint64_t)v5, (uint64_t)v7, &qword_1000A1AC0);
  v159 = &v7[*(int *)(v228 + 36)];
  *v159 = v148;
  *((double *)v159 + 1) = v152;
  *((_QWORD *)v159 + 2) = v154;
  *((_QWORD *)v159 + 3) = v156;
  *((_QWORD *)v159 + 4) = v158;
  v159[40] = 0;
  v160 = sub_100007A0C((uint64_t)v5, &qword_1000A1AC0);
  v161 = static Edge.Set.trailing.getter(v160);
  v162 = *(_OWORD *)(a1 + 16);
  v234[0] = *(_OWORD *)a1;
  v234[1] = v162;
  v235 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v234, (uint64_t)v263, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v263, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v164 = v163;
  sub_10000DBE0((uint64_t)v234, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v165 = EdgeInsets.init(_all:)(v164 + -4.0);
  v167 = v166;
  v169 = v168;
  v171 = v170;
  sub_1000079C8((uint64_t)v7, (uint64_t)v9, &qword_1000A1AC8);
  v172 = &v9[*(int *)(v229 + 36)];
  *v172 = v161;
  *((double *)v172 + 1) = v165;
  *((_QWORD *)v172 + 2) = v167;
  *((_QWORD *)v172 + 3) = v169;
  *((_QWORD *)v172 + 4) = v171;
  v172[40] = 0;
  sub_100007A0C((uint64_t)v7, &qword_1000A1AC8);
  v173 = v222;
  sub_1000079C8((uint64_t)v9, v222, &qword_1000A1AD0);
  *(_WORD *)(v173 + *(int *)(v227 + 36)) = 257;
  sub_100007A0C((uint64_t)v9, &qword_1000A1AD0);
  v174 = sub_100007984(v173, v220, &qword_1000A1AD8);
  *(_QWORD *)v5 = static VerticalAlignment.center.getter(v174);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 0;
  v175 = sub_10002BB48(a1, (uint64_t)&v5[*(int *)(v226 + 44)]);
  v176 = static Edge.Set.leading.getter(v175);
  v177 = *(_OWORD *)(a1 + 16);
  v232[0] = *(_OWORD *)a1;
  v232[1] = v177;
  v233 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v232, (uint64_t)v264, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v264, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v179 = v178;
  sub_10000DBE0((uint64_t)v232, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v180 = EdgeInsets.init(_all:)(v179 + -4.0);
  v182 = v181;
  v184 = v183;
  v186 = v185;
  sub_1000079C8((uint64_t)v5, (uint64_t)v7, &qword_1000A1AC0);
  v187 = &v7[*(int *)(v228 + 36)];
  *v187 = v176;
  *((double *)v187 + 1) = v180;
  *((_QWORD *)v187 + 2) = v182;
  *((_QWORD *)v187 + 3) = v184;
  *((_QWORD *)v187 + 4) = v186;
  v187[40] = 0;
  v188 = sub_100007A0C((uint64_t)v5, &qword_1000A1AC0);
  v189 = static Edge.Set.trailing.getter(v188);
  v190 = *(_OWORD *)(a1 + 16);
  v230[0] = *(_OWORD *)a1;
  v230[1] = v190;
  v231 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v230, (uint64_t)v265, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v265, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v192 = v191;
  sub_10000DBE0((uint64_t)v230, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v193 = EdgeInsets.init(_all:)(v192 + -4.0);
  v195 = v194;
  v197 = v196;
  v199 = v198;
  sub_1000079C8((uint64_t)v7, (uint64_t)v9, &qword_1000A1AC8);
  v200 = &v9[*(int *)(v229 + 36)];
  *v200 = v189;
  *((double *)v200 + 1) = v193;
  *((_QWORD *)v200 + 2) = v195;
  *((_QWORD *)v200 + 3) = v197;
  *((_QWORD *)v200 + 4) = v199;
  v200[40] = 0;
  sub_100007A0C((uint64_t)v7, &qword_1000A1AC8);
  v201 = v219;
  sub_1000079C8((uint64_t)v9, v219, &qword_1000A1AD0);
  *(_WORD *)(v201 + *(int *)(v227 + 36)) = 257;
  sub_100007A0C((uint64_t)v9, &qword_1000A1AD0);
  v202 = v222;
  sub_100007984(v201, v222, &qword_1000A1AD8);
  sub_1000079C8(v221, v201, &qword_1000A1AD8);
  v203 = v213;
  sub_1000079C8(v225, v213, &qword_1000A1AD8);
  v204 = v214;
  sub_1000079C8(v224, v214, &qword_1000A1AD8);
  v205 = v215;
  sub_1000079C8(v223, v215, &qword_1000A1AD8);
  v206 = v220;
  v207 = v216;
  sub_1000079C8(v220, v216, &qword_1000A1AD8);
  v208 = v217;
  sub_1000079C8(v202, v217, &qword_1000A1AD8);
  v209 = v218;
  sub_1000079C8(v201, v218, &qword_1000A1AD8);
  v210 = (int *)sub_100005F78(&qword_1000A1AE8);
  sub_1000079C8(v203, v209 + v210[12], &qword_1000A1AD8);
  sub_1000079C8(v204, v209 + v210[16], &qword_1000A1AD8);
  sub_1000079C8(v205, v209 + v210[20], &qword_1000A1AD8);
  sub_1000079C8(v207, v209 + v210[24], &qword_1000A1AD8);
  sub_1000079C8(v208, v209 + v210[28], &qword_1000A1AD8);
  sub_100007A0C(v222, &qword_1000A1AD8);
  sub_100007A0C(v206, &qword_1000A1AD8);
  sub_100007A0C(v223, &qword_1000A1AD8);
  sub_100007A0C(v224, &qword_1000A1AD8);
  sub_100007A0C(v225, &qword_1000A1AD8);
  sub_100007A0C(v221, &qword_1000A1AD8);
  sub_100007A0C(v208, &qword_1000A1AD8);
  sub_100007A0C(v207, &qword_1000A1AD8);
  sub_100007A0C(v205, &qword_1000A1AD8);
  sub_100007A0C(v204, &qword_1000A1AD8);
  sub_100007A0C(v203, &qword_1000A1AD8);
  return sub_100007A0C(v219, &qword_1000A1AD8);
}

uint64_t sub_10002AD5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  uint64_t v49;
  uint64_t KeyPath;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v64 = a2;
  v61 = type metadata accessor for LabelView(0);
  __chkstk_darwin(v61);
  v4 = (uint64_t *)((char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v63 = sub_100005F78(&qword_1000A1AF0);
  v5 = __chkstk_darwin(v63);
  v60 = (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v62 = (uint64_t)&v57 - v7;
  v8 = type metadata accessor for ReadingProgressIconView(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v59 = sub_100005F78(&qword_1000A1AF8);
  v11 = __chkstk_darwin(v59);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v58 = (uint64_t)&v57 - v14;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = a1 + *(int *)(type metadata accessor for SmallReadingGoalView(0) + 24);
  v17 = (int *)type metadata accessor for SmallReadingGoalView.ViewConfiguration(0);
  v18 = *(_QWORD *)(v16 + v17[12]);
  v19 = *(_QWORD *)(v16 + v17[13]);
  v20 = (int *)type metadata accessor for ReadingProgressIconView.ViewConfiguration(0);
  v21 = (char *)v10 + v20[7];
  v22 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, v16, v22);
  v23 = *(_QWORD *)(v16 + v17[14]);
  v24 = *(_QWORD *)(v16 + v17[15]);
  sub_1000078D4(v16 + v17[10], (uint64_t)v10 + v20[10], type metadata accessor for CircularProgressView.Content);
  *v10 = v15;
  v10[1] = v18;
  v10[2] = v19;
  *(_QWORD *)((char *)v10 + v20[8]) = v23;
  *(_QWORD *)((char *)v10 + v20[9]) = v24;
  *((_BYTE *)v10 + v20[11]) = 0;
  swift_retain(v18);
  v25 = swift_retain(v19);
  LOBYTE(v19) = static Edge.Set.trailing.getter(v25);
  v26 = EdgeInsets.init(_all:)(*(double *)(v16 + v17[6]));
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_1000078D4((uint64_t)v10, (uint64_t)v13, type metadata accessor for ReadingProgressIconView);
  v33 = &v13[*(int *)(v59 + 36)];
  *v33 = v19;
  *((double *)v33 + 1) = v26;
  *((_QWORD *)v33 + 2) = v28;
  *((_QWORD *)v33 + 3) = v30;
  *((_QWORD *)v33 + 4) = v32;
  v33[40] = 0;
  sub_100007A48((uint64_t)v10, type metadata accessor for ReadingProgressIconView);
  v34 = v58;
  sub_100007984((uint64_t)v13, v58, &qword_1000A1AF8);
  v35 = *(_OWORD *)(a1 + 120);
  v36 = *(_OWORD *)(a1 + 152);
  v71 = *(_OWORD *)(a1 + 136);
  v72 = v36;
  v73 = *(_QWORD *)(a1 + 168);
  v37 = *(_OWORD *)(a1 + 56);
  v38 = *(_OWORD *)(a1 + 88);
  v67 = *(_OWORD *)(a1 + 72);
  v68 = v38;
  v69 = *(_OWORD *)(a1 + 104);
  v70 = v35;
  v65 = *(_OWORD *)(a1 + 40);
  v66 = v37;
  v39 = sub_100051DA4();
  v41 = v40;
  v42 = *(_QWORD *)(v16 + v17[11]);
  v43 = swift_retain(v42);
  v44 = static HierarchicalShapeStyle.primary.getter(v43);
  *v4 = swift_getKeyPath(&unk_100080008);
  v45 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v4, v45, 0);
  v46 = v61;
  v47 = (_QWORD *)((char *)v4 + *(int *)(v61 + 20));
  *v47 = v39;
  v47[1] = v41;
  *(_QWORD *)((char *)v4 + *(int *)(v46 + 24)) = v42;
  v48 = (char *)v4 + *(int *)(v46 + 28);
  *(_QWORD *)v48 = v44;
  *((_QWORD *)v48 + 1) = 0;
  *((_WORD *)v48 + 8) = 1;
  v49 = *(_QWORD *)(v16 + v17[5]);
  KeyPath = swift_getKeyPath(&unk_100080038);
  v51 = v60;
  sub_1000078D4((uint64_t)v4, v60, type metadata accessor for LabelView);
  v52 = v51 + *(int *)(v63 + 36);
  *(_QWORD *)v52 = KeyPath;
  *(_QWORD *)(v52 + 8) = v49;
  *(_BYTE *)(v52 + 16) = 0;
  sub_100007A48((uint64_t)v4, type metadata accessor for LabelView);
  v53 = v62;
  sub_100007984(v51, v62, &qword_1000A1AF0);
  sub_1000079C8(v34, (uint64_t)v13, &qword_1000A1AF8);
  sub_1000079C8(v53, v51, &qword_1000A1AF0);
  v54 = v64;
  sub_1000079C8((uint64_t)v13, v64, &qword_1000A1AF8);
  v55 = sub_100005F78(&qword_1000A1B00);
  sub_1000079C8(v51, v54 + *(int *)(v55 + 48), &qword_1000A1AF0);
  sub_100007A0C(v53, &qword_1000A1AF0);
  sub_100007A0C(v34, &qword_1000A1AF8);
  sub_100007A0C(v51, &qword_1000A1AF0);
  return sub_100007A0C((uint64_t)v13, &qword_1000A1AF8);
}

uint64_t sub_10002B1FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  uint64_t v49;
  uint64_t KeyPath;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v64 = a2;
  v61 = type metadata accessor for LabelView(0);
  __chkstk_darwin(v61);
  v4 = (uint64_t *)((char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v63 = sub_100005F78(&qword_1000A1AF0);
  v5 = __chkstk_darwin(v63);
  v60 = (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v62 = (uint64_t)&v57 - v7;
  v8 = type metadata accessor for ReadingProgressIconView(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v59 = sub_100005F78(&qword_1000A1AF8);
  v11 = __chkstk_darwin(v59);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v58 = (uint64_t)&v57 - v14;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = a1 + *(int *)(type metadata accessor for SmallReadingGoalView(0) + 24);
  v17 = (int *)type metadata accessor for SmallReadingGoalView.ViewConfiguration(0);
  v18 = *(_QWORD *)(v16 + v17[12]);
  v19 = *(_QWORD *)(v16 + v17[13]);
  v20 = (int *)type metadata accessor for ReadingProgressIconView.ViewConfiguration(0);
  v21 = (char *)v10 + v20[7];
  v22 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, v16, v22);
  v23 = *(_QWORD *)(v16 + v17[14]);
  v24 = *(_QWORD *)(v16 + v17[15]);
  sub_1000078D4(v16 + v17[10], (uint64_t)v10 + v20[10], type metadata accessor for CircularProgressView.Content);
  *v10 = v15;
  v10[1] = v18;
  v10[2] = v19;
  *(_QWORD *)((char *)v10 + v20[8]) = v23;
  *(_QWORD *)((char *)v10 + v20[9]) = v24;
  *((_BYTE *)v10 + v20[11]) = 0;
  swift_retain(v18);
  v25 = swift_retain(v19);
  LOBYTE(v19) = static Edge.Set.trailing.getter(v25);
  v26 = EdgeInsets.init(_all:)(*(double *)(v16 + v17[6]) + -2.0);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_1000078D4((uint64_t)v10, (uint64_t)v13, type metadata accessor for ReadingProgressIconView);
  v33 = &v13[*(int *)(v59 + 36)];
  *v33 = v19;
  *((double *)v33 + 1) = v26;
  *((_QWORD *)v33 + 2) = v28;
  *((_QWORD *)v33 + 3) = v30;
  *((_QWORD *)v33 + 4) = v32;
  v33[40] = 0;
  sub_100007A48((uint64_t)v10, type metadata accessor for ReadingProgressIconView);
  v34 = v58;
  sub_100007984((uint64_t)v13, v58, &qword_1000A1AF8);
  v35 = *(_OWORD *)(a1 + 120);
  v36 = *(_OWORD *)(a1 + 152);
  v71 = *(_OWORD *)(a1 + 136);
  v72 = v36;
  v73 = *(_QWORD *)(a1 + 168);
  v37 = *(_OWORD *)(a1 + 56);
  v38 = *(_OWORD *)(a1 + 88);
  v67 = *(_OWORD *)(a1 + 72);
  v68 = v38;
  v69 = *(_OWORD *)(a1 + 104);
  v70 = v35;
  v65 = *(_OWORD *)(a1 + 40);
  v66 = v37;
  v39 = sub_100051DA4();
  v41 = v40;
  v42 = *(_QWORD *)(v16 + v17[11]);
  v43 = swift_retain(v42);
  v44 = static HierarchicalShapeStyle.primary.getter(v43);
  *v4 = swift_getKeyPath(&unk_100080008);
  v45 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v4, v45, 0);
  v46 = v61;
  v47 = (_QWORD *)((char *)v4 + *(int *)(v61 + 20));
  *v47 = v39;
  v47[1] = v41;
  *(_QWORD *)((char *)v4 + *(int *)(v46 + 24)) = v42;
  v48 = (char *)v4 + *(int *)(v46 + 28);
  *(_QWORD *)v48 = v44;
  *((_QWORD *)v48 + 1) = 0;
  *((_WORD *)v48 + 8) = 1;
  v49 = *(_QWORD *)(v16 + v17[5]);
  KeyPath = swift_getKeyPath(&unk_100080038);
  v51 = v60;
  sub_1000078D4((uint64_t)v4, v60, type metadata accessor for LabelView);
  v52 = v51 + *(int *)(v63 + 36);
  *(_QWORD *)v52 = KeyPath;
  *(_QWORD *)(v52 + 8) = v49;
  *(_BYTE *)(v52 + 16) = 0;
  sub_100007A48((uint64_t)v4, type metadata accessor for LabelView);
  v53 = v62;
  sub_100007984(v51, v62, &qword_1000A1AF0);
  sub_1000079C8(v34, (uint64_t)v13, &qword_1000A1AF8);
  sub_1000079C8(v53, v51, &qword_1000A1AF0);
  v54 = v64;
  sub_1000079C8((uint64_t)v13, v64, &qword_1000A1AF8);
  v55 = sub_100005F78(&qword_1000A1B00);
  sub_1000079C8(v51, v54 + *(int *)(v55 + 48), &qword_1000A1AF0);
  sub_100007A0C(v53, &qword_1000A1AF0);
  sub_100007A0C(v34, &qword_1000A1AF8);
  sub_100007A0C(v51, &qword_1000A1AF0);
  return sub_100007A0C((uint64_t)v13, &qword_1000A1AF8);
}

uint64_t sub_10002B6A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  uint64_t v49;
  uint64_t KeyPath;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v64 = a2;
  v61 = type metadata accessor for LabelView(0);
  __chkstk_darwin(v61);
  v4 = (uint64_t *)((char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v63 = sub_100005F78(&qword_1000A1AF0);
  v5 = __chkstk_darwin(v63);
  v60 = (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v62 = (uint64_t)&v57 - v7;
  v8 = type metadata accessor for ReadingProgressIconView(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v59 = sub_100005F78(&qword_1000A1AF8);
  v11 = __chkstk_darwin(v59);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v58 = (uint64_t)&v57 - v14;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = a1 + *(int *)(type metadata accessor for SmallReadingGoalView(0) + 24);
  v17 = (int *)type metadata accessor for SmallReadingGoalView.ViewConfiguration(0);
  v18 = *(_QWORD *)(v16 + v17[12]);
  v19 = *(_QWORD *)(v16 + v17[13]);
  v20 = (int *)type metadata accessor for ReadingProgressIconView.ViewConfiguration(0);
  v21 = (char *)v10 + v20[7];
  v22 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, v16, v22);
  v23 = *(_QWORD *)(v16 + v17[14]);
  v24 = *(_QWORD *)(v16 + v17[15]);
  sub_1000078D4(v16 + v17[10], (uint64_t)v10 + v20[10], type metadata accessor for CircularProgressView.Content);
  *v10 = v15;
  v10[1] = v18;
  v10[2] = v19;
  *(_QWORD *)((char *)v10 + v20[8]) = v23;
  *(_QWORD *)((char *)v10 + v20[9]) = v24;
  *((_BYTE *)v10 + v20[11]) = 1;
  swift_retain(v18);
  v25 = swift_retain(v19);
  LOBYTE(v19) = static Edge.Set.trailing.getter(v25);
  v26 = EdgeInsets.init(_all:)(*(double *)(v16 + v17[6]));
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_1000078D4((uint64_t)v10, (uint64_t)v13, type metadata accessor for ReadingProgressIconView);
  v33 = &v13[*(int *)(v59 + 36)];
  *v33 = v19;
  *((double *)v33 + 1) = v26;
  *((_QWORD *)v33 + 2) = v28;
  *((_QWORD *)v33 + 3) = v30;
  *((_QWORD *)v33 + 4) = v32;
  v33[40] = 0;
  sub_100007A48((uint64_t)v10, type metadata accessor for ReadingProgressIconView);
  v34 = v58;
  sub_100007984((uint64_t)v13, v58, &qword_1000A1AF8);
  v35 = *(_OWORD *)(a1 + 120);
  v36 = *(_OWORD *)(a1 + 152);
  v71 = *(_OWORD *)(a1 + 136);
  v72 = v36;
  v73 = *(_QWORD *)(a1 + 168);
  v37 = *(_OWORD *)(a1 + 56);
  v38 = *(_OWORD *)(a1 + 88);
  v67 = *(_OWORD *)(a1 + 72);
  v68 = v38;
  v69 = *(_OWORD *)(a1 + 104);
  v70 = v35;
  v65 = *(_OWORD *)(a1 + 40);
  v66 = v37;
  v39 = sub_100051DA4();
  v41 = v40;
  v42 = *(_QWORD *)(v16 + v17[11]);
  v43 = swift_retain(v42);
  v44 = static HierarchicalShapeStyle.primary.getter(v43);
  *v4 = swift_getKeyPath(&unk_100080008);
  v45 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v4, v45, 0);
  v46 = v61;
  v47 = (_QWORD *)((char *)v4 + *(int *)(v61 + 20));
  *v47 = v39;
  v47[1] = v41;
  *(_QWORD *)((char *)v4 + *(int *)(v46 + 24)) = v42;
  v48 = (char *)v4 + *(int *)(v46 + 28);
  *(_QWORD *)v48 = v44;
  *((_QWORD *)v48 + 1) = 0;
  *((_WORD *)v48 + 8) = 1;
  v49 = *(_QWORD *)(v16 + v17[5]);
  KeyPath = swift_getKeyPath(&unk_100080038);
  v51 = v60;
  sub_1000078D4((uint64_t)v4, v60, type metadata accessor for LabelView);
  v52 = v51 + *(int *)(v63 + 36);
  *(_QWORD *)v52 = KeyPath;
  *(_QWORD *)(v52 + 8) = v49;
  *(_BYTE *)(v52 + 16) = 0;
  sub_100007A48((uint64_t)v4, type metadata accessor for LabelView);
  v53 = v62;
  sub_100007984(v51, v62, &qword_1000A1AF0);
  sub_1000079C8(v34, (uint64_t)v13, &qword_1000A1AF8);
  sub_1000079C8(v53, v51, &qword_1000A1AF0);
  v54 = v64;
  sub_1000079C8((uint64_t)v13, v64, &qword_1000A1AF8);
  v55 = sub_100005F78(&qword_1000A1B00);
  sub_1000079C8(v51, v54 + *(int *)(v55 + 48), &qword_1000A1AF0);
  sub_100007A0C(v53, &qword_1000A1AF0);
  sub_100007A0C(v34, &qword_1000A1AF8);
  sub_100007A0C(v51, &qword_1000A1AF0);
  return sub_100007A0C((uint64_t)v13, &qword_1000A1AF8);
}

uint64_t sub_10002BB48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  uint64_t v49;
  uint64_t KeyPath;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v64 = a2;
  v61 = type metadata accessor for LabelView(0);
  __chkstk_darwin(v61);
  v4 = (uint64_t *)((char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v63 = sub_100005F78(&qword_1000A1AF0);
  v5 = __chkstk_darwin(v63);
  v60 = (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v62 = (uint64_t)&v57 - v7;
  v8 = type metadata accessor for ReadingProgressIconView(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v59 = sub_100005F78(&qword_1000A1AF8);
  v11 = __chkstk_darwin(v59);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v58 = (uint64_t)&v57 - v14;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = a1 + *(int *)(type metadata accessor for SmallReadingGoalView(0) + 24);
  v17 = (int *)type metadata accessor for SmallReadingGoalView.ViewConfiguration(0);
  v18 = *(_QWORD *)(v16 + v17[12]);
  v19 = *(_QWORD *)(v16 + v17[13]);
  v20 = (int *)type metadata accessor for ReadingProgressIconView.ViewConfiguration(0);
  v21 = (char *)v10 + v20[7];
  v22 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, v16, v22);
  v23 = *(_QWORD *)(v16 + v17[14]);
  v24 = *(_QWORD *)(v16 + v17[15]);
  sub_1000078D4(v16 + v17[10], (uint64_t)v10 + v20[10], type metadata accessor for CircularProgressView.Content);
  *v10 = v15;
  v10[1] = v18;
  v10[2] = v19;
  *(_QWORD *)((char *)v10 + v20[8]) = v23;
  *(_QWORD *)((char *)v10 + v20[9]) = v24;
  *((_BYTE *)v10 + v20[11]) = 1;
  swift_retain(v18);
  v25 = swift_retain(v19);
  LOBYTE(v19) = static Edge.Set.trailing.getter(v25);
  v26 = EdgeInsets.init(_all:)(*(double *)(v16 + v17[6]) + -2.0);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_1000078D4((uint64_t)v10, (uint64_t)v13, type metadata accessor for ReadingProgressIconView);
  v33 = &v13[*(int *)(v59 + 36)];
  *v33 = v19;
  *((double *)v33 + 1) = v26;
  *((_QWORD *)v33 + 2) = v28;
  *((_QWORD *)v33 + 3) = v30;
  *((_QWORD *)v33 + 4) = v32;
  v33[40] = 0;
  sub_100007A48((uint64_t)v10, type metadata accessor for ReadingProgressIconView);
  v34 = v58;
  sub_100007984((uint64_t)v13, v58, &qword_1000A1AF8);
  v35 = *(_OWORD *)(a1 + 120);
  v36 = *(_OWORD *)(a1 + 152);
  v71 = *(_OWORD *)(a1 + 136);
  v72 = v36;
  v73 = *(_QWORD *)(a1 + 168);
  v37 = *(_OWORD *)(a1 + 56);
  v38 = *(_OWORD *)(a1 + 88);
  v67 = *(_OWORD *)(a1 + 72);
  v68 = v38;
  v69 = *(_OWORD *)(a1 + 104);
  v70 = v35;
  v65 = *(_OWORD *)(a1 + 40);
  v66 = v37;
  v39 = sub_100051DA4();
  v41 = v40;
  v42 = *(_QWORD *)(v16 + v17[11]);
  v43 = swift_retain(v42);
  v44 = static HierarchicalShapeStyle.primary.getter(v43);
  *v4 = swift_getKeyPath(&unk_100080008);
  v45 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v4, v45, 0);
  v46 = v61;
  v47 = (_QWORD *)((char *)v4 + *(int *)(v61 + 20));
  *v47 = v39;
  v47[1] = v41;
  *(_QWORD *)((char *)v4 + *(int *)(v46 + 24)) = v42;
  v48 = (char *)v4 + *(int *)(v46 + 28);
  *(_QWORD *)v48 = v44;
  *((_QWORD *)v48 + 1) = 0;
  *((_WORD *)v48 + 8) = 1;
  v49 = *(_QWORD *)(v16 + v17[5]);
  KeyPath = swift_getKeyPath(&unk_100080038);
  v51 = v60;
  sub_1000078D4((uint64_t)v4, v60, type metadata accessor for LabelView);
  v52 = v51 + *(int *)(v63 + 36);
  *(_QWORD *)v52 = KeyPath;
  *(_QWORD *)(v52 + 8) = v49;
  *(_BYTE *)(v52 + 16) = 0;
  sub_100007A48((uint64_t)v4, type metadata accessor for LabelView);
  v53 = v62;
  sub_100007984(v51, v62, &qword_1000A1AF0);
  sub_1000079C8(v34, (uint64_t)v13, &qword_1000A1AF8);
  sub_1000079C8(v53, v51, &qword_1000A1AF0);
  v54 = v64;
  sub_1000079C8((uint64_t)v13, v64, &qword_1000A1AF8);
  v55 = sub_100005F78(&qword_1000A1B00);
  sub_1000079C8(v51, v54 + *(int *)(v55 + 48), &qword_1000A1AF0);
  sub_100007A0C(v53, &qword_1000A1AF0);
  sub_100007A0C(v34, &qword_1000A1AF8);
  sub_100007A0C(v51, &qword_1000A1AF0);
  return sub_100007A0C((uint64_t)v13, &qword_1000A1AF8);
}

uint64_t sub_10002BFF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = sub_100005F78(&qword_1000A1A20);
  return sub_100028A9C(v2, (char *)(a2 + *(int *)(v4 + 44)));
}

unint64_t sub_10002C038()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1A48;
  if (!qword_1000A1A48)
  {
    v1 = sub_100005FC0(&qword_1000A1880);
    sub_100007F64(&qword_1000A1A50, &qword_1000A1878, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1A48);
  }
  return result;
}

uint64_t sub_10002C0BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100029960(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10002C0C4()
{
  return sub_10000E208(&qword_1000A1A68, &qword_1000A1A70, (void (*)(void))sub_10002C0E8);
}

uint64_t sub_10002C0E8()
{
  return sub_10000E208(&qword_1000A1A78, &qword_1000A1A80, (void (*)(void))sub_10002C10C);
}

unint64_t sub_10002C10C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1A88;
  if (!qword_1000A1A88)
  {
    v1 = sub_100005FC0(&qword_1000A1A90);
    sub_100007F64(&qword_1000A1A98, &qword_1000A1AA0, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1A88);
  }
  return result;
}

uint64_t sub_10002C198@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10002C1C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10002C1F8(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10002C224(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10002C250()
{
  return sub_100007F64(&qword_1000A1B48, &qword_1000A1B50, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_10002C27C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = enum case for BlendMode.plusLighter(_:);
  v3 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = (int *)type metadata accessor for MediumReadingGoalView.ViewConfiguration(0);
  *(_QWORD *)(a1 + v4[5]) = 0x4040000000000000;
  *(_QWORD *)(a1 + v4[6]) = 1;
  *(_QWORD *)(a1 + v4[7]) = 0x4010000000000000;
  v5 = (_QWORD *)(a1 + v4[8]);
  *v5 = 0x69662E656D616C66;
  v5[1] = 0xEA00000000006C6CLL;
  v6 = v4[9];
  v7 = static Color.white.getter(v4);
  *(_QWORD *)(a1 + v6) = v7;
  v8 = v4[10];
  v9 = static Font.caption2.getter(v7);
  *(_QWORD *)(a1 + v8) = v9;
  v10 = v4[11];
  *(double *)(a1 + v10) = static Font.Weight.semibold.getter(v9);
  *(_QWORD *)(a1 + v4[12]) = 0x4008000000000000;
  *(_QWORD *)(a1 + v4[13]) = 0x4008000000000000;
  v11 = v4[14];
  v13 = static Font.caption2.getter(v12);
  *(_QWORD *)(a1 + v11) = v13;
  v14 = v4[15];
  v15 = static Color.white.getter(v13);
  *(_QWORD *)(a1 + v14) = v15;
  v16 = v4[16];
  v17 = static Color.white.getter(v15);
  v18 = Color.opacity(_:)(0.2);
  swift_release(v17);
  *(_QWORD *)(a1 + v16) = v18;
  *(_QWORD *)(a1 + v4[17]) = 0x4008000000000000;
  *(_QWORD *)(a1 + v4[18]) = 0x4028000000000000;
  v19 = (_QWORD *)(a1 + v4[19]);
  *v19 = 0xD000000000000015;
  v19[1] = 0x800000010007C220;
  v20 = a1 + v4[20];
  v21 = sub_100005F78(&qword_1000A0A50);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *(_QWORD *)(a1 + v4[21]) = 0x4062C00000000000;
  return result;
}

uint64_t type metadata accessor for MediumReadingGoalView.ViewConfiguration(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A1BB0, (uint64_t)&nominal type descriptor for MediumReadingGoalView.ViewConfiguration);
}

uint64_t *sub_10002C42C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void (*v56)(uint64_t *, uint64_t *);
  uint64_t v57;
  _QWORD *__dst;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v34 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v34 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v34);
  }
  else
  {
    v7 = type metadata accessor for BlendMode(0);
    v56 = *(void (**)(uint64_t *, uint64_t *))(*(_QWORD *)(v7 - 8) + 16);
    v57 = v7;
    v56(a1, a2);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    v9 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = a3[9];
    v14 = a3[10];
    v15 = *(uint64_t *)((char *)a2 + v13);
    *(uint64_t *)((char *)a1 + v13) = v15;
    v16 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = v16;
    v17 = a3[12];
    *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    *(uint64_t *)((char *)a1 + v17) = *(uint64_t *)((char *)a2 + v17);
    v18 = a3[14];
    *(uint64_t *)((char *)a1 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    v19 = *(uint64_t *)((char *)a2 + v18);
    *(uint64_t *)((char *)a1 + v18) = v19;
    v20 = a3[15];
    v21 = a3[16];
    v22 = *(uint64_t *)((char *)a2 + v20);
    *(uint64_t *)((char *)a1 + v20) = v22;
    v23 = *(uint64_t *)((char *)a2 + v21);
    *(uint64_t *)((char *)a1 + v21) = v23;
    v24 = a3[18];
    *(uint64_t *)((char *)a1 + a3[17]) = *(uint64_t *)((char *)a2 + a3[17]);
    *(uint64_t *)((char *)a1 + v24) = *(uint64_t *)((char *)a2 + v24);
    v25 = a3[19];
    v26 = a3[20];
    v27 = (uint64_t *)((char *)a1 + v25);
    v28 = (uint64_t *)((char *)a2 + v25);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    __dst = (uint64_t *)((char *)a1 + v26);
    v30 = (uint64_t *)((char *)a2 + v26);
    swift_bridgeObjectRetain(v12);
    swift_retain(v15);
    swift_retain(v16);
    swift_retain(v19);
    swift_retain(v22);
    swift_retain(v23);
    swift_bridgeObjectRetain(v29);
    v31 = (int *)sub_100005F78(&qword_1000A0A50);
    v32 = *((_QWORD *)v31 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v32 + 48))(v30, 1, v31))
    {
      v33 = type metadata accessor for CircularProgressView.Content(0);
      memcpy(__dst, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v35 = v30[1];
      *__dst = *v30;
      __dst[1] = v35;
      v36 = v31[12];
      v37 = (_QWORD *)((char *)__dst + v36);
      v38 = (_QWORD *)((char *)v30 + v36);
      v39 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v35);
      if (swift_getEnumCaseMultiPayload(v38, v39) == 1)
      {
        v40 = *v38;
        *v37 = *v38;
        swift_retain(v40);
        v41 = 1;
      }
      else
      {
        *(_DWORD *)v37 = *(_DWORD *)v38;
        v42 = sub_100005F78(&qword_1000A18C0);
        ((void (*)(char *, char *, uint64_t))v56)((char *)v37 + *(int *)(v42 + 48), (char *)v38 + *(int *)(v42 + 48), v57);
        v43 = *(int *)(v42 + 64);
        v44 = (char *)v37 + v43;
        v45 = (char *)v38 + v43;
        v46 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
        v41 = 0;
      }
      swift_storeEnumTagMultiPayload(v37, v39, v41);
      v47 = v31[16];
      v48 = (char *)__dst + v47;
      v49 = (char *)v30 + v47;
      v50 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
      v51 = v31[20];
      v52 = (char *)__dst + v51;
      v53 = (char *)v30 + v51;
      v54 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
      *(_QWORD *)((char *)__dst + v31[24]) = *(_QWORD *)((char *)v30 + v31[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v32 + 56))(__dst, 0, 1, v31);
    }
    *(uint64_t *)((char *)a1 + a3[21]) = *(uint64_t *)((char *)a2 + a3[21]);
  }
  return a1;
}

uint64_t sub_10002C758(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  int *v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for BlendMode(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  swift_release(*(_QWORD *)(a1 + a2[9]));
  swift_release(*(_QWORD *)(a1 + a2[10]));
  swift_release(*(_QWORD *)(a1 + a2[14]));
  swift_release(*(_QWORD *)(a1 + a2[15]));
  swift_release(*(_QWORD *)(a1 + a2[16]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[19] + 8));
  v6 = a1 + a2[20];
  v7 = (int *)sub_100005F78(&qword_1000A0A50);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
    v9 = (_QWORD *)(v6 + v7[12]);
    v10 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      swift_release(*v9);
    }
    else
    {
      v11 = sub_100005F78(&qword_1000A18C0);
      v5((uint64_t)v9 + *(int *)(v11 + 48), v4);
      v12 = (char *)v9 + *(int *)(v11 + 64);
      v13 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    }
    v14 = v6 + v7[16];
    v15 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    v16 = v6 + v7[20];
    v17 = type metadata accessor for Font.Design(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  }
  return result;
}

uint64_t sub_10002C90C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  _QWORD *__dst;

  v6 = type metadata accessor for BlendMode(0);
  v54 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v55 = v6;
  v54(a1, a2);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a3[9];
  v13 = a3[10];
  v14 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v14;
  v15 = *(_QWORD *)(a2 + v13);
  *(_QWORD *)(a1 + v13) = v15;
  v16 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  v17 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v18 = *(_QWORD *)(a2 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  v19 = a3[15];
  v20 = a3[16];
  v21 = *(_QWORD *)(a2 + v19);
  *(_QWORD *)(a1 + v19) = v21;
  v22 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v22;
  v23 = a3[18];
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);
  v24 = a3[19];
  v25 = a3[20];
  v26 = (_QWORD *)(a1 + v24);
  v27 = (_QWORD *)(a2 + v24);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  __dst = (_QWORD *)(a1 + v25);
  v29 = (_QWORD *)(a2 + v25);
  swift_bridgeObjectRetain(v11);
  swift_retain(v14);
  swift_retain(v15);
  swift_retain(v18);
  swift_retain(v21);
  swift_retain(v22);
  swift_bridgeObjectRetain(v28);
  v30 = (int *)sub_100005F78(&qword_1000A0A50);
  v31 = *((_QWORD *)v30 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
  {
    v32 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(__dst, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v33 = v29[1];
    *__dst = *v29;
    __dst[1] = v33;
    v34 = v30[12];
    v35 = (_QWORD *)((char *)__dst + v34);
    v36 = (_QWORD *)((char *)v29 + v34);
    v37 = type metadata accessor for CircularProgressView.ColorStyle(0);
    swift_bridgeObjectRetain(v33);
    if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
    {
      v38 = *v36;
      *v35 = *v36;
      swift_retain(v38);
      v39 = 1;
    }
    else
    {
      *(_DWORD *)v35 = *(_DWORD *)v36;
      v40 = sub_100005F78(&qword_1000A18C0);
      ((void (*)(char *, char *, uint64_t))v54)((char *)v35 + *(int *)(v40 + 48), (char *)v36 + *(int *)(v40 + 48), v55);
      v41 = *(int *)(v40 + 64);
      v42 = (char *)v35 + v41;
      v43 = (char *)v36 + v41;
      v44 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
      v39 = 0;
    }
    swift_storeEnumTagMultiPayload(v35, v37, v39);
    v45 = v30[16];
    v46 = (char *)__dst + v45;
    v47 = (char *)v29 + v45;
    v48 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
    v49 = v30[20];
    v50 = (char *)__dst + v49;
    v51 = (char *)v29 + v49;
    v52 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
    *(_QWORD *)((char *)__dst + v30[24]) = *(_QWORD *)((char *)v29 + v30[24]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v31 + 56))(__dst, 0, 1, v30);
  }
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  return a1;
}

uint64_t sub_10002CC0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int *v36;
  uint64_t (*v37)(_QWORD *, uint64_t, int *);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v6 = type metadata accessor for BlendMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v8 = a3[8];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v11 = v10[1];
  v12 = v9[1];
  v9[1] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = a3[9];
  v14 = *(_QWORD *)(a2 + v13);
  v15 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = v14;
  swift_retain(v14);
  swift_release(v15);
  v16 = a3[10];
  v17 = *(_QWORD *)(a2 + v16);
  v18 = *(_QWORD *)(a1 + v16);
  *(_QWORD *)(a1 + v16) = v17;
  swift_retain(v17);
  swift_release(v18);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v19 = a3[14];
  v20 = *(_QWORD *)(a2 + v19);
  v21 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = v20;
  swift_retain(v20);
  swift_release(v21);
  v22 = a3[15];
  v23 = *(_QWORD *)(a2 + v22);
  v24 = *(_QWORD *)(a1 + v22);
  *(_QWORD *)(a1 + v22) = v23;
  swift_retain(v23);
  swift_release(v24);
  v25 = a3[16];
  v26 = *(_QWORD *)(a2 + v25);
  v27 = *(_QWORD *)(a1 + v25);
  *(_QWORD *)(a1 + v25) = v26;
  swift_retain(v26);
  swift_release(v27);
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  v28 = a3[19];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (_QWORD *)(a2 + v28);
  *v29 = *v30;
  v31 = v30[1];
  v32 = v29[1];
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v33 = a3[20];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (_QWORD *)(a2 + v33);
  v36 = (int *)sub_100005F78(&qword_1000A0A50);
  v88 = *((_QWORD *)v36 - 1);
  v37 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v88 + 48);
  v38 = v37(v34, 1, v36);
  v39 = v37(v35, 1, v36);
  if (v38)
  {
    if (!v39)
    {
      v86 = v7;
      *v34 = *v35;
      v40 = v35[1];
      v34[1] = v40;
      v41 = v36[12];
      v84 = (_QWORD *)((char *)v34 + v41);
      v42 = (char *)v35 + v41;
      v43 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v40);
      v85 = v43;
      if (swift_getEnumCaseMultiPayload(v42, v43) == 1)
      {
        v44 = *(_QWORD *)v42;
        v45 = v84;
        *v84 = *(_QWORD *)v42;
        swift_retain(v44);
        v46 = 1;
      }
      else
      {
        v45 = v84;
        *(_DWORD *)v84 = *(_DWORD *)v42;
        v56 = sub_100005F78(&qword_1000A18C0);
        (*(void (**)(char *, char *, uint64_t))(v86 + 16))((char *)v84 + *(int *)(v56 + 48), &v42[*(int *)(v56 + 48)], v6);
        v57 = *(int *)(v56 + 64);
        v58 = (char *)v84 + v57;
        v59 = &v42[v57];
        v60 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
        v46 = 0;
      }
      swift_storeEnumTagMultiPayload(v45, v85, v46);
      v61 = v36[16];
      v62 = (char *)v34 + v61;
      v63 = (char *)v35 + v61;
      v64 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v62, v63, v64);
      v65 = v36[20];
      v66 = (char *)v34 + v65;
      v67 = (char *)v35 + v65;
      v68 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
      *(_QWORD *)((char *)v34 + v36[24]) = *(_QWORD *)((char *)v35 + v36[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v88 + 56))(v34, 0, 1, v36);
      goto LABEL_16;
    }
LABEL_7:
    v47 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_16;
  }
  if (v39)
  {
    sub_100007A0C((uint64_t)v34, &qword_1000A0A50);
    goto LABEL_7;
  }
  *v34 = *v35;
  v48 = v35[1];
  v49 = v34[1];
  v34[1] = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease(v49);
  if (a1 != a2)
  {
    v87 = v7;
    v50 = v36[12];
    v51 = (char *)v34 + v50;
    v52 = (char *)v35 + v50;
    sub_100007A48((uint64_t)v34 + v50, type metadata accessor for CircularProgressView.ColorStyle);
    v53 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v52, v53) == 1)
    {
      v54 = *(_QWORD *)v52;
      *(_QWORD *)v51 = *(_QWORD *)v52;
      swift_retain(v54);
      v55 = 1;
    }
    else
    {
      *(_DWORD *)v51 = *(_DWORD *)v52;
      v89 = v53;
      v69 = sub_100005F78(&qword_1000A18C0);
      (*(void (**)(char *, char *, uint64_t))(v87 + 16))(&v51[*(int *)(v69 + 48)], &v52[*(int *)(v69 + 48)], v6);
      v70 = *(int *)(v69 + 64);
      v71 = &v51[v70];
      v72 = &v52[v70];
      v73 = type metadata accessor for ColorScheme(0);
      v74 = v72;
      v53 = v89;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v71, v74, v73);
      v55 = 0;
    }
    swift_storeEnumTagMultiPayload(v51, v53, v55);
  }
  v75 = v36[16];
  v76 = (char *)v34 + v75;
  v77 = (char *)v35 + v75;
  v78 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 24))(v76, v77, v78);
  v79 = v36[20];
  v80 = (char *)v34 + v79;
  v81 = (char *)v35 + v79;
  v82 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 24))(v80, v81, v82);
  *(_QWORD *)((char *)v34 + v36[24]) = *(_QWORD *)((char *)v35 + v36[24]);
LABEL_16:
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  return a1;
}

uint64_t sub_10002D110(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;

  v6 = type metadata accessor for BlendMode(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  v10 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  v11 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v13 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v14 = a3[18];
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  v16 = (_OWORD *)(a1 + v15);
  v17 = (_OWORD *)(a2 + v15);
  v18 = (int *)sub_100005F78(&qword_1000A0A50);
  v19 = *((_QWORD *)v18 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
  {
    v20 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *v16 = *v17;
    v21 = v18[12];
    v38 = (_DWORD *)((char *)v16 + v21);
    v22 = (_DWORD *)((char *)v17 + v21);
    v37 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v22, v37))
    {
      memcpy(v38, v22, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      *v38 = *v22;
      v36 = sub_100005F78(&qword_1000A18C0);
      v7((uint64_t)v38 + *(int *)(v36 + 48), (uint64_t)v22 + *(int *)(v36 + 48), v6);
      v23 = *(int *)(v36 + 64);
      v24 = (char *)v38 + v23;
      v25 = (char *)v22 + v23;
      v26 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
      swift_storeEnumTagMultiPayload(v38, v37, 0);
    }
    v27 = v18[16];
    v28 = (char *)v16 + v27;
    v29 = (char *)v17 + v27;
    v30 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
    v31 = v18[20];
    v32 = (char *)v16 + v31;
    v33 = (char *)v17 + v31;
    v34 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
    *(_QWORD *)((char *)v16 + v18[24]) = *(_QWORD *)((char *)v17 + v18[24]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
  }
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  return a1;
}

uint64_t sub_10002D3BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  int *v35;
  uint64_t v36;
  uint64_t (*v37)(_QWORD *, uint64_t, int *);
  int v38;
  int v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v6 = type metadata accessor for BlendMode(0);
  v78 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = v9[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  v14 = a3[9];
  v15 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_release(v15);
  v16 = a3[10];
  v17 = *(_QWORD *)(a1 + v16);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  swift_release(v17);
  v18 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  v19 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v20 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  swift_release(v20);
  v21 = a3[15];
  v22 = *(_QWORD *)(a1 + v21);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  swift_release(v22);
  v23 = a3[16];
  v24 = *(_QWORD *)(a1 + v23);
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);
  swift_release(v24);
  v25 = a3[18];
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  *(_QWORD *)(a1 + v25) = *(_QWORD *)(a2 + v25);
  v26 = a3[19];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v30 = *v28;
  v29 = v28[1];
  v31 = v27[1];
  *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease(v31);
  v32 = a3[20];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  v35 = (int *)sub_100005F78(&qword_1000A0A50);
  v36 = *((_QWORD *)v35 - 1);
  v37 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      *(_OWORD *)v33 = *(_OWORD *)v34;
      v40 = v35[12];
      v41 = (_DWORD *)((char *)v33 + v40);
      v42 = (_DWORD *)((char *)v34 + v40);
      v76 = type metadata accessor for CircularProgressView.ColorStyle(0);
      if (swift_getEnumCaseMultiPayload(v42, v76))
      {
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
      }
      else
      {
        *v41 = *v42;
        v75 = sub_100005F78(&qword_1000A18C0);
        (*(void (**)(char *, char *, uint64_t))(v78 + 32))((char *)v41 + *(int *)(v75 + 48), (char *)v42 + *(int *)(v75 + 48), v6);
        v50 = *(int *)(v75 + 64);
        v51 = (char *)v41 + v50;
        v52 = (char *)v42 + v50;
        v53 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
        swift_storeEnumTagMultiPayload(v41, v76, 0);
      }
      v54 = v35[16];
      v55 = (char *)v33 + v54;
      v56 = (char *)v34 + v54;
      v57 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
      v58 = v35[20];
      v59 = (char *)v33 + v58;
      v60 = (char *)v34 + v58;
      v61 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v59, v60, v61);
      *(_QWORD *)((char *)v33 + v35[24]) = *(_QWORD *)((char *)v34 + v35[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_15;
    }
LABEL_7:
    v43 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_15;
  }
  if (v39)
  {
    sub_100007A0C((uint64_t)v33, &qword_1000A0A50);
    goto LABEL_7;
  }
  v44 = v34[1];
  v45 = v33[1];
  *v33 = *v34;
  v33[1] = v44;
  swift_bridgeObjectRelease(v45);
  if (a1 != a2)
  {
    v46 = v35[12];
    v47 = (_DWORD *)((char *)v33 + v46);
    v48 = (_DWORD *)((char *)v34 + v46);
    sub_100007A48((uint64_t)v33 + v46, type metadata accessor for CircularProgressView.ColorStyle);
    v49 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v48, v49))
    {
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      *v47 = *v48;
      v77 = sub_100005F78(&qword_1000A18C0);
      (*(void (**)(char *, char *, uint64_t))(v78 + 32))((char *)v47 + *(int *)(v77 + 48), (char *)v48 + *(int *)(v77 + 48), v6);
      v62 = *(int *)(v77 + 64);
      v63 = (char *)v47 + v62;
      v64 = (char *)v48 + v62;
      v65 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v63, v64, v65);
      swift_storeEnumTagMultiPayload(v47, v49, 0);
    }
  }
  v66 = v35[16];
  v67 = (char *)v33 + v66;
  v68 = (char *)v34 + v66;
  v69 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 40))(v67, v68, v69);
  v70 = v35[20];
  v71 = (char *)v33 + v70;
  v72 = (char *)v34 + v70;
  v73 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 40))(v71, v72, v73);
  *(_QWORD *)((char *)v33 + v35[24]) = *(_QWORD *)((char *)v34 + v35[24]);
LABEL_15:
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  return a1;
}

uint64_t sub_10002D82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002D838);
}

uint64_t sub_10002D838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for BlendMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for CircularProgressView.Content(0);
    v10 = a1 + *(int *)(a3 + 80);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_10002D8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002D8F0);
}

uint64_t sub_10002D8F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for BlendMode(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for CircularProgressView.Content(0);
    v12 = a1 + *(int *)(a4 + 80);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_10002D998(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[18];

  result = type metadata accessor for BlendMode(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[4] = &unk_100080098;
    v5[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[9] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[11] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[12] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[13] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[14] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[15] = &unk_100080098;
    result = type metadata accessor for CircularProgressView.Content(319);
    if (v4 <= 0x3F)
    {
      v5[16] = *(_QWORD *)(result - 8) + 64;
      v5[17] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 18, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_10002DA58(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  char *__dst;
  char *v64;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v36 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v36 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v36);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v6;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v7 = a2[7];
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a2 + v8;
    v10 = (char *)(a1 + v8);
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v7;
    v11 = type metadata accessor for BlendMode(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v61 = v12;
    v62 = v11;
    v12(v10, v9, v11);
    v13 = (int *)type metadata accessor for MediumReadingGoalView.ViewConfiguration(0);
    *(_QWORD *)&v10[v13[5]] = *(_QWORD *)&v9[v13[5]];
    *(_QWORD *)&v10[v13[6]] = *(_QWORD *)&v9[v13[6]];
    *(_QWORD *)&v10[v13[7]] = *(_QWORD *)&v9[v13[7]];
    v14 = v13[8];
    v15 = &v10[v14];
    v16 = &v9[v14];
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = v13[9];
    v19 = *(_QWORD *)&v9[v18];
    *(_QWORD *)&v10[v18] = v19;
    v20 = v13[10];
    v21 = *(_QWORD *)&v9[v20];
    *(_QWORD *)&v10[v20] = v21;
    *(_QWORD *)&v10[v13[11]] = *(_QWORD *)&v9[v13[11]];
    *(_QWORD *)&v10[v13[12]] = *(_QWORD *)&v9[v13[12]];
    *(_QWORD *)&v10[v13[13]] = *(_QWORD *)&v9[v13[13]];
    v22 = v13[14];
    v23 = *(_QWORD *)&v9[v22];
    *(_QWORD *)&v10[v22] = v23;
    v24 = v13[15];
    v25 = *(_QWORD *)&v9[v24];
    *(_QWORD *)&v10[v24] = v25;
    v26 = v13[16];
    v27 = *(_QWORD *)&v9[v26];
    *(_QWORD *)&v10[v26] = v27;
    *(_QWORD *)&v10[v13[17]] = *(_QWORD *)&v9[v13[17]];
    *(_QWORD *)&v10[v13[18]] = *(_QWORD *)&v9[v13[18]];
    v28 = v13[19];
    v29 = &v10[v28];
    v30 = &v9[v28];
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    v32 = v13[20];
    __dst = &v10[v32];
    v64 = &v9[v32];
    swift_bridgeObjectRetain(v17);
    swift_retain(v19);
    swift_retain(v21);
    swift_retain(v23);
    swift_retain(v25);
    swift_retain(v27);
    swift_bridgeObjectRetain(v31);
    v33 = (int *)sub_100005F78(&qword_1000A0A50);
    v34 = *((_QWORD *)v33 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))((char *)v64, 1, v33))
    {
      v35 = type metadata accessor for CircularProgressView.Content(0);
      memcpy(__dst, v64, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v60 = v34;
      v37 = v64[1];
      v38 = __dst;
      *__dst = *v64;
      __dst[1] = v37;
      v39 = v33[12];
      v40 = (_QWORD *)((char *)__dst + v39);
      v41 = (_QWORD *)((char *)v64 + v39);
      v42 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v37);
      v59 = v42;
      if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
      {
        v43 = *v41;
        *v40 = *v41;
        swift_retain(v43);
        v44 = 1;
      }
      else
      {
        *(_DWORD *)v40 = *(_DWORD *)v41;
        v45 = sub_100005F78(&qword_1000A18C0);
        v61((char *)v40 + *(int *)(v45 + 48), (char *)v41 + *(int *)(v45 + 48), v62);
        v46 = *(int *)(v45 + 64);
        v47 = (char *)v40 + v46;
        v48 = (char *)v41 + v46;
        v49 = type metadata accessor for ColorScheme(0);
        v38 = __dst;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
        v44 = 0;
      }
      swift_storeEnumTagMultiPayload(v40, v59, v44);
      v50 = v33[16];
      v51 = (char *)v38 + v50;
      v52 = (char *)v64 + v50;
      v53 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
      v54 = v33[20];
      v55 = (char *)v38 + v54;
      v56 = (char *)v64 + v54;
      v57 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
      *(_QWORD *)((char *)v38 + v33[24]) = *(_QWORD *)((char *)v64 + v33[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v60 + 56))(v38, 0, 1, v33);
    }
    *(_QWORD *)&v10[v13[21]] = *(_QWORD *)&v9[v13[21]];
  }
  return v3;
}

uint64_t sub_10002DDF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for BlendMode(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = (int *)type metadata accessor for MediumReadingGoalView.ViewConfiguration(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v7[8] + 8));
  swift_release(*(_QWORD *)(v4 + v7[9]));
  swift_release(*(_QWORD *)(v4 + v7[10]));
  swift_release(*(_QWORD *)(v4 + v7[14]));
  swift_release(*(_QWORD *)(v4 + v7[15]));
  swift_release(*(_QWORD *)(v4 + v7[16]));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v7[19] + 8));
  v8 = v4 + v7[20];
  v9 = (int *)sub_100005F78(&qword_1000A0A50);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
    v11 = (_QWORD *)(v8 + v9[12]);
    v12 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      swift_release(*v11);
    }
    else
    {
      v13 = sub_100005F78(&qword_1000A18C0);
      v6((uint64_t)v11 + *(int *)(v13 + 48), v5);
      v14 = (char *)v11 + *(int *)(v13 + 64);
      v15 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    }
    v16 = v8 + v9[16];
    v17 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
    v18 = v8 + v9[20];
    v19 = type metadata accessor for Font.Design(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  }
  return result;
}

uint64_t sub_10002DFCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t result;
  _QWORD *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  char *__dst;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(int *)(a3 + 20);
  v7 = (char *)(a2 + v6);
  v8 = (char *)(a1 + v6);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v9 = type metadata accessor for BlendMode(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v62 = v9;
  v63 = v10;
  v10(v8, v7, v9);
  v11 = (int *)type metadata accessor for MediumReadingGoalView.ViewConfiguration(0);
  *(_QWORD *)&v8[v11[5]] = *(_QWORD *)&v7[v11[5]];
  *(_QWORD *)&v8[v11[6]] = *(_QWORD *)&v7[v11[6]];
  *(_QWORD *)&v8[v11[7]] = *(_QWORD *)&v7[v11[7]];
  v12 = v11[8];
  v13 = &v8[v12];
  v14 = &v7[v12];
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = v11[9];
  v17 = *(_QWORD *)&v7[v16];
  *(_QWORD *)&v8[v16] = v17;
  v18 = v11[10];
  v19 = *(_QWORD *)&v7[v18];
  *(_QWORD *)&v8[v18] = v19;
  *(_QWORD *)&v8[v11[11]] = *(_QWORD *)&v7[v11[11]];
  *(_QWORD *)&v8[v11[12]] = *(_QWORD *)&v7[v11[12]];
  *(_QWORD *)&v8[v11[13]] = *(_QWORD *)&v7[v11[13]];
  v20 = v11[14];
  v21 = *(_QWORD *)&v7[v20];
  *(_QWORD *)&v8[v20] = v21;
  v22 = v11[15];
  v23 = *(_QWORD *)&v7[v22];
  *(_QWORD *)&v8[v22] = v23;
  v24 = v11[16];
  v25 = *(_QWORD *)&v7[v24];
  *(_QWORD *)&v8[v24] = v25;
  *(_QWORD *)&v8[v11[17]] = *(_QWORD *)&v7[v11[17]];
  *(_QWORD *)&v8[v11[18]] = *(_QWORD *)&v7[v11[18]];
  v26 = v11[19];
  v27 = &v8[v26];
  v28 = &v7[v26];
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = v11[20];
  __dst = &v8[v30];
  v31 = &v7[v30];
  swift_bridgeObjectRetain(v15);
  swift_retain(v17);
  swift_retain(v19);
  swift_retain(v21);
  swift_retain(v23);
  swift_retain(v25);
  v32 = v29;
  v33 = v31;
  swift_bridgeObjectRetain(v32);
  v34 = (int *)sub_100005F78(&qword_1000A0A50);
  v35 = *((_QWORD *)v34 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v35 + 48))((char *)v31, 1, v34))
  {
    v36 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(__dst, v31, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    v37 = v31[1];
    v38 = __dst;
    *__dst = *v33;
    __dst[1] = v37;
    v39 = v34[12];
    v40 = (_QWORD *)((char *)__dst + v39);
    v61 = v33;
    v41 = (_QWORD *)((char *)v33 + v39);
    v42 = type metadata accessor for CircularProgressView.ColorStyle(0);
    swift_bridgeObjectRetain(v37);
    if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
    {
      v43 = *v41;
      *v40 = *v41;
      swift_retain(v43);
      v44 = 1;
    }
    else
    {
      *(_DWORD *)v40 = *(_DWORD *)v41;
      v45 = sub_100005F78(&qword_1000A18C0);
      v63((char *)v40 + *(int *)(v45 + 48), (char *)v41 + *(int *)(v45 + 48), v62);
      v46 = *(int *)(v45 + 64);
      v47 = (char *)v40 + v46;
      v48 = v42;
      v49 = (char *)v41 + v46;
      v50 = type metadata accessor for ColorScheme(0);
      v51 = v49;
      v42 = v48;
      v38 = __dst;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v47, v51, v50);
      v44 = 0;
    }
    swift_storeEnumTagMultiPayload(v40, v42, v44);
    v52 = v34[16];
    v53 = (char *)v38 + v52;
    v54 = (char *)v61 + v52;
    v55 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
    v56 = v34[20];
    v57 = (char *)v38 + v56;
    v58 = (char *)v61 + v56;
    v59 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
    *(_QWORD *)((char *)v38 + v34[24]) = *(_QWORD *)((char *)v61 + v34[24]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v35 + 56))(v38, 0, 1, v34);
  }
  result = a1;
  *(_QWORD *)&v8[v11[21]] = *(_QWORD *)&v7[v11[21]];
  return result;
}

uint64_t sub_10002E340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  int *v44;
  uint64_t (*v45)(_QWORD *, uint64_t, int *);
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = *(int *)(a3 + 20);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for BlendMode(0);
  v92 = *(_QWORD *)(v14 - 8);
  v93 = v14;
  (*(void (**)(uint64_t, uint64_t))(v92 + 24))(v12, v13);
  v15 = (int *)type metadata accessor for MediumReadingGoalView.ViewConfiguration(0);
  *(_QWORD *)(v12 + v15[5]) = *(_QWORD *)(v13 + v15[5]);
  *(_QWORD *)(v12 + v15[6]) = *(_QWORD *)(v13 + v15[6]);
  *(_QWORD *)(v12 + v15[7]) = *(_QWORD *)(v13 + v15[7]);
  v16 = v15[8];
  v17 = (_QWORD *)(v12 + v16);
  v18 = (_QWORD *)(v13 + v16);
  *v17 = *v18;
  v19 = v18[1];
  v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = v15[9];
  v22 = *(_QWORD *)(v13 + v21);
  v23 = *(_QWORD *)(v12 + v21);
  *(_QWORD *)(v12 + v21) = v22;
  swift_retain(v22);
  swift_release(v23);
  v24 = v15[10];
  v25 = *(_QWORD *)(v13 + v24);
  v26 = *(_QWORD *)(v12 + v24);
  *(_QWORD *)(v12 + v24) = v25;
  swift_retain(v25);
  swift_release(v26);
  *(_QWORD *)(v12 + v15[11]) = *(_QWORD *)(v13 + v15[11]);
  *(_QWORD *)(v12 + v15[12]) = *(_QWORD *)(v13 + v15[12]);
  *(_QWORD *)(v12 + v15[13]) = *(_QWORD *)(v13 + v15[13]);
  v27 = v15[14];
  v28 = *(_QWORD *)(v13 + v27);
  v29 = *(_QWORD *)(v12 + v27);
  *(_QWORD *)(v12 + v27) = v28;
  swift_retain(v28);
  swift_release(v29);
  v30 = v15[15];
  v31 = *(_QWORD *)(v13 + v30);
  v32 = *(_QWORD *)(v12 + v30);
  *(_QWORD *)(v12 + v30) = v31;
  swift_retain(v31);
  swift_release(v32);
  v33 = v15[16];
  v34 = *(_QWORD *)(v13 + v33);
  v35 = *(_QWORD *)(v12 + v33);
  *(_QWORD *)(v12 + v33) = v34;
  swift_retain(v34);
  swift_release(v35);
  *(_QWORD *)(v12 + v15[17]) = *(_QWORD *)(v13 + v15[17]);
  *(_QWORD *)(v12 + v15[18]) = *(_QWORD *)(v13 + v15[18]);
  v36 = v15[19];
  v37 = (_QWORD *)(v12 + v36);
  v38 = (_QWORD *)(v13 + v36);
  *v37 = *v38;
  v39 = v38[1];
  v40 = v37[1];
  v37[1] = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  v41 = v15[20];
  v42 = (_QWORD *)(v12 + v41);
  v43 = (_QWORD *)(v13 + v41);
  v44 = (int *)sub_100005F78(&qword_1000A0A50);
  v94 = *((_QWORD *)v44 - 1);
  v45 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v94 + 48);
  v46 = v45(v42, 1, v44);
  v47 = v45(v43, 1, v44);
  if (v46)
  {
    if (!v47)
    {
      *v42 = *v43;
      v48 = v43[1];
      v42[1] = v48;
      v49 = v44[12];
      v91 = (char *)v42 + v49;
      v50 = (char *)v43 + v49;
      v51 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v48);
      v90 = v51;
      if (swift_getEnumCaseMultiPayload(v50, v51) == 1)
      {
        v52 = *(_QWORD *)v50;
        *(_QWORD *)v91 = *(_QWORD *)v50;
        swift_retain(v52);
        v53 = 1;
      }
      else
      {
        *(_DWORD *)v91 = *(_DWORD *)v50;
        v63 = sub_100005F78(&qword_1000A18C0);
        (*(void (**)(char *, char *, uint64_t))(v92 + 16))(&v91[*(int *)(v63 + 48)], &v50[*(int *)(v63 + 48)], v93);
        v64 = *(int *)(v63 + 64);
        v65 = &v91[v64];
        v66 = &v50[v64];
        v67 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v65, v66, v67);
        v53 = 0;
      }
      swift_storeEnumTagMultiPayload(v91, v90, v53);
      v68 = v44[16];
      v69 = (char *)v42 + v68;
      v70 = (char *)v43 + v68;
      v71 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v69, v70, v71);
      v72 = v44[20];
      v73 = (char *)v42 + v72;
      v74 = (char *)v43 + v72;
      v75 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v73, v74, v75);
      *(_QWORD *)((char *)v42 + v44[24]) = *(_QWORD *)((char *)v43 + v44[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v94 + 56))(v42, 0, 1, v44);
      goto LABEL_16;
    }
LABEL_7:
    v54 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_16;
  }
  if (v47)
  {
    sub_100007A0C((uint64_t)v42, &qword_1000A0A50);
    goto LABEL_7;
  }
  *v42 = *v43;
  v55 = v43[1];
  v56 = v42[1];
  v42[1] = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56);
  if (a1 != a2)
  {
    v57 = v44[12];
    v58 = (char *)v42 + v57;
    v59 = (char *)v43 + v57;
    sub_100007A48((uint64_t)v42 + v57, type metadata accessor for CircularProgressView.ColorStyle);
    v60 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v59, v60) == 1)
    {
      v61 = *(_QWORD *)v59;
      *(_QWORD *)v58 = *(_QWORD *)v59;
      swift_retain(v61);
      v62 = 1;
    }
    else
    {
      *(_DWORD *)v58 = *(_DWORD *)v59;
      v95 = sub_100005F78(&qword_1000A18C0);
      (*(void (**)(char *, char *, uint64_t))(v92 + 16))(&v58[*(int *)(v95 + 48)], &v59[*(int *)(v95 + 48)], v93);
      v76 = *(int *)(v95 + 64);
      v96 = v60;
      v77 = &v58[v76];
      v78 = &v59[v76];
      v79 = type metadata accessor for ColorScheme(0);
      v80 = v77;
      v60 = v96;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v80, v78, v79);
      v62 = 0;
    }
    swift_storeEnumTagMultiPayload(v58, v60, v62);
  }
  v81 = v44[16];
  v82 = (char *)v42 + v81;
  v83 = (char *)v43 + v81;
  v84 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 24))(v82, v83, v84);
  v85 = v44[20];
  v86 = (char *)v42 + v85;
  v87 = (char *)v43 + v85;
  v88 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 24))(v86, v87, v88);
  *(_QWORD *)((char *)v42 + v44[24]) = *(_QWORD *)((char *)v43 + v44[24]);
LABEL_16:
  *(_QWORD *)(v12 + v15[21]) = *(_QWORD *)(v13 + v15[21]);
  return a1;
}

_OWORD *sub_10002E8AC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  char *v36;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for BlendMode(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = (int *)type metadata accessor for MediumReadingGoalView.ViewConfiguration(0);
  *(_QWORD *)&v7[v11[5]] = *(_QWORD *)&v8[v11[5]];
  *(_QWORD *)&v7[v11[6]] = *(_QWORD *)&v8[v11[6]];
  *(_QWORD *)&v7[v11[7]] = *(_QWORD *)&v8[v11[7]];
  *(_OWORD *)&v7[v11[8]] = *(_OWORD *)&v8[v11[8]];
  *(_QWORD *)&v7[v11[9]] = *(_QWORD *)&v8[v11[9]];
  *(_QWORD *)&v7[v11[10]] = *(_QWORD *)&v8[v11[10]];
  *(_QWORD *)&v7[v11[11]] = *(_QWORD *)&v8[v11[11]];
  *(_QWORD *)&v7[v11[12]] = *(_QWORD *)&v8[v11[12]];
  *(_QWORD *)&v7[v11[13]] = *(_QWORD *)&v8[v11[13]];
  *(_QWORD *)&v7[v11[14]] = *(_QWORD *)&v8[v11[14]];
  *(_QWORD *)&v7[v11[15]] = *(_QWORD *)&v8[v11[15]];
  *(_QWORD *)&v7[v11[16]] = *(_QWORD *)&v8[v11[16]];
  *(_QWORD *)&v7[v11[17]] = *(_QWORD *)&v8[v11[17]];
  *(_QWORD *)&v7[v11[18]] = *(_QWORD *)&v8[v11[18]];
  *(_OWORD *)&v7[v11[19]] = *(_OWORD *)&v8[v11[19]];
  v12 = v11[20];
  v13 = &v7[v12];
  v14 = &v8[v12];
  v15 = (int *)sub_100005F78(&qword_1000A0A50);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v33 = v10;
    *(_OWORD *)v13 = *(_OWORD *)v14;
    v18 = v15[12];
    v36 = &v13[v18];
    v19 = &v14[v18];
    v35 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v19, v35))
    {
      memcpy(v36, v19, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      *(_DWORD *)v36 = *(_DWORD *)v19;
      v32 = sub_100005F78(&qword_1000A18C0);
      v33(&v36[*(int *)(v32 + 48)], &v19[*(int *)(v32 + 48)], v9);
      v20 = *(int *)(v32 + 64);
      v34 = &v36[v20];
      v21 = &v19[v20];
      v22 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v34, v21, v22);
      swift_storeEnumTagMultiPayload(v36, v35, 0);
    }
    v23 = v15[16];
    v24 = &v13[v23];
    v25 = &v14[v23];
    v26 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
    v27 = v15[20];
    v28 = &v13[v27];
    v29 = &v14[v27];
    v30 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
    *(_QWORD *)&v13[v15[24]] = *(_QWORD *)&v14[v15[24]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_QWORD *)&v7[v11[21]] = *(_QWORD *)&v8[v11[21]];
  return a1;
}

uint64_t sub_10002EBA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int *v40;
  uint64_t (*v41)(_QWORD *, uint64_t, int *);
  int v42;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for BlendMode(0);
  v80 = *(_QWORD *)(v13 - 8);
  v81 = v13;
  (*(void (**)(uint64_t, uint64_t))(v80 + 40))(v11, v12);
  v14 = (int *)type metadata accessor for MediumReadingGoalView.ViewConfiguration(0);
  *(_QWORD *)(v11 + v14[5]) = *(_QWORD *)(v12 + v14[5]);
  *(_QWORD *)(v11 + v14[6]) = *(_QWORD *)(v12 + v14[6]);
  *(_QWORD *)(v11 + v14[7]) = *(_QWORD *)(v12 + v14[7]);
  v15 = v14[8];
  v16 = (_QWORD *)(v11 + v15);
  v17 = (uint64_t *)(v12 + v15);
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  v21 = v14[9];
  v22 = *(_QWORD *)(v11 + v21);
  *(_QWORD *)(v11 + v21) = *(_QWORD *)(v12 + v21);
  swift_release(v22);
  v23 = v14[10];
  v24 = *(_QWORD *)(v11 + v23);
  *(_QWORD *)(v11 + v23) = *(_QWORD *)(v12 + v23);
  swift_release(v24);
  *(_QWORD *)(v11 + v14[11]) = *(_QWORD *)(v12 + v14[11]);
  *(_QWORD *)(v11 + v14[12]) = *(_QWORD *)(v12 + v14[12]);
  *(_QWORD *)(v11 + v14[13]) = *(_QWORD *)(v12 + v14[13]);
  v25 = v14[14];
  v26 = *(_QWORD *)(v11 + v25);
  *(_QWORD *)(v11 + v25) = *(_QWORD *)(v12 + v25);
  swift_release(v26);
  v27 = v14[15];
  v28 = *(_QWORD *)(v11 + v27);
  *(_QWORD *)(v11 + v27) = *(_QWORD *)(v12 + v27);
  swift_release(v28);
  v29 = v14[16];
  v30 = *(_QWORD *)(v11 + v29);
  *(_QWORD *)(v11 + v29) = *(_QWORD *)(v12 + v29);
  swift_release(v30);
  *(_QWORD *)(v11 + v14[17]) = *(_QWORD *)(v12 + v14[17]);
  *(_QWORD *)(v11 + v14[18]) = *(_QWORD *)(v12 + v14[18]);
  v31 = v14[19];
  v32 = (_QWORD *)(v11 + v31);
  v33 = (uint64_t *)(v12 + v31);
  v35 = *v33;
  v34 = v33[1];
  v36 = v32[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease(v36);
  v37 = v14[20];
  v38 = (_QWORD *)(v11 + v37);
  v39 = (_QWORD *)(v12 + v37);
  v40 = (int *)sub_100005F78(&qword_1000A0A50);
  v83 = *((_QWORD *)v40 - 1);
  v41 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v83 + 48);
  v42 = v41(v38, 1, v40);
  v43 = v41(v39, 1, v40);
  if (v42)
  {
    if (!v43)
    {
      *(_OWORD *)v38 = *(_OWORD *)v39;
      v44 = v40[12];
      v45 = (_DWORD *)((char *)v38 + v44);
      v46 = (_DWORD *)((char *)v39 + v44);
      v47 = type metadata accessor for CircularProgressView.ColorStyle(0);
      if (swift_getEnumCaseMultiPayload(v46, v47))
      {
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        *v45 = *v46;
        v79 = sub_100005F78(&qword_1000A18C0);
        (*(void (**)(char *, char *, uint64_t))(v80 + 32))((char *)v45 + *(int *)(v79 + 48), (char *)v46 + *(int *)(v79 + 48), v81);
        v55 = *(int *)(v79 + 64);
        v82 = (char *)v45 + v55;
        v56 = (char *)v46 + v55;
        v57 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v82, v56, v57);
        swift_storeEnumTagMultiPayload(v45, v47, 0);
      }
      v58 = v40[16];
      v59 = (char *)v38 + v58;
      v60 = (char *)v39 + v58;
      v61 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v59, v60, v61);
      v62 = v40[20];
      v63 = (char *)v38 + v62;
      v64 = (char *)v39 + v62;
      v65 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v63, v64, v65);
      *(_QWORD *)((char *)v38 + v40[24]) = *(_QWORD *)((char *)v39 + v40[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v83 + 56))(v38, 0, 1, v40);
      goto LABEL_15;
    }
LABEL_7:
    v48 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_15;
  }
  if (v43)
  {
    sub_100007A0C((uint64_t)v38, &qword_1000A0A50);
    goto LABEL_7;
  }
  v49 = v39[1];
  v50 = v38[1];
  *v38 = *v39;
  v38[1] = v49;
  swift_bridgeObjectRelease(v50);
  if (a1 != a2)
  {
    v51 = v40[12];
    v52 = (_DWORD *)((char *)v38 + v51);
    v53 = (_DWORD *)((char *)v39 + v51);
    sub_100007A48((uint64_t)v38 + v51, type metadata accessor for CircularProgressView.ColorStyle);
    v54 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v53, v54))
    {
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      *v52 = *v53;
      v84 = sub_100005F78(&qword_1000A18C0);
      (*(void (**)(char *, char *, uint64_t))(v80 + 32))((char *)v52 + *(int *)(v84 + 48), (char *)v53 + *(int *)(v84 + 48), v81);
      v66 = *(int *)(v84 + 64);
      v85 = v54;
      v67 = (char *)v52 + v66;
      v68 = (char *)v53 + v66;
      v69 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v67, v68, v69);
      swift_storeEnumTagMultiPayload(v52, v85, 0);
    }
  }
  v70 = v40[16];
  v71 = (char *)v38 + v70;
  v72 = (char *)v39 + v70;
  v73 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 40))(v71, v72, v73);
  v74 = v40[20];
  v75 = (char *)v38 + v74;
  v76 = (char *)v39 + v74;
  v77 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 40))(v75, v76, v77);
  *(_QWORD *)((char *)v38 + v40[24]) = *(_QWORD *)((char *)v39 + v40[24]);
LABEL_15:
  *(_QWORD *)(v11 + v14[21]) = *(_QWORD *)(v12 + v14[21]);
  return a1;
}

uint64_t sub_10002F080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002F08C);
}

uint64_t sub_10002F08C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for MediumReadingGoalView.ViewConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10002F108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002F114);
}

uint64_t sub_10002F114(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for MediumReadingGoalView.ViewConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MediumReadingGoalView(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A1C80, (uint64_t)&nominal type descriptor for MediumReadingGoalView);
}

uint64_t sub_10002F19C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "@";
  result = type metadata accessor for MediumReadingGoalView.ViewConfiguration(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10002F210(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100083EC4, 1);
}

uint64_t sub_10002F220@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  uint64_t *v66;
  int *v67;
  char *v68;
  _OWORD *v69;
  uint64_t v70;
  uint64_t KeyPath;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  int v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(char *, char *, uint64_t);
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int *v143;
  uint64_t v144;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  _OWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  double v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  _OWORD v182[8];

  v162 = a2;
  v155 = sub_100005F78(&qword_1000A1CC0);
  v153 = *(_QWORD *)(v155 - 8);
  v3 = __chkstk_darwin(v155);
  v154 = (char *)&v146 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v164 = (char *)&v146 - v5;
  v150 = sub_100005F78(&qword_1000A1CC8);
  v6 = __chkstk_darwin(v150);
  v152 = (uint64_t)&v146 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v149 = (uint64_t)&v146 - v9;
  __chkstk_darwin(v8);
  v167 = (uint64_t)&v146 - v10;
  v11 = sub_100005F78(&qword_1000A1CD0);
  v12 = __chkstk_darwin(v11);
  v161 = (uint64_t)&v146 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v160 = (uint64_t)&v146 - v14;
  v166 = type metadata accessor for LabelView(0);
  v15 = __chkstk_darwin(v166);
  v148 = (uint64_t *)((char *)&v146 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v146 - v17);
  v165 = sub_100005F78(&qword_1000A1AF0);
  v19 = __chkstk_darwin(v165);
  v151 = (uint64_t)&v146 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v170 = (uint64_t)&v146 - v22;
  __chkstk_darwin(v21);
  v169 = (uint64_t)&v146 - v23;
  v158 = (_QWORD *)type metadata accessor for ReadingProgressIconView(0);
  __chkstk_darwin(v158);
  v25 = (uint64_t *)((char *)&v146 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v163 = sub_100005F78(&qword_1000A1CD8);
  v159 = *(char **)(v163 - 8);
  __chkstk_darwin(v163);
  v27 = (char *)&v146 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = sub_100005F78(&qword_1000A1CE0);
  v28 = __chkstk_darwin(v157);
  v30 = (char *)&v146 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v168 = (uint64_t)&v146 - v31;
  v156 = a1;
  v32 = *a1;
  v33 = (char *)a1 + *(int *)(type metadata accessor for MediumReadingGoalView(0) + 20);
  v34 = (int *)type metadata accessor for MediumReadingGoalView.ViewConfiguration(0);
  v35 = *(_QWORD *)&v33[v34[15]];
  v36 = *(_QWORD *)&v33[v34[16]];
  v37 = (int *)type metadata accessor for ReadingProgressIconView.ViewConfiguration(0);
  v38 = (char *)v25 + v37[7];
  v39 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v38, v33, v39);
  v40 = *(_QWORD *)&v33[v34[17]];
  v41 = *(_QWORD *)&v33[v34[18]];
  sub_1000078D4((uint64_t)&v33[v34[20]], (uint64_t)v25 + v37[10], type metadata accessor for CircularProgressView.Content);
  *v25 = v32;
  v25[1] = v35;
  v25[2] = v36;
  *(_QWORD *)((char *)v25 + v37[8]) = v40;
  *(_QWORD *)((char *)v25 + v37[9]) = v41;
  *((_BYTE *)v25 + v37[11]) = 0;
  v42 = sub_10002FF34();
  swift_retain(v35);
  swift_retain(v36);
  View.widgetAccentable(_:)(1, v158, v42);
  v43 = sub_100007A48((uint64_t)v25, type metadata accessor for ReadingProgressIconView);
  LOBYTE(v42) = static Edge.Set.trailing.getter(v43);
  v44 = EdgeInsets.init(_all:)(*(double *)&v33[v34[7]]);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v51 = (uint64_t)v159;
  v52 = v163;
  (*((void (**)(char *, char *, uint64_t))v159 + 2))(v30, v27, v163);
  v53 = &v30[*(int *)(v157 + 36)];
  *v53 = v42;
  *((double *)v53 + 1) = v44;
  *((_QWORD *)v53 + 2) = v46;
  *((_QWORD *)v53 + 3) = v48;
  *((_QWORD *)v53 + 4) = v50;
  v53[40] = 0;
  (*(void (**)(char *, uint64_t))(v51 + 8))(v27, v52);
  v159 = v30;
  sub_100007984((uint64_t)v30, v168, &qword_1000A1CE0);
  v54 = v156;
  v55 = v156[1];
  v182[4] = *v156;
  v182[5] = v55;
  v56 = v156[3];
  v182[6] = v156[2];
  v182[7] = v56;
  v57 = sub_100052044();
  v59 = v58;
  v157 = v34[14];
  v60 = *(_QWORD *)&v33[v157];
  v61 = swift_retain(v60);
  v62 = static HierarchicalShapeStyle.primary.getter(v61);
  v63 = *(_QWORD *)&v33[v34[21]];
  v64 = v62;
  *v18 = swift_getKeyPath(&unk_100080130);
  v163 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v18, v163, 0);
  v65 = (int *)v166;
  v66 = (_QWORD *)((char *)v18 + *(int *)(v166 + 20));
  *v66 = v57;
  v66[1] = v59;
  *(_QWORD *)((char *)v18 + v65[6]) = v60;
  v67 = v65;
  v68 = (char *)v18 + v65[7];
  *(_QWORD *)v68 = v64;
  *((_QWORD *)v68 + 1) = v63;
  *((_WORD *)v68 + 8) = 0;
  v69 = (_OWORD *)v34[6];
  v70 = *(_QWORD *)((char *)v69 + (_QWORD)v33);
  KeyPath = swift_getKeyPath(&unk_100080160);
  v72 = v170;
  sub_1000078D4((uint64_t)v18, v170, type metadata accessor for LabelView);
  v73 = v72 + *(int *)(v165 + 36);
  *(_QWORD *)v73 = KeyPath;
  *(_QWORD *)(v73 + 8) = v70;
  *(_BYTE *)(v73 + 16) = 0;
  v158 = v18;
  sub_100007A48((uint64_t)v18, type metadata accessor for LabelView);
  sub_100007984(v72, v169, &qword_1000A1AF0);
  v74 = v54[1];
  v182[0] = *v54;
  v182[1] = v74;
  v75 = v54[3];
  v182[2] = v54[2];
  v182[3] = v75;
  sub_100025260((uint64_t)v182);
  v76 = sub_10002172C();
  v78 = v77;
  sub_100025294((uint64_t)v182);
  if (v78)
  {
    v147 = v76;
    v156 = v69;
    v79 = v157;
    v80 = *(_QWORD *)&v33[v157];
    v81 = swift_getKeyPath(&unk_100080130);
    v82 = (uint64_t)v148;
    *v148 = v81;
    swift_storeEnumTagMultiPayload(v82, v163, 0);
    *(_OWORD *)(v82 + v67[5]) = xmmword_100080070;
    *(_QWORD *)(v82 + v67[6]) = v80;
    v83 = v82 + v67[7];
    *(_QWORD *)v83 = 0;
    *(_QWORD *)(v83 + 8) = 0;
    *(_WORD *)(v83 + 16) = 256;
    v84 = swift_retain(v80);
    v85 = static Edge.Set.leading.getter(v84);
    v86 = v85;
    v87 = static Edge.Set.trailing.getter(v85);
    v88 = Edge.Set.init(rawValue:)(0);
    v89 = Edge.Set.init(rawValue:)(v88);
    if (Edge.Set.init(rawValue:)(v89 & v86) != v86)
      v88 = Edge.Set.init(rawValue:)(v88 | v86);
    v90 = Edge.Set.init(rawValue:)(v88);
    if (Edge.Set.init(rawValue:)(v90 & v87) != v87)
      LOBYTE(v88) = Edge.Set.init(rawValue:)(v88 | v87);
    v91 = EdgeInsets.init(_all:)(*(double *)&v33[v34[13]]);
    v93 = v92;
    v95 = v94;
    v97 = v96;
    v98 = v149;
    sub_1000078D4(v82, v149, type metadata accessor for LabelView);
    v99 = v98 + *(int *)(v150 + 36);
    *(_BYTE *)v99 = v88;
    *(double *)(v99 + 8) = v91;
    *(_QWORD *)(v99 + 16) = v93;
    *(_QWORD *)(v99 + 24) = v95;
    *(_QWORD *)(v99 + 32) = v97;
    *(_BYTE *)(v99 + 40) = 0;
    sub_100007A48(v82, type metadata accessor for LabelView);
    sub_100007984(v98, v167, &qword_1000A1CC8);
    v100 = &v33[v34[8]];
    v101 = *(_QWORD *)v100;
    v102 = *((_QWORD *)v100 + 1);
    swift_bridgeObjectRetain(v102);
    v103 = Image.init(systemName:)(v101, v102);
    v104 = *(_QWORD *)&v33[v34[9]];
    v105 = swift_getKeyPath(&unk_100080190);
    v106 = *(_QWORD *)&v33[v34[10]];
    v107 = *(double *)&v33[v34[11]];
    swift_retain(v104);
    v108 = Font.weight(_:)(v106, v107);
    v109 = swift_getKeyPath(&unk_1000801C0);
    LOBYTE(v102) = static Edge.Set.trailing.getter(v109);
    v110 = EdgeInsets.init(_all:)(*(double *)&v33[v34[12]]);
    v171 = v103;
    v172 = v105;
    v173 = v104;
    v174 = v109;
    v175 = v108;
    v176 = v102;
    v177 = v110;
    v178 = v111;
    v179 = v112;
    v180 = v113;
    v181 = 0;
    v114 = sub_100005F78(&qword_1000A1D00);
    v115 = sub_10002FF9C();
    View.widgetAccentable(_:)(1, v114, v115);
    swift_release(v108);
    swift_release(v109);
    swift_release(v104);
    swift_release(v105);
    swift_release(v103);
    v116 = *(_QWORD *)&v33[v79];
    v117 = swift_getKeyPath(&unk_100080130);
    v118 = (uint64_t)v158;
    *v158 = v117;
    swift_storeEnumTagMultiPayload(v118, v163, 0);
    v119 = v166;
    v120 = (uint64_t *)(v118 + *(int *)(v166 + 20));
    *v120 = v147;
    v120[1] = v78;
    *(_QWORD *)(v118 + *(int *)(v119 + 24)) = v116;
    v121 = v118 + *(int *)(v119 + 28);
    *(_QWORD *)v121 = 0;
    *(_QWORD *)(v121 + 8) = 0;
    *(_WORD *)(v121 + 16) = 256;
    v122 = *(_QWORD *)((char *)v156 + (_QWORD)v33);
    v123 = swift_getKeyPath(&unk_100080160);
    v124 = v151;
    sub_1000078D4(v118, v151, type metadata accessor for LabelView);
    v125 = v124 + *(int *)(v165 + 36);
    *(_QWORD *)v125 = v123;
    *(_QWORD *)(v125 + 8) = v122;
    *(_BYTE *)(v125 + 16) = 0;
    swift_retain(v116);
    sub_100007A48(v118, type metadata accessor for LabelView);
    v126 = v170;
    sub_100007984(v124, v170, &qword_1000A1AF0);
    v127 = v152;
    sub_1000079C8(v167, v152, &qword_1000A1CC8);
    v128 = v153;
    v129 = *(void (**)(char *, char *, uint64_t))(v153 + 16);
    v130 = v154;
    v131 = v164;
    v132 = v155;
    v129(v154, v164, v155);
    sub_1000079C8(v126, v124, &qword_1000A1AF0);
    v133 = v161;
    sub_1000079C8(v127, v161, &qword_1000A1CC8);
    v134 = sub_100005F78(&qword_1000A1D40);
    v129((char *)(v133 + *(int *)(v134 + 48)), v130, v132);
    sub_1000079C8(v124, v133 + *(int *)(v134 + 64), &qword_1000A1AF0);
    sub_100007A0C(v126, &qword_1000A1AF0);
    v135 = *(void (**)(char *, uint64_t))(v128 + 8);
    v135(v131, v132);
    sub_100007A0C(v167, &qword_1000A1CC8);
    sub_100007A0C(v124, &qword_1000A1AF0);
    v135(v130, v132);
    sub_100007A0C(v127, &qword_1000A1CC8);
    v136 = sub_100005F78(&qword_1000A1CF0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 56))(v133, 0, 1, v136);
    v137 = v160;
    sub_100007984(v133, v160, &qword_1000A1CD0);
  }
  else
  {
    v138 = sub_100005F78(&qword_1000A1CF0);
    v137 = v160;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 56))(v160, 1, 1, v138);
    v133 = v161;
    v126 = v170;
  }
  v139 = v168;
  v140 = (uint64_t)v159;
  sub_1000079C8(v168, (uint64_t)v159, &qword_1000A1CE0);
  v141 = v169;
  sub_1000079C8(v169, v126, &qword_1000A1AF0);
  sub_1000079C8(v137, v133, &qword_1000A1CD0);
  v142 = v162;
  sub_1000079C8(v140, v162, &qword_1000A1CE0);
  v143 = (int *)sub_100005F78(&qword_1000A1CF8);
  sub_1000079C8(v126, v142 + v143[12], &qword_1000A1AF0);
  sub_1000079C8(v133, v142 + v143[16], &qword_1000A1CD0);
  v144 = v142 + v143[20];
  *(_QWORD *)v144 = 0;
  *(_BYTE *)(v144 + 8) = 1;
  sub_100007A0C(v137, &qword_1000A1CD0);
  sub_100007A0C(v141, &qword_1000A1AF0);
  sub_100007A0C(v139, &qword_1000A1CE0);
  sub_100007A0C(v133, &qword_1000A1CD0);
  sub_100007A0C(v126, &qword_1000A1AF0);
  return sub_100007A0C(v140, &qword_1000A1CE0);
}

uint64_t sub_10002FEF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = sub_100005F78(&qword_1000A1CB8);
  return sub_10002F220(v2, a2 + *(int *)(v4 + 44));
}

unint64_t sub_10002FF34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1CE8;
  if (!qword_1000A1CE8)
  {
    v1 = type metadata accessor for ReadingProgressIconView(255);
    result = swift_getWitnessTable(&unk_100082AE8, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1CE8);
  }
  return result;
}

unint64_t sub_10002FF9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1D08;
  if (!qword_1000A1D08)
  {
    v1 = sub_100005FC0(&qword_1000A1D00);
    sub_100030008();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1D08);
  }
  return result;
}

unint64_t sub_100030008()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1D10;
  if (!qword_1000A1D10)
  {
    v1 = sub_100005FC0(&qword_1000A1D18);
    sub_10003008C();
    sub_100007F64(&qword_1000A1058, &qword_1000A1060, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1D10);
  }
  return result;
}

unint64_t sub_10003008C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1D20;
  if (!qword_1000A1D20)
  {
    v1 = sub_100005FC0(&qword_1000A1D28);
    sub_100007F64(&qword_1000A1D30, &qword_1000A1D38, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1D20);
  }
  return result;
}

uint64_t sub_100030110()
{
  return sub_100007F64(&qword_1000A1D48, &qword_1000A1D50, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t destroy for LargeOneBookView(uint64_t a1)
{
  sub_1000075DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 128));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 160));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 192));
  return swift_release(*(_QWORD *)(a1 + 232));
}

uint64_t initializeWithCopy for LargeOneBookView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  id v20;
  id v21;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v12 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v12;
  v13 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v13;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v14 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v14;
  v15 = *(void **)(a2 + 168);
  v16 = *(void **)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v15;
  *(_QWORD *)(a1 + 176) = v16;
  v17 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v17;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  v18 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v18;
  v19 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v19;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  v20 = v15;
  v21 = v16;
  swift_bridgeObjectRetain(v17);
  swift_retain(v18);
  return a1;
}

uint64_t assignWithCopy for LargeOneBookView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  sub_1000075DC(v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 72);
  v16 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v17 = *(_QWORD *)(a2 + 88);
  v18 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v19 = *(_QWORD *)(a2 + 112);
  v20 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v21 = *(_QWORD *)(a2 + 128);
  v22 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v23;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v24 = *(_QWORD *)(a2 + 160);
  v25 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = *(void **)(a1 + 168);
  v27 = *(void **)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v27;
  v28 = v27;

  v29 = *(void **)(a2 + 176);
  v30 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v29;
  v31 = v29;

  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v32 = *(_QWORD *)(a2 + 192);
  v33 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v34 = *(_QWORD *)(a2 + 232);
  v35 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v34;
  swift_retain(v34);
  swift_release(v35);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  return a1;
}

void *initializeWithTake for LargeOneBookView(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x110uLL);
}

uint64_t assignWithTake for LargeOneBookView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 32) = v4;
  sub_1000075DC(v5, v6, v7, v8, v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v13;
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 112);
  v16 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v15;
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(a2 + 128);
  v18 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v17;
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 160));
  v19 = *(void **)(a1 + 168);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);

  v20 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);

  v21 = *(_QWORD *)(a2 + 192);
  v22 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v21;
  swift_bridgeObjectRelease(v22);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v23 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_release(v23);
  v24 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v24;
  return a1;
}

uint64_t getEnumTagSinglePayload for LargeOneBookView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 272))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LargeOneBookView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 272) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 272) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LargeOneBookView()
{
  return &type metadata for LargeOneBookView;
}

uint64_t sub_1000306D8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100083F24, 1);
}

uint64_t sub_1000306E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t OpaqueTypeConformance2;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[2];
  _QWORD v88[2];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  char v100;
  _OWORD v101[2];
  char v102;
  _BYTE v103[48];

  v2 = v1;
  v86 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v84 = *(_QWORD *)(v3 - 8);
  v85 = v3;
  __chkstk_darwin(v3);
  v83 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005F78(&qword_1000A1D58);
  __chkstk_darwin(v5);
  v7 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005F78(&qword_1000A1D60);
  __chkstk_darwin(v8);
  v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100005F78(&qword_1000A1D68);
  __chkstk_darwin(v76);
  v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100005F78(&qword_1000A1D70);
  __chkstk_darwin(v79);
  v77 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005F78(&qword_1000A1D78);
  v81 = *(_QWORD *)(v14 - 8);
  v82 = v14;
  __chkstk_darwin(v14);
  v80 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005F78(&qword_1000A1D80);
  v17 = __chkstk_darwin(v16);
  v78 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v7 = static VerticalAlignment.center.getter(v17);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 0;
  v19 = sub_100005F78(&qword_1000A1D88);
  v20 = sub_100030C54(v1, (uint64_t)&v7[*(int *)(v19 + 44)]);
  v21 = static Edge.Set.leading.getter(v20);
  v22 = *(_OWORD *)(v1 + 16);
  v101[0] = *(_OWORD *)v1;
  v101[1] = v22;
  v102 = *(_BYTE *)(v1 + 32);
  sub_100007984((uint64_t)v101, (uint64_t)v103, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v103, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v24 = v23;
  sub_10000DBE0((uint64_t)v101, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v25 = EdgeInsets.init(_all:)(v24);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  sub_1000079C8((uint64_t)v7, (uint64_t)v10, &qword_1000A1D58);
  v32 = &v10[*(int *)(v8 + 36)];
  *v32 = v21;
  *((double *)v32 + 1) = v25;
  *((_QWORD *)v32 + 2) = v27;
  *((_QWORD *)v32 + 3) = v29;
  *((_QWORD *)v32 + 4) = v31;
  v32[40] = 0;
  v33 = sub_100007A0C((uint64_t)v7, &qword_1000A1D58);
  LOBYTE(v7) = static Edge.Set.trailing.getter(v33);
  sub_10000DBE0((uint64_t)v103, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v35 = v34;
  sub_10000DBE0((uint64_t)v101, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v36 = EdgeInsets.init(_all:)(v35);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  sub_1000079C8((uint64_t)v10, (uint64_t)v12, &qword_1000A1D60);
  v43 = &v12[*(int *)(v76 + 36)];
  *v43 = (char)v7;
  *((double *)v43 + 1) = v36;
  *((_QWORD *)v43 + 2) = v38;
  *((_QWORD *)v43 + 3) = v40;
  *((_QWORD *)v43 + 4) = v42;
  v43[40] = 0;
  v44 = sub_100007A0C((uint64_t)v10, &qword_1000A1D60);
  v45 = static Edge.Set.top.getter(v44);
  v46 = v45;
  v47 = static Edge.Set.bottom.getter(v45);
  v48 = Edge.Set.init(rawValue:)(0);
  v49 = Edge.Set.init(rawValue:)(v48);
  if (Edge.Set.init(rawValue:)(v49 & v46) != v46)
    v48 = Edge.Set.init(rawValue:)(v48 | v46);
  v50 = Edge.Set.init(rawValue:)(v48);
  if (Edge.Set.init(rawValue:)(v50 & v47) != v47)
    LOBYTE(v48) = Edge.Set.init(rawValue:)(v48 | v47);
  v51 = v83;
  v52 = v79;
  v53 = (uint64_t)v77;
  v54 = EdgeInsets.init(_all:)(*(double *)(v2 + 224));
  v56 = v55;
  v58 = v57;
  v60 = v59;
  sub_1000079C8((uint64_t)v12, v53, &qword_1000A1D68);
  v61 = v53 + *(int *)(v52 + 36);
  *(_BYTE *)v61 = v48;
  *(double *)(v61 + 8) = v54;
  *(_QWORD *)(v61 + 16) = v56;
  *(_QWORD *)(v61 + 24) = v58;
  *(_QWORD *)(v61 + 32) = v60;
  *(_BYTE *)(v61 + 40) = 0;
  sub_100007A0C((uint64_t)v12, &qword_1000A1D68);
  v62 = *(_OWORD *)(v2 + 168);
  v91 = *(_OWORD *)(v2 + 152);
  v92 = v62;
  v93 = *(_OWORD *)(v2 + 184);
  v94 = *(_BYTE *)(v2 + 200);
  v63 = *(_OWORD *)(v2 + 136);
  v89 = *(_OWORD *)(v2 + 120);
  v90 = v63;
  v97 = v91;
  v98 = v62;
  v99 = v93;
  v100 = v94;
  v95 = v89;
  v96 = v63;
  v64 = sub_100013C4C();
  if ((v64 & 1) != 0)
    static AccessibilityChildBehavior.contain.getter();
  else
    static AccessibilityChildBehavior.combine.getter(v64);
  v65 = sub_100031920(&qword_1000A1D90, &qword_1000A1D70, (void (*)(void))sub_100031904);
  v66 = v80;
  View.accessibilityElement(children:)(v51, v52, v65);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v51, v85);
  sub_100007A0C(v53, &qword_1000A1D70);
  v67 = sub_100051294(0);
  v69 = v68;
  v88[0] = v67;
  v88[1] = v68;
  v87[0] = v52;
  v87[1] = v65;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v87, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v71 = sub_1000075E8();
  v72 = (uint64_t)v78;
  v73 = v82;
  View.accessibilityLabel<A>(_:)(v88, v82, &type metadata for String, OpaqueTypeConformance2, v71);
  swift_bridgeObjectRelease(v69);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v66, v73);
  return sub_100007984(v72, v86, &qword_1000A1D80);
}

uint64_t sub_100030C54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char v37;
  char v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  double v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD v106[3];
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  _QWORD v123[2];
  _OWORD v124[2];
  char v125;
  _BYTE v126[40];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  char v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  char v138;
  _OWORD v139[4];
  __int128 v140;

  v120 = a2;
  v3 = sub_100005F78(&qword_1000A1DB0);
  v116 = *(_QWORD *)(v3 - 8);
  v117 = v3;
  __chkstk_darwin(v3);
  v122 = (char *)&v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005F78(&qword_1000A1DB8);
  v6 = __chkstk_darwin(v5);
  v119 = (uint64_t)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v115 = (char *)&v107 - v9;
  __chkstk_darwin(v8);
  v118 = (uint64_t)&v107 - v10;
  v11 = type metadata accessor for URL(0);
  v109 = *(_QWORD *)(v11 - 8);
  v110 = v11;
  v12 = __chkstk_darwin(v11);
  v113 = (uint64_t)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v107 - v14;
  v16 = (int *)type metadata accessor for BookCoverView(0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v107 - v20;
  v22 = sub_100005F78(&qword_1000A1130);
  __chkstk_darwin(v22);
  v24 = (char *)&v107 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_100005F78(&qword_1000A1DC0);
  __chkstk_darwin(v111);
  v26 = (char *)&v107 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_100005F78(&qword_1000A1DC8);
  v27 = __chkstk_darwin(v112);
  v114 = (uint64_t)&v107 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v108 = (uint64_t)&v107 - v30;
  __chkstk_darwin(v29);
  v121 = (uint64_t)&v107 - v31;
  v32 = *(_OWORD *)(a1 + 56);
  v33 = *(_OWORD *)(a1 + 88);
  v139[2] = *(_OWORD *)(a1 + 72);
  v139[3] = v33;
  v140 = *(_OWORD *)(a1 + 104);
  v139[0] = *(_OWORD *)(a1 + 40);
  v139[1] = v32;
  v34 = *(_OWORD *)(a1 + 168);
  v129 = *(_OWORD *)(a1 + 152);
  v130 = v34;
  v131 = *(_OWORD *)(a1 + 184);
  v132 = *(_BYTE *)(a1 + 200);
  v35 = *(_OWORD *)(a1 + 136);
  v127 = *(_OWORD *)(a1 + 120);
  v128 = v35;
  sub_10000DE60(v139);
  v36 = v15;
  sub_100006330((uint64_t)&v127, (uint64_t)v15);
  sub_10000DEA8(v139);
  v135 = v129;
  v136 = v130;
  v137 = v131;
  v138 = v132;
  v133 = v127;
  v134 = v128;
  v37 = sub_100013C4C();
  if (*((_QWORD *)&v140 + 1))
  {
    if (v140 == v135)
      v38 = 1;
    else
      v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v135, *((_QWORD *)&v135 + 1), v140, *((_QWORD *)&v140 + 1), 0);
  }
  else
  {
    v38 = 0;
  }
  *(_QWORD *)v19 = swift_getKeyPath(&unk_100080258);
  v39 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v19, v39, 0);
  (*(void (**)(char *, char *, uint64_t))(v109 + 32))(&v19[v16[5]], v36, v110);
  v19[v16[6]] = v37 & 1;
  v40 = &v19[v16[7]];
  v41 = v130;
  *((_OWORD *)v40 + 2) = v129;
  *((_OWORD *)v40 + 3) = v41;
  *((_OWORD *)v40 + 4) = v131;
  v40[80] = v132;
  v42 = v128;
  *(_OWORD *)v40 = v127;
  *((_OWORD *)v40 + 1) = v42;
  v19[v16[8]] = v38 & 1;
  v19[v16[9]] = 0;
  sub_10000DEF8((uint64_t)v19, (uint64_t)v21);
  v43 = *(double *)(a1 + 208);
  v44 = sub_10000DF3C(&v127);
  v45 = static Alignment.leading.getter(v44);
  sub_100021164(0.0, 1, 0.0, 1, v43, 0, 0.0, 1, (uint64_t)v24, 0.0, 1, 0.0, 1, v45, v46);
  sub_100007A48((uint64_t)v21, type metadata accessor for BookCoverView);
  sub_1000079C8((uint64_t)v24, (uint64_t)v26, &qword_1000A1130);
  *(_WORD *)&v26[*(int *)(v111 + 36)] = 1;
  v47 = sub_100007A0C((uint64_t)v24, &qword_1000A1130);
  v48 = static Edge.Set.trailing.getter(v47);
  v49 = *(_OWORD *)(a1 + 16);
  v124[0] = *(_OWORD *)a1;
  v124[1] = v49;
  v125 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v124, (uint64_t)v126, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v126, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v51 = v50;
  sub_10000DBE0((uint64_t)v124, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v52 = EdgeInsets.init(_all:)(v51);
  v54 = v53;
  v56 = v55;
  v58 = v57;
  v59 = v108;
  sub_1000079C8((uint64_t)v26, v108, &qword_1000A1DC0);
  v60 = v59 + *(int *)(v112 + 36);
  *(_BYTE *)v60 = v48;
  *(double *)(v60 + 8) = v52;
  *(_QWORD *)(v60 + 16) = v54;
  *(_QWORD *)(v60 + 24) = v56;
  *(_QWORD *)(v60 + 32) = v58;
  *(_BYTE *)(v60 + 40) = 0;
  sub_100007A0C((uint64_t)v26, &qword_1000A1DC0);
  sub_100007984(v59, v121, &qword_1000A1DC8);
  sub_10000DE60(v139);
  v61 = v113;
  sub_100006330((uint64_t)&v127, v113);
  v62 = sub_10000DEA8(v139);
  __chkstk_darwin(v62);
  v106[2] = a1;
  v63 = sub_100005F78(&qword_1000A1DD0);
  v64 = sub_100007F64(&qword_1000A1DD8, &qword_1000A1DD0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  Link.init(destination:label:)(v61, sub_100031A18, v106, v63, v64);
  v65 = sub_100005F78(&qword_1000A0DD0);
  v66 = swift_allocObject(v65, 64, 7);
  *(_OWORD *)(v66 + 16) = xmmword_10007F170;
  v67 = v133;
  *(_OWORD *)(v66 + 32) = v133;
  swift_bridgeObjectRetain(*((_QWORD *)&v67 + 1));
  v69 = sub_100051468(0);
  v70 = v68;
  *(_QWORD *)(v66 + 48) = v69;
  *(_QWORD *)(v66 + 56) = v68;
  if (!*((_QWORD *)&v67 + 1))
  {
    v71 = (char *)_swiftEmptyArrayStorage;
    if (!v68)
      goto LABEL_17;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain(*((_QWORD *)&v67 + 1));
  v71 = sub_1000408F8(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v73 = *((_QWORD *)v71 + 2);
  v72 = *((_QWORD *)v71 + 3);
  if (v73 >= v72 >> 1)
    v71 = sub_1000408F8((char *)(v72 > 1), v73 + 1, 1, v71);
  *((_QWORD *)v71 + 2) = v73 + 1;
  *(_OWORD *)&v71[16 * v73 + 32] = v67;
  if (v70)
  {
LABEL_12:
    swift_bridgeObjectRetain(v70);
    if ((swift_isUniquelyReferenced_nonNull_native(v71) & 1) == 0)
      v71 = sub_1000408F8(0, *((_QWORD *)v71 + 2) + 1, 1, v71);
    v75 = *((_QWORD *)v71 + 2);
    v74 = *((_QWORD *)v71 + 3);
    if (v75 >= v74 >> 1)
      v71 = sub_1000408F8((char *)(v74 > 1), v75 + 1, 1, v71);
    *((_QWORD *)v71 + 2) = v75 + 1;
    v76 = &v71[16 * v75];
    *((_QWORD *)v76 + 4) = v69;
    *((_QWORD *)v76 + 5) = v70;
  }
LABEL_17:
  swift_release(v66);
  v77 = *((_QWORD *)v71 + 2);
  if (v77)
  {
    v78 = v71 + 40;
    v79 = _swiftEmptyArrayStorage;
    do
    {
      v84 = *(v78 - 1);
      v83 = *v78;
      v85 = HIBYTE(*v78) & 0xFLL;
      if ((*v78 & 0x2000000000000000) == 0)
        v85 = v84 & 0xFFFFFFFFFFFFLL;
      if (v85)
      {
        swift_bridgeObjectRetain(*v78);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v79);
        v123[0] = v79;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10005C3B8(0, v79[2] + 1, 1);
          v79 = (_QWORD *)v123[0];
        }
        v81 = v79[2];
        v80 = v79[3];
        if (v81 >= v80 >> 1)
        {
          sub_10005C3B8(v80 > 1, v81 + 1, 1);
          v79 = (_QWORD *)v123[0];
        }
        v79[2] = v81 + 1;
        v82 = &v79[2 * v81];
        v82[4] = v84;
        v82[5] = v83;
      }
      v78 += 2;
      --v77;
    }
    while (v77);
  }
  else
  {
    v79 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v71);
  v123[0] = v79;
  v87 = sub_100005F78(&qword_1000A0DD8);
  v88 = sub_100007F64(&qword_1000A0DE0, &qword_1000A0DD8, (uint64_t)&protocol conformance descriptor for [A]);
  v89 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v87, v88);
  v91 = v90;
  swift_release(v79);
  v123[0] = v89;
  v123[1] = v91;
  v92 = sub_100007F64(&qword_1000A1DE0, &qword_1000A1DB0, (uint64_t)&protocol conformance descriptor for Link<A>);
  v93 = sub_1000075E8();
  v94 = (uint64_t)v115;
  v95 = v117;
  v96 = v92;
  v97 = v122;
  View.accessibilityLabel<A>(_:)(v123, v117, &type metadata for String, v96, v93);
  swift_bridgeObjectRelease(v91);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v97, v95);
  v98 = v118;
  sub_100007984(v94, v118, &qword_1000A1DB8);
  v99 = v121;
  v100 = v114;
  sub_1000079C8(v121, v114, &qword_1000A1DC8);
  v101 = v119;
  sub_1000079C8(v98, v119, &qword_1000A1DB8);
  v102 = v120;
  sub_1000079C8(v100, v120, &qword_1000A1DC8);
  v103 = sub_100005F78(&qword_1000A1DE8);
  sub_1000079C8(v101, v102 + *(int *)(v103 + 48), &qword_1000A1DB8);
  v104 = v102 + *(int *)(v103 + 64);
  *(_QWORD *)v104 = 0;
  *(_BYTE *)(v104 + 8) = 1;
  sub_100007A0C(v98, &qword_1000A1DB8);
  sub_100007A0C(v99, &qword_1000A1DC8);
  sub_100007A0C(v101, &qword_1000A1DB8);
  return sub_100007A0C(v100, &qword_1000A1DC8);
}

uint64_t sub_100031608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = sub_100005F78(&qword_1000A1DF0);
  return sub_100031650(a1, a2 + *(int *)(v4 + 44));
}

uint64_t sub_100031650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char v60;

  v4 = (int *)type metadata accessor for LabelView(0);
  v5 = __chkstk_darwin(v4);
  v45 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v40 - v7);
  v9 = *(_OWORD *)(a1 + 168);
  v51 = *(_OWORD *)(a1 + 152);
  v52 = v9;
  v53 = *(_OWORD *)(a1 + 184);
  v54 = *(_BYTE *)(a1 + 200);
  v10 = *(_OWORD *)(a1 + 136);
  v49 = *(_OWORD *)(a1 + 120);
  v50 = v10;
  v60 = v54;
  v57 = v51;
  v58 = v9;
  v59 = v53;
  v55 = v49;
  v56 = v10;
  v43 = *((_QWORD *)&v49 + 1);
  v44 = v49;
  v11 = swift_bridgeObjectRetain(*((_QWORD *)&v49 + 1));
  v42 = static Edge.Set.bottom.getter(v11);
  v12 = *(_OWORD *)(a1 + 224);
  v46 = *(_OWORD *)(a1 + 208);
  v47 = v12;
  v13 = *(_OWORD *)(a1 + 256);
  v48[0] = *(_OWORD *)(a1 + 240);
  v48[1] = v13;
  v14 = EdgeInsets.init(_all:)(*(double *)&v13);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v21 = sub_100013C4C();
  v22 = (uint64_t *)v48 + 1;
  if ((v21 & 1) == 0)
    v22 = (uint64_t *)v48;
  v41 = *v22;
  KeyPath = swift_getKeyPath(&unk_100080288);
  v24 = sub_100051468(0);
  v26 = v25;
  v27 = *((_QWORD *)&v47 + 1);
  v28 = sub_100031A28((uint64_t)&v46);
  v29 = static HierarchicalShapeStyle.secondary.getter(v28);
  v30 = *((_QWORD *)&v46 + 1);
  v31 = v29;
  *v8 = swift_getKeyPath(&unk_100080258);
  v32 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v8, v32, 0);
  v33 = (_QWORD *)((char *)v8 + v4[5]);
  *v33 = v24;
  v33[1] = v26;
  *(_QWORD *)((char *)v8 + v4[6]) = v27;
  v34 = (char *)v8 + v4[7];
  *(_QWORD *)v34 = v31;
  *((_QWORD *)v34 + 1) = v30;
  *((_WORD *)v34 + 8) = 0;
  v35 = v45;
  sub_100012F00((uint64_t)v8, v45);
  v36 = v43;
  *(_QWORD *)a2 = v44;
  *(_QWORD *)(a2 + 8) = v36;
  *(_BYTE *)(a2 + 16) = v42;
  *(double *)(a2 + 24) = v14;
  *(_QWORD *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 40) = v18;
  *(_QWORD *)(a2 + 48) = v20;
  *(_BYTE *)(a2 + 56) = 0;
  v37 = v41;
  *(_QWORD *)(a2 + 64) = KeyPath;
  *(_QWORD *)(a2 + 72) = v37;
  *(_BYTE *)(a2 + 80) = 0;
  v38 = sub_100005F78(&qword_1000A1DF8);
  sub_100012F00(v35, a2 + *(int *)(v38 + 48));
  swift_bridgeObjectRetain(v36);
  swift_retain(KeyPath);
  sub_100007A48((uint64_t)v8, type metadata accessor for LabelView);
  sub_100007A48(v35, type metadata accessor for LabelView);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v36);
}

uint64_t sub_1000318BC@<X0>(uint64_t a1@<X8>)
{
  const void *v1;
  _BYTE v4[272];

  memcpy(v4, v1, sizeof(v4));
  return sub_1000306E8(a1);
}

uint64_t sub_100031904()
{
  return sub_100031920(&qword_1000A1D98, &qword_1000A1D68, (void (*)(void))sub_10003198C);
}

uint64_t sub_100031920(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005FC0(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003198C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A1DA0;
  if (!qword_1000A1DA0)
  {
    v1 = sub_100005FC0(&qword_1000A1D60);
    sub_100007F64(&qword_1000A1DA8, &qword_1000A1D58, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1DA0);
  }
  return result;
}

uint64_t sub_100031A18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100031608(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100031A28(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 24));
  return a1;
}

uint64_t initializeWithCopy for LargeOneBookView.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for LargeOneBookView.ViewConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = a2[3];
  v5 = a1[3];
  a1[3] = v4;
  swift_retain(v4);
  swift_release(v5);
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

__n128 initializeWithTake for MediumWidgetViewModel(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for LargeOneBookView.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for LargeOneBookView.ViewConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LargeOneBookView.ViewConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LargeOneBookView.ViewConfiguration()
{
  return &type metadata for LargeOneBookView.ViewConfiguration;
}

unint64_t sub_100031C14()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000A1E00;
  if (!qword_1000A1E00)
  {
    v1 = sub_100005FC0(&qword_1000A1D80);
    v2[0] = sub_100005FC0(&qword_1000A1D70);
    v2[1] = sub_100031920(&qword_1000A1D90, &qword_1000A1D70, (void (*)(void))sub_100031904);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10001FFC8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A1E00);
  }
  return result;
}

uint64_t *sub_100031CC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    v7 = (int *)sub_100005F78(&qword_1000A0A50);
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      v11 = v7[12];
      v12 = (uint64_t *)((char *)a1 + v11);
      v13 = (uint64_t *)((char *)a2 + v11);
      v14 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v10);
      if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
      {
        v15 = *v13;
        *v12 = *v13;
        swift_retain(v15);
        v16 = 1;
      }
      else
      {
        *(_DWORD *)v12 = *(_DWORD *)v13;
        v17 = sub_100005F78(&qword_1000A18C0);
        v18 = *(int *)(v17 + 48);
        v19 = (char *)v12 + v18;
        v20 = (char *)v13 + v18;
        v21 = type metadata accessor for BlendMode(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
        v22 = *(int *)(v17 + 64);
        v23 = (char *)v12 + v22;
        v24 = (char *)v13 + v22;
        v25 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
        v16 = 0;
      }
      swift_storeEnumTagMultiPayload(v12, v14, v16);
      v26 = v7[16];
      v27 = (char *)a1 + v26;
      v28 = (char *)a2 + v26;
      v29 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
      v30 = v7[20];
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      v33 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
      *(uint64_t *)((char *)a1 + v7[24]) = *(uint64_t *)((char *)a2 + v7[24]);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t type metadata accessor for CircularProgressView.ColorStyle(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A1FC8, (uint64_t)&nominal type descriptor for CircularProgressView.ColorStyle);
}

uint64_t sub_100031ED8(uint64_t a1)
{
  int *v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (int *)sub_100005F78(&qword_1000A0A50);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v2 - 1) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    v4 = (_QWORD *)(a1 + v2[12]);
    v5 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
    {
      swift_release(*v4);
    }
    else
    {
      v6 = sub_100005F78(&qword_1000A18C0);
      v7 = (char *)v4 + *(int *)(v6 + 48);
      v8 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
      v9 = (char *)v4 + *(int *)(v6 + 64);
      v10 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    }
    v11 = a1 + v2[16];
    v12 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    v13 = a1 + v2[20];
    v14 = type metadata accessor for Font.Design(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  return result;
}

_QWORD *sub_100032018(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v6 = (int *)sub_100005F78(&qword_1000A0A50);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    v9 = v6[12];
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    v12 = type metadata accessor for CircularProgressView.ColorStyle(0);
    swift_bridgeObjectRetain(v8);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = *v11;
      *v10 = *v11;
      swift_retain(v13);
      v14 = 1;
    }
    else
    {
      *(_DWORD *)v10 = *(_DWORD *)v11;
      v15 = sub_100005F78(&qword_1000A18C0);
      v16 = *(int *)(v15 + 48);
      v17 = (char *)v10 + v16;
      v18 = (char *)v11 + v16;
      v19 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
      v20 = *(int *)(v15 + 64);
      v21 = (char *)v10 + v20;
      v22 = (char *)v11 + v20;
      v23 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v24 = v6[16];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = v6[20];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    *(_QWORD *)((char *)a1 + v6[24]) = *(_QWORD *)((char *)a2 + v6[24]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

_QWORD *sub_1000321F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;

  v6 = (int *)sub_100005F78(&qword_1000A0A50);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      v11 = a2[1];
      a1[1] = v11;
      v12 = v6[12];
      v13 = (_QWORD *)((char *)a1 + v12);
      v14 = (_QWORD *)((char *)a2 + v12);
      v15 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v11);
      if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
      {
        v16 = *v14;
        *v13 = *v14;
        swift_retain(v16);
        v17 = 1;
      }
      else
      {
        *(_DWORD *)v13 = *(_DWORD *)v14;
        v26 = sub_100005F78(&qword_1000A18C0);
        v27 = *(int *)(v26 + 48);
        v28 = (char *)v13 + v27;
        v29 = (char *)v14 + v27;
        v30 = type metadata accessor for BlendMode(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
        v31 = *(int *)(v26 + 64);
        v32 = (char *)v13 + v31;
        v33 = (char *)v14 + v31;
        v34 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
        v17 = 0;
      }
      swift_storeEnumTagMultiPayload(v13, v15, v17);
      v35 = v6[16];
      v36 = (char *)a1 + v35;
      v37 = (char *)a2 + v35;
      v38 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
      v39 = v6[20];
      v40 = (char *)a1 + v39;
      v41 = (char *)a2 + v39;
      v42 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
      *(_QWORD *)((char *)a1 + v6[24]) = *(_QWORD *)((char *)a2 + v6[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
      return a1;
    }
LABEL_7:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  if (v10)
  {
    sub_100007A0C((uint64_t)a1, &qword_1000A0A50);
    goto LABEL_7;
  }
  *a1 = *a2;
  v18 = a2[1];
  v19 = a1[1];
  a1[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  if (a1 != a2)
  {
    v20 = v6[12];
    v21 = (_QWORD *)((char *)a1 + v20);
    v22 = (_QWORD *)((char *)a2 + v20);
    sub_100032554((uint64_t)a1 + v20);
    v23 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = *v22;
      *v21 = *v22;
      swift_retain(v24);
      v25 = 1;
    }
    else
    {
      *(_DWORD *)v21 = *(_DWORD *)v22;
      v43 = sub_100005F78(&qword_1000A18C0);
      v44 = *(int *)(v43 + 48);
      v45 = (char *)v21 + v44;
      v46 = (char *)v22 + v44;
      v47 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
      v48 = *(int *)(v43 + 64);
      v49 = (char *)v21 + v48;
      v50 = (char *)v22 + v48;
      v51 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v23, v25);
  }
  v52 = v6[16];
  v53 = (char *)a1 + v52;
  v54 = (char *)a2 + v52;
  v55 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 24))(v53, v54, v55);
  v56 = v6[20];
  v57 = (char *)a1 + v56;
  v58 = (char *)a2 + v56;
  v59 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 24))(v57, v58, v59);
  *(_QWORD *)((char *)a1 + v6[24]) = *(_QWORD *)((char *)a2 + v6[24]);
  return a1;
}

uint64_t sub_100032554(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CircularProgressView.ColorStyle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *sub_100032590(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v6 = (int *)sub_100005F78(&qword_1000A0A50);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v8 = v6[12];
    v9 = (_DWORD *)((char *)a1 + v8);
    v10 = (_DWORD *)((char *)a2 + v8);
    v11 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v10, v11))
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      *v9 = *v10;
      v12 = sub_100005F78(&qword_1000A18C0);
      v13 = *(int *)(v12 + 48);
      v14 = (char *)v9 + v13;
      v15 = (char *)v10 + v13;
      v16 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      v17 = *(int *)(v12 + 64);
      v18 = (char *)v9 + v17;
      v19 = (char *)v10 + v17;
      v20 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
      swift_storeEnumTagMultiPayload(v9, v11, 0);
    }
    v21 = v6[16];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
    v25 = v6[20];
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    v28 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
    *(_QWORD *)((char *)a1 + v6[24]) = *(_QWORD *)((char *)a2 + v6[24]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

_QWORD *sub_100032760(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;

  v6 = (int *)sub_100005F78(&qword_1000A0A50);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v11 = v6[12];
      v12 = (_DWORD *)((char *)a1 + v11);
      v13 = (_DWORD *)((char *)a2 + v11);
      v14 = type metadata accessor for CircularProgressView.ColorStyle(0);
      if (swift_getEnumCaseMultiPayload(v13, v14))
      {
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        *v12 = *v13;
        v21 = sub_100005F78(&qword_1000A18C0);
        v22 = *(int *)(v21 + 48);
        v23 = (char *)v12 + v22;
        v24 = (char *)v13 + v22;
        v25 = type metadata accessor for BlendMode(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
        v26 = *(int *)(v21 + 64);
        v27 = (char *)v12 + v26;
        v28 = (char *)v13 + v26;
        v29 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
        swift_storeEnumTagMultiPayload(v12, v14, 0);
      }
      v30 = v6[16];
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      v33 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
      v34 = v6[20];
      v35 = (char *)a1 + v34;
      v36 = (char *)a2 + v34;
      v37 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
      *(_QWORD *)((char *)a1 + v6[24]) = *(_QWORD *)((char *)a2 + v6[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
      return a1;
    }
LABEL_7:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  if (v10)
  {
    sub_100007A0C((uint64_t)a1, &qword_1000A0A50);
    goto LABEL_7;
  }
  v15 = a2[1];
  v16 = a1[1];
  *a1 = *a2;
  a1[1] = v15;
  swift_bridgeObjectRelease(v16);
  if (a1 != a2)
  {
    v17 = v6[12];
    v18 = (_DWORD *)((char *)a1 + v17);
    v19 = (_DWORD *)((char *)a2 + v17);
    sub_100032554((uint64_t)a1 + v17);
    v20 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v19, v20))
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      *v18 = *v19;
      v38 = sub_100005F78(&qword_1000A18C0);
      v39 = *(int *)(v38 + 48);
      v40 = (char *)v18 + v39;
      v41 = (char *)v19 + v39;
      v42 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
      v43 = *(int *)(v38 + 64);
      v44 = (char *)v18 + v43;
      v45 = (char *)v19 + v43;
      v46 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
      swift_storeEnumTagMultiPayload(v18, v20, 0);
    }
  }
  v47 = v6[16];
  v48 = (char *)a1 + v47;
  v49 = (char *)a2 + v47;
  v50 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 40))(v48, v49, v50);
  v51 = v6[20];
  v52 = (char *)a1 + v51;
  v53 = (char *)a2 + v51;
  v54 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 40))(v52, v53, v54);
  *(_QWORD *)((char *)a1 + v6[24]) = *(_QWORD *)((char *)a2 + v6[24]);
  return a1;
}

uint64_t sub_100032AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100032AB0);
}

uint64_t sub_100032AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_100005F78(&qword_1000A0A50);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t sub_100032B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100032B0C);
}

uint64_t sub_100032B0C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = sub_100005F78(&qword_1000A0A50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_100032B60(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F78(&qword_1000A0A50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t sub_100032B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F78(&qword_1000A0A50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

uint64_t type metadata accessor for CircularProgressView.Content(uint64_t a1)
{
  return sub_10000A18C(a1, (uint64_t *)&unk_1000A1E78, (uint64_t)&nominal type descriptor for CircularProgressView.Content);
}

uint64_t sub_100032BF4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[5];
  _BYTE v7[32];

  v6[0] = &unk_100080308;
  result = type metadata accessor for CircularProgressView.ColorStyle(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Font.TextStyle(319);
    if (v4 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for Font.Design(319);
      if (v5 <= 0x3F)
      {
        v6[3] = *(_QWORD *)(result - 8) + 64;
        v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
        swift_getTupleTypeLayout(v7, 0, 5, v6);
        swift_initEnumMetadataSinglePayload(a1, 256, v7, 1);
        return 0;
      }
    }
  }
  return result;
}

_QWORD *sub_100032CBC(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  char *v62;
  char *v63;
  uint64_t v64;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100005F78(&qword_1000A18B8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = sub_100005F78(&qword_1000A09A0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[7];
    *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
    v24 = (_QWORD *)((char *)a1 + v23);
    v25 = (_QWORD *)((char *)a2 + v23);
    v26 = (int *)sub_100005F78(&qword_1000A0A50);
    v27 = *((_QWORD *)v26 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v27 + 48))(v25, 1, v26))
    {
      v28 = type metadata accessor for CircularProgressView.Content(0);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v64 = v27;
      v29 = v25[1];
      *v24 = *v25;
      v24[1] = v29;
      v30 = v26[12];
      v31 = (_QWORD *)((char *)v24 + v30);
      v32 = (_QWORD *)((char *)v25 + v30);
      v33 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v29);
      if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
      {
        v34 = *v32;
        *v31 = *v32;
        swift_retain(v34);
        v35 = 1;
      }
      else
      {
        *(_DWORD *)v31 = *(_DWORD *)v32;
        v36 = sub_100005F78(&qword_1000A18C0);
        v37 = *(int *)(v36 + 48);
        v62 = (char *)v32 + v37;
        v63 = (char *)v31 + v37;
        v38 = type metadata accessor for BlendMode(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v63, v62, v38);
        v39 = *(int *)(v36 + 64);
        v40 = (char *)v31 + v39;
        v41 = (char *)v32 + v39;
        v42 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
        v35 = 0;
      }
      swift_storeEnumTagMultiPayload(v31, v33, v35);
      v43 = v26[16];
      v44 = (char *)v24 + v43;
      v45 = (char *)v25 + v43;
      v46 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
      v47 = v26[20];
      v48 = (char *)v24 + v47;
      v49 = (char *)v25 + v47;
      v50 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
      *(_QWORD *)((char *)v24 + v26[24]) = *(_QWORD *)((char *)v25 + v26[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v64 + 56))(v24, 0, 1, v26);
    }
    v51 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v52 = *(_QWORD *)((char *)a2 + v51);
    *(_QWORD *)((char *)a1 + v51) = v52;
    v53 = a3[10];
    v54 = a3[11];
    v55 = *(_QWORD *)((char *)a2 + v53);
    *(_QWORD *)((char *)a1 + v53) = v55;
    v56 = (char *)a1 + v54;
    v57 = (char *)a2 + v54;
    v58 = type metadata accessor for BlendMode(0);
    v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
    swift_retain(v52);
    swift_retain(v55);
    v59(v56, v57, v58);
    v60 = a3[13];
    *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
    *(_QWORD *)((char *)a1 + v60) = *(_QWORD *)((char *)a2 + v60);
    *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  }
  return a1;
}

uint64_t sub_100033054(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v4 = sub_100005F78(&qword_1000A18B8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (char *)a1 + a2[7];
  v10 = (int *)sub_100005F78(&qword_1000A0A50);
  if (!(*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48))(v9, 1, v10))
  {
    swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
    v11 = &v9[v10[12]];
    v12 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      swift_release(*(_QWORD *)v11);
    }
    else
    {
      v13 = sub_100005F78(&qword_1000A18C0);
      v14 = &v11[*(int *)(v13 + 48)];
      v15 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
      v16 = &v11[*(int *)(v13 + 64)];
      v17 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
    }
    v18 = &v9[v10[16]];
    v19 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    v20 = &v9[v10[20]];
    v21 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  }
  swift_release(*(_QWORD *)((char *)a1 + a2[9]));
  swift_release(*(_QWORD *)((char *)a1 + a2[10]));
  v22 = (char *)a1 + a2[11];
  v23 = type metadata accessor for BlendMode(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
}

_QWORD *sub_100033268(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v60;
  char *v61;
  uint64_t v62;

  v6 = sub_100005F78(&qword_1000A18B8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v24 = (int *)sub_100005F78(&qword_1000A0A50);
  v25 = *((_QWORD *)v24 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v25 + 48))(v23, 1, v24))
  {
    v26 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v62 = v25;
    v27 = v23[1];
    *v22 = *v23;
    v22[1] = v27;
    v28 = v24[12];
    v29 = (_QWORD *)((char *)v22 + v28);
    v30 = (_QWORD *)((char *)v23 + v28);
    v31 = type metadata accessor for CircularProgressView.ColorStyle(0);
    swift_bridgeObjectRetain(v27);
    if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
    {
      v32 = *v30;
      *v29 = *v30;
      swift_retain(v32);
      v33 = 1;
    }
    else
    {
      *(_DWORD *)v29 = *(_DWORD *)v30;
      v34 = sub_100005F78(&qword_1000A18C0);
      v35 = *(int *)(v34 + 48);
      v60 = (char *)v30 + v35;
      v61 = (char *)v29 + v35;
      v36 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v61, v60, v36);
      v37 = *(int *)(v34 + 64);
      v38 = (char *)v29 + v37;
      v39 = (char *)v30 + v37;
      v40 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v31, v33);
    v41 = v24[16];
    v42 = (char *)v22 + v41;
    v43 = (char *)v23 + v41;
    v44 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
    v45 = v24[20];
    v46 = (char *)v22 + v45;
    v47 = (char *)v23 + v45;
    v48 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
    *(_QWORD *)((char *)v22 + v24[24]) = *(_QWORD *)((char *)v23 + v24[24]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v62 + 56))(v22, 0, 1, v24);
  }
  v49 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v50 = *(_QWORD *)((char *)a2 + v49);
  *(_QWORD *)((char *)a1 + v49) = v50;
  v51 = a3[10];
  v52 = a3[11];
  v53 = *(_QWORD *)((char *)a2 + v51);
  *(_QWORD *)((char *)a1 + v51) = v53;
  v54 = (char *)a1 + v52;
  v55 = (char *)a2 + v52;
  v56 = type metadata accessor for BlendMode(0);
  v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16);
  swift_retain(v50);
  swift_retain(v53);
  v57(v54, v55, v56);
  v58 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *(_QWORD *)((char *)a1 + v58) = *(_QWORD *)((char *)a2 + v58);
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  return a1;
}

_QWORD *sub_1000335D4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int *v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD *, uint64_t, int *);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v86;
  char *v87;
  uint64_t *v88;
  char *v89;
  uint64_t v90;
  char *v91;

  if (a1 != a2)
  {
    sub_100007A0C((uint64_t)a1, &qword_1000A18B8);
    v6 = sub_100005F78(&qword_1000A18B8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    sub_100007A0C((uint64_t)a1 + v12, &qword_1000A09A0);
    v15 = sub_100005F78(&qword_1000A09A0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v21 = a3[7];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v24 = (int *)sub_100005F78(&qword_1000A0A50);
  v25 = *((_QWORD *)v24 - 1);
  v26 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      *v22 = *v23;
      v29 = v23[1];
      v22[1] = v29;
      v30 = v24[12];
      v88 = (_QWORD *)((char *)v22 + v30);
      v31 = (_QWORD *)((char *)v23 + v30);
      v32 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v29);
      v90 = v32;
      if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
      {
        v33 = *v31;
        v34 = v88;
        *v88 = *v31;
        swift_retain(v33);
        v35 = 1;
      }
      else
      {
        v34 = v88;
        *(_DWORD *)v88 = *(_DWORD *)v31;
        v45 = sub_100005F78(&qword_1000A18C0);
        v46 = *(int *)(v45 + 48);
        v86 = (char *)v31 + v46;
        v87 = (char *)v88 + v46;
        v47 = type metadata accessor for BlendMode(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v87, v86, v47);
        v48 = *(int *)(v45 + 64);
        v49 = (char *)v88 + v48;
        v50 = (char *)v31 + v48;
        v51 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
        v35 = 0;
      }
      swift_storeEnumTagMultiPayload(v34, v90, v35);
      v52 = v24[16];
      v53 = (char *)v22 + v52;
      v54 = (char *)v23 + v52;
      v55 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
      v56 = v24[20];
      v57 = (char *)v22 + v56;
      v58 = (char *)v23 + v56;
      v59 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
      *(_QWORD *)((char *)v22 + v24[24]) = *(_QWORD *)((char *)v23 + v24[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_24;
    }
LABEL_15:
    v36 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_24;
  }
  if (v28)
  {
    sub_100007A0C((uint64_t)v22, &qword_1000A0A50);
    goto LABEL_15;
  }
  *v22 = *v23;
  v37 = v23[1];
  v38 = v22[1];
  v22[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  if (a1 != a2)
  {
    v39 = v24[12];
    v40 = (_QWORD *)((char *)v22 + v39);
    v41 = (_QWORD *)((char *)v23 + v39);
    sub_100032554((uint64_t)v22 + v39);
    v42 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
    {
      v43 = *v41;
      *v40 = *v41;
      swift_retain(v43);
      v44 = 1;
    }
    else
    {
      *(_DWORD *)v40 = *(_DWORD *)v41;
      v60 = sub_100005F78(&qword_1000A18C0);
      v61 = *(int *)(v60 + 48);
      v89 = (char *)v41 + v61;
      v91 = (char *)v40 + v61;
      v62 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v91, v89, v62);
      v63 = *(int *)(v60 + 64);
      v64 = (char *)v40 + v63;
      v65 = (char *)v41 + v63;
      v66 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
      v44 = 0;
    }
    swift_storeEnumTagMultiPayload(v40, v42, v44);
  }
  v67 = v24[16];
  v68 = (char *)v22 + v67;
  v69 = (char *)v23 + v67;
  v70 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 24))(v68, v69, v70);
  v71 = v24[20];
  v72 = (char *)v22 + v71;
  v73 = (char *)v23 + v71;
  v74 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 24))(v72, v73, v74);
  *(_QWORD *)((char *)v22 + v24[24]) = *(_QWORD *)((char *)v23 + v24[24]);
LABEL_24:
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v75 = a3[9];
  v76 = *(_QWORD *)((char *)a2 + v75);
  v77 = *(_QWORD *)((char *)a1 + v75);
  *(_QWORD *)((char *)a1 + v75) = v76;
  swift_retain(v76);
  swift_release(v77);
  v78 = a3[10];
  v79 = *(_QWORD *)((char *)a2 + v78);
  v80 = *(_QWORD *)((char *)a1 + v78);
  *(_QWORD *)((char *)a1 + v78) = v79;
  swift_retain(v79);
  swift_release(v80);
  v81 = a3[11];
  v82 = (char *)a1 + v81;
  v83 = (char *)a2 + v81;
  v84 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 24))(v82, v83, v84);
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  return a1;
}

char *sub_100033B18(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;

  v6 = sub_100005F78(&qword_1000A18B8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = (int *)sub_100005F78(&qword_1000A0A50);
  v17 = *((_QWORD *)v16 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
  {
    v18 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
    v19 = v16[12];
    v20 = &v14[v19];
    v21 = &v15[v19];
    v22 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v21, v22))
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v23 = sub_100005F78(&qword_1000A18C0);
      v24 = *(int *)(v23 + 48);
      v45 = &v20[v24];
      v46 = v23;
      v44 = &v21[v24];
      v25 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v45, v44, v25);
      v26 = *(int *)(v46 + 64);
      v47 = &v20[v26];
      v27 = &v21[v26];
      v28 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v47, v27, v28);
      swift_storeEnumTagMultiPayload(v20, v22, 0);
    }
    v29 = v16[16];
    v30 = &v14[v29];
    v31 = &v15[v29];
    v32 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
    v33 = v16[20];
    v34 = &v14[v33];
    v35 = &v15[v33];
    v36 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
    *(_QWORD *)&v14[v16[24]] = *(_QWORD *)&v15[v16[24]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
  }
  v37 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  *(_QWORD *)&a1[v37] = *(_QWORD *)&a2[v37];
  v38 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v41 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
  v42 = a3[13];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  *(_QWORD *)&a1[v42] = *(_QWORD *)&a2[v42];
  *(_QWORD *)&a1[a3[14]] = *(_QWORD *)&a2[a3[14]];
  return a1;
}

char *sub_100033E60(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, int *);
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;

  if (a1 != a2)
  {
    sub_100007A0C((uint64_t)a1, &qword_1000A18B8);
    v6 = sub_100005F78(&qword_1000A18B8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100007A0C((uint64_t)&a1[v8], &qword_1000A09A0);
    v11 = sub_100005F78(&qword_1000A09A0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = (int *)sub_100005F78(&qword_1000A0A50);
  v17 = *((_QWORD *)v16 - 1);
  v18 = *(uint64_t (**)(char *, uint64_t, int *))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v21 = v16[12];
      v22 = &v14[v21];
      v23 = &v15[v21];
      v24 = type metadata accessor for CircularProgressView.ColorStyle(0);
      if (swift_getEnumCaseMultiPayload(v23, v24))
      {
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        *(_DWORD *)v22 = *(_DWORD *)v23;
        v32 = sub_100005F78(&qword_1000A18C0);
        v33 = *(int *)(v32 + 48);
        v72 = &v22[v33];
        v74 = v32;
        v71 = &v23[v33];
        v34 = type metadata accessor for BlendMode(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v72, v71, v34);
        v35 = *(int *)(v74 + 64);
        v75 = &v22[v35];
        v36 = &v23[v35];
        v37 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v75, v36, v37);
        swift_storeEnumTagMultiPayload(v22, v24, 0);
      }
      v38 = v16[16];
      v39 = &v14[v38];
      v40 = &v15[v38];
      v41 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
      v42 = v16[20];
      v43 = &v14[v42];
      v44 = &v15[v42];
      v45 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
      *(_QWORD *)&v14[v16[24]] = *(_QWORD *)&v15[v16[24]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_22;
    }
LABEL_14:
    v25 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_22;
  }
  if (v20)
  {
    sub_100007A0C((uint64_t)v14, &qword_1000A0A50);
    goto LABEL_14;
  }
  v26 = *((_QWORD *)v15 + 1);
  v27 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v26;
  swift_bridgeObjectRelease(v27);
  if (a1 != a2)
  {
    v28 = v16[12];
    v29 = &v14[v28];
    v30 = &v15[v28];
    sub_100032554((uint64_t)&v14[v28]);
    v31 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v30, v31))
    {
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      *(_DWORD *)v29 = *(_DWORD *)v30;
      v46 = sub_100005F78(&qword_1000A18C0);
      v47 = *(int *)(v46 + 48);
      v73 = &v30[v47];
      v76 = &v29[v47];
      v48 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v76, v73, v48);
      v49 = *(int *)(v46 + 64);
      v50 = &v29[v49];
      v51 = &v30[v49];
      v52 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
      swift_storeEnumTagMultiPayload(v29, v31, 0);
    }
  }
  v53 = v16[16];
  v54 = &v14[v53];
  v55 = &v15[v53];
  v56 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 40))(v54, v55, v56);
  v57 = v16[20];
  v58 = &v14[v57];
  v59 = &v15[v57];
  v60 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 40))(v58, v59, v60);
  *(_QWORD *)&v14[v16[24]] = *(_QWORD *)&v15[v16[24]];
LABEL_22:
  v61 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v62 = *(_QWORD *)&a1[v61];
  *(_QWORD *)&a1[v61] = *(_QWORD *)&a2[v61];
  swift_release(v62);
  v63 = a3[10];
  v64 = *(_QWORD *)&a1[v63];
  *(_QWORD *)&a1[v63] = *(_QWORD *)&a2[v63];
  swift_release(v64);
  v65 = a3[11];
  v66 = &a1[v65];
  v67 = &a2[v65];
  v68 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 40))(v66, v67, v68);
  v69 = a3[13];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  *(_QWORD *)&a1[v69] = *(_QWORD *)&a2[v69];
  *(_QWORD *)&a1[a3[14]] = *(_QWORD *)&a2[a3[14]];
  return a1;
}

uint64_t sub_100034358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100034364);
}

uint64_t sub_100034364(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v6 = sub_100005F78(&qword_1000A1E88);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100005F78(&qword_1000A0FA8);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_12:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = type metadata accessor for CircularProgressView.Content(0);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_12;
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for BlendMode(0);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[11];
    goto LABEL_12;
  }
  v15 = *(_QWORD *)(a1 + a3[9]);
  if (v15 >= 0xFFFFFFFF)
    LODWORD(v15) = -1;
  return (v15 + 1);
}

uint64_t sub_10003445C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100034468);
}

uint64_t sub_100034468(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = sub_100005F78(&qword_1000A1E88);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_100005F78(&qword_1000A0FA8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      result = type metadata accessor for CircularProgressView.Content(0);
      v14 = *(_QWORD *)(result - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = result;
        v15 = a4[7];
      }
      else
      {
        if (a3 == 0x7FFFFFFF)
        {
          *(_QWORD *)(a1 + a4[9]) = (a2 - 1);
          return result;
        }
        v10 = type metadata accessor for BlendMode(0);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[11];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for CircularProgressView(uint64_t a1)
{
  return sub_10000A18C(a1, (uint64_t *)&unk_1000A1EE8, (uint64_t)&nominal type descriptor for CircularProgressView);
}

void sub_100034570(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[11];

  sub_100034678(319, &qword_1000A1EF8, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100034678(319, (unint64_t *)&qword_1000A1F00, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v6 = type metadata accessor for CircularProgressView.Content(319);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        v10[4] = &unk_100080338;
        v10[5] = (char *)&value witness table for Builtin.NativeObject + 64;
        v10[6] = (char *)&value witness table for Builtin.NativeObject + 64;
        v8 = type metadata accessor for BlendMode(319);
        if (v9 <= 0x3F)
        {
          v10[7] = *(_QWORD *)(v8 - 8) + 64;
          v10[8] = (char *)&value witness table for Builtin.Int64 + 64;
          v10[9] = (char *)&value witness table for Builtin.Int64 + 64;
          v10[10] = (char *)&value witness table for Builtin.Int64 + 64;
          swift_initStructMetadata(a1, 256, 11, v10, a1 + 16);
        }
      }
    }
  }
}

void sub_100034678(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t *sub_1000346C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = *a2;
      *a1 = *a2;
      swift_retain(v7);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      v12 = sub_100005F78(&qword_1000A18C0);
      v13 = *(int *)(v12 + 48);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
      v17 = *(int *)(v12 + 64);
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_1000347D8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
    return swift_release(*a1);
  v4 = sub_100005F78(&qword_1000A18C0);
  v5 = (char *)a1 + *(int *)(v4 + 48);
  v6 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)a1 + *(int *)(v4 + 64);
  v8 = type metadata accessor for ColorScheme(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t *sub_100034870(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = *a2;
    *a1 = *a2;
    swift_retain(v6);
    v7 = 1;
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v8 = sub_100005F78(&qword_1000A18C0);
    v9 = *(int *)(v8 + 48);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = *(int *)(v8 + 64);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v7 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, a3, v7);
  return a1;
}

uint64_t *sub_100034950(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_100032554((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = *a2;
      *a1 = *a2;
      swift_retain(v6);
      v7 = 1;
    }
    else
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      v8 = sub_100005F78(&qword_1000A18C0);
      v9 = *(int *)(v8 + 48);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      v13 = *(int *)(v8 + 64);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
      v7 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, a3, v7);
  }
  return a1;
}

_DWORD *sub_100034A40(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v6 = sub_100005F78(&qword_1000A18C0);
    v7 = *(int *)(v6 + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    v11 = *(int *)(v6 + 64);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

_DWORD *sub_100034B20(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_100032554((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v6 = sub_100005F78(&qword_1000A18C0);
      v7 = *(int *)(v6 + 48);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      v11 = *(int *)(v6 + 64);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_100034C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_100034C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_100034C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_100034C3C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE v7[32];
  _QWORD v8[2];

  v2 = type metadata accessor for BlendMode(319);
  if (v3 <= 0x3F)
  {
    v4 = type metadata accessor for ColorScheme(319);
    if (v5 > 0x3F)
    {
      return v4;
    }
    else
    {
      swift_getTupleTypeLayout3(v7, (char *)&value witness table for Builtin.Int32 + 64, *(_QWORD *)(v2 - 8) + 64, *(_QWORD *)(v4 - 8) + 64);
      v8[0] = v7;
      v8[1] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 2, v8);
      return 0;
    }
  }
  return v2;
}

uint64_t sub_100034CF0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100083FC4, 1);
}

uint64_t sub_100034D00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[3];

  v26 = a1;
  v2 = sub_100005F78(&qword_1000A2000);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100005F78(&qword_1000A2008);
  __chkstk_darwin(v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BlendMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for CircularProgressView(0);
  v13 = *(_QWORD *)(v1 + v12[10]);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v1 + v12[11], v8);
  *v4 = static Alignment.center.getter(v14);
  v4[1] = v15;
  v16 = sub_100005F78(&qword_1000A2010);
  v17 = sub_100034ED4(v13, v1, (uint64_t)v11, (uint64_t)v4 + *(int *)(v16 + 44));
  v18 = *(_QWORD *)(v1 + v12[13]);
  v19 = *(_QWORD *)(v1 + v12[14]);
  v20 = static Alignment.center.getter(v17);
  _FrameLayout.init(width:height:alignment:)(v27, v18, 0, v19, 0, v20, v21);
  sub_1000079C8((uint64_t)v4, (uint64_t)v7, &qword_1000A2000);
  v22 = &v7[*(int *)(v5 + 36)];
  v23 = v27[1];
  *(_OWORD *)v22 = v27[0];
  *((_OWORD *)v22 + 1) = v23;
  *((_OWORD *)v22 + 2) = v27[2];
  sub_100007A0C((uint64_t)v4, &qword_1000A2000);
  sub_100007984((uint64_t)v7, v26, &qword_1000A2008);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100034ED4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int *v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  double v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  double v88;
  double v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  double *v96;
  int *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  double v101;
  double v102;
  uint64_t v103;
  char *v104;
  char *v105;
  double v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  __n128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t OpaqueTypeConformance2;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  unint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  char *v180;
  void (*v181)(char *, uint64_t);
  char *v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  char v193;
  char *v194;
  uint64_t v195;
  uint64_t KeyPath;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  void (*v213)(char *, char *, uint64_t);
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void (*v219)(char *, uint64_t);
  uint64_t v221;
  uint64_t v222;
  void (*v223)(char *, uint64_t, uint64_t);
  _QWORD *v224;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  double v251;
  uint64_t v252;
  char *v253;
  double *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int *v270;
  uint64_t v271;
  char *v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  double v277;
  double v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  double v289;
  double v290;
  uint64_t v291;
  double v292;
  __int128 v293;
  uint64_t v294;
  double v295;
  uint64_t v296;
  __int128 v297;
  _QWORD v298[5];
  _QWORD v299[6];

  v268 = a4;
  v269 = a3;
  v271 = a2;
  v266 = sub_100005F78(&qword_1000A2018);
  __chkstk_darwin(v266);
  v267 = (uint64_t)&v221 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = sub_100005F78(&qword_1000A2020);
  __chkstk_darwin(v244);
  v245 = (uint64_t)&v221 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WidgetRenderingMode(0);
  v227 = *(_QWORD *)(v8 - 8);
  v228 = v8;
  v9 = __chkstk_darwin(v8);
  v225 = (char *)&v221 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v224 = (uint64_t *)((char *)&v221 - v11);
  v12 = sub_100005F78(&qword_1000A2028);
  __chkstk_darwin(v12);
  v237 = (char *)&v221 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = sub_100005F78(&qword_1000A2030);
  v241 = *(_QWORD *)(v246 - 8);
  v14 = __chkstk_darwin(v246);
  v226 = (char *)&v221 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v230 = (char *)&v221 - v16;
  v229 = sub_100005F78(&qword_1000A2038);
  __chkstk_darwin(v229);
  v232 = (char *)&v221 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v242 = sub_100005F78(&qword_1000A2040);
  v18 = __chkstk_darwin(v242);
  v231 = (char *)&v221 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v233 = (uint64_t)&v221 - v20;
  v21 = type metadata accessor for ColorScheme(0);
  v239 = *(_QWORD *)(v21 - 8);
  v240 = v21;
  __chkstk_darwin(v21);
  v238 = (char *)&v221 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v264 = sub_100005F78(&qword_1000A2048);
  __chkstk_darwin(v264);
  v243 = (char *)&v221 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Font.Design(0);
  v262 = *(_QWORD *)(v24 - 8);
  v263 = v24;
  __chkstk_darwin(v24);
  v261 = (char *)&v221 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Font.TextStyle(0);
  v259 = *(_QWORD *)(v26 - 8);
  v260 = v26;
  __chkstk_darwin(v26);
  v258 = (char *)&v221 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = type metadata accessor for CircularProgressView.ColorStyle(0);
  v28 = __chkstk_darwin(v234);
  v236 = (uint64_t *)((char *)&v221 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v28);
  v256 = (uint64_t)&v221 - v30;
  v31 = type metadata accessor for CircularProgressView.Content(0);
  __chkstk_darwin(v31);
  v254 = (double *)((char *)&v221 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = sub_100005F78(&qword_1000A2050);
  v34 = __chkstk_darwin(v33);
  v265 = (uint64_t)&v221 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v276 = (uint64_t)&v221 - v36;
  v37 = type metadata accessor for LayoutDirection(0);
  v252 = *(_QWORD *)(v37 - 8);
  v38 = __chkstk_darwin(v37);
  v40 = (char *)&v221 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v42 = (uint64_t *)((char *)&v221 - v41);
  v43 = sub_100005F78(&qword_1000A2058);
  v274 = *(_QWORD *)(v43 - 8);
  v275 = v43;
  v44 = __chkstk_darwin(v43);
  v257 = (char *)&v221 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __chkstk_darwin(v44);
  v253 = (char *)&v221 - v47;
  __chkstk_darwin(v46);
  v273 = (char *)&v221 - v48;
  v272 = (char *)sub_100005F78(&qword_1000A2060);
  v49 = __chkstk_darwin(v272);
  v255 = (uint64_t)&v221 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v49);
  v52 = (char *)&v221 - v51;
  v53 = (int *)type metadata accessor for CircularProgressView(0);
  v54 = *(double *)(a2 + v53[12]);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v298, 0, 0, _swiftEmptyArrayStorage, v54, 10.0, 0.0);
  v55 = *(double *)v298;
  v56 = v298[2];
  v57 = v298[3];
  v58 = v298[4];
  v59 = ((uint64_t (*)(uint64_t))swift_retain)(a1);
  v60 = static Alignment.center.getter(v59);
  v277 = v55 * 0.5;
  v278 = v55;
  v279 = v298[1];
  v280 = v56;
  v281 = v57;
  v282 = v58;
  v283 = a1;
  LOWORD(v284) = 256;
  v285 = v60;
  v286 = v61;
  v62 = sub_100005F78(&qword_1000A2068);
  v63 = sub_100007F64(&qword_1000A2070, &qword_1000A2068, (uint64_t)&protocol conformance descriptor for StrokeBorderShapeView<A, B, C>);
  View.widgetAccentable(_:)(1, v62, v63);
  swift_release(a1);
  swift_bridgeObjectRelease(v57);
  v64 = *((int *)v272 + 9);
  v272 = v52;
  v65 = &v52[v64];
  v66 = type metadata accessor for BlendMode(0);
  v222 = *(_QWORD *)(v66 - 8);
  v67 = *(void (**)(char *, uint64_t, uint64_t))(v222 + 16);
  v235 = v66;
  v223 = v67;
  ((void (*)(char *, uint64_t))v67)(v65, v269);
  v270 = v53;
  v68 = v271;
  v250 = *(_QWORD *)(v271 + v53[6]);
  v251 = v54 * 0.5;
  v69 = *(_QWORD *)(v271 + v53[9]);
  swift_retain(v69);
  v70 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v299, 1, 0, _swiftEmptyArrayStorage, v54, 10.0, 0.0);
  v71 = v299[0];
  v72 = v299[2];
  v249 = v299[3];
  v73 = v299[4];
  v74 = static Alignment.center.getter(v70);
  v247 = v75;
  v248 = v74;
  sub_100024F98(v42);
  v76 = enum case for LayoutDirection.leftToRight(_:);
  v77 = v252;
  v78 = *(void (**)(char *, _QWORD, uint64_t))(v252 + 104);
  v79 = v299[1];
  v78(v40, enum case for LayoutDirection.leftToRight(_:), v37);
  LOBYTE(v65) = static LayoutDirection.== infix(_:_:)(v42, v40);
  v80 = *(void (**)(char *, uint64_t))(v77 + 8);
  v80(v40, v37);
  v81 = ((uint64_t (*)(_QWORD *, uint64_t))v80)(v42, v37);
  if ((v65 & 1) != 0)
    v82 = -1.57079633;
  else
    v82 = -4.71238898;
  v83 = static UnitPoint.center.getter(v81);
  v85 = v84;
  sub_100024F98(v42);
  v78(v40, v76, v37);
  v86 = static LayoutDirection.== infix(_:_:)(v42, v40);
  v80(v40, v37);
  v87 = ((uint64_t (*)(_QWORD *, uint64_t))v80)(v42, v37);
  if ((v86 & 1) != 0)
    v88 = 0.0;
  else
    v88 = 3.14159265;
  v89 = static UnitPoint.center.getter(v87);
  v277 = v251;
  v278 = 0.0;
  v279 = v250;
  v280 = v71;
  v281 = v79;
  v282 = v72;
  v90 = v249;
  v283 = v249;
  v284 = v73;
  v285 = v69;
  LOWORD(v286) = 256;
  v287 = v248;
  v288 = v247;
  v289 = v82;
  v290 = v83;
  v291 = v85;
  v292 = v88;
  v293 = xmmword_1000802F0;
  v294 = 0;
  v295 = v89;
  v296 = v91;
  v297 = xmmword_1000802F0;
  v92 = sub_100005F78(&qword_1000A2078);
  v93 = sub_10003601C();
  v94 = v253;
  View.widgetAccentable(_:)(1, v92, v93);
  v95 = v69;
  v96 = v254;
  swift_release(v95);
  swift_bridgeObjectRelease(v90);
  (*(void (**)(char *, char *, uint64_t))(v274 + 32))(v273, v94, v275);
  sub_1000078D4(v68 + v270[7], (uint64_t)v96, type metadata accessor for CircularProgressView.Content);
  v97 = (int *)sub_100005F78(&qword_1000A0A50);
  if ((*(unsigned int (**)(double *, uint64_t, int *))(*((_QWORD *)v97 - 1) + 48))(v96, 1, v97) == 1)
  {
    v98 = v267;
    swift_storeEnumTagMultiPayload(v267, v266, 1);
    v99 = sub_10003610C();
    v100 = v276;
    _ConditionalContent<>.init(storage:)(v98, v264, &type metadata for EmptyView, v99, &protocol witness table for EmptyView);
  }
  else
  {
    v102 = *v96;
    v101 = v96[1];
    v103 = (uint64_t)v96 + v97[12];
    v104 = (char *)v96 + v97[16];
    v105 = (char *)v96 + v97[20];
    v106 = *(double *)((char *)v96 + v97[24]);
    v107 = v256;
    sub_1000362B0(v103, v256);
    v108 = v258;
    (*(void (**)(char *, char *, uint64_t))(v259 + 32))(v258, v104, v260);
    v109 = v261;
    v110 = v262;
    v111 = v263;
    (*(void (**)(char *, char *, uint64_t))(v262 + 32))(v261, v105, v263);
    v112 = v107;
    v113 = v236;
    sub_1000078D4(v112, (uint64_t)v236, type metadata accessor for CircularProgressView.ColorStyle);
    if (swift_getEnumCaseMultiPayload(v113, v234) == 1)
    {
      v269 = *v113;
      v277 = v102;
      v278 = v101;
      v114 = sub_1000075E8();
      v115 = Text.init<A>(_:)(&v277, &type metadata for String, v114);
      v117 = v116;
      v119 = v118;
      v121 = v120 & 1;
      v122 = (uint64_t)v237;
      (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v237, v109, v111);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v110 + 56))(v122, 0, 1, v111);
      v123 = static Font.system(_:design:weight:)(v108, v122, 0, 1);
      sub_100007A0C(v122, &qword_1000A2028);
      v124 = Font.weight(_:)(v123, v106);
      swift_release(v123);
      v125 = Text.font(_:)(v124, v115, v117, v121, v119);
      v127 = v126;
      v129 = v128;
      v131 = v130;
      swift_release(v124);
      LOBYTE(v124) = v129 & 1;
      sub_1000115B8(v115, v117, v121);
      swift_bridgeObjectRelease(v119);
      v132 = swift_retain(v269);
      v134 = v133;
      *(double *)&v135 = COERCE_DOUBLE(Text.foregroundColor(_:)(v132));
      v137 = v136;
      LOBYTE(v119) = v138;
      v140 = v139;
      swift_release(v134);
      sub_1000115B8(v125, v127, v124);
      swift_bridgeObjectRelease(v131);
      v277 = *(double *)&v135;
      v278 = *(double *)&v137;
      LOBYTE(v279) = v119 & 1;
      v280 = v140;
      v141 = v226;
      View.widgetAccentable(_:)(*(unsigned __int8 *)(v271 + v270[8]), &type metadata for Text, &protocol witness table for Text);
      v142 = v262;
      sub_1000115B8(v135, v137, v119 & 1);
      swift_bridgeObjectRelease(v140);
      v143 = v241;
      v144 = v245;
      v145 = v246;
      (*(void (**)(uint64_t, char *, uint64_t))(v241 + 16))(v245, v141, v246);
      swift_storeEnumTagMultiPayload(v144, v244, 1);
      v146 = sub_10003619C();
      v277 = COERCE_DOUBLE(&type metadata for Text);
      v278 = COERCE_DOUBLE(&protocol witness table for Text);
      v147 = v261;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v277, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
      v149 = (uint64_t)v243;
      v150 = v144;
      v151 = v258;
      _ConditionalContent<>.init(storage:)(v150, v242, v145, v146, OpaqueTypeConformance2);
      swift_release(v269);
      v152 = v145;
      v153 = v263;
      (*(void (**)(char *, uint64_t))(v143 + 8))(v141, v152);
    }
    else
    {
      LODWORD(v254) = *(_DWORD *)v113;
      v154 = sub_100005F78(&qword_1000A18C0);
      v155 = (char *)v113 + *(int *)(v154 + 48);
      v156 = (char *)v113 + *(int *)(v154 + 64);
      (*(void (**)(char *, uint64_t))(v222 + 8))(v155, v235);
      (*(void (**)(char *, char *, uint64_t))(v239 + 32))(v238, v156, v240);
      v277 = v102;
      v278 = v101;
      v157 = sub_1000075E8();
      v158 = Text.init<A>(_:)(&v277, &type metadata for String, v157);
      v159 = v109;
      v160 = v158;
      v161 = v108;
      v163 = v162;
      v165 = v164;
      v167 = v166 & 1;
      v168 = (uint64_t)v237;
      (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v237, v159, v111);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v110 + 56))(v168, 0, 1, v111);
      v169 = static Font.system(_:design:weight:)(v161, v168, 0, 1);
      sub_100007A0C(v168, &qword_1000A2028);
      v170 = Font.weight(_:)(v169, v106);
      swift_release(v169);
      v171 = Text.font(_:)(v170, v160, v163, v167, v165);
      v173 = v172;
      v175 = v174;
      v177 = v176;
      swift_release(v170);
      sub_1000115B8(v160, v163, v167);
      swift_bridgeObjectRelease(v165);
      v178 = v224;
      v179 = sub_100024FCC(v224);
      v180 = v225;
      static WidgetRenderingMode.accented.getter(v179);
      LOBYTE(v165) = static WidgetRenderingMode.== infix(_:_:)(v178, v180);
      v181 = *(void (**)(char *, uint64_t))(v227 + 8);
      v182 = v180;
      v183 = v228;
      v181(v182, v228);
      v184 = ((uint64_t (*)(_QWORD *, uint64_t))v181)(v178, v183);
      if ((v165 & 1) != 0)
        v185 = static HierarchicalShapeStyle.primary.getter(v184);
      else
        v185 = (int)v254;
      LODWORD(v277) = v185;
      v186 = v175 & 1;
      *(double *)&v187 = COERCE_DOUBLE(Text.foregroundStyle<A>(_:)(&v277, v171, v173, v175 & 1, v177, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle));
      v189 = v188;
      v191 = v190;
      v193 = v192 & 1;
      sub_1000115B8(v171, v173, v186);
      swift_bridgeObjectRelease(v177);
      v277 = *(double *)&v187;
      v278 = *(double *)&v189;
      LOBYTE(v279) = v193;
      v280 = v191;
      v194 = v230;
      View.widgetAccentable(_:)(*(unsigned __int8 *)(v271 + v270[8]), &type metadata for Text, &protocol witness table for Text);
      sub_1000115B8(v187, v189, v193);
      swift_bridgeObjectRelease(v191);
      v195 = (uint64_t)v232;
      v223(&v232[*(int *)(v229 + 36)], v269, v235);
      (*(void (**)(uint64_t, char *, uint64_t))(v241 + 32))(v195, v194, v246);
      KeyPath = swift_getKeyPath(&unk_1000803B0);
      v197 = v242;
      v198 = (uint64_t)v231;
      v199 = (uint64_t *)&v231[*(int *)(v242 + 36)];
      v200 = sub_100005F78(&qword_1000A1078);
      v202 = v238;
      v201 = v239;
      v203 = v240;
      (*(void (**)(char *, char *, uint64_t))(v239 + 16))((char *)v199 + *(int *)(v200 + 28), v238, v240);
      *v199 = KeyPath;
      sub_100007984(v195, v198, &qword_1000A2038);
      v204 = v233;
      sub_100007984(v198, v233, &qword_1000A2040);
      v205 = v245;
      sub_1000079C8(v204, v245, &qword_1000A2040);
      swift_storeEnumTagMultiPayload(v205, v244, 0);
      v206 = sub_10003619C();
      v277 = COERCE_DOUBLE(&type metadata for Text);
      v278 = COERCE_DOUBLE(&protocol witness table for Text);
      v207 = swift_getOpaqueTypeConformance2(&v277, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
      v149 = (uint64_t)v243;
      _ConditionalContent<>.init(storage:)(v205, v197, v246, v206, v207);
      sub_100007A0C(v204, &qword_1000A2040);
      (*(void (**)(char *, uint64_t))(v201 + 8))(v202, v203);
      v142 = v262;
      v153 = v263;
      v147 = v261;
      v151 = v258;
    }
    v208 = v267;
    sub_1000079C8(v149, v267, &qword_1000A2048);
    swift_storeEnumTagMultiPayload(v208, v266, 0);
    v209 = sub_10003610C();
    v100 = v276;
    _ConditionalContent<>.init(storage:)(v208, v264, &type metadata for EmptyView, v209, &protocol witness table for EmptyView);
    sub_100007A0C(v149, &qword_1000A2048);
    (*(void (**)(char *, uint64_t))(v142 + 8))(v147, v153);
    (*(void (**)(char *, uint64_t))(v259 + 8))(v151, v260);
    sub_100032554(v256);
  }
  v210 = v255;
  sub_1000079C8((uint64_t)v272, v255, &qword_1000A2060);
  v212 = v273;
  v211 = v274;
  v213 = *(void (**)(char *, char *, uint64_t))(v274 + 16);
  v214 = v257;
  v215 = v275;
  v213(v257, v273, v275);
  v216 = v265;
  sub_1000079C8(v100, v265, &qword_1000A2050);
  v217 = v268;
  sub_1000079C8(v210, v268, &qword_1000A2060);
  v218 = sub_100005F78(&qword_1000A20C8);
  v213((char *)(v217 + *(int *)(v218 + 48)), v214, v215);
  sub_1000079C8(v216, v217 + *(int *)(v218 + 64), &qword_1000A2050);
  sub_100007A0C(v276, &qword_1000A2050);
  v219 = *(void (**)(char *, uint64_t))(v211 + 8);
  v219(v212, v215);
  sub_100007A0C((uint64_t)v272, &qword_1000A2060);
  sub_100007A0C(v216, &qword_1000A2050);
  v219(v214, v215);
  return sub_100007A0C(v210, &qword_1000A2060);
}

unint64_t sub_10003601C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2080;
  if (!qword_1000A2080)
  {
    v1 = sub_100005FC0(&qword_1000A2078);
    sub_100036088();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2080);
  }
  return result;
}

unint64_t sub_100036088()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2088;
  if (!qword_1000A2088)
  {
    v1 = sub_100005FC0(&qword_1000A2090);
    sub_100007F64(&qword_1000A2098, &qword_1000A20A0, (uint64_t)&protocol conformance descriptor for StrokeShapeView<A, B, C>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2088);
  }
  return result;
}

unint64_t sub_10003610C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000A20A8;
  if (!qword_1000A20A8)
  {
    v1 = sub_100005FC0(&qword_1000A2048);
    v2[0] = &type metadata for Text;
    v2[1] = &protocol witness table for Text;
    sub_10003619C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A20A8);
  }
  return result;
}

unint64_t sub_10003619C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A20B0;
  if (!qword_1000A20B0)
  {
    v1 = sub_100005FC0(&qword_1000A2040);
    sub_100036220();
    sub_100007F64(&qword_1000A20C0, &qword_1000A1078, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A20B0);
  }
  return result;
}

unint64_t sub_100036220()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000A20B8;
  if (!qword_1000A20B8)
  {
    v1 = sub_100005FC0(&qword_1000A2038);
    v2[0] = &type metadata for Text;
    v2[1] = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A20B8);
  }
  return result;
}

uint64_t sub_1000362B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CircularProgressView.ColorStyle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100036300()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A20D0;
  if (!qword_1000A20D0)
  {
    v1 = sub_100005FC0(&qword_1000A2008);
    sub_100007F64(&qword_1000A20D8, &qword_1000A2000, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A20D0);
  }
  return result;
}

uint64_t *sub_100036384(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
    v13 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
  }
  return a1;
}

uint64_t sub_10003645C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for Font.Design(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_1000364B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Font.Design(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  return a1;
}

uint64_t sub_100036564(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Font.Design(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100036618(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Font.Design(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  return a1;
}

uint64_t sub_1000366C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Font.Design(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  return a1;
}

uint64_t sub_100036770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003677C);
}

uint64_t sub_10003677C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for Font.TextStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for Font.Design(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1000367F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000367FC);
}

uint64_t sub_1000367FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for Font.TextStyle(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for Font.Design(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for ReadingGoalView.ViewConfiguration(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A2138, (uint64_t)&nominal type descriptor for ReadingGoalView.ViewConfiguration);
}

uint64_t sub_10003688C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  result = type metadata accessor for Font.TextStyle(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Font.Design(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[5] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t sub_100036924(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v18);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_BYTE *)(a2 + 32);
    sub_10000BA78(*(_QWORD *)a2, v8, v9, v10, v11);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 32) = v11;
    v12 = a3[5];
    v13 = (uint64_t *)(a1 + v12);
    v14 = (uint64_t *)(a2 + v12);
    v15 = sub_100005F78(&qword_1000A09A0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = 1;
    }
    else
    {
      v19 = *v14;
      *v13 = *v14;
      swift_retain(v19);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v17);
    v20 = a3[6];
    v21 = a3[7];
    v22 = (_QWORD *)(a1 + v20);
    v23 = (uint64_t *)(a2 + v20);
    v25 = *v23;
    v24 = v23[1];
    *v22 = v25;
    v22[1] = v24;
    v26 = a1 + v21;
    v27 = a2 + v21;
    v28 = type metadata accessor for Font.TextStyle(0);
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
    swift_bridgeObjectRetain(v25);
    v29(v26, v27, v28);
    v30 = (int *)type metadata accessor for ReadingGoalView.ViewConfiguration(0);
    v31 = v30[5];
    v32 = v26 + v31;
    v33 = v27 + v31;
    v34 = type metadata accessor for Font.Design(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
    *(_QWORD *)(v26 + v30[6]) = *(_QWORD *)(v27 + v30[6]);
    *(_QWORD *)(v26 + v30[7]) = *(_QWORD *)(v27 + v30[7]);
    *(_QWORD *)(v26 + v30[8]) = *(_QWORD *)(v27 + v30[8]);
    *(_QWORD *)(v26 + v30[9]) = *(_QWORD *)(v27 + v30[9]);
    v35 = a3[8];
    v36 = a1 + v35;
    v37 = a2 + v35;
    v38 = type metadata accessor for GeometryProxy(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  }
  return a1;
}

uint64_t sub_100036B10(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1000075DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6]));
  v7 = a1 + a2[7];
  v8 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v7 + *(int *)(type metadata accessor for ReadingGoalView.ViewConfiguration(0) + 20);
  v10 = type metadata accessor for Font.Design(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = type metadata accessor for GeometryProxy(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t sub_100036C18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v7, v8, v9, v10);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  v11 = a3[5];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
    v16 = 1;
  }
  else
  {
    v17 = *v13;
    *v12 = *v13;
    swift_retain(v17);
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v14, v16);
  v18 = a3[6];
  v19 = a3[7];
  v20 = (_QWORD *)(a1 + v18);
  v21 = (uint64_t *)(a2 + v18);
  v23 = *v21;
  v22 = v21[1];
  *v20 = v23;
  v20[1] = v22;
  v24 = a1 + v19;
  v25 = a2 + v19;
  v26 = type metadata accessor for Font.TextStyle(0);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
  swift_bridgeObjectRetain(v23);
  v27(v24, v25, v26);
  v28 = (int *)type metadata accessor for ReadingGoalView.ViewConfiguration(0);
  v29 = v28[5];
  v30 = v24 + v29;
  v31 = v25 + v29;
  v32 = type metadata accessor for Font.Design(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
  *(_QWORD *)(v24 + v28[6]) = *(_QWORD *)(v25 + v28[6]);
  *(_QWORD *)(v24 + v28[7]) = *(_QWORD *)(v25 + v28[7]);
  *(_QWORD *)(v24 + v28[8]) = *(_QWORD *)(v25 + v28[8]);
  *(_QWORD *)(v24 + v28[9]) = *(_QWORD *)(v25 + v28[9]);
  v33 = a3[8];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
  return a1;
}

uint64_t sub_100036DD8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v7, v8, v9, v10);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  sub_1000075DC(v11, v12, v13, v14, v15);
  if (a1 != a2)
  {
    v16 = a3[5];
    v17 = (uint64_t *)(a1 + v16);
    v18 = (uint64_t *)(a2 + v16);
    sub_100007A0C(a1 + v16, &qword_1000A09A0);
    v19 = sub_100005F78(&qword_1000A09A0);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
      v21 = 1;
    }
    else
    {
      v22 = *v18;
      *v17 = *v18;
      swift_retain(v22);
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v19, v21);
  }
  v23 = a3[6];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_QWORD *)(a2 + v23);
  v27 = *(_QWORD *)(a1 + v23);
  *(_QWORD *)(a1 + v23) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
  v28 = a3[7];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 24))(v29, v30, v31);
  v32 = (int *)type metadata accessor for ReadingGoalView.ViewConfiguration(0);
  v33 = v32[5];
  v34 = v29 + v33;
  v35 = v30 + v33;
  v36 = type metadata accessor for Font.Design(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 24))(v34, v35, v36);
  *(_QWORD *)(v29 + v32[6]) = *(_QWORD *)(v30 + v32[6]);
  *(_QWORD *)(v29 + v32[7]) = *(_QWORD *)(v30 + v32[7]);
  *(_QWORD *)(v29 + v32[8]) = *(_QWORD *)(v30 + v32[8]);
  *(_QWORD *)(v29 + v32[9]) = *(_QWORD *)(v30 + v32[9]);
  v37 = a3[8];
  v38 = a1 + v37;
  v39 = a2 + v37;
  v40 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 24))(v38, v39, v40);
  return a1;
}

uint64_t sub_100036FD0(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = (int *)type metadata accessor for ReadingGoalView.ViewConfiguration(0);
  v17 = v16[5];
  v18 = v13 + v17;
  v19 = v14 + v17;
  v20 = type metadata accessor for Font.Design(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  *(_QWORD *)(v13 + v16[6]) = *(_QWORD *)(v14 + v16[6]);
  *(_QWORD *)(v13 + v16[7]) = *(_QWORD *)(v14 + v16[7]);
  *(_QWORD *)(v13 + v16[8]) = *(_QWORD *)(v14 + v16[8]);
  *(_QWORD *)(v13 + v16[9]) = *(_QWORD *)(v14 + v16[9]);
  v21 = a3[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  return a1;
}

uint64_t sub_100037160(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 32) = v6;
  sub_1000075DC(v7, v8, v9, v10, v11);
  if (a1 != a2)
  {
    v13 = a3[5];
    v14 = (void *)(a1 + v13);
    v15 = (const void *)(a2 + v13);
    sub_100007A0C(a1 + v13, &qword_1000A09A0);
    v16 = sub_100005F78(&qword_1000A09A0);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
      swift_storeEnumTagMultiPayload(v14, v16, 1);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
  }
  v18 = a3[6];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_QWORD *)(a1 + v18);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
  v22 = a3[7];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  v26 = (int *)type metadata accessor for ReadingGoalView.ViewConfiguration(0);
  v27 = v26[5];
  v28 = v23 + v27;
  v29 = v24 + v27;
  v30 = type metadata accessor for Font.Design(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  *(_QWORD *)(v23 + v26[6]) = *(_QWORD *)(v24 + v26[6]);
  *(_QWORD *)(v23 + v26[7]) = *(_QWORD *)(v24 + v26[7]);
  *(_QWORD *)(v23 + v26[8]) = *(_QWORD *)(v24 + v26[8]);
  *(_QWORD *)(v23 + v26[9]) = *(_QWORD *)(v24 + v26[9]);
  v31 = a3[8];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  return a1;
}

uint64_t sub_100037338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100037344);
}

uint64_t sub_100037344(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v6 = sub_100005F78(&qword_1000A0FA8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v12 = type metadata accessor for ReadingGoalView.ViewConfiguration(0);
    v7 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v12;
      v9 = a3[7];
    }
    else
    {
      v8 = type metadata accessor for GeometryProxy(0);
      v7 = *(_QWORD *)(v8 - 8);
      v9 = a3[8];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[6]);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_100037410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003741C);
}

uint64_t sub_10003741C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = sub_100005F78(&qword_1000A0FA8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[6]) = (a2 - 1);
      return result;
    }
    v12 = type metadata accessor for ReadingGoalView.ViewConfiguration(0);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[7];
    }
    else
    {
      v10 = type metadata accessor for GeometryProxy(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = a4[8];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for ReadingGoalView(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A21D8, (uint64_t)&nominal type descriptor for ReadingGoalView);
}

void sub_1000374F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  v8[0] = "!";
  sub_1000375AC(319);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    v8[2] = &unk_100080440;
    v4 = type metadata accessor for ReadingGoalView.ViewConfiguration(319);
    if (v5 <= 0x3F)
    {
      v8[3] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for GeometryProxy(319);
      if (v7 <= 0x3F)
      {
        v8[4] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 5, v8, a1 + 16);
      }
    }
  }
}

void sub_1000375AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000A1F00)
  {
    v2 = type metadata accessor for WidgetRenderingMode(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000A1F00);
  }
}

uint64_t sub_100037600(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008403C, 1);
}

uint64_t sub_100037610@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v21[2];

  v3 = type metadata accessor for ReadingGoalView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = __chkstk_darwin(v3);
  v7 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (GeometryProxy.size.getter(v6) >= 297.0)
    v9 = 36.0;
  else
    v9 = 30.0;
  *(_QWORD *)a1 = static VerticalAlignment.center.getter(v8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  sub_100005F78(&qword_1000A2220);
  v10 = *(_QWORD *)(*(_QWORD *)(v1 + *(int *)(v3 + 24)) + 16);
  v21[0] = 0;
  v21[1] = v10;
  KeyPath = swift_getKeyPath(&unk_1000804B0);
  sub_1000078D4(v1, (uint64_t)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ReadingGoalView);
  v12 = *(unsigned __int8 *)(v4 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = (v5 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject(&unk_10009B1C0, v14 + 8, v12 | 7);
  sub_1000112F0((uint64_t)v7, v15 + v13, type metadata accessor for ReadingGoalView);
  *(double *)(v15 + v14) = v9;
  v16 = sub_100005F78(&qword_1000A2228);
  v17 = sub_100005F78(&qword_1000A2230);
  v18 = sub_10003B750();
  v19 = sub_10003B800();
  return ForEach<>.init(_:id:content:)(v21, KeyPath, sub_10003B6F0, v15, v16, v17, v18, &protocol witness table for Int, v19);
}

uint64_t sub_1000377BC(unint64_t *a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v6 = sub_100005F78(&qword_1000A2268);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100005F78(&qword_1000A2270);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005F78(&qword_1000A2258);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  if (v16)
  {
    *(_QWORD *)v15 = static VerticalAlignment.center.getter(v13);
    *((_QWORD *)v15 + 1) = 0;
    v15[16] = 0;
    v17 = sub_100005F78(&qword_1000A2278);
    sub_100037A38(a2, v16, (uint64_t)&v15[*(int *)(v17 + 44)], a3);
    sub_1000079C8((uint64_t)v15, (uint64_t)v11, &qword_1000A2258);
    swift_storeEnumTagMultiPayload(v11, v9, 0);
    v18 = sub_100007F64(&qword_1000A2250, &qword_1000A2258, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v19 = sub_100007F64(&qword_1000A2260, &qword_1000A2268, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    _ConditionalContent<>.init(storage:)(v11, v12, v6, v18, v19);
    v20 = (uint64_t)v15;
    v21 = &qword_1000A2258;
  }
  else
  {
    *v8 = static Alignment.center.getter(v13);
    v8[1] = v22;
    v23 = sub_100005F78(&qword_1000A2280);
    sub_10003A690(a2, 0, (uint64_t)v8 + *(int *)(v23 + 44), a3);
    sub_1000079C8((uint64_t)v8, (uint64_t)v11, &qword_1000A2268);
    swift_storeEnumTagMultiPayload(v11, v9, 1);
    v24 = sub_100007F64(&qword_1000A2250, &qword_1000A2258, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v25 = sub_100007F64(&qword_1000A2260, &qword_1000A2268, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    _ConditionalContent<>.init(storage:)(v11, v12, v6, v24, v25);
    v20 = (uint64_t)v8;
    v21 = &qword_1000A2268;
  }
  return sub_100007A0C(v20, v21);
}

uint64_t sub_100037A38@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  unsigned int v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _OWORD v81[4];
  __int128 v82;
  __int128 v83;

  v71 = a3;
  v7 = sub_100005F78(&qword_1000A2288);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v61 - v11;
  v13 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v13);
  v74 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for BlendMode(0);
  v15 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100005F78(&qword_1000A2290);
  __chkstk_darwin(v72);
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100005F78(&qword_1000A2298);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v61 - v24;
  result = type metadata accessor for ReadingGoalView(0);
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v27 = *(int *)(result + 24);
  v28 = *(_QWORD *)(a1 + v27);
  if (*(_QWORD *)(v28 + 16) <= a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v62 = v12;
  v63 = v10;
  v61 = 48 * a2;
  v64 = result;
  v29 = *(_BYTE *)(v28 + 48 * a2 + 73);
  v67 = v27;
  sub_100037F90(v29);
  v70 = a1;
  v69 = v23;
  v30 = v77;
  v66 = a2;
  v31 = *((_QWORD *)&v77 + 1);
  v76 = v78;
  v68 = v25;
  v33 = *((_QWORD *)&v78 + 1);
  v32 = v79;
  v75 = DWORD2(v79);
  v65 = v20;
  v34 = BYTE12(v79);
  v35 = v17;
  v36 = v17;
  v37 = v73;
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v36, enum case for BlendMode.plusLighter(_:), v73);
  v38 = (uint64_t)v74;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v74, v35, v37);
  sub_1000078D4(v38, (uint64_t)&v19[*(int *)(v72 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v19 = v30;
  *((_QWORD *)v19 + 1) = v31;
  v39 = v76;
  *((_QWORD *)v19 + 2) = v76;
  *((_QWORD *)v19 + 3) = v33;
  *((_QWORD *)v19 + 4) = v32;
  v40 = v75;
  *((_DWORD *)v19 + 10) = v75;
  v19[44] = v34;
  sub_10003B89C(v30, v31, v39, v33, v32, v40, v34);
  sub_100007A48(v38, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v35, v37);
  v41 = v30;
  v42 = (uint64_t)v69;
  v43 = v70;
  v44 = v31;
  v45 = (uint64_t)v68;
  sub_10003B8E0(v41, v44, v76, v33, v32, v75, v34);
  v46 = v43 + *(int *)(v64 + 28);
  v47 = type metadata accessor for ReadingGoalView.ViewConfiguration(0);
  v48 = *(_QWORD *)(v46 + *(int *)(v47 + 28));
  v49 = static Alignment.center.getter(v47);
  _FrameLayout.init(width:height:alignment:)(&v77, 0, 1, v48, 0, v49, v50);
  sub_1000079C8((uint64_t)v19, v42, &qword_1000A2290);
  v51 = (_OWORD *)(v42 + *(int *)(v65 + 36));
  v52 = v78;
  *v51 = v77;
  v51[1] = v52;
  v51[2] = v79;
  sub_100007A0C((uint64_t)v19, &qword_1000A2290);
  result = sub_100007984(v42, v45, &qword_1000A2298);
  v53 = *(_QWORD *)(v43 + v67);
  if (*(_QWORD *)(v53 + 16) > v66)
  {
    v54 = v53 + v61;
    v55 = *(_OWORD *)(v54 + 48);
    v80 = *(_OWORD *)(v54 + 32);
    v81[0] = v55;
    *(_OWORD *)((char *)v81 + 10) = *(_OWORD *)(v54 + 58);
    v81[2] = v80;
    v81[3] = v55;
    v82 = v55;
    v83 = v80;
    v56 = *(unsigned __int8 *)(v54 + 73);
    sub_100007444((uint64_t)&v83);
    sub_100007444((uint64_t)&v82);
    v57 = (uint64_t)v62;
    sub_100038668((uint64_t *)&v80, v56, (uint64_t)v62, a4);
    sub_10000746C((uint64_t)&v83);
    sub_10000746C((uint64_t)&v82);
    sub_1000079C8(v45, v42, &qword_1000A2298);
    v58 = (uint64_t)v63;
    sub_1000079C8(v57, (uint64_t)v63, &qword_1000A2288);
    v59 = v71;
    sub_1000079C8(v42, v71, &qword_1000A2298);
    v60 = sub_100005F78(&qword_1000A23A8);
    sub_1000079C8(v58, v59 + *(int *)(v60 + 48), &qword_1000A2288);
    sub_100007A0C(v57, &qword_1000A2288);
    sub_100007A0C(v45, &qword_1000A2298);
    sub_100007A0C(v58, &qword_1000A2288);
    return sub_100007A0C(v42, &qword_1000A2298);
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_100037F90(char a1)
{
  __asm { BR              X10 }
}

double sub_100037FDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  double result;
  __int128 v15;
  uint64_t v16;
  int v17;
  char v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unsigned __int16 v22;
  unsigned __int8 v23;
  char v24;
  _OWORD v25[2];
  uint64_t v26;
  int v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  char v33;

  v2 = static Color.white.getter(a1);
  v3 = Color.opacity(_:)(0.3);
  swift_release(v2);
  *(_QWORD *)&v25[0] = v3;
  WORD4(v25[0]) = 256;
  BYTE10(v25[0]) = 0;
  swift_retain(v3);
  v4 = sub_100005F78(&qword_1000A2358);
  v5 = sub_100007F64(&qword_1000A2378, &qword_1000A2358, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
  _ConditionalContent<>.init(storage:)(v25, v4, v4, v5, v5);
  v6 = 0x10000;
  if (!BYTE10(v29))
    v6 = 0;
  *((_QWORD *)&v29 + 1) = v6 | WORD4(v29);
  v31 = 0;
  v30 = 0uLL;
  v32 = 0;
  v7 = sub_100005F78(&qword_1000A2370);
  v8 = sub_100005F78(&qword_1000A2388);
  v9 = sub_10003BBEC(&qword_1000A2368, &qword_1000A2370, &qword_1000A2378, &qword_1000A2358);
  v10 = sub_10003BBEC(&qword_1000A2380, &qword_1000A2388, &qword_1000A2390, &qword_1000A2398);
  _ConditionalContent<>.init(storage:)(&v29, v7, v8, v9, v10);
  if (v24)
    v11 = 0x1000000;
  else
    v11 = 0;
  v25[0] = v19;
  v25[1] = v20;
  v26 = v21;
  v27 = v11 | v22 | (v23 << 16);
  v28 = 0;
  v12 = sub_100005F78(&qword_1000A2350);
  v13 = sub_10003BB40();
  _ConditionalContent<>.init(storage:)(v25, v12, v4, v13, v5);
  swift_release(v3);
  result = *(double *)&v29;
  v15 = v30;
  v16 = v31;
  v17 = v32;
  v18 = v33;
  *(_OWORD *)v1 = v29;
  *(_OWORD *)(v1 + 16) = v15;
  *(_QWORD *)(v1 + 32) = v16;
  *(_DWORD *)(v1 + 40) = v17;
  *(_BYTE *)(v1 + 44) = v18;
  return result;
}

uint64_t sub_100038668@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  char v97;
  void (*v98)(char *, uint64_t, uint64_t);
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  char v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  uint64_t *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, char *, uint64_t);
  void (**v132)(char *, char *, uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int *v162;
  uint64_t *v163;
  _QWORD *v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  double v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t KeyPath;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int *v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t OpaqueTypeConformance2;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  double v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  unsigned int *v228;
  char *v229;
  int *v230;
  uint64_t *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  void (*v247)(char *, char *, uint64_t);
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int *v276;
  uint64_t v277;
  int *v278;
  uint64_t v279;
  _DWORD *v280;
  char *v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  char *v285;
  char *v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int *v304;
  uint64_t v305;
  uint64_t *v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  void (*v331)(char *, uint64_t);
  char *v333;
  uint64_t *v334;
  char *v335;
  uint64_t *v336;
  char *v337;
  char *v338;
  char *v339;
  char *v340;
  char *v341;
  char *v342;
  char *v343;
  char *v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t *v348;
  char *v349;
  char *v350;
  char *v351;
  char *v352;
  char *v353;
  char *v354;
  uint64_t v355;
  char *v356;
  char *v357;
  char *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  char *v366;
  uint64_t *v367;
  char *v368;
  char *v369;
  char *v370;
  char *v371;
  char *v372;
  uint64_t v373;
  char *v374;
  uint64_t *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  void (*v381)(char *, char *, uint64_t);
  uint64_t v382;
  char *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  char *v400;
  int *v401;
  uint64_t v402;
  __int128 v403;
  __int128 v404;

  v388 = a2;
  v394 = a3;
  v7 = sub_100005F78(&qword_1000A22B0);
  __chkstk_darwin(v7);
  v349 = (char *)&v333 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v364 = sub_100005F78(&qword_1000A22B8);
  __chkstk_darwin(v364);
  v365 = (uint64_t)&v333 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v393 = sub_100005F78(&qword_1000A22C0);
  __chkstk_darwin(v393);
  v366 = (char *)&v333 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005F78(&qword_1000A1E88);
  __chkstk_darwin(v11);
  v375 = (uint64_t *)((char *)&v333 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for CircularProgressView.Content(0);
  v14 = __chkstk_darwin(v13);
  v348 = (uint64_t *)((char *)&v333 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v367 = (uint64_t *)((char *)&v333 - v16);
  v376 = type metadata accessor for CircularProgressView(0);
  v17 = __chkstk_darwin(v376);
  v350 = (char *)&v333 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v369 = (char *)&v333 - v19;
  v378 = sub_100005F78(&qword_1000A22C8);
  v377 = *(_QWORD *)(v378 - 8);
  v20 = __chkstk_darwin(v378);
  v351 = (char *)&v333 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v372 = (char *)&v333 - v22;
  v390 = sub_100005F78(&qword_1000A22D0);
  v23 = __chkstk_darwin(v390);
  v352 = (char *)&v333 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v354 = (char *)&v333 - v26;
  v27 = __chkstk_darwin(v25);
  v353 = (char *)&v333 - v28;
  v29 = __chkstk_darwin(v27);
  v355 = (uint64_t)&v333 - v30;
  v31 = __chkstk_darwin(v29);
  v368 = (char *)&v333 - v32;
  v33 = __chkstk_darwin(v31);
  v371 = (char *)&v333 - v34;
  v35 = __chkstk_darwin(v33);
  v370 = (char *)&v333 - v36;
  __chkstk_darwin(v35);
  v373 = (uint64_t)&v333 - v37;
  v389 = sub_100005F78(&qword_1000A22D8);
  __chkstk_darwin(v389);
  v392 = (uint64_t)&v333 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v379 = sub_100005F78(&qword_1000A22E0);
  __chkstk_darwin(v379);
  v380 = (uint64_t)&v333 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v391 = sub_100005F78(&qword_1000A22E8);
  __chkstk_darwin(v391);
  v381 = (void (*)(char *, char *, uint64_t))((char *)&v333 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  v385 = type metadata accessor for AccessibilityChildBehavior(0);
  v384 = *(_QWORD *)(v385 - 8);
  __chkstk_darwin(v385);
  v383 = (char *)&v333 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v359 = type metadata accessor for FilledCircleWithLabel(0);
  v42 = __chkstk_darwin(v359);
  v334 = (uint64_t *)((char *)&v333 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v42);
  v336 = (uint64_t *)((char *)&v333 - v44);
  v361 = sub_100005F78(&qword_1000A22F0);
  v360 = *(_QWORD *)(v361 - 8);
  v45 = __chkstk_darwin(v361);
  v335 = (char *)&v333 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v341 = (char *)&v333 - v47;
  v363 = sub_100005F78(&qword_1000A22F8);
  v362 = *(_QWORD *)(v363 - 8);
  v48 = __chkstk_darwin(v363);
  v337 = (char *)&v333 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48);
  v345 = (char *)&v333 - v50;
  v387 = sub_100005F78(&qword_1000A2300);
  v51 = __chkstk_darwin(v387);
  v339 = (char *)&v333 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __chkstk_darwin(v51);
  v344 = (char *)&v333 - v54;
  v55 = __chkstk_darwin(v53);
  v342 = (char *)&v333 - v56;
  v57 = __chkstk_darwin(v55);
  v347 = (uint64_t)&v333 - v58;
  v59 = __chkstk_darwin(v57);
  v338 = (char *)&v333 - v60;
  v61 = __chkstk_darwin(v59);
  v343 = (char *)&v333 - v62;
  v63 = __chkstk_darwin(v61);
  v340 = (char *)&v333 - v64;
  __chkstk_darwin(v63);
  v346 = (uint64_t)&v333 - v65;
  v66 = type metadata accessor for BlendMode(0);
  v67 = *(_QWORD *)(v66 - 8);
  v68 = __chkstk_darwin(v66);
  v358 = (char *)&v333 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __chkstk_darwin(v68);
  v356 = (char *)&v333 - v71;
  v72 = __chkstk_darwin(v70);
  v374 = (char *)&v333 - v73;
  v74 = __chkstk_darwin(v72);
  v333 = (char *)&v333 - v75;
  v76 = __chkstk_darwin(v74);
  v357 = (char *)&v333 - v77;
  v78 = __chkstk_darwin(v76);
  v400 = (char *)&v333 - v79;
  __chkstk_darwin(v78);
  v398 = (char *)&v333 - v80;
  v81 = type metadata accessor for WidgetRenderingMode(0);
  v82 = *(_QWORD *)(v81 - 8);
  v83 = __chkstk_darwin(v81);
  v85 = (char *)&v333 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v83);
  v87 = (char *)&v333 - v86;
  v382 = type metadata accessor for ReadingGoalView(0);
  v88 = *(int *)(v382 + 20);
  v396 = v4;
  v89 = v4 + v88;
  v90 = sub_100024FCC(v87);
  static WidgetRenderingMode.accented.getter(v90);
  v91 = static WidgetRenderingMode.== infix(_:_:)(v87, v85);
  v92 = *(void (**)(char *, uint64_t))(v82 + 8);
  v92(v85, v81);
  v93 = ((uint64_t (*)(char *, uint64_t))v92)(v87, v81);
  if ((v91 & 1) != 0)
  {
    v94 = static Color.white.getter(v93);
    v95 = 0.5;
  }
  else
  {
    v94 = static Color.black.getter(v93);
    v95 = 0.1;
  }
  v386 = Color.opacity(_:)(v95);
  swift_release(v94);
  v96 = sub_100024FCC(v87);
  static WidgetRenderingMode.accented.getter(v96);
  v97 = static WidgetRenderingMode.== infix(_:_:)(v87, v85);
  v92(v85, v81);
  v92(v87, v81);
  v397 = v67;
  v98 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 104);
  v99 = enum case for BlendMode.normal(_:);
  if ((v97 & 1) != 0)
    v100 = enum case for BlendMode.normal(_:);
  else
    v100 = enum case for BlendMode.plusDarker(_:);
  v98(v398, v100, v66);
  v395 = v89;
  v101 = sub_100024FCC(v87);
  static WidgetRenderingMode.accented.getter(v101);
  v102 = static WidgetRenderingMode.== infix(_:_:)(v87, v85);
  v399 = v66;
  v103 = v102;
  v92(v85, v81);
  v92(v87, v81);
  v104 = enum case for BlendMode.plusLighter(_:);
  v105 = (v103 & 1) == 0;
  v106 = v399;
  if (v105)
    v107 = enum case for BlendMode.plusLighter(_:);
  else
    v107 = v99;
  v98(v400, v107, v399);
  v108 = (char *)a1[4];
  if (*((_BYTE *)a1 + 40) != 1)
  {
    v366 = (char *)a1[4];
    v162 = (int *)sub_100005F78(&qword_1000A0A50);
    v163 = v367;
    v164 = (uint64_t *)((char *)v367 + v162[12]);
    v165 = (char *)v367 + v162[16];
    v166 = (char *)v367 + v162[20];
    v365 = v162[24];
    v168 = *a1;
    v167 = (char *)a1[1];
    v404 = *((_OWORD *)a1 + 1);
    *v367 = v168;
    v163[1] = (uint64_t)v167;
    v169 = swift_bridgeObjectRetain(v167);
    *v164 = static Color.white.getter(v169);
    v170 = type metadata accessor for CircularProgressView.ColorStyle(0);
    swift_storeEnumTagMultiPayload(v164, v170, 1);
    v171 = v396 + *(int *)(v382 + 28);
    v172 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v172 - 8) + 16))(v165, v171, v172);
    v173 = (int *)type metadata accessor for ReadingGoalView.ViewConfiguration(0);
    v174 = v171 + v173[5];
    v175 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v175 - 8) + 16))(v166, v174, v175);
    *(uint64_t *)((char *)v163 + v365) = *(_QWORD *)(v171 + v173[6]);
    v176 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, int *))(*((_QWORD *)v162 - 1) + 56))(v163, 0, 1, v162);
    v382 = static Color.white.getter(v176);
    v177 = sub_100024FCC(v87);
    static WidgetRenderingMode.accented.getter(v177);
    LOBYTE(v162) = static WidgetRenderingMode.== infix(_:_:)(v87, v85);
    v92(v85, v81);
    v178 = ((uint64_t (*)(char *, uint64_t))v92)(v87, v81);
    v179 = static Color.white.getter(v178);
    v180 = 0.15;
    if ((v162 & 1) != 0)
      v180 = 0.5;
    v181 = Color.opacity(_:)(v180);
    swift_release(v179);
    v182 = v397;
    v183 = v374;
    v184 = v399;
    (*(void (**)(char *, char *, uint64_t))(v397 + 16))(v374, v400, v399);
    v185 = *(_QWORD *)(v171 + v173[7]);
    KeyPath = swift_getKeyPath(&unk_1000804C8);
    v187 = (uint64_t)v375;
    *v375 = KeyPath;
    v188 = sub_100005F78(&qword_1000A18B8);
    swift_storeEnumTagMultiPayload(v187, v188, 0);
    v189 = swift_getKeyPath(&unk_1000804F8);
    v190 = (int *)v376;
    v191 = (uint64_t)v369;
    v192 = (uint64_t *)&v369[*(int *)(v376 + 20)];
    *v192 = v189;
    v193 = sub_100005F78(&qword_1000A09A0);
    swift_storeEnumTagMultiPayload(v192, v193, 0);
    sub_100007984(v187, v191, &qword_1000A1E88);
    v194 = v366;
    *(_QWORD *)(v191 + v190[6]) = v366;
    v195 = (uint64_t)v163;
    v133 = v184;
    sub_1000112F0(v195, v191 + v190[7], type metadata accessor for CircularProgressView.Content);
    *(_BYTE *)(v191 + v190[8]) = 0;
    *(_QWORD *)(v191 + v190[9]) = v382;
    *(_QWORD *)(v191 + v190[10]) = v181;
    v196 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v182 + 32))(v191 + v190[11], v183, v184);
    *(_QWORD *)(v191 + v190[12]) = v185;
    *(double *)(v191 + v190[13]) = a4;
    *(double *)(v191 + v190[14]) = a4;
    v197 = v383;
    static AccessibilityChildBehavior.ignore.getter(v196);
    v198 = sub_100003DCC(&qword_1000A2318, type metadata accessor for CircularProgressView, (uint64_t)&unk_10008035C);
    v199 = v372;
    View.accessibilityElement(children:)(v197, v190, v198);
    (*(void (**)(char *, uint64_t))(v384 + 8))(v197, v385);
    sub_100007A48(v191, type metadata accessor for CircularProgressView);
    v403 = v404;
    v401 = v190;
    v402 = v198;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v401, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v201 = sub_1000075E8();
    v202 = (uint64_t)v368;
    v203 = v378;
    View.accessibilityLabel<A>(_:)(&v403, v378, &type metadata for String, OpaqueTypeConformance2, v201);
    (*(void (**)(char *, uint64_t))(v377 + 8))(v199, v203);
    v204 = sub_10003AD04(v194, 0, v388);
    v206 = v205;
    *(_QWORD *)&v403 = v204;
    *((_QWORD *)&v403 + 1) = v205;
    v207 = (uint64_t)v371;
    v208 = v390;
    ModifiedContent<>.accessibilityValue<A>(_:)(&v403, v390, &type metadata for String, v201);
    swift_bridgeObjectRelease(v206);
    v151 = &qword_1000A22D0;
    sub_100007A0C(v202, &qword_1000A22D0);
    v209 = (uint64_t)v370;
    ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(0, v208);
    sub_100007A0C(v207, &qword_1000A22D0);
    v210 = v373;
    sub_100007984(v209, v373, &qword_1000A22D0);
    v211 = v380;
    sub_1000079C8(v210, v380, &qword_1000A22D0);
    swift_storeEnumTagMultiPayload(v211, v379, 1);
    v212 = sub_10003B9FC();
    v213 = sub_10003B93C();
    v214 = (uint64_t)v381;
    _ConditionalContent<>.init(storage:)(v211, v387, v208, v212, v213);
    v215 = v392;
    sub_1000079C8(v214, v392, &qword_1000A22E8);
    swift_storeEnumTagMultiPayload(v215, v389, 0);
    v216 = sub_10000B8E4(&qword_1000A2328, &qword_1000A22E8, (void (*)(void))sub_10003B9FC, (void (*)(void))sub_10003B93C);
    v217 = sub_10000B8E4(&qword_1000A2330, &qword_1000A22C0, (void (*)(void))sub_10003B93C, (void (*)(void))sub_10003B9FC);
    _ConditionalContent<>.init(storage:)(v215, v391, v393, v216, v217);
    swift_release(v386);
    sub_100007A0C(v214, &qword_1000A22E8);
    v161 = v210;
    goto LABEL_25;
  }
  if (v108)
  {
    if (v108 == (char *)1)
    {
      v109 = v397;
      (*(void (**)(char *, char *, uint64_t))(v397 + 16))(v356, v398, v106);
      v110 = (char *)a1[1];
      v381 = (void (*)(char *, char *, uint64_t))*a1;
      v404 = *((_OWORD *)a1 + 1);
      v111 = swift_bridgeObjectRetain(v110);
      LODWORD(v380) = static HierarchicalShapeStyle.tertiary.getter(v111);
      v98(v358, v104, v399);
      v112 = sub_100024FCC(v87);
      static WidgetRenderingMode.accented.getter(v112);
      v113 = static WidgetRenderingMode.== infix(_:_:)(v87, v85);
      v114 = v85;
      v115 = v109;
      v92(v114, v81);
      v92(v87, v81);
      v116 = type metadata accessor for ColorScheme(0);
      v117 = *(_QWORD *)(v116 - 8);
      v118 = (unsigned int *)&enum case for ColorScheme.light(_:);
      if ((v113 & 1) == 0)
        v118 = (unsigned int *)&enum case for ColorScheme.dark(_:);
      v119 = (uint64_t)v349;
      (*(void (**)(char *, _QWORD, uint64_t))(v117 + 104))(v349, *v118, v116);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v117 + 56))(v119, 0, 1, v116);
      v120 = v396 + *(int *)(v382 + 28);
      v121 = (int *)v359;
      v122 = v334;
      v123 = (char *)v334 + *(int *)(v359 + 44);
      v124 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v124 - 8) + 16))(v123, v120, v124);
      v125 = type metadata accessor for ReadingGoalView.ViewConfiguration(0);
      v126 = v120 + *(int *)(v125 + 20);
      v127 = (char *)v122 + v121[12];
      v128 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 16))(v127, v126, v128);
      v129 = *(_QWORD *)(v120 + *(int *)(v125 + 24));
      v130 = v386;
      *v122 = v386;
      v131 = *(void (**)(char *, char *, uint64_t))(v115 + 32);
      v131((char *)v122 + v121[5], v356, v399);
      *(double *)((char *)v122 + v121[6]) = a4;
      v132 = (void (**)(char *, char *, uint64_t))((char *)v122 + v121[7]);
      *v132 = v381;
      v132[1] = (void (*)(char *, char *, uint64_t))v110;
      *(_DWORD *)((char *)v122 + v121[8]) = v380;
      v133 = v399;
      v131((char *)v122 + v121[9], v358, v399);
      sub_100007984(v119, (uint64_t)v122 + v121[10], &qword_1000A22B0);
      *(uint64_t *)((char *)v122 + v121[13]) = v129;
      v134 = sub_100003DCC(&qword_1000A2308, type metadata accessor for FilledCircleWithLabel, (uint64_t)&unk_100080EB0);
      v135 = v130;
      swift_retain(v130);
      v136 = v335;
      View.widgetAccentable(_:)(1, v121, v134);
      v137 = sub_100007A48((uint64_t)v122, type metadata accessor for FilledCircleWithLabel);
      v138 = v383;
      static AccessibilityChildBehavior.ignore.getter(v137);
      *(_QWORD *)&v403 = v121;
      *((_QWORD *)&v403 + 1) = v134;
      v139 = swift_getOpaqueTypeConformance2(&v403, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
      v140 = v337;
      v141 = v361;
      View.accessibilityElement(children:)(v138, v361, v139);
      (*(void (**)(char *, uint64_t))(v384 + 8))(v138, v385);
      (*(void (**)(char *, uint64_t))(v360 + 8))(v136, v141);
      v403 = v404;
      v401 = (int *)v141;
      v402 = v139;
      v142 = swift_getOpaqueTypeConformance2(&v401, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
      v143 = sub_1000075E8();
      v144 = (uint64_t)v339;
      v145 = v363;
      View.accessibilityLabel<A>(_:)(&v403, v363, &type metadata for String, v142, v143);
      (*(void (**)(char *, uint64_t))(v362 + 8))(v140, v145);
      v146 = sub_10003AD04((char *)1, 1, v388);
      v148 = v147;
      *(_QWORD *)&v403 = v146;
      *((_QWORD *)&v403 + 1) = v147;
      v149 = (uint64_t)v344;
      v150 = v387;
      ModifiedContent<>.accessibilityValue<A>(_:)(&v403, v387, &type metadata for String, v143);
      swift_bridgeObjectRelease(v148);
      v151 = &qword_1000A2300;
      sub_100007A0C(v144, &qword_1000A2300);
      v152 = (uint64_t)v342;
      ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(0, v150);
      sub_100007A0C(v149, &qword_1000A2300);
      v153 = v347;
      sub_100007984(v152, v347, &qword_1000A2300);
      v154 = v365;
      sub_1000079C8(v153, v365, &qword_1000A2300);
      swift_storeEnumTagMultiPayload(v154, v364, 1);
      v155 = sub_10003B93C();
      v156 = sub_10003B9FC();
      v157 = (uint64_t)v366;
      _ConditionalContent<>.init(storage:)(v154, v390, v150, v155, v156);
      v158 = v392;
      sub_1000079C8(v157, v392, &qword_1000A22C0);
      swift_storeEnumTagMultiPayload(v158, v389, 1);
      v159 = sub_10000B8E4(&qword_1000A2328, &qword_1000A22E8, (void (*)(void))sub_10003B9FC, (void (*)(void))sub_10003B93C);
      v160 = sub_10000B8E4(&qword_1000A2330, &qword_1000A22C0, (void (*)(void))sub_10003B93C, (void (*)(void))sub_10003B9FC);
      _ConditionalContent<>.init(storage:)(v158, v391, v393, v159, v160);
      swift_release(v135);
      sub_100007A0C(v157, &qword_1000A22C0);
      v161 = v153;
    }
    else
    {
      v275 = v396 + *(int *)(v382 + 28);
      v276 = (int *)type metadata accessor for ReadingGoalView.ViewConfiguration(0);
      v277 = *(_QWORD *)(v275 + v276[9]);
      v278 = (int *)sub_100005F78(&qword_1000A0A50);
      v279 = (uint64_t)v348;
      v280 = (_DWORD *)((char *)v348 + v278[12]);
      v281 = (char *)v348 + v278[16];
      v382 = (uint64_t)v348 + v278[20];
      v395 = v278[24];
      v282 = *a1;
      v283 = (char *)a1[1];
      v404 = *((_OWORD *)a1 + 1);
      *v348 = v282;
      *(_QWORD *)(v279 + 8) = v283;
      v284 = sub_100005F78(&qword_1000A18C0);
      v285 = (char *)v280 + *(int *)(v284 + 48);
      v286 = (char *)v280 + *(int *)(v284 + 64);
      v287 = swift_bridgeObjectRetain(v283);
      *v280 = static HierarchicalShapeStyle.tertiary.getter(v287);
      v381 = *(void (**)(char *, char *, uint64_t))(v397 + 16);
      v288 = v285;
      v289 = v398;
      v133 = v399;
      v381(v288, v398, v399);
      v290 = enum case for ColorScheme.light(_:);
      v291 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v291 - 8) + 104))(v286, v290, v291);
      v292 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_storeEnumTagMultiPayload(v280, v292, 0);
      v293 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v293 - 8) + 16))(v281, v275, v293);
      v294 = v275 + v276[5];
      v295 = type metadata accessor for Font.Design(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v295 - 8) + 16))(v382, v294, v295);
      *(_QWORD *)(v279 + v395) = *(_QWORD *)(v275 + v276[6]);
      v296 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v278 - 1) + 56))(v279, 0, 1, v278);
      v297 = static Color.clear.getter(v296);
      v298 = v374;
      v381(v374, v289, v133);
      v299 = *(_QWORD *)(v275 + v276[7]);
      v300 = swift_getKeyPath(&unk_1000804C8);
      v301 = (uint64_t)v375;
      *v375 = v300;
      v302 = sub_100005F78(&qword_1000A18B8);
      swift_storeEnumTagMultiPayload(v301, v302, 0);
      v303 = swift_getKeyPath(&unk_1000804F8);
      v304 = (int *)v376;
      v305 = (uint64_t)v350;
      v306 = (uint64_t *)&v350[*(int *)(v376 + 20)];
      *v306 = v303;
      v307 = sub_100005F78(&qword_1000A09A0);
      swift_storeEnumTagMultiPayload(v306, v307, 0);
      sub_100007984(v301, v305, &qword_1000A1E88);
      *(_QWORD *)(v305 + v304[6]) = v277;
      sub_1000112F0(v279, v305 + v304[7], type metadata accessor for CircularProgressView.Content);
      *(_BYTE *)(v305 + v304[8]) = 1;
      *(_QWORD *)(v305 + v304[9]) = v297;
      v308 = v386;
      *(_QWORD *)(v305 + v304[10]) = v386;
      (*(void (**)(uint64_t, char *, uint64_t))(v397 + 32))(v305 + v304[11], v298, v133);
      *(_QWORD *)(v305 + v304[12]) = v299;
      *(double *)(v305 + v304[13]) = a4;
      *(double *)(v305 + v304[14]) = a4;
      swift_retain(v308);
      v309 = v383;
      static AccessibilityChildBehavior.ignore.getter(v310);
      v311 = sub_100003DCC(&qword_1000A2318, type metadata accessor for CircularProgressView, (uint64_t)&unk_10008035C);
      v312 = v351;
      View.accessibilityElement(children:)(v309, v304, v311);
      (*(void (**)(char *, uint64_t))(v384 + 8))(v309, v385);
      sub_100007A48(v305, type metadata accessor for CircularProgressView);
      v403 = v404;
      v401 = v304;
      v402 = v311;
      v313 = swift_getOpaqueTypeConformance2(&v401, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
      v314 = sub_1000075E8();
      v315 = (uint64_t)v352;
      v316 = v378;
      View.accessibilityLabel<A>(_:)(&v403, v378, &type metadata for String, v313, v314);
      (*(void (**)(char *, uint64_t))(v377 + 8))(v312, v316);
      v317 = sub_10003AD04((char *)2, 1, v388);
      v319 = v318;
      *(_QWORD *)&v403 = v317;
      *((_QWORD *)&v403 + 1) = v318;
      v320 = (uint64_t)v354;
      v321 = v390;
      ModifiedContent<>.accessibilityValue<A>(_:)(&v403, v390, &type metadata for String, v314);
      swift_bridgeObjectRelease(v319);
      v151 = &qword_1000A22D0;
      sub_100007A0C(v315, &qword_1000A22D0);
      v322 = (uint64_t)v353;
      ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(0, v321);
      sub_100007A0C(v320, &qword_1000A22D0);
      v323 = v355;
      sub_100007984(v322, v355, &qword_1000A22D0);
      v324 = v365;
      sub_1000079C8(v323, v365, &qword_1000A22D0);
      swift_storeEnumTagMultiPayload(v324, v364, 0);
      v325 = sub_10003B93C();
      v326 = sub_10003B9FC();
      v327 = (uint64_t)v366;
      _ConditionalContent<>.init(storage:)(v324, v321, v387, v325, v326);
      v328 = v392;
      sub_1000079C8(v327, v392, &qword_1000A22C0);
      swift_storeEnumTagMultiPayload(v328, v389, 1);
      v329 = sub_10000B8E4(&qword_1000A2328, &qword_1000A22E8, (void (*)(void))sub_10003B9FC, (void (*)(void))sub_10003B93C);
      v330 = sub_10000B8E4(&qword_1000A2330, &qword_1000A22C0, (void (*)(void))sub_10003B93C, (void (*)(void))sub_10003B9FC);
      _ConditionalContent<>.init(storage:)(v328, v391, v393, v329, v330);
      swift_release(v308);
      sub_100007A0C(v327, &qword_1000A22C0);
      v161 = v323;
    }
LABEL_25:
    sub_100007A0C(v161, v151);
    v245 = v400;
    goto LABEL_26;
  }
  v218 = sub_100024FCC(v87);
  static WidgetRenderingMode.accented.getter(v218);
  v219 = static WidgetRenderingMode.== infix(_:_:)(v87, v85);
  v92(v85, v81);
  v220 = ((uint64_t (*)(char *, uint64_t))v92)(v87, v81);
  v221 = static Color.white.getter(v220);
  v222 = 0.3;
  if ((v219 & 1) != 0)
    v222 = 0.9;
  v377 = Color.opacity(_:)(v222);
  swift_release(v221);
  v223 = v397;
  (*(void (**)(char *, char *, uint64_t))(v397 + 16))(v357, v400, v106);
  v224 = a1[1];
  v378 = *a1;
  v376 = v224;
  v404 = *((_OWORD *)a1 + 1);
  v225 = swift_bridgeObjectRetain(v224);
  LODWORD(v375) = static HierarchicalShapeStyle.secondary.getter(v225);
  v226 = sub_100024FCC(v87);
  static WidgetRenderingMode.accented.getter(v226);
  v227 = static WidgetRenderingMode.== infix(_:_:)(v87, v85);
  v92(v85, v81);
  v92(v87, v81);
  v228 = (unsigned int *)&enum case for BlendMode.destinationOut(_:);
  if ((v227 & 1) == 0)
    v228 = (unsigned int *)&enum case for BlendMode.plusDarker(_:);
  v229 = v333;
  v98(v333, *v228, v106);
  v230 = (int *)v359;
  v231 = v336;
  v232 = (char *)v336 + *(int *)(v359 + 40);
  v233 = enum case for ColorScheme.light(_:);
  v234 = type metadata accessor for ColorScheme(0);
  v235 = *(_QWORD *)(v234 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v235 + 104))(v232, v233, v234);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v235 + 56))(v232, 0, 1, v234);
  v236 = v396 + *(int *)(v382 + 28);
  v237 = (char *)v231 + v230[11];
  v238 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v238 - 8) + 16))(v237, v236, v238);
  v239 = type metadata accessor for ReadingGoalView.ViewConfiguration(0);
  v240 = v236 + *(int *)(v239 + 20);
  v241 = (char *)v231 + v230[12];
  v242 = type metadata accessor for Font.Design(0);
  v243 = v241;
  v244 = v240;
  v133 = v399;
  v245 = v400;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v242 - 8) + 16))(v243, v244, v242);
  v246 = *(_QWORD *)(v236 + *(int *)(v239 + 24));
  *v231 = v377;
  v247 = *(void (**)(char *, char *, uint64_t))(v223 + 32);
  v247((char *)v231 + v230[5], v357, v133);
  *(double *)((char *)v231 + v230[6]) = a4;
  v248 = (uint64_t *)((char *)v231 + v230[7]);
  v249 = v376;
  *v248 = v378;
  v248[1] = v249;
  *(_DWORD *)((char *)v231 + v230[8]) = (_DWORD)v375;
  v247((char *)v231 + v230[9], v229, v133);
  *(uint64_t *)((char *)v231 + v230[13]) = v246;
  v250 = sub_100003DCC(&qword_1000A2308, type metadata accessor for FilledCircleWithLabel, (uint64_t)&unk_100080EB0);
  v251 = v341;
  View.widgetAccentable(_:)(1, v230, v250);
  v252 = sub_100007A48((uint64_t)v231, type metadata accessor for FilledCircleWithLabel);
  v253 = v383;
  static AccessibilityChildBehavior.ignore.getter(v252);
  *(_QWORD *)&v403 = v230;
  *((_QWORD *)&v403 + 1) = v250;
  v254 = swift_getOpaqueTypeConformance2(&v403, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
  v255 = v345;
  v256 = v361;
  View.accessibilityElement(children:)(v253, v361, v254);
  (*(void (**)(char *, uint64_t))(v384 + 8))(v253, v385);
  (*(void (**)(char *, uint64_t))(v360 + 8))(v251, v256);
  v403 = v404;
  v401 = (int *)v256;
  v402 = v254;
  v257 = swift_getOpaqueTypeConformance2(&v401, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v258 = sub_1000075E8();
  v259 = (uint64_t)v338;
  v260 = v363;
  View.accessibilityLabel<A>(_:)(&v403, v363, &type metadata for String, v257, v258);
  (*(void (**)(char *, uint64_t))(v362 + 8))(v255, v260);
  v261 = sub_10003AD04(0, 1, v388);
  v263 = v262;
  *(_QWORD *)&v403 = v261;
  *((_QWORD *)&v403 + 1) = v262;
  v264 = (uint64_t)v343;
  v265 = v387;
  ModifiedContent<>.accessibilityValue<A>(_:)(&v403, v387, &type metadata for String, v258);
  swift_bridgeObjectRelease(v263);
  sub_100007A0C(v259, &qword_1000A2300);
  v266 = (uint64_t)v340;
  ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)(0, v265);
  sub_100007A0C(v264, &qword_1000A2300);
  v267 = v346;
  sub_100007984(v266, v346, &qword_1000A2300);
  v268 = v380;
  sub_1000079C8(v267, v380, &qword_1000A2300);
  swift_storeEnumTagMultiPayload(v268, v379, 0);
  v269 = sub_10003B9FC();
  v270 = sub_10003B93C();
  v271 = (uint64_t)v381;
  _ConditionalContent<>.init(storage:)(v268, v265, v390, v269, v270);
  v272 = v392;
  sub_1000079C8(v271, v392, &qword_1000A22E8);
  swift_storeEnumTagMultiPayload(v272, v389, 0);
  v273 = sub_10000B8E4(&qword_1000A2328, &qword_1000A22E8, (void (*)(void))sub_10003B9FC, (void (*)(void))sub_10003B93C);
  v274 = sub_10000B8E4(&qword_1000A2330, &qword_1000A22C0, (void (*)(void))sub_10003B93C, (void (*)(void))sub_10003B9FC);
  _ConditionalContent<>.init(storage:)(v272, v391, v393, v273, v274);
  swift_release(v386);
  sub_100007A0C(v271, &qword_1000A22E8);
  sub_100007A0C(v267, &qword_1000A2300);
LABEL_26:
  v331 = *(void (**)(char *, uint64_t))(v397 + 8);
  v331(v245, v133);
  return ((uint64_t (*)(char *, uint64_t))v331)(v398, v133);
}

uint64_t sub_10003A690@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  double v27;
  double v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _OWORD v89[2];
  _OWORD v90[2];
  char v91;
  char v92[8];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;

  v8 = sub_100005F78(&qword_1000A2288);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v67 - v12;
  v14 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v14);
  v79 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for BlendMode(0);
  v16 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v18 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100005F78(&qword_1000A2290);
  __chkstk_darwin(v76);
  v20 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100005F78(&qword_1000A2298);
  __chkstk_darwin(v81);
  v80 = (uint64_t)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100005F78(&qword_1000A22A0);
  v22 = __chkstk_darwin(v82);
  v24 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v78 = (char *)&v67 - v25;
  v26 = *(_OWORD *)(a1 + 16);
  v90[0] = *(_OWORD *)a1;
  v90[1] = v26;
  v91 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v90, (uint64_t)v92, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v92, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v28 = v27;
  sub_10000DBE0((uint64_t)v90, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  result = type metadata accessor for ReadingGoalView(0);
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v30 = *(int *)(result + 24);
  v31 = *(_QWORD *)(a1 + v30);
  if (*(_QWORD *)(v31 + 16) <= a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v68 = v13;
  v69 = a3;
  v70 = v11;
  v67 = 48 * a2;
  v71 = result;
  v32 = *(_BYTE *)(v31 + 48 * a2 + 73);
  v73 = v30;
  sub_100037F90(v32);
  v84 = v85;
  v75 = a1;
  v33 = *((_QWORD *)&v85 + 1);
  v34 = *((_QWORD *)&v86 + 1);
  v83 = v86;
  v74 = v24;
  v35 = v87;
  v36 = DWORD2(v87);
  v72 = a2;
  v37 = BYTE12(v87);
  v38 = v18;
  v39 = v77;
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for BlendMode.plusLighter(_:), v77);
  v40 = (uint64_t)v79;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v79, v38, v39);
  sub_1000078D4(v40, (uint64_t)&v20[*(int *)(v76 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  v41 = v84;
  *(_QWORD *)v20 = v84;
  *((_QWORD *)v20 + 1) = v33;
  v42 = v83;
  *((_QWORD *)v20 + 2) = v83;
  *((_QWORD *)v20 + 3) = v34;
  *((_QWORD *)v20 + 4) = v35;
  *((_DWORD *)v20 + 10) = v36;
  v20[44] = v37;
  sub_10003B89C(v41, v33, v42, v34, v35, v36, v37);
  v43 = v40;
  v44 = (uint64_t)v78;
  sub_100007A48(v43, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v38, v39);
  v45 = v33;
  v46 = v75;
  v47 = (uint64_t)v74;
  v48 = v37;
  v49 = v44;
  sub_10003B8E0(v84, v45, v83, v34, v35, v36, v48);
  v50 = v46 + *(int *)(v71 + 28);
  v51 = type metadata accessor for ReadingGoalView.ViewConfiguration(0);
  v52 = *(_QWORD *)(v50 + *(int *)(v51 + 28));
  v53 = static Alignment.center.getter(v51);
  _FrameLayout.init(width:height:alignment:)(&v85, *(_QWORD *)&v28, 0, v52, 0, v53, v54);
  v55 = v80;
  sub_1000079C8((uint64_t)v20, v80, &qword_1000A2290);
  v56 = (_OWORD *)(v55 + *(int *)(v81 + 36));
  v57 = v86;
  *v56 = v85;
  v56[1] = v57;
  v56[2] = v87;
  sub_100007A0C((uint64_t)v20, &qword_1000A2290);
  sub_1000079C8(v55, v47, &qword_1000A2298);
  v58 = v47 + *(int *)(v82 + 36);
  *(double *)v58 = (v28 + a4) * -0.5;
  *(_QWORD *)(v58 + 8) = 0;
  sub_100007A0C(v55, &qword_1000A2298);
  result = sub_100007984(v47, v44, &qword_1000A22A0);
  v59 = *(_QWORD *)(v46 + v73);
  if (*(_QWORD *)(v59 + 16) > v72)
  {
    v60 = v59 + v67;
    v61 = *(_OWORD *)(v60 + 48);
    v88 = *(_OWORD *)(v60 + 32);
    v89[0] = v61;
    *(_OWORD *)((char *)v89 + 10) = *(_OWORD *)(v60 + 58);
    v93 = v88;
    v94 = v61;
    v95 = v61;
    v96 = v88;
    v62 = *(unsigned __int8 *)(v60 + 73);
    sub_100007444((uint64_t)&v96);
    sub_100007444((uint64_t)&v95);
    v63 = (uint64_t)v68;
    sub_100038668((uint64_t *)&v88, v62, (uint64_t)v68, a4);
    sub_10000746C((uint64_t)&v96);
    sub_10000746C((uint64_t)&v95);
    sub_1000079C8(v49, v47, &qword_1000A22A0);
    v64 = (uint64_t)v70;
    sub_1000079C8(v63, (uint64_t)v70, &qword_1000A2288);
    v65 = v69;
    sub_1000079C8(v47, v69, &qword_1000A22A0);
    v66 = sub_100005F78(&qword_1000A22A8);
    sub_1000079C8(v64, v65 + *(int *)(v66 + 48), &qword_1000A2288);
    sub_100007A0C(v63, &qword_1000A2288);
    sub_100007A0C(v49, &qword_1000A22A0);
    sub_100007A0C(v64, &qword_1000A2288);
    return sub_100007A0C(v47, &qword_1000A22A0);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10003AD04(char *a1, char a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  unint64_t v35;
  Swift::String v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ObjCClassFromMetadata;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unsigned __int8 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;

  v105 = a3;
  v106 = a1;
  v4 = type metadata accessor for NumberFormatStyleConfiguration.Precision(0);
  v102 = *(_QWORD *)(v4 - 8);
  v103 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005F78(&qword_1000A2338);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v100 - v12;
  v14 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Locale(0);
  v18 = *(_QWORD *)(v17 - 8);
  v109 = v17;
  v110 = v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v100 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v100 - v22;
  v24 = type metadata accessor for String.LocalizationValue(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v27 = __chkstk_darwin(v26);
  v107 = v25;
  v108 = v21;
  if ((a2 & 1) == 0)
  {
    v100 = (char *)&v100 - v28;
    v101 = v27;
    v104 = v29;
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 1);
    v30._countAndFlagsBits = 0;
    v30._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v30);
    v111 = v106;
    static Locale.autoupdatingCurrent.getter(v31);
    v32 = sub_10003BAFC();
    FloatingPointFormatStyle.Percent.init(locale:)(v23, &type metadata for Double, v32);
    static NumberFormatStyleConfiguration.Precision.fractionLength(_:)(0);
    FloatingPointFormatStyle.Percent.precision(_:)(v6, v7);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v6, v103);
    v33 = *(void (**)(char *, uint64_t))(v8 + 8);
    v33(v11, v7);
    v34 = sub_100007F64(&qword_1000A2348, &qword_1000A2338, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent);
    v35 = sub_1000075E8();
    String.LocalizationValue.StringInterpolation.appendInterpolation<A, B>(_:format:)(&v111, v13, &type metadata for Double, v7, v34, v35);
    v33(v13, v7);
    v36._countAndFlagsBits = 0x74656C706D6F6320;
    v36._object = (void *)0xE900000000000065;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v36);
    v37 = v100;
    v38 = String.LocalizationValue.init(stringInterpolation:)(v16);
    static Locale.current.getter(v38);
    v39 = v104;
    v40 = v101;
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 16))(v104, v37, v101);
    v41 = type metadata accessor for BundleFinder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v41);
    v43 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    static Locale.current.getter(v43);
    v44 = v39;
    v45 = String.init(localized:defaultValue:table:bundle:locale:comment:)("Widget_ReadingGoalProgress_AX", 29, 2, v39, 0, 0, v43, v21, "Accessibility string for reading goal completion percentage a particular day", 76, 2);
    v47 = v46;
    (*(void (**)(char *, uint64_t))(v110 + 8))(v23, v109);
    v48 = v37;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v37, v40);
    v49 = sub_1000408F8(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    v51 = *((_QWORD *)v49 + 2);
    v50 = *((_QWORD *)v49 + 3);
    if (v51 >= v50 >> 1)
      v49 = sub_1000408F8((char *)(v50 > 1), v51 + 1, 1, v49);
    v52 = v105;
    *((_QWORD *)v49 + 2) = v51 + 1;
    v53 = &v49[16 * v51];
    *((_QWORD *)v53 + 4) = v45;
    v54 = v53 + 32;
    v29 = v44;
    goto LABEL_13;
  }
  v55 = v27;
  v57 = v109;
  v56 = v110;
  if (!v106)
  {
    v71 = (char *)&v100 - v28;
    v72 = v29;
    v73 = String.LocalizationValue.init(stringLiteral:)(0x686361206C616F47, 0xED00006465766569);
    static Locale.current.getter(v73);
    v74 = v107;
    (*(void (**)(uint64_t, char *, uint64_t))(v107 + 16))(v72, v71, v55);
    v75 = type metadata accessor for BundleFinder();
    v76 = swift_getObjCClassFromMetadata(v75);
    v77 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", v76);
    v78 = v108;
    v40 = v55;
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v108, v23, v57);
    v104 = v72;
    v66 = String.init(localized:table:bundle:locale:comment:)(v72, 0, 0, v77, v78, "Accessibility string indicating that the user achieved their reading goal on a particular day", 93, 2);
    v47 = v79;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v23, v57);
    v48 = v71;
    (*(void (**)(char *, uint64_t))(v74 + 8))(v71, v55);
    v49 = sub_1000408F8(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    v69 = *((_QWORD *)v49 + 2);
    v80 = *((_QWORD *)v49 + 3);
    v70 = v69 + 1;
    if (v69 >= v80 >> 1)
      v49 = sub_1000408F8((char *)(v80 > 1), v69 + 1, 1, v49);
    v52 = v105;
    goto LABEL_12;
  }
  v40 = v27;
  v59 = v107;
  v58 = v108;
  if (v106 == (char *)1)
  {
    v60 = (char *)&v100 - v28;
    v61 = v29;
    v62 = String.LocalizationValue.init(stringLiteral:)(0x656C706D6F636E49, 0xEA00000000006574);
    static Locale.current.getter(v62);
    (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))(v61, v60, v55);
    v63 = type metadata accessor for BundleFinder();
    v64 = swift_getObjCClassFromMetadata(v63);
    v65 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", v64);
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v58, v23, v57);
    v104 = v61;
    v66 = String.init(localized:table:bundle:locale:comment:)(v61, 0, 0, v65, v58, "Accessibility string indicating that the user did not achieve their reading goal on a particular day", 100, 2);
    v47 = v67;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v23, v57);
    v48 = v60;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v55);
    v49 = sub_1000408F8(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    v69 = *((_QWORD *)v49 + 2);
    v68 = *((_QWORD *)v49 + 3);
    v70 = v69 + 1;
    v52 = v105;
    if (v69 >= v68 >> 1)
      v49 = sub_1000408F8((char *)(v68 > 1), v69 + 1, 1, v49);
LABEL_12:
    *((_QWORD *)v49 + 2) = v70;
    v81 = &v49[16 * v69];
    *((_QWORD *)v81 + 4) = v66;
    v54 = v81 + 32;
    v29 = v104;
LABEL_13:
    *((_QWORD *)v54 + 1) = v47;
    v59 = v107;
    v58 = v108;
    goto LABEL_14;
  }
  v48 = (char *)&v100 - v28;
  v49 = (char *)_swiftEmptyArrayStorage;
  v52 = v105;
LABEL_14:
  if (v52 <= 3u)
  {
    v82 = v48;
    v83 = v29;
    v84 = String.LocalizationValue.init(stringLiteral:)(0x7274732061206E4FLL, 0xEB000000006B6165);
    static Locale.current.getter(v84);
    (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))(v83, v48, v40);
    v85 = type metadata accessor for BundleFinder();
    v86 = swift_getObjCClassFromMetadata(v85);
    v87 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", v86);
    v89 = v109;
    v88 = v110;
    (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v58, v23, v109);
    v90 = String.init(localized:table:bundle:locale:comment:)(v83, 0, 0, v87, v58, "Accessibility string indicating a streak of reading goal achievement", 68, 2);
    v92 = v91;
    (*(void (**)(char *, uint64_t))(v88 + 8))(v23, v89);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v82, v40);
    if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
      v49 = sub_1000408F8(0, *((_QWORD *)v49 + 2) + 1, 1, v49);
    v94 = *((_QWORD *)v49 + 2);
    v93 = *((_QWORD *)v49 + 3);
    if (v94 >= v93 >> 1)
      v49 = sub_1000408F8((char *)(v93 > 1), v94 + 1, 1, v49);
    *((_QWORD *)v49 + 2) = v94 + 1;
    v95 = &v49[16 * v94];
    *((_QWORD *)v95 + 4) = v90;
    *((_QWORD *)v95 + 5) = v92;
  }
  v111 = v49;
  v96 = sub_100005F78(&qword_1000A0DD8);
  v97 = sub_100007F64(&qword_1000A0DE0, &qword_1000A0DD8, (uint64_t)&protocol conformance descriptor for [A]);
  v98 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v96, v97);
  swift_bridgeObjectRelease(v49);
  return v98;
}

uint64_t sub_10003B59C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for ReadingGoalView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_1000075DC(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8), *(_QWORD *)(v0 + v4 + 16), *(_QWORD *)(v0 + v4 + 24), *(_BYTE *)(v0 + v4 + 32));
  v7 = (_QWORD *)(v0 + v4 + v1[5]);
  v8 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[6]));
  v11 = v6 + v1[7];
  v12 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = v11 + *(int *)(type metadata accessor for ReadingGoalView.ViewConfiguration(0) + 20);
  v14 = type metadata accessor for Font.Design(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = v6 + v1[8];
  v16 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  return swift_deallocObject(v0, v10, v3 | 7);
}

uint64_t sub_10003B6F0(unint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for ReadingGoalView(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1000377BC(a1, v1 + v4, *(double *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

unint64_t sub_10003B750()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2238;
  if (!qword_1000A2238)
  {
    v1 = sub_100005FC0(&qword_1000A2228);
    sub_10003B7BC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2238);
  }
  return result;
}

unint64_t sub_10003B7BC()
{
  unint64_t result;

  result = qword_1000A2240;
  if (!qword_1000A2240)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1000A2240);
  }
  return result;
}

unint64_t sub_10003B800()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2248;
  if (!qword_1000A2248)
  {
    v1 = sub_100005FC0(&qword_1000A2230);
    sub_100007F64(&qword_1000A2250, &qword_1000A2258, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100007F64(&qword_1000A2260, &qword_1000A2268, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2248);
  }
  return result;
}

void sub_10003B89C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) != 0)
    swift_retain(a1);
  else
    sub_10003B91C(a1, a2, a3, a4, a5, a6, BYTE3(a6) & 1, (uint64_t (*)(uint64_t, unint64_t, uint64_t))j__swift_retain, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))j__swift_bridgeObjectRetain);
}

uint64_t sub_10003B8E0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) != 0)
    return swift_release(a1);
  else
    return sub_10003B91C(a1, a2, a3, a4, a5, a6, BYTE3(a6) & 1, (uint64_t (*)(uint64_t, unint64_t, uint64_t))j__swift_release, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))j__swift_bridgeObjectRelease);
}

uint64_t sub_10003B91C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t (*a8)(uint64_t, unint64_t, uint64_t), uint64_t (*a9)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))
{
  if ((a7 & 1) != 0)
    return a9(a1, a2, a3, a4, a5, a6, WORD1(a6) & 1);
  else
    return a8(a1, a2, (a2 >> 16) & 1);
}

unint64_t sub_10003B93C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000A2310;
  if (!qword_1000A2310)
  {
    v1 = sub_100005FC0(&qword_1000A22D0);
    v2[0] = type metadata accessor for CircularProgressView(255);
    v2[1] = sub_100003DCC(&qword_1000A2318, type metadata accessor for CircularProgressView, (uint64_t)&unk_10008035C);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100003DCC((unint64_t *)&qword_1000A0A38, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2310);
  }
  return result;
}

unint64_t sub_10003B9FC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;

  result = qword_1000A2320;
  if (!qword_1000A2320)
  {
    v1 = sub_100005FC0(&qword_1000A2300);
    v2 = sub_100005FC0(&qword_1000A22F0);
    v4 = type metadata accessor for FilledCircleWithLabel(255);
    v5 = sub_100003DCC(&qword_1000A2308, type metadata accessor for FilledCircleWithLabel, (uint64_t)&unk_100080EB0);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100003DCC((unint64_t *)&qword_1000A0A38, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2320);
  }
  return result;
}

unint64_t sub_10003BAFC()
{
  unint64_t result;

  result = qword_1000A2340;
  if (!qword_1000A2340)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_1000A2340);
  }
  return result;
}

unint64_t sub_10003BB40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2360;
  if (!qword_1000A2360)
  {
    v1 = sub_100005FC0(&qword_1000A2350);
    sub_10003BBEC(&qword_1000A2368, &qword_1000A2370, &qword_1000A2378, &qword_1000A2358);
    sub_10003BBEC(&qword_1000A2380, &qword_1000A2388, &qword_1000A2390, &qword_1000A2398);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2360);
  }
  return result;
}

uint64_t sub_10003BBEC(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100005FC0(a2);
    sub_100007F64(a3, a4, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003BC64()
{
  return sub_100007F64(&qword_1000A23B0, &qword_1000A23B8, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

void sub_10003BC90(uint64_t a1, uint64_t a2, char a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  void *object;
  Swift::String v19;
  uint64_t v20;
  NSString v21;
  uint64_t v22;
  Class isa;
  id v24;
  _QWORD v25[3];
  uint64_t v26;

  v8 = type metadata accessor for UTType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[2] = a1;
  v26 = a2;
  swift_bridgeObjectRetain(a2);
  v12._countAndFlagsBits = 45;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13 = 8 * a3;
  v14._countAndFlagsBits = *(_QWORD *)&aUntreatebackdr[v13];
  v15 = *(void **)&aUntreatebackdr[v13 + 24];
  v14._object = v15;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  v16._countAndFlagsBits = 64;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  if ((~*(_QWORD *)&a4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a4 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a4 < 9.22337204e18)
  {
    v25[1] = (uint64_t)a4;
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v17._object;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(object);
    v19._countAndFlagsBits = 120;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    v20 = v26;
    v21 = String._bridgeToObjectiveC()();
    v22 = swift_bridgeObjectRelease(v20);
    static UTType.png.getter(v22);
    isa = UTType._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v24 = objc_msgSend(v21, "stringByAppendingPathExtensionForType:", isa);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_10003BE64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  id v6;
  uint64_t v8;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C090(v2, qword_1000A23C0);
  sub_10000BE14(v0, (uint64_t)qword_1000A23C0);
  v5 = objc_msgSend((id)objc_opt_self(BUAppGroup), "books");
  v6 = objc_msgSend(v5, "containerURL");

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v6);
  URL.appendingPathComponent(_:isDirectory:)(0x2F7972617262694CLL, 0xEE00736568636143, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_10003BF74()
{
  uint64_t v0;

  v0 = type metadata accessor for URL(0);
  sub_10000C090(v0, qword_1000A23D8);
  sub_10000BE14(v0, (uint64_t)qword_1000A23D8);
  if (qword_1000A0658 != -1)
    swift_once(&qword_1000A0658, sub_10003BE64);
  sub_10000BE14(v0, (uint64_t)qword_1000A23C0);
  return URL.appendingPathComponent(_:isDirectory:)(0x6F43746567646957, 0xEC00000073726576, 1);
}

uint64_t sub_10003C020@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  NSURL *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  id v30;
  unint64_t v31;
  _BYTE *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;

  HIBYTE(v35) = 1;
  v2 = (void *)objc_opt_self(NSFileManager);
  v3 = objc_msgSend(v2, "defaultManager");
  if (qword_1000A0660 != -1)
    swift_once(&qword_1000A0660, sub_10003BF74);
  v4 = type metadata accessor for URL(0);
  v5 = sub_10000BE14(v4, (uint64_t)qword_1000A23D8);
  URL.path.getter();
  v7 = v6;
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  LOBYTE(v7) = objc_msgSend(v3, "fileExistsAtPath:isDirectory:", v8, (char *)&v35 + 7);

  if ((v7 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v5, v4);
  v33 = v2;
  if (qword_1000A0670 != -1)
    swift_once(&qword_1000A0670, sub_10003DF64);
  v9 = type metadata accessor for Logger(0);
  sub_10000BE14(v9, (uint64_t)qword_1000A23F8);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = (void *)swift_slowAlloc(32, -1);
    v36 = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = sub_10003E024();
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v4, v14);
    v17 = v16;
    v34 = sub_10005BD08(v15, v16, (uint64_t *)&v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Creating caches directory for cover at %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  v18 = objc_msgSend(v33, "defaultManager");
  URL._bridgeToObjectiveC()(v19);
  v21 = v20;
  v36 = 0;
  v22 = objc_msgSend(v18, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v20, 1, 0, &v36);

  v23 = v36;
  if (v22)
  {
    v24 = v36;
    v25 = objc_msgSend(v33, "defaultManager");
    URL.path.getter();
    v27 = v26;
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v27);
    LOBYTE(v27) = objc_msgSend(v25, "fileExistsAtPath:isDirectory:", v28, (char *)&v35 + 7);

    if ((v27 & 1) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v5, v4);
    v31 = sub_10003DFE0();
    swift_allocError(&type metadata for WidgetDataCacheManager.CacheError, v31, 0, 0);
    *v32 = 0;
  }
  else
  {
    v30 = v36;
    _convertNSErrorToError(_:)(v23);

  }
  return swift_willThrow();
}

void sub_10003C3C4()
{
  id v0;
  uint64_t v1;
  uint64_t v2;

  v0 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v0, "scale");
  v2 = v1;

  qword_1000A23F0 = v2;
}

id sub_10003C424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  id v27;
  _QWORD v29[7];

  v6 = type metadata accessor for Logger(0);
  v29[4] = *(_QWORD *)(v6 - 8);
  v29[5] = v6;
  __chkstk_darwin(v6);
  v29[6] = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)v29 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)v29 - v16;
  if (qword_1000A0668 != -1)
    swift_once(&qword_1000A0668, sub_10003C3C4);
  v29[2] = a1;
  v29[3] = a3;
  sub_10003BC90(a1, a2, a3, *(double *)&qword_1000A23F0);
  v19 = v18;
  v21 = v20;
  sub_10003C020((uint64_t)v12);
  URL.appendingPathComponent(_:isDirectory:)(v19, v21, 0);
  swift_bridgeObjectRelease(v21);
  v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v15, v8);
  v23 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter();
  v25 = v24;
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  v27 = objc_msgSend(v23, "fileExistsAtPath:", v26);

  v22(v17, v8);
  return v27;
}

id sub_10003C8E4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  NSString v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  double v61;
  id v62;
  Class isa;
  id v64;
  _QWORD v66[3];
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t);
  char *v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79[3];

  v76 = a1;
  v77 = a3;
  v5 = *v3;
  v6 = type metadata accessor for URL(0);
  v69 = *(_QWORD *)(v6 - 8);
  v70 = v6;
  v7 = __chkstk_darwin(v6);
  v75 = (void (*)(uint64_t, uint64_t))((char *)v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __chkstk_darwin(v7);
  v68 = (char *)v66 - v10;
  __chkstk_darwin(v9);
  v12 = (char *)v66 - v11;
  v13 = type metadata accessor for Logger(0);
  v14 = *(void (**)(char *, uint64_t))(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v74 = (char *)v66 - v19;
  v20 = __chkstk_darwin(v18);
  v67 = (char *)v66 - v21;
  __chkstk_darwin(v20);
  v23 = (char *)v66 - v22;
  if (qword_1000A0670 != -1)
    swift_once(&qword_1000A0670, sub_10003DF64);
  v24 = sub_10000BE14(v13, (uint64_t)qword_1000A23F8);
  v25 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v14 + 2);
  v72 = v24;
  v73 = v25;
  ((void (*)(char *))v25)(v23);
  v26 = swift_bridgeObjectRetain_n(a2, 2);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter();
  v29 = os_log_type_enabled(v27, v28);
  v66[2] = v17;
  if (v29)
  {
    v30 = swift_slowAlloc(22, -1);
    v71 = v14;
    v31 = v30;
    v66[0] = swift_slowAlloc(64, -1);
    v79[0] = v66[0];
    *(_DWORD *)v31 = 136315394;
    v66[1] = v5;
    swift_bridgeObjectRetain(a2);
    v78 = sub_10005BD08(v76, a2, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    v32 = 8 * (char)v77;
    v33 = *(_QWORD *)&aUntreatebackdr[v32];
    *(_WORD *)(v31 + 12) = 2080;
    v34 = *(_QWORD *)&aUntreatebackdr[v32 + 24];
    v78 = sub_10005BD08(v33, v34, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Getting cached image. (assetID: '%s', type: %s)", (uint8_t *)v31, 0x16u);
    v35 = v66[0];
    swift_arrayDestroy(v66[0], 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v31, -1, -1);

    v36 = (void (*)(char *, uint64_t))*((_QWORD *)v71 + 1);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    v36 = (void (*)(char *, uint64_t))*((_QWORD *)v14 + 1);
  }
  v71 = v36;
  v36(v23, v13);
  v37 = (uint64_t)v75;
  if (qword_1000A0668 != -1)
    swift_once(&qword_1000A0668, sub_10003C3C4);
  sub_10003BC90(v76, a2, v77, *(double *)&qword_1000A23F0);
  v39 = v38;
  v41 = v40;
  sub_10003C020(v37);
  v42 = v68;
  URL.appendingPathComponent(_:isDirectory:)(v39, v41, 0);
  swift_bridgeObjectRelease(v41);
  v43 = v69;
  v44 = v70;
  v75 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
  v75(v37, v70);
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v12, v42, v44);
  v45 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter();
  v47 = v46;
  v48 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v47);
  LODWORD(v47) = objc_msgSend(v45, "fileExistsAtPath:", v48);

  if ((_DWORD)v47)
  {
    v58 = Data.init(contentsOf:options:)(v12, 0);
    v60 = v59;
    v61 = *(double *)&qword_1000A23F0;
    v62 = objc_allocWithZone((Class)UIImage);
    sub_10001AAC4(v58, v60);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v64 = objc_msgSend(v62, "initWithData:scale:", isa, v61);
    sub_10001AA80(v58, v60);

    sub_10001AA80(v58, v60);
    v75((uint64_t)v12, v70);
  }
  else
  {
    v49 = v67;
    v73(v67, v72, v13);
    v50 = swift_bridgeObjectRetain_n(a2, 2);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = swift_slowAlloc(22, -1);
      v54 = swift_slowAlloc(64, -1);
      v79[0] = v54;
      *(_DWORD *)v53 = 136315394;
      swift_bridgeObjectRetain(a2);
      v78 = sub_10005BD08(v76, a2, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79, v53 + 4, v53 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      v55 = 8 * (char)v77;
      v56 = *(_QWORD *)&aUntreatebackdr[v55];
      *(_WORD *)(v53 + 12) = 2080;
      v57 = *(_QWORD *)&aUntreatebackdr[v55 + 24];
      v78 = sub_10005BD08(v56, v57, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79, v53 + 14, v53 + 22);
      swift_bridgeObjectRelease(v57);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "No cached image found. (assetID: '%s', type: %s)", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a2, 2);
    }

    v71(v49, v13);
    v75((uint64_t)v12, v70);
    return 0;
  }
  return v64;
}

void sub_10003D3E8(uint64_t a1, unint64_t a2, void (*a3)(char *, uint64_t), CGImage *a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  void (**v37)(char *, char *, uint64_t);
  id v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  unint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  NSURL *v58;
  const __CFURL *v59;
  const __CFURL *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  __CFString *v67;
  CGImageDestination *v68;
  CGImageRef v69;
  unint64_t v70;
  _BYTE *v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  void (*v90)(char *, char *, uint64_t);
  void (*v91)(char *, uint64_t);
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  unint64_t v104;
  _BYTE *v105;
  void (**v106)(char *, char *, uint64_t);
  CGImageRef v107;
  unint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(char *);
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(char *, uint64_t);
  uint64_t v124;
  unint64_t v125;
  CGImageRef v126;
  void (*v127)(char *, char *, uint64_t);
  void (**v128)(char *, char *, uint64_t);
  void (*v129)(char *, uint64_t);
  uint64_t v130;
  uint64_t v131;
  void (*v132)(_QWORD, _QWORD);

  v126 = a4;
  v129 = a3;
  v122 = *a5;
  v7 = type metadata accessor for UTType(0);
  v114 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v115 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v128 = *(void (***)(char *, char *, uint64_t))(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v112 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v127 = (void (*)(char *, char *, uint64_t))((char *)&v110 - v13);
  __chkstk_darwin(v12);
  v15 = (char *)&v110 - v14;
  v16 = type metadata accessor for Logger(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v113 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v120 = (char *)&v110 - v21;
  __chkstk_darwin(v20);
  v23 = (char *)&v110 - v22;
  if (qword_1000A0670 != -1)
    swift_once(&qword_1000A0670, sub_10003DF64);
  v24 = sub_10000BE14(v16, (uint64_t)qword_1000A23F8);
  v118 = *(void (**)(char *))(v17 + 16);
  v119 = v24;
  v118(v23);
  v25 = swift_bridgeObjectRetain_n(a2, 2);
  v26 = Logger.logObject.getter(v25);
  v125 = v17;
  v27 = v26;
  v28 = static os_log_type_t.default.getter();
  v29 = os_log_type_enabled(v27, v28);
  v116 = v7;
  v117 = v9;
  v121 = v16;
  v124 = a1;
  if (v29)
  {
    v30 = swift_slowAlloc(22, -1);
    v111 = swift_slowAlloc(64, -1);
    v132 = (void (*)(_QWORD, _QWORD))v111;
    *(_DWORD *)v30 = 136315394;
    swift_bridgeObjectRetain(a2);
    v130 = sub_10005BD08(a1, a2, (uint64_t *)&v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    v31 = 8 * (char)v129;
    v32 = *(_QWORD *)&aUntreatebackdr[v31];
    *(_WORD *)(v30 + 12) = 2080;
    v33 = *(_QWORD *)&aUntreatebackdr[v31 + 24];
    v130 = sub_10005BD08(v32, v33, (uint64_t *)&v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v30 + 14, v30 + 22);
    v34 = v33;
    v16 = v121;
    swift_bridgeObjectRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Saving cached image. (assetID: '%s', type: %s)", (uint8_t *)v30, 0x16u);
    v35 = v111;
    swift_arrayDestroy(v111, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v36 = *(void (**)(char *, uint64_t))(v125 + 8);
  v36(v23, v16);
  v37 = v128;
  v38 = -[CGImage CGImage](v126, "CGImage");
  v39 = (uint64_t)v127;
  if (v38)
  {
    v40 = v38;
    if (qword_1000A0668 != -1)
      swift_once(&qword_1000A0668, sub_10003C3C4);
    sub_10003BC90(v124, a2, (char)v129, *(double *)&qword_1000A23F0);
    v42 = v41;
    v44 = v43;
    v45 = v123;
    sub_10003C020(v39);
    if (v45)
    {

      swift_bridgeObjectRelease(v44);
    }
    else
    {
      v123 = v36;
      v125 = a2;
      v126 = (CGImageRef)v40;
      URL.appendingPathComponent(_:isDirectory:)(v42, v44, 0);
      swift_bridgeObjectRelease(v44);
      v57 = v117;
      v127 = v37[1];
      ((void (*)(uint64_t, uint64_t))v127)(v39, v117);
      URL._bridgeToObjectiveC()(v58);
      v60 = v59;
      v61 = v115;
      v62 = static UTType.png.getter(v59);
      UTType.identifier.getter(v62);
      v64 = v63;
      v65 = *(void (**)(char *, uint64_t))(v114 + 8);
      v65(v61, v116);
      v66 = v15;
      v67 = (__CFString *)String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v64);
      v68 = CGImageDestinationCreateWithURL(v60, v67, 1uLL, 0);

      if (v68)
      {
        v128 = (void (**)(char *, char *, uint64_t))v66;
        v69 = v126;
        CGImageDestinationAddImage(v68, v126, 0);
        if (CGImageDestinationFinalize(v68))
        {
          ((void (*)(void (**)(char *, char *, uint64_t), uint64_t))v127)(v128, v57);

        }
        else
        {
          v92 = v113;
          v93 = v121;
          ((void (*)(char *, uint64_t, uint64_t))v118)(v113, v119, v121);
          v94 = v125;
          v95 = swift_bridgeObjectRetain_n(v125, 2);
          v96 = Logger.logObject.getter(v95);
          v97 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v96, v97))
          {
            v98 = swift_slowAlloc(22, -1);
            v99 = swift_slowAlloc(64, -1);
            v132 = (void (*)(_QWORD, _QWORD))v99;
            *(_DWORD *)v98 = 136315394;
            swift_bridgeObjectRetain(v94);
            v130 = sub_10005BD08(v124, v94, (uint64_t *)&v132);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v98 + 4, v98 + 12);
            swift_bridgeObjectRelease_n(v94, 3);
            v100 = 8 * (char)v129;
            v101 = *(_QWORD *)&aUntreatebackdr[v100];
            *(_WORD *)(v98 + 12) = 2080;
            v102 = *(_QWORD *)&aUntreatebackdr[v100 + 24];
            v130 = sub_10005BD08(v101, v102, (uint64_t *)&v132);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v98 + 14, v98 + 22);
            swift_bridgeObjectRelease(v102);
            _os_log_impl((void *)&_mh_execute_header, v96, v97, "Failed to write cached image file. (assetID: '%s', type: %s)", (uint8_t *)v98, 0x16u);
            swift_arrayDestroy(v99, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v99, -1, -1);
            swift_slowDealloc(v98, -1, -1);

            v103 = v113;
          }
          else
          {

            swift_bridgeObjectRelease_n(v94, 2);
            v103 = v92;
          }
          v123(v103, v93);
          v106 = v128;
          v107 = v126;
          v108 = sub_10003DFE0();
          swift_allocError(&type metadata for WidgetDataCacheManager.CacheError, v108, 0, 0);
          *v109 = 3;
          swift_willThrow();

          ((void (*)(void (**)(char *, char *, uint64_t), uint64_t))v127)(v106, v117);
        }
      }
      else
      {
        v129 = v65;
        v72 = v112;
        v128[2](v112, v66, v57);
        v73 = v125;
        v74 = swift_bridgeObjectRetain_n(v125, 2);
        v75 = Logger.logObject.getter(v74);
        v76 = static os_log_type_t.error.getter();
        v77 = v66;
        if (os_log_type_enabled(v75, v76))
        {
          v78 = v72;
          v79 = swift_slowAlloc(32, -1);
          v123 = (void (*)(char *, uint64_t))swift_slowAlloc(96, -1);
          v132 = (void (*)(_QWORD, _QWORD))v123;
          *(_DWORD *)v79 = 136315650;
          swift_bridgeObjectRetain(v73);
          v130 = sub_10005BD08(v124, v73, (uint64_t *)&v132);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v79 + 4, v79 + 12);
          v80 = swift_bridgeObjectRelease_n(v73, 3);
          *(_WORD *)(v79 + 12) = 2080;
          v128 = (void (**)(char *, char *, uint64_t))v66;
          v81 = static UTType.png.getter(v80);
          v82 = UTType.identifier.getter(v81);
          v84 = v83;
          v129(v61, v116);
          v130 = sub_10005BD08(v82, v84, (uint64_t *)&v132);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v79 + 14, v79 + 22);
          swift_bridgeObjectRelease(v84);
          *(_WORD *)(v79 + 22) = 2080;
          v85 = sub_10003E024();
          v86 = v78;
          v87 = dispatch thunk of CustomStringConvertible.description.getter(v117, v85);
          v89 = v88;
          v130 = sub_10005BD08(v87, v88, (uint64_t *)&v132);
          v57 = v117;
          v77 = (char *)v128;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v79 + 24, v79 + 32);
          swift_bridgeObjectRelease(v89);
          v90 = v127;
          ((void (*)(char *, uint64_t))v127)(v86, v57);
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "Failed to create destination in CGImageDestinationCreateWithURL. (assetID: '%s', type: %s, url: %s", (uint8_t *)v79, 0x20u);
          v91 = v123;
          swift_arrayDestroy(v123, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v91, -1, -1);
          swift_slowDealloc(v79, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v73, 2);
          v90 = v127;
          ((void (*)(char *, uint64_t))v127)(v72, v57);
        }

        v104 = sub_10003DFE0();
        swift_allocError(&type metadata for WidgetDataCacheManager.CacheError, v104, 0, 0);
        *v105 = 2;
        swift_willThrow();

        ((void (*)(char *, uint64_t))v90)(v77, v57);
      }
    }
  }
  else
  {
    v46 = v120;
    ((void (*)(char *, uint64_t, uint64_t))v118)(v120, v119, v16);
    v47 = swift_bridgeObjectRetain_n(a2, 2);
    v48 = a2;
    v49 = Logger.logObject.getter(v47);
    v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = swift_slowAlloc(22, -1);
      v52 = swift_slowAlloc(64, -1);
      v132 = (void (*)(_QWORD, _QWORD))v52;
      *(_DWORD *)v51 = 136315394;
      swift_bridgeObjectRetain(v48);
      v130 = sub_10005BD08(v124, v48, (uint64_t *)&v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v51 + 4, v51 + 12);
      swift_bridgeObjectRelease_n(v48, 3);
      v53 = 8 * (char)v129;
      v54 = *(_QWORD *)&aUntreatebackdr[v53];
      *(_WORD *)(v51 + 12) = 2080;
      v55 = *(_QWORD *)&aUntreatebackdr[v53 + 24];
      v130 = sub_10005BD08(v54, v55, (uint64_t *)&v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v51 + 14, v51 + 22);
      swift_bridgeObjectRelease(v55);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Can't save cached image without cgImage. (assetID: '%s', type: %s)", (uint8_t *)v51, 0x16u);
      swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v51, -1, -1);

      v56 = v120;
    }
    else
    {

      swift_bridgeObjectRelease_n(v48, 2);
      v56 = v46;
    }
    v36(v56, v16);
    v70 = sub_10003DFE0();
    swift_allocError(&type metadata for WidgetDataCacheManager.CacheError, v70, 0, 0);
    *v71 = 1;
    swift_willThrow();
  }
}

uint64_t type metadata accessor for WidgetDataCacheManager()
{
  return objc_opt_self(_TtC20BooksWidgetExtension22WidgetDataCacheManager);
}

uint64_t sub_10003DF64()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000C090(v0, qword_1000A23F8);
  sub_10000BE14(v0, (uint64_t)qword_1000A23F8);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x800000010007BDF0, 0xD000000000000022, 0x800000010007C410);
}

unint64_t sub_10003DFE0()
{
  unint64_t result;

  result = qword_1000A24D0;
  if (!qword_1000A24D0)
  {
    result = swift_getWitnessTable(&unk_10008060C, &type metadata for WidgetDataCacheManager.CacheError);
    atomic_store(result, (unint64_t *)&qword_1000A24D0);
  }
  return result;
}

unint64_t sub_10003E024()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A24D8;
  if (!qword_1000A24D8)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_1000A24D8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WidgetRelevance(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetDataCacheManager.CacheError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10003E148 + 4 * byte_100080545[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10003E17C + 4 * byte_100080540[v4]))();
}

uint64_t sub_10003E17C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003E184(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003E18CLL);
  return result;
}

uint64_t sub_10003E198(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003E1A0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10003E1A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003E1AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WidgetDataCacheManager.CacheError()
{
  return &type metadata for WidgetDataCacheManager.CacheError;
}

unint64_t sub_10003E1CC()
{
  unint64_t result;

  result = qword_1000A24E0;
  if (!qword_1000A24E0)
  {
    result = swift_getWitnessTable(&unk_1000805E4, &type metadata for WidgetDataCacheManager.CacheError);
    atomic_store(result, (unint64_t *)&qword_1000A24E0);
  }
  return result;
}

void sub_10003E210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  NSString v5;
  id v6;
  id v7;
  NSString v8;
  Class isa;
  NSString v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  id v19;
  NSURL *v20;
  void *v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  id v25;
  Class v26;
  NSString v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  _QWORD v47[3];
  _BYTE v48[16];
  uint64_t v49;
  uint64_t v50;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (void *)objc_opt_self(NSUserDefaults);
  v45 = objc_msgSend(v4, "bu_groupUserDefaults");
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v45, "integerForKey:", v5);

  if (!v6)
  {
    v7 = objc_msgSend(v4, "standardUserDefaults");
    v8 = String._bridgeToObjectiveC()();
    objc_msgSend(v7, "integerForKey:", v8);

    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v45, "setValue:forKey:", isa, v10);

  }
  v11 = String._bridgeToObjectiveC()();
  v12 = (uint64_t)objc_msgSend(v45, "integerForKey:", v11);

  if (v12 > 2)
  {

  }
  else
  {
    if (qword_1000A0660 != -1)
      swift_once(&qword_1000A0660, sub_10003BF74);
    v13 = sub_10000BE14(v0, (uint64_t)qword_1000A23D8);
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v13, v0);
    LOBYTE(v46) = 1;
    v14 = (void *)objc_opt_self(NSFileManager);
    v15 = objc_msgSend(v14, "defaultManager");
    URL.path.getter();
    v17 = v16;
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    LODWORD(v17) = objc_msgSend(v15, "fileExistsAtPath:isDirectory:", v18, &v46);

    if ((_DWORD)v17)
    {
      v19 = objc_msgSend(v14, "defaultManager");
      URL._bridgeToObjectiveC()(v20);
      v22 = v21;
      v49 = 0;
      v23 = objc_msgSend(v19, "removeItemAtURL:error:", v21, &v49);

      v24 = v49;
      if (v23)
      {
        v25 = (id)v49;
        v26 = Int._bridgeToObjectiveC()().super.super.isa;
        v27 = String._bridgeToObjectiveC()();
        objc_msgSend(v45, "setValue:forKey:", v26, v27);

        if (qword_1000A0670 != -1)
          swift_once(&qword_1000A0670, sub_10003DF64);
        v28 = type metadata accessor for Logger(0);
        v29 = sub_10000BE14(v28, (uint64_t)qword_1000A23F8);
        v30 = Logger.logObject.getter(v29);
        v31 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v30, v31))
        {
          v32 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v32 = 134217984;
          v49 = 3;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v32 + 4, v32 + 12);
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "Successfully deleted previous image cache folder. Updated current cache folder version to %ld.", v32, 0xCu);
          swift_slowDealloc(v32, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      }
      else
      {
        v33 = (id)v49;
        v34 = _convertNSErrorToError(_:)(v24);

        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
        if (qword_1000A0670 != -1)
          swift_once(&qword_1000A0670, sub_10003DF64);
        v35 = type metadata accessor for Logger(0);
        sub_10000BE14(v35, (uint64_t)qword_1000A23F8);
        swift_errorRetain(v34);
        v36 = swift_errorRetain(v34);
        v37 = Logger.logObject.getter(v36);
        v38 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v37, v38))
        {
          v39 = (uint8_t *)swift_slowAlloc(12, -1);
          v40 = swift_slowAlloc(32, -1);
          v49 = v40;
          *(_DWORD *)v39 = 136315138;
          swift_getErrorValue(v34, v48, v47);
          v41 = Error.localizedDescription.getter(v47[1], v47[2]);
          v43 = v42;
          v46 = sub_10005BD08(v41, v42, &v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v39 + 4, v39 + 12);
          swift_bridgeObjectRelease(v43);
          swift_errorRelease(v34);
          swift_errorRelease(v34);
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Failed to delete previous image cache folder: %s", v39, 0xCu);
          swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v40, -1, -1);
          swift_slowDealloc(v39, -1, -1);

          swift_errorRelease(v34);
        }
        else
        {
          swift_errorRelease(v34);
          swift_errorRelease(v34);
          swift_errorRelease(v34);

        }
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);

    }
  }
}

_QWORD *sub_10003E84C(void (*a1)(_QWORD), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v9 = sub_100005F78(&qword_1000A25C8);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v30 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (_QWORD *)__chkstk_darwin(v14);
  v29 = (char *)&v25 - v17;
  if (a3 == a4)
  {
    return _swiftEmptyArrayStorage;
  }
  else
  {
    if (a4 >= a3)
    {
      v18 = _swiftEmptyArrayStorage;
      v27 = a1;
      v28 = a2;
      v26 = v13;
      while (a3 < a4)
      {
        v31 = a3;
        a1(&v31);
        if (v4)
        {
          swift_bridgeObjectRelease(v18);
          return v18;
        }
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
        {
          result = (_QWORD *)sub_100007A0C((uint64_t)v11, &qword_1000A25C8);
        }
        else
        {
          v19 = a4;
          v20 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
          v21 = v29;
          v20(v29, v11, v12);
          v20(v30, v21, v12);
          if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
            v18 = (_QWORD *)sub_100040B28(0, v18[2] + 1, 1, (unint64_t)v18, &qword_1000A25E8, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
          v23 = v18[2];
          v22 = v18[3];
          if (v23 >= v22 >> 1)
            v18 = (_QWORD *)sub_100040B28(v22 > 1, v23 + 1, 1, (unint64_t)v18, &qword_1000A25E8, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
          v18[2] = v23 + 1;
          v24 = (unint64_t)v18
              + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))
              + *(_QWORD *)(v26 + 72) * v23;
          v13 = v26;
          result = (_QWORD *)((uint64_t (*)(unint64_t, char *, uint64_t))v20)(v24, v30, v12);
          a4 = v19;
          a1 = v27;
        }
        if (a4 == ++a3)
          return v18;
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10003EABC(uint64_t a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v3 = 0x6369666963657073;
  else
    v3 = 0x6563655274736F6DLL;
  if (v2)
    v4 = 0xEA0000000000746ELL;
  else
    v4 = 0xE800000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10003EB18(uint64_t a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v3 = 0x7468676972;
  else
    v3 = 1952867692;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_10003EB64(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 0x7468676972;
  else
    v3 = 1952867692;
  if ((a2 & 1) != 0)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE400000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_10003EBD4(uint64_t a1, char a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(dword_1000806D0[a2]);
  return Hasher._finalize()();
}

Swift::Int sub_10003EC20(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if ((a2 & 1) != 0)
    v3 = 0x6369666963657073;
  else
    v3 = 0x6563655274736F6DLL;
  if ((a2 & 1) != 0)
    v4 = 0xE800000000000000;
  else
    v4 = 0xEA0000000000746ELL;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10003ECA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v27;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005F78(&qword_1000A25C0);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TimeZone(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Calendar(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v27 - v16;
  v18 = static Calendar.gregorian.getter(v15);
  static TimeZone.autoupdatingCurrent.getter(v18);
  v19 = Calendar.timeZone.setter(v9);
  static Locale.autoupdatingCurrent.getter(v19);
  v20 = type metadata accessor for Locale(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v6, 0, 1, v20);
  v21 = Calendar.locale.setter(v6);
  v22 = static Calendar.autoupdatingCurrent.getter(v21);
  v23 = Calendar.firstWeekday.getter(v22);
  v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  v24(v14, v10);
  v25 = Calendar.firstWeekday.setter(v23);
  Date.init()(v25);
  Calendar.startOfDay(for:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return ((uint64_t (*)(char *, uint64_t))v24)(v17, v10);
}

uint64_t sub_10003EE88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_BYTE *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  _BYTE v39[16];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v39[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100005F78(&qword_1000A25C0);
  __chkstk_darwin(v6);
  v8 = &v39[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for TimeZone(0);
  __chkstk_darwin(v9);
  v11 = &v39[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for Calendar(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = &v39[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v14);
  v19 = &v39[-v18];
  v20 = static Calendar.gregorian.getter(v17);
  static TimeZone.autoupdatingCurrent.getter(v20);
  v21 = Calendar.timeZone.setter(v11);
  static Locale.autoupdatingCurrent.getter(v21);
  v22 = type metadata accessor for Locale(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v8, 0, 1, v22);
  v23 = Calendar.locale.setter(v8);
  v24 = static Calendar.autoupdatingCurrent.getter(v23);
  v25 = Calendar.firstWeekday.getter(v24);
  v26 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
  v26(v16, v12);
  Calendar.firstWeekday.setter(v25);
  Calendar.startOfDay(for:)(v1);
  v27 = sub_100040054();
  v28 = Calendar.firstWeekday.getter(v27);
  v29 = v28 - v27;
  if (__OFSUB__(v28, v27))
  {
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    swift_once(&qword_1000A0678, sub_10004087C);
    goto LABEL_8;
  }
  if (v29 <= 0)
    v30 = v28 - v27;
  else
    v30 = v29 - 7;
  if (v30 > 0x7FFFFFFFFFFFFFF8)
    goto LABEL_13;
  __chkstk_darwin(v28);
  *(_QWORD *)&v39[-16] = v19;
  *(_QWORD *)&v39[-8] = v5;
  v27 = (uint64_t)sub_10003E84C((void (*)(_QWORD))sub_1000456F0, (uint64_t)&v39[-32], v31, v32);
  if (*(_QWORD *)(v27 + 16) == 7)
    goto LABEL_11;
  if (qword_1000A0678 != -1)
    goto LABEL_14;
LABEL_8:
  v33 = type metadata accessor for Logger(0);
  v34 = sub_10000BE14(v33, (uint64_t)qword_1000A24E8);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Unexpected: a week should have 7 days", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }

LABEL_11:
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  v26(v19, v12);
  return v27;
}

uint64_t sub_10003F1A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t i;
  char *v54;
  _QWORD *v55;

  v2 = type metadata accessor for WidgetReadingHistory.DayEntry(0);
  v52 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v51 = (uint64_t)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100005F78(&qword_1000A25D0);
  v4 = __chkstk_darwin(v49);
  v54 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v46 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v46 - v9;
  v11 = *(_QWORD *)(a1 + 64);
  v48 = a1 + 64;
  v55 = &_swiftEmptyDictionarySingleton;
  v12 = -1 << *(_BYTE *)(a1 + 32);
  if (-v12 < 64)
    v13 = ~(-1 << -(char)v12);
  else
    v13 = -1;
  v14 = v13 & v11;
  v46 = -1 << *(_BYTE *)(a1 + 32);
  v47 = (unint64_t)(63 - v12) >> 6;
  v50 = a1;
  result = swift_bridgeObjectRetain(a1);
  i = 0;
  if (v14)
    goto LABEL_38;
LABEL_7:
  v16 = i + 1;
  if (!__OFADD__(i, 1))
  {
    if (v16 < v47)
    {
      v17 = *(_QWORD *)(v48 + 8 * v16);
      v18 = i + 1;
      if (v17)
        goto LABEL_22;
      v18 = i + 2;
      if (i + 2 >= v47)
        goto LABEL_39;
      v17 = *(_QWORD *)(v48 + 8 * v18);
      if (v17)
        goto LABEL_22;
      v18 = i + 3;
      if (i + 3 >= v47)
        goto LABEL_39;
      v17 = *(_QWORD *)(v48 + 8 * v18);
      if (v17)
        goto LABEL_22;
      v18 = i + 4;
      if (i + 4 >= v47)
        goto LABEL_39;
      v17 = *(_QWORD *)(v48 + 8 * v18);
      if (v17)
      {
LABEL_22:
        v14 = (v17 - 1) & v17;
        v20 = __clz(__rbit64(v17)) + (v18 << 6);
        for (i = v18; ; v20 = v45 | (i << 6))
        {
          v21 = v50;
          v22 = *(_QWORD *)(v50 + 48);
          v23 = type metadata accessor for Date(0);
          v24 = *(_QWORD *)(v23 - 8);
          v25 = *(_QWORD *)(v24 + 72);
          (*(void (**)(char *, unint64_t, uint64_t))(v24 + 16))(v10, v22 + v25 * v20, v23);
          v26 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v20);
          v27 = v49;
          *(_QWORD *)&v10[*(int *)(v49 + 48)] = v26;
          sub_100007984((uint64_t)v10, (uint64_t)v8, &qword_1000A25D0);
          v28 = *(_QWORD *)&v8[*(int *)(v27 + 48)];
          if (*(_QWORD *)(v28 + 16))
          {
            v29 = v28 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
            v30 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
            v30(v54, v8, v23);
            sub_100045594(v29, v51);
            v31 = v55;
            v32 = v55[2];
            if (v55[3] <= v32)
            {
              v33 = v32 + 1;
              swift_bridgeObjectRetain(v26);
              sub_100041108(v33, 1);
              v31 = v55;
            }
            else
            {
              swift_bridgeObjectRetain(v26);
            }
            v34 = v31[5];
            v35 = sub_100003DCC(&qword_1000A25B0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            result = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v23, v35);
            v36 = v31 + 8;
            v37 = -1 << *((_BYTE *)v31 + 32);
            v38 = result & ~v37;
            v39 = v38 >> 6;
            if (((-1 << v38) & ~v31[(v38 >> 6) + 8]) != 0)
            {
              v40 = __clz(__rbit64((-1 << v38) & ~v31[(v38 >> 6) + 8])) | v38 & 0x7FFFFFFFFFFFFFC0;
            }
            else
            {
              v41 = 0;
              v42 = (unint64_t)(63 - v37) >> 6;
              do
              {
                if (++v39 == v42 && (v41 & 1) != 0)
                {
                  __break(1u);
                  goto LABEL_40;
                }
                v43 = v39 == v42;
                if (v39 == v42)
                  v39 = 0;
                v41 |= v43;
                v44 = v36[v39];
              }
              while (v44 == -1);
              v40 = __clz(__rbit64(~v44)) + (v39 << 6);
            }
            *(_QWORD *)((char *)v36 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
            v30((char *)(v31[6] + v40 * v25), v54, v23);
            sub_1000455D8(v51, v31[7] + *(_QWORD *)(v52 + 72) * v40);
            ++v31[2];
            result = swift_bridgeObjectRelease(v28);
            if (!v14)
              goto LABEL_7;
          }
          else
          {
            swift_bridgeObjectRetain(v26);
            result = sub_100007A0C((uint64_t)v8, &qword_1000A25D0);
            if (!v14)
              goto LABEL_7;
          }
LABEL_38:
          v45 = __clz(__rbit64(v14));
          v14 &= v14 - 1;
        }
      }
      v19 = i + 5;
      if (i + 5 < v47)
      {
        v17 = *(_QWORD *)(v48 + 8 * v19);
        if (v17)
        {
          v18 = i + 5;
          goto LABEL_22;
        }
        while (1)
        {
          v18 = v19 + 1;
          if (__OFADD__(v19, 1))
            goto LABEL_41;
          if (v18 >= v47)
            break;
          v17 = *(_QWORD *)(v48 + 8 * v18);
          ++v19;
          if (v17)
            goto LABEL_22;
        }
      }
    }
LABEL_39:
    sub_1000456E8(v50);
    return (uint64_t)v55;
  }
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10003F640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  int v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;

  v60 = a3;
  v61 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v61 - 8);
  v8 = __chkstk_darwin(v61);
  v64 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v55 - v10;
  v12 = sub_100005F78(&qword_1000A25B8);
  v13 = __chkstk_darwin(v12);
  v62 = (uint64_t)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v55 - v15;
  v17 = type metadata accessor for WidgetReadingHistory.DayEntry(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a2 + 16);
  v63 = a1;
  v59 = a2;
  if (v21 && (v22 = sub_100040EA4(a1), (v23 & 1) != 0))
  {
    sub_100045594(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v18 + 72) * v22, (uint64_t)v16);
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    v25 = v16;
    v26 = 0;
  }
  else
  {
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    v25 = v16;
    v26 = 1;
  }
  v57 = v24;
  v24((uint64_t)v25, v26, 1, v17);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v28 = v61;
  v27(v11, v63, v61);
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17);
  v56 = v18;
  if (v29 == 1)
  {
    v27(v20, (uint64_t)v11, v28);
    v30 = &v20[*(int *)(v17 + 20)];
    *(_QWORD *)v30 = 0;
    *((_QWORD *)v30 + 1) = 0;
    v30[16] = 0;
    v31 = *(void (**)(char *, uint64_t))(v7 + 8);
    v31(v11, v28);
    sub_100007A0C((uint64_t)v16, &qword_1000A25B8);
  }
  else
  {
    v31 = *(void (**)(char *, uint64_t))(v7 + 8);
    v31(v11, v28);
    sub_1000455D8((uint64_t)v16, (uint64_t)v20);
  }
  v32 = v28;
  v33 = (uint64_t)v64;
  v35 = v59;
  v34 = *(_QWORD *)&v60;
  v36 = static Date.< infix(_:_:)(v20, *(_QWORD *)&v60);
  v58 = v31;
  if ((v36 & 1) != 0)
  {
    v37 = v32;
    *(_QWORD *)&v60 = (v20[*(int *)(v17 + 20) + 16] & 1) == 0;
LABEL_17:
    LODWORD(v61) = 1;
    goto LABEL_18;
  }
  v37 = v32;
  if ((static Date.== infix(_:_:)(v20, v34) & 1) != 0)
  {
    v38 = (uint64_t *)&v20[*(int *)(v17 + 20)];
    v40 = *v38;
    v39 = v38[1];
    if (v40 >= v39)
      v40 = v39;
    if ((double)v40 / (double)v39 >= 1.0)
    {
      v60 = 0.0;
      goto LABEL_17;
    }
    LODWORD(v61) = 0;
    v60 = (double)v40 / (double)v39;
  }
  else
  {
    LODWORD(v61) = 1;
    *(_QWORD *)&v60 = 2;
  }
LABEL_18:
  sub_10003FA0C(v33);
  if (*(_QWORD *)(v35 + 16) && (v41 = sub_100040EA4(v33), (v42 & 1) != 0))
  {
    sub_100045594(*(_QWORD *)(v35 + 56) + *(_QWORD *)(v56 + 72) * v41, v62);
    v43 = 0;
  }
  else
  {
    v43 = 1;
  }
  v44 = v37;
  v45 = v58;
  v46 = v62;
  v57(v62, v43, 1, v17);
  v45(v64, v44);
  v47 = sub_10003FC94(v34, v46);
  sub_100007A0C(v46, &qword_1000A25B8);
  v48 = sub_100040328((uint64_t (*)(uint64_t))sub_100043364);
  v50 = v49;
  v51 = sub_100040328((uint64_t (*)(uint64_t))sub_10004398C);
  v53 = v52;
  result = sub_100045664((uint64_t)v20);
  *(_QWORD *)a4 = v48;
  *(_QWORD *)(a4 + 8) = v50;
  *(_QWORD *)(a4 + 16) = v51;
  *(_QWORD *)(a4 + 24) = v53;
  *(double *)(a4 + 32) = v60;
  *(_BYTE *)(a4 + 40) = v61;
  *(_BYTE *)(a4 + 41) = v47;
  return result;
}

uint64_t sub_10003FA0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  _QWORD v32[2];

  v32[0] = a1;
  v1 = type metadata accessor for Calendar.Component(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005F78(&qword_1000A25C0);
  __chkstk_darwin(v5);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TimeZone(0);
  __chkstk_darwin(v8);
  v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Calendar(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)v32 - v16;
  v18 = sub_100005F78(&qword_1000A25C8);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = static Calendar.gregorian.getter(v19);
  static TimeZone.autoupdatingCurrent.getter(v22);
  v23 = Calendar.timeZone.setter(v10);
  static Locale.autoupdatingCurrent.getter(v23);
  v24 = type metadata accessor for Locale(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v7, 0, 1, v24);
  v25 = Calendar.locale.setter(v7);
  v26 = static Calendar.autoupdatingCurrent.getter(v25);
  v27 = Calendar.firstWeekday.getter(v26);
  v28 = *(void (**)(char *, uint64_t))(v12 + 8);
  v28(v15, v11);
  Calendar.firstWeekday.setter(v27);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for Calendar.Component.day(_:), v1);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v4, -1, v32[1], 0);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v28(v17, v11);
  v29 = type metadata accessor for Date(0);
  v30 = *(_QWORD *)(v29 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48))(v21, 1, v29);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(_QWORD, char *, uint64_t))(v30 + 32))(v32[0], v21, v29);
  __break(1u);
  return result;
}

uint64_t sub_10003FC94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetReadingHistory.DayEntry(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005F78(&qword_1000A25B8);
  __chkstk_darwin(v13);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000456A0(a2, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    sub_100007A0C((uint64_t)v15, &qword_1000A25B8);
    sub_100045594(v2, (uint64_t)v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  }
  else
  {
    v16 = v15[*(int *)(v9 + 20) + 16];
    sub_100045664((uint64_t)v15);
    sub_100045594(v2, (uint64_t)v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
    if (v16 == 1)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      sub_100045664((uint64_t)v12);
      goto LABEL_6;
    }
  }
  v17 = static Date.> infix(_:_:)(v12, v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_100045664((uint64_t)v12);
  if ((v17 & 1) == 0)
    return 4;
LABEL_6:
  v18 = sub_100040054();
  v19 = static Date.== infix(_:_:)(v2, a1);
  v20 = v2 + *(int *)(v9 + 20);
  if ((v19 & 1) == 0)
  {
    if (*(_BYTE *)(v20 + 16) == 1)
      return 2 * (v18 == 1);
    return 4;
  }
  v22 = *(_QWORD *)v20;
  v21 = *(_QWORD *)(v20 + 8);
  if (v22 >= v21)
    v22 = v21;
  if ((double)v22 / (double)v21 >= 1.0)
    return 2 * (v18 == 1);
  if (v18 == 1)
    return 3;
  else
    return 1;
}

_QWORD *sub_10003FED4(void (*a1)(_QWORD *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  _QWORD *v33;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v33 = _swiftEmptyArrayStorage;
    sub_10005C364(0, v5, 0);
    v6 = _swiftEmptyArrayStorage;
    v8 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
    v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v26 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      a1(v28, v9);
      if (v4)
        break;
      v4 = 0;
      v10 = v28[0];
      v11 = v28[1];
      v13 = v28[2];
      v12 = v29;
      v14 = v30;
      v15 = v31;
      v16 = v32;
      v33 = v6;
      v18 = v6[2];
      v17 = v6[3];
      if (v18 >= v17 >> 1)
      {
        v20 = v28[0];
        v24 = v30;
        v25 = v29;
        v22 = v32;
        v23 = v31;
        sub_10005C364(v17 > 1, v18 + 1, 1);
        v16 = v22;
        v15 = v23;
        v14 = v24;
        v12 = v25;
        v10 = v20;
        v6 = v33;
      }
      v6[2] = v18 + 1;
      v19 = &v6[6 * v18];
      v19[4] = v10;
      v19[5] = v11;
      v19[6] = v13;
      v19[7] = v12;
      v19[8] = v14;
      *((_BYTE *)v19 + 72) = v15;
      *((_BYTE *)v19 + 73) = v16;
      v9 += v26;
      if (!--v5)
        return v6;
    }
    swift_release(v6);
  }
  return v6;
}

uint64_t type metadata accessor for ViewModelFactory()
{
  return objc_opt_self(_TtC20BooksWidgetExtension16ViewModelFactory);
}

uint64_t sub_100040054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005F78(&qword_1000A25C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimeZone(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Calendar(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v29 - v18;
  v20 = static Calendar.gregorian.getter(v17);
  static TimeZone.autoupdatingCurrent.getter(v20);
  v21 = Calendar.timeZone.setter(v11);
  static Locale.autoupdatingCurrent.getter(v21);
  v22 = type metadata accessor for Locale(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v8, 0, 1, v22);
  v23 = Calendar.locale.setter(v8);
  v24 = static Calendar.autoupdatingCurrent.getter(v23);
  v25 = Calendar.firstWeekday.getter(v24);
  v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  v26(v16, v12);
  Calendar.firstWeekday.setter(v25);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Calendar.Component.weekday(_:), v2);
  v27 = Calendar.component(_:from:)(v5, v1);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v26(v19, v12);
  return v27;
}

uint64_t sub_100040258(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = type metadata accessor for Calendar.Component(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Calendar.Component.day(_:), v5);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v8, v9, a3, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100040328(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = sub_100005F78(&qword_1000A25C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TimeZone(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Calendar(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v31 - v13;
  v15 = sub_100040054();
  v16 = static Calendar.gregorian.getter(v15);
  static TimeZone.autoupdatingCurrent.getter(v16);
  v17 = Calendar.timeZone.setter(v7);
  static Locale.autoupdatingCurrent.getter(v17);
  v18 = type metadata accessor for Locale(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v4, 0, 1, v18);
  v19 = Calendar.locale.setter(v4);
  v20 = static Calendar.autoupdatingCurrent.getter(v19);
  v21 = Calendar.firstWeekday.getter(v20);
  v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v23 = Calendar.firstWeekday.setter(v21);
  v24 = Calendar.firstWeekday.getter(v23);
  result = ((uint64_t (*)(char *, uint64_t))v22)(v14, v8);
  v26 = v15 - v24;
  if (__OFSUB__(v15, v24))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v26 >= 0)
    v27 = v15 - v24;
  else
    v27 = v26 + 7;
  result = a1(result);
  if ((v27 & 0x8000000000000000) != 0)
    goto LABEL_9;
  v28 = result;
  if (v27 < *(_QWORD *)(result + 16))
  {
    v29 = result + 16 * v27;
    v30 = *(_QWORD *)(v29 + 32);
    swift_bridgeObjectRetain(*(_QWORD *)(v29 + 40));
    swift_bridgeObjectRelease(v28);
    return v30;
  }
LABEL_10:
  __break(1u);
  return result;
}

void *sub_10004051C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  void *result;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  int64_t v38;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  sub_10005C348(0, v6, 0);
  v27 = v6;
  v29 = a2;
  v30 = a1;
  v31 = v5;
  v28 = v4;
  if (v6)
  {
    swift_bridgeObjectRetain(a1);
    result = (void *)swift_bridgeObjectRetain(a2);
    v8 = (uint64_t *)(a2 + 40);
    v9 = (_QWORD *)(a1 + 40);
    v10 = v4;
    while (v10)
    {
      if (!v5)
        goto LABEL_26;
      v11 = *v9;
      v12 = *v8;
      v33 = *(v9 - 1);
      v35 = *(v8 - 1);
      v14 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
      v13 = *((_QWORD *)&_swiftEmptyArrayStorage + 3);
      v37 = v14 + 1;
      swift_bridgeObjectRetain(*v9);
      result = (void *)swift_bridgeObjectRetain(v12);
      if (v14 >= v13 >> 1)
        result = (void *)sub_10005C348(v13 > 1, v37, 1);
      *((_QWORD *)&_swiftEmptyArrayStorage + 2) = v37;
      v15 = (_QWORD *)((char *)&_swiftEmptyArrayStorage + 32 * v14);
      v15[4] = v33;
      v15[5] = v11;
      --v5;
      v15[6] = v35;
      v15[7] = v12;
      --v10;
      v8 += 2;
      v9 += 2;
      if (!--v6)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    result = (void *)swift_bridgeObjectRetain(a2);
LABEL_13:
    if (v28 <= v31)
    {
LABEL_24:
      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(v30);
      return &_swiftEmptyArrayStorage;
    }
    if (v27 <= v31)
      v16 = v31;
    else
      v16 = v27;
    v17 = v16 - v27;
    v18 = v28 - v27;
    v19 = v31 - v27;
    v32 = 16 * v27;
    v21 = v29;
    v20 = v30;
    while (v18)
    {
      if (!v19)
        goto LABEL_24;
      if (!v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v20 + v32 + 40);
      v23 = *(_QWORD *)(v21 + v32 + 40);
      v34 = *(_QWORD *)(v20 + v32 + 32);
      v36 = *(_QWORD *)(v21 + v32 + 32);
      v25 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
      v24 = *((_QWORD *)&_swiftEmptyArrayStorage + 3);
      v38 = v25 + 1;
      swift_bridgeObjectRetain(v22);
      result = (void *)swift_bridgeObjectRetain(v23);
      if (v25 >= v24 >> 1)
        result = (void *)sub_10005C348(v24 > 1, v38, 1);
      *((_QWORD *)&_swiftEmptyArrayStorage + 2) = v38;
      v26 = (_QWORD *)((char *)&_swiftEmptyArrayStorage + 32 * v25);
      v26[4] = v34;
      v26[5] = v22;
      --v17;
      v26[6] = v36;
      v26[7] = v23;
      --v19;
      v20 += 16;
      v21 += 16;
      if (!--v18)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *sub_100040770(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  sub_10005C364(0, 0, 0);
  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v12 = a1;
  if (v2)
  {
    v3 = (uint64_t *)(a1 + 56);
    do
    {
      v5 = *(v3 - 3);
      v4 = *(v3 - 2);
      v6 = *(v3 - 1);
      v7 = *v3;
      v9 = _swiftEmptyArrayStorage[2];
      v8 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(v4);
      swift_bridgeObjectRetain(v7);
      if (v9 >= v8 >> 1)
        sub_10005C364(v8 > 1, v9 + 1, 1);
      v3 += 4;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      v10 = &_swiftEmptyArrayStorage[6 * v9];
      v10[4] = v5;
      v10[5] = v4;
      v10[6] = v6;
      v10[7] = v7;
      v10[8] = 1;
      *((_WORD *)v10 + 36) = 1025;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease(v12);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10004087C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000C090(v0, qword_1000A24E8);
  sub_10000BE14(v0, (uint64_t)qword_1000A24E8);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x800000010007BDF0, 0xD00000000000001CLL, 0x800000010007C920);
}

char *sub_1000408F8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100005F78(&qword_1000A0A58);
      v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32])
          memmove(v14, a4 + 32, 16 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100042B68(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100040A04(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100005F78(&qword_1000A0CF0);
      v11 = (_QWORD *)swift_allocObject(v10, 88 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 88);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[11 * v8 + 4])
          memmove(v13, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100044494(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100040B28(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100005F78(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100044584(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

_QWORD *sub_100040D34(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return _swiftEmptyArrayStorage;
  v8 = 16 * v5;
  if (v5 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = sub_100005F78(&qword_1000A0A58);
  v10 = (_QWORD *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 17;
  v10[2] = v5;
  v10[3] = 2 * (v12 >> 4);
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = v10 + 4;
  v14 = a2 + 16 * a3;
  if (v14 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)v13 >= v14 + v8)
  {
    swift_arrayInitWithCopy(v13);
    return v10;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

unint64_t sub_100040EA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for Date(0);
  v6 = sub_100003DCC(&qword_1000A25B0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100041890(a1, v7);
}

unint64_t sub_100040F10(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v2 = v1;
  Hasher.init(_seed:)(v9, *(_QWORD *)(v2 + 40));
  v4 = a1 & 1;
  if ((a1 & 1) != 0)
    v5 = 0x6369666963657073;
  else
    v5 = 0x6563655274736F6DLL;
  if ((a1 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xEA0000000000746ELL;
  String.hash(into:)(v9, v5, v6);
  swift_bridgeObjectRelease(v6);
  v7 = Hasher._finalize()();
  return sub_1000419D0(v4, v7);
}

uint64_t sub_100040FA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, *(_QWORD *)(v1 + 40));
  v3 = sub_10004F3C0(a1);
  v5 = v4;
  String.hash(into:)(v8, v3, v4);
  swift_bridgeObjectRelease(v5);
  v6 = Hasher._finalize()();
  return sub_100041B14(a1, v6);
}

unint64_t sub_10004101C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v2 = v1;
  Hasher.init(_seed:)(v9, *(_QWORD *)(v2 + 40));
  v4 = a1 & 1;
  if ((a1 & 1) != 0)
    v5 = 0x7468676972;
  else
    v5 = 1952867692;
  if ((a1 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE400000000000000;
  String.hash(into:)(v9, v5, v6);
  swift_bridgeObjectRelease(v6);
  v7 = Hasher._finalize()();
  return sub_100041FB8(v4, v7);
}

unint64_t sub_1000410A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_1000420E8(a1, a2, v5);
}

uint64_t sub_100041108(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t i;
  uint64_t v51;
  int v52;
  uint64_t v53;

  v3 = v2;
  v6 = type metadata accessor for WidgetReadingHistory.DayEntry(0);
  v51 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v53 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100005F78(&qword_1000A25D8);
  v52 = a2;
  v13 = a2;
  v14 = v12;
  v15 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, v13);
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_43;
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = *(_QWORD *)(v14 + 64);
  v49 = (_QWORD *)(v14 + 64);
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v47 = v2;
  v48 = (unint64_t)(v17 + 63) >> 6;
  v21 = v15 + 64;
  result = swift_retain(v14);
  v23 = 0;
  for (i = v14; ; v14 = i)
  {
    if (v20)
    {
      v25 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v26 = v25 | (v23 << 6);
      goto LABEL_24;
    }
    v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v27 >= v48)
      break;
    v28 = v49;
    v29 = v49[v27];
    ++v23;
    if (!v29)
    {
      v23 = v27 + 1;
      if (v27 + 1 >= v48)
        goto LABEL_36;
      v29 = v49[v23];
      if (!v29)
      {
        v30 = v27 + 2;
        if (v30 >= v48)
        {
LABEL_36:
          swift_release(v14);
          v3 = v47;
          if ((v52 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v29 = v49[v30];
        if (!v29)
        {
          while (1)
          {
            v23 = v30 + 1;
            if (__OFADD__(v30, 1))
              goto LABEL_45;
            if (v23 >= v48)
              goto LABEL_36;
            v29 = v49[v23];
            ++v30;
            if (v29)
              goto LABEL_23;
          }
        }
        v23 = v30;
      }
    }
LABEL_23:
    v20 = (v29 - 1) & v29;
    v26 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_24:
    v31 = *(_QWORD *)(v9 + 72);
    v32 = *(_QWORD *)(v14 + 48) + v31 * v26;
    if ((v52 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v32, v8);
      v33 = *(_QWORD *)(v14 + 56);
      v34 = *(_QWORD *)(v51 + 72);
      sub_1000455D8(v33 + v34 * v26, v53);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v32, v8);
      v35 = *(_QWORD *)(v14 + 56);
      v34 = *(_QWORD *)(v51 + 72);
      sub_100045594(v35 + v34 * v26, v53);
    }
    v36 = *(_QWORD *)(v16 + 40);
    v37 = sub_100003DCC(&qword_1000A25B0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v36, v8, v37);
    v38 = -1 << *(_BYTE *)(v16 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v21 + 8 * (v39 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v21 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v21 + 8 * v40);
      }
      while (v44 == -1);
      v24 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v16 + 48) + v31 * v24, v11, v8);
    result = sub_1000455D8(v53, *(_QWORD *)(v16 + 56) + v34 * v24);
    ++*(_QWORD *)(v16 + 16);
  }
  swift_release(v14);
  v3 = v47;
  v28 = v49;
  if ((v52 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v45 = 1 << *(_BYTE *)(v14 + 32);
  if (v45 >= 64)
    bzero(v28, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v28 = -1 << v45;
  *(_QWORD *)(v14 + 16) = 0;
LABEL_43:
  result = swift_release(v14);
  *v3 = v16;
  return result;
}

uint64_t sub_1000414FC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  int v45;

  v3 = v2;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100005F78(&qword_1000A25A8);
  v45 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = v2;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_36;
      v25 = v43[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v42)
              goto LABEL_36;
            v25 = v43[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_bridgeObjectRetain(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_100003DCC(&qword_1000A25B0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

unint64_t sub_100041890(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_100003DCC(&qword_1000A25E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_1000419D0(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 0x6369666963657073;
    else
      v6 = 0x6563655274736F6DLL;
    if ((a1 & 1) != 0)
      v7 = 0xE800000000000000;
    else
      v7 = 0xEA0000000000746ELL;
    while (1)
    {
      v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0x6369666963657073 : 0x6563655274736F6DLL;
      v9 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0xE800000000000000 : 0xEA0000000000746ELL;
      if (v8 == v6 && v9 == v7)
        break;
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v6, v7, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      if ((v11 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v7);
  }
  return v4;
}

uint64_t sub_100041B14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_100041FB8(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 0x7468676972;
    else
      v6 = 1952867692;
    if ((a1 & 1) != 0)
      v7 = 0xE500000000000000;
    else
      v7 = 0xE400000000000000;
    while (1)
    {
      v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0x7468676972 : 1952867692;
      v9 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0xE500000000000000 : 0xE400000000000000;
      if (v8 == v6 && v9 == v7)
        break;
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v6, v7, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      if ((v11 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v7);
  }
  return v4;
}

unint64_t sub_1000420E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

int64_t sub_1000421C8(int64_t result)
{
  _QWORD *v1;
  int64_t v2;
  unint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;

  v2 = result;
  v3 = v1[3];
  v4 = (_QWORD *)*v1;
  v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(*v1), *v1 = v4, (result & 1) == 0))
  {
    v11 = v4;
    goto LABEL_9;
  }
  v6 = v1[2];
  v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
    goto LABEL_39;
  v8 = v1[1];
  v9 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v10 = swift_unknownObjectRetain(v4);
  result = swift_dynamicCastClass(v10, v9);
  if (!result)
  {
    swift_unknownObjectRelease(v4);
    result = (int64_t)_swiftEmptyArrayStorage;
  }
  v11 = *(_QWORD **)(result + 16);
  if (v8 + 16 * v6 + 16 * v7 == result + 16 * (_QWORD)v11 + 32)
    goto LABEL_31;
  result = swift_release(result);
  while (1)
  {
    if (v7 >= v2)
      goto LABEL_28;
    v11 = (_QWORD *)*v1;
LABEL_9:
    v12 = v1[2];
    v7 = v5 - v12;
    if (__OFSUB__(v5, v12))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    v13 = v1[1];
    v14 = v7 <= v2 ? v2 : v5 - v12;
    if (v14)
      break;
    v4 = _swiftEmptyArrayStorage;
    if (v5 >= v12)
      goto LABEL_17;
LABEL_30:
    __break(1u);
LABEL_31:
    v22 = *(_QWORD *)(result + 24);
    result = swift_release(result);
    v23 = (v22 >> 1) - (_QWORD)v11;
    v24 = __OFADD__(v7, v23);
    v7 += v23;
    if (v24)
      goto LABEL_40;
  }
  v15 = sub_100005F78(&qword_1000A0A58);
  v4 = (_QWORD *)swift_allocObject(v15, 16 * v14 + 32, 7);
  result = j__malloc_size(v4);
  v16 = result - 32;
  if (result < 32)
    v16 = result - 17;
  v4[2] = v7;
  v4[3] = 2 * (v16 >> 4);
  if (v5 < v12)
    goto LABEL_30;
LABEL_17:
  if (v7 < 0)
    goto LABEL_41;
  v17 = (unint64_t)(v4 + 4);
  v18 = v13 + 16 * v12;
  if (v18 < (unint64_t)&v4[2 * v7 + 4] && v17 < v18 + 16 * v7)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
    goto LABEL_42;
  }
  swift_arrayInitWithCopy(v4 + 4);
  if (__OFSUB__(0, v12))
    goto LABEL_35;
  v20 = v4[2];
  v21 = v12 + v20;
  if (__OFADD__(v12, v20))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v21 < v12)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  result = swift_unknownObjectRelease(v11);
  if ((v21 & 0x8000000000000000) == 0)
  {
    v1[1] = v17 - 16 * v12;
    v1[2] = v12;
    v1[3] = (2 * v21) | 1;
LABEL_28:
    *v1 = v4;
    return result;
  }
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_100042440(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  char *v37;
  char *__dst;

  v5 = v4[2];
  v6 = (unint64_t)v4[3] >> 1;
  v7 = (_QWORD *)(v6 - v5);
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
    goto LABEL_29;
  }
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 16);
  v11 = __OFSUB__(v10, a2);
  v12 = v10 - a2;
  if (v11)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v15 = (char *)v7 - a2;
  if (__OFSUB__(v7, a2))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v37 = &v15[-v14];
  if (__OFSUB__(v15, v14))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v16 = v4;
  __dst = (char *)(v9 + 32);
  v17 = v9 + 32 + 16 * a2;
  v18 = v17 + 16 * a3;
  v19 = sub_1000429FC(v7);
  if (v19)
  {
    v20 = v19;
    v33 = v7;
    v34 = (char *)(v17 + 16 * a3);
    v35 = v9;
    v21 = v4[2];
    v22 = (char *)(v4[1] + 16 * v21);
    v23 = v19 + 32;
    swift_arrayDestroy(v19 + 32, (uint64_t)&v22[-v19 - 32] / 16, &type metadata for String);
    if (a2 < 0)
      goto LABEL_43;
    v24 = &v22[16 * a2];
    if (__dst != v22 || __dst >= v24)
      memmove(__dst, v22, 16 * a2);
    swift_arrayDestroy(&v22[16 * a2], v37, &type metadata for String);
    a4(v17, a3);
    if (v14 < 0)
      goto LABEL_43;
    v25 = &v24[16 * (_QWORD)v37];
    if (v34 != v25 || v34 >= &v25[16 * v14])
      memmove(v34, v25, 16 * v14);
    swift_arrayDestroy(&v22[16 * (_QWORD)v33], (v23 + 16 * *(_QWORD *)(v20 + 16) - (uint64_t)&v22[16 * (_QWORD)v33]) / 16, &type metadata for String);
    *(_QWORD *)(v20 + 16) = 0;
    swift_release(v20);
    v9 = v35;
LABEL_23:
    v29 = *v16;
    swift_retain(v9);
    result = swift_unknownObjectRelease(v29);
    if (!__OFSUB__(0, v21))
    {
      v31 = *(_QWORD *)(v9 + 16);
      v11 = __OFADD__(v21, v31);
      v32 = v21 + v31;
      if (!v11)
      {
        if (v32 >= v21)
        {
          if ((v32 & 0x8000000000000000) == 0)
          {
            *v16 = v9;
            v16[1] = (uint64_t)&__dst[-16 * v21];
            v16[2] = v21;
            v16[3] = (2 * v32) | 1;
            return result;
          }
          goto LABEL_36;
        }
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v21 = v4[2];
  v26 = v21 + a2;
  if (__OFADD__(v21, a2))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v26 < v21)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (__OFSUB__(v26, v21))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  swift_arrayInitWithCopy(__dst);
  a4((uint64_t)&__dst[16 * a2], a3);
  v27 = &v37[v26];
  if (__OFADD__(v26, v37))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v28 = (char *)((unint64_t)v4[3] >> 1);
  if ((uint64_t)v28 < (uint64_t)v27)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (!__OFSUB__(v28, v27))
  {
    swift_arrayInitWithCopy(v18);
    goto LABEL_23;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_100042738(_QWORD *result)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  v2 = v1[2];
  v3 = v1[3];
  v4 = v3 >> 1;
  v5 = __OFSUB__(v3 >> 1, v2);
  v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = (char *)result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v7)
    return result;
  v8 = *v1;
  v9 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v10 = swift_unknownObjectRetain(v8);
  result = (_QWORD *)swift_dynamicCastClass(v10, v9);
  if (!result)
  {
    swift_unknownObjectRelease(v8);
    result = &_swiftEmptyArrayStorage;
  }
  v11 = result[2];
  v5 = __OFADD__(v11, v7);
  v12 = &v7[v11];
  if (v5)
    goto LABEL_13;
  result[2] = v12;
  result = (_QWORD *)swift_release(result);
  v13 = &v7[v4];
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (((unint64_t)v13 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v1[3] = v3 & 1 | (2 * (_QWORD)v13);
  return result;
}

_QWORD *sub_1000427EC(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int64_t v33;
  uint64_t v34;

  v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_34:
    if (v8 >= v7)
      goto LABEL_21;
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_37;
  }
  v7 = a2;
  v6 = result;
  if ((a6 & 1) == 0)
    goto LABEL_34;
  v12 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v13 = swift_unknownObjectRetain(a3);
  v14 = (_QWORD *)swift_dynamicCastClass(v13, v12);
  if (!v14)
  {
    swift_unknownObjectRelease(a3);
    v14 = _swiftEmptyArrayStorage;
  }
  v15 = v14[2];
  v16 = a4 + 16 * a5 + 16 * v8;
  if ((_QWORD *)v16 == &v14[2 * v15 + 4])
  {
    v18 = v14[3];
    result = (_QWORD *)swift_release(v14);
    v19 = (v18 >> 1) - v15;
    v17 = v8 + v19;
    if (__OFADD__(v8, v19))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    swift_release(v14);
    v17 = v8;
  }
  v20 = swift_unknownObjectRetain(a3);
  v21 = (_QWORD *)swift_dynamicCastClass(v20, v12);
  if (v17 < v7)
  {
    if (!v21)
    {
      swift_unknownObjectRelease(a3);
      v21 = _swiftEmptyArrayStorage;
    }
    v22 = v21[2];
    if ((_QWORD *)v16 == &v21[2 * v22 + 4])
    {
      v24 = v21[3];
      result = (_QWORD *)swift_release(v21);
      v25 = (v24 >> 1) - v22;
      v26 = __OFADD__(v8, v25);
      v8 += v25;
      if (v26)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else
    {
      result = (_QWORD *)swift_release(v21);
    }
    goto LABEL_18;
  }
  if (!v21)
  {
    swift_unknownObjectRelease(a3);
    v21 = _swiftEmptyArrayStorage;
  }
  v23 = v21[2];
  if ((_QWORD *)v16 == &v21[2 * v23 + 4])
  {
    v27 = v21[3];
    result = (_QWORD *)swift_release(v21);
    v28 = (v27 >> 1) - v23;
    v26 = __OFADD__(v8, v28);
    v8 += v28;
    if (!v26)
      goto LABEL_21;
LABEL_39:
    __break(1u);
    return result;
  }
  swift_release(v21);
LABEL_21:
  if (v8 <= v7)
    v29 = v7;
  else
    v29 = v8;
  if (v29 <= (uint64_t)v6)
    v30 = (uint64_t)v6;
  else
    v30 = v29;
  if (!v30)
    return _swiftEmptyArrayStorage;
  v31 = sub_100005F78(&qword_1000A0A58);
  v32 = (_QWORD *)swift_allocObject(v31, 16 * v30 + 32, 7);
  v33 = j__malloc_size(v32);
  v34 = v33 - 32;
  if (v33 < 32)
    v34 = v33 - 17;
  v32[2] = v6;
  v32[3] = 2 * (v34 >> 4);
  return v32;
}

uint64_t (*sub_1000429EC())()
{
  return WidgetReadingHistory.Day.readingTime.getter;
}

uint64_t sub_1000429FC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t isUniquelyReferenced_nonNull;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull)
    return 0;
  v6 = v1[2];
  v5 = v1[3];
  v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_20;
  }
  v8 = v1[1];
  if ((v5 & 1) == 0)
    goto LABEL_8;
  v9 = *v1;
  v10 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v11 = swift_unknownObjectRetain(v9);
  v12 = (_QWORD *)swift_dynamicCastClass(v11, v10);
  if (!v12)
  {
    swift_unknownObjectRelease(v9);
    v12 = _swiftEmptyArrayStorage;
  }
  v13 = v12[2];
  if ((_QWORD *)(v8 + 16 * v6 + 16 * v7) != &v12[2 * v13 + 4])
  {
    swift_release(v12);
LABEL_8:
    v14 = v7;
    goto LABEL_10;
  }
  v15 = v12[3];
  result = swift_release(v12);
  v17 = (v15 >> 1) - v13;
  v18 = __OFADD__(v7, v17);
  v14 = v7 + v17;
  if (!v18)
  {
LABEL_10:
    if (v14 < (uint64_t)a1)
      return 0;
    v19 = *v1;
    v20 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v21 = swift_unknownObjectRetain(v19);
    a1 = (_QWORD *)swift_dynamicCastClass(v21, v20);
    if (!a1)
    {
      swift_unknownObjectRelease(v19);
      a1 = _swiftEmptyArrayStorage;
    }
    v22 = v8 + 16 * v6 - (_QWORD)a1;
    v23 = v22 - 32;
    v24 = v22 - 17;
    if (v23 >= 0)
      v24 = v23;
    isUniquelyReferenced_nonNull = v7 + (v24 >> 4);
    if (!__OFADD__(v7, v24 >> 4))
    {
      v4 = a1[2];
      if (isUniquelyReferenced_nonNull >= v4)
        return (uint64_t)a1;
LABEL_21:
      sub_100042C58(isUniquelyReferenced_nonNull, v4, 0);
      return (uint64_t)a1;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_100042B68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_100042C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *result;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_17;
  }
  v7 = *v3;
  v8 = v7 + 32 + 16 * a1;
  result = (char *)swift_arrayDestroy(v8, v4, &type metadata for String);
  v10 = __OFSUB__(a3, v4);
  v11 = a3 - v4;
  if (v10)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v11)
    goto LABEL_14;
  v12 = *(_QWORD *)(v7 + 16);
  v10 = __OFSUB__(v12, a2);
  v13 = v12 - a2;
  if (v10)
    goto LABEL_18;
  if (v13 < 0)
  {
LABEL_21:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  result = (char *)(v8 + 16 * a3);
  v14 = (char *)(v7 + 32 + 16 * a2);
  if (result != v14 || result >= &v14[16 * v13])
    result = (char *)memmove(result, v14, 16 * v13);
  v16 = *(_QWORD *)(v7 + 16);
  v10 = __OFADD__(v16, v11);
  v17 = v16 + v11;
  if (v10)
    goto LABEL_19;
  *(_QWORD *)(v7 + 16) = v17;
LABEL_14:
  if (a3 > 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

_QWORD *sub_100042D68(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)();
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24) >> 1;
  v4 = v3 - v2;
  if (__OFSUB__(v3, v2))
    goto LABEL_54;
  v5 = result[4];
  v6 = result[3] >> 1;
  if (v5 == v6)
    return result;
  v48 = result[2];
  v7 = v5 >= v48 && v5 < v6;
  if (!v7)
    goto LABEL_55;
  v8 = v5 + 1;
  v42 = result[1];
  v9 = (uint64_t *)(v42 + 16 * v5);
  v11 = *v9;
  v10 = v9[1];
  result = (_QWORD *)swift_bridgeObjectRetain(v10);
  v43 = v6;
  while (1)
  {
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    v13 = v10;
    v14 = sub_1000427EC((_QWORD *)v4, v4 + 1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
    v49 = v14;
    v15 = sub_1000429EC();
    v17 = v16;
    sub_100042440((uint64_t *)&v49, v4, 0, (void (*)(uint64_t, uint64_t))v15);
    swift_release(v17);
    result = (_QWORD *)swift_release(v14);
    v19 = *(_QWORD *)(v1 + 16);
    v18 = *(_QWORD *)(v1 + 24);
    v20 = (v18 >> 1) - v19;
    if (__OFSUB__(v18 >> 1, v19))
      goto LABEL_49;
    v44 = *(_QWORD *)(v1 + 24);
    v45 = v18 >> 1;
    v21 = *(_QWORD *)v1;
    v46 = *(_QWORD *)v1;
    v47 = *(_QWORD *)(v1 + 8);
    if ((v18 & 1) == 0)
      goto LABEL_19;
    v22 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v23 = swift_unknownObjectRetain(v21);
    v24 = (_QWORD *)swift_dynamicCastClass(v23, v22);
    if (!v24)
    {
      swift_unknownObjectRelease(v46);
      v24 = _swiftEmptyArrayStorage;
    }
    v25 = v24[2];
    if ((_QWORD *)(v47 + 16 * v19 + 16 * v20) != &v24[2 * v25 + 4])
    {
      result = (_QWORD *)swift_release(v24);
LABEL_19:
      v26 = v20;
      goto LABEL_21;
    }
    v27 = v24[3];
    result = (_QWORD *)swift_release(v24);
    v28 = (v27 >> 1) - v25;
    v26 = v20 + v28;
    if (__OFADD__(v20, v28))
      goto LABEL_53;
LABEL_21:
    if (v4 >= v26)
    {
      v10 = v13;
      v30 = v4 - v20;
      if (__OFSUB__(v4, v20))
        goto LABEL_50;
    }
    else
    {
      v29 = (_QWORD *)(v47 + 16 * v19 + 16 * v4);
      *v29 = v11;
      v29[1] = v13;
      if (v8 == v43)
      {
        v11 = 0;
        v10 = 0;
        ++v4;
        v8 = v43;
        v30 = v12 - v20;
        if (__OFSUB__(v12, v20))
          goto LABEL_50;
      }
      else
      {
        if (v8 < v48 || v8 >= v43)
          goto LABEL_47;
        v31 = 0;
        v32 = v47 + 16 * v4 + 16 * v19;
        v33 = v42 + 16 * v8++;
        while (1)
        {
          v11 = *(_QWORD *)(v33 + v31);
          v34 = *(_QWORD *)(v33 + v31 + 8);
          if (v26 == v12)
          {
            v10 = *(_QWORD *)(v33 + v31 + 8);
            goto LABEL_39;
          }
          v35 = v32 + v31;
          *(_QWORD *)(v35 + 16) = v11;
          *(_QWORD *)(v35 + 24) = v34;
          if (v43 == v8)
            break;
          result = (_QWORD *)swift_bridgeObjectRetain(v34);
          if (v8 >= v48)
          {
            v31 += 16;
            ++v12;
            v7 = v8++ < v43;
            if (v7)
              continue;
          }
          goto LABEL_47;
        }
        v11 = 0;
        v10 = 0;
        v26 = v12 + 1;
        v8 = v43;
LABEL_39:
        result = (_QWORD *)swift_bridgeObjectRetain(v34);
        v4 = v26;
        v30 = v26 - v20;
        if (__OFSUB__(v26, v20))
          goto LABEL_50;
      }
    }
    if (v30)
    {
      v36 = type metadata accessor for __ContiguousArrayStorageBase(0);
      v37 = swift_unknownObjectRetain(v46);
      result = (_QWORD *)swift_dynamicCastClass(v37, v36);
      if (!result)
      {
        swift_unknownObjectRelease(v46);
        result = _swiftEmptyArrayStorage;
      }
      v38 = result[2];
      v39 = __OFADD__(v38, v30);
      v40 = v38 + v30;
      if (v39)
        goto LABEL_51;
      result[2] = v40;
      result = (_QWORD *)swift_release(result);
      v41 = v45 + v30;
      if (__OFADD__(v45, v30))
        goto LABEL_52;
      if ((v41 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_47:
        __break(1u);
        break;
      }
      *(_QWORD *)(v1 + 24) = v44 & 1 | (2 * v41);
    }
    if (!v10)
      return result;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

_QWORD *sub_100043080(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  int64_t v22;
  uint64_t v23;
  _QWORD *result;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD v41[5];

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_38;
  }
  v8 = v4[2];
  v7 = v4[3];
  v9 = (v7 >> 1) - v8;
  if (__OFSUB__(v7 >> 1, v8))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((v7 & 1) == 0)
  {
LABEL_8:
    v18 = v9;
    goto LABEL_10;
  }
  v13 = *v4;
  v12 = v4[1];
  v14 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v15 = swift_unknownObjectRetain(v13);
  v16 = (_QWORD *)swift_dynamicCastClass(v15, v14);
  if (!v16)
  {
    swift_unknownObjectRelease(v13);
    v16 = _swiftEmptyArrayStorage;
  }
  v17 = v16[2];
  if ((_QWORD *)(v12 + 16 * v8 + 16 * v9) != &v16[2 * v17 + 4])
  {
    swift_release(v16);
    goto LABEL_8;
  }
  v19 = v16[3];
  swift_release(v16);
  v20 = (v19 >> 1) - v17;
  v21 = __OFADD__(v9, v20);
  v18 = v9 + v20;
  if (v21)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_10:
  v22 = v9 + v6;
  if (__OFADD__(v9, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v18 < v22)
  {
    if (v18 + 0x4000000000000000 < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v23 = 2 * v18;
    if (v23 > v22)
      v22 = v23;
  }
  result = (_QWORD *)sub_1000421C8(v22);
  v26 = v4[2];
  v25 = v4[3];
  v27 = (v25 >> 1) - v26;
  if (__OFSUB__(v25 >> 1, v26))
    goto LABEL_40;
  v28 = v4[1] + 16 * v26 + 16 * v27;
  if ((v25 & 1) == 0)
  {
LABEL_21:
    v34 = v27;
    goto LABEL_23;
  }
  v29 = *v4;
  v30 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v31 = swift_unknownObjectRetain(v29);
  v32 = (_QWORD *)swift_dynamicCastClass(v31, v30);
  if (!v32)
  {
    swift_unknownObjectRelease(v29);
    v32 = _swiftEmptyArrayStorage;
  }
  v33 = v32[2];
  if ((_QWORD *)v28 != &v32[2 * v33 + 4])
  {
    result = (_QWORD *)swift_release(v32);
    goto LABEL_21;
  }
  v35 = v32[3];
  result = (_QWORD *)swift_release(v32);
  v36 = (v35 >> 1) - v33;
  v21 = __OFADD__(v27, v36);
  v34 = v27 + v36;
  if (v21)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_23:
  v37 = v34 - v27;
  if (__OFSUB__(v34, v27))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v5 == a3)
  {
    if (v6 <= 0)
    {
      v6 = 0;
      v5 = a3;
      goto LABEL_34;
    }
    goto LABEL_42;
  }
  if (v37 < v6)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v6 < 0)
  {
LABEL_48:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
LABEL_50:
    __break(1u);
    return result;
  }
  v38 = a2 + 16 * a3;
  if (v38 < v28 + 16 * v6 && v28 < v38 + 16 * v6)
  {
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
    goto LABEL_50;
  }
  result = (_QWORD *)swift_arrayInitWithCopy(v28);
  if (v6)
  {
    if (__OFADD__(v27, v6))
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    result = sub_100042738((_QWORD *)(v27 + v6));
  }
LABEL_34:
  if (v6 == v37)
  {
    v41[0] = a1;
    v41[1] = a2;
    v41[2] = a3;
    v41[3] = a4;
    v41[4] = v5;
    return sub_100042D68(v41);
  }
  return result;
}

_QWORD *sub_100043364()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(unint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;

  v0 = type metadata accessor for Locale(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v64 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (unint64_t)&v64 - v8;
  v10 = type metadata accessor for Calendar(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static Calendar.autoupdatingCurrent.getter(v12);
  v16 = Calendar.firstWeekday.getter(v15);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  if (__OFSUB__(v16, 1))
  {
    __break(1u);
    goto LABEL_14;
  }
  v64 = v16 - 1;
  v18 = sub_100005F78(&qword_1000A0A58);
  v19 = swift_allocObject(v18, 144, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1000806C0;
  String.LocalizationValue.init(stringLiteral:)(83, 0xE100000000000000);
  v20 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v4 + 16);
  v21 = v20(v7, v9, v3);
  static Locale.current.getter(v21);
  v22 = String.init(localized:defaultValue:table:bundle:locale:comment:)("Widget_WeeklyProgress_Sunday", 28, 2, v7, 0, 0, 0, v2, "Week day symbol in large widget - Sunday", 40, 2);
  v24 = v23;
  v25 = *(void (**)(unint64_t, uint64_t))(v4 + 8);
  v25(v9, v3);
  *(_QWORD *)(v19 + 32) = v22;
  *(_QWORD *)(v19 + 40) = v24;
  String.LocalizationValue.init(stringLiteral:)(77, 0xE100000000000000);
  v26 = v20(v7, v9, v3);
  static Locale.current.getter(v26);
  LOWORD(v58) = 2;
  v27 = String.init(localized:defaultValue:table:bundle:locale:comment:)("Widget_WeeklyProgress_Monday", 28, 2, v7, 0, 0, 0, v2, "Week day symbol in large widget - Monday", 40, v58);
  v29 = v28;
  v25(v9, v3);
  *(_QWORD *)(v19 + 48) = v27;
  *(_QWORD *)(v19 + 56) = v29;
  String.LocalizationValue.init(stringLiteral:)(84, 0xE100000000000000);
  v30 = v20(v7, v9, v3);
  static Locale.current.getter(v30);
  LOWORD(v59) = 2;
  v31 = String.init(localized:defaultValue:table:bundle:locale:comment:)("Widget_WeeklyProgress_Tuesday", 29, 2, v7, 0, 0, 0, v2, "Week day symbol in large widget - Tuesday", 41, v59);
  v33 = v32;
  v25(v9, v3);
  *(_QWORD *)(v19 + 64) = v31;
  *(_QWORD *)(v19 + 72) = v33;
  String.LocalizationValue.init(stringLiteral:)(87, 0xE100000000000000);
  v34 = v20(v7, v9, v3);
  static Locale.current.getter(v34);
  LOWORD(v60) = 2;
  v35 = String.init(localized:defaultValue:table:bundle:locale:comment:)("Widget_WeeklyProgress_Wednesday", 31, 2, v7, 0, 0, 0, v2, "Week day symbol in large widget - Wednesday", 43, v60);
  v37 = v36;
  v25(v9, v3);
  *(_QWORD *)(v19 + 80) = v35;
  *(_QWORD *)(v19 + 88) = v37;
  String.LocalizationValue.init(stringLiteral:)(84, 0xE100000000000000);
  v38 = v20(v7, v9, v3);
  static Locale.current.getter(v38);
  LOWORD(v61) = 2;
  v39 = String.init(localized:defaultValue:table:bundle:locale:comment:)("Widget_WeeklyProgress_Thursday", 30, 2, v7, 0, 0, 0, v2, "Week day symbol in large widget - Thursday", 42, v61);
  v41 = v40;
  v25(v9, v3);
  *(_QWORD *)(v19 + 96) = v39;
  *(_QWORD *)(v19 + 104) = v41;
  String.LocalizationValue.init(stringLiteral:)(70, 0xE100000000000000);
  v42 = v20(v7, v9, v3);
  static Locale.current.getter(v42);
  LOWORD(v62) = 2;
  v43 = String.init(localized:defaultValue:table:bundle:locale:comment:)("Widget_WeeklyProgress_Friday", 28, 2, v7, 0, 0, 0, v2, "Week day symbol in large widget - Friday", 40, v62);
  v45 = v44;
  v25(v9, v3);
  *(_QWORD *)(v19 + 112) = v43;
  *(_QWORD *)(v19 + 120) = v45;
  String.LocalizationValue.init(stringLiteral:)(83, 0xE100000000000000);
  v46 = v20(v7, v9, v3);
  static Locale.current.getter(v46);
  LOWORD(v63) = 2;
  v2 = (char *)String.init(localized:defaultValue:table:bundle:locale:comment:)("Widget_WeeklyProgress_Saturday", 30, 2, v7, 0, 0, 0, v2, "Week day symbol in large widget - Saturday", 42, v63);
  v14 = v47;
  v17 = ((uint64_t (*)(unint64_t, uint64_t))v25)(v9, v3);
  v48 = v64;
  *(_QWORD *)(v19 + 128) = v2;
  *(_QWORD *)(v19 + 136) = v14;
  v49 = *(_QWORD *)(v19 + 16);
  if (v49 < v48)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v48 < 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v65 = (char *)v19;
  v66 = (char *)(v19 + 32);
  v50 = (2 * v48) | 1;
  v67 = v48;
  v68 = (2 * v49) | 1;
  v51 = swift_bridgeObjectRetain(v19);
  sub_100043080(v51, v19 + 32, 0, v50);
  swift_bridgeObjectRelease(v19);
  v2 = v65;
  v14 = v66;
  v3 = v67;
  v9 = v68;
  if ((v68 & 1) == 0)
  {
LABEL_5:
    v52 = sub_100040D34((uint64_t)v2, (uint64_t)v14, v3, v9);
    goto LABEL_12;
  }
  v53 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v54 = swift_unknownObjectRetain_n(v2, 2);
  v55 = (_QWORD *)swift_dynamicCastClass(v54, v53);
  if (!v55)
  {
    swift_unknownObjectRelease(v2);
    v55 = _swiftEmptyArrayStorage;
  }
  v56 = v55[2];
  v17 = swift_release(v55);
  if (__OFSUB__(v9 >> 1, v3))
    goto LABEL_16;
  v17 = (uint64_t)v2;
  if (v56 != (v9 >> 1) - v3)
  {
LABEL_17:
    swift_unknownObjectRelease(v17);
    goto LABEL_5;
  }
  v52 = (_QWORD *)swift_dynamicCastClass(v2, v53);
  if (!v52)
  {
    swift_unknownObjectRelease(v2);
    v52 = _swiftEmptyArrayStorage;
  }
LABEL_12:
  swift_unknownObjectRelease(v2);
  return v52;
}

_QWORD *sub_10004398C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t ObjCClassFromMetadata;
  id v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  id v36;
  id v37;
  uint64_t v38;
  void (*v39)(char *, char *, unint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  id v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, unint64_t);
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void (*v73)(char *, unint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  id v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  id v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  char *v108;
  void (*v109)(char *, unint64_t);
  uint64_t v110;
  id v111;
  void (*v112)(char *, char *, uint64_t);
  uint64_t v113;
  void (*v114)(char *, char *, unint64_t);
  char *v115;
  _QWORD *v116;
  char *v117;
  char *v118;
  uint64_t v119;

  v0 = type metadata accessor for Locale(0);
  v110 = *(_QWORD *)(v0 - 8);
  v1 = __chkstk_darwin(v0);
  v108 = (char *)&v103 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v4 = (char *)&v103 - v3;
  v5 = type metadata accessor for String.LocalizationValue(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v103 - v10;
  v12 = type metadata accessor for Calendar(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = static Calendar.autoupdatingCurrent.getter(v14);
  v18 = Calendar.firstWeekday.getter(v17);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  if (__OFSUB__(v18, 1))
  {
    __break(1u);
    goto LABEL_14;
  }
  v105 = v18 - 1;
  v20 = sub_100005F78(&qword_1000A0A58);
  v113 = swift_allocObject(v20, 144, 7);
  *(_OWORD *)(v113 + 16) = xmmword_1000806C0;
  v21 = String.LocalizationValue.init(stringLiteral:)(0x7961646E7553, 0xE600000000000000);
  static Locale.current.getter(v21);
  v104 = v6;
  v112 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v22 = v9;
  v112(v9, v11, v5);
  v23 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v23);
  v115 = (char *)ObjCClassFromMetadata;
  v111 = (id)objc_opt_self(NSBundle);
  v25 = objc_msgSend(v111, "bundleForClass:", ObjCClassFromMetadata);
  v26 = v110;
  v114 = *(void (**)(char *, char *, unint64_t))(v110 + 16);
  v27 = v108;
  v114(v108, v4, v0);
  v28 = String.init(localized:table:bundle:locale:comment:)(v22, 0, 0, v25, v27, "Accessibility string for Sunday", 31, 2);
  v30 = v29;
  v109 = *(void (**)(char *, unint64_t))(v26 + 8);
  v109(v4, v0);
  v110 = *(_QWORD *)(v104 + 8);
  ((void (*)(char *, uint64_t))v110)(v11, v5);
  v31 = v113;
  v32 = v113;
  *(_QWORD *)(v113 + 32) = v28;
  v104 = v32 + 32;
  *(_QWORD *)(v31 + 40) = v30;
  v33 = String.LocalizationValue.init(stringLiteral:)(0x7961646E6F4DLL, 0xE600000000000000);
  static Locale.current.getter(v33);
  v34 = v22;
  v35 = v112;
  v112(v22, v11, v5);
  v36 = v111;
  v37 = objc_msgSend(v111, "bundleForClass:", v115);
  v38 = v5;
  v106 = v34;
  v39 = v114;
  v114(v27, v4, v0);
  v40 = String.init(localized:table:bundle:locale:comment:)(v34, 0, 0, v37, v27, "Accessibility string for Monday", 31, 2);
  v42 = v41;
  v109(v4, v0);
  v43 = v38;
  v103 = v38;
  v44 = v38;
  v45 = (void (*)(char *, uint64_t))v110;
  ((void (*)(char *, uint64_t))v110)(v11, v44);
  v46 = v113;
  *(_QWORD *)(v113 + 48) = v40;
  *(_QWORD *)(v46 + 56) = v42;
  v47 = String.LocalizationValue.init(stringLiteral:)(0x79616473657554, 0xE700000000000000);
  static Locale.current.getter(v47);
  v48 = v106;
  v35(v106, v11, v43);
  v49 = objc_msgSend(v36, "bundleForClass:", v115);
  v50 = v108;
  v39(v108, v4, v0);
  v51 = v48;
  v52 = String.init(localized:table:bundle:locale:comment:)(v48, 0, 0, v49, v50, "Accessibility string for Tuesday", 32, 2);
  v54 = v53;
  v55 = v109;
  v109(v4, v0);
  v56 = v103;
  v45(v11, v103);
  v57 = (_QWORD *)v113;
  *(_QWORD *)(v113 + 64) = v52;
  v57[9] = v54;
  v58 = String.LocalizationValue.init(stringLiteral:)(0x616473656E646557, 0xE900000000000079);
  static Locale.current.getter(v58);
  v112(v51, v11, v56);
  v59 = objc_msgSend(v111, "bundleForClass:", v115);
  v114(v50, v4, v0);
  v60 = String.init(localized:table:bundle:locale:comment:)(v51, 0, 0, v59, v50, "Accessibility string for Wednesday", 34, 2);
  v62 = v61;
  v55(v4, v0);
  ((void (*)(char *, uint64_t))v110)(v11, v56);
  v57[10] = v60;
  v57[11] = v62;
  v63 = String.LocalizationValue.init(stringLiteral:)(0x7961647372756854, 0xE800000000000000);
  static Locale.current.getter(v63);
  v64 = v56;
  v65 = v56;
  v66 = v112;
  v112(v51, v11, v64);
  v67 = v111;
  v68 = objc_msgSend(v111, "bundleForClass:", v115);
  v107 = v0;
  v114(v50, v4, v0);
  v69 = String.init(localized:table:bundle:locale:comment:)(v51, 0, 0, v68, v50, "Accessibility string for Thursday", 33, 2);
  v71 = v70;
  v72 = v0;
  v73 = v109;
  v109(v4, v72);
  v74 = v11;
  ((void (*)(char *, uint64_t))v110)(v11, v65);
  v75 = v113;
  *(_QWORD *)(v113 + 96) = v69;
  *(_QWORD *)(v75 + 104) = v71;
  v76 = String.LocalizationValue.init(stringLiteral:)(0x796164697246, 0xE600000000000000);
  static Locale.current.getter(v76);
  v77 = v106;
  v66(v106, v11, v65);
  v11 = v115;
  v78 = objc_msgSend(v67, "bundleForClass:", v115);
  v79 = v107;
  v80 = v108;
  v114(v108, v4, v107);
  v81 = String.init(localized:table:bundle:locale:comment:)(v77, 0, 0, v78, v80, "Accessibility string for Friday", 31, 2);
  v83 = v82;
  v73(v4, v79);
  v84 = v65;
  v6 = v110;
  ((void (*)(char *, uint64_t))v110)(v74, v65);
  v85 = (_QWORD *)v113;
  *(_QWORD *)(v113 + 112) = v81;
  v85[15] = v83;
  v86 = String.LocalizationValue.init(stringLiteral:)(0x7961647275746153, 0xE800000000000000);
  static Locale.current.getter(v86);
  v112(v77, v74, v84);
  v87 = objc_msgSend(v111, "bundleForClass:", v11);
  v88 = v107;
  v114(v80, v4, v107);
  v16 = (char *)String.init(localized:table:bundle:locale:comment:)(v77, 0, 0, v87, v80, "Accessibility string for Saturday", 33, 2);
  v90 = v89;
  v109(v4, v88);
  v91 = v84;
  v0 = (unint64_t)v85;
  v19 = ((uint64_t (*)(char *, uint64_t))v6)(v74, v91);
  v92 = v105;
  v85[16] = v16;
  v85[17] = v90;
  v93 = v85[2];
  if (v93 < v92)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v92 < 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v94 = v104;
  v116 = v85;
  v117 = (char *)v104;
  v95 = (2 * v92) | 1;
  v118 = (char *)v92;
  v119 = (2 * v93) | 1;
  v96 = swift_bridgeObjectRetain(v85);
  sub_100043080(v96, v94, 0, v95);
  swift_bridgeObjectRelease(v85);
  v6 = (uint64_t)v116;
  v16 = v117;
  v11 = v118;
  v0 = v119;
  if ((v119 & 1) == 0)
  {
LABEL_5:
    v97 = sub_100040D34(v6, (uint64_t)v16, (uint64_t)v11, v0);
    goto LABEL_12;
  }
  v98 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v99 = swift_unknownObjectRetain_n(v6, 2);
  v100 = (_QWORD *)swift_dynamicCastClass(v99, v98);
  if (!v100)
  {
    swift_unknownObjectRelease(v6);
    v100 = _swiftEmptyArrayStorage;
  }
  v101 = v100[2];
  v19 = swift_release(v100);
  if (__OFSUB__(v0 >> 1, v11))
    goto LABEL_16;
  v19 = v6;
  if (v101 != (v0 >> 1) - (_QWORD)v11)
  {
LABEL_17:
    swift_unknownObjectRelease(v19);
    goto LABEL_5;
  }
  v97 = (_QWORD *)swift_dynamicCastClass(v6, v98);
  if (!v97)
  {
    swift_unknownObjectRelease(v6);
    v97 = _swiftEmptyArrayStorage;
  }
LABEL_12:
  swift_unknownObjectRelease(v6);
  return v97;
}

char *sub_1000441FC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *result;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003ECA0();
  result = (char *)sub_100040054();
  v7 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v31 = v5;
    v32 = v3;
    v33 = v2;
    v8 = sub_100043364();
    v9 = sub_10004398C();
    v10 = sub_10004051C((uint64_t)v8, (uint64_t)v9);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v8);
    v29 = (uint64_t)&v29;
    v38 = _swiftEmptyArrayStorage;
    sub_10005C364(0, 0, 0);
    v11 = v38;
    v12 = (char *)v10[2];
    swift_bridgeObjectRetain(v10);
    v34 = a1;
    v35 = v12;
    v30 = v10;
    if (v12)
    {
      v13 = 0;
      v14 = v10 + 7;
      v15 = v7;
      do
      {
        v16 = *(v14 - 3);
        v17 = *(v14 - 2);
        v18 = *v14;
        v36 = *(v14 - 1);
        v37 = v16;
        if ((uint64_t)v13 < (uint64_t)v15)
          v19 = 1;
        else
          v19 = 2 * (v15 != v13);
        v38 = v11;
        v20 = v11[2];
        v21 = v11[3];
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        if (v20 >= v21 >> 1)
        {
          sub_10005C364(v21 > 1, v20 + 1, 1);
          v11 = v38;
        }
        v14 += 4;
        v11[2] = v20 + 1;
        v22 = &v11[6 * v20];
        v22[4] = v37;
        v22[5] = v17;
        v22[6] = v36;
        v22[7] = v18;
        v22[8] = v19;
        *((_BYTE *)v22 + 72) = v15 != v13;
        *((_BYTE *)v22 + 73) = 4;
        ++v13;
      }
      while (v35 != v13);
    }
    swift_bridgeObjectRelease_n(v30, 2);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v33);
    v23 = sub_100005F78(&qword_1000A0CF0);
    v24 = swift_allocObject(v23, 120, 7);
    *(_OWORD *)(v24 + 16) = xmmword_10007F260;
    v25 = (void *)BDSCloudAssetTypeStoreEbook;
    v26 = (void *)BDSLibraryContentAssetTypeUnknown;
    *(_QWORD *)(v24 + 40) = 0;
    *(_QWORD *)(v24 + 48) = 0;
    *(_QWORD *)(v24 + 32) = 0;
    *(_BYTE *)(v24 + 56) = 1;
    *(_QWORD *)(v24 + 64) = 0xD000000000000023;
    *(_QWORD *)(v24 + 72) = 0x800000010007BBB0;
    *(_QWORD *)(v24 + 80) = v25;
    *(_QWORD *)(v24 + 88) = v26;
    *(_QWORD *)(v24 + 96) = 0;
    *(_QWORD *)(v24 + 104) = 0;
    *(_BYTE *)(v24 + 112) = 0;
    v27 = v25;
    result = v26;
    v28 = v34;
    *v34 = 0;
    v28[1] = 0;
    *((_BYTE *)v28 + 16) = 0;
    v28[3] = 0;
    v28[4] = v11;
    v28[5] = 0;
    v28[6] = v24;
    *((_BYTE *)v28 + 56) = 0;
    v28[8] = 0;
    v28[9] = 0;
  }
  return result;
}

uint64_t sub_100044494(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 88 * a1 + 32;
  v6 = a3 + 88 * v4;
  if (v5 >= v6 || v5 + 88 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100044584(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10004469C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[2];
  uint64_t v67;
  char *v68;
  __int128 v69;
  uint64_t *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  char v78[32];
  uint64_t v79;
  uint64_t v80[4];
  uint64_t v81;

  sub_100007984(a1, (uint64_t)v78, &qword_1000A2598);
  v2 = v79;
  v3 = type metadata accessor for WidgetReadingHistory.DayEntry(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v76 = (uint64_t)v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)v66 - v7;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)v66 - v14;
  if ((sub_10005CB78() & 1) == 0)
  {
    v41 = sub_100043364();
    v42 = sub_10004398C();
    v43 = sub_10004051C((uint64_t)v41, (uint64_t)v42);
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v41);
    v44 = sub_100040770((uint64_t)v43);
    swift_bridgeObjectRelease(v43);
    return (uint64_t)v44;
  }
  sub_10003ECA0();
  sub_100007984(a1, (uint64_t)v80, &qword_1000A2598);
  v16 = v81;
  v72 = v10;
  v73 = v9;
  v68 = v15;
  if (v81)
  {
    v17 = *(_QWORD *)(v81 + 16);
    if (v17)
    {
      v67 = a1;
      v66[1] = v80[0];
      v66[0] = sub_10003EE88();
      v18 = &_swiftEmptyDictionarySingleton;
      v77 = &_swiftEmptyDictionarySingleton;
      v19 = *(unsigned __int8 *)(v4 + 80);
      v20 = (v19 + 32) & ~v19;
      v21 = v16 + v20;
      v22 = *(_QWORD *)(v4 + 72);
      v75 = v20;
      v71 = (_QWORD *)(v22 + v20);
      v70 = (uint64_t *)(v19 | 7);
      swift_bridgeObjectRetain(v2);
      v69 = xmmword_10007F260;
      v74 = v22;
      while (1)
      {
        sub_100045594(v21, (uint64_t)v8);
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v8, v9);
        v24 = sub_100040EA4((uint64_t)v13);
        v25 = v18[2];
        v26 = (v23 & 1) == 0;
        v27 = v25 + v26;
        if (__OFADD__(v25, v26))
          break;
        v28 = v23;
        if (v18[3] < v27)
        {
          sub_1000414FC(v27, 1);
          v18 = v77;
          v29 = sub_100040EA4((uint64_t)v13);
          if ((v28 & 1) != (v30 & 1))
            goto LABEL_34;
          v24 = v29;
        }
        if ((v28 & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
          v18 = v77;
          v31 = v77[7];
          sub_1000455D8((uint64_t)v8, v76);
          v32 = *(_QWORD *)(v31 + 8 * v24);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v32);
          *(_QWORD *)(v31 + 8 * v24) = v32;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v32 = sub_100040B28(0, *(_QWORD *)(v32 + 16) + 1, 1, v32, &qword_1000A25A0, type metadata accessor for WidgetReadingHistory.DayEntry);
            *(_QWORD *)(v31 + 8 * v24) = v32;
          }
          v35 = *(_QWORD *)(v32 + 16);
          v34 = *(_QWORD *)(v32 + 24);
          if (v35 >= v34 >> 1)
          {
            v32 = sub_100040B28(v34 > 1, v35 + 1, 1, v32, &qword_1000A25A0, type metadata accessor for WidgetReadingHistory.DayEntry);
            *(_QWORD *)(v31 + 8 * v24) = v32;
          }
          *(_QWORD *)(v32 + 16) = v35 + 1;
          v22 = v74;
          sub_1000455D8(v76, v32 + v75 + v35 * v74);
          v10 = v72;
          v9 = v73;
        }
        else
        {
          v36 = sub_100005F78(&qword_1000A25A0);
          v37 = swift_allocObject(v36, v71, v70);
          *(_OWORD *)(v37 + 16) = v69;
          sub_1000455D8((uint64_t)v8, v37 + v75);
          v18[(v24 >> 6) + 8] |= 1 << v24;
          (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v18[6] + *(_QWORD *)(v10 + 72) * v24, v13, v9);
          *(_QWORD *)(v18[7] + 8 * v24) = v37;
          v38 = v18[2];
          v39 = __OFADD__(v38, 1);
          v40 = v38 + 1;
          if (v39)
            goto LABEL_32;
          v18[2] = v40;
        }
        v21 += v22;
        if (!--v17)
        {
          sub_10004561C(v67);
          v62 = sub_10003F1A4((uint64_t)v18);
          v63 = swift_release(v18);
          __chkstk_darwin(v63);
          v64 = (uint64_t)v68;
          v66[-2] = v62;
          v66[-1] = v64;
          v65 = v66[0];
          v44 = sub_10003FED4((void (*)(_QWORD *__return_ptr, uint64_t))sub_100045644, (uint64_t)&v66[-4], v66[0]);
          swift_bridgeObjectRelease(v65);
          swift_bridgeObjectRelease(v62);
          (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v64, v9);
          return (uint64_t)v44;
        }
      }
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
  }
  v45 = sub_100040054();
  v46 = v45 - 1;
  if (!__OFSUB__(v45, 1))
  {
    v47 = sub_100043364();
    v48 = sub_10004398C();
    v49 = sub_10004051C((uint64_t)v47, (uint64_t)v48);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v47);
    v70 = v66;
    v77 = _swiftEmptyArrayStorage;
    sub_10005C364(0, 0, 0);
    v44 = v77;
    v50 = v49[2];
    swift_bridgeObjectRetain(v49);
    v74 = v50;
    v71 = v49;
    if (v50)
    {
      v51 = 0;
      v52 = v49 + 7;
      do
      {
        v53 = *(v52 - 3);
        v54 = *(v52 - 2);
        v55 = *v52;
        v75 = *(v52 - 1);
        v76 = v53;
        if (v51 < v46)
          v56 = 1;
        else
          v56 = 2 * (v46 != v51);
        v77 = v44;
        v57 = v46;
        v59 = v44[2];
        v58 = v44[3];
        swift_bridgeObjectRetain(v54);
        swift_bridgeObjectRetain(v55);
        if (v59 >= v58 >> 1)
        {
          sub_10005C364(v58 > 1, v59 + 1, 1);
          v44 = v77;
        }
        v52 += 4;
        v44[2] = v59 + 1;
        v60 = &v44[6 * v59];
        v60[4] = v76;
        v60[5] = v54;
        v60[6] = v75;
        v60[7] = v55;
        v60[8] = v56;
        *((_BYTE *)v60 + 72) = v57 != v51;
        *((_BYTE *)v60 + 73) = 4;
        ++v51;
        v46 = v57;
      }
      while (v74 != v51);
    }
    swift_bridgeObjectRelease_n(v71, 2);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v68, v73);
    return (uint64_t)v44;
  }
LABEL_33:
  __break(1u);
LABEL_34:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
  __break(1u);
  return result;
}

uint64_t sub_100044CE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void (*v8)(_QWORD, _QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  double v28;
  int v29;
  double v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  int v39;
  double v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  BOOL v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void (*v70)(char *, uint64_t);
  double v71;
  uint64_t v72;
  char *v73;
  void (*v74)(_QWORD, _QWORD, _QWORD);
  id v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint8_t *v92;
  char v93;
  BOOL v94;
  double v95;
  uint64_t v96;
  BOOL v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  double v103;
  uint64_t v104;
  void *v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  char v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115[17];
  _QWORD v116[5];
  _OWORD v117[2];
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  char v122[8];
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v82 = a4;
  v8 = (void (*)(_QWORD, _QWORD, _QWORD))a2;
  v90 = a1;
  sub_100007984(a2, (uint64_t)v116, &qword_1000A2598);
  v92 = (uint8_t *)v116[0];
  v10 = v116[1];
  v11 = v116[2];
  v12 = type metadata accessor for WidgetFamily(0);
  v89 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v91 = (char *)&v72 - v16;
  v74 = v8;
  sub_100007984((uint64_t)v8, (uint64_t)v122, &qword_1000A2598);
  v87 = a6;
  v83 = a5;
  v81 = v125;
  if (v125)
  {
    v17 = v123;
    if (v123 >= v124)
      v17 = v124;
    if (__OFSUB__(v11, v10))
    {
      __break(1u);
    }
    else
    {
      v18 = ceil((double)(v11 - v10) / 60.0);
      if ((~*(_QWORD *)&v18 & 0x7FF0000000000000) != 0)
      {
        if (v18 > -9.22337204e18)
        {
          if (v18 < 9.22337204e18)
          {
            v19 = (double)v17 / (double)v124;
            v80 = (uint64_t)v18 & ~((uint64_t)v18 >> 63);
            v20 = v92;
            goto LABEL_10;
          }
LABEL_51:
          __break(1u);
LABEL_52:
          swift_once(&qword_1000A0678, sub_10004087C);
          goto LABEL_38;
        }
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
    }
    __break(1u);
    goto LABEL_50;
  }
  v20 = 0;
  v80 = 0;
  v19 = 0.0;
LABEL_10:
  v21 = *(_QWORD *)(a3 + 16);
  v73 = v15;
  v92 = v20;
  if (v21)
  {
    swift_bridgeObjectRetain(a3);
  }
  else
  {
    v22 = sub_100005F78(&qword_1000A0CF0);
    *(double *)&a3 = COERCE_DOUBLE(swift_allocObject(v22, 120, 7));
    *(_OWORD *)(a3 + 16) = xmmword_10007F260;
    v23 = (void *)BDSCloudAssetTypeStoreEbook;
    v24 = (void *)BDSLibraryContentAssetTypeUnknown;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 56) = 1;
    *(_QWORD *)(a3 + 64) = 0xD000000000000023;
    *(_QWORD *)(a3 + 72) = 0x800000010007BBB0;
    *(_QWORD *)(a3 + 80) = v23;
    *(_QWORD *)(a3 + 88) = v24;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 104) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    v25 = v23;
    v26 = v24;
  }
  v27 = *(_QWORD *)(a3 + 40);
  v76 = *(_QWORD *)(a3 + 32);
  v28 = *(double *)(a3 + 48);
  v29 = *(unsigned __int8 *)(a3 + 56);
  v30 = *(double *)(a3 + 64);
  v31 = *(_QWORD *)(a3 + 72);
  v32 = *(void **)(a3 + 80);
  v33 = *(void **)(a3 + 88);
  v34 = *(_QWORD *)(a3 + 104);
  v78 = *(_QWORD *)(a3 + 96);
  v79 = *(unsigned __int8 *)(a3 + 112);
  v85 = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v31);
  v77 = v32;
  v75 = v32;
  v84 = v33;
  v86 = v34;
  v35 = v34;
  a6 = v31;
  swift_bridgeObjectRetain(v35);
  v88 = v30;
  if (v30 == -2.31584178e77 && v31 == 0x800000010007BBB0)
  {
    v36 = 0;
    v37 = v12;
  }
  else
  {
    v38 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v88, v31, 0xD000000000000023, 0x800000010007BBB0, 0);
    v36 = 0;
    if (v28 == 1.0)
      v39 = v29;
    else
      v39 = 1;
    v37 = v12;
    if ((v38 & 1) == 0 && v39)
    {
      sub_100007984((uint64_t)v74, (uint64_t)v117, &qword_1000A2598);
      if (!v118
        || (v119 = v117[0],
            v120 = v117[1],
            v121 = v118,
            v40 = COERCE_DOUBLE(WidgetReadingHistory.State.daysSinceLastReadDate.getter()),
            (v41 & 1) != 0))
      {
        v36 = 0;
      }
      else if (v40 < 0.0 || v40 >= 4.0)
      {
        if (v40 < 4.0 || v40 >= 7.0)
          v36 = v40 < 14.0 && v40 >= 7.0;
        else
          v36 = 2;
      }
      else
      {
        v36 = 3;
      }
    }
  }
  v42 = v89;
  v8 = *(void (**)(_QWORD, _QWORD, _QWORD))(v89 + 16);
  v43 = v91;
  v8(v91, v90, v37);
  v44 = v43;
  v12 = v37;
  v45 = (*(uint64_t (**)(char *, uint64_t))(v42 + 88))(v44, v37);
  if (v45 == enum case for WidgetFamily.systemSmall(_:))
  {
    v46 = a6;
    v47 = v81 == 0;
    swift_bridgeObjectRelease(a3);
    v94 = v47;
    v93 = v29;
    v95 = v19;
    v96 = v80;
    v97 = v47;
    v98 = v92;
    v99 = v76;
    v100 = v85;
    v101 = v28;
    LOBYTE(v102) = v29;
    v103 = v88;
    v104 = v46;
    v105 = v77;
    v106 = v84;
    v107 = v78;
    v108 = v86;
    v109 = v79;
    v110 = v36;
    v48 = v83;
    v111 = v82;
    v112 = v83;
    sub_10000C2AC((uint64_t)&v95);
LABEL_35:
    sub_10000B9DC((uint64_t)&v95, (uint64_t)&v113);
    WidgetReadingHistory.Day.readingTime.getter(&v113);
    swift_bridgeObjectRetain(v48);
    sub_100007984((uint64_t)&v113, (uint64_t)v115, &qword_1000A0C30);
    v56 = v87;
    return sub_100007984((uint64_t)v115, v56, &qword_1000A0C30);
  }
  if (v45 == enum case for WidgetFamily.systemMedium(_:))
  {
    v49 = v81 == 0;

    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(v85);

    swift_bridgeObjectRelease(v86);
    v95 = v19;
    v96 = v80;
    v97 = v49;
    v98 = v92;
    v99 = a3;
    LOBYTE(v100) = v36;
    v48 = v83;
    v101 = v82;
    v102 = v83;
    sub_10000C288((uint64_t)&v95);
    goto LABEL_35;
  }
  if (v45 == enum case for WidgetFamily.systemLarge(_:))
  {
    v50 = v81 == 0;
    v51 = sub_10004469C((uint64_t)v74);
    v53 = v52;

    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(v85);

    swift_bridgeObjectRelease(v86);
    v95 = v19;
    v96 = v80;
    v97 = v50;
    v98 = v92;
    v99 = v51;
    v100 = v53;
    v101 = *(double *)&a3;
    LOBYTE(v102) = v36;
    v48 = v83;
    v103 = v82;
    v104 = v83;
    sub_10000C264((uint64_t)&v95);
    goto LABEL_35;
  }
  if (v45 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    v54 = a6;
    v55 = v81 == 0;
    swift_bridgeObjectRelease(a3);
    v94 = v55;
    v93 = v29;
    v95 = v19;
    v96 = v80;
    v97 = v55;
    v98 = v92;
    v99 = v76;
    v100 = v85;
    v101 = v28;
    LOBYTE(v102) = v29;
    v103 = v88;
    v104 = v54;
    v105 = v77;
    v106 = v84;
    v107 = v78;
    v108 = v86;
    v109 = v79;
    v110 = v36;
    v48 = v83;
    v111 = v82;
    v112 = v83;
    sub_100045574((uint64_t)&v95);
    goto LABEL_35;
  }
  swift_bridgeObjectRelease(a3);
  if (qword_1000A0678 != -1)
    goto LABEL_52;
LABEL_38:
  v58 = type metadata accessor for Logger(0);
  sub_10000BE14(v58, (uint64_t)qword_1000A24E8);
  v59 = v73;
  v60 = v12;
  v61 = ((uint64_t (*)(char *, uint64_t, uint64_t))v8)(v73, v90, v12);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)swift_slowAlloc(12, -1);
    v65 = swift_slowAlloc(32, -1);
    v115[0] = v65;
    *(_DWORD *)v64 = 136315138;
    v92 = v64 + 4;
    v66 = sub_100003DCC((unint64_t *)&qword_1000A0A60, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
    v67 = dispatch thunk of CustomStringConvertible.description.getter(v60, v66);
    v69 = v68;
    v113 = sub_10005BD08(v67, v68, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v92, v64 + 12);
    swift_bridgeObjectRelease(v69);
    v70 = *(void (**)(char *, uint64_t))(v89 + 8);
    v70(v59, v60);
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Widget family '%s' is not supported", v64, 0xCu);
    swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v64, -1, -1);

    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(v85);

    swift_bridgeObjectRelease(v86);
  }
  else
  {

    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(v85);

    swift_bridgeObjectRelease(v86);
    v70 = *(void (**)(char *, uint64_t))(v89 + 8);
    v70(v59, v12);

  }
  v56 = v87;
  v71 = sub_10000C234((uint64_t)&v113);
  ((void (*)(char *, uint64_t, double))v70)(v91, v60, v71);
  sub_100007984((uint64_t)&v113, (uint64_t)v115, &qword_1000A0C30);
  return sub_100007984((uint64_t)v115, v56, &qword_1000A0C30);
}

uint64_t sub_100045574(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 112) & 0x301;
  *(_QWORD *)(result + 16) &= 1uLL;
  *(_QWORD *)(result + 112) = v1;
  return result;
}

uint64_t sub_100045594(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetReadingHistory.DayEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000455D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetReadingHistory.DayEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004561C(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_100045644@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10003F640(a1, *(_QWORD *)(v2 + 16), *(double *)(v2 + 24), a2);
}

uint64_t sub_100045664(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WidgetReadingHistory.DayEntry(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000456A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F78(&qword_1000A25B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000456E8(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000456F0(uint64_t *a1)
{
  uint64_t v1;

  return sub_100040258(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100045708()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100005F78(&qword_1000A2758);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000C090(v16, qword_1000AA2A0);
  sub_10000BE14(v16, (uint64_t)qword_1000AA2A0);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x646F4D2079616C50, 0xE900000000000065);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Type display representation for enum that defines 'Play Audiobook' modes, e.g. most recent vs specific audiobook", 112, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

unint64_t sub_10004591C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  unint64_t result;
  _QWORD v31[2];
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v0 = sub_100005F78(&qword_1000A2750);
  __chkstk_darwin(v0);
  v39 = (char *)v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100005F78(&qword_1000A2758);
  __chkstk_darwin(v2);
  v38 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v36 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  v33 = v12;
  __chkstk_darwin(v12);
  v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005F78(&qword_1000A27D8);
  v17 = sub_100005F78(&qword_1000A27E0);
  v18 = *(_QWORD *)(v17 - 8);
  v35 = *(_QWORD *)(v18 + 72);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = swift_allocObject(v16, v20 + 2 * v35, v19 | 7);
  v37 = v21;
  *(_OWORD *)(v21 + 16) = xmmword_10007F170;
  v22 = v21 + v20;
  v31[1] = v21 + v20 + *(int *)(v17 + 48);
  *(_BYTE *)(v21 + v20) = 0;
  v23 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x800000010007CC30);
  static Locale.current.getter(v23);
  v34 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v36 = *(_QWORD *)(v36 + 104);
  v24 = v5;
  ((void (*)(char *))v36)(v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "'Play Mode' enum case - target the most recent audiobook.", 57, 2);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v25 = v38;
  v32(v38, 1, 1, v12);
  v26 = type metadata accessor for DisplayRepresentation.Image(0);
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v28 = v39;
  v27(v39, 1, 1, v26);
  DisplayRepresentation.init(title:subtitle:image:)(v15, v25, v28);
  *(_BYTE *)(v22 + v35) = 1;
  v29 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x800000010007CC90);
  static Locale.current.getter(v29);
  ((void (*)(char *, _QWORD, uint64_t))v36)(v24, v34, v40);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v24, "'Play Mode' enum case - target a specific audiobook.", 52, 2);
  v32(v25, 1, 1, v33);
  v27(v28, 1, 1, v26);
  DisplayRepresentation.init(title:subtitle:image:)(v15, v25, v28);
  result = sub_10005E438(v37);
  qword_1000AA2B8 = result;
  return result;
}

uint64_t sub_100045CD4(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6369666963657073;
  else
    return 0x6563655274736F6DLL;
}

uint64_t sub_100045D10(char *a1, char *a2)
{
  return sub_10005E208(*a1, *a2);
}

unint64_t sub_100045D20()
{
  unint64_t result;

  result = qword_1000A25F0;
  if (!qword_1000A25F0)
  {
    result = swift_getWitnessTable(&unk_1000806EC, &type metadata for PlayAudiobookIntent.PlayMode);
    atomic_store(result, (unint64_t *)&qword_1000A25F0);
  }
  return result;
}

Swift::Int sub_100045D64()
{
  char *v0;

  return sub_10005E340(*v0);
}

uint64_t sub_100045D6C(uint64_t a1)
{
  char *v1;

  return sub_10003EABC(a1, *v1);
}

Swift::Int sub_100045D74(uint64_t a1)
{
  char *v1;

  return sub_10003EC20(a1, *v1);
}

uint64_t sub_100045D7C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100099C58, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_100045DD8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100045CD4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100045E04()
{
  unint64_t result;

  result = qword_1000A25F8;
  if (!qword_1000A25F8)
  {
    result = swift_getWitnessTable(&unk_1000807CC, &type metadata for PlayAudiobookIntent.PlayMode);
    atomic_store(result, (unint64_t *)&qword_1000A25F8);
  }
  return result;
}

unint64_t sub_100045E4C()
{
  unint64_t result;

  result = qword_1000A2600;
  if (!qword_1000A2600)
  {
    result = swift_getWitnessTable(&unk_100080804, &type metadata for PlayAudiobookIntent.PlayMode);
    atomic_store(result, (unint64_t *)&qword_1000A2600);
  }
  return result;
}

unint64_t sub_100045E94()
{
  unint64_t result;

  result = qword_1000A2608;
  if (!qword_1000A2608)
  {
    result = swift_getWitnessTable(&unk_100080754, &type metadata for PlayAudiobookIntent.PlayMode);
    atomic_store(result, (unint64_t *)&qword_1000A2608);
  }
  return result;
}

void *sub_100045ED8()
{
  return &protocol witness table for String;
}

unint64_t sub_100045EE8()
{
  unint64_t result;

  result = qword_1000A2610;
  if (!qword_1000A2610)
  {
    result = swift_getWitnessTable(&unk_100080834, &type metadata for PlayAudiobookIntent.PlayMode);
    atomic_store(result, (unint64_t *)&qword_1000A2610);
  }
  return result;
}

unint64_t sub_100045F30()
{
  unint64_t result;

  result = qword_1000A2618;
  if (!qword_1000A2618)
  {
    result = swift_getWitnessTable(&unk_10008085C, &type metadata for PlayAudiobookIntent.PlayMode);
    atomic_store(result, (unint64_t *)&qword_1000A2618);
  }
  return result;
}

unint64_t sub_100045F78()
{
  unint64_t result;

  result = qword_1000A2620;
  if (!qword_1000A2620)
  {
    result = swift_getWitnessTable(&unk_100080884, &type metadata for PlayAudiobookIntent.PlayMode);
    atomic_store(result, (unint64_t *)&qword_1000A2620);
  }
  return result;
}

unint64_t sub_100045FC0()
{
  unint64_t result;

  result = qword_1000A2628;
  if (!qword_1000A2628)
  {
    result = swift_getWitnessTable(&unk_1000808DC, &type metadata for PlayAudiobookIntent.PlayMode);
    atomic_store(result, (unint64_t *)&qword_1000A2628);
  }
  return result;
}

uint64_t sub_100046008@<X0>(uint64_t a1@<X8>)
{
  return sub_100047640(&qword_1000A0680, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000AA2A0, (uint64_t)sub_100045708, a1);
}

uint64_t sub_10004602C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10004606C();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>, 1);
}

unint64_t sub_10004606C()
{
  unint64_t result;

  result = qword_1000A2630;
  if (!qword_1000A2630)
  {
    result = swift_getWitnessTable(&unk_10008078C, &type metadata for PlayAudiobookIntent.PlayMode);
    atomic_store(result, (unint64_t *)&qword_1000A2630);
  }
  return result;
}

uint64_t sub_1000460B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004606C();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_1000460EC()
{
  unint64_t result;

  result = qword_1000A2638;
  if (!qword_1000A2638)
  {
    result = swift_getWitnessTable(&unk_10008091C, &type metadata for PlayAudiobookIntent.PlayMode);
    atomic_store(result, (unint64_t *)&qword_1000A2638);
  }
  return result;
}

unint64_t sub_100046134()
{
  unint64_t result;

  result = qword_1000A2640;
  if (!qword_1000A2640)
  {
    result = swift_getWitnessTable(&unk_100080944, &type metadata for PlayAudiobookIntent.PlayMode);
    atomic_store(result, (unint64_t *)&qword_1000A2640);
  }
  return result;
}

unint64_t sub_10004617C()
{
  unint64_t result;

  result = qword_1000A2648;
  if (!qword_1000A2648)
  {
    result = swift_getWitnessTable(&unk_100080714, &type metadata for PlayAudiobookIntent.PlayMode);
    atomic_store(result, (unint64_t *)&qword_1000A2648);
  }
  return result;
}

uint64_t sub_1000461C0()
{
  if (qword_1000A0688 != -1)
    swift_once(&qword_1000A0688, sub_10004591C);
  return swift_bridgeObjectRetain(qword_1000AA2B8);
}

uint64_t sub_100046200(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100045FC0();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_100046238()
{
  return sub_100007F64(&qword_1000A2650, &qword_1000A2658, (uint64_t)&protocol conformance descriptor for [A]);
}

void sub_100046264(_QWORD *a1@<X8>)
{
  *a1 = &off_100099CA8;
}

unint64_t sub_100046278()
{
  unint64_t result;

  result = qword_1000A2660;
  if (!qword_1000A2660)
  {
    result = swift_getWitnessTable(&unk_100080A34, &type metadata for PlayAudiobookIntent);
    atomic_store(result, (unint64_t *)&qword_1000A2660);
  }
  return result;
}

unint64_t sub_1000462C0()
{
  unint64_t result;

  result = qword_1000A2668;
  if (!qword_1000A2668)
  {
    result = swift_getWitnessTable(&unk_100080A5C, &type metadata for PlayAudiobookIntent);
    atomic_store(result, (unint64_t *)&qword_1000A2668);
  }
  return result;
}

uint64_t sub_100046304(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000841F8, 1);
}

uint64_t sub_100046314(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000841D0, 1);
}

uint64_t sub_100046324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10000C090(v10, qword_1000AA2C0);
  sub_10000BE14(v10, (uint64_t)qword_1000AA2C0);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x6475412079616C50, 0xEE006B6F6F626F69);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Title for 'Play Audiobook' AppIntent.", 37, 2);
}

uint64_t sub_1000464A0()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_1000464C0()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_1000464E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  unint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;

  v42 = a1;
  v1 = sub_100005F78(&qword_1000A2788);
  v2 = *(_QWORD *)(v1 - 8);
  v40 = v1;
  v41 = v2;
  v3 = __chkstk_darwin(v1);
  v38 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v39 = (char *)&v32 - v5;
  v6 = sub_100005F78(&qword_1000A2790);
  v36 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v32 - v11;
  __chkstk_darwin(v10);
  v37 = (char *)&v32 - v13;
  v44 = 0;
  v14 = sub_100005F78(&qword_1000A2798);
  v15 = sub_10001C1A0();
  v34 = v15;
  v16 = sub_100045F78();
  v33 = v16;
  v17 = sub_100007F64(&qword_1000A27A0, &qword_1000A2798, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
  v32 = v17;
  ParameterSummaryCaseCondition.init(_:_:)(&v44, sub_100046854, 0, &type metadata for PlayAudiobookIntent, &type metadata for PlayAudiobookIntent.PlayMode, v14, v15, v16, v17);
  v18 = sub_100007F64(&qword_1000A27A8, &qword_1000A2790, (uint64_t)&protocol conformance descriptor for ParameterSummaryCaseCondition<A, B, C>);
  static ParameterSummaryCaseBuilder.buildExpression<A>(_:)(v12, &type metadata for PlayAudiobookIntent, &type metadata for PlayAudiobookIntent.PlayMode, v6, v18);
  v19 = *(void (**)(char *, uint64_t))(v36 + 8);
  v19(v12, v6);
  v43 = 1;
  v35 = v14;
  v21 = v33;
  v20 = v34;
  ParameterSummaryCaseCondition.init(_:_:)(&v43, sub_100046858, 0, &type metadata for PlayAudiobookIntent, &type metadata for PlayAudiobookIntent.PlayMode, v14, v34, v33, v17);
  static ParameterSummaryCaseBuilder.buildExpression<A>(_:)(v9, &type metadata for PlayAudiobookIntent, &type metadata for PlayAudiobookIntent.PlayMode, v6, v18);
  v19(v9, v6);
  v22 = v38;
  v23 = v21;
  v24 = v32;
  ParameterSummaryDefaultCaseCondition.init(_:)(sub_100046854, 0, &type metadata for PlayAudiobookIntent, &type metadata for PlayAudiobookIntent.PlayMode, v14, v20, v21, v32);
  v25 = sub_100007F64(&qword_1000A27B0, &qword_1000A2788, (uint64_t)&protocol conformance descriptor for ParameterSummaryDefaultCaseCondition<A, B, C>);
  v27 = v39;
  v26 = v40;
  static ParameterSummaryCaseBuilder.buildExpression<A>(_:)(v22, &type metadata for PlayAudiobookIntent, &type metadata for PlayAudiobookIntent.PlayMode, v40, v25);
  v28 = *(void (**)(char *, uint64_t))(v41 + 8);
  v28(v22, v26);
  v31 = v24;
  v29 = v37;
  static ParameterSummaryCaseBuilder.buildBlock<A, B, C>(_:_:_:)(v37, v12, v27, &type metadata for PlayAudiobookIntent, &type metadata for PlayAudiobookIntent.PlayMode, v6, v6, v35, v23, v18, v18, v31);
  v28(v27, v26);
  v19(v12, v6);
  return ((uint64_t (*)(char *, uint64_t))v19)(v29, v6);
}

uint64_t sub_100046858@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::String v15;
  uint64_t KeyPath;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  _QWORD v25[2];

  v25[1] = a1;
  v1 = sub_100005F78(&qword_1000A27B8);
  __chkstk_darwin(v1);
  v3 = (char *)v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005F78(&qword_1000A27C0);
  __chkstk_darwin(v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005F78(&qword_1000A2798);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v25 - v12;
  v14 = sub_10001C1A0();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(6, 2, &type metadata for PlayAudiobookIntent, v14);
  v15._countAndFlagsBits = 0x2079616C50;
  v15._object = (void *)0xE500000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v15);
  KeyPath = swift_getKeyPath(&unk_100080E30);
  v17 = sub_100005F78(&qword_1000A27C8);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v4, v17);
  swift_release(KeyPath);
  v18._countAndFlagsBits = 32;
  v18._object = (void *)0xE100000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v18);
  v19 = swift_getKeyPath(&unk_100080E58);
  v20 = sub_100005F78(&qword_1000A27D0);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(v19, v4, v20);
  swift_release(v19);
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v21);
  ParameterSummaryString.init(stringInterpolation:)(v6, &type metadata for PlayAudiobookIntent, v14);
  IntentParameterSummary.init(_:table:)(v3, 0x6E65746E49707041, 0xEA00000000007374, &type metadata for PlayAudiobookIntent, v14);
  v22 = sub_100007F64(&qword_1000A27A0, &qword_1000A2798, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
  static ParameterSummaryBuilder.buildExpression<A>(_:)(v11, &type metadata for PlayAudiobookIntent, v7, v22);
  v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v23(v11, v7);
  static ParameterSummaryBuilder.buildBlock<A>(_:)(v13, &type metadata for PlayAudiobookIntent, v7, v22);
  return ((uint64_t (*)(char *, uint64_t))v23)(v13, v7);
}

uint64_t sub_100046ADC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::String v15;
  uint64_t KeyPath;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  _QWORD v22[2];

  v22[1] = a1;
  v1 = sub_100005F78(&qword_1000A27B8);
  __chkstk_darwin(v1);
  v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005F78(&qword_1000A27C0);
  __chkstk_darwin(v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005F78(&qword_1000A2798);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v22 - v12;
  v14 = sub_10001C1A0();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(5, 1, &type metadata for PlayAudiobookIntent, v14);
  v15._countAndFlagsBits = 0x2079616C50;
  v15._object = (void *)0xE500000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v15);
  KeyPath = swift_getKeyPath(&unk_100080E30);
  v17 = sub_100005F78(&qword_1000A27C8);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v4, v17);
  swift_release(KeyPath);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v18);
  ParameterSummaryString.init(stringInterpolation:)(v6, &type metadata for PlayAudiobookIntent, v14);
  IntentParameterSummary.init(_:table:)(v3, 0x6E65746E49707041, 0xEA00000000007374, &type metadata for PlayAudiobookIntent, v14);
  v19 = sub_100007F64(&qword_1000A27A0, &qword_1000A2798, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
  static ParameterSummaryBuilder.buildExpression<A>(_:)(v11, &type metadata for PlayAudiobookIntent, v7, v19);
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, v7);
  static ParameterSummaryBuilder.buildBlock<A>(_:)(v13, &type metadata for PlayAudiobookIntent, v7, v19);
  return ((uint64_t (*)(char *, uint64_t))v20)(v13, v7);
}

uint64_t sub_100046D1C@<X0>(uint64_t a1@<X8>)
{
  return sub_100047640(&qword_1000A0690, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1000AA2C0, (uint64_t)sub_100046324, a1);
}

uint64_t sub_100046D48(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100080E30);
  v4 = sub_100005F78(&qword_1000A2778);
  v5 = sub_100007F64(&qword_1000A2780, &qword_1000A2778, (uint64_t)&protocol conformance descriptor for ParameterSummaryTupleCaseCondition<A, B, C>);
  return ParameterSummarySwitchCondition.init(_:_:)(KeyPath, sub_1000464E0, 0, v4, a2, v5);
}

uint64_t sub_100046DD8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100046DF0, 0, 0);
}

uint64_t sub_100046DF0()
{
  uint64_t v0;

  static IntentResult.result<>()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100046E24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_100048F28();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

unint64_t sub_100046E50()
{
  unint64_t result;

  result = qword_1000A2678;
  if (!qword_1000A2678)
  {
    result = swift_getWitnessTable(&unk_100080A78, &type metadata for PlayAudiobookIntent);
    atomic_store(result, (unint64_t *)&qword_1000A2678);
  }
  return result;
}

uint64_t sub_100046E94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001C1A0();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_100046EC4()
{
  unint64_t result;

  result = qword_1000A2680;
  if (!qword_1000A2680)
  {
    result = swift_getWitnessTable(&unk_100080AF8, &type metadata for AudiobookAppEntity);
    atomic_store(result, (unint64_t *)&qword_1000A2680);
  }
  return result;
}

unint64_t sub_100046F0C()
{
  unint64_t result;

  result = qword_1000A2688;
  if (!qword_1000A2688)
  {
    result = swift_getWitnessTable(&unk_100080B30, &type metadata for AudiobookAppEntity);
    atomic_store(result, (unint64_t *)&qword_1000A2688);
  }
  return result;
}

unint64_t sub_100046F54()
{
  unint64_t result;

  result = qword_1000A2690;
  if (!qword_1000A2690)
  {
    result = swift_getWitnessTable(&unk_100080B60, &type metadata for AudiobookAppEntity);
    atomic_store(result, (unint64_t *)&qword_1000A2690);
  }
  return result;
}

unint64_t sub_100046F9C()
{
  unint64_t result;

  result = qword_1000A2698;
  if (!qword_1000A2698)
  {
    result = swift_getWitnessTable(&unk_100080CC8, &type metadata for AudiobookEntityStringQuery);
    atomic_store(result, (unint64_t *)&qword_1000A2698);
  }
  return result;
}

void *sub_100046FE0()
{
  return &protocol witness table for String;
}

uint64_t sub_100046FEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _OWORD v3[2];
  uint64_t v4;

  sub_100005F78(&qword_1000A1308);
  v0 = type metadata accessor for AppDependencyManager(0);
  memset(v3, 0, sizeof(v3));
  v4 = 0;
  v1 = static AppDependencyManager.shared.getter(v0);
  result = AppDependency.__allocating_init(key:manager:)(v3, v1);
  qword_1000AA2D8 = result;
  return result;
}

uint64_t sub_100047050()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100005F78(&qword_1000A2758);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000C090(v16, qword_1000AA2E0);
  sub_10000BE14(v16, (uint64_t)qword_1000AA2E0);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x6F6F626F69647541, 0xE90000000000006BLL);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Type display representation for AppEntity that represents a audiobook", 69, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

_QWORD *sub_100047264@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *result;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  v28[1] = a1;
  v3 = sub_100005F78(&qword_1000A2750);
  __chkstk_darwin(v3);
  v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005F78(&qword_1000A2758);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v28 - v10;
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)v28 - v18;
  EntityProperty.wrappedValue.getter(&v29, v17);
  v20 = v30;
  if (v30)
  {
    v21 = v29;
  }
  else
  {
    v21 = *v2;
    v20 = v2[1];
    swift_bridgeObjectRetain(v20);
  }
  v22 = LocalizedStringResource.init(stringLiteral:)(v21, v20);
  EntityProperty.wrappedValue.getter(&v29, v22);
  v23 = v30;
  v24 = swift_bridgeObjectRelease(v30);
  if (!v23)
  {
    v26 = 1;
    goto LABEL_8;
  }
  result = EntityProperty.wrappedValue.getter(&v29, v24);
  if (v30)
  {
    LocalizedStringResource.init(stringLiteral:)(v29, v30);
    v26 = 0;
LABEL_8:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v26, 1, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v19, v12);
    sub_10004818C((uint64_t)v11, (uint64_t)v9);
    v27 = type metadata accessor for DisplayRepresentation.Image(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v5, 1, 1, v27);
    DisplayRepresentation.init(title:subtitle:image:)(v16, v9, v5);
    sub_1000481D4((uint64_t)v11);
    return (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v19, v12);
  }
  __break(1u);
  return result;
}

double sub_100047494@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  double result;

  if (qword_1000A0698 != -1)
    swift_once(&qword_1000A0698, sub_100046FEC);
  v2 = qword_1000AA2D8;
  *a1 = qword_1000AA2D8;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

unint64_t sub_1000474E8()
{
  unint64_t result;

  result = qword_1000A26A0;
  if (!qword_1000A26A0)
  {
    result = swift_getWitnessTable(&unk_100080B98, &type metadata for AudiobookAppEntity);
    atomic_store(result, (unint64_t *)&qword_1000A26A0);
  }
  return result;
}

unint64_t sub_100047530()
{
  unint64_t result;

  result = qword_1000A26A8;
  if (!qword_1000A26A8)
  {
    result = swift_getWitnessTable(&unk_100080BC0, &type metadata for AudiobookAppEntity);
    atomic_store(result, (unint64_t *)&qword_1000A26A8);
  }
  return result;
}

unint64_t sub_100047578()
{
  unint64_t result;

  result = qword_1000A26B0;
  if (!qword_1000A26B0)
  {
    result = swift_getWitnessTable(&unk_100080BE8, &type metadata for AudiobookAppEntity);
    atomic_store(result, (unint64_t *)&qword_1000A26B0);
  }
  return result;
}

unint64_t sub_1000475C0()
{
  unint64_t result;

  result = qword_1000A26B8;
  if (!qword_1000A26B8)
  {
    result = swift_getWitnessTable(&unk_100080C40, &type metadata for AudiobookAppEntity);
    atomic_store(result, (unint64_t *)&qword_1000A26B8);
  }
  return result;
}

void *sub_100047604()
{
  return &protocol witness table for String;
}

uint64_t sub_100047610@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10004761C@<X0>(uint64_t a1@<X8>)
{
  return sub_100047640(&qword_1000A06A0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000AA2E0, (uint64_t)sub_100047050, a1);
}

uint64_t sub_100047640@<X0>(_QWORD *a1@<X2>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = a2(0);
  v9 = sub_10000BE14(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v9, v8);
}

uint64_t sub_1000476B0()
{
  return sub_100007F64(&qword_1000A26C0, &qword_1000A26C8, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_1000476DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100047848();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100047718()
{
  unint64_t result;

  result = qword_1000A26D0;
  if (!qword_1000A26D0)
  {
    result = swift_getWitnessTable(&unk_100080C70, &type metadata for AudiobookAppEntity);
    atomic_store(result, (unint64_t *)&qword_1000A26D0);
  }
  return result;
}

uint64_t sub_100047760(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000475C0();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_100047798(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_100049784, 0, 0);
}

unint64_t sub_1000477B8()
{
  unint64_t result;

  result = qword_1000A26E0;
  if (!qword_1000A26E0)
  {
    result = swift_getWitnessTable(&unk_100080D20, &type metadata for AudiobookEntityStringQuery);
    atomic_store(result, (unint64_t *)&qword_1000A26E0);
  }
  return result;
}

unint64_t sub_100047800()
{
  unint64_t result;

  result = qword_1000A26E8;
  if (!qword_1000A26E8)
  {
    result = swift_getWitnessTable(&unk_100080D80, &type metadata for AudiobookEntityStringQuery);
    atomic_store(result, (unint64_t *)&qword_1000A26E8);
  }
  return result;
}

unint64_t sub_100047848()
{
  unint64_t result;

  result = qword_1000A26F0[0];
  if (!qword_1000A26F0[0])
  {
    result = swift_getWitnessTable(&unk_100080AA0, &type metadata for AudiobookAppEntity);
    atomic_store(result, qword_1000A26F0);
  }
  return result;
}

uint64_t sub_10004788C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _OWORD v5[2];
  uint64_t v6;

  sub_100005F78(&qword_1000A1308);
  v2 = type metadata accessor for AppDependencyManager(0);
  memset(v5, 0, sizeof(v5));
  v6 = 0;
  v3 = static AppDependencyManager.shared.getter(v2);
  result = AppDependency.__allocating_init(key:manager:)(v5, v3);
  *a1 = result;
  return result;
}

uint64_t sub_1000478F8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch(sub_100047914, 0, 0);
}

uint64_t sub_100047914()
{
  uint64_t v0;

  AppDependency.wrappedValue.getter();
  return (*(uint64_t (**)(void *))(v0 + 8))(&_swiftEmptyArrayStorage);
}

uint64_t sub_100047950(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_10004796C, 0, 0);
}

uint64_t sub_10004796C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 16);
  AppDependency.wrappedValue.getter();
  *v1 = &_swiftEmptyArrayStorage;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1000479B0()
{
  unint64_t result;

  result = qword_1000A2708;
  if (!qword_1000A2708)
  {
    result = swift_getWitnessTable(&unk_100080DA8, &type metadata for AudiobookEntityStringQuery);
    atomic_store(result, (unint64_t *)&qword_1000A2708);
  }
  return result;
}

unint64_t sub_1000479F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2710;
  if (!qword_1000A2710)
  {
    v1 = sub_100005FC0(qword_1000A2718);
    sub_100047578();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000A2710);
  }
  return result;
}

uint64_t sub_100047A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100046F9C();
  *v5 = v2;
  v5[1] = sub_100008C64;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_100047AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to DynamicOptionsProvider.defaultResult()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100008C64;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

ValueMetadata *type metadata accessor for AudiobookEntityStringQuery()
{
  return &type metadata for AudiobookEntityStringQuery;
}

uint64_t destroy for AudiobookAppEntity(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  swift_release(a1[4]);
  swift_release(a1[5]);
  swift_release(a1[6]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for AudiobookAppEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  v9 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v8;
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for AudiobookAppEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v14;
  swift_retain(v14);
  swift_release(v15);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v16 = *(_QWORD *)(a2 + 64);
  v17 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

__n128 initializeWithTake for AudiobookAppEntity(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for AudiobookAppEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  swift_release(*(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v5);
  swift_release(*(_QWORD *)(a1 + 40));
  v6 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release(v6);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudiobookAppEntity(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudiobookAppEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AudiobookAppEntity()
{
  return &type metadata for AudiobookAppEntity;
}

uint64_t destroy for PlayAudiobookIntent(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  return swift_release(a1[2]);
}

uint64_t *_s20BooksWidgetExtension19PlayAudiobookIntentVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for PlayAudiobookIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

__n128 initializeWithTake for EmptyStateView.SubLabelInfo(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for PlayAudiobookIntent(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayAudiobookIntent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayAudiobookIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayAudiobookIntent()
{
  return &type metadata for PlayAudiobookIntent;
}

uint64_t storeEnumTagSinglePayload for PlayAudiobookIntent.PlayMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000480B4 + 4 * byte_1000806E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000480E8 + 4 * byte_1000806E0[v4]))();
}

uint64_t sub_1000480E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000480F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000480F8);
  return result;
}

uint64_t sub_100048104(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004810CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100048110(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100048118(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlayAudiobookIntent.PlayMode()
{
  return &type metadata for PlayAudiobookIntent.PlayMode;
}

uint64_t sub_100048134()
{
  return sub_100007F64(&qword_1000A2730, &qword_1000A2738, (uint64_t)&protocol conformance descriptor for ParameterSummarySwitchCondition<A, B, C>);
}

uint64_t sub_100048160()
{
  return sub_100007F64((unint64_t *)&qword_1000A2740, &qword_1000A2748, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_10004818C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F78(&qword_1000A2758);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000481D4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F78(&qword_1000A2758);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100048214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, unsigned __int8 a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v60 = a6;
  v61 = a8;
  v65 = a7;
  v58 = a2;
  v59 = a5;
  v56 = a3;
  v57 = a4;
  v62 = a9;
  v63 = a1;
  v64 = a10;
  v10 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Locale(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for LocalizedStringResource(0);
  v21 = __chkstk_darwin(v20);
  v55 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v54 = (char *)&v53 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v53 - v26;
  v28 = __chkstk_darwin(v25);
  v30 = (char *)&v53 - v29;
  __chkstk_darwin(v28);
  v32 = (char *)&v53 - v31;
  sub_100005F78(&qword_1000A27E8);
  v33 = String.LocalizationValue.init(stringLiteral:)(0x656C746954, 0xE500000000000000);
  static Locale.current.getter(v33);
  v34 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
  v35(v13, enum case for LocalizedStringResource.BundleDescription.main(_:), v10);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "Shortcuts Find Books 'title' filter label", 41, 2);
  v53 = EntityProperty<>.init(title:)(v32);
  swift_retain(v53);
  v36 = String.LocalizationValue.init(stringLiteral:)(0x5420736569726553, 0xEC000000656C7469);
  static Locale.current.getter(v36);
  v37 = v10;
  v35(v13, v34, v10);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "Shortcuts Find Books 'series title' filter label", 48, 2);
  v38 = EntityProperty<>.init(title:)(v30);
  swift_retain(v38);
  v39 = String.LocalizationValue.init(stringLiteral:)(0x726F68747541, 0xE600000000000000);
  static Locale.current.getter(v39);
  v35(v13, v34, v10);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "Shortcuts Find Books 'author' filter label", 42, 2);
  v40 = EntityProperty<>.init(title:)(v27);
  swift_retain(v40);
  v41 = String.LocalizationValue.init(stringLiteral:)(0x65726E6547, 0xE500000000000000);
  static Locale.current.getter(v41);
  v35(v13, v34, v10);
  v42 = v54;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "Shortcuts Find Books 'genre' filter label", 41, 2);
  v43 = EntityProperty<>.init(title:)(v42);
  sub_100005F78(&qword_1000A27F0);
  swift_retain(v43);
  v44 = String.LocalizationValue.init(stringLiteral:)(0x6573616863727550, 0xED00006574614420);
  static Locale.current.getter(v44);
  v35(v13, v34, v37);
  v45 = v55;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "Shortcuts Find Books 'purchase date' filter label", 49, 2);
  v46 = EntityProperty<>.init(title:)(v45);
  v66 = v56;
  v67 = v57;
  swift_retain_n(v46, 2);
  v47 = v58;
  swift_bridgeObjectRetain_n(v58, 2);
  v48 = v53;
  swift_retain(v53);
  swift_retain(v38);
  swift_retain(v40);
  swift_retain(v43);
  EntityProperty.wrappedValue.setter(&v66);
  swift_bridgeObjectRelease(0);
  swift_release(v46);
  swift_release(v43);
  swift_release(v40);
  swift_release(v38);
  swift_release(v48);
  swift_bridgeObjectRelease(v47);
  v66 = v59;
  v67 = v60;
  swift_bridgeObjectRetain(v47);
  swift_retain(v48);
  swift_retain(v38);
  swift_retain(v40);
  swift_retain(v43);
  swift_retain(v46);
  EntityProperty.wrappedValue.setter(&v66);
  swift_bridgeObjectRelease(0);
  swift_release(v46);
  swift_release(v43);
  swift_release(v40);
  swift_release(v38);
  swift_release(v48);
  swift_bridgeObjectRelease(v47);
  v49 = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v47);
  swift_retain(v48);
  swift_retain(v38);
  swift_retain(v40);
  swift_retain(v43);
  swift_bridgeObjectRelease(v49);
  swift_release(v46);
  swift_bridgeObjectRelease_n(v47, 2);
  swift_release_n(v48, 2);
  swift_release_n(v38, 2);
  swift_release_n(v40, 2);
  result = swift_release_n(v43, 2);
  v51 = v62;
  *v62 = v63;
  v51[1] = v47;
  v51[2] = v48;
  v51[3] = v38;
  v51[4] = v40;
  v51[5] = v43;
  v52 = v65;
  v51[6] = v46;
  v51[7] = v52;
  v51[8] = v49;
  *((_BYTE *)v51 + 72) = v64;
  return result;
}

uint64_t sub_1000487E0(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void (*v47)(char *, uint64_t, uint64_t, uint64_t);
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v57;
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  void (*v60)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int v63;
  char *v64;
  uint64_t v65;
  char *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[25];

  v68 = a2;
  v67 = a1;
  v73 = type metadata accessor for InputConnectionBehavior(0);
  v65 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v72 = (char *)&v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005F78(&qword_1000A2760);
  v4 = __chkstk_darwin(v3);
  v71 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v70 = (char *)&v57 - v6;
  v7 = sub_100005F78(&qword_1000A2758);
  __chkstk_darwin(v7);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Locale(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v69 - 8);
  v21 = __chkstk_darwin(v69);
  v66 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v64 = (char *)&v57 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v57 - v25;
  v61 = sub_100005F78(&qword_1000A2768);
  v27 = String.LocalizationValue.init(stringLiteral:)(1701869908, 0xE400000000000000);
  static Locale.current.getter(v27);
  v28 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
  v59 = v10;
  v29(v13, enum case for LocalizedStringResource.BundleDescription.main(_:), v10);
  v58 = v29;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "'Play Audiobook' parameter that controls mode - most recent vs specific audiobook.", 82, 2);
  v30 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000040, 0x800000010007C9F0);
  static Locale.current.getter(v30);
  v29(v13, v28, v10);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "Description of the mode parameter on the Play Audiobook AppIntent", 65, 2);
  v60 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56);
  v57 = v9;
  v60(v9, 0, 1, v69);
  LOBYTE(v74) = 0;
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v62 = v32;
  v33 = v70;
  v32(v70, 1, 1, v31);
  v34 = v71;
  v32(v71, 1, 1, v31);
  v63 = enum case for InputConnectionBehavior.default(_:);
  v65 = *(_QWORD *)(v65 + 104);
  v35 = v72;
  ((void (*)(char *))v65)(v72);
  v36 = sub_10004606C();
  v37 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v26, v9, &v74, v33, v34, v35, &off_100099C30, v36);
  v67 &= 1u;
  v61 = sub_100005F78(&qword_1000A2770);
  swift_retain(v37);
  v38 = String.LocalizationValue.init(stringLiteral:)(0x6F6F626F69647541, 0xE90000000000006BLL);
  static Locale.current.getter(v38);
  v39 = v59;
  v40 = v58;
  v58(v13, v28, v59);
  v41 = v64;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "'Play Audiobook' parameter that specifies the audiobook to play.", 64, 2);
  v42 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000037, 0x800000010007CAE0);
  static Locale.current.getter(v42);
  v40(v13, v28, v39);
  v43 = v57;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "Description of the target parameter of the Play Audiobook AppIntent", 67, 2);
  v60(v43, 0, 1, v69);
  v76 = 0u;
  memset(v77, 0, sizeof(v77));
  v74 = 0u;
  v75 = 0u;
  v44 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000024, 0x800000010007CB70);
  static Locale.current.getter(v44);
  v40(v13, v28, v39);
  v45 = v66;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "'Play Audiobook' prompt when running in 'specific' mode with no audiobook selected.", 83, 2);
  v46 = v70;
  IntentDialog.init(_:)(v45);
  v47 = v62;
  v62(v46, 0, 1, v31);
  v48 = v71;
  v47(v71, 1, 1, v31);
  v49 = v72;
  ((void (*)(char *, _QWORD, uint64_t))v65)(v72, v63, v73);
  v50 = sub_100047848();
  v51 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v41, v43, &v74, v46, v48, v49, v50);
  sub_100005F78(&qword_1000A1308);
  type metadata accessor for AppDependencyManager(0);
  v74 = 0u;
  v75 = 0u;
  *(_QWORD *)&v76 = 0;
  v52 = swift_retain(v51);
  v53 = static AppDependencyManager.shared.getter(v52);
  v54 = AppDependency.__allocating_init(key:manager:)(&v74, v53);
  LOBYTE(v74) = v67;
  swift_retain(v37);
  swift_retain(v51);
  swift_retain(v54);
  IntentParameter.wrappedValue.setter(&v74);
  swift_release(v51);
  swift_release(v37);
  v55 = v68;
  sub_1000495F4(v68, (uint64_t)&v74);
  swift_retain(v37);
  swift_retain(v51);
  swift_retain(v54);
  sub_1000496B8(v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10004963C);
  IntentParameter.wrappedValue.setter(&v74);
  sub_1000496B8(v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100049708);
  swift_release_n(v54, 2);
  swift_release_n(v51, 2);
  swift_release_n(v37, 2);
  return v37;
}

uint64_t sub_100048F28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_BYTE *, uint64_t, uint64_t);
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  void (*v32)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v41;
  uint64_t v42;
  void (*v43)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  void (*v50)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v51;
  _BYTE *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v57[12];
  unsigned int v58;
  void (*v59)(_BYTE *, uint64_t, uint64_t);
  uint64_t v60;
  void (*v61)(_BYTE *);
  void (*v62)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  void (*v65)(_BYTE *, uint64_t, uint64_t, uint64_t);
  unsigned int v66;
  _BYTE *v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[25];

  v73 = type metadata accessor for InputConnectionBehavior(0);
  v68 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v72 = &v57[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v1 = sub_100005F78(&qword_1000A2760);
  v2 = __chkstk_darwin(v1);
  v71 = &v57[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v70 = &v57[-v4];
  v5 = sub_100005F78(&qword_1000A2758);
  __chkstk_darwin(v5);
  v7 = &v57[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v57[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for Locale(0);
  __chkstk_darwin(v12);
  v14 = &v57[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v15);
  v17 = &v57[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = type metadata accessor for LocalizedStringResource(0);
  v19 = *(_QWORD *)(v18 - 8);
  v63 = v18;
  v20 = __chkstk_darwin(v18);
  v69 = &v57[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = __chkstk_darwin(v20);
  v67 = &v57[-v23];
  __chkstk_darwin(v22);
  v25 = &v57[-v24];
  v64 = sub_100005F78(&qword_1000A2768);
  v26 = String.LocalizationValue.init(stringLiteral:)(1701869908, 0xE400000000000000);
  static Locale.current.getter(v26);
  v27 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v28 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 104);
  v58 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v60 = v8;
  v28(v11, enum case for LocalizedStringResource.BundleDescription.main(_:), v8);
  v59 = v28;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v17, 0, 0, v14, v11, "'Play Audiobook' parameter that controls mode - most recent vs specific audiobook.", 82, 2);
  v29 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000040, 0x800000010007C9F0);
  static Locale.current.getter(v29);
  v28(v11, v27, v8);
  v30 = v7;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v17, 0, 0, v14, v11, "Description of the mode parameter on the Play Audiobook AppIntent", 65, 2);
  v62 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v19 + 56);
  v62(v7, 0, 1, v18);
  LOBYTE(v74) = 0;
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v65 = v32;
  v33 = v70;
  v32(v70, 1, 1, v31);
  v34 = v71;
  v32(v71, 1, 1, v31);
  v66 = enum case for InputConnectionBehavior.default(_:);
  v61 = *(void (**)(_BYTE *))(v68 + 104);
  v35 = v72;
  v61(v72);
  v36 = sub_10004606C();
  v68 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v25, v30, &v74, v33, v34, v35, &off_100099CD0, v36);
  v64 = sub_100005F78(&qword_1000A2770);
  v37 = String.LocalizationValue.init(stringLiteral:)(0x6F6F626F69647541, 0xE90000000000006BLL);
  static Locale.current.getter(v37);
  v38 = v58;
  v39 = v60;
  v40 = v59;
  v59(v11, v58, v60);
  v41 = v67;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v17, 0, 0, v14, v11, "'Play Audiobook' parameter that specifies the audiobook to play.", 64, 2);
  v42 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000037, 0x800000010007CAE0);
  static Locale.current.getter(v42);
  v40(v11, v38, v39);
  v43 = v40;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v17, 0, 0, v14, v11, "Description of the target parameter of the Play Audiobook AppIntent", 67, 2);
  v44 = v30;
  v62(v30, 0, 1, v63);
  v76 = 0u;
  memset(v77, 0, sizeof(v77));
  v74 = 0u;
  v75 = 0u;
  v45 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000024, 0x800000010007CB70);
  static Locale.current.getter(v45);
  v43(v11, v38, v39);
  v46 = v69;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v17, 0, 0, v14, v11, "'Play Audiobook' prompt when running in 'specific' mode with no audiobook selected.", 83, 2);
  v47 = v70;
  IntentDialog.init(_:)(v46);
  v48 = v47;
  v49 = v47;
  v50 = v65;
  v65(v48, 0, 1, v31);
  v51 = v71;
  v50(v71, 1, 1, v31);
  v52 = v72;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v61)(v72, v66, v73);
  v53 = sub_100047848();
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v41, v44, &v74, v49, v51, v52, v53);
  sub_100005F78(&qword_1000A1308);
  v54 = type metadata accessor for AppDependencyManager(0);
  v74 = 0u;
  v75 = 0u;
  *(_QWORD *)&v76 = 0;
  v55 = static AppDependencyManager.shared.getter(v54);
  AppDependency.__allocating_init(key:manager:)(&v74, v55);
  return v68;
}

uint64_t sub_1000495A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000495CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000495F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F78(&qword_1000A27F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004963C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a2);
    swift_retain(a3);
    swift_retain(a4);
    swift_retain(a5);
    swift_retain(a6);
    return swift_retain(a7);
  }
  return result;
}

uint64_t sub_1000496B8(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 72);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v4);
  return a1;
}

uint64_t sub_100049708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_release(a3);
    swift_release(a4);
    swift_release(a5);
    swift_release(a6);
    swift_release(a7);
    return swift_bridgeObjectRelease(a9);
  }
  return result;
}

uint64_t *sub_100049788(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for BlendMode(0);
    v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
    v13 = swift_retain(v4);
    v12(v9, v10, v11, v13);
    v14 = a3[7];
    *(uint64_t *)((char *)v7 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v15 = (uint64_t *)((char *)v7 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = a3[9];
    *(_DWORD *)((char *)v7 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
    v19 = (char *)v7 + v18;
    v20 = (char *)a2 + v18;
    swift_bridgeObjectRetain(v17);
    ((void (*)(char *, char *, uint64_t))v12)(v19, v20, v11);
    v21 = a3[10];
    v22 = (char *)v7 + v21;
    v23 = (char *)a2 + v21;
    v24 = type metadata accessor for ColorScheme(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = sub_100005F78(&qword_1000A22B0);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v27 = a3[11];
    v28 = (char *)v7 + v27;
    v29 = (char *)a2 + v27;
    v30 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
    v31 = a3[12];
    v32 = (char *)v7 + v31;
    v33 = (char *)a2 + v31;
    v34 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
    *(uint64_t *)((char *)v7 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
  }
  return v7;
}

uint64_t sub_10004995C(char *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t);
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  swift_release(*(_QWORD *)a1);
  v4 = &a1[a2[5]];
  v5 = type metadata accessor for BlendMode(0);
  v6 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)&a1[a2[7] + 8]);
  v6(&a1[a2[9]], v5);
  v7 = &a1[a2[10]];
  v8 = type metadata accessor for ColorScheme(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  v10 = &a1[a2[11]];
  v11 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = &a1[a2[12]];
  v13 = type metadata accessor for Font.Design(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
}

uint64_t *sub_100049A60(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for BlendMode(0);
  v11 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  v12 = swift_retain(v6);
  v11(v8, v9, v10, v12);
  v13 = a3[7];
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = a3[9];
  *(_DWORD *)((char *)a1 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  swift_bridgeObjectRetain(v16);
  ((void (*)(char *, char *, uint64_t))v11)(v18, v19, v10);
  v20 = a3[10];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = type metadata accessor for ColorScheme(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = sub_100005F78(&qword_1000A22B0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  v26 = a3[11];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
  v30 = a3[12];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
  *(uint64_t *)((char *)a1 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
  return a1;
}

uint64_t *sub_100049C0C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for BlendMode(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24);
  v12(v9, v10, v11);
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  v13 = a3[7];
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  *v14 = *v15;
  v16 = v15[1];
  v17 = v14[1];
  v14[1] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_DWORD *)((char *)a1 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
  v12((char *)a1 + a3[9], (char *)a2 + a3[9], v11);
  v18 = a3[10];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for ColorScheme(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v12) = v23(v19, 1, v21);
  v24 = v23(v20, 1, v21);
  if (!(_DWORD)v12)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v19, v20, v21);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    v25 = sub_100005F78(&qword_1000A22B0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_7:
  v26 = a3[11];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
  v30 = a3[12];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 24))(v31, v32, v33);
  *(uint64_t *)((char *)a1 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
  return a1;
}

char *sub_100049E20(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for BlendMode(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  v12 = a3[9];
  *(_DWORD *)&a1[a3[8]] = *(_DWORD *)&a2[a3[8]];
  v10(&a1[v12], &a2[v12], v9);
  v13 = a3[10];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for ColorScheme(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_100005F78(&qword_1000A22B0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v19 = a3[11];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[12];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  return a1;
}

uint64_t *sub_100049FB0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for BlendMode(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  v12 = a3[7];
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  v17 = v13[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  v18 = a3[9];
  *(_DWORD *)((char *)a1 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
  v11((char *)a1 + v18, (char *)a2 + v18, v10);
  v19 = a3[10];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for ColorScheme(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  LODWORD(v11) = v24(v20, 1, v22);
  v25 = v24(v21, 1, v22);
  if (!(_DWORD)v11)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v20, v21, v22);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    v26 = sub_100005F78(&qword_1000A22B0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_7:
  v27 = a3[11];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  v31 = a3[12];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  *(uint64_t *)((char *)a1 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
  return a1;
}

uint64_t sub_10004A1A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004A1B0);
}

uint64_t sub_10004A1B0(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for BlendMode(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = sub_100005F78(&qword_1000A22B0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[10];
      }
      else
      {
        v13 = type metadata accessor for Font.TextStyle(0);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[11];
        }
        else
        {
          v10 = type metadata accessor for Font.Design(0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a3[12];
        }
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_10004A29C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004A2A8);
}

char *sub_10004A2A8(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for BlendMode(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = sub_100005F78(&qword_1000A22B0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[10];
      }
      else
      {
        v13 = type metadata accessor for Font.TextStyle(0);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[11];
        }
        else
        {
          v10 = type metadata accessor for Font.Design(0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[12];
        }
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for FilledCircleWithLabel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000A2858;
  if (!qword_1000A2858)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FilledCircleWithLabel);
  return result;
}

void sub_10004A3CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  v10 = (char *)&value witness table for Builtin.NativeObject + 64;
  v2 = type metadata accessor for BlendMode(319);
  if (v3 <= 0x3F)
  {
    v11 = *(_QWORD *)(v2 - 8) + 64;
    v12 = (char *)&value witness table for Builtin.Int64 + 64;
    v13 = &unk_100080E98;
    v14 = (char *)&value witness table for Builtin.Int32 + 64;
    v15 = v11;
    sub_10004A4C4(319);
    if (v5 <= 0x3F)
    {
      v16 = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for Font.TextStyle(319);
      if (v7 <= 0x3F)
      {
        v17 = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for Font.Design(319);
        if (v9 <= 0x3F)
        {
          v18 = *(_QWORD *)(v8 - 8) + 64;
          v19 = (char *)&value witness table for Builtin.Int64 + 64;
          swift_initStructMetadata(a1, 256, 10, &v10, a1 + 16);
        }
      }
    }
  }
}

void sub_10004A4C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000A2868)
  {
    v2 = type metadata accessor for ColorScheme(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000A2868);
  }
}

uint64_t sub_10004A518(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100084248, 1);
}

uint64_t sub_10004A528@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int *v29;
  char *v30;
  uint64_t v31;
  int *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char v85;
  uint64_t v86;
  int *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t KeyPath;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  int *v134;
  char *v135;
  void (*v136)(char *, char *);
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;

  v148 = a2;
  v147 = sub_100005F78(&qword_1000A28D0);
  __chkstk_darwin(v147);
  v133 = (char *)&v130 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_100005F78(&qword_1000A28D8);
  __chkstk_darwin(v145);
  v146 = (uint64_t)&v130 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005F78(&qword_1000A2028);
  __chkstk_darwin(v5);
  v135 = (char *)&v130 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_100005F78(&qword_1000A28E0);
  v7 = __chkstk_darwin(v150);
  v132 = (char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v141 = (uint64_t)&v130 - v9;
  v10 = sub_100005F78(&qword_1000A22B0);
  __chkstk_darwin(v10);
  v12 = (char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for ColorScheme(0);
  v13 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v138 = (char *)&v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005F78(&qword_1000A28E8);
  v16 = __chkstk_darwin(v15);
  v144 = (uint64_t)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v143 = (char *)&v130 - v18;
  v19 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v130 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100005F78(&qword_1000A28F0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v130 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v130 - v26;
  v28 = *a1;
  v29 = (int *)type metadata accessor for FilledCircleWithLabel(0);
  v30 = (char *)a1 + v29[5];
  v31 = type metadata accessor for BlendMode(0);
  v136 = *(void (**)(char *, char *))(*(_QWORD *)(v31 - 8) + 16);
  v137 = v31;
  v136(v21, v30);
  sub_10004AFC0((uint64_t)v21, (uint64_t)&v25[*(int *)(v22 + 36)]);
  *(_QWORD *)v25 = v28;
  *((_WORD *)v25 + 4) = 256;
  swift_retain(v28);
  v139 = v21;
  sub_10004B004((uint64_t)v21);
  v142 = v25;
  v140 = v27;
  sub_100007984((uint64_t)v25, (uint64_t)v27, &qword_1000A28F0);
  v32 = v29;
  v33 = a1;
  sub_1000079C8((uint64_t)a1 + v29[10], (uint64_t)v12, &qword_1000A22B0);
  v34 = v149;
  v35 = (*(uint64_t (**)(char *, uint64_t))(v13 + 48))(v12, 1);
  v134 = v29;
  if (v35 == 1)
  {
    sub_100007A0C((uint64_t)v12, &qword_1000A22B0);
    v36 = (_QWORD *)((char *)a1 + v29[7]);
    v37 = v36[1];
    v151 = *v36;
    v152 = v37;
    v38 = sub_1000075E8();
    swift_bridgeObjectRetain(v37);
    v39 = Text.init<A>(_:)(&v151, &type metadata for String, v38);
    v149 = v40;
    v42 = v41;
    v44 = v43 & 1;
    v45 = (char *)v33 + v32[11];
    v46 = (char *)v33 + v32[12];
    v47 = type metadata accessor for Font.Design(0);
    v48 = *(_QWORD *)(v47 - 8);
    v49 = (uint64_t)v135;
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v135, v46, v47);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v48 + 56))(v49, 0, 1, v47);
    v50 = static Font.system(_:design:weight:)(v45, v49, 0, 1);
    sub_100007A0C(v49, &qword_1000A2028);
    v51 = Font.weight(_:)(v50, *(double *)((char *)v33 + v32[13]));
    swift_release(v50);
    v52 = v39;
    v53 = v39;
    v54 = v149;
    v55 = v42;
    v56 = Text.font(_:)(v51, v53, v149, v44, v42);
    v58 = v57;
    LOBYTE(v42) = v59;
    v61 = v60;
    swift_release(v51);
    LOBYTE(v51) = v42 & 1;
    sub_1000115B8(v52, v54, v44);
    swift_bridgeObjectRelease(v55);
    v62 = v134;
    LODWORD(v151) = *(_DWORD *)((char *)v33 + v134[8]);
    v63 = Text.foregroundStyle<A>(_:)(&v151, v56, v58, v42 & 1, v61, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v65 = v64;
    LOBYTE(v42) = v66;
    v68 = v67;
    sub_1000115B8(v56, v58, v51);
    swift_bridgeObjectRelease(v61);
    v69 = (char *)v33 + v62[9];
    v70 = (uint64_t)v139;
    ((void (*)(char *, char *, uint64_t))v136)(v139, v69, v137);
    v71 = v150;
    v72 = (uint64_t)v132;
    sub_10004AFC0(v70, (uint64_t)&v132[*(int *)(v150 + 36)]);
    *(_QWORD *)v72 = v63;
    *(_QWORD *)(v72 + 8) = v65;
    *(_BYTE *)(v72 + 16) = v42 & 1;
    *(_QWORD *)(v72 + 24) = v68;
    sub_10004B004(v70);
    v73 = v141;
    sub_100007984(v72, v141, &qword_1000A28E0);
    v74 = v146;
    sub_1000079C8(v73, v146, &qword_1000A28E0);
    swift_storeEnumTagMultiPayload(v74, v145, 1);
    v75 = sub_10004B040();
    v76 = sub_10004B0C4();
    v77 = (uint64_t)v143;
    _ConditionalContent<>.init(storage:)(v74, v147, v71, v75, v76);
    sub_100007A0C(v73, &qword_1000A28E0);
  }
  else
  {
    v131 = v13;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v138, v12, v34);
    v78 = (_QWORD *)((char *)a1 + v29[7]);
    v79 = v78[1];
    v151 = *v78;
    v152 = v79;
    v80 = sub_1000075E8();
    swift_bridgeObjectRetain(v79);
    v81 = Text.init<A>(_:)(&v151, &type metadata for String, v80);
    v83 = v82;
    v132 = v84;
    v86 = v85 & 1;
    v87 = v29;
    v88 = (char *)v33 + v29[11];
    v89 = (char *)v33 + v29[12];
    v90 = type metadata accessor for Font.Design(0);
    v91 = *(_QWORD *)(v90 - 8);
    v92 = (uint64_t)v135;
    (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v135, v89, v90);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v91 + 56))(v92, 0, 1, v90);
    v93 = static Font.system(_:design:weight:)(v88, v92, 0, 1);
    sub_100007A0C(v92, &qword_1000A2028);
    v94 = Font.weight(_:)(v93, *(double *)((char *)v33 + v87[13]));
    swift_release(v93);
    v95 = v81;
    v96 = v81;
    v97 = v132;
    v98 = Text.font(_:)(v94, v95, v83, v86, v132);
    v100 = v99;
    LOBYTE(v92) = v101;
    v103 = v102;
    swift_release(v94);
    LOBYTE(v94) = v92 & 1;
    sub_1000115B8(v96, v83, v86);
    swift_bridgeObjectRelease(v97);
    v104 = v134;
    LODWORD(v151) = *(_DWORD *)((char *)v33 + v134[8]);
    v105 = Text.foregroundStyle<A>(_:)(&v151, v98, v100, v92 & 1, v103, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v107 = v106;
    LOBYTE(v83) = v108;
    v110 = v109;
    sub_1000115B8(v98, v100, v94);
    swift_bridgeObjectRelease(v103);
    v111 = (uint64_t)v139;
    ((void (*)(char *, char *, uint64_t))v136)(v139, (char *)v33 + v104[9], v137);
    v112 = v141;
    sub_10004AFC0(v111, v141 + *(int *)(v150 + 36));
    *(_QWORD *)v112 = v105;
    *(_QWORD *)(v112 + 8) = v107;
    *(_BYTE *)(v112 + 16) = v83 & 1;
    *(_QWORD *)(v112 + 24) = v110;
    sub_10004B004(v111);
    KeyPath = swift_getKeyPath(&unk_100080F00);
    v114 = v147;
    v115 = (uint64_t)v133;
    v116 = (uint64_t *)&v133[*(int *)(v147 + 36)];
    v117 = sub_100005F78(&qword_1000A1078);
    v118 = v131;
    v119 = v138;
    v120 = v149;
    (*(void (**)(char *, char *, uint64_t))(v131 + 16))((char *)v116 + *(int *)(v117 + 28), v138, v149);
    *v116 = KeyPath;
    sub_100007984(v112, v115, &qword_1000A28E0);
    v121 = v146;
    sub_1000079C8(v115, v146, &qword_1000A28D0);
    swift_storeEnumTagMultiPayload(v121, v145, 0);
    v122 = sub_10004B040();
    v123 = sub_10004B0C4();
    v77 = (uint64_t)v143;
    _ConditionalContent<>.init(storage:)(v121, v114, v150, v122, v123);
    sub_100007A0C(v115, &qword_1000A28D0);
    (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v120);
  }
  v124 = (uint64_t)v140;
  v125 = (uint64_t)v142;
  sub_1000079C8((uint64_t)v140, (uint64_t)v142, &qword_1000A28F0);
  v126 = v144;
  sub_1000079C8(v77, v144, &qword_1000A28E8);
  v127 = v148;
  sub_1000079C8(v125, v148, &qword_1000A28F0);
  v128 = sub_100005F78(&qword_1000A2908);
  sub_1000079C8(v126, v127 + *(int *)(v128 + 48), &qword_1000A28E8);
  sub_100007A0C(v77, &qword_1000A28E8);
  sub_100007A0C(v124, &qword_1000A28F0);
  sub_100007A0C(v126, &qword_1000A28E8);
  return sub_100007A0C(v125, &qword_1000A28F0);
}

uint64_t sub_10004AEB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  _OWORD v19[3];

  v4 = v2;
  v6 = sub_100005F78(&qword_1000A28B8);
  v7 = __chkstk_darwin(v6);
  v9 = (_QWORD *)((char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v9 = static Alignment.center.getter(v7);
  v9[1] = v10;
  v11 = sub_100005F78(&qword_1000A28C0);
  v12 = sub_10004A528(v4, (uint64_t)v9 + *(int *)(v11 + 44));
  v13 = *(_QWORD *)((char *)v4 + *(int *)(a1 + 24));
  v14 = static Alignment.center.getter(v12);
  _FrameLayout.init(width:height:alignment:)(v19, v13, 0, v13, 0, v14, v15);
  sub_1000079C8((uint64_t)v9, a2, &qword_1000A28B8);
  v16 = (_OWORD *)(a2 + *(int *)(sub_100005F78(&qword_1000A28C8) + 36));
  v17 = v19[1];
  *v16 = v19[0];
  v16[1] = v17;
  v16[2] = v19[2];
  return sub_100007A0C((uint64_t)v9, &qword_1000A28B8);
}

uint64_t sub_10004AFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _BlendModeEffect(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004B004(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for _BlendModeEffect(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10004B040()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A28F8;
  if (!qword_1000A28F8)
  {
    v1 = sub_100005FC0(&qword_1000A28D0);
    sub_10004B0C4();
    sub_100007F64(&qword_1000A20C0, &qword_1000A1078, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A28F8);
  }
  return result;
}

unint64_t sub_10004B0C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2900;
  if (!qword_1000A2900)
  {
    v1 = sub_100005FC0(&qword_1000A28E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2900);
  }
  return result;
}

unint64_t sub_10004B134()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2910;
  if (!qword_1000A2910)
  {
    v1 = sub_100005FC0(&qword_1000A28C8);
    sub_100007F64(&qword_1000A2918, &qword_1000A28B8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2910);
  }
  return result;
}

void sub_10004B1B8()
{
  qword_1000AA2F8 = (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t sub_10004B1CC(uint64_t a1)
{
  return sub_10004B248(a1, 14, 0x676E697474655320, (void *)0xE900000000000073, 15);
}

uint64_t sub_10004B1F0(uint64_t a1)
{
  return sub_10004B560(a1, (uint64_t)&unk_100080FF0, (uint64_t (*)(void))sub_10004C93C, (uint64_t (*)(uint64_t))sub_10004C700, (uint64_t)sub_10004B214);
}

uint64_t sub_10004B214()
{
  return sub_10004C3E0();
}

uint64_t sub_10004B224(uint64_t a1)
{
  return sub_10004B248(a1, 28, 0xD000000000000017, (void *)0x800000010007CF30, 29);
}

uint64_t sub_10004B248(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  Swift::String v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  void *v35;
  unsigned int v36;
  void (*v37)(char *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = a5;
  v35 = a4;
  v39 = a3;
  v7 = sub_100005F78(&qword_1000A2998);
  v40 = *(_QWORD *)(v7 - 8);
  v41 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005F78(&qword_1000A29A0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v33 - v18;
  v20 = sub_10004C700();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(a2, 1);
  v21._countAndFlagsBits = 0x206E65704FLL;
  v21._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v21);
  v36 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v37 = *(void (**)(char *))(v11 + 104);
  v37(v13);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v13, v14);
  v34 = *(void (**)(char *, uint64_t))(v11 + 8);
  v34(v13, v10);
  v22 = v39;
  v23._countAndFlagsBits = v39;
  v23._object = a4;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v23);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v19, &type metadata for OpenBooksSettingsDeepLinks, v20);
  v38 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v9, &type metadata for OpenBooksSettingsDeepLinks, v20);
  v24 = v41;
  v25 = *(void (**)(char *, uint64_t))(v40 + 8);
  v25(v9, v41);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(v42, 1);
  v26._countAndFlagsBits = 0x206F74206F47;
  v26._object = (void *)0xE600000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  ((void (*)(char *, _QWORD, uint64_t))v37)(v13, v36, v10);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v13, v14);
  v34(v13, v10);
  v27._countAndFlagsBits = v22;
  v27._object = v35;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v17, &type metadata for OpenBooksSettingsDeepLinks, v20);
  v28 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v9, &type metadata for OpenBooksSettingsDeepLinks, v20);
  v25(v9, v24);
  v29 = sub_100005F78(&qword_1000A29A8);
  v30 = swift_allocObject(v29, 48, 7);
  *(_OWORD *)(v30 + 16) = xmmword_10007F170;
  *(_QWORD *)(v30 + 32) = v38;
  *(_QWORD *)(v30 + 40) = v28;
  v31 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v30);
  return v31;
}

uint64_t sub_10004B53C(uint64_t a1)
{
  return sub_10004B560(a1, (uint64_t)&unk_100080FF0, (uint64_t (*)(void))sub_10004C93C, (uint64_t (*)(uint64_t))sub_10004C700, (uint64_t)sub_10004B684);
}

uint64_t sub_10004B560(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v9 = type metadata accessor for _AssistantIntent.Value(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(a2);
  v14 = a3();
  v15 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v14);
  v16 = swift_release(KeyPath);
  v17 = a4(v16);
  _AssistantIntent.Value.init<A>(for:builder:)(v15, a5, 0, v17);
  v18 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v19 = sub_100005F78(&qword_1000A2948);
  v20 = swift_allocObject(v19, 40, 7);
  *(_OWORD *)(v20 + 16) = xmmword_10007F260;
  *(_QWORD *)(v20 + 32) = v18;
  v21 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v20);
  return v21;
}

uint64_t sub_10004B684()
{
  return sub_10004C3E0();
}

uint64_t sub_10004B6A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t KeyPath;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  void (*v30)(char *, uint64_t);
  Swift::String v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void (*v49)(char *, uint64_t);
  unsigned int v50;
  void (*v51)(char *);
  uint64_t v52;

  v52 = a1;
  v1 = sub_100005F78(&qword_1000A2978);
  v44 = *(_QWORD *)(v1 - 8);
  v45 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005F78(&qword_1000A2980);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v43 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v43 - v15;
  v17 = sub_10004C744();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(33, 2);
  v18._countAndFlagsBits = 2125385;
  v18._object = (void *)0xE300000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  v50 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v51 = *(void (**)(char *))(v5 + 104);
  v47 = v4;
  v51(v7);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v49 = *(void (**)(char *, uint64_t))(v5 + 8);
  v49(v7, v4);
  v19._object = (void *)0x800000010007CF10;
  v19._countAndFlagsBits = 0xD00000000000001ELL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  KeyPath = swift_getKeyPath(&unk_100080FC8);
  v48 = sub_10004C88C();
  v21 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v48);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v21, v8);
  swift_release(v21);
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v22);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v16, &type metadata for MenuOnLeftEntity.UpdateIntent_value, v17);
  v46 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for MenuOnLeftEntity.UpdateIntent_value, v17);
  v23 = v45;
  v43 = *(void (**)(char *, uint64_t))(v44 + 8);
  v43(v3, v45);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(22, 2);
  v24._countAndFlagsBits = 544503120;
  v24._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v24);
  v25 = v47;
  ((void (*)(char *, _QWORD, uint64_t))v51)(v7, v50, v47);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v49(v7, v25);
  v26._countAndFlagsBits = 0x6E6F20756E656D20;
  v26._object = (void *)0xED00002065687420;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  v27 = swift_getKeyPath(&unk_100080FC8);
  v28 = _AssistantIntent.IntentProjection.subscript.getter(v27, v48);
  swift_release(v27);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v28, v8);
  swift_release(v28);
  v29._countAndFlagsBits = 0x6564697320;
  v29._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v29);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v14, &type metadata for MenuOnLeftEntity.UpdateIntent_value, v17);
  v44 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for MenuOnLeftEntity.UpdateIntent_value, v17);
  v30 = v43;
  v43(v3, v23);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(22, 2);
  v31._countAndFlagsBits = 544499027;
  v31._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v31);
  v32 = v47;
  ((void (*)(char *, _QWORD, uint64_t))v51)(v7, v50, v47);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v49(v7, v32);
  v33._countAndFlagsBits = 0x6E6F20756E654D20;
  v33._object = (void *)0xED00002065687420;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v33);
  v34 = swift_getKeyPath(&unk_100080FC8);
  v35 = _AssistantIntent.IntentProjection.subscript.getter(v34, v48);
  swift_release(v34);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v35, v8);
  swift_release(v35);
  v36._countAndFlagsBits = 0x6564697320;
  v36._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v36);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v11, &type metadata for MenuOnLeftEntity.UpdateIntent_value, v17);
  v37 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for MenuOnLeftEntity.UpdateIntent_value, v17);
  v30(v3, v23);
  v38 = sub_100005F78(&qword_1000A2988);
  v39 = swift_allocObject(v38, 56, 7);
  *(_OWORD *)(v39 + 16) = xmmword_10007F270;
  v40 = v44;
  *(_QWORD *)(v39 + 32) = v46;
  *(_QWORD *)(v39 + 40) = v40;
  *(_QWORD *)(v39 + 48) = v37;
  v41 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v39);
  return v41;
}

uint64_t sub_10004BBBC(uint64_t a1)
{
  return sub_10004B560(a1, (uint64_t)&unk_100080FC8, (uint64_t (*)(void))sub_10004C88C, (uint64_t (*)(uint64_t))sub_10004C744, (uint64_t)sub_10004BBE0);
}

uint64_t sub_10004BBE0()
{
  return sub_10004C130(1952867660, 0xE400000000000000, 0x7468676952, 0xE500000000000000);
}

uint64_t sub_10004BC00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t KeyPath;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  void (*v30)(char *, uint64_t);
  Swift::String v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void (*v49)(char *, uint64_t);
  unsigned int v50;
  void (*v51)(char *);
  uint64_t v52;

  v52 = a1;
  v1 = sub_100005F78(&qword_1000A2958);
  v44 = *(_QWORD *)(v1 - 8);
  v45 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005F78(&qword_1000A2960);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v43 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v43 - v15;
  v17 = sub_10004C788();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(22, 2);
  v18._countAndFlagsBits = 2125385;
  v18._object = (void *)0xE300000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  v50 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v51 = *(void (**)(char *))(v5 + 104);
  v47 = v4;
  v51(v7);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v49 = *(void (**)(char *, uint64_t))(v5 + 8);
  v49(v7, v4);
  v19._object = (void *)0x800000010007CEA0;
  v19._countAndFlagsBits = 0xD000000000000013;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v19);
  KeyPath = swift_getKeyPath(&unk_100080FA0);
  v48 = sub_10004C7D4();
  v21 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v48);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v21, v8);
  swift_release(v21);
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v22);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v16, &type metadata for InvertImagesAppEntity.UpdateIntent_value, v17);
  v46 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for InvertImagesAppEntity.UpdateIntent_value, v17);
  v23 = v45;
  v43 = *(void (**)(char *, uint64_t))(v44 + 8);
  v43(v3, v45);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(23, 2);
  v24._countAndFlagsBits = 2125385;
  v24._object = (void *)0xE300000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v24);
  v25 = v47;
  ((void (*)(char *, _QWORD, uint64_t))v51)(v7, v50, v47);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v49(v7, v25);
  v26._countAndFlagsBits = 0xD000000000000014;
  v26._object = (void *)0x800000010007CEC0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  v27 = swift_getKeyPath(&unk_100080FA0);
  v28 = _AssistantIntent.IntentProjection.subscript.getter(v27, v48);
  swift_release(v27);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v28, v8);
  swift_release(v28);
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v29);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v14, &type metadata for InvertImagesAppEntity.UpdateIntent_value, v17);
  v44 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for InvertImagesAppEntity.UpdateIntent_value, v17);
  v30 = v43;
  v43(v3, v23);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(49, 2);
  v31._countAndFlagsBits = 2125385;
  v31._object = (void *)0xE300000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v31);
  v32 = v47;
  ((void (*)(char *, _QWORD, uint64_t))v51)(v7, v50, v47);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  v49(v7, v32);
  v33._countAndFlagsBits = 0xD00000000000002ELL;
  v33._object = (void *)0x800000010007CEE0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v33);
  v34 = swift_getKeyPath(&unk_100080FA0);
  v35 = _AssistantIntent.IntentProjection.subscript.getter(v34, v48);
  swift_release(v34);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v35, v8);
  swift_release(v35);
  v36._countAndFlagsBits = 0;
  v36._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v36);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v11, &type metadata for InvertImagesAppEntity.UpdateIntent_value, v17);
  v37 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for InvertImagesAppEntity.UpdateIntent_value, v17);
  v30(v3, v23);
  v38 = sub_100005F78(&qword_1000A2968);
  v39 = swift_allocObject(v38, 56, 7);
  *(_OWORD *)(v39 + 16) = xmmword_10007F270;
  v40 = v44;
  *(_QWORD *)(v39 + 32) = v46;
  *(_QWORD *)(v39 + 40) = v40;
  *(_QWORD *)(v39 + 48) = v37;
  v41 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v39);
  return v41;
}

uint64_t sub_10004C0F4(uint64_t a1)
{
  return sub_10004B560(a1, (uint64_t)&unk_100080FA0, (uint64_t (*)(void))sub_10004C7D4, (uint64_t (*)(uint64_t))sub_10004C788, (uint64_t)sub_10004C118);
}

uint64_t sub_10004C118()
{
  return sub_10004C130(28239, 0xE200000000000000, 6710863, 0xE300000000000000);
}

uint64_t sub_10004C130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = ((uint64_t (*)(void))static _AssistantIntent.StringValueBuilder.buildExpression(_:))();
  v7 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(a3, a4);
  v8 = sub_100005F78(&qword_1000A2950);
  v9 = swift_allocObject(v8, 48, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10007F170;
  *(_QWORD *)(v9 + 32) = v6;
  *(_QWORD *)(v9 + 40) = v7;
  v10 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v9);
  return v10;
}

uint64_t sub_10004C1B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v0 = sub_100005F78(&qword_1000A2958);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005F78(&qword_1000A2960);
  __chkstk_darwin(v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10004C788();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(25, 1);
  v12._object = (void *)0x800000010007CE80;
  v12._countAndFlagsBits = 0xD000000000000019;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v4);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v7, v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v13);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v10, &type metadata for InvertImagesAppEntity.UpdateIntent_value, v11);
  v14 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for InvertImagesAppEntity.UpdateIntent_value, v11);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v15 = sub_100005F78(&qword_1000A2968);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10007F260;
  *(_QWORD *)(v16 + 32) = v14;
  v17 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v16);
  return v17;
}

uint64_t sub_10004C3AC(uint64_t a1)
{
  return sub_10004B560(a1, (uint64_t)&unk_100080FA0, (uint64_t (*)(void))sub_10004C7D4, (uint64_t (*)(uint64_t))sub_10004C788, (uint64_t)sub_10004C3D0);
}

uint64_t sub_10004C3D0()
{
  return sub_10004C3E0();
}

uint64_t sub_10004C3E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)();
  v1 = sub_100005F78(&qword_1000A2950);
  v2 = swift_allocObject(v1, 40, 7);
  *(_OWORD *)(v2 + 16) = xmmword_10007F260;
  *(_QWORD *)(v2 + 32) = v0;
  v3 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v2);
  return v3;
}

uint64_t sub_10004C448()
{
  if (qword_1000A06A8 != -1)
    swift_once(&qword_1000A06A8, sub_10004B1B8);
  return swift_bridgeObjectRetain(qword_1000AA2F8);
}

ValueMetadata *type metadata accessor for BooksWidgetAssistantIntents()
{
  return &type metadata for BooksWidgetAssistantIntents;
}

uint64_t sub_10004C498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v0 = type metadata accessor for _AssistantIntent(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000502C4();
  v4 = sub_10004C700();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v20, sub_10004B1CC, 0, sub_10004B1F0, 0, &type metadata for OpenBooksSettingsDeepLinks, v4);
  v5 = static _AssistantIntent.Builder.buildExpression(_:)(v3);
  v6 = *(void (**)(char *, uint64_t))(v1 + 8);
  v6(v3, v0);
  v20 = sub_1000502C4();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v20, sub_10004B224, 0, sub_10004B53C, 0, &type metadata for OpenBooksSettingsDeepLinks, v4);
  v7 = static _AssistantIntent.Builder.buildExpression(_:)(v3);
  v6(v3, v0);
  v20 = sub_1000616F4();
  v21 = v8;
  v9 = sub_10004C744();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v20, sub_10004B6A8, 0, sub_10004BBBC, 0, &type metadata for MenuOnLeftEntity.UpdateIntent_value, v9);
  v10 = static _AssistantIntent.Builder.buildExpression(_:)(v3);
  v6(v3, v0);
  v20 = sub_100078C14();
  v21 = v11;
  v12 = sub_10004C788();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v20, sub_10004BC00, 0, sub_10004C0F4, 0, &type metadata for InvertImagesAppEntity.UpdateIntent_value, v12);
  v13 = static _AssistantIntent.Builder.buildExpression(_:)(v3);
  v6(v3, v0);
  v20 = sub_100078C14();
  v21 = v14;
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(&v20, sub_10004C1B0, 0, sub_10004C3AC, 0, &type metadata for InvertImagesAppEntity.UpdateIntent_value, v12);
  v15 = static _AssistantIntent.Builder.buildExpression(_:)(v3);
  v6(v3, v0);
  v16 = sub_100005F78(&qword_1000A2938);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100080F30;
  *(_QWORD *)(v17 + 32) = v5;
  *(_QWORD *)(v17 + 40) = v7;
  *(_QWORD *)(v17 + 48) = v10;
  *(_QWORD *)(v17 + 56) = v13;
  *(_QWORD *)(v17 + 64) = v15;
  v18 = static _AssistantIntent.Builder.buildBlock(_:)();
  swift_bridgeObjectRelease(v17);
  return v18;
}

unint64_t sub_10004C700()
{
  unint64_t result;

  result = qword_1000A2920;
  if (!qword_1000A2920)
  {
    result = swift_getWitnessTable(&unk_100081434, &type metadata for OpenBooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A2920);
  }
  return result;
}

unint64_t sub_10004C744()
{
  unint64_t result;

  result = qword_1000A2928;
  if (!qword_1000A2928)
  {
    result = swift_getWitnessTable(&unk_100082234, &type metadata for MenuOnLeftEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_1000A2928);
  }
  return result;
}

unint64_t sub_10004C788()
{
  unint64_t result;

  result = qword_1000A2930;
  if (!qword_1000A2930)
  {
    result = swift_getWitnessTable(&unk_100083120, &type metadata for InvertImagesAppEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_1000A2930);
  }
  return result;
}

unint64_t sub_10004C7D4()
{
  unint64_t result;

  result = qword_1000A2940;
  if (!qword_1000A2940)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Bool, &type metadata for Bool);
    atomic_store(result, (unint64_t *)&qword_1000A2940);
  }
  return result;
}

_QWORD *sub_10004C81C@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_10004C858(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

unint64_t sub_10004C88C()
{
  unint64_t result;

  result = qword_1000A2970;
  if (!qword_1000A2970)
  {
    result = swift_getWitnessTable(&unk_10008208C, &type metadata for BooksMenuAnchor);
    atomic_store(result, (unint64_t *)&qword_1000A2970);
  }
  return result;
}

_QWORD *sub_10004C8D0@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_10004C908(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

unint64_t sub_10004C93C()
{
  unint64_t result;

  result = qword_1000A2990;
  if (!qword_1000A2990)
  {
    result = swift_getWitnessTable(&unk_100081244, &type metadata for BooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A2990);
  }
  return result;
}

uint64_t sub_10004C980()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_10004C9B0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_100005F78(&qword_1000A2758);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LocalizedStringResource(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000C090(v7, qword_1000AA300);
  sub_10000BE14(v7, (uint64_t)qword_1000AA300);
  LocalizedStringResource.init(stringLiteral:)(0x736B6F6F42, 0xE500000000000000);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v6, v2);
}

unint64_t sub_10004CAB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t, uint64_t);
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  void (*v122)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v123;
  void (*v124)(char *, uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  void (*v129)(char *, _QWORD, uint64_t, uint64_t);
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(char *, uint64_t, uint64_t);
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(char *, uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE *v160;
  uint64_t v161;
  void (*v162)(char *, uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  void (*v165)(char *, uint64_t, uint64_t);
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(char *, uint64_t, uint64_t);
  char *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void (*v210)(char *, uint64_t, uint64_t);
  uint64_t v211;
  uint64_t v212;
  char *v213;
  void (*v214)(char *, _QWORD, uint64_t, uint64_t);
  char *v215;
  _BYTE *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void (*v220)(char *, uint64_t, uint64_t);
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  char *v225;
  void (*v226)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t result;
  uint64_t v253;
  char *v254;
  __int128 v255;
  char *v256;
  char *v257;
  char *v258;
  char *v259;
  char *v260;
  char *v261;
  char *v262;
  uint64_t v263;
  char *v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  uint64_t v269;
  char *v270;
  char *v271;
  char *v272;
  char *v273;
  char *v274;
  char *v275;
  char *v276;
  char *v277;
  char *v278;
  char *v279;
  char *v280;
  char *v281;
  char *v282;
  char *v283;
  char *v284;
  char *v285;
  char *v286;
  char *v287;
  char *v288;
  char *v289;
  char *v290;
  char *v291;
  char *v292;
  char *v293;
  char *v294;
  uint64_t v295;
  char *v296;
  void (*v297)(char *, uint64_t, uint64_t);
  uint64_t v298;
  uint64_t v299;
  unsigned int v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  void (*v306)(char *, _QWORD, uint64_t, uint64_t);
  void (*v307)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;

  v0 = sub_100005F78(&qword_1000A2750);
  v1 = __chkstk_darwin(v0);
  v294 = (char *)&v253 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __chkstk_darwin(v1);
  v264 = (char *)&v253 - v4;
  v5 = __chkstk_darwin(v3);
  v290 = (char *)&v253 - v6;
  v7 = __chkstk_darwin(v5);
  v281 = (char *)&v253 - v8;
  v9 = __chkstk_darwin(v7);
  v277 = (char *)&v253 - v10;
  v11 = __chkstk_darwin(v9);
  v274 = (char *)&v253 - v12;
  v13 = __chkstk_darwin(v11);
  v296 = (char *)&v253 - v14;
  v15 = __chkstk_darwin(v13);
  v282 = (char *)&v253 - v16;
  __chkstk_darwin(v15);
  v267 = (char *)&v253 - v17;
  v18 = sub_100005F78(&qword_1000A2758);
  v19 = __chkstk_darwin(v18);
  v293 = (char *)&v253 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v291 = (char *)&v253 - v22;
  v23 = __chkstk_darwin(v21);
  v288 = (char *)&v253 - v24;
  v25 = __chkstk_darwin(v23);
  v262 = (char *)&v253 - v26;
  v27 = __chkstk_darwin(v25);
  v261 = (char *)&v253 - v28;
  v29 = __chkstk_darwin(v27);
  v285 = (char *)&v253 - v30;
  v31 = __chkstk_darwin(v29);
  v283 = (char *)&v253 - v32;
  v33 = __chkstk_darwin(v31);
  v279 = (char *)&v253 - v34;
  v35 = __chkstk_darwin(v33);
  v259 = (char *)&v253 - v36;
  v37 = __chkstk_darwin(v35);
  v276 = (char *)&v253 - v38;
  v39 = __chkstk_darwin(v37);
  v272 = (char *)&v253 - v40;
  v41 = __chkstk_darwin(v39);
  v258 = (char *)&v253 - v42;
  v43 = __chkstk_darwin(v41);
  v257 = (char *)&v253 - v44;
  v45 = __chkstk_darwin(v43);
  v268 = (char *)&v253 - v46;
  __chkstk_darwin(v45);
  v266 = (char *)&v253 - v47;
  v48 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v49 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v51 = (char *)&v253 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for Locale(0);
  __chkstk_darwin(v52);
  v54 = (char *)&v253 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v55);
  v57 = (char *)&v253 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v310 = type metadata accessor for LocalizedStringResource(0);
  v58 = *(_QWORD *)(v310 - 8);
  v59 = __chkstk_darwin(v310);
  v292 = (char *)&v253 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __chkstk_darwin(v59);
  v289 = (char *)&v253 - v62;
  v63 = __chkstk_darwin(v61);
  v287 = (char *)&v253 - v64;
  v65 = __chkstk_darwin(v63);
  v286 = (char *)&v253 - v66;
  v67 = __chkstk_darwin(v65);
  v260 = (char *)&v253 - v68;
  v69 = __chkstk_darwin(v67);
  v284 = (char *)&v253 - v70;
  v71 = __chkstk_darwin(v69);
  v280 = (char *)&v253 - v72;
  v73 = __chkstk_darwin(v71);
  v278 = (char *)&v253 - v74;
  v75 = __chkstk_darwin(v73);
  v275 = (char *)&v253 - v76;
  v77 = __chkstk_darwin(v75);
  v273 = (char *)&v253 - v78;
  v79 = __chkstk_darwin(v77);
  v271 = (char *)&v253 - v80;
  v81 = __chkstk_darwin(v79);
  v270 = (char *)&v253 - v82;
  v83 = __chkstk_darwin(v81);
  v256 = (char *)&v253 - v84;
  v85 = __chkstk_darwin(v83);
  v265 = (char *)&v253 - v86;
  __chkstk_darwin(v85);
  v254 = (char *)&v253 - v87;
  v88 = sub_100005F78(&qword_1000A2A80);
  v89 = sub_100005F78(&qword_1000A2A88);
  v90 = *(_QWORD *)(v89 - 8);
  v304 = *(_QWORD *)(v90 + 72);
  v305 = v89;
  v91 = *(unsigned __int8 *)(v90 + 80);
  v92 = (v91 + 32) & ~v91;
  v93 = swift_allocObject(v88, v92 - v304 + 16 * v304, v91 | 7);
  v263 = v93;
  *(_OWORD *)(v93 + 16) = xmmword_100081020;
  v308 = v93 + v92;
  *(_BYTE *)(v93 + v92) = 0;
  v94 = String.LocalizationValue.init(stringLiteral:)(0x736B6F6F42, 0xE500000000000000);
  static Locale.current.getter(v94);
  v95 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v96 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 104);
  v298 = v48;
  v96(v51, enum case for LocalizedStringResource.BundleDescription.main(_:), v48);
  v297 = v96;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link root title", 35, 2);
  v97 = String.LocalizationValue.init(stringLiteral:)(1936748609, 0xE400000000000000);
  static Locale.current.getter(v97);
  v96(v51, v95, v48);
  v98 = v266;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link root subtitle", 38, 2);
  v307 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56);
  v307(v98, 0, 1, v310);
  v302 = 0x800000010007BDF0;
  v99 = v267;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(0xD000000000000010);
  v309 = type metadata accessor for DisplayRepresentation.Image(0);
  v306 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v309 - 8) + 56);
  v306(v99, 0, 1, v309);
  v301 = sub_100005F78(&qword_1000A2A90);
  v295 = *(_QWORD *)(v58 + 72);
  v100 = *(unsigned __int8 *)(v58 + 80);
  v299 = ((v100 + 32) & ~v100) + v295;
  v269 = (v100 + 32) & ~v100;
  v303 = v100 | 7;
  v101 = swift_allocObject(v301, v299, v100 | 7);
  v255 = xmmword_10007F260;
  *(_OWORD *)(v101 + 16) = xmmword_10007F260;
  v102 = v308;
  v103 = String.LocalizationValue.init(stringLiteral:)(0x736B6F6F4269, 0xE600000000000000);
  static Locale.current.getter(v103);
  v105 = v297;
  v104 = v298;
  v297(v51, v95, v298);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link root synonym", 37, 2);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v254, v266, v267, v101);
  *(_BYTE *)(v102 + v304) = 4;
  v267 = (char *)0xD000000000000014;
  v106 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000014, 0x800000010007D020);
  static Locale.current.getter(v106);
  v300 = v95;
  v105(v51, v95, v104);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Allow Online Content title", 52, 2);
  v107 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE00736B6F6F4220);
  static Locale.current.getter(v107);
  v108 = v104;
  v105(v51, v95, v104);
  v109 = v268;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Allow Online Content subtitle", 55, 2);
  v307(v109, 0, 1, v310);
  v110 = v282;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(0xD000000000000010);
  v306(v110, 0, 1, v309);
  v111 = swift_allocObject(v301, v299, v303);
  *(_OWORD *)(v111 + 16) = v255;
  v112 = String.LocalizationValue.init(stringLiteral:)(0x4320656E696C6E4FLL, 0xEE00746E65746E6FLL);
  static Locale.current.getter(v112);
  v113 = v300;
  v105(v51, v300, v108);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Allow Online Content synonym", 54, 2);
  v114 = WidgetReadingHistory.Day.readingTime.getter(v111);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v265, v268, v282, v114);
  v115 = v304;
  v282 = (char *)(2 * v304);
  *(_BYTE *)(v308 + 2 * v304) = 5;
  v116 = String.LocalizationValue.init(stringLiteral:)(0x676E69636E7953, 0xE700000000000000);
  static Locale.current.getter(v116);
  v117 = v108;
  v105(v51, v113, v108);
  v118 = v256;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Syncing title", 39, 2);
  v119 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE00736B6F6F4220);
  static Locale.current.getter(v119);
  v105(v51, v113, v117);
  v120 = v257;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Syncing subtitle", 42, 2);
  v307(v120, 0, 1, v310);
  v121 = v296;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(0xD000000000000010);
  v122 = v306;
  v306(v121, 0, 1, v309);
  DisplayRepresentation.init(title:subtitle:image:)(v118, v120, v121);
  v282[v115 + v308] = 6;
  v123 = String.LocalizationValue.init(stringLiteral:)(0x6E69686372616553, 0xE900000000000067);
  static Locale.current.getter(v123);
  v124 = v297;
  v125 = v298;
  v297(v51, v113, v298);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Searching title", 41, 2);
  v126 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE00736B6F6F4220);
  static Locale.current.getter(v126);
  v124(v51, v113, v125);
  v127 = v258;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Searching subtitle", 44, 2);
  v128 = v310;
  v129 = v307;
  v307(v127, 0, 1, v310);
  v130 = v296;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(0xD000000000000010);
  v122(v130, 0, 1, v309);
  DisplayRepresentation.init(title:subtitle:image:)(v270, v127, v130);
  v270 = (char *)(4 * v304);
  v268 = (char *)(v308 + 4 * v304);
  *v268 = 7;
  v131 = String.LocalizationValue.init(stringLiteral:)(0x6F6F626F69647541, 0xEA0000000000736BLL);
  static Locale.current.getter(v131);
  v132 = v300;
  v134 = v297;
  v133 = v298;
  v297(v51, v300, v298);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Audiobooks title", 42, 2);
  v135 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE00736B6F6F4220);
  static Locale.current.getter(v135);
  v134(v51, v132, v133);
  v136 = v272;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Audiobooks subtitle", 45, 2);
  v129(v136, 0, 1, v128);
  v137 = v274;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(0xD000000000000010);
  v306(v137, 0, 1, v309);
  v282 = (char *)(v269 + 2 * v295);
  v138 = swift_allocObject(v301, v282, v303);
  v269 = sub_100078B94(v138, 2);
  v139 = String.LocalizationValue.init(stringLiteral:)(0x726F462070696B53, 0xEC00000064726177);
  static Locale.current.getter(v139);
  v140 = v298;
  v134(v51, v132, v298);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Audiobooks synonym", 44, 2);
  v141 = String.LocalizationValue.init(stringLiteral:)(0x6361422070696B53, 0xE90000000000006BLL);
  static Locale.current.getter(v141);
  v142 = v132;
  v143 = v132;
  v144 = v140;
  v134(v51, v143, v140);
  v145 = v134;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Audiobooks synonym", 44, 2);
  v146 = WidgetReadingHistory.Day.readingTime.getter(v269);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v271, v272, v274, v146);
  v270[v304 + v308] = 8;
  v274 = (char *)0xD000000000000011;
  v147 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x800000010007D250);
  static Locale.current.getter(v147);
  v134(v51, v142, v144);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: External Controls title", 49, 2);
  v148 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE00736B6F6F4220);
  static Locale.current.getter(v148);
  v149 = v142;
  v150 = v144;
  v134(v51, v149, v144);
  v151 = v276;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: External Controls subtitle", 52, 2);
  v307(v151, 0, 1, v310);
  v152 = v277;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(0xD000000000000010);
  v306(v152, 0, 1, v309);
  v153 = swift_allocObject(v301, v299, v303);
  v154 = sub_100078B94(v153, 1);
  v155 = v305;
  v156 = String.LocalizationValue.init(stringLiteral:)(0x6572502F7478654ELL, 0xED000073756F6976);
  static Locale.current.getter(v156);
  v157 = v300;
  v145(v51, v300, v150);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: External Controls synonym", 51, 2);
  v158 = WidgetReadingHistory.Day.readingTime.getter(v154);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v273, v276, v277, v158);
  v159 = v308;
  v160 = (_BYTE *)(v308 + 6 * v304);
  *v160 = 9;
  v161 = String.LocalizationValue.init(stringLiteral:)(0x79636176697250, 0xE700000000000000);
  static Locale.current.getter(v161);
  v145(v51, v157, v150);
  v162 = v145;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Privacy title", 39, 2);
  v277 = &v160[*(int *)(v155 + 48)];
  v163 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE00736B6F6F4220);
  static Locale.current.getter(v163);
  v164 = v157;
  v162(v51, v157, v150);
  v165 = v162;
  v166 = v259;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Privacy subtitle", 42, 2);
  v307(v166, 0, 1, v310);
  v167 = v296;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(0xD000000000000010);
  v306(v167, 0, 1, v309);
  DisplayRepresentation.init(title:subtitle:image:)(v275, v166, v167);
  v277 = (char *)(8 * v304);
  *(_BYTE *)(v159 + 7 * v304) = 10;
  v168 = String.LocalizationValue.init(stringLiteral:)(1701670728, 0xE400000000000000);
  static Locale.current.getter(v168);
  v165(v51, v164, v150);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Home title", 36, 2);
  v169 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE00736B6F6F4220);
  static Locale.current.getter(v169);
  v165(v51, v164, v150);
  v170 = v279;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Home subtitle", 39, 2);
  v307(v170, 0, 1, v310);
  v171 = v281;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(0xD000000000000010);
  v306(v171, 0, 1, v309);
  v172 = swift_allocObject(v301, v282, v303);
  v276 = (char *)sub_100078B94(v172, 2);
  v173 = String.LocalizationValue.init(stringLiteral:)(0x20676E6964616552, 0xEB00000000776F4ELL);
  static Locale.current.getter(v173);
  v165(v51, v164, v150);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Home synonym", 38, 2);
  v174 = String.LocalizationValue.init(stringLiteral:)(0x676E6964616552, 0xE700000000000000);
  static Locale.current.getter(v174);
  v175 = v164;
  v165(v51, v164, v150);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Home synonym", 38, 2);
  v176 = WidgetReadingHistory.Day.readingTime.getter(v276);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v278, v279, v281, v176);
  v277[v308] = 11;
  v177 = String.LocalizationValue.init(stringLiteral:)(0x636966697473754ALL, 0xED00006E6F697461);
  static Locale.current.getter(v177);
  v165(v51, v164, v150);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Justification title", 45, 2);
  v178 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE00736B6F6F4220);
  static Locale.current.getter(v178);
  v179 = v150;
  v165(v51, v175, v150);
  v180 = v283;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Justification subtitle", 48, 2);
  v307(v180, 0, 1, v310);
  v181 = v296;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(0xD000000000000010);
  v306(v181, 0, 1, v309);
  v182 = swift_allocObject(v301, v299, v303);
  v183 = sub_100078B94(v182, 1);
  v184 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x800000010007D490);
  static Locale.current.getter(v184);
  v185 = v300;
  v165(v51, v300, v179);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Justification synonym", 47, 2);
  v186 = WidgetReadingHistory.Day.readingTime.getter(v183);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v280, v283, v181, v186);
  v187 = &v277[v304 + v308];
  *v187 = 12;
  v188 = String.LocalizationValue.init(stringLiteral:)(0x74616E6568707948, 0xEB000000006E6F69);
  static Locale.current.getter(v188);
  v165(v51, v185, v179);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Hyphenation title", 43, 2);
  v283 = &v187[*(int *)(v305 + 48)];
  v189 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE00736B6F6F4220);
  static Locale.current.getter(v189);
  v165(v51, v185, v179);
  v190 = v285;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Hyphenation subtitle", 46, 2);
  v307(v190, 0, 1, v310);
  DisplayRepresentation.Image.init(appBundleIdentifier:)(0xD000000000000010);
  v306(v181, 0, 1, v309);
  v191 = swift_allocObject(v301, v299, v303);
  v192 = sub_100078B94(v191, 1);
  v193 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x800000010007D540);
  static Locale.current.getter(v193);
  v165(v51, v185, v179);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Hyphenation synonym", 45, 2);
  v194 = WidgetReadingHistory.Day.readingTime.getter(v192);
  v195 = v181;
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v284, v285, v181, v194);
  v196 = v308;
  *(_BYTE *)(v308 + 10 * v304) = 13;
  v197 = String.LocalizationValue.init(stringLiteral:)(v267, 0x800000010007D590);
  static Locale.current.getter(v197);
  v198 = v179;
  v199 = v297;
  v297(v51, v185, v179);
  v200 = v260;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Both Margins Advance title", 52, 2);
  v201 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE00736B6F6F4220);
  static Locale.current.getter(v201);
  v199(v51, v185, v198);
  v202 = v261;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Both Margins Advance subtitle", 55, 2);
  v203 = v310;
  v307(v202, 0, 1, v310);
  v204 = v195;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(0xD000000000000010);
  v205 = v195;
  v206 = v309;
  v306(v205, 0, 1, v309);
  DisplayRepresentation.init(title:subtitle:image:)(v200, v202, v204);
  v207 = v304;
  *(_BYTE *)(v196 + 11 * v304) = 14;
  v208 = String.LocalizationValue.init(stringLiteral:)(0x6F7453206B6F6F42, 0xEA00000000006572);
  static Locale.current.getter(v208);
  v209 = v300;
  v210 = v297;
  v211 = v298;
  v297(v51, v300, v298);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Book Store", 36, 2);
  v212 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE00736B6F6F4220);
  static Locale.current.getter(v212);
  v210(v51, v209, v211);
  v213 = v262;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link: Book Store subtitle", 45, 2);
  v214 = v307;
  v307(v213, 0, 1, v203);
  v215 = v296;
  DisplayRepresentation.Image.init(appBundleIdentifier:)(0xD000000000000010);
  v306(v215, 0, 1, v206);
  DisplayRepresentation.init(title:subtitle:image:)(v286, v213, v215);
  v216 = (_BYTE *)(v308 + 12 * v207);
  *v216 = 1;
  v217 = String.LocalizationValue.init(stringLiteral:)(0x4920747265766E49, 0xED0000736567616DLL);
  static Locale.current.getter(v217);
  v218 = v300;
  v220 = v297;
  v219 = v298;
  v297(v51, v300, v298);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link title", 30, 2);
  v221 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE00736B6F6F4220);
  static Locale.current.getter(v221);
  v222 = v218;
  v223 = v219;
  v220(v51, v222, v219);
  v224 = v288;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link subtitle", 33, 2);
  v214(v224, 0, 1, v310);
  v302 = (unint64_t)&v216[*(int *)(v305 + 48)];
  v225 = v290;
  DisplayRepresentation.Image.init(systemName:isTemplate:)(6650213, 0xE300000000000000, 2);
  v226 = v306;
  v306(v225, 0, 1, v309);
  v227 = v301;
  v228 = swift_allocObject(v301, v299, v303);
  v229 = sub_100078B94(v228, 1);
  v230 = String.LocalizationValue.init(stringLiteral:)(v274, 0x800000010007D6E0);
  static Locale.current.getter(v230);
  v231 = v300;
  v220(v51, v300, v223);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link synonym", 32, 2);
  v232 = WidgetReadingHistory.Day.readingTime.getter(v229);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v287, v288, v290, v232);
  *(_BYTE *)(v308 + 13 * v304) = 2;
  v233 = String.LocalizationValue.init(stringLiteral:)(0x206E6F20756E654DLL, 0xEC0000007466654CLL);
  static Locale.current.getter(v233);
  v234 = v231;
  v220(v51, v231, v223);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link title", 30, 2);
  v235 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE00736B6F6F4220);
  static Locale.current.getter(v235);
  v220(v51, v231, v223);
  v236 = v291;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link subtitle", 33, 2);
  v307(v236, 0, 1, v310);
  v237 = v264;
  DisplayRepresentation.Image.init(systemName:isTemplate:)(0xD000000000000021, 0x800000010007D730, 2);
  v226(v237, 0, 1, v309);
  v238 = swift_allocObject(v227, v299, v303);
  v239 = sub_100078B94(v238, 1);
  v240 = String.LocalizationValue.init(stringLiteral:)(0x646953207466654CLL, 0xEE00756E654D2065);
  static Locale.current.getter(v240);
  v220(v51, v234, v223);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link synonym", 32, 2);
  v241 = WidgetReadingHistory.Day.readingTime.getter(v239);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v289, v291, v237, v241);
  *(_BYTE *)(v308 + 14 * v304) = 3;
  v242 = String.LocalizationValue.init(stringLiteral:)(0x20676E6964616552, 0xED0000736C616F47);
  static Locale.current.getter(v242);
  v220(v51, v234, v223);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link title", 30, 2);
  v243 = String.LocalizationValue.init(stringLiteral:)(0x9286E22073707041, 0xAE00736B6F6F4220);
  static Locale.current.getter(v243);
  v220(v51, v234, v223);
  v244 = v293;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link subtitle", 33, 2);
  v307(v244, 0, 1, v310);
  v245 = v294;
  DisplayRepresentation.Image.init(systemName:isTemplate:)(0x72656D6974, 0xE500000000000000, 2);
  v306(v245, 0, 1, v309);
  v246 = swift_allocObject(v301, v282, v303);
  v247 = sub_100078B94(v246, 2);
  v248 = String.LocalizationValue.init(stringLiteral:)(0x736C616F47, 0xE500000000000000);
  static Locale.current.getter(v248);
  v220(v51, v234, v223);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link synonym", 32, 2);
  v249 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000018, 0x800000010007D760);
  static Locale.current.getter(v249);
  v220(v51, v234, v223);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v57, 0, 0, v54, v51, "Books settings deep link synonym", 32, 2);
  v250 = WidgetReadingHistory.Day.readingTime.getter(v247);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v292, v293, v294, v250);
  v251 = WidgetReadingHistory.Day.readingTime.getter(v263);
  result = sub_10005E454(v251);
  qword_1000AA318 = result;
  return result;
}

uint64_t sub_10004EF88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v0 = sub_100005F78(&qword_1000A2A98);
  sub_10000C090(v0, qword_1000AA320);
  sub_10000BE14(v0, (uint64_t)qword_1000AA320);
  v1 = sub_100005F78(&qword_1000A2AA0);
  v2 = *(_QWORD *)(sub_100005F78(&qword_1000A2AA8) - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v10 = swift_allocObject(v1, v5 - v3 + 16 * v3, v4 | 7);
  *(_OWORD *)(v10 + 16) = xmmword_100081020;
  v6 = v10 + v5;
  *(_BYTE *)(v10 + v5) = 0;
  v7 = sub_10004F78C();
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD00000000000003ELL, 0x800000010007D780, &type metadata for BooksSettingsDeepLinks, v7);
  *(_BYTE *)(v6 + v3) = 1;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD00000000000004BLL, 0x800000010007D7C0, &type metadata for BooksSettingsDeepLinks, v7);
  *(_BYTE *)(v6 + 2 * v3) = 2;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD00000000000004BLL, 0x800000010007D810, &type metadata for BooksSettingsDeepLinks, v7);
  *(_BYTE *)(v6 + 3 * v3) = 3;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD00000000000004CLL, 0x800000010007D860, &type metadata for BooksSettingsDeepLinks, v7);
  *(_BYTE *)(v6 + 4 * v3) = 4;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000053, 0x800000010007D8B0, &type metadata for BooksSettingsDeepLinks, v7);
  *(_BYTE *)(v6 + 5 * v3) = 5;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000046, 0x800000010007D910, &type metadata for BooksSettingsDeepLinks, v7);
  *(_BYTE *)(v6 + 6 * v3) = 6;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000048, 0x800000010007D960, &type metadata for BooksSettingsDeepLinks, v7);
  *(_BYTE *)(v6 + 7 * v3) = 7;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000049, 0x800000010007D9B0, &type metadata for BooksSettingsDeepLinks, v7);
  *(_BYTE *)(v6 + 8 * v3) = 8;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000050, 0x800000010007DA00, &type metadata for BooksSettingsDeepLinks, v7);
  *(_BYTE *)(v6 + 9 * v3) = 9;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000046, 0x800000010007DA60, &type metadata for BooksSettingsDeepLinks, v7);
  *(_BYTE *)(v6 + 10 * v3) = 10;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000043, 0x800000010007DAB0, &type metadata for BooksSettingsDeepLinks, v7);
  *(_BYTE *)(v6 + 11 * v3) = 11;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD00000000000004CLL, 0x800000010007DB00, &type metadata for BooksSettingsDeepLinks, v7);
  *(_BYTE *)(v6 + 12 * v3) = 12;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD00000000000004ALL, 0x800000010007DB50, &type metadata for BooksSettingsDeepLinks, v7);
  *(_BYTE *)(v6 + 13 * v3) = 13;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000053, 0x800000010007DBA0, &type metadata for BooksSettingsDeepLinks, v7);
  *(_BYTE *)(v6 + 14 * v3) = 14;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000049, 0x800000010007DC00, &type metadata for BooksSettingsDeepLinks, v7);
  v8 = sub_10005E5EC(v10);
  return _EnumURLRepresentation.init(_:)(v8, &type metadata for BooksSettingsDeepLinks, v7);
}

uint64_t sub_10004F3C0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10004F3F8 + 4 * byte_100081030[a1]))(0xD000000000000012, 0x800000010007BAC0);
}

uint64_t sub_10004F3F8()
{
  return 1953460082;
}

uint64_t sub_10004F408()
{
  return 0x6D49747265766E69;
}

uint64_t sub_10004F428()
{
  return 0x654C6E4F756E656DLL;
}

uint64_t sub_10004F448()
{
  return 0x47676E6964616572;
}

uint64_t sub_10004F468()
{
  return 0x676E69636E7973;
}

uint64_t sub_10004F480()
{
  return 0x6E69686372616573;
}

uint64_t sub_10004F4A0()
{
  return 0x6F6F626F69647561;
}

uint64_t sub_10004F4BC(uint64_t a1)
{
  return a1 - 2;
}

uint64_t sub_10004F54C()
{
  return 0x726F74536B6F6F62;
}

uint64_t sub_10004F568(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_10004F3C0(*a1);
  v5 = v4;
  v6 = sub_10004F3C0(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

unint64_t sub_10004F5F4()
{
  unint64_t result;

  result = qword_1000A29C0;
  if (!qword_1000A29C0)
  {
    result = swift_getWitnessTable(&unk_10008104C, &type metadata for BooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A29C0);
  }
  return result;
}

Swift::Int sub_10004F638()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_10004F3C0(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10004F698(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_10004F3C0(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10004F6D8(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_10004F3C0(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_10004F734@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000505C0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10004F760@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10004F3C0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10004F78C()
{
  unint64_t result;

  result = qword_1000A29C8;
  if (!qword_1000A29C8)
  {
    result = swift_getWitnessTable(&unk_100081124, &type metadata for BooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A29C8);
  }
  return result;
}

unint64_t sub_10004F7D4()
{
  unint64_t result;

  result = qword_1000A29D0;
  if (!qword_1000A29D0)
  {
    result = swift_getWitnessTable(&unk_100081164, &type metadata for BooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A29D0);
  }
  return result;
}

uint64_t sub_10004F818@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000A06C0 != -1)
    swift_once(&qword_1000A06C0, sub_10004EF88);
  v2 = sub_100005F78(&qword_1000A2A98);
  v3 = sub_10000BE14(v2, (uint64_t)qword_1000AA320);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t sub_10004F890()
{
  unint64_t result;

  result = qword_1000A29D8;
  if (!qword_1000A29D8)
  {
    result = swift_getWitnessTable(&unk_10008118C, &type metadata for BooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A29D8);
  }
  return result;
}

unint64_t sub_10004F8D8()
{
  unint64_t result;

  result = qword_1000A29E0;
  if (!qword_1000A29E0)
  {
    result = swift_getWitnessTable(&unk_1000811C4, &type metadata for BooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A29E0);
  }
  return result;
}

unint64_t sub_10004F920()
{
  unint64_t result;

  result = qword_1000A29E8;
  if (!qword_1000A29E8)
  {
    result = swift_getWitnessTable(&unk_1000810B4, &type metadata for BooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A29E8);
  }
  return result;
}

uint64_t sub_10004F964(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100050568();
  v4 = _URLRepresentableEnum.urlRepresentationParameter.getter(a1, v3);
  return sub_1000505AC(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

unint64_t sub_10004F9B0()
{
  unint64_t result;

  result = qword_1000A29F8;
  if (!qword_1000A29F8)
  {
    result = swift_getWitnessTable(&unk_1000811F4, &type metadata for BooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A29F8);
  }
  return result;
}

unint64_t sub_10004F9F8()
{
  unint64_t result;

  result = qword_1000A2A00;
  if (!qword_1000A2A00)
  {
    result = swift_getWitnessTable(&unk_10008121C, &type metadata for BooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A2A00);
  }
  return result;
}

unint64_t sub_10004FA44()
{
  unint64_t result;

  result = qword_1000A2A08;
  if (!qword_1000A2A08)
  {
    result = swift_getWitnessTable(&unk_10008129C, &type metadata for BooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A2A08);
  }
  return result;
}

uint64_t sub_10004FA88@<X0>(uint64_t a1@<X8>)
{
  return sub_100047640(&qword_1000A06B0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000AA300, (uint64_t)sub_10004C9B0, a1);
}

uint64_t sub_10004FAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004FFB4(a1, a2, a3, (uint64_t (*)(void))sub_10004F78C, (uint64_t)&opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>);
}

uint64_t sub_10004FAC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004F78C();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_10004FAFC()
{
  unint64_t result;

  result = qword_1000A2A10;
  if (!qword_1000A2A10)
  {
    result = swift_getWitnessTable(&unk_1000812DC, &type metadata for BooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A2A10);
  }
  return result;
}

unint64_t sub_10004FB44()
{
  unint64_t result;

  result = qword_1000A2A18;
  if (!qword_1000A2A18)
  {
    result = swift_getWitnessTable(&unk_100081304, &type metadata for BooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A2A18);
  }
  return result;
}

unint64_t sub_10004FB8C()
{
  unint64_t result;

  result = qword_1000A2A20;
  if (!qword_1000A2A20)
  {
    result = swift_getWitnessTable(&unk_100081074, &type metadata for BooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A2A20);
  }
  return result;
}

uint64_t sub_10004FBD0()
{
  if (qword_1000A06B8 != -1)
    swift_once(&qword_1000A06B8, sub_10004CAB8);
  return swift_bridgeObjectRetain(qword_1000AA318);
}

uint64_t sub_10004FC10(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004FA44();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_10004FC4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2A28;
  if (!qword_1000A2A28)
  {
    v1 = sub_100005FC0(&qword_1000A2A30);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000A2A28);
  }
  return result;
}

void sub_10004FC98(_QWORD *a1@<X8>)
{
  *a1 = &off_100099CF8;
}

unint64_t sub_10004FCAC()
{
  unint64_t result;

  result = qword_1000A2A38;
  if (!qword_1000A2A38)
  {
    result = swift_getWitnessTable(&unk_10008140C, &type metadata for OpenBooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A2A38);
  }
  return result;
}

uint64_t sub_10004FCF0()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10000C090(v0, qword_1000AA338);
  sub_10000BE14(v0, (uint64_t)qword_1000AA338);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000013, 0x800000010007CF70);
}

_QWORD *sub_10004FD50@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_10004FD88(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

void (*sub_10004FDBC(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_10004FE04;
}

void sub_10004FE04(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

unint64_t sub_10004FE3C()
{
  unint64_t result;

  result = qword_1000A2A40;
  if (!qword_1000A2A40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Never, &type metadata for Never);
    atomic_store(result, (unint64_t *)&qword_1000A2A40);
  }
  return result;
}

uint64_t sub_10004FE80(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_1000504E0();
  v5 = sub_100050568();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_10004FED8()
{
  uint64_t v0;

  v0 = qword_1000A29B0;
  swift_bridgeObjectRetain(off_1000A29B8);
  return v0;
}

unint64_t sub_10004FF14()
{
  unint64_t result;

  result = qword_1000A2A48;
  if (!qword_1000A2A48)
  {
    result = swift_getWitnessTable(&unk_1000814C4, &type metadata for OpenBooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A2A48);
  }
  return result;
}

unint64_t sub_10004FF5C()
{
  unint64_t result;

  result = qword_1000A2A50;
  if (!qword_1000A2A50)
  {
    result = swift_getWitnessTable(&unk_1000814EC, &type metadata for OpenBooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A2A50);
  }
  return result;
}

uint64_t sub_10004FFA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004FFB4(a1, a2, a3, (uint64_t (*)(void))sub_10004C700, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t sub_10004FFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a4();
  return swift_getOpaqueTypeConformance2(v7, a5, 1);
}

uint64_t sub_10004FFF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100047640(&qword_1000A06C8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1000AA338, (uint64_t)sub_10004FCF0, a1);
}

uint64_t sub_100050018()
{
  return 1;
}

uint64_t sub_100050024(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1000504E0();
  v7 = sub_100050524();
  v8 = sub_100050568();
  *v5 = v2;
  v5[1] = sub_1000500B0;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_1000500B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(*v1 + 16);
  v3 = *v1;
  result = swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  return result;
}

uint64_t sub_10005010C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000502C4();
  *a1 = result;
  return result;
}

uint64_t sub_100050130(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004C700();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenBooksSettingsDeepLinks()
{
  return &type metadata for OpenBooksSettingsDeepLinks;
}

uint64_t getEnumTagSinglePayload for BooksSettingsDeepLinks(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BooksSettingsDeepLinks(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_100050244 + 4 * byte_100081044[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_100050278 + 4 * byte_10008103F[v4]))();
}

uint64_t sub_100050278(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100050280(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100050288);
  return result;
}

uint64_t sub_100050294(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005029CLL);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_1000502A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000502A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BooksSettingsDeepLinks()
{
  return &type metadata for BooksSettingsDeepLinks;
}

uint64_t sub_1000502C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  _BYTE v21[15];
  char v22;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_100005F78(&qword_1000A2760);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v21[-v8];
  v10 = sub_100005F78(&qword_1000A2758);
  __chkstk_darwin(v10);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100005F78(&qword_1000A2A60);
  LocalizedStringResource.init(stringLiteral:)(0x655320736B6F6F42, 0xED0000676E697474);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v22 = 15;
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = sub_10004F78C();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v16, v12, &v22, v9, v7, v3, &off_100099CF8, v19);
}

unint64_t sub_1000504E0()
{
  unint64_t result;

  result = qword_1000A2A68;
  if (!qword_1000A2A68)
  {
    result = swift_getWitnessTable(&unk_10008133C, &type metadata for OpenBooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A2A68);
  }
  return result;
}

unint64_t sub_100050524()
{
  unint64_t result;

  result = qword_1000A2A70;
  if (!qword_1000A2A70)
  {
    result = swift_getWitnessTable(&unk_10008138C, &type metadata for OpenBooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A2A70);
  }
  return result;
}

unint64_t sub_100050568()
{
  unint64_t result;

  result = qword_1000A2A78;
  if (!qword_1000A2A78)
  {
    result = swift_getWitnessTable(&unk_1000810EC, &type metadata for BooksSettingsDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A2A78);
  }
  return result;
}

uint64_t sub_1000505AC(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

unint64_t sub_1000505C0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100099D50, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xF)
    return 15;
  else
    return v3;
}

unint64_t sub_10005060C()
{
  unint64_t result;

  result = qword_1000A2AB0;
  if (!qword_1000A2AB0)
  {
    result = swift_getWitnessTable(&unk_100081608, &type metadata for PauseCurrentAudiobookIntent);
    atomic_store(result, (unint64_t *)&qword_1000A2AB0);
  }
  return result;
}

unint64_t sub_100050654()
{
  unint64_t result;

  result = qword_1000A2AB8;
  if (!qword_1000A2AB8)
  {
    result = swift_getWitnessTable(&unk_100081630, &type metadata for PauseCurrentAudiobookIntent);
    atomic_store(result, (unint64_t *)&qword_1000A2AB8);
  }
  return result;
}

uint64_t sub_100050698(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000842E0, 1);
}

uint64_t sub_1000506A8(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10001C2DC();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_1000506E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10000C090(v10, qword_1000AA350);
  sub_10000BE14(v10, (uint64_t)qword_1000AA350);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000017, 0x800000010007DC50);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Title for 'Pause Current Audiobook' AppIntent.", 46, 2);
}

uint64_t sub_10005085C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000A06D0 != -1)
    swift_once(&qword_1000A06D0, sub_1000506E8);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10000BE14(v2, (uint64_t)qword_1000AA350);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t sub_1000508D0()
{
  unint64_t result;

  result = qword_1000A2AC8;
  if (!qword_1000A2AC8)
  {
    result = swift_getWitnessTable(&unk_10008164C, &type metadata for PauseCurrentAudiobookIntent);
    atomic_store(result, (unint64_t *)&qword_1000A2AC8);
  }
  return result;
}

uint64_t sub_100050914(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001C2DC();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for PauseCurrentAudiobookIntent()
{
  return &type metadata for PauseCurrentAudiobookIntent;
}

unint64_t sub_100050954()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2740;
  if (!qword_1000A2740)
  {
    v1 = sub_100005FC0(&qword_1000A2748);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentResultContainer<A, B, C, D>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2740);
  }
  return result;
}

ValueMetadata *type metadata accessor for BookViewModel()
{
  return &type metadata for BookViewModel;
}

void destroy for ViewModel(uint64_t *a1)
{
  sub_10000A4B0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14]);
}

uint64_t *initializeWithCopy for ViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  v20 = a2[16];
  sub_10000A364(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  return a1;
}

uint64_t assignWithCopy for ViewModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v25 = a2[9];
  v26 = a2[10];
  v27 = a2[11];
  v28 = a2[12];
  v29 = a2[13];
  v30 = a2[14];
  v31 = a2[15];
  v32 = a2[16];
  sub_10000A364(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28, v29, v30);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v25;
  *(_QWORD *)(a1 + 80) = v26;
  *(_QWORD *)(a1 + 88) = v27;
  *(_QWORD *)(a1 + 96) = v28;
  *(_QWORD *)(a1 + 104) = v29;
  *(_QWORD *)(a1 + 112) = v30;
  *(_QWORD *)(a1 + 120) = v31;
  *(_QWORD *)(a1 + 128) = v32;
  sub_10000A4B0(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
  return a1;
}

uint64_t assignWithTake for ViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = *(_QWORD *)(a2 + 128);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 112);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v18;
  v19 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v19;
  *(_QWORD *)(a1 + 128) = v3;
  sub_10000A4B0(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewModel(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for ViewModel(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 2 * -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_100050D90(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 112) & 0x301 | (a2 << 62);
  *(_QWORD *)(result + 16) &= 1uLL;
  *(_QWORD *)(result + 112) = v2;
  return result;
}

ValueMetadata *type metadata accessor for ViewModel()
{
  return &type metadata for ViewModel;
}

uint64_t destroy for LargeWidgetViewModel(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for LargeWidgetViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for LargeWidgetViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

__n128 initializeWithTake for LargeWidgetViewModel(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for LargeWidgetViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for LargeWidgetViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LargeWidgetViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LargeWidgetViewModel()
{
  return &type metadata for LargeWidgetViewModel;
}

uint64_t destroy for MediumWidgetViewModel(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
}

uint64_t initializeWithCopy for MediumWidgetViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for MediumWidgetViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t assignWithTake for MediumWidgetViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for MediumWidgetViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MediumWidgetViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MediumWidgetViewModel()
{
  return &type metadata for MediumWidgetViewModel;
}

ValueMetadata *type metadata accessor for SmallWidgetViewModel()
{
  return &type metadata for SmallWidgetViewModel;
}

ValueMetadata *type metadata accessor for CircularWidgetViewModel()
{
  return &type metadata for CircularWidgetViewModel;
}

uint64_t sub_100051294(char a1)
{
  uint64_t *v1;
  int v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[64];

  v2 = a1 & 1;
  v3 = sub_100005F78(&qword_1000A0DD0);
  inited = swift_initStackObject(v3, v21);
  *(_OWORD *)(inited + 16) = xmmword_10007F170;
  v6 = *v1;
  v5 = v1[1];
  *(_QWORD *)(inited + 32) = *v1;
  *(_QWORD *)(inited + 40) = v5;
  swift_bridgeObjectRetain(v5);
  v8 = sub_100051468(v2);
  v9 = v7;
  *(_QWORD *)(inited + 48) = v8;
  *(_QWORD *)(inited + 56) = v7;
  if (!v5)
  {
    v10 = (char *)&_swiftEmptyArrayStorage;
    if (!v7)
      goto LABEL_12;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain(v5);
  v10 = sub_1000408F8(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
  v12 = *((_QWORD *)v10 + 2);
  v11 = *((_QWORD *)v10 + 3);
  if (v12 >= v11 >> 1)
    v10 = sub_1000408F8((char *)(v11 > 1), v12 + 1, 1, v10);
  *((_QWORD *)v10 + 2) = v12 + 1;
  v13 = &v10[16 * v12];
  *((_QWORD *)v13 + 4) = v6;
  *((_QWORD *)v13 + 5) = v5;
  if (v9)
  {
LABEL_7:
    swift_bridgeObjectRetain(v9);
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      v10 = sub_1000408F8(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v15 = *((_QWORD *)v10 + 2);
    v14 = *((_QWORD *)v10 + 3);
    if (v15 >= v14 >> 1)
      v10 = sub_1000408F8((char *)(v14 > 1), v15 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v15 + 1;
    v16 = &v10[16 * v15];
    *((_QWORD *)v16 + 4) = v8;
    *((_QWORD *)v16 + 5) = v9;
  }
LABEL_12:
  swift_release(inited);
  v17 = sub_100005F78(&qword_1000A0DD8);
  v18 = sub_100007F64(&qword_1000A0DE0, &qword_1000A0DD8, (uint64_t)&protocol conformance descriptor for [A]);
  v19 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v17, v18);
  swift_bridgeObjectRelease(v10);
  return v19;
}

uint64_t sub_100051468(int a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  Swift::String v32;
  char *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  unint64_t v39;
  Swift::String v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  char *v49;
  uint64_t v50;
  Swift::String v51;
  unint64_t v52;
  char *v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  unint64_t v57;
  Swift::String v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t ObjCClassFromMetadata;
  id v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  int v79;
  double v80;
  __int128 v81;
  _OWORD v82[4];
  char v83;
  _BYTE v84[16];
  double v85;
  char v86;

  v79 = a1;
  v78 = type metadata accessor for String.LocalizationValue(0);
  v76 = *(_QWORD *)(v78 - 8);
  v2 = __chkstk_darwin(v78);
  v74 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v75 = (char *)&v65 - v4;
  v73 = type metadata accessor for NumberFormatStyleConfiguration.Precision(0);
  v72 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v77 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for Locale(0);
  v6 = *(_QWORD *)(v71 - 8);
  v7 = __chkstk_darwin(v71);
  v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v65 - v10;
  v12 = sub_100005F78(&qword_1000A2338);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v65 - v17;
  v19 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v65 - v23;
  v25 = v1[3];
  v82[1] = v1[2];
  v82[2] = v25;
  v82[3] = v1[4];
  v83 = *((_BYTE *)v1 + 80);
  v26 = v1[1];
  v81 = *v1;
  v82[0] = v26;
  sub_100007984((uint64_t)v82, (uint64_t)v84, &qword_1000A2AD0);
  sub_100007984((uint64_t)v84, (uint64_t)&v85, &qword_1000A2AD0);
  if ((v86 & 1) != 0)
    return 0;
  v66 = v16;
  v67 = v13;
  v27 = v77;
  v68 = v18;
  v69 = v9;
  v70 = v6;
  v28 = v78;
  v29 = v85;
  if (v85 == 0.0)
    return 0;
  if ((v79 & 1) != 0)
  {
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
    v51._countAndFlagsBits = 0;
    v51._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v51);
    v80 = v29;
    v33 = v11;
    static Locale.autoupdatingCurrent.getter();
    v52 = sub_10003BAFC();
    v53 = v66;
    FloatingPointFormatStyle.Percent.init(locale:)(v11, &type metadata for Double, v52);
    static NumberFormatStyleConfiguration.Precision.fractionLength(_:)(0);
    v54 = v68;
    FloatingPointFormatStyle.Percent.precision(_:)(v27, v12);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v27, v73);
    v55 = *(void (**)(char *, uint64_t))(v67 + 8);
    v55(v53, v12);
    v56 = sub_100007F64(&qword_1000A2348, &qword_1000A2338, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent);
    v57 = sub_1000075E8();
    String.LocalizationValue.StringInterpolation.appendInterpolation<A, B>(_:format:)(&v80, v54, &type metadata for Double, v12, v56, v57);
    v55(v54, v12);
    v58._countAndFlagsBits = 0;
    v58._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v58);
    v41 = v75;
    v59 = String.LocalizationValue.init(stringInterpolation:)(v22);
    static Locale.current.getter(v59);
    v43 = v76;
    v60 = v74;
    v45 = v28;
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v74, v41, v28);
    v61 = type metadata accessor for BundleFinder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v61);
    v63 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    v64 = v69;
    static Locale.current.getter(v63);
    v50 = String.init(localized:defaultValue:table:bundle:locale:comment:)("Widget_ReadingProgress_Short", 28, 2, v60, 0, 0, v63, v64, "Percent of book complete ('xx%'); short version when the long version can't fit",
            79,
            2);
  }
  else
  {
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 1);
    v32._countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v32);
    v80 = v29;
    v33 = v11;
    static Locale.autoupdatingCurrent.getter();
    v34 = sub_10003BAFC();
    v35 = v66;
    FloatingPointFormatStyle.Percent.init(locale:)(v11, &type metadata for Double, v34);
    static NumberFormatStyleConfiguration.Precision.fractionLength(_:)(0);
    v36 = v68;
    FloatingPointFormatStyle.Percent.precision(_:)(v27, v12);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v27, v73);
    v37 = *(void (**)(char *, uint64_t))(v67 + 8);
    v37(v35, v12);
    v38 = sub_100007F64(&qword_1000A2348, &qword_1000A2338, (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>.Percent);
    v39 = sub_1000075E8();
    String.LocalizationValue.StringInterpolation.appendInterpolation<A, B>(_:format:)(&v80, v36, &type metadata for Double, v12, v38, v39);
    v37(v36, v12);
    v40._countAndFlagsBits = 0x74656C706D6F6320;
    v40._object = (void *)0xE900000000000065;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v40);
    v41 = v75;
    v42 = String.LocalizationValue.init(stringInterpolation:)(v24);
    static Locale.current.getter(v42);
    v43 = v76;
    v44 = v74;
    v45 = v28;
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v74, v41, v28);
    v46 = type metadata accessor for BundleFinder();
    v47 = swift_getObjCClassFromMetadata(v46);
    v48 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", v47);
    v49 = v69;
    static Locale.current.getter(v48);
    v50 = String.init(localized:defaultValue:table:bundle:locale:comment:)("Widget_ReadingProgress_Long", 27, 2, v44, 0, 0, v48, v49, "Percent of book complete ('xx%'); long version when there's enough space, e.g. large widget single book",
            103,
            2);
  }
  v30 = v50;
  (*(void (**)(char *, uint64_t))(v70 + 8))(v33, v71);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v45);
  return v30;
}

uint64_t sub_100051B08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjCClassFromMetadata;
  id v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;
  char v32;

  v1 = v0;
  v28 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v28 - 8);
  v3 = __chkstk_darwin(v28);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v27 - v6;
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v27 - v13;
  v15 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007984(v1 + 8, (uint64_t)v30, &qword_1000A2AD8);
  sub_100007984((uint64_t)v30, (uint64_t)&v31, &qword_1000A2AD8);
  v18 = 0;
  if ((v32 & 1) == 0)
  {
    v19 = v31;
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(22, 1);
    v20._countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v20);
    v29 = v19;
    String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v29, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
    v21._object = (void *)0x800000010007DFF0;
    v21._countAndFlagsBits = 0xD000000000000016;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v21);
    v22 = String.LocalizationValue.init(stringInterpolation:)(v17);
    static Locale.current.getter(v22);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v23 = type metadata accessor for BundleFinder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v23);
    v25 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    static Locale.current.getter(v25);
    v18 = String.init(localized:defaultValue:table:bundle:locale:comment:)("minutes to daily goal", 21, 2, v12, 0, 0, v25, v5, "Remaining time to reach daily reading goal label in large widget", 64, 2);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v28);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  return v18;
}

uint64_t sub_100051DA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjCClassFromMetadata;
  id v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;
  char v32;

  v1 = v0;
  v28 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v28 - 8);
  v3 = __chkstk_darwin(v28);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v27 - v6;
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v27 - v13;
  v15 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007984(v1 + 8, (uint64_t)v30, &qword_1000A2AD8);
  sub_100007984((uint64_t)v30, (uint64_t)&v31, &qword_1000A2AD8);
  v18 = 0;
  if ((v32 & 1) == 0)
  {
    v19 = v31;
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(12, 1);
    v20._countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v20);
    v29 = v19;
    String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v29, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
    v21._countAndFlagsBits = 0x206F74206E696D20;
    v21._object = (void *)0xEC0000006C616F67;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v21);
    v22 = String.LocalizationValue.init(stringInterpolation:)(v17);
    static Locale.current.getter(v22);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v23 = type metadata accessor for BundleFinder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v23);
    v25 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    static Locale.current.getter(v25);
    v18 = String.init(localized:defaultValue:table:bundle:locale:comment:)("N_MIN_TO_GOAL", 13, 2, v12, 0, 0, v25, v5, "Remaining time to reach daily reading goal label in small widget", 64, 2);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v28);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  return v18;
}

uint64_t sub_100052044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjCClassFromMetadata;
  id v29;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  char v35;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v31 - v7;
  v9 = type metadata accessor for String.LocalizationValue(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v31 - v14;
  v16 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(*(_QWORD *)(v1 + 32) + 16)
    && (sub_100007984(v1 + 8, (uint64_t)v33, &qword_1000A2AD8),
        v17 = sub_100007984((uint64_t)v33, (uint64_t)&v34, &qword_1000A2AD8),
        (v35 & 1) == 0))
  {
    v23 = v34;
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(12, 1);
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v24);
    v32 = v23;
    String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v32, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
    v25._countAndFlagsBits = 0x206F74206E696D20;
    v25._object = (void *)0xEC0000006C616F67;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v25);
    v26 = String.LocalizationValue.init(stringInterpolation:)(v19);
    static Locale.current.getter(v26);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
    v27 = type metadata accessor for BundleFinder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v27);
    v29 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    static Locale.current.getter(v29);
    v22 = String.init(localized:defaultValue:table:bundle:locale:comment:)("N_MIN_TO_GOAL", 13, 2, v13, 0, 0, v29, v6, "Remaining time to reach daily reading goal label in medium widget", 65, 2);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
  else
  {
    v20 = static os_log_type_t.error.getter(v17);
    sub_1000523EC();
    v21 = (void *)static OS_os_log.widget.getter();
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "MediumWidgetViewModel: Books array is empty. No data for remaining reading time", 79, 2, _swiftEmptyArrayStorage);

    return 0;
  }
  return v22;
}

BOOL sub_100052340(char *a1, char *a2)
{
  return *(float *)&dword_1000806D0[*a1] == *(float *)&dword_1000806D0[*a2];
}

Swift::Int sub_100052364()
{
  char *v0;

  return sub_10003EBD4(0, *v0);
}

void sub_100052370()
{
  char *v0;

  Hasher._combine(_:)(dword_1000806D0[*v0]);
}

Swift::Int sub_1000523A4(uint64_t a1)
{
  char *v1;

  return sub_10003EBD4(a1, *v1);
}

uint64_t sub_1000523AC@<X0>(float *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100052640(*a1);
  *a2 = result;
  return result;
}

float sub_1000523D4@<S0>(float *a1@<X8>)
{
  char *v1;
  float result;

  result = *(float *)&dword_1000806D0[*v1];
  *a1 = result;
  return result;
}

unint64_t sub_1000523EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2AE0;
  if (!qword_1000A2AE0)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000A2AE0);
  }
  return result;
}

uint64_t sub_100052428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  uint64_t v18;
  _BYTE v20[16];

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v20[-v5];
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v20[-v12];
  v14 = String.LocalizationValue.init(stringLiteral:)(0x1000000000000011, 0x800000010007E060);
  static Locale.current.getter(v14);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v15);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v1 + 16))(v4, v6, v0);
  v18 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v17, v4, "Today’s Reading section title - Large widget", 46, 0);
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v6, v0);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  return v18;
}

uint64_t sub_1000525F0()
{
  return sub_1000254B4(0xD00000000000002FLL, 0x800000010007DF50, (uint64_t)"Shorter string for empty state small widget when there are zero books", 69);
}

uint64_t sub_100052618()
{
  return sub_1000254B4(0xD000000000000016, 0x800000010007DEE0, (uint64_t)"Shortest string for empty state small widget when there are zero books", 70);
}

uint64_t sub_100052640(float a1)
{
  unsigned int v2;

  if (a1 == 0.0)
    return 0;
  if (a1 == 0.25)
    return 1;
  if (a1 == 0.75)
    v2 = 3;
  else
    v2 = 4;
  if (a1 == 0.5)
    return 2;
  else
    return v2;
}

uint64_t sub_10005268C()
{
  return sub_1000254B4(0x1000000000000028, 0x800000010007DE50, (uint64_t)"Empty state", 11);
}

uint64_t storeEnumTagSinglePayload for WidgetRelevance(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100052700 + 4 * byte_1000816AD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100052734 + 4 * asc_1000816A8[v4]))();
}

uint64_t sub_100052734(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005273C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100052744);
  return result;
}

uint64_t sub_100052750(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100052758);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10005275C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100052764(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WidgetRelevance()
{
  return &type metadata for WidgetRelevance;
}

unint64_t sub_100052784()
{
  unint64_t result;

  result = qword_1000A2AE8;
  if (!qword_1000A2AE8)
  {
    result = swift_getWitnessTable(&unk_100081870, &type metadata for WidgetRelevance);
    atomic_store(result, (unint64_t *)&qword_1000A2AE8);
  }
  return result;
}

id sub_1000527C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  id result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = type metadata accessor for WidgetRenderingMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static WidgetRenderingMode.fullColor.getter(v5);
  LOBYTE(a1) = static WidgetRenderingMode.== infix(_:_:)(a1, v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  if ((a1 & 1) == 0)
  {
    if (qword_1000A0628 != -1)
      swift_once(&qword_1000A0628, sub_100013F18);
    sub_100006C68(qword_1000AA270, qword_1000AA288);
    v12 = *(_QWORD *)(v1 + 40);
    v11 = *(_QWORD *)(v1 + 32);
    v13 = 0;
    return sub_10003C8E4(v11, v12, v13);
  }
  if (qword_1000A0628 != -1)
    swift_once(&qword_1000A0628, sub_100013F18);
  sub_100006C68(qword_1000AA270, qword_1000AA288);
  v8 = *(_QWORD *)(v1 + 32);
  v9 = *(_QWORD *)(v1 + 40);
  result = sub_10003C8E4(v8, v9, 0);
  if (!result)
  {
    sub_100006C68(qword_1000AA270, qword_1000AA288);
    v11 = v8;
    v12 = v9;
    v13 = 2;
    return sub_10003C8E4(v11, v12, v13);
  }
  return result;
}

ValueMetadata *type metadata accessor for AppIconBackgroundView()
{
  return &type metadata for AppIconBackgroundView;
}

uint64_t sub_100052924(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000844AC, 1);
}

double sub_100052934@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double result;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;

  v2 = sub_100005F78(&qword_1000A23A0);
  v3 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10007F170;
  if (qword_1000A06D8 != -1)
    swift_once(&qword_1000A06D8, sub_100052A68);
  v4 = qword_1000A2AF0;
  *(_QWORD *)(v3 + 32) = qword_1000A2AF0;
  v5 = qword_1000A06E0;
  swift_retain(v4);
  if (v5 != -1)
    swift_once(&qword_1000A06E0, sub_100052A84);
  v6 = qword_1000A2AF8;
  *(_QWORD *)(v3 + 40) = qword_1000A2AF8;
  *(_QWORD *)&v16[0] = v3;
  specialized Array._endMutation()();
  v7 = swift_retain(v6);
  v8 = static UnitPoint.top.getter(v7);
  v10 = v9;
  v11 = static UnitPoint.bottom.getter();
  v13 = v12;
  Gradient.init(colors:)(v3);
  LinearGradient.init(gradient:startPoint:endPoint:)(v16, v8, v10, v11, v13);
  result = *(double *)v16;
  v15 = v16[1];
  *(_OWORD *)a1 = v16[0];
  *(_OWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 32) = v17;
  return result;
}

uint64_t sub_100052A68(uint64_t a1)
{
  return sub_100052AB0(1.0, 0.658823529, 0.0, a1, &qword_1000A2AF0);
}

uint64_t sub_100052A84(uint64_t a1)
{
  return sub_100052AB0(0.976470588, 0.403921569, 0.117647059, a1, &qword_1000A2AF8);
}

uint64_t sub_100052AB0(double a1, double a2, double a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin();
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v11 + 104))(v10, enum case for Color.RGBColorSpace.sRGB(_:));
  result = Color.init(_:red:green:blue:opacity:)(v10, a1, a2, a3, 1.0);
  *a5 = result;
  return result;
}

unint64_t sub_100052B60()
{
  unint64_t result;

  result = qword_1000A2B00;
  if (!qword_1000A2B00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinearGradient, &type metadata for LinearGradient);
    atomic_store(result, (unint64_t *)&qword_1000A2B00);
  }
  return result;
}

uint64_t destroy for SmallBookProgressView(uint64_t a1)
{
  sub_1000075DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 112));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 144));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 168));
  return swift_release(*(_QWORD *)(a1 + 192));
}

uint64_t initializeWithCopy for SmallBookProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = v11;
  v12 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v12;
  v13 = *(void **)(a2 + 120);
  v14 = *(void **)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v13;
  *(_QWORD *)(a1 + 128) = v14;
  v15 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v15;
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  v16 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v16;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  v18 = *(_QWORD *)(a2 + 192);
  v17 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v18;
  *(_QWORD *)(a1 + 200) = v17;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  v19 = v13;
  v20 = v14;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_retain(v18);
  return a1;
}

uint64_t assignWithCopy for SmallBookProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  sub_1000075DC(v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 80);
  v16 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v17;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = *(void **)(a1 + 120);
  v21 = *(void **)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v21;
  v22 = v21;

  v23 = *(void **)(a2 + 128);
  v24 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v23;
  v25 = v23;

  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v26 = *(_QWORD *)(a2 + 144);
  v27 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v28 = *(_QWORD *)(a2 + 168);
  v29 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v30 = *(_QWORD *)(a2 + 192);
  v31 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v30;
  swift_retain(v30);
  swift_release(v31);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  return a1;
}

__n128 initializeWithTake for SmallBookProgressView(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for SmallBookProgressView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 32) = v4;
  sub_1000075DC(v5, v6, v7, v8, v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 112));
  v12 = *(void **)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);

  v13 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);

  v14 = *(_QWORD *)(a2 + 144);
  v15 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  v16 = *(_QWORD *)(a2 + 168);
  v17 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v16;
  swift_bridgeObjectRelease(v17);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  v18 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_release(v18);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for SmallBookProgressView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 208))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 112);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SmallBookProgressView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 112) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 208) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SmallBookProgressView()
{
  return &type metadata for SmallBookProgressView;
}

uint64_t sub_1000530A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008450C, 1);
}

uint64_t sub_1000530B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _OWORD v29[2];
  char v30;
  _BYTE v31[40];

  v3 = sub_100005F78(&qword_1000A2B08);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)v29 - v7;
  v9 = sub_100005F78(&qword_1000A2B10);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v12 = static VerticalAlignment.center.getter(v10);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v13 = sub_100005F78(&qword_1000A2B18);
  v14 = (uint64_t)&v12[*(int *)(v13 + 44)];
  *(_QWORD *)v8 = static HorizontalAlignment.leading.getter(v13);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v15 = sub_100005F78(&qword_1000A2B20);
  sub_1000532E0(v1, (uint64_t)&v8[*(int *)(v15 + 44)]);
  sub_1000079C8((uint64_t)v8, (uint64_t)v6, &qword_1000A2B08);
  sub_1000079C8((uint64_t)v6, v14, &qword_1000A2B08);
  v16 = v14 + *(int *)(sub_100005F78(&qword_1000A2B28) + 48);
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  sub_100007A0C((uint64_t)v8, &qword_1000A2B08);
  sub_100007A0C((uint64_t)v6, &qword_1000A2B08);
  v17 = *(_OWORD *)(v1 + 16);
  v29[0] = *(_OWORD *)v1;
  v29[1] = v17;
  v30 = *(_BYTE *)(v1 + 32);
  sub_100007984((uint64_t)v29, (uint64_t)v31, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  v18 = sub_100024DBC();
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v25 = sub_10000DBE0((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v26 = static Edge.Set.all.getter(v25);
  sub_1000079C8((uint64_t)v12, a1, &qword_1000A2B10);
  v27 = a1 + *(int *)(sub_100005F78(&qword_1000A2B30) + 36);
  *(_BYTE *)v27 = v26;
  *(double *)(v27 + 8) = v18;
  *(_QWORD *)(v27 + 16) = v20;
  *(_QWORD *)(v27 + 24) = v22;
  *(_QWORD *)(v27 + 32) = v24;
  *(_BYTE *)(v27 + 40) = 0;
  return sub_100007A0C((uint64_t)v12, &qword_1000A2B10);
}

uint64_t sub_1000532E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;
  char v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  _QWORD *v35;
  char v36;
  __int128 v37;
  double v38;
  double v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD v82[3];
  _OWORD v83[2];
  char v84;
  _BYTE v85[40];
  _OWORD v86[2];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[24];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  char v104;

  v72 = a2;
  v3 = sub_100005F78(&qword_1000A1798);
  __chkstk_darwin(v3);
  v79 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100005F78(&qword_1000A2B38);
  v5 = __chkstk_darwin(v78);
  v81 = (uint64_t)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v77 = (uint64_t)&v72 - v8;
  __chkstk_darwin(v7);
  v80 = (uint64_t)&v72 - v9;
  v73 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for BookCoverView(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v72 - v17;
  v74 = sub_100005F78(&qword_1000A0DC0);
  v19 = __chkstk_darwin(v74);
  v76 = (uint64_t)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v72 - v22;
  __chkstk_darwin(v21);
  v75 = (uint64_t)&v72 - v24;
  v25 = *(_OWORD *)(a1 + 152);
  v91 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)v92 = v25;
  v26 = *(_OWORD *)(a1 + 120);
  *(_QWORD *)&v92[16] = *(_QWORD *)(a1 + 168);
  v27 = *(_OWORD *)(a1 + 56);
  v28 = *(_OWORD *)(a1 + 88);
  v87 = *(_OWORD *)(a1 + 72);
  v88 = v28;
  v89 = *(_OWORD *)(a1 + 104);
  v90 = v26;
  v86[0] = *(_OWORD *)(a1 + 40);
  v86[1] = v27;
  v95 = v89;
  v96 = v26;
  v97 = v91;
  v93 = v87;
  v94 = v28;
  v98 = v92[0];
  sub_100007918(v86);
  sub_100006104((uint64_t)&v93, (uint64_t)v12);
  sub_100007494((uint64_t)v86);
  v101 = v95;
  v102 = v96;
  v103 = v97;
  v104 = v98;
  v99 = v93;
  v100 = v94;
  v29 = sub_100013C4C();
  if (*(_QWORD *)&v92[16])
  {
    if (*(_OWORD *)&v92[8] == v101)
      v30 = 1;
    else
      v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v101, *((_QWORD *)&v101 + 1), *(_QWORD *)&v92[8], *(_QWORD *)&v92[16], 0);
  }
  else
  {
    v30 = 0;
  }
  *(_QWORD *)v16 = swift_getKeyPath(&unk_100081988);
  v31 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v16, v31, 0);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v16[v13[5]], v12, v73);
  v16[v13[6]] = v29 & 1;
  v32 = &v16[v13[7]];
  v33 = v96;
  *((_OWORD *)v32 + 2) = v95;
  *((_OWORD *)v32 + 3) = v33;
  *((_OWORD *)v32 + 4) = v97;
  v32[80] = v98;
  v34 = v94;
  *(_OWORD *)v32 = v93;
  *((_OWORD *)v32 + 1) = v34;
  v16[v13[8]] = v30 & 1;
  v16[v13[9]] = 0;
  sub_10000DEF8((uint64_t)v16, (uint64_t)v18);
  v35 = sub_10000DF3C(&v93);
  v36 = static Edge.Set.trailing.getter(v35);
  v37 = *(_OWORD *)(a1 + 16);
  v83[0] = *(_OWORD *)a1;
  v83[1] = v37;
  v84 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v83, (uint64_t)v85, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v85, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v39 = v38;
  sub_10000DBE0((uint64_t)v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v40 = *(_QWORD *)(a1 + 176);
  v41 = EdgeInsets.init(_all:)(v39 + *(double *)(a1 + 200));
  v43 = v42;
  v45 = v44;
  v47 = v46;
  sub_1000078D4((uint64_t)v18, (uint64_t)v23, type metadata accessor for BookCoverView);
  v48 = &v23[*(int *)(v74 + 36)];
  *v48 = v36;
  *((double *)v48 + 1) = v41;
  *((_QWORD *)v48 + 2) = v43;
  *((_QWORD *)v48 + 3) = v45;
  *((_QWORD *)v48 + 4) = v47;
  v48[40] = 0;
  sub_100007A48((uint64_t)v18, type metadata accessor for BookCoverView);
  v49 = v75;
  v50 = sub_100007984((uint64_t)v23, v75, &qword_1000A0DC0);
  v51 = static Axis.Set.horizontal.getter(v50);
  v52 = v51;
  v53 = static Axis.Set.vertical.getter(v51);
  v54 = Axis.Set.init(rawValue:)(0);
  v55 = Axis.Set.init(rawValue:)(v54);
  if (Axis.Set.init(rawValue:)(v55 & v52) != v52)
    v54 = Axis.Set.init(rawValue:)(v54 | v52);
  v56 = Axis.Set.init(rawValue:)(v54);
  if (Axis.Set.init(rawValue:)(v56 & v53) != v53)
    LOBYTE(v54) = Axis.Set.init(rawValue:)(v54 | v53);
  v57 = v72;
  v58 = (uint64_t)v79;
  *v79 = v54;
  v59 = sub_100005F78(&qword_1000A17D0);
  v60 = sub_100053904(a1, v58 + *(int *)(v59 + 44));
  v61 = static HorizontalAlignment.center.getter(v60);
  v62 = static VerticalAlignment.firstTextBaseline.getter();
  _FrameLayout.init(width:height:alignment:)(v82, 0, 1, v40, 0, v61, v62);
  v63 = v77;
  sub_1000079C8(v58, v77, &qword_1000A1798);
  v64 = (_OWORD *)(v63 + *(int *)(v78 + 36));
  v65 = v82[1];
  *v64 = v82[0];
  v64[1] = v65;
  v64[2] = v82[2];
  sub_100007A0C(v58, &qword_1000A1798);
  v66 = v80;
  sub_100007984(v63, v80, &qword_1000A2B38);
  v67 = v76;
  sub_1000079C8(v49, v76, &qword_1000A0DC0);
  v68 = v81;
  sub_1000079C8(v66, v81, &qword_1000A2B38);
  sub_1000079C8(v67, v57, &qword_1000A0DC0);
  v69 = sub_100005F78(&qword_1000A2B40);
  sub_1000079C8(v68, v57 + *(int *)(v69 + 48), &qword_1000A2B38);
  v70 = v57 + *(int *)(v69 + 64);
  *(_QWORD *)v70 = 0;
  *(_BYTE *)(v70 + 8) = 0;
  sub_100007A0C(v66, &qword_1000A2B38);
  sub_100007A0C(v49, &qword_1000A0DC0);
  sub_100007A0C(v68, &qword_1000A2B38);
  return sub_100007A0C(v67, &qword_1000A0DC0);
}

uint64_t sub_100053904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;

  v40 = a2;
  v3 = (int *)type metadata accessor for LabelView(0);
  v4 = __chkstk_darwin(v3);
  v39 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v39 - v6);
  v8 = sub_100005F78(&qword_1000A17D8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v39 - v12;
  v14 = *(_OWORD *)(a1 + 120);
  v15 = *(_OWORD *)(a1 + 152);
  v47 = *(_OWORD *)(a1 + 136);
  v48 = v15;
  v49 = *(_QWORD *)(a1 + 168);
  v16 = *(_OWORD *)(a1 + 56);
  v17 = *(_OWORD *)(a1 + 88);
  v43 = *(_OWORD *)(a1 + 72);
  v44 = v17;
  v45 = *(_OWORD *)(a1 + 104);
  v46 = v14;
  v18 = *(_OWORD *)(a1 + 40);
  v42 = v16;
  v41 = v18;
  v52 = v45;
  v53 = v14;
  v54 = v47;
  v50 = v43;
  v51 = v17;
  v55 = v48;
  v19 = sub_100051468(0);
  v21 = v20;
  v22 = *(_QWORD *)(a1 + 192);
  swift_retain(v22);
  v24 = static HierarchicalShapeStyle.primary.getter(v23);
  *v7 = swift_getKeyPath(&unk_100081988);
  v25 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v7, v25, 0);
  v26 = (_QWORD *)((char *)v7 + v3[5]);
  *v26 = v19;
  v26[1] = v21;
  *(_QWORD *)((char *)v7 + v3[6]) = v22;
  v27 = (char *)v7 + v3[7];
  *(_QWORD *)v27 = v24;
  *((_QWORD *)v27 + 1) = 0;
  *((_WORD *)v27 + 8) = 1;
  sub_1000078D4((uint64_t)v7, (uint64_t)v11, type metadata accessor for LabelView);
  *(_WORD *)&v11[*(int *)(v8 + 36)] = 257;
  sub_100007A48((uint64_t)v7, type metadata accessor for LabelView);
  sub_100007984((uint64_t)v11, (uint64_t)v13, &qword_1000A17D8);
  v28 = sub_100051468(1);
  v30 = v29;
  swift_retain(v22);
  v32 = static HierarchicalShapeStyle.primary.getter(v31);
  *v7 = swift_getKeyPath(&unk_100081988);
  swift_storeEnumTagMultiPayload(v7, v25, 0);
  v33 = (_QWORD *)((char *)v7 + v3[5]);
  *v33 = v28;
  v33[1] = v30;
  *(_QWORD *)((char *)v7 + v3[6]) = v22;
  v34 = (char *)v7 + v3[7];
  *(_QWORD *)v34 = v32;
  *((_QWORD *)v34 + 1) = 0;
  *((_WORD *)v34 + 8) = 1;
  sub_1000079C8((uint64_t)v13, (uint64_t)v11, &qword_1000A17D8);
  v35 = v39;
  sub_1000078D4((uint64_t)v7, v39, type metadata accessor for LabelView);
  v36 = v40;
  sub_1000079C8((uint64_t)v11, v40, &qword_1000A17D8);
  v37 = sub_100005F78(&qword_1000A17E0);
  sub_1000078D4(v35, v36 + *(int *)(v37 + 48), type metadata accessor for LabelView);
  sub_100007A48((uint64_t)v7, type metadata accessor for LabelView);
  sub_100007A0C((uint64_t)v13, &qword_1000A17D8);
  sub_100007A48(v35, type metadata accessor for LabelView);
  return sub_100007A0C((uint64_t)v11, &qword_1000A17D8);
}

uint64_t sub_100053C34@<X0>(uint64_t a1@<X8>)
{
  return sub_1000530B4(a1);
}

uint64_t initializeWithCopy for SmallBookProgressView.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for SmallBookProgressView.ViewConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_retain(v4);
  swift_release(v5);
  a1[3] = a2[3];
  return a1;
}

__n128 initializeWithTake for DayViewModel.DayNameViewModel(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for SmallBookProgressView.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v4);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SmallBookProgressView.ViewConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SmallBookProgressView.ViewConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SmallBookProgressView.ViewConfiguration()
{
  return &type metadata for SmallBookProgressView.ViewConfiguration;
}

unint64_t sub_100053E18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2B48;
  if (!qword_1000A2B48)
  {
    v1 = sub_100005FC0(&qword_1000A2B30);
    sub_100053E84();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2B48);
  }
  return result;
}

unint64_t sub_100053E84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2B50;
  if (!qword_1000A2B50)
  {
    v1 = sub_100005FC0(&qword_1000A2B10);
    result = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2B50);
  }
  return result;
}

uint64_t sub_100053ED0()
{
  id v0;
  id v1;
  NSString v2;
  id v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v0 = objc_msgSend((id)objc_opt_self(BUAppGroup), "books");
  v1 = objc_msgSend(v0, "userDefaults");

  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "objectForKey:", v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v6, v3);

    swift_unknownObjectRelease(v3);
  }
  else
  {

    memset(v6, 0, sizeof(v6));
  }
  sub_100053FFC((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    if ((swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      return v5;
  }
  else
  {
    sub_100054044((uint64_t)v7);
  }
  return 0;
}

uint64_t sub_100053FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F78(&qword_1000A1290);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100054044(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F78(&qword_1000A1290);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for NowPlayingInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for NowPlayingInfo(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for NowPlayingInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for NowPlayingInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NowPlayingInfo(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NowPlayingInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NowPlayingInfo()
{
  return &type metadata for NowPlayingInfo;
}

ValueMetadata *type metadata accessor for BooksAssetAppIntentsPerformer()
{
  return &type metadata for BooksAssetAppIntentsPerformer;
}

uint64_t destroy for MediumTwoThreeBookView(uint64_t a1)
{
  sub_1000075DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  swift_release(*(_QWORD *)(a1 + 136));
  return swift_release(*(_QWORD *)(a1 + 208));
}

uint64_t initializeWithCopy for MediumTwoThreeBookView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v12 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v12;
  v13 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v13;
  v14 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v14;
  v15 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 208) = v15;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_retain(v12);
  swift_retain(v15);
  return a1;
}

uint64_t assignWithCopy for MediumTwoThreeBookView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  sub_1000075DC(v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 72);
  v16 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a2 + 96);
  v18 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a2 + 136);
  v20 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v19;
  swift_retain(v19);
  swift_release(v20);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v21 = *(_QWORD *)(a2 + 208);
  v22 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v21;
  swift_retain(v21);
  swift_release(v22);
  return a1;
}

__n128 initializeWithTake for MediumTwoThreeBookView(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for MediumTwoThreeBookView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 32) = v4;
  sub_1000075DC(v5, v6, v7, v8, v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v13 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v13;
  swift_bridgeObjectRelease(v14);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v15 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_release(v15);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v16 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v16;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  v17 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_release(v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for MediumTwoThreeBookView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 216))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MediumTwoThreeBookView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 216) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 216) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MediumTwoThreeBookView()
{
  return &type metadata for MediumTwoThreeBookView;
}

uint64_t sub_100054678(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000845A4, 1);
}

uint64_t sub_100054688@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v37[2];
  char v38;
  _BYTE v39[40];

  v4 = sub_100005F78(&qword_1000A2B60);
  __chkstk_darwin(v4);
  v6 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005F78(&qword_1000A2B68);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static HorizontalAlignment.leading.getter(v8);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v11 = sub_100005F78(&qword_1000A2B70);
  v12 = sub_1000548B0(a1, (uint64_t)&v6[*(int *)(v11 + 44)]);
  v13 = static Edge.Set.leading.getter(v12);
  v14 = *(_OWORD *)(a1 + 16);
  v37[0] = *(_OWORD *)a1;
  v37[1] = v14;
  v38 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v37, (uint64_t)v39, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v16 = v15;
  sub_10000DBE0((uint64_t)v37, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v17 = EdgeInsets.init(_all:)(v16);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  sub_1000079C8((uint64_t)v6, (uint64_t)v10, &qword_1000A2B60);
  v24 = &v10[*(int *)(v7 + 36)];
  *v24 = v13;
  *((double *)v24 + 1) = v17;
  *((_QWORD *)v24 + 2) = v19;
  *((_QWORD *)v24 + 3) = v21;
  *((_QWORD *)v24 + 4) = v23;
  v24[40] = 0;
  v25 = sub_100007A0C((uint64_t)v6, &qword_1000A2B60);
  v26 = static Edge.Set.top.getter(v25);
  sub_10000DBE0((uint64_t)v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  v27 = sub_100024DBC();
  sub_10000DBE0((uint64_t)v37, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v28 = EdgeInsets.init(_all:)(v27);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  sub_1000079C8((uint64_t)v10, a2, &qword_1000A2B68);
  v35 = a2 + *(int *)(sub_100005F78(&qword_1000A2B78) + 36);
  *(_BYTE *)v35 = v26;
  *(double *)(v35 + 8) = v28;
  *(_QWORD *)(v35 + 16) = v30;
  *(_QWORD *)(v35 + 24) = v32;
  *(_QWORD *)(v35 + 32) = v34;
  *(_BYTE *)(v35 + 40) = 0;
  return sub_100007A0C((uint64_t)v10, &qword_1000A2B68);
}

uint64_t sub_1000548B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  double v21;
  __int128 v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v54[12];
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD v72[2];
  char v73;
  _BYTE v74[40];
  uint64_t v75;

  v4 = sub_100005F78(&qword_1000A1888);
  __chkstk_darwin(v4);
  v6 = &v54[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100005F78(&qword_1000A1890);
  v8 = __chkstk_darwin(v7);
  v10 = &v54[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v54[-v11];
  v13 = *(_QWORD *)(a1 + 72);
  v63 = sub_1000560DC();
  v62 = v14;
  v64 = *(_QWORD *)(a1 + 160);
  v15 = *(_QWORD *)(a1 + 184);
  v16 = *(double *)(a1 + 192);
  v17 = *(double *)(a1 + 200);
  v18 = static HorizontalAlignment.center.getter(v63);
  v19 = static VerticalAlignment.firstTextBaseline.getter();
  v20 = _FrameLayout.init(width:height:alignment:)(&v66, 0, 1, v15, 0, v18, v19);
  v61 = v66;
  v60 = v67;
  v59 = v68;
  v58 = v69;
  v57 = v70;
  v56 = v71;
  v55 = static Edge.Set.trailing.getter(v20);
  v21 = v16 + v17;
  v22 = *(_OWORD *)(a1 + 16);
  v72[0] = *(_OWORD *)a1;
  v72[1] = v22;
  v73 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v72, (uint64_t)v74, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v24 = v23;
  sub_10000DBE0((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v25 = EdgeInsets.init(_all:)(v21 + v24);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v32);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  sub_100005F78(&qword_1000A2B80);
  v75 = v13;
  v65 = v13;
  KeyPath = swift_getKeyPath(&unk_100081A78);
  v34 = swift_allocObject(&unk_10009C660, 232, 7);
  v35 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v34 + 176) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v34 + 192) = v35;
  *(_OWORD *)(v34 + 208) = *(_OWORD *)(a1 + 192);
  *(_QWORD *)(v34 + 224) = *(_QWORD *)(a1 + 208);
  v36 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v34 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v34 + 128) = v36;
  v37 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v34 + 144) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v34 + 160) = v37;
  v38 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v34 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v34 + 64) = v38;
  v39 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v34 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v34 + 96) = v39;
  v40 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v34 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v34 + 32) = v40;
  sub_10000DC6C(&v75);
  sub_100025920(a1);
  v41 = sub_100005F78(&qword_1000A0D48);
  v42 = sub_100005F78(&qword_1000A2B88);
  v43 = sub_100007F64(&qword_1000A0D58, &qword_1000A0D48, (uint64_t)&protocol conformance descriptor for [A]);
  v44 = sub_1000562F4();
  v45 = ForEach<>.init(_:id:content:)(&v65, KeyPath, sub_1000562EC, v34, v41, v42, v43, &protocol witness table for String, v44);
  v46 = static Alignment.center.getter(v45);
  sub_1000213F8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v10, 0.0, 1, 0.0, 1, v46, v47);
  sub_100007A0C((uint64_t)v6, &qword_1000A1888);
  sub_100007984((uint64_t)v10, (uint64_t)v12, &qword_1000A1890);
  sub_1000079C8((uint64_t)v12, (uint64_t)v10, &qword_1000A1890);
  v48 = v62;
  *(_QWORD *)a2 = v63;
  *(_QWORD *)(a2 + 8) = v48;
  *(_QWORD *)(a2 + 16) = v61;
  *(_BYTE *)(a2 + 24) = v60;
  *(_QWORD *)(a2 + 32) = v59;
  *(_BYTE *)(a2 + 40) = v58;
  v49 = v56;
  *(_QWORD *)(a2 + 48) = v57;
  *(_QWORD *)(a2 + 56) = v49;
  *(_BYTE *)(a2 + 64) = v55;
  *(double *)(a2 + 72) = v25;
  *(_QWORD *)(a2 + 80) = v27;
  *(_QWORD *)(a2 + 88) = v29;
  *(_QWORD *)(a2 + 96) = v31;
  *(_BYTE *)(a2 + 104) = 0;
  v50 = v64;
  *(_QWORD *)(a2 + 112) = v64;
  *(_BYTE *)(a2 + 120) = 0;
  v51 = sub_100005F78(&qword_1000A2BA8);
  sub_1000079C8((uint64_t)v10, a2 + *(int *)(v51 + 64), &qword_1000A1890);
  v52 = a2 + *(int *)(v51 + 80);
  *(_QWORD *)v52 = v50;
  *(_BYTE *)(v52 + 8) = 0;
  swift_bridgeObjectRetain(v48);
  sub_100007A0C((uint64_t)v12, &qword_1000A1890);
  sub_100007A0C((uint64_t)v10, &qword_1000A1890);
  return swift_bridgeObjectRelease(v48);
}

uint64_t sub_100054D30@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t OpaqueTypeConformance2;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  _QWORD v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;

  v38 = a3;
  v36 = type metadata accessor for AccessibilityChildBehavior(0);
  v5 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005F78(&qword_1000A1898);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005F78(&qword_1000A18A0);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005F78(&qword_1000A2BB0);
  v37 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100005F78(&qword_1000A2B88);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1[3];
  v43 = a1[2];
  v44 = v21;
  v45 = a1[4];
  v46 = *((_BYTE *)a1 + 80);
  v22 = a1[1];
  v41 = *a1;
  v42 = v22;
  *(_QWORD *)v10 = static VerticalAlignment.center.getter(v18);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  v23 = sub_100005F78(&qword_1000A2BB8);
  v24 = sub_1000550A4(a2, (uint64_t)&v41, (uint64_t)&v10[*(int *)(v23 + 44)]);
  v25 = static Alignment.center.getter(v24);
  sub_10002145C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, 0.0, 1, v25, v26);
  sub_100007A0C((uint64_t)v10, &qword_1000A1898);
  v49 = v43;
  v50 = v44;
  v51 = v45;
  v52 = v46;
  v47 = v41;
  v48 = v42;
  v27 = sub_100013C4C();
  if ((v27 & 1) != 0)
    static AccessibilityChildBehavior.contain.getter();
  else
    static AccessibilityChildBehavior.combine.getter(v27);
  v28 = sub_100056388();
  View.accessibilityElement(children:)(v7, v11, v28);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v36);
  sub_100007A0C((uint64_t)v13, &qword_1000A18A0);
  if ((sub_100013C4C() & 1) != 0)
  {
    v29 = 0;
    v30 = 0xE000000000000000;
  }
  else
  {
    v29 = sub_100051294(1);
    v30 = v31;
  }
  v40[0] = v29;
  v40[1] = v30;
  v39[0] = v11;
  v39[1] = v28;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v39, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v33 = sub_1000075E8();
  View.accessibilityLabel<A>(_:)(v40, v14, &type metadata for String, OpaqueTypeConformance2, v33);
  swift_bridgeObjectRelease(v30);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v14);
  return sub_100007984((uint64_t)v20, v38, &qword_1000A2B88);
}

uint64_t sub_1000550A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  char v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  _QWORD *v39;
  char v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t inited;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  _QWORD v105[2];
  char v106[64];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char v112;
  _OWORD v113[3];
  __int128 v114;

  v102 = a3;
  v99 = sub_100005F78(&qword_1000A2BC0);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v104 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005F78(&qword_1000A2BC8);
  v7 = __chkstk_darwin(v6);
  v101 = (uint64_t)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v97 = (char *)&v93 - v10;
  __chkstk_darwin(v9);
  v100 = (uint64_t)&v93 - v11;
  v94 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v94 - 8);
  v13 = __chkstk_darwin(v94);
  v95 = (uint64_t)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v93 - v15;
  v17 = (int *)type metadata accessor for BookCoverView(0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v93 - v21;
  v93 = sub_100005F78(&qword_1000A0DC0);
  v23 = __chkstk_darwin(v93);
  v96 = (uint64_t)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v93 - v26;
  __chkstk_darwin(v25);
  v103 = (uint64_t)&v93 - v28;
  v29 = *(_OWORD *)(a1 + 56);
  v113[0] = *(_OWORD *)(a1 + 40);
  v113[1] = v29;
  v30 = *(_OWORD *)(a1 + 88);
  v113[2] = *(_OWORD *)(a1 + 72);
  v114 = v30;
  sub_100025260((uint64_t)v113);
  sub_10000655C(a2, (uint64_t)v16);
  sub_100025294((uint64_t)v113);
  v31 = *(_OWORD *)(a2 + 48);
  v109 = *(_OWORD *)(a2 + 32);
  v110 = v31;
  v111 = *(_OWORD *)(a2 + 64);
  v112 = *(_BYTE *)(a2 + 80);
  v32 = *(_OWORD *)(a2 + 16);
  v107 = *(_OWORD *)a2;
  v108 = v32;
  v33 = sub_100013C4C();
  if (*((_QWORD *)&v114 + 1))
  {
    if (v114 == v109)
      v34 = 1;
    else
      v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v109, *((_QWORD *)&v109 + 1), v114, *((_QWORD *)&v114 + 1), 0);
  }
  else
  {
    v34 = 0;
  }
  *(_QWORD *)v20 = swift_getKeyPath(&unk_100081AA0);
  v35 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v20, v35, 0);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v20[v17[5]], v16, v94);
  v20[v17[6]] = v33 & 1;
  v36 = &v20[v17[7]];
  v37 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v36 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v36 + 3) = v37;
  *((_OWORD *)v36 + 4) = *(_OWORD *)(a2 + 64);
  v36[80] = *(_BYTE *)(a2 + 80);
  v38 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v36 = *(_OWORD *)a2;
  *((_OWORD *)v36 + 1) = v38;
  v20[v17[8]] = v34 & 1;
  v20[v17[9]] = 0;
  sub_10000DEF8((uint64_t)v20, (uint64_t)v22);
  v39 = sub_10000DF3C((_QWORD *)a2);
  v40 = static Edge.Set.trailing.getter(v39);
  v41 = EdgeInsets.init(_all:)(*(double *)(a1 + 176));
  v43 = v42;
  v45 = v44;
  v47 = v46;
  sub_1000078D4((uint64_t)v22, (uint64_t)v27, type metadata accessor for BookCoverView);
  v48 = &v27[*(int *)(v93 + 36)];
  *v48 = v40;
  *((double *)v48 + 1) = v41;
  *((_QWORD *)v48 + 2) = v43;
  *((_QWORD *)v48 + 3) = v45;
  *((_QWORD *)v48 + 4) = v47;
  v48[40] = 0;
  sub_100007A48((uint64_t)v22, type metadata accessor for BookCoverView);
  sub_100007984((uint64_t)v27, v103, &qword_1000A0DC0);
  sub_100025260((uint64_t)v113);
  v49 = v95;
  sub_10000655C(a2, v95);
  v50 = sub_100025294((uint64_t)v113);
  __chkstk_darwin(v50);
  *(&v93 - 2) = a1;
  *(&v93 - 1) = a2;
  v51 = sub_100005F78(&qword_1000A18B0);
  v52 = sub_10000E208(&qword_1000A2BD0, &qword_1000A18B0, (void (*)(void))sub_10005641C);
  Link.init(destination:label:)(v49, sub_100056414, &v93 - 4, v51, v52);
  v53 = sub_100005F78(&qword_1000A0DD0);
  inited = swift_initStackObject(v53, v106);
  *(_OWORD *)(inited + 16) = xmmword_10007F170;
  v55 = v107;
  *(_OWORD *)(inited + 32) = v107;
  swift_bridgeObjectRetain(*((_QWORD *)&v55 + 1));
  v57 = sub_100051468(0);
  v58 = v56;
  *(_QWORD *)(inited + 48) = v57;
  *(_QWORD *)(inited + 56) = v56;
  if (!*((_QWORD *)&v55 + 1))
  {
    v59 = (char *)_swiftEmptyArrayStorage;
    if (!v56)
      goto LABEL_17;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain(*((_QWORD *)&v55 + 1));
  v59 = sub_1000408F8(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v61 = *((_QWORD *)v59 + 2);
  v60 = *((_QWORD *)v59 + 3);
  if (v61 >= v60 >> 1)
    v59 = sub_1000408F8((char *)(v60 > 1), v61 + 1, 1, v59);
  *((_QWORD *)v59 + 2) = v61 + 1;
  *(_OWORD *)&v59[16 * v61 + 32] = v55;
  if (v58)
  {
LABEL_12:
    swift_bridgeObjectRetain(v58);
    if ((swift_isUniquelyReferenced_nonNull_native(v59) & 1) == 0)
      v59 = sub_1000408F8(0, *((_QWORD *)v59 + 2) + 1, 1, v59);
    v63 = *((_QWORD *)v59 + 2);
    v62 = *((_QWORD *)v59 + 3);
    if (v63 >= v62 >> 1)
      v59 = sub_1000408F8((char *)(v62 > 1), v63 + 1, 1, v59);
    *((_QWORD *)v59 + 2) = v63 + 1;
    v64 = &v59[16 * v63];
    *((_QWORD *)v64 + 4) = v57;
    *((_QWORD *)v64 + 5) = v58;
  }
LABEL_17:
  swift_release(inited);
  v65 = *((_QWORD *)v59 + 2);
  if (v65)
  {
    v66 = v59 + 40;
    v67 = _swiftEmptyArrayStorage;
    do
    {
      v72 = *(v66 - 1);
      v71 = *v66;
      v73 = HIBYTE(*v66) & 0xFLL;
      if ((*v66 & 0x2000000000000000) == 0)
        v73 = v72 & 0xFFFFFFFFFFFFLL;
      if (v73)
      {
        swift_bridgeObjectRetain(*v66);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v67);
        v105[0] = v67;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10005C3B8(0, v67[2] + 1, 1);
          v67 = (_QWORD *)v105[0];
        }
        v69 = v67[2];
        v68 = v67[3];
        if (v69 >= v68 >> 1)
        {
          sub_10005C3B8(v68 > 1, v69 + 1, 1);
          v67 = (_QWORD *)v105[0];
        }
        v67[2] = v69 + 1;
        v70 = &v67[2 * v69];
        v70[4] = v72;
        v70[5] = v71;
      }
      v66 += 2;
      --v65;
    }
    while (v65);
  }
  else
  {
    v67 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v59);
  v105[0] = v67;
  v75 = sub_100005F78(&qword_1000A0DD8);
  v76 = sub_100007F64(&qword_1000A0DE0, &qword_1000A0DD8, (uint64_t)&protocol conformance descriptor for [A]);
  v77 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v75, v76);
  v79 = v78;
  swift_release(v67);
  v105[0] = v77;
  v105[1] = v79;
  v80 = sub_100007F64(&qword_1000A2BF0, &qword_1000A2BC0, (uint64_t)&protocol conformance descriptor for Link<A>);
  v81 = sub_1000075E8();
  v82 = v97;
  v83 = v99;
  v84 = v104;
  View.accessibilityLabel<A>(_:)(v105, v99, &type metadata for String, v80, v81);
  swift_bridgeObjectRelease(v79);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v84, v83);
  v85 = (uint64_t)v82;
  v86 = v100;
  sub_100007984(v85, v100, &qword_1000A2BC8);
  v87 = v103;
  v88 = v96;
  sub_1000079C8(v103, v96, &qword_1000A0DC0);
  v89 = v101;
  sub_1000079C8(v86, v101, &qword_1000A2BC8);
  v90 = v102;
  sub_1000079C8(v88, v102, &qword_1000A0DC0);
  v91 = sub_100005F78(&qword_1000A2BF8);
  sub_1000079C8(v89, v90 + *(int *)(v91 + 48), &qword_1000A2BC8);
  sub_100007A0C(v86, &qword_1000A2BC8);
  sub_100007A0C(v87, &qword_1000A0DC0);
  sub_100007A0C(v89, &qword_1000A2BC8);
  return sub_100007A0C(v88, &qword_1000A0DC0);
}

uint64_t sub_100055950@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v30[2];
  char v31;
  _BYTE v32[40];

  v6 = sub_100005F78(&qword_1000A2BE8);
  __chkstk_darwin(v6);
  v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005F78(&qword_1000A18A8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static HorizontalAlignment.leading.getter(v10);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v13 = sub_100005F78(&qword_1000A2C00);
  v14 = sub_100055B4C((_QWORD *)a1, a2, (uint64_t *)&v8[*(int *)(v13 + 44)]);
  LOBYTE(a2) = static Edge.Set.trailing.getter(v14);
  v15 = *(_OWORD *)(a1 + 16);
  v30[0] = *(_OWORD *)a1;
  v30[1] = v15;
  v31 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v30, (uint64_t)v32, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v17 = v16;
  sub_10000DBE0((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v18 = EdgeInsets.init(_all:)(v17);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  sub_1000079C8((uint64_t)v8, (uint64_t)v12, &qword_1000A2BE8);
  v25 = &v12[*(int *)(v9 + 36)];
  *v25 = (char)a2;
  *((double *)v25 + 1) = v18;
  *((_QWORD *)v25 + 2) = v20;
  *((_QWORD *)v25 + 3) = v22;
  *((_QWORD *)v25 + 4) = v24;
  v25[40] = 0;
  v26 = sub_100007A0C((uint64_t)v8, &qword_1000A2BE8);
  v27 = static Alignment.leading.getter(v26);
  sub_1000214C0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a3, 0.0, 1, 0.0, 1, v27, v28);
  return sub_100007A0C((uint64_t)v12, &qword_1000A18A8);
}

uint64_t sub_100055B4C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  char v17;
  char v18;
  double v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  int v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int16 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 v136;
  char v137;
  uint64_t v138;
  unsigned __int8 v139;
  uint64_t v140;
  unsigned __int8 v141;
  uint64_t v142;
  uint64_t v143;

  v102 = a3;
  v105 = type metadata accessor for LabelView(0);
  v5 = __chkstk_darwin(v105);
  v109 = (uint64_t)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v104 = (uint64_t *)((char *)&v95 - v8);
  if (*(_QWORD *)(a1[9] + 16) == 2)
  {
    v9 = a2[1];
    v95 = a2;
    v96 = a1;
    if (v9)
    {
      v124 = *a2;
      v125 = v9;
      v10 = sub_1000075E8();
      swift_bridgeObjectRetain(v9);
      v11 = Text.init<A>(_:)(&v124, &type metadata for String, v10);
      v13 = v12;
      v15 = v14;
      v16 = (double *)a1;
      v18 = v17 & 1;
      v19 = v16[18];
      v20 = *((_QWORD *)v16 + 19);
      v113 = *((_QWORD *)v16 + 26);
      v22 = Text.foregroundColor(_:)(v21);
      v24 = v23;
      v26 = v25;
      v28 = v27 & 1;
      sub_1000115B8(v11, v13, v18);
      swift_bridgeObjectRelease(v15);
      v29 = Font.weight(_:)(v113, v19);
      v30 = Text.font(_:)(v29, v22, v24, v28, v26);
      v32 = v31;
      v34 = v33;
      v113 = v35;
      swift_release(v29);
      sub_1000115B8(v22, v24, v28);
      swift_bridgeObjectRelease(v26);
      KeyPath = swift_getKeyPath(&unk_100081AD0);
      v114 = v30;
      v115 = v32;
      v116 = v34 & 1;
      v117 = v113;
      v118 = KeyPath;
      v119 = v20;
      v120 = 0u;
      v121 = 0u;
      v122 = 0u;
      v123 = 0;
    }
    else
    {
      v40 = static HierarchicalShapeStyle.primary.getter(v7);
      v41 = v40;
      v42 = *((double *)a1 + 13);
      v43 = a1[16];
      v44 = static Alignment.center.getter(v40);
      v46 = _FrameLayout.init(width:height:alignment:)(&v138, v43, 0, 0, 1, v44, v45);
      v47 = v138;
      v48 = v139;
      v49 = v140;
      v50 = v141;
      v52 = v142;
      v51 = v143;
      LOBYTE(v43) = static Edge.Set.bottom.getter(v46);
      v53 = EdgeInsets.init(_all:)(v42);
      v114 = v41;
      v115 = v47;
      v116 = v48;
      v117 = v49;
      v118 = v50;
      v119 = v52;
      *(_QWORD *)&v120 = v51;
      *((_QWORD *)&v120 + 1) = v43;
      *(double *)&v121 = v53;
      *((_QWORD *)&v121 + 1) = v54;
      *(_QWORD *)&v122 = v55;
      *((_QWORD *)&v122 + 1) = v56;
      v123 = 256;
    }
    v57 = sub_100005F78(&qword_1000A2C10);
    v58 = sub_100005F78(&qword_1000A2C18);
    v59 = sub_100056598();
    v60 = sub_10000E208(&qword_1000A2C38, &qword_1000A2C18, (void (*)(void))sub_10005661C);
    _ConditionalContent<>.init(storage:)(&v114, v57, v58, v59, v60);
    v37 = v124;
    v38 = v125;
    v39 = v126;
    v100 = v135;
    v101 = v134;
    v110 = v133;
    v111 = v132;
    v112 = v127;
    v113 = v128;
    v106 = v130;
    v107 = v129;
    v108 = v131;
    if (v137)
      v61 = 256;
    else
      v61 = 0;
    v103 = v61 | v136;
    a1 = v96;
  }
  else
  {
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v112 = 0;
    v113 = 0;
    v106 = 0;
    v107 = 0;
    v108 = 0;
    v110 = 0;
    v111 = 0;
    v100 = 0;
    v101 = 0;
    v103 = 65280;
  }
  v62 = sub_100051468(1);
  v64 = v63;
  v65 = a1[15];
  v66 = a1[26];
  swift_retain(v66);
  v68 = static HierarchicalShapeStyle.secondary.getter(v67);
  v69 = swift_getKeyPath(&unk_100081AA0);
  v70 = (uint64_t)v104;
  *v104 = v69;
  v71 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v70, v71, 0);
  v72 = v105;
  v73 = (uint64_t *)(v70 + *(int *)(v105 + 20));
  *v73 = v62;
  v73[1] = v64;
  *(_QWORD *)(v70 + *(int *)(v72 + 24)) = v66;
  v74 = v70 + *(int *)(v72 + 28);
  *(_QWORD *)v74 = v68;
  *(_QWORD *)(v74 + 8) = v65;
  *(_WORD *)(v74 + 16) = 0;
  v75 = v109;
  sub_1000078D4(v70, v109, type metadata accessor for LabelView);
  v76 = v102;
  v77 = v37;
  *v102 = v37;
  v76[1] = v38;
  v97 = v37;
  v98 = v39;
  v99 = v38;
  v78 = v112;
  v76[2] = v39;
  v76[3] = v78;
  v79 = v107;
  v76[4] = v113;
  v76[5] = v79;
  v80 = v108;
  v76[6] = v106;
  v76[7] = v80;
  v82 = v110;
  v81 = v111;
  v76[8] = v111;
  v76[9] = v82;
  v83 = v81;
  v110 = v82;
  v111 = v81;
  v85 = v100;
  v84 = v101;
  v76[10] = v101;
  v76[11] = v85;
  LOWORD(v65) = v103;
  *((_WORD *)v76 + 48) = v103;
  v86 = sub_100005F78(&qword_1000A2C08);
  sub_1000078D4(v75, (uint64_t)v76 + *(int *)(v86 + 48), type metadata accessor for LabelView);
  v93 = v83;
  v94 = v82;
  v87 = v77;
  LOBYTE(v77) = v98;
  v88 = v99;
  v89 = v106;
  v90 = v107;
  v91 = v108;
  sub_1000564A0(v87, v99, v98, v112, v113, v107, v106, v108, v93, v94, v84, v85, v65);
  sub_100007A48(v70, type metadata accessor for LabelView);
  sub_100007A48(v109, type metadata accessor for LabelView);
  return sub_10005651C(v97, v88, v77, v112, v113, v90, v89, v91, v111, v110, v84, v85, v65);
}

uint64_t sub_100056048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v12[13];
  uint64_t v13;

  v4 = *(_OWORD *)(v2 + 176);
  v12[10] = *(_OWORD *)(v2 + 160);
  v12[11] = v4;
  v12[12] = *(_OWORD *)(v2 + 192);
  v13 = *(_QWORD *)(v2 + 208);
  v5 = *(_OWORD *)(v2 + 112);
  v12[6] = *(_OWORD *)(v2 + 96);
  v12[7] = v5;
  v6 = *(_OWORD *)(v2 + 144);
  v12[8] = *(_OWORD *)(v2 + 128);
  v12[9] = v6;
  v7 = *(_OWORD *)(v2 + 48);
  v12[2] = *(_OWORD *)(v2 + 32);
  v12[3] = v7;
  v8 = *(_OWORD *)(v2 + 80);
  v12[4] = *(_OWORD *)(v2 + 64);
  v12[5] = v8;
  v9 = *(_OWORD *)(v2 + 16);
  v12[0] = *(_OWORD *)v2;
  v12[1] = v9;
  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v10 = sub_100005F78(&qword_1000A2B58);
  return sub_100054688((uint64_t)v12, a2 + *(int *)(v10 + 44));
}

uint64_t sub_1000560DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  uint64_t v18;
  _BYTE v20[16];

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v20[-v5];
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v20[-v12];
  v14 = String.LocalizationValue.init(stringLiteral:)(0x65756E69746E6F43, 0xE800000000000000);
  static Locale.current.getter(v14);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v15);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v1 + 16))(v4, v6, v0);
  v18 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v17, v4, "Top section title", 17, 2);
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v6, v0);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  return v18;
}

uint64_t sub_1000562A0()
{
  uint64_t v0;

  sub_1000075DC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 152));
  swift_release(*(_QWORD *)(v0 + 224));
  return swift_deallocObject(v0, 232, 7);
}

uint64_t sub_1000562EC@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100054D30(a1, v2 + 16, a2);
}

unint64_t sub_1000562F4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000A2B90;
  if (!qword_1000A2B90)
  {
    v1 = sub_100005FC0(&qword_1000A2B88);
    v2[0] = sub_100005FC0(&qword_1000A18A0);
    v2[1] = sub_100056388();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10001FFC8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2B90);
  }
  return result;
}

unint64_t sub_100056388()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2B98;
  if (!qword_1000A2B98)
  {
    v1 = sub_100005FC0(&qword_1000A18A0);
    sub_100007F64(&qword_1000A2BA0, &qword_1000A1898, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2B98);
  }
  return result;
}

uint64_t sub_100056414@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100055950(*(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24), a1);
}

unint64_t sub_10005641C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2BD8;
  if (!qword_1000A2BD8)
  {
    v1 = sub_100005FC0(&qword_1000A18A8);
    sub_100007F64(&qword_1000A2BE0, &qword_1000A2BE8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2BD8);
  }
  return result;
}

double sub_1000564A0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int16 a13)
{
  double result;

  if (HIBYTE(a13) <= 0xFEu)
    return sub_1000564D4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (unsigned __int16)(a13 & 0x1FF) >> 8);
  return result;
}

double sub_1000564D4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char a14)
{
  double result;

  if ((a14 & 1) == 0)
  {
    sub_1000115A8(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    *(_QWORD *)&result = swift_retain(a5).n128_u64[0];
  }
  return result;
}

uint64_t sub_10005651C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int16 a13)
{
  if (HIBYTE(a13) <= 0xFEu)
    return sub_100056550(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (unsigned __int16)(a13 & 0x1FF) >> 8);
  return result;
}

uint64_t sub_100056550(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char a14)
{
  if ((a14 & 1) == 0)
  {
    sub_1000115B8(result, a2, a3 & 1);
    swift_release(a5);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

unint64_t sub_100056598()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2C20;
  if (!qword_1000A2C20)
  {
    v1 = sub_100005FC0(&qword_1000A2C10);
    sub_100007F64(&qword_1000A2C28, &qword_1000A2C30, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2C20);
  }
  return result;
}

uint64_t sub_10005661C()
{
  return sub_10000E208(&qword_1000A2C40, &qword_1000A2C48, (void (*)(void))sub_100056640);
}

unint64_t sub_100056640()
{
  unint64_t result;

  result = qword_1000A2C50;
  if (!qword_1000A2C50)
  {
    result = swift_getWitnessTable(&unk_100081E24, &type metadata for PlaceholderTextView);
    atomic_store(result, (unint64_t *)&qword_1000A2C50);
  }
  return result;
}

uint64_t destroy for MediumTwoThreeBookView.ViewConfiguration(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 32));
  return swift_release(*(_QWORD *)(a1 + 104));
}

uint64_t initializeWithCopy for MediumTwoThreeBookView.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v5;
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

_QWORD *assignWithCopy for MediumTwoThreeBookView.ViewConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v4 = a2[4];
  v5 = a1[4];
  a1[4] = v4;
  swift_retain(v4);
  swift_release(v5);
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  v6 = a2[13];
  v7 = a1[13];
  a1[13] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

__n128 initializeWithTake for MediumTwoThreeBookView.ViewConfiguration(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for MediumTwoThreeBookView.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release(v5);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v6 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MediumTwoThreeBookView.ViewConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MediumTwoThreeBookView.ViewConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MediumTwoThreeBookView.ViewConfiguration()
{
  return &type metadata for MediumTwoThreeBookView.ViewConfiguration;
}

uint64_t sub_100056920()
{
  return sub_100007F64(&qword_1000A2C58, &qword_1000A2C60, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

double WidgetReadingHistory.Day.progressForGoal.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 >= a2)
    v2 = a2;
  else
    v2 = a1;
  return (double)v2 / (double)a2;
}

uint64_t WidgetReadingHistory.Day.minutesRemainingForGoal.getter(uint64_t result, uint64_t a2)
{
  double v2;

  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = ceil((double)(a2 - result) / 60.0);
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 < 9.22337204e18)
    return (uint64_t)v2 & ~((uint64_t)v2 >> 63);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t WidgetReadingHistory.State.daysSinceLastReadDate.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  double v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v31 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005F78(&qword_1000A25B8);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WidgetReadingHistory.DayEntry(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v27 - v13;
  __chkstk_darwin(v12);
  v32 = v0;
  v16 = *(_QWORD *)(v0 + 32);
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v28 = (uint64_t)&v27 - v15;
    v29 = v2;
    v30 = v1;
    v18 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    sub_100045594(v16 + v18, (uint64_t)v14);
    swift_bridgeObjectRetain(v16);
    v19 = v17 - 1;
    if (v17 != 1)
    {
      v25 = *(_QWORD *)(v8 + 72);
      v26 = v16 + v25 + v18;
      do
      {
        sub_100045594(v26, (uint64_t)v11);
        if ((static Date.< infix(_:_:)(v14, v11) & 1) != 0)
        {
          sub_100045664((uint64_t)v14);
          sub_1000455D8((uint64_t)v11, (uint64_t)v14);
        }
        else
        {
          sub_100045664((uint64_t)v11);
        }
        v26 += v25;
        --v19;
      }
      while (v19);
    }
    sub_1000455D8((uint64_t)v14, (uint64_t)v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    sub_10004561C(v32);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      v20 = v28;
      v21 = sub_1000455D8((uint64_t)v6, v28);
      v22 = v31;
      static Date.now.getter(v21);
      v23 = Date.timeIntervalSince(_:)(v20);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v22, v30);
      sub_100045664(v20);
      *(double *)&result = v23 / 60.0 / 60.0 / 24.0;
      return result;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  sub_100007A0C((uint64_t)v6, &qword_1000A25B8);
  *(double *)&result = 0.0;
  return result;
}

uint64_t type metadata accessor for WidgetReadingHistory.DayEntry(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A2DA0, (uint64_t)&nominal type descriptor for WidgetReadingHistory.DayEntry);
}

id sub_100056C84()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_100005F78(&qword_1000A09F0);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "URLForUbiquityContainerIdentifier:", v4);

  if (v5)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v5);

    v6 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v2, 0, 1, v6);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v2, 1, 1, v7);
  }
  sub_100007A0C((uint64_t)v2, &qword_1000A09F0);
  return objc_msgSend(objc_allocWithZone((Class)BDSBookWidgetDataSource), "init");
}

uint64_t sub_100056DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[122] = v2;
  v3[121] = a2;
  v3[120] = a1;
  v4 = type metadata accessor for WidgetFamily(0);
  v3[123] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[124] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[125] = swift_task_alloc(v6);
  v3[126] = swift_task_alloc(v6);
  v3[127] = swift_task_alloc(v6);
  return swift_task_switch(sub_100056E50, 0, 0);
}

uint64_t sub_100056E50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  id v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;

  if ((sub_10005CB78() & 1) == 0)
  {
    if (qword_1000A06F0 != -1)
      swift_once(&qword_1000A06F0, sub_10005BC8C);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10000BE14(v9, (uint64_t)qword_1000A2C70);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Reading Goals is off in Books settings. No reading history data was fetched.", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    *(_QWORD *)(v0 + 1032) = 0;
    *(_OWORD *)(v0 + 712) = 0u;
    *(_OWORD *)(v0 + 728) = 0u;
    *(_QWORD *)(v0 + 744) = 0;
    if (qword_1000A06F0 != -1)
      swift_once(&qword_1000A06F0, sub_10005BC8C);
    v14 = sub_10000BE14(v9, (uint64_t)qword_1000A2C70);
    *(_QWORD *)(v0 + 1040) = v14;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Fetching book data from the daemon.", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }
    v18 = *(_QWORD *)(v0 + 1016);
    v19 = *(_QWORD *)(v0 + 992);
    v20 = *(_QWORD *)(v0 + 984);
    v21 = *(_QWORD *)(v0 + 968);

    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
    *(_QWORD *)(v0 + 1048) = v22;
    v22(v18, v21, v20);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 88))(v18, v20);
    if (v23 == enum case for WidgetFamily.systemSmall(_:))
      goto LABEL_16;
    if (v23 == enum case for WidgetFamily.systemMedium(_:))
    {
      v25 = v0 + 832;
      v26 = v0 + 144;
      v27 = *(void **)(*(_QWORD *)(v0 + 976) + 16);
      *(_QWORD *)(v0 + 184) = v0 + 888;
      *(_QWORD *)(v0 + 144) = v0;
      *(_QWORD *)(v0 + 152) = sub_1000582F8;
      *(_QWORD *)(v0 + 864) = swift_continuation_init(v0 + 144, 1);
      *(_QWORD *)(v0 + 832) = _NSConcreteStackBlock;
      *(_QWORD *)(v0 + 840) = 0x40000000;
      *(_QWORD *)(v0 + 848) = sub_100059EA8;
      *(_QWORD *)(v0 + 856) = &unk_10009CB60;
LABEL_21:
      objc_msgSend(v27, "getBookWidgetDataWithLimit:completion:", 3, v25);
      return swift_continuation_await(v26);
    }
    if (v23 == enum case for WidgetFamily.systemLarge(_:))
    {
      v25 = v0 + 632;
      v26 = v0 + 208;
      v27 = *(void **)(*(_QWORD *)(v0 + 976) + 16);
      *(_QWORD *)(v0 + 248) = v0 + 944;
      *(_QWORD *)(v0 + 208) = v0;
      *(_QWORD *)(v0 + 216) = sub_100058660;
      *(_QWORD *)(v0 + 664) = swift_continuation_init(v0 + 208, 1);
      *(_QWORD *)(v0 + 632) = _NSConcreteStackBlock;
      *(_QWORD *)(v0 + 640) = 0x40000000;
      *(_QWORD *)(v0 + 648) = sub_100059EA8;
      *(_QWORD *)(v0 + 656) = &unk_10009CB48;
      goto LABEL_21;
    }
    if (&enum case for WidgetFamily.accessoryCorner(_:) && v23 == enum case for WidgetFamily.accessoryCorner(_:))
    {
LABEL_16:
      v24 = *(void **)(*(_QWORD *)(v0 + 976) + 16);
      *(_QWORD *)(v0 + 56) = v0 + 912;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_100057F90;
      *(_QWORD *)(v0 + 784) = swift_continuation_init(v0 + 16, 1);
      *(_QWORD *)(v0 + 752) = _NSConcreteStackBlock;
      *(_QWORD *)(v0 + 760) = 0x40000000;
      *(_QWORD *)(v0 + 768) = sub_100059EA8;
      *(_QWORD *)(v0 + 776) = &unk_10009CB78;
      objc_msgSend(v24, "getBookWidgetDataWithLimit:completion:", 1, v0 + 752);
      return swift_continuation_await(v0 + 16);
    }
    v28 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v22)(*(_QWORD *)(v0 + 1008), *(_QWORD *)(v0 + 968), *(_QWORD *)(v0 + 984));
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.fault.getter();
    v31 = os_log_type_enabled(v29, v30);
    v32 = *(_QWORD *)(v0 + 1008);
    v33 = *(_QWORD *)(v0 + 992);
    v34 = *(_QWORD *)(v0 + 984);
    if (v31)
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = (_QWORD *)swift_slowAlloc(32, -1);
      v64 = v36;
      *(_DWORD *)v35 = 136315138;
      v37 = sub_10005D960();
      v38 = dispatch thunk of CustomStringConvertible.description.getter(v34, v37);
      v40 = v39;
      *(_QWORD *)(v0 + 896) = sub_10005BD08(v38, v39, (uint64_t *)&v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 896, v0 + 904, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease(v40);
      v41 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v41(v32, v34);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Widget family '%s' is not supported", v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      v41 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v41(*(_QWORD *)(v0 + 1008), *(_QWORD *)(v0 + 984));
    }

    v41(*(_QWORD *)(v0 + 1016), *(_QWORD *)(v0 + 984));
    if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    {
      if ((uint64_t)_swiftEmptyArrayStorage < 0)
        v54 = _swiftEmptyArrayStorage;
      else
        v54 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
      v42 = _CocoaArrayWrapper.endIndex.getter(v54);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      if (v42)
        goto LABEL_29;
    }
    else
    {
      v42 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v42)
      {
LABEL_29:
        v64 = _swiftEmptyArrayStorage;
        result = sub_10005C39C(0, v42 & ~(v42 >> 63), 0);
        if (v42 < 0)
        {
          __break(1u);
          return result;
        }
        v43 = 0;
        v44 = v64;
        do
        {
          if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
            v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v43, _swiftEmptyArrayStorage);
          else
            v45 = (id)_swiftEmptyArrayStorage[v43 + 4];
          v46 = v45;
          sub_100059F50(v0 + 544);

          v64 = v44;
          v48 = v44[2];
          v47 = v44[3];
          if (v48 >= v47 >> 1)
          {
            sub_10005C39C(v47 > 1, v48 + 1, 1);
            v44 = v64;
          }
          ++v43;
          v44[2] = v48 + 1;
          v49 = &v44[11 * v48];
          v50 = *(_OWORD *)(v0 + 560);
          *((_OWORD *)v49 + 2) = *(_OWORD *)(v0 + 544);
          *((_OWORD *)v49 + 3) = v50;
          v51 = *(_OWORD *)(v0 + 576);
          v52 = *(_OWORD *)(v0 + 592);
          v53 = *(_OWORD *)(v0 + 608);
          *((_BYTE *)v49 + 112) = *(_BYTE *)(v0 + 624);
          *((_OWORD *)v49 + 5) = v52;
          *((_OWORD *)v49 + 6) = v53;
          *((_OWORD *)v49 + 4) = v51;
        }
        while (v42 != v43);
        goto LABEL_43;
      }
    }
    v44 = _swiftEmptyArrayStorage;
LABEL_43:
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    *(_QWORD *)(v0 + 1080) = v44;
    v55 = swift_bridgeObjectRetain_n(v44, 2);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = swift_slowAlloc(22, -1);
      v59 = (_QWORD *)swift_slowAlloc(32, -1);
      v64 = v59;
      *(_DWORD *)v58 = 134218242;
      *(_QWORD *)(v0 + 936) = v44[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 936, v0 + 944, v58 + 4, v58 + 12);
      *(_WORD *)(v58 + 12) = 2080;
      v60 = Array.debugDescription.getter(v44, &type metadata for WidgetBookInfo);
      v62 = v61;
      *(_QWORD *)(v0 + 928) = sub_10005BD08(v60, v61, (uint64_t *)&v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v58 + 14, v58 + 22);
      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease_n(v44, 2);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Done fetching book data from the daemon. %ld bookInfos: %s.", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v44, 2);
    }

    v63 = (_QWORD *)swift_task_alloc(dword_1000A2E6C);
    *(_QWORD *)(v0 + 1088) = v63;
    *v63 = v0;
    v63[1] = sub_1000589CC;
    v63[13] = v44;
    return swift_task_switch(sub_10005CE10, 0, 0);
  }
  if (qword_1000A06F0 != -1)
    swift_once(&qword_1000A06F0, sub_10005BC8C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10000BE14(v1, (uint64_t)qword_1000A2C70);
  *(_QWORD *)(v0 + 1024) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Reading Goals is on in Books settings. Fetching reading history data.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 976);

  v7 = *(void **)(v6 + 24);
  *(_QWORD *)(v0 + 120) = v0 + 872;
  *(_QWORD *)(v0 + 80) = v0;
  *(_QWORD *)(v0 + 88) = sub_100057748;
  *(_QWORD *)(v0 + 704) = swift_continuation_init(v0 + 80, 0);
  *(_QWORD *)(v0 + 672) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 680) = 0x40000000;
  *(_QWORD *)(v0 + 688) = sub_100059BA8;
  *(_QWORD *)(v0 + 696) = &unk_10009CB90;
  objc_msgSend(v7, "bookWidgetReadingHistoryStateInfoWithCompletionHandler:", v0 + 672);
  return swift_continuation_await(v0 + 80);
}

uint64_t sub_100057748()
{
  return swift_task_switch(sub_100057794, 0, 0);
}

uint64_t sub_100057794(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  int v22;
  void *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  id v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64[2];

  v2 = *(void **)(v1 + 872);
  if (v2)
  {
    v3 = v2;
    sub_100059BDC(v1 + 792);
    v4 = *(_QWORD *)(v1 + 792);
    v5 = *(_QWORD *)(v1 + 800);
    v6 = *(_QWORD *)(v1 + 808);
    v7 = *(unsigned __int8 *)(v1 + 816);
    v8 = *(_QWORD *)(v1 + 824);

  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  v9 = Logger.logObject.getter(a1);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Done fetching reading history data from the daemon.", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  *(_QWORD *)(v1 + 1032) = v8;
  *(_QWORD *)(v1 + 712) = v4;
  *(_QWORD *)(v1 + 720) = v5;
  *(_QWORD *)(v1 + 728) = v6;
  *(_QWORD *)(v1 + 736) = v7;
  *(_QWORD *)(v1 + 744) = v8;
  if (qword_1000A06F0 != -1)
    swift_once(&qword_1000A06F0, sub_10005BC8C);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10000BE14(v12, (uint64_t)qword_1000A2C70);
  *(_QWORD *)(v1 + 1040) = v13;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Fetching book data from the daemon.", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }
  v17 = *(_QWORD *)(v1 + 1016);
  v18 = *(_QWORD *)(v1 + 992);
  v19 = *(_QWORD *)(v1 + 984);
  v20 = *(_QWORD *)(v1 + 968);

  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  *(_QWORD *)(v1 + 1048) = v21;
  v21(v17, v20, v19);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 88))(v17, v19);
  if (v22 == enum case for WidgetFamily.systemSmall(_:))
    goto LABEL_11;
  if (v22 == enum case for WidgetFamily.systemMedium(_:))
  {
    v25 = v1 + 832;
    v26 = v1 + 144;
    v27 = *(void **)(*(_QWORD *)(v1 + 976) + 16);
    *(_QWORD *)(v1 + 184) = v1 + 888;
    *(_QWORD *)(v1 + 144) = v1;
    *(_QWORD *)(v1 + 152) = sub_1000582F8;
    *(_QWORD *)(v1 + 864) = swift_continuation_init(v1 + 144, 1);
    *(_QWORD *)(v1 + 832) = _NSConcreteStackBlock;
    *(_QWORD *)(v1 + 840) = 0x40000000;
    *(_QWORD *)(v1 + 848) = sub_100059EA8;
    *(_QWORD *)(v1 + 856) = &unk_10009CB60;
LABEL_16:
    objc_msgSend(v27, "getBookWidgetDataWithLimit:completion:", 3, v25);
    return swift_continuation_await(v26);
  }
  if (v22 == enum case for WidgetFamily.systemLarge(_:))
  {
    v25 = v1 + 632;
    v26 = v1 + 208;
    v27 = *(void **)(*(_QWORD *)(v1 + 976) + 16);
    *(_QWORD *)(v1 + 248) = v1 + 944;
    *(_QWORD *)(v1 + 208) = v1;
    *(_QWORD *)(v1 + 216) = sub_100058660;
    *(_QWORD *)(v1 + 664) = swift_continuation_init(v1 + 208, 1);
    *(_QWORD *)(v1 + 632) = _NSConcreteStackBlock;
    *(_QWORD *)(v1 + 640) = 0x40000000;
    *(_QWORD *)(v1 + 648) = sub_100059EA8;
    *(_QWORD *)(v1 + 656) = &unk_10009CB48;
    goto LABEL_16;
  }
  if (&enum case for WidgetFamily.accessoryCorner(_:) && v22 == enum case for WidgetFamily.accessoryCorner(_:))
  {
LABEL_11:
    v23 = *(void **)(*(_QWORD *)(v1 + 976) + 16);
    *(_QWORD *)(v1 + 56) = v1 + 912;
    *(_QWORD *)(v1 + 16) = v1;
    *(_QWORD *)(v1 + 24) = sub_100057F90;
    *(_QWORD *)(v1 + 784) = swift_continuation_init(v1 + 16, 1);
    *(_QWORD *)(v1 + 752) = _NSConcreteStackBlock;
    *(_QWORD *)(v1 + 760) = 0x40000000;
    *(_QWORD *)(v1 + 768) = sub_100059EA8;
    *(_QWORD *)(v1 + 776) = &unk_10009CB78;
    objc_msgSend(v23, "getBookWidgetDataWithLimit:completion:", 1, v1 + 752);
    return swift_continuation_await(v1 + 16);
  }
  v28 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v21)(*(_QWORD *)(v1 + 1008), *(_QWORD *)(v1 + 968), *(_QWORD *)(v1 + 984));
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.fault.getter();
  v31 = os_log_type_enabled(v29, v30);
  v32 = *(_QWORD *)(v1 + 1008);
  v33 = *(_QWORD *)(v1 + 992);
  v34 = *(_QWORD *)(v1 + 984);
  if (v31)
  {
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    v64[0] = v36;
    *(_DWORD *)v35 = 136315138;
    v37 = sub_10005D960();
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v34, v37);
    v40 = v39;
    *(_QWORD *)(v1 + 896) = sub_10005BD08(v38, v39, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 896, v1 + 904, v35 + 4, v35 + 12);
    swift_bridgeObjectRelease(v40);
    v41 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    v41(v32, v34);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Widget family '%s' is not supported", v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    v41 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    v41(*(_QWORD *)(v1 + 1008), *(_QWORD *)(v1 + 984));
  }

  v41(*(_QWORD *)(v1 + 1016), *(_QWORD *)(v1 + 984));
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    if ((uint64_t)_swiftEmptyArrayStorage < 0)
      v54 = _swiftEmptyArrayStorage;
    else
      v54 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    v42 = _CocoaArrayWrapper.endIndex.getter(v54);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    if (v42)
      goto LABEL_24;
LABEL_37:
    v44 = _swiftEmptyArrayStorage;
    goto LABEL_38;
  }
  v42 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v42)
    goto LABEL_37;
LABEL_24:
  v64[0] = (uint64_t)_swiftEmptyArrayStorage;
  result = sub_10005C39C(0, v42 & ~(v42 >> 63), 0);
  if (v42 < 0)
  {
    __break(1u);
    return result;
  }
  v43 = 0;
  v44 = (_QWORD *)v64[0];
  do
  {
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
      v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v43, _swiftEmptyArrayStorage);
    else
      v45 = (id)_swiftEmptyArrayStorage[v43 + 4];
    v46 = v45;
    sub_100059F50(v1 + 544);

    v64[0] = (uint64_t)v44;
    v48 = v44[2];
    v47 = v44[3];
    if (v48 >= v47 >> 1)
    {
      sub_10005C39C(v47 > 1, v48 + 1, 1);
      v44 = (_QWORD *)v64[0];
    }
    ++v43;
    v44[2] = v48 + 1;
    v49 = &v44[11 * v48];
    v50 = *(_OWORD *)(v1 + 560);
    *((_OWORD *)v49 + 2) = *(_OWORD *)(v1 + 544);
    *((_OWORD *)v49 + 3) = v50;
    v51 = *(_OWORD *)(v1 + 576);
    v52 = *(_OWORD *)(v1 + 592);
    v53 = *(_OWORD *)(v1 + 608);
    *((_BYTE *)v49 + 112) = *(_BYTE *)(v1 + 624);
    *((_OWORD *)v49 + 5) = v52;
    *((_OWORD *)v49 + 6) = v53;
    *((_OWORD *)v49 + 4) = v51;
  }
  while (v42 != v43);
LABEL_38:
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  *(_QWORD *)(v1 + 1080) = v44;
  v55 = swift_bridgeObjectRetain_n(v44, 2);
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v56, v57))
  {
    v58 = swift_slowAlloc(22, -1);
    v59 = swift_slowAlloc(32, -1);
    v64[0] = v59;
    *(_DWORD *)v58 = 134218242;
    *(_QWORD *)(v1 + 936) = v44[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 936, v1 + 944, v58 + 4, v58 + 12);
    *(_WORD *)(v58 + 12) = 2080;
    v60 = Array.debugDescription.getter(v44, &type metadata for WidgetBookInfo);
    v62 = v61;
    *(_QWORD *)(v1 + 928) = sub_10005BD08(v60, v61, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 928, v1 + 936, v58 + 14, v58 + 22);
    swift_bridgeObjectRelease(v62);
    swift_bridgeObjectRelease_n(v44, 2);
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Done fetching book data from the daemon. %ld bookInfos: %s.", (uint8_t *)v58, 0x16u);
    swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v58, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v44, 2);
  }

  v63 = (_QWORD *)swift_task_alloc(dword_1000A2E6C);
  *(_QWORD *)(v1 + 1088) = v63;
  *v63 = v1;
  v63[1] = sub_1000589CC;
  v63[13] = v44;
  return swift_task_switch(sub_10005CE10, 0, 0);
}

uint64_t sub_100057F90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 1056) = v1;
  if (v1)
    v2 = sub_100059698;
  else
    v2 = sub_100057FF0;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100057FF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _OWORD *v5;
  _QWORD *v6;
  id v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;

  v1 = *(_QWORD *)(v0 + 912);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v16 = *(_QWORD *)(v0 + 912);
    else
      v16 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 912));
    v2 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(v1);
    if (v2)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease(v1);
    v6 = _swiftEmptyArrayStorage;
    goto LABEL_17;
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    goto LABEL_16;
LABEL_3:
  v26 = _swiftEmptyArrayStorage;
  result = sub_10005C39C(0, v2 & ~(v2 >> 63), 0);
  if (v2 < 0)
  {
    __break(1u);
    return result;
  }
  v4 = 0;
  v5 = (_OWORD *)(v0 + 544);
  v6 = v26;
  do
  {
    if ((v1 & 0xC000000000000001) != 0)
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
    else
      v7 = *(id *)(v1 + 8 * v4 + 32);
    v8 = v7;
    sub_100059F50((uint64_t)v5);

    v26 = v6;
    v10 = v6[2];
    v9 = v6[3];
    if (v10 >= v9 >> 1)
    {
      sub_10005C39C(v9 > 1, v10 + 1, 1);
      v6 = v26;
    }
    ++v4;
    v6[2] = v10 + 1;
    v11 = &v6[11 * v10];
    v12 = *(_OWORD *)(v0 + 560);
    *((_OWORD *)v11 + 2) = *v5;
    *((_OWORD *)v11 + 3) = v12;
    v13 = *(_OWORD *)(v0 + 576);
    v14 = *(_OWORD *)(v0 + 592);
    v15 = *(_OWORD *)(v0 + 608);
    *((_BYTE *)v11 + 112) = *(_BYTE *)(v0 + 624);
    *((_OWORD *)v11 + 5) = v14;
    *((_OWORD *)v11 + 6) = v15;
    *((_OWORD *)v11 + 4) = v13;
  }
  while (v2 != v4);
  swift_bridgeObjectRelease(v1);
LABEL_17:
  *(_QWORD *)(v0 + 1080) = v6;
  v17 = swift_bridgeObjectRetain_n(v6, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(22, -1);
    v21 = (_QWORD *)swift_slowAlloc(32, -1);
    v26 = v21;
    *(_DWORD *)v20 = 134218242;
    *(_QWORD *)(v0 + 936) = v6[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 936, v0 + 944, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2080;
    v22 = Array.debugDescription.getter(v6, &type metadata for WidgetBookInfo);
    v24 = v23;
    *(_QWORD *)(v0 + 928) = sub_10005BD08(v22, v23, (uint64_t *)&v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Done fetching book data from the daemon. %ld bookInfos: %s.", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v6, 2);
  }

  v25 = (_QWORD *)swift_task_alloc(dword_1000A2E6C);
  *(_QWORD *)(v0 + 1088) = v25;
  *v25 = v0;
  v25[1] = sub_1000589CC;
  v25[13] = v6;
  return swift_task_switch(sub_10005CE10, 0, 0);
}

uint64_t sub_1000582F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  *(_QWORD *)(*(_QWORD *)v0 + 1064) = v1;
  if (v1)
    v2 = sub_100058C70;
  else
    v2 = sub_100058358;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100058358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _OWORD *v5;
  _QWORD *v6;
  id v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;

  v1 = *(_QWORD *)(v0 + 888);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v16 = *(_QWORD *)(v0 + 888);
    else
      v16 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 888));
    v2 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(v1);
    if (v2)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease(v1);
    v6 = _swiftEmptyArrayStorage;
    goto LABEL_17;
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    goto LABEL_16;
LABEL_3:
  v26 = _swiftEmptyArrayStorage;
  result = sub_10005C39C(0, v2 & ~(v2 >> 63), 0);
  if (v2 < 0)
  {
    __break(1u);
    return result;
  }
  v4 = 0;
  v5 = (_OWORD *)(v0 + 544);
  v6 = v26;
  do
  {
    if ((v1 & 0xC000000000000001) != 0)
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
    else
      v7 = *(id *)(v1 + 8 * v4 + 32);
    v8 = v7;
    sub_100059F50((uint64_t)v5);

    v26 = v6;
    v10 = v6[2];
    v9 = v6[3];
    if (v10 >= v9 >> 1)
    {
      sub_10005C39C(v9 > 1, v10 + 1, 1);
      v6 = v26;
    }
    ++v4;
    v6[2] = v10 + 1;
    v11 = &v6[11 * v10];
    v12 = *(_OWORD *)(v0 + 560);
    *((_OWORD *)v11 + 2) = *v5;
    *((_OWORD *)v11 + 3) = v12;
    v13 = *(_OWORD *)(v0 + 576);
    v14 = *(_OWORD *)(v0 + 592);
    v15 = *(_OWORD *)(v0 + 608);
    *((_BYTE *)v11 + 112) = *(_BYTE *)(v0 + 624);
    *((_OWORD *)v11 + 5) = v14;
    *((_OWORD *)v11 + 6) = v15;
    *((_OWORD *)v11 + 4) = v13;
  }
  while (v2 != v4);
  swift_bridgeObjectRelease(v1);
LABEL_17:
  *(_QWORD *)(v0 + 1080) = v6;
  v17 = swift_bridgeObjectRetain_n(v6, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(22, -1);
    v21 = (_QWORD *)swift_slowAlloc(32, -1);
    v26 = v21;
    *(_DWORD *)v20 = 134218242;
    *(_QWORD *)(v0 + 936) = v6[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 936, v0 + 944, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2080;
    v22 = Array.debugDescription.getter(v6, &type metadata for WidgetBookInfo);
    v24 = v23;
    *(_QWORD *)(v0 + 928) = sub_10005BD08(v22, v23, (uint64_t *)&v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Done fetching book data from the daemon. %ld bookInfos: %s.", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v6, 2);
  }

  v25 = (_QWORD *)swift_task_alloc(dword_1000A2E6C);
  *(_QWORD *)(v0 + 1088) = v25;
  *v25 = v0;
  v25[1] = sub_1000589CC;
  v25[13] = v6;
  return swift_task_switch(sub_10005CE10, 0, 0);
}

uint64_t sub_100058660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 240);
  *(_QWORD *)(*(_QWORD *)v0 + 1072) = v1;
  if (v1)
    v2 = sub_100059180;
  else
    v2 = sub_1000586C0;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000586C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _OWORD *v5;
  _QWORD *v6;
  id v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;

  v1 = *(_QWORD *)(v0 + 944);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v16 = *(_QWORD *)(v0 + 944);
    else
      v16 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 944));
    v2 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(v1);
    if (v2)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease(v1);
    v6 = _swiftEmptyArrayStorage;
    goto LABEL_17;
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    goto LABEL_16;
LABEL_3:
  v26 = _swiftEmptyArrayStorage;
  result = sub_10005C39C(0, v2 & ~(v2 >> 63), 0);
  if (v2 < 0)
  {
    __break(1u);
    return result;
  }
  v4 = 0;
  v5 = (_OWORD *)(v0 + 544);
  v6 = v26;
  do
  {
    if ((v1 & 0xC000000000000001) != 0)
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
    else
      v7 = *(id *)(v1 + 8 * v4 + 32);
    v8 = v7;
    sub_100059F50((uint64_t)v5);

    v26 = v6;
    v10 = v6[2];
    v9 = v6[3];
    if (v10 >= v9 >> 1)
    {
      sub_10005C39C(v9 > 1, v10 + 1, 1);
      v6 = v26;
    }
    ++v4;
    v6[2] = v10 + 1;
    v11 = &v6[11 * v10];
    v12 = *(_OWORD *)(v0 + 560);
    *((_OWORD *)v11 + 2) = *v5;
    *((_OWORD *)v11 + 3) = v12;
    v13 = *(_OWORD *)(v0 + 576);
    v14 = *(_OWORD *)(v0 + 592);
    v15 = *(_OWORD *)(v0 + 608);
    *((_BYTE *)v11 + 112) = *(_BYTE *)(v0 + 624);
    *((_OWORD *)v11 + 5) = v14;
    *((_OWORD *)v11 + 6) = v15;
    *((_OWORD *)v11 + 4) = v13;
  }
  while (v2 != v4);
  swift_bridgeObjectRelease(v1);
LABEL_17:
  *(_QWORD *)(v0 + 1080) = v6;
  v17 = swift_bridgeObjectRetain_n(v6, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(22, -1);
    v21 = (_QWORD *)swift_slowAlloc(32, -1);
    v26 = v21;
    *(_DWORD *)v20 = 134218242;
    *(_QWORD *)(v0 + 936) = v6[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 936, v0 + 944, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2080;
    v22 = Array.debugDescription.getter(v6, &type metadata for WidgetBookInfo);
    v24 = v23;
    *(_QWORD *)(v0 + 928) = sub_10005BD08(v22, v23, (uint64_t *)&v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Done fetching book data from the daemon. %ld bookInfos: %s.", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v6, 2);
  }

  v25 = (_QWORD *)swift_task_alloc(dword_1000A2E6C);
  *(_QWORD *)(v0 + 1088) = v25;
  *v25 = v0;
  v25[1] = sub_1000589CC;
  v25[13] = v6;
  return swift_task_switch(sub_10005CE10, 0, 0);
}

uint64_t sub_1000589CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1088);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1080);
  *(_QWORD *)(*(_QWORD *)v1 + 1096) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_100058A34, 0, 0);
}

uint64_t sub_100058A34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 1096);
  v2 = *(_QWORD *)(v0 + 1032);
  v3 = *(_QWORD *)(v0 + 968);
  v4 = sub_100053ED0();
  v6 = v5;
  sub_100044CE4(v3, v0 + 712, v1, *(double *)&v4, v5, v0 + 408);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  sub_10000BFB0((_QWORD *)(v0 + 408), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000C00C);
  v7 = sub_10000BFB0((_QWORD *)(v0 + 408), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000C00C);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v20 = v11;
    *(_DWORD *)v10 = 136315138;
    sub_10005D918(v0 + 408, v0 + 272);
    v12 = sub_100005F78(&qword_1000A0C30);
    v13 = Optional.debugDescription.getter(v12);
    v15 = v14;
    *(_QWORD *)(v0 + 952) = sub_10005BD08(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 952, v0 + 960, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v15);
    sub_10000BFB0((_QWORD *)(v0 + 408), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BAA8);
    sub_10000BFB0((_QWORD *)(v0 + 408), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BAA8);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Returning widget view model: %s.", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_10000BFB0((_QWORD *)(v0 + 408), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BAA8);
    sub_10000BFB0((_QWORD *)(v0 + 408), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BAA8);
  }

  v16 = *(_QWORD *)(v0 + 1016);
  v17 = *(_QWORD *)(v0 + 1008);
  v18 = *(_QWORD *)(v0 + 1000);
  sub_10005D918(v0 + 408, *(_QWORD *)(v0 + 960));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100058C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40[2];

  swift_willThrow();
  v1 = *(_QWORD *)(v0 + 1064);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1048))(*(_QWORD *)(v0 + 1000), *(_QWORD *)(v0 + 968), *(_QWORD *)(v0 + 984));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 1000);
    v37 = *(_QWORD *)(v0 + 992);
    v6 = *(_QWORD *)(v0 + 984);
    v7 = swift_slowAlloc(22, -1);
    v38 = (uint64_t *)swift_slowAlloc(8, -1);
    v39 = swift_slowAlloc(32, -1);
    v40[0] = v39;
    *(_DWORD *)v7 = 136315394;
    v8 = sub_10005D960();
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v6, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 920) = sub_10005BD08(v9, v10, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 920, v0 + 928, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v11);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v5, v6);
    *(_WORD *)(v7 + 12) = 2112;
    v12 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 904) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 904, v0 + 912, v7 + 14, v7 + 22);
    *v38 = v12;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to fetch book data from BookWidgetDataSource for widget family '%s', error: %@", (uint8_t *)v7, 0x16u);
    v13 = sub_100005F78(&qword_1000A1260);
    swift_arrayDestroy(v38, 1, v13);
    swift_slowDealloc(v38, -1, -1);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 992) + 8))(*(_QWORD *)(v0 + 1000), *(_QWORD *)(v0 + 984));
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_errorRelease(v1);
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    if ((uint64_t)_swiftEmptyArrayStorage < 0)
      v27 = _swiftEmptyArrayStorage;
    else
      v27 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    v14 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    if (v14)
      goto LABEL_6;
LABEL_19:
    v17 = _swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  v14 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v14)
    goto LABEL_19;
LABEL_6:
  v40[0] = (uint64_t)_swiftEmptyArrayStorage;
  result = sub_10005C39C(0, v14 & ~(v14 >> 63), 0);
  if (v14 < 0)
  {
    __break(1u);
    return result;
  }
  v16 = 0;
  v17 = (_QWORD *)v40[0];
  do
  {
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
      v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, _swiftEmptyArrayStorage);
    else
      v18 = (id)_swiftEmptyArrayStorage[v16 + 4];
    v19 = v18;
    sub_100059F50(v0 + 544);

    v40[0] = (uint64_t)v17;
    v21 = v17[2];
    v20 = v17[3];
    if (v21 >= v20 >> 1)
    {
      sub_10005C39C(v20 > 1, v21 + 1, 1);
      v17 = (_QWORD *)v40[0];
    }
    ++v16;
    v17[2] = v21 + 1;
    v22 = &v17[11 * v21];
    v23 = *(_OWORD *)(v0 + 560);
    *((_OWORD *)v22 + 2) = *(_OWORD *)(v0 + 544);
    *((_OWORD *)v22 + 3) = v23;
    v24 = *(_OWORD *)(v0 + 576);
    v25 = *(_OWORD *)(v0 + 592);
    v26 = *(_OWORD *)(v0 + 608);
    *((_BYTE *)v22 + 112) = *(_BYTE *)(v0 + 624);
    *((_OWORD *)v22 + 5) = v25;
    *((_OWORD *)v22 + 6) = v26;
    *((_OWORD *)v22 + 4) = v24;
  }
  while (v14 != v16);
LABEL_20:
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 1080) = v17;
  v28 = swift_bridgeObjectRetain_n(v17, 2);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(32, -1);
    v40[0] = v32;
    *(_DWORD *)v31 = 134218242;
    *(_QWORD *)(v0 + 936) = v17[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 936, v0 + 944, v31 + 4, v31 + 12);
    *(_WORD *)(v31 + 12) = 2080;
    v33 = Array.debugDescription.getter(v17, &type metadata for WidgetBookInfo);
    v35 = v34;
    *(_QWORD *)(v0 + 928) = sub_10005BD08(v33, v34, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease_n(v17, 2);
    swift_bridgeObjectRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Done fetching book data from the daemon. %ld bookInfos: %s.", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v17, 2);
  }
  v36 = (_QWORD *)swift_task_alloc(dword_1000A2E6C);
  *(_QWORD *)(v0 + 1088) = v36;
  *v36 = v0;
  v36[1] = sub_1000589CC;
  v36[13] = v17;
  return swift_task_switch(sub_10005CE10, 0, 0);
}

uint64_t sub_100059180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41[2];

  swift_willThrow();
  v1 = *(_QWORD *)(v0 + 1072);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1048))(*(_QWORD *)(v0 + 1000), *(_QWORD *)(v0 + 968), *(_QWORD *)(v0 + 984));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  v40 = (uint64_t *)(v0 + 928);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 1000);
    v37 = *(_QWORD *)(v0 + 992);
    v6 = *(_QWORD *)(v0 + 984);
    v7 = swift_slowAlloc(22, -1);
    v38 = (uint64_t *)swift_slowAlloc(8, -1);
    v39 = swift_slowAlloc(32, -1);
    v41[0] = v39;
    *(_DWORD *)v7 = 136315394;
    v8 = sub_10005D960();
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v6, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 920) = sub_10005BD08(v9, v10, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 920, v0 + 928, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v11);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v5, v6);
    *(_WORD *)(v7 + 12) = 2112;
    v12 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 904) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 904, v0 + 912, v7 + 14, v7 + 22);
    *v38 = v12;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to fetch book data from BookWidgetDataSource for widget family '%s', error: %@", (uint8_t *)v7, 0x16u);
    v13 = sub_100005F78(&qword_1000A1260);
    swift_arrayDestroy(v38, 1, v13);
    swift_slowDealloc(v38, -1, -1);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 992) + 8))(*(_QWORD *)(v0 + 1000), *(_QWORD *)(v0 + 984));
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_errorRelease(v1);
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    if ((uint64_t)_swiftEmptyArrayStorage < 0)
      v27 = _swiftEmptyArrayStorage;
    else
      v27 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    v14 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    if (v14)
      goto LABEL_6;
LABEL_19:
    v17 = _swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  v14 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v14)
    goto LABEL_19;
LABEL_6:
  v41[0] = (uint64_t)_swiftEmptyArrayStorage;
  result = sub_10005C39C(0, v14 & ~(v14 >> 63), 0);
  if (v14 < 0)
  {
    __break(1u);
    return result;
  }
  v16 = 0;
  v17 = (_QWORD *)v41[0];
  do
  {
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
      v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, _swiftEmptyArrayStorage);
    else
      v18 = (id)_swiftEmptyArrayStorage[v16 + 4];
    v19 = v18;
    sub_100059F50(v0 + 544);

    v41[0] = (uint64_t)v17;
    v21 = v17[2];
    v20 = v17[3];
    if (v21 >= v20 >> 1)
    {
      sub_10005C39C(v20 > 1, v21 + 1, 1);
      v17 = (_QWORD *)v41[0];
    }
    ++v16;
    v17[2] = v21 + 1;
    v22 = &v17[11 * v21];
    v23 = *(_OWORD *)(v0 + 560);
    *((_OWORD *)v22 + 2) = *(_OWORD *)(v0 + 544);
    *((_OWORD *)v22 + 3) = v23;
    v24 = *(_OWORD *)(v0 + 576);
    v25 = *(_OWORD *)(v0 + 592);
    v26 = *(_OWORD *)(v0 + 608);
    *((_BYTE *)v22 + 112) = *(_BYTE *)(v0 + 624);
    *((_OWORD *)v22 + 5) = v25;
    *((_OWORD *)v22 + 6) = v26;
    *((_OWORD *)v22 + 4) = v24;
  }
  while (v14 != v16);
LABEL_20:
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 1080) = v17;
  v28 = swift_bridgeObjectRetain_n(v17, 2);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(32, -1);
    v41[0] = v32;
    *(_DWORD *)v31 = 134218242;
    *(_QWORD *)(v0 + 936) = v17[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 936, v0 + 944, v31 + 4, v31 + 12);
    *(_WORD *)(v31 + 12) = 2080;
    v33 = Array.debugDescription.getter(v17, &type metadata for WidgetBookInfo);
    v35 = v34;
    *v40 = sub_10005BD08(v33, v34, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v40, v0 + 936, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease_n(v17, 2);
    swift_bridgeObjectRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Done fetching book data from the daemon. %ld bookInfos: %s.", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v17, 2);
  }
  v36 = (_QWORD *)swift_task_alloc(dword_1000A2E6C);
  *(_QWORD *)(v0 + 1088) = v36;
  *v36 = v0;
  v36[1] = sub_1000589CC;
  v36[13] = v17;
  return swift_task_switch(sub_10005CE10, 0, 0);
}

uint64_t sub_100059698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40[2];

  swift_willThrow();
  v1 = *(_QWORD *)(v0 + 1056);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1048))(*(_QWORD *)(v0 + 1000), *(_QWORD *)(v0 + 968), *(_QWORD *)(v0 + 984));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 1000);
    v37 = *(_QWORD *)(v0 + 992);
    v6 = *(_QWORD *)(v0 + 984);
    v7 = swift_slowAlloc(22, -1);
    v38 = (uint64_t *)swift_slowAlloc(8, -1);
    v39 = swift_slowAlloc(32, -1);
    v40[0] = v39;
    *(_DWORD *)v7 = 136315394;
    v8 = sub_10005D960();
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v6, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 920) = sub_10005BD08(v9, v10, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 920, v0 + 928, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v11);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v5, v6);
    *(_WORD *)(v7 + 12) = 2112;
    v12 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 904) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 904, v0 + 912, v7 + 14, v7 + 22);
    *v38 = v12;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to fetch book data from BookWidgetDataSource for widget family '%s', error: %@", (uint8_t *)v7, 0x16u);
    v13 = sub_100005F78(&qword_1000A1260);
    swift_arrayDestroy(v38, 1, v13);
    swift_slowDealloc(v38, -1, -1);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 992) + 8))(*(_QWORD *)(v0 + 1000), *(_QWORD *)(v0 + 984));
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_errorRelease(v1);
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    if ((uint64_t)_swiftEmptyArrayStorage < 0)
      v27 = _swiftEmptyArrayStorage;
    else
      v27 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    v14 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    if (v14)
      goto LABEL_6;
LABEL_19:
    v17 = _swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  v14 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v14)
    goto LABEL_19;
LABEL_6:
  v40[0] = (uint64_t)_swiftEmptyArrayStorage;
  result = sub_10005C39C(0, v14 & ~(v14 >> 63), 0);
  if (v14 < 0)
  {
    __break(1u);
    return result;
  }
  v16 = 0;
  v17 = (_QWORD *)v40[0];
  do
  {
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
      v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, _swiftEmptyArrayStorage);
    else
      v18 = (id)_swiftEmptyArrayStorage[v16 + 4];
    v19 = v18;
    sub_100059F50(v0 + 544);

    v40[0] = (uint64_t)v17;
    v21 = v17[2];
    v20 = v17[3];
    if (v21 >= v20 >> 1)
    {
      sub_10005C39C(v20 > 1, v21 + 1, 1);
      v17 = (_QWORD *)v40[0];
    }
    ++v16;
    v17[2] = v21 + 1;
    v22 = &v17[11 * v21];
    v23 = *(_OWORD *)(v0 + 560);
    *((_OWORD *)v22 + 2) = *(_OWORD *)(v0 + 544);
    *((_OWORD *)v22 + 3) = v23;
    v24 = *(_OWORD *)(v0 + 576);
    v25 = *(_OWORD *)(v0 + 592);
    v26 = *(_OWORD *)(v0 + 608);
    *((_BYTE *)v22 + 112) = *(_BYTE *)(v0 + 624);
    *((_OWORD *)v22 + 5) = v25;
    *((_OWORD *)v22 + 6) = v26;
    *((_OWORD *)v22 + 4) = v24;
  }
  while (v14 != v16);
LABEL_20:
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 1080) = v17;
  v28 = swift_bridgeObjectRetain_n(v17, 2);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(32, -1);
    v40[0] = v32;
    *(_DWORD *)v31 = 134218242;
    *(_QWORD *)(v0 + 936) = v17[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 936, v0 + 944, v31 + 4, v31 + 12);
    *(_WORD *)(v31 + 12) = 2080;
    v33 = Array.debugDescription.getter(v17, &type metadata for WidgetBookInfo);
    v35 = v34;
    *(_QWORD *)(v0 + 928) = sub_10005BD08(v33, v34, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease_n(v17, 2);
    swift_bridgeObjectRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Done fetching book data from the daemon. %ld bookInfos: %s.", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v17, 2);
  }
  v36 = (_QWORD *)swift_task_alloc(dword_1000A2E6C);
  *(_QWORD *)(v0 + 1088) = v36;
  *v36 = v0;
  v36[1] = sub_1000589CC;
  v36[13] = v17;
  return swift_task_switch(sub_10005CE10, 0, 0);
}

uint64_t sub_100059BA8(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  id v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
  *(_QWORD *)v4 = a2;
  *(_BYTE *)(v4 + 8) = a3;
  v5 = a2;
  return swift_continuation_resume(v3);
}

void sub_100059BDC(unint64_t a1@<X8>)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v3 = v2;
  v5 = type metadata accessor for WidgetReadingHistory.DayEntry(0);
  v28 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(v1, "currentStreak");
  v9 = objc_msgSend(v1, "today");
  v10 = objc_msgSend(v9, "readingTime");
  v11 = objc_msgSend(v9, "goal");
  LODWORD(v12) = objc_msgSend(v9, "isStreakDay");

  v13 = objc_msgSend(v1, "readingHistory");
  v14 = sub_10001AB08(0, &qword_1000A2E70, BDSReadingHistoryDayEntryInfo_ptr);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

  v16 = v15;
  if (v15 >> 62)
    goto LABEL_16;
  v17 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  v27 = (int)v12;
  if (v17)
  {
    while (1)
    {
      v29 = v16;
      v30 = _swiftEmptyArrayStorage;
      v16 = (uint64_t)&v30;
      sub_10005C380(0, v17 & ~(v17 >> 63), 0);
      if (v17 < 0)
        break;
      v23 = v11;
      v24 = v10;
      v25 = v8;
      v26 = a1;
      v8 = 0;
      v12 = v30;
      v18 = v29;
      v11 = (id)(v29 & 0xC000000000000001);
      while ((id)v17 != v8)
      {
        if (v11)
          v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v18);
        else
          v19 = *(id *)(v18 + 8 * (_QWORD)v8 + 32);
        v16 = (uint64_t)v19;
        sub_10005B830(v7);
        if (v3)
        {
          swift_bridgeObjectRelease(v29);
          swift_release(v12);

          return;
        }

        v30 = v12;
        a1 = v12[2];
        v20 = v12[3];
        v10 = (id)(a1 + 1);
        if (a1 >= v20 >> 1)
        {
          v16 = (uint64_t)&v30;
          sub_10005C380(v20 > 1, a1 + 1, 1);
          v12 = v30;
        }
        v8 = (char *)v8 + 1;
        v12[2] = v10;
        sub_1000455D8((uint64_t)v7, (uint64_t)v12+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(_QWORD *)(v28 + 72) * a1);
        v18 = v29;
        if ((id)v17 == v8)
        {
          swift_bridgeObjectRelease(v29);
          v8 = v25;
          a1 = v26;
          v11 = v23;
          v10 = v24;
          goto LABEL_21;
        }
      }
      __break(1u);
LABEL_16:
      if (v16 < 0)
        v21 = v16;
      else
        v21 = v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v16);
      v17 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_bridgeObjectRelease(v16);
      v27 = (int)v12;
      if (!v17)
        goto LABEL_20;
    }
    __break(1u);
  }
  else
  {
LABEL_20:
    swift_bridgeObjectRelease(v16);
    v12 = _swiftEmptyArrayStorage;
LABEL_21:
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v11;
    *(_BYTE *)(a1 + 24) = v27;
    *(_QWORD *)(a1 + 32) = v12;
  }
}

uint64_t sub_100059EA8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100005F78(&qword_1000A1278);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v11 = sub_10001AB08(0, &qword_1000A2E80, BDSBookWidgetData_ptr);
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v11);
    return swift_continuation_throwingResume(v3);
  }
}

void sub_100059F50(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  double v4;
  double v5;
  BOOL v6;
  void *v7;
  double v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  char v33;

  v3 = objc_msgSend(v1, "readingProgress");
  v6 = 1;
  if (v3)
  {
    v7 = v3;
    v32 = 0.0;
    v33 = 1;
    static Double._conditionallyBridgeFromObjectiveC(_:result:)(v3, &v32);

    v4 = v32;
    v5 = 0.0;
    if (v32 > 1.0)
      v4 = 1.0;
    if ((v33 & 1) != 0)
      v8 = 0.0;
    else
      v8 = v4;
    v6 = (v33 & 1) != 0;
  }
  else
  {
    v8 = 0.0;
  }
  v9 = objc_msgSend(v1, "title", v4, v5);
  if (v9)
  {
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v30 = v12;
    v31 = v11;

  }
  else
  {
    v30 = 0;
    v31 = 0;
  }
  v13 = objc_msgSend(v1, "assetID");
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v15 = v14;

  v16 = objc_msgSend(v1, "cloudAssetType");
  v17 = objc_msgSend(v1, "libraryAssetType");
  v18 = objc_msgSend(v1, "coverURL");
  if (v18)
  {
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v22 = v21;

  }
  else
  {
    v20 = 0;
    v22 = 0;
  }
  v23 = objc_msgSend(v1, "pageProgressionDirection");
  if (v23
    && (v24 = v23, v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23), v27 = v26, v24, v27))
  {
    if (v25 == 7107698 && v27 == 0xE300000000000000)
      v28 = 1;
    else
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, 7107698, 0xE300000000000000, 0);
    swift_bridgeObjectRelease(v27);
  }
  else
  {
    v28 = 0;
  }
  *(_QWORD *)a1 = v31;
  *(_QWORD *)(a1 + 8) = v30;
  *(double *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v29;
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v17;
  *(_QWORD *)(a1 + 64) = v20;
  *(_QWORD *)(a1 + 72) = v22;
  *(_BYTE *)(a1 + 80) = v28 & 1;
}

uint64_t sub_10005A188()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

BOOL static ConnectorStyle.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void ConnectorStyle.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int ConnectorStyle.hashValue.getter(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t WidgetReadingHistory.State.currentStreak.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t WidgetReadingHistory.Day.goal.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t WidgetReadingHistory.Day.goal.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*WidgetReadingHistory.State.today.modify())()
{
  return WidgetReadingHistory.Day.readingTime.getter;
}

uint64_t WidgetReadingHistory.Day.isStreakDay.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a3 & 1;
}

uint64_t WidgetReadingHistory.Day.isStreakDay.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t static WidgetReadingHistory.Day.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  _BOOL4 v7;

  v7 = a1 == a4 && a2 == a5;
  return v7 & (a3 ^ a6 ^ 1u);
}

uint64_t sub_10005A280(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    return (*(unsigned __int8 *)(a2 + 16) ^ *(unsigned __int8 *)(a1 + 16) ^ 1) & 1;
  else
    return 0;
}

uint64_t WidgetReadingHistory.DayEntry.date.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t WidgetReadingHistory.DayEntry.day.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for WidgetReadingHistory.DayEntry(0) + 20));
}

uint64_t WidgetReadingHistory.DayEntry.day.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for WidgetReadingHistory.DayEntry(0);
  v8 = v3 + *(int *)(result + 20);
  *(_QWORD *)v8 = a1;
  *(_QWORD *)(v8 + 8) = a2;
  *(_BYTE *)(v8 + 16) = a3;
  return result;
}

uint64_t (*WidgetReadingHistory.DayEntry.day.modify())(_QWORD)
{
  type metadata accessor for WidgetReadingHistory.DayEntry(0);
  return WidgetReadingHistory.Day.readingTime.getter;
}

uint64_t static WidgetReadingHistory.DayEntry.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL4 v13;

  if ((static Date.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = *(int *)(type metadata accessor for WidgetReadingHistory.DayEntry(0) + 20);
  v5 = *(_QWORD *)(a1 + v4);
  v6 = *(_QWORD *)(a1 + v4 + 8);
  v7 = *(unsigned __int8 *)(a1 + v4 + 16);
  v8 = (uint64_t *)(a2 + v4);
  v9 = *v8;
  v10 = v8[1];
  v11 = *((unsigned __int8 *)v8 + 16);
  v13 = v5 == v9 && v6 == v10;
  return v13 & (v7 ^ v11 ^ 1u);
}

uint64_t sub_10005A3F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BOOL4 v15;

  if ((static Date.== infix(_:_:)() & 1) == 0)
    return 0;
  v6 = *(int *)(a3 + 20);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  v9 = *(unsigned __int8 *)(a1 + v6 + 16);
  v10 = (uint64_t *)(a2 + v6);
  v11 = *v10;
  v12 = v10[1];
  v13 = *((unsigned __int8 *)v10 + 16);
  v15 = v7 == v11 && v8 == v12;
  return v15 & (v9 ^ v13 ^ 1u);
}

uint64_t WidgetReadingHistory.Streak.length.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for WidgetReadingHistory.Streak(0) + 20));
}

uint64_t type metadata accessor for WidgetReadingHistory.Streak(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A2E30, (uint64_t)&nominal type descriptor for WidgetReadingHistory.Streak);
}

BOOL static WidgetReadingHistory.Streak.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((static Date.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = type metadata accessor for WidgetReadingHistory.Streak(0);
  return *(_QWORD *)(a1 + *(int *)(v4 + 20)) == *(_QWORD *)(a2 + *(int *)(v4 + 20));
}

BOOL sub_10005A4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.== infix(_:_:)() & 1) != 0
      && *(_QWORD *)(a1 + *(int *)(a3 + 20)) == *(_QWORD *)(a2 + *(int *)(a3 + 20));
}

uint64_t WidgetReadingHistory.State.currentStreak.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t WidgetReadingHistory.State.today.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t WidgetReadingHistory.State.today.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 8) = result;
  *(_QWORD *)(v3 + 16) = a2;
  *(_BYTE *)(v3 + 24) = a3;
  return result;
}

uint64_t WidgetReadingHistory.State.readingHistory.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
}

uint64_t WidgetReadingHistory.State.readingHistory.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t static WidgetReadingHistory.State.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) ? (v2 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)) : (v2 = 0),
        v2 && ((*(unsigned __int8 *)(a1 + 24) ^ *(unsigned __int8 *)(a2 + 24)) & 1) == 0))
  {
    return sub_10005A5C8(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10005A5C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  BOOL v19;
  uint64_t v21;

  v4 = type metadata accessor for WidgetReadingHistory.DayEntry(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v21 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
      return 1;
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v13 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      sub_100045594(a1 + v12, (uint64_t)v10);
      sub_100045594(a2 + v12, (uint64_t)v7);
      if ((static Date.== infix(_:_:)(v10, v7) & 1) == 0)
        break;
      v14 = *(int *)(v4 + 20);
      v15 = &v10[v14];
      v16 = *(_QWORD *)&v10[v14];
      v17 = *(_QWORD *)&v10[v14 + 8];
      v18 = &v7[v14];
      v19 = v16 == *(_QWORD *)v18 && v17 == *((_QWORD *)v18 + 1);
      if (!v19 || ((v15[16] ^ v18[16]) & 1) != 0)
        break;
      sub_100045664((uint64_t)v7);
      sub_100045664((uint64_t)v10);
      v12 += v13;
      if (!--v11)
        return 1;
    }
    sub_100045664((uint64_t)v7);
    sub_100045664((uint64_t)v10);
  }
  return 0;
}

unint64_t sub_10005A718()
{
  unint64_t result;

  result = qword_1000A2C88;
  if (!qword_1000A2C88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConnectorStyle, &type metadata for ConnectorStyle);
    atomic_store(result, (unint64_t *)&qword_1000A2C88);
  }
  return result;
}

uint64_t sub_10005A75C(uint64_t a1, uint64_t a2)
{
  BOOL v3;

  v3 = *(_QWORD *)a1 == *(_QWORD *)a2
    && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  if (!v3 || ((*(unsigned __int8 *)(a1 + 24) ^ *(unsigned __int8 *)(a2 + 24)) & 1) != 0)
    return 0;
  else
    return sub_10005A5C8(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
}

uint64_t type metadata accessor for WidgetDataController()
{
  return objc_opt_self(_TtC20BooksWidgetExtension20WidgetDataController);
}

uint64_t getEnumTagSinglePayload for ConnectorStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectorStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10005A89C + 4 * byte_100081B35[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10005A8D0 + 4 * byte_100081B30[v4]))();
}

uint64_t sub_10005A8D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005A8D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005A8E0);
  return result;
}

uint64_t sub_10005A8EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005A8F4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10005A8F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005A900(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConnectorStyle()
{
  return &type metadata for ConnectorStyle;
}

uint64_t initializeWithCopy for DayViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for DayViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

__n128 initializeWithTake for DayViewModel(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DayViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for DayViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 42))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DayViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 42) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DayViewModel()
{
  return &type metadata for DayViewModel;
}

uint64_t *initializeBufferWithCopyOfBuffer for DailyReadingGoalsViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for DailyReadingGoalsViewModel(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *assignWithCopy for DailyReadingGoalsViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  return a1;
}

uint64_t *assignWithTake for DailyReadingGoalsViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for DailyReadingGoalsViewModel()
{
  return &type metadata for DailyReadingGoalsViewModel;
}

uint64_t initializeBufferWithCopyOfBuffer for PlatterStyle(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PlatterStyle(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PlatterStyle(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_10005AC2C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10005AC48(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatterStyle()
{
  return &type metadata for PlatterStyle;
}

ValueMetadata *type metadata accessor for WidgetReadingHistory()
{
  return &type metadata for WidgetReadingHistory;
}

__n128 initializeBufferWithCopyOfBuffer for WidgetReadingHistory.Day(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for WidgetReadingHistory.Day(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetReadingHistory.Day(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetReadingHistory.Day()
{
  return &type metadata for WidgetReadingHistory.Day;
}

uint64_t *initializeBufferWithCopyOfBuffer for WidgetReadingHistory.DayEntry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_OWORD *)v9 = *(_OWORD *)v10;
    v9[16] = v10[16];
  }
  return a1;
}

uint64_t initializeWithCopy for WidgetReadingHistory.DayEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  return a1;
}

uint64_t assignWithCopy for WidgetReadingHistory.DayEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  return a1;
}

uint64_t initializeWithTake for WidgetReadingHistory.DayEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  return a1;
}

uint64_t assignWithTake for WidgetReadingHistory.DayEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetReadingHistory.DayEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005AFA4);
}

uint64_t sub_10005AFA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 16);
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for WidgetReadingHistory.DayEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005B040);
}

uint64_t sub_10005B040(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 16) = a2 + 1;
  return result;
}

uint64_t sub_10005B0BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005B398(a1, a2, a3, (uint64_t)&unk_100081D18);
}

uint64_t *initializeBufferWithCopyOfBuffer for WidgetReadingHistory.Streak(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t _s20BooksWidgetExtension20WidgetReadingHistoryO8DayEntryVwxx_0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for WidgetReadingHistory.Streak(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for WidgetReadingHistory.Streak(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for WidgetReadingHistory.Streak(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for WidgetReadingHistory.Streak(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetReadingHistory.Streak(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005B300);
}

uint64_t sub_10005B300(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for WidgetReadingHistory.Streak(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005B348);
}

uint64_t sub_10005B348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10005B388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005B398(a1, a2, a3, (uint64_t)&value witness table for Builtin.Int64 + 64);
}

uint64_t sub_10005B398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v7;
  _QWORD v8[2];

  result = type metadata accessor for Date(319);
  if (v7 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(result - 8) + 64;
    v8[1] = a4;
    swift_initStructMetadata(a1, 256, 2, v8, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t destroy for WidgetReadingHistory.State(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for WidgetReadingHistory.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for WidgetReadingHistory.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for WidgetReadingHistory.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetReadingHistory.State(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetReadingHistory.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetReadingHistory.State()
{
  return &type metadata for WidgetReadingHistory.State;
}

uint64_t _s20BooksWidgetExtension12DayViewModelV16DayNameViewModelVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for DayViewModel.DayNameViewModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for DayViewModel.DayNameViewModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for DayViewModel.DayNameViewModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for DayViewModel.DayNameViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DayViewModel.DayNameViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DayViewModel.DayNameViewModel()
{
  return &type metadata for DayViewModel.DayNameViewModel;
}

void sub_10005B73C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  Class isa;
  NSString v6;
  uint64_t v7;

  v0 = type metadata accessor for Calendar(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  static Calendar.gregorian.getter();
  isa = Calendar._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, "setCalendar:", isa);

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setDateFormat:", v6);

  qword_1000A2C68 = (uint64_t)v4;
}

uint64_t sub_10005B830@<X0>(char *a1@<X8>)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  NSString v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void (*v17)(char *, char *, uint64_t);
  id v18;
  id v19;
  unsigned __int8 v20;
  char *v21;
  uint64_t result;
  char *v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v36 = a1;
  v2 = sub_100005F78(&qword_1000A25C8);
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v35 - v10;
  if (qword_1000A06E8 != -1)
    swift_once(&qword_1000A06E8, sub_10005B73C);
  v12 = (void *)qword_1000A2C68;
  v37 = v1;
  v13 = objc_msgSend(v1, "date");
  if (!v13)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v15 = v14;
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
  }
  v16 = objc_msgSend(v12, "dateFromString:", v13);

  if (v16)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v16);

    v17 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v17(v4, v9, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      v17(v11, v4, v5);
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
      v18 = objc_msgSend(v37, "day");
      v37 = objc_msgSend(v18, "readingTime");
      v19 = objc_msgSend(v18, "goal");
      v20 = objc_msgSend(v18, "isStreakDay");

      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      v21 = v36;
      v17(v36, v9, v5);
      result = type metadata accessor for WidgetReadingHistory.DayEntry(0);
      v23 = &v21[*(int *)(result + 20)];
      *(_QWORD *)v23 = v37;
      *((_QWORD *)v23 + 1) = v19;
      v23[16] = v20;
      return result;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  }
  sub_100007A0C((uint64_t)v4, &qword_1000A25C8);
  if (qword_1000A06F0 != -1)
    swift_once(&qword_1000A06F0, sub_10005BC8C);
  v24 = type metadata accessor for Logger(0);
  sub_10000BE14(v24, (uint64_t)qword_1000A2C70);
  v25 = v37;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v40 = v29;
    *(_DWORD *)v28 = 136315138;
    v37 = v28 + 4;
    v30 = objc_msgSend(v25, "date");
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

    v38 = sub_10005BD08(v31, v33, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v37, v28 + 12);

    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Can't widgify BDSReadingHistoryDayEntryInfo due to invalid date string: '%s'", v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

  }
  v34 = sub_10005D9A8();
  swift_allocError(&_s12WidgifyErrorON, v34, 0, 0);
  return swift_willThrow();
}

uint64_t sub_10005BC8C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000C090(v0, qword_1000A2C70);
  sub_10000BE14(v0, (uint64_t)qword_1000A2C70);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x800000010007BDF0, 0xD000000000000020, 0x800000010007E3B0);
}

uint64_t sub_10005BD08(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10005BDD8(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10005D9EC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10005D9EC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10001AA60(v12);
  return v7;
}

uint64_t sub_10005BDD8(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10005BF90(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_10005BF90(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10005C024(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10005C1FC(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_10005C1FC(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10005C024(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10005C198(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10005C198(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100005F78(&qword_1000A2E88);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10005C1FC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005F78(&qword_1000A2E88);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10005C348(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10005C3D4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10005C364(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10005C53C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10005C380(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10005C6B4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10005C39C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10005C894(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10005C3B8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10005CA10(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10005C3D4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005F78(&qword_1000A2E98);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10005C53C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005F78(&qword_1000A2E90);
    v11 = (char *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 48 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10005C6B4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100005F78(&qword_1000A25A0);
  v11 = *(_QWORD *)(type metadata accessor for WidgetReadingHistory.DayEntry(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = type metadata accessor for WidgetReadingHistory.DayEntry(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10005C894(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005F78(&qword_1000A2EA0);
    v11 = (char *)swift_allocObject(v10, 88 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 88);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 88 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10005CA10(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005F78(&qword_1000A0A58);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10005CB78()
{
  id v0;
  id v1;
  NSString v2;
  id v3;
  NSString v4;
  id v5;
  NSString v6;
  id v7;
  NSString v8;
  NSString v9;
  NSString v10;
  uint64_t v11;
  NSString v12;
  __int128 v14;
  __int128 v15;

  v0 = objc_msgSend((id)objc_opt_self(BUAppGroup), "books");
  v1 = objc_msgSend(v0, "userDefaults");

  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "objectForKey:", v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(&v14, v3);
    swift_unknownObjectRelease(v3);
    sub_100007A0C((uint64_t)&v14, &qword_1000A1290);
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
    sub_100007A0C((uint64_t)&v14, &qword_1000A1290);
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v1, "objectForKey:", v4);

    if (!v5)
    {
      v14 = 0u;
      v15 = 0u;
      sub_100007A0C((uint64_t)&v14, &qword_1000A1290);
      v12 = String._bridgeToObjectiveC()();
      v11 = 1;
      objc_msgSend(v1, "setBool:forKey:", 1, v12);
      goto LABEL_6;
    }
    _bridgeAnyObjectToAny(_:)(&v14, v5);
    swift_unknownObjectRelease(v5);
    sub_100007A0C((uint64_t)&v14, &qword_1000A1290);
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v1, "BOOLForKey:", v6);

    v8 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "removeObjectForKey:", v8);

    v9 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "setBool:forKey:", v7, v9);

  }
  v10 = String._bridgeToObjectiveC()();
  v11 = (uint64_t)objc_msgSend(v1, "BOOLForKey:", v10);
  v12 = v1;
  v1 = v10;
LABEL_6:

  return v11;
}

uint64_t sub_10005CDF8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 104) = a1;
  return swift_task_switch(sub_10005CE10, 0, 0);
}

uint64_t sub_10005CE10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 112) = v2;
  if (!v2)
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = _swiftEmptyArrayStorage;
  v3 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v0 + 32) = v3;
  v4 = *(_OWORD *)(v1 + 64);
  v5 = *(_OWORD *)(v1 + 80);
  v6 = *(_OWORD *)(v1 + 96);
  *(_BYTE *)(v0 + 96) = *(_BYTE *)(v1 + 112);
  *(_OWORD *)(v0 + 64) = v5;
  *(_OWORD *)(v0 + 80) = v6;
  *(_OWORD *)(v0 + 48) = v4;
  *(_QWORD *)(v0 + 136) = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v0 + 144) = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v1 + 48);
  *(_BYTE *)(v0 + 97) = *(_BYTE *)(v1 + 56);
  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v0 + 168) = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v0 + 176) = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v0 + 192) = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v0 + 200) = *(_QWORD *)(v1 + 104);
  *(_BYTE *)(v0 + 98) = *(_BYTE *)(v1 + 112);
  v8 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 208) = v8;
  *(_QWORD *)(v0 + 216) = v7;
  swift_bridgeObjectRetain(v1);
  sub_10000DF3C((_QWORD *)(v0 + 16));
  if (qword_1000A06F0 != -1)
    swift_once(&qword_1000A06F0, sub_10005BC8C);
  v9 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 224) = sub_10000BE14(v9, (uint64_t)qword_1000A2C70);
  v10 = sub_10000DF3C((_QWORD *)(v0 + 16));
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v18 = v14;
    *(_DWORD *)v13 = 136315138;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v13 + 4) = sub_10005BD08(v8, v7, &v18);
    swift_bridgeObjectRelease(v7);
    sub_10005DA28(v0 + 16);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "About to process raw cover for %s", (uint8_t *)v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    sub_10005DA28(v0 + 16);
  }

  v17 = (uint64_t (*)(uint64_t))((char *)&dword_1000A1248 + dword_1000A1248);
  v16 = (_QWORD *)swift_task_alloc(unk_1000A124C);
  *(_QWORD *)(v0 + 232) = v16;
  *v16 = v0;
  v16[1] = sub_10005D074;
  return v17(v0 + 16);
}

uint64_t sub_10005D074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10005D4F8;
  else
    v3 = sub_10005D0D8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10005D0D8()
{
  uint64_t v0;
  _OWORD *v1;
  _QWORD *v2;
  NSObject *v3;
  os_log_type_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t (*v41)(_OWORD *);
  uint64_t v42;

  v1 = (_OWORD *)(v0 + 16);
  v2 = sub_10000DF3C((_QWORD *)(v0 + 16));
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v6 = *(_QWORD *)(v0 + 208);
    v5 = *(_QWORD *)(v0 + 216);
    v7 = swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v42 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain(v5);
    *(_QWORD *)(v7 + 4) = sub_10005BD08(v6, v5, &v42);
    swift_bridgeObjectRelease(v5);
    sub_10005DA28(v0 + 16);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Done processing raw cover for %s", (uint8_t *)v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    sub_10005DA28(v0 + 16);
  }

  v9 = *(_QWORD *)(v0 + 128);
  sub_10000DF3C((_QWORD *)(v0 + 16));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
  v11 = *(_QWORD **)(v0 + 128);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v11 = sub_100040A04(0, v11[2] + 1, 1, *(_QWORD **)(v0 + 128));
  v13 = v11[2];
  v12 = v11[3];
  if (v13 >= v12 >> 1)
    v11 = sub_100040A04((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
  v14 = *(_BYTE *)(v0 + 98);
  v16 = *(_QWORD *)(v0 + 176);
  v15 = *(_QWORD *)(v0 + 184);
  v17 = *(_OWORD *)(v0 + 160);
  v18 = *(_BYTE *)(v0 + 97);
  v19 = *(_QWORD *)(v0 + 152);
  v20 = *(_QWORD *)(v0 + 112);
  v21 = *(_QWORD *)(v0 + 120) + 1;
  v22 = &v11[11 * v13];
  v23 = *(_OWORD *)(v0 + 136);
  v24 = *(_OWORD *)(v0 + 192);
  v11[2] = v13 + 1;
  *((_OWORD *)v22 + 2) = v23;
  v22[6] = v19;
  *((_BYTE *)v22 + 56) = v18;
  *((_OWORD *)v22 + 4) = v17;
  v22[10] = v16;
  v22[11] = v15;
  *((_OWORD *)v22 + 6) = v24;
  *((_BYTE *)v22 + 112) = v14;
  sub_10005DA28(v0 + 16);
  if (v21 == v20)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v11);
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 120) + 1;
    *(_QWORD *)(v0 + 120) = v26;
    *(_QWORD *)(v0 + 128) = v11;
    v27 = *(_QWORD *)(v0 + 104) + 88 * v26;
    v28 = *(_OWORD *)(v27 + 48);
    *v1 = *(_OWORD *)(v27 + 32);
    *(_OWORD *)(v0 + 32) = v28;
    v30 = *(_OWORD *)(v27 + 80);
    v29 = *(_OWORD *)(v27 + 96);
    v31 = *(_OWORD *)(v27 + 64);
    *(_BYTE *)(v0 + 96) = *(_BYTE *)(v27 + 112);
    *(_OWORD *)(v0 + 64) = v30;
    *(_OWORD *)(v0 + 80) = v29;
    *(_OWORD *)(v0 + 48) = v31;
    *(_QWORD *)(v0 + 136) = *(_QWORD *)(v27 + 32);
    *(_QWORD *)(v0 + 144) = *(_QWORD *)(v27 + 40);
    *(_QWORD *)(v0 + 152) = *(_QWORD *)(v27 + 48);
    *(_BYTE *)(v0 + 97) = *(_BYTE *)(v27 + 56);
    *(_QWORD *)(v0 + 160) = *(_QWORD *)(v27 + 64);
    *(_QWORD *)(v0 + 168) = *(_QWORD *)(v27 + 72);
    *(_QWORD *)(v0 + 176) = *(_QWORD *)(v27 + 80);
    *(_QWORD *)(v0 + 184) = *(_QWORD *)(v27 + 88);
    *(_QWORD *)(v0 + 192) = *(_QWORD *)(v27 + 96);
    *(_QWORD *)(v0 + 200) = *(_QWORD *)(v27 + 104);
    *(_BYTE *)(v0 + 98) = *(_BYTE *)(v27 + 112);
    v33 = *(_QWORD *)(v0 + 48);
    v32 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 208) = v33;
    *(_QWORD *)(v0 + 216) = v32;
    sub_10000DF3C((_QWORD *)(v0 + 16));
    if (qword_1000A06F0 != -1)
      swift_once(&qword_1000A06F0, sub_10005BC8C);
    v34 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 224) = sub_10000BE14(v34, (uint64_t)qword_1000A2C70);
    v35 = sub_10000DF3C((_QWORD *)(v0 + 16));
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v42 = v39;
      *(_DWORD *)v38 = 136315138;
      swift_bridgeObjectRetain(v32);
      *(_QWORD *)(v38 + 4) = sub_10005BD08(v33, v32, &v42);
      swift_bridgeObjectRelease(v32);
      sub_10005DA28(v0 + 16);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "About to process raw cover for %s", (uint8_t *)v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      sub_10005DA28(v0 + 16);
    }

    v41 = (uint64_t (*)(_OWORD *))((char *)&dword_1000A1248 + dword_1000A1248);
    v40 = (_QWORD *)swift_task_alloc(unk_1000A124C);
    *(_QWORD *)(v0 + 232) = v40;
    *v40 = v0;
    v40[1] = sub_10005D074;
    return v41(v1);
  }
}

uint64_t sub_10005D4F8()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t (*v43)(_OWORD *);
  uint64_t v44;

  v1 = (_OWORD *)(v0 + 16);
  v2 = swift_errorRetain(*(_QWORD *)(v0 + 240));
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 240);
  if (v5)
  {
    v7 = swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    v9 = _convertErrorToNSError(_:)(v6);
    *(_QWORD *)(v7 + 4) = v9;
    *v8 = v9;
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to fetch raw cover, error: %@", (uint8_t *)v7, 0xCu);
    v10 = sub_100005F78(&qword_1000A1260);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v6);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 240));
    swift_errorRelease(v6);

  }
  v11 = *(_QWORD *)(v0 + 128);
  sub_10000DF3C((_QWORD *)(v0 + 16));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
  v13 = *(_QWORD **)(v0 + 128);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v13 = sub_100040A04(0, v13[2] + 1, 1, *(_QWORD **)(v0 + 128));
  v15 = v13[2];
  v14 = v13[3];
  if (v15 >= v14 >> 1)
    v13 = sub_100040A04((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
  v16 = *(_BYTE *)(v0 + 98);
  v18 = *(_QWORD *)(v0 + 176);
  v17 = *(_QWORD *)(v0 + 184);
  v19 = *(_OWORD *)(v0 + 160);
  v20 = *(_BYTE *)(v0 + 97);
  v21 = *(_QWORD *)(v0 + 152);
  v22 = *(_QWORD *)(v0 + 112);
  v23 = *(_QWORD *)(v0 + 120) + 1;
  v24 = &v13[11 * v15];
  v25 = *(_OWORD *)(v0 + 136);
  v26 = *(_OWORD *)(v0 + 192);
  v13[2] = v15 + 1;
  *((_OWORD *)v24 + 2) = v25;
  v24[6] = v21;
  *((_BYTE *)v24 + 56) = v20;
  *((_OWORD *)v24 + 4) = v19;
  v24[10] = v18;
  v24[11] = v17;
  *((_OWORD *)v24 + 6) = v26;
  *((_BYTE *)v24 + 112) = v16;
  sub_10005DA28(v0 + 16);
  if (v23 == v22)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v13);
  }
  else
  {
    v28 = *(_QWORD *)(v0 + 120) + 1;
    *(_QWORD *)(v0 + 120) = v28;
    *(_QWORD *)(v0 + 128) = v13;
    v29 = *(_QWORD *)(v0 + 104) + 88 * v28;
    v30 = *(_OWORD *)(v29 + 48);
    *v1 = *(_OWORD *)(v29 + 32);
    *(_OWORD *)(v0 + 32) = v30;
    v32 = *(_OWORD *)(v29 + 80);
    v31 = *(_OWORD *)(v29 + 96);
    v33 = *(_OWORD *)(v29 + 64);
    *(_BYTE *)(v0 + 96) = *(_BYTE *)(v29 + 112);
    *(_OWORD *)(v0 + 64) = v32;
    *(_OWORD *)(v0 + 80) = v31;
    *(_OWORD *)(v0 + 48) = v33;
    *(_QWORD *)(v0 + 136) = *(_QWORD *)(v29 + 32);
    *(_QWORD *)(v0 + 144) = *(_QWORD *)(v29 + 40);
    *(_QWORD *)(v0 + 152) = *(_QWORD *)(v29 + 48);
    *(_BYTE *)(v0 + 97) = *(_BYTE *)(v29 + 56);
    *(_QWORD *)(v0 + 160) = *(_QWORD *)(v29 + 64);
    *(_QWORD *)(v0 + 168) = *(_QWORD *)(v29 + 72);
    *(_QWORD *)(v0 + 176) = *(_QWORD *)(v29 + 80);
    *(_QWORD *)(v0 + 184) = *(_QWORD *)(v29 + 88);
    *(_QWORD *)(v0 + 192) = *(_QWORD *)(v29 + 96);
    *(_QWORD *)(v0 + 200) = *(_QWORD *)(v29 + 104);
    *(_BYTE *)(v0 + 98) = *(_BYTE *)(v29 + 112);
    v35 = *(_QWORD *)(v0 + 48);
    v34 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 208) = v35;
    *(_QWORD *)(v0 + 216) = v34;
    sub_10000DF3C((_QWORD *)(v0 + 16));
    if (qword_1000A06F0 != -1)
      swift_once(&qword_1000A06F0, sub_10005BC8C);
    v36 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 224) = sub_10000BE14(v36, (uint64_t)qword_1000A2C70);
    v37 = sub_10000DF3C((_QWORD *)(v0 + 16));
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v44 = v41;
      *(_DWORD *)v40 = 136315138;
      swift_bridgeObjectRetain(v34);
      *(_QWORD *)(v40 + 4) = sub_10005BD08(v35, v34, &v44);
      swift_bridgeObjectRelease(v34);
      sub_10005DA28(v0 + 16);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "About to process raw cover for %s", (uint8_t *)v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      sub_10005DA28(v0 + 16);
    }

    v43 = (uint64_t (*)(_OWORD *))((char *)&dword_1000A1248 + dword_1000A1248);
    v42 = (_QWORD *)swift_task_alloc(unk_1000A124C);
    *(_QWORD *)(v0 + 232) = v42;
    *v42 = v0;
    v42[1] = sub_10005D074;
    return v43(v1);
  }
}

uint64_t sub_10005D918(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F78(&qword_1000A0C30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10005D960()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A0A60;
  if (!qword_1000A0A60)
  {
    v1 = type metadata accessor for WidgetFamily(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for WidgetFamily, v1);
    atomic_store(result, (unint64_t *)&qword_1000A0A60);
  }
  return result;
}

unint64_t sub_10005D9A8()
{
  unint64_t result;

  result = qword_1000A2E78;
  if (!qword_1000A2E78)
  {
    result = swift_getWitnessTable(&unk_100081DC8, &_s12WidgifyErrorON);
    atomic_store(result, (unint64_t *)&qword_1000A2E78);
  }
  return result;
}

uint64_t sub_10005D9EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10005DA28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 72);

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);

  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t _s12WidgifyErrorOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10005DAC8 + 4 * byte_100081B42[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10005DAE8 + 4 * byte_100081B47[v4]))();
}

_BYTE *sub_10005DAC8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10005DAE8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10005DAF0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10005DAF8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10005DB00(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10005DB08(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s12WidgifyErrorOMa()
{
  return &_s12WidgifyErrorON;
}

unint64_t sub_10005DB28()
{
  unint64_t result;

  result = qword_1000A2EA8;
  if (!qword_1000A2EA8)
  {
    result = swift_getWitnessTable(&unk_100081DA0, &_s12WidgifyErrorON);
    atomic_store(result, (unint64_t *)&qword_1000A2EA8);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaceholderTextView()
{
  return &type metadata for PlaceholderTextView;
}

uint64_t sub_10005DB80(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100084784, 1);
}

uint64_t sub_10005DB90@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v54[3];

  v48 = a1;
  v53 = a2;
  v2 = type metadata accessor for ColorScheme(0);
  v51 = *(_QWORD *)(v2 - 8);
  v52 = v2;
  __chkstk_darwin(v2);
  v50 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v49);
  v5 = (_OWORD *)((char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BlendMode(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005F78(&qword_1000A2EB0);
  __chkstk_darwin(v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100005F78(&qword_1000A2EB8);
  __chkstk_darwin(v45);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100005F78(&qword_1000A2EC0);
  __chkstk_darwin(v46);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100005F78(&qword_1000A2EC8);
  __chkstk_darwin(v47);
  v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for BlendMode.plusLighter(_:), v9);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v8, v12, v9);
  sub_1000078D4((uint64_t)v8, (uint64_t)&v15[*(int *)(v13 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_DWORD *)v15 = v48;
  *((_WORD *)v15 + 2) = 256;
  sub_100007A48((uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_1000079C8((uint64_t)v15, (uint64_t)v17, &qword_1000A2EB0);
  *(_QWORD *)&v17[*(int *)(v45 + 36)] = 0x3FB47AE147AE147BLL;
  sub_100007A0C((uint64_t)v15, &qword_1000A2EB0);
  v22 = (char *)v5 + *(int *)(v49 + 20);
  v23 = enum case for RoundedCornerStyle.continuous(_:);
  v24 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v22, v23, v24);
  __asm { FMOV            V0.2D, #2.0 }
  *v5 = _Q0;
  v30 = (uint64_t)&v19[*(int *)(v46 + 36)];
  sub_1000078D4((uint64_t)v5, v30, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v30 + *(int *)(sub_100005F78(&qword_1000A14C0) + 36)) = 256;
  sub_1000079C8((uint64_t)v17, (uint64_t)v19, &qword_1000A2EB8);
  sub_100007A48((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_100007A0C((uint64_t)v17, &qword_1000A2EB8);
  v32 = v50;
  v31 = v51;
  v33 = v52;
  (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v50, enum case for ColorScheme.dark(_:), v52);
  KeyPath = swift_getKeyPath(&unk_100081E78);
  v35 = (uint64_t *)&v21[*(int *)(v47 + 36)];
  v36 = sub_100005F78(&qword_1000A1078);
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))((char *)v35 + *(int *)(v36 + 28), v32, v33);
  *v35 = KeyPath;
  sub_1000079C8((uint64_t)v19, (uint64_t)v21, &qword_1000A2EC0);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
  v37 = sub_100007A0C((uint64_t)v19, &qword_1000A2EC0);
  v38 = static Alignment.center.getter(v37);
  _FrameLayout.init(width:height:alignment:)(v54, 0, 1, 0x4024000000000000, 0, v38, v39);
  v40 = v53;
  sub_1000079C8((uint64_t)v21, v53, &qword_1000A2EC8);
  v41 = (_OWORD *)(v40 + *(int *)(sub_100005F78(&qword_1000A2ED0) + 36));
  v42 = v54[1];
  *v41 = v54[0];
  v41[1] = v42;
  v41[2] = v54[2];
  return sub_100007A0C((uint64_t)v21, &qword_1000A2EC8);
}

uint64_t sub_10005E018@<X0>(uint64_t a1@<X8>)
{
  int *v1;

  return sub_10005DB90(*v1, a1);
}

uint64_t sub_10005E028()
{
  return sub_10000E208(&qword_1000A2ED8, &qword_1000A2ED0, (void (*)(void))sub_10005E05C);
}

unint64_t sub_10005E05C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2EE0;
  if (!qword_1000A2EE0)
  {
    v1 = sub_100005FC0(&qword_1000A2EC8);
    sub_10005E0E0();
    sub_100007F64(&qword_1000A20C0, &qword_1000A1078, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2EE0);
  }
  return result;
}

unint64_t sub_10005E0E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2EE8;
  if (!qword_1000A2EE8)
  {
    v1 = sub_100005FC0(&qword_1000A2EC0);
    sub_10000E208(&qword_1000A2EF0, &qword_1000A2EB8, (void (*)(void))sub_10005E184);
    sub_100007F64(&qword_1000A2F10, &qword_1000A14C0, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2EE8);
  }
  return result;
}

unint64_t sub_10005E184()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A2EF8;
  if (!qword_1000A2EF8)
  {
    v1 = sub_100005FC0(&qword_1000A2EB0);
    sub_100007F64(&qword_1000A2F00, &qword_1000A2F08, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A2EF8);
  }
  return result;
}

uint64_t sub_10005E208(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6369666963657073;
  else
    v3 = 0x6563655274736F6DLL;
  if (v2)
    v4 = 0xEA0000000000746ELL;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6369666963657073;
  else
    v5 = 0x6563655274736F6DLL;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xEA0000000000746ELL;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10005E2AC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7468676972;
  else
    v3 = 1952867692;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7468676972;
  else
    v5 = 1952867692;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

Swift::Int sub_10005E340(char a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 0x6369666963657073;
  else
    v2 = 0x6563655274736F6DLL;
  if ((a1 & 1) != 0)
    v3 = 0xE800000000000000;
  else
    v3 = 0xEA0000000000746ELL;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_10005E3C4(char a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if ((a1 & 1) != 0)
    v2 = 0x7468676972;
  else
    v2 = 1952867692;
  if ((a1 & 1) != 0)
    v3 = 0xE500000000000000;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

unint64_t sub_10005E438(uint64_t a1)
{
  return sub_10005E78C(a1, &qword_1000A27E0, &qword_1000A31E8, (uint64_t (*)(_QWORD))sub_100040F10);
}

unint64_t sub_10005E454(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_100005F78(&qword_1000A2A88);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v8;
  }
  sub_100005F78(&qword_1000A31D0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_1000079C8(v13, (uint64_t)v5, &qword_1000A2A88);
    v15 = *v5;
    result = sub_100040FA8(*v5);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v8[6] + result) = v15;
    v19 = v8[7];
    v20 = type metadata accessor for DisplayRepresentation(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v10, v20);
    v21 = v8[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10005E5EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_100005F78(&qword_1000A2AA8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v8;
  }
  sub_100005F78(&qword_1000A31D8);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_1000079C8(v13, (uint64_t)v5, &qword_1000A2AA8);
    v15 = *v5;
    result = sub_100040FA8(*v5);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v8[6] + result) = v15;
    v19 = v8[7];
    v20 = sub_100005F78(&qword_1000A31E0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v10, v20);
    v21 = v8[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10005E78C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t result;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD);

  v31 = a4;
  v7 = sub_100005F78(a2);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
    v13 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v29 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v29);
    return (unint64_t)v13;
  }
  sub_100005F78(a3);
  v12 = static _DictionaryStorage.allocate(capacity:)(v11);
  v13 = (_QWORD *)v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_9;
  v15 = &v10[*(int *)(v7 + 48)];
  v16 = v12 + 64;
  v17 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v30 = a1;
  v18 = a1 + v17;
  v19 = *(_QWORD *)(v8 + 72);
  swift_retain(v12);
  while (1)
  {
    sub_1000079C8(v18, (uint64_t)v10, a2);
    v20 = *v10;
    result = v31(*v10);
    if ((v22 & 1) != 0)
      break;
    v23 = result;
    *(_QWORD *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v13[6] + result) = v20;
    v24 = v13[7];
    v25 = type metadata accessor for DisplayRepresentation(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v23, v15, v25);
    v26 = v13[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_12;
    v13[2] = v28;
    v18 += v19;
    if (!--v14)
    {
      swift_release(v13);
      v29 = v30;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10005E924(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005F78(&qword_1000A31F8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_1000410A4(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10005EA44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005F78(&qword_1000A31F0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_1000410A4(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10005EB5C()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_10005EB8C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7468676972;
  else
    return 1952867692;
}

uint64_t sub_10005EBB8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100005F78(&qword_1000A2758);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000C090(v16, qword_1000AA368);
  sub_10000BE14(v16, (uint64_t)qword_1000AA368);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x654D20736B6F6F42, 0xEF6564695320756ELL);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Setting Reading Menu Position to left/right side", 48, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

unint64_t sub_10005EDD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  char *v33;
  unint64_t result;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;

  v0 = sub_100005F78(&qword_1000A2750);
  __chkstk_darwin(v0);
  v45 = (char *)&v35 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100005F78(&qword_1000A2758);
  __chkstk_darwin(v2);
  v44 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v41 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  v37 = v13;
  v15 = __chkstk_darwin(v13);
  v43 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v35 - v17;
  v19 = sub_100005F78(&qword_1000A31B8);
  v20 = sub_100005F78(&qword_1000A31C0);
  v21 = *(_QWORD *)(v20 - 8);
  v40 = *(_QWORD *)(v21 + 72);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = swift_allocObject(v19, v23 + 2 * v40, v22 | 7);
  v42 = v24;
  *(_OWORD *)(v24 + 16) = xmmword_10007F170;
  v25 = v24 + v23;
  *(_BYTE *)(v24 + v23) = 0;
  v35 = v24 + v23 + *(int *)(v20 + 48);
  v26 = String.LocalizationValue.init(stringLiteral:)(1952867660, 0xE400000000000000);
  static Locale.current.getter(v26);
  v38 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v41 = *(_QWORD *)(v41 + 104);
  v27 = v6;
  ((void (*)(char *))v41)(v6);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0, 0, v9, v6, "AppIntent: Reading menu on left side", 36, 2);
  v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v28 = v44;
  v36(v44, 1, 1, v13);
  v29 = type metadata accessor for DisplayRepresentation.Image(0);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v31 = v45;
  v30(v45, 1, 1, v29);
  DisplayRepresentation.init(title:subtitle:image:)(v18, v28, v31);
  *(_BYTE *)(v25 + v40) = 1;
  v32 = String.LocalizationValue.init(stringLiteral:)(0x7468676952, 0xE500000000000000);
  static Locale.current.getter(v32);
  ((void (*)(char *, _QWORD, uint64_t))v41)(v27, v38, v39);
  v33 = v43;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0, 0, v9, v27, "AppIntent: Reading menu on right side", 37, 2);
  v36(v28, 1, 1, v37);
  v30(v31, 1, 1, v29);
  DisplayRepresentation.init(title:subtitle:image:)(v33, v28, v31);
  result = sub_10005E78C(v42, &qword_1000A31C0, &qword_1000A31C8, (uint64_t (*)(_QWORD))sub_10004101C);
  qword_1000AA380 = result;
  return result;
}

uint64_t sub_10005F1B4(char *a1, char *a2)
{
  return sub_10005E2AC(*a1, *a2);
}

unint64_t sub_10005F1C4()
{
  unint64_t result;

  result = qword_1000A2F28;
  if (!qword_1000A2F28)
  {
    result = swift_getWitnessTable(&unk_100081EBC, &type metadata for BooksMenuAnchor);
    atomic_store(result, (unint64_t *)&qword_1000A2F28);
  }
  return result;
}

Swift::Int sub_10005F208()
{
  char *v0;

  return sub_10005E3C4(*v0);
}

uint64_t sub_10005F210(uint64_t a1)
{
  char *v1;

  return sub_10003EB18(a1, *v1);
}

Swift::Int sub_10005F218(uint64_t a1)
{
  char *v1;

  return sub_10003EB64(a1, *v1);
}

uint64_t sub_10005F220@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100099ED8, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_10005F27C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10005EB8C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10005F2A8()
{
  unint64_t result;

  result = qword_1000A2F30;
  if (!qword_1000A2F30)
  {
    result = swift_getWitnessTable(&unk_100081FD4, &type metadata for BooksMenuAnchor);
    atomic_store(result, (unint64_t *)&qword_1000A2F30);
  }
  return result;
}

unint64_t sub_10005F2F0()
{
  unint64_t result;

  result = qword_1000A2F38;
  if (!qword_1000A2F38)
  {
    result = swift_getWitnessTable(&unk_10008200C, &type metadata for BooksMenuAnchor);
    atomic_store(result, (unint64_t *)&qword_1000A2F38);
  }
  return result;
}

unint64_t sub_10005F338()
{
  unint64_t result;

  result = qword_1000A2F40;
  if (!qword_1000A2F40)
  {
    result = swift_getWitnessTable(&unk_100081F24, &type metadata for BooksMenuAnchor);
    atomic_store(result, (unint64_t *)&qword_1000A2F40);
  }
  return result;
}

unint64_t sub_10005F380()
{
  unint64_t result;

  result = qword_1000A2F48;
  if (!qword_1000A2F48)
  {
    result = swift_getWitnessTable(&unk_10008203C, &type metadata for BooksMenuAnchor);
    atomic_store(result, (unint64_t *)&qword_1000A2F48);
  }
  return result;
}

unint64_t sub_10005F3C8()
{
  unint64_t result;

  result = qword_1000A2F50;
  if (!qword_1000A2F50)
  {
    result = swift_getWitnessTable(&unk_100082064, &type metadata for BooksMenuAnchor);
    atomic_store(result, (unint64_t *)&qword_1000A2F50);
  }
  return result;
}

unint64_t sub_10005F414()
{
  unint64_t result;

  result = qword_1000A2F58;
  if (!qword_1000A2F58)
  {
    result = swift_getWitnessTable(&unk_1000820E4, &type metadata for BooksMenuAnchor);
    atomic_store(result, (unint64_t *)&qword_1000A2F58);
  }
  return result;
}

uint64_t sub_10005F458@<X0>(uint64_t a1@<X8>)
{
  return sub_100047640(&qword_1000A06F8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000AA368, (uint64_t)sub_10005EBB8, a1);
}

uint64_t sub_10005F47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004FFB4(a1, a2, a3, (uint64_t (*)(void))sub_10005F490, (uint64_t)&opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>);
}

unint64_t sub_10005F490()
{
  unint64_t result;

  result = qword_1000A2F60;
  if (!qword_1000A2F60)
  {
    result = swift_getWitnessTable(&unk_100081F5C, &type metadata for BooksMenuAnchor);
    atomic_store(result, (unint64_t *)&qword_1000A2F60);
  }
  return result;
}

uint64_t sub_10005F4D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005F490();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_10005F510()
{
  unint64_t result;

  result = qword_1000A2F68;
  if (!qword_1000A2F68)
  {
    result = swift_getWitnessTable(&unk_100082124, &type metadata for BooksMenuAnchor);
    atomic_store(result, (unint64_t *)&qword_1000A2F68);
  }
  return result;
}

unint64_t sub_10005F558()
{
  unint64_t result;

  result = qword_1000A2F70;
  if (!qword_1000A2F70)
  {
    result = swift_getWitnessTable(&unk_10008214C, &type metadata for BooksMenuAnchor);
    atomic_store(result, (unint64_t *)&qword_1000A2F70);
  }
  return result;
}

unint64_t sub_10005F5A0()
{
  unint64_t result;

  result = qword_1000A2F78;
  if (!qword_1000A2F78)
  {
    result = swift_getWitnessTable(&unk_100081EE4, &type metadata for BooksMenuAnchor);
    atomic_store(result, (unint64_t *)&qword_1000A2F78);
  }
  return result;
}

uint64_t sub_10005F5E4()
{
  if (qword_1000A0700 != -1)
    swift_once(&qword_1000A0700, sub_10005EDD4);
  return swift_bridgeObjectRetain(qword_1000AA380);
}

uint64_t sub_10005F624(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005F414();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_10005F65C()
{
  return sub_100007F64(&qword_1000A2F80, &qword_1000A2F88, (uint64_t)&protocol conformance descriptor for [A]);
}

void sub_10005F688(_QWORD *a1@<X8>)
{
  *a1 = &off_100099F28;
}

uint64_t sub_10005F69C()
{
  return sub_100007F64(&qword_1000A2F90, &qword_1000A2F98, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

uint64_t sub_10005F6C8()
{
  uint64_t v0;

  v0 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000C090(v0, qword_1000AA388);
  sub_10000BE14(v0, (uint64_t)qword_1000AA388);
  return TypeDisplayRepresentation.init(stringLiteral:)(0xD000000000000014, 0x800000010007E450);
}

uint64_t sub_10005F728()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10000C090(v0, qword_1000AA3A0);
  sub_10000BE14(v0, (uint64_t)qword_1000AA3A0);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000029, 0x800000010007E780);
}

uint64_t sub_10005F788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100005F78(&qword_1000A31B0);
  sub_10000C090(v0, qword_1000AA3B8);
  v1 = sub_10000BE14(v0, (uint64_t)qword_1000AA3B8);
  IntentDescription.init(stringLiteral:)(0xD000000000000032, 0x800000010007E740);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_10005F810()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_100082758);
  qword_1000AA3D0 = result;
  return result;
}

double sub_10005F834()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = type metadata accessor for MenuOnLeftEntity(0);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0 + *(int *)(v1 + 24))).n128_u64[0];
  return result;
}

uint64_t sub_10005F854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = sub_100005F78(&qword_1000A3180);
  v3[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005F78(&qword_1000A3188);
  v3[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005F78(&qword_1000A3190);
  v3[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IntentDialog(0);
  v3[8] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[9] = v8;
  v3[10] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MenuOnLeftEntity(0);
  v3[11] = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[12] = swift_task_alloc(v10);
  v3[13] = swift_task_alloc(v10);
  v11 = sub_100005F78(&qword_1000A3198);
  v3[14] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[15] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[16] = swift_task_alloc(v13);
  v3[17] = swift_task_alloc(v13);
  return swift_task_switch(sub_10005F994, 0, 0);
}

uint64_t sub_10005F994()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  IntentParameter.wrappedValue.getter(*(_QWORD **)(v0 + 104));
  v1 = (_QWORD *)swift_task_alloc(async function pointer to IntentDialog._CapturedContent.init<>(entity:_:)[1]);
  *(_QWORD *)(v0 + 144) = v1;
  v2 = sub_100060F7C(qword_1000A2FF0, (uint64_t)&unk_10008247C);
  *v1 = v0;
  v1[1] = sub_10005FA1C;
  return IntentDialog._CapturedContent.init<>(entity:_:)(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 104), sub_10005FE78, 0, *(_QWORD *)(v0 + 88), v2);
}

uint64_t sub_10005FA1C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  return swift_task_switch(sub_10005FA70, 0, 0);
}

uint64_t sub_10005FA70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  IntentParameter.wrappedValue.getter(*(_QWORD **)(v0 + 96));
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 176));
  *(_BYTE *)(v0 + 177) = *(_BYTE *)(v0 + 176);
  if (qword_1000A0720 != -1)
    swift_once(&qword_1000A0720, sub_10005F810);
  v1 = qword_1000AA3D0;
  *(_QWORD *)(v0 + 152) = qword_1000AA3D0;
  v2 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 160) = v3;
  v4 = sub_100007F64(&qword_1000A3148, &qword_1000A3150, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *v3 = v0;
  v3[1] = sub_10005FB60;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 177, v1, &type metadata for BooksMenuAnchor, v4);
}

uint64_t sub_10005FB60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v2);
  sub_100061A44(v4);
  swift_release(v3);
  if (v0)
    v5 = sub_10005FDD0;
  else
    v5 = sub_10005FBE0;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10005FBE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 128);
  v16 = *(_QWORD **)(v0 + 104);
  v17 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 56);
  v19 = *(_QWORD *)(v0 + 64);
  v20 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v18 = *(_QWORD *)(v0 + 72);
  IntentParameter.wrappedValue.getter(v16);
  v7 = type metadata accessor for _GeneratedContentOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = type metadata accessor for _GeneratedContentFallback(0);
  v9 = v5;
  v13 = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v5, 1, 1, v8);
  v10 = sub_10004C744();
  v11 = sub_100060F7C(&qword_1000A3010, (uint64_t)&unk_100082624);
  IntentDialog._GeneratedDialogContent.init(fromResult:options:fallbackDialog:)(sub_10005FE78, 0, v6, v9, &type metadata for MenuOnLeftEntity.UpdateIntent_value, v3, v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v15, v17, v14);
  IntentDialog.init<A, B>(from:capturedContent:)(v4, v15, &type metadata for MenuOnLeftEntity.UpdateIntent_value, v3, v10, v11);
  static IntentResult.result<A>(value:dialog:)(v16, v2, v3, v11);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v2, v19);
  sub_100061A44((uint64_t)v16);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v17, v14);
  swift_task_dealloc(v17);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v20);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005FDD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(v2, *(_QWORD *)(v0 + 112));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005FE7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v0 = sub_100005F78(&qword_1000A31A0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A0720 != -1)
    swift_once(&qword_1000A0720, sub_10005F810);
  v4 = qword_1000AA3D0;
  v5 = swift_retain(qword_1000AA3D0);
  static _DialogBuilderEntity.buildExpression<A, B>(_:)(v5);
  swift_release(v4);
  v6 = type metadata accessor for MenuOnLeftEntity(0);
  v7 = sub_100060F7C(&qword_1000A3010, (uint64_t)&unk_100082624);
  v8 = sub_100007F64(&qword_1000A31A8, &qword_1000A31A0, (uint64_t)&protocol conformance descriptor for _NLGRepresentationEntity<A>);
  static _DialogBuilderEntity.buildBlock<A>(_:)(v3, v6, v0, v7, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

_QWORD *sub_10005FF9C@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

uint64_t sub_10005FFBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for MenuOnLeftEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100061AB4(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_100061A44(a1);
}

void (*sub_100060038(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_100060080;
}

_QWORD *sub_100060084@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1000600BC(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

void (*sub_1000600F0(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_100060080;
}

double sub_100060138()
{
  double result;

  if (qword_1000A0720 != -1)
    swift_once(&qword_1000A0720, sub_10005F810);
  *(_QWORD *)&result = swift_retain(qword_1000AA3D0).n128_u64[0];
  return result;
}

unint64_t sub_100060178()
{
  return 0xD000000000000015;
}

unint64_t sub_100060198()
{
  unint64_t result;

  result = qword_1000A2FA0;
  if (!qword_1000A2FA0)
  {
    result = swift_getWitnessTable(&unk_1000822C4, &type metadata for MenuOnLeftEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_1000A2FA0);
  }
  return result;
}

unint64_t sub_1000601E0()
{
  unint64_t result;

  result = qword_1000A2FA8;
  if (!qword_1000A2FA8)
  {
    result = swift_getWitnessTable(&unk_1000822EC, &type metadata for MenuOnLeftEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_1000A2FA8);
  }
  return result;
}

uint64_t sub_100060224(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_100084828, 1) + 8);
}

uint64_t sub_100060248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004FFB4(a1, a2, a3, (uint64_t (*)(void))sub_10004C744, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t sub_10006025C@<X0>(uint64_t a1@<X8>)
{
  return sub_100047640(&qword_1000A0710, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1000AA3A0, (uint64_t)sub_10005F728, a1);
}

uint64_t sub_100060284@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000A0718 != -1)
    swift_once(&qword_1000A0718, sub_10005F788);
  v2 = sub_100005F78(&qword_1000A31B0);
  v3 = sub_10000BE14(v2, (uint64_t)qword_1000AA3B8);
  return sub_1000079C8(v3, a1, &qword_1000A31B0);
}

uint64_t sub_1000602F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc(dword_1000A317C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10000C360;
  return sub_10005F854(a1, v5, v4);
}

uint64_t sub_100060354@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000616F4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_100060378()
{
  return 0xD000000000000021;
}

unint64_t sub_100060398()
{
  unint64_t result;

  result = qword_1000A2FB8;
  if (!qword_1000A2FB8)
  {
    result = swift_getWitnessTable(&unk_100082348, &type metadata for MenuOnLeftEntity.MenuOnLeftEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1000A2FB8);
  }
  return result;
}

uint64_t sub_1000603DC()
{
  return sub_100060F7C((unint64_t *)&unk_1000A2FC0, (uint64_t)&unk_1000824D4);
}

uint64_t type metadata accessor for MenuOnLeftEntity(uint64_t a1)
{
  uint64_t result;

  result = qword_1000A30E0;
  if (!qword_1000A30E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MenuOnLeftEntity);
  return result;
}

uint64_t sub_10006043C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100060454, 0, 0);
}

uint64_t sub_100060454()
{
  uint64_t v0;
  _BYTE *v1;
  id v2;
  unsigned __int8 v3;

  v1 = *(_BYTE **)(v0 + 16);
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "bu_groupUserDefaults");
  v3 = objc_msgSend(v2, "BKMenuOnLeft");

  *v1 = v3 ^ 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000604CC(uint64_t a1, char *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;

  v3 = *a2;
  v4 = swift_task_alloc(dword_1000A315C);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_10000C360;
  *(_BYTE *)(v4 + 16) = v3;
  return swift_task_switch(sub_100060544, 0, 0);
}

uint64_t sub_10006052C(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = a2;
  return swift_task_switch(sub_100060544, 0, 0);
}

uint64_t sub_100060544()
{
  uint64_t v0;
  char v1;
  id v2;
  char v3;
  unint64_t v4;

  v1 = *(_BYTE *)(v0 + 16);
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "bu_groupUserDefaults");
  if ((v1 & 1) != 0)
  {
    v4 = 0xE500000000000000;
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7468676972, 0xE500000000000000, 1952867692, 0xE400000000000000, 0);
  }
  else
  {
    v3 = 1;
    v4 = 0xE400000000000000;
  }
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v2, "setBKMenuOnLeft:", v3 & 1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000605FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;

  v2 = sub_100005F78(&qword_1000A2750);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005F78(&qword_1000A2758);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalizedStringResource(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v24 - v13;
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000004FLL, 0x800000010007E470);
  LocalizedStringResource.init(stringLiteral:)(0x1000000000000028, 0x800000010007E4C0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  v15 = type metadata accessor for DisplayRepresentation.Image(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v4, 1, 1, v15);
  v16 = sub_100005F78(&qword_1000A2A90);
  v17 = swift_allocObject(v16, ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72), *(unsigned __int8 *)(v9 + 80) | 7);
  *(_OWORD *)(v17 + 16) = xmmword_10007F260;
  LocalizedStringResource.init(stringLiteral:)(0x64695320756E654DLL, 0xE900000000000065);
  LocalizedStringResource.init(stringLiteral:)(0x10000000000001ABLL, 0x800000010007E4F0);
  DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v14, v7, v4, v17, v12);
  v18 = type metadata accessor for MenuOnLeftEntity(0);
  v19 = (_QWORD *)(a1 + *(int *)(v18 + 20));
  *v19 = 0xD000000000000015;
  v19[1] = 0x800000010007E6A0;
  v20 = *(int *)(v18 + 24);
  sub_100005F78(&qword_1000A2F98);
  LocalizedStringResource.init(stringLiteral:)(0x64695320756E654DLL, 0xE900000000000065);
  v21 = sub_100007F64(&qword_1000A3148, &qword_1000A3150, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  v22 = sub_10005F490();
  result = _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v12, &unk_1000A3138, 0, &unk_1000A3140, 0, &type metadata for MenuOnLeftEntity.UpdateIntent_value, v21, v22);
  *(_QWORD *)(a1 + v20) = result;
  return result;
}

uint64_t sub_1000608D0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1000608E8, 0, 0);
}

uint64_t sub_1000608E8()
{
  uint64_t v0;

  sub_1000605FC(*(_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100060920()
{
  unint64_t result;

  result = qword_1000A2FD0;
  if (!qword_1000A2FD0)
  {
    result = swift_getWitnessTable(&unk_100082380, &type metadata for MenuOnLeftEntity.MenuOnLeftEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1000A2FD0);
  }
  return result;
}

uint64_t sub_100060964(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100060DC8();
  *v4 = v2;
  v4[1] = sub_1000609CC;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

uint64_t sub_1000609CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

unint64_t sub_100060A30()
{
  unint64_t result;

  result = qword_1000A2FE0;
  if (!qword_1000A2FE0)
  {
    result = swift_getWitnessTable(&unk_1000823D8, &type metadata for MenuOnLeftEntity.MenuOnLeftEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1000A2FE0);
  }
  return result;
}

unint64_t sub_100060A78()
{
  unint64_t result;

  result = qword_1000A2FE8;
  if (!qword_1000A2FE8)
  {
    result = swift_getWitnessTable(&unk_100082438, &type metadata for MenuOnLeftEntity.MenuOnLeftEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1000A2FE8);
  }
  return result;
}

uint64_t sub_100060ABC()
{
  return sub_100060F7C(qword_1000A2FF0, (uint64_t)&unk_10008247C);
}

uint64_t sub_100060AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100060DC8();
  *v5 = v2;
  v5[1] = sub_100060B4C;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_100060B4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_100060BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100060DC8();
  *v4 = v2;
  v4[1] = sub_100061AF8;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_100060C0C()
{
  unint64_t result;

  result = qword_1000A3008;
  if (!qword_1000A3008)
  {
    result = swift_getWitnessTable(&unk_100082460, &type metadata for MenuOnLeftEntity.MenuOnLeftEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1000A3008);
  }
  return result;
}

uint64_t sub_100060C50()
{
  return sub_100060F7C(&qword_1000A3010, (uint64_t)&unk_100082624);
}

unint64_t sub_100060C78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3018;
  if (!qword_1000A3018)
  {
    v1 = sub_100005FC0(qword_1000A3020);
    sub_100060F7C(&qword_1000A3010, (uint64_t)&unk_100082624);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000A3018);
  }
  return result;
}

uint64_t sub_100060CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100060920();
  *v5 = v2;
  v5[1] = sub_100008C64;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_100060D58()
{
  return sub_100060F7C(&qword_1000A3038, (uint64_t)&unk_100082534);
}

uint64_t sub_100060D7C()
{
  return sub_100060F7C(&qword_1000A3040, (uint64_t)&unk_10008256C);
}

uint64_t sub_100060DA0()
{
  return sub_100060F7C(&qword_1000A3048, (uint64_t)&unk_10008259C);
}

unint64_t sub_100060DC8()
{
  unint64_t result;

  result = qword_1000A3050;
  if (!qword_1000A3050)
  {
    result = swift_getWitnessTable(&unk_100082308, &type metadata for MenuOnLeftEntity.MenuOnLeftEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1000A3050);
  }
  return result;
}

uint64_t sub_100060E0C()
{
  uint64_t v0;

  v0 = qword_1000A2F18;
  swift_bridgeObjectRetain(off_1000A2F20);
  return v0;
}

uint64_t sub_100060E40()
{
  return sub_100060F7C(&qword_1000A3058, (uint64_t)&unk_1000825D4);
}

uint64_t sub_100060E64()
{
  return sub_100060F7C(&qword_1000A3060, (uint64_t)&unk_1000825FC);
}

uint64_t sub_100060E88()
{
  return sub_100060F7C(&qword_1000A3068, (uint64_t)&unk_10008267C);
}

uint64_t sub_100060EAC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + *(int *)(a1 + 20));
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_100060EC0@<X0>(uint64_t a1@<X8>)
{
  return sub_100047640(&qword_1000A0708, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000AA388, (uint64_t)sub_10005F6C8, a1);
}

uint64_t sub_100060EE4()
{
  return sub_100007F64(&qword_1000A3070, &qword_1000A3078, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_100060F10(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100060F7C(qword_1000A2FF0, (uint64_t)&unk_10008247C);
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_100060F58()
{
  return sub_100060F7C(&qword_1000A3080, (uint64_t)&unk_1000826AC);
}

uint64_t sub_100060F7C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for MenuOnLeftEntity(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100060FBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DisplayRepresentation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_100060FF4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100060F7C(&qword_1000A3068, (uint64_t)&unk_10008267C);
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

ValueMetadata *type metadata accessor for MenuOnLeftEntity.MenuOnLeftEntityQuery()
{
  return &type metadata for MenuOnLeftEntity.MenuOnLeftEntityQuery;
}

uint64_t *sub_10006104C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for DisplayRepresentation(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)v4 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)v4 + v9) = v13;
    swift_bridgeObjectRetain(v12);
  }
  swift_retain(v13);
  return v4;
}

uint64_t sub_1000610EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DisplayRepresentation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_100061140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for DisplayRepresentation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v12;
  swift_bridgeObjectRetain(v11);
  swift_retain(v12);
  return a1;
}

uint64_t sub_1000611B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for DisplayRepresentation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 24);
  v13 = *(_QWORD *)(a2 + v12);
  v14 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  swift_retain(v13);
  swift_release(v14);
  return a1;
}

uint64_t sub_100061250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for DisplayRepresentation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1000612B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for DisplayRepresentation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = *(int *)(a3 + 24);
  v14 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  swift_release(v14);
  return a1;
}

uint64_t sub_100061334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100061340);
}

uint64_t sub_100061340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for DisplayRepresentation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000613C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000613CC);
}

uint64_t sub_1000613CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for DisplayRepresentation(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100061448(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for DisplayRepresentation(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100082718;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t destroy for MenuOnLeftEntity.UpdateIntent_value(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

uint64_t *_s20BooksWidgetExtension16MenuOnLeftEntityV18UpdateIntent_valueVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for MenuOnLeftEntity.UpdateIntent_value(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

_QWORD *assignWithTake for MenuOnLeftEntity.UpdateIntent_value(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for MenuOnLeftEntity.UpdateIntent_value()
{
  return &type metadata for MenuOnLeftEntity.UpdateIntent_value;
}

uint64_t storeEnumTagSinglePayload for BooksMenuAnchor(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10006161C + 4 * byte_100081EB5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100061650 + 4 * byte_100081EB0[v4]))();
}

uint64_t sub_100061650(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100061658(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100061660);
  return result;
}

uint64_t sub_10006166C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100061674);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100061678(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100061680(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BooksMenuAnchor()
{
  return &type metadata for BooksMenuAnchor;
}

uint64_t sub_10006169C()
{
  return sub_100007F64(&qword_1000A3120, &qword_1000A3128, (uint64_t)&protocol conformance descriptor for <> IntentResultContainer<A, B, C, D>);
}

uint64_t sub_1000616C8()
{
  return sub_100007F64(&qword_1000A3130, &qword_1000A3128, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_1000616F4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v33 = *(_QWORD *)(v0 - 8);
  v34 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005F78(&qword_1000A2760);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v28 - v7;
  v9 = sub_100005F78(&qword_1000A3160);
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005F78(&qword_1000A2758);
  __chkstk_darwin(v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  v32 = v15;
  __chkstk_darwin(v15);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100005F78(&qword_1000A3168);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ELL, 0x800000010007E6F0);
  v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v31(v14, 1, 1, v15);
  v19 = type metadata accessor for MenuOnLeftEntity(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v11, 1, 1, v19);
  v20 = type metadata accessor for IntentDialog(0);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v21(v8, 1, 1, v20);
  v22 = v6;
  v21(v6, 1, 1, v20);
  v23 = enum case for InputConnectionBehavior.default(_:);
  v24 = v34;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 104);
  v29(v2, enum case for InputConnectionBehavior.default(_:), v34);
  v25 = sub_100060F7C(qword_1000A2FF0, (uint64_t)&unk_10008247C);
  v33 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v18, v14, v11, v8, v22, v2, v25);
  sub_100005F78(&qword_1000A3170);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000002BLL, 0x800000010007E710);
  v31(v14, 1, 1, v32);
  v35 = 2;
  v21(v8, 1, 1, v20);
  v21(v22, 1, 1, v20);
  v29(v2, v23, v24);
  v26 = sub_10005F490();
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v18, v14, &v35, v8, v22, v2, &off_100099D28, v26);
  return v33;
}

uint64_t sub_100061A44(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MenuOnLeftEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_100061A80@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for MenuOnLeftEntity(0) + 24));
  *a2 = v3;
  *(_QWORD *)&result = swift_retain(v3).n128_u64[0];
  return result;
}

uint64_t sub_100061AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MenuOnLeftEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for LargeWidgetView()
{
  return &type metadata for LargeWidgetView;
}

uint64_t sub_100061B0C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100084888, 1);
}

uint64_t sub_100061B1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a3 = static Alignment.center.getter(a1);
  *((_QWORD *)a3 + 1) = v5;
  v6 = sub_100005F78(&qword_1000A3200);
  return sub_100061B70(a2, &a3[*(int *)(v6 + 44)]);
}

uint64_t sub_100061B70@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t OpaqueTypeConformance2;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v51;
  void (*v52)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char v65[16];
  uint64_t v66;
  _QWORD v67[2];
  _OWORD v68[6];

  v64 = a2;
  v63 = type metadata accessor for LogoView(0);
  v3 = __chkstk_darwin(v63);
  v59 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v62 = (uint64_t)&v51 - v5;
  v61 = type metadata accessor for ContainerBackgroundPlacement(0);
  v60 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005F78(&qword_1000A09F0);
  __chkstk_darwin(v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005F78(&qword_1000A3208);
  __chkstk_darwin(v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005F78(&qword_1000A3210);
  v58 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100005F78(&qword_1000A3218);
  v56 = *(_QWORD *)(v57 - 8);
  v17 = __chkstk_darwin(v57);
  v54 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v55 = (char *)&v51 - v20;
  GeometryProxy.size.getter(v19);
  v22 = v21 * 0.4;
  *(_QWORD *)v13 = static HorizontalAlignment.center.getter(v23);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 0;
  v24 = sub_100005F78(&qword_1000A3220);
  sub_1000620AC((uint64_t *)a1, &v13[*(int *)(v24 + 44)], v22);
  v25 = *(_OWORD *)(a1 + 48);
  v68[2] = *(_OWORD *)(a1 + 32);
  v68[3] = v25;
  v68[4] = *(_OWORD *)(a1 + 64);
  v26 = *(_OWORD *)(a1 + 16);
  v68[0] = *(_OWORD *)a1;
  v68[1] = v26;
  sub_10000DE60((_QWORD *)a1);
  sub_100006928((uint64_t)v10);
  sub_10000DEA8((_QWORD *)a1);
  v53 = type metadata accessor for URL(0);
  v52 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56);
  v52(v10, 0, 1, v53);
  v27 = sub_100007F64(&qword_1000A3228, &qword_1000A3208, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.widgetURL(_:)(v10, v11, v27);
  sub_100007A0C((uint64_t)v10, &qword_1000A09F0);
  v28 = sub_100007A0C((uint64_t)v13, &qword_1000A3208);
  v29 = static ContainerBackgroundPlacement.widget.getter(v28);
  v66 = a1;
  v30 = static Alignment.center.getter(v29);
  v32 = v31;
  v33 = sub_100005F78(&qword_1000A0980);
  v67[0] = v11;
  v67[1] = v27;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v67, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
  v35 = sub_100006088();
  v36 = v54;
  View.containerBackground<A>(for:alignment:content:)(v7, v30, v32, sub_100063FEC, v65, v14, v33, OpaqueTypeConformance2, v35);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v7, v61);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v16, v14);
  v37 = v56;
  v38 = v55;
  v39 = v36;
  v40 = v57;
  (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v55, v36, v57);
  sub_10000DE60(v68);
  sub_100006928((uint64_t)v10);
  sub_10000DEA8((_QWORD *)a1);
  v52(v10, 0, 1, v53);
  KeyPath = swift_getKeyPath(&unk_100082858);
  v42 = (uint64_t)v59;
  *((_QWORD *)v59 + 2) = 0;
  *(_QWORD *)(v42 + 24) = 0;
  *(_BYTE *)(v42 + 32) = 0;
  *(_QWORD *)v42 = KeyPath;
  *(_QWORD *)(v42 + 8) = 0;
  sub_100007984((uint64_t)v10, v42 + *(int *)(v63 + 20), &qword_1000A09F0);
  v43 = v62;
  sub_1000112F0(v42, v62, type metadata accessor for LogoView);
  v44 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
  v45 = v37;
  v44(v39, v38, v40);
  v46 = v43;
  sub_1000078D4(v43, v42, type metadata accessor for LogoView);
  v47 = v64;
  v44(v64, v39, v40);
  v48 = sub_100005F78(&qword_1000A3230);
  sub_1000078D4(v42, (uint64_t)&v47[*(int *)(v48 + 48)], type metadata accessor for LogoView);
  sub_100007A48(v46, type metadata accessor for LogoView);
  v49 = *(void (**)(char *, uint64_t))(v45 + 8);
  v49(v38, v40);
  sub_100007A48(v42, type metadata accessor for LogoView);
  return ((uint64_t (*)(char *, uint64_t))v49)(v39, v40);
}

uint64_t sub_1000620AC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  __int128 v49;
  __int128 v50;
  uint64_t KeyPath;
  __int128 v52;
  __int128 v53;
  _QWORD *v54;
  int *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  void (*v74)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  void (*v79)(_BYTE *, uint64_t);
  char v81;
  char v82;
  _BYTE v83[16];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  _BYTE *v93;
  _OWORD v94[7];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;

  v93 = a2;
  v86 = type metadata accessor for TodayReadingGoalView(0);
  __chkstk_darwin(v86);
  v6 = &v83[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100005F78(&qword_1000A1870);
  v8 = __chkstk_darwin(v7);
  v92 = &v83[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v8);
  v90 = &v83[-v11];
  __chkstk_darwin(v10);
  v91 = &v83[-v12];
  v85 = type metadata accessor for ContainerBackgroundPlacement(0);
  v84 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v14 = &v83[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = sub_100005F78(&qword_1000A3238);
  __chkstk_darwin(v15);
  v17 = &v83[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = sub_100005F78(&qword_1000A3240);
  __chkstk_darwin(v18);
  v20 = &v83[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = sub_100005F78(&qword_1000A3248);
  v88 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v89 = &v83[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = __chkstk_darwin(v22);
  v26 = &v83[-v25];
  v27 = __chkstk_darwin(v24);
  v87 = &v83[-v28];
  *(_QWORD *)v17 = static VerticalAlignment.center.getter(v27);
  *((_QWORD *)v17 + 1) = 0;
  v17[16] = 1;
  v29 = sub_100005F78(&qword_1000A3250);
  v30 = sub_100062768(a1, (uint64_t)&v17[*(int *)(v29 + 44)]);
  GeometryProxy.size.getter(v30);
  v32 = v31 - a3;
  v34 = static Alignment.center.getter(v33);
  v82 = 1;
  v81 = 1;
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v94, 0, 1, 0, 1, 0, 1, *(_QWORD *)&v32, 0, 0, v81, 0, v82, v34, v35);
  sub_1000079C8((uint64_t)v17, (uint64_t)v20, &qword_1000A3238);
  v36 = &v20[*(int *)(v18 + 36)];
  v37 = v94[5];
  v36[4] = v94[4];
  v36[5] = v37;
  v36[6] = v94[6];
  v38 = v94[1];
  *v36 = v94[0];
  v36[1] = v38;
  v39 = v94[3];
  v36[2] = v94[2];
  v36[3] = v39;
  v40 = sub_100007A0C((uint64_t)v17, &qword_1000A3238);
  v41 = static ContainerBackgroundPlacement.widget.getter(v40);
  v42 = static Alignment.center.getter(v41);
  v44 = v43;
  v45 = sub_100064000();
  v46 = sub_1000252CC();
  View.containerBackground<A>(for:alignment:content:)(v14, v42, v44, WidgetReadingHistory.Day.readingTime.getter, 0, v18, &type metadata for GradientOverlayView, v45, v46);
  (*(void (**)(_BYTE *, uint64_t))(v84 + 8))(v14, v85);
  sub_100007A0C((uint64_t)v20, &qword_1000A3240);
  v47 = v88;
  v48 = v87;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v88 + 32))(v87, v26, v21);
  v49 = *((_OWORD *)a1 + 3);
  v97 = *((_OWORD *)a1 + 2);
  v98 = v49;
  v99 = *((_OWORD *)a1 + 4);
  v50 = *((_OWORD *)a1 + 1);
  v95 = *(_OWORD *)a1;
  v96 = v50;
  KeyPath = swift_getKeyPath(&unk_100082858);
  v52 = v95;
  *(_OWORD *)(v6 + 56) = v96;
  v53 = v98;
  *(_OWORD *)(v6 + 72) = v97;
  *(_OWORD *)(v6 + 88) = v53;
  *(_OWORD *)(v6 + 104) = v99;
  v6[32] = 0;
  *(_QWORD *)v6 = KeyPath;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = 0;
  *(_OWORD *)(v6 + 40) = v52;
  v54 = &v6[*(int *)(v86 + 24)];
  *v54 = 0x4062C00000000000;
  v55 = (int *)type metadata accessor for TodayReadingGoalView.ViewConfiguration(0);
  v56 = (char *)v54 + v55[5];
  v57 = enum case for ColorScheme.dark(_:);
  v58 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 104))(v56, v57, v58);
  *(_QWORD *)((char *)v54 + v55[6]) = 0x4040000000000000;
  v59 = (char *)v54 + v55[7];
  v60 = enum case for BlendMode.plusLighter(_:);
  v61 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 104))(v59, v60, v61);
  v62 = v55[8];
  v63 = sub_10000DE60(a1);
  v64 = static Font.footnote.getter(v63);
  *(_QWORD *)((char *)v54 + v62) = v64;
  v65 = v55[9];
  *(double *)((char *)v54 + v65) = static Font.Weight.semibold.getter(v64);
  v66 = v55[10];
  v68 = static HierarchicalShapeStyle.secondary.getter(v67);
  *(_DWORD *)((char *)v54 + v66) = v68;
  v69 = (_QWORD *)((char *)v54 + v55[11]);
  *v69 = 0x69662E656D616C66;
  v69[1] = 0xEA00000000006C6CLL;
  v70 = static Alignment.center.getter(v68);
  v71 = v90;
  sub_100021524(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v90, 0.0, 1, a3, 0, v70, v72);
  sub_100007A48((uint64_t)v6, type metadata accessor for TodayReadingGoalView);
  v73 = v91;
  sub_100007984((uint64_t)v71, (uint64_t)v91, &qword_1000A1870);
  v74 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v47 + 16);
  v75 = v89;
  v74(v89, v48, v21);
  v76 = v92;
  sub_1000079C8((uint64_t)v73, (uint64_t)v92, &qword_1000A1870);
  v77 = v93;
  v74(v93, v75, v21);
  v78 = sub_100005F78(&qword_1000A3268);
  sub_1000079C8((uint64_t)v76, (uint64_t)&v77[*(int *)(v78 + 48)], &qword_1000A1870);
  sub_100007A0C((uint64_t)v73, &qword_1000A1870);
  v79 = *(void (**)(_BYTE *, uint64_t))(v47 + 8);
  v79(v48, v21);
  sub_100007A0C((uint64_t)v76, &qword_1000A1870);
  return ((uint64_t (*)(_BYTE *, uint64_t))v79)(v75, v21);
}

uint64_t sub_100062768@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  uint64_t KeyPath;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t OpaqueTypeConformance2;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  void *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  char *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  void *v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  id v151;
  id v152;
  uint64_t v153;
  _QWORD *v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  char *v199;
  void (**v200)(_QWORD, id);
  id v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _OWORD v212[17];
  _QWORD v213[3];
  char v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  _OWORD v231[2];
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  _OWORD v241[2];
  _QWORD v242[9];
  __int128 v243;
  __int128 v244;

  v210 = a2;
  v3 = (_QWORD *)type metadata accessor for AccessibilityTraits(0);
  v200 = (void (**)(_QWORD, id))*(v3 - 1);
  v201 = v3;
  __chkstk_darwin(v3);
  v199 = (char *)&v178 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AccessibilityChildBehavior(0);
  v191 = *(_QWORD *)(v5 - 8);
  v192 = v5;
  __chkstk_darwin(v5);
  v190 = (char *)&v178 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = type metadata accessor for LargeEmptyStateView(0);
  __chkstk_darwin(v208);
  v8 = (uint64_t *)((char *)&v178 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100005F78(&qword_1000A3270);
  v195 = *(_QWORD *)(v9 - 8);
  v196 = v9;
  __chkstk_darwin(v9);
  v193 = (char *)&v178 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = sub_100005F78(&qword_1000A3278);
  v11 = __chkstk_darwin(v205);
  v194 = (char *)&v178 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v198 = (char *)&v178 - v14;
  v15 = __chkstk_darwin(v13);
  v197 = (char *)&v178 - v16;
  __chkstk_darwin(v15);
  v202 = (uint64_t)&v178 - v17;
  v203 = sub_100005F78(&qword_1000A3280);
  __chkstk_darwin(v203);
  v204 = (uint64_t)&v178 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = sub_100005F78(&qword_1000A3288);
  __chkstk_darwin(v209);
  v207 = (char *)&v178 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for URL(0);
  __chkstk_darwin(v20);
  v180 = (uint64_t)&v178 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100005F78(&qword_1000A3290);
  v183 = *(_QWORD *)(v22 - 8);
  v184 = v22;
  __chkstk_darwin(v22);
  v182 = (char *)&v178 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_100005F78(&qword_1000A3298);
  v24 = __chkstk_darwin(v188);
  v181 = (char *)&v178 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v185 = (uint64_t)&v178 - v26;
  v186 = sub_100005F78(&qword_1000A32A0);
  __chkstk_darwin(v186);
  v187 = (char *)&v178 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = sub_100005F78(&qword_1000A32A8);
  __chkstk_darwin(v206);
  v189 = (char *)&v178 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100005F78(&qword_1000A32B0);
  result = __chkstk_darwin(v29);
  v32 = (char *)&v178 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *((_OWORD *)a1 + 3);
  *(_OWORD *)&v242[7] = *((_OWORD *)a1 + 2);
  v243 = v33;
  v244 = *((_OWORD *)a1 + 4);
  v34 = *((_OWORD *)a1 + 1);
  *(_OWORD *)&v242[3] = *(_OWORD *)a1;
  *(_OWORD *)&v242[5] = v34;
  v35 = *a1;
  v36 = a1[1];
  v37 = *((_BYTE *)a1 + 16);
  v38 = a1[3];
  v39 = a1[4];
  v41 = a1[5];
  v40 = a1[6];
  v42 = *((unsigned __int8 *)a1 + 56);
  v44 = (char *)a1[8];
  v43 = a1[9];
  v45 = v33;
  v46 = *(_QWORD *)(v33 + 16);
  v211 = result;
  if (v46 >= 3)
  {
    v61 = v32;
    v207 = v44;
    v208 = v43;
    LODWORD(v206) = v42;
    KeyPath = swift_getKeyPath(&unk_100082858);
    v63 = sub_10000DE60(a1);
    v64 = static Font.caption2.getter(v63);
    v232 = KeyPath;
    v233 = 0;
    v235 = 0;
    v234 = 0;
    LOBYTE(v236) = 0;
    *((_QWORD *)&v236 + 1) = v35;
    *(_QWORD *)&v237 = v36;
    BYTE8(v237) = v37;
    *(_QWORD *)&v238 = v38;
    *((_QWORD *)&v238 + 1) = v39;
    *(_QWORD *)&v239 = v41;
    *((_QWORD *)&v239 + 1) = v40;
    LOBYTE(v240) = v206;
    *((_QWORD *)&v240 + 1) = v207;
    *(_QWORD *)&v241[0] = v208;
    *(_OWORD *)((char *)v241 + 8) = xmmword_100082790;
    *(_OWORD *)v242 = xmmword_1000827A0;
    *((_QWORD *)&v241[1] + 1) = v64;
    v242[2] = 0x4020000000000000;
    v212[4] = v238;
    v212[5] = v239;
    *(_QWORD *)&v212[10] = 0x4020000000000000;
    v212[8] = v241[1];
    v212[9] = xmmword_1000827A0;
    v212[6] = v240;
    v212[7] = v241[0];
    v212[2] = v236;
    v212[3] = v237;
    v212[0] = (unint64_t)KeyPath;
    v212[1] = 0u;
    sub_100064084((uint64_t)v212);
    sub_100007984((uint64_t)v212, (uint64_t)v213, &qword_1000A32B8);
    sub_100012D2C((uint64_t)&v232);
    v65 = sub_10006408C();
    v66 = sub_1000640D0();
    _ConditionalContent<>.init(storage:)(v213, &type metadata for LargeThreeBookView, &type metadata for LargeTwoBookView, v65, v66);
    v67 = v231[0];
    v61[8] = v230;
    v61[9] = v67;
    *(_OWORD *)((char *)v61 + 153) = *(_OWORD *)((char *)v231 + 9);
    v68 = v227;
    v61[4] = v226;
    v61[5] = v68;
    v69 = v229;
    v61[6] = v228;
    v61[7] = v69;
    v70 = v223;
    *v61 = v222;
    v61[1] = v70;
    v71 = v225;
    v61[2] = v224;
    v61[3] = v71;
    swift_storeEnumTagMultiPayload(v61, v211, 0);
    v72 = sub_100005F78(&qword_1000A32D0);
    v73 = sub_10000B8E4(&qword_1000A32D8, &qword_1000A32D0, (void (*)(void))sub_10006408C, (void (*)(void))sub_1000640D0);
    v74 = sub_10000B8E4(&qword_1000A32E0, &qword_1000A3288, (void (*)(void))sub_100064114, (void (*)(void))sub_100064218);
    _ConditionalContent<>.init(storage:)(v61, v72, v209, v73, v74);
    return sub_1000642D8((uint64_t)&v232);
  }
  else if (v46 == 2)
  {
    v47 = v32;
    v207 = v44;
    v208 = v43;
    LODWORD(v206) = v42;
    v48 = swift_getKeyPath(&unk_100082858);
    v49 = sub_10000DE60(a1);
    v50 = static Font.caption2.getter(v49);
    v232 = v48;
    v233 = 0;
    v235 = 0;
    v234 = 0;
    LOBYTE(v236) = 0;
    *((_QWORD *)&v236 + 1) = v35;
    *(_QWORD *)&v237 = v36;
    BYTE8(v237) = v37;
    *(_QWORD *)&v238 = v38;
    *((_QWORD *)&v238 + 1) = v39;
    *(_QWORD *)&v239 = v41;
    *((_QWORD *)&v239 + 1) = v40;
    LOBYTE(v240) = v206;
    *((_QWORD *)&v240 + 1) = v207;
    *(_QWORD *)&v241[0] = v208;
    *(_OWORD *)((char *)v241 + 8) = xmmword_1000827B0;
    *((_QWORD *)&v241[1] + 1) = 0x4020000000000000;
    v242[0] = v50;
    *(_OWORD *)&v242[1] = xmmword_10007FE50;
    v212[4] = v238;
    v212[5] = v239;
    v212[2] = v236;
    v212[3] = v237;
    *(_QWORD *)&v212[10] = 0x4020000000000000;
    v212[8] = v241[1];
    v212[9] = *(_OWORD *)v242;
    v212[6] = v240;
    v212[7] = v241[0];
    v212[0] = (unint64_t)v48;
    v212[1] = 0u;
    sub_100064394((uint64_t)v212);
    sub_100007984((uint64_t)v212, (uint64_t)v213, &qword_1000A32B8);
    sub_10000DC94((uint64_t)&v232);
    v51 = sub_10006408C();
    v52 = sub_1000640D0();
    _ConditionalContent<>.init(storage:)(v213, &type metadata for LargeThreeBookView, &type metadata for LargeTwoBookView, v51, v52);
    v53 = v231[0];
    v47[8] = v230;
    v47[9] = v53;
    *(_OWORD *)((char *)v47 + 153) = *(_OWORD *)((char *)v231 + 9);
    v54 = v227;
    v47[4] = v226;
    v47[5] = v54;
    v55 = v229;
    v47[6] = v228;
    v47[7] = v55;
    v56 = v223;
    *v47 = v222;
    v47[1] = v56;
    v57 = v225;
    v47[2] = v224;
    v47[3] = v57;
    swift_storeEnumTagMultiPayload(v47, v211, 0);
    v58 = sub_100005F78(&qword_1000A32D0);
    v59 = sub_10000B8E4(&qword_1000A32D8, &qword_1000A32D0, (void (*)(void))sub_10006408C, (void (*)(void))sub_1000640D0);
    v60 = sub_10000B8E4(&qword_1000A32E0, &qword_1000A3288, (void (*)(void))sub_100064114, (void (*)(void))sub_100064218);
    _ConditionalContent<>.init(storage:)(v47, v58, v209, v59, v60);
    return sub_1000643A0((uint64_t)&v232);
  }
  else if (v46)
  {
    v179 = v32;
    v76 = *(_QWORD *)(v243 + 64);
    v75 = *(_QWORD *)(v243 + 72);
    if (v76 == 0xD000000000000023 && v75 == 0x800000010007BBB0
      || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v243 + 64), *(_QWORD *)(v243 + 72), 0xD000000000000023, 0x800000010007BBB0, 0) & 1) != 0)
    {
      v77 = sub_10005268C();
      v79 = v78;
      v80 = sub_100007980();
      *v8 = v77;
      v8[1] = v79;
      v8[2] = v80;
      v8[3] = v81;
      v82 = (char *)v8 + *(int *)(v208 + 24);
      v83 = static Font.subheadline.getter();
      v84 = static Font.Weight.semibold.getter(v83);
      v86 = static HierarchicalShapeStyle.tertiary.getter(v85);
      v87 = v86;
      v88 = static Color.white.getter(v86);
      v89 = Color.opacity(_:)(0.2);
      swift_release(v88);
      v90 = enum case for ColorScheme.dark(_:);
      v91 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 104))(v82, v90, v91);
      v92 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
      v93 = &v82[v92[5]];
      v94 = enum case for BlendMode.plusLighter(_:);
      v95 = type metadata accessor for BlendMode(0);
      v96 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 104))(v93, v94, v95);
      *(_QWORD *)&v82[v92[6]] = v83;
      *(double *)&v82[v92[7]] = v84;
      *(_DWORD *)&v82[v92[8]] = v87;
      *(_QWORD *)&v82[v92[9]] = v89;
      *(_QWORD *)&v82[v92[10]] = 0x3FE570A3D70A3D71;
      *(_QWORD *)&v82[v92[11]] = 0x4018000000000000;
      *(_QWORD *)&v82[v92[12]] = 0x4030000000000000;
      v97 = v190;
      static AccessibilityChildBehavior.combine.getter(v96);
      v98 = sub_100003DCC(&qword_1000A3310, type metadata accessor for LargeEmptyStateView, (uint64_t)&unk_10007FD60);
      v99 = v193;
      v100 = v208;
      View.accessibilityElement(children:)(v97, v208, v98);
      (*(void (**)(char *, uint64_t))(v191 + 8))(v97, v192);
      sub_100007A48((uint64_t)v8, type metadata accessor for LargeEmptyStateView);
      v101 = sub_100005F78(&qword_1000A0A58);
      v102 = swift_allocObject(v101, 64, 7);
      *(_OWORD *)(v102 + 16) = xmmword_10007F170;
      *(_QWORD *)(v102 + 32) = sub_10005268C();
      *(_QWORD *)(v102 + 40) = v103;
      *(_QWORD *)(v102 + 48) = sub_100007980();
      *(_QWORD *)(v102 + 56) = v104;
      *(_QWORD *)&v212[0] = v102;
      v105 = sub_100005F78(&qword_1000A0DD8);
      v106 = sub_100007F64(&qword_1000A0DE0, &qword_1000A0DD8, (uint64_t)&protocol conformance descriptor for [A]);
      v107 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v105, v106);
      v109 = v108;
      swift_bridgeObjectRelease(v102);
      *(_QWORD *)&v212[0] = v107;
      *((_QWORD *)&v212[0] + 1) = v109;
      *(_QWORD *)&v222 = v100;
      *((_QWORD *)&v222 + 1) = v98;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v222, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
      v111 = sub_1000075E8();
      v112 = (uint64_t)v194;
      v113 = v196;
      View.accessibilityLabel<A>(_:)(v212, v196, &type metadata for String, OpaqueTypeConformance2, v111);
      swift_bridgeObjectRelease(v109);
      v114 = (*(uint64_t (**)(char *, uint64_t))(v195 + 8))(v99, v113);
      v115 = v199;
      static AccessibilityTraits.isButton.getter(v114);
      v116 = (uint64_t)v198;
      v117 = v205;
      ModifiedContent<>.accessibilityAddTraits(_:)(v115, v205);
      ((void (**)(char *, id))v200)[1](v115, v201);
      v118 = sub_100007A0C(v112, &qword_1000A3278);
      v119 = sub_100007C4C(v118);
      v120 = (uint64_t)v197;
      ModifiedContent<>.accessibilityInputLabels<A>(_:)(v119, v117, &type metadata for String, v111);
      swift_bridgeObjectRelease(v119);
      sub_100007A0C(v116, &qword_1000A3278);
      v121 = v202;
      sub_100007984(v120, v202, &qword_1000A3278);
      v122 = v204;
      sub_1000079C8(v121, v204, &qword_1000A3278);
      swift_storeEnumTagMultiPayload(v122, v203, 1);
      v123 = sub_100064114();
      v124 = sub_100064218();
      v125 = (uint64_t)v207;
      _ConditionalContent<>.init(storage:)(v122, v206, v117, v123, v124);
      v126 = (uint64_t)v179;
      sub_1000079C8(v125, (uint64_t)v179, &qword_1000A3288);
      swift_storeEnumTagMultiPayload(v126, v211, 1);
      v127 = sub_100005F78(&qword_1000A32D0);
      v128 = sub_10000B8E4(&qword_1000A32D8, &qword_1000A32D0, (void (*)(void))sub_10006408C, (void (*)(void))sub_1000640D0);
      v129 = sub_10000B8E4(&qword_1000A32E0, &qword_1000A3288, (void (*)(void))sub_100064114, (void (*)(void))sub_100064218);
      _ConditionalContent<>.init(storage:)(v126, v127, v209, v128, v129);
      sub_100007A0C(v125, &qword_1000A3288);
      v130 = v121;
      v131 = &qword_1000A3278;
    }
    else
    {
      v132 = *(_QWORD *)(v45 + 40);
      v133 = *(_QWORD *)(v45 + 48);
      v134 = *(_BYTE *)(v45 + 56);
      v135 = *(void **)(v45 + 80);
      v136 = *(void **)(v45 + 88);
      v137 = *(_QWORD *)(v45 + 96);
      v138 = *(_QWORD *)(v45 + 104);
      v139 = *(_BYTE *)(v45 + 112);
      v213[0] = *(_QWORD *)(v45 + 32);
      v213[1] = v132;
      v213[2] = v133;
      v214 = v134;
      v215 = v76;
      v216 = v75;
      v217 = v135;
      v218 = v136;
      v219 = v137;
      v220 = v138;
      v221 = v139;
      *(_QWORD *)&v222 = v213[0];
      *((_QWORD *)&v222 + 1) = v132;
      *(_QWORD *)&v223 = v133;
      BYTE8(v223) = v134;
      *(_QWORD *)&v224 = v76;
      *((_QWORD *)&v224 + 1) = v75;
      *(_QWORD *)&v225 = v135;
      *((_QWORD *)&v225 + 1) = v136;
      *(_QWORD *)&v226 = v137;
      *((_QWORD *)&v226 + 1) = v138;
      LOBYTE(v227) = v139;
      v208 = v132;
      swift_bridgeObjectRetain(v132);
      swift_bridgeObjectRetain(v75);
      v201 = v135;
      v200 = v136;
      v202 = v138;
      swift_bridgeObjectRetain(v138);
      if ((sub_100013C4C() & 1) != 0)
      {
        sub_100063834((uint64_t)v212);
        v140 = v187;
        memcpy(v187, v212, 0x110uLL);
        swift_storeEnumTagMultiPayload(v140, v186, 0);
        v141 = sub_100064138();
        v142 = sub_10006417C();
        v143 = (uint64_t)v189;
        _ConditionalContent<>.init(storage:)(v140, &type metadata for LargeOneBookView, v188, v141, v142);
      }
      else
      {
        v144 = *(_BYTE *)(v45 + 56);
        v145 = *(void **)(v45 + 80);
        v146 = *(void **)(v45 + 88);
        v147 = *(_QWORD *)(v45 + 96);
        v148 = *(_QWORD *)(v45 + 104);
        v149 = *(_BYTE *)(v45 + 112);
        *(_QWORD *)&v212[0] = *(_QWORD *)(v45 + 32);
        *(_OWORD *)((char *)v212 + 8) = *(_OWORD *)(v45 + 40);
        v150 = *((_QWORD *)&v212[0] + 1);
        BYTE8(v212[1]) = v144;
        *(_QWORD *)&v212[2] = v76;
        *((_QWORD *)&v212[2] + 1) = v75;
        *(_QWORD *)&v212[3] = v145;
        *((_QWORD *)&v212[3] + 1) = v146;
        *(_QWORD *)&v212[4] = v147;
        *((_QWORD *)&v212[4] + 1) = v148;
        LOBYTE(v212[5]) = v149;
        swift_bridgeObjectRetain(*((_QWORD *)&v212[0] + 1));
        swift_bridgeObjectRetain(v75);
        v151 = v145;
        v152 = v146;
        swift_bridgeObjectRetain(v148);
        sub_10000DE60(a1);
        v153 = v180;
        sub_100006330((uint64_t)v212, v180);
        swift_bridgeObjectRelease(v148);

        swift_bridgeObjectRelease(v75);
        swift_bridgeObjectRelease(v150);
        v154 = sub_10000DEA8(a1);
        __chkstk_darwin(v154);
        *(&v178 - 2) = (uint64_t)a1;
        v155 = sub_100064138();
        v156 = v182;
        Link.init(destination:label:)(v153, sub_10006434C, &v178 - 4, &type metadata for LargeOneBookView, v155);
        v157 = sub_100051294(0);
        v159 = v158;
        v232 = v157;
        v233 = v158;
        v160 = sub_100007F64(&qword_1000A3300, &qword_1000A3290, (uint64_t)&protocol conformance descriptor for Link<A>);
        v161 = sub_1000075E8();
        v162 = (uint64_t)v181;
        v163 = v184;
        View.accessibilityLabel<A>(_:)(&v232, v184, &type metadata for String, v160, v161);
        swift_bridgeObjectRelease(v159);
        (*(void (**)(char *, uint64_t))(v183 + 8))(v156, v163);
        v164 = v185;
        sub_100007984(v162, v185, &qword_1000A3298);
        v165 = v187;
        sub_1000079C8(v164, (uint64_t)v187, &qword_1000A3298);
        swift_storeEnumTagMultiPayload(v165, v186, 1);
        v166 = sub_10006417C();
        v143 = (uint64_t)v189;
        _ConditionalContent<>.init(storage:)(v165, &type metadata for LargeOneBookView, v188, v155, v166);
        sub_100007A0C(v164, &qword_1000A3298);
      }
      v167 = v209;
      v169 = v204;
      v168 = v205;
      v170 = v203;
      sub_1000079C8(v143, v204, &qword_1000A32A8);
      swift_storeEnumTagMultiPayload(v169, v170, 0);
      v171 = sub_100064114();
      v172 = sub_100064218();
      v173 = (uint64_t)v207;
      _ConditionalContent<>.init(storage:)(v169, v206, v168, v171, v172);
      v174 = (uint64_t)v179;
      sub_1000079C8(v173, (uint64_t)v179, &qword_1000A3288);
      swift_storeEnumTagMultiPayload(v174, v211, 1);
      v175 = sub_100005F78(&qword_1000A32D0);
      v176 = sub_10000B8E4(&qword_1000A32D8, &qword_1000A32D0, (void (*)(void))sub_10006408C, (void (*)(void))sub_1000640D0);
      v177 = sub_10000B8E4(&qword_1000A32E0, &qword_1000A3288, (void (*)(void))sub_100064114, (void (*)(void))sub_100064218);
      _ConditionalContent<>.init(storage:)(v174, v175, v167, v176, v177);
      swift_bridgeObjectRelease(v202);

      swift_bridgeObjectRelease(v75);
      swift_bridgeObjectRelease(v208);
      sub_100007A0C(v173, &qword_1000A3288);
      v130 = v143;
      v131 = &qword_1000A32A8;
    }
    return sub_100007A0C(v130, v131);
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_100063834@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t KeyPath;
  _QWORD *v15;
  uint64_t v16;
  double result;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  v4 = *v1;
  v5 = *((_BYTE *)v1 + 16);
  v29 = v1[3];
  v30 = v1[1];
  v6 = v1[6];
  v27 = v1[5];
  v28 = v1[4];
  v26 = *((_BYTE *)v1 + 56);
  v24 = v1[9];
  v25 = v1[8];
  if (*(_QWORD *)(v6 + 16))
  {
    v7 = *(_QWORD *)(v6 + 40);
    v22 = *(_QWORD *)(v6 + 48);
    v23 = *(_QWORD *)(v6 + 32);
    v18 = *(_BYTE *)(v6 + 56);
    v8 = *(_QWORD *)(v6 + 72);
    v19 = *(_QWORD *)(v6 + 64);
    v10 = *(void **)(v6 + 80);
    v9 = *(void **)(v6 + 88);
    v11 = *(_QWORD *)(v6 + 104);
    v21 = *(_QWORD *)(v6 + 96);
    v20 = *(_BYTE *)(v6 + 112);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v7 = 0;
    v21 = 0;
    v11 = 0;
    v20 = 0;
    v10 = (void *)BDSCloudAssetTypeStoreEbook;
    v9 = (void *)BDSLibraryContentAssetTypeUnknown;
    v8 = 0x800000010007BBB0;
    v19 = 0xD000000000000023;
    v18 = 1;
  }
  v12 = v10;
  v13 = v9;
  KeyPath = swift_getKeyPath(&unk_100082858);
  v15 = sub_10000DE60(v2);
  v16 = static Font.footnote.getter(v15);
  *(_QWORD *)a1 = KeyPath;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v30;
  *(_BYTE *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = v29;
  *(_QWORD *)(a1 + 72) = v28;
  *(_QWORD *)(a1 + 80) = v27;
  *(_QWORD *)(a1 + 88) = v6;
  *(_BYTE *)(a1 + 96) = v26;
  *(_QWORD *)(a1 + 104) = v25;
  *(_QWORD *)(a1 + 112) = v24;
  *(_QWORD *)(a1 + 120) = v23;
  *(_QWORD *)(a1 + 128) = v7;
  *(_QWORD *)(a1 + 136) = v22;
  *(_BYTE *)(a1 + 144) = v18;
  *(_QWORD *)(a1 + 152) = v19;
  *(_QWORD *)(a1 + 160) = v8;
  *(_QWORD *)(a1 + 168) = v10;
  *(_QWORD *)(a1 + 176) = v13;
  *(_QWORD *)(a1 + 184) = v21;
  *(_QWORD *)(a1 + 192) = v11;
  *(_BYTE *)(a1 + 200) = v20;
  *(_OWORD *)(a1 + 208) = xmmword_1000827C0;
  *(_QWORD *)(a1 + 224) = 0x4034000000000000;
  *(_QWORD *)(a1 + 232) = v16;
  *(_QWORD *)&result = 5;
  *(_OWORD *)(a1 + 240) = xmmword_1000827D0;
  *(_OWORD *)(a1 + 256) = xmmword_1000827E0;
  return result;
}

uint64_t sub_100063A34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  unint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  id v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  void *v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  _QWORD v71[2];

  v4 = sub_100005F78(&qword_1000A0998);
  __chkstk_darwin(v4);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BackgroundView(0);
  v8 = __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v54 - v9);
  v12 = *(_QWORD *)(a1 + 48);
  v68 = *(_OWORD *)(a1 + 56);
  v69 = *(_QWORD *)(a1 + 72);
  v71[0] = v12;
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
  {
LABEL_22:
    *v11 = swift_getKeyPath(&unk_100082888);
    v41 = sub_100005F78(&qword_1000A09A0);
    swift_storeEnumTagMultiPayload(v11, v41, 0);
    *(_QWORD *)((char *)v11 + *(int *)(v7 + 20)) = 0;
    sub_1000078D4((uint64_t)v11, (uint64_t)v6, type metadata accessor for BackgroundView);
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    v42 = sub_100003DCC(&qword_1000A0988, type metadata accessor for BackgroundView, (uint64_t)&unk_100082DF0);
    v43 = v6;
    v44 = v7;
    v45 = v7;
    goto LABEL_27;
  }
  v55 = v10;
  v56 = (_QWORD *)a1;
  v57 = v4;
  v58 = (char *)&v54 - v9;
  v59 = v7;
  v60 = v6;
  v61 = a2;
  v14 = (void *)BDSLibraryContentAssetTypeAudiobook;
  v62 = BDSCloudAssetTypeStoreAudiobook;
  v63 = (__int128 *)((char *)&v68 + 8);
  v15 = (uint64_t *)(swift_bridgeObjectRetain(v12) + 64);
  v64 = v14;
  while (1)
  {
    v67 = *(v15 - 3);
    v16 = v15[1];
    v65 = *v15;
    v18 = (void *)v15[2];
    v17 = (void *)v15[3];
    v19 = v15[5];
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v22 = v21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v25 = v24;
    if (v20 == v23 && v22 == v24)
      v27 = 1;
    else
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v23, v24, 0);
    swift_bridgeObjectRetain(v19);
    v66 = v17;
    v28 = v14;
    swift_bridgeObjectRetain(v67);
    swift_bridgeObjectRetain(v16);
    v29 = v18;

    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v25);
    if ((v27 & 1) == 0)
    {
      if (!v18)
        goto LABEL_3;
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v32 = v31;
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      v35 = v33;
      if (v30 == v34 && v32 == v33)
      {
        swift_bridgeObjectRelease_n(v32, 2);
      }
      else
      {
        v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, v34, v33, 0);
        swift_bridgeObjectRelease(v32);
        swift_bridgeObjectRelease(v35);
        if ((v36 & 1) == 0)
          goto LABEL_3;
      }
    }
    v70 = *v63;
    v37 = *((_QWORD *)&v70 + 1);
    if (!*((_QWORD *)&v70 + 1))
    {
LABEL_3:
      swift_bridgeObjectRelease(v19);

      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v67);
      goto LABEL_4;
    }
    v38 = v70;
    v39 = v65;
    if (v70 == __PAIR128__(v16, v65))
      break;
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, v16, v70, *((_QWORD *)&v70 + 1), 0);
    swift_bridgeObjectRelease(v19);

    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v67);
    if ((v40 & 1) != 0)
      goto LABEL_24;
LABEL_4:
    v15 += 11;
    --v13;
    v14 = v64;
    if (!v13)
    {
      sub_100025230(v71);
      v6 = v60;
      v11 = v58;
      v7 = v59;
      v4 = v57;
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease(v19);

  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v67);
  v38 = v39;
LABEL_24:
  sub_100025230(v71);
  v46 = v56;
  sub_10000DE60(v56);
  sub_100007444((uint64_t)&v70);
  if (qword_1000A0628 != -1)
    swift_once(&qword_1000A0628, sub_100013F18);
  sub_100006C68(qword_1000AA270, qword_1000AA288);
  v47 = sub_10003C8E4(v38, v37, 1);
  sub_10000746C((uint64_t)&v70);
  sub_10000DEA8(v46);
  KeyPath = swift_getKeyPath(&unk_100082888);
  v49 = (uint64_t)v55;
  *v55 = KeyPath;
  v50 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v49, v50, 0);
  v11 = v58;
  v51 = v59;
  *(_QWORD *)(v49 + *(int *)(v59 + 20)) = v47;
  sub_1000112F0(v49, (uint64_t)v11, type metadata accessor for BackgroundView);
  v52 = (uint64_t)v60;
  sub_1000078D4((uint64_t)v11, (uint64_t)v60, type metadata accessor for BackgroundView);
  swift_storeEnumTagMultiPayload(v52, v57, 0);
  v42 = sub_100003DCC(&qword_1000A0988, type metadata accessor for BackgroundView, (uint64_t)&unk_100082DF0);
  v43 = (char *)v52;
  v44 = v51;
  v45 = v51;
LABEL_27:
  _ConditionalContent<>.init(storage:)(v43, v44, v45, v42, v42);
  return sub_100007A48((uint64_t)v11, type metadata accessor for BackgroundView);
}

_QWORD *sub_100063F34@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  uint64_t (*v5)@<X0>(uint64_t@<X0>, char *@<X8>);
  __int128 v6;
  __int128 v7;
  _OWORD v9[5];

  v3 = v1[3];
  v9[2] = v1[2];
  v9[3] = v3;
  v9[4] = v1[4];
  v4 = v1[1];
  v9[0] = *v1;
  v9[1] = v4;
  v5 = (uint64_t (*)@<X0>(uint64_t@<X0>, char *@<X8>))swift_allocObject(&unk_10009D2D0, 96, 7);
  v6 = v1[3];
  *((_OWORD *)v5 + 3) = v1[2];
  *((_OWORD *)v5 + 4) = v6;
  *((_OWORD *)v5 + 5) = v1[4];
  v7 = v1[1];
  *((_OWORD *)v5 + 1) = *v1;
  *((_OWORD *)v5 + 2) = v7;
  *a1 = sub_100063FE4;
  a1[1] = v5;
  return sub_10000DE60(v9);
}

uint64_t sub_100063FB0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[11]);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100063FE4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_100061B1C(a1, v2 + 16, a2);
}

uint64_t sub_100063FEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100063A34(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100064000()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3258;
  if (!qword_1000A3258)
  {
    v1 = sub_100005FC0(&qword_1000A3240);
    sub_100007F64(&qword_1000A3260, &qword_1000A3238, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3258);
  }
  return result;
}

uint64_t sub_100064084(uint64_t result)
{
  *(_BYTE *)(result + 168) = 0;
  return result;
}

unint64_t sub_10006408C()
{
  unint64_t result;

  result = qword_1000A32C0;
  if (!qword_1000A32C0)
  {
    result = swift_getWitnessTable(&unk_10007F704, &type metadata for LargeThreeBookView);
    atomic_store(result, (unint64_t *)&qword_1000A32C0);
  }
  return result;
}

unint64_t sub_1000640D0()
{
  unint64_t result;

  result = qword_1000A32C8;
  if (!qword_1000A32C8)
  {
    result = swift_getWitnessTable(&unk_10007F464, &type metadata for LargeTwoBookView);
    atomic_store(result, (unint64_t *)&qword_1000A32C8);
  }
  return result;
}

uint64_t sub_100064114()
{
  return sub_10000B8E4(&qword_1000A32E8, &qword_1000A32A8, (void (*)(void))sub_100064138, (void (*)(void))sub_10006417C);
}

unint64_t sub_100064138()
{
  unint64_t result;

  result = qword_1000A32F0;
  if (!qword_1000A32F0)
  {
    result = swift_getWitnessTable(&unk_100080204, &type metadata for LargeOneBookView);
    atomic_store(result, (unint64_t *)&qword_1000A32F0);
  }
  return result;
}

unint64_t sub_10006417C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A32F8;
  if (!qword_1000A32F8)
  {
    v1 = sub_100005FC0(&qword_1000A3298);
    sub_100007F64(&qword_1000A3300, &qword_1000A3290, (uint64_t)&protocol conformance descriptor for Link<A>);
    sub_100003DCC((unint64_t *)&qword_1000A0A38, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A32F8);
  }
  return result;
}

unint64_t sub_100064218()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000A3308;
  if (!qword_1000A3308)
  {
    v1 = sub_100005FC0(&qword_1000A3278);
    v2[0] = type metadata accessor for LargeEmptyStateView(255);
    v2[1] = sub_100003DCC(&qword_1000A3310, type metadata accessor for LargeEmptyStateView, (uint64_t)&unk_10007FD60);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100003DCC((unint64_t *)&qword_1000A0A38, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3308);
  }
  return result;
}

uint64_t sub_1000642D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 136);
  sub_1000075DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_release(v5);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  return a1;
}

void *sub_10006434C@<X0>(void *a1@<X8>)
{
  _BYTE v3[272];

  sub_100063834((uint64_t)v3);
  return memcpy(a1, v3, 0x110uLL);
}

uint64_t sub_100064394(uint64_t result)
{
  *(_BYTE *)(result + 168) = 1;
  return result;
}

uint64_t sub_1000643A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 144);
  sub_1000075DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_release(v5);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_100064414()
{
  return sub_100007F64(&qword_1000A3318, &qword_1000A3320, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

uint64_t *sub_100064440(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = a3[5];
    v9 = (char *)v4 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = a3[7];
    v14 = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)v4 + v12) = v14;
    *(uint64_t *)((char *)v4 + v13) = *(uint64_t *)((char *)a2 + v13);
    v15 = a3[9];
    *(_DWORD *)((char *)v4 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
    v16 = *(uint64_t *)((char *)a2 + v15);
    *(uint64_t *)((char *)v4 + v15) = v16;
    v17 = a3[11];
    *(uint64_t *)((char *)v4 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    *(uint64_t *)((char *)v4 + v17) = *(uint64_t *)((char *)a2 + v17);
    *(uint64_t *)((char *)v4 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    swift_retain(v14);
  }
  swift_retain(v16);
  return v4;
}

uint64_t sub_100064540(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_release(*(_QWORD *)(a1 + a2[6]));
  return swift_release(*(_QWORD *)(a1 + a2[9]));
}

uint64_t sub_1000645BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a3[7];
  v13 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v13;
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v14 = a3[9];
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  v15 = *(_QWORD *)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  v16 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_retain(v13);
  swift_retain(v15);
  return a1;
}

uint64_t sub_100064694(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = *(_QWORD *)(a2 + v11);
  v13 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_retain(v12);
  swift_release(v13);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  v14 = a3[9];
  v15 = *(_QWORD *)(a2 + v14);
  v16 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  swift_retain(v15);
  swift_release(v16);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_10006478C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[9];
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v13 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100064858(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_release(v12);
  v13 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_DWORD *)(a1 + v13) = *(_DWORD *)(a2 + v13);
  v14 = a3[9];
  v15 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_release(v15);
  v16 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100064938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100064944);
}

uint64_t sub_100064944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for BlendMode(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1000649EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000649F8);
}

uint64_t sub_1000649F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for ColorScheme(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for BlendMode(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for EmptyStateView.ViewConfiguration(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A3380, (uint64_t)&nominal type descriptor for EmptyStateView.ViewConfiguration);
}

uint64_t sub_100064AB0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[9];

  result = type metadata accessor for ColorScheme(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for BlendMode(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = (char *)&value witness table for Builtin.NativeObject + 64;
      v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[4] = (char *)&value witness table for Builtin.Int32 + 64;
      v5[5] = (char *)&value witness table for Builtin.NativeObject + 64;
      v5[6] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[7] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[8] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 9, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100064B64(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  int *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_BYTE *)(a2 + 32);
    sub_10000BA78(*(_QWORD *)a2, v8, v9, v10, v11);
    *v4 = v7;
    v4[1] = v8;
    v4[2] = v9;
    v4[3] = v10;
    *((_BYTE *)v4 + 32) = v11;
    v12 = a3[5];
    v13 = (uint64_t *)((char *)v4 + v12);
    v14 = (uint64_t *)(a2 + v12);
    v15 = sub_100005F78(&qword_1000A09A0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = 1;
    }
    else
    {
      v19 = *v14;
      *v13 = *v14;
      swift_retain(v19);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v17);
    v20 = a3[6];
    v21 = a3[7];
    v22 = (uint64_t *)((char *)v4 + v20);
    v23 = (_QWORD *)(a2 + v20);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = (uint64_t *)((char *)v4 + v21);
    v26 = (_QWORD *)(a2 + v21);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v25[2] = v26[2];
    v28 = a3[8];
    v29 = (char *)v4 + v28;
    v30 = a2 + v28;
    v31 = type metadata accessor for ColorScheme(0);
    v32 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v27);
    v32(v29, v30, v31);
    v33 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
    v34 = v33[5];
    v35 = &v29[v34];
    v36 = v30 + v34;
    v37 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
    v38 = v33[6];
    v39 = *(_QWORD *)(v30 + v38);
    *(_QWORD *)&v29[v38] = v39;
    *(_QWORD *)&v29[v33[7]] = *(_QWORD *)(v30 + v33[7]);
    *(_DWORD *)&v29[v33[8]] = *(_DWORD *)(v30 + v33[8]);
    v40 = v33[9];
    v18 = *(_QWORD *)(v30 + v40);
    *(_QWORD *)&v29[v40] = v18;
    *(_QWORD *)&v29[v33[10]] = *(_QWORD *)(v30 + v33[10]);
    *(_QWORD *)&v29[v33[11]] = *(_QWORD *)(v30 + v33[11]);
    *(_QWORD *)&v29[v33[12]] = *(_QWORD *)(v30 + v33[12]);
    swift_retain(v39);
  }
  swift_retain(v18);
  return v4;
}

uint64_t sub_100064D74(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;

  sub_1000075DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  v7 = a1 + a2[8];
  v8 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
  v10 = v7 + v9[5];
  v11 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_release(*(_QWORD *)(v7 + v9[6]));
  return swift_release(*(_QWORD *)(v7 + v9[9]));
}

uint64_t sub_100064E88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v7, v8, v9, v10);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  v11 = a3[5];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
    v16 = 1;
  }
  else
  {
    v17 = *v13;
    *v12 = *v13;
    swift_retain(v17);
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v14, v16);
  v18 = a3[6];
  v19 = a3[7];
  v20 = (_QWORD *)(a1 + v18);
  v21 = (_QWORD *)(a2 + v18);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = (_QWORD *)(a1 + v19);
  v24 = (_QWORD *)(a2 + v19);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v23[2] = v24[2];
  v26 = a3[8];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for ColorScheme(0);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v25);
  v30(v27, v28, v29);
  v31 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
  v32 = v31[5];
  v33 = v27 + v32;
  v34 = v28 + v32;
  v35 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
  v36 = v31[6];
  v37 = *(_QWORD *)(v28 + v36);
  *(_QWORD *)(v27 + v36) = v37;
  *(_QWORD *)(v27 + v31[7]) = *(_QWORD *)(v28 + v31[7]);
  *(_DWORD *)(v27 + v31[8]) = *(_DWORD *)(v28 + v31[8]);
  v38 = v31[9];
  v39 = *(_QWORD *)(v28 + v38);
  *(_QWORD *)(v27 + v38) = v39;
  *(_QWORD *)(v27 + v31[10]) = *(_QWORD *)(v28 + v31[10]);
  *(_QWORD *)(v27 + v31[11]) = *(_QWORD *)(v28 + v31[11]);
  *(_QWORD *)(v27 + v31[12]) = *(_QWORD *)(v28 + v31[12]);
  swift_retain(v37);
  swift_retain(v39);
  return a1;
}

uint64_t sub_100065070(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v7, v8, v9, v10);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  sub_1000075DC(v11, v12, v13, v14, v15);
  if (a1 != a2)
  {
    v16 = a3[5];
    v17 = (uint64_t *)(a1 + v16);
    v18 = (uint64_t *)(a2 + v16);
    sub_100007A0C(a1 + v16, &qword_1000A09A0);
    v19 = sub_100005F78(&qword_1000A09A0);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
      v21 = 1;
    }
    else
    {
      v22 = *v18;
      *v17 = *v18;
      swift_retain(v22);
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v19, v21);
  }
  v23 = a3[6];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  *v24 = *v25;
  v26 = v25[1];
  v27 = v24[1];
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = a3[7];
  v29 = (_QWORD *)(a1 + v28);
  v30 = a2 + v28;
  *v29 = *(_QWORD *)(a2 + v28);
  v31 = *(_QWORD *)(a2 + v28 + 8);
  v32 = *(_QWORD *)(a1 + v28 + 8);
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v29[2] = *(_QWORD *)(v30 + 16);
  v33 = a3[8];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 24))(v34, v35, v36);
  v37 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
  v38 = v37[5];
  v39 = v34 + v38;
  v40 = v35 + v38;
  v41 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 24))(v39, v40, v41);
  v42 = v37[6];
  v43 = *(_QWORD *)(v35 + v42);
  v44 = *(_QWORD *)(v34 + v42);
  *(_QWORD *)(v34 + v42) = v43;
  swift_retain(v43);
  swift_release(v44);
  *(_QWORD *)(v34 + v37[7]) = *(_QWORD *)(v35 + v37[7]);
  *(_DWORD *)(v34 + v37[8]) = *(_DWORD *)(v35 + v37[8]);
  v45 = v37[9];
  v46 = *(_QWORD *)(v35 + v45);
  v47 = *(_QWORD *)(v34 + v45);
  *(_QWORD *)(v34 + v45) = v46;
  swift_retain(v46);
  swift_release(v47);
  *(_QWORD *)(v34 + v37[10]) = *(_QWORD *)(v35 + v37[10]);
  *(_QWORD *)(v34 + v37[11]) = *(_QWORD *)(v35 + v37[11]);
  *(_QWORD *)(v34 + v37[12]) = *(_QWORD *)(v35 + v37[12]);
  return a1;
}

uint64_t sub_1000652B4(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
  v20 = v19[5];
  v21 = v16 + v20;
  v22 = v17 + v20;
  v23 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  *(_QWORD *)(v16 + v19[6]) = *(_QWORD *)(v17 + v19[6]);
  *(_QWORD *)(v16 + v19[7]) = *(_QWORD *)(v17 + v19[7]);
  *(_DWORD *)(v16 + v19[8]) = *(_DWORD *)(v17 + v19[8]);
  *(_QWORD *)(v16 + v19[9]) = *(_QWORD *)(v17 + v19[9]);
  *(_QWORD *)(v16 + v19[10]) = *(_QWORD *)(v17 + v19[10]);
  *(_QWORD *)(v16 + v19[11]) = *(_QWORD *)(v17 + v19[11]);
  *(_QWORD *)(v16 + v19[12]) = *(_QWORD *)(v17 + v19[12]);
  return a1;
}

uint64_t sub_100065450(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 32) = v6;
  sub_1000075DC(v7, v8, v9, v10, v11);
  if (a1 != a2)
  {
    v13 = a3[5];
    v14 = (void *)(a1 + v13);
    v15 = (const void *)(a2 + v13);
    sub_100007A0C(a1 + v13, &qword_1000A09A0);
    v16 = sub_100005F78(&qword_1000A09A0);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
      swift_storeEnumTagMultiPayload(v14, v16, 1);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
  }
  v18 = a3[6];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  v24 = a3[7];
  v25 = (_QWORD *)(a1 + v24);
  v26 = a2 + v24;
  v27 = *(_QWORD *)(a2 + v24 + 8);
  v28 = *(_QWORD *)(a1 + v24 + 8);
  *v25 = *(_QWORD *)(a2 + v24);
  v25[1] = v27;
  swift_bridgeObjectRelease(v28);
  v25[2] = *(_QWORD *)(v26 + 16);
  v29 = a3[8];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 40))(v30, v31, v32);
  v33 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
  v34 = v33[5];
  v35 = v30 + v34;
  v36 = v31 + v34;
  v37 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 40))(v35, v36, v37);
  v38 = v33[6];
  v39 = *(_QWORD *)(v30 + v38);
  *(_QWORD *)(v30 + v38) = *(_QWORD *)(v31 + v38);
  swift_release(v39);
  *(_QWORD *)(v30 + v33[7]) = *(_QWORD *)(v31 + v33[7]);
  *(_DWORD *)(v30 + v33[8]) = *(_DWORD *)(v31 + v33[8]);
  v40 = v33[9];
  v41 = *(_QWORD *)(v30 + v40);
  *(_QWORD *)(v30 + v40) = *(_QWORD *)(v31 + v40);
  swift_release(v41);
  *(_QWORD *)(v30 + v33[10]) = *(_QWORD *)(v31 + v33[10]);
  *(_QWORD *)(v30 + v33[11]) = *(_QWORD *)(v31 + v33[11]);
  *(_QWORD *)(v30 + v33[12]) = *(_QWORD *)(v31 + v33[12]);
  return a1;
}

uint64_t sub_100065644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100065650);
}

uint64_t sub_100065650(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = sub_100005F78(&qword_1000A0FA8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for EmptyStateView.ViewConfiguration(0);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[6] + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_1000656FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100065708);
}

uint64_t sub_100065708(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_100005F78(&qword_1000A0FA8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[6] + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for EmptyStateView.ViewConfiguration(0);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[8];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for EmptyStateView(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A3430, (uint64_t)&nominal type descriptor for EmptyStateView);
}

void sub_1000657C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = "!";
  sub_1000375AC(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_100082910;
    v6[3] = &unk_100082928;
    v4 = type metadata accessor for EmptyStateView.ViewConfiguration(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

_QWORD *sub_10006586C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for EmptyStateView.SubLabelInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for EmptyStateView.SubLabelInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for EmptyStateView.SubLabelInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmptyStateView.SubLabelInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EmptyStateView.SubLabelInfo()
{
  return &type metadata for EmptyStateView.SubLabelInfo;
}

uint64_t sub_1000659C8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008491C, 1);
}

uint64_t sub_1000659D8@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t (**v40)@<X0>(uint64_t@<X8>);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (**v47)@<X0>(uint64_t@<X8>);
  uint64_t v48;

  v47 = a1;
  v2 = type metadata accessor for EmptyStateView(0);
  v44 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v45 = v3;
  v46 = (uint64_t)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for WidgetRenderingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v41 - v9;
  v11 = type metadata accessor for BlendMode(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v42 = v14;
  v43 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v41 - v15;
  v48 = v1;
  v17 = sub_100024FCC(v10);
  static WidgetRenderingMode.fullColor.getter(v17);
  v18 = static WidgetRenderingMode.== infix(_:_:)(v10, v8);
  v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  v19(v8, v4);
  v19(v10, v4);
  v41 = v2;
  if ((v18 & 1) != 0)
  {
    v20 = v48 + *(int *)(v2 + 32);
    v21 = type metadata accessor for EmptyStateView.ViewConfiguration(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v16, v20 + *(int *)(v21 + 20), v11);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v16, enum case for BlendMode.normal(_:), v11);
  }
  v22 = v16;
  v23 = v11;
  v24 = sub_100024FCC(v10);
  static WidgetRenderingMode.fullColor.getter(v24);
  v25 = static WidgetRenderingMode.== infix(_:_:)(v10, v8);
  v19(v8, v4);
  v26 = ((uint64_t (*)(char *, uint64_t))v19)(v10, v4);
  if ((v25 & 1) != 0)
  {
    v27 = v48;
    v28 = v48 + *(int *)(v41 + 32);
    v29 = *(_DWORD *)(v28 + *(int *)(type metadata accessor for EmptyStateView.ViewConfiguration(0) + 32));
  }
  else
  {
    v29 = static HierarchicalShapeStyle.primary.getter(v26);
    v27 = v48;
  }
  v30 = v46;
  sub_1000078D4(v27, v46, type metadata accessor for EmptyStateView);
  v31 = v43;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v43, v22, v23);
  v32 = *(unsigned __int8 *)(v44 + 80);
  v33 = (v32 + 16) & ~v32;
  v34 = (v45 + v33 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v35 = *(unsigned __int8 *)(v12 + 80);
  v36 = v22;
  v37 = (v35 + v34 + 4) & ~v35;
  v38 = swift_allocObject(&unk_10009D3C0, v37 + v42, v32 | v35 | 7);
  sub_100066D38(v30, v38 + v33);
  *(_DWORD *)(v38 + v34) = v29;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v38 + v37, v31, v23);
  result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v36, v23);
  v40 = v47;
  *v47 = sub_100066D7C;
  v40[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v38;
  return result;
}

uint64_t sub_100065CE0@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v24[2];
  char v25;
  _BYTE v26[40];

  v8 = sub_100005F78(&qword_1000A3478);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = static VerticalAlignment.center.getter(v9);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 0;
  v12 = sub_100005F78(&qword_1000A3480);
  sub_100065E50(a1, a2, a3, (uint64_t)&v11[*(int *)(v12 + 44)]);
  v13 = *(_OWORD *)(a1 + 16);
  v24[0] = *(_OWORD *)a1;
  v24[1] = v13;
  v25 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v24, (uint64_t)v26, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  v14 = sub_100024DBC();
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v21 = sub_10000DBE0((uint64_t)v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  LOBYTE(a3) = static Edge.Set.all.getter(v21);
  sub_1000079C8((uint64_t)v11, a4, &qword_1000A3478);
  v22 = a4 + *(int *)(sub_100005F78(&qword_1000A3488) + 36);
  *(_BYTE *)v22 = a3;
  *(double *)(v22 + 8) = v14;
  *(_QWORD *)(v22 + 16) = v16;
  *(_QWORD *)(v22 + 24) = v18;
  *(_QWORD *)(v22 + 32) = v20;
  *(_BYTE *)(v22 + 40) = 0;
  return sub_100007A0C((uint64_t)v11, &qword_1000A3478);
}

uint64_t sub_100065E50@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  __int128 v20;
  char v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  int *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD v92[2];
  char v93;
  _BYTE v94[24];

  v84 = a3;
  v83 = a2;
  v85 = a4;
  v5 = sub_100005F78(&qword_1000A3490);
  v6 = __chkstk_darwin(v5);
  v82 = (uint64_t)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v81 = (uint64_t *)((char *)&v68 - v8);
  v77 = sub_100005F78(&qword_1000A14C0);
  __chkstk_darwin(v77);
  v76 = (uint64_t)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v73);
  v11 = (uint64_t *)((char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v74 = sub_100005F78(&qword_1000A3498);
  __chkstk_darwin(v74);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100005F78(&qword_1000A34A0);
  v14 = __chkstk_darwin(v80);
  v78 = (uint64_t)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v79 = (uint64_t)&v68 - v17;
  GeometryProxy.size.getter(v16);
  v19 = v18;
  v20 = *(_OWORD *)(a1 + 16);
  v92[0] = *(_OWORD *)a1;
  v92[1] = v20;
  v21 = *(_BYTE *)(a1 + 32);
  v75 = a1;
  v93 = v21;
  sub_100007984((uint64_t)v92, (uint64_t)v94, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v94, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v23 = v22;
  sub_10000DBE0((uint64_t)v92, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  sub_10000DBE0((uint64_t)v94, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v25 = v24;
  sub_10000DBE0((uint64_t)v92, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v26 = a1 + *(int *)(type metadata accessor for EmptyStateView(0) + 32);
  v27 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
  v28 = (v19 - (v23 + v25)) * *(double *)(v26 + v27[10]);
  GeometryProxy.size.getter(v27);
  v30 = v29;
  sub_10000DBE0((uint64_t)v94, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v32 = v31;
  sub_10000DBE0((uint64_t)v92, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  sub_10000DBE0((uint64_t)v94, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v34 = v33;
  v35 = sub_10000DBE0((uint64_t)v92, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v36 = static Alignment.center.getter(v35);
  ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v86, *(_QWORD *)&v28, 0, v30 - (v32 + v34), 0, v36, v37);
  v38 = v86;
  v39 = v87;
  v72 = v88;
  v71 = v89;
  v70 = v90;
  v69 = v91;
  v40 = *(_QWORD *)(v26 + v27[9]);
  KeyPath = swift_getKeyPath(&unk_1000829A0);
  v42 = *(_QWORD *)(v26 + v27[11]);
  v43 = (char *)v11 + *(int *)(v73 + 20);
  v44 = enum case for RoundedCornerStyle.continuous(_:);
  v45 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v43, v44, v45);
  *v11 = v42;
  v11[1] = v42;
  v46 = v76;
  sub_1000078D4((uint64_t)v11, v76, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v46 + *(int *)(v77 + 36)) = 256;
  sub_1000079C8(v46, (uint64_t)&v13[*(int *)(v74 + 36)], &qword_1000A14C0);
  *(_QWORD *)v13 = v38;
  v13[8] = v39;
  *((_QWORD *)v13 + 2) = v72;
  v13[24] = v71;
  v47 = v69;
  *((_QWORD *)v13 + 4) = v70;
  *((_QWORD *)v13 + 5) = v47;
  *((_QWORD *)v13 + 6) = KeyPath;
  *((_QWORD *)v13 + 7) = v40;
  swift_retain_n(v40, 2);
  swift_retain(KeyPath);
  sub_100007A0C(v46, &qword_1000A14C0);
  sub_100007A48((uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  swift_release(v40);
  v48 = swift_release(KeyPath);
  LOBYTE(v40) = static Edge.Set.trailing.getter(v48);
  v49 = EdgeInsets.init(_all:)(*(double *)(v26 + v27[12]));
  v51 = v50;
  v53 = v52;
  v55 = v54;
  v56 = v78;
  sub_1000079C8((uint64_t)v13, v78, &qword_1000A3498);
  v57 = v56 + *(int *)(v80 + 36);
  *(_BYTE *)v57 = v40;
  *(double *)(v57 + 8) = v49;
  *(_QWORD *)(v57 + 16) = v51;
  *(_QWORD *)(v57 + 24) = v53;
  *(_QWORD *)(v57 + 32) = v55;
  *(_BYTE *)(v57 + 40) = 0;
  sub_100007A0C((uint64_t)v13, &qword_1000A3498);
  v58 = v79;
  v59 = sub_100007984(v56, v79, &qword_1000A34A0);
  v60 = static HorizontalAlignment.leading.getter(v59);
  v61 = (uint64_t)v81;
  *v81 = v60;
  *(_QWORD *)(v61 + 8) = 0;
  *(_BYTE *)(v61 + 16) = 0;
  v62 = sub_100005F78(&qword_1000A34A8);
  sub_100066480(v75, v83, v84, v61 + *(int *)(v62 + 44));
  sub_1000079C8(v58, v56, &qword_1000A34A0);
  v63 = v82;
  sub_1000079C8(v61, v82, &qword_1000A3490);
  v64 = v85;
  sub_1000079C8(v56, v85, &qword_1000A34A0);
  v65 = sub_100005F78(&qword_1000A34B0);
  sub_1000079C8(v63, v64 + *(int *)(v65 + 48), &qword_1000A3490);
  v66 = v64 + *(int *)(v65 + 64);
  *(_QWORD *)v66 = 0;
  *(_BYTE *)(v66 + 8) = 1;
  sub_100007A0C(v61, &qword_1000A3490);
  sub_100007A0C(v58, &qword_1000A34A0);
  sub_100007A0C(v63, &qword_1000A3490);
  return sub_100007A0C(v56, &qword_1000A34A0);
}

uint64_t sub_100066480@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t KeyPath;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *);
  uint64_t v56;
  double *v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;
  void (*v104)(char *, uint64_t, uint64_t);
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  uint64_t v123;

  v120 = a3;
  v119 = a2;
  v115 = a4;
  v107 = sub_100005F78(&qword_1000A34B8);
  __chkstk_darwin(v107);
  v108 = (uint64_t)&v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005F78(&qword_1000A34C0);
  v7 = __chkstk_darwin(v6);
  v114 = (uint64_t)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v113 = (char *)&v103 - v9;
  v10 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v10);
  v118 = (char *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_100005F78(&qword_1000A28E0);
  __chkstk_darwin(v117);
  v13 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_100005F78(&qword_1000A28D0);
  v14 = __chkstk_darwin(v111);
  v112 = (uint64_t)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v121 = (uint64_t)&v103 - v16;
  v17 = type metadata accessor for EmptyStateView(0);
  v18 = *(int *)(v17 + 24);
  v19 = v17;
  v109 = (void (*)(char *, uint64_t, uint64_t))v17;
  v110 = a1;
  v20 = (double *)(a1 + v18);
  v21 = *((_QWORD *)v20 + 1);
  v122 = *v20;
  v123 = v21;
  v22 = sub_1000075E8();
  swift_bridgeObjectRetain(v21);
  v106 = v22;
  v23 = Text.init<A>(_:)(&v122, &type metadata for String, v22);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v30 = a1 + *(int *)(v19 + 32);
  v31 = type metadata accessor for EmptyStateView.ViewConfiguration(0);
  v32 = *(int *)(v31 + 28);
  v105 = *(int *)(v31 + 24);
  v116 = v30;
  v33 = Font.weight(_:)(*(_QWORD *)(v30 + v105), *(double *)(v30 + v32));
  v34 = Text.font(_:)(v33, v23, v25, v29, v27);
  v36 = v35;
  LOBYTE(v30) = v37;
  v39 = v38;
  swift_release(v33);
  v40 = v30 & 1;
  sub_1000115B8(v23, v25, v29);
  swift_bridgeObjectRelease(v27);
  LODWORD(v122) = v119;
  v41 = Text.foregroundStyle<A>(_:)(&v122, v34, v36, v40, v39, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v43 = v42;
  LOBYTE(v33) = v44;
  v46 = v45;
  sub_1000115B8(v34, v36, v40);
  swift_bridgeObjectRelease(v39);
  v47 = type metadata accessor for BlendMode(0);
  v48 = (uint64_t)v118;
  v104 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16);
  v104(v118, v120, v47);
  sub_1000078D4(v48, (uint64_t)&v13[*(int *)(v117 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v13 = v41;
  *((_QWORD *)v13 + 1) = v43;
  v13[16] = v33 & 1;
  *((_QWORD *)v13 + 3) = v46;
  sub_100007A48(v48, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  KeyPath = swift_getKeyPath(&unk_1000829D0);
  v50 = v121;
  v51 = (uint64_t *)(v121 + *(int *)(v111 + 36));
  v52 = sub_100005F78(&qword_1000A1078);
  v53 = (char *)v51 + *(int *)(v52 + 28);
  v54 = type metadata accessor for ColorScheme(0);
  v55 = *(void (**)(char *))(*(_QWORD *)(v54 - 8) + 16);
  v56 = v116;
  v55(v53);
  *v51 = KeyPath;
  sub_100007984((uint64_t)v13, v50, &qword_1000A28E0);
  v57 = (double *)(v110 + *((int *)v109 + 7));
  v58 = *((_QWORD *)v57 + 1);
  if (v58)
  {
    v59 = v57[2];
    v122 = *v57;
    v123 = v58;
    swift_bridgeObjectRetain(v58);
    v60 = Text.init<A>(_:)(&v122, &type metadata for String, v106);
    v62 = v61;
    v110 = v52;
    v64 = v63;
    v111 = v54;
    v66 = v65 & 1;
    v67 = Text.font(_:)(*(_QWORD *)(v56 + v105), v60, v61, v66, v63);
    v109 = (void (*)(char *, uint64_t, uint64_t))v55;
    v68 = v67;
    v70 = v69;
    v72 = v71;
    v74 = v73 & 1;
    sub_1000115B8(v60, v62, v66);
    swift_bridgeObjectRelease(v64);
    LODWORD(v122) = v119;
    v75 = Text.foregroundStyle<A>(_:)(&v122, v68, v70, v74, v72, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v77 = v76;
    LOBYTE(v64) = v78;
    v80 = v79;
    sub_1000115B8(v68, v70, v74);
    swift_bridgeObjectRelease(v72);
    v81 = (uint64_t)v118;
    v104(v118, v120, v47);
    sub_1000078D4(v81, (uint64_t)&v13[*(int *)(v117 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
    *(_QWORD *)v13 = v75;
    *((_QWORD *)v13 + 1) = v77;
    v13[16] = v64 & 1;
    *((_QWORD *)v13 + 3) = v80;
    v82 = sub_100007A48(v81, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
    LOBYTE(v75) = static Edge.Set.top.getter(v82);
    v83 = EdgeInsets.init(_all:)(v59);
    v85 = v84;
    v87 = v86;
    v89 = v88;
    v90 = v108;
    sub_1000079C8((uint64_t)v13, v108, &qword_1000A28E0);
    v91 = v90 + *(int *)(v107 + 36);
    *(_BYTE *)v91 = v75;
    *(double *)(v91 + 8) = v83;
    *(_QWORD *)(v91 + 16) = v85;
    *(_QWORD *)(v91 + 24) = v87;
    *(_QWORD *)(v91 + 32) = v89;
    *(_BYTE *)(v91 + 40) = 0;
    sub_100007A0C((uint64_t)v13, &qword_1000A28E0);
    v92 = swift_getKeyPath(&unk_1000829D0);
    v93 = sub_100005F78(&qword_1000A34C8);
    v94 = (uint64_t)v113;
    v95 = (uint64_t *)&v113[*(int *)(v93 + 36)];
    v109((char *)v95 + *(int *)(v110 + 28), v116, v111);
    *v95 = v92;
    sub_100007984(v90, v94, &qword_1000A34B8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v94, 0, 1, v93);
  }
  else
  {
    v96 = sub_100005F78(&qword_1000A34C8);
    v94 = (uint64_t)v113;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v113, 1, 1, v96);
  }
  v97 = v121;
  v98 = v112;
  sub_1000079C8(v121, v112, &qword_1000A28D0);
  v99 = v114;
  sub_1000079C8(v94, v114, &qword_1000A34C0);
  v100 = v115;
  sub_1000079C8(v98, v115, &qword_1000A28D0);
  v101 = sub_100005F78(&qword_1000A34D0);
  sub_1000079C8(v99, v100 + *(int *)(v101 + 48), &qword_1000A34C0);
  sub_100007A0C(v94, &qword_1000A34C0);
  sub_100007A0C(v97, &qword_1000A28D0);
  sub_100007A0C(v99, &qword_1000A34C0);
  return sub_100007A0C(v98, &qword_1000A28D0);
}

uint64_t sub_100066B9C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  void (*v17)(unint64_t, uint64_t);
  uint64_t v19;

  v1 = (int *)type metadata accessor for EmptyStateView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v19 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for BlendMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v0 + v4;
  sub_1000075DC(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8), *(_QWORD *)(v0 + v4 + 16), *(_QWORD *)(v0 + v4 + 24), *(_BYTE *)(v0 + v4 + 32));
  v10 = (_QWORD *)(v0 + v4 + v1[5]);
  v11 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (((v19 + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL) + v7 + 4) & ~v7;
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[7] + 8));
  v14 = v9 + v1[8];
  v15 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
  v17 = *(void (**)(unint64_t, uint64_t))(v6 + 8);
  v17(v14 + v16[5], v5);
  swift_release(*(_QWORD *)(v14 + v16[6]));
  swift_release(*(_QWORD *)(v14 + v16[9]));
  v17(v0 + v13, v5);
  return swift_deallocObject(v0, v13 + v8, v3 | v7 | 7);
}

uint64_t sub_100066D38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EmptyStateView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100066D7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for EmptyStateView(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BlendMode(0) - 8) + 80);
  return sub_100065CE0(v1 + v4, *(_DWORD *)(v1 + v5), v1 + ((v5 + v6 + 4) & ~v6), a1);
}

unint64_t sub_100066E18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A34D8;
  if (!qword_1000A34D8)
  {
    v1 = sub_100005FC0(&qword_1000A34E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A34D8);
  }
  return result;
}

uint64_t sub_100066E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_100066F9C()
{
  uint64_t result;

  result = sub_100066FB8();
  qword_1000A34E8 = result;
  return result;
}

uint64_t sub_100066FB8()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const __CFDictionary *isa;
  const __CTFontDescriptor *v11;
  const __CTFont *v12;
  CFArrayRef v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _BYTE v17[56];
  _BYTE v18[64];

  v0 = sub_100005F78(&qword_1000A34F8);
  inited = swift_initStackObject(v0, v18);
  *(_OWORD *)(inited + 16) = xmmword_10007F260;
  result = kCTFontUIFontDesignTrait;
  if (!kCTFontUIFontDesignTrait)
  {
    __break(1u);
    goto LABEL_8;
  }
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTFontUIFontDesignTrait);
  *(_QWORD *)(inited + 40) = v3;
  result = kCTFontUIFontDesignSerif;
  if (!kCTFontUIFontDesignSerif)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  *(_QWORD *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTFontUIFontDesignSerif);
  *(_QWORD *)(inited + 56) = v4;
  v5 = sub_10005E924(inited);
  v6 = sub_100005F78(&qword_1000A3500);
  v7 = swift_initStackObject(v6, v17);
  *(_OWORD *)(v7 + 16) = xmmword_10007F260;
  *(_QWORD *)(v7 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTFontTraitsAttribute);
  *(_QWORD *)(v7 + 40) = v8;
  *(_QWORD *)(v7 + 48) = v5;
  v9 = sub_10005EA44(v7);
  sub_100005F78(&qword_1000A3508);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);
  v11 = CTFontDescriptorCreateWithAttributes(isa);

  v12 = CTFontCreateWithFontDescriptor(v11, 14.0, 0);
  v13 = CTFontCopySupportedLanguages(v12);
  v16 = 0;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v13, &v16, &type metadata for String);

  if (v16)
    v14 = v16;
  else
    v14 = _swiftEmptyArrayStorage;
  v15 = sub_100067CE0((uint64_t)v14);

  swift_bridgeObjectRelease(v14);
  return v15;
}

uint64_t static Font.Design.serifIfSupported.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_s20BooksWidgetExtension16FallBackFontSpecV03usedeF0SbyFZ_0() & 1) != 0)
  {
    v2 = type metadata accessor for Font.Design(0);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
    v4 = a1;
    v5 = 1;
  }
  else
  {
    v6 = enum case for Font.Design.serif (_:);
    v7 = type metadata accessor for Font.Design(0);
    v8 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 104))(a1, v6, v7);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v4 = a1;
    v5 = 0;
    v2 = v7;
  }
  return v3(v4, v5, 1, v2);
}

uint64_t static Font.Design.defaultIfUnsupported.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_s20BooksWidgetExtension16FallBackFontSpecV03usedeF0SbyFZ_0() & 1) != 0)
  {
    v2 = enum case for Font.Design.default(_:);
    v3 = type metadata accessor for Font.Design(0);
    v4 = *(_QWORD *)(v3 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(a1, v2, v3);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v6 = a1;
    v7 = 0;
    v8 = v3;
  }
  else
  {
    v8 = type metadata accessor for Font.Design(0);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
    v6 = a1;
    v7 = 1;
  }
  return v5(v6, v7, 1, v8);
}

uint64_t sub_100067264(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_1000676EC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

void sub_100067410(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005F78(&qword_1000A3510);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v21, v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

uint64_t sub_1000676EC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100067410(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_100067884();
      goto LABEL_22;
    }
    sub_100067A34(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

void *sub_100067884()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100005F78(&qword_1000A3510);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_100067A34(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005F78(&qword_1000A3510);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v33, v21, v22);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v21;
    v14[1] = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_100067CE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_100067264(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t _s20BooksWidgetExtension16FallBackFontSpecV03usedeF0SbyFZ_0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  unsigned __int8 v14;
  char v15;
  id v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v0 = sub_100005F78(&qword_1000A34F0);
  __chkstk_darwin(v0);
  v2 = (char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for Locale.Language.Components(0);
  v3 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale.Components(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for Locale.LanguageCode(0);
  v10 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v31 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v12, "BOOLForKey:", v13);

  if ((v14 & 1) != 0)
  {
    v15 = 1;
  }
  else
  {
    v16 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v17 = objc_msgSend(v16, "preferredLocalizations");

    v18 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for String);
    if (v18[2])
    {
      v19 = v18[4];
      v20 = v18[5];
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRelease(v18);
      v21 = Locale.Components.init(identifier:)(v19, v20);
      Locale.Components.languageComponents.getter(v21);
      v22 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      Locale.Language.Components.languageCode.getter(v22);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v32);
      v23 = v33;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v2, 1, v33) == 1)
      {
        sub_100068090((uint64_t)v2);
        v15 = 1;
      }
      else
      {
        v24 = v31;
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v31, v2, v23);
        if (qword_1000A0728 != -1)
          swift_once(&qword_1000A0728, sub_100066F9C);
        v25 = qword_1000A34E8;
        v26 = Locale.LanguageCode.identifier.getter();
        v28 = v27;
        LOBYTE(v25) = sub_100066E68(v26, v27, v25);
        swift_bridgeObjectRelease(v28);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v24, v23);
        v15 = v25 ^ 1;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v18);
      v15 = 1;
    }
  }
  return v15 & 1;
}

ValueMetadata *type metadata accessor for FallBackFontSpec()
{
  return &type metadata for FallBackFontSpec;
}

uint64_t sub_100068090(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F78(&qword_1000A34F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for GradientOverlayView()
{
  return &type metadata for GradientOverlayView;
}

uint64_t sub_1000680E0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008497C, 1);
}

_QWORD *sub_1000680F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;

  v2 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BlendMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005F78(&qword_1000A23A0);
  v10 = swift_allocObject(v9, 48, 7);
  *(_OWORD *)(v10 + 16) = xmmword_10007F170;
  if (qword_1000A0730 != -1)
    swift_once(&qword_1000A0730, sub_100068314);
  v11 = qword_1000A3518;
  *(_QWORD *)(v10 + 32) = qword_1000A3518;
  v12 = qword_1000A0738;
  swift_retain(v11);
  if (v12 != -1)
    swift_once(&qword_1000A0738, sub_100068324);
  v13 = qword_1000A3520;
  *(_QWORD *)(v10 + 40) = qword_1000A3520;
  *(_QWORD *)&v26[0] = v10;
  specialized Array._endMutation()();
  v14 = *(_QWORD *)&v26[0];
  v15 = swift_retain(v13);
  v16 = static UnitPoint.top.getter(v15);
  v18 = v17;
  v19 = static UnitPoint.bottom.getter();
  v21 = v20;
  Gradient.init(colors:)(v14);
  LinearGradient.init(gradient:startPoint:endPoint:)(v26, v16, v18, v19, v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for BlendMode.multiply(_:), v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v4, v8, v5);
  v22 = sub_100005F78(&qword_1000A3528);
  sub_10004AFC0((uint64_t)v4, a1 + *(int *)(v22 + 36));
  v23 = v26[1];
  *(_OWORD *)a1 = v26[0];
  *(_OWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 32) = v27;
  swift_bridgeObjectRetain(*(_QWORD *)&v26[0]);
  sub_10004B004((uint64_t)v4);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return sub_100025230(v26);
}

uint64_t sub_100068314(uint64_t a1)
{
  return sub_100068338(0.0, a1, &qword_1000A3518);
}

uint64_t sub_100068324(uint64_t a1)
{
  return sub_100068338(0.1, a1, &qword_1000A3520);
}

uint64_t sub_100068338(double a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = static Color.black.getter();
  v6 = Color.opacity(_:)(a1);
  result = swift_release(v5);
  *a3 = v6;
  return result;
}

unint64_t sub_100068390()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3530;
  if (!qword_1000A3530)
  {
    v1 = sub_100005FC0(&qword_1000A3528);
    sub_100052B60();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3530);
  }
  return result;
}

_QWORD *sub_1000683FC(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  uint64_t v45;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[2];
    a1[2] = v8;
    v9 = a3[7];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for BlendMode(0);
    v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
    swift_retain(v7);
    v14 = swift_retain(v8);
    v13(v10, v11, v12, v14);
    v15 = a3[9];
    *(_QWORD *)((char *)v4 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    *(_QWORD *)((char *)v4 + v15) = *(_QWORD *)((char *)a2 + v15);
    v16 = a3[10];
    v17 = (_QWORD *)((char *)v4 + v16);
    v18 = (_QWORD *)((char *)a2 + v16);
    v19 = (int *)sub_100005F78(&qword_1000A0A50);
    v20 = *((_QWORD *)v19 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
    {
      v21 = type metadata accessor for CircularProgressView.Content(0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v43 = (void (*)(char *, char *, uint64_t))v13;
      v45 = v20;
      v23 = v18[1];
      *v17 = *v18;
      v17[1] = v23;
      v24 = v19[12];
      v44 = (char *)v17 + v24;
      v25 = (_QWORD *)((char *)v18 + v24);
      v26 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v23);
      if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
      {
        v27 = *v25;
        *(_QWORD *)v44 = *v25;
        swift_retain(v27);
        v28 = 1;
      }
      else
      {
        *(_DWORD *)v44 = *(_DWORD *)v25;
        v29 = sub_100005F78(&qword_1000A18C0);
        v43(&v44[*(int *)(v29 + 48)], (char *)v25 + *(int *)(v29 + 48), v12);
        v30 = *(int *)(v29 + 64);
        v31 = &v44[v30];
        v32 = (char *)v25 + v30;
        v33 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
        v28 = 0;
      }
      swift_storeEnumTagMultiPayload(v44, v26, v28);
      v34 = v19[16];
      v35 = (char *)v17 + v34;
      v36 = (char *)v18 + v34;
      v37 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
      v38 = v19[20];
      v39 = (char *)v17 + v38;
      v40 = (char *)v18 + v38;
      v41 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
      *(_QWORD *)((char *)v17 + v19[24]) = *(_QWORD *)((char *)v18 + v19[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v45 + 56))(v17, 0, 1, v19);
    }
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  }
  return v4;
}

uint64_t sub_100068690(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  int *v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  swift_release(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for BlendMode(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + *(int *)(a2 + 40);
  v8 = (int *)sub_100005F78(&qword_1000A0A50);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v8 - 1) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
    v10 = (_QWORD *)(v7 + v8[12]);
    v11 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      swift_release(*v10);
    }
    else
    {
      v12 = sub_100005F78(&qword_1000A18C0);
      v6((uint64_t)v10 + *(int *)(v12 + 48), v5);
      v13 = (char *)v10 + *(int *)(v12 + 64);
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    }
    v15 = v7 + v8[16];
    v16 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
    v17 = v7 + v8[20];
    v18 = type metadata accessor for Font.Design(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  }
  return result;
}

_QWORD *sub_100068800(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[2];
  a1[2] = v7;
  v8 = a3[7];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for BlendMode(0);
  v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
  swift_retain(v6);
  v13 = swift_retain(v7);
  v12(v9, v10, v11, v13);
  v14 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  v15 = a3[10];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = (int *)sub_100005F78(&qword_1000A0A50);
  v19 = *((_QWORD *)v18 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
  {
    v20 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v41 = (void (*)(char *, char *, uint64_t))v12;
    v43 = v19;
    v21 = v17[1];
    *v16 = *v17;
    v16[1] = v21;
    v22 = v18[12];
    v42 = (char *)v16 + v22;
    v23 = (_QWORD *)((char *)v17 + v22);
    v24 = type metadata accessor for CircularProgressView.ColorStyle(0);
    swift_bridgeObjectRetain(v21);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = *v23;
      *(_QWORD *)v42 = *v23;
      swift_retain(v25);
      v26 = 1;
    }
    else
    {
      *(_DWORD *)v42 = *(_DWORD *)v23;
      v27 = sub_100005F78(&qword_1000A18C0);
      v41(&v42[*(int *)(v27 + 48)], (char *)v23 + *(int *)(v27 + 48), v11);
      v28 = *(int *)(v27 + 64);
      v29 = &v42[v28];
      v30 = (char *)v23 + v28;
      v31 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v42, v24, v26);
    v32 = v18[16];
    v33 = (char *)v16 + v32;
    v34 = (char *)v17 + v32;
    v35 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    v36 = v18[20];
    v37 = (char *)v16 + v36;
    v38 = (char *)v17 + v36;
    v39 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    *(_QWORD *)((char *)v16 + v18[24]) = *(_QWORD *)((char *)v17 + v18[24]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v43 + 56))(v16, 0, 1, v18);
  }
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

_QWORD *sub_100068A68(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int *v18;
  uint64_t (*v19)(_QWORD *, uint64_t, int *);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a3[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for BlendMode(0);
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  v15 = a3[10];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = (int *)sub_100005F78(&qword_1000A0A50);
  v70 = *((_QWORD *)v18 - 1);
  v19 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v70 + 48);
  v20 = v19(v16, 1, v18);
  v21 = v19(v17, 1, v18);
  if (v20)
  {
    if (!v21)
    {
      v68 = v14;
      *v16 = *v17;
      v22 = v17[1];
      v16[1] = v22;
      v23 = v18[12];
      v66 = (_QWORD *)((char *)v16 + v23);
      v24 = (char *)v17 + v23;
      v25 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v22);
      v67 = v25;
      if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
      {
        v26 = *(_QWORD *)v24;
        v27 = v66;
        *v66 = *(_QWORD *)v24;
        swift_retain(v26);
        v28 = 1;
      }
      else
      {
        v27 = v66;
        *(_DWORD *)v66 = *(_DWORD *)v24;
        v38 = sub_100005F78(&qword_1000A18C0);
        (*(void (**)(char *, char *, uint64_t))(v68 + 16))((char *)v66 + *(int *)(v38 + 48), &v24[*(int *)(v38 + 48)], v13);
        v39 = *(int *)(v38 + 64);
        v40 = (char *)v66 + v39;
        v41 = &v24[v39];
        v42 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
        v28 = 0;
      }
      swift_storeEnumTagMultiPayload(v27, v67, v28);
      v43 = v18[16];
      v44 = (char *)v16 + v43;
      v45 = (char *)v17 + v43;
      v46 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
      v47 = v18[20];
      v48 = (char *)v16 + v47;
      v49 = (char *)v17 + v47;
      v50 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
      *(_QWORD *)((char *)v16 + v18[24]) = *(_QWORD *)((char *)v17 + v18[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v70 + 56))(v16, 0, 1, v18);
      goto LABEL_16;
    }
LABEL_7:
    v29 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_16;
  }
  if (v21)
  {
    sub_100007A0C((uint64_t)v16, &qword_1000A0A50);
    goto LABEL_7;
  }
  *v16 = *v17;
  v30 = v17[1];
  v31 = v16[1];
  v16[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  if (a1 != a2)
  {
    v69 = v14;
    v32 = v18[12];
    v33 = (char *)v16 + v32;
    v34 = (char *)v17 + v32;
    sub_100007A48((uint64_t)v16 + v32, type metadata accessor for CircularProgressView.ColorStyle);
    v35 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
    {
      v36 = *(_QWORD *)v34;
      *(_QWORD *)v33 = *(_QWORD *)v34;
      swift_retain(v36);
      v37 = 1;
    }
    else
    {
      *(_DWORD *)v33 = *(_DWORD *)v34;
      v71 = v35;
      v51 = sub_100005F78(&qword_1000A18C0);
      (*(void (**)(char *, char *, uint64_t))(v69 + 16))(&v33[*(int *)(v51 + 48)], &v34[*(int *)(v51 + 48)], v13);
      v52 = *(int *)(v51 + 64);
      v53 = &v33[v52];
      v54 = &v34[v52];
      v55 = type metadata accessor for ColorScheme(0);
      v56 = v54;
      v35 = v71;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v56, v55);
      v37 = 0;
    }
    swift_storeEnumTagMultiPayload(v33, v35, v37);
  }
  v57 = v18[16];
  v58 = (char *)v16 + v57;
  v59 = (char *)v17 + v57;
  v60 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 24))(v58, v59, v60);
  v61 = v18[20];
  v62 = (char *)v16 + v61;
  v63 = (char *)v17 + v61;
  v64 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 24))(v62, v63, v64);
  *(_QWORD *)((char *)v16 + v18[24]) = *(_QWORD *)((char *)v17 + v18[24]);
LABEL_16:
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

uint64_t sub_100068E84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for BlendMode(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[10];
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  v15 = (int *)sub_100005F78(&qword_1000A0A50);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v18 = v15[12];
    v35 = (_DWORD *)((char *)v13 + v18);
    v19 = (_DWORD *)((char *)v14 + v18);
    v34 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v19, v34))
    {
      memcpy(v35, v19, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      *v35 = *v19;
      v33 = sub_100005F78(&qword_1000A18C0);
      v10((uint64_t)v35 + *(int *)(v33 + 48), (uint64_t)v19 + *(int *)(v33 + 48), v9);
      v20 = *(int *)(v33 + 64);
      v21 = (char *)v35 + v20;
      v22 = (char *)v19 + v20;
      v23 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
      swift_storeEnumTagMultiPayload(v35, v34, 0);
    }
    v24 = v15[16];
    v25 = (char *)v13 + v24;
    v26 = (char *)v14 + v24;
    v27 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
    v28 = v15[20];
    v29 = (char *)v13 + v28;
    v30 = (char *)v14 + v28;
    v31 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
    *(_QWORD *)((char *)v13 + v15[24]) = *(_QWORD *)((char *)v14 + v15[24]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  return a1;
}

_QWORD *sub_1000690CC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD *, uint64_t, int *);
  int v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  *a1 = *a2;
  v6 = a1[1];
  a1[1] = a2[1];
  swift_release(v6);
  v7 = a1[2];
  a1[2] = a2[2];
  swift_release(v7);
  v8 = a3[7];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for BlendMode(0);
  v59 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, char *, uint64_t))(v59 + 40))(v9, v10, v11);
  v12 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  v13 = a3[10];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = (int *)sub_100005F78(&qword_1000A0A50);
  v17 = *((_QWORD *)v16 - 1);
  v18 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v21 = v16[12];
      v22 = (_DWORD *)((char *)v14 + v21);
      v23 = (_DWORD *)((char *)v15 + v21);
      v57 = type metadata accessor for CircularProgressView.ColorStyle(0);
      if (swift_getEnumCaseMultiPayload(v23, v57))
      {
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        *v22 = *v23;
        v56 = sub_100005F78(&qword_1000A18C0);
        (*(void (**)(char *, char *, uint64_t))(v59 + 32))((char *)v22 + *(int *)(v56 + 48), (char *)v23 + *(int *)(v56 + 48), v11);
        v31 = *(int *)(v56 + 64);
        v32 = (char *)v22 + v31;
        v33 = (char *)v23 + v31;
        v34 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
        swift_storeEnumTagMultiPayload(v22, v57, 0);
      }
      v35 = v16[16];
      v36 = (char *)v14 + v35;
      v37 = (char *)v15 + v35;
      v38 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
      v39 = v16[20];
      v40 = (char *)v14 + v39;
      v41 = (char *)v15 + v39;
      v42 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
      *(_QWORD *)((char *)v14 + v16[24]) = *(_QWORD *)((char *)v15 + v16[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_15;
    }
LABEL_7:
    v24 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_15;
  }
  if (v20)
  {
    sub_100007A0C((uint64_t)v14, &qword_1000A0A50);
    goto LABEL_7;
  }
  v25 = v15[1];
  v26 = v14[1];
  *v14 = *v15;
  v14[1] = v25;
  swift_bridgeObjectRelease(v26);
  if (a1 != a2)
  {
    v27 = v16[12];
    v28 = (_DWORD *)((char *)v14 + v27);
    v29 = (_DWORD *)((char *)v15 + v27);
    sub_100007A48((uint64_t)v14 + v27, type metadata accessor for CircularProgressView.ColorStyle);
    v30 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v29, v30))
    {
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      *v28 = *v29;
      v58 = sub_100005F78(&qword_1000A18C0);
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))((char *)v28 + *(int *)(v58 + 48), (char *)v29 + *(int *)(v58 + 48), v11);
      v43 = *(int *)(v58 + 64);
      v44 = (char *)v28 + v43;
      v45 = (char *)v29 + v43;
      v46 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
      swift_storeEnumTagMultiPayload(v28, v30, 0);
    }
  }
  v47 = v16[16];
  v48 = (char *)v14 + v47;
  v49 = (char *)v15 + v47;
  v50 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 40))(v48, v49, v50);
  v51 = v16[20];
  v52 = (char *)v14 + v51;
  v53 = (char *)v15 + v51;
  v54 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 40))(v52, v53, v54);
  *(_QWORD *)((char *)v14 + v16[24]) = *(_QWORD *)((char *)v15 + v16[24]);
LABEL_15:
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

uint64_t sub_10006949C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000694A8);
}

uint64_t sub_1000694A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for BlendMode(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = type metadata accessor for CircularProgressView.Content(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_100069548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100069554);
}

uint64_t sub_100069554(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for BlendMode(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = type metadata accessor for CircularProgressView.Content(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for ReadingProgressIconView.ViewConfiguration(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A3590, (uint64_t)&nominal type descriptor for ReadingProgressIconView.ViewConfiguration);
}

uint64_t sub_100069604(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[8];

  v5[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v5[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for BlendMode(319);
  if (v3 <= 0x3F)
  {
    v5[3] = *(_QWORD *)(result - 8) + 64;
    v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[5] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for CircularProgressView.Content(319);
    if (v4 <= 0x3F)
    {
      v5[6] = *(_QWORD *)(result - 8) + 64;
      v5[7] = &unk_100082AB8;
      swift_initStructMetadata(a1, 256, 8, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_1000696B4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  uint64_t v44;

  v4 = type metadata accessor for ReadingProgressIconView.ViewConfiguration(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v6 = (int *)v4;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[2];
    a1[2] = v8;
    v9 = *(int *)(v4 + 28);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for BlendMode(0);
    v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v12 - 8) + 16);
    swift_retain(v7);
    v14 = swift_retain(v8);
    v13(v10, v11, v12, v14);
    *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
    *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
    v15 = v6[10];
    v16 = (_QWORD *)((char *)a1 + v15);
    v17 = (_QWORD *)((char *)a2 + v15);
    v18 = (int *)sub_100005F78(&qword_1000A0A50);
    v19 = *((_QWORD *)v18 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
    {
      v20 = type metadata accessor for CircularProgressView.Content(0);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v42 = (void (*)(char *, char *, uint64_t))v13;
      v44 = v19;
      v22 = v17[1];
      *v16 = *v17;
      v16[1] = v22;
      v23 = v18[12];
      v43 = (char *)v16 + v23;
      v24 = (_QWORD *)((char *)v17 + v23);
      v25 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v22);
      if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
      {
        v26 = *v24;
        *(_QWORD *)v43 = *v24;
        swift_retain(v26);
        v27 = 1;
      }
      else
      {
        *(_DWORD *)v43 = *(_DWORD *)v24;
        v28 = sub_100005F78(&qword_1000A18C0);
        v42(&v43[*(int *)(v28 + 48)], (char *)v24 + *(int *)(v28 + 48), v12);
        v29 = *(int *)(v28 + 64);
        v30 = &v43[v29];
        v31 = (char *)v24 + v29;
        v32 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
        v27 = 0;
      }
      swift_storeEnumTagMultiPayload(v43, v25, v27);
      v33 = v18[16];
      v34 = (char *)v16 + v33;
      v35 = (char *)v17 + v33;
      v36 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
      v37 = v18[20];
      v38 = (char *)v16 + v37;
      v39 = (char *)v17 + v37;
      v40 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
      *(_QWORD *)((char *)v16 + v18[24]) = *(_QWORD *)((char *)v17 + v18[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v44 + 56))(v16, 0, 1, v18);
    }
    *((_BYTE *)a1 + v6[11]) = *((_BYTE *)a2 + v6[11]);
  }
  return a1;
}

uint64_t sub_100069954(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  int *v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_release(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 16));
  v2 = type metadata accessor for ReadingProgressIconView.ViewConfiguration(0);
  v3 = a1 + *(int *)(v2 + 28);
  v4 = type metadata accessor for BlendMode(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v6 = a1 + *(int *)(v2 + 40);
  v7 = (int *)sub_100005F78(&qword_1000A0A50);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
    v9 = (_QWORD *)(v6 + v7[12]);
    v10 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      swift_release(*v9);
    }
    else
    {
      v11 = sub_100005F78(&qword_1000A18C0);
      v5((uint64_t)v9 + *(int *)(v11 + 48), v4);
      v12 = (char *)v9 + *(int *)(v11 + 64);
      v13 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    }
    v14 = v6 + v7[16];
    v15 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    v16 = v6 + v7[20];
    v17 = type metadata accessor for Font.Design(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  }
  return result;
}

_QWORD *sub_100069ACC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  uint64_t v41;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  v6 = (int *)type metadata accessor for ReadingProgressIconView.ViewConfiguration(0);
  v7 = v6[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for BlendMode(0);
  v11 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  swift_retain(v4);
  v12 = swift_retain(v5);
  v11(v8, v9, v10, v12);
  *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
  *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
  v13 = v6[10];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = (int *)sub_100005F78(&qword_1000A0A50);
  v17 = *((_QWORD *)v16 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
  {
    v18 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v39 = (void (*)(char *, char *, uint64_t))v11;
    v41 = v17;
    v19 = v15[1];
    *v14 = *v15;
    v14[1] = v19;
    v20 = v16[12];
    v40 = (char *)v14 + v20;
    v21 = (_QWORD *)((char *)v15 + v20);
    v22 = type metadata accessor for CircularProgressView.ColorStyle(0);
    swift_bridgeObjectRetain(v19);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = *v21;
      *(_QWORD *)v40 = *v21;
      swift_retain(v23);
      v24 = 1;
    }
    else
    {
      *(_DWORD *)v40 = *(_DWORD *)v21;
      v25 = sub_100005F78(&qword_1000A18C0);
      v39(&v40[*(int *)(v25 + 48)], (char *)v21 + *(int *)(v25 + 48), v10);
      v26 = *(int *)(v25 + 64);
      v27 = &v40[v26];
      v28 = (char *)v21 + v26;
      v29 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v40, v22, v24);
    v30 = v16[16];
    v31 = (char *)v14 + v30;
    v32 = (char *)v15 + v30;
    v33 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
    v34 = v16[20];
    v35 = (char *)v14 + v34;
    v36 = (char *)v15 + v34;
    v37 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
    *(_QWORD *)((char *)v14 + v16[24]) = *(_QWORD *)((char *)v15 + v16[24]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v41 + 56))(v14, 0, 1, v16);
  }
  *((_BYTE *)a1 + v6[11]) = *((_BYTE *)a2 + v6[11]);
  return a1;
}

_QWORD *sub_100069D40(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int *v17;
  uint64_t (*v18)(_QWORD *, uint64_t, int *);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = (int *)type metadata accessor for ReadingProgressIconView.ViewConfiguration(0);
  v9 = v8[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for BlendMode(0);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
  *(_QWORD *)((char *)a1 + v8[8]) = *(_QWORD *)((char *)a2 + v8[8]);
  *(_QWORD *)((char *)a1 + v8[9]) = *(_QWORD *)((char *)a2 + v8[9]);
  v14 = v8[10];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = (int *)sub_100005F78(&qword_1000A0A50);
  v69 = *((_QWORD *)v17 - 1);
  v18 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v69 + 48);
  v19 = v18(v15, 1, v17);
  v20 = v18(v16, 1, v17);
  if (v19)
  {
    if (!v20)
    {
      v67 = v13;
      *v15 = *v16;
      v21 = v16[1];
      v15[1] = v21;
      v22 = v17[12];
      v65 = (_QWORD *)((char *)v15 + v22);
      v23 = (char *)v16 + v22;
      v24 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v21);
      v66 = v24;
      if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
      {
        v25 = *(_QWORD *)v23;
        v26 = v65;
        *v65 = *(_QWORD *)v23;
        swift_retain(v25);
        v27 = 1;
      }
      else
      {
        v26 = v65;
        *(_DWORD *)v65 = *(_DWORD *)v23;
        v37 = sub_100005F78(&qword_1000A18C0);
        (*(void (**)(char *, char *, uint64_t))(v67 + 16))((char *)v65 + *(int *)(v37 + 48), &v23[*(int *)(v37 + 48)], v12);
        v38 = *(int *)(v37 + 64);
        v39 = (char *)v65 + v38;
        v40 = &v23[v38];
        v41 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
        v27 = 0;
      }
      swift_storeEnumTagMultiPayload(v26, v66, v27);
      v42 = v17[16];
      v43 = (char *)v15 + v42;
      v44 = (char *)v16 + v42;
      v45 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
      v46 = v17[20];
      v47 = (char *)v15 + v46;
      v48 = (char *)v16 + v46;
      v49 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
      *(_QWORD *)((char *)v15 + v17[24]) = *(_QWORD *)((char *)v16 + v17[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v69 + 56))(v15, 0, 1, v17);
      goto LABEL_16;
    }
LABEL_7:
    v28 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_16;
  }
  if (v20)
  {
    sub_100007A0C((uint64_t)v15, &qword_1000A0A50);
    goto LABEL_7;
  }
  *v15 = *v16;
  v29 = v16[1];
  v30 = v15[1];
  v15[1] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  if (a1 != a2)
  {
    v68 = v13;
    v31 = v17[12];
    v32 = (char *)v15 + v31;
    v33 = (char *)v16 + v31;
    sub_100007A48((uint64_t)v15 + v31, type metadata accessor for CircularProgressView.ColorStyle);
    v34 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
    {
      v35 = *(_QWORD *)v33;
      *(_QWORD *)v32 = *(_QWORD *)v33;
      swift_retain(v35);
      v36 = 1;
    }
    else
    {
      *(_DWORD *)v32 = *(_DWORD *)v33;
      v70 = v34;
      v50 = sub_100005F78(&qword_1000A18C0);
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(&v32[*(int *)(v50 + 48)], &v33[*(int *)(v50 + 48)], v12);
      v51 = *(int *)(v50 + 64);
      v52 = &v32[v51];
      v53 = &v33[v51];
      v54 = type metadata accessor for ColorScheme(0);
      v55 = v53;
      v34 = v70;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v55, v54);
      v36 = 0;
    }
    swift_storeEnumTagMultiPayload(v32, v34, v36);
  }
  v56 = v17[16];
  v57 = (char *)v15 + v56;
  v58 = (char *)v16 + v56;
  v59 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 24))(v57, v58, v59);
  v60 = v17[20];
  v61 = (char *)v15 + v60;
  v62 = (char *)v16 + v60;
  v63 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 24))(v61, v62, v63);
  *(_QWORD *)((char *)v15 + v17[24]) = *(_QWORD *)((char *)v16 + v17[24]);
LABEL_16:
  *((_BYTE *)a1 + v8[11]) = *((_BYTE *)a2 + v8[11]);
  return a1;
}

uint64_t sub_10006A164(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = (int *)type metadata accessor for ReadingProgressIconView.ViewConfiguration(0);
  v5 = v4[7];
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for BlendMode(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v9(v6, v7, v8);
  *(_QWORD *)(a1 + v4[8]) = *(_QWORD *)(a2 + v4[8]);
  *(_QWORD *)(a1 + v4[9]) = *(_QWORD *)(a2 + v4[9]);
  v10 = v4[10];
  v11 = (_OWORD *)(a1 + v10);
  v12 = (_OWORD *)(a2 + v10);
  v13 = (int *)sub_100005F78(&qword_1000A0A50);
  v14 = *((_QWORD *)v13 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    v15 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    *v11 = *v12;
    v16 = v13[12];
    v33 = (_DWORD *)((char *)v11 + v16);
    v17 = (_DWORD *)((char *)v12 + v16);
    v32 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v17, v32))
    {
      memcpy(v33, v17, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      *v33 = *v17;
      v31 = sub_100005F78(&qword_1000A18C0);
      v9((uint64_t)v33 + *(int *)(v31 + 48), (uint64_t)v17 + *(int *)(v31 + 48), v8);
      v18 = *(int *)(v31 + 64);
      v19 = (char *)v33 + v18;
      v20 = (char *)v17 + v18;
      v21 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      swift_storeEnumTagMultiPayload(v33, v32, 0);
    }
    v22 = v13[16];
    v23 = (char *)v11 + v22;
    v24 = (char *)v12 + v22;
    v25 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
    v26 = v13[20];
    v27 = (char *)v11 + v26;
    v28 = (char *)v12 + v26;
    v29 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
    *(_QWORD *)((char *)v11 + v13[24]) = *(_QWORD *)((char *)v12 + v13[24]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
  }
  *(_BYTE *)(a1 + v4[11]) = *(_BYTE *)(a2 + v4[11]);
  return a1;
}

_QWORD *sub_10006A3B8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  *a1 = *a2;
  v4 = a1[1];
  a1[1] = a2[1];
  swift_release(v4);
  v5 = a1[2];
  a1[2] = a2[2];
  swift_release(v5);
  v6 = (int *)type metadata accessor for ReadingProgressIconView.ViewConfiguration(0);
  v7 = v6[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for BlendMode(0);
  v57 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, char *, uint64_t))(v57 + 40))(v8, v9, v10);
  *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
  *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
  v11 = v6[10];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = (int *)sub_100005F78(&qword_1000A0A50);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *(_OWORD *)v12 = *(_OWORD *)v13;
      v19 = v14[12];
      v20 = (_DWORD *)((char *)v12 + v19);
      v21 = (_DWORD *)((char *)v13 + v19);
      v55 = type metadata accessor for CircularProgressView.ColorStyle(0);
      if (swift_getEnumCaseMultiPayload(v21, v55))
      {
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        *v20 = *v21;
        v54 = sub_100005F78(&qword_1000A18C0);
        (*(void (**)(char *, char *, uint64_t))(v57 + 32))((char *)v20 + *(int *)(v54 + 48), (char *)v21 + *(int *)(v54 + 48), v10);
        v29 = *(int *)(v54 + 64);
        v30 = (char *)v20 + v29;
        v31 = (char *)v21 + v29;
        v32 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
        swift_storeEnumTagMultiPayload(v20, v55, 0);
      }
      v33 = v14[16];
      v34 = (char *)v12 + v33;
      v35 = (char *)v13 + v33;
      v36 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
      v37 = v14[20];
      v38 = (char *)v12 + v37;
      v39 = (char *)v13 + v37;
      v40 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v38, v39, v40);
      *(_QWORD *)((char *)v12 + v14[24]) = *(_QWORD *)((char *)v13 + v14[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_15;
    }
LABEL_7:
    v22 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_15;
  }
  if (v18)
  {
    sub_100007A0C((uint64_t)v12, &qword_1000A0A50);
    goto LABEL_7;
  }
  v23 = v13[1];
  v24 = v12[1];
  *v12 = *v13;
  v12[1] = v23;
  swift_bridgeObjectRelease(v24);
  if (a1 != a2)
  {
    v25 = v14[12];
    v26 = (_DWORD *)((char *)v12 + v25);
    v27 = (_DWORD *)((char *)v13 + v25);
    sub_100007A48((uint64_t)v12 + v25, type metadata accessor for CircularProgressView.ColorStyle);
    v28 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v27, v28))
    {
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      *v26 = *v27;
      v56 = sub_100005F78(&qword_1000A18C0);
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))((char *)v26 + *(int *)(v56 + 48), (char *)v27 + *(int *)(v56 + 48), v10);
      v41 = *(int *)(v56 + 64);
      v42 = (char *)v26 + v41;
      v43 = (char *)v27 + v41;
      v44 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
      swift_storeEnumTagMultiPayload(v26, v28, 0);
    }
  }
  v45 = v14[16];
  v46 = (char *)v12 + v45;
  v47 = (char *)v13 + v45;
  v48 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 40))(v46, v47, v48);
  v49 = v14[20];
  v50 = (char *)v12 + v49;
  v51 = (char *)v13 + v49;
  v52 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 40))(v50, v51, v52);
  *(_QWORD *)((char *)v12 + v14[24]) = *(_QWORD *)((char *)v13 + v14[24]);
LABEL_15:
  *((_BYTE *)a1 + v6[11]) = *((_BYTE *)a2 + v6[11]);
  return a1;
}

uint64_t sub_10006A794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006A7A0);
}

uint64_t sub_10006A7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReadingProgressIconView.ViewConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10006A7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006A7E8);
}

uint64_t sub_10006A7E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReadingProgressIconView.ViewConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ReadingProgressIconView(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A3638, (uint64_t)&nominal type descriptor for ReadingProgressIconView);
}

uint64_t sub_10006A83C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for ReadingProgressIconView.ViewConfiguration(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10006A8A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100084A10, 1);
}

uint64_t sub_10006A8B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (**v28)(char *, char *, uint64_t);
  double v29;
  uint64_t v30;
  int *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (**v46)(char *, char *, uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t KeyPath;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  char *v68;
  void (**v69)(char *, char *, uint64_t);
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t OpaqueTypeConformance2;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  void (**v86)(char *, char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;

  v2 = v1;
  v92 = a1;
  v80 = sub_100005F78(&qword_1000A3670);
  __chkstk_darwin(v80);
  v4 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005F78(&qword_1000A3678);
  __chkstk_darwin(v5);
  v82 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100005F78(&qword_1000A3680);
  __chkstk_darwin(v79);
  v84 = (uint64_t)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100005F78(&qword_1000A3688);
  __chkstk_darwin(v90);
  v83 = (uint64_t)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100005F78(&qword_1000A3690);
  v86 = *(void (***)(char *, char *, uint64_t))(v91 - 8);
  v9 = __chkstk_darwin(v91);
  v81 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v85 = (char *)&v76 - v11;
  v88 = sub_100005F78(&qword_1000A3698);
  __chkstk_darwin(v88);
  v89 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005F78(&qword_1000A1E88);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v77 = type metadata accessor for BlendMode(0);
  v76 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v17 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CircularProgressView.Content(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (int *)type metadata accessor for CircularProgressView(0);
  __chkstk_darwin(v21);
  v23 = (char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100005F78(&qword_1000A36A0);
  v78 = *(_QWORD *)(v87 - 8);
  v24 = __chkstk_darwin(v87);
  v26 = (char *)&v76 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (void (**)(char *, char *, uint64_t))((char *)&v76 - v27);
  v29 = *(double *)v2;
  v30 = type metadata accessor for ReadingProgressIconView.ViewConfiguration(0);
  v31 = (int *)v30;
  if (v29 >= 1.0)
  {
    v53 = *(unsigned __int8 *)(v2 + *(int *)(v30 + 44));
    *(_QWORD *)v4 = static VerticalAlignment.center.getter(v30);
    *((_QWORD *)v4 + 1) = 0;
    v4[16] = 1;
    v54 = sub_100005F78(&qword_1000A36A8);
    sub_10006B044(v53, (uint64_t)&v4[*(int *)(v54 + 44)]);
    v55 = sub_100007F64(&qword_1000A36B0, &qword_1000A3670, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v56 = (uint64_t)v82;
    View.accessibilityHidden(_:)(1, v80, v55);
    sub_100007A0C((uint64_t)v4, &qword_1000A3670);
    v57 = *(_QWORD *)(v2 + 8);
    KeyPath = swift_getKeyPath(&unk_100082B38);
    v59 = v84;
    sub_1000079C8(v56, v84, &qword_1000A3678);
    v60 = (uint64_t *)(v59 + *(int *)(v79 + 36));
    *v60 = KeyPath;
    v60[1] = v57;
    swift_retain(v57);
    v61 = sub_100007A0C(v56, &qword_1000A3678);
    v62 = static Font.caption2.getter(v61);
    v63 = swift_getKeyPath(&unk_100082B68);
    v64 = v83;
    sub_1000079C8(v59, v83, &qword_1000A3680);
    v65 = v90;
    v66 = (uint64_t *)(v64 + *(int *)(v90 + 36));
    *v66 = v63;
    v66[1] = v62;
    sub_100007A0C(v59, &qword_1000A3680);
    v67 = sub_10006B4EC();
    v68 = v81;
    View.widgetAccentable(_:)(1, v65, v67);
    sub_100007A0C(v64, &qword_1000A3688);
    v70 = v85;
    v69 = v86;
    v71 = v91;
    v86[4](v85, v68, v91);
    v72 = v89;
    v69[2](v89, v70, v71);
    swift_storeEnumTagMultiPayload(v72, v88, 1);
    v73 = sub_100003DCC(&qword_1000A2318, type metadata accessor for CircularProgressView, (uint64_t)&unk_10008035C);
    v93 = (uint64_t)v21;
    v94 = v73;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v93 = v65;
    v94 = v67;
    v75 = swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v72, v87, v71, OpaqueTypeConformance2, v75);
    return ((uint64_t (*)(char *, uint64_t))v69[1])(v70, v71);
  }
  else
  {
    sub_10006B690(v2 + *(int *)(v30 + 40), (uint64_t)v20);
    v32 = *(char **)(v2 + 16);
    v84 = *(_QWORD *)(v2 + 8);
    v85 = v32;
    v33 = v2 + v31[7];
    v86 = v28;
    v34 = v76;
    v35 = v77;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v17, v33, v77);
    v36 = *(_QWORD *)(v2 + v31[8]);
    v37 = *(_QWORD *)(v2 + v31[9]);
    *v15 = swift_getKeyPath(&unk_100082B98);
    v38 = sub_100005F78(&qword_1000A18B8);
    swift_storeEnumTagMultiPayload(v15, v38, 0);
    v39 = swift_getKeyPath(&unk_100082BC8);
    v40 = (uint64_t *)&v23[v21[5]];
    *v40 = v39;
    v41 = sub_100005F78(&qword_1000A09A0);
    swift_storeEnumTagMultiPayload(v40, v41, 0);
    sub_100007984((uint64_t)v15, (uint64_t)v23, &qword_1000A1E88);
    *(double *)&v23[v21[6]] = v29;
    sub_10006B720((uint64_t)v20, (uint64_t)&v23[v21[7]]);
    v23[v21[8]] = 0;
    v43 = v84;
    v42 = v85;
    *(_QWORD *)&v23[v21[9]] = v84;
    *(_QWORD *)&v23[v21[10]] = v42;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(&v23[v21[11]], v17, v35);
    *(_QWORD *)&v23[v21[12]] = v36;
    *(_QWORD *)&v23[v21[13]] = v37;
    *(_QWORD *)&v23[v21[14]] = v37;
    v44 = sub_100003DCC(&qword_1000A2318, type metadata accessor for CircularProgressView, (uint64_t)&unk_10008035C);
    swift_retain(v43);
    swift_retain(v42);
    View.widgetAccentable(_:)(1, v21, v44);
    sub_100007A48((uint64_t)v23, type metadata accessor for CircularProgressView);
    v45 = v78;
    v46 = v86;
    v47 = v87;
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))((char *)v86, v26, v87);
    v48 = v89;
    (*(void (**)(char *, _QWORD, uint64_t))(v45 + 16))(v89, v46, v47);
    swift_storeEnumTagMultiPayload(v48, v88, 0);
    v93 = (uint64_t)v21;
    v94 = v44;
    v49 = swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v50 = sub_10006B4EC();
    v93 = v90;
    v94 = v50;
    v51 = swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v48, v47, v91, v49, v51);
    return (*(uint64_t (**)(void (**)(char *, char *, uint64_t), uint64_t))(v45 + 8))(v46, v47);
  }
}

uint64_t sub_10006B044@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v45 = a1;
  v50 = a2;
  v2 = sub_100005F78(&qword_1000A36D0);
  v43 = *(_QWORD *)(v2 - 8);
  v44 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100005F78(&qword_1000A36D8);
  v5 = __chkstk_darwin(v49);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v42 - v8;
  v47 = sub_100005F78(&qword_1000A36E0);
  __chkstk_darwin(v47);
  v48 = (uint64_t)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005F78(&qword_1000A36E8);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for Image.Scale(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100005F78(&qword_1000A36F0);
  v18 = __chkstk_darwin(v46);
  v20 = (uint64_t *)((char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18);
  v22 = (char *)&v42 - v21;
  if ((v45 & 1) != 0)
  {
    v31 = Image.init(systemName:)(0x72616D6B63656863, 0xE90000000000006BLL);
    v51 = v31;
    v32 = static Font.Weight.black.getter();
    View.fontWeight(_:)(*(_QWORD *)&v32, 0, &type metadata for Image, &protocol witness table for Image);
    swift_release(v31);
    (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for Image.Scale.small(_:), v14);
    KeyPath = swift_getKeyPath(&unk_100082BF8);
    v34 = v49;
    v35 = (uint64_t *)&v7[*(int *)(v49 + 36)];
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))((char *)v35 + *(int *)(v11 + 28), v17, v14);
    *v35 = KeyPath;
    v37 = v43;
    v36 = v44;
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v7, v4, v44);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v4, v36);
    v26 = &qword_1000A36D8;
    sub_100007984((uint64_t)v7, (uint64_t)v9, &qword_1000A36D8);
    v38 = v48;
    sub_1000079C8((uint64_t)v9, v48, &qword_1000A36D8);
    swift_storeEnumTagMultiPayload(v38, v47, 1);
    v39 = sub_10006B824();
    v40 = sub_10006B8A8();
    _ConditionalContent<>.init(storage:)(v38, v46, v34, v39, v40);
    v30 = (uint64_t)v9;
  }
  else
  {
    v23 = Image.init(systemName:)(0xD000000000000015, 0x800000010007C220);
    (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for Image.Scale.medium(_:), v14);
    v24 = swift_getKeyPath(&unk_100082BF8);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))((char *)v13 + *(int *)(v11 + 28), v17, v14);
    *v13 = v24;
    v25 = v46;
    sub_1000079C8((uint64_t)v13, (uint64_t)v20 + *(int *)(v46 + 36), &qword_1000A36E8);
    *v20 = v23;
    swift_retain(v23);
    sub_100007A0C((uint64_t)v13, &qword_1000A36E8);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    swift_release(v23);
    v26 = &qword_1000A36F0;
    sub_100007984((uint64_t)v20, (uint64_t)v22, &qword_1000A36F0);
    v27 = v48;
    sub_1000079C8((uint64_t)v22, v48, &qword_1000A36F0);
    swift_storeEnumTagMultiPayload(v27, v47, 0);
    v28 = sub_10006B824();
    v29 = sub_10006B8A8();
    _ConditionalContent<>.init(storage:)(v27, v25, v49, v28, v29);
    v30 = (uint64_t)v22;
  }
  return sub_100007A0C(v30, v26);
}

uint64_t sub_10006B4A8()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_10006B4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006B784(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for LayoutDirection, (uint64_t (*)(char *))&EnvironmentValues.layoutDirection.setter);
}

unint64_t sub_10006B4EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A36B8;
  if (!qword_1000A36B8)
  {
    v1 = sub_100005FC0(&qword_1000A3688);
    sub_10006B570();
    sub_100007F64(&qword_1000A1058, &qword_1000A1060, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A36B8);
  }
  return result;
}

unint64_t sub_10006B570()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A36C0;
  if (!qword_1000A36C0)
  {
    v1 = sub_100005FC0(&qword_1000A3680);
    sub_10006B5F4();
    sub_100007F64(&qword_1000A1D30, &qword_1000A1D38, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A36C0);
  }
  return result;
}

unint64_t sub_10006B5F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A36C8;
  if (!qword_1000A36C8)
  {
    v1 = sub_100005FC0(&qword_1000A3678);
    sub_100007F64(&qword_1000A36B0, &qword_1000A3670, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100003DCC((unint64_t *)&qword_1000A0A38, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A36C8);
  }
  return result;
}

uint64_t sub_10006B690(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CircularProgressView.Content(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006B6D4()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_10006B6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006B784(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for LayoutDirection, (uint64_t (*)(char *))&EnvironmentValues.layoutDirection.setter);
}

uint64_t sub_10006B720(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CircularProgressView.Content(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006B764()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_10006B784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  a5(0);
  __chkstk_darwin();
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_10006B800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006B784(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for Image.Scale, (uint64_t (*)(char *))&EnvironmentValues.imageScale.setter);
}

unint64_t sub_10006B824()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A36F8;
  if (!qword_1000A36F8)
  {
    v1 = sub_100005FC0(&qword_1000A36F0);
    sub_100007F64(&qword_1000A3700, &qword_1000A36E8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A36F8);
  }
  return result;
}

unint64_t sub_10006B8A8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000A3708;
  if (!qword_1000A3708)
  {
    v1 = sub_100005FC0(&qword_1000A36D8);
    v2[0] = &type metadata for Image;
    v2[1] = &protocol witness table for Image;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    sub_100007F64(&qword_1000A3700, &qword_1000A36E8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3708);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReadingProgressIconView.GoalCompleteIcon(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10006B99C + 4 * byte_100082A95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10006B9D0 + 4 * byte_100082A90[v4]))();
}

uint64_t sub_10006B9D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006B9D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006B9E0);
  return result;
}

uint64_t sub_10006B9EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006B9F4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10006B9F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006BA00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReadingProgressIconView.GoalCompleteIcon()
{
  return &type metadata for ReadingProgressIconView.GoalCompleteIcon;
}

unint64_t sub_10006BA20()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = qword_1000A3710;
  if (!qword_1000A3710)
  {
    v1 = sub_100005FC0(&qword_1000A3718);
    v4 = type metadata accessor for CircularProgressView(255);
    v5 = sub_100003DCC(&qword_1000A2318, type metadata accessor for CircularProgressView, (uint64_t)&unk_10008035C);
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v2 = sub_100005FC0(&qword_1000A3688);
    v3 = sub_10006B4EC();
    v4 = v2;
    v5 = v3;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3710);
  }
  return result;
}

unint64_t sub_10006BAFC()
{
  unint64_t result;

  result = qword_1000A3720;
  if (!qword_1000A3720)
  {
    result = swift_getWitnessTable(&unk_100082C84, &type metadata for ReadingProgressIconView.GoalCompleteIcon);
    atomic_store(result, (unint64_t *)&qword_1000A3720);
  }
  return result;
}

uint64_t *sub_10006BB40(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100005F78(&qword_1000A09A0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *v4 = *a2;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = (uint64_t *)((char *)v4 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v12 = *(uint64_t *)((char *)a2 + v15);
    *(uint64_t *)((char *)v4 + v15) = v12;
    v19 = a3[7];
    v20 = (char *)v4 + v19;
    v21 = (char *)a2 + v19;
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_WORD *)v20 + 8) = *((_WORD *)v21 + 8);
    swift_bridgeObjectRetain(v18);
  }
  swift_retain(v12);
  return v4;
}

uint64_t sub_10006BC4C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20) + 8));
  return swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 24)));
}

uint64_t *sub_10006BCCC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v6 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = (uint64_t *)((char *)a1 + v12);
  v15 = (uint64_t *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = *(uint64_t *)((char *)a2 + v13);
  *(uint64_t *)((char *)a1 + v13) = v17;
  v18 = a3[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *((_WORD *)v19 + 8) = *((_WORD *)v20 + 8);
  swift_bridgeObjectRetain(v16);
  swift_retain(v17);
  return a1;
}

uint64_t *sub_10006BDB0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;

  if (a1 != a2)
  {
    sub_100007A0C((uint64_t)a1, &qword_1000A09A0);
    v6 = sub_100005F78(&qword_1000A09A0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[6];
  v18 = *(uint64_t *)((char *)a2 + v17);
  v19 = *(uint64_t *)((char *)a1 + v17);
  *(uint64_t *)((char *)a1 + v17) = v18;
  swift_retain(v18);
  swift_release(v19);
  v20 = a3[7];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *(_OWORD *)v22;
  *((_WORD *)v21 + 8) = *((_WORD *)v22 + 8);
  *(_OWORD *)v21 = v23;
  return a1;
}

char *sub_10006BECC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;

  v6 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  v9 = a3[7];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_WORD *)v10 + 8) = *((_WORD *)v11 + 8);
  return a1;
}

char *sub_10006BF98(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  if (a1 != a2)
  {
    sub_100007A0C((uint64_t)a1, &qword_1000A09A0);
    v6 = sub_100005F78(&qword_1000A09A0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v12 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v10 + 1);
  v13 = *((_QWORD *)v9 + 1);
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease(v13);
  v14 = a3[6];
  v15 = *(_QWORD *)&a1[v14];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  swift_release(v15);
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_WORD *)v17 + 8) = *((_WORD *)v18 + 8);
  return a1;
}

uint64_t sub_10006C098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006C0A4);
}

uint64_t sub_10006C0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100005F78(&qword_1000A0FA8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10006C124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006C130);
}

uint64_t sub_10006C130(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100005F78(&qword_1000A0FA8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for LabelView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000A37A8;
  if (!qword_1000A37A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LabelView);
  return result;
}

void sub_10006C1E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  sub_1000375AC(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_100082CC0;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = &unk_100082CD8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t sub_10006C270(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100084A7C, 1);
}

uint64_t sub_10006C280@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t KeyPath;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE v112[128];
  int v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  char v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _OWORD v132[2];
  uint64_t v133;
  char v134;
  uint64_t v135;
  char v136;
  __int128 v137;

  v111 = a1;
  v2 = sub_100005F78(&qword_1000A37E8);
  __chkstk_darwin(v2);
  v4 = (char *)&v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005F78(&qword_1000A37F0);
  __chkstk_darwin(v5);
  v109 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorScheme(0);
  v107 = *(_QWORD *)(v7 - 8);
  v108 = v7;
  __chkstk_darwin(v7);
  v106 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v9);
  v102 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WidgetRenderingMode(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (uint64_t *)((char *)&v94 - v16);
  v100 = sub_100005F78(&qword_1000A28E0);
  __chkstk_darwin(v100);
  v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_100005F78(&qword_1000A37F8);
  __chkstk_darwin(v101);
  v104 = (uint64_t)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100005F78(&qword_1000A3800);
  v21 = __chkstk_darwin(v110);
  v103 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v105 = (uint64_t)&v94 - v23;
  v24 = type metadata accessor for LabelView(0);
  v25 = v1;
  v26 = (_QWORD *)(v1 + *(int *)(v24 + 20));
  v27 = v26[1];
  if (v27)
  {
    v97 = v24;
    v98 = v2;
    v99 = v4;
    *(_QWORD *)&v126 = *v26;
    *((_QWORD *)&v126 + 1) = v27;
    v28 = sub_1000075E8();
    swift_bridgeObjectRetain(v27);
    v29 = Text.init<A>(_:)(&v126, &type metadata for String, v28);
    v31 = v30;
    v95 = v32;
    v96 = v33;
    v34 = sub_100024FCC(v17);
    static WidgetRenderingMode.fullColor.getter(v34);
    v35 = static WidgetRenderingMode.== infix(_:_:)(v17, v15);
    v36 = *(void (**)(char *, uint64_t))(v12 + 8);
    v36(v15, v11);
    v37 = ((uint64_t (*)(_QWORD *, uint64_t))v36)(v17, v11);
    v94 = v25;
    if ((v35 & 1) != 0)
    {
      if (qword_1000A0740 != -1)
        swift_once(&qword_1000A0740, sub_10006CB6C);
      v38 = dword_1000A3728;
    }
    else
    {
      v38 = static HierarchicalShapeStyle.primary.getter(v37);
    }
    LODWORD(v126) = v38;
    v43 = v95 & 1;
    v44 = v96;
    v45 = Text.foregroundStyle<A>(_:)(&v126, v29, v31, v95 & 1, v96, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v47 = v46;
    v49 = v48;
    v51 = v50;
    sub_1000115B8(v29, v31, v43);
    swift_bridgeObjectRelease(v44);
    if (qword_1000A0748 != -1)
      swift_once(&qword_1000A0748, sub_10006CB88);
    v52 = type metadata accessor for BlendMode(0);
    v53 = sub_10000BE14(v52, (uint64_t)qword_1000A3730);
    v54 = (uint64_t)v102;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v102, v53, v52);
    sub_10004AFC0(v54, (uint64_t)&v19[*(int *)(v100 + 36)]);
    *(_QWORD *)v19 = v45;
    *((_QWORD *)v19 + 1) = v47;
    v19[16] = v49 & 1;
    *((_QWORD *)v19 + 3) = v51;
    sub_10004B004(v54);
    v55 = *(_QWORD *)(v94 + *(int *)(v97 + 24));
    v56 = v111;
    if (qword_1000A0750 != -1)
      swift_once(&qword_1000A0750, sub_10006CBE0);
    v57 = Font.weight(_:)(v55, *(double *)&qword_1000A3748);
    KeyPath = swift_getKeyPath(&unk_100082D40);
    v59 = v104;
    sub_1000079C8((uint64_t)v19, v104, &qword_1000A28E0);
    v60 = (uint64_t *)(v59 + *(int *)(v101 + 36));
    *v60 = KeyPath;
    v60[1] = v57;
    sub_100007A0C((uint64_t)v19, &qword_1000A28E0);
    v62 = v106;
    v61 = v107;
    v63 = v108;
    (*(void (**)(char *, _QWORD, uint64_t))(v107 + 104))(v106, enum case for ColorScheme.dark(_:), v108);
    v64 = swift_getKeyPath(&unk_100082D70);
    v65 = v110;
    v66 = (uint64_t)v103;
    v67 = (uint64_t *)&v103[*(int *)(v110 + 36)];
    v68 = sub_100005F78(&qword_1000A1078);
    (*(void (**)(char *, char *, uint64_t))(v61 + 16))((char *)v67 + *(int *)(v68 + 28), v62, v63);
    *v67 = v64;
    sub_1000079C8(v59, v66, &qword_1000A37F8);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v63);
    sub_100007A0C(v59, &qword_1000A37F8);
    v69 = v105;
    sub_100007984(v66, v105, &qword_1000A3800);
    v70 = (uint64_t)v99;
    sub_1000079C8(v69, (uint64_t)v99, &qword_1000A3800);
    swift_storeEnumTagMultiPayload(v70, v98, 0);
    v71 = sub_100005F78(&qword_1000A3828);
    v72 = sub_10006CC64();
    v73 = sub_10006CD9C();
    v74 = (uint64_t)v109;
    _ConditionalContent<>.init(storage:)(v70, v65, v71, v72, v73);
    sub_100007A0C(v69, &qword_1000A3800);
    v75 = sub_100005F78(&qword_1000A3808);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v74, 0, 1, v75);
    return sub_100007984(v74, v56, &qword_1000A37F0);
  }
  else
  {
    v39 = v111;
    v40 = v25 + *(int *)(v24 + 28);
    if ((*(_BYTE *)(v40 + 17) & 1) != 0)
    {
      v41 = sub_100005F78(&qword_1000A3808);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v39, 1, 1, v41);
    }
    else
    {
      v76 = v4;
      v77 = *(_DWORD *)v40;
      if ((*(_BYTE *)(v40 + 16) & 1) != 0)
      {
        v81 = static Alignment.center.getter(v24);
        sub_100021588(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v126, 0.0, 1, 0.0, 1, v81, v82, v77);
        v113 = v126;
        v114 = *((_QWORD *)&v126 + 1);
        v115 = v127;
        v116 = *((_QWORD *)&v127 + 1);
        v117 = v128;
        *(_QWORD *)&v118 = *((_QWORD *)&v128 + 1);
        BYTE8(v118) = v129;
        v119 = *((_QWORD *)&v129 + 1);
        v120 = v130;
        v121 = *((_QWORD *)&v130 + 1);
        v122 = v131;
        v123 = *((_QWORD *)&v131 + 1);
        v124 = v132[0];
        v125 = *(_OWORD *)((char *)v132 + 8);
        sub_10000BA70((uint64_t)&v113);
      }
      else
      {
        v78 = *(_QWORD *)(v40 + 8);
        v79 = static Alignment.center.getter(v24);
        _FrameLayout.init(width:height:alignment:)(&v133, v78, 0, 0, 1, v79, v80);
        v113 = v77;
        v114 = v133;
        v115 = v134;
        v116 = v135;
        v117 = v136;
        v118 = v137;
        sub_10000BA24((uint64_t)&v113);
      }
      sub_100007984((uint64_t)&v113, (uint64_t)v112, &qword_1000A3810);
      v83 = sub_100005F78(&qword_1000A3818);
      v84 = sub_100005F78(&qword_1000A2C48);
      v85 = sub_10006CC00((unint64_t *)&qword_1000A3820, &qword_1000A3818);
      v86 = sub_10006CC00(&qword_1000A2C40, &qword_1000A2C48);
      _ConditionalContent<>.init(storage:)(v112, v83, v84, v85, v86);
      v87 = v131;
      v76[4] = v130;
      v76[5] = v87;
      v76[6] = v132[0];
      *(_OWORD *)((char *)v76 + 105) = *(_OWORD *)((char *)v132 + 9);
      v88 = v127;
      *v76 = v126;
      v76[1] = v88;
      v89 = v129;
      v76[2] = v128;
      v76[3] = v89;
      swift_storeEnumTagMultiPayload(v76, v2, 1);
      v90 = sub_100005F78(&qword_1000A3828);
      v91 = sub_10006CC64();
      v92 = sub_10006CD9C();
      _ConditionalContent<>.init(storage:)(v76, v110, v90, v91, v92);
      v93 = sub_100005F78(&qword_1000A3808);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v39, 0, 1, v93);
    }
  }
}

uint64_t sub_10006CB6C()
{
  uint64_t result;

  result = static HierarchicalShapeStyle.secondary.getter();
  dword_1000A3728 = result;
  return result;
}

uint64_t sub_10006CB88()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for BlendMode(0);
  sub_10000C090(v0, qword_1000A3730);
  v1 = sub_10000BE14(v0, (uint64_t)qword_1000A3730);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for BlendMode.plusLighter(_:), v0);
}

void sub_10006CBE0()
{
  qword_1000A3748 = static Font.Weight.semibold.getter();
}

uint64_t sub_10006CC00(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100005FC0(a2);
    sub_100056640();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006CC64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3830;
  if (!qword_1000A3830)
  {
    v1 = sub_100005FC0(&qword_1000A3800);
    sub_10006CCE0();
    sub_10006CD5C(&qword_1000A20C0, &qword_1000A1078);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3830);
  }
  return result;
}

unint64_t sub_10006CCE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3838;
  if (!qword_1000A3838)
  {
    v1 = sub_100005FC0(&qword_1000A37F8);
    sub_10004B0C4();
    sub_10006CD5C(&qword_1000A1058, &qword_1000A1060);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3838);
  }
  return result;
}

uint64_t sub_10006CD5C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100005FC0(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006CD9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3840;
  if (!qword_1000A3840)
  {
    v1 = sub_100005FC0(&qword_1000A3828);
    sub_10006CC00((unint64_t *)&qword_1000A3820, &qword_1000A3818);
    sub_10006CC00(&qword_1000A2C40, &qword_1000A2C48);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3840);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LabelView.PlaceholderStyle(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LabelView.PlaceholderStyle(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for LabelView.PlaceholderStyle()
{
  return &type metadata for LabelView.PlaceholderStyle;
}

unint64_t sub_10006CEA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3848;
  if (!qword_1000A3848)
  {
    v1 = sub_100005FC0(&qword_1000A37F0);
    sub_10006CF0C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3848);
  }
  return result;
}

unint64_t sub_10006CF0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3850;
  if (!qword_1000A3850)
  {
    v1 = sub_100005FC0(&qword_1000A3808);
    sub_10006CC64();
    sub_10006CD9C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3850);
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelView.PlaceholderStyle.WidthStyle()
{
  return &type metadata for LabelView.PlaceholderStyle.WidthStyle;
}

uint64_t *sub_10006CF88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100005F78(&qword_1000A09A0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = (uint64_t)v15;
    v16 = v15;
  }
  return a1;
}

void sub_10006D064(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }

}

uint64_t *sub_10006D0D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v6 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = *(void **)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = (uint64_t)v13;
  v14 = v13;
  return a1;
}

uint64_t *sub_10006D184(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;

  if (a1 != a2)
  {
    sub_100007A0C((uint64_t)a1, &qword_1000A09A0);
    v6 = sub_100005F78(&qword_1000A09A0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = *(void **)((char *)a1 + v12);
  v14 = *(void **)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = (uint64_t)v14;
  v15 = v14;

  return a1;
}

char *sub_10006D254(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_10006D2FC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  if (a1 != a2)
  {
    sub_100007A0C((uint64_t)a1, &qword_1000A09A0);
    v6 = sub_100005F78(&qword_1000A09A0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = *(void **)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];

  return a1;
}

uint64_t sub_10006D3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006D3D0);
}

uint64_t sub_10006D3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_100005F78(&qword_1000A0FA8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_10006D45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006D468);
}

uint64_t sub_10006D468(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100005F78(&qword_1000A0FA8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for BackgroundView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000A38B0;
  if (!qword_1000A38B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BackgroundView);
  return result;
}

void sub_10006D520(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_1000375AC(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_10006D590(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100084AE8, 1);
}

uint64_t sub_10006D5A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v31[1] = a1;
  v32 = sub_100005F78(&qword_1000A3900);
  __chkstk_darwin(v32);
  v3 = (char *)v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005F78(&qword_1000A3908);
  __chkstk_darwin(v4);
  v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Image.ResizingMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005F78(&qword_1000A3910);
  __chkstk_darwin(v11);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)(v1 + *(int *)(type metadata accessor for BackgroundView(0) + 20));
  if (v14)
  {
    v15 = v14;
    v16 = Image.init(uiImage:)();
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Image.ResizingMode.stretch(_:), v7);
    v17 = Image.resizable(capInsets:resizingMode:)(v10, v16, 0.0, 0.0, 0.0, 0.0);
    swift_release(v16);
    v18 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v19 = static SafeAreaRegions.all.getter(v18);
    v20 = static Edge.Set.all.getter(v19);
    v33 = v17;
    v34 = v19;
    v35 = v20;
    v21 = sub_100005F78(&qword_1000A3930);
    v22 = sub_10006DAD0();
    View.accessibility(hidden:)(1, v21, v22);
    swift_release(v17);
    sub_1000079C8((uint64_t)v13, (uint64_t)v6, &qword_1000A3910);
    swift_storeEnumTagMultiPayload(v6, v4, 0);
    v23 = sub_10006DB34(&qword_1000A3920, &qword_1000A3910, (void (*)(void))sub_10006DAD0);
    v24 = sub_10006DB34(&qword_1000A3938, &qword_1000A3900, (void (*)(void))sub_10006DA8C);
    _ConditionalContent<>.init(storage:)(v6, v11, v32, v23, v24);

    v25 = (uint64_t)v13;
    v26 = &qword_1000A3910;
  }
  else
  {
    v27 = sub_10006DA8C();
    View.accessibility(hidden:)(1, &type metadata for AppIconBackgroundView, v27);
    sub_1000079C8((uint64_t)v3, (uint64_t)v6, &qword_1000A3900);
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    v28 = sub_10006DB34(&qword_1000A3920, &qword_1000A3910, (void (*)(void))sub_10006DAD0);
    v29 = sub_10006DB34(&qword_1000A3938, &qword_1000A3900, (void (*)(void))sub_10006DA8C);
    _ConditionalContent<>.init(storage:)(v6, v11, v32, v28, v29);
    v25 = (uint64_t)v3;
    v26 = &qword_1000A3900;
  }
  return sub_100007A0C(v25, v26);
}

uint64_t sub_10006D8C4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v2 = type metadata accessor for WidgetRenderingMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v21 - v7;
  v9 = sub_100005F78(&qword_1000A38E8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a1 = static Alignment.center.getter(v10);
  a1[1] = v13;
  v14 = sub_100024FCC(v8);
  static WidgetRenderingMode.fullColor.getter(v14);
  v15 = static WidgetRenderingMode.== infix(_:_:)(v8, v6);
  v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v6, v2);
  v16(v8, v2);
  if ((v15 & 1) != 0)
  {
    sub_10006D5A0((uint64_t)v12);
    v17 = sub_100005F78(&qword_1000A38F0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v12, 0, 1, v17);
  }
  else
  {
    v18 = sub_100005F78(&qword_1000A38F0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v12, 1, 1, v18);
  }
  v19 = sub_100005F78(&qword_1000A38F8);
  return sub_10006DA44((uint64_t)v12, (uint64_t)a1 + *(int *)(v19 + 44));
}

uint64_t sub_10006DA44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F78(&qword_1000A38E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10006DA8C()
{
  unint64_t result;

  result = qword_1000A3918;
  if (!qword_1000A3918)
  {
    result = swift_getWitnessTable(&unk_1000818C8, &type metadata for AppIconBackgroundView);
    atomic_store(result, (unint64_t *)&qword_1000A3918);
  }
  return result;
}

unint64_t sub_10006DAD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3928;
  if (!qword_1000A3928)
  {
    v1 = sub_100005FC0(&qword_1000A3930);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3928);
  }
  return result;
}

uint64_t sub_10006DB34(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005FC0(a2);
    a3();
    sub_10001FFC8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006DBA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3940;
  if (!qword_1000A3940)
  {
    v1 = sub_100005FC0(&qword_1000A3948);
    result = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3940);
  }
  return result;
}

uint64_t sub_10006DBF0@<X0>(_OWORD *a1@<X8>)
{
  int *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  *a1 = xmmword_10007FE50;
  v2 = (int *)type metadata accessor for MediumOneBookView.ViewConfiguration(0);
  v3 = (char *)a1 + v2[6];
  v4 = enum case for BlendMode.plusLighter(_:);
  v5 = type metadata accessor for BlendMode(0);
  v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v3, v4, v5);
  v7 = (_QWORD *)((char *)a1 + v2[7]);
  *v7 = 0x69662E656D616C66;
  v7[1] = 0xEA00000000006C6CLL;
  v8 = v2[8];
  *(double *)((char *)a1 + v8) = static Font.Weight.semibold.getter(v6);
  v9 = v2[9];
  *(_QWORD *)((char *)a1 + v9) = static Color.white.getter();
  *(_QWORD *)((char *)a1 + v2[10]) = 2;
  v10 = v2[11];
  *(_QWORD *)((char *)a1 + v10) = static Color.white.getter();
  v11 = v2[12];
  v12 = static Color.white.getter();
  v13 = Color.opacity(_:)(0.2);
  swift_release(v12);
  *(_QWORD *)((char *)a1 + v11) = v13;
  v14 = (_QWORD *)((char *)a1 + v2[13]);
  *v14 = 0xD000000000000015;
  v14[1] = 0x800000010007C220;
  v15 = (char *)a1 + v2[14];
  v16 = sub_100005F78(&qword_1000A0A50);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  *(_QWORD *)((char *)a1 + v2[15]) = 0x4008000000000000;
  *(_QWORD *)((char *)a1 + v2[16]) = 0x402A000000000000;
  *(_QWORD *)((char *)a1 + v2[17]) = 0x4010000000000000;
  v18 = v2[18];
  result = static Font.footnote.getter(v17);
  *(_QWORD *)((char *)a1 + v18) = result;
  *(_QWORD *)((char *)a1 + v2[19]) = 0x4018000000000000;
  *(_QWORD *)((char *)a1 + v2[20]) = 0x4040000000000000;
  *(_QWORD *)((char *)a1 + v2[21]) = 0x4059000000000000;
  return result;
}

uint64_t type metadata accessor for MediumOneBookView.ViewConfiguration(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A39A8, (uint64_t)&nominal type descriptor for MediumOneBookView.ViewConfiguration);
}

uint64_t *sub_10006DDA0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v33 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v33 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = a3[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for BlendMode(0);
    v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v61(v8, v9, v10);
    v11 = a3[7];
    v12 = a3[8];
    v13 = (uint64_t *)((char *)v4 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    *(uint64_t *)((char *)v4 + v12) = *(uint64_t *)((char *)a2 + v12);
    v16 = a3[9];
    v17 = a3[10];
    v18 = *(uint64_t *)((char *)a2 + v16);
    *(uint64_t *)((char *)v4 + v16) = v18;
    *(uint64_t *)((char *)v4 + v17) = *(uint64_t *)((char *)a2 + v17);
    v19 = a3[11];
    v20 = a3[12];
    v21 = *(uint64_t *)((char *)a2 + v19);
    *(uint64_t *)((char *)v4 + v19) = v21;
    v22 = *(uint64_t *)((char *)a2 + v20);
    *(uint64_t *)((char *)v4 + v20) = v22;
    v23 = a3[13];
    v24 = a3[14];
    v25 = (uint64_t *)((char *)v4 + v23);
    v26 = (uint64_t *)((char *)a2 + v23);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = (uint64_t *)((char *)v4 + v24);
    v29 = (uint64_t *)((char *)a2 + v24);
    swift_bridgeObjectRetain(v15);
    swift_retain(v18);
    swift_retain(v21);
    swift_retain(v22);
    swift_bridgeObjectRetain(v27);
    v30 = (int *)sub_100005F78(&qword_1000A0A50);
    v31 = *((_QWORD *)v30 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
    {
      v32 = type metadata accessor for CircularProgressView.Content(0);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v58 = v10;
      v60 = v31;
      v34 = v29[1];
      *v28 = *v29;
      v28[1] = v34;
      v35 = v30[12];
      v36 = (char *)v28 + v35;
      v37 = (_QWORD *)((char *)v29 + v35);
      v38 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v34);
      v59 = v38;
      if (swift_getEnumCaseMultiPayload(v37, v38) == 1)
      {
        v39 = *v37;
        *(_QWORD *)v36 = *v37;
        swift_retain(v39);
        v40 = 1;
      }
      else
      {
        *(_DWORD *)v36 = *(_DWORD *)v37;
        v41 = sub_100005F78(&qword_1000A18C0);
        v61(&v36[*(int *)(v41 + 48)], (char *)v37 + *(int *)(v41 + 48), v58);
        v42 = *(int *)(v41 + 64);
        v43 = &v36[v42];
        v44 = (char *)v37 + v42;
        v45 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
        v40 = 0;
      }
      swift_storeEnumTagMultiPayload(v36, v59, v40);
      v46 = v30[16];
      v47 = (char *)v28 + v46;
      v48 = (char *)v29 + v46;
      v49 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
      v50 = v30[20];
      v51 = (char *)v28 + v50;
      v52 = (char *)v29 + v50;
      v53 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
      *(_QWORD *)((char *)v28 + v30[24]) = *(_QWORD *)((char *)v29 + v30[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v60 + 56))(v28, 0, 1, v30);
    }
    v54 = a3[16];
    *(uint64_t *)((char *)v4 + a3[15]) = *(uint64_t *)((char *)a2 + a3[15]);
    *(uint64_t *)((char *)v4 + v54) = *(uint64_t *)((char *)a2 + v54);
    v55 = a3[18];
    *(uint64_t *)((char *)v4 + a3[17]) = *(uint64_t *)((char *)a2 + a3[17]);
    v33 = *(uint64_t *)((char *)a2 + v55);
    *(uint64_t *)((char *)v4 + v55) = v33;
    v56 = a3[20];
    *(uint64_t *)((char *)v4 + a3[19]) = *(uint64_t *)((char *)a2 + a3[19]);
    *(uint64_t *)((char *)v4 + v56) = *(uint64_t *)((char *)a2 + v56);
    *(uint64_t *)((char *)v4 + a3[21]) = *(uint64_t *)((char *)a2 + a3[21]);
  }
  swift_retain(v33);
  return v4;
}

uint64_t sub_10006E0B8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1 + a2[6];
  v5 = type metadata accessor for BlendMode(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_release(*(_QWORD *)(a1 + a2[9]));
  swift_release(*(_QWORD *)(a1 + a2[11]));
  swift_release(*(_QWORD *)(a1 + a2[12]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13] + 8));
  v7 = a1 + a2[14];
  v8 = (int *)sub_100005F78(&qword_1000A0A50);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v8 - 1) + 48))(v7, 1, v8))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
    v9 = (_QWORD *)(v7 + v8[12]);
    v10 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      swift_release(*v9);
    }
    else
    {
      v11 = sub_100005F78(&qword_1000A18C0);
      v6((uint64_t)v9 + *(int *)(v11 + 48), v5);
      v12 = (char *)v9 + *(int *)(v11 + 64);
      v13 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    }
    v14 = v7 + v8[16];
    v15 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    v16 = v7 + v8[20];
    v17 = type metadata accessor for Font.Design(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  }
  return swift_release(*(_QWORD *)(a1 + a2[18]));
}

_OWORD *sub_10006E25C(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for BlendMode(0);
  v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v60(v7, v8, v9);
  v10 = a3[7];
  v11 = a3[8];
  v12 = (_QWORD *)((char *)a1 + v10);
  v13 = (_QWORD *)((char *)a2 + v10);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  v15 = a3[9];
  v16 = a3[10];
  v17 = *(_QWORD *)((char *)a2 + v15);
  *(_QWORD *)((char *)a1 + v15) = v17;
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  v18 = a3[11];
  v19 = a3[12];
  v20 = *(_QWORD *)((char *)a2 + v18);
  *(_QWORD *)((char *)a1 + v18) = v20;
  v21 = *(_QWORD *)((char *)a2 + v19);
  *(_QWORD *)((char *)a1 + v19) = v21;
  v22 = a3[13];
  v23 = a3[14];
  v24 = (_QWORD *)((char *)a1 + v22);
  v25 = (_QWORD *)((char *)a2 + v22);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = (_QWORD *)((char *)a1 + v23);
  v28 = (_QWORD *)((char *)a2 + v23);
  swift_bridgeObjectRetain(v14);
  swift_retain(v17);
  swift_retain(v20);
  swift_retain(v21);
  swift_bridgeObjectRetain(v26);
  v29 = (int *)sub_100005F78(&qword_1000A0A50);
  v30 = *((_QWORD *)v29 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    v31 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v57 = v9;
    v59 = v30;
    v32 = v28[1];
    *v27 = *v28;
    v27[1] = v32;
    v33 = v29[12];
    v34 = (char *)v27 + v33;
    v35 = (_QWORD *)((char *)v28 + v33);
    v36 = type metadata accessor for CircularProgressView.ColorStyle(0);
    swift_bridgeObjectRetain(v32);
    v58 = v36;
    if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
    {
      v37 = *v35;
      *(_QWORD *)v34 = *v35;
      swift_retain(v37);
      v38 = 1;
    }
    else
    {
      *(_DWORD *)v34 = *(_DWORD *)v35;
      v39 = sub_100005F78(&qword_1000A18C0);
      v60(&v34[*(int *)(v39 + 48)], (char *)v35 + *(int *)(v39 + 48), v57);
      v40 = *(int *)(v39 + 64);
      v41 = &v34[v40];
      v42 = (char *)v35 + v40;
      v43 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
      v38 = 0;
    }
    swift_storeEnumTagMultiPayload(v34, v58, v38);
    v44 = v29[16];
    v45 = (char *)v27 + v44;
    v46 = (char *)v28 + v44;
    v47 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
    v48 = v29[20];
    v49 = (char *)v27 + v48;
    v50 = (char *)v28 + v48;
    v51 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
    *(_QWORD *)((char *)v27 + v29[24]) = *(_QWORD *)((char *)v28 + v29[24]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v59 + 56))(v27, 0, 1, v29);
  }
  v52 = a3[16];
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  *(_QWORD *)((char *)a1 + v52) = *(_QWORD *)((char *)a2 + v52);
  v53 = a3[18];
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
  v54 = *(_QWORD *)((char *)a2 + v53);
  *(_QWORD *)((char *)a1 + v53) = v54;
  v55 = a3[20];
  *(_QWORD *)((char *)a1 + a3[19]) = *(_QWORD *)((char *)a2 + a3[19]);
  *(_QWORD *)((char *)a1 + v55) = *(_QWORD *)((char *)a2 + v55);
  *(_QWORD *)((char *)a1 + a3[21]) = *(_QWORD *)((char *)a2 + a3[21]);
  swift_retain(v54);
  return a1;
}

_QWORD *sub_10006E54C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int *v33;
  uint64_t (*v34)(_QWORD *, uint64_t, int *);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for BlendMode(0);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
  v11 = a3[7];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  *v12 = *v13;
  v14 = v13[1];
  v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v16 = a3[9];
  v17 = *(_QWORD *)((char *)a2 + v16);
  v18 = *(_QWORD *)((char *)a1 + v16);
  *(_QWORD *)((char *)a1 + v16) = v17;
  swift_retain(v17);
  swift_release(v18);
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  v19 = a3[11];
  v20 = *(_QWORD *)((char *)a2 + v19);
  v21 = *(_QWORD *)((char *)a1 + v19);
  *(_QWORD *)((char *)a1 + v19) = v20;
  swift_retain(v20);
  swift_release(v21);
  v22 = a3[12];
  v23 = *(_QWORD *)((char *)a2 + v22);
  v24 = *(_QWORD *)((char *)a1 + v22);
  *(_QWORD *)((char *)a1 + v22) = v23;
  swift_retain(v23);
  swift_release(v24);
  v25 = a3[13];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  *v26 = *v27;
  v28 = v27[1];
  v29 = v26[1];
  v26[1] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v30 = a3[14];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  v33 = (int *)sub_100005F78(&qword_1000A0A50);
  v88 = *((_QWORD *)v33 - 1);
  v34 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v88 + 48);
  v35 = v34(v31, 1, v33);
  v36 = v34(v32, 1, v33);
  if (v35)
  {
    if (!v36)
    {
      v86 = v10;
      *v31 = *v32;
      v37 = v32[1];
      v31[1] = v37;
      v38 = v33[12];
      v84 = (_QWORD *)((char *)v31 + v38);
      v39 = (char *)v32 + v38;
      v40 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v37);
      v85 = v40;
      if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
      {
        v41 = *(_QWORD *)v39;
        v42 = v84;
        *v84 = *(_QWORD *)v39;
        swift_retain(v41);
        v43 = 1;
      }
      else
      {
        v42 = v84;
        *(_DWORD *)v84 = *(_DWORD *)v39;
        v53 = sub_100005F78(&qword_1000A18C0);
        (*(void (**)(char *, char *, uint64_t))(v86 + 16))((char *)v84 + *(int *)(v53 + 48), &v39[*(int *)(v53 + 48)], v9);
        v54 = *(int *)(v53 + 64);
        v55 = (char *)v84 + v54;
        v56 = &v39[v54];
        v57 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
        v43 = 0;
      }
      swift_storeEnumTagMultiPayload(v42, v85, v43);
      v58 = v33[16];
      v59 = (char *)v31 + v58;
      v60 = (char *)v32 + v58;
      v61 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v59, v60, v61);
      v62 = v33[20];
      v63 = (char *)v31 + v62;
      v64 = (char *)v32 + v62;
      v65 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v63, v64, v65);
      *(_QWORD *)((char *)v31 + v33[24]) = *(_QWORD *)((char *)v32 + v33[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v88 + 56))(v31, 0, 1, v33);
      goto LABEL_16;
    }
LABEL_7:
    v44 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_16;
  }
  if (v36)
  {
    sub_100007A0C((uint64_t)v31, &qword_1000A0A50);
    goto LABEL_7;
  }
  *v31 = *v32;
  v45 = v32[1];
  v46 = v31[1];
  v31[1] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  if (a1 != a2)
  {
    v87 = v10;
    v47 = v33[12];
    v48 = (char *)v31 + v47;
    v49 = (char *)v32 + v47;
    sub_100007A48((uint64_t)v31 + v47, type metadata accessor for CircularProgressView.ColorStyle);
    v50 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v49, v50) == 1)
    {
      v51 = *(_QWORD *)v49;
      *(_QWORD *)v48 = *(_QWORD *)v49;
      swift_retain(v51);
      v52 = 1;
    }
    else
    {
      *(_DWORD *)v48 = *(_DWORD *)v49;
      v89 = v50;
      v66 = sub_100005F78(&qword_1000A18C0);
      (*(void (**)(char *, char *, uint64_t))(v87 + 16))(&v48[*(int *)(v66 + 48)], &v49[*(int *)(v66 + 48)], v9);
      v67 = *(int *)(v66 + 64);
      v68 = &v48[v67];
      v69 = &v49[v67];
      v70 = type metadata accessor for ColorScheme(0);
      v71 = v69;
      v50 = v89;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v68, v71, v70);
      v52 = 0;
    }
    swift_storeEnumTagMultiPayload(v48, v50, v52);
  }
  v72 = v33[16];
  v73 = (char *)v31 + v72;
  v74 = (char *)v32 + v72;
  v75 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 24))(v73, v74, v75);
  v76 = v33[20];
  v77 = (char *)v31 + v76;
  v78 = (char *)v32 + v76;
  v79 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 24))(v77, v78, v79);
  *(_QWORD *)((char *)v31 + v33[24]) = *(_QWORD *)((char *)v32 + v33[24]);
LABEL_16:
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  *(_QWORD *)((char *)a1 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
  v80 = a3[18];
  v81 = *(_QWORD *)((char *)a2 + v80);
  v82 = *(_QWORD *)((char *)a1 + v80);
  *(_QWORD *)((char *)a1 + v80) = v81;
  swift_retain(v81);
  swift_release(v82);
  *(_QWORD *)((char *)a1 + a3[19]) = *(_QWORD *)((char *)a2 + a3[19]);
  *(_QWORD *)((char *)a1 + a3[20]) = *(_QWORD *)((char *)a2 + a3[20]);
  *(_QWORD *)((char *)a1 + a3[21]) = *(_QWORD *)((char *)a2 + a3[21]);
  return a1;
}

_OWORD *sub_10006EA44(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for BlendMode(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  v12 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  v13 = a3[12];
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  v14 = a3[14];
  *(_OWORD *)((char *)a1 + a3[13]) = *(_OWORD *)((char *)a2 + a3[13]);
  v15 = (_OWORD *)((char *)a1 + v14);
  v16 = (_OWORD *)((char *)a2 + v14);
  v17 = (int *)sub_100005F78(&qword_1000A0A50);
  v18 = *((_QWORD *)v17 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    v19 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    *v15 = *v16;
    v20 = v17[12];
    v40 = (_DWORD *)((char *)v15 + v20);
    v21 = (_DWORD *)((char *)v16 + v20);
    v39 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v21, v39))
    {
      memcpy(v40, v21, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      *v40 = *v21;
      v38 = sub_100005F78(&qword_1000A18C0);
      v10((char *)v40 + *(int *)(v38 + 48), (char *)v21 + *(int *)(v38 + 48), v9);
      v22 = *(int *)(v38 + 64);
      v23 = (char *)v40 + v22;
      v24 = (char *)v21 + v22;
      v25 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
      swift_storeEnumTagMultiPayload(v40, v39, 0);
    }
    v26 = v17[16];
    v27 = (char *)v15 + v26;
    v28 = (char *)v16 + v26;
    v29 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
    v30 = v17[20];
    v31 = (char *)v15 + v30;
    v32 = (char *)v16 + v30;
    v33 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
    *(_QWORD *)((char *)v15 + v17[24]) = *(_QWORD *)((char *)v16 + v17[24]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  v34 = a3[16];
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  *(_QWORD *)((char *)a1 + v34) = *(_QWORD *)((char *)a2 + v34);
  v35 = a3[18];
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
  *(_QWORD *)((char *)a1 + v35) = *(_QWORD *)((char *)a2 + v35);
  v36 = a3[20];
  *(_QWORD *)((char *)a1 + a3[19]) = *(_QWORD *)((char *)a2 + a3[19]);
  *(_QWORD *)((char *)a1 + v36) = *(_QWORD *)((char *)a2 + v36);
  *(_QWORD *)((char *)a1 + a3[21]) = *(_QWORD *)((char *)a2 + a3[21]);
  return a1;
}

_OWORD *sub_10006ECF0(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int *v31;
  uint64_t v32;
  uint64_t (*v33)(_QWORD *, uint64_t, int *);
  int v34;
  int v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for BlendMode(0);
  v78 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, char *, uint64_t))(v78 + 40))(v7, v8, v9);
  v10 = a3[7];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (uint64_t *)((char *)a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  v15 = v11[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  v16 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v17 = *(_QWORD *)((char *)a1 + v16);
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  swift_release(v17);
  v18 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  v19 = *(_QWORD *)((char *)a1 + v18);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  swift_release(v19);
  v20 = a3[12];
  v21 = *(_QWORD *)((char *)a1 + v20);
  *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)((char *)a2 + v20);
  swift_release(v21);
  v22 = a3[13];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (uint64_t *)((char *)a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  v27 = v23[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease(v27);
  v28 = a3[14];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  v31 = (int *)sub_100005F78(&qword_1000A0A50);
  v32 = *((_QWORD *)v31 - 1);
  v33 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      *(_OWORD *)v29 = *(_OWORD *)v30;
      v36 = v31[12];
      v37 = (_DWORD *)((char *)v29 + v36);
      v38 = (_DWORD *)((char *)v30 + v36);
      v76 = type metadata accessor for CircularProgressView.ColorStyle(0);
      if (swift_getEnumCaseMultiPayload(v38, v76))
      {
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
      }
      else
      {
        *v37 = *v38;
        v75 = sub_100005F78(&qword_1000A18C0);
        (*(void (**)(char *, char *, uint64_t))(v78 + 32))((char *)v37 + *(int *)(v75 + 48), (char *)v38 + *(int *)(v75 + 48), v9);
        v46 = *(int *)(v75 + 64);
        v47 = (char *)v37 + v46;
        v48 = (char *)v38 + v46;
        v49 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v47, v48, v49);
        swift_storeEnumTagMultiPayload(v37, v76, 0);
      }
      v50 = v31[16];
      v51 = (char *)v29 + v50;
      v52 = (char *)v30 + v50;
      v53 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
      v54 = v31[20];
      v55 = (char *)v29 + v54;
      v56 = (char *)v30 + v54;
      v57 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
      *(_QWORD *)((char *)v29 + v31[24]) = *(_QWORD *)((char *)v30 + v31[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_15;
    }
LABEL_7:
    v39 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_15;
  }
  if (v35)
  {
    sub_100007A0C((uint64_t)v29, &qword_1000A0A50);
    goto LABEL_7;
  }
  v40 = v30[1];
  v41 = v29[1];
  *v29 = *v30;
  v29[1] = v40;
  swift_bridgeObjectRelease(v41);
  if (a1 != a2)
  {
    v42 = v31[12];
    v43 = (_DWORD *)((char *)v29 + v42);
    v44 = (_DWORD *)((char *)v30 + v42);
    sub_100007A48((uint64_t)v29 + v42, type metadata accessor for CircularProgressView.ColorStyle);
    v45 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v44, v45))
    {
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      *v43 = *v44;
      v77 = sub_100005F78(&qword_1000A18C0);
      (*(void (**)(char *, char *, uint64_t))(v78 + 32))((char *)v43 + *(int *)(v77 + 48), (char *)v44 + *(int *)(v77 + 48), v9);
      v58 = *(int *)(v77 + 64);
      v59 = (char *)v43 + v58;
      v60 = (char *)v44 + v58;
      v61 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v59, v60, v61);
      swift_storeEnumTagMultiPayload(v43, v45, 0);
    }
  }
  v62 = v31[16];
  v63 = (char *)v29 + v62;
  v64 = (char *)v30 + v62;
  v65 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 40))(v63, v64, v65);
  v66 = v31[20];
  v67 = (char *)v29 + v66;
  v68 = (char *)v30 + v66;
  v69 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 40))(v67, v68, v69);
  *(_QWORD *)((char *)v29 + v31[24]) = *(_QWORD *)((char *)v30 + v31[24]);
LABEL_15:
  v70 = a3[16];
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  *(_QWORD *)((char *)a1 + v70) = *(_QWORD *)((char *)a2 + v70);
  v71 = a3[18];
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
  v72 = *(_QWORD *)((char *)a1 + v71);
  *(_QWORD *)((char *)a1 + v71) = *(_QWORD *)((char *)a2 + v71);
  swift_release(v72);
  v73 = a3[20];
  *(_QWORD *)((char *)a1 + a3[19]) = *(_QWORD *)((char *)a2 + a3[19]);
  *(_QWORD *)((char *)a1 + v73) = *(_QWORD *)((char *)a2 + v73);
  *(_QWORD *)((char *)a1 + a3[21]) = *(_QWORD *)((char *)a2 + a3[21]);
  return a1;
}

uint64_t sub_10006F154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006F160);
}

uint64_t sub_10006F160(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = type metadata accessor for BlendMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for CircularProgressView.Content(0);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[14];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[7] + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_10006F208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006F214);
}

uint64_t sub_10006F214(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = type metadata accessor for BlendMode(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[6];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[7] + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for CircularProgressView.Content(0);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[14];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t sub_10006F2B8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[18];

  v5[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for BlendMode(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    v5[3] = &unk_100082E58;
    v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[9] = &unk_100082E58;
    result = type metadata accessor for CircularProgressView.Content(319);
    if (v4 <= 0x3F)
    {
      v5[10] = *(_QWORD *)(result - 8) + 64;
      v5[11] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[12] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[13] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[14] = (char *)&value witness table for Builtin.NativeObject + 64;
      v5[15] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[16] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[17] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 18, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t sub_10006F384(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  id v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  void *v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  uint64_t v79;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v47 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v47 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_BYTE *)(a2 + 32);
    sub_10000BA78(*(_QWORD *)a2, v8, v9, v10, v11);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 32) = v11;
    v12 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v12;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v78 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v78;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    v13 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v13;
    v14 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v14;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v15;
    v16 = *(void **)(a2 + 152);
    v74 = v13;
    v76 = *(void **)(a2 + 160);
    *(_QWORD *)(a1 + 152) = v16;
    *(_QWORD *)(a1 + 160) = v76;
    v17 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = v17;
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    v18 = *(int *)(a3 + 28);
    v19 = a1 + v18;
    v20 = a2 + v18;
    *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
    v21 = (int *)type metadata accessor for MediumOneBookView.ViewConfiguration(0);
    v22 = v21[6];
    v71 = (char *)(v20 + v22);
    v72 = (char *)(v19 + v22);
    v23 = type metadata accessor for BlendMode(0);
    v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    v25 = v16;
    v26 = v76;
    swift_bridgeObjectRetain(v17);
    v77 = v24;
    v79 = v23;
    v24(v72, v71, v23);
    v27 = v21[7];
    v28 = (_QWORD *)(v19 + v27);
    v29 = (_QWORD *)(v20 + v27);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    *(_QWORD *)(v19 + v21[8]) = *(_QWORD *)(v20 + v21[8]);
    v31 = v21[9];
    v32 = *(_QWORD *)(v20 + v31);
    *(_QWORD *)(v19 + v31) = v32;
    *(_QWORD *)(v19 + v21[10]) = *(_QWORD *)(v20 + v21[10]);
    v33 = v21[11];
    v34 = *(_QWORD *)(v20 + v33);
    *(_QWORD *)(v19 + v33) = v34;
    v35 = v21[12];
    v36 = *(_QWORD *)(v20 + v35);
    *(_QWORD *)(v19 + v35) = v36;
    v37 = v21[13];
    v38 = (_QWORD *)(v19 + v37);
    v39 = (_QWORD *)(v20 + v37);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    v41 = v21[14];
    v42 = (void *)(v19 + v41);
    v43 = (_QWORD *)(v20 + v41);
    swift_bridgeObjectRetain(v30);
    swift_retain(v32);
    swift_retain(v34);
    swift_retain(v36);
    swift_bridgeObjectRetain(v40);
    v44 = (int *)sub_100005F78(&qword_1000A0A50);
    v45 = *((_QWORD *)v44 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v45 + 48))(v43, 1, v44))
    {
      v46 = type metadata accessor for CircularProgressView.Content(0);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      v48 = v42;
      v49 = v43[1];
      *v48 = *v43;
      v48[1] = v49;
      v50 = v44[12];
      v73 = v45;
      v75 = v48;
      v51 = (_QWORD *)((char *)v48 + v50);
      v52 = (_QWORD *)((char *)v43 + v50);
      v53 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v49);
      if (swift_getEnumCaseMultiPayload(v52, v53) == 1)
      {
        v54 = *v52;
        *v51 = *v52;
        swift_retain(v54);
        v55 = 1;
      }
      else
      {
        *(_DWORD *)v51 = *(_DWORD *)v52;
        v56 = sub_100005F78(&qword_1000A18C0);
        v77((char *)v51 + *(int *)(v56 + 48), (char *)v52 + *(int *)(v56 + 48), v79);
        v57 = *(int *)(v56 + 64);
        v58 = (char *)v51 + v57;
        v59 = (char *)v52 + v57;
        v60 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
        v55 = 0;
      }
      swift_storeEnumTagMultiPayload(v51, v53, v55);
      v61 = v44[16];
      v62 = (char *)v75 + v61;
      v63 = (char *)v43 + v61;
      v64 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v62, v63, v64);
      v65 = v44[20];
      v66 = (char *)v75 + v65;
      v67 = (char *)v43 + v65;
      v68 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
      *(_QWORD *)((char *)v75 + v44[24]) = *(_QWORD *)((char *)v43 + v44[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v73 + 56))(v75, 0, 1, v44);
    }
    *(_QWORD *)(v19 + v21[15]) = *(_QWORD *)(v20 + v21[15]);
    *(_QWORD *)(v19 + v21[16]) = *(_QWORD *)(v20 + v21[16]);
    *(_QWORD *)(v19 + v21[17]) = *(_QWORD *)(v20 + v21[17]);
    v69 = v21[18];
    v47 = *(_QWORD *)(v20 + v69);
    *(_QWORD *)(v19 + v69) = v47;
    *(_QWORD *)(v19 + v21[19]) = *(_QWORD *)(v20 + v21[19]);
    *(_QWORD *)(v19 + v21[20]) = *(_QWORD *)(v20 + v21[20]);
    *(_QWORD *)(v19 + v21[21]) = *(_QWORD *)(v20 + v21[21]);
  }
  swift_retain(v47);
  return a1;
}

uint64_t sub_10006F798(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1000075DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 144));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 176));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = (int *)type metadata accessor for MediumOneBookView.ViewConfiguration(0);
  v6 = v4 + v5[6];
  v7 = type metadata accessor for BlendMode(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v5[7] + 8));
  swift_release(*(_QWORD *)(v4 + v5[9]));
  swift_release(*(_QWORD *)(v4 + v5[11]));
  swift_release(*(_QWORD *)(v4 + v5[12]));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v5[13] + 8));
  v9 = v4 + v5[14];
  v10 = (int *)sub_100005F78(&qword_1000A0A50);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48))(v9, 1, v10))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
    v11 = (_QWORD *)(v9 + v10[12]);
    v12 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      swift_release(*v11);
    }
    else
    {
      v13 = sub_100005F78(&qword_1000A18C0);
      v8((uint64_t)v11 + *(int *)(v13 + 48), v7);
      v14 = (char *)v11 + *(int *)(v13 + 64);
      v15 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    }
    v16 = v9 + v10[16];
    v17 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
    v18 = v9 + v10[20];
    v19 = type metadata accessor for Font.Design(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  }
  return swift_release(*(_QWORD *)(v4 + v5[18]));
}

uint64_t sub_10006F99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  id v24;
  id v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  void *v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  uint64_t v78;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v7, v8, v9, v10);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v77 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v77;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v12;
  v13 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v13;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v14 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v14;
  v15 = *(void **)(a2 + 152);
  v73 = v12;
  v75 = *(void **)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v15;
  *(_QWORD *)(a1 + 160) = v75;
  v16 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v16;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v17 = *(int *)(a3 + 28);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  v20 = (int *)type metadata accessor for MediumOneBookView.ViewConfiguration(0);
  v21 = v20[6];
  v70 = (char *)(v19 + v21);
  v71 = (char *)(v18 + v21);
  v22 = type metadata accessor for BlendMode(0);
  v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  v24 = v15;
  v25 = v75;
  swift_bridgeObjectRetain(v16);
  v76 = v23;
  v78 = v22;
  v23(v71, v70, v22);
  v26 = v20[7];
  v27 = (_QWORD *)(v18 + v26);
  v28 = (_QWORD *)(v19 + v26);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  *(_QWORD *)(v18 + v20[8]) = *(_QWORD *)(v19 + v20[8]);
  v30 = v20[9];
  v31 = *(_QWORD *)(v19 + v30);
  *(_QWORD *)(v18 + v30) = v31;
  *(_QWORD *)(v18 + v20[10]) = *(_QWORD *)(v19 + v20[10]);
  v32 = v20[11];
  v33 = *(_QWORD *)(v19 + v32);
  *(_QWORD *)(v18 + v32) = v33;
  v34 = v20[12];
  v35 = *(_QWORD *)(v19 + v34);
  *(_QWORD *)(v18 + v34) = v35;
  v36 = v20[13];
  v37 = (_QWORD *)(v18 + v36);
  v38 = (_QWORD *)(v19 + v36);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  v40 = v20[14];
  v41 = (void *)(v18 + v40);
  v42 = (_QWORD *)(v19 + v40);
  swift_bridgeObjectRetain(v29);
  swift_retain(v31);
  swift_retain(v33);
  swift_retain(v35);
  swift_bridgeObjectRetain(v39);
  v43 = (int *)sub_100005F78(&qword_1000A0A50);
  v44 = *((_QWORD *)v43 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v44 + 48))(v42, 1, v43))
  {
    v45 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v46 = v41;
    v47 = v42[1];
    *v46 = *v42;
    v46[1] = v47;
    v48 = v43[12];
    v72 = v44;
    v74 = v46;
    v49 = (_QWORD *)((char *)v46 + v48);
    v50 = (_QWORD *)((char *)v42 + v48);
    v51 = type metadata accessor for CircularProgressView.ColorStyle(0);
    swift_bridgeObjectRetain(v47);
    if (swift_getEnumCaseMultiPayload(v50, v51) == 1)
    {
      v52 = *v50;
      *v49 = *v50;
      swift_retain(v52);
      v53 = 1;
    }
    else
    {
      *(_DWORD *)v49 = *(_DWORD *)v50;
      v54 = sub_100005F78(&qword_1000A18C0);
      v76((char *)v49 + *(int *)(v54 + 48), (char *)v50 + *(int *)(v54 + 48), v78);
      v55 = *(int *)(v54 + 64);
      v56 = (char *)v49 + v55;
      v57 = (char *)v50 + v55;
      v58 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
      v53 = 0;
    }
    swift_storeEnumTagMultiPayload(v49, v51, v53);
    v59 = v43[16];
    v60 = (char *)v74 + v59;
    v61 = (char *)v42 + v59;
    v62 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
    v63 = v43[20];
    v64 = (char *)v74 + v63;
    v65 = (char *)v42 + v63;
    v66 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v64, v65, v66);
    *(_QWORD *)((char *)v74 + v43[24]) = *(_QWORD *)((char *)v42 + v43[24]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v72 + 56))(v74, 0, 1, v43);
  }
  *(_QWORD *)(v18 + v20[15]) = *(_QWORD *)(v19 + v20[15]);
  *(_QWORD *)(v18 + v20[16]) = *(_QWORD *)(v19 + v20[16]);
  *(_QWORD *)(v18 + v20[17]) = *(_QWORD *)(v19 + v20[17]);
  v67 = v20[18];
  v68 = *(_QWORD *)(v19 + v67);
  *(_QWORD *)(v18 + v67) = v68;
  *(_QWORD *)(v18 + v20[19]) = *(_QWORD *)(v19 + v20[19]);
  *(_QWORD *)(v18 + v20[20]) = *(_QWORD *)(v19 + v20[20]);
  *(_QWORD *)(v18 + v20[21]) = *(_QWORD *)(v19 + v20[21]);
  swift_retain(v68);
  return a1;
}

uint64_t sub_10006FD88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  int *v64;
  uint64_t (*v65)(_QWORD *, uint64_t, int *);
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 32);
  sub_10000BA78(*(_QWORD *)a2, v7, v8, v9, v10);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  sub_1000075DC(v11, v12, v13, v14, v15);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v17 = *(_QWORD *)(a2 + 72);
  v18 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v19 = *(_QWORD *)(a2 + 96);
  v20 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v21 = *(_QWORD *)(a2 + 112);
  v22 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v23;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v24 = *(_QWORD *)(a2 + 144);
  v25 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = *(void **)(a1 + 152);
  v27 = *(void **)(a2 + 152);
  *(_QWORD *)(a1 + 152) = v27;
  v28 = v27;

  v29 = *(void **)(a2 + 160);
  v30 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v29;
  v31 = v29;

  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v32 = *(_QWORD *)(a2 + 176);
  v33 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v34 = *(int *)(a3 + 28);
  v35 = (_QWORD *)(a1 + v34);
  v36 = a2 + v34;
  *v35 = *(_QWORD *)(a2 + v34);
  v35[1] = *(_QWORD *)(a2 + v34 + 8);
  v37 = (int *)type metadata accessor for MediumOneBookView.ViewConfiguration(0);
  v38 = v37[6];
  v39 = (char *)v35 + v38;
  v40 = v36 + v38;
  v41 = type metadata accessor for BlendMode(0);
  v117 = *(_QWORD *)(v41 - 8);
  v118 = v41;
  (*(void (**)(char *, uint64_t))(v117 + 24))(v39, v40);
  v42 = v37[7];
  v43 = (_QWORD *)((char *)v35 + v42);
  v44 = (_QWORD *)(v36 + v42);
  *v43 = *v44;
  v45 = v44[1];
  v46 = v43[1];
  v43[1] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  *(_QWORD *)((char *)v35 + v37[8]) = *(_QWORD *)(v36 + v37[8]);
  v47 = v37[9];
  v48 = *(_QWORD *)(v36 + v47);
  v49 = *(_QWORD *)((char *)v35 + v47);
  *(_QWORD *)((char *)v35 + v47) = v48;
  swift_retain(v48);
  swift_release(v49);
  *(_QWORD *)((char *)v35 + v37[10]) = *(_QWORD *)(v36 + v37[10]);
  v50 = v37[11];
  v51 = *(_QWORD *)(v36 + v50);
  v52 = *(_QWORD *)((char *)v35 + v50);
  *(_QWORD *)((char *)v35 + v50) = v51;
  swift_retain(v51);
  swift_release(v52);
  v53 = v37[12];
  v54 = *(_QWORD *)(v36 + v53);
  v55 = *(_QWORD *)((char *)v35 + v53);
  *(_QWORD *)((char *)v35 + v53) = v54;
  swift_retain(v54);
  swift_release(v55);
  v56 = v37[13];
  v57 = (_QWORD *)((char *)v35 + v56);
  v58 = (_QWORD *)(v36 + v56);
  *v57 = *v58;
  v59 = v58[1];
  v60 = v57[1];
  v57[1] = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v60);
  v61 = v37[14];
  v62 = (_QWORD *)((char *)v35 + v61);
  v63 = (_QWORD *)(v36 + v61);
  v64 = (int *)sub_100005F78(&qword_1000A0A50);
  v119 = *((_QWORD *)v64 - 1);
  v65 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v119 + 48);
  v66 = v65(v62, 1, v64);
  v67 = v65(v63, 1, v64);
  if (v66)
  {
    if (!v67)
    {
      *v62 = *v63;
      v68 = v63[1];
      v62[1] = v68;
      v69 = v64[12];
      v115 = (_QWORD *)((char *)v62 + v69);
      v70 = (char *)v63 + v69;
      v71 = type metadata accessor for CircularProgressView.ColorStyle(0);
      swift_bridgeObjectRetain(v68);
      v116 = v71;
      if (swift_getEnumCaseMultiPayload(v70, v71) == 1)
      {
        v72 = *(_QWORD *)v70;
        v73 = v115;
        *v115 = *(_QWORD *)v70;
        swift_retain(v72);
        v74 = 1;
      }
      else
      {
        v73 = v115;
        *(_DWORD *)v115 = *(_DWORD *)v70;
        v84 = sub_100005F78(&qword_1000A18C0);
        (*(void (**)(char *, char *, uint64_t))(v117 + 16))((char *)v115 + *(int *)(v84 + 48), &v70[*(int *)(v84 + 48)], v118);
        v85 = *(int *)(v84 + 64);
        v86 = (char *)v115 + v85;
        v87 = &v70[v85];
        v88 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v86, v87, v88);
        v74 = 0;
      }
      swift_storeEnumTagMultiPayload(v73, v116, v74);
      v89 = v64[16];
      v90 = (char *)v62 + v89;
      v91 = (char *)v63 + v89;
      v92 = type metadata accessor for Font.TextStyle(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
      v93 = v64[20];
      v94 = (char *)v62 + v93;
      v95 = (char *)v63 + v93;
      v96 = type metadata accessor for Font.Design(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v94, v95, v96);
      *(_QWORD *)((char *)v62 + v64[24]) = *(_QWORD *)((char *)v63 + v64[24]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v119 + 56))(v62, 0, 1, v64);
      goto LABEL_16;
    }
LABEL_7:
    v75 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    goto LABEL_16;
  }
  if (v67)
  {
    sub_100007A0C((uint64_t)v62, &qword_1000A0A50);
    goto LABEL_7;
  }
  *v62 = *v63;
  v76 = v63[1];
  v77 = v62[1];
  v62[1] = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease(v77);
  if (a1 != a2)
  {
    v78 = v64[12];
    v79 = (char *)v62 + v78;
    v80 = (char *)v63 + v78;
    sub_100007A48((uint64_t)v62 + v78, type metadata accessor for CircularProgressView.ColorStyle);
    v81 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v80, v81) == 1)
    {
      v82 = *(_QWORD *)v80;
      *(_QWORD *)v79 = *(_QWORD *)v80;
      swift_retain(v82);
      v83 = 1;
    }
    else
    {
      *(_DWORD *)v79 = *(_DWORD *)v80;
      v120 = v81;
      v97 = sub_100005F78(&qword_1000A18C0);
      (*(void (**)(char *, char *, uint64_t))(v117 + 16))(&v79[*(int *)(v97 + 48)], &v80[*(int *)(v97 + 48)], v118);
      v98 = *(int *)(v97 + 64);
      v99 = &v79[v98];
      v100 = &v80[v98];
      v101 = type metadata accessor for ColorScheme(0);
      v102 = v99;
      v81 = v120;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v102, v100, v101);
      v83 = 0;
    }
    swift_storeEnumTagMultiPayload(v79, v81, v83);
  }
  v103 = v64[16];
  v104 = (char *)v62 + v103;
  v105 = (char *)v63 + v103;
  v106 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v106 - 8) + 24))(v104, v105, v106);
  v107 = v64[20];
  v108 = (char *)v62 + v107;
  v109 = (char *)v63 + v107;
  v110 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 24))(v108, v109, v110);
  *(_QWORD *)((char *)v62 + v64[24]) = *(_QWORD *)((char *)v63 + v64[24]);
LABEL_16:
  *(_QWORD *)((char *)v35 + v37[15]) = *(_QWORD *)(v36 + v37[15]);
  *(_QWORD *)((char *)v35 + v37[16]) = *(_QWORD *)(v36 + v37[16]);
  *(_QWORD *)((char *)v35 + v37[17]) = *(_QWORD *)(v36 + v37[17]);
  v111 = v37[18];
  v112 = *(_QWORD *)(v36 + v111);
  v113 = *(_QWORD *)((char *)v35 + v111);
  *(_QWORD *)((char *)v35 + v111) = v112;
  swift_retain(v112);
  swift_release(v113);
  *(_QWORD *)((char *)v35 + v37[19]) = *(_QWORD *)(v36 + v37[19]);
  *(_QWORD *)((char *)v35 + v37[20]) = *(_QWORD *)(v36 + v37[20]);
  *(_QWORD *)((char *)v35 + v37[21]) = *(_QWORD *)(v36 + v37[21]);
  return a1;
}

uint64_t sub_1000703C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *__dst;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v5 = *(_OWORD *)(a2 + 136);
  v6 = *(_OWORD *)(a2 + 152);
  v7 = *(_OWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v7;
  *(_OWORD *)(a1 + 152) = v6;
  *(_OWORD *)(a1 + 136) = v5;
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v11 = (int *)type metadata accessor for MediumOneBookView.ViewConfiguration(0);
  v12 = v11[6];
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = type metadata accessor for BlendMode(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
  v16(v13, v14, v15);
  *(_OWORD *)(v9 + v11[7]) = *(_OWORD *)(v10 + v11[7]);
  *(_QWORD *)(v9 + v11[8]) = *(_QWORD *)(v10 + v11[8]);
  *(_QWORD *)(v9 + v11[9]) = *(_QWORD *)(v10 + v11[9]);
  *(_QWORD *)(v9 + v11[10]) = *(_QWORD *)(v10 + v11[10]);
  *(_QWORD *)(v9 + v11[11]) = *(_QWORD *)(v10 + v11[11]);
  *(_QWORD *)(v9 + v11[12]) = *(_QWORD *)(v10 + v11[12]);
  *(_OWORD *)(v9 + v11[13]) = *(_OWORD *)(v10 + v11[13]);
  v17 = v11[14];
  v18 = (_OWORD *)(v9 + v17);
  v19 = (_OWORD *)(v10 + v17);
  v20 = (int *)sub_100005F78(&qword_1000A0A50);
  v21 = *((_QWORD *)v20 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
  {
    v22 = type metadata accessor for CircularProgressView.Content(0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    v23 = v20[12];
    v40 = v21;
    __dst = (_DWORD *)((char *)v18 + v23);
    v24 = (_DWORD *)((char *)v19 + v23);
    v39 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v24, v39))
    {
      memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      *__dst = *v24;
      v38 = sub_100005F78(&qword_1000A18C0);
      v16((uint64_t)__dst + *(int *)(v38 + 48), (uint64_t)v24 + *(int *)(v38 + 48), v15);
      v25 = *(int *)(v38 + 64);
      v26 = (char *)__dst + v25;
      v27 = (char *)v24 + v25;
      v28 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
      swift_storeEnumTagMultiPayload(__dst, v39, 0);
    }
    v29 = v20[16];
    v30 = (char *)v18 + v29;
    v31 = (char *)v19 + v29;
    v32 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
    v33 = v20[20];
    v34 = (char *)v18 + v33;
    v35 = (char *)v19 + v33;
    v36 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
    *(_QWORD *)((char *)v18 + v20[24]) = *(_QWORD *)((char *)v19 + v20[24]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v40 + 56))(v18, 0, 1, v20);
  }
  *(_QWORD *)(v9 + v11[15]) = *(_QWORD *)(v10 + v11[15]);
  *(_QWORD *)(v9 + v11[16]) = *(_QWORD *)(v10 + v11[16]);
  *(_QWORD *)(v9 + v11[17]) = *(_QWORD *)(v10 + v11[17]);
  *(_QWORD *)(v9 + v11[18]) = *(_QWORD *)(v10 + v11[18]);
  *(_QWORD *)(v9 + v11[19]) = *(_QWORD *)(v10 + v11[19]);
  *(_QWORD *)(v9 + v11[20]) = *(_QWORD *)(v10 + v11[20]);
  *(_QWORD *)(v9 + v11[21]) = *(_QWORD *)(v10 + v11[21]);
  return a1;
}

uint64_t sub_100070708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  int *v54;
  uint64_t (*v55)(uint64_t, uint64_t, int *);
  int v56;
  _QWORD *v57;
  int v58;
  size_t v59;
  void *v60;
  uint64_t v61;
  _DWORD *v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 32) = v6;
  sub_1000075DC(v7, v8, v9, v10, v11);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v13;
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v15;
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v17;
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v19 = *(_QWORD *)(a2 + 144);
  v20 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v19;
  swift_bridgeObjectRelease(v20);
  v21 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);

  v22 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);

  v23 = *(_QWORD *)(a2 + 176);
  v24 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v23;
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v25 = *(int *)(a3 + 28);
  v26 = a1 + v25;
  v27 = a2 + v25;
  *(_OWORD *)(a1 + v25) = *(_OWORD *)(a2 + v25);
  v28 = (int *)type metadata accessor for MediumOneBookView.ViewConfiguration(0);
  v29 = v28[6];
  v30 = v26 + v29;
  v31 = v27 + v29;
  v32 = type metadata accessor for BlendMode(0);
  v98 = *(_QWORD *)(v32 - 8);
  v99 = v32;
  (*(void (**)(uint64_t, uint64_t))(v98 + 40))(v30, v31);
  v33 = v28[7];
  v34 = (_QWORD *)(v26 + v33);
  v35 = (uint64_t *)(v27 + v33);
  v37 = *v35;
  v36 = v35[1];
  v38 = v34[1];
  *v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease(v38);
  *(_QWORD *)(v26 + v28[8]) = *(_QWORD *)(v27 + v28[8]);
  v39 = v28[9];
  v40 = *(_QWORD *)(v26 + v39);
  *(_QWORD *)(v26 + v39) = *(_QWORD *)(v27 + v39);
  swift_release(v40);
  *(_QWORD *)(v26 + v28[10]) = *(_QWORD *)(v27 + v28[10]);
  v41 = v28[11];
  v42 = *(_QWORD *)(v26 + v41);
  *(_QWORD *)(v26 + v41) = *(_QWORD *)(v27 + v41);
  swift_release(v42);
  v43 = v28[12];
  v44 = *(_QWORD *)(v26 + v43);
  *(_QWORD *)(v26 + v43) = *(_QWORD *)(v27 + v43);
  swift_release(v44);
  v45 = v28[13];
  v46 = (_QWORD *)(v26 + v45);
  v47 = (uint64_t *)(v27 + v45);
  v49 = *v47;
  v48 = v47[1];
  v50 = v46[1];
  *v46 = v49;
  v46[1] = v48;
  swift_bridgeObjectRelease(v50);
  v51 = v28[14];
  v52 = v26 + v51;
  v53 = (_QWORD *)(v27 + v51);
  v54 = (int *)sub_100005F78(&qword_1000A0A50);
  v101 = *((_QWORD *)v54 - 1);
  v104 = v52;
  v55 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v101 + 48);
  v56 = v55(v52, 1, v54);
  v57 = v53;
  v58 = v55((uint64_t)v53, 1, v54);
  if (v56)
  {
    if (v58)
    {
      v59 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for CircularProgressView.Content(0) - 8) + 64);
      v60 = (void *)v104;
LABEL_6:
      memcpy(v60, v53, v59);
      goto LABEL_16;
    }
    *(_OWORD *)v104 = *(_OWORD *)v53;
    v61 = v54[12];
    v62 = (_DWORD *)(v104 + v61);
    v63 = (_DWORD *)((char *)v57 + v61);
    v64 = type metadata accessor for CircularProgressView.ColorStyle(0);
    if (swift_getEnumCaseMultiPayload(v63, v64))
    {
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      *v62 = *v63;
      v97 = sub_100005F78(&qword_1000A18C0);
      (*(void (**)(char *, char *, uint64_t))(v98 + 32))((char *)v62 + *(int *)(v97 + 48), (char *)v63 + *(int *)(v97 + 48), v99);
      v71 = *(int *)(v97 + 64);
      v100 = (char *)v62 + v71;
      v72 = (char *)v63 + v71;
      v73 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v100, v72, v73);
      swift_storeEnumTagMultiPayload(v62, v64, 0);
    }
    v74 = v54[16];
    v75 = v104 + v74;
    v76 = (char *)v57 + v74;
    v77 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v75, v76, v77);
    v78 = v54[20];
    v79 = v104 + v78;
    v80 = (char *)v57 + v78;
    v81 = type metadata accessor for Font.Design(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 32))(v79, v80, v81);
    *(_QWORD *)(v104 + v54[24]) = *(_QWORD *)((char *)v57 + v54[24]);
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v101 + 56))(v104, 0, 1, v54);
  }
  else
  {
    if (v58)
    {
      sub_100007A0C(v104, &qword_1000A0A50);
      v59 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for CircularProgressView.Content(0) - 8) + 64);
      v60 = (void *)v104;
      goto LABEL_6;
    }
    v65 = v53[1];
    v66 = *(_QWORD *)(v104 + 8);
    *(_QWORD *)v104 = *v53;
    *(_QWORD *)(v104 + 8) = v65;
    swift_bridgeObjectRelease(v66);
    if (a1 != a2)
    {
      v67 = v54[12];
      v68 = (_DWORD *)(v104 + v67);
      v69 = (_DWORD *)((char *)v53 + v67);
      sub_100007A48(v104 + v67, type metadata accessor for CircularProgressView.ColorStyle);
      v70 = type metadata accessor for CircularProgressView.ColorStyle(0);
      if (swift_getEnumCaseMultiPayload(v69, v70))
      {
        memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
      }
      else
      {
        *v68 = *v69;
        v102 = sub_100005F78(&qword_1000A18C0);
        (*(void (**)(char *, char *, uint64_t))(v98 + 32))((char *)v68 + *(int *)(v102 + 48), (char *)v69 + *(int *)(v102 + 48), v99);
        v82 = *(int *)(v102 + 64);
        v103 = v70;
        v83 = (char *)v68 + v82;
        v84 = (char *)v69 + v82;
        v85 = type metadata accessor for ColorScheme(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v83, v84, v85);
        swift_storeEnumTagMultiPayload(v68, v103, 0);
      }
    }
    v86 = v54[16];
    v87 = v104 + v86;
    v88 = (char *)v53 + v86;
    v89 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 40))(v87, v88, v89);
    v90 = v54[20];
    v91 = v104 + v90;
    v92 = (char *)v57 + v90;
    v93 = type metadata accessor for Font.Design(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 40))(v91, v92, v93);
    *(_QWORD *)(v104 + v54[24]) = *(_QWORD *)((char *)v57 + v54[24]);
  }
LABEL_16:
  *(_QWORD *)(v26 + v28[15]) = *(_QWORD *)(v27 + v28[15]);
  *(_QWORD *)(v26 + v28[16]) = *(_QWORD *)(v27 + v28[16]);
  *(_QWORD *)(v26 + v28[17]) = *(_QWORD *)(v27 + v28[17]);
  v94 = v28[18];
  v95 = *(_QWORD *)(v26 + v94);
  *(_QWORD *)(v26 + v94) = *(_QWORD *)(v27 + v94);
  swift_release(v95);
  *(_QWORD *)(v26 + v28[19]) = *(_QWORD *)(v27 + v28[19]);
  *(_QWORD *)(v26 + v28[20]) = *(_QWORD *)(v27 + v28[20]);
  *(_QWORD *)(v26 + v28[21]) = *(_QWORD *)(v27 + v28[21]);
  return a1;
}

uint64_t sub_100070C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100070CA4);
}

uint64_t sub_100070CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 72);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for MediumOneBookView.ViewConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_100070D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100070D2C);
}

uint64_t sub_100070D2C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 72) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for MediumOneBookView.ViewConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MediumOneBookView(uint64_t a1)
{
  return sub_10000A18C(a1, qword_1000A3A78, (uint64_t)&nominal type descriptor for MediumOneBookView);
}

uint64_t sub_100070DB4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "!";
  v4[1] = L"@";
  v4[2] = &unk_100082EB8;
  result = type metadata accessor for MediumOneBookView.ViewConfiguration(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100070E3C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100084B60, 1);
}

uint64_t sub_100070E4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t OpaqueTypeConformance2;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  _QWORD v68[5];
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  char v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  char v88;
  _OWORD v89[2];
  char v90;
  _BYTE v91[56];

  v2 = v1;
  v66 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v59 = *(_QWORD *)(v3 - 8);
  v60 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005F78(&qword_1000A3AB8);
  __chkstk_darwin(v6);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005F78(&qword_1000A3AC0);
  __chkstk_darwin(v9);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005F78(&qword_1000A3AC8);
  v64 = *(_QWORD *)(v12 - 8);
  v65 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005F78(&qword_1000A3AD0);
  v16 = __chkstk_darwin(v15);
  v61 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v16);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v18 = sub_100005F78(&qword_1000A3AD8);
  sub_100071240(v1, (uint64_t)&v8[*(int *)(v18 + 44)]);
  v19 = *(_OWORD *)(v1 + 16);
  v89[0] = *(_OWORD *)v1;
  v89[1] = v19;
  v90 = *(_BYTE *)(v1 + 32);
  sub_100007984((uint64_t)v89, (uint64_t)v91, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v91, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  v20 = sub_100024DBC();
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v27 = sub_10000DBE0((uint64_t)v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v28 = static Edge.Set.all.getter(v27);
  sub_1000079C8((uint64_t)v8, (uint64_t)v11, &qword_1000A3AB8);
  v29 = &v11[*(int *)(v9 + 36)];
  *v29 = v28;
  *((double *)v29 + 1) = v20;
  *((_QWORD *)v29 + 2) = v22;
  *((_QWORD *)v29 + 3) = v24;
  *((_QWORD *)v29 + 4) = v26;
  v29[40] = 0;
  sub_100007A0C((uint64_t)v8, &qword_1000A3AB8);
  v30 = *(_OWORD *)(v2 + 152);
  v85 = *(_OWORD *)(v2 + 136);
  v86 = v30;
  v87 = *(_OWORD *)(v2 + 168);
  v88 = *(_BYTE *)(v2 + 184);
  v31 = *(_OWORD *)(v2 + 120);
  v83 = *(_OWORD *)(v2 + 104);
  v84 = v31;
  v32 = sub_100013C4C();
  if ((v32 & 1) != 0)
    static AccessibilityChildBehavior.contain.getter();
  else
    static AccessibilityChildBehavior.combine.getter(v32);
  v33 = sub_100072010();
  v62 = v9;
  v63 = v14;
  v58 = v33;
  View.accessibilityElement(children:)(v5, v9, v33);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v5, v60);
  sub_100007A0C((uint64_t)v11, &qword_1000A3AC0);
  v34 = *(_OWORD *)(v2 + 136);
  v35 = *(_OWORD *)(v2 + 168);
  v80 = *(_OWORD *)(v2 + 152);
  v81 = v35;
  v36 = *(_OWORD *)(v2 + 120);
  v77 = *(_OWORD *)(v2 + 104);
  v82 = *(_BYTE *)(v2 + 184);
  v78 = v36;
  v79 = v34;
  v38 = *(_QWORD *)(v2 + 104);
  v37 = *(_QWORD *)(v2 + 112);
  v39 = *(_QWORD *)(v2 + 120);
  v40 = *(_BYTE *)(v2 + 128);
  v42 = *(_QWORD *)(v2 + 136);
  v41 = *(_QWORD *)(v2 + 144);
  v43 = *(_QWORD *)(v2 + 152);
  v44 = *(_QWORD *)(v2 + 160);
  v59 = *(_QWORD *)(v2 + 168);
  v60 = v37;
  v57 = *(_QWORD *)(v2 + 176);
  v45 = *(_BYTE *)(v2 + 184);
  if ((sub_100013C4C() & 1) != 0)
  {
    v46 = 0;
    v47 = 0xE000000000000000;
  }
  else
  {
    v68[2] = v38;
    v68[3] = v60;
    v68[4] = v39;
    v69 = v40;
    v70 = v42;
    v71 = v41;
    v72 = v43;
    v73 = v44;
    v74 = v59;
    v75 = v57;
    v76 = v45;
    v46 = sub_100051294(0);
    v47 = v48;
  }
  v68[0] = v46;
  v68[1] = v47;
  v67[0] = v62;
  v67[1] = v58;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v67, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v50 = sub_1000075E8();
  v51 = (uint64_t)v61;
  v52 = v65;
  v53 = OpaqueTypeConformance2;
  v54 = v63;
  View.accessibilityLabel<A>(_:)(v68, v65, &type metadata for String, v53, v50);
  swift_bridgeObjectRelease(v47);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v54, v52);
  return sub_100007984(v51, v66, &qword_1000A3AD0);
}

uint64_t sub_100071240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  char v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t inited;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  _OWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  _QWORD v130[2];
  _QWORD v131[11];
  char v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  char v137;
  _OWORD v138[5];
  char v139;
  _OWORD v140[4];
  _OWORD v141[2];
  char v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  char v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  char v154;
  _OWORD v155[4];
  _BYTE v156[56];

  v127 = a2;
  v3 = sub_100005F78(&qword_1000A3AF0);
  v123 = *(_QWORD *)(v3 - 8);
  v124 = v3;
  __chkstk_darwin(v3);
  v129 = (char *)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005F78(&qword_1000A3AF8);
  v6 = __chkstk_darwin(v5);
  v126 = (uint64_t)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v122 = (char *)&v111 - v9;
  __chkstk_darwin(v8);
  v125 = (uint64_t)&v111 - v10;
  v11 = type metadata accessor for URL(0);
  v113 = *(_QWORD *)(v11 - 8);
  v114 = v11;
  v12 = __chkstk_darwin(v11);
  v120 = (uint64_t)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v111 - v14;
  v16 = (int *)type metadata accessor for BookCoverView(0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v119 = (uint64_t)&v111 - v20;
  v118 = sub_100005F78(&qword_1000A0DC0);
  v21 = __chkstk_darwin(v118);
  v121 = (uint64_t)&v111 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v117 = (uint64_t)&v111 - v24;
  __chkstk_darwin(v23);
  v128 = (uint64_t)&v111 - v25;
  v26 = *(_OWORD *)(a1 + 88);
  v27 = *(_OWORD *)(a1 + 56);
  v155[0] = *(_OWORD *)(a1 + 40);
  v155[1] = v27;
  v155[2] = *(_OWORD *)(a1 + 72);
  v155[3] = v26;
  v28 = *((_QWORD *)&v26 + 1);
  v111 = v26;
  v115 = (_OWORD *)(a1 + 40);
  v116 = a1 + 104;
  v29 = *(_OWORD *)(a1 + 152);
  v151 = *(_OWORD *)(a1 + 136);
  v152 = v29;
  v153 = *(_OWORD *)(a1 + 168);
  v154 = *(_BYTE *)(a1 + 184);
  v30 = *(_OWORD *)(a1 + 120);
  v149 = *(_OWORD *)(a1 + 104);
  v150 = v30;
  v31 = *(_OWORD *)(a1 + 120);
  v143 = *(_OWORD *)(a1 + 104);
  v144 = v31;
  v32 = v151;
  v148 = v154;
  v146 = v152;
  v147 = v153;
  v145 = v151;
  sub_100025260((uint64_t)v155);
  v112 = v15;
  sub_10000655C((uint64_t)&v149, (uint64_t)v15);
  sub_100025294((uint64_t)v155);
  v33 = sub_100013C4C();
  if (v28)
  {
    if (__PAIR128__(v28, v111) == v32)
      v34 = 1;
    else
      v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, *((_QWORD *)&v32 + 1), v111, v28, 0);
  }
  else
  {
    v34 = 0;
  }
  *(_QWORD *)v19 = swift_getKeyPath(&unk_100082F20);
  v35 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v19, v35, 0);
  (*(void (**)(char *, char *, uint64_t))(v113 + 32))(&v19[v16[5]], v112, v114);
  v19[v16[6]] = v33 & 1;
  v36 = &v19[v16[7]];
  v37 = v152;
  *((_OWORD *)v36 + 2) = v151;
  *((_OWORD *)v36 + 3) = v37;
  *((_OWORD *)v36 + 4) = v153;
  v36[80] = v154;
  v38 = v150;
  *(_OWORD *)v36 = v149;
  *((_OWORD *)v36 + 1) = v38;
  v19[v16[8]] = v34 & 1;
  v19[v16[9]] = 0;
  v39 = v119;
  sub_10000DEF8((uint64_t)v19, v119);
  v40 = sub_10000DF3C(&v149);
  v41 = static Edge.Set.trailing.getter(v40);
  v42 = *(_OWORD *)(a1 + 16);
  v141[0] = *(_OWORD *)a1;
  v141[1] = v42;
  v142 = *(_BYTE *)(a1 + 32);
  sub_100007984((uint64_t)v141, (uint64_t)v156, &qword_1000A0D20);
  sub_10000DBE0((uint64_t)v156, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000BA78);
  sub_100024DBC();
  v44 = v43;
  sub_10000DBE0((uint64_t)v141, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000075DC);
  v45 = EdgeInsets.init(_all:)(v44);
  v47 = v46;
  v49 = v48;
  v51 = v50;
  v52 = v117;
  sub_10000DF98(v39, v117);
  v53 = v52 + *(int *)(v118 + 36);
  *(_BYTE *)v53 = v41;
  *(double *)(v53 + 8) = v45;
  *(_QWORD *)(v53 + 16) = v47;
  *(_QWORD *)(v53 + 24) = v49;
  *(_QWORD *)(v53 + 32) = v51;
  *(_BYTE *)(v53 + 40) = 0;
  sub_100007A48(v39, type metadata accessor for BookCoverView);
  sub_100007984(v52, v128, &qword_1000A0DC0);
  v54 = v115[1];
  v140[0] = *v115;
  v140[1] = v54;
  v55 = v115[3];
  v140[2] = v115[2];
  v140[3] = v55;
  v56 = *(_OWORD *)(v116 + 48);
  v138[2] = *(_OWORD *)(v116 + 32);
  v138[3] = v56;
  v138[4] = *(_OWORD *)(v116 + 64);
  v139 = *(_BYTE *)(v116 + 80);
  v57 = *(_OWORD *)(v116 + 16);
  v138[0] = *(_OWORD *)v116;
  v138[1] = v57;
  sub_100025260((uint64_t)v140);
  v58 = v120;
  sub_10000655C((uint64_t)v138, v120);
  v59 = sub_100025294((uint64_t)v140);
  __chkstk_darwin(v59);
  *(&v111 - 2) = a1;
  v60 = sub_100005F78(&qword_1000A3B00);
  v61 = sub_100007F64(&qword_1000A3B08, &qword_1000A3B00, (uint64_t)&protocol conformance descriptor for VStack<A>);
  Link.init(destination:label:)(v58, sub_10007209C, &v111 - 4, v60, v61);
  v62 = sub_100005F78(&qword_1000A0DD0);
  inited = swift_initStackObject(v62, v131);
  *(_OWORD *)(inited + 16) = xmmword_10007F170;
  v65 = *(_QWORD *)(a1 + 104);
  v64 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(inited + 32) = v65;
  *(_QWORD *)(inited + 40) = v64;
  v66 = *(_QWORD *)(a1 + 120);
  v67 = *(_BYTE *)(a1 + 128);
  v68 = *(_OWORD *)(a1 + 136);
  v69 = *(_QWORD *)(a1 + 152);
  v70 = *(_QWORD *)(a1 + 160);
  v71 = *(_BYTE *)(a1 + 184);
  v131[8] = v65;
  v131[9] = v64;
  v131[10] = v66;
  v132 = v67;
  v133 = v68;
  v134 = v69;
  v135 = v70;
  v136 = *(_OWORD *)(a1 + 168);
  v137 = v71;
  swift_bridgeObjectRetain(v64);
  v73 = sub_100051468(0);
  v74 = v72;
  *(_QWORD *)(inited + 48) = v73;
  *(_QWORD *)(inited + 56) = v72;
  if (!v64)
  {
    v75 = (char *)_swiftEmptyArrayStorage;
    if (!v72)
      goto LABEL_17;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain(v64);
  v75 = sub_1000408F8(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v77 = *((_QWORD *)v75 + 2);
  v76 = *((_QWORD *)v75 + 3);
  if (v77 >= v76 >> 1)
    v75 = sub_1000408F8((char *)(v76 > 1), v77 + 1, 1, v75);
  *((_QWORD *)v75 + 2) = v77 + 1;
  v78 = &v75[16 * v77];
  *((_QWORD *)v78 + 4) = v65;
  *((_QWORD *)v78 + 5) = v64;
  if (v74)
  {
LABEL_12:
    swift_bridgeObjectRetain(v74);
    if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0)
      v75 = sub_1000408F8(0, *((_QWORD *)v75 + 2) + 1, 1, v75);
    v80 = *((_QWORD *)v75 + 2);
    v79 = *((_QWORD *)v75 + 3);
    if (v80 >= v79 >> 1)
      v75 = sub_1000408F8((char *)(v79 > 1), v80 + 1, 1, v75);
    *((_QWORD *)v75 + 2) = v80 + 1;
    v81 = &v75[16 * v80];
    *((_QWORD *)v81 + 4) = v73;
    *((_QWORD *)v81 + 5) = v74;
  }
LABEL_17:
  swift_release(inited);
  v82 = *((_QWORD *)v75 + 2);
  if (v82)
  {
    v83 = v75 + 40;
    v84 = _swiftEmptyArrayStorage;
    do
    {
      v89 = *(v83 - 1);
      v88 = *v83;
      v90 = HIBYTE(*v83) & 0xFLL;
      if ((*v83 & 0x2000000000000000) == 0)
        v90 = v89 & 0xFFFFFFFFFFFFLL;
      if (v90)
      {
        swift_bridgeObjectRetain(*v83);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v84);
        v130[0] = v84;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10005C3B8(0, v84[2] + 1, 1);
          v84 = (_QWORD *)v130[0];
        }
        v86 = v84[2];
        v85 = v84[3];
        if (v86 >= v85 >> 1)
        {
          sub_10005C3B8(v85 > 1, v86 + 1, 1);
          v84 = (_QWORD *)v130[0];
        }
        v84[2] = v86 + 1;
        v87 = &v84[2 * v86];
        v87[4] = v89;
        v87[5] = v88;
      }
      v83 += 2;
      --v82;
    }
    while (v82);
  }
  else
  {
    v84 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v75);
  v130[0] = v84;
  v92 = sub_100005F78(&qword_1000A0DD8);
  v93 = sub_100007F64(&qword_1000A0DE0, &qword_1000A0DD8, (uint64_t)&protocol conformance descriptor for [A]);
  v94 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v92, v93);
  v96 = v95;
  swift_release(v84);
  v130[0] = v94;
  v130[1] = v96;
  v97 = sub_100007F64(&qword_1000A3B10, &qword_1000A3AF0, (uint64_t)&protocol conformance descriptor for Link<A>);
  v98 = sub_1000075E8();
  v99 = (uint64_t)v122;
  v100 = v124;
  v101 = v97;
  v102 = v129;
  View.accessibilityLabel<A>(_:)(v130, v124, &type metadata for String, v101, v98);
  swift_bridgeObjectRelease(v96);
  (*(void (**)(char *, uint64_t))(v123 + 8))(v102, v100);
  v103 = v125;
  sub_100007984(v99, v125, &qword_1000A3AF8);
  v104 = v128;
  v105 = v121;
  sub_1000079C8(v128, v121, &qword_1000A0DC0);
  v106 = v126;
  sub_1000079C8(v103, v126, &qword_1000A3AF8);
  v107 = v127;
  sub_1000079C8(v105, v127, &qword_1000A0DC0);
  v108 = sub_100005F78(&qword_1000A3B18);
  sub_1000079C8(v106, v107 + *(int *)(v108 + 48), &qword_1000A3AF8);
  v109 = v107 + *(int *)(v108 + 64);
  *(_QWORD *)v109 = 0;
  *(_BYTE *)(v109 + 8) = 1;
  sub_100007A0C(v103, &qword_1000A3AF8);
  sub_100007A0C(v104, &qword_1000A0DC0);
  sub_100007A0C(v106, &qword_1000A3AF8);
  return sub_100007A0C(v105, &qword_1000A0DC0);
}

uint64_t sub_100071B78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = sub_100005F78(&qword_1000A3B20);
  return sub_100071BC0(a1, a2 + *(int *)(v4 + 44));
}

uint64_t sub_100071BC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  int *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  _BYTE v59[4];
  int v60;
  __int128 v61;
  int v62;
  _BYTE *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char v80;
  char v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char v92;
  _QWORD v93[2];
  char v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  __int128 v106;
  char v107;

  v67 = sub_100005F78(&qword_1000A3B28);
  __chkstk_darwin(v67);
  v5 = &v59[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100005F78(&qword_1000A3B30);
  v7 = __chkstk_darwin(v6);
  v63 = &v59[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v68 = &v59[-v9];
  v10 = *(_QWORD *)(a1 + 104);
  v65 = *(_QWORD *)(a1 + 112);
  v66 = v10;
  v11 = swift_bridgeObjectRetain(v65);
  v64 = static Edge.Set.bottom.getter(v11);
  v12 = (double *)(a1 + *(int *)(type metadata accessor for MediumOneBookView(0) + 28));
  v13 = (int *)type metadata accessor for MediumOneBookView.ViewConfiguration(0);
  v14 = EdgeInsets.init(_all:)(*(double *)((char *)v12 + v13[17]));
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v62 = static Edge.Set.trailing.getter(v21);
  v22 = EdgeInsets.init(_all:)(*v12 + v12[1]);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  *((double *)&v61 + 1) = *(double *)((char *)v12 + v13[10]);
  *(_QWORD *)&v61 = swift_getKeyPath(&unk_100082F50);
  v83 = 0;
  v82 = 0;
  v81 = 0;
  *(_QWORD *)v5 = static VerticalAlignment.center.getter(v61);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 0;
  v29 = &v5[*(int *)(sub_100005F78(&qword_1000A3B38) + 44)];
  v30 = *(_OWORD *)(a1 + 152);
  v77 = *(_OWORD *)(a1 + 136);
  v78 = v30;
  v79 = *(_OWORD *)(a1 + 168);
  v80 = *(_BYTE *)(a1 + 184);
  v31 = *(_OWORD *)(a1 + 120);
  v75 = *(_OWORD *)(a1 + 104);
  v76 = v31;
  v32 = sub_100051468(0);
  v34 = v33;
  v35 = *(_QWORD *)((char *)v12 + v13[18]);
  swift_retain(v35);
  v37 = static HierarchicalShapeStyle.secondary.getter(v36);
  v38 = *(_QWORD *)((char *)v12 + v13[21]);
  v39 = v37;
  *v29 = swift_getKeyPath(&unk_100082F20);
  v40 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v29, v40, 0);
  v41 = (int *)type metadata accessor for LabelView(0);
  v42 = (_QWORD *)((char *)v29 + v41[5]);
  *v42 = v32;
  v42[1] = v34;
  *(_QWORD *)((char *)v29 + v41[6]) = v35;
  v43 = (char *)v29 + v41[7];
  *(_QWORD *)v43 = v39;
  *((_QWORD *)v43 + 1) = v38;
  *((_WORD *)v43 + 8) = 0;
  v44 = *(_OWORD *)(a1 + 104);
  v45 = *(_OWORD *)(a1 + 152);
  v71 = *(_OWORD *)(a1 + 136);
  v72 = v45;
  v73 = *(_OWORD *)(a1 + 168);
  v74 = *(_BYTE *)(a1 + 184);
  v46 = *(_OWORD *)(a1 + 120);
  v69 = v44;
  v70 = v46;
  LOBYTE(v32) = sub_100013C4C();
  v47 = sub_100007F64(&qword_1000A3B40, &qword_1000A3B28, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v48 = (uint64_t)v63;
  View.accessibilityHidden(_:)((v32 & 1) == 0, v67, v47);
  sub_100007A0C((uint64_t)v5, &qword_1000A3B28);
  v49 = v68;
  sub_100007984(v48, (uint64_t)v68, &qword_1000A3B30);
  LOBYTE(v38) = v83;
  v60 = v83;
  LOBYTE(v5) = v82;
  LODWORD(v67) = v82;
  LOBYTE(v32) = v81;
  sub_1000079C8((uint64_t)v49, v48, &qword_1000A3B30);
  v51 = v65;
  v50 = v66;
  *(_QWORD *)&v84 = v66;
  *((_QWORD *)&v84 + 1) = v65;
  LOBYTE(v34) = v64;
  LOBYTE(v85) = v64;
  *((double *)&v85 + 1) = v14;
  *(_QWORD *)&v86 = v16;
  *((_QWORD *)&v86 + 1) = v18;
  *(_QWORD *)&v87 = v20;
  BYTE8(v87) = v38;
  LOBYTE(v39) = v62;
  LOBYTE(v88) = v62;
  *((double *)&v88 + 1) = v22;
  *(_QWORD *)&v89 = v24;
  *((_QWORD *)&v89 + 1) = v26;
  *(_QWORD *)&v90 = v28;
  BYTE8(v90) = (_BYTE)v5;
  v52 = v61;
  v91 = v61;
  v92 = v32;
  *(_BYTE *)(a2 + 128) = v32;
  v53 = v87;
  *(_OWORD *)(a2 + 32) = v86;
  *(_OWORD *)(a2 + 48) = v53;
  v54 = v91;
  *(_OWORD *)(a2 + 96) = v90;
  *(_OWORD *)(a2 + 112) = v54;
  v55 = v89;
  *(_OWORD *)(a2 + 64) = v88;
  *(_OWORD *)(a2 + 80) = v55;
  v56 = v85;
  *(_OWORD *)a2 = v84;
  *(_OWORD *)(a2 + 16) = v56;
  v57 = sub_100005F78(&qword_1000A3B48);
  sub_1000079C8(v48, a2 + *(int *)(v57 + 48), &qword_1000A3B30);
  sub_1000720AC((uint64_t)&v84);
  sub_100007A0C((uint64_t)v68, &qword_1000A3B30);
  sub_100007A0C(v48, &qword_1000A3B30);
  v93[0] = v50;
  v93[1] = v51;
  v94 = v34;
  v95 = v14;
  v96 = v16;
  v97 = v18;
  v98 = v20;
  v99 = v60;
  v100 = v39;
  v101 = v22;
  v102 = v24;
  v103 = v26;
  v104 = v28;
  v105 = v67;
  v106 = v52;
  v107 = v32;
  return sub_1000720E0((uint64_t)v93);
}

unint64_t sub_100072010()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3AE0;
  if (!qword_1000A3AE0)
  {
    v1 = sub_100005FC0(&qword_1000A3AC0);
    sub_100007F64(&qword_1000A3AE8, &qword_1000A3AB8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3AE0);
  }
  return result;
}

uint64_t sub_10007209C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100071B78(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000720AC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 112);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  swift_retain(v2);
  return a1;
}

uint64_t sub_1000720E0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  swift_release(*(_QWORD *)(a1 + 112));
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_100072118()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000A3B50;
  if (!qword_1000A3B50)
  {
    v1 = sub_100005FC0(&qword_1000A3AD0);
    v2[0] = sub_100005FC0(&qword_1000A3AC0);
    v2[1] = sub_100072010();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10001FFC8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3B50);
  }
  return result;
}

_QWORD *sub_1000721AC(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100005F78(&qword_1000A09A0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
    v19[24] = v20[24];
    v22 = *((_QWORD *)v20 + 5);
    *((_QWORD *)v19 + 4) = *((_QWORD *)v20 + 4);
    *((_QWORD *)v19 + 5) = v22;
    v23 = (void *)*((_QWORD *)v20 + 6);
    v24 = (void *)*((_QWORD *)v20 + 7);
    *((_QWORD *)v19 + 6) = v23;
    *((_QWORD *)v19 + 7) = v24;
    v25 = *((_QWORD *)v20 + 9);
    *((_QWORD *)v19 + 8) = *((_QWORD *)v20 + 8);
    *((_QWORD *)v19 + 9) = v25;
    v19[80] = v20[80];
    v26 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)a1 + v26) = *((_BYTE *)a2 + v26);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    v27 = v23;
    v28 = v24;
    swift_bridgeObjectRetain(v25);
  }
  return a1;
}

uint64_t sub_100072330(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;

  v4 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (char *)a1 + *(int *)(a2 + 28);
  swift_bridgeObjectRelease(*((_QWORD *)v8 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v8 + 5));

  return swift_bridgeObjectRelease(*((_QWORD *)v8 + 9));
}

_QWORD *sub_1000723F0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;

  v6 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = v19;
  *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
  v17[24] = v18[24];
  v20 = *((_QWORD *)v18 + 5);
  *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
  *((_QWORD *)v17 + 5) = v20;
  v21 = (void *)*((_QWORD *)v18 + 6);
  v22 = (void *)*((_QWORD *)v18 + 7);
  *((_QWORD *)v17 + 6) = v21;
  *((_QWORD *)v17 + 7) = v22;
  v23 = *((_QWORD *)v18 + 9);
  *((_QWORD *)v17 + 8) = *((_QWORD *)v18 + 8);
  *((_QWORD *)v17 + 9) = v23;
  v17[80] = v18[80];
  v24 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v24) = *((_BYTE *)a2 + v24);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  v25 = v21;
  v26 = v22;
  swift_bridgeObjectRetain(v23);
  return a1;
}

_QWORD *sub_100072548(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;

  if (a1 != a2)
  {
    sub_100007A0C((uint64_t)a1, &qword_1000A09A0);
    v6 = sub_100005F78(&qword_1000A09A0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)((char *)a2 + v16);
  v19 = *(_QWORD *)((char *)a2 + v16 + 8);
  v20 = *(_QWORD *)((char *)a1 + v16 + 8);
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = *((_QWORD *)v18 + 2);
  v17[24] = v18[24];
  *((_QWORD *)v17 + 2) = v21;
  *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
  v22 = *((_QWORD *)v18 + 5);
  v23 = *((_QWORD *)v17 + 5);
  *((_QWORD *)v17 + 5) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = (void *)*((_QWORD *)v17 + 6);
  v25 = (void *)*((_QWORD *)v18 + 6);
  *((_QWORD *)v17 + 6) = v25;
  v26 = v25;

  v27 = (void *)*((_QWORD *)v18 + 7);
  v28 = (void *)*((_QWORD *)v17 + 7);
  *((_QWORD *)v17 + 7) = v27;
  v29 = v27;

  *((_QWORD *)v17 + 8) = *((_QWORD *)v18 + 8);
  v30 = *((_QWORD *)v18 + 9);
  v31 = *((_QWORD *)v17 + 9);
  *((_QWORD *)v17 + 9) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v17[80] = v18[80];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

char *sub_100072704(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v6 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  v13[80] = v14[80];
  v16 = *((_OWORD *)v14 + 4);
  v17 = *((_OWORD *)v14 + 2);
  *((_OWORD *)v13 + 3) = *((_OWORD *)v14 + 3);
  *((_OWORD *)v13 + 4) = v16;
  *((_OWORD *)v13 + 2) = v17;
  v18 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v18] = a2[v18];
  return a1;
}

char *sub_10007281C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a1 != a2)
  {
    sub_100007A0C((uint64_t)a1, &qword_1000A09A0);
    v6 = sub_100005F78(&qword_1000A09A0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(_QWORD *)&a2[v12];
  v16 = *(_QWORD *)&a2[v12 + 8];
  v17 = *((_QWORD *)v13 + 1);
  *(_QWORD *)v13 = v15;
  *((_QWORD *)v13 + 1) = v16;
  swift_bridgeObjectRelease(v17);
  *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
  v13[24] = v14[24];
  v18 = *((_QWORD *)v14 + 5);
  v19 = *((_QWORD *)v13 + 5);
  *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
  *((_QWORD *)v13 + 5) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = (void *)*((_QWORD *)v13 + 6);
  *((_QWORD *)v13 + 6) = *((_QWORD *)v14 + 6);

  v21 = (void *)*((_QWORD *)v13 + 7);
  *((_QWORD *)v13 + 7) = *((_QWORD *)v14 + 7);

  v22 = *((_QWORD *)v14 + 9);
  v23 = *((_QWORD *)v13 + 9);
  *((_QWORD *)v13 + 8) = *((_QWORD *)v14 + 8);
  *((_QWORD *)v13 + 9) = v22;
  swift_bridgeObjectRelease(v23);
  v13[80] = v14[80];
  v24 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v24] = a2[v24];
  return a1;
}

uint64_t sub_100072994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000729A0);
}

uint64_t sub_1000729A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_100005F78(&qword_1000A0FA8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 40);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100072A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100072A5C);
}

uint64_t sub_100072A5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_100005F78(&qword_1000A0FA8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 40) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for BookCoverView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000A3BB0;
  if (!qword_1000A3BB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BookCoverView);
  return result;
}

void sub_100072B44(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  sub_1000375AC(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for URL(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_100082F98;
      v6[3] = &unk_100082FB0;
      v6[4] = &unk_100082F98;
      v6[5] = &unk_100082F98;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

uint64_t sub_100072BE0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100084BB0, 1);
}

uint64_t sub_100072BF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v56 = a2;
  v57 = sub_100005F78(&qword_1000A3C58);
  v50 = *(uint64_t **)(v57 - 8);
  __chkstk_darwin(v57);
  v49 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005F78(&qword_1000A3C48);
  v52 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  __chkstk_darwin(v8);
  v51 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100005F78(&qword_1000A3C60);
  __chkstk_darwin(v54);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005F78(&qword_1000A3C68);
  __chkstk_darwin(v12);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100005F78(&qword_1000A3C28);
  __chkstk_darwin(v55);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100005F78(&qword_1000A3C38);
  __chkstk_darwin(v17);
  v19 = (uint64_t *)((char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = sub_1000731D8();
  if ((_BYTE)v20)
  {
    if (v20 == 1)
    {
      v21 = type metadata accessor for BookCoverView(0);
      v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + *(int *)(v21 + 20), v4);
      v50 = &v48;
      __chkstk_darwin(v22);
      *(&v48 - 2) = a1;
      v23 = sub_100005F78(&qword_1000A3CB0);
      v24 = sub_100076940(&qword_1000A3CB8, &qword_1000A3CB0, &qword_1000A3CC0, &qword_1000A3CC8);
      v25 = v51;
      Link.init(destination:label:)(v7, sub_100076938, &v48 - 4, v23, v24);
      v27 = v52;
      v26 = v53;
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v14, v25, v53);
      swift_storeEnumTagMultiPayload(v14, v12, 1);
      v28 = sub_100007F64(&qword_1000A3C30, &qword_1000A3C38, (uint64_t)&protocol conformance descriptor for ZStack<A>);
      v29 = sub_100007F64(&qword_1000A3C40, &qword_1000A3C48, (uint64_t)&protocol conformance descriptor for Link<A>);
      _ConditionalContent<>.init(storage:)(v14, v17, v26, v28, v29);
      sub_1000079C8((uint64_t)v16, (uint64_t)v11, &qword_1000A3C28);
      swift_storeEnumTagMultiPayload(v11, v54, 0);
      v30 = sub_100076810();
      v31 = sub_100007F64(&qword_1000A3C50, &qword_1000A3C58, (uint64_t)&protocol conformance descriptor for Link<A>);
      _ConditionalContent<>.init(storage:)(v11, v55, v57, v30, v31);
      sub_100007A0C((uint64_t)v16, &qword_1000A3C28);
      return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v25, v26);
    }
    else
    {
      v39 = type metadata accessor for BookCoverView(0);
      v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + *(int *)(v39 + 20), v4);
      __chkstk_darwin(v40);
      *(&v48 - 2) = a1;
      v41 = sub_100005F78(&qword_1000A3C70);
      v42 = sub_100076940(&qword_1000A3C78, &qword_1000A3C70, &qword_1000A3CA0, &qword_1000A3CA8);
      v43 = v49;
      Link.init(destination:label:)(v7, sub_1000768AC, &v48 - 4, v41, v42);
      v44 = v50;
      v45 = v57;
      ((void (*)(char *, char *, uint64_t))v50[2])(v11, v43, v57);
      swift_storeEnumTagMultiPayload(v11, v54, 1);
      v46 = sub_100076810();
      v47 = sub_100007F64(&qword_1000A3C50, &qword_1000A3C58, (uint64_t)&protocol conformance descriptor for Link<A>);
      _ConditionalContent<>.init(storage:)(v11, v55, v45, v46, v47);
      return ((uint64_t (*)(char *, uint64_t))v44[1])(v43, v45);
    }
  }
  else
  {
    *v19 = static Alignment.center.getter(v20);
    v19[1] = v33;
    v34 = sub_100005F78(&qword_1000A3CD0);
    sub_100073480(a1, (uint64_t)v19 + *(int *)(v34 + 44));
    sub_1000079C8((uint64_t)v19, (uint64_t)v14, &qword_1000A3C38);
    swift_storeEnumTagMultiPayload(v14, v12, 0);
    v35 = sub_100007F64(&qword_1000A3C30, &qword_1000A3C38, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v36 = sub_100007F64(&qword_1000A3C40, &qword_1000A3C48, (uint64_t)&protocol conformance descriptor for Link<A>);
    _ConditionalContent<>.init(storage:)(v14, v17, v53, v35, v36);
    sub_1000079C8((uint64_t)v16, (uint64_t)v11, &qword_1000A3C28);
    swift_storeEnumTagMultiPayload(v11, v54, 0);
    v37 = sub_100076810();
    v38 = sub_100007F64(&qword_1000A3C50, &qword_1000A3C58, (uint64_t)&protocol conformance descriptor for Link<A>);
    _ConditionalContent<>.init(storage:)(v11, v55, v57, v37, v38);
    sub_100007A0C((uint64_t)v16, &qword_1000A3C28);
    return sub_100007A0C((uint64_t)v19, &qword_1000A3C38);
  }
}

uint64_t sub_1000731D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  char v27;
  Swift::String v28;
  Swift::Bool v29;
  __int128 v30;
  __int128 v31;
  char v32;
  id v33;
  _BYTE v34[16];
  _QWORD v35[2];

  v1 = v0 + *(int *)(type metadata accessor for BookCoverView(0) + 28);
  v30 = *(_OWORD *)(v1 + 48);
  v31 = *(_OWORD *)(v1 + 64);
  v32 = *(_BYTE *)(v1 + 80);
  v33 = (id)*((_QWORD *)&v30 + 1);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(BDSLibraryContentAssetTypeEbook);
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*((_QWORD *)&v30 + 1));
  if (v2 == v5 && v4 == v6)
  {
    v25 = *((id *)&v30 + 1);
    sub_100013EC8(&v33);
    swift_bridgeObjectRelease_n(v4, 2);
    sub_100013EF0(&v33);
    goto LABEL_15;
  }
  v8 = v6;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
  v10 = *((id *)&v30 + 1);
  sub_100013EC8(&v33);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  sub_100013EF0(&v33);
  if ((v9 & 1) != 0)
  {
LABEL_15:
    sub_100013EF0(&v33);
    return 1;
  }
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(BDSLibraryContentAssetTypeAudiobook);
  v13 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(*((_QWORD *)&v30 + 1));
  if (v11 == v14 && v13 == v15)
  {
    sub_100013EC8(&v33);
    swift_bridgeObjectRelease_n(v13, 2);
    sub_100013EF0(&v33);
    goto LABEL_18;
  }
  v17 = v15;
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 0);
  sub_100013EC8(&v33);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v17);
  sub_100013EF0(&v33);
  if ((v18 & 1) != 0)
  {
LABEL_18:
    sub_100013EF0(&v33);
    return 0;
  }
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(BDSLibraryContentAssetTypePDF);
  v21 = v20;
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(*((_QWORD *)&v30 + 1));
  v24 = v22;
  if (v19 != v23 || v21 != v22)
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v23, v22, 0);
    sub_100013EC8(&v33);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v24);
    sub_100013EF0(&v33);
    if ((v27 & 1) != 0)
      goto LABEL_20;
    if ((sub_100013C4C() & 1) == 0)
    {
      sub_100007984((uint64_t)&v31, (uint64_t)v34, &qword_1000A3E50);
      sub_100007984((uint64_t)v34, (uint64_t)v35, &qword_1000A3E50);
      if (v35[1])
      {
        v28._countAndFlagsBits = 1717858350;
        v28._object = (void *)0xE400000000000000;
        v29 = String.hasSuffix(_:)(v28);
        sub_100013EF0(&v33);
        if (v29)
          return 2;
        return 1;
      }
      goto LABEL_15;
    }
    goto LABEL_18;
  }
  sub_100013EC8(&v33);
  swift_bridgeObjectRelease_n(v21, 2);
  sub_100013EF0(&v33);
LABEL_20:
  sub_100013EF0(&v33);
  return 2;
}

uint64_t sub_100073480@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  double v37;
  double v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t inited;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94[48];
  uint64_t (*v95)();
  uint64_t v96;
  double v97;
  __int16 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  char v104;

  v90 = a2;
  v91 = sub_100005F78(&qword_1000A3CD8);
  __chkstk_darwin(v91);
  v89 = (uint64_t)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for BookCoverView(0);
  v80 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v81 = v5;
  v82 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100005F78(&qword_1000A3CE0);
  v6 = __chkstk_darwin(v86);
  v87 = (uint64_t)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v83 = (char *)&v76 - v9;
  v10 = __chkstk_darwin(v8);
  v85 = (char *)&v76 - v11;
  __chkstk_darwin(v10);
  v88 = (uint64_t)&v76 - v12;
  v92 = sub_100005F78(&qword_1000A3CE8);
  __chkstk_darwin(v92);
  v93 = (uint64_t)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for AudiobookCoverEffect(0);
  v77 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005F78(&qword_1000A3CF0);
  v79 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v76 - v20;
  v22 = type metadata accessor for WidgetRenderingMode(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (uint64_t *)((char *)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v84 = v4;
  v26 = a1 + *(int *)(v4 + 28);
  v27 = *(_OWORD *)(v26 + 48);
  v101 = *(_OWORD *)(v26 + 32);
  v102 = v27;
  v103 = *(_OWORD *)(v26 + 64);
  v104 = *(_BYTE *)(v26 + 80);
  v28 = *(_OWORD *)(v26 + 16);
  v99 = *(_OWORD *)v26;
  v100 = v28;
  sub_100024FCC(v25);
  v29 = a1;
  sub_1000731D8();
  v30 = sub_1000527C8((uint64_t)v25);
  v31 = (*(uint64_t (**)(_QWORD *, uint64_t))(v23 + 8))(v25, v22);
  if (v30)
  {
    v79 = v16;
    v32 = (uint64_t)v82;
    sub_10000DF98(v29, (uint64_t)v82);
    v33 = *(unsigned __int8 *)(v80 + 80);
    v34 = (v33 + 24) & ~v33;
    v35 = swift_allocObject(&unk_10009D7A8, v34 + v81, v33 | 7);
    *(_QWORD *)(v35 + 16) = v30;
    sub_10000DEF8(v32, v35 + v34);
    v36 = (char *)v30;
    objc_msgSend(v36, "size");
    v95 = sub_1000769CC;
    v96 = v35;
    v97 = v37 / v38;
    v98 = 0;
    v39 = v84;
    v40 = *(_BYTE *)(v29 + *(int *)(v84 + 36));
    v41 = sub_100005F78(&qword_1000A3C88);
    v42 = sub_1000768B4();
    v43 = (uint64_t)v83;
    View.accessibilityHidden(_:)((v40 & 1) == 0, v41, v42);
    swift_release(v35);
    v44 = sub_100005F78(&qword_1000A0DD0);
    inited = swift_initStackObject(v44, v94);
    *(_OWORD *)(inited + 16) = xmmword_10007F260;
    v46 = *(_QWORD *)v26;
    v47 = *(_QWORD *)(v26 + 8);
    *(_QWORD *)(inited + 32) = *(_QWORD *)v26;
    *(_QWORD *)(inited + 40) = v47;
    if (v47)
    {
      v82 = v36;
      swift_bridgeObjectRetain_n(v47, 2);
      v48 = sub_1000408F8(0, 1, 1, (char *)_swiftEmptyArrayStorage);
      v50 = *((_QWORD *)v48 + 2);
      v49 = *((_QWORD *)v48 + 3);
      if (v50 >= v49 >> 1)
        v48 = sub_1000408F8((char *)(v49 > 1), v50 + 1, 1, v48);
      *((_QWORD *)v48 + 2) = v50 + 1;
      v51 = &v48[16 * v50];
      *((_QWORD *)v51 + 4) = v46;
      *((_QWORD *)v51 + 5) = v47;
      v36 = v82;
    }
    else
    {
      v48 = (char *)_swiftEmptyArrayStorage;
    }
    swift_release(inited);
    v95 = (uint64_t (*)())v48;
    v57 = sub_100005F78(&qword_1000A0DD8);
    v58 = sub_100007F64(&qword_1000A0DE0, &qword_1000A0DD8, (uint64_t)&protocol conformance descriptor for [A]);
    v59 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v57, v58);
    v61 = v60;
    swift_bridgeObjectRelease(v48);
    v95 = (uint64_t (*)())v59;
    v96 = v61;
    v62 = sub_1000075E8();
    v63 = (uint64_t)v85;
    ModifiedContent<>.accessibilityLabel<A>(_:)(&v95, v86, &type metadata for String, v62);
    swift_bridgeObjectRelease(v61);
    sub_100007A0C(v43, &qword_1000A3CE0);
    v64 = v88;
    sub_100007984(v63, v88, &qword_1000A3CE0);
    v66 = *(_QWORD *)(v26 + 32);
    v65 = *(_QWORD *)(v26 + 40);
    v67 = *(_BYTE *)(v29 + *(int *)(v39 + 32));
    v69 = *(_QWORD *)v26;
    v68 = *(_QWORD *)(v26 + 8);
    v70 = v87;
    sub_1000079C8(v64, v87, &qword_1000A3CE0);
    v71 = v89;
    sub_1000079C8(v70, v89, &qword_1000A3CE0);
    v72 = v71 + *(int *)(sub_100005F78(&qword_1000A3D08) + 48);
    *(_QWORD *)v72 = v66;
    *(_QWORD *)(v72 + 8) = v65;
    *(_BYTE *)(v72 + 16) = v67;
    *(_BYTE *)(v72 + 17) = 1;
    *(_QWORD *)(v72 + 24) = v69;
    *(_QWORD *)(v72 + 32) = v68;
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v68);
    sub_100007A0C(v70, &qword_1000A3CE0);
    v73 = v93;
    sub_1000079C8(v71, v93, &qword_1000A3CD8);
    swift_storeEnumTagMultiPayload(v73, v92, 0);
    v74 = sub_100007F64(&qword_1000A3CF8, &qword_1000A3CD8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v75 = sub_100007F64(&qword_1000A3D00, &qword_1000A3CF0, (uint64_t)&protocol conformance descriptor for AssetCover<A>);
    _ConditionalContent<>.init(storage:)(v73, v91, v79, v74, v75);

    sub_100007A0C(v71, &qword_1000A3CD8);
    return sub_100007A0C(v64, &qword_1000A3CE0);
  }
  else
  {
    AudiobookCoverEffect.init(shadowScale:cornerRadius:)(v31, 0.9, 4.0);
    sub_100073C3C((uint64_t)v15, (uint64_t)v19);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v15, v78);
    v52 = v79;
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v21, v19, v16);
    v53 = v93;
    (*(void (**)(uint64_t, char *, uint64_t))(v52 + 16))(v93, v21, v16);
    swift_storeEnumTagMultiPayload(v53, v92, 1);
    v54 = sub_100007F64(&qword_1000A3CF8, &qword_1000A3CD8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v55 = sub_100007F64(&qword_1000A3D00, &qword_1000A3CF0, (uint64_t)&protocol conformance descriptor for AssetCover<A>);
    _ConditionalContent<>.init(storage:)(v53, v91, v16, v54, v55);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v21, v16);
  }
}

uint64_t sub_100073C3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v27 = a2;
  v25 = type metadata accessor for AudiobookCoverEffect(0);
  v2 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL.DirectoryHint(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005F78(&qword_1000A09F0);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = dbl_100083050[(char)sub_1000731D8()];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for URL.DirectoryHint.inferFromPath(_:), v5);
  URL.init(filePath:directoryHint:relativeTo:)(0, 0xE000000000000000, v8, v11);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v18 = v25;
  v19 = v17(v4, v26, v25);
  v20 = static Color.white.getter(v19);
  v21 = Color.opacity(_:)(0.2);
  swift_release(v20);
  v22 = sub_100003DCC(&qword_1000A3E30, (uint64_t (*)(uint64_t))&type metadata accessor for AudiobookCoverEffect, (uint64_t)&protocol conformance descriptor for AudiobookCoverEffect);
  return AssetCover.init(aspectRatio:url:effect:placeholderColor:)(v15, v4, v21, v18, v22, 1.0, v16);
}

uint64_t sub_100073E3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v27 = a2;
  v25 = type metadata accessor for BookCoverEffect(0);
  v2 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL.DirectoryHint(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005F78(&qword_1000A09F0);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = dbl_100083050[(char)sub_1000731D8()];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for URL.DirectoryHint.inferFromPath(_:), v5);
  URL.init(filePath:directoryHint:relativeTo:)(0, 0xE000000000000000, v8, v11);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v18 = v25;
  v19 = v17(v4, v26, v25);
  v20 = static Color.white.getter(v19);
  v21 = Color.opacity(_:)(0.2);
  swift_release(v20);
  v22 = sub_100003DCC(&qword_1000A3E28, (uint64_t (*)(uint64_t))&type metadata accessor for BookCoverEffect, (uint64_t)&protocol conformance descriptor for BookCoverEffect);
  return AssetCover.init(aspectRatio:url:effect:placeholderColor:)(v15, v4, v21, v18, v22, 1.0, v16);
}

uint64_t sub_10007403C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v27 = a2;
  v25 = type metadata accessor for LegacyPDFCoverEffect(0);
  v2 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL.DirectoryHint(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005F78(&qword_1000A09F0);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = dbl_100083050[(char)sub_1000731D8()];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for URL.DirectoryHint.inferFromPath(_:), v5);
  URL.init(filePath:directoryHint:relativeTo:)(0, 0xE000000000000000, v8, v11);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v18 = v25;
  v19 = v17(v4, v26, v25);
  v20 = static Color.white.getter(v19);
  v21 = Color.opacity(_:)(0.2);
  swift_release(v20);
  v22 = sub_100003DCC(&qword_1000A3DC0, (uint64_t (*)(uint64_t))&type metadata accessor for LegacyPDFCoverEffect, (uint64_t)&protocol conformance descriptor for LegacyPDFCoverEffect);
  return AssetCover.init(aspectRatio:url:effect:placeholderColor:)(v15, v4, v21, v18, v22, 1.0, v16);
}

void sub_10007423C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  double v29;
  double v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;

  v46 = a2;
  v3 = type metadata accessor for BookCoverView(0);
  v42 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v42 + 64);
  __chkstk_darwin(v3);
  v43 = (uint64_t)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100005F78(&qword_1000A3E40);
  __chkstk_darwin(v44);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BookCoverEffect(0);
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100005F78(&qword_1000A3CC8);
  v41 = *(_QWORD *)(v45 - 8);
  v10 = __chkstk_darwin(v45);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v39 - v13;
  v15 = type metadata accessor for WidgetRenderingMode(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = a1 + *(int *)(v3 + 28);
  v20 = *(_OWORD *)(v19 + 48);
  v49 = *(_OWORD *)(v19 + 32);
  v50 = v20;
  v51 = *(_OWORD *)(v19 + 64);
  v52 = *(_BYTE *)(v19 + 80);
  v21 = *(_OWORD *)(v19 + 16);
  v47 = *(_OWORD *)v19;
  v48 = v21;
  sub_100024FCC(v18);
  sub_1000731D8();
  v22 = sub_1000527C8((uint64_t)v18);
  v23 = (*(uint64_t (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if (v22)
  {
    v24 = v43;
    sub_10000DF98(a1, v43);
    v25 = *(unsigned __int8 *)(v42 + 80);
    v26 = (v25 + 24) & ~v25;
    v27 = swift_allocObject(&unk_10009D7D0, v26 + v4, v25 | 7);
    *(_QWORD *)(v27 + 16) = v22;
    sub_10000DEF8(v24, v27 + v26);
    v28 = v22;
    objc_msgSend(v28, "size");
    *(_QWORD *)v6 = sub_1000769CC;
    *((_QWORD *)v6 + 1) = v27;
    *((double *)v6 + 2) = v29 / v30;
    *((_WORD *)v6 + 12) = 0;
    swift_storeEnumTagMultiPayload(v6, v44, 0);
    swift_retain(v27);
    v31 = sub_100005F78(&qword_1000A3C88);
    v32 = sub_1000768B4();
    v33 = sub_100007F64(&qword_1000A3CC0, &qword_1000A3CC8, (uint64_t)&protocol conformance descriptor for AssetCover<A>);
    _ConditionalContent<>.init(storage:)(v6, v31, v45, v32, v33);
    swift_release(v27);

  }
  else
  {
    BookCoverEffect.init(shadowScale:cornerRadius:)(v23, 0.9, 4.0);
    sub_100073E3C((uint64_t)v9, (uint64_t)v12);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v40);
    v34 = v41;
    v35 = v45;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v14, v12, v45);
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v6, v14, v35);
    swift_storeEnumTagMultiPayload(v6, v44, 1);
    v36 = sub_100005F78(&qword_1000A3C88);
    v37 = sub_1000768B4();
    v38 = sub_100007F64(&qword_1000A3CC0, &qword_1000A3CC8, (uint64_t)&protocol conformance descriptor for AssetCover<A>);
    _ConditionalContent<>.init(storage:)(v6, v36, v35, v37, v38);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v35);
  }
}

void sub_1000745E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  double v29;
  double v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;

  v46 = a2;
  v3 = type metadata accessor for BookCoverView(0);
  v42 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v42 + 64);
  __chkstk_darwin(v3);
  v43 = (uint64_t)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100005F78(&qword_1000A3E48);
  __chkstk_darwin(v44);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LegacyPDFCoverEffect(0);
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100005F78(&qword_1000A3CA8);
  v41 = *(_QWORD *)(v45 - 8);
  v10 = __chkstk_darwin(v45);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v39 - v13;
  v15 = type metadata accessor for WidgetRenderingMode(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = a1 + *(int *)(v3 + 28);
  v20 = *(_OWORD *)(v19 + 48);
  v49 = *(_OWORD *)(v19 + 32);
  v50 = v20;
  v51 = *(_OWORD *)(v19 + 64);
  v52 = *(_BYTE *)(v19 + 80);
  v21 = *(_OWORD *)(v19 + 16);
  v47 = *(_OWORD *)v19;
  v48 = v21;
  sub_100024FCC(v18);
  sub_1000731D8();
  v22 = sub_1000527C8((uint64_t)v18);
  v23 = (*(uint64_t (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if (v22)
  {
    v24 = v43;
    sub_10000DF98(a1, v43);
    v25 = *(unsigned __int8 *)(v42 + 80);
    v26 = (v25 + 24) & ~v25;
    v27 = swift_allocObject(&unk_10009D7F8, v26 + v4, v25 | 7);
    *(_QWORD *)(v27 + 16) = v22;
    sub_10000DEF8(v24, v27 + v26);
    v28 = v22;
    objc_msgSend(v28, "size");
    *(_QWORD *)v6 = sub_1000769CC;
    *((_QWORD *)v6 + 1) = v27;
    *((double *)v6 + 2) = v29 / v30;
    *((_WORD *)v6 + 12) = 0;
    swift_storeEnumTagMultiPayload(v6, v44, 0);
    swift_retain(v27);
    v31 = sub_100005F78(&qword_1000A3C88);
    v32 = sub_1000768B4();
    v33 = sub_100007F64(&qword_1000A3CA0, &qword_1000A3CA8, (uint64_t)&protocol conformance descriptor for AssetCover<A>);
    _ConditionalContent<>.init(storage:)(v6, v31, v45, v32, v33);
    swift_release(v27);

  }
  else
  {
    LegacyPDFCoverEffect.init(cornerRadius:)(v23, 2.0);
    sub_10007403C((uint64_t)v9, (uint64_t)v12);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v40);
    v34 = v41;
    v35 = v45;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v14, v12, v45);
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v6, v14, v35);
    swift_storeEnumTagMultiPayload(v6, v44, 1);
    v36 = sub_100005F78(&qword_1000A3C88);
    v37 = sub_1000768B4();
    v38 = sub_100007F64(&qword_1000A3CA0, &qword_1000A3CA8, (uint64_t)&protocol conformance descriptor for AssetCover<A>);
    _ConditionalContent<>.init(storage:)(v6, v36, v35, v37, v38);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v35);
  }
}

uint64_t sub_100074984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjCClassFromMetadata;
  id v25;
  char *v26;
  id v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v50 - v6;
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v52 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v53 = (char *)&v50 - v12;
  v13 = type metadata accessor for BookCoverView(0);
  v54 = 0;
  v55 = v9;
  v14 = 0;
  if (*(_BYTE *)(v0 + *(int *)(v13 + 24)) == 1)
  {
    v15 = v53;
    v16 = String.LocalizationValue.init(stringLiteral:)(0x6F6F626F69647561, 0xE90000000000006BLL);
    static Locale.current.getter(v16);
    v17 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v18 = v5;
    v19 = v8;
    v20 = v2;
    v21 = v52;
    v17(v52, v15, v19);
    v22 = type metadata accessor for BundleFinder();
    v23 = v1;
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v22);
    v25 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v18, v7, v23);
    v26 = v21;
    v2 = v20;
    v8 = v19;
    v5 = v18;
    v9 = v55;
    v27 = v25;
    v1 = v23;
    v54 = String.init(localized:table:bundle:locale:comment:)(v26, 0, 0, v27, v5, "Accessibility label for an audio book", 37, 2);
    v14 = v28;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
  }
  v29 = (uint64_t *)(v0 + *(int *)(v13 + 28));
  v30 = v29[1];
  if (v30)
  {
    v51 = v5;
    v31 = *v29;
    swift_bridgeObjectRetain(v30);
    v32 = sub_1000408F8(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    v34 = *((_QWORD *)v32 + 2);
    v33 = *((_QWORD *)v32 + 3);
    if (v34 >= v33 >> 1)
      v32 = sub_1000408F8((char *)(v33 > 1), v34 + 1, 1, v32);
    *((_QWORD *)v32 + 2) = v34 + 1;
    v35 = &v32[16 * v34];
    *((_QWORD *)v35 + 4) = v31;
    *((_QWORD *)v35 + 5) = v30;
    v5 = v51;
    v9 = v55;
    if (v14)
      goto LABEL_7;
  }
  else
  {
    v32 = (char *)_swiftEmptyArrayStorage;
    if (v14)
    {
LABEL_7:
      if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
        v32 = sub_1000408F8(0, *((_QWORD *)v32 + 2) + 1, 1, v32);
      v37 = *((_QWORD *)v32 + 2);
      v36 = *((_QWORD *)v32 + 3);
      if (v37 >= v36 >> 1)
        v32 = sub_1000408F8((char *)(v36 > 1), v37 + 1, 1, v32);
      *((_QWORD *)v32 + 2) = v37 + 1;
      v38 = &v32[16 * v37];
      *((_QWORD *)v38 + 4) = v54;
      *((_QWORD *)v38 + 5) = v14;
      goto LABEL_14;
    }
  }
  if (!*((_QWORD *)v32 + 2))
  {
    swift_bridgeObjectRelease(v32);
    v43 = v53;
    v44 = String.LocalizationValue.init(stringLiteral:)(1802465090, 0xE400000000000000);
    static Locale.current.getter(v44);
    v45 = v52;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v52, v43, v8);
    v46 = type metadata accessor for BundleFinder();
    v47 = v1;
    v48 = swift_getObjCClassFromMetadata(v46);
    v49 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", v48);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v47);
    v41 = String.init(localized:table:bundle:locale:comment:)(v45, 0, 0, v49, v5, "Generic accessibility label for a book", 38, 2);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v47);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v43, v8);
    return v41;
  }
LABEL_14:
  v56 = v32;
  v39 = sub_100005F78(&qword_1000A0DD8);
  v40 = sub_100007F64(&qword_1000A0DE0, &qword_1000A0DD8, (uint64_t)&protocol conformance descriptor for [A]);
  v41 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v39, v40);
  swift_bridgeObjectRelease(v32);
  return v41;
}

uint64_t sub_100074E08@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  int v38;
  uint64_t v39;
  char *v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  id v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 v55;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD v72[3];

  v67 = a3;
  v62 = a1;
  v71 = a4;
  v5 = type metadata accessor for LayoutDirection(0);
  v69 = *(_QWORD *)(v5 - 8);
  v70 = v5;
  __chkstk_darwin(v5);
  v68 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WidgetRenderingMode(0);
  v64 = *(_QWORD *)(v7 - 8);
  v65 = v7;
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100005F78(&qword_1000A3D10);
  __chkstk_darwin(v10);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Image.ResizingMode(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100005F78(&qword_1000A3D18);
  v60 = *(_QWORD *)(v17 - 8);
  v61 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100005F78(&qword_1000A3D20);
  __chkstk_darwin(v20);
  v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100005F78(&qword_1000A3D28);
  __chkstk_darwin(v59);
  v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100005F78(&qword_1000A3D30);
  v25 = __chkstk_darwin(v66);
  v63 = (uint64_t)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = GeometryProxy.size.getter(v25);
  v29 = v28;
  objc_msgSend(a2, "size", v27);
  v31 = v30;
  v58 = a2;
  v32 = Image.init(uiImage:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for Image.ResizingMode.stretch(_:), v13);
  v33 = Image.resizable(capInsets:resizingMode:)(v16, v32, 0.0, 0.0, 0.0, 0.0);
  swift_release(v32);
  v34 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  static WidgetAccentedRenderingMode.fullColor.getter(v34);
  v35 = type metadata accessor for WidgetAccentedRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v12, 0, 1, v35);
  Image.widgetAccentedRenderingMode(_:)(v12, v33);
  swift_release(v33);
  sub_100007A0C((uint64_t)v12, &qword_1000A3D10);
  v36 = v67;
  LODWORD(v13) = sub_1000731D8();
  sub_100024FCC(v9);
  sub_1000752C8(v13, (uint64_t)v9, (uint64_t)v22);
  (*(void (**)(_QWORD *, uint64_t))(v64 + 8))(v9, v65);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v19, v61);
  KeyPath = swift_getKeyPath(&unk_100083018);
  v38 = *(unsigned __int8 *)(v36 + *(int *)(type metadata accessor for BookCoverView(0) + 28) + 80);
  v40 = v68;
  v39 = v69;
  if (v38)
    v41 = (unsigned int *)&enum case for LayoutDirection.rightToLeft(_:);
  else
    v41 = (unsigned int *)&enum case for LayoutDirection.leftToRight(_:);
  v42 = v70;
  (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v68, *v41, v70);
  v43 = (uint64_t *)&v24[*(int *)(v59 + 36)];
  v44 = sub_100005F78(&qword_1000A3D38);
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))((char *)v43 + *(int *)(v44 + 28), v40, v42);
  *v43 = KeyPath;
  sub_1000079C8((uint64_t)v22, (uint64_t)v24, &qword_1000A3D20);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v42);
  sub_100007A0C((uint64_t)v22, &qword_1000A3D20);
  v45 = objc_msgSend(v58, "size");
  v47 = v29 / v31 * v46;
  GeometryProxy.size.getter(v45);
  v49 = v48;
  v51 = static Alignment.center.getter(v50);
  _FrameLayout.init(width:height:alignment:)(v72, *(_QWORD *)&v47, 0, v49, 0, v51, v52);
  v53 = v63;
  sub_1000079C8((uint64_t)v24, v63, &qword_1000A3D28);
  v54 = (_OWORD *)(v53 + *(int *)(v66 + 36));
  v55 = v72[1];
  *v54 = v72[0];
  v54[1] = v55;
  v54[2] = v72[2];
  sub_100007A0C((uint64_t)v24, &qword_1000A3D28);
  return sub_100007984(v53, v71, &qword_1000A3D30);
}

uint64_t sub_1000752C8@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t OpaqueTypeConformance2;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;

  v198 = a1;
  v204 = a3;
  v178 = sub_100005F78(&qword_1000A3D40);
  v4 = __chkstk_darwin(v178);
  v160 = (char *)&v154 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v161 = (uint64_t)&v154 - v6;
  v166 = sub_100005F78(&qword_1000A3D48);
  v7 = __chkstk_darwin(v166);
  v158 = (char *)&v154 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v162 = (uint64_t)&v154 - v9;
  v174 = sub_100005F78(&qword_1000A3D50);
  __chkstk_darwin(v174);
  v176 = (uint64_t)&v154 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_100005F78(&qword_1000A3D58);
  __chkstk_darwin(v163);
  v165 = (uint64_t)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_100005F78(&qword_1000A3D60);
  __chkstk_darwin(v175);
  v167 = (char *)&v154 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100005F78(&qword_1000A3D68);
  v13 = __chkstk_darwin(v164);
  v157 = (char *)&v154 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v159 = (uint64_t)&v154 - v15;
  v203 = sub_100005F78(&qword_1000A3D70);
  __chkstk_darwin(v203);
  v177 = (char *)&v154 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_100005F78(&qword_1000A3D78);
  __chkstk_darwin(v201);
  v202 = (uint64_t)&v154 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = type metadata accessor for LegacyPDFCoverEffect(0);
  v183 = *(_QWORD *)(v197 - 8);
  v18 = __chkstk_darwin(v197);
  v156 = (char *)&v154 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v182 = (char *)&v154 - v20;
  v196 = sub_100005F78(&qword_1000A3D80);
  v171 = *(_QWORD *)(v196 - 8);
  v21 = __chkstk_darwin(v196);
  v169 = (char *)&v154 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v170 = (char *)&v154 - v23;
  v191 = type metadata accessor for AudiobookCoverEffect(0);
  v181 = *(_QWORD *)(v191 - 8);
  v24 = __chkstk_darwin(v191);
  v155 = (char *)&v154 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v180 = (char *)&v154 - v26;
  v189 = sub_100005F78(&qword_1000A3D88);
  v173 = *(_QWORD *)(v189 - 8);
  v27 = __chkstk_darwin(v189);
  v168 = (char *)&v154 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v172 = (char *)&v154 - v29;
  v192 = sub_100005F78(&qword_1000A3D90);
  __chkstk_darwin(v192);
  v195 = (uint64_t)&v154 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_100005F78(&qword_1000A3D98);
  __chkstk_darwin(v185);
  v186 = (char *)&v154 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = sub_100005F78(&qword_1000A3DA0);
  __chkstk_darwin(v193);
  v188 = (char *)&v154 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = type metadata accessor for BookCoverEffect(0);
  v179 = *(_QWORD *)(v190 - 8);
  v33 = __chkstk_darwin(v190);
  v35 = (char *)&v154 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v37 = (char *)&v154 - v36;
  v187 = sub_100005F78(&qword_1000A3DA8);
  v184 = *(_QWORD *)(v187 - 8);
  v38 = __chkstk_darwin(v187);
  v40 = (char *)&v154 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v42 = (char *)&v154 - v41;
  v200 = sub_100005F78(&qword_1000A3DB0);
  __chkstk_darwin(v200);
  v194 = (char *)&v154 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for WidgetRenderingMode(0);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = __chkstk_darwin(v44);
  v48 = (char *)&v154 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v50 = (char *)&v154 - v49;
  v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 16))((char *)&v154 - v49, a2, v44);
  static WidgetRenderingMode.accented.getter(v51);
  v52 = sub_100003DCC(&qword_1000A3DB8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t)&protocol conformance descriptor for WidgetRenderingMode);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)(v48, v50, v44, v52);
  v53 = *(uint64_t (**)(char *, uint64_t))(v45 + 8);
  v54 = v53(v48, v44);
  if ((a2 & 1) == 0)
  {
    static WidgetRenderingMode.vibrant.getter(v54);
    v56 = dispatch thunk of static Equatable.== infix(_:_:)(v48, v50, v44, v52);
    v53(v48, v44);
    v55 = v53(v50, v44);
    if ((v56 & 1) != 0)
      goto LABEL_4;
    if ((_BYTE)v198)
    {
      if (v198 != 1)
      {
        v138 = v182;
        LegacyPDFCoverEffect.init(cornerRadius:)(v55, 2.0);
        v139 = v183;
        v140 = v156;
        v141 = v197;
        (*(void (**)(char *, char *, uint64_t))(v183 + 16))(v156, v138, v197);
        v142 = v178;
        v143 = (uint64_t)v160;
        v144 = sub_100003DCC(&qword_1000A3DC0, (uint64_t (*)(uint64_t))&type metadata accessor for LegacyPDFCoverEffect, (uint64_t)&protocol conformance descriptor for LegacyPDFCoverEffect);
        _CoverEffectViewModifier.init(effect:)(v140, v141, v144);
        v145 = sub_100005F78(&qword_1000A3D18);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v145 - 8) + 16))(v143, v199, v145);
        (*(void (**)(char *, uint64_t))(v139 + 8))(v138, v141);
        v79 = &qword_1000A3D40;
        v146 = v161;
        sub_100007984(v143, v161, &qword_1000A3D40);
        v147 = v176;
        sub_1000079C8(v146, v176, &qword_1000A3D40);
        swift_storeEnumTagMultiPayload(v147, v174, 1);
        v148 = sub_1000769D8();
        v149 = sub_100076A84(&qword_1000A3E00, &qword_1000A3D40, &qword_1000A3E08, &qword_1000A3E10);
        v136 = (uint64_t)v177;
        _ConditionalContent<>.init(storage:)(v147, v175, v142, v148, v149);
        v137 = v146;
        goto LABEL_16;
      }
      BookCoverEffect.init(shadowScale:cornerRadius:)(v55, 0.9, 4.0);
      v73 = v179;
      v74 = v190;
      (*(void (**)(char *, char *, uint64_t))(v179 + 16))(v35, v37, v190);
      v75 = v164;
      v76 = (uint64_t)v157;
      v77 = sub_100003DCC(&qword_1000A3E28, (uint64_t (*)(uint64_t))&type metadata accessor for BookCoverEffect, (uint64_t)&protocol conformance descriptor for BookCoverEffect);
      _CoverEffectViewModifier.init(effect:)(v35, v74, v77);
      v78 = sub_100005F78(&qword_1000A3D18);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(v76, v199, v78);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v37, v74);
      v79 = &qword_1000A3D68;
      v80 = v159;
      sub_100007984(v76, v159, &qword_1000A3D68);
      v81 = v165;
      sub_1000079C8(v80, v165, &qword_1000A3D68);
      swift_storeEnumTagMultiPayload(v81, v163, 0);
      v82 = sub_100076A84(&qword_1000A3DD0, &qword_1000A3D68, &qword_1000A3DD8, &qword_1000A3DE0);
      v83 = sub_100076A84(&qword_1000A3DE8, &qword_1000A3D48, &qword_1000A3DF0, &qword_1000A3DF8);
      v84 = (uint64_t)v167;
      v85 = v81;
      v86 = v75;
      v87 = v166;
    }
    else
    {
      v124 = v180;
      AudiobookCoverEffect.init(shadowScale:cornerRadius:)(v55, 0.9, 4.0);
      v125 = v181;
      v126 = v155;
      v127 = v191;
      (*(void (**)(char *, char *, uint64_t))(v181 + 16))(v155, v124, v191);
      v128 = v166;
      v129 = (uint64_t)v158;
      v130 = sub_100003DCC(&qword_1000A3E30, (uint64_t (*)(uint64_t))&type metadata accessor for AudiobookCoverEffect, (uint64_t)&protocol conformance descriptor for AudiobookCoverEffect);
      _CoverEffectViewModifier.init(effect:)(v126, v127, v130);
      v131 = sub_100005F78(&qword_1000A3D18);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(v129, v199, v131);
      (*(void (**)(char *, uint64_t))(v125 + 8))(v124, v127);
      v79 = &qword_1000A3D48;
      v80 = v162;
      sub_100007984(v129, v162, &qword_1000A3D48);
      v132 = v165;
      sub_1000079C8(v80, v165, &qword_1000A3D48);
      swift_storeEnumTagMultiPayload(v132, v163, 1);
      v82 = sub_100076A84(&qword_1000A3DD0, &qword_1000A3D68, &qword_1000A3DD8, &qword_1000A3DE0);
      v83 = sub_100076A84(&qword_1000A3DE8, &qword_1000A3D48, &qword_1000A3DF0, &qword_1000A3DF8);
      v84 = (uint64_t)v167;
      v85 = v132;
      v86 = v164;
      v87 = v128;
    }
    _ConditionalContent<>.init(storage:)(v85, v86, v87, v82, v83);
    v133 = v176;
    sub_1000079C8(v84, v176, &qword_1000A3D60);
    swift_storeEnumTagMultiPayload(v133, v174, 0);
    v134 = sub_1000769D8();
    v135 = sub_100076A84(&qword_1000A3E00, &qword_1000A3D40, &qword_1000A3E08, &qword_1000A3E10);
    v136 = (uint64_t)v177;
    _ConditionalContent<>.init(storage:)(v133, v175, v178, v134, v135);
    sub_100007A0C(v84, &qword_1000A3D60);
    v137 = v80;
LABEL_16:
    sub_100007A0C(v137, v79);
    v119 = &qword_1000A3D70;
    v150 = v202;
    sub_1000079C8(v136, v202, &qword_1000A3D70);
    swift_storeEnumTagMultiPayload(v150, v201, 1);
    v151 = sub_100076B18();
    v152 = sub_100076D20();
    _ConditionalContent<>.init(storage:)(v150, v200, v203, v151, v152);
    v123 = v136;
    return sub_100007A0C(v123, v119);
  }
  v55 = v53(v50, v44);
LABEL_4:
  if ((_BYTE)v198)
  {
    v57 = (uint64_t)v194;
    if (v198 == 1)
    {
      BookCoverEffect.init(shadowScale:cornerRadius:)(v55, 0.9, 4.0);
      v58 = sub_100005F78(&qword_1000A3D18);
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v58, &opaque type descriptor for <<opaque return type of Image.widgetAccentedRenderingMode(_:)>>, 1);
      v60 = sub_100003DCC(&qword_1000A3E28, (uint64_t (*)(uint64_t))&type metadata accessor for BookCoverEffect, (uint64_t)&protocol conformance descriptor for BookCoverEffect);
      v61 = v190;
      View.clipShape<A>(for:)(v37, v58, v190, OpaqueTypeConformance2, v60);
      (*(void (**)(char *, uint64_t))(v179 + 8))(v37, v61);
      v62 = v184;
      v63 = v187;
      (*(void (**)(char *, char *, uint64_t))(v184 + 32))(v42, v40, v187);
      v64 = v186;
      (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v186, v42, v63);
      swift_storeEnumTagMultiPayload(v64, v185, 0);
      v205 = v58;
      v206 = v61;
      v207 = OpaqueTypeConformance2;
      v208 = v60;
      v65 = swift_getOpaqueTypeConformance2(&v205, &opaque type descriptor for <<opaque return type of View.clipShape<A>(for:)>>, 1);
      v66 = sub_100003DCC(&qword_1000A3E30, (uint64_t (*)(uint64_t))&type metadata accessor for AudiobookCoverEffect, (uint64_t)&protocol conformance descriptor for AudiobookCoverEffect);
      v205 = v58;
      v206 = v191;
      v207 = OpaqueTypeConformance2;
      v208 = v66;
      v67 = swift_getOpaqueTypeConformance2(&v205, &opaque type descriptor for <<opaque return type of View.clipShape<A>(for:)>>, 1);
      v68 = (uint64_t)v188;
      _ConditionalContent<>.init(storage:)(v64, v63, v189, v65, v67);
      v69 = v195;
      sub_1000079C8(v68, v195, &qword_1000A3DA0);
      swift_storeEnumTagMultiPayload(v69, v192, 0);
      v70 = sub_100076BFC();
      v71 = sub_100003DCC(&qword_1000A3DC0, (uint64_t (*)(uint64_t))&type metadata accessor for LegacyPDFCoverEffect, (uint64_t)&protocol conformance descriptor for LegacyPDFCoverEffect);
      v205 = v58;
      v206 = v197;
      v207 = OpaqueTypeConformance2;
      v208 = v71;
      v72 = swift_getOpaqueTypeConformance2(&v205, &opaque type descriptor for <<opaque return type of View.clipShape<A>(for:)>>, 1);
      _ConditionalContent<>.init(storage:)(v69, v193, v196, v70, v72);
      sub_100007A0C(v68, &qword_1000A3DA0);
      (*(void (**)(char *, uint64_t))(v184 + 8))(v42, v63);
    }
    else
    {
      v107 = v182;
      LegacyPDFCoverEffect.init(cornerRadius:)(v55, 2.0);
      v108 = sub_100005F78(&qword_1000A3D18);
      v109 = swift_getOpaqueTypeConformance2(v108, &opaque type descriptor for <<opaque return type of Image.widgetAccentedRenderingMode(_:)>>, 1);
      v110 = sub_100003DCC(&qword_1000A3DC0, (uint64_t (*)(uint64_t))&type metadata accessor for LegacyPDFCoverEffect, (uint64_t)&protocol conformance descriptor for LegacyPDFCoverEffect);
      v111 = v169;
      v112 = v197;
      View.clipShape<A>(for:)(v107, v108, v197, v109, v110);
      (*(void (**)(char *, uint64_t))(v183 + 8))(v107, v112);
      v113 = v171;
      v114 = v170;
      v115 = v196;
      (*(void (**)(char *, char *, uint64_t))(v171 + 32))(v170, v111, v196);
      v116 = v195;
      (*(void (**)(uint64_t, char *, uint64_t))(v113 + 16))(v195, v114, v115);
      swift_storeEnumTagMultiPayload(v116, v192, 1);
      v117 = sub_100076BFC();
      v205 = v108;
      v206 = v112;
      v207 = v109;
      v208 = v110;
      v118 = swift_getOpaqueTypeConformance2(&v205, &opaque type descriptor for <<opaque return type of View.clipShape<A>(for:)>>, 1);
      _ConditionalContent<>.init(storage:)(v116, v193, v115, v117, v118);
      (*(void (**)(char *, uint64_t))(v113 + 8))(v114, v115);
    }
  }
  else
  {
    v88 = v180;
    AudiobookCoverEffect.init(shadowScale:cornerRadius:)(v55, 0.9, 4.0);
    v89 = sub_100005F78(&qword_1000A3D18);
    v90 = swift_getOpaqueTypeConformance2(v89, &opaque type descriptor for <<opaque return type of Image.widgetAccentedRenderingMode(_:)>>, 1);
    v91 = sub_100003DCC(&qword_1000A3E30, (uint64_t (*)(uint64_t))&type metadata accessor for AudiobookCoverEffect, (uint64_t)&protocol conformance descriptor for AudiobookCoverEffect);
    v92 = v168;
    v93 = v191;
    View.clipShape<A>(for:)(v88, v89, v191, v90, v91);
    (*(void (**)(char *, uint64_t))(v181 + 8))(v88, v93);
    v94 = v173;
    v95 = v172;
    v96 = v92;
    v97 = v189;
    (*(void (**)(char *, char *, uint64_t))(v173 + 32))(v172, v96, v189);
    v98 = v186;
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v186, v95, v97);
    swift_storeEnumTagMultiPayload(v98, v185, 1);
    v99 = sub_100003DCC(&qword_1000A3E28, (uint64_t (*)(uint64_t))&type metadata accessor for BookCoverEffect, (uint64_t)&protocol conformance descriptor for BookCoverEffect);
    v205 = v89;
    v206 = v190;
    v207 = v90;
    v208 = v99;
    v100 = swift_getOpaqueTypeConformance2(&v205, &opaque type descriptor for <<opaque return type of View.clipShape<A>(for:)>>, 1);
    v205 = v89;
    v206 = v93;
    v207 = v90;
    v208 = v91;
    v101 = swift_getOpaqueTypeConformance2(&v205, &opaque type descriptor for <<opaque return type of View.clipShape<A>(for:)>>, 1);
    v102 = (uint64_t)v188;
    _ConditionalContent<>.init(storage:)(v98, v187, v97, v100, v101);
    v103 = v195;
    sub_1000079C8(v102, v195, &qword_1000A3DA0);
    swift_storeEnumTagMultiPayload(v103, v192, 0);
    v104 = sub_100076BFC();
    v105 = sub_100003DCC(&qword_1000A3DC0, (uint64_t (*)(uint64_t))&type metadata accessor for LegacyPDFCoverEffect, (uint64_t)&protocol conformance descriptor for LegacyPDFCoverEffect);
    v205 = v89;
    v206 = v197;
    v207 = v90;
    v208 = v105;
    v106 = swift_getOpaqueTypeConformance2(&v205, &opaque type descriptor for <<opaque return type of View.clipShape<A>(for:)>>, 1);
    v57 = (uint64_t)v194;
    _ConditionalContent<>.init(storage:)(v103, v193, v196, v104, v106);
    sub_100007A0C(v102, &qword_1000A3DA0);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v95, v97);
  }
  v119 = &qword_1000A3DB0;
  v120 = v202;
  sub_1000079C8(v57, v202, &qword_1000A3DB0);
  swift_storeEnumTagMultiPayload(v120, v201, 0);
  v121 = sub_100076B18();
  v122 = sub_100076D20();
  _ConditionalContent<>.init(storage:)(v120, v200, v203, v121, v122);
  v123 = v57;
  return sub_100007A0C(v123, v119);
}

uint64_t sub_100076574@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  unint64_t v20;
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];

  v2 = v1;
  v22[1] = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005F78(&qword_1000A3BF8);
  __chkstk_darwin(v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005F78(&qword_1000A3C00);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100072BF0(v2, (uint64_t)v9);
  static AccessibilityChildBehavior.ignore.getter(v14);
  v15 = sub_100076728();
  View.accessibilityElement(children:)(v6, v7, v15);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100007A0C((uint64_t)v9, &qword_1000A3BF8);
  v16 = sub_100074984();
  v18 = v17;
  v24[0] = v16;
  v24[1] = v17;
  v23[0] = v7;
  v23[1] = v15;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v23, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v20 = sub_1000075E8();
  View.accessibilityLabel<A>(_:)(v24, v10, &type metadata for String, OpaqueTypeConformance2, v20);
  swift_bridgeObjectRelease(v18);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

unint64_t sub_100076728()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3C08;
  if (!qword_1000A3C08)
  {
    v1 = sub_100005FC0(&qword_1000A3BF8);
    sub_10007678C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3C08);
  }
  return result;
}

unint64_t sub_10007678C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3C10;
  if (!qword_1000A3C10)
  {
    v1 = sub_100005FC0(&qword_1000A3C18);
    sub_100076810();
    sub_100007F64(&qword_1000A3C50, &qword_1000A3C58, (uint64_t)&protocol conformance descriptor for Link<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3C10);
  }
  return result;
}

unint64_t sub_100076810()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3C20;
  if (!qword_1000A3C20)
  {
    v1 = sub_100005FC0(&qword_1000A3C28);
    sub_100007F64(&qword_1000A3C30, &qword_1000A3C38, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_100007F64(&qword_1000A3C40, &qword_1000A3C48, (uint64_t)&protocol conformance descriptor for Link<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3C20);
  }
  return result;
}

void sub_1000768AC(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1000745E4(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000768B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3C80;
  if (!qword_1000A3C80)
  {
    v1 = sub_100005FC0(&qword_1000A3C88);
    sub_100007F64(&qword_1000A3C90, &qword_1000A3C98, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3C80);
  }
  return result;
}

void sub_100076938(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10007423C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100076940(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100005FC0(a2);
    sub_1000768B4();
    sub_100007F64(a3, a4, (uint64_t)&protocol conformance descriptor for AssetCover<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000769D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3DC8;
  if (!qword_1000A3DC8)
  {
    v1 = sub_100005FC0(&qword_1000A3D60);
    sub_100076A84(&qword_1000A3DD0, &qword_1000A3D68, &qword_1000A3DD8, &qword_1000A3DE0);
    sub_100076A84(&qword_1000A3DE8, &qword_1000A3D48, &qword_1000A3DF0, &qword_1000A3DF8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3DC8);
  }
  return result;
}

uint64_t sub_100076A84(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100005FC0(a2);
    swift_getOpaqueTypeConformance2(v8, &opaque type descriptor for <<opaque return type of Image.widgetAccentedRenderingMode(_:)>>, 1);
    sub_100007F64(a3, a4, (uint64_t)&protocol conformance descriptor for _CoverEffectViewModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100076B18()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;

  result = qword_1000A3E18;
  if (!qword_1000A3E18)
  {
    v1 = sub_100005FC0(&qword_1000A3DB0);
    sub_100076BFC();
    v2 = sub_100005FC0(&qword_1000A3D18);
    v3 = type metadata accessor for LegacyPDFCoverEffect(255);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Image.widgetAccentedRenderingMode(_:)>>, 1);
    v5 = sub_100003DCC(&qword_1000A3DC0, (uint64_t (*)(uint64_t))&type metadata accessor for LegacyPDFCoverEffect, (uint64_t)&protocol conformance descriptor for LegacyPDFCoverEffect);
    swift_getOpaqueTypeConformance2(&v2, &opaque type descriptor for <<opaque return type of View.clipShape<A>(for:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3E18);
  }
  return result;
}

unint64_t sub_100076BFC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = qword_1000A3E20;
  if (!qword_1000A3E20)
  {
    v1 = sub_100005FC0(&qword_1000A3DA0);
    v2 = sub_100005FC0(&qword_1000A3D18);
    v3 = type metadata accessor for BookCoverEffect(255);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of Image.widgetAccentedRenderingMode(_:)>>, 1);
    v7 = v2;
    v8 = v3;
    v9 = OpaqueTypeConformance2;
    v10 = sub_100003DCC(&qword_1000A3E28, (uint64_t (*)(uint64_t))&type metadata accessor for BookCoverEffect, (uint64_t)&protocol conformance descriptor for BookCoverEffect);
    swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.clipShape<A>(for:)>>, 1);
    v5 = type metadata accessor for AudiobookCoverEffect(255);
    v6 = sub_100003DCC(&qword_1000A3E30, (uint64_t (*)(uint64_t))&type metadata accessor for AudiobookCoverEffect, (uint64_t)&protocol conformance descriptor for AudiobookCoverEffect);
    v7 = v2;
    v8 = v5;
    v9 = OpaqueTypeConformance2;
    v10 = v6;
    swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.clipShape<A>(for:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3E20);
  }
  return result;
}

unint64_t sub_100076D20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3E38;
  if (!qword_1000A3E38)
  {
    v1 = sub_100005FC0(&qword_1000A3D70);
    sub_1000769D8();
    sub_100076A84(&qword_1000A3E00, &qword_1000A3D40, &qword_1000A3E08, &qword_1000A3E10);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3E38);
  }
  return result;
}

uint64_t sub_100076DB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;

  v1 = type metadata accessor for BookCoverView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100005F78(&qword_1000A09A0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = v4 + v5;
  v10 = (char *)v6 + *(int *)(v1 + 20);
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = (char *)v6 + *(int *)(v1 + 28);
  swift_bridgeObjectRelease(*((_QWORD *)v12 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v12 + 5));

  swift_bridgeObjectRelease(*((_QWORD *)v12 + 9));
  return swift_deallocObject(v0, v9, v3 | 7);
}

uint64_t sub_100076EB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BookCoverView(0) - 8) + 80);
  return sub_100074E08(a1, *(void **)(v2 + 16), v2 + ((v5 + 24) & ~v5), a2);
}

unint64_t sub_100076F0C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000A3E58;
  if (!qword_1000A3E58)
  {
    v1 = sub_100005FC0(&qword_1000A3E60);
    v2[0] = sub_100005FC0(&qword_1000A3BF8);
    v2[1] = sub_100076728();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100003DCC((unint64_t *)&qword_1000A0A38, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3E58);
  }
  return result;
}

uint64_t sub_100076FBC()
{
  return sub_100007F64(&qword_1000A3E78, &qword_1000A3E80, (uint64_t)&protocol conformance descriptor for _IntentUpdatableEntityProperty<A, B, C>);
}

double sub_100076FE8()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = type metadata accessor for InvertImagesAppEntity(0);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v0 + *(int *)(v1 + 24))).n128_u64[0];
  return result;
}

uint64_t sub_100077008()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100005F78(&qword_1000A2758);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000C090(v16, qword_1000AA3D8);
  sub_10000BE14(v16, (uint64_t)qword_1000AA3D8);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000056, 0x800000010007E8D0);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Name of Books Invert images setting", 35, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_10007721C()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10000C090(v0, qword_1000AA3F0);
  sub_10000BE14(v0, (uint64_t)qword_1000AA3F0);
  return LocalizedStringResource.init(stringLiteral:)(0xD00000000000006FLL, 0x800000010007ED40);
}

uint64_t sub_10007727C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100005F78(&qword_1000A31B0);
  sub_10000C090(v0, qword_1000AA408);
  v1 = sub_10000BE14(v0, (uint64_t)qword_1000AA408);
  IntentDescription.init(stringLiteral:)(0xD000000000000078, 0x800000010007ECC0);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_100077304()
{
  uint64_t result;

  result = swift_getKeyPath(&unk_100083628);
  qword_1000AA420 = result;
  return result;
}

uint64_t sub_100077328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = sub_100005F78(&qword_1000A3180);
  v3[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005F78(&qword_1000A3188);
  v3[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005F78(&qword_1000A4070);
  v3[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IntentDialog(0);
  v3[8] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[9] = v8;
  v3[10] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for InvertImagesAppEntity(0);
  v3[11] = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[12] = swift_task_alloc(v10);
  v3[13] = swift_task_alloc(v10);
  v11 = sub_100005F78(&qword_1000A4078);
  v3[14] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[15] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[16] = swift_task_alloc(v13);
  v3[17] = swift_task_alloc(v13);
  return swift_task_switch(sub_100077468, 0, 0);
}

uint64_t sub_100077468()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  IntentParameter.wrappedValue.getter(*(_QWORD **)(v0 + 104));
  v1 = (_QWORD *)swift_task_alloc(async function pointer to IntentDialog._CapturedContent.init<>(entity:_:)[1]);
  *(_QWORD *)(v0 + 144) = v1;
  v2 = sub_100078900(qword_1000A3ED8, (uint64_t)&unk_100083368);
  *v1 = v0;
  v1[1] = sub_1000774F0;
  return IntentDialog._CapturedContent.init<>(entity:_:)(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 104), sub_1000778A4, 0, *(_QWORD *)(v0 + 88), v2);
}

uint64_t sub_1000774F0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  return swift_task_switch(sub_100077544, 0, 0);
}

uint64_t sub_100077544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  IntentParameter.wrappedValue.getter(*(_QWORD **)(v0 + 96));
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 176));
  *(_BYTE *)(v0 + 177) = *(_BYTE *)(v0 + 176);
  if (qword_1000A0770 != -1)
    swift_once(&qword_1000A0770, sub_100077304);
  v1 = qword_1000AA420;
  *(_QWORD *)(v0 + 152) = qword_1000AA420;
  v2 = async function pointer to AppEntity._setValue<A, B, C>(_:for:)[1];
  swift_retain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 160) = v3;
  v4 = sub_100007F64(&qword_1000A4030, &qword_1000A4038, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  *v3 = v0;
  v3[1] = sub_100077634;
  return AppEntity._setValue<A, B, C>(_:for:)(v0 + 177, v1, &type metadata for Bool, v4);
}

uint64_t sub_100077634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v2);
  sub_100078FAC(v4);
  swift_release(v3);
  if (v0)
    v5 = sub_10005FDD0;
  else
    v5 = sub_1000776B4;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000776B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 128);
  v16 = *(_QWORD **)(v0 + 104);
  v17 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 56);
  v19 = *(_QWORD *)(v0 + 64);
  v20 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v18 = *(_QWORD *)(v0 + 72);
  IntentParameter.wrappedValue.getter(v16);
  v7 = type metadata accessor for _GeneratedContentOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = type metadata accessor for _GeneratedContentFallback(0);
  v9 = v5;
  v13 = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v5, 1, 1, v8);
  v10 = sub_10004C788();
  v11 = sub_100078900(&qword_1000A3EF8, (uint64_t)&unk_100083510);
  IntentDialog._GeneratedDialogContent.init(fromResult:options:fallbackDialog:)(sub_1000778A4, 0, v6, v9, &type metadata for InvertImagesAppEntity.UpdateIntent_value, v3, v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v15, v17, v14);
  IntentDialog.init<A, B>(from:capturedContent:)(v4, v15, &type metadata for InvertImagesAppEntity.UpdateIntent_value, v3, v10, v11);
  static IntentResult.result<A>(value:dialog:)(v16, v2, v3, v11);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v2, v19);
  sub_100078FAC((uint64_t)v16);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v17, v14);
  swift_task_dealloc(v17);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v20);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000778A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v0 = sub_100005F78(&qword_1000A4080);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A0770 != -1)
    swift_once(&qword_1000A0770, sub_100077304);
  v4 = qword_1000AA420;
  v5 = swift_retain(qword_1000AA420);
  static _DialogBuilderEntity.buildExpression<A, B>(_:)(v5);
  swift_release(v4);
  v6 = type metadata accessor for InvertImagesAppEntity(0);
  v7 = sub_100078900(&qword_1000A3EF8, (uint64_t)&unk_100083510);
  v8 = sub_100007F64(&qword_1000A4088, &qword_1000A4080, (uint64_t)&protocol conformance descriptor for _NLGRepresentationEntity<A>);
  static _DialogBuilderEntity.buildBlock<A>(_:)(v3, v6, v0, v7, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1000779C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for InvertImagesAppEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100079064(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_100078FAC(a1);
}

void (*sub_100077A44(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_100060080;
}

double sub_100077A8C()
{
  double result;

  if (qword_1000A0770 != -1)
    swift_once(&qword_1000A0770, sub_100077304);
  *(_QWORD *)&result = swift_retain(qword_1000AA420).n128_u64[0];
  return result;
}

unint64_t sub_100077AD0()
{
  unint64_t result;

  result = qword_1000A3E88;
  if (!qword_1000A3E88)
  {
    result = swift_getWitnessTable(&unk_1000831B0, &type metadata for InvertImagesAppEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_1000A3E88);
  }
  return result;
}

unint64_t sub_100077B18()
{
  unint64_t result;

  result = qword_1000A3E90;
  if (!qword_1000A3E90)
  {
    result = swift_getWitnessTable(&unk_1000831D8, &type metadata for InvertImagesAppEntity.UpdateIntent_value);
    atomic_store(result, (unint64_t *)&qword_1000A3E90);
  }
  return result;
}

uint64_t sub_100077B5C(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_100084C38, 1) + 8);
}

uint64_t sub_100077B80(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10004C788();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_100077BC0@<X0>(uint64_t a1@<X8>)
{
  return sub_100047640(&qword_1000A0760, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1000AA3F0, (uint64_t)sub_10007721C, a1);
}

uint64_t sub_100077BE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000A0768 != -1)
    swift_once(&qword_1000A0768, sub_10007727C);
  v2 = sub_100005F78(&qword_1000A31B0);
  v3 = sub_10000BE14(v2, (uint64_t)qword_1000AA408);
  return sub_10007901C(v3, a1);
}

uint64_t sub_100077C44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc(dword_1000A406C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10000C360;
  return sub_100077328(a1, v5, v4);
}

uint64_t sub_100077CA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100078C14();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_100077CCC()
{
  return 0xD000000000000026;
}

unint64_t sub_100077CEC()
{
  unint64_t result;

  result = qword_1000A3EA0;
  if (!qword_1000A3EA0)
  {
    result = swift_getWitnessTable(&unk_100083234, &type metadata for InvertImagesAppEntity.InvertImagesAppEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1000A3EA0);
  }
  return result;
}

uint64_t sub_100077D30()
{
  return sub_100078900((unint64_t *)&unk_1000A3EA8, (uint64_t)&unk_1000833C0);
}

uint64_t type metadata accessor for InvertImagesAppEntity(uint64_t a1)
{
  uint64_t result;

  result = qword_1000A3FC8;
  if (!qword_1000A3FC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InvertImagesAppEntity);
  return result;
}

uint64_t sub_100077D90(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100077DA8, 0, 0);
}

uint64_t sub_100077DA8()
{
  uint64_t v0;
  unsigned __int8 *v1;
  void *v2;
  unsigned __int8 v3;

  v1 = *(unsigned __int8 **)(v0 + 16);
  sub_100078BD8();
  v2 = (void *)static NSUserDefaults.booksAppGroup.getter();
  v3 = objc_msgSend(v2, "BKSettingFilterBrightImages");

  *v1 = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100077E0C(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = *a2;
  return swift_task_switch(sub_100077E28, 0, 0);
}

uint64_t sub_100077E28()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_100078BD8();
  v2 = (void *)static NSUserDefaults.booksAppGroup.getter();
  objc_msgSend(v2, "setBKSettingFilterBrightImages:", v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100077E80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_BYTE *, _QWORD, uint64_t);
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t result;
  _BYTE v42[12];
  unsigned int v43;
  void (*v44)(_BYTE *, _QWORD, uint64_t);
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;

  v47 = a1;
  v1 = sub_100005F78(&qword_1000A2750);
  __chkstk_darwin(v1);
  v45 = &v42[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = sub_100005F78(&qword_1000A2758);
  __chkstk_darwin(v3);
  v48 = &v42[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v42[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v42[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v42[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v46 = &v42[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __chkstk_darwin(v17);
  v21 = &v42[-v20];
  __chkstk_darwin(v19);
  v23 = &v42[-v22];
  v24 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000053, 0x800000010007E960);
  static Locale.current.getter(v24);
  v25 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v44 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104);
  v43 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v44(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Invert images entity display representation title", 49, 2);
  v26 = v48;
  LocalizedStringResource.init(stringLiteral:)(0x100000000000002ELL, 0x800000010007EA00);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v26, 0, 1, v15);
  v27 = type metadata accessor for DisplayRepresentation.Image(0);
  v28 = v45;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v45, 1, 1, v27);
  v29 = sub_100005F78(&qword_1000A2A90);
  v30 = swift_allocObject(v29, ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72), *(unsigned __int8 *)(v16 + 80) | 7);
  *(_OWORD *)(v30 + 16) = xmmword_10007F260;
  v31 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000014, 0x800000010007EA30);
  static Locale.current.getter(v31);
  v32 = v25;
  v33 = v44;
  v44(v8, v32, v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Synonym for Invert Images Setting", 33, 2);
  LocalizedStringResource.init(stringLiteral:)(0x10000000000000C7, 0x800000010007EA80);
  v34 = v47;
  DisplayRepresentation.init(title:subtitle:image:synonyms:descriptionText:)(v23, v48, v28, v30, v21);
  v35 = type metadata accessor for InvertImagesAppEntity(0);
  v36 = (_QWORD *)(v34 + *(int *)(v35 + 20));
  *v36 = 0xD00000000000001ALL;
  v36[1] = 0x800000010007EB50;
  v37 = *(int *)(v35 + 24);
  sub_100005F78(&qword_1000A3E80);
  v38 = String.LocalizationValue.init(stringLiteral:)(0x4920747265766E49, 0xED0000736567616DLL);
  static Locale.current.getter(v38);
  v33(v8, v43, v5);
  v39 = v46;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Invert Images AppEntity value title", 35, 2);
  v40 = sub_100007F64(&qword_1000A4030, &qword_1000A4038, (uint64_t)&protocol conformance descriptor for _EntityDeferredPropertyValue<A, B>);
  result = _IntentUpdatableEntityProperty<>.init(title:get:set:intent:)(v39, &unk_1000A4020, 0, &unk_1000A4028, 0, &type metadata for InvertImagesAppEntity.UpdateIntent_value, v40);
  *(_QWORD *)(v34 + v37) = result;
  return result;
}

uint64_t sub_10007831C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100078334, 0, 0);
}

uint64_t sub_100078334()
{
  uint64_t v0;

  sub_100077E80(*(_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10007836C()
{
  unint64_t result;

  result = qword_1000A3EB8;
  if (!qword_1000A3EB8)
  {
    result = swift_getWitnessTable(&unk_10008326C, &type metadata for InvertImagesAppEntity.InvertImagesAppEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1000A3EB8);
  }
  return result;
}

uint64_t sub_1000783B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.allEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100078760();
  *v4 = v2;
  v4[1] = sub_1000609CC;
  return _UniqueEntityQuery.allEntities()(a2, v5);
}

unint64_t sub_10007841C()
{
  unint64_t result;

  result = qword_1000A3EC8;
  if (!qword_1000A3EC8)
  {
    result = swift_getWitnessTable(&unk_1000832C4, &type metadata for InvertImagesAppEntity.InvertImagesAppEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1000A3EC8);
  }
  return result;
}

unint64_t sub_100078464()
{
  unint64_t result;

  result = qword_1000A3ED0;
  if (!qword_1000A3ED0)
  {
    result = swift_getWitnessTable(&unk_100083324, &type metadata for InvertImagesAppEntity.InvertImagesAppEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1000A3ED0);
  }
  return result;
}

uint64_t sub_1000784A8()
{
  return sub_100078900(qword_1000A3ED8, (uint64_t)&unk_100083368);
}

uint64_t sub_1000784CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.entities(for:)[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100078760();
  *v5 = v2;
  v5[1] = sub_100060B4C;
  return _UniqueEntityQuery.entities(for:)(a1, a2, v6);
}

uint64_t sub_100078538(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to _UniqueEntityQuery.suggestedEntities()[1]);
  *(_QWORD *)(v2 + 24) = v4;
  v5 = sub_100078760();
  *v4 = v2;
  v4[1] = sub_100061AF8;
  return _UniqueEntityQuery.suggestedEntities()(a2, v5);
}

unint64_t sub_1000785A4()
{
  unint64_t result;

  result = qword_1000A3EF0;
  if (!qword_1000A3EF0)
  {
    result = swift_getWitnessTable(&unk_10008334C, &type metadata for InvertImagesAppEntity.InvertImagesAppEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1000A3EF0);
  }
  return result;
}

uint64_t sub_1000785E8()
{
  return sub_100078900(&qword_1000A3EF8, (uint64_t)&unk_100083510);
}

unint64_t sub_100078610()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3F00;
  if (!qword_1000A3F00)
  {
    v1 = sub_100005FC0(qword_1000A3F08);
    sub_100078900(&qword_1000A3EF8, (uint64_t)&unk_100083510);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000A3F00);
  }
  return result;
}

uint64_t sub_100078684(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10007836C();
  *v5 = v2;
  v5[1] = sub_100008C64;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_1000786F0()
{
  return sub_100078900(&qword_1000A3F20, (uint64_t)&unk_100083420);
}

uint64_t sub_100078714()
{
  return sub_100078900(&qword_1000A3F28, (uint64_t)&unk_100083458);
}

uint64_t sub_100078738()
{
  return sub_100078900(&qword_1000A3F30, (uint64_t)&unk_100083488);
}

unint64_t sub_100078760()
{
  unint64_t result;

  result = qword_1000A3F38;
  if (!qword_1000A3F38)
  {
    result = swift_getWitnessTable(&unk_1000831F4, &type metadata for InvertImagesAppEntity.InvertImagesAppEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1000A3F38);
  }
  return result;
}

uint64_t sub_1000787A4()
{
  uint64_t v0;

  v0 = qword_1000A3E68;
  swift_bridgeObjectRetain(off_1000A3E70);
  return v0;
}

uint64_t sub_1000787D8()
{
  return sub_100078900(&qword_1000A3F40, (uint64_t)&unk_1000834C0);
}

uint64_t sub_1000787FC()
{
  return sub_100078900(&qword_1000A3F48, (uint64_t)&unk_1000834E8);
}

uint64_t sub_100078820()
{
  return sub_100078900(&qword_1000A3F50, (uint64_t)&unk_100083568);
}

uint64_t sub_100078844@<X0>(uint64_t a1@<X8>)
{
  return sub_100047640(&qword_1000A0758, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000AA3D8, (uint64_t)sub_100077008, a1);
}

uint64_t sub_100078868()
{
  return sub_100007F64(&qword_1000A3F58, &qword_1000A3F60, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_100078894(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100078900(qword_1000A3ED8, (uint64_t)&unk_100083368);
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_1000788DC()
{
  return sub_100078900(&qword_1000A3F68, (uint64_t)&unk_100083598);
}

uint64_t sub_100078900(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for InvertImagesAppEntity(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100078940(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100078900(&qword_1000A3F50, (uint64_t)&unk_100083568);
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

ValueMetadata *type metadata accessor for InvertImagesAppEntity.InvertImagesAppEntityQuery()
{
  return &type metadata for InvertImagesAppEntity.InvertImagesAppEntityQuery;
}

uint64_t sub_100078998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000789A4);
}

uint64_t sub_1000789A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for DisplayRepresentation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100078A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100078A30);
}

uint64_t sub_100078A30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for DisplayRepresentation(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100078AAC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for DisplayRepresentation(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1000835F8;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for InvertImagesAppEntity.UpdateIntent_value()
{
  return &type metadata for InvertImagesAppEntity.UpdateIntent_value;
}

uint64_t sub_100078B3C()
{
  return sub_100007F64(&qword_1000A4008, &qword_1000A4010, (uint64_t)&protocol conformance descriptor for <> IntentResultContainer<A, B, C, D>);
}

uint64_t sub_100078B68()
{
  return sub_100007F64(&qword_1000A4018, &qword_1000A4010, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_100078B94(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 2 * a2;
  type metadata accessor for LocalizedStringResource(0);
  return a1;
}

unint64_t sub_100078BD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A4040;
  if (!qword_1000A4040)
  {
    v1 = objc_opt_self(NSUserDefaults);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000A4040);
  }
  return result;
}

uint64_t sub_100078C14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  void (*v31)(char *);
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  char v39;

  v0 = sub_100005F78(&qword_1000A4048);
  __chkstk_darwin(v0);
  v38 = (char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for InputConnectionBehavior(0);
  v2 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v36 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005F78(&qword_1000A2760);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v30 - v8;
  v10 = sub_100005F78(&qword_1000A4050);
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005F78(&qword_1000A2758);
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocalizedStringResource(0);
  v17 = *(_QWORD *)(v16 - 8);
  v33 = v16;
  __chkstk_darwin(v16);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100005F78(&qword_1000A4058);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000060, 0x800000010007EBD0);
  v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v35(v15, 1, 1, v16);
  v20 = type metadata accessor for InvertImagesAppEntity(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v12, 1, 1, v20);
  v21 = type metadata accessor for IntentDialog(0);
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v22(v9, 1, 1, v21);
  v22(v7, 1, 1, v21);
  v32 = enum case for InputConnectionBehavior.default(_:);
  v31 = *(void (**)(char *))(v2 + 104);
  v24 = v36;
  v23 = v37;
  v31(v36);
  v25 = sub_100078900(qword_1000A3ED8, (uint64_t)&unk_100083368);
  v26 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v19, v15, v12, v9, v7, v24, v25);
  v34 = sub_100005F78(&qword_1000A4060);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000071, 0x800000010007EC40);
  v35(v15, 1, 1, v33);
  v39 = 2;
  v27 = type metadata accessor for Bool.IntentDisplayName(0);
  v28 = v38;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v38, 1, 1, v27);
  v22(v9, 1, 1, v21);
  ((void (*)(char *, _QWORD, uint64_t))v31)(v24, v32, v23);
  IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v19, v15, &v39, v28, v9, v24);
  return v26;
}

uint64_t sub_100078FAC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for InvertImagesAppEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_100078FE8@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for InvertImagesAppEntity(0) + 24));
  *a2 = v3;
  *(_QWORD *)&result = swift_retain(v3).n128_u64[0];
  return result;
}

uint64_t sub_10007901C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F78(&qword_1000A31B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100079064(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InvertImagesAppEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for AccessoryCircularView()
{
  return &type metadata for AccessoryCircularView;
}

uint64_t sub_1000790B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100084CC8, 1);
}

uint64_t sub_1000790C8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;

  v4 = v1[4];
  v3 = v1[5];
  v6 = v1[8];
  v5 = v1[9];
  v7 = v1[16];
  if (v7)
  {
    v8 = v1[15];
    if (v8)
      v9 = 0;
    else
      v9 = v7 == 0xE000000000000000;
    if (v9)
      v10 = 0;
    else
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v7, 0, 0xE000000000000000, 0) ^ 1;
  }
  else
  {
    v10 = 1;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_WORD *)(a1 + 16) = v10 & 1;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRetain(v5);
}

unint64_t sub_100079160()
{
  unint64_t result;

  result = qword_1000A4090;
  if (!qword_1000A4090)
  {
    result = swift_getWitnessTable(&unk_10007FA58, &type metadata for AudioPlayButton);
    atomic_store(result, (unint64_t *)&qword_1000A4090);
  }
  return result;
}

uint64_t *sub_1000791A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    v3 = (uint64_t *)(v19 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for ColorScheme(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
    v11 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
    v12 = v11[5];
    v13 = &v7[v12];
    v14 = &v8[v12];
    v15 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = v11[6];
    v17 = *(_QWORD *)&v8[v16];
    *(_QWORD *)&v7[v16] = v17;
    *(_QWORD *)&v7[v11[7]] = *(_QWORD *)&v8[v11[7]];
    *(_DWORD *)&v7[v11[8]] = *(_DWORD *)&v8[v11[8]];
    v18 = v11[9];
    v19 = *(_QWORD *)&v8[v18];
    *(_QWORD *)&v7[v18] = v19;
    *(_QWORD *)&v7[v11[10]] = *(_QWORD *)&v8[v11[10]];
    *(_QWORD *)&v7[v11[11]] = *(_QWORD *)&v8[v11[11]];
    *(_QWORD *)&v7[v11[12]] = *(_QWORD *)&v8[v11[12]];
    swift_retain(v17);
  }
  swift_retain(v19);
  return v3;
}

uint64_t sub_1000792D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
  v7 = v4 + v6[5];
  v8 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v4 + v6[6]));
  return swift_release(*(_QWORD *)(v4 + v6[9]));
}

_QWORD *sub_10007936C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for ColorScheme(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  v10 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
  v11 = v10[5];
  v12 = &v6[v11];
  v13 = &v7[v11];
  v14 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = v10[6];
  v16 = *(_QWORD *)&v7[v15];
  *(_QWORD *)&v6[v15] = v16;
  *(_QWORD *)&v6[v10[7]] = *(_QWORD *)&v7[v10[7]];
  *(_DWORD *)&v6[v10[8]] = *(_DWORD *)&v7[v10[8]];
  v17 = v10[9];
  v18 = *(_QWORD *)&v7[v17];
  *(_QWORD *)&v6[v17] = v18;
  *(_QWORD *)&v6[v10[10]] = *(_QWORD *)&v7[v10[10]];
  *(_QWORD *)&v6[v10[11]] = *(_QWORD *)&v7[v10[11]];
  *(_QWORD *)&v6[v10[12]] = *(_QWORD *)&v7[v10[12]];
  swift_retain(v16);
  swift_retain(v18);
  return a1;
}

_QWORD *sub_100079474(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
  v13 = v12[5];
  v14 = &v9[v13];
  v15 = &v10[v13];
  v16 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v17 = v12[6];
  v18 = *(_QWORD *)&v10[v17];
  v19 = *(_QWORD *)&v9[v17];
  *(_QWORD *)&v9[v17] = v18;
  swift_retain(v18);
  swift_release(v19);
  *(_QWORD *)&v9[v12[7]] = *(_QWORD *)&v10[v12[7]];
  *(_DWORD *)&v9[v12[8]] = *(_DWORD *)&v10[v12[8]];
  v20 = v12[9];
  v21 = *(_QWORD *)&v10[v20];
  v22 = *(_QWORD *)&v9[v20];
  *(_QWORD *)&v9[v20] = v21;
  swift_retain(v21);
  swift_release(v22);
  *(_QWORD *)&v9[v12[10]] = *(_QWORD *)&v10[v12[10]];
  *(_QWORD *)&v9[v12[11]] = *(_QWORD *)&v10[v12[11]];
  *(_QWORD *)&v9[v12[12]] = *(_QWORD *)&v10[v12[12]];
  return a1;
}

_OWORD *sub_1000795A4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  v8 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
  v9 = v8[5];
  v10 = &v5[v9];
  v11 = &v6[v9];
  v12 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  *(_QWORD *)&v5[v8[6]] = *(_QWORD *)&v6[v8[6]];
  *(_QWORD *)&v5[v8[7]] = *(_QWORD *)&v6[v8[7]];
  *(_DWORD *)&v5[v8[8]] = *(_DWORD *)&v6[v8[8]];
  *(_QWORD *)&v5[v8[9]] = *(_QWORD *)&v6[v8[9]];
  *(_QWORD *)&v5[v8[10]] = *(_QWORD *)&v6[v8[10]];
  *(_QWORD *)&v5[v8[11]] = *(_QWORD *)&v6[v8[11]];
  *(_QWORD *)&v5[v8[12]] = *(_QWORD *)&v6[v8[12]];
  return a1;
}

_QWORD *sub_100079694(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = (int *)type metadata accessor for EmptyStateView.ViewConfiguration(0);
  v13 = v12[5];
  v14 = &v9[v13];
  v15 = &v10[v13];
  v16 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v17 = v12[6];
  v18 = *(_QWORD *)&v9[v17];
  *(_QWORD *)&v9[v17] = *(_QWORD *)&v10[v17];
  swift_release(v18);
  *(_QWORD *)&v9[v12[7]] = *(_QWORD *)&v10[v12[7]];
  *(_DWORD *)&v9[v12[8]] = *(_DWORD *)&v10[v12[8]];
  v19 = v12[9];
  v20 = *(_QWORD *)&v9[v19];
  *(_QWORD *)&v9[v19] = *(_QWORD *)&v10[v19];
  swift_release(v20);
  *(_QWORD *)&v9[v12[10]] = *(_QWORD *)&v10[v12[10]];
  *(_QWORD *)&v9[v12[11]] = *(_QWORD *)&v10[v12[11]];
  *(_QWORD *)&v9[v12[12]] = *(_QWORD *)&v10[v12[12]];
  return a1;
}

uint64_t sub_1000797A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000797B0);
}

uint64_t sub_1000797B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for EmptyStateView.ViewConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10007982C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100079838);
}

uint64_t sub_100079838(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for EmptyStateView.ViewConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MediumEmptyStateView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000A40F0;
  if (!qword_1000A40F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MediumEmptyStateView);
  return result;
}

uint64_t sub_1000798E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1000836F8;
  result = type metadata accessor for EmptyStateView.ViewConfiguration(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10007995C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100084D18, 1);
}

uint64_t sub_10007996C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  char *v17;
  char *v18;
  uint64_t v20;

  v3 = sub_100005F78(&qword_1000A0FA8);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for EmptyStateView.ViewConfiguration(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for EmptyStateView(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v1;
  v12 = v1[1];
  v14 = type metadata accessor for MediumEmptyStateView(0);
  sub_1000209F8((uint64_t)v1 + *(int *)(v14 + 20), (uint64_t)v8);
  *v5 = swift_getKeyPath(&unk_100083760);
  v15 = sub_100005F78(&qword_1000A09A0);
  swift_storeEnumTagMultiPayload(v5, v15, 0);
  KeyPath = swift_getKeyPath(&unk_100083790);
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  v11[32] = 0;
  *(_QWORD *)v11 = KeyPath;
  *((_QWORD *)v11 + 1) = 0;
  sub_100020A48((uint64_t)v5, (uint64_t)&v11[v9[5]]);
  v17 = &v11[v9[6]];
  *(_QWORD *)v17 = v13;
  *((_QWORD *)v17 + 1) = v12;
  v18 = &v11[v9[7]];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  sub_1000112F0((uint64_t)v8, (uint64_t)&v11[v9[8]], type metadata accessor for EmptyStateView.ViewConfiguration);
  sub_1000112F0((uint64_t)v11, a1, type metadata accessor for EmptyStateView);
  return swift_bridgeObjectRetain(v12);
}

ValueMetadata *type metadata accessor for TitleView()
{
  return &type metadata for TitleView;
}

uint64_t sub_100079B38(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100084D5C, 1);
}

double sub_100079B48@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  double result;
  __int128 v56;
  _BYTE v57[4];
  int v58;
  _OWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[128];
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _OWORD v84[2];

  v6 = sub_100005F78(&qword_1000A2028);
  __chkstk_darwin(v6);
  v8 = &v57[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Font.TextStyle(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v57[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a2)
  {
    *(_QWORD *)&v78 = a1;
    *((_QWORD *)&v78 + 1) = a2;
    v14 = sub_1000075E8();
    swift_bridgeObjectRetain(a2);
    v15 = Text.init<A>(_:)(&v78, &type metadata for String, v14);
    v18 = v17;
    v20 = v19;
    v22 = v21;
    if (qword_1000A0778 != -1)
      swift_once(&qword_1000A0778, sub_100079FDC);
    v23 = Text.foregroundColor(_:)(v16);
    v60 = v24;
    v61 = v23;
    v58 = v25;
    v62 = v26;
    sub_1000115B8(v15, v18, v20 & 1);
    swift_bridgeObjectRelease(v22);
    if (qword_1000A0788 != -1)
      swift_once(&qword_1000A0788, sub_10007A014);
    v59 = a3;
    v27 = sub_10000BE14(v9, (uint64_t)qword_1000A4138);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v13, v27, v9);
    v28 = _s20BooksWidgetExtension16FallBackFontSpecV03usedeF0SbyFZ_0();
    v29 = type metadata accessor for Font.Design(0);
    v30 = *(_QWORD *)(v29 - 8);
    v31 = (unsigned int *)&enum case for Font.Design.default(_:);
    if ((v28 & 1) == 0)
      v31 = (unsigned int *)&enum case for Font.Design.serif (_:);
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v30 + 104))(v8, *v31, v29);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v8, 0, 1, v29);
    v32 = static Font.system(_:design:weight:)(v13, v8, 0, 1);
    sub_10007A128((uint64_t)v8);
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
    if (qword_1000A0780 != -1)
      swift_once(&qword_1000A0780, sub_100079FF8);
    v33 = Font.weight(_:)(v32, *(double *)&qword_1000A4130);
    swift_release(v32);
    v34 = v58 & 1;
    v35 = v60;
    v36 = v61;
    v37 = v62;
    v38 = Text.font(_:)(v33, v61, v60, v58 & 1, v62);
    v40 = v39;
    v42 = v41;
    v44 = v43;
    swift_release(v33);
    sub_1000115B8(v36, v35, v34);
    swift_bridgeObjectRelease(v37);
    v64 = v38;
    v65 = v40;
    v66 = v42 & 1;
    v67 = v44;
    sub_10000BA70((uint64_t)&v64);
    sub_10007A074((uint64_t)&v64, (uint64_t)v63);
    v45 = sub_100005F78(&qword_1000A3818);
    v46 = sub_10007A0BC();
    _ConditionalContent<>.init(storage:)(v63, &type metadata for Text, v45, &protocol witness table for Text, v46);
    a3 = v59;
  }
  else
  {
    v47 = static HierarchicalShapeStyle.primary.getter(v11);
    v48 = v47;
    v49 = static Alignment.center.getter(v47);
    sub_100021588(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v78, 0.0, 1, 0.0, 1, v49, v50, v48);
    LODWORD(v64) = v78;
    v65 = *((_QWORD *)&v78 + 1);
    v66 = v79;
    v67 = *((_QWORD *)&v79 + 1);
    v68 = v80;
    v69 = *((_QWORD *)&v80 + 1);
    v70 = v81;
    v71 = *((_QWORD *)&v81 + 1);
    v72 = v82;
    v73 = *((_QWORD *)&v82 + 1);
    v74 = v83;
    v75 = *((_QWORD *)&v83 + 1);
    v76 = v84[0];
    v77 = *(_OWORD *)((char *)v84 + 8);
    sub_10000BA24((uint64_t)&v64);
    sub_10007A074((uint64_t)&v64, (uint64_t)v63);
    v51 = sub_100005F78(&qword_1000A3818);
    v52 = sub_10007A0BC();
    _ConditionalContent<>.init(storage:)(v63, &type metadata for Text, v51, &protocol witness table for Text, v52);
  }
  v53 = v83;
  a3[4] = v82;
  a3[5] = v53;
  a3[6] = v84[0];
  *(_OWORD *)((char *)a3 + 105) = *(_OWORD *)((char *)v84 + 9);
  v54 = v79;
  *a3 = v78;
  a3[1] = v54;
  result = *(double *)&v80;
  v56 = v81;
  a3[2] = v80;
  a3[3] = v56;
  return result;
}

uint64_t sub_100079FDC()
{
  uint64_t result;

  result = static Color.white.getter();
  qword_1000A4128 = result;
  return result;
}

void sub_100079FF8()
{
  qword_1000A4130 = static Font.Weight.semibold.getter();
}

uint64_t sub_10007A014()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Font.TextStyle(0);
  sub_10000C090(v0, qword_1000A4138);
  v1 = sub_10000BE14(v0, (uint64_t)qword_1000A4138);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for Font.TextStyle.subheadline(_:), v0);
}

double sub_10007A06C@<D0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_100079B48(*v1, v1[1], a1);
}

uint64_t sub_10007A074(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005F78(&qword_1000A4150);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10007A0BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A3820;
  if (!qword_1000A3820)
  {
    v1 = sub_100005FC0(&qword_1000A3818);
    sub_100056640();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A3820);
  }
  return result;
}

uint64_t sub_10007A128(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005F78(&qword_1000A2028);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10007A16C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A4158;
  if (!qword_1000A4158)
  {
    v1 = sub_100005FC0(&qword_1000A4160);
    sub_10007A0BC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A4158);
  }
  return result;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC20BooksWidgetExtensionP33_82CBBF7435508B6F826BCD7B24A2602A19ResourceBundleClass);
}
